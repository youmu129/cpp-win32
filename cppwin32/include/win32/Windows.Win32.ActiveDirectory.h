// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_ActiveDirectory_H
#define WIN32_Windows_Win32_ActiveDirectory_H
#include "win32/base.h"
static_assert(win32::check_version(CPPWIN32_VERSION, "0.0.0.1"), "Mismatched C++/Win32 headers.");
#define CPPWIN32_VERSION "0.0.0.1"
#include "win32/impl/Windows.Win32.ActiveDirectory.2.h"
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
#pragma region methods
    inline int32_t ADsGetObject(uint16_t* lpszPathName, ::win32::guid* riid, void** ppObject)
    {
        auto win32_impl_result = WIN32_IMPL_ADsGetObject(lpszPathName, riid, ppObject);
        return win32_impl_result;
    }
    inline int32_t ADsBuildEnumerator(Windows::Win32::ActiveDirectory::IADsContainer* pADsContainer, Windows::Win32::Automation::IEnumVARIANT** ppEnumVariant)
    {
        auto win32_impl_result = WIN32_IMPL_ADsBuildEnumerator(pADsContainer, ppEnumVariant);
        return win32_impl_result;
    }
    inline int32_t ADsFreeEnumerator(Windows::Win32::Automation::IEnumVARIANT* pEnumVariant)
    {
        auto win32_impl_result = WIN32_IMPL_ADsFreeEnumerator(pEnumVariant);
        return win32_impl_result;
    }
    inline int32_t ADsEnumerateNext(Windows::Win32::Automation::IEnumVARIANT* pEnumVariant, uint32_t cElements, Windows::Win32::Automation::VARIANT* pvar, uint32_t* pcElementsFetched)
    {
        auto win32_impl_result = WIN32_IMPL_ADsEnumerateNext(pEnumVariant, cElements, pvar, pcElementsFetched);
        return win32_impl_result;
    }
    inline int32_t ADsBuildVarArrayStr(uint16_t** lppPathNames, uint32_t dwPathNames, Windows::Win32::Automation::VARIANT* pVar)
    {
        auto win32_impl_result = WIN32_IMPL_ADsBuildVarArrayStr(lppPathNames, dwPathNames, pVar);
        return win32_impl_result;
    }
    inline int32_t ADsBuildVarArrayInt(uint32_t* lpdwObjectTypes, uint32_t dwObjectTypes, Windows::Win32::Automation::VARIANT* pVar)
    {
        auto win32_impl_result = WIN32_IMPL_ADsBuildVarArrayInt(lpdwObjectTypes, dwObjectTypes, pVar);
        return win32_impl_result;
    }
    inline int32_t ADsOpenObject(uint16_t* lpszPathName, uint16_t* lpszUserName, uint16_t* lpszPassword, uint32_t dwReserved, ::win32::guid* riid, void** ppObject)
    {
        auto win32_impl_result = WIN32_IMPL_ADsOpenObject(lpszPathName, lpszUserName, lpszPassword, dwReserved, riid, ppObject);
        return win32_impl_result;
    }
    inline int32_t ADsGetLastError(uint32_t* lpError, uint16_t* lpErrorBuf, uint32_t dwErrorBufLen, uint16_t* lpNameBuf, uint32_t dwNameBufLen)
    {
        auto win32_impl_result = WIN32_IMPL_ADsGetLastError(lpError, lpErrorBuf, dwErrorBufLen, lpNameBuf, dwNameBufLen);
        return win32_impl_result;
    }
    inline void ADsSetLastError(uint32_t dwErr, uint16_t* pszError, uint16_t* pszProvider)
    {
        WIN32_IMPL_ADsSetLastError(dwErr, pszError, pszProvider);
    }
    inline void* AllocADsMem(uint32_t cb)
    {
        auto win32_impl_result = WIN32_IMPL_AllocADsMem(cb);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL FreeADsMem(void* pMem)
    {
        auto win32_impl_result = WIN32_IMPL_FreeADsMem(pMem);
        return win32_impl_result;
    }
    inline void* ReallocADsMem(void* pOldMem, uint32_t cbOld, uint32_t cbNew)
    {
        auto win32_impl_result = WIN32_IMPL_ReallocADsMem(pOldMem, cbOld, cbNew);
        return win32_impl_result;
    }
    inline uint16_t* AllocADsStr(uint16_t* pStr)
    {
        auto win32_impl_result = WIN32_IMPL_AllocADsStr(pStr);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL FreeADsStr(uint16_t* pStr)
    {
        auto win32_impl_result = WIN32_IMPL_FreeADsStr(pStr);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ReallocADsStr(uint16_t** ppStr, uint16_t* pStr)
    {
        auto win32_impl_result = WIN32_IMPL_ReallocADsStr(ppStr, pStr);
        return win32_impl_result;
    }
    inline int32_t ADsEncodeBinaryData(uint8_t* pbSrcData, uint32_t dwSrcLen, uint16_t** ppszDestData)
    {
        auto win32_impl_result = WIN32_IMPL_ADsEncodeBinaryData(pbSrcData, dwSrcLen, ppszDestData);
        return win32_impl_result;
    }
    inline int32_t ADsDecodeBinaryData(uint16_t* szSrcData, uint8_t** ppbDestData, uint32_t* pdwDestLen)
    {
        auto win32_impl_result = WIN32_IMPL_ADsDecodeBinaryData(szSrcData, ppbDestData, pdwDestLen);
        return win32_impl_result;
    }
    inline int32_t PropVariantToAdsType(Windows::Win32::Automation::VARIANT* pVariant, uint32_t dwNumVariant, Windows::Win32::ActiveDirectory::ADSVALUE** ppAdsValues, uint32_t* pdwNumValues)
    {
        auto win32_impl_result = WIN32_IMPL_PropVariantToAdsType(pVariant, dwNumVariant, ppAdsValues, pdwNumValues);
        return win32_impl_result;
    }
    inline int32_t AdsTypeToPropVariant(Windows::Win32::ActiveDirectory::ADSVALUE* pAdsValues, uint32_t dwNumValues, Windows::Win32::Automation::VARIANT* pVariant)
    {
        auto win32_impl_result = WIN32_IMPL_AdsTypeToPropVariant(pAdsValues, dwNumValues, pVariant);
        return win32_impl_result;
    }
    inline void AdsFreeAdsValues(Windows::Win32::ActiveDirectory::ADSVALUE* pAdsValues, uint32_t dwNumValues)
    {
        WIN32_IMPL_AdsFreeAdsValues(pAdsValues, dwNumValues);
    }
    inline int32_t BinarySDToSecurityDescriptor(void* pSecurityDescriptor, Windows::Win32::Automation::VARIANT* pVarsec, uint16_t* pszServerName, uint16_t* userName, uint16_t* passWord, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_BinarySDToSecurityDescriptor(pSecurityDescriptor, pVarsec, pszServerName, userName, passWord, dwFlags);
        return win32_impl_result;
    }
    inline int32_t SecurityDescriptorToBinarySD(Windows::Win32::Automation::VARIANT vVarSecDes, void** ppSecurityDescriptor, uint32_t* pdwSDLength, uint16_t* pszServerName, uint16_t* userName, uint16_t* passWord, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_SecurityDescriptorToBinarySD(vVarSecDes, ppSecurityDescriptor, pdwSDLength, pszServerName, userName, passWord, dwFlags);
        return win32_impl_result;
    }
    inline int32_t DsBrowseForContainerW(Windows::Win32::ActiveDirectory::DSBROWSEINFOW* pInfo)
    {
        auto win32_impl_result = WIN32_IMPL_DsBrowseForContainerW(pInfo);
        return win32_impl_result;
    }
    inline int32_t DsBrowseForContainerA(Windows::Win32::ActiveDirectory::DSBROWSEINFOA* pInfo)
    {
        auto win32_impl_result = WIN32_IMPL_DsBrowseForContainerA(pInfo);
        return win32_impl_result;
    }
    inline Windows::Win32::Gdi::HICON DsGetIcon(uint32_t dwFlags, uint16_t* pszObjectClass, int32_t cxImage, int32_t cyImage)
    {
        auto win32_impl_result = WIN32_IMPL_DsGetIcon(dwFlags, pszObjectClass, cxImage, cyImage);
        return win32_impl_result;
    }
    inline int32_t DsGetFriendlyClassName(uint16_t* pszObjectClass, uint16_t* pszBuffer, uint32_t cchBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_DsGetFriendlyClassName(pszObjectClass, pszBuffer, cchBuffer);
        return win32_impl_result;
    }
    inline int32_t ADsPropCreateNotifyObj(Windows::Win32::Com::IDataObject* pAppThdDataObj, uint16_t* pwzADsObjName, Windows::Win32::WindowsAndMessaging::HWND* phNotifyObj)
    {
        auto win32_impl_result = WIN32_IMPL_ADsPropCreateNotifyObj(pAppThdDataObj, pwzADsObjName, phNotifyObj);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ADsPropGetInitInfo(Windows::Win32::WindowsAndMessaging::HWND hNotifyObj, Windows::Win32::ActiveDirectory::ADSPROPINITPARAMS* pInitParams)
    {
        auto win32_impl_result = WIN32_IMPL_ADsPropGetInitInfo(hNotifyObj, pInitParams);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ADsPropSetHwndWithTitle(Windows::Win32::WindowsAndMessaging::HWND hNotifyObj, Windows::Win32::WindowsAndMessaging::HWND hPage, int8_t* ptzTitle)
    {
        auto win32_impl_result = WIN32_IMPL_ADsPropSetHwndWithTitle(hNotifyObj, hPage, ptzTitle);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ADsPropSetHwnd(Windows::Win32::WindowsAndMessaging::HWND hNotifyObj, Windows::Win32::WindowsAndMessaging::HWND hPage)
    {
        auto win32_impl_result = WIN32_IMPL_ADsPropSetHwnd(hNotifyObj, hPage);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ADsPropCheckIfWritable(uint16_t* pwzAttr, Windows::Win32::ActiveDirectory::ADS_ATTR_INFO* pWritableAttrs)
    {
        auto win32_impl_result = WIN32_IMPL_ADsPropCheckIfWritable(pwzAttr, pWritableAttrs);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ADsPropSendErrorMessage(Windows::Win32::WindowsAndMessaging::HWND hNotifyObj, Windows::Win32::ActiveDirectory::ADSPROPERROR* pError)
    {
        auto win32_impl_result = WIN32_IMPL_ADsPropSendErrorMessage(hNotifyObj, pError);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ADsPropShowErrorDialog(Windows::Win32::WindowsAndMessaging::HWND hNotifyObj, Windows::Win32::WindowsAndMessaging::HWND hPage)
    {
        auto win32_impl_result = WIN32_IMPL_ADsPropShowErrorDialog(hNotifyObj, hPage);
        return win32_impl_result;
    }
    inline uint32_t DsMakeSpnW(uint16_t* ServiceClass, uint16_t* ServiceName, uint16_t* InstanceName, uint16_t InstancePort, uint16_t* Referrer, uint32_t* pcSpnLength, uint16_t* pszSpn)
    {
        auto win32_impl_result = WIN32_IMPL_DsMakeSpnW(ServiceClass, ServiceName, InstanceName, InstancePort, Referrer, pcSpnLength, pszSpn);
        return win32_impl_result;
    }
    inline uint32_t DsMakeSpnA(int8_t* ServiceClass, int8_t* ServiceName, int8_t* InstanceName, uint16_t InstancePort, int8_t* Referrer, uint32_t* pcSpnLength, int8_t* pszSpn)
    {
        auto win32_impl_result = WIN32_IMPL_DsMakeSpnA(ServiceClass, ServiceName, InstanceName, InstancePort, Referrer, pcSpnLength, pszSpn);
        return win32_impl_result;
    }
    inline uint32_t DsCrackSpnA(int8_t* pszSpn, uint32_t* pcServiceClass, int8_t* ServiceClass, uint32_t* pcServiceName, int8_t* ServiceName, uint32_t* pcInstanceName, int8_t* InstanceName, uint16_t* pInstancePort)
    {
        auto win32_impl_result = WIN32_IMPL_DsCrackSpnA(pszSpn, pcServiceClass, ServiceClass, pcServiceName, ServiceName, pcInstanceName, InstanceName, pInstancePort);
        return win32_impl_result;
    }
    inline uint32_t DsCrackSpnW(uint16_t* pszSpn, uint32_t* pcServiceClass, uint16_t* ServiceClass, uint32_t* pcServiceName, uint16_t* ServiceName, uint32_t* pcInstanceName, uint16_t* InstanceName, uint16_t* pInstancePort)
    {
        auto win32_impl_result = WIN32_IMPL_DsCrackSpnW(pszSpn, pcServiceClass, ServiceClass, pcServiceName, ServiceName, pcInstanceName, InstanceName, pInstancePort);
        return win32_impl_result;
    }
    inline uint32_t DsQuoteRdnValueW(uint32_t cUnquotedRdnValueLength, uint16_t* psUnquotedRdnValue, uint32_t* pcQuotedRdnValueLength, uint16_t* psQuotedRdnValue)
    {
        auto win32_impl_result = WIN32_IMPL_DsQuoteRdnValueW(cUnquotedRdnValueLength, psUnquotedRdnValue, pcQuotedRdnValueLength, psQuotedRdnValue);
        return win32_impl_result;
    }
    inline uint32_t DsQuoteRdnValueA(uint32_t cUnquotedRdnValueLength, int8_t* psUnquotedRdnValue, uint32_t* pcQuotedRdnValueLength, int8_t* psQuotedRdnValue)
    {
        auto win32_impl_result = WIN32_IMPL_DsQuoteRdnValueA(cUnquotedRdnValueLength, psUnquotedRdnValue, pcQuotedRdnValueLength, psQuotedRdnValue);
        return win32_impl_result;
    }
    inline uint32_t DsUnquoteRdnValueW(uint32_t cQuotedRdnValueLength, uint16_t* psQuotedRdnValue, uint32_t* pcUnquotedRdnValueLength, uint16_t* psUnquotedRdnValue)
    {
        auto win32_impl_result = WIN32_IMPL_DsUnquoteRdnValueW(cQuotedRdnValueLength, psQuotedRdnValue, pcUnquotedRdnValueLength, psUnquotedRdnValue);
        return win32_impl_result;
    }
    inline uint32_t DsUnquoteRdnValueA(uint32_t cQuotedRdnValueLength, int8_t* psQuotedRdnValue, uint32_t* pcUnquotedRdnValueLength, int8_t* psUnquotedRdnValue)
    {
        auto win32_impl_result = WIN32_IMPL_DsUnquoteRdnValueA(cQuotedRdnValueLength, psQuotedRdnValue, pcUnquotedRdnValueLength, psUnquotedRdnValue);
        return win32_impl_result;
    }
    inline uint32_t DsGetRdnW(uint16_t** ppDN, uint32_t* pcDN, uint16_t** ppKey, uint32_t* pcKey, uint16_t** ppVal, uint32_t* pcVal)
    {
        auto win32_impl_result = WIN32_IMPL_DsGetRdnW(ppDN, pcDN, ppKey, pcKey, ppVal, pcVal);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL DsCrackUnquotedMangledRdnW(uint16_t* pszRDN, uint32_t cchRDN, ::win32::guid* pGuid, Windows::Win32::ActiveDirectory::DS_MANGLE_FOR* peDsMangleFor)
    {
        auto win32_impl_result = WIN32_IMPL_DsCrackUnquotedMangledRdnW(pszRDN, cchRDN, pGuid, peDsMangleFor);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL DsCrackUnquotedMangledRdnA(int8_t* pszRDN, uint32_t cchRDN, ::win32::guid* pGuid, Windows::Win32::ActiveDirectory::DS_MANGLE_FOR* peDsMangleFor)
    {
        auto win32_impl_result = WIN32_IMPL_DsCrackUnquotedMangledRdnA(pszRDN, cchRDN, pGuid, peDsMangleFor);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL DsIsMangledRdnValueW(uint16_t* pszRdn, uint32_t cRdn, Windows::Win32::ActiveDirectory::DS_MANGLE_FOR eDsMangleForDesired)
    {
        auto win32_impl_result = WIN32_IMPL_DsIsMangledRdnValueW(pszRdn, cRdn, eDsMangleForDesired);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL DsIsMangledRdnValueA(int8_t* pszRdn, uint32_t cRdn, Windows::Win32::ActiveDirectory::DS_MANGLE_FOR eDsMangleForDesired)
    {
        auto win32_impl_result = WIN32_IMPL_DsIsMangledRdnValueA(pszRdn, cRdn, eDsMangleForDesired);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL DsIsMangledDnA(int8_t* pszDn, Windows::Win32::ActiveDirectory::DS_MANGLE_FOR eDsMangleFor)
    {
        auto win32_impl_result = WIN32_IMPL_DsIsMangledDnA(pszDn, eDsMangleFor);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL DsIsMangledDnW(uint16_t* pszDn, Windows::Win32::ActiveDirectory::DS_MANGLE_FOR eDsMangleFor)
    {
        auto win32_impl_result = WIN32_IMPL_DsIsMangledDnW(pszDn, eDsMangleFor);
        return win32_impl_result;
    }
    inline uint32_t DsCrackSpn2A(int8_t* pszSpn, uint32_t cSpn, uint32_t* pcServiceClass, int8_t* ServiceClass, uint32_t* pcServiceName, int8_t* ServiceName, uint32_t* pcInstanceName, int8_t* InstanceName, uint16_t* pInstancePort)
    {
        auto win32_impl_result = WIN32_IMPL_DsCrackSpn2A(pszSpn, cSpn, pcServiceClass, ServiceClass, pcServiceName, ServiceName, pcInstanceName, InstanceName, pInstancePort);
        return win32_impl_result;
    }
    inline uint32_t DsCrackSpn2W(uint16_t* pszSpn, uint32_t cSpn, uint32_t* pcServiceClass, uint16_t* ServiceClass, uint32_t* pcServiceName, uint16_t* ServiceName, uint32_t* pcInstanceName, uint16_t* InstanceName, uint16_t* pInstancePort)
    {
        auto win32_impl_result = WIN32_IMPL_DsCrackSpn2W(pszSpn, cSpn, pcServiceClass, ServiceClass, pcServiceName, ServiceName, pcInstanceName, InstanceName, pInstancePort);
        return win32_impl_result;
    }
    inline uint32_t DsCrackSpn3W(uint16_t* pszSpn, uint32_t cSpn, uint32_t* pcHostName, uint16_t* HostName, uint32_t* pcInstanceName, uint16_t* InstanceName, uint16_t* pPortNumber, uint32_t* pcDomainName, uint16_t* DomainName, uint32_t* pcRealmName, uint16_t* RealmName)
    {
        auto win32_impl_result = WIN32_IMPL_DsCrackSpn3W(pszSpn, cSpn, pcHostName, HostName, pcInstanceName, InstanceName, pPortNumber, pcDomainName, DomainName, pcRealmName, RealmName);
        return win32_impl_result;
    }
    inline uint32_t DsCrackSpn4W(uint16_t* pszSpn, uint32_t cSpn, uint32_t* pcHostName, uint16_t* HostName, uint32_t* pcInstanceName, uint16_t* InstanceName, uint32_t* pcPortName, uint16_t* PortName, uint32_t* pcDomainName, uint16_t* DomainName, uint32_t* pcRealmName, uint16_t* RealmName)
    {
        auto win32_impl_result = WIN32_IMPL_DsCrackSpn4W(pszSpn, cSpn, pcHostName, HostName, pcInstanceName, InstanceName, pcPortName, PortName, pcDomainName, DomainName, pcRealmName, RealmName);
        return win32_impl_result;
    }
    inline uint32_t DsBindW(uint16_t* DomainControllerName, uint16_t* DnsDomainName, Windows::Win32::SystemServices::HANDLE* phDS)
    {
        auto win32_impl_result = WIN32_IMPL_DsBindW(DomainControllerName, DnsDomainName, phDS);
        return win32_impl_result;
    }
    inline uint32_t DsBindA(int8_t* DomainControllerName, int8_t* DnsDomainName, Windows::Win32::SystemServices::HANDLE* phDS)
    {
        auto win32_impl_result = WIN32_IMPL_DsBindA(DomainControllerName, DnsDomainName, phDS);
        return win32_impl_result;
    }
    inline uint32_t DsBindWithCredW(uint16_t* DomainControllerName, uint16_t* DnsDomainName, void* AuthIdentity, Windows::Win32::SystemServices::HANDLE* phDS)
    {
        auto win32_impl_result = WIN32_IMPL_DsBindWithCredW(DomainControllerName, DnsDomainName, AuthIdentity, phDS);
        return win32_impl_result;
    }
    inline uint32_t DsBindWithCredA(int8_t* DomainControllerName, int8_t* DnsDomainName, void* AuthIdentity, Windows::Win32::SystemServices::HANDLE* phDS)
    {
        auto win32_impl_result = WIN32_IMPL_DsBindWithCredA(DomainControllerName, DnsDomainName, AuthIdentity, phDS);
        return win32_impl_result;
    }
    inline uint32_t DsBindWithSpnW(uint16_t* DomainControllerName, uint16_t* DnsDomainName, void* AuthIdentity, uint16_t* ServicePrincipalName, Windows::Win32::SystemServices::HANDLE* phDS)
    {
        auto win32_impl_result = WIN32_IMPL_DsBindWithSpnW(DomainControllerName, DnsDomainName, AuthIdentity, ServicePrincipalName, phDS);
        return win32_impl_result;
    }
    inline uint32_t DsBindWithSpnA(int8_t* DomainControllerName, int8_t* DnsDomainName, void* AuthIdentity, int8_t* ServicePrincipalName, Windows::Win32::SystemServices::HANDLE* phDS)
    {
        auto win32_impl_result = WIN32_IMPL_DsBindWithSpnA(DomainControllerName, DnsDomainName, AuthIdentity, ServicePrincipalName, phDS);
        return win32_impl_result;
    }
    inline uint32_t DsBindWithSpnExW(uint16_t* DomainControllerName, uint16_t* DnsDomainName, void* AuthIdentity, uint16_t* ServicePrincipalName, uint32_t BindFlags, Windows::Win32::SystemServices::HANDLE* phDS)
    {
        auto win32_impl_result = WIN32_IMPL_DsBindWithSpnExW(DomainControllerName, DnsDomainName, AuthIdentity, ServicePrincipalName, BindFlags, phDS);
        return win32_impl_result;
    }
    inline uint32_t DsBindWithSpnExA(int8_t* DomainControllerName, int8_t* DnsDomainName, void* AuthIdentity, int8_t* ServicePrincipalName, uint32_t BindFlags, Windows::Win32::SystemServices::HANDLE* phDS)
    {
        auto win32_impl_result = WIN32_IMPL_DsBindWithSpnExA(DomainControllerName, DnsDomainName, AuthIdentity, ServicePrincipalName, BindFlags, phDS);
        return win32_impl_result;
    }
    inline uint32_t DsBindByInstanceW(uint16_t* ServerName, uint16_t* Annotation, ::win32::guid* InstanceGuid, uint16_t* DnsDomainName, void* AuthIdentity, uint16_t* ServicePrincipalName, uint32_t BindFlags, Windows::Win32::SystemServices::HANDLE* phDS)
    {
        auto win32_impl_result = WIN32_IMPL_DsBindByInstanceW(ServerName, Annotation, InstanceGuid, DnsDomainName, AuthIdentity, ServicePrincipalName, BindFlags, phDS);
        return win32_impl_result;
    }
    inline uint32_t DsBindByInstanceA(int8_t* ServerName, int8_t* Annotation, ::win32::guid* InstanceGuid, int8_t* DnsDomainName, void* AuthIdentity, int8_t* ServicePrincipalName, uint32_t BindFlags, Windows::Win32::SystemServices::HANDLE* phDS)
    {
        auto win32_impl_result = WIN32_IMPL_DsBindByInstanceA(ServerName, Annotation, InstanceGuid, DnsDomainName, AuthIdentity, ServicePrincipalName, BindFlags, phDS);
        return win32_impl_result;
    }
    inline uint32_t DsBindToISTGW(uint16_t* SiteName, Windows::Win32::SystemServices::HANDLE* phDS)
    {
        auto win32_impl_result = WIN32_IMPL_DsBindToISTGW(SiteName, phDS);
        return win32_impl_result;
    }
    inline uint32_t DsBindToISTGA(int8_t* SiteName, Windows::Win32::SystemServices::HANDLE* phDS)
    {
        auto win32_impl_result = WIN32_IMPL_DsBindToISTGA(SiteName, phDS);
        return win32_impl_result;
    }
    inline uint32_t DsBindingSetTimeout(Windows::Win32::SystemServices::HANDLE hDS, uint32_t cTimeoutSecs)
    {
        auto win32_impl_result = WIN32_IMPL_DsBindingSetTimeout(hDS, cTimeoutSecs);
        return win32_impl_result;
    }
    inline uint32_t DsUnBindW(Windows::Win32::SystemServices::HANDLE* phDS)
    {
        auto win32_impl_result = WIN32_IMPL_DsUnBindW(phDS);
        return win32_impl_result;
    }
    inline uint32_t DsUnBindA(Windows::Win32::SystemServices::HANDLE* phDS)
    {
        auto win32_impl_result = WIN32_IMPL_DsUnBindA(phDS);
        return win32_impl_result;
    }
    inline uint32_t DsMakePasswordCredentialsW(uint16_t* User, uint16_t* Domain, uint16_t* Password, void** pAuthIdentity)
    {
        auto win32_impl_result = WIN32_IMPL_DsMakePasswordCredentialsW(User, Domain, Password, pAuthIdentity);
        return win32_impl_result;
    }
    inline uint32_t DsMakePasswordCredentialsA(int8_t* User, int8_t* Domain, int8_t* Password, void** pAuthIdentity)
    {
        auto win32_impl_result = WIN32_IMPL_DsMakePasswordCredentialsA(User, Domain, Password, pAuthIdentity);
        return win32_impl_result;
    }
    inline void DsFreePasswordCredentials(void* AuthIdentity)
    {
        WIN32_IMPL_DsFreePasswordCredentials(AuthIdentity);
    }
    inline uint32_t DsCrackNamesW(Windows::Win32::SystemServices::HANDLE hDS, Windows::Win32::ActiveDirectory::DS_NAME_FLAGS flags, Windows::Win32::ActiveDirectory::DS_NAME_FORMAT formatOffered, Windows::Win32::ActiveDirectory::DS_NAME_FORMAT formatDesired, uint32_t cNames, uint16_t** rpNames, Windows::Win32::ActiveDirectory::DS_NAME_RESULTW** ppResult)
    {
        auto win32_impl_result = WIN32_IMPL_DsCrackNamesW(hDS, flags, formatOffered, formatDesired, cNames, rpNames, ppResult);
        return win32_impl_result;
    }
    inline uint32_t DsCrackNamesA(Windows::Win32::SystemServices::HANDLE hDS, Windows::Win32::ActiveDirectory::DS_NAME_FLAGS flags, Windows::Win32::ActiveDirectory::DS_NAME_FORMAT formatOffered, Windows::Win32::ActiveDirectory::DS_NAME_FORMAT formatDesired, uint32_t cNames, int8_t** rpNames, Windows::Win32::ActiveDirectory::DS_NAME_RESULTA** ppResult)
    {
        auto win32_impl_result = WIN32_IMPL_DsCrackNamesA(hDS, flags, formatOffered, formatDesired, cNames, rpNames, ppResult);
        return win32_impl_result;
    }
    inline void DsFreeNameResultW(Windows::Win32::ActiveDirectory::DS_NAME_RESULTW* pResult)
    {
        WIN32_IMPL_DsFreeNameResultW(pResult);
    }
    inline void DsFreeNameResultA(Windows::Win32::ActiveDirectory::DS_NAME_RESULTA* pResult)
    {
        WIN32_IMPL_DsFreeNameResultA(pResult);
    }
    inline uint32_t DsGetSpnA(Windows::Win32::ActiveDirectory::DS_SPN_NAME_TYPE ServiceType, int8_t* ServiceClass, int8_t* ServiceName, uint16_t InstancePort, uint16_t cInstanceNames, int8_t** pInstanceNames, uint16_t* pInstancePorts, uint32_t* pcSpn, int8_t*** prpszSpn)
    {
        auto win32_impl_result = WIN32_IMPL_DsGetSpnA(ServiceType, ServiceClass, ServiceName, InstancePort, cInstanceNames, pInstanceNames, pInstancePorts, pcSpn, prpszSpn);
        return win32_impl_result;
    }
    inline uint32_t DsGetSpnW(Windows::Win32::ActiveDirectory::DS_SPN_NAME_TYPE ServiceType, uint16_t* ServiceClass, uint16_t* ServiceName, uint16_t InstancePort, uint16_t cInstanceNames, uint16_t** pInstanceNames, uint16_t* pInstancePorts, uint32_t* pcSpn, uint16_t*** prpszSpn)
    {
        auto win32_impl_result = WIN32_IMPL_DsGetSpnW(ServiceType, ServiceClass, ServiceName, InstancePort, cInstanceNames, pInstanceNames, pInstancePorts, pcSpn, prpszSpn);
        return win32_impl_result;
    }
    inline void DsFreeSpnArrayA(uint32_t cSpn, int8_t** rpszSpn)
    {
        WIN32_IMPL_DsFreeSpnArrayA(cSpn, rpszSpn);
    }
    inline void DsFreeSpnArrayW(uint32_t cSpn, uint16_t** rpszSpn)
    {
        WIN32_IMPL_DsFreeSpnArrayW(cSpn, rpszSpn);
    }
    inline uint32_t DsWriteAccountSpnA(Windows::Win32::SystemServices::HANDLE hDS, Windows::Win32::ActiveDirectory::DS_SPN_WRITE_OP Operation, int8_t* pszAccount, uint32_t cSpn, int8_t** rpszSpn)
    {
        auto win32_impl_result = WIN32_IMPL_DsWriteAccountSpnA(hDS, Operation, pszAccount, cSpn, rpszSpn);
        return win32_impl_result;
    }
    inline uint32_t DsWriteAccountSpnW(Windows::Win32::SystemServices::HANDLE hDS, Windows::Win32::ActiveDirectory::DS_SPN_WRITE_OP Operation, uint16_t* pszAccount, uint32_t cSpn, uint16_t** rpszSpn)
    {
        auto win32_impl_result = WIN32_IMPL_DsWriteAccountSpnW(hDS, Operation, pszAccount, cSpn, rpszSpn);
        return win32_impl_result;
    }
    inline uint32_t DsClientMakeSpnForTargetServerW(uint16_t* ServiceClass, uint16_t* ServiceName, uint32_t* pcSpnLength, uint16_t* pszSpn)
    {
        auto win32_impl_result = WIN32_IMPL_DsClientMakeSpnForTargetServerW(ServiceClass, ServiceName, pcSpnLength, pszSpn);
        return win32_impl_result;
    }
    inline uint32_t DsClientMakeSpnForTargetServerA(int8_t* ServiceClass, int8_t* ServiceName, uint32_t* pcSpnLength, int8_t* pszSpn)
    {
        auto win32_impl_result = WIN32_IMPL_DsClientMakeSpnForTargetServerA(ServiceClass, ServiceName, pcSpnLength, pszSpn);
        return win32_impl_result;
    }
    inline uint32_t DsServerRegisterSpnA(Windows::Win32::ActiveDirectory::DS_SPN_WRITE_OP Operation, int8_t* ServiceClass, int8_t* UserObjectDN)
    {
        auto win32_impl_result = WIN32_IMPL_DsServerRegisterSpnA(Operation, ServiceClass, UserObjectDN);
        return win32_impl_result;
    }
    inline uint32_t DsServerRegisterSpnW(Windows::Win32::ActiveDirectory::DS_SPN_WRITE_OP Operation, uint16_t* ServiceClass, uint16_t* UserObjectDN)
    {
        auto win32_impl_result = WIN32_IMPL_DsServerRegisterSpnW(Operation, ServiceClass, UserObjectDN);
        return win32_impl_result;
    }
    inline uint32_t DsReplicaSyncA(Windows::Win32::SystemServices::HANDLE hDS, int8_t* NameContext, ::win32::guid* pUuidDsaSrc, uint32_t Options)
    {
        auto win32_impl_result = WIN32_IMPL_DsReplicaSyncA(hDS, NameContext, pUuidDsaSrc, Options);
        return win32_impl_result;
    }
    inline uint32_t DsReplicaSyncW(Windows::Win32::SystemServices::HANDLE hDS, uint16_t* NameContext, ::win32::guid* pUuidDsaSrc, uint32_t Options)
    {
        auto win32_impl_result = WIN32_IMPL_DsReplicaSyncW(hDS, NameContext, pUuidDsaSrc, Options);
        return win32_impl_result;
    }
    inline uint32_t DsReplicaAddA(Windows::Win32::SystemServices::HANDLE hDS, int8_t* NameContext, int8_t* SourceDsaDn, int8_t* TransportDn, int8_t* SourceDsaAddress, Windows::Win32::ActiveDirectory::SCHEDULE* pSchedule, uint32_t Options)
    {
        auto win32_impl_result = WIN32_IMPL_DsReplicaAddA(hDS, NameContext, SourceDsaDn, TransportDn, SourceDsaAddress, pSchedule, Options);
        return win32_impl_result;
    }
    inline uint32_t DsReplicaAddW(Windows::Win32::SystemServices::HANDLE hDS, uint16_t* NameContext, uint16_t* SourceDsaDn, uint16_t* TransportDn, uint16_t* SourceDsaAddress, Windows::Win32::ActiveDirectory::SCHEDULE* pSchedule, uint32_t Options)
    {
        auto win32_impl_result = WIN32_IMPL_DsReplicaAddW(hDS, NameContext, SourceDsaDn, TransportDn, SourceDsaAddress, pSchedule, Options);
        return win32_impl_result;
    }
    inline uint32_t DsReplicaDelA(Windows::Win32::SystemServices::HANDLE hDS, int8_t* NameContext, int8_t* DsaSrc, uint32_t Options)
    {
        auto win32_impl_result = WIN32_IMPL_DsReplicaDelA(hDS, NameContext, DsaSrc, Options);
        return win32_impl_result;
    }
    inline uint32_t DsReplicaDelW(Windows::Win32::SystemServices::HANDLE hDS, uint16_t* NameContext, uint16_t* DsaSrc, uint32_t Options)
    {
        auto win32_impl_result = WIN32_IMPL_DsReplicaDelW(hDS, NameContext, DsaSrc, Options);
        return win32_impl_result;
    }
    inline uint32_t DsReplicaModifyA(Windows::Win32::SystemServices::HANDLE hDS, int8_t* NameContext, ::win32::guid* pUuidSourceDsa, int8_t* TransportDn, int8_t* SourceDsaAddress, Windows::Win32::ActiveDirectory::SCHEDULE* pSchedule, uint32_t ReplicaFlags, uint32_t ModifyFields, uint32_t Options)
    {
        auto win32_impl_result = WIN32_IMPL_DsReplicaModifyA(hDS, NameContext, pUuidSourceDsa, TransportDn, SourceDsaAddress, pSchedule, ReplicaFlags, ModifyFields, Options);
        return win32_impl_result;
    }
    inline uint32_t DsReplicaModifyW(Windows::Win32::SystemServices::HANDLE hDS, uint16_t* NameContext, ::win32::guid* pUuidSourceDsa, uint16_t* TransportDn, uint16_t* SourceDsaAddress, Windows::Win32::ActiveDirectory::SCHEDULE* pSchedule, uint32_t ReplicaFlags, uint32_t ModifyFields, uint32_t Options)
    {
        auto win32_impl_result = WIN32_IMPL_DsReplicaModifyW(hDS, NameContext, pUuidSourceDsa, TransportDn, SourceDsaAddress, pSchedule, ReplicaFlags, ModifyFields, Options);
        return win32_impl_result;
    }
    inline uint32_t DsReplicaUpdateRefsA(Windows::Win32::SystemServices::HANDLE hDS, int8_t* NameContext, int8_t* DsaDest, ::win32::guid* pUuidDsaDest, uint32_t Options)
    {
        auto win32_impl_result = WIN32_IMPL_DsReplicaUpdateRefsA(hDS, NameContext, DsaDest, pUuidDsaDest, Options);
        return win32_impl_result;
    }
    inline uint32_t DsReplicaUpdateRefsW(Windows::Win32::SystemServices::HANDLE hDS, uint16_t* NameContext, uint16_t* DsaDest, ::win32::guid* pUuidDsaDest, uint32_t Options)
    {
        auto win32_impl_result = WIN32_IMPL_DsReplicaUpdateRefsW(hDS, NameContext, DsaDest, pUuidDsaDest, Options);
        return win32_impl_result;
    }
    inline uint32_t DsReplicaSyncAllA(Windows::Win32::SystemServices::HANDLE hDS, int8_t* pszNameContext, uint32_t ulFlags, Windows::Win32::SystemServices::BOOL*********** pFnCallBack, void* pCallbackData, Windows::Win32::ActiveDirectory::DS_REPSYNCALL_ERRINFOA*** pErrors)
    {
        auto win32_impl_result = WIN32_IMPL_DsReplicaSyncAllA(hDS, pszNameContext, ulFlags, pFnCallBack, pCallbackData, pErrors);
        return win32_impl_result;
    }
    inline uint32_t DsReplicaSyncAllW(Windows::Win32::SystemServices::HANDLE hDS, uint16_t* pszNameContext, uint32_t ulFlags, Windows::Win32::SystemServices::BOOL*********** pFnCallBack, void* pCallbackData, Windows::Win32::ActiveDirectory::DS_REPSYNCALL_ERRINFOW*** pErrors)
    {
        auto win32_impl_result = WIN32_IMPL_DsReplicaSyncAllW(hDS, pszNameContext, ulFlags, pFnCallBack, pCallbackData, pErrors);
        return win32_impl_result;
    }
    inline uint32_t DsRemoveDsServerW(Windows::Win32::SystemServices::HANDLE hDs, uint16_t* ServerDN, uint16_t* DomainDN, int32_t* fLastDcInDomain, Windows::Win32::SystemServices::BOOL fCommit)
    {
        auto win32_impl_result = WIN32_IMPL_DsRemoveDsServerW(hDs, ServerDN, DomainDN, fLastDcInDomain, fCommit);
        return win32_impl_result;
    }
    inline uint32_t DsRemoveDsServerA(Windows::Win32::SystemServices::HANDLE hDs, int8_t* ServerDN, int8_t* DomainDN, int32_t* fLastDcInDomain, Windows::Win32::SystemServices::BOOL fCommit)
    {
        auto win32_impl_result = WIN32_IMPL_DsRemoveDsServerA(hDs, ServerDN, DomainDN, fLastDcInDomain, fCommit);
        return win32_impl_result;
    }
    inline uint32_t DsRemoveDsDomainW(Windows::Win32::SystemServices::HANDLE hDs, uint16_t* DomainDN)
    {
        auto win32_impl_result = WIN32_IMPL_DsRemoveDsDomainW(hDs, DomainDN);
        return win32_impl_result;
    }
    inline uint32_t DsRemoveDsDomainA(Windows::Win32::SystemServices::HANDLE hDs, int8_t* DomainDN)
    {
        auto win32_impl_result = WIN32_IMPL_DsRemoveDsDomainA(hDs, DomainDN);
        return win32_impl_result;
    }
    inline uint32_t DsListSitesA(Windows::Win32::SystemServices::HANDLE hDs, Windows::Win32::ActiveDirectory::DS_NAME_RESULTA** ppSites)
    {
        auto win32_impl_result = WIN32_IMPL_DsListSitesA(hDs, ppSites);
        return win32_impl_result;
    }
    inline uint32_t DsListSitesW(Windows::Win32::SystemServices::HANDLE hDs, Windows::Win32::ActiveDirectory::DS_NAME_RESULTW** ppSites)
    {
        auto win32_impl_result = WIN32_IMPL_DsListSitesW(hDs, ppSites);
        return win32_impl_result;
    }
    inline uint32_t DsListServersInSiteA(Windows::Win32::SystemServices::HANDLE hDs, int8_t* site, Windows::Win32::ActiveDirectory::DS_NAME_RESULTA** ppServers)
    {
        auto win32_impl_result = WIN32_IMPL_DsListServersInSiteA(hDs, site, ppServers);
        return win32_impl_result;
    }
    inline uint32_t DsListServersInSiteW(Windows::Win32::SystemServices::HANDLE hDs, uint16_t* site, Windows::Win32::ActiveDirectory::DS_NAME_RESULTW** ppServers)
    {
        auto win32_impl_result = WIN32_IMPL_DsListServersInSiteW(hDs, site, ppServers);
        return win32_impl_result;
    }
    inline uint32_t DsListDomainsInSiteA(Windows::Win32::SystemServices::HANDLE hDs, int8_t* site, Windows::Win32::ActiveDirectory::DS_NAME_RESULTA** ppDomains)
    {
        auto win32_impl_result = WIN32_IMPL_DsListDomainsInSiteA(hDs, site, ppDomains);
        return win32_impl_result;
    }
    inline uint32_t DsListDomainsInSiteW(Windows::Win32::SystemServices::HANDLE hDs, uint16_t* site, Windows::Win32::ActiveDirectory::DS_NAME_RESULTW** ppDomains)
    {
        auto win32_impl_result = WIN32_IMPL_DsListDomainsInSiteW(hDs, site, ppDomains);
        return win32_impl_result;
    }
    inline uint32_t DsListServersForDomainInSiteA(Windows::Win32::SystemServices::HANDLE hDs, int8_t* domain, int8_t* site, Windows::Win32::ActiveDirectory::DS_NAME_RESULTA** ppServers)
    {
        auto win32_impl_result = WIN32_IMPL_DsListServersForDomainInSiteA(hDs, domain, site, ppServers);
        return win32_impl_result;
    }
    inline uint32_t DsListServersForDomainInSiteW(Windows::Win32::SystemServices::HANDLE hDs, uint16_t* domain, uint16_t* site, Windows::Win32::ActiveDirectory::DS_NAME_RESULTW** ppServers)
    {
        auto win32_impl_result = WIN32_IMPL_DsListServersForDomainInSiteW(hDs, domain, site, ppServers);
        return win32_impl_result;
    }
    inline uint32_t DsListInfoForServerA(Windows::Win32::SystemServices::HANDLE hDs, int8_t* server, Windows::Win32::ActiveDirectory::DS_NAME_RESULTA** ppInfo)
    {
        auto win32_impl_result = WIN32_IMPL_DsListInfoForServerA(hDs, server, ppInfo);
        return win32_impl_result;
    }
    inline uint32_t DsListInfoForServerW(Windows::Win32::SystemServices::HANDLE hDs, uint16_t* server, Windows::Win32::ActiveDirectory::DS_NAME_RESULTW** ppInfo)
    {
        auto win32_impl_result = WIN32_IMPL_DsListInfoForServerW(hDs, server, ppInfo);
        return win32_impl_result;
    }
    inline uint32_t DsListRolesA(Windows::Win32::SystemServices::HANDLE hDs, Windows::Win32::ActiveDirectory::DS_NAME_RESULTA** ppRoles)
    {
        auto win32_impl_result = WIN32_IMPL_DsListRolesA(hDs, ppRoles);
        return win32_impl_result;
    }
    inline uint32_t DsListRolesW(Windows::Win32::SystemServices::HANDLE hDs, Windows::Win32::ActiveDirectory::DS_NAME_RESULTW** ppRoles)
    {
        auto win32_impl_result = WIN32_IMPL_DsListRolesW(hDs, ppRoles);
        return win32_impl_result;
    }
    inline uint32_t DsQuerySitesByCostW(Windows::Win32::SystemServices::HANDLE hDS, uint16_t* pwszFromSite, uint16_t** rgwszToSites, uint32_t cToSites, uint32_t dwFlags, Windows::Win32::ActiveDirectory::DS_SITE_COST_INFO** prgSiteInfo)
    {
        auto win32_impl_result = WIN32_IMPL_DsQuerySitesByCostW(hDS, pwszFromSite, rgwszToSites, cToSites, dwFlags, prgSiteInfo);
        return win32_impl_result;
    }
    inline uint32_t DsQuerySitesByCostA(Windows::Win32::SystemServices::HANDLE hDS, int8_t* pszFromSite, int8_t** rgszToSites, uint32_t cToSites, uint32_t dwFlags, Windows::Win32::ActiveDirectory::DS_SITE_COST_INFO** prgSiteInfo)
    {
        auto win32_impl_result = WIN32_IMPL_DsQuerySitesByCostA(hDS, pszFromSite, rgszToSites, cToSites, dwFlags, prgSiteInfo);
        return win32_impl_result;
    }
    inline void DsQuerySitesFree(Windows::Win32::ActiveDirectory::DS_SITE_COST_INFO* rgSiteInfo)
    {
        WIN32_IMPL_DsQuerySitesFree(rgSiteInfo);
    }
    inline uint32_t DsMapSchemaGuidsA(Windows::Win32::SystemServices::HANDLE hDs, uint32_t cGuids, ::win32::guid* rGuids, Windows::Win32::ActiveDirectory::DS_SCHEMA_GUID_MAPA** ppGuidMap)
    {
        auto win32_impl_result = WIN32_IMPL_DsMapSchemaGuidsA(hDs, cGuids, rGuids, ppGuidMap);
        return win32_impl_result;
    }
    inline void DsFreeSchemaGuidMapA(Windows::Win32::ActiveDirectory::DS_SCHEMA_GUID_MAPA* pGuidMap)
    {
        WIN32_IMPL_DsFreeSchemaGuidMapA(pGuidMap);
    }
    inline uint32_t DsMapSchemaGuidsW(Windows::Win32::SystemServices::HANDLE hDs, uint32_t cGuids, ::win32::guid* rGuids, Windows::Win32::ActiveDirectory::DS_SCHEMA_GUID_MAPW** ppGuidMap)
    {
        auto win32_impl_result = WIN32_IMPL_DsMapSchemaGuidsW(hDs, cGuids, rGuids, ppGuidMap);
        return win32_impl_result;
    }
    inline void DsFreeSchemaGuidMapW(Windows::Win32::ActiveDirectory::DS_SCHEMA_GUID_MAPW* pGuidMap)
    {
        WIN32_IMPL_DsFreeSchemaGuidMapW(pGuidMap);
    }
    inline uint32_t DsGetDomainControllerInfoA(Windows::Win32::SystemServices::HANDLE hDs, int8_t* DomainName, uint32_t InfoLevel, uint32_t* pcOut, void** ppInfo)
    {
        auto win32_impl_result = WIN32_IMPL_DsGetDomainControllerInfoA(hDs, DomainName, InfoLevel, pcOut, ppInfo);
        return win32_impl_result;
    }
    inline uint32_t DsGetDomainControllerInfoW(Windows::Win32::SystemServices::HANDLE hDs, uint16_t* DomainName, uint32_t InfoLevel, uint32_t* pcOut, void** ppInfo)
    {
        auto win32_impl_result = WIN32_IMPL_DsGetDomainControllerInfoW(hDs, DomainName, InfoLevel, pcOut, ppInfo);
        return win32_impl_result;
    }
    inline void DsFreeDomainControllerInfoA(uint32_t InfoLevel, uint32_t cInfo, void* pInfo)
    {
        WIN32_IMPL_DsFreeDomainControllerInfoA(InfoLevel, cInfo, pInfo);
    }
    inline void DsFreeDomainControllerInfoW(uint32_t InfoLevel, uint32_t cInfo, void* pInfo)
    {
        WIN32_IMPL_DsFreeDomainControllerInfoW(InfoLevel, cInfo, pInfo);
    }
    inline uint32_t DsReplicaConsistencyCheck(Windows::Win32::SystemServices::HANDLE hDS, Windows::Win32::ActiveDirectory::DS_KCC_TASKID TaskID, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_DsReplicaConsistencyCheck(hDS, TaskID, dwFlags);
        return win32_impl_result;
    }
    inline uint32_t DsReplicaVerifyObjectsW(Windows::Win32::SystemServices::HANDLE hDS, uint16_t* NameContext, ::win32::guid* pUuidDsaSrc, uint32_t ulOptions)
    {
        auto win32_impl_result = WIN32_IMPL_DsReplicaVerifyObjectsW(hDS, NameContext, pUuidDsaSrc, ulOptions);
        return win32_impl_result;
    }
    inline uint32_t DsReplicaVerifyObjectsA(Windows::Win32::SystemServices::HANDLE hDS, int8_t* NameContext, ::win32::guid* pUuidDsaSrc, uint32_t ulOptions)
    {
        auto win32_impl_result = WIN32_IMPL_DsReplicaVerifyObjectsA(hDS, NameContext, pUuidDsaSrc, ulOptions);
        return win32_impl_result;
    }
    inline uint32_t DsReplicaGetInfoW(Windows::Win32::SystemServices::HANDLE hDS, Windows::Win32::ActiveDirectory::DS_REPL_INFO_TYPE InfoType, uint16_t* pszObject, ::win32::guid* puuidForSourceDsaObjGuid, void** ppInfo)
    {
        auto win32_impl_result = WIN32_IMPL_DsReplicaGetInfoW(hDS, InfoType, pszObject, puuidForSourceDsaObjGuid, ppInfo);
        return win32_impl_result;
    }
    inline uint32_t DsReplicaGetInfo2W(Windows::Win32::SystemServices::HANDLE hDS, Windows::Win32::ActiveDirectory::DS_REPL_INFO_TYPE InfoType, uint16_t* pszObject, ::win32::guid* puuidForSourceDsaObjGuid, uint16_t* pszAttributeName, uint16_t* pszValue, uint32_t dwFlags, uint32_t dwEnumerationContext, void** ppInfo)
    {
        auto win32_impl_result = WIN32_IMPL_DsReplicaGetInfo2W(hDS, InfoType, pszObject, puuidForSourceDsaObjGuid, pszAttributeName, pszValue, dwFlags, dwEnumerationContext, ppInfo);
        return win32_impl_result;
    }
    inline void DsReplicaFreeInfo(Windows::Win32::ActiveDirectory::DS_REPL_INFO_TYPE InfoType, void* pInfo)
    {
        WIN32_IMPL_DsReplicaFreeInfo(InfoType, pInfo);
    }
    inline uint32_t DsAddSidHistoryW(Windows::Win32::SystemServices::HANDLE hDS, uint32_t Flags, uint16_t* SrcDomain, uint16_t* SrcPrincipal, uint16_t* SrcDomainController, void* SrcDomainCreds, uint16_t* DstDomain, uint16_t* DstPrincipal)
    {
        auto win32_impl_result = WIN32_IMPL_DsAddSidHistoryW(hDS, Flags, SrcDomain, SrcPrincipal, SrcDomainController, SrcDomainCreds, DstDomain, DstPrincipal);
        return win32_impl_result;
    }
    inline uint32_t DsAddSidHistoryA(Windows::Win32::SystemServices::HANDLE hDS, uint32_t Flags, int8_t* SrcDomain, int8_t* SrcPrincipal, int8_t* SrcDomainController, void* SrcDomainCreds, int8_t* DstDomain, int8_t* DstPrincipal)
    {
        auto win32_impl_result = WIN32_IMPL_DsAddSidHistoryA(hDS, Flags, SrcDomain, SrcPrincipal, SrcDomainController, SrcDomainCreds, DstDomain, DstPrincipal);
        return win32_impl_result;
    }
    inline uint32_t DsInheritSecurityIdentityW(Windows::Win32::SystemServices::HANDLE hDS, uint32_t Flags, uint16_t* SrcPrincipal, uint16_t* DstPrincipal)
    {
        auto win32_impl_result = WIN32_IMPL_DsInheritSecurityIdentityW(hDS, Flags, SrcPrincipal, DstPrincipal);
        return win32_impl_result;
    }
    inline uint32_t DsInheritSecurityIdentityA(Windows::Win32::SystemServices::HANDLE hDS, uint32_t Flags, int8_t* SrcPrincipal, int8_t* DstPrincipal)
    {
        auto win32_impl_result = WIN32_IMPL_DsInheritSecurityIdentityA(hDS, Flags, SrcPrincipal, DstPrincipal);
        return win32_impl_result;
    }
    inline uint32_t DsRoleGetPrimaryDomainInformation(uint16_t* lpServer, Windows::Win32::ActiveDirectory::DSROLE_PRIMARY_DOMAIN_INFO_LEVEL InfoLevel, uint8_t** Buffer)
    {
        auto win32_impl_result = WIN32_IMPL_DsRoleGetPrimaryDomainInformation(lpServer, InfoLevel, Buffer);
        return win32_impl_result;
    }
    inline void DsRoleFreeMemory(void* Buffer)
    {
        WIN32_IMPL_DsRoleFreeMemory(Buffer);
    }
    inline uint32_t DsGetDcNameA(int8_t* ComputerName, int8_t* DomainName, ::win32::guid* DomainGuid, int8_t* SiteName, uint32_t Flags, Windows::Win32::ActiveDirectory::DOMAIN_CONTROLLER_INFOA** DomainControllerInfo)
    {
        auto win32_impl_result = WIN32_IMPL_DsGetDcNameA(ComputerName, DomainName, DomainGuid, SiteName, Flags, DomainControllerInfo);
        return win32_impl_result;
    }
    inline uint32_t DsGetDcNameW(uint16_t* ComputerName, uint16_t* DomainName, ::win32::guid* DomainGuid, uint16_t* SiteName, uint32_t Flags, Windows::Win32::ActiveDirectory::DOMAIN_CONTROLLER_INFOW** DomainControllerInfo)
    {
        auto win32_impl_result = WIN32_IMPL_DsGetDcNameW(ComputerName, DomainName, DomainGuid, SiteName, Flags, DomainControllerInfo);
        return win32_impl_result;
    }
    inline uint32_t DsGetSiteNameA(int8_t* ComputerName, int8_t** SiteName)
    {
        auto win32_impl_result = WIN32_IMPL_DsGetSiteNameA(ComputerName, SiteName);
        return win32_impl_result;
    }
    inline uint32_t DsGetSiteNameW(uint16_t* ComputerName, uint16_t** SiteName)
    {
        auto win32_impl_result = WIN32_IMPL_DsGetSiteNameW(ComputerName, SiteName);
        return win32_impl_result;
    }
    inline uint32_t DsValidateSubnetNameW(uint16_t* SubnetName)
    {
        auto win32_impl_result = WIN32_IMPL_DsValidateSubnetNameW(SubnetName);
        return win32_impl_result;
    }
    inline uint32_t DsValidateSubnetNameA(int8_t* SubnetName)
    {
        auto win32_impl_result = WIN32_IMPL_DsValidateSubnetNameA(SubnetName);
        return win32_impl_result;
    }
    inline uint32_t DsAddressToSiteNamesW(uint16_t* ComputerName, uint32_t EntryCount, Windows::Win32::WinSock::SOCKET_ADDRESS* SocketAddresses, uint16_t*** SiteNames)
    {
        auto win32_impl_result = WIN32_IMPL_DsAddressToSiteNamesW(ComputerName, EntryCount, SocketAddresses, SiteNames);
        return win32_impl_result;
    }
    inline uint32_t DsAddressToSiteNamesA(int8_t* ComputerName, uint32_t EntryCount, Windows::Win32::WinSock::SOCKET_ADDRESS* SocketAddresses, int8_t*** SiteNames)
    {
        auto win32_impl_result = WIN32_IMPL_DsAddressToSiteNamesA(ComputerName, EntryCount, SocketAddresses, SiteNames);
        return win32_impl_result;
    }
    inline uint32_t DsAddressToSiteNamesExW(uint16_t* ComputerName, uint32_t EntryCount, Windows::Win32::WinSock::SOCKET_ADDRESS* SocketAddresses, uint16_t*** SiteNames, uint16_t*** SubnetNames)
    {
        auto win32_impl_result = WIN32_IMPL_DsAddressToSiteNamesExW(ComputerName, EntryCount, SocketAddresses, SiteNames, SubnetNames);
        return win32_impl_result;
    }
    inline uint32_t DsAddressToSiteNamesExA(int8_t* ComputerName, uint32_t EntryCount, Windows::Win32::WinSock::SOCKET_ADDRESS* SocketAddresses, int8_t*** SiteNames, int8_t*** SubnetNames)
    {
        auto win32_impl_result = WIN32_IMPL_DsAddressToSiteNamesExA(ComputerName, EntryCount, SocketAddresses, SiteNames, SubnetNames);
        return win32_impl_result;
    }
    inline uint32_t DsEnumerateDomainTrustsW(uint16_t* ServerName, uint32_t Flags, Windows::Win32::ActiveDirectory::DS_DOMAIN_TRUSTSW** Domains, uint32_t* DomainCount)
    {
        auto win32_impl_result = WIN32_IMPL_DsEnumerateDomainTrustsW(ServerName, Flags, Domains, DomainCount);
        return win32_impl_result;
    }
    inline uint32_t DsEnumerateDomainTrustsA(int8_t* ServerName, uint32_t Flags, Windows::Win32::ActiveDirectory::DS_DOMAIN_TRUSTSA** Domains, uint32_t* DomainCount)
    {
        auto win32_impl_result = WIN32_IMPL_DsEnumerateDomainTrustsA(ServerName, Flags, Domains, DomainCount);
        return win32_impl_result;
    }
    inline uint32_t DsGetForestTrustInformationW(uint16_t* ServerName, uint16_t* TrustedDomainName, uint32_t Flags, Windows::Win32::Security::LSA_FOREST_TRUST_INFORMATION** ForestTrustInfo)
    {
        auto win32_impl_result = WIN32_IMPL_DsGetForestTrustInformationW(ServerName, TrustedDomainName, Flags, ForestTrustInfo);
        return win32_impl_result;
    }
    inline uint32_t DsMergeForestTrustInformationW(uint16_t* DomainName, Windows::Win32::Security::LSA_FOREST_TRUST_INFORMATION* NewForestTrustInfo, Windows::Win32::Security::LSA_FOREST_TRUST_INFORMATION* OldForestTrustInfo, Windows::Win32::Security::LSA_FOREST_TRUST_INFORMATION** MergedForestTrustInfo)
    {
        auto win32_impl_result = WIN32_IMPL_DsMergeForestTrustInformationW(DomainName, NewForestTrustInfo, OldForestTrustInfo, MergedForestTrustInfo);
        return win32_impl_result;
    }
    inline uint32_t DsGetDcSiteCoverageW(uint16_t* ServerName, uint32_t* EntryCount, uint16_t*** SiteNames)
    {
        auto win32_impl_result = WIN32_IMPL_DsGetDcSiteCoverageW(ServerName, EntryCount, SiteNames);
        return win32_impl_result;
    }
    inline uint32_t DsGetDcSiteCoverageA(int8_t* ServerName, uint32_t* EntryCount, int8_t*** SiteNames)
    {
        auto win32_impl_result = WIN32_IMPL_DsGetDcSiteCoverageA(ServerName, EntryCount, SiteNames);
        return win32_impl_result;
    }
    inline uint32_t DsDeregisterDnsHostRecordsW(uint16_t* ServerName, uint16_t* DnsDomainName, ::win32::guid* DomainGuid, ::win32::guid* DsaGuid, uint16_t* DnsHostName)
    {
        auto win32_impl_result = WIN32_IMPL_DsDeregisterDnsHostRecordsW(ServerName, DnsDomainName, DomainGuid, DsaGuid, DnsHostName);
        return win32_impl_result;
    }
    inline uint32_t DsDeregisterDnsHostRecordsA(int8_t* ServerName, int8_t* DnsDomainName, ::win32::guid* DomainGuid, ::win32::guid* DsaGuid, int8_t* DnsHostName)
    {
        auto win32_impl_result = WIN32_IMPL_DsDeregisterDnsHostRecordsA(ServerName, DnsDomainName, DomainGuid, DsaGuid, DnsHostName);
        return win32_impl_result;
    }
    inline uint32_t DsGetDcOpenW(uint16_t* DnsName, uint32_t OptionFlags, uint16_t* SiteName, ::win32::guid* DomainGuid, uint16_t* DnsForestName, uint32_t DcFlags, Windows::Win32::ActiveDirectory::GetDcContextHandle* RetGetDcContext)
    {
        auto win32_impl_result = WIN32_IMPL_DsGetDcOpenW(DnsName, OptionFlags, SiteName, DomainGuid, DnsForestName, DcFlags, RetGetDcContext);
        return win32_impl_result;
    }
    inline uint32_t DsGetDcOpenA(int8_t* DnsName, uint32_t OptionFlags, int8_t* SiteName, ::win32::guid* DomainGuid, int8_t* DnsForestName, uint32_t DcFlags, Windows::Win32::ActiveDirectory::GetDcContextHandle* RetGetDcContext)
    {
        auto win32_impl_result = WIN32_IMPL_DsGetDcOpenA(DnsName, OptionFlags, SiteName, DomainGuid, DnsForestName, DcFlags, RetGetDcContext);
        return win32_impl_result;
    }
    inline uint32_t DsGetDcNextW(Windows::Win32::SystemServices::HANDLE GetDcContextHandle, uint32_t* SockAddressCount, Windows::Win32::WinSock::SOCKET_ADDRESS** SockAddresses, uint16_t** DnsHostName)
    {
        auto win32_impl_result = WIN32_IMPL_DsGetDcNextW(GetDcContextHandle, SockAddressCount, SockAddresses, DnsHostName);
        return win32_impl_result;
    }
    inline uint32_t DsGetDcNextA(Windows::Win32::SystemServices::HANDLE GetDcContextHandle, uint32_t* SockAddressCount, Windows::Win32::WinSock::SOCKET_ADDRESS** SockAddresses, int8_t** DnsHostName)
    {
        auto win32_impl_result = WIN32_IMPL_DsGetDcNextA(GetDcContextHandle, SockAddressCount, SockAddresses, DnsHostName);
        return win32_impl_result;
    }
    inline void DsGetDcCloseW(Windows::Win32::SystemServices::HANDLE GetDcContextHandle)
    {
        WIN32_IMPL_DsGetDcCloseW(GetDcContextHandle);
    }

#pragma endregion methods

}
#endif
