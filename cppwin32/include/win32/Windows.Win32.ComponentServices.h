// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_ComponentServices_H
#define WIN32_Windows_Win32_ComponentServices_H
#include "win32/base.h"
static_assert(win32::check_version(CPPWIN32_VERSION, "0.0.0.1"), "Mismatched C++/Win32 headers.");
#define CPPWIN32_VERSION "0.0.0.1"
#include "win32/impl/Windows.Win32.ComponentServices.2.h"
WIN32_EXPORT namespace win32::Windows::Win32::ComponentServices
{
#pragma region methods
    inline int32_t CoGetDefaultContext(Windows::Win32::Com::APTTYPE aptType, ::win32::guid* riid, void** ppv)
    {
        auto win32_impl_result = WIN32_IMPL_CoGetDefaultContext(aptType, riid, ppv);
        return win32_impl_result;
    }
    inline int32_t CoCreateActivity(Windows::Win32::Com::IUnknown* pIUnknown, ::win32::guid* riid, void** ppObj)
    {
        auto win32_impl_result = WIN32_IMPL_CoCreateActivity(pIUnknown, riid, ppObj);
        return win32_impl_result;
    }
    inline int32_t CoEnterServiceDomain(Windows::Win32::Com::IUnknown* pConfigObject)
    {
        auto win32_impl_result = WIN32_IMPL_CoEnterServiceDomain(pConfigObject);
        return win32_impl_result;
    }
    inline void CoLeaveServiceDomain(Windows::Win32::Com::IUnknown* pUnkStatus)
    {
        WIN32_IMPL_CoLeaveServiceDomain(pUnkStatus);
    }
    inline int32_t GetManagedExtensions(uint32_t* dwExts)
    {
        auto win32_impl_result = WIN32_IMPL_GetManagedExtensions(dwExts);
        return win32_impl_result;
    }
    inline void* SafeRef(::win32::guid* rid, Windows::Win32::Com::IUnknown* pUnk)
    {
        auto win32_impl_result = WIN32_IMPL_SafeRef(rid, pUnk);
        return win32_impl_result;
    }
    inline int32_t RecycleSurrogate(int32_t lReasonCode)
    {
        auto win32_impl_result = WIN32_IMPL_RecycleSurrogate(lReasonCode);
        return win32_impl_result;
    }
    inline int32_t MTSCreateActivity(::win32::guid* riid, void** ppobj)
    {
        auto win32_impl_result = WIN32_IMPL_MTSCreateActivity(riid, ppobj);
        return win32_impl_result;
    }
    inline int32_t GetDispenserManager(Windows::Win32::ComponentServices::IDispenserManager** param0)
    {
        auto win32_impl_result = WIN32_IMPL_GetDispenserManager(param0);
        return win32_impl_result;
    }

#pragma endregion methods

}
#endif
