// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Direct3D10_H
#define WIN32_Windows_Win32_Direct3D10_H
#include "win32/base.h"
static_assert(win32::check_version(CPPWIN32_VERSION, "0.0.0.1"), "Mismatched C++/Win32 headers.");
#define CPPWIN32_VERSION "0.0.0.1"
#include "win32/impl/Windows.Win32.Direct3D10.2.h"
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
#pragma region methods
    inline int32_t D3D10CreateDevice(Windows::Win32::Dxgi::IDXGIAdapter* pAdapter, Windows::Win32::Direct3D10::D3D10_DRIVER_TYPE DriverType, intptr_t Software, uint32_t Flags, uint32_t SDKVersion, Windows::Win32::Direct3D10::ID3D10Device** ppDevice)
    {
        auto win32_impl_result = WIN32_IMPL_D3D10CreateDevice(pAdapter, DriverType, Software, Flags, SDKVersion, ppDevice);
        return win32_impl_result;
    }
    inline int32_t D3D10CreateDeviceAndSwapChain(Windows::Win32::Dxgi::IDXGIAdapter* pAdapter, Windows::Win32::Direct3D10::D3D10_DRIVER_TYPE DriverType, intptr_t Software, uint32_t Flags, uint32_t SDKVersion, Windows::Win32::Dxgi::DXGI_SWAP_CHAIN_DESC* pSwapChainDesc, Windows::Win32::Dxgi::IDXGISwapChain** ppSwapChain, Windows::Win32::Direct3D10::ID3D10Device** ppDevice)
    {
        auto win32_impl_result = WIN32_IMPL_D3D10CreateDeviceAndSwapChain(pAdapter, DriverType, Software, Flags, SDKVersion, pSwapChainDesc, ppSwapChain, ppDevice);
        return win32_impl_result;
    }
    inline int32_t D3D10CreateBlob(size_t NumBytes, Windows::Win32::Direct3D11::ID3DBlob** ppBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_D3D10CreateBlob(NumBytes, ppBuffer);
        return win32_impl_result;
    }
    inline int32_t D3D10CompileShader(int8_t* pSrcData, size_t SrcDataSize, int8_t* pFileName, Windows::Win32::Direct3D11::D3D_SHADER_MACRO* pDefines, Windows::Win32::Direct3D11::ID3DInclude* pInclude, int8_t* pFunctionName, int8_t* pProfile, uint32_t Flags, Windows::Win32::Direct3D11::ID3DBlob** ppShader, Windows::Win32::Direct3D11::ID3DBlob** ppErrorMsgs)
    {
        auto win32_impl_result = WIN32_IMPL_D3D10CompileShader(pSrcData, SrcDataSize, pFileName, pDefines, pInclude, pFunctionName, pProfile, Flags, ppShader, ppErrorMsgs);
        return win32_impl_result;
    }
    inline int32_t D3D10DisassembleShader(void* pShader, size_t BytecodeLength, Windows::Win32::SystemServices::BOOL EnableColorCode, int8_t* pComments, Windows::Win32::Direct3D11::ID3DBlob** ppDisassembly)
    {
        auto win32_impl_result = WIN32_IMPL_D3D10DisassembleShader(pShader, BytecodeLength, EnableColorCode, pComments, ppDisassembly);
        return win32_impl_result;
    }
    inline int8_t* D3D10GetPixelShaderProfile(Windows::Win32::Direct3D10::ID3D10Device* pDevice)
    {
        auto win32_impl_result = WIN32_IMPL_D3D10GetPixelShaderProfile(pDevice);
        return win32_impl_result;
    }
    inline int8_t* D3D10GetVertexShaderProfile(Windows::Win32::Direct3D10::ID3D10Device* pDevice)
    {
        auto win32_impl_result = WIN32_IMPL_D3D10GetVertexShaderProfile(pDevice);
        return win32_impl_result;
    }
    inline int8_t* D3D10GetGeometryShaderProfile(Windows::Win32::Direct3D10::ID3D10Device* pDevice)
    {
        auto win32_impl_result = WIN32_IMPL_D3D10GetGeometryShaderProfile(pDevice);
        return win32_impl_result;
    }
    inline int32_t D3D10ReflectShader(void* pShaderBytecode, size_t BytecodeLength, Windows::Win32::Direct3D10::ID3D10ShaderReflection** ppReflector)
    {
        auto win32_impl_result = WIN32_IMPL_D3D10ReflectShader(pShaderBytecode, BytecodeLength, ppReflector);
        return win32_impl_result;
    }
    inline int32_t D3D10PreprocessShader(int8_t* pSrcData, size_t SrcDataSize, int8_t* pFileName, Windows::Win32::Direct3D11::D3D_SHADER_MACRO* pDefines, Windows::Win32::Direct3D11::ID3DInclude* pInclude, Windows::Win32::Direct3D11::ID3DBlob** ppShaderText, Windows::Win32::Direct3D11::ID3DBlob** ppErrorMsgs)
    {
        auto win32_impl_result = WIN32_IMPL_D3D10PreprocessShader(pSrcData, SrcDataSize, pFileName, pDefines, pInclude, ppShaderText, ppErrorMsgs);
        return win32_impl_result;
    }
    inline int32_t D3D10GetInputSignatureBlob(void* pShaderBytecode, size_t BytecodeLength, Windows::Win32::Direct3D11::ID3DBlob** ppSignatureBlob)
    {
        auto win32_impl_result = WIN32_IMPL_D3D10GetInputSignatureBlob(pShaderBytecode, BytecodeLength, ppSignatureBlob);
        return win32_impl_result;
    }
    inline int32_t D3D10GetOutputSignatureBlob(void* pShaderBytecode, size_t BytecodeLength, Windows::Win32::Direct3D11::ID3DBlob** ppSignatureBlob)
    {
        auto win32_impl_result = WIN32_IMPL_D3D10GetOutputSignatureBlob(pShaderBytecode, BytecodeLength, ppSignatureBlob);
        return win32_impl_result;
    }
    inline int32_t D3D10GetInputAndOutputSignatureBlob(void* pShaderBytecode, size_t BytecodeLength, Windows::Win32::Direct3D11::ID3DBlob** ppSignatureBlob)
    {
        auto win32_impl_result = WIN32_IMPL_D3D10GetInputAndOutputSignatureBlob(pShaderBytecode, BytecodeLength, ppSignatureBlob);
        return win32_impl_result;
    }
    inline int32_t D3D10GetShaderDebugInfo(void* pShaderBytecode, size_t BytecodeLength, Windows::Win32::Direct3D11::ID3DBlob** ppDebugInfo)
    {
        auto win32_impl_result = WIN32_IMPL_D3D10GetShaderDebugInfo(pShaderBytecode, BytecodeLength, ppDebugInfo);
        return win32_impl_result;
    }
    inline int32_t D3D10StateBlockMaskUnion(Windows::Win32::Direct3D10::D3D10_STATE_BLOCK_MASK* pA, Windows::Win32::Direct3D10::D3D10_STATE_BLOCK_MASK* pB, Windows::Win32::Direct3D10::D3D10_STATE_BLOCK_MASK* pResult)
    {
        auto win32_impl_result = WIN32_IMPL_D3D10StateBlockMaskUnion(pA, pB, pResult);
        return win32_impl_result;
    }
    inline int32_t D3D10StateBlockMaskIntersect(Windows::Win32::Direct3D10::D3D10_STATE_BLOCK_MASK* pA, Windows::Win32::Direct3D10::D3D10_STATE_BLOCK_MASK* pB, Windows::Win32::Direct3D10::D3D10_STATE_BLOCK_MASK* pResult)
    {
        auto win32_impl_result = WIN32_IMPL_D3D10StateBlockMaskIntersect(pA, pB, pResult);
        return win32_impl_result;
    }
    inline int32_t D3D10StateBlockMaskDifference(Windows::Win32::Direct3D10::D3D10_STATE_BLOCK_MASK* pA, Windows::Win32::Direct3D10::D3D10_STATE_BLOCK_MASK* pB, Windows::Win32::Direct3D10::D3D10_STATE_BLOCK_MASK* pResult)
    {
        auto win32_impl_result = WIN32_IMPL_D3D10StateBlockMaskDifference(pA, pB, pResult);
        return win32_impl_result;
    }
    inline int32_t D3D10StateBlockMaskEnableCapture(Windows::Win32::Direct3D10::D3D10_STATE_BLOCK_MASK* pMask, Windows::Win32::Direct3D10::D3D10_DEVICE_STATE_TYPES StateType, uint32_t RangeStart, uint32_t RangeLength)
    {
        auto win32_impl_result = WIN32_IMPL_D3D10StateBlockMaskEnableCapture(pMask, StateType, RangeStart, RangeLength);
        return win32_impl_result;
    }
    inline int32_t D3D10StateBlockMaskDisableCapture(Windows::Win32::Direct3D10::D3D10_STATE_BLOCK_MASK* pMask, Windows::Win32::Direct3D10::D3D10_DEVICE_STATE_TYPES StateType, uint32_t RangeStart, uint32_t RangeLength)
    {
        auto win32_impl_result = WIN32_IMPL_D3D10StateBlockMaskDisableCapture(pMask, StateType, RangeStart, RangeLength);
        return win32_impl_result;
    }
    inline int32_t D3D10StateBlockMaskEnableAll(Windows::Win32::Direct3D10::D3D10_STATE_BLOCK_MASK* pMask)
    {
        auto win32_impl_result = WIN32_IMPL_D3D10StateBlockMaskEnableAll(pMask);
        return win32_impl_result;
    }
    inline int32_t D3D10StateBlockMaskDisableAll(Windows::Win32::Direct3D10::D3D10_STATE_BLOCK_MASK* pMask)
    {
        auto win32_impl_result = WIN32_IMPL_D3D10StateBlockMaskDisableAll(pMask);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL D3D10StateBlockMaskGetSetting(Windows::Win32::Direct3D10::D3D10_STATE_BLOCK_MASK* pMask, Windows::Win32::Direct3D10::D3D10_DEVICE_STATE_TYPES StateType, uint32_t Entry)
    {
        auto win32_impl_result = WIN32_IMPL_D3D10StateBlockMaskGetSetting(pMask, StateType, Entry);
        return win32_impl_result;
    }
    inline int32_t D3D10CreateStateBlock(Windows::Win32::Direct3D10::ID3D10Device* pDevice, Windows::Win32::Direct3D10::D3D10_STATE_BLOCK_MASK* pStateBlockMask, Windows::Win32::Direct3D10::ID3D10StateBlock** ppStateBlock)
    {
        auto win32_impl_result = WIN32_IMPL_D3D10CreateStateBlock(pDevice, pStateBlockMask, ppStateBlock);
        return win32_impl_result;
    }
    inline int32_t D3D10CompileEffectFromMemory(void* pData, size_t DataLength, int8_t* pSrcFileName, Windows::Win32::Direct3D11::D3D_SHADER_MACRO* pDefines, Windows::Win32::Direct3D11::ID3DInclude* pInclude, uint32_t HLSLFlags, uint32_t FXFlags, Windows::Win32::Direct3D11::ID3DBlob** ppCompiledEffect, Windows::Win32::Direct3D11::ID3DBlob** ppErrors)
    {
        auto win32_impl_result = WIN32_IMPL_D3D10CompileEffectFromMemory(pData, DataLength, pSrcFileName, pDefines, pInclude, HLSLFlags, FXFlags, ppCompiledEffect, ppErrors);
        return win32_impl_result;
    }
    inline int32_t D3D10CreateEffectFromMemory(void* pData, size_t DataLength, uint32_t FXFlags, Windows::Win32::Direct3D10::ID3D10Device* pDevice, Windows::Win32::Direct3D10::ID3D10EffectPool* pEffectPool, Windows::Win32::Direct3D10::ID3D10Effect** ppEffect)
    {
        auto win32_impl_result = WIN32_IMPL_D3D10CreateEffectFromMemory(pData, DataLength, FXFlags, pDevice, pEffectPool, ppEffect);
        return win32_impl_result;
    }
    inline int32_t D3D10CreateEffectPoolFromMemory(void* pData, size_t DataLength, uint32_t FXFlags, Windows::Win32::Direct3D10::ID3D10Device* pDevice, Windows::Win32::Direct3D10::ID3D10EffectPool** ppEffectPool)
    {
        auto win32_impl_result = WIN32_IMPL_D3D10CreateEffectPoolFromMemory(pData, DataLength, FXFlags, pDevice, ppEffectPool);
        return win32_impl_result;
    }
    inline int32_t D3D10DisassembleEffect(Windows::Win32::Direct3D10::ID3D10Effect* pEffect, Windows::Win32::SystemServices::BOOL EnableColorCode, Windows::Win32::Direct3D11::ID3DBlob** ppDisassembly)
    {
        auto win32_impl_result = WIN32_IMPL_D3D10DisassembleEffect(pEffect, EnableColorCode, ppDisassembly);
        return win32_impl_result;
    }
    inline int32_t D3D10CreateDevice1(Windows::Win32::Dxgi::IDXGIAdapter* pAdapter, Windows::Win32::Direct3D10::D3D10_DRIVER_TYPE DriverType, intptr_t Software, uint32_t Flags, Windows::Win32::Direct3D10::D3D10_FEATURE_LEVEL1 HardwareLevel, uint32_t SDKVersion, Windows::Win32::Direct3D10::ID3D10Device1** ppDevice)
    {
        auto win32_impl_result = WIN32_IMPL_D3D10CreateDevice1(pAdapter, DriverType, Software, Flags, HardwareLevel, SDKVersion, ppDevice);
        return win32_impl_result;
    }
    inline int32_t D3D10CreateDeviceAndSwapChain1(Windows::Win32::Dxgi::IDXGIAdapter* pAdapter, Windows::Win32::Direct3D10::D3D10_DRIVER_TYPE DriverType, intptr_t Software, uint32_t Flags, Windows::Win32::Direct3D10::D3D10_FEATURE_LEVEL1 HardwareLevel, uint32_t SDKVersion, Windows::Win32::Dxgi::DXGI_SWAP_CHAIN_DESC* pSwapChainDesc, Windows::Win32::Dxgi::IDXGISwapChain** ppSwapChain, Windows::Win32::Direct3D10::ID3D10Device1** ppDevice)
    {
        auto win32_impl_result = WIN32_IMPL_D3D10CreateDeviceAndSwapChain1(pAdapter, DriverType, Software, Flags, HardwareLevel, SDKVersion, pSwapChainDesc, ppSwapChain, ppDevice);
        return win32_impl_result;
    }

#pragma endregion methods

}
#endif
