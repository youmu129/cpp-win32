// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Direct3D11_H
#define WIN32_Windows_Win32_Direct3D11_H
#include "win32/base.h"
static_assert(win32::check_version(CPPWIN32_VERSION, "0.0.0.1"), "Mismatched C++/Win32 headers.");
#define CPPWIN32_VERSION "0.0.0.1"
#include "win32/impl/Windows.Win32.Direct3D11.2.h"
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
#pragma region methods
    inline int32_t D3D11CreateDevice(Windows::Win32::Dxgi::IDXGIAdapter* pAdapter, Windows::Win32::Direct3D11::D3D_DRIVER_TYPE DriverType, intptr_t Software, uint32_t Flags, Windows::Win32::Direct3D11::D3D_FEATURE_LEVEL* pFeatureLevels, uint32_t FeatureLevels, uint32_t SDKVersion, Windows::Win32::Direct3D11::ID3D11Device** ppDevice, Windows::Win32::Direct3D11::D3D_FEATURE_LEVEL* pFeatureLevel, Windows::Win32::Direct3D11::ID3D11DeviceContext** ppImmediateContext)
    {
        auto win32_impl_result = WIN32_IMPL_D3D11CreateDevice(pAdapter, DriverType, Software, Flags, pFeatureLevels, FeatureLevels, SDKVersion, ppDevice, pFeatureLevel, ppImmediateContext);
        return win32_impl_result;
    }
    inline int32_t D3D11CreateDeviceAndSwapChain(Windows::Win32::Dxgi::IDXGIAdapter* pAdapter, Windows::Win32::Direct3D11::D3D_DRIVER_TYPE DriverType, intptr_t Software, uint32_t Flags, Windows::Win32::Direct3D11::D3D_FEATURE_LEVEL* pFeatureLevels, uint32_t FeatureLevels, uint32_t SDKVersion, Windows::Win32::Dxgi::DXGI_SWAP_CHAIN_DESC* pSwapChainDesc, Windows::Win32::Dxgi::IDXGISwapChain** ppSwapChain, Windows::Win32::Direct3D11::ID3D11Device** ppDevice, Windows::Win32::Direct3D11::D3D_FEATURE_LEVEL* pFeatureLevel, Windows::Win32::Direct3D11::ID3D11DeviceContext** ppImmediateContext)
    {
        auto win32_impl_result = WIN32_IMPL_D3D11CreateDeviceAndSwapChain(pAdapter, DriverType, Software, Flags, pFeatureLevels, FeatureLevels, SDKVersion, pSwapChainDesc, ppSwapChain, ppDevice, pFeatureLevel, ppImmediateContext);
        return win32_impl_result;
    }
    inline int32_t D3DDisassemble11Trace(void* pSrcData, size_t SrcDataSize, Windows::Win32::Direct3D11::ID3D11ShaderTrace* pTrace, uint32_t StartStep, uint32_t NumSteps, uint32_t Flags, Windows::Win32::Direct3D11::ID3DBlob** ppDisassembly)
    {
        auto win32_impl_result = WIN32_IMPL_D3DDisassemble11Trace(pSrcData, SrcDataSize, pTrace, StartStep, NumSteps, Flags, ppDisassembly);
        return win32_impl_result;
    }
    inline int32_t D3DX11CreateScan(Windows::Win32::Direct3D11::ID3D11DeviceContext* pDeviceContext, uint32_t MaxElementScanSize, uint32_t MaxScanCount, Windows::Win32::Direct3D11::ID3DX11Scan** ppScan)
    {
        auto win32_impl_result = WIN32_IMPL_D3DX11CreateScan(pDeviceContext, MaxElementScanSize, MaxScanCount, ppScan);
        return win32_impl_result;
    }
    inline int32_t D3DX11CreateSegmentedScan(Windows::Win32::Direct3D11::ID3D11DeviceContext* pDeviceContext, uint32_t MaxElementScanSize, Windows::Win32::Direct3D11::ID3DX11SegmentedScan** ppScan)
    {
        auto win32_impl_result = WIN32_IMPL_D3DX11CreateSegmentedScan(pDeviceContext, MaxElementScanSize, ppScan);
        return win32_impl_result;
    }
    inline int32_t D3DX11CreateFFT(Windows::Win32::Direct3D11::ID3D11DeviceContext* pDeviceContext, Windows::Win32::Direct3D11::D3DX11_FFT_DESC* pDesc, uint32_t Flags, Windows::Win32::Direct3D11::D3DX11_FFT_BUFFER_INFO* pBufferInfo, Windows::Win32::Direct3D11::ID3DX11FFT** ppFFT)
    {
        auto win32_impl_result = WIN32_IMPL_D3DX11CreateFFT(pDeviceContext, pDesc, Flags, pBufferInfo, ppFFT);
        return win32_impl_result;
    }
    inline int32_t D3DX11CreateFFT1DReal(Windows::Win32::Direct3D11::ID3D11DeviceContext* pDeviceContext, uint32_t X, uint32_t Flags, Windows::Win32::Direct3D11::D3DX11_FFT_BUFFER_INFO* pBufferInfo, Windows::Win32::Direct3D11::ID3DX11FFT** ppFFT)
    {
        auto win32_impl_result = WIN32_IMPL_D3DX11CreateFFT1DReal(pDeviceContext, X, Flags, pBufferInfo, ppFFT);
        return win32_impl_result;
    }
    inline int32_t D3DX11CreateFFT1DComplex(Windows::Win32::Direct3D11::ID3D11DeviceContext* pDeviceContext, uint32_t X, uint32_t Flags, Windows::Win32::Direct3D11::D3DX11_FFT_BUFFER_INFO* pBufferInfo, Windows::Win32::Direct3D11::ID3DX11FFT** ppFFT)
    {
        auto win32_impl_result = WIN32_IMPL_D3DX11CreateFFT1DComplex(pDeviceContext, X, Flags, pBufferInfo, ppFFT);
        return win32_impl_result;
    }
    inline int32_t D3DX11CreateFFT2DReal(Windows::Win32::Direct3D11::ID3D11DeviceContext* pDeviceContext, uint32_t X, uint32_t Y, uint32_t Flags, Windows::Win32::Direct3D11::D3DX11_FFT_BUFFER_INFO* pBufferInfo, Windows::Win32::Direct3D11::ID3DX11FFT** ppFFT)
    {
        auto win32_impl_result = WIN32_IMPL_D3DX11CreateFFT2DReal(pDeviceContext, X, Y, Flags, pBufferInfo, ppFFT);
        return win32_impl_result;
    }
    inline int32_t D3DX11CreateFFT2DComplex(Windows::Win32::Direct3D11::ID3D11DeviceContext* pDeviceContext, uint32_t X, uint32_t Y, uint32_t Flags, Windows::Win32::Direct3D11::D3DX11_FFT_BUFFER_INFO* pBufferInfo, Windows::Win32::Direct3D11::ID3DX11FFT** ppFFT)
    {
        auto win32_impl_result = WIN32_IMPL_D3DX11CreateFFT2DComplex(pDeviceContext, X, Y, Flags, pBufferInfo, ppFFT);
        return win32_impl_result;
    }
    inline int32_t D3DX11CreateFFT3DReal(Windows::Win32::Direct3D11::ID3D11DeviceContext* pDeviceContext, uint32_t X, uint32_t Y, uint32_t Z, uint32_t Flags, Windows::Win32::Direct3D11::D3DX11_FFT_BUFFER_INFO* pBufferInfo, Windows::Win32::Direct3D11::ID3DX11FFT** ppFFT)
    {
        auto win32_impl_result = WIN32_IMPL_D3DX11CreateFFT3DReal(pDeviceContext, X, Y, Z, Flags, pBufferInfo, ppFFT);
        return win32_impl_result;
    }
    inline int32_t D3DX11CreateFFT3DComplex(Windows::Win32::Direct3D11::ID3D11DeviceContext* pDeviceContext, uint32_t X, uint32_t Y, uint32_t Z, uint32_t Flags, Windows::Win32::Direct3D11::D3DX11_FFT_BUFFER_INFO* pBufferInfo, Windows::Win32::Direct3D11::ID3DX11FFT** ppFFT)
    {
        auto win32_impl_result = WIN32_IMPL_D3DX11CreateFFT3DComplex(pDeviceContext, X, Y, Z, Flags, pBufferInfo, ppFFT);
        return win32_impl_result;
    }

    inline constexpr int32_t D3D11_SDK_VERSION = 7;
    inline constexpr int32_t D3D_FL9_1_REQ_TEXTURE1D_U_DIMENSION = 2048;
    inline constexpr int32_t D3D_FL9_3_REQ_TEXTURE1D_U_DIMENSION = 4096;
    inline constexpr int32_t D3D_FL9_1_REQ_TEXTURE2D_U_OR_V_DIMENSION = 2048;
    inline constexpr int32_t D3D_FL9_3_REQ_TEXTURE2D_U_OR_V_DIMENSION = 4096;
    inline constexpr int32_t D3D_FL9_1_REQ_TEXTURECUBE_DIMENSION = 512;
    inline constexpr int32_t D3D_FL9_3_REQ_TEXTURECUBE_DIMENSION = 4096;
    inline constexpr int32_t D3D_FL9_1_REQ_TEXTURE3D_U_V_OR_W_DIMENSION = 256;
    inline constexpr int32_t D3D_FL9_1_DEFAULT_MAX_ANISOTROPY = 2;
    inline constexpr int32_t D3D_FL9_1_IA_PRIMITIVE_MAX_COUNT = 65535;
    inline constexpr int32_t D3D_FL9_2_IA_PRIMITIVE_MAX_COUNT = 1048575;
    inline constexpr int32_t D3D_FL9_1_SIMULTANEOUS_RENDER_TARGET_COUNT = 1;
    inline constexpr int32_t D3D_FL9_3_SIMULTANEOUS_RENDER_TARGET_COUNT = 4;
    inline constexpr int32_t D3D_FL9_1_MAX_TEXTURE_REPEAT = 128;
    inline constexpr int32_t D3D_FL9_2_MAX_TEXTURE_REPEAT = 2048;
    inline constexpr int32_t D3D_FL9_3_MAX_TEXTURE_REPEAT = 8192;
    inline constexpr int32_t D3D_COMPONENT_MASK_X = 1;
    inline constexpr int32_t D3D_COMPONENT_MASK_Y = 2;
    inline constexpr int32_t D3D_COMPONENT_MASK_Z = 4;
    inline constexpr int32_t D3D_COMPONENT_MASK_W = 8;
#pragma endregion methods

}
#endif
