// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Direct3DHlsl_H
#define WIN32_Windows_Win32_Direct3DHlsl_H
#include "win32/base.h"
static_assert(win32::check_version(CPPWIN32_VERSION, "0.0.0.1"), "Mismatched C++/Win32 headers.");
#define CPPWIN32_VERSION "0.0.0.1"
#include "win32/impl/Windows.Win32.Direct3DHlsl.2.h"
WIN32_EXPORT namespace win32::Windows::Win32::Direct3DHlsl
{
#pragma region methods
    inline int32_t D3DReadFileToBlob(uint16_t* pFileName, Windows::Win32::Direct3D11::ID3DBlob** ppContents)
    {
        auto win32_impl_result = WIN32_IMPL_D3DReadFileToBlob(pFileName, ppContents);
        return win32_impl_result;
    }
    inline int32_t D3DWriteBlobToFile(Windows::Win32::Direct3D11::ID3DBlob* pBlob, uint16_t* pFileName, Windows::Win32::SystemServices::BOOL bOverwrite)
    {
        auto win32_impl_result = WIN32_IMPL_D3DWriteBlobToFile(pBlob, pFileName, bOverwrite);
        return win32_impl_result;
    }
    inline int32_t D3DCompile(void* pSrcData, size_t SrcDataSize, int8_t* pSourceName, Windows::Win32::Direct3D11::D3D_SHADER_MACRO* pDefines, Windows::Win32::Direct3D11::ID3DInclude* pInclude, int8_t* pEntrypoint, int8_t* pTarget, uint32_t Flags1, uint32_t Flags2, Windows::Win32::Direct3D11::ID3DBlob** ppCode, Windows::Win32::Direct3D11::ID3DBlob** ppErrorMsgs)
    {
        auto win32_impl_result = WIN32_IMPL_D3DCompile(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        return win32_impl_result;
    }
    inline int32_t D3DCompile2(void* pSrcData, size_t SrcDataSize, int8_t* pSourceName, Windows::Win32::Direct3D11::D3D_SHADER_MACRO* pDefines, Windows::Win32::Direct3D11::ID3DInclude* pInclude, int8_t* pEntrypoint, int8_t* pTarget, uint32_t Flags1, uint32_t Flags2, uint32_t SecondaryDataFlags, void* pSecondaryData, size_t SecondaryDataSize, Windows::Win32::Direct3D11::ID3DBlob** ppCode, Windows::Win32::Direct3D11::ID3DBlob** ppErrorMsgs)
    {
        auto win32_impl_result = WIN32_IMPL_D3DCompile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        return win32_impl_result;
    }
    inline int32_t D3DCompileFromFile(uint16_t* pFileName, Windows::Win32::Direct3D11::D3D_SHADER_MACRO* pDefines, Windows::Win32::Direct3D11::ID3DInclude* pInclude, int8_t* pEntrypoint, int8_t* pTarget, uint32_t Flags1, uint32_t Flags2, Windows::Win32::Direct3D11::ID3DBlob** ppCode, Windows::Win32::Direct3D11::ID3DBlob** ppErrorMsgs)
    {
        auto win32_impl_result = WIN32_IMPL_D3DCompileFromFile(pFileName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        return win32_impl_result;
    }
    inline int32_t D3DPreprocess(void* pSrcData, size_t SrcDataSize, int8_t* pSourceName, Windows::Win32::Direct3D11::D3D_SHADER_MACRO* pDefines, Windows::Win32::Direct3D11::ID3DInclude* pInclude, Windows::Win32::Direct3D11::ID3DBlob** ppCodeText, Windows::Win32::Direct3D11::ID3DBlob** ppErrorMsgs)
    {
        auto win32_impl_result = WIN32_IMPL_D3DPreprocess(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, ppCodeText, ppErrorMsgs);
        return win32_impl_result;
    }
    inline int32_t D3DGetDebugInfo(void* pSrcData, size_t SrcDataSize, Windows::Win32::Direct3D11::ID3DBlob** ppDebugInfo)
    {
        auto win32_impl_result = WIN32_IMPL_D3DGetDebugInfo(pSrcData, SrcDataSize, ppDebugInfo);
        return win32_impl_result;
    }
    inline int32_t D3DReflect(void* pSrcData, size_t SrcDataSize, ::win32::guid* pInterface, void** ppReflector)
    {
        auto win32_impl_result = WIN32_IMPL_D3DReflect(pSrcData, SrcDataSize, pInterface, ppReflector);
        return win32_impl_result;
    }
    inline int32_t D3DReflectLibrary(void* pSrcData, size_t SrcDataSize, ::win32::guid* riid, void** ppReflector)
    {
        auto win32_impl_result = WIN32_IMPL_D3DReflectLibrary(pSrcData, SrcDataSize, riid, ppReflector);
        return win32_impl_result;
    }
    inline int32_t D3DDisassemble(void* pSrcData, size_t SrcDataSize, uint32_t Flags, int8_t* szComments, Windows::Win32::Direct3D11::ID3DBlob** ppDisassembly)
    {
        auto win32_impl_result = WIN32_IMPL_D3DDisassemble(pSrcData, SrcDataSize, Flags, szComments, ppDisassembly);
        return win32_impl_result;
    }
    inline int32_t D3DDisassembleRegion(void* pSrcData, size_t SrcDataSize, uint32_t Flags, int8_t* szComments, size_t StartByteOffset, size_t NumInsts, size_t* pFinishByteOffset, Windows::Win32::Direct3D11::ID3DBlob** ppDisassembly)
    {
        auto win32_impl_result = WIN32_IMPL_D3DDisassembleRegion(pSrcData, SrcDataSize, Flags, szComments, StartByteOffset, NumInsts, pFinishByteOffset, ppDisassembly);
        return win32_impl_result;
    }
    inline int32_t D3DCreateLinker(Windows::Win32::Direct3D11::ID3D11Linker** ppLinker)
    {
        auto win32_impl_result = WIN32_IMPL_D3DCreateLinker(ppLinker);
        return win32_impl_result;
    }
    inline int32_t D3DLoadModule(void* pSrcData, size_t cbSrcDataSize, Windows::Win32::Direct3D11::ID3D11Module** ppModule)
    {
        auto win32_impl_result = WIN32_IMPL_D3DLoadModule(pSrcData, cbSrcDataSize, ppModule);
        return win32_impl_result;
    }
    inline int32_t D3DCreateFunctionLinkingGraph(uint32_t uFlags, Windows::Win32::Direct3D11::ID3D11FunctionLinkingGraph** ppFunctionLinkingGraph)
    {
        auto win32_impl_result = WIN32_IMPL_D3DCreateFunctionLinkingGraph(uFlags, ppFunctionLinkingGraph);
        return win32_impl_result;
    }
    inline int32_t D3DGetTraceInstructionOffsets(void* pSrcData, size_t SrcDataSize, uint32_t Flags, size_t StartInstIndex, size_t NumInsts, size_t* pOffsets, size_t* pTotalInsts)
    {
        auto win32_impl_result = WIN32_IMPL_D3DGetTraceInstructionOffsets(pSrcData, SrcDataSize, Flags, StartInstIndex, NumInsts, pOffsets, pTotalInsts);
        return win32_impl_result;
    }
    inline int32_t D3DGetInputSignatureBlob(void* pSrcData, size_t SrcDataSize, Windows::Win32::Direct3D11::ID3DBlob** ppSignatureBlob)
    {
        auto win32_impl_result = WIN32_IMPL_D3DGetInputSignatureBlob(pSrcData, SrcDataSize, ppSignatureBlob);
        return win32_impl_result;
    }
    inline int32_t D3DGetOutputSignatureBlob(void* pSrcData, size_t SrcDataSize, Windows::Win32::Direct3D11::ID3DBlob** ppSignatureBlob)
    {
        auto win32_impl_result = WIN32_IMPL_D3DGetOutputSignatureBlob(pSrcData, SrcDataSize, ppSignatureBlob);
        return win32_impl_result;
    }
    inline int32_t D3DGetInputAndOutputSignatureBlob(void* pSrcData, size_t SrcDataSize, Windows::Win32::Direct3D11::ID3DBlob** ppSignatureBlob)
    {
        auto win32_impl_result = WIN32_IMPL_D3DGetInputAndOutputSignatureBlob(pSrcData, SrcDataSize, ppSignatureBlob);
        return win32_impl_result;
    }
    inline int32_t D3DStripShader(void* pShaderBytecode, size_t BytecodeLength, uint32_t uStripFlags, Windows::Win32::Direct3D11::ID3DBlob** ppStrippedBlob)
    {
        auto win32_impl_result = WIN32_IMPL_D3DStripShader(pShaderBytecode, BytecodeLength, uStripFlags, ppStrippedBlob);
        return win32_impl_result;
    }
    inline int32_t D3DGetBlobPart(void* pSrcData, size_t SrcDataSize, Windows::Win32::Direct3DHlsl::D3D_BLOB_PART Part, uint32_t Flags, Windows::Win32::Direct3D11::ID3DBlob** ppPart)
    {
        auto win32_impl_result = WIN32_IMPL_D3DGetBlobPart(pSrcData, SrcDataSize, Part, Flags, ppPart);
        return win32_impl_result;
    }
    inline int32_t D3DSetBlobPart(void* pSrcData, size_t SrcDataSize, Windows::Win32::Direct3DHlsl::D3D_BLOB_PART Part, uint32_t Flags, void* pPart, size_t PartSize, Windows::Win32::Direct3D11::ID3DBlob** ppNewShader)
    {
        auto win32_impl_result = WIN32_IMPL_D3DSetBlobPart(pSrcData, SrcDataSize, Part, Flags, pPart, PartSize, ppNewShader);
        return win32_impl_result;
    }
    inline int32_t D3DCreateBlob(size_t Size, Windows::Win32::Direct3D11::ID3DBlob** ppBlob)
    {
        auto win32_impl_result = WIN32_IMPL_D3DCreateBlob(Size, ppBlob);
        return win32_impl_result;
    }
    inline int32_t D3DCompressShaders(uint32_t uNumShaders, Windows::Win32::Direct3DHlsl::D3D_SHADER_DATA* pShaderData, uint32_t uFlags, Windows::Win32::Direct3D11::ID3DBlob** ppCompressedData)
    {
        auto win32_impl_result = WIN32_IMPL_D3DCompressShaders(uNumShaders, pShaderData, uFlags, ppCompressedData);
        return win32_impl_result;
    }
    inline int32_t D3DDecompressShaders(void* pSrcData, size_t SrcDataSize, uint32_t uNumShaders, uint32_t uStartIndex, uint32_t* pIndices, uint32_t uFlags, Windows::Win32::Direct3D11::ID3DBlob** ppShaders, uint32_t* pTotalShaders)
    {
        auto win32_impl_result = WIN32_IMPL_D3DDecompressShaders(pSrcData, SrcDataSize, uNumShaders, uStartIndex, pIndices, uFlags, ppShaders, pTotalShaders);
        return win32_impl_result;
    }
    inline int32_t D3DDisassemble10Effect(Windows::Win32::Direct3D10::ID3D10Effect* pEffect, uint32_t Flags, Windows::Win32::Direct3D11::ID3DBlob** ppDisassembly)
    {
        auto win32_impl_result = WIN32_IMPL_D3DDisassemble10Effect(pEffect, Flags, ppDisassembly);
        return win32_impl_result;
    }

    inline constexpr wchar_t const* D3DCOMPILER_DLL = L"d3dcompiler_47.dll";
    inline constexpr int32_t D3D_COMPILER_VERSION = 47;
    inline constexpr uint32_t D3DCOMPILE_DEBUG = 0x1;
    inline constexpr uint32_t D3DCOMPILE_SKIP_VALIDATION = 0x2;
    inline constexpr uint32_t D3DCOMPILE_SKIP_OPTIMIZATION = 0x4;
    inline constexpr uint32_t D3DCOMPILE_PACK_MATRIX_ROW_MAJOR = 0x8;
    inline constexpr uint32_t D3DCOMPILE_PACK_MATRIX_COLUMN_MAJOR = 0x10;
    inline constexpr uint32_t D3DCOMPILE_PARTIAL_PRECISION = 0x20;
    inline constexpr uint32_t D3DCOMPILE_FORCE_VS_SOFTWARE_NO_OPT = 0x40;
    inline constexpr uint32_t D3DCOMPILE_FORCE_PS_SOFTWARE_NO_OPT = 0x80;
    inline constexpr uint32_t D3DCOMPILE_NO_PRESHADER = 0x100;
    inline constexpr uint32_t D3DCOMPILE_AVOID_FLOW_CONTROL = 0x200;
    inline constexpr uint32_t D3DCOMPILE_PREFER_FLOW_CONTROL = 0x400;
    inline constexpr uint32_t D3DCOMPILE_ENABLE_STRICTNESS = 0x800;
    inline constexpr uint32_t D3DCOMPILE_ENABLE_BACKWARDS_COMPATIBILITY = 0x1000;
    inline constexpr uint32_t D3DCOMPILE_IEEE_STRICTNESS = 0x2000;
    inline constexpr uint32_t D3DCOMPILE_OPTIMIZATION_LEVEL0 = 0x4000;
    inline constexpr uint32_t D3DCOMPILE_OPTIMIZATION_LEVEL1 = 0x0;
    inline constexpr uint32_t D3DCOMPILE_OPTIMIZATION_LEVEL2 = 0xc000;
    inline constexpr uint32_t D3DCOMPILE_OPTIMIZATION_LEVEL3 = 0x8000;
    inline constexpr uint32_t D3DCOMPILE_RESERVED16 = 0x10000;
    inline constexpr uint32_t D3DCOMPILE_RESERVED17 = 0x20000;
    inline constexpr uint32_t D3DCOMPILE_WARNINGS_ARE_ERRORS = 0x40000;
    inline constexpr uint32_t D3DCOMPILE_RESOURCES_MAY_ALIAS = 0x80000;
    inline constexpr uint32_t D3DCOMPILE_ENABLE_UNBOUNDED_DESCRIPTOR_TABLES = 0x100000;
    inline constexpr uint32_t D3DCOMPILE_ALL_RESOURCES_BOUND = 0x200000;
    inline constexpr uint32_t D3DCOMPILE_DEBUG_NAME_FOR_SOURCE = 0x400000;
    inline constexpr uint32_t D3DCOMPILE_DEBUG_NAME_FOR_BINARY = 0x800000;
    inline constexpr uint32_t D3DCOMPILE_EFFECT_CHILD_EFFECT = 0x1;
    inline constexpr uint32_t D3DCOMPILE_EFFECT_ALLOW_SLOW_OPS = 0x2;
    inline constexpr uint32_t D3DCOMPILE_FLAGS2_FORCE_ROOT_SIGNATURE_LATEST = 0x0;
    inline constexpr uint32_t D3DCOMPILE_FLAGS2_FORCE_ROOT_SIGNATURE_1_0 = 0x10;
    inline constexpr uint32_t D3DCOMPILE_FLAGS2_FORCE_ROOT_SIGNATURE_1_1 = 0x20;
    inline constexpr uint32_t D3D_COMPILE_STANDARD_FILE_INCLUDE = 0x1;
    inline constexpr uint32_t D3DCOMPILE_SECDATA_MERGE_UAV_SLOTS = 0x1;
    inline constexpr uint32_t D3DCOMPILE_SECDATA_PRESERVE_TEMPLATE_SLOTS = 0x2;
    inline constexpr uint32_t D3DCOMPILE_SECDATA_REQUIRE_TEMPLATE_MATCH = 0x4;
    inline constexpr uint32_t D3D_DISASM_ENABLE_COLOR_CODE = 0x1;
    inline constexpr uint32_t D3D_DISASM_ENABLE_DEFAULT_VALUE_PRINTS = 0x2;
    inline constexpr uint32_t D3D_DISASM_ENABLE_INSTRUCTION_NUMBERING = 0x4;
    inline constexpr uint32_t D3D_DISASM_ENABLE_INSTRUCTION_CYCLE = 0x8;
    inline constexpr uint32_t D3D_DISASM_DISABLE_DEBUG_INFO = 0x10;
    inline constexpr uint32_t D3D_DISASM_ENABLE_INSTRUCTION_OFFSET = 0x20;
    inline constexpr uint32_t D3D_DISASM_INSTRUCTION_ONLY = 0x40;
    inline constexpr uint32_t D3D_DISASM_PRINT_HEX_LITERALS = 0x80;
    inline constexpr uint32_t D3D_GET_INST_OFFSETS_INCLUDE_NON_EXECUTABLE = 0x1;
    inline constexpr uint32_t D3D_COMPRESS_SHADER_KEEP_ALL_PARTS = 0x1;
#pragma endregion methods

}
#endif
