// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_DistributedFileSystem_H
#define WIN32_Windows_Win32_DistributedFileSystem_H
#include "win32/base.h"
static_assert(win32::check_version(CPPWIN32_VERSION, "0.0.0.1"), "Mismatched C++/Win32 headers.");
#define CPPWIN32_VERSION "0.0.0.1"
#include "win32/impl/Windows.Win32.DistributedFileSystem.2.h"
WIN32_EXPORT namespace win32::Windows::Win32::DistributedFileSystem
{
#pragma region methods
    inline uint32_t NetDfsAdd(uint16_t* DfsEntryPath, uint16_t* ServerName, uint16_t* ShareName, uint16_t* Comment, uint32_t Flags)
    {
        auto win32_impl_result = WIN32_IMPL_NetDfsAdd(DfsEntryPath, ServerName, ShareName, Comment, Flags);
        return win32_impl_result;
    }
    inline uint32_t NetDfsAddStdRoot(uint16_t* ServerName, uint16_t* RootShare, uint16_t* Comment, uint32_t Flags)
    {
        auto win32_impl_result = WIN32_IMPL_NetDfsAddStdRoot(ServerName, RootShare, Comment, Flags);
        return win32_impl_result;
    }
    inline uint32_t NetDfsRemoveStdRoot(uint16_t* ServerName, uint16_t* RootShare, uint32_t Flags)
    {
        auto win32_impl_result = WIN32_IMPL_NetDfsRemoveStdRoot(ServerName, RootShare, Flags);
        return win32_impl_result;
    }
    inline uint32_t NetDfsAddFtRoot(uint16_t* ServerName, uint16_t* RootShare, uint16_t* FtDfsName, uint16_t* Comment, uint32_t Flags)
    {
        auto win32_impl_result = WIN32_IMPL_NetDfsAddFtRoot(ServerName, RootShare, FtDfsName, Comment, Flags);
        return win32_impl_result;
    }
    inline uint32_t NetDfsRemoveFtRoot(uint16_t* ServerName, uint16_t* RootShare, uint16_t* FtDfsName, uint32_t Flags)
    {
        auto win32_impl_result = WIN32_IMPL_NetDfsRemoveFtRoot(ServerName, RootShare, FtDfsName, Flags);
        return win32_impl_result;
    }
    inline uint32_t NetDfsRemoveFtRootForced(uint16_t* DomainName, uint16_t* ServerName, uint16_t* RootShare, uint16_t* FtDfsName, uint32_t Flags)
    {
        auto win32_impl_result = WIN32_IMPL_NetDfsRemoveFtRootForced(DomainName, ServerName, RootShare, FtDfsName, Flags);
        return win32_impl_result;
    }
    inline uint32_t NetDfsRemove(uint16_t* DfsEntryPath, uint16_t* ServerName, uint16_t* ShareName)
    {
        auto win32_impl_result = WIN32_IMPL_NetDfsRemove(DfsEntryPath, ServerName, ShareName);
        return win32_impl_result;
    }
    inline uint32_t NetDfsEnum(uint16_t* DfsName, uint32_t Level, uint32_t PrefMaxLen, uint8_t** Buffer, uint32_t* EntriesRead, uint32_t* ResumeHandle)
    {
        auto win32_impl_result = WIN32_IMPL_NetDfsEnum(DfsName, Level, PrefMaxLen, Buffer, EntriesRead, ResumeHandle);
        return win32_impl_result;
    }
    inline uint32_t NetDfsGetInfo(uint16_t* DfsEntryPath, uint16_t* ServerName, uint16_t* ShareName, uint32_t Level, uint8_t** Buffer)
    {
        auto win32_impl_result = WIN32_IMPL_NetDfsGetInfo(DfsEntryPath, ServerName, ShareName, Level, Buffer);
        return win32_impl_result;
    }
    inline uint32_t NetDfsSetInfo(uint16_t* DfsEntryPath, uint16_t* ServerName, uint16_t* ShareName, uint32_t Level, uint8_t* Buffer)
    {
        auto win32_impl_result = WIN32_IMPL_NetDfsSetInfo(DfsEntryPath, ServerName, ShareName, Level, Buffer);
        return win32_impl_result;
    }
    inline uint32_t NetDfsGetClientInfo(uint16_t* DfsEntryPath, uint16_t* ServerName, uint16_t* ShareName, uint32_t Level, uint8_t** Buffer)
    {
        auto win32_impl_result = WIN32_IMPL_NetDfsGetClientInfo(DfsEntryPath, ServerName, ShareName, Level, Buffer);
        return win32_impl_result;
    }
    inline uint32_t NetDfsSetClientInfo(uint16_t* DfsEntryPath, uint16_t* ServerName, uint16_t* ShareName, uint32_t Level, uint8_t* Buffer)
    {
        auto win32_impl_result = WIN32_IMPL_NetDfsSetClientInfo(DfsEntryPath, ServerName, ShareName, Level, Buffer);
        return win32_impl_result;
    }
    inline uint32_t NetDfsMove(uint16_t* OldDfsEntryPath, uint16_t* NewDfsEntryPath, uint32_t Flags)
    {
        auto win32_impl_result = WIN32_IMPL_NetDfsMove(OldDfsEntryPath, NewDfsEntryPath, Flags);
        return win32_impl_result;
    }
    inline uint32_t NetDfsAddRootTarget(uint16_t* pDfsPath, uint16_t* pTargetPath, uint32_t MajorVersion, uint16_t* pComment, uint32_t Flags)
    {
        auto win32_impl_result = WIN32_IMPL_NetDfsAddRootTarget(pDfsPath, pTargetPath, MajorVersion, pComment, Flags);
        return win32_impl_result;
    }
    inline uint32_t NetDfsRemoveRootTarget(uint16_t* pDfsPath, uint16_t* pTargetPath, uint32_t Flags)
    {
        auto win32_impl_result = WIN32_IMPL_NetDfsRemoveRootTarget(pDfsPath, pTargetPath, Flags);
        return win32_impl_result;
    }
    inline uint32_t NetDfsGetSecurity(uint16_t* DfsEntryPath, uint32_t SecurityInformation, void** ppSecurityDescriptor, uint32_t* lpcbSecurityDescriptor)
    {
        auto win32_impl_result = WIN32_IMPL_NetDfsGetSecurity(DfsEntryPath, SecurityInformation, ppSecurityDescriptor, lpcbSecurityDescriptor);
        return win32_impl_result;
    }
    inline uint32_t NetDfsSetSecurity(uint16_t* DfsEntryPath, uint32_t SecurityInformation, void* pSecurityDescriptor)
    {
        auto win32_impl_result = WIN32_IMPL_NetDfsSetSecurity(DfsEntryPath, SecurityInformation, pSecurityDescriptor);
        return win32_impl_result;
    }
    inline uint32_t NetDfsGetStdContainerSecurity(uint16_t* MachineName, uint32_t SecurityInformation, void** ppSecurityDescriptor, uint32_t* lpcbSecurityDescriptor)
    {
        auto win32_impl_result = WIN32_IMPL_NetDfsGetStdContainerSecurity(MachineName, SecurityInformation, ppSecurityDescriptor, lpcbSecurityDescriptor);
        return win32_impl_result;
    }
    inline uint32_t NetDfsSetStdContainerSecurity(uint16_t* MachineName, uint32_t SecurityInformation, void* pSecurityDescriptor)
    {
        auto win32_impl_result = WIN32_IMPL_NetDfsSetStdContainerSecurity(MachineName, SecurityInformation, pSecurityDescriptor);
        return win32_impl_result;
    }
    inline uint32_t NetDfsGetFtContainerSecurity(uint16_t* DomainName, uint32_t SecurityInformation, void** ppSecurityDescriptor, uint32_t* lpcbSecurityDescriptor)
    {
        auto win32_impl_result = WIN32_IMPL_NetDfsGetFtContainerSecurity(DomainName, SecurityInformation, ppSecurityDescriptor, lpcbSecurityDescriptor);
        return win32_impl_result;
    }
    inline uint32_t NetDfsSetFtContainerSecurity(uint16_t* DomainName, uint32_t SecurityInformation, void* pSecurityDescriptor)
    {
        auto win32_impl_result = WIN32_IMPL_NetDfsSetFtContainerSecurity(DomainName, SecurityInformation, pSecurityDescriptor);
        return win32_impl_result;
    }
    inline uint32_t NetDfsGetSupportedNamespaceVersion(Windows::Win32::DistributedFileSystem::DFS_NAMESPACE_VERSION_ORIGIN Origin, uint16_t* pName, Windows::Win32::DistributedFileSystem::DFS_SUPPORTED_NAMESPACE_VERSION_INFO** ppVersionInfo)
    {
        auto win32_impl_result = WIN32_IMPL_NetDfsGetSupportedNamespaceVersion(Origin, pName, ppVersionInfo);
        return win32_impl_result;
    }

#pragma endregion methods

}
#endif
