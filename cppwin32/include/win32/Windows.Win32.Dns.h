// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Dns_H
#define WIN32_Windows_Win32_Dns_H
#include "win32/base.h"
static_assert(win32::check_version(CPPWIN32_VERSION, "0.0.0.1"), "Mismatched C++/Win32 headers.");
#define CPPWIN32_VERSION "0.0.0.1"
#include "win32/impl/Windows.Win32.Dns.2.h"
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
#pragma region methods
    inline int32_t DnsQueryConfig(Windows::Win32::Dns::DNS_CONFIG_TYPE Config, uint32_t Flag, uint16_t* pwsAdapterName, void* pReserved, void* pBuffer, uint32_t* pBufLen)
    {
        auto win32_impl_result = WIN32_IMPL_DnsQueryConfig(Config, Flag, pwsAdapterName, pReserved, pBuffer, pBufLen);
        return win32_impl_result;
    }
    inline Windows::Win32::Dns::DNS_RECORDA* DnsRecordCopyEx(Windows::Win32::Dns::DNS_RECORDA* pRecord, Windows::Win32::Dns::DNS_CHARSET CharSetIn, Windows::Win32::Dns::DNS_CHARSET CharSetOut)
    {
        auto win32_impl_result = WIN32_IMPL_DnsRecordCopyEx(pRecord, CharSetIn, CharSetOut);
        return win32_impl_result;
    }
    inline Windows::Win32::Dns::DNS_RECORDA* DnsRecordSetCopyEx(Windows::Win32::Dns::DNS_RECORDA* pRecordSet, Windows::Win32::Dns::DNS_CHARSET CharSetIn, Windows::Win32::Dns::DNS_CHARSET CharSetOut)
    {
        auto win32_impl_result = WIN32_IMPL_DnsRecordSetCopyEx(pRecordSet, CharSetIn, CharSetOut);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL DnsRecordCompare(Windows::Win32::Dns::DNS_RECORDA* pRecord1, Windows::Win32::Dns::DNS_RECORDA* pRecord2)
    {
        auto win32_impl_result = WIN32_IMPL_DnsRecordCompare(pRecord1, pRecord2);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL DnsRecordSetCompare(Windows::Win32::Dns::DNS_RECORDA* pRR1, Windows::Win32::Dns::DNS_RECORDA* pRR2, Windows::Win32::Dns::DNS_RECORDA** ppDiff1, Windows::Win32::Dns::DNS_RECORDA** ppDiff2)
    {
        auto win32_impl_result = WIN32_IMPL_DnsRecordSetCompare(pRR1, pRR2, ppDiff1, ppDiff2);
        return win32_impl_result;
    }
    inline Windows::Win32::Dns::DNS_RECORDA* DnsRecordSetDetach(Windows::Win32::Dns::DNS_RECORDA* pRecordList)
    {
        auto win32_impl_result = WIN32_IMPL_DnsRecordSetDetach(pRecordList);
        return win32_impl_result;
    }
    inline void DnsFree(void* pData, Windows::Win32::Dns::DNS_FREE_TYPE FreeType)
    {
        WIN32_IMPL_DnsFree(pData, FreeType);
    }
    inline int32_t DnsQuery_A(int8_t* pszName, uint16_t wType, uint32_t Options, void* pExtra, Windows::Win32::Dns::DNS_RECORDA** ppQueryResults, void** pReserved)
    {
        auto win32_impl_result = WIN32_IMPL_DnsQuery_A(pszName, wType, Options, pExtra, ppQueryResults, pReserved);
        return win32_impl_result;
    }
    inline int32_t DnsQuery_UTF8(int8_t* pszName, uint16_t wType, uint32_t Options, void* pExtra, Windows::Win32::Dns::DNS_RECORDA** ppQueryResults, void** pReserved)
    {
        auto win32_impl_result = WIN32_IMPL_DnsQuery_UTF8(pszName, wType, Options, pExtra, ppQueryResults, pReserved);
        return win32_impl_result;
    }
    inline int32_t DnsQuery_W(uint16_t* pszName, uint16_t wType, uint32_t Options, void* pExtra, Windows::Win32::Dns::DNS_RECORDA** ppQueryResults, void** pReserved)
    {
        auto win32_impl_result = WIN32_IMPL_DnsQuery_W(pszName, wType, Options, pExtra, ppQueryResults, pReserved);
        return win32_impl_result;
    }
    inline int32_t DnsQueryEx(Windows::Win32::Dns::DNS_QUERY_REQUEST* pQueryRequest, Windows::Win32::Dns::DNS_QUERY_RESULT* pQueryResults, Windows::Win32::Dns::DNS_QUERY_CANCEL* pCancelHandle)
    {
        auto win32_impl_result = WIN32_IMPL_DnsQueryEx(pQueryRequest, pQueryResults, pCancelHandle);
        return win32_impl_result;
    }
    inline int32_t DnsCancelQuery(Windows::Win32::Dns::DNS_QUERY_CANCEL* pCancelHandle)
    {
        auto win32_impl_result = WIN32_IMPL_DnsCancelQuery(pCancelHandle);
        return win32_impl_result;
    }
    inline int32_t DnsAcquireContextHandle_W(uint32_t CredentialFlags, void* Credentials, Windows::Win32::Dns::DnsContextHandle* pContext)
    {
        auto win32_impl_result = WIN32_IMPL_DnsAcquireContextHandle_W(CredentialFlags, Credentials, pContext);
        return win32_impl_result;
    }
    inline int32_t DnsAcquireContextHandle_A(uint32_t CredentialFlags, void* Credentials, Windows::Win32::Dns::DnsContextHandle* pContext)
    {
        auto win32_impl_result = WIN32_IMPL_DnsAcquireContextHandle_A(CredentialFlags, Credentials, pContext);
        return win32_impl_result;
    }
    inline void DnsReleaseContextHandle(Windows::Win32::SystemServices::HANDLE hContext)
    {
        WIN32_IMPL_DnsReleaseContextHandle(hContext);
    }
    inline int32_t DnsModifyRecordsInSet_W(Windows::Win32::Dns::DNS_RECORDA* pAddRecords, Windows::Win32::Dns::DNS_RECORDA* pDeleteRecords, uint32_t Options, Windows::Win32::SystemServices::HANDLE hCredentials, void* pExtraList, void* pReserved)
    {
        auto win32_impl_result = WIN32_IMPL_DnsModifyRecordsInSet_W(pAddRecords, pDeleteRecords, Options, hCredentials, pExtraList, pReserved);
        return win32_impl_result;
    }
    inline int32_t DnsModifyRecordsInSet_A(Windows::Win32::Dns::DNS_RECORDA* pAddRecords, Windows::Win32::Dns::DNS_RECORDA* pDeleteRecords, uint32_t Options, Windows::Win32::SystemServices::HANDLE hCredentials, void* pExtraList, void* pReserved)
    {
        auto win32_impl_result = WIN32_IMPL_DnsModifyRecordsInSet_A(pAddRecords, pDeleteRecords, Options, hCredentials, pExtraList, pReserved);
        return win32_impl_result;
    }
    inline int32_t DnsModifyRecordsInSet_UTF8(Windows::Win32::Dns::DNS_RECORDA* pAddRecords, Windows::Win32::Dns::DNS_RECORDA* pDeleteRecords, uint32_t Options, Windows::Win32::SystemServices::HANDLE hCredentials, void* pExtraList, void* pReserved)
    {
        auto win32_impl_result = WIN32_IMPL_DnsModifyRecordsInSet_UTF8(pAddRecords, pDeleteRecords, Options, hCredentials, pExtraList, pReserved);
        return win32_impl_result;
    }
    inline int32_t DnsReplaceRecordSetW(Windows::Win32::Dns::DNS_RECORDA* pReplaceSet, uint32_t Options, Windows::Win32::SystemServices::HANDLE hContext, void* pExtraInfo, void* pReserved)
    {
        auto win32_impl_result = WIN32_IMPL_DnsReplaceRecordSetW(pReplaceSet, Options, hContext, pExtraInfo, pReserved);
        return win32_impl_result;
    }
    inline int32_t DnsReplaceRecordSetA(Windows::Win32::Dns::DNS_RECORDA* pReplaceSet, uint32_t Options, Windows::Win32::SystemServices::HANDLE hContext, void* pExtraInfo, void* pReserved)
    {
        auto win32_impl_result = WIN32_IMPL_DnsReplaceRecordSetA(pReplaceSet, Options, hContext, pExtraInfo, pReserved);
        return win32_impl_result;
    }
    inline int32_t DnsReplaceRecordSetUTF8(Windows::Win32::Dns::DNS_RECORDA* pReplaceSet, uint32_t Options, Windows::Win32::SystemServices::HANDLE hContext, void* pExtraInfo, void* pReserved)
    {
        auto win32_impl_result = WIN32_IMPL_DnsReplaceRecordSetUTF8(pReplaceSet, Options, hContext, pExtraInfo, pReserved);
        return win32_impl_result;
    }
    inline int32_t DnsValidateName_W(uint16_t* pszName, Windows::Win32::Dns::DNS_NAME_FORMAT Format)
    {
        auto win32_impl_result = WIN32_IMPL_DnsValidateName_W(pszName, Format);
        return win32_impl_result;
    }
    inline int32_t DnsValidateName_A(int8_t* pszName, Windows::Win32::Dns::DNS_NAME_FORMAT Format)
    {
        auto win32_impl_result = WIN32_IMPL_DnsValidateName_A(pszName, Format);
        return win32_impl_result;
    }
    inline int32_t DnsValidateName_UTF8(int8_t* pszName, Windows::Win32::Dns::DNS_NAME_FORMAT Format)
    {
        auto win32_impl_result = WIN32_IMPL_DnsValidateName_UTF8(pszName, Format);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL DnsNameCompare_A(int8_t* pName1, int8_t* pName2)
    {
        auto win32_impl_result = WIN32_IMPL_DnsNameCompare_A(pName1, pName2);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL DnsNameCompare_W(uint16_t* pName1, uint16_t* pName2)
    {
        auto win32_impl_result = WIN32_IMPL_DnsNameCompare_W(pName1, pName2);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL DnsWriteQuestionToBuffer_W(Windows::Win32::Dns::DNS_MESSAGE_BUFFER* pDnsBuffer, uint32_t* pdwBufferSize, uint16_t* pszName, uint16_t wType, uint16_t Xid, Windows::Win32::SystemServices::BOOL fRecursionDesired)
    {
        auto win32_impl_result = WIN32_IMPL_DnsWriteQuestionToBuffer_W(pDnsBuffer, pdwBufferSize, pszName, wType, Xid, fRecursionDesired);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL DnsWriteQuestionToBuffer_UTF8(Windows::Win32::Dns::DNS_MESSAGE_BUFFER* pDnsBuffer, uint32_t* pdwBufferSize, int8_t* pszName, uint16_t wType, uint16_t Xid, Windows::Win32::SystemServices::BOOL fRecursionDesired)
    {
        auto win32_impl_result = WIN32_IMPL_DnsWriteQuestionToBuffer_UTF8(pDnsBuffer, pdwBufferSize, pszName, wType, Xid, fRecursionDesired);
        return win32_impl_result;
    }
    inline int32_t DnsExtractRecordsFromMessage_W(Windows::Win32::Dns::DNS_MESSAGE_BUFFER* pDnsBuffer, uint16_t wMessageLength, Windows::Win32::Dns::DNS_RECORDA** ppRecord)
    {
        auto win32_impl_result = WIN32_IMPL_DnsExtractRecordsFromMessage_W(pDnsBuffer, wMessageLength, ppRecord);
        return win32_impl_result;
    }
    inline int32_t DnsExtractRecordsFromMessage_UTF8(Windows::Win32::Dns::DNS_MESSAGE_BUFFER* pDnsBuffer, uint16_t wMessageLength, Windows::Win32::Dns::DNS_RECORDA** ppRecord)
    {
        auto win32_impl_result = WIN32_IMPL_DnsExtractRecordsFromMessage_UTF8(pDnsBuffer, wMessageLength, ppRecord);
        return win32_impl_result;
    }
    inline uint32_t DnsGetProxyInformation(uint16_t* hostName, Windows::Win32::Dns::DNS_PROXY_INFORMATION* proxyInformation, Windows::Win32::Dns::DNS_PROXY_INFORMATION* defaultProxyInformation, Windows::Win32::Dns::DNS_PROXY_COMPLETION_ROUTINE* completionRoutine, void* completionContext)
    {
        auto win32_impl_result = WIN32_IMPL_DnsGetProxyInformation(hostName, proxyInformation, defaultProxyInformation, completionRoutine, completionContext);
        return win32_impl_result;
    }
    inline void DnsFreeProxyName(uint16_t* proxyName)
    {
        WIN32_IMPL_DnsFreeProxyName(proxyName);
    }
    inline uint32_t DnsConnectionGetProxyInfoForHostUrl(uint16_t* pwszHostUrl, uint8_t* pSelectionContext, uint32_t dwSelectionContextLength, uint32_t dwExplicitInterfaceIndex, Windows::Win32::Dns::DNS_CONNECTION_PROXY_INFO_EX* pProxyInfoEx)
    {
        auto win32_impl_result = WIN32_IMPL_DnsConnectionGetProxyInfoForHostUrl(pwszHostUrl, pSelectionContext, dwSelectionContextLength, dwExplicitInterfaceIndex, pProxyInfoEx);
        return win32_impl_result;
    }
    inline void DnsConnectionFreeProxyInfoEx(Windows::Win32::Dns::DNS_CONNECTION_PROXY_INFO_EX* pProxyInfoEx)
    {
        WIN32_IMPL_DnsConnectionFreeProxyInfoEx(pProxyInfoEx);
    }
    inline uint32_t DnsConnectionGetProxyInfo(uint16_t* pwszConnectionName, Windows::Win32::Dns::DNS_CONNECTION_PROXY_TYPE Type, Windows::Win32::Dns::DNS_CONNECTION_PROXY_INFO* pProxyInfo)
    {
        auto win32_impl_result = WIN32_IMPL_DnsConnectionGetProxyInfo(pwszConnectionName, Type, pProxyInfo);
        return win32_impl_result;
    }
    inline void DnsConnectionFreeProxyInfo(Windows::Win32::Dns::DNS_CONNECTION_PROXY_INFO* pProxyInfo)
    {
        WIN32_IMPL_DnsConnectionFreeProxyInfo(pProxyInfo);
    }
    inline uint32_t DnsConnectionSetProxyInfo(uint16_t* pwszConnectionName, Windows::Win32::Dns::DNS_CONNECTION_PROXY_TYPE Type, Windows::Win32::Dns::DNS_CONNECTION_PROXY_INFO* pProxyInfo)
    {
        auto win32_impl_result = WIN32_IMPL_DnsConnectionSetProxyInfo(pwszConnectionName, Type, pProxyInfo);
        return win32_impl_result;
    }
    inline uint32_t DnsConnectionDeleteProxyInfo(uint16_t* pwszConnectionName, Windows::Win32::Dns::DNS_CONNECTION_PROXY_TYPE Type)
    {
        auto win32_impl_result = WIN32_IMPL_DnsConnectionDeleteProxyInfo(pwszConnectionName, Type);
        return win32_impl_result;
    }
    inline uint32_t DnsConnectionGetProxyList(uint16_t* pwszConnectionName, Windows::Win32::Dns::DNS_CONNECTION_PROXY_LIST* pProxyList)
    {
        auto win32_impl_result = WIN32_IMPL_DnsConnectionGetProxyList(pwszConnectionName, pProxyList);
        return win32_impl_result;
    }
    inline void DnsConnectionFreeProxyList(Windows::Win32::Dns::DNS_CONNECTION_PROXY_LIST* pProxyList)
    {
        WIN32_IMPL_DnsConnectionFreeProxyList(pProxyList);
    }
    inline uint32_t DnsConnectionGetNameList(Windows::Win32::Dns::DNS_CONNECTION_NAME_LIST* pNameList)
    {
        auto win32_impl_result = WIN32_IMPL_DnsConnectionGetNameList(pNameList);
        return win32_impl_result;
    }
    inline void DnsConnectionFreeNameList(Windows::Win32::Dns::DNS_CONNECTION_NAME_LIST* pNameList)
    {
        WIN32_IMPL_DnsConnectionFreeNameList(pNameList);
    }
    inline uint32_t DnsConnectionUpdateIfIndexTable(Windows::Win32::Dns::DNS_CONNECTION_IFINDEX_LIST* pConnectionIfIndexEntries)
    {
        auto win32_impl_result = WIN32_IMPL_DnsConnectionUpdateIfIndexTable(pConnectionIfIndexEntries);
        return win32_impl_result;
    }
    inline uint32_t DnsConnectionSetPolicyEntries(Windows::Win32::Dns::DNS_CONNECTION_POLICY_TAG PolicyEntryTag, Windows::Win32::Dns::DNS_CONNECTION_POLICY_ENTRY_LIST* pPolicyEntryList)
    {
        auto win32_impl_result = WIN32_IMPL_DnsConnectionSetPolicyEntries(PolicyEntryTag, pPolicyEntryList);
        return win32_impl_result;
    }
    inline uint32_t DnsConnectionDeletePolicyEntries(Windows::Win32::Dns::DNS_CONNECTION_POLICY_TAG PolicyEntryTag)
    {
        auto win32_impl_result = WIN32_IMPL_DnsConnectionDeletePolicyEntries(PolicyEntryTag);
        return win32_impl_result;
    }
    inline Windows::Win32::Dns::DNS_SERVICE_INSTANCE* DnsServiceConstructInstance(uint16_t* pServiceName, uint16_t* pHostName, uint32_t* pIp4, Windows::Win32::Dns::IP6_ADDRESS* pIp6, uint16_t wPort, uint16_t wPriority, uint16_t wWeight, uint32_t dwPropertiesCount, uint16_t** keys, uint16_t** values)
    {
        auto win32_impl_result = WIN32_IMPL_DnsServiceConstructInstance(pServiceName, pHostName, pIp4, pIp6, wPort, wPriority, wWeight, dwPropertiesCount, keys, values);
        return win32_impl_result;
    }
    inline Windows::Win32::Dns::DNS_SERVICE_INSTANCE* DnsServiceCopyInstance(Windows::Win32::Dns::DNS_SERVICE_INSTANCE* pOrig)
    {
        auto win32_impl_result = WIN32_IMPL_DnsServiceCopyInstance(pOrig);
        return win32_impl_result;
    }
    inline void DnsServiceFreeInstance(Windows::Win32::Dns::DNS_SERVICE_INSTANCE* pInstance)
    {
        WIN32_IMPL_DnsServiceFreeInstance(pInstance);
    }
    inline int32_t DnsServiceBrowse(Windows::Win32::Dns::DNS_SERVICE_BROWSE_REQUEST* pRequest, Windows::Win32::Dns::DNS_SERVICE_CANCEL* pCancel)
    {
        auto win32_impl_result = WIN32_IMPL_DnsServiceBrowse(pRequest, pCancel);
        return win32_impl_result;
    }
    inline int32_t DnsServiceBrowseCancel(Windows::Win32::Dns::DNS_SERVICE_CANCEL* pCancelHandle)
    {
        auto win32_impl_result = WIN32_IMPL_DnsServiceBrowseCancel(pCancelHandle);
        return win32_impl_result;
    }
    inline int32_t DnsServiceResolve(Windows::Win32::Dns::DNS_SERVICE_RESOLVE_REQUEST* pRequest, Windows::Win32::Dns::DNS_SERVICE_CANCEL* pCancel)
    {
        auto win32_impl_result = WIN32_IMPL_DnsServiceResolve(pRequest, pCancel);
        return win32_impl_result;
    }
    inline int32_t DnsServiceResolveCancel(Windows::Win32::Dns::DNS_SERVICE_CANCEL* pCancelHandle)
    {
        auto win32_impl_result = WIN32_IMPL_DnsServiceResolveCancel(pCancelHandle);
        return win32_impl_result;
    }
    inline uint32_t DnsServiceRegister(Windows::Win32::Dns::DNS_SERVICE_REGISTER_REQUEST* pRequest, Windows::Win32::Dns::DNS_SERVICE_CANCEL* pCancel)
    {
        auto win32_impl_result = WIN32_IMPL_DnsServiceRegister(pRequest, pCancel);
        return win32_impl_result;
    }
    inline uint32_t DnsServiceDeRegister(Windows::Win32::Dns::DNS_SERVICE_REGISTER_REQUEST* pRequest, Windows::Win32::Dns::DNS_SERVICE_CANCEL* pCancel)
    {
        auto win32_impl_result = WIN32_IMPL_DnsServiceDeRegister(pRequest, pCancel);
        return win32_impl_result;
    }
    inline uint32_t DnsServiceRegisterCancel(Windows::Win32::Dns::DNS_SERVICE_CANCEL* pCancelHandle)
    {
        auto win32_impl_result = WIN32_IMPL_DnsServiceRegisterCancel(pCancelHandle);
        return win32_impl_result;
    }
    inline int32_t DnsStartMulticastQuery(Windows::Win32::Dns::MDNS_QUERY_REQUEST* pQueryRequest, Windows::Win32::Dns::MDNS_QUERY_HANDLE* pHandle)
    {
        auto win32_impl_result = WIN32_IMPL_DnsStartMulticastQuery(pQueryRequest, pHandle);
        return win32_impl_result;
    }
    inline int32_t DnsStopMulticastQuery(Windows::Win32::Dns::MDNS_QUERY_HANDLE* pHandle)
    {
        auto win32_impl_result = WIN32_IMPL_DnsStopMulticastQuery(pHandle);
        return win32_impl_result;
    }

#pragma endregion methods

}
#endif
