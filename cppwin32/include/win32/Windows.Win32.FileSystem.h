// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_FileSystem_H
#define WIN32_Windows_Win32_FileSystem_H
#include "win32/base.h"
static_assert(win32::check_version(CPPWIN32_VERSION, "0.0.0.1"), "Mismatched C++/Win32 headers.");
#define CPPWIN32_VERSION "0.0.0.1"
#include "win32/impl/Windows.Win32.FileSystem.2.h"
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
#pragma region methods
    inline Windows::Win32::SystemServices::BOOL CreateDirectoryA(int8_t* lpPathName, Windows::Win32::SystemServices::SECURITY_ATTRIBUTES* lpSecurityAttributes)
    {
        auto win32_impl_result = WIN32_IMPL_CreateDirectoryA(lpPathName, lpSecurityAttributes);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CreateDirectoryW(uint16_t* lpPathName, Windows::Win32::SystemServices::SECURITY_ATTRIBUTES* lpSecurityAttributes)
    {
        auto win32_impl_result = WIN32_IMPL_CreateDirectoryW(lpPathName, lpSecurityAttributes);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::HANDLE CreateFileA(int8_t* lpFileName, Windows::Win32::FileSystem::FILE_ACCESS_FLAGS dwDesiredAccess, Windows::Win32::FileSystem::FILE_SHARE_FLAGS dwShareMode, Windows::Win32::SystemServices::SECURITY_ATTRIBUTES* lpSecurityAttributes, Windows::Win32::FileSystem::FILE_CREATE_FLAGS dwCreationDisposition, Windows::Win32::FileSystem::FILE_FLAGS_AND_ATTRIBUTES dwFlagsAndAttributes, Windows::Win32::SystemServices::HANDLE hTemplateFile)
    {
        auto win32_impl_result = WIN32_IMPL_CreateFileA(lpFileName, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::HANDLE CreateFileW(uint16_t* lpFileName, Windows::Win32::FileSystem::FILE_ACCESS_FLAGS dwDesiredAccess, Windows::Win32::FileSystem::FILE_SHARE_FLAGS dwShareMode, Windows::Win32::SystemServices::SECURITY_ATTRIBUTES* lpSecurityAttributes, Windows::Win32::FileSystem::FILE_CREATE_FLAGS dwCreationDisposition, Windows::Win32::FileSystem::FILE_FLAGS_AND_ATTRIBUTES dwFlagsAndAttributes, Windows::Win32::SystemServices::HANDLE hTemplateFile)
    {
        auto win32_impl_result = WIN32_IMPL_CreateFileW(lpFileName, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL DefineDosDeviceW(Windows::Win32::FileSystem::DEFINE_DOS_DEVICE_FLAGS dwFlags, uint16_t* lpDeviceName, uint16_t* lpTargetPath)
    {
        auto win32_impl_result = WIN32_IMPL_DefineDosDeviceW(dwFlags, lpDeviceName, lpTargetPath);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL DeleteFileA(int8_t* lpFileName)
    {
        auto win32_impl_result = WIN32_IMPL_DeleteFileA(lpFileName);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL DeleteFileW(uint16_t* lpFileName)
    {
        auto win32_impl_result = WIN32_IMPL_DeleteFileW(lpFileName);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL DeleteVolumeMountPointW(uint16_t* lpszVolumeMountPoint)
    {
        auto win32_impl_result = WIN32_IMPL_DeleteVolumeMountPointW(lpszVolumeMountPoint);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL FindClose(Windows::Win32::SystemServices::HANDLE hFindFile)
    {
        auto win32_impl_result = WIN32_IMPL_FindClose(hFindFile);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL FindCloseChangeNotification(Windows::Win32::FileSystem::FindChangeNotifcationHandle hChangeHandle)
    {
        auto win32_impl_result = WIN32_IMPL_FindCloseChangeNotification(hChangeHandle);
        return win32_impl_result;
    }
    inline Windows::Win32::FileSystem::FindChangeNotifcationHandle FindFirstChangeNotificationA(int8_t* lpPathName, Windows::Win32::SystemServices::BOOL bWatchSubtree, Windows::Win32::FileSystem::FILE_NOTIFY_CHANGE dwNotifyFilter)
    {
        auto win32_impl_result = WIN32_IMPL_FindFirstChangeNotificationA(lpPathName, bWatchSubtree, dwNotifyFilter);
        return win32_impl_result;
    }
    inline Windows::Win32::FileSystem::FindChangeNotifcationHandle FindFirstChangeNotificationW(uint16_t* lpPathName, Windows::Win32::SystemServices::BOOL bWatchSubtree, uint32_t dwNotifyFilter)
    {
        auto win32_impl_result = WIN32_IMPL_FindFirstChangeNotificationW(lpPathName, bWatchSubtree, dwNotifyFilter);
        return win32_impl_result;
    }
    inline Windows::Win32::FileSystem::FindFileHandle FindFirstFileA(int8_t* lpFileName, Windows::Win32::FileSystem::WIN32_FIND_DATAA* lpFindFileData)
    {
        auto win32_impl_result = WIN32_IMPL_FindFirstFileA(lpFileName, lpFindFileData);
        return win32_impl_result;
    }
    inline Windows::Win32::FileSystem::FindFileHandle FindFirstFileW(uint16_t* lpFileName, Windows::Win32::FileSystem::WIN32_FIND_DATAW* lpFindFileData)
    {
        auto win32_impl_result = WIN32_IMPL_FindFirstFileW(lpFileName, lpFindFileData);
        return win32_impl_result;
    }
    inline Windows::Win32::FileSystem::FindFileHandle FindFirstFileExA(int8_t* lpFileName, Windows::Win32::FileSystem::FINDEX_INFO_LEVELS fInfoLevelId, void* lpFindFileData, Windows::Win32::FileSystem::FINDEX_SEARCH_OPS fSearchOp, void* lpSearchFilter, Windows::Win32::FileSystem::FIND_FIRST_EX_FLAGS dwAdditionalFlags)
    {
        auto win32_impl_result = WIN32_IMPL_FindFirstFileExA(lpFileName, fInfoLevelId, lpFindFileData, fSearchOp, lpSearchFilter, dwAdditionalFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::FileSystem::FindFileHandle FindFirstFileExW(uint16_t* lpFileName, Windows::Win32::FileSystem::FINDEX_INFO_LEVELS fInfoLevelId, void* lpFindFileData, Windows::Win32::FileSystem::FINDEX_SEARCH_OPS fSearchOp, void* lpSearchFilter, Windows::Win32::FileSystem::FIND_FIRST_EX_FLAGS dwAdditionalFlags)
    {
        auto win32_impl_result = WIN32_IMPL_FindFirstFileExW(lpFileName, fInfoLevelId, lpFindFileData, fSearchOp, lpSearchFilter, dwAdditionalFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::FileSystem::FindVolumeHandle FindFirstVolumeW(uint16_t* lpszVolumeName, uint32_t cchBufferLength)
    {
        auto win32_impl_result = WIN32_IMPL_FindFirstVolumeW(lpszVolumeName, cchBufferLength);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL FindNextChangeNotification(Windows::Win32::FileSystem::FindChangeNotifcationHandle hChangeHandle)
    {
        auto win32_impl_result = WIN32_IMPL_FindNextChangeNotification(hChangeHandle);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL FindNextFileA(Windows::Win32::FileSystem::FindFileHandle hFindFile, Windows::Win32::FileSystem::WIN32_FIND_DATAA* lpFindFileData)
    {
        auto win32_impl_result = WIN32_IMPL_FindNextFileA(hFindFile, lpFindFileData);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL FindNextFileW(Windows::Win32::SystemServices::HANDLE hFindFile, Windows::Win32::FileSystem::WIN32_FIND_DATAW* lpFindFileData)
    {
        auto win32_impl_result = WIN32_IMPL_FindNextFileW(hFindFile, lpFindFileData);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL FindNextVolumeW(Windows::Win32::FileSystem::FindVolumeHandle hFindVolume, uint16_t* lpszVolumeName, uint32_t cchBufferLength)
    {
        auto win32_impl_result = WIN32_IMPL_FindNextVolumeW(hFindVolume, lpszVolumeName, cchBufferLength);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL FindVolumeClose(Windows::Win32::FileSystem::FindVolumeHandle hFindVolume)
    {
        auto win32_impl_result = WIN32_IMPL_FindVolumeClose(hFindVolume);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL FlushFileBuffers(Windows::Win32::SystemServices::HANDLE hFile)
    {
        auto win32_impl_result = WIN32_IMPL_FlushFileBuffers(hFile);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetDiskFreeSpaceA(int8_t* lpRootPathName, uint32_t* lpSectorsPerCluster, uint32_t* lpBytesPerSector, uint32_t* lpNumberOfFreeClusters, uint32_t* lpTotalNumberOfClusters)
    {
        auto win32_impl_result = WIN32_IMPL_GetDiskFreeSpaceA(lpRootPathName, lpSectorsPerCluster, lpBytesPerSector, lpNumberOfFreeClusters, lpTotalNumberOfClusters);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetDiskFreeSpaceW(uint16_t* lpRootPathName, uint32_t* lpSectorsPerCluster, uint32_t* lpBytesPerSector, uint32_t* lpNumberOfFreeClusters, uint32_t* lpTotalNumberOfClusters)
    {
        auto win32_impl_result = WIN32_IMPL_GetDiskFreeSpaceW(lpRootPathName, lpSectorsPerCluster, lpBytesPerSector, lpNumberOfFreeClusters, lpTotalNumberOfClusters);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetDiskFreeSpaceExA(int8_t* lpDirectoryName, Windows::Win32::SystemServices::ULARGE_INTEGER* lpFreeBytesAvailableToCaller, Windows::Win32::SystemServices::ULARGE_INTEGER* lpTotalNumberOfBytes, Windows::Win32::SystemServices::ULARGE_INTEGER* lpTotalNumberOfFreeBytes)
    {
        auto win32_impl_result = WIN32_IMPL_GetDiskFreeSpaceExA(lpDirectoryName, lpFreeBytesAvailableToCaller, lpTotalNumberOfBytes, lpTotalNumberOfFreeBytes);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetDiskFreeSpaceExW(uint16_t* lpDirectoryName, Windows::Win32::SystemServices::ULARGE_INTEGER* lpFreeBytesAvailableToCaller, Windows::Win32::SystemServices::ULARGE_INTEGER* lpTotalNumberOfBytes, Windows::Win32::SystemServices::ULARGE_INTEGER* lpTotalNumberOfFreeBytes)
    {
        auto win32_impl_result = WIN32_IMPL_GetDiskFreeSpaceExW(lpDirectoryName, lpFreeBytesAvailableToCaller, lpTotalNumberOfBytes, lpTotalNumberOfFreeBytes);
        return win32_impl_result;
    }
    inline int32_t GetDiskSpaceInformationA(int8_t* rootPath, Windows::Win32::FileSystem::DISK_SPACE_INFORMATION* diskSpaceInfo)
    {
        auto win32_impl_result = WIN32_IMPL_GetDiskSpaceInformationA(rootPath, diskSpaceInfo);
        return win32_impl_result;
    }
    inline int32_t GetDiskSpaceInformationW(uint16_t* rootPath, Windows::Win32::FileSystem::DISK_SPACE_INFORMATION* diskSpaceInfo)
    {
        auto win32_impl_result = WIN32_IMPL_GetDiskSpaceInformationW(rootPath, diskSpaceInfo);
        return win32_impl_result;
    }
    inline uint32_t GetDriveTypeA(int8_t* lpRootPathName)
    {
        auto win32_impl_result = WIN32_IMPL_GetDriveTypeA(lpRootPathName);
        return win32_impl_result;
    }
    inline uint32_t GetDriveTypeW(uint16_t* lpRootPathName)
    {
        auto win32_impl_result = WIN32_IMPL_GetDriveTypeW(lpRootPathName);
        return win32_impl_result;
    }
    inline uint32_t GetFileAttributesA(int8_t* lpFileName)
    {
        auto win32_impl_result = WIN32_IMPL_GetFileAttributesA(lpFileName);
        return win32_impl_result;
    }
    inline uint32_t GetFileAttributesW(uint16_t* lpFileName)
    {
        auto win32_impl_result = WIN32_IMPL_GetFileAttributesW(lpFileName);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetFileAttributesExA(int8_t* lpFileName, Windows::Win32::FileSystem::GET_FILEEX_INFO_LEVELS fInfoLevelId, void* lpFileInformation)
    {
        auto win32_impl_result = WIN32_IMPL_GetFileAttributesExA(lpFileName, fInfoLevelId, lpFileInformation);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetFileAttributesExW(uint16_t* lpFileName, Windows::Win32::FileSystem::GET_FILEEX_INFO_LEVELS fInfoLevelId, void* lpFileInformation)
    {
        auto win32_impl_result = WIN32_IMPL_GetFileAttributesExW(lpFileName, fInfoLevelId, lpFileInformation);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetFileInformationByHandle(Windows::Win32::SystemServices::HANDLE hFile, Windows::Win32::FileSystem::BY_HANDLE_FILE_INFORMATION* lpFileInformation)
    {
        auto win32_impl_result = WIN32_IMPL_GetFileInformationByHandle(hFile, lpFileInformation);
        return win32_impl_result;
    }
    inline uint32_t GetFileSize(Windows::Win32::SystemServices::HANDLE hFile, uint32_t* lpFileSizeHigh)
    {
        auto win32_impl_result = WIN32_IMPL_GetFileSize(hFile, lpFileSizeHigh);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetFileSizeEx(Windows::Win32::SystemServices::HANDLE hFile, Windows::Win32::SystemServices::LARGE_INTEGER* lpFileSize)
    {
        auto win32_impl_result = WIN32_IMPL_GetFileSizeEx(hFile, lpFileSize);
        return win32_impl_result;
    }
    inline uint32_t GetFileType(Windows::Win32::SystemServices::HANDLE hFile)
    {
        auto win32_impl_result = WIN32_IMPL_GetFileType(hFile);
        return win32_impl_result;
    }
    inline uint32_t GetFinalPathNameByHandleA(Windows::Win32::SystemServices::HANDLE hFile, int8_t* lpszFilePath, uint32_t cchFilePath, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_GetFinalPathNameByHandleA(hFile, lpszFilePath, cchFilePath, dwFlags);
        return win32_impl_result;
    }
    inline uint32_t GetFinalPathNameByHandleW(Windows::Win32::SystemServices::HANDLE hFile, uint16_t* lpszFilePath, uint32_t cchFilePath, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_GetFinalPathNameByHandleW(hFile, lpszFilePath, cchFilePath, dwFlags);
        return win32_impl_result;
    }
    inline uint32_t GetFullPathNameW(uint16_t* lpFileName, uint32_t nBufferLength, uint16_t* lpBuffer, uint16_t** lpFilePart)
    {
        auto win32_impl_result = WIN32_IMPL_GetFullPathNameW(lpFileName, nBufferLength, lpBuffer, lpFilePart);
        return win32_impl_result;
    }
    inline uint32_t GetFullPathNameA(int8_t* lpFileName, uint32_t nBufferLength, int8_t* lpBuffer, int8_t** lpFilePart)
    {
        auto win32_impl_result = WIN32_IMPL_GetFullPathNameA(lpFileName, nBufferLength, lpBuffer, lpFilePart);
        return win32_impl_result;
    }
    inline uint32_t GetLogicalDrives()
    {
        auto win32_impl_result = WIN32_IMPL_GetLogicalDrives();
        return win32_impl_result;
    }
    inline uint32_t GetLogicalDriveStringsW(uint32_t nBufferLength, uint16_t* lpBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_GetLogicalDriveStringsW(nBufferLength, lpBuffer);
        return win32_impl_result;
    }
    inline uint32_t GetLongPathNameA(int8_t* lpszShortPath, int8_t* lpszLongPath, uint32_t cchBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_GetLongPathNameA(lpszShortPath, lpszLongPath, cchBuffer);
        return win32_impl_result;
    }
    inline uint32_t GetLongPathNameW(uint16_t* lpszShortPath, uint16_t* lpszLongPath, uint32_t cchBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_GetLongPathNameW(lpszShortPath, lpszLongPath, cchBuffer);
        return win32_impl_result;
    }
    inline uint32_t GetShortPathNameW(uint16_t* lpszLongPath, uint16_t* lpszShortPath, uint32_t cchBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_GetShortPathNameW(lpszLongPath, lpszShortPath, cchBuffer);
        return win32_impl_result;
    }
    inline uint32_t GetTempFileNameW(uint16_t* lpPathName, uint16_t* lpPrefixString, uint32_t uUnique, uint16_t* lpTempFileName)
    {
        auto win32_impl_result = WIN32_IMPL_GetTempFileNameW(lpPathName, lpPrefixString, uUnique, lpTempFileName);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetVolumeInformationByHandleW(Windows::Win32::SystemServices::HANDLE hFile, uint16_t* lpVolumeNameBuffer, uint32_t nVolumeNameSize, uint32_t* lpVolumeSerialNumber, uint32_t* lpMaximumComponentLength, uint32_t* lpFileSystemFlags, uint16_t* lpFileSystemNameBuffer, uint32_t nFileSystemNameSize)
    {
        auto win32_impl_result = WIN32_IMPL_GetVolumeInformationByHandleW(hFile, lpVolumeNameBuffer, nVolumeNameSize, lpVolumeSerialNumber, lpMaximumComponentLength, lpFileSystemFlags, lpFileSystemNameBuffer, nFileSystemNameSize);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetVolumeInformationW(uint16_t* lpRootPathName, uint16_t* lpVolumeNameBuffer, uint32_t nVolumeNameSize, uint32_t* lpVolumeSerialNumber, uint32_t* lpMaximumComponentLength, uint32_t* lpFileSystemFlags, uint16_t* lpFileSystemNameBuffer, uint32_t nFileSystemNameSize)
    {
        auto win32_impl_result = WIN32_IMPL_GetVolumeInformationW(lpRootPathName, lpVolumeNameBuffer, nVolumeNameSize, lpVolumeSerialNumber, lpMaximumComponentLength, lpFileSystemFlags, lpFileSystemNameBuffer, nFileSystemNameSize);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetVolumePathNameW(uint16_t* lpszFileName, uint16_t* lpszVolumePathName, uint32_t cchBufferLength)
    {
        auto win32_impl_result = WIN32_IMPL_GetVolumePathNameW(lpszFileName, lpszVolumePathName, cchBufferLength);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL LockFile(Windows::Win32::SystemServices::HANDLE hFile, uint32_t dwFileOffsetLow, uint32_t dwFileOffsetHigh, uint32_t nNumberOfBytesToLockLow, uint32_t nNumberOfBytesToLockHigh)
    {
        auto win32_impl_result = WIN32_IMPL_LockFile(hFile, dwFileOffsetLow, dwFileOffsetHigh, nNumberOfBytesToLockLow, nNumberOfBytesToLockHigh);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL LockFileEx(Windows::Win32::SystemServices::HANDLE hFile, uint32_t dwFlags, uint32_t dwReserved, uint32_t nNumberOfBytesToLockLow, uint32_t nNumberOfBytesToLockHigh, Windows::Win32::SystemServices::OVERLAPPED* lpOverlapped)
    {
        auto win32_impl_result = WIN32_IMPL_LockFileEx(hFile, dwFlags, dwReserved, nNumberOfBytesToLockLow, nNumberOfBytesToLockHigh, lpOverlapped);
        return win32_impl_result;
    }
    inline uint32_t QueryDosDeviceW(uint16_t* lpDeviceName, uint16_t* lpTargetPath, uint32_t ucchMax)
    {
        auto win32_impl_result = WIN32_IMPL_QueryDosDeviceW(lpDeviceName, lpTargetPath, ucchMax);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ReadFile(Windows::Win32::SystemServices::HANDLE hFile, void* lpBuffer, uint32_t nNumberOfBytesToRead, uint32_t* lpNumberOfBytesRead, Windows::Win32::SystemServices::OVERLAPPED* lpOverlapped)
    {
        auto win32_impl_result = WIN32_IMPL_ReadFile(hFile, lpBuffer, nNumberOfBytesToRead, lpNumberOfBytesRead, lpOverlapped);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ReadFileEx(Windows::Win32::SystemServices::HANDLE hFile, void* lpBuffer, uint32_t nNumberOfBytesToRead, Windows::Win32::SystemServices::OVERLAPPED* lpOverlapped, Windows::Win32::FileSystem::LPOVERLAPPED_COMPLETION_ROUTINE* lpCompletionRoutine)
    {
        auto win32_impl_result = WIN32_IMPL_ReadFileEx(hFile, lpBuffer, nNumberOfBytesToRead, lpOverlapped, lpCompletionRoutine);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ReadFileScatter(Windows::Win32::SystemServices::HANDLE hFile, Windows::Win32::SystemServices::FILE_SEGMENT_ELEMENT* aSegmentArray, uint32_t nNumberOfBytesToRead, uint32_t* lpReserved, Windows::Win32::SystemServices::OVERLAPPED* lpOverlapped)
    {
        auto win32_impl_result = WIN32_IMPL_ReadFileScatter(hFile, aSegmentArray, nNumberOfBytesToRead, lpReserved, lpOverlapped);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL RemoveDirectoryA(int8_t* lpPathName)
    {
        auto win32_impl_result = WIN32_IMPL_RemoveDirectoryA(lpPathName);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL RemoveDirectoryW(uint16_t* lpPathName)
    {
        auto win32_impl_result = WIN32_IMPL_RemoveDirectoryW(lpPathName);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SetEndOfFile(Windows::Win32::SystemServices::HANDLE hFile)
    {
        auto win32_impl_result = WIN32_IMPL_SetEndOfFile(hFile);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SetFileAttributesA(int8_t* lpFileName, Windows::Win32::FileSystem::FILE_FLAGS_AND_ATTRIBUTES dwFileAttributes)
    {
        auto win32_impl_result = WIN32_IMPL_SetFileAttributesA(lpFileName, dwFileAttributes);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SetFileAttributesW(uint16_t* lpFileName, Windows::Win32::FileSystem::FILE_FLAGS_AND_ATTRIBUTES dwFileAttributes)
    {
        auto win32_impl_result = WIN32_IMPL_SetFileAttributesW(lpFileName, dwFileAttributes);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SetFileInformationByHandle(Windows::Win32::SystemServices::HANDLE hFile, Windows::Win32::FileSystem::FILE_INFO_BY_HANDLE_CLASS FileInformationClass, void* lpFileInformation, uint32_t dwBufferSize)
    {
        auto win32_impl_result = WIN32_IMPL_SetFileInformationByHandle(hFile, FileInformationClass, lpFileInformation, dwBufferSize);
        return win32_impl_result;
    }
    inline uint32_t SetFilePointer(Windows::Win32::SystemServices::HANDLE hFile, int32_t lDistanceToMove, int32_t* lpDistanceToMoveHigh, uint32_t dwMoveMethod)
    {
        auto win32_impl_result = WIN32_IMPL_SetFilePointer(hFile, lDistanceToMove, lpDistanceToMoveHigh, dwMoveMethod);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SetFilePointerEx(Windows::Win32::SystemServices::HANDLE hFile, Windows::Win32::SystemServices::LARGE_INTEGER liDistanceToMove, Windows::Win32::SystemServices::LARGE_INTEGER* lpNewFilePointer, uint32_t dwMoveMethod)
    {
        auto win32_impl_result = WIN32_IMPL_SetFilePointerEx(hFile, liDistanceToMove, lpNewFilePointer, dwMoveMethod);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SetFileValidData(Windows::Win32::SystemServices::HANDLE hFile, int64_t ValidDataLength)
    {
        auto win32_impl_result = WIN32_IMPL_SetFileValidData(hFile, ValidDataLength);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL UnlockFile(Windows::Win32::SystemServices::HANDLE hFile, uint32_t dwFileOffsetLow, uint32_t dwFileOffsetHigh, uint32_t nNumberOfBytesToUnlockLow, uint32_t nNumberOfBytesToUnlockHigh)
    {
        auto win32_impl_result = WIN32_IMPL_UnlockFile(hFile, dwFileOffsetLow, dwFileOffsetHigh, nNumberOfBytesToUnlockLow, nNumberOfBytesToUnlockHigh);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL UnlockFileEx(Windows::Win32::SystemServices::HANDLE hFile, uint32_t dwReserved, uint32_t nNumberOfBytesToUnlockLow, uint32_t nNumberOfBytesToUnlockHigh, Windows::Win32::SystemServices::OVERLAPPED* lpOverlapped)
    {
        auto win32_impl_result = WIN32_IMPL_UnlockFileEx(hFile, dwReserved, nNumberOfBytesToUnlockLow, nNumberOfBytesToUnlockHigh, lpOverlapped);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WriteFile(Windows::Win32::SystemServices::HANDLE hFile, void* lpBuffer, uint32_t nNumberOfBytesToWrite, uint32_t* lpNumberOfBytesWritten, Windows::Win32::SystemServices::OVERLAPPED* lpOverlapped)
    {
        auto win32_impl_result = WIN32_IMPL_WriteFile(hFile, lpBuffer, nNumberOfBytesToWrite, lpNumberOfBytesWritten, lpOverlapped);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WriteFileEx(Windows::Win32::SystemServices::HANDLE hFile, void* lpBuffer, uint32_t nNumberOfBytesToWrite, Windows::Win32::SystemServices::OVERLAPPED* lpOverlapped, Windows::Win32::FileSystem::LPOVERLAPPED_COMPLETION_ROUTINE* lpCompletionRoutine)
    {
        auto win32_impl_result = WIN32_IMPL_WriteFileEx(hFile, lpBuffer, nNumberOfBytesToWrite, lpOverlapped, lpCompletionRoutine);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WriteFileGather(Windows::Win32::SystemServices::HANDLE hFile, Windows::Win32::SystemServices::FILE_SEGMENT_ELEMENT* aSegmentArray, uint32_t nNumberOfBytesToWrite, uint32_t* lpReserved, Windows::Win32::SystemServices::OVERLAPPED* lpOverlapped)
    {
        auto win32_impl_result = WIN32_IMPL_WriteFileGather(hFile, aSegmentArray, nNumberOfBytesToWrite, lpReserved, lpOverlapped);
        return win32_impl_result;
    }
    inline uint32_t GetTempPathW(uint32_t nBufferLength, uint16_t* lpBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_GetTempPathW(nBufferLength, lpBuffer);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetVolumeNameForVolumeMountPointW(uint16_t* lpszVolumeMountPoint, uint16_t* lpszVolumeName, uint32_t cchBufferLength)
    {
        auto win32_impl_result = WIN32_IMPL_GetVolumeNameForVolumeMountPointW(lpszVolumeMountPoint, lpszVolumeName, cchBufferLength);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetVolumePathNamesForVolumeNameW(uint16_t* lpszVolumeName, uint16_t* lpszVolumePathNames, uint32_t cchBufferLength, uint32_t* lpcchReturnLength)
    {
        auto win32_impl_result = WIN32_IMPL_GetVolumePathNamesForVolumeNameW(lpszVolumeName, lpszVolumePathNames, cchBufferLength, lpcchReturnLength);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::HANDLE CreateFile2(uint16_t* lpFileName, Windows::Win32::FileSystem::FILE_ACCESS_FLAGS dwDesiredAccess, Windows::Win32::FileSystem::FILE_SHARE_FLAGS dwShareMode, Windows::Win32::FileSystem::FILE_CREATE_FLAGS dwCreationDisposition, Windows::Win32::FileSystem::CREATEFILE2_EXTENDED_PARAMETERS* pCreateExParams)
    {
        auto win32_impl_result = WIN32_IMPL_CreateFile2(lpFileName, dwDesiredAccess, dwShareMode, dwCreationDisposition, pCreateExParams);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SetFileIoOverlappedRange(Windows::Win32::SystemServices::HANDLE FileHandle, uint8_t* OverlappedRangeStart, uint32_t Length)
    {
        auto win32_impl_result = WIN32_IMPL_SetFileIoOverlappedRange(FileHandle, OverlappedRangeStart, Length);
        return win32_impl_result;
    }
    inline uint32_t GetCompressedFileSizeA(int8_t* lpFileName, uint32_t* lpFileSizeHigh)
    {
        auto win32_impl_result = WIN32_IMPL_GetCompressedFileSizeA(lpFileName, lpFileSizeHigh);
        return win32_impl_result;
    }
    inline uint32_t GetCompressedFileSizeW(uint16_t* lpFileName, uint32_t* lpFileSizeHigh)
    {
        auto win32_impl_result = WIN32_IMPL_GetCompressedFileSizeW(lpFileName, lpFileSizeHigh);
        return win32_impl_result;
    }
    inline Windows::Win32::FileSystem::FindStreamHandle FindFirstStreamW(uint16_t* lpFileName, Windows::Win32::FileSystem::STREAM_INFO_LEVELS InfoLevel, void* lpFindStreamData, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_FindFirstStreamW(lpFileName, InfoLevel, lpFindStreamData, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL FindNextStreamW(Windows::Win32::FileSystem::FindStreamHandle hFindStream, void* lpFindStreamData)
    {
        auto win32_impl_result = WIN32_IMPL_FindNextStreamW(hFindStream, lpFindStreamData);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AreFileApisANSI()
    {
        auto win32_impl_result = WIN32_IMPL_AreFileApisANSI();
        return win32_impl_result;
    }
    inline uint32_t GetTempPathA(uint32_t nBufferLength, int8_t* lpBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_GetTempPathA(nBufferLength, lpBuffer);
        return win32_impl_result;
    }
    inline Windows::Win32::FileSystem::FindFileNameHandle FindFirstFileNameW(uint16_t* lpFileName, uint32_t dwFlags, uint32_t* StringLength, uint16_t* LinkName)
    {
        auto win32_impl_result = WIN32_IMPL_FindFirstFileNameW(lpFileName, dwFlags, StringLength, LinkName);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL FindNextFileNameW(Windows::Win32::FileSystem::FindFileNameHandle hFindStream, uint32_t* StringLength, uint16_t* LinkName)
    {
        auto win32_impl_result = WIN32_IMPL_FindNextFileNameW(hFindStream, StringLength, LinkName);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetVolumeInformationA(int8_t* lpRootPathName, int8_t* lpVolumeNameBuffer, uint32_t nVolumeNameSize, uint32_t* lpVolumeSerialNumber, uint32_t* lpMaximumComponentLength, uint32_t* lpFileSystemFlags, int8_t* lpFileSystemNameBuffer, uint32_t nFileSystemNameSize)
    {
        auto win32_impl_result = WIN32_IMPL_GetVolumeInformationA(lpRootPathName, lpVolumeNameBuffer, nVolumeNameSize, lpVolumeSerialNumber, lpMaximumComponentLength, lpFileSystemFlags, lpFileSystemNameBuffer, nFileSystemNameSize);
        return win32_impl_result;
    }
    inline uint32_t GetTempFileNameA(int8_t* lpPathName, int8_t* lpPrefixString, uint32_t uUnique, int8_t* lpTempFileName)
    {
        auto win32_impl_result = WIN32_IMPL_GetTempFileNameA(lpPathName, lpPrefixString, uUnique, lpTempFileName);
        return win32_impl_result;
    }
    inline void SetFileApisToOEM()
    {
        WIN32_IMPL_SetFileApisToOEM();
    }
    inline void SetFileApisToANSI()
    {
        WIN32_IMPL_SetFileApisToANSI();
    }
    inline Windows::Win32::SystemServices::BOOL CopyFileFromAppW(uint16_t* lpExistingFileName, uint16_t* lpNewFileName, Windows::Win32::SystemServices::BOOL bFailIfExists)
    {
        auto win32_impl_result = WIN32_IMPL_CopyFileFromAppW(lpExistingFileName, lpNewFileName, bFailIfExists);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CreateDirectoryFromAppW(uint16_t* lpPathName, Windows::Win32::SystemServices::SECURITY_ATTRIBUTES* lpSecurityAttributes)
    {
        auto win32_impl_result = WIN32_IMPL_CreateDirectoryFromAppW(lpPathName, lpSecurityAttributes);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::HANDLE CreateFileFromAppW(uint16_t* lpFileName, uint32_t dwDesiredAccess, uint32_t dwShareMode, Windows::Win32::SystemServices::SECURITY_ATTRIBUTES* lpSecurityAttributes, uint32_t dwCreationDisposition, uint32_t dwFlagsAndAttributes, Windows::Win32::SystemServices::HANDLE hTemplateFile)
    {
        auto win32_impl_result = WIN32_IMPL_CreateFileFromAppW(lpFileName, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::HANDLE CreateFile2FromAppW(uint16_t* lpFileName, uint32_t dwDesiredAccess, uint32_t dwShareMode, uint32_t dwCreationDisposition, Windows::Win32::FileSystem::CREATEFILE2_EXTENDED_PARAMETERS* pCreateExParams)
    {
        auto win32_impl_result = WIN32_IMPL_CreateFile2FromAppW(lpFileName, dwDesiredAccess, dwShareMode, dwCreationDisposition, pCreateExParams);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL DeleteFileFromAppW(uint16_t* lpFileName)
    {
        auto win32_impl_result = WIN32_IMPL_DeleteFileFromAppW(lpFileName);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::HANDLE FindFirstFileExFromAppW(uint16_t* lpFileName, Windows::Win32::FileSystem::FINDEX_INFO_LEVELS fInfoLevelId, void* lpFindFileData, Windows::Win32::FileSystem::FINDEX_SEARCH_OPS fSearchOp, void* lpSearchFilter, uint32_t dwAdditionalFlags)
    {
        auto win32_impl_result = WIN32_IMPL_FindFirstFileExFromAppW(lpFileName, fInfoLevelId, lpFindFileData, fSearchOp, lpSearchFilter, dwAdditionalFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetFileAttributesExFromAppW(uint16_t* lpFileName, Windows::Win32::FileSystem::GET_FILEEX_INFO_LEVELS fInfoLevelId, void* lpFileInformation)
    {
        auto win32_impl_result = WIN32_IMPL_GetFileAttributesExFromAppW(lpFileName, fInfoLevelId, lpFileInformation);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL MoveFileFromAppW(uint16_t* lpExistingFileName, uint16_t* lpNewFileName)
    {
        auto win32_impl_result = WIN32_IMPL_MoveFileFromAppW(lpExistingFileName, lpNewFileName);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL RemoveDirectoryFromAppW(uint16_t* lpPathName)
    {
        auto win32_impl_result = WIN32_IMPL_RemoveDirectoryFromAppW(lpPathName);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ReplaceFileFromAppW(uint16_t* lpReplacedFileName, uint16_t* lpReplacementFileName, uint16_t* lpBackupFileName, uint32_t dwReplaceFlags, void* lpExclude, void* lpReserved)
    {
        auto win32_impl_result = WIN32_IMPL_ReplaceFileFromAppW(lpReplacedFileName, lpReplacementFileName, lpBackupFileName, dwReplaceFlags, lpExclude, lpReserved);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SetFileAttributesFromAppW(uint16_t* lpFileName, uint32_t dwFileAttributes)
    {
        auto win32_impl_result = WIN32_IMPL_SetFileAttributesFromAppW(lpFileName, dwFileAttributes);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::HANDLE CreateIoCompletionPort(Windows::Win32::SystemServices::HANDLE FileHandle, Windows::Win32::SystemServices::HANDLE ExistingCompletionPort, size_t CompletionKey, uint32_t NumberOfConcurrentThreads)
    {
        auto win32_impl_result = WIN32_IMPL_CreateIoCompletionPort(FileHandle, ExistingCompletionPort, CompletionKey, NumberOfConcurrentThreads);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetQueuedCompletionStatus(Windows::Win32::SystemServices::HANDLE CompletionPort, uint32_t* lpNumberOfBytesTransferred, uint32_t* lpCompletionKey, Windows::Win32::SystemServices::OVERLAPPED** lpOverlapped, uint32_t dwMilliseconds)
    {
        auto win32_impl_result = WIN32_IMPL_GetQueuedCompletionStatus(CompletionPort, lpNumberOfBytesTransferred, lpCompletionKey, lpOverlapped, dwMilliseconds);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetQueuedCompletionStatusEx(Windows::Win32::SystemServices::HANDLE CompletionPort, Windows::Win32::FileSystem::OVERLAPPED_ENTRY* lpCompletionPortEntries, uint32_t ulCount, uint32_t* ulNumEntriesRemoved, uint32_t dwMilliseconds, Windows::Win32::SystemServices::BOOL fAlertable)
    {
        auto win32_impl_result = WIN32_IMPL_GetQueuedCompletionStatusEx(CompletionPort, lpCompletionPortEntries, ulCount, ulNumEntriesRemoved, dwMilliseconds, fAlertable);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL PostQueuedCompletionStatus(Windows::Win32::SystemServices::HANDLE CompletionPort, uint32_t dwNumberOfBytesTransferred, size_t dwCompletionKey, Windows::Win32::SystemServices::OVERLAPPED* lpOverlapped)
    {
        auto win32_impl_result = WIN32_IMPL_PostQueuedCompletionStatus(CompletionPort, dwNumberOfBytesTransferred, dwCompletionKey, lpOverlapped);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CancelIoEx(Windows::Win32::SystemServices::HANDLE hFile, Windows::Win32::SystemServices::OVERLAPPED* lpOverlapped)
    {
        auto win32_impl_result = WIN32_IMPL_CancelIoEx(hFile, lpOverlapped);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CancelIo(Windows::Win32::SystemServices::HANDLE hFile)
    {
        auto win32_impl_result = WIN32_IMPL_CancelIo(hFile);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CancelSynchronousIo(Windows::Win32::SystemServices::HANDLE hThread)
    {
        auto win32_impl_result = WIN32_IMPL_CancelSynchronousIo(hThread);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL Wow64DisableWow64FsRedirection(void** OldValue)
    {
        auto win32_impl_result = WIN32_IMPL_Wow64DisableWow64FsRedirection(OldValue);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL Wow64RevertWow64FsRedirection(void* OlValue)
    {
        auto win32_impl_result = WIN32_IMPL_Wow64RevertWow64FsRedirection(OlValue);
        return win32_impl_result;
    }
    inline uint16_t Wow64SetThreadDefaultGuestMachine(uint16_t Machine)
    {
        auto win32_impl_result = WIN32_IMPL_Wow64SetThreadDefaultGuestMachine(Machine);
        return win32_impl_result;
    }
    inline uint32_t Wow64SuspendThread(Windows::Win32::SystemServices::HANDLE hThread)
    {
        auto win32_impl_result = WIN32_IMPL_Wow64SuspendThread(hThread);
        return win32_impl_result;
    }
    inline int32_t LZStart()
    {
        auto win32_impl_result = WIN32_IMPL_LZStart();
        return win32_impl_result;
    }
    inline void LZDone()
    {
        WIN32_IMPL_LZDone();
    }
    inline int32_t CopyLZFile(int32_t hfSource, int32_t hfDest)
    {
        auto win32_impl_result = WIN32_IMPL_CopyLZFile(hfSource, hfDest);
        return win32_impl_result;
    }
    inline int32_t LZCopy(int32_t hfSource, int32_t hfDest)
    {
        auto win32_impl_result = WIN32_IMPL_LZCopy(hfSource, hfDest);
        return win32_impl_result;
    }
    inline int32_t LZInit(int32_t hfSource)
    {
        auto win32_impl_result = WIN32_IMPL_LZInit(hfSource);
        return win32_impl_result;
    }
    inline int32_t GetExpandedNameA(int8_t* lpszSource, int8_t* lpszBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_GetExpandedNameA(lpszSource, lpszBuffer);
        return win32_impl_result;
    }
    inline int32_t GetExpandedNameW(uint16_t* lpszSource, uint16_t* lpszBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_GetExpandedNameW(lpszSource, lpszBuffer);
        return win32_impl_result;
    }
    inline int32_t LZOpenFileA(int8_t* lpFileName, Windows::Win32::FileSystem::OFSTRUCT* lpReOpenBuf, uint16_t wStyle)
    {
        auto win32_impl_result = WIN32_IMPL_LZOpenFileA(lpFileName, lpReOpenBuf, wStyle);
        return win32_impl_result;
    }
    inline int32_t LZOpenFileW(uint16_t* lpFileName, Windows::Win32::FileSystem::OFSTRUCT* lpReOpenBuf, uint16_t wStyle)
    {
        auto win32_impl_result = WIN32_IMPL_LZOpenFileW(lpFileName, lpReOpenBuf, wStyle);
        return win32_impl_result;
    }
    inline int32_t LZSeek(int32_t hFile, int32_t lOffset, int32_t iOrigin)
    {
        auto win32_impl_result = WIN32_IMPL_LZSeek(hFile, lOffset, iOrigin);
        return win32_impl_result;
    }
    inline int32_t LZRead(int32_t hFile, int8_t* lpBuffer, int32_t cbRead)
    {
        auto win32_impl_result = WIN32_IMPL_LZRead(hFile, lpBuffer, cbRead);
        return win32_impl_result;
    }
    inline void LZClose(int32_t hFile)
    {
        WIN32_IMPL_LZClose(hFile);
    }
    inline uint32_t QueryUsersOnEncryptedFile(uint16_t* lpFileName, Windows::Win32::FileSystem::ENCRYPTION_CERTIFICATE_HASH_LIST** pUsers)
    {
        auto win32_impl_result = WIN32_IMPL_QueryUsersOnEncryptedFile(lpFileName, pUsers);
        return win32_impl_result;
    }
    inline uint32_t QueryRecoveryAgentsOnEncryptedFile(uint16_t* lpFileName, Windows::Win32::FileSystem::ENCRYPTION_CERTIFICATE_HASH_LIST** pRecoveryAgents)
    {
        auto win32_impl_result = WIN32_IMPL_QueryRecoveryAgentsOnEncryptedFile(lpFileName, pRecoveryAgents);
        return win32_impl_result;
    }
    inline uint32_t RemoveUsersFromEncryptedFile(uint16_t* lpFileName, Windows::Win32::FileSystem::ENCRYPTION_CERTIFICATE_HASH_LIST* pHashes)
    {
        auto win32_impl_result = WIN32_IMPL_RemoveUsersFromEncryptedFile(lpFileName, pHashes);
        return win32_impl_result;
    }
    inline uint32_t AddUsersToEncryptedFile(uint16_t* lpFileName, Windows::Win32::FileSystem::ENCRYPTION_CERTIFICATE_LIST* pEncryptionCertificates)
    {
        auto win32_impl_result = WIN32_IMPL_AddUsersToEncryptedFile(lpFileName, pEncryptionCertificates);
        return win32_impl_result;
    }
    inline uint32_t SetUserFileEncryptionKey(Windows::Win32::FileSystem::ENCRYPTION_CERTIFICATE* pEncryptionCertificate)
    {
        auto win32_impl_result = WIN32_IMPL_SetUserFileEncryptionKey(pEncryptionCertificate);
        return win32_impl_result;
    }
    inline uint32_t SetUserFileEncryptionKeyEx(Windows::Win32::FileSystem::ENCRYPTION_CERTIFICATE* pEncryptionCertificate, uint32_t dwCapabilities, uint32_t dwFlags, void* pvReserved)
    {
        auto win32_impl_result = WIN32_IMPL_SetUserFileEncryptionKeyEx(pEncryptionCertificate, dwCapabilities, dwFlags, pvReserved);
        return win32_impl_result;
    }
    inline void FreeEncryptionCertificateHashList(Windows::Win32::FileSystem::ENCRYPTION_CERTIFICATE_HASH_LIST* pUsers)
    {
        WIN32_IMPL_FreeEncryptionCertificateHashList(pUsers);
    }
    inline Windows::Win32::SystemServices::BOOL EncryptionDisable(uint16_t* DirPath, Windows::Win32::SystemServices::BOOL Disable)
    {
        auto win32_impl_result = WIN32_IMPL_EncryptionDisable(DirPath, Disable);
        return win32_impl_result;
    }
    inline uint32_t DuplicateEncryptionInfoFile(uint16_t* SrcFileName, uint16_t* DstFileName, uint32_t dwCreationDistribution, uint32_t dwAttributes, Windows::Win32::SystemServices::SECURITY_ATTRIBUTES* lpSecurityAttributes)
    {
        auto win32_impl_result = WIN32_IMPL_DuplicateEncryptionInfoFile(SrcFileName, DstFileName, dwCreationDistribution, dwAttributes, lpSecurityAttributes);
        return win32_impl_result;
    }
    inline uint32_t GetEncryptedFileMetadata(uint16_t* lpFileName, uint32_t* pcbMetadata, uint8_t** ppbMetadata)
    {
        auto win32_impl_result = WIN32_IMPL_GetEncryptedFileMetadata(lpFileName, pcbMetadata, ppbMetadata);
        return win32_impl_result;
    }
    inline uint32_t SetEncryptedFileMetadata(uint16_t* lpFileName, uint8_t* pbOldMetadata, uint8_t* pbNewMetadata, Windows::Win32::FileSystem::ENCRYPTION_CERTIFICATE_HASH* pOwnerHash, uint32_t dwOperation, Windows::Win32::FileSystem::ENCRYPTION_CERTIFICATE_HASH_LIST* pCertificatesAdded)
    {
        auto win32_impl_result = WIN32_IMPL_SetEncryptedFileMetadata(lpFileName, pbOldMetadata, pbNewMetadata, pOwnerHash, dwOperation, pCertificatesAdded);
        return win32_impl_result;
    }
    inline void FreeEncryptedFileMetadata(uint8_t* pbMetadata)
    {
        WIN32_IMPL_FreeEncryptedFileMetadata(pbMetadata);
    }
    inline uint8_t LsnEqual(Windows::Win32::FileSystem::CLS_LSN* plsn1, Windows::Win32::FileSystem::CLS_LSN* plsn2)
    {
        auto win32_impl_result = WIN32_IMPL_LsnEqual(plsn1, plsn2);
        return win32_impl_result;
    }
    inline uint8_t LsnLess(Windows::Win32::FileSystem::CLS_LSN* plsn1, Windows::Win32::FileSystem::CLS_LSN* plsn2)
    {
        auto win32_impl_result = WIN32_IMPL_LsnLess(plsn1, plsn2);
        return win32_impl_result;
    }
    inline uint8_t LsnGreater(Windows::Win32::FileSystem::CLS_LSN* plsn1, Windows::Win32::FileSystem::CLS_LSN* plsn2)
    {
        auto win32_impl_result = WIN32_IMPL_LsnGreater(plsn1, plsn2);
        return win32_impl_result;
    }
    inline uint8_t LsnNull(Windows::Win32::FileSystem::CLS_LSN* plsn)
    {
        auto win32_impl_result = WIN32_IMPL_LsnNull(plsn);
        return win32_impl_result;
    }
    inline uint32_t LsnContainer(Windows::Win32::FileSystem::CLS_LSN* plsn)
    {
        auto win32_impl_result = WIN32_IMPL_LsnContainer(plsn);
        return win32_impl_result;
    }
    inline Windows::Win32::FileSystem::CLS_LSN LsnCreate(uint32_t cidContainer, uint32_t offBlock, uint32_t cRecord)
    {
        auto win32_impl_result = WIN32_IMPL_LsnCreate(cidContainer, offBlock, cRecord);
        return win32_impl_result;
    }
    inline uint32_t LsnBlockOffset(Windows::Win32::FileSystem::CLS_LSN* plsn)
    {
        auto win32_impl_result = WIN32_IMPL_LsnBlockOffset(plsn);
        return win32_impl_result;
    }
    inline uint32_t LsnRecordSequence(Windows::Win32::FileSystem::CLS_LSN* plsn)
    {
        auto win32_impl_result = WIN32_IMPL_LsnRecordSequence(plsn);
        return win32_impl_result;
    }
    inline uint8_t LsnInvalid(Windows::Win32::FileSystem::CLS_LSN* plsn)
    {
        auto win32_impl_result = WIN32_IMPL_LsnInvalid(plsn);
        return win32_impl_result;
    }
    inline Windows::Win32::FileSystem::CLS_LSN LsnIncrement(Windows::Win32::FileSystem::CLS_LSN* plsn)
    {
        auto win32_impl_result = WIN32_IMPL_LsnIncrement(plsn);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::HANDLE CreateLogFile(uint16_t* pszLogFileName, uint32_t fDesiredAccess, uint32_t dwShareMode, Windows::Win32::SystemServices::SECURITY_ATTRIBUTES* psaLogFile, uint32_t fCreateDisposition, uint32_t fFlagsAndAttributes)
    {
        auto win32_impl_result = WIN32_IMPL_CreateLogFile(pszLogFileName, fDesiredAccess, dwShareMode, psaLogFile, fCreateDisposition, fFlagsAndAttributes);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL DeleteLogByHandle(Windows::Win32::SystemServices::HANDLE hLog)
    {
        auto win32_impl_result = WIN32_IMPL_DeleteLogByHandle(hLog);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL DeleteLogFile(uint16_t* pszLogFileName, void* pvReserved)
    {
        auto win32_impl_result = WIN32_IMPL_DeleteLogFile(pszLogFileName, pvReserved);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AddLogContainer(Windows::Win32::SystemServices::HANDLE hLog, uint64_t* pcbContainer, uint16_t* pwszContainerPath, void* pReserved)
    {
        auto win32_impl_result = WIN32_IMPL_AddLogContainer(hLog, pcbContainer, pwszContainerPath, pReserved);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AddLogContainerSet(Windows::Win32::SystemServices::HANDLE hLog, uint16_t cContainer, uint64_t* pcbContainer, uint16_t** rgwszContainerPath, void* pReserved)
    {
        auto win32_impl_result = WIN32_IMPL_AddLogContainerSet(hLog, cContainer, pcbContainer, rgwszContainerPath, pReserved);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL RemoveLogContainer(Windows::Win32::SystemServices::HANDLE hLog, uint16_t* pwszContainerPath, Windows::Win32::SystemServices::BOOL fForce, void* pReserved)
    {
        auto win32_impl_result = WIN32_IMPL_RemoveLogContainer(hLog, pwszContainerPath, fForce, pReserved);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL RemoveLogContainerSet(Windows::Win32::SystemServices::HANDLE hLog, uint16_t cContainer, uint16_t** rgwszContainerPath, Windows::Win32::SystemServices::BOOL fForce, void* pReserved)
    {
        auto win32_impl_result = WIN32_IMPL_RemoveLogContainerSet(hLog, cContainer, rgwszContainerPath, fForce, pReserved);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SetLogArchiveTail(Windows::Win32::SystemServices::HANDLE hLog, Windows::Win32::FileSystem::CLS_LSN* plsnArchiveTail, void* pReserved)
    {
        auto win32_impl_result = WIN32_IMPL_SetLogArchiveTail(hLog, plsnArchiveTail, pReserved);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SetEndOfLog(Windows::Win32::SystemServices::HANDLE hLog, Windows::Win32::FileSystem::CLS_LSN* plsnEnd, Windows::Win32::SystemServices::OVERLAPPED* lpOverlapped)
    {
        auto win32_impl_result = WIN32_IMPL_SetEndOfLog(hLog, plsnEnd, lpOverlapped);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL TruncateLog(void* pvMarshal, Windows::Win32::FileSystem::CLS_LSN* plsnEnd, Windows::Win32::SystemServices::OVERLAPPED* lpOverlapped)
    {
        auto win32_impl_result = WIN32_IMPL_TruncateLog(pvMarshal, plsnEnd, lpOverlapped);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CreateLogContainerScanContext(Windows::Win32::SystemServices::HANDLE hLog, uint32_t cFromContainer, uint32_t cContainers, uint8_t eScanMode, Windows::Win32::FileSystem::CLS_SCAN_CONTEXT* pcxScan, Windows::Win32::SystemServices::OVERLAPPED* pOverlapped)
    {
        auto win32_impl_result = WIN32_IMPL_CreateLogContainerScanContext(hLog, cFromContainer, cContainers, eScanMode, pcxScan, pOverlapped);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ScanLogContainers(Windows::Win32::FileSystem::CLS_SCAN_CONTEXT* pcxScan, uint8_t eScanMode, void* pReserved)
    {
        auto win32_impl_result = WIN32_IMPL_ScanLogContainers(pcxScan, eScanMode, pReserved);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AlignReservedLog(void* pvMarshal, uint32_t cReservedRecords, int64_t* rgcbReservation, int64_t* pcbAlignReservation)
    {
        auto win32_impl_result = WIN32_IMPL_AlignReservedLog(pvMarshal, cReservedRecords, rgcbReservation, pcbAlignReservation);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AllocReservedLog(void* pvMarshal, uint32_t cReservedRecords, int64_t* pcbAdjustment)
    {
        auto win32_impl_result = WIN32_IMPL_AllocReservedLog(pvMarshal, cReservedRecords, pcbAdjustment);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL FreeReservedLog(void* pvMarshal, uint32_t cReservedRecords, int64_t* pcbAdjustment)
    {
        auto win32_impl_result = WIN32_IMPL_FreeReservedLog(pvMarshal, cReservedRecords, pcbAdjustment);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetLogFileInformation(Windows::Win32::SystemServices::HANDLE hLog, Windows::Win32::FileSystem::CLS_INFORMATION* pinfoBuffer, uint32_t* cbBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_GetLogFileInformation(hLog, pinfoBuffer, cbBuffer);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SetLogArchiveMode(Windows::Win32::SystemServices::HANDLE hLog, Windows::Win32::FileSystem::CLFS_LOG_ARCHIVE_MODE eMode)
    {
        auto win32_impl_result = WIN32_IMPL_SetLogArchiveMode(hLog, eMode);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ReadLogRestartArea(void* pvMarshal, void** ppvRestartBuffer, uint32_t* pcbRestartBuffer, Windows::Win32::FileSystem::CLS_LSN* plsn, void** ppvContext, Windows::Win32::SystemServices::OVERLAPPED* pOverlapped)
    {
        auto win32_impl_result = WIN32_IMPL_ReadLogRestartArea(pvMarshal, ppvRestartBuffer, pcbRestartBuffer, plsn, ppvContext, pOverlapped);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ReadPreviousLogRestartArea(void* pvReadContext, void** ppvRestartBuffer, uint32_t* pcbRestartBuffer, Windows::Win32::FileSystem::CLS_LSN* plsnRestart, Windows::Win32::SystemServices::OVERLAPPED* pOverlapped)
    {
        auto win32_impl_result = WIN32_IMPL_ReadPreviousLogRestartArea(pvReadContext, ppvRestartBuffer, pcbRestartBuffer, plsnRestart, pOverlapped);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WriteLogRestartArea(void* pvMarshal, void* pvRestartBuffer, uint32_t cbRestartBuffer, Windows::Win32::FileSystem::CLS_LSN* plsnBase, uint32_t fFlags, uint32_t* pcbWritten, Windows::Win32::FileSystem::CLS_LSN* plsnNext, Windows::Win32::SystemServices::OVERLAPPED* pOverlapped)
    {
        auto win32_impl_result = WIN32_IMPL_WriteLogRestartArea(pvMarshal, pvRestartBuffer, cbRestartBuffer, plsnBase, fFlags, pcbWritten, plsnNext, pOverlapped);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetLogReservationInfo(void* pvMarshal, uint32_t* pcbRecordNumber, int64_t* pcbUserReservation, int64_t* pcbCommitReservation)
    {
        auto win32_impl_result = WIN32_IMPL_GetLogReservationInfo(pvMarshal, pcbRecordNumber, pcbUserReservation, pcbCommitReservation);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AdvanceLogBase(void* pvMarshal, Windows::Win32::FileSystem::CLS_LSN* plsnBase, uint32_t fFlags, Windows::Win32::SystemServices::OVERLAPPED* pOverlapped)
    {
        auto win32_impl_result = WIN32_IMPL_AdvanceLogBase(pvMarshal, plsnBase, fFlags, pOverlapped);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CloseAndResetLogFile(Windows::Win32::SystemServices::HANDLE hLog)
    {
        auto win32_impl_result = WIN32_IMPL_CloseAndResetLogFile(hLog);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CreateLogMarshallingArea(Windows::Win32::SystemServices::HANDLE hLog, Windows::Win32::FileSystem::CLFS_BLOCK_ALLOCATION* pfnAllocBuffer, Windows::Win32::FileSystem::CLFS_BLOCK_DEALLOCATION* pfnFreeBuffer, void* pvBlockAllocContext, uint32_t cbMarshallingBuffer, uint32_t cMaxWriteBuffers, uint32_t cMaxReadBuffers, void** ppvMarshal)
    {
        auto win32_impl_result = WIN32_IMPL_CreateLogMarshallingArea(hLog, pfnAllocBuffer, pfnFreeBuffer, pvBlockAllocContext, cbMarshallingBuffer, cMaxWriteBuffers, cMaxReadBuffers, ppvMarshal);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL DeleteLogMarshallingArea(void* pvMarshal)
    {
        auto win32_impl_result = WIN32_IMPL_DeleteLogMarshallingArea(pvMarshal);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ReserveAndAppendLog(void* pvMarshal, Windows::Win32::FileSystem::CLS_WRITE_ENTRY* rgWriteEntries, uint32_t cWriteEntries, Windows::Win32::FileSystem::CLS_LSN* plsnUndoNext, Windows::Win32::FileSystem::CLS_LSN* plsnPrevious, uint32_t cReserveRecords, int64_t* rgcbReservation, uint32_t fFlags, Windows::Win32::FileSystem::CLS_LSN* plsn, Windows::Win32::SystemServices::OVERLAPPED* pOverlapped)
    {
        auto win32_impl_result = WIN32_IMPL_ReserveAndAppendLog(pvMarshal, rgWriteEntries, cWriteEntries, plsnUndoNext, plsnPrevious, cReserveRecords, rgcbReservation, fFlags, plsn, pOverlapped);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ReserveAndAppendLogAligned(void* pvMarshal, Windows::Win32::FileSystem::CLS_WRITE_ENTRY* rgWriteEntries, uint32_t cWriteEntries, uint32_t cbEntryAlignment, Windows::Win32::FileSystem::CLS_LSN* plsnUndoNext, Windows::Win32::FileSystem::CLS_LSN* plsnPrevious, uint32_t cReserveRecords, int64_t* rgcbReservation, uint32_t fFlags, Windows::Win32::FileSystem::CLS_LSN* plsn, Windows::Win32::SystemServices::OVERLAPPED* pOverlapped)
    {
        auto win32_impl_result = WIN32_IMPL_ReserveAndAppendLogAligned(pvMarshal, rgWriteEntries, cWriteEntries, cbEntryAlignment, plsnUndoNext, plsnPrevious, cReserveRecords, rgcbReservation, fFlags, plsn, pOverlapped);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL FlushLogBuffers(void* pvMarshal, Windows::Win32::SystemServices::OVERLAPPED* pOverlapped)
    {
        auto win32_impl_result = WIN32_IMPL_FlushLogBuffers(pvMarshal, pOverlapped);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL FlushLogToLsn(void* pvMarshalContext, Windows::Win32::FileSystem::CLS_LSN* plsnFlush, Windows::Win32::FileSystem::CLS_LSN* plsnLastFlushed, Windows::Win32::SystemServices::OVERLAPPED* pOverlapped)
    {
        auto win32_impl_result = WIN32_IMPL_FlushLogToLsn(pvMarshalContext, plsnFlush, plsnLastFlushed, pOverlapped);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ReadLogRecord(void* pvMarshal, Windows::Win32::FileSystem::CLS_LSN* plsnFirst, Windows::Win32::FileSystem::CLFS_CONTEXT_MODE eContextMode, void** ppvReadBuffer, uint32_t* pcbReadBuffer, uint8_t* peRecordType, Windows::Win32::FileSystem::CLS_LSN* plsnUndoNext, Windows::Win32::FileSystem::CLS_LSN* plsnPrevious, void** ppvReadContext, Windows::Win32::SystemServices::OVERLAPPED* pOverlapped)
    {
        auto win32_impl_result = WIN32_IMPL_ReadLogRecord(pvMarshal, plsnFirst, eContextMode, ppvReadBuffer, pcbReadBuffer, peRecordType, plsnUndoNext, plsnPrevious, ppvReadContext, pOverlapped);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ReadNextLogRecord(void* pvReadContext, void** ppvBuffer, uint32_t* pcbBuffer, uint8_t* peRecordType, Windows::Win32::FileSystem::CLS_LSN* plsnUser, Windows::Win32::FileSystem::CLS_LSN* plsnUndoNext, Windows::Win32::FileSystem::CLS_LSN* plsnPrevious, Windows::Win32::FileSystem::CLS_LSN* plsnRecord, Windows::Win32::SystemServices::OVERLAPPED* pOverlapped)
    {
        auto win32_impl_result = WIN32_IMPL_ReadNextLogRecord(pvReadContext, ppvBuffer, pcbBuffer, peRecordType, plsnUser, plsnUndoNext, plsnPrevious, plsnRecord, pOverlapped);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL TerminateReadLog(void* pvCursorContext)
    {
        auto win32_impl_result = WIN32_IMPL_TerminateReadLog(pvCursorContext);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL PrepareLogArchive(Windows::Win32::SystemServices::HANDLE hLog, uint16_t* pszBaseLogFileName, uint32_t cLen, Windows::Win32::FileSystem::CLS_LSN* plsnLow, Windows::Win32::FileSystem::CLS_LSN* plsnHigh, uint32_t* pcActualLength, uint64_t* poffBaseLogFileData, uint64_t* pcbBaseLogFileLength, Windows::Win32::FileSystem::CLS_LSN* plsnBase, Windows::Win32::FileSystem::CLS_LSN* plsnLast, Windows::Win32::FileSystem::CLS_LSN* plsnCurrentArchiveTail, void** ppvArchiveContext)
    {
        auto win32_impl_result = WIN32_IMPL_PrepareLogArchive(hLog, pszBaseLogFileName, cLen, plsnLow, plsnHigh, pcActualLength, poffBaseLogFileData, pcbBaseLogFileLength, plsnBase, plsnLast, plsnCurrentArchiveTail, ppvArchiveContext);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ReadLogArchiveMetadata(void* pvArchiveContext, uint32_t cbOffset, uint32_t cbBytesToRead, uint8_t* pbReadBuffer, uint32_t* pcbBytesRead)
    {
        auto win32_impl_result = WIN32_IMPL_ReadLogArchiveMetadata(pvArchiveContext, cbOffset, cbBytesToRead, pbReadBuffer, pcbBytesRead);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetNextLogArchiveExtent(void* pvArchiveContext, Windows::Win32::FileSystem::CLS_ARCHIVE_DESCRIPTOR* rgadExtent, uint32_t cDescriptors, uint32_t* pcDescriptorsReturned)
    {
        auto win32_impl_result = WIN32_IMPL_GetNextLogArchiveExtent(pvArchiveContext, rgadExtent, cDescriptors, pcDescriptorsReturned);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL TerminateLogArchive(void* pvArchiveContext)
    {
        auto win32_impl_result = WIN32_IMPL_TerminateLogArchive(pvArchiveContext);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ValidateLog(uint16_t* pszLogFileName, Windows::Win32::SystemServices::SECURITY_ATTRIBUTES* psaLogFile, Windows::Win32::FileSystem::CLS_INFORMATION* pinfoBuffer, uint32_t* pcbBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_ValidateLog(pszLogFileName, psaLogFile, pinfoBuffer, pcbBuffer);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetLogContainerName(Windows::Win32::SystemServices::HANDLE hLog, uint32_t cidLogicalContainer, uint16_t* pwstrContainerName, uint32_t cLenContainerName, uint32_t* pcActualLenContainerName)
    {
        auto win32_impl_result = WIN32_IMPL_GetLogContainerName(hLog, cidLogicalContainer, pwstrContainerName, cLenContainerName, pcActualLenContainerName);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetLogIoStatistics(Windows::Win32::SystemServices::HANDLE hLog, void* pvStatsBuffer, uint32_t cbStatsBuffer, Windows::Win32::FileSystem::CLFS_IOSTATS_CLASS eStatsClass, uint32_t* pcbStatsWritten)
    {
        auto win32_impl_result = WIN32_IMPL_GetLogIoStatistics(hLog, pvStatsBuffer, cbStatsBuffer, eStatsClass, pcbStatsWritten);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL RegisterManageableLogClient(Windows::Win32::SystemServices::HANDLE hLog, Windows::Win32::FileSystem::LOG_MANAGEMENT_CALLBACKS* pCallbacks)
    {
        auto win32_impl_result = WIN32_IMPL_RegisterManageableLogClient(hLog, pCallbacks);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL DeregisterManageableLogClient(Windows::Win32::SystemServices::HANDLE hLog)
    {
        auto win32_impl_result = WIN32_IMPL_DeregisterManageableLogClient(hLog);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ReadLogNotification(Windows::Win32::SystemServices::HANDLE hLog, Windows::Win32::FileSystem::CLFS_MGMT_NOTIFICATION* pNotification, Windows::Win32::SystemServices::OVERLAPPED* lpOverlapped)
    {
        auto win32_impl_result = WIN32_IMPL_ReadLogNotification(hLog, pNotification, lpOverlapped);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL InstallLogPolicy(Windows::Win32::SystemServices::HANDLE hLog, Windows::Win32::FileSystem::CLFS_MGMT_POLICY* pPolicy)
    {
        auto win32_impl_result = WIN32_IMPL_InstallLogPolicy(hLog, pPolicy);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL RemoveLogPolicy(Windows::Win32::SystemServices::HANDLE hLog, Windows::Win32::FileSystem::CLFS_MGMT_POLICY_TYPE ePolicyType)
    {
        auto win32_impl_result = WIN32_IMPL_RemoveLogPolicy(hLog, ePolicyType);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL QueryLogPolicy(Windows::Win32::SystemServices::HANDLE hLog, Windows::Win32::FileSystem::CLFS_MGMT_POLICY_TYPE ePolicyType, Windows::Win32::FileSystem::CLFS_MGMT_POLICY* pPolicyBuffer, uint32_t* pcbPolicyBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_QueryLogPolicy(hLog, ePolicyType, pPolicyBuffer, pcbPolicyBuffer);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SetLogFileSizeWithPolicy(Windows::Win32::SystemServices::HANDLE hLog, uint64_t* pDesiredSize, uint64_t* pResultingSize)
    {
        auto win32_impl_result = WIN32_IMPL_SetLogFileSizeWithPolicy(hLog, pDesiredSize, pResultingSize);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL HandleLogFull(Windows::Win32::SystemServices::HANDLE hLog)
    {
        auto win32_impl_result = WIN32_IMPL_HandleLogFull(hLog);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL LogTailAdvanceFailure(Windows::Win32::SystemServices::HANDLE hLog, uint32_t dwReason)
    {
        auto win32_impl_result = WIN32_IMPL_LogTailAdvanceFailure(hLog, dwReason);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL RegisterForLogWriteNotification(Windows::Win32::SystemServices::HANDLE hLog, uint32_t cbThreshold, Windows::Win32::SystemServices::BOOL fEnable)
    {
        auto win32_impl_result = WIN32_IMPL_RegisterForLogWriteNotification(hLog, cbThreshold, fEnable);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WofShouldCompressBinaries(uint16_t* Volume, uint32_t* Algorithm)
    {
        auto win32_impl_result = WIN32_IMPL_WofShouldCompressBinaries(Volume, Algorithm);
        return win32_impl_result;
    }
    inline int32_t WofGetDriverVersion(Windows::Win32::SystemServices::HANDLE FileOrVolumeHandle, uint32_t Provider, uint32_t* WofVersion)
    {
        auto win32_impl_result = WIN32_IMPL_WofGetDriverVersion(FileOrVolumeHandle, Provider, WofVersion);
        return win32_impl_result;
    }
    inline int32_t WofSetFileDataLocation(Windows::Win32::SystemServices::HANDLE FileHandle, uint32_t Provider, void* ExternalFileInfo, uint32_t Length)
    {
        auto win32_impl_result = WIN32_IMPL_WofSetFileDataLocation(FileHandle, Provider, ExternalFileInfo, Length);
        return win32_impl_result;
    }
    inline int32_t WofIsExternalFile(uint16_t* FilePath, int32_t* IsExternalFile, uint32_t* Provider, void* ExternalFileInfo, uint32_t* BufferLength)
    {
        auto win32_impl_result = WIN32_IMPL_WofIsExternalFile(FilePath, IsExternalFile, Provider, ExternalFileInfo, BufferLength);
        return win32_impl_result;
    }
    inline int32_t WofEnumEntries(uint16_t* VolumeName, uint32_t Provider, Windows::Win32::FileSystem::WofEnumEntryProc* EnumProc, void* UserData)
    {
        auto win32_impl_result = WIN32_IMPL_WofEnumEntries(VolumeName, Provider, EnumProc, UserData);
        return win32_impl_result;
    }
    inline int32_t WofWimAddEntry(uint16_t* VolumeName, uint16_t* WimPath, uint32_t WimType, uint32_t WimIndex, Windows::Win32::SystemServices::LARGE_INTEGER* DataSourceId)
    {
        auto win32_impl_result = WIN32_IMPL_WofWimAddEntry(VolumeName, WimPath, WimType, WimIndex, DataSourceId);
        return win32_impl_result;
    }
    inline int32_t WofWimEnumFiles(uint16_t* VolumeName, Windows::Win32::SystemServices::LARGE_INTEGER DataSourceId, Windows::Win32::FileSystem::WofEnumFilesProc* EnumProc, void* UserData)
    {
        auto win32_impl_result = WIN32_IMPL_WofWimEnumFiles(VolumeName, DataSourceId, EnumProc, UserData);
        return win32_impl_result;
    }
    inline int32_t WofWimSuspendEntry(uint16_t* VolumeName, Windows::Win32::SystemServices::LARGE_INTEGER DataSourceId)
    {
        auto win32_impl_result = WIN32_IMPL_WofWimSuspendEntry(VolumeName, DataSourceId);
        return win32_impl_result;
    }
    inline int32_t WofWimRemoveEntry(uint16_t* VolumeName, Windows::Win32::SystemServices::LARGE_INTEGER DataSourceId)
    {
        auto win32_impl_result = WIN32_IMPL_WofWimRemoveEntry(VolumeName, DataSourceId);
        return win32_impl_result;
    }
    inline int32_t WofWimUpdateEntry(uint16_t* VolumeName, Windows::Win32::SystemServices::LARGE_INTEGER DataSourceId, uint16_t* NewWimPath)
    {
        auto win32_impl_result = WIN32_IMPL_WofWimUpdateEntry(VolumeName, DataSourceId, NewWimPath);
        return win32_impl_result;
    }
    inline int32_t WofFileEnumFiles(uint16_t* VolumeName, uint32_t Algorithm, Windows::Win32::FileSystem::WofEnumFilesProc* EnumProc, void* UserData)
    {
        auto win32_impl_result = WIN32_IMPL_WofFileEnumFiles(VolumeName, Algorithm, EnumProc, UserData);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL TxfLogCreateFileReadContext(uint16_t* LogPath, Windows::Win32::FileSystem::CLS_LSN BeginningLsn, Windows::Win32::FileSystem::CLS_LSN EndingLsn, Windows::Win32::FileSystem::TXF_ID* TxfFileId, void** TxfLogContext)
    {
        auto win32_impl_result = WIN32_IMPL_TxfLogCreateFileReadContext(LogPath, BeginningLsn, EndingLsn, TxfFileId, TxfLogContext);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL TxfLogCreateRangeReadContext(uint16_t* LogPath, Windows::Win32::FileSystem::CLS_LSN BeginningLsn, Windows::Win32::FileSystem::CLS_LSN EndingLsn, Windows::Win32::SystemServices::LARGE_INTEGER* BeginningVirtualClock, Windows::Win32::SystemServices::LARGE_INTEGER* EndingVirtualClock, uint32_t RecordTypeMask, void** TxfLogContext)
    {
        auto win32_impl_result = WIN32_IMPL_TxfLogCreateRangeReadContext(LogPath, BeginningLsn, EndingLsn, BeginningVirtualClock, EndingVirtualClock, RecordTypeMask, TxfLogContext);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL TxfLogDestroyReadContext(void* TxfLogContext)
    {
        auto win32_impl_result = WIN32_IMPL_TxfLogDestroyReadContext(TxfLogContext);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL TxfLogReadRecords(void* TxfLogContext, uint32_t BufferLength, void* Buffer, uint32_t* BytesUsed, uint32_t* RecordCount)
    {
        auto win32_impl_result = WIN32_IMPL_TxfLogReadRecords(TxfLogContext, BufferLength, Buffer, BytesUsed, RecordCount);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL TxfReadMetadataInfo(Windows::Win32::SystemServices::HANDLE FileHandle, Windows::Win32::FileSystem::TXF_ID* TxfFileId, Windows::Win32::FileSystem::CLS_LSN* LastLsn, uint32_t* TransactionState, ::win32::guid* LockingTransaction)
    {
        auto win32_impl_result = WIN32_IMPL_TxfReadMetadataInfo(FileHandle, TxfFileId, LastLsn, TransactionState, LockingTransaction);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL TxfLogRecordGetFileName(void* RecordBuffer, uint32_t RecordBufferLengthInBytes, uint16_t* NameBuffer, uint32_t* NameBufferLengthInBytes, Windows::Win32::FileSystem::TXF_ID* TxfId)
    {
        auto win32_impl_result = WIN32_IMPL_TxfLogRecordGetFileName(RecordBuffer, RecordBufferLengthInBytes, NameBuffer, NameBufferLengthInBytes, TxfId);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL TxfLogRecordGetGenericType(void* RecordBuffer, uint32_t RecordBufferLengthInBytes, uint32_t* GenericType, Windows::Win32::SystemServices::LARGE_INTEGER* VirtualClock)
    {
        auto win32_impl_result = WIN32_IMPL_TxfLogRecordGetGenericType(RecordBuffer, RecordBufferLengthInBytes, GenericType, VirtualClock);
        return win32_impl_result;
    }
    inline void TxfSetThreadMiniVersionForCreate(uint16_t MiniVersion)
    {
        WIN32_IMPL_TxfSetThreadMiniVersionForCreate(MiniVersion);
    }
    inline void TxfGetThreadMiniVersionForCreate(uint16_t* MiniVersion)
    {
        WIN32_IMPL_TxfGetThreadMiniVersionForCreate(MiniVersion);
    }
    inline Windows::Win32::SystemServices::HANDLE CreateTransaction(Windows::Win32::SystemServices::SECURITY_ATTRIBUTES* lpTransactionAttributes, ::win32::guid* UOW, uint32_t CreateOptions, uint32_t IsolationLevel, uint32_t IsolationFlags, uint32_t Timeout, uint16_t* Description)
    {
        auto win32_impl_result = WIN32_IMPL_CreateTransaction(lpTransactionAttributes, UOW, CreateOptions, IsolationLevel, IsolationFlags, Timeout, Description);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::HANDLE OpenTransaction(uint32_t dwDesiredAccess, ::win32::guid* TransactionId)
    {
        auto win32_impl_result = WIN32_IMPL_OpenTransaction(dwDesiredAccess, TransactionId);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CommitTransaction(Windows::Win32::SystemServices::HANDLE TransactionHandle)
    {
        auto win32_impl_result = WIN32_IMPL_CommitTransaction(TransactionHandle);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CommitTransactionAsync(Windows::Win32::SystemServices::HANDLE TransactionHandle)
    {
        auto win32_impl_result = WIN32_IMPL_CommitTransactionAsync(TransactionHandle);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL RollbackTransaction(Windows::Win32::SystemServices::HANDLE TransactionHandle)
    {
        auto win32_impl_result = WIN32_IMPL_RollbackTransaction(TransactionHandle);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL RollbackTransactionAsync(Windows::Win32::SystemServices::HANDLE TransactionHandle)
    {
        auto win32_impl_result = WIN32_IMPL_RollbackTransactionAsync(TransactionHandle);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetTransactionId(Windows::Win32::SystemServices::HANDLE TransactionHandle, ::win32::guid* TransactionId)
    {
        auto win32_impl_result = WIN32_IMPL_GetTransactionId(TransactionHandle, TransactionId);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetTransactionInformation(Windows::Win32::SystemServices::HANDLE TransactionHandle, uint32_t* Outcome, uint32_t* IsolationLevel, uint32_t* IsolationFlags, uint32_t* Timeout, uint32_t BufferLength, uint16_t* Description)
    {
        auto win32_impl_result = WIN32_IMPL_GetTransactionInformation(TransactionHandle, Outcome, IsolationLevel, IsolationFlags, Timeout, BufferLength, Description);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SetTransactionInformation(Windows::Win32::SystemServices::HANDLE TransactionHandle, uint32_t IsolationLevel, uint32_t IsolationFlags, uint32_t Timeout, uint16_t* Description)
    {
        auto win32_impl_result = WIN32_IMPL_SetTransactionInformation(TransactionHandle, IsolationLevel, IsolationFlags, Timeout, Description);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::HANDLE CreateTransactionManager(Windows::Win32::SystemServices::SECURITY_ATTRIBUTES* lpTransactionAttributes, uint16_t* LogFileName, uint32_t CreateOptions, uint32_t CommitStrength)
    {
        auto win32_impl_result = WIN32_IMPL_CreateTransactionManager(lpTransactionAttributes, LogFileName, CreateOptions, CommitStrength);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::HANDLE OpenTransactionManager(uint16_t* LogFileName, uint32_t DesiredAccess, uint32_t OpenOptions)
    {
        auto win32_impl_result = WIN32_IMPL_OpenTransactionManager(LogFileName, DesiredAccess, OpenOptions);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::HANDLE OpenTransactionManagerById(::win32::guid* TransactionManagerId, uint32_t DesiredAccess, uint32_t OpenOptions)
    {
        auto win32_impl_result = WIN32_IMPL_OpenTransactionManagerById(TransactionManagerId, DesiredAccess, OpenOptions);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL RenameTransactionManager(uint16_t* LogFileName, ::win32::guid* ExistingTransactionManagerGuid)
    {
        auto win32_impl_result = WIN32_IMPL_RenameTransactionManager(LogFileName, ExistingTransactionManagerGuid);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL RollforwardTransactionManager(Windows::Win32::SystemServices::HANDLE TransactionManagerHandle, Windows::Win32::SystemServices::LARGE_INTEGER* TmVirtualClock)
    {
        auto win32_impl_result = WIN32_IMPL_RollforwardTransactionManager(TransactionManagerHandle, TmVirtualClock);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL RecoverTransactionManager(Windows::Win32::SystemServices::HANDLE TransactionManagerHandle)
    {
        auto win32_impl_result = WIN32_IMPL_RecoverTransactionManager(TransactionManagerHandle);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetCurrentClockTransactionManager(Windows::Win32::SystemServices::HANDLE TransactionManagerHandle, Windows::Win32::SystemServices::LARGE_INTEGER* TmVirtualClock)
    {
        auto win32_impl_result = WIN32_IMPL_GetCurrentClockTransactionManager(TransactionManagerHandle, TmVirtualClock);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetTransactionManagerId(Windows::Win32::SystemServices::HANDLE TransactionManagerHandle, ::win32::guid* TransactionManagerId)
    {
        auto win32_impl_result = WIN32_IMPL_GetTransactionManagerId(TransactionManagerHandle, TransactionManagerId);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::HANDLE CreateResourceManager(Windows::Win32::SystemServices::SECURITY_ATTRIBUTES* lpResourceManagerAttributes, ::win32::guid* ResourceManagerId, uint32_t CreateOptions, Windows::Win32::SystemServices::HANDLE TmHandle, uint16_t* Description)
    {
        auto win32_impl_result = WIN32_IMPL_CreateResourceManager(lpResourceManagerAttributes, ResourceManagerId, CreateOptions, TmHandle, Description);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::HANDLE OpenResourceManager(uint32_t dwDesiredAccess, Windows::Win32::SystemServices::HANDLE TmHandle, ::win32::guid* ResourceManagerId)
    {
        auto win32_impl_result = WIN32_IMPL_OpenResourceManager(dwDesiredAccess, TmHandle, ResourceManagerId);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL RecoverResourceManager(Windows::Win32::SystemServices::HANDLE ResourceManagerHandle)
    {
        auto win32_impl_result = WIN32_IMPL_RecoverResourceManager(ResourceManagerHandle);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetNotificationResourceManager(Windows::Win32::SystemServices::HANDLE ResourceManagerHandle, Windows::Win32::FileSystem::TRANSACTION_NOTIFICATION* TransactionNotification, uint32_t NotificationLength, uint32_t dwMilliseconds, uint32_t* ReturnLength)
    {
        auto win32_impl_result = WIN32_IMPL_GetNotificationResourceManager(ResourceManagerHandle, TransactionNotification, NotificationLength, dwMilliseconds, ReturnLength);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetNotificationResourceManagerAsync(Windows::Win32::SystemServices::HANDLE ResourceManagerHandle, Windows::Win32::FileSystem::TRANSACTION_NOTIFICATION* TransactionNotification, uint32_t TransactionNotificationLength, uint32_t* ReturnLength, Windows::Win32::SystemServices::OVERLAPPED* lpOverlapped)
    {
        auto win32_impl_result = WIN32_IMPL_GetNotificationResourceManagerAsync(ResourceManagerHandle, TransactionNotification, TransactionNotificationLength, ReturnLength, lpOverlapped);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SetResourceManagerCompletionPort(Windows::Win32::SystemServices::HANDLE ResourceManagerHandle, Windows::Win32::SystemServices::HANDLE IoCompletionPortHandle, size_t CompletionKey)
    {
        auto win32_impl_result = WIN32_IMPL_SetResourceManagerCompletionPort(ResourceManagerHandle, IoCompletionPortHandle, CompletionKey);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::HANDLE CreateEnlistment(Windows::Win32::SystemServices::SECURITY_ATTRIBUTES* lpEnlistmentAttributes, Windows::Win32::SystemServices::HANDLE ResourceManagerHandle, Windows::Win32::SystemServices::HANDLE TransactionHandle, uint32_t NotificationMask, uint32_t CreateOptions, void* EnlistmentKey)
    {
        auto win32_impl_result = WIN32_IMPL_CreateEnlistment(lpEnlistmentAttributes, ResourceManagerHandle, TransactionHandle, NotificationMask, CreateOptions, EnlistmentKey);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::HANDLE OpenEnlistment(uint32_t dwDesiredAccess, Windows::Win32::SystemServices::HANDLE ResourceManagerHandle, ::win32::guid* EnlistmentId)
    {
        auto win32_impl_result = WIN32_IMPL_OpenEnlistment(dwDesiredAccess, ResourceManagerHandle, EnlistmentId);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL RecoverEnlistment(Windows::Win32::SystemServices::HANDLE EnlistmentHandle, void* EnlistmentKey)
    {
        auto win32_impl_result = WIN32_IMPL_RecoverEnlistment(EnlistmentHandle, EnlistmentKey);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetEnlistmentRecoveryInformation(Windows::Win32::SystemServices::HANDLE EnlistmentHandle, uint32_t BufferSize, void* Buffer, uint32_t* BufferUsed)
    {
        auto win32_impl_result = WIN32_IMPL_GetEnlistmentRecoveryInformation(EnlistmentHandle, BufferSize, Buffer, BufferUsed);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetEnlistmentId(Windows::Win32::SystemServices::HANDLE EnlistmentHandle, ::win32::guid* EnlistmentId)
    {
        auto win32_impl_result = WIN32_IMPL_GetEnlistmentId(EnlistmentHandle, EnlistmentId);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SetEnlistmentRecoveryInformation(Windows::Win32::SystemServices::HANDLE EnlistmentHandle, uint32_t BufferSize, void* Buffer)
    {
        auto win32_impl_result = WIN32_IMPL_SetEnlistmentRecoveryInformation(EnlistmentHandle, BufferSize, Buffer);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL PrepareEnlistment(Windows::Win32::SystemServices::HANDLE EnlistmentHandle, Windows::Win32::SystemServices::LARGE_INTEGER* TmVirtualClock)
    {
        auto win32_impl_result = WIN32_IMPL_PrepareEnlistment(EnlistmentHandle, TmVirtualClock);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL PrePrepareEnlistment(Windows::Win32::SystemServices::HANDLE EnlistmentHandle, Windows::Win32::SystemServices::LARGE_INTEGER* TmVirtualClock)
    {
        auto win32_impl_result = WIN32_IMPL_PrePrepareEnlistment(EnlistmentHandle, TmVirtualClock);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CommitEnlistment(Windows::Win32::SystemServices::HANDLE EnlistmentHandle, Windows::Win32::SystemServices::LARGE_INTEGER* TmVirtualClock)
    {
        auto win32_impl_result = WIN32_IMPL_CommitEnlistment(EnlistmentHandle, TmVirtualClock);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL RollbackEnlistment(Windows::Win32::SystemServices::HANDLE EnlistmentHandle, Windows::Win32::SystemServices::LARGE_INTEGER* TmVirtualClock)
    {
        auto win32_impl_result = WIN32_IMPL_RollbackEnlistment(EnlistmentHandle, TmVirtualClock);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL PrePrepareComplete(Windows::Win32::SystemServices::HANDLE EnlistmentHandle, Windows::Win32::SystemServices::LARGE_INTEGER* TmVirtualClock)
    {
        auto win32_impl_result = WIN32_IMPL_PrePrepareComplete(EnlistmentHandle, TmVirtualClock);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL PrepareComplete(Windows::Win32::SystemServices::HANDLE EnlistmentHandle, Windows::Win32::SystemServices::LARGE_INTEGER* TmVirtualClock)
    {
        auto win32_impl_result = WIN32_IMPL_PrepareComplete(EnlistmentHandle, TmVirtualClock);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ReadOnlyEnlistment(Windows::Win32::SystemServices::HANDLE EnlistmentHandle, Windows::Win32::SystemServices::LARGE_INTEGER* TmVirtualClock)
    {
        auto win32_impl_result = WIN32_IMPL_ReadOnlyEnlistment(EnlistmentHandle, TmVirtualClock);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CommitComplete(Windows::Win32::SystemServices::HANDLE EnlistmentHandle, Windows::Win32::SystemServices::LARGE_INTEGER* TmVirtualClock)
    {
        auto win32_impl_result = WIN32_IMPL_CommitComplete(EnlistmentHandle, TmVirtualClock);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL RollbackComplete(Windows::Win32::SystemServices::HANDLE EnlistmentHandle, Windows::Win32::SystemServices::LARGE_INTEGER* TmVirtualClock)
    {
        auto win32_impl_result = WIN32_IMPL_RollbackComplete(EnlistmentHandle, TmVirtualClock);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SinglePhaseReject(Windows::Win32::SystemServices::HANDLE EnlistmentHandle, Windows::Win32::SystemServices::LARGE_INTEGER* TmVirtualClock)
    {
        auto win32_impl_result = WIN32_IMPL_SinglePhaseReject(EnlistmentHandle, TmVirtualClock);
        return win32_impl_result;
    }
    inline uint32_t NetShareAdd(uint16_t* servername, uint32_t level, uint8_t* buf, uint32_t* parm_err)
    {
        auto win32_impl_result = WIN32_IMPL_NetShareAdd(servername, level, buf, parm_err);
        return win32_impl_result;
    }
    inline uint32_t NetShareEnum(uint16_t* servername, uint32_t level, uint8_t** bufptr, uint32_t prefmaxlen, uint32_t* entriesread, uint32_t* totalentries, uint32_t* resume_handle)
    {
        auto win32_impl_result = WIN32_IMPL_NetShareEnum(servername, level, bufptr, prefmaxlen, entriesread, totalentries, resume_handle);
        return win32_impl_result;
    }
    inline uint32_t NetShareEnumSticky(uint16_t* servername, uint32_t level, uint8_t** bufptr, uint32_t prefmaxlen, uint32_t* entriesread, uint32_t* totalentries, uint32_t* resume_handle)
    {
        auto win32_impl_result = WIN32_IMPL_NetShareEnumSticky(servername, level, bufptr, prefmaxlen, entriesread, totalentries, resume_handle);
        return win32_impl_result;
    }
    inline uint32_t NetShareGetInfo(uint16_t* servername, uint16_t* netname, uint32_t level, uint8_t** bufptr)
    {
        auto win32_impl_result = WIN32_IMPL_NetShareGetInfo(servername, netname, level, bufptr);
        return win32_impl_result;
    }
    inline uint32_t NetShareSetInfo(uint16_t* servername, uint16_t* netname, uint32_t level, uint8_t* buf, uint32_t* parm_err)
    {
        auto win32_impl_result = WIN32_IMPL_NetShareSetInfo(servername, netname, level, buf, parm_err);
        return win32_impl_result;
    }
    inline uint32_t NetShareDel(uint16_t* servername, uint16_t* netname, uint32_t reserved)
    {
        auto win32_impl_result = WIN32_IMPL_NetShareDel(servername, netname, reserved);
        return win32_impl_result;
    }
    inline uint32_t NetShareDelSticky(uint16_t* servername, uint16_t* netname, uint32_t reserved)
    {
        auto win32_impl_result = WIN32_IMPL_NetShareDelSticky(servername, netname, reserved);
        return win32_impl_result;
    }
    inline uint32_t NetShareCheck(uint16_t* servername, uint16_t* device, uint32_t* type)
    {
        auto win32_impl_result = WIN32_IMPL_NetShareCheck(servername, device, type);
        return win32_impl_result;
    }
    inline uint32_t NetShareDelEx(uint16_t* servername, uint32_t level, uint8_t* buf)
    {
        auto win32_impl_result = WIN32_IMPL_NetShareDelEx(servername, level, buf);
        return win32_impl_result;
    }
    inline uint32_t NetServerAliasAdd(uint16_t* servername, uint32_t level, uint8_t* buf)
    {
        auto win32_impl_result = WIN32_IMPL_NetServerAliasAdd(servername, level, buf);
        return win32_impl_result;
    }
    inline uint32_t NetServerAliasDel(uint16_t* servername, uint32_t level, uint8_t* buf)
    {
        auto win32_impl_result = WIN32_IMPL_NetServerAliasDel(servername, level, buf);
        return win32_impl_result;
    }
    inline uint32_t NetServerAliasEnum(uint16_t* servername, uint32_t level, uint8_t** bufptr, uint32_t prefmaxlen, uint32_t* entriesread, uint32_t* totalentries, uint32_t* resumehandle)
    {
        auto win32_impl_result = WIN32_IMPL_NetServerAliasEnum(servername, level, bufptr, prefmaxlen, entriesread, totalentries, resumehandle);
        return win32_impl_result;
    }
    inline uint32_t NetSessionEnum(uint16_t* servername, uint16_t* UncClientName, uint16_t* username, uint32_t level, uint8_t** bufptr, uint32_t prefmaxlen, uint32_t* entriesread, uint32_t* totalentries, uint32_t* resume_handle)
    {
        auto win32_impl_result = WIN32_IMPL_NetSessionEnum(servername, UncClientName, username, level, bufptr, prefmaxlen, entriesread, totalentries, resume_handle);
        return win32_impl_result;
    }
    inline uint32_t NetSessionDel(uint16_t* servername, uint16_t* UncClientName, uint16_t* username)
    {
        auto win32_impl_result = WIN32_IMPL_NetSessionDel(servername, UncClientName, username);
        return win32_impl_result;
    }
    inline uint32_t NetSessionGetInfo(uint16_t* servername, uint16_t* UncClientName, uint16_t* username, uint32_t level, uint8_t** bufptr)
    {
        auto win32_impl_result = WIN32_IMPL_NetSessionGetInfo(servername, UncClientName, username, level, bufptr);
        return win32_impl_result;
    }
    inline uint32_t NetConnectionEnum(uint16_t* servername, uint16_t* qualifier, uint32_t level, uint8_t** bufptr, uint32_t prefmaxlen, uint32_t* entriesread, uint32_t* totalentries, uint32_t* resume_handle)
    {
        auto win32_impl_result = WIN32_IMPL_NetConnectionEnum(servername, qualifier, level, bufptr, prefmaxlen, entriesread, totalentries, resume_handle);
        return win32_impl_result;
    }
    inline uint32_t NetFileClose(uint16_t* servername, uint32_t fileid)
    {
        auto win32_impl_result = WIN32_IMPL_NetFileClose(servername, fileid);
        return win32_impl_result;
    }
    inline uint32_t NetFileEnum(uint16_t* servername, uint16_t* basepath, uint16_t* username, uint32_t level, uint8_t** bufptr, uint32_t prefmaxlen, uint32_t* entriesread, uint32_t* totalentries, size_t* resume_handle)
    {
        auto win32_impl_result = WIN32_IMPL_NetFileEnum(servername, basepath, username, level, bufptr, prefmaxlen, entriesread, totalentries, resume_handle);
        return win32_impl_result;
    }
    inline uint32_t NetFileGetInfo(uint16_t* servername, uint32_t fileid, uint32_t level, uint8_t** bufptr)
    {
        auto win32_impl_result = WIN32_IMPL_NetFileGetInfo(servername, fileid, level, bufptr);
        return win32_impl_result;
    }
    inline uint32_t NetStatisticsGet(int8_t* ServerName, int8_t* Service, uint32_t Level, uint32_t Options, uint8_t** Buffer)
    {
        auto win32_impl_result = WIN32_IMPL_NetStatisticsGet(ServerName, Service, Level, Options, Buffer);
        return win32_impl_result;
    }
    inline uint32_t SearchPathW(uint16_t* lpPath, uint16_t* lpFileName, uint16_t* lpExtension, uint32_t nBufferLength, uint16_t* lpBuffer, uint16_t** lpFilePart)
    {
        auto win32_impl_result = WIN32_IMPL_SearchPathW(lpPath, lpFileName, lpExtension, nBufferLength, lpBuffer, lpFilePart);
        return win32_impl_result;
    }
    inline uint32_t SearchPathA(int8_t* lpPath, int8_t* lpFileName, int8_t* lpExtension, uint32_t nBufferLength, int8_t* lpBuffer, int8_t** lpFilePart)
    {
        auto win32_impl_result = WIN32_IMPL_SearchPathA(lpPath, lpFileName, lpExtension, nBufferLength, lpBuffer, lpFilePart);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetBinaryTypeA(int8_t* lpApplicationName, uint32_t* lpBinaryType)
    {
        auto win32_impl_result = WIN32_IMPL_GetBinaryTypeA(lpApplicationName, lpBinaryType);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetBinaryTypeW(uint16_t* lpApplicationName, uint32_t* lpBinaryType)
    {
        auto win32_impl_result = WIN32_IMPL_GetBinaryTypeW(lpApplicationName, lpBinaryType);
        return win32_impl_result;
    }
    inline uint32_t GetShortPathNameA(int8_t* lpszLongPath, int8_t* lpszShortPath, uint32_t cchBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_GetShortPathNameA(lpszLongPath, lpszShortPath, cchBuffer);
        return win32_impl_result;
    }
    inline uint32_t GetLongPathNameTransactedA(int8_t* lpszShortPath, int8_t* lpszLongPath, uint32_t cchBuffer, Windows::Win32::SystemServices::HANDLE hTransaction)
    {
        auto win32_impl_result = WIN32_IMPL_GetLongPathNameTransactedA(lpszShortPath, lpszLongPath, cchBuffer, hTransaction);
        return win32_impl_result;
    }
    inline uint32_t GetLongPathNameTransactedW(uint16_t* lpszShortPath, uint16_t* lpszLongPath, uint32_t cchBuffer, Windows::Win32::SystemServices::HANDLE hTransaction)
    {
        auto win32_impl_result = WIN32_IMPL_GetLongPathNameTransactedW(lpszShortPath, lpszLongPath, cchBuffer, hTransaction);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SetFileCompletionNotificationModes(Windows::Win32::SystemServices::HANDLE FileHandle, uint8_t Flags)
    {
        auto win32_impl_result = WIN32_IMPL_SetFileCompletionNotificationModes(FileHandle, Flags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SetFileShortNameA(Windows::Win32::SystemServices::HANDLE hFile, int8_t* lpShortName)
    {
        auto win32_impl_result = WIN32_IMPL_SetFileShortNameA(hFile, lpShortName);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SetFileShortNameW(Windows::Win32::SystemServices::HANDLE hFile, uint16_t* lpShortName)
    {
        auto win32_impl_result = WIN32_IMPL_SetFileShortNameW(hFile, lpShortName);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL EncryptFileA(int8_t* lpFileName)
    {
        auto win32_impl_result = WIN32_IMPL_EncryptFileA(lpFileName);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL EncryptFileW(uint16_t* lpFileName)
    {
        auto win32_impl_result = WIN32_IMPL_EncryptFileW(lpFileName);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL DecryptFileA(int8_t* lpFileName, uint32_t dwReserved)
    {
        auto win32_impl_result = WIN32_IMPL_DecryptFileA(lpFileName, dwReserved);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL DecryptFileW(uint16_t* lpFileName, uint32_t dwReserved)
    {
        auto win32_impl_result = WIN32_IMPL_DecryptFileW(lpFileName, dwReserved);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL FileEncryptionStatusA(int8_t* lpFileName, uint32_t* lpStatus)
    {
        auto win32_impl_result = WIN32_IMPL_FileEncryptionStatusA(lpFileName, lpStatus);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL FileEncryptionStatusW(uint16_t* lpFileName, uint32_t* lpStatus)
    {
        auto win32_impl_result = WIN32_IMPL_FileEncryptionStatusW(lpFileName, lpStatus);
        return win32_impl_result;
    }
    inline uint32_t OpenEncryptedFileRawA(int8_t* lpFileName, uint32_t ulFlags, void** pvContext)
    {
        auto win32_impl_result = WIN32_IMPL_OpenEncryptedFileRawA(lpFileName, ulFlags, pvContext);
        return win32_impl_result;
    }
    inline uint32_t OpenEncryptedFileRawW(uint16_t* lpFileName, uint32_t ulFlags, void** pvContext)
    {
        auto win32_impl_result = WIN32_IMPL_OpenEncryptedFileRawW(lpFileName, ulFlags, pvContext);
        return win32_impl_result;
    }
    inline uint32_t ReadEncryptedFileRaw(Windows::Win32::FileSystem::PFE_EXPORT_FUNC* pfExportCallback, void* pvCallbackContext, void* pvContext)
    {
        auto win32_impl_result = WIN32_IMPL_ReadEncryptedFileRaw(pfExportCallback, pvCallbackContext, pvContext);
        return win32_impl_result;
    }
    inline uint32_t WriteEncryptedFileRaw(Windows::Win32::FileSystem::PFE_IMPORT_FUNC* pfImportCallback, void* pvCallbackContext, void* pvContext)
    {
        auto win32_impl_result = WIN32_IMPL_WriteEncryptedFileRaw(pfImportCallback, pvCallbackContext, pvContext);
        return win32_impl_result;
    }
    inline void CloseEncryptedFileRaw(void* pvContext)
    {
        WIN32_IMPL_CloseEncryptedFileRaw(pvContext);
    }
    inline int32_t OpenFile(int8_t* lpFileName, Windows::Win32::FileSystem::OFSTRUCT* lpReOpenBuff, uint32_t uStyle)
    {
        auto win32_impl_result = WIN32_IMPL_OpenFile(lpFileName, lpReOpenBuff, uStyle);
        return win32_impl_result;
    }
    inline uint32_t GetLogicalDriveStringsA(uint32_t nBufferLength, int8_t* lpBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_GetLogicalDriveStringsA(nBufferLength, lpBuffer);
        return win32_impl_result;
    }
    inline uint8_t Wow64EnableWow64FsRedirection(uint8_t Wow64FsEnableRedirection)
    {
        auto win32_impl_result = WIN32_IMPL_Wow64EnableWow64FsRedirection(Wow64FsEnableRedirection);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SetSearchPathMode(uint32_t Flags)
    {
        auto win32_impl_result = WIN32_IMPL_SetSearchPathMode(Flags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CreateDirectoryExA(int8_t* lpTemplateDirectory, int8_t* lpNewDirectory, Windows::Win32::SystemServices::SECURITY_ATTRIBUTES* lpSecurityAttributes)
    {
        auto win32_impl_result = WIN32_IMPL_CreateDirectoryExA(lpTemplateDirectory, lpNewDirectory, lpSecurityAttributes);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CreateDirectoryExW(uint16_t* lpTemplateDirectory, uint16_t* lpNewDirectory, Windows::Win32::SystemServices::SECURITY_ATTRIBUTES* lpSecurityAttributes)
    {
        auto win32_impl_result = WIN32_IMPL_CreateDirectoryExW(lpTemplateDirectory, lpNewDirectory, lpSecurityAttributes);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CreateDirectoryTransactedA(int8_t* lpTemplateDirectory, int8_t* lpNewDirectory, Windows::Win32::SystemServices::SECURITY_ATTRIBUTES* lpSecurityAttributes, Windows::Win32::SystemServices::HANDLE hTransaction)
    {
        auto win32_impl_result = WIN32_IMPL_CreateDirectoryTransactedA(lpTemplateDirectory, lpNewDirectory, lpSecurityAttributes, hTransaction);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CreateDirectoryTransactedW(uint16_t* lpTemplateDirectory, uint16_t* lpNewDirectory, Windows::Win32::SystemServices::SECURITY_ATTRIBUTES* lpSecurityAttributes, Windows::Win32::SystemServices::HANDLE hTransaction)
    {
        auto win32_impl_result = WIN32_IMPL_CreateDirectoryTransactedW(lpTemplateDirectory, lpNewDirectory, lpSecurityAttributes, hTransaction);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL RemoveDirectoryTransactedA(int8_t* lpPathName, Windows::Win32::SystemServices::HANDLE hTransaction)
    {
        auto win32_impl_result = WIN32_IMPL_RemoveDirectoryTransactedA(lpPathName, hTransaction);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL RemoveDirectoryTransactedW(uint16_t* lpPathName, Windows::Win32::SystemServices::HANDLE hTransaction)
    {
        auto win32_impl_result = WIN32_IMPL_RemoveDirectoryTransactedW(lpPathName, hTransaction);
        return win32_impl_result;
    }
    inline uint32_t GetFullPathNameTransactedA(int8_t* lpFileName, uint32_t nBufferLength, int8_t* lpBuffer, int8_t** lpFilePart, Windows::Win32::SystemServices::HANDLE hTransaction)
    {
        auto win32_impl_result = WIN32_IMPL_GetFullPathNameTransactedA(lpFileName, nBufferLength, lpBuffer, lpFilePart, hTransaction);
        return win32_impl_result;
    }
    inline uint32_t GetFullPathNameTransactedW(uint16_t* lpFileName, uint32_t nBufferLength, uint16_t* lpBuffer, uint16_t** lpFilePart, Windows::Win32::SystemServices::HANDLE hTransaction)
    {
        auto win32_impl_result = WIN32_IMPL_GetFullPathNameTransactedW(lpFileName, nBufferLength, lpBuffer, lpFilePart, hTransaction);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL DefineDosDeviceA(uint32_t dwFlags, int8_t* lpDeviceName, int8_t* lpTargetPath)
    {
        auto win32_impl_result = WIN32_IMPL_DefineDosDeviceA(dwFlags, lpDeviceName, lpTargetPath);
        return win32_impl_result;
    }
    inline uint32_t QueryDosDeviceA(int8_t* lpDeviceName, int8_t* lpTargetPath, uint32_t ucchMax)
    {
        auto win32_impl_result = WIN32_IMPL_QueryDosDeviceA(lpDeviceName, lpTargetPath, ucchMax);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::HANDLE CreateFileTransactedA(int8_t* lpFileName, uint32_t dwDesiredAccess, uint32_t dwShareMode, Windows::Win32::SystemServices::SECURITY_ATTRIBUTES* lpSecurityAttributes, uint32_t dwCreationDisposition, uint32_t dwFlagsAndAttributes, Windows::Win32::SystemServices::HANDLE hTemplateFile, Windows::Win32::SystemServices::HANDLE hTransaction, uint16_t* pusMiniVersion, void* lpExtendedParameter)
    {
        auto win32_impl_result = WIN32_IMPL_CreateFileTransactedA(lpFileName, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile, hTransaction, pusMiniVersion, lpExtendedParameter);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::HANDLE CreateFileTransactedW(uint16_t* lpFileName, uint32_t dwDesiredAccess, uint32_t dwShareMode, Windows::Win32::SystemServices::SECURITY_ATTRIBUTES* lpSecurityAttributes, uint32_t dwCreationDisposition, uint32_t dwFlagsAndAttributes, Windows::Win32::SystemServices::HANDLE hTemplateFile, Windows::Win32::SystemServices::HANDLE hTransaction, uint16_t* pusMiniVersion, void* lpExtendedParameter)
    {
        auto win32_impl_result = WIN32_IMPL_CreateFileTransactedW(lpFileName, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile, hTransaction, pusMiniVersion, lpExtendedParameter);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::HANDLE ReOpenFile(Windows::Win32::SystemServices::HANDLE hOriginalFile, uint32_t dwDesiredAccess, uint32_t dwShareMode, uint32_t dwFlagsAndAttributes)
    {
        auto win32_impl_result = WIN32_IMPL_ReOpenFile(hOriginalFile, dwDesiredAccess, dwShareMode, dwFlagsAndAttributes);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SetFileAttributesTransactedA(int8_t* lpFileName, uint32_t dwFileAttributes, Windows::Win32::SystemServices::HANDLE hTransaction)
    {
        auto win32_impl_result = WIN32_IMPL_SetFileAttributesTransactedA(lpFileName, dwFileAttributes, hTransaction);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SetFileAttributesTransactedW(uint16_t* lpFileName, uint32_t dwFileAttributes, Windows::Win32::SystemServices::HANDLE hTransaction)
    {
        auto win32_impl_result = WIN32_IMPL_SetFileAttributesTransactedW(lpFileName, dwFileAttributes, hTransaction);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetFileAttributesTransactedA(int8_t* lpFileName, Windows::Win32::FileSystem::GET_FILEEX_INFO_LEVELS fInfoLevelId, void* lpFileInformation, Windows::Win32::SystemServices::HANDLE hTransaction)
    {
        auto win32_impl_result = WIN32_IMPL_GetFileAttributesTransactedA(lpFileName, fInfoLevelId, lpFileInformation, hTransaction);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetFileAttributesTransactedW(uint16_t* lpFileName, Windows::Win32::FileSystem::GET_FILEEX_INFO_LEVELS fInfoLevelId, void* lpFileInformation, Windows::Win32::SystemServices::HANDLE hTransaction)
    {
        auto win32_impl_result = WIN32_IMPL_GetFileAttributesTransactedW(lpFileName, fInfoLevelId, lpFileInformation, hTransaction);
        return win32_impl_result;
    }
    inline uint32_t GetCompressedFileSizeTransactedA(int8_t* lpFileName, uint32_t* lpFileSizeHigh, Windows::Win32::SystemServices::HANDLE hTransaction)
    {
        auto win32_impl_result = WIN32_IMPL_GetCompressedFileSizeTransactedA(lpFileName, lpFileSizeHigh, hTransaction);
        return win32_impl_result;
    }
    inline uint32_t GetCompressedFileSizeTransactedW(uint16_t* lpFileName, uint32_t* lpFileSizeHigh, Windows::Win32::SystemServices::HANDLE hTransaction)
    {
        auto win32_impl_result = WIN32_IMPL_GetCompressedFileSizeTransactedW(lpFileName, lpFileSizeHigh, hTransaction);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL DeleteFileTransactedA(int8_t* lpFileName, Windows::Win32::SystemServices::HANDLE hTransaction)
    {
        auto win32_impl_result = WIN32_IMPL_DeleteFileTransactedA(lpFileName, hTransaction);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL DeleteFileTransactedW(uint16_t* lpFileName, Windows::Win32::SystemServices::HANDLE hTransaction)
    {
        auto win32_impl_result = WIN32_IMPL_DeleteFileTransactedW(lpFileName, hTransaction);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CheckNameLegalDOS8Dot3A(int8_t* lpName, int8_t* lpOemName, uint32_t OemNameSize, int32_t* pbNameContainsSpaces, int32_t* pbNameLegal)
    {
        auto win32_impl_result = WIN32_IMPL_CheckNameLegalDOS8Dot3A(lpName, lpOemName, OemNameSize, pbNameContainsSpaces, pbNameLegal);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CheckNameLegalDOS8Dot3W(uint16_t* lpName, int8_t* lpOemName, uint32_t OemNameSize, int32_t* pbNameContainsSpaces, int32_t* pbNameLegal)
    {
        auto win32_impl_result = WIN32_IMPL_CheckNameLegalDOS8Dot3W(lpName, lpOemName, OemNameSize, pbNameContainsSpaces, pbNameLegal);
        return win32_impl_result;
    }
    inline Windows::Win32::FileSystem::FindFileHandle FindFirstFileTransactedA(int8_t* lpFileName, Windows::Win32::FileSystem::FINDEX_INFO_LEVELS fInfoLevelId, void* lpFindFileData, Windows::Win32::FileSystem::FINDEX_SEARCH_OPS fSearchOp, void* lpSearchFilter, uint32_t dwAdditionalFlags, Windows::Win32::SystemServices::HANDLE hTransaction)
    {
        auto win32_impl_result = WIN32_IMPL_FindFirstFileTransactedA(lpFileName, fInfoLevelId, lpFindFileData, fSearchOp, lpSearchFilter, dwAdditionalFlags, hTransaction);
        return win32_impl_result;
    }
    inline Windows::Win32::FileSystem::FindFileHandle FindFirstFileTransactedW(uint16_t* lpFileName, Windows::Win32::FileSystem::FINDEX_INFO_LEVELS fInfoLevelId, void* lpFindFileData, Windows::Win32::FileSystem::FINDEX_SEARCH_OPS fSearchOp, void* lpSearchFilter, uint32_t dwAdditionalFlags, Windows::Win32::SystemServices::HANDLE hTransaction)
    {
        auto win32_impl_result = WIN32_IMPL_FindFirstFileTransactedW(lpFileName, fInfoLevelId, lpFindFileData, fSearchOp, lpSearchFilter, dwAdditionalFlags, hTransaction);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CopyFileA(int8_t* lpExistingFileName, int8_t* lpNewFileName, Windows::Win32::SystemServices::BOOL bFailIfExists)
    {
        auto win32_impl_result = WIN32_IMPL_CopyFileA(lpExistingFileName, lpNewFileName, bFailIfExists);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CopyFileW(uint16_t* lpExistingFileName, uint16_t* lpNewFileName, Windows::Win32::SystemServices::BOOL bFailIfExists)
    {
        auto win32_impl_result = WIN32_IMPL_CopyFileW(lpExistingFileName, lpNewFileName, bFailIfExists);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CopyFileExA(int8_t* lpExistingFileName, int8_t* lpNewFileName, Windows::Win32::FileSystem::LPPROGRESS_ROUTINE* lpProgressRoutine, void* lpData, int32_t* pbCancel, uint32_t dwCopyFlags)
    {
        auto win32_impl_result = WIN32_IMPL_CopyFileExA(lpExistingFileName, lpNewFileName, lpProgressRoutine, lpData, pbCancel, dwCopyFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CopyFileExW(uint16_t* lpExistingFileName, uint16_t* lpNewFileName, Windows::Win32::FileSystem::LPPROGRESS_ROUTINE* lpProgressRoutine, void* lpData, int32_t* pbCancel, uint32_t dwCopyFlags)
    {
        auto win32_impl_result = WIN32_IMPL_CopyFileExW(lpExistingFileName, lpNewFileName, lpProgressRoutine, lpData, pbCancel, dwCopyFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CopyFileTransactedA(int8_t* lpExistingFileName, int8_t* lpNewFileName, Windows::Win32::FileSystem::LPPROGRESS_ROUTINE* lpProgressRoutine, void* lpData, int32_t* pbCancel, uint32_t dwCopyFlags, Windows::Win32::SystemServices::HANDLE hTransaction)
    {
        auto win32_impl_result = WIN32_IMPL_CopyFileTransactedA(lpExistingFileName, lpNewFileName, lpProgressRoutine, lpData, pbCancel, dwCopyFlags, hTransaction);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CopyFileTransactedW(uint16_t* lpExistingFileName, uint16_t* lpNewFileName, Windows::Win32::FileSystem::LPPROGRESS_ROUTINE* lpProgressRoutine, void* lpData, int32_t* pbCancel, uint32_t dwCopyFlags, Windows::Win32::SystemServices::HANDLE hTransaction)
    {
        auto win32_impl_result = WIN32_IMPL_CopyFileTransactedW(lpExistingFileName, lpNewFileName, lpProgressRoutine, lpData, pbCancel, dwCopyFlags, hTransaction);
        return win32_impl_result;
    }
    inline int32_t CopyFile2(uint16_t* pwszExistingFileName, uint16_t* pwszNewFileName, Windows::Win32::FileSystem::COPYFILE2_EXTENDED_PARAMETERS* pExtendedParameters)
    {
        auto win32_impl_result = WIN32_IMPL_CopyFile2(pwszExistingFileName, pwszNewFileName, pExtendedParameters);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL MoveFileA(int8_t* lpExistingFileName, int8_t* lpNewFileName)
    {
        auto win32_impl_result = WIN32_IMPL_MoveFileA(lpExistingFileName, lpNewFileName);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL MoveFileW(uint16_t* lpExistingFileName, uint16_t* lpNewFileName)
    {
        auto win32_impl_result = WIN32_IMPL_MoveFileW(lpExistingFileName, lpNewFileName);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL MoveFileExA(int8_t* lpExistingFileName, int8_t* lpNewFileName, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_MoveFileExA(lpExistingFileName, lpNewFileName, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL MoveFileExW(uint16_t* lpExistingFileName, uint16_t* lpNewFileName, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_MoveFileExW(lpExistingFileName, lpNewFileName, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL MoveFileWithProgressA(int8_t* lpExistingFileName, int8_t* lpNewFileName, Windows::Win32::FileSystem::LPPROGRESS_ROUTINE* lpProgressRoutine, void* lpData, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_MoveFileWithProgressA(lpExistingFileName, lpNewFileName, lpProgressRoutine, lpData, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL MoveFileWithProgressW(uint16_t* lpExistingFileName, uint16_t* lpNewFileName, Windows::Win32::FileSystem::LPPROGRESS_ROUTINE* lpProgressRoutine, void* lpData, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_MoveFileWithProgressW(lpExistingFileName, lpNewFileName, lpProgressRoutine, lpData, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL MoveFileTransactedA(int8_t* lpExistingFileName, int8_t* lpNewFileName, Windows::Win32::FileSystem::LPPROGRESS_ROUTINE* lpProgressRoutine, void* lpData, uint32_t dwFlags, Windows::Win32::SystemServices::HANDLE hTransaction)
    {
        auto win32_impl_result = WIN32_IMPL_MoveFileTransactedA(lpExistingFileName, lpNewFileName, lpProgressRoutine, lpData, dwFlags, hTransaction);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL MoveFileTransactedW(uint16_t* lpExistingFileName, uint16_t* lpNewFileName, Windows::Win32::FileSystem::LPPROGRESS_ROUTINE* lpProgressRoutine, void* lpData, uint32_t dwFlags, Windows::Win32::SystemServices::HANDLE hTransaction)
    {
        auto win32_impl_result = WIN32_IMPL_MoveFileTransactedW(lpExistingFileName, lpNewFileName, lpProgressRoutine, lpData, dwFlags, hTransaction);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ReplaceFileA(int8_t* lpReplacedFileName, int8_t* lpReplacementFileName, int8_t* lpBackupFileName, uint32_t dwReplaceFlags, void* lpExclude, void* lpReserved)
    {
        auto win32_impl_result = WIN32_IMPL_ReplaceFileA(lpReplacedFileName, lpReplacementFileName, lpBackupFileName, dwReplaceFlags, lpExclude, lpReserved);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ReplaceFileW(uint16_t* lpReplacedFileName, uint16_t* lpReplacementFileName, uint16_t* lpBackupFileName, uint32_t dwReplaceFlags, void* lpExclude, void* lpReserved)
    {
        auto win32_impl_result = WIN32_IMPL_ReplaceFileW(lpReplacedFileName, lpReplacementFileName, lpBackupFileName, dwReplaceFlags, lpExclude, lpReserved);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CreateHardLinkA(int8_t* lpFileName, int8_t* lpExistingFileName, Windows::Win32::SystemServices::SECURITY_ATTRIBUTES* lpSecurityAttributes)
    {
        auto win32_impl_result = WIN32_IMPL_CreateHardLinkA(lpFileName, lpExistingFileName, lpSecurityAttributes);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CreateHardLinkW(uint16_t* lpFileName, uint16_t* lpExistingFileName, Windows::Win32::SystemServices::SECURITY_ATTRIBUTES* lpSecurityAttributes)
    {
        auto win32_impl_result = WIN32_IMPL_CreateHardLinkW(lpFileName, lpExistingFileName, lpSecurityAttributes);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CreateHardLinkTransactedA(int8_t* lpFileName, int8_t* lpExistingFileName, Windows::Win32::SystemServices::SECURITY_ATTRIBUTES* lpSecurityAttributes, Windows::Win32::SystemServices::HANDLE hTransaction)
    {
        auto win32_impl_result = WIN32_IMPL_CreateHardLinkTransactedA(lpFileName, lpExistingFileName, lpSecurityAttributes, hTransaction);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CreateHardLinkTransactedW(uint16_t* lpFileName, uint16_t* lpExistingFileName, Windows::Win32::SystemServices::SECURITY_ATTRIBUTES* lpSecurityAttributes, Windows::Win32::SystemServices::HANDLE hTransaction)
    {
        auto win32_impl_result = WIN32_IMPL_CreateHardLinkTransactedW(lpFileName, lpExistingFileName, lpSecurityAttributes, hTransaction);
        return win32_impl_result;
    }
    inline Windows::Win32::FileSystem::FindStreamHandle FindFirstStreamTransactedW(uint16_t* lpFileName, Windows::Win32::FileSystem::STREAM_INFO_LEVELS InfoLevel, void* lpFindStreamData, uint32_t dwFlags, Windows::Win32::SystemServices::HANDLE hTransaction)
    {
        auto win32_impl_result = WIN32_IMPL_FindFirstStreamTransactedW(lpFileName, InfoLevel, lpFindStreamData, dwFlags, hTransaction);
        return win32_impl_result;
    }
    inline Windows::Win32::FileSystem::FindFileNameHandle FindFirstFileNameTransactedW(uint16_t* lpFileName, uint32_t dwFlags, uint32_t* StringLength, uint16_t* LinkName, Windows::Win32::SystemServices::HANDLE hTransaction)
    {
        auto win32_impl_result = WIN32_IMPL_FindFirstFileNameTransactedW(lpFileName, dwFlags, StringLength, LinkName, hTransaction);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SetVolumeLabelA(int8_t* lpRootPathName, int8_t* lpVolumeName)
    {
        auto win32_impl_result = WIN32_IMPL_SetVolumeLabelA(lpRootPathName, lpVolumeName);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SetVolumeLabelW(uint16_t* lpRootPathName, uint16_t* lpVolumeName)
    {
        auto win32_impl_result = WIN32_IMPL_SetVolumeLabelW(lpRootPathName, lpVolumeName);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SetFileBandwidthReservation(Windows::Win32::SystemServices::HANDLE hFile, uint32_t nPeriodMilliseconds, uint32_t nBytesPerPeriod, Windows::Win32::SystemServices::BOOL bDiscardable, uint32_t* lpTransferSize, uint32_t* lpNumOutstandingRequests)
    {
        auto win32_impl_result = WIN32_IMPL_SetFileBandwidthReservation(hFile, nPeriodMilliseconds, nBytesPerPeriod, bDiscardable, lpTransferSize, lpNumOutstandingRequests);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetFileBandwidthReservation(Windows::Win32::SystemServices::HANDLE hFile, uint32_t* lpPeriodMilliseconds, uint32_t* lpBytesPerPeriod, int32_t* pDiscardable, uint32_t* lpTransferSize, uint32_t* lpNumOutstandingRequests)
    {
        auto win32_impl_result = WIN32_IMPL_GetFileBandwidthReservation(hFile, lpPeriodMilliseconds, lpBytesPerPeriod, pDiscardable, lpTransferSize, lpNumOutstandingRequests);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ReadDirectoryChangesW(Windows::Win32::SystemServices::HANDLE hDirectory, void* lpBuffer, uint32_t nBufferLength, Windows::Win32::SystemServices::BOOL bWatchSubtree, uint32_t dwNotifyFilter, uint32_t* lpBytesReturned, Windows::Win32::SystemServices::OVERLAPPED* lpOverlapped, Windows::Win32::FileSystem::LPOVERLAPPED_COMPLETION_ROUTINE* lpCompletionRoutine)
    {
        auto win32_impl_result = WIN32_IMPL_ReadDirectoryChangesW(hDirectory, lpBuffer, nBufferLength, bWatchSubtree, dwNotifyFilter, lpBytesReturned, lpOverlapped, lpCompletionRoutine);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ReadDirectoryChangesExW(Windows::Win32::SystemServices::HANDLE hDirectory, void* lpBuffer, uint32_t nBufferLength, Windows::Win32::SystemServices::BOOL bWatchSubtree, uint32_t dwNotifyFilter, uint32_t* lpBytesReturned, Windows::Win32::SystemServices::OVERLAPPED* lpOverlapped, Windows::Win32::FileSystem::LPOVERLAPPED_COMPLETION_ROUTINE* lpCompletionRoutine, Windows::Win32::FileSystem::READ_DIRECTORY_NOTIFY_INFORMATION_CLASS ReadDirectoryNotifyInformationClass)
    {
        auto win32_impl_result = WIN32_IMPL_ReadDirectoryChangesExW(hDirectory, lpBuffer, nBufferLength, bWatchSubtree, dwNotifyFilter, lpBytesReturned, lpOverlapped, lpCompletionRoutine, ReadDirectoryNotifyInformationClass);
        return win32_impl_result;
    }
    inline Windows::Win32::FileSystem::FindVolumeHandle FindFirstVolumeA(int8_t* lpszVolumeName, uint32_t cchBufferLength)
    {
        auto win32_impl_result = WIN32_IMPL_FindFirstVolumeA(lpszVolumeName, cchBufferLength);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL FindNextVolumeA(Windows::Win32::FileSystem::FindVolumeHandle hFindVolume, int8_t* lpszVolumeName, uint32_t cchBufferLength)
    {
        auto win32_impl_result = WIN32_IMPL_FindNextVolumeA(hFindVolume, lpszVolumeName, cchBufferLength);
        return win32_impl_result;
    }
    inline Windows::Win32::FileSystem::FindVolumeMointPointHandle FindFirstVolumeMountPointA(int8_t* lpszRootPathName, int8_t* lpszVolumeMountPoint, uint32_t cchBufferLength)
    {
        auto win32_impl_result = WIN32_IMPL_FindFirstVolumeMountPointA(lpszRootPathName, lpszVolumeMountPoint, cchBufferLength);
        return win32_impl_result;
    }
    inline Windows::Win32::FileSystem::FindVolumeMointPointHandle FindFirstVolumeMountPointW(uint16_t* lpszRootPathName, uint16_t* lpszVolumeMountPoint, uint32_t cchBufferLength)
    {
        auto win32_impl_result = WIN32_IMPL_FindFirstVolumeMountPointW(lpszRootPathName, lpszVolumeMountPoint, cchBufferLength);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL FindNextVolumeMountPointA(Windows::Win32::FileSystem::FindVolumeMointPointHandle hFindVolumeMountPoint, int8_t* lpszVolumeMountPoint, uint32_t cchBufferLength)
    {
        auto win32_impl_result = WIN32_IMPL_FindNextVolumeMountPointA(hFindVolumeMountPoint, lpszVolumeMountPoint, cchBufferLength);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL FindNextVolumeMountPointW(Windows::Win32::FileSystem::FindVolumeMointPointHandle hFindVolumeMountPoint, uint16_t* lpszVolumeMountPoint, uint32_t cchBufferLength)
    {
        auto win32_impl_result = WIN32_IMPL_FindNextVolumeMountPointW(hFindVolumeMountPoint, lpszVolumeMountPoint, cchBufferLength);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL FindVolumeMountPointClose(Windows::Win32::FileSystem::FindVolumeMointPointHandle hFindVolumeMountPoint)
    {
        auto win32_impl_result = WIN32_IMPL_FindVolumeMountPointClose(hFindVolumeMountPoint);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SetVolumeMountPointA(int8_t* lpszVolumeMountPoint, int8_t* lpszVolumeName)
    {
        auto win32_impl_result = WIN32_IMPL_SetVolumeMountPointA(lpszVolumeMountPoint, lpszVolumeName);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SetVolumeMountPointW(uint16_t* lpszVolumeMountPoint, uint16_t* lpszVolumeName)
    {
        auto win32_impl_result = WIN32_IMPL_SetVolumeMountPointW(lpszVolumeMountPoint, lpszVolumeName);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL DeleteVolumeMountPointA(int8_t* lpszVolumeMountPoint)
    {
        auto win32_impl_result = WIN32_IMPL_DeleteVolumeMountPointA(lpszVolumeMountPoint);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetVolumeNameForVolumeMountPointA(int8_t* lpszVolumeMountPoint, int8_t* lpszVolumeName, uint32_t cchBufferLength)
    {
        auto win32_impl_result = WIN32_IMPL_GetVolumeNameForVolumeMountPointA(lpszVolumeMountPoint, lpszVolumeName, cchBufferLength);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetVolumePathNameA(int8_t* lpszFileName, int8_t* lpszVolumePathName, uint32_t cchBufferLength)
    {
        auto win32_impl_result = WIN32_IMPL_GetVolumePathNameA(lpszFileName, lpszVolumePathName, cchBufferLength);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetVolumePathNamesForVolumeNameA(int8_t* lpszVolumeName, int8_t* lpszVolumePathNames, uint32_t cchBufferLength, uint32_t* lpcchReturnLength)
    {
        auto win32_impl_result = WIN32_IMPL_GetVolumePathNamesForVolumeNameA(lpszVolumeName, lpszVolumePathNames, cchBufferLength, lpcchReturnLength);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetFileInformationByHandleEx(Windows::Win32::SystemServices::HANDLE hFile, Windows::Win32::FileSystem::FILE_INFO_BY_HANDLE_CLASS FileInformationClass, void* lpFileInformation, uint32_t dwBufferSize)
    {
        auto win32_impl_result = WIN32_IMPL_GetFileInformationByHandleEx(hFile, FileInformationClass, lpFileInformation, dwBufferSize);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::HANDLE OpenFileById(Windows::Win32::SystemServices::HANDLE hVolumeHint, Windows::Win32::FileSystem::FILE_ID_DESCRIPTOR* lpFileId, uint32_t dwDesiredAccess, uint32_t dwShareMode, Windows::Win32::SystemServices::SECURITY_ATTRIBUTES* lpSecurityAttributes, uint32_t dwFlagsAndAttributes)
    {
        auto win32_impl_result = WIN32_IMPL_OpenFileById(hVolumeHint, lpFileId, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwFlagsAndAttributes);
        return win32_impl_result;
    }
    inline uint8_t CreateSymbolicLinkA(int8_t* lpSymlinkFileName, int8_t* lpTargetFileName, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_CreateSymbolicLinkA(lpSymlinkFileName, lpTargetFileName, dwFlags);
        return win32_impl_result;
    }
    inline uint8_t CreateSymbolicLinkW(uint16_t* lpSymlinkFileName, uint16_t* lpTargetFileName, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_CreateSymbolicLinkW(lpSymlinkFileName, lpTargetFileName, dwFlags);
        return win32_impl_result;
    }
    inline uint8_t CreateSymbolicLinkTransactedA(int8_t* lpSymlinkFileName, int8_t* lpTargetFileName, uint32_t dwFlags, Windows::Win32::SystemServices::HANDLE hTransaction)
    {
        auto win32_impl_result = WIN32_IMPL_CreateSymbolicLinkTransactedA(lpSymlinkFileName, lpTargetFileName, dwFlags, hTransaction);
        return win32_impl_result;
    }
    inline uint8_t CreateSymbolicLinkTransactedW(uint16_t* lpSymlinkFileName, uint16_t* lpTargetFileName, uint32_t dwFlags, Windows::Win32::SystemServices::HANDLE hTransaction)
    {
        auto win32_impl_result = WIN32_IMPL_CreateSymbolicLinkTransactedW(lpSymlinkFileName, lpTargetFileName, dwFlags, hTransaction);
        return win32_impl_result;
    }

    inline constexpr uint8_t ClfsNullRecord = 0x0;
    inline constexpr uint8_t ClfsDataRecord = 0x1;
    inline constexpr uint8_t ClfsRestartRecord = 0x2;
    inline constexpr uint8_t ClfsClientRecord = 0x3;
    inline constexpr uint32_t ClsContainerInitializing = 0x1;
    inline constexpr uint32_t ClsContainerInactive = 0x2;
    inline constexpr uint32_t ClsContainerActive = 0x4;
    inline constexpr uint32_t ClsContainerActivePendingDelete = 0x8;
    inline constexpr uint32_t ClsContainerPendingArchive = 0x10;
    inline constexpr uint32_t ClsContainerPendingArchiveAndDelete = 0x20;
    inline constexpr uint32_t ClfsContainerInitializing = 0x1;
    inline constexpr uint32_t ClfsContainerInactive = 0x2;
    inline constexpr uint32_t ClfsContainerActive = 0x4;
    inline constexpr uint32_t ClfsContainerActivePendingDelete = 0x8;
    inline constexpr uint32_t ClfsContainerPendingArchive = 0x10;
    inline constexpr uint32_t ClfsContainerPendingArchiveAndDelete = 0x20;
    inline constexpr uint32_t CLFS_MAX_CONTAINER_INFO = 0x100;
    inline constexpr uint8_t CLFS_SCAN_INIT = 0x1;
    inline constexpr uint8_t CLFS_SCAN_FORWARD = 0x2;
    inline constexpr uint8_t CLFS_SCAN_BACKWARD = 0x4;
    inline constexpr uint8_t CLFS_SCAN_CLOSE = 0x8;
    inline constexpr uint8_t CLFS_SCAN_INITIALIZED = 0x10;
    inline constexpr uint8_t CLFS_SCAN_BUFFERED = 0x20;
#pragma endregion methods

}
#endif
