// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_HiDpi_H
#define WIN32_Windows_Win32_HiDpi_H
#include "win32/base.h"
static_assert(win32::check_version(CPPWIN32_VERSION, "0.0.0.1"), "Mismatched C++/Win32 headers.");
#define CPPWIN32_VERSION "0.0.0.1"
#include "win32/impl/Windows.Win32.HiDpi.2.h"
WIN32_EXPORT namespace win32::Windows::Win32::HiDpi
{
#pragma region methods
    inline intptr_t OpenThemeDataForDpi(Windows::Win32::WindowsAndMessaging::HWND hwnd, uint16_t* pszClassList, uint32_t dpi)
    {
        auto win32_impl_result = WIN32_IMPL_OpenThemeDataForDpi(hwnd, pszClassList, dpi);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SetDialogControlDpiChangeBehavior(Windows::Win32::WindowsAndMessaging::HWND hWnd, Windows::Win32::HiDpi::DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS mask, Windows::Win32::HiDpi::DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS values)
    {
        auto win32_impl_result = WIN32_IMPL_SetDialogControlDpiChangeBehavior(hWnd, mask, values);
        return win32_impl_result;
    }
    inline Windows::Win32::HiDpi::DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS GetDialogControlDpiChangeBehavior(Windows::Win32::WindowsAndMessaging::HWND hWnd)
    {
        auto win32_impl_result = WIN32_IMPL_GetDialogControlDpiChangeBehavior(hWnd);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SetDialogDpiChangeBehavior(Windows::Win32::WindowsAndMessaging::HWND hDlg, Windows::Win32::HiDpi::DIALOG_DPI_CHANGE_BEHAVIORS mask, Windows::Win32::HiDpi::DIALOG_DPI_CHANGE_BEHAVIORS values)
    {
        auto win32_impl_result = WIN32_IMPL_SetDialogDpiChangeBehavior(hDlg, mask, values);
        return win32_impl_result;
    }
    inline Windows::Win32::HiDpi::DIALOG_DPI_CHANGE_BEHAVIORS GetDialogDpiChangeBehavior(Windows::Win32::WindowsAndMessaging::HWND hDlg)
    {
        auto win32_impl_result = WIN32_IMPL_GetDialogDpiChangeBehavior(hDlg);
        return win32_impl_result;
    }
    inline int32_t GetSystemMetricsForDpi(int32_t nIndex, uint32_t dpi)
    {
        auto win32_impl_result = WIN32_IMPL_GetSystemMetricsForDpi(nIndex, dpi);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AdjustWindowRectExForDpi(Windows::Win32::DisplayDevices::RECT* lpRect, uint32_t dwStyle, Windows::Win32::SystemServices::BOOL bMenu, uint32_t dwExStyle, uint32_t dpi)
    {
        auto win32_impl_result = WIN32_IMPL_AdjustWindowRectExForDpi(lpRect, dwStyle, bMenu, dwExStyle, dpi);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL LogicalToPhysicalPointForPerMonitorDPI(Windows::Win32::WindowsAndMessaging::HWND hWnd, Windows::Win32::DisplayDevices::POINT* lpPoint)
    {
        auto win32_impl_result = WIN32_IMPL_LogicalToPhysicalPointForPerMonitorDPI(hWnd, lpPoint);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL PhysicalToLogicalPointForPerMonitorDPI(Windows::Win32::WindowsAndMessaging::HWND hWnd, Windows::Win32::DisplayDevices::POINT* lpPoint)
    {
        auto win32_impl_result = WIN32_IMPL_PhysicalToLogicalPointForPerMonitorDPI(hWnd, lpPoint);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SystemParametersInfoForDpi(uint32_t uiAction, uint32_t uiParam, void* pvParam, uint32_t fWinIni, uint32_t dpi)
    {
        auto win32_impl_result = WIN32_IMPL_SystemParametersInfoForDpi(uiAction, uiParam, pvParam, fWinIni, dpi);
        return win32_impl_result;
    }
    inline intptr_t SetThreadDpiAwarenessContext(intptr_t dpiContext)
    {
        auto win32_impl_result = WIN32_IMPL_SetThreadDpiAwarenessContext(dpiContext);
        return win32_impl_result;
    }
    inline intptr_t GetThreadDpiAwarenessContext()
    {
        auto win32_impl_result = WIN32_IMPL_GetThreadDpiAwarenessContext();
        return win32_impl_result;
    }
    inline intptr_t GetWindowDpiAwarenessContext(Windows::Win32::WindowsAndMessaging::HWND hwnd)
    {
        auto win32_impl_result = WIN32_IMPL_GetWindowDpiAwarenessContext(hwnd);
        return win32_impl_result;
    }
    inline Windows::Win32::HiDpi::DPI_AWARENESS GetAwarenessFromDpiAwarenessContext(intptr_t value)
    {
        auto win32_impl_result = WIN32_IMPL_GetAwarenessFromDpiAwarenessContext(value);
        return win32_impl_result;
    }
    inline uint32_t GetDpiFromDpiAwarenessContext(intptr_t value)
    {
        auto win32_impl_result = WIN32_IMPL_GetDpiFromDpiAwarenessContext(value);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AreDpiAwarenessContextsEqual(intptr_t dpiContextA, intptr_t dpiContextB)
    {
        auto win32_impl_result = WIN32_IMPL_AreDpiAwarenessContextsEqual(dpiContextA, dpiContextB);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL IsValidDpiAwarenessContext(intptr_t value)
    {
        auto win32_impl_result = WIN32_IMPL_IsValidDpiAwarenessContext(value);
        return win32_impl_result;
    }
    inline uint32_t GetDpiForWindow(Windows::Win32::WindowsAndMessaging::HWND hwnd)
    {
        auto win32_impl_result = WIN32_IMPL_GetDpiForWindow(hwnd);
        return win32_impl_result;
    }
    inline uint32_t GetDpiForSystem()
    {
        auto win32_impl_result = WIN32_IMPL_GetDpiForSystem();
        return win32_impl_result;
    }
    inline uint32_t GetSystemDpiForProcess(Windows::Win32::SystemServices::HANDLE hProcess)
    {
        auto win32_impl_result = WIN32_IMPL_GetSystemDpiForProcess(hProcess);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL EnableNonClientDpiScaling(Windows::Win32::WindowsAndMessaging::HWND hwnd)
    {
        auto win32_impl_result = WIN32_IMPL_EnableNonClientDpiScaling(hwnd);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SetProcessDpiAwarenessContext(intptr_t value)
    {
        auto win32_impl_result = WIN32_IMPL_SetProcessDpiAwarenessContext(value);
        return win32_impl_result;
    }
    inline Windows::Win32::HiDpi::DPI_HOSTING_BEHAVIOR SetThreadDpiHostingBehavior(Windows::Win32::HiDpi::DPI_HOSTING_BEHAVIOR value)
    {
        auto win32_impl_result = WIN32_IMPL_SetThreadDpiHostingBehavior(value);
        return win32_impl_result;
    }
    inline Windows::Win32::HiDpi::DPI_HOSTING_BEHAVIOR GetThreadDpiHostingBehavior()
    {
        auto win32_impl_result = WIN32_IMPL_GetThreadDpiHostingBehavior();
        return win32_impl_result;
    }
    inline Windows::Win32::HiDpi::DPI_HOSTING_BEHAVIOR GetWindowDpiHostingBehavior(Windows::Win32::WindowsAndMessaging::HWND hwnd)
    {
        auto win32_impl_result = WIN32_IMPL_GetWindowDpiHostingBehavior(hwnd);
        return win32_impl_result;
    }
    inline int32_t SetProcessDpiAwareness(Windows::Win32::HiDpi::PROCESS_DPI_AWARENESS value)
    {
        auto win32_impl_result = WIN32_IMPL_SetProcessDpiAwareness(value);
        return win32_impl_result;
    }
    inline int32_t GetProcessDpiAwareness(Windows::Win32::SystemServices::HANDLE hprocess, Windows::Win32::HiDpi::PROCESS_DPI_AWARENESS* value)
    {
        auto win32_impl_result = WIN32_IMPL_GetProcessDpiAwareness(hprocess, value);
        return win32_impl_result;
    }
    inline int32_t GetDpiForMonitor(intptr_t hmonitor, Windows::Win32::HiDpi::MONITOR_DPI_TYPE dpiType, uint32_t* dpiX, uint32_t* dpiY)
    {
        auto win32_impl_result = WIN32_IMPL_GetDpiForMonitor(hmonitor, dpiType, dpiX, dpiY);
        return win32_impl_result;
    }

#pragma endregion methods

}
#endif
