// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Http_H
#define WIN32_Windows_Win32_Http_H
#include "win32/base.h"
static_assert(win32::check_version(CPPWIN32_VERSION, "0.0.0.1"), "Mismatched C++/Win32 headers.");
#define CPPWIN32_VERSION "0.0.0.1"
#include "win32/impl/Windows.Win32.Http.2.h"
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
#pragma region methods
    inline uint32_t HttpInitialize(Windows::Win32::Http::HTTPAPI_VERSION Version, uint32_t Flags, void* pReserved)
    {
        auto win32_impl_result = WIN32_IMPL_HttpInitialize(Version, Flags, pReserved);
        return win32_impl_result;
    }
    inline uint32_t HttpTerminate(uint32_t Flags, void* pReserved)
    {
        auto win32_impl_result = WIN32_IMPL_HttpTerminate(Flags, pReserved);
        return win32_impl_result;
    }
    inline uint32_t HttpCreateHttpHandle(intptr_t* RequestQueueHandle, uint32_t Reserved)
    {
        auto win32_impl_result = WIN32_IMPL_HttpCreateHttpHandle(RequestQueueHandle, Reserved);
        return win32_impl_result;
    }
    inline uint32_t HttpCreateRequestQueue(Windows::Win32::Http::HTTPAPI_VERSION Version, uint16_t* Name, Windows::Win32::SystemServices::SECURITY_ATTRIBUTES* SecurityAttributes, uint32_t Flags, intptr_t* RequestQueueHandle)
    {
        auto win32_impl_result = WIN32_IMPL_HttpCreateRequestQueue(Version, Name, SecurityAttributes, Flags, RequestQueueHandle);
        return win32_impl_result;
    }
    inline uint32_t HttpCloseRequestQueue(Windows::Win32::SystemServices::HANDLE RequestQueueHandle)
    {
        auto win32_impl_result = WIN32_IMPL_HttpCloseRequestQueue(RequestQueueHandle);
        return win32_impl_result;
    }
    inline uint32_t HttpSetRequestQueueProperty(Windows::Win32::SystemServices::HANDLE RequestQueueHandle, Windows::Win32::Http::HTTP_SERVER_PROPERTY Property, void* PropertyInformation, uint32_t PropertyInformationLength, uint32_t Reserved1, void* Reserved2)
    {
        auto win32_impl_result = WIN32_IMPL_HttpSetRequestQueueProperty(RequestQueueHandle, Property, PropertyInformation, PropertyInformationLength, Reserved1, Reserved2);
        return win32_impl_result;
    }
    inline uint32_t HttpQueryRequestQueueProperty(Windows::Win32::SystemServices::HANDLE RequestQueueHandle, Windows::Win32::Http::HTTP_SERVER_PROPERTY Property, void* PropertyInformation, uint32_t PropertyInformationLength, uint32_t Reserved1, uint32_t* ReturnLength, void* Reserved2)
    {
        auto win32_impl_result = WIN32_IMPL_HttpQueryRequestQueueProperty(RequestQueueHandle, Property, PropertyInformation, PropertyInformationLength, Reserved1, ReturnLength, Reserved2);
        return win32_impl_result;
    }
    inline uint32_t HttpShutdownRequestQueue(Windows::Win32::SystemServices::HANDLE RequestQueueHandle)
    {
        auto win32_impl_result = WIN32_IMPL_HttpShutdownRequestQueue(RequestQueueHandle);
        return win32_impl_result;
    }
    inline uint32_t HttpReceiveClientCertificate(Windows::Win32::SystemServices::HANDLE RequestQueueHandle, uint64_t ConnectionId, uint32_t Flags, Windows::Win32::Http::HTTP_SSL_CLIENT_CERT_INFO* SslClientCertInfo, uint32_t SslClientCertInfoSize, uint32_t* BytesReceived, Windows::Win32::SystemServices::OVERLAPPED* Overlapped)
    {
        auto win32_impl_result = WIN32_IMPL_HttpReceiveClientCertificate(RequestQueueHandle, ConnectionId, Flags, SslClientCertInfo, SslClientCertInfoSize, BytesReceived, Overlapped);
        return win32_impl_result;
    }
    inline uint32_t HttpCreateServerSession(Windows::Win32::Http::HTTPAPI_VERSION Version, uint64_t* ServerSessionId, uint32_t Reserved)
    {
        auto win32_impl_result = WIN32_IMPL_HttpCreateServerSession(Version, ServerSessionId, Reserved);
        return win32_impl_result;
    }
    inline uint32_t HttpCloseServerSession(uint64_t ServerSessionId)
    {
        auto win32_impl_result = WIN32_IMPL_HttpCloseServerSession(ServerSessionId);
        return win32_impl_result;
    }
    inline uint32_t HttpQueryServerSessionProperty(uint64_t ServerSessionId, Windows::Win32::Http::HTTP_SERVER_PROPERTY Property, void* PropertyInformation, uint32_t PropertyInformationLength, uint32_t* ReturnLength)
    {
        auto win32_impl_result = WIN32_IMPL_HttpQueryServerSessionProperty(ServerSessionId, Property, PropertyInformation, PropertyInformationLength, ReturnLength);
        return win32_impl_result;
    }
    inline uint32_t HttpSetServerSessionProperty(uint64_t ServerSessionId, Windows::Win32::Http::HTTP_SERVER_PROPERTY Property, void* PropertyInformation, uint32_t PropertyInformationLength)
    {
        auto win32_impl_result = WIN32_IMPL_HttpSetServerSessionProperty(ServerSessionId, Property, PropertyInformation, PropertyInformationLength);
        return win32_impl_result;
    }
    inline uint32_t HttpAddUrl(Windows::Win32::SystemServices::HANDLE RequestQueueHandle, uint16_t* FullyQualifiedUrl, void* Reserved)
    {
        auto win32_impl_result = WIN32_IMPL_HttpAddUrl(RequestQueueHandle, FullyQualifiedUrl, Reserved);
        return win32_impl_result;
    }
    inline uint32_t HttpRemoveUrl(Windows::Win32::SystemServices::HANDLE RequestQueueHandle, uint16_t* FullyQualifiedUrl)
    {
        auto win32_impl_result = WIN32_IMPL_HttpRemoveUrl(RequestQueueHandle, FullyQualifiedUrl);
        return win32_impl_result;
    }
    inline uint32_t HttpCreateUrlGroup(uint64_t ServerSessionId, uint64_t* pUrlGroupId, uint32_t Reserved)
    {
        auto win32_impl_result = WIN32_IMPL_HttpCreateUrlGroup(ServerSessionId, pUrlGroupId, Reserved);
        return win32_impl_result;
    }
    inline uint32_t HttpCloseUrlGroup(uint64_t UrlGroupId)
    {
        auto win32_impl_result = WIN32_IMPL_HttpCloseUrlGroup(UrlGroupId);
        return win32_impl_result;
    }
    inline uint32_t HttpAddUrlToUrlGroup(uint64_t UrlGroupId, uint16_t* pFullyQualifiedUrl, uint64_t UrlContext, uint32_t Reserved)
    {
        auto win32_impl_result = WIN32_IMPL_HttpAddUrlToUrlGroup(UrlGroupId, pFullyQualifiedUrl, UrlContext, Reserved);
        return win32_impl_result;
    }
    inline uint32_t HttpRemoveUrlFromUrlGroup(uint64_t UrlGroupId, uint16_t* pFullyQualifiedUrl, uint32_t Flags)
    {
        auto win32_impl_result = WIN32_IMPL_HttpRemoveUrlFromUrlGroup(UrlGroupId, pFullyQualifiedUrl, Flags);
        return win32_impl_result;
    }
    inline uint32_t HttpSetUrlGroupProperty(uint64_t UrlGroupId, Windows::Win32::Http::HTTP_SERVER_PROPERTY Property, void* PropertyInformation, uint32_t PropertyInformationLength)
    {
        auto win32_impl_result = WIN32_IMPL_HttpSetUrlGroupProperty(UrlGroupId, Property, PropertyInformation, PropertyInformationLength);
        return win32_impl_result;
    }
    inline uint32_t HttpQueryUrlGroupProperty(uint64_t UrlGroupId, Windows::Win32::Http::HTTP_SERVER_PROPERTY Property, void* PropertyInformation, uint32_t PropertyInformationLength, uint32_t* ReturnLength)
    {
        auto win32_impl_result = WIN32_IMPL_HttpQueryUrlGroupProperty(UrlGroupId, Property, PropertyInformation, PropertyInformationLength, ReturnLength);
        return win32_impl_result;
    }
    inline uint32_t HttpPrepareUrl(void* Reserved, uint32_t Flags, uint16_t* Url, uint16_t** PreparedUrl)
    {
        auto win32_impl_result = WIN32_IMPL_HttpPrepareUrl(Reserved, Flags, Url, PreparedUrl);
        return win32_impl_result;
    }
    inline uint32_t HttpReceiveHttpRequest(Windows::Win32::SystemServices::HANDLE RequestQueueHandle, uint64_t RequestId, uint32_t Flags, Windows::Win32::Http::HTTP_REQUEST_V2* RequestBuffer, uint32_t RequestBufferLength, uint32_t* BytesReturned, Windows::Win32::SystemServices::OVERLAPPED* Overlapped)
    {
        auto win32_impl_result = WIN32_IMPL_HttpReceiveHttpRequest(RequestQueueHandle, RequestId, Flags, RequestBuffer, RequestBufferLength, BytesReturned, Overlapped);
        return win32_impl_result;
    }
    inline uint32_t HttpReceiveRequestEntityBody(Windows::Win32::SystemServices::HANDLE RequestQueueHandle, uint64_t RequestId, uint32_t Flags, void* EntityBuffer, uint32_t EntityBufferLength, uint32_t* BytesReturned, Windows::Win32::SystemServices::OVERLAPPED* Overlapped)
    {
        auto win32_impl_result = WIN32_IMPL_HttpReceiveRequestEntityBody(RequestQueueHandle, RequestId, Flags, EntityBuffer, EntityBufferLength, BytesReturned, Overlapped);
        return win32_impl_result;
    }
    inline uint32_t HttpSendHttpResponse(Windows::Win32::SystemServices::HANDLE RequestQueueHandle, uint64_t RequestId, uint32_t Flags, Windows::Win32::Http::HTTP_RESPONSE_V2* HttpResponse, Windows::Win32::Http::HTTP_CACHE_POLICY* CachePolicy, uint32_t* BytesSent, void* Reserved1, uint32_t Reserved2, Windows::Win32::SystemServices::OVERLAPPED* Overlapped, Windows::Win32::Http::HTTP_LOG_DATA* LogData)
    {
        auto win32_impl_result = WIN32_IMPL_HttpSendHttpResponse(RequestQueueHandle, RequestId, Flags, HttpResponse, CachePolicy, BytesSent, Reserved1, Reserved2, Overlapped, LogData);
        return win32_impl_result;
    }
    inline uint32_t HttpSendResponseEntityBody(Windows::Win32::SystemServices::HANDLE RequestQueueHandle, uint64_t RequestId, uint32_t Flags, uint16_t EntityChunkCount, Windows::Win32::Http::HTTP_DATA_CHUNK* EntityChunks, uint32_t* BytesSent, void* Reserved1, uint32_t Reserved2, Windows::Win32::SystemServices::OVERLAPPED* Overlapped, Windows::Win32::Http::HTTP_LOG_DATA* LogData)
    {
        auto win32_impl_result = WIN32_IMPL_HttpSendResponseEntityBody(RequestQueueHandle, RequestId, Flags, EntityChunkCount, EntityChunks, BytesSent, Reserved1, Reserved2, Overlapped, LogData);
        return win32_impl_result;
    }
    inline uint32_t HttpDeclarePush(Windows::Win32::SystemServices::HANDLE RequestQueueHandle, uint64_t RequestId, Windows::Win32::Http::HTTP_VERB Verb, uint16_t* Path, int8_t* Query, Windows::Win32::Http::HTTP_REQUEST_HEADERS* Headers)
    {
        auto win32_impl_result = WIN32_IMPL_HttpDeclarePush(RequestQueueHandle, RequestId, Verb, Path, Query, Headers);
        return win32_impl_result;
    }
    inline uint32_t HttpWaitForDisconnect(Windows::Win32::SystemServices::HANDLE RequestQueueHandle, uint64_t ConnectionId, Windows::Win32::SystemServices::OVERLAPPED* Overlapped)
    {
        auto win32_impl_result = WIN32_IMPL_HttpWaitForDisconnect(RequestQueueHandle, ConnectionId, Overlapped);
        return win32_impl_result;
    }
    inline uint32_t HttpWaitForDisconnectEx(Windows::Win32::SystemServices::HANDLE RequestQueueHandle, uint64_t ConnectionId, uint32_t Reserved, Windows::Win32::SystemServices::OVERLAPPED* Overlapped)
    {
        auto win32_impl_result = WIN32_IMPL_HttpWaitForDisconnectEx(RequestQueueHandle, ConnectionId, Reserved, Overlapped);
        return win32_impl_result;
    }
    inline uint32_t HttpCancelHttpRequest(Windows::Win32::SystemServices::HANDLE RequestQueueHandle, uint64_t RequestId, Windows::Win32::SystemServices::OVERLAPPED* Overlapped)
    {
        auto win32_impl_result = WIN32_IMPL_HttpCancelHttpRequest(RequestQueueHandle, RequestId, Overlapped);
        return win32_impl_result;
    }
    inline uint32_t HttpWaitForDemandStart(Windows::Win32::SystemServices::HANDLE RequestQueueHandle, Windows::Win32::SystemServices::OVERLAPPED* Overlapped)
    {
        auto win32_impl_result = WIN32_IMPL_HttpWaitForDemandStart(RequestQueueHandle, Overlapped);
        return win32_impl_result;
    }
    inline uint32_t HttpFlushResponseCache(Windows::Win32::SystemServices::HANDLE RequestQueueHandle, uint16_t* UrlPrefix, uint32_t Flags, Windows::Win32::SystemServices::OVERLAPPED* Overlapped)
    {
        auto win32_impl_result = WIN32_IMPL_HttpFlushResponseCache(RequestQueueHandle, UrlPrefix, Flags, Overlapped);
        return win32_impl_result;
    }
    inline uint32_t HttpAddFragmentToCache(Windows::Win32::SystemServices::HANDLE RequestQueueHandle, uint16_t* UrlPrefix, Windows::Win32::Http::HTTP_DATA_CHUNK* DataChunk, Windows::Win32::Http::HTTP_CACHE_POLICY* CachePolicy, Windows::Win32::SystemServices::OVERLAPPED* Overlapped)
    {
        auto win32_impl_result = WIN32_IMPL_HttpAddFragmentToCache(RequestQueueHandle, UrlPrefix, DataChunk, CachePolicy, Overlapped);
        return win32_impl_result;
    }
    inline uint32_t HttpReadFragmentFromCache(Windows::Win32::SystemServices::HANDLE RequestQueueHandle, uint16_t* UrlPrefix, Windows::Win32::Http::HTTP_BYTE_RANGE* ByteRange, void* Buffer, uint32_t BufferLength, uint32_t* BytesRead, Windows::Win32::SystemServices::OVERLAPPED* Overlapped)
    {
        auto win32_impl_result = WIN32_IMPL_HttpReadFragmentFromCache(RequestQueueHandle, UrlPrefix, ByteRange, Buffer, BufferLength, BytesRead, Overlapped);
        return win32_impl_result;
    }
    inline uint32_t HttpSetServiceConfiguration(Windows::Win32::SystemServices::HANDLE ServiceHandle, Windows::Win32::Http::HTTP_SERVICE_CONFIG_ID ConfigId, void* pConfigInformation, uint32_t ConfigInformationLength, Windows::Win32::SystemServices::OVERLAPPED* pOverlapped)
    {
        auto win32_impl_result = WIN32_IMPL_HttpSetServiceConfiguration(ServiceHandle, ConfigId, pConfigInformation, ConfigInformationLength, pOverlapped);
        return win32_impl_result;
    }
    inline uint32_t HttpUpdateServiceConfiguration(Windows::Win32::SystemServices::HANDLE Handle, Windows::Win32::Http::HTTP_SERVICE_CONFIG_ID ConfigId, void* ConfigInfo, uint32_t ConfigInfoLength, Windows::Win32::SystemServices::OVERLAPPED* Overlapped)
    {
        auto win32_impl_result = WIN32_IMPL_HttpUpdateServiceConfiguration(Handle, ConfigId, ConfigInfo, ConfigInfoLength, Overlapped);
        return win32_impl_result;
    }
    inline uint32_t HttpDeleteServiceConfiguration(Windows::Win32::SystemServices::HANDLE ServiceHandle, Windows::Win32::Http::HTTP_SERVICE_CONFIG_ID ConfigId, void* pConfigInformation, uint32_t ConfigInformationLength, Windows::Win32::SystemServices::OVERLAPPED* pOverlapped)
    {
        auto win32_impl_result = WIN32_IMPL_HttpDeleteServiceConfiguration(ServiceHandle, ConfigId, pConfigInformation, ConfigInformationLength, pOverlapped);
        return win32_impl_result;
    }
    inline uint32_t HttpQueryServiceConfiguration(Windows::Win32::SystemServices::HANDLE ServiceHandle, Windows::Win32::Http::HTTP_SERVICE_CONFIG_ID ConfigId, void* pInput, uint32_t InputLength, void* pOutput, uint32_t OutputLength, uint32_t* pReturnLength, Windows::Win32::SystemServices::OVERLAPPED* pOverlapped)
    {
        auto win32_impl_result = WIN32_IMPL_HttpQueryServiceConfiguration(ServiceHandle, ConfigId, pInput, InputLength, pOutput, OutputLength, pReturnLength, pOverlapped);
        return win32_impl_result;
    }
    inline uint32_t HttpGetExtension(Windows::Win32::Http::HTTPAPI_VERSION Version, uint32_t Extension, void* Buffer, uint32_t BufferSize)
    {
        auto win32_impl_result = WIN32_IMPL_HttpGetExtension(Version, Extension, Buffer, BufferSize);
        return win32_impl_result;
    }
    inline Windows::Win32::Http::WINHTTP_STATUS_CALLBACK* WinHttpSetStatusCallback(void* hInternet, Windows::Win32::Http::WINHTTP_STATUS_CALLBACK* lpfnInternetCallback, uint32_t dwNotificationFlags, size_t dwReserved)
    {
        auto win32_impl_result = WIN32_IMPL_WinHttpSetStatusCallback(hInternet, lpfnInternetCallback, dwNotificationFlags, dwReserved);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WinHttpTimeFromSystemTime(Windows::Win32::WindowsProgramming::SYSTEMTIME* pst, uint16_t* pwszTime)
    {
        auto win32_impl_result = WIN32_IMPL_WinHttpTimeFromSystemTime(pst, pwszTime);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WinHttpTimeToSystemTime(uint16_t* pwszTime, Windows::Win32::WindowsProgramming::SYSTEMTIME* pst)
    {
        auto win32_impl_result = WIN32_IMPL_WinHttpTimeToSystemTime(pwszTime, pst);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WinHttpCrackUrl(uint16_t* pwszUrl, uint32_t dwUrlLength, uint32_t dwFlags, Windows::Win32::Http::URL_COMPONENTS* lpUrlComponents)
    {
        auto win32_impl_result = WIN32_IMPL_WinHttpCrackUrl(pwszUrl, dwUrlLength, dwFlags, lpUrlComponents);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WinHttpCreateUrl(Windows::Win32::Http::URL_COMPONENTS* lpUrlComponents, uint32_t dwFlags, uint16_t* pwszUrl, uint32_t* pdwUrlLength)
    {
        auto win32_impl_result = WIN32_IMPL_WinHttpCreateUrl(lpUrlComponents, dwFlags, pwszUrl, pdwUrlLength);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WinHttpCheckPlatform()
    {
        auto win32_impl_result = WIN32_IMPL_WinHttpCheckPlatform();
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WinHttpGetDefaultProxyConfiguration(Windows::Win32::Http::WINHTTP_PROXY_INFO* pProxyInfo)
    {
        auto win32_impl_result = WIN32_IMPL_WinHttpGetDefaultProxyConfiguration(pProxyInfo);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WinHttpSetDefaultProxyConfiguration(Windows::Win32::Http::WINHTTP_PROXY_INFO* pProxyInfo)
    {
        auto win32_impl_result = WIN32_IMPL_WinHttpSetDefaultProxyConfiguration(pProxyInfo);
        return win32_impl_result;
    }
    inline void* WinHttpOpen(uint16_t* pszAgentW, uint32_t dwAccessType, uint16_t* pszProxyW, uint16_t* pszProxyBypassW, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_WinHttpOpen(pszAgentW, dwAccessType, pszProxyW, pszProxyBypassW, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WinHttpCloseHandle(void* hInternet)
    {
        auto win32_impl_result = WIN32_IMPL_WinHttpCloseHandle(hInternet);
        return win32_impl_result;
    }
    inline void* WinHttpConnect(void* hSession, uint16_t* pswzServerName, uint16_t nServerPort, uint32_t dwReserved)
    {
        auto win32_impl_result = WIN32_IMPL_WinHttpConnect(hSession, pswzServerName, nServerPort, dwReserved);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WinHttpReadData(void* hRequest, void* lpBuffer, uint32_t dwNumberOfBytesToRead, uint32_t* lpdwNumberOfBytesRead)
    {
        auto win32_impl_result = WIN32_IMPL_WinHttpReadData(hRequest, lpBuffer, dwNumberOfBytesToRead, lpdwNumberOfBytesRead);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WinHttpWriteData(void* hRequest, void* lpBuffer, uint32_t dwNumberOfBytesToWrite, uint32_t* lpdwNumberOfBytesWritten)
    {
        auto win32_impl_result = WIN32_IMPL_WinHttpWriteData(hRequest, lpBuffer, dwNumberOfBytesToWrite, lpdwNumberOfBytesWritten);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WinHttpQueryDataAvailable(void* hRequest, uint32_t* lpdwNumberOfBytesAvailable)
    {
        auto win32_impl_result = WIN32_IMPL_WinHttpQueryDataAvailable(hRequest, lpdwNumberOfBytesAvailable);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WinHttpQueryOption(void* hInternet, uint32_t dwOption, void* lpBuffer, uint32_t* lpdwBufferLength)
    {
        auto win32_impl_result = WIN32_IMPL_WinHttpQueryOption(hInternet, dwOption, lpBuffer, lpdwBufferLength);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WinHttpSetOption(void* hInternet, uint32_t dwOption, void* lpBuffer, uint32_t dwBufferLength)
    {
        auto win32_impl_result = WIN32_IMPL_WinHttpSetOption(hInternet, dwOption, lpBuffer, dwBufferLength);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WinHttpSetTimeouts(void* hInternet, int32_t nResolveTimeout, int32_t nConnectTimeout, int32_t nSendTimeout, int32_t nReceiveTimeout)
    {
        auto win32_impl_result = WIN32_IMPL_WinHttpSetTimeouts(hInternet, nResolveTimeout, nConnectTimeout, nSendTimeout, nReceiveTimeout);
        return win32_impl_result;
    }
    inline void* WinHttpOpenRequest(void* hConnect, uint16_t* pwszVerb, uint16_t* pwszObjectName, uint16_t* pwszVersion, uint16_t* pwszReferrer, uint16_t** ppwszAcceptTypes, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_WinHttpOpenRequest(hConnect, pwszVerb, pwszObjectName, pwszVersion, pwszReferrer, ppwszAcceptTypes, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WinHttpAddRequestHeaders(void* hRequest, uint16_t* lpszHeaders, uint32_t dwHeadersLength, uint32_t dwModifiers)
    {
        auto win32_impl_result = WIN32_IMPL_WinHttpAddRequestHeaders(hRequest, lpszHeaders, dwHeadersLength, dwModifiers);
        return win32_impl_result;
    }
    inline uint32_t WinHttpAddRequestHeadersEx(void* hRequest, uint32_t dwModifiers, uint64_t ullFlags, uint64_t ullExtra, uint32_t cHeaders, Windows::Win32::Http::WINHTTP_EXTENDED_HEADER* pHeaders)
    {
        auto win32_impl_result = WIN32_IMPL_WinHttpAddRequestHeadersEx(hRequest, dwModifiers, ullFlags, ullExtra, cHeaders, pHeaders);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WinHttpSendRequest(void* hRequest, uint16_t* lpszHeaders, uint32_t dwHeadersLength, void* lpOptional, uint32_t dwOptionalLength, uint32_t dwTotalLength, size_t dwContext)
    {
        auto win32_impl_result = WIN32_IMPL_WinHttpSendRequest(hRequest, lpszHeaders, dwHeadersLength, lpOptional, dwOptionalLength, dwTotalLength, dwContext);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WinHttpSetCredentials(void* hRequest, uint32_t AuthTargets, uint32_t AuthScheme, uint16_t* pwszUserName, uint16_t* pwszPassword, void* pAuthParams)
    {
        auto win32_impl_result = WIN32_IMPL_WinHttpSetCredentials(hRequest, AuthTargets, AuthScheme, pwszUserName, pwszPassword, pAuthParams);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WinHttpQueryAuthSchemes(void* hRequest, uint32_t* lpdwSupportedSchemes, uint32_t* lpdwFirstScheme, uint32_t* pdwAuthTarget)
    {
        auto win32_impl_result = WIN32_IMPL_WinHttpQueryAuthSchemes(hRequest, lpdwSupportedSchemes, lpdwFirstScheme, pdwAuthTarget);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WinHttpReceiveResponse(void* hRequest, void* lpReserved)
    {
        auto win32_impl_result = WIN32_IMPL_WinHttpReceiveResponse(hRequest, lpReserved);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WinHttpQueryHeaders(void* hRequest, uint32_t dwInfoLevel, uint16_t* pwszName, void* lpBuffer, uint32_t* lpdwBufferLength, uint32_t* lpdwIndex)
    {
        auto win32_impl_result = WIN32_IMPL_WinHttpQueryHeaders(hRequest, dwInfoLevel, pwszName, lpBuffer, lpdwBufferLength, lpdwIndex);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WinHttpDetectAutoProxyConfigUrl(uint32_t dwAutoDetectFlags, uint16_t** ppwstrAutoConfigUrl)
    {
        auto win32_impl_result = WIN32_IMPL_WinHttpDetectAutoProxyConfigUrl(dwAutoDetectFlags, ppwstrAutoConfigUrl);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WinHttpGetProxyForUrl(void* hSession, uint16_t* lpcwszUrl, Windows::Win32::Http::WINHTTP_AUTOPROXY_OPTIONS* pAutoProxyOptions, Windows::Win32::Http::WINHTTP_PROXY_INFO* pProxyInfo)
    {
        auto win32_impl_result = WIN32_IMPL_WinHttpGetProxyForUrl(hSession, lpcwszUrl, pAutoProxyOptions, pProxyInfo);
        return win32_impl_result;
    }
    inline uint32_t WinHttpCreateProxyResolver(void* hSession, void** phResolver)
    {
        auto win32_impl_result = WIN32_IMPL_WinHttpCreateProxyResolver(hSession, phResolver);
        return win32_impl_result;
    }
    inline uint32_t WinHttpGetProxyForUrlEx(void* hResolver, uint16_t* pcwszUrl, Windows::Win32::Http::WINHTTP_AUTOPROXY_OPTIONS* pAutoProxyOptions, size_t pContext)
    {
        auto win32_impl_result = WIN32_IMPL_WinHttpGetProxyForUrlEx(hResolver, pcwszUrl, pAutoProxyOptions, pContext);
        return win32_impl_result;
    }
    inline uint32_t WinHttpGetProxyForUrlEx2(void* hResolver, uint16_t* pcwszUrl, Windows::Win32::Http::WINHTTP_AUTOPROXY_OPTIONS* pAutoProxyOptions, uint32_t cbInterfaceSelectionContext, uint8_t* pInterfaceSelectionContext, size_t pContext)
    {
        auto win32_impl_result = WIN32_IMPL_WinHttpGetProxyForUrlEx2(hResolver, pcwszUrl, pAutoProxyOptions, cbInterfaceSelectionContext, pInterfaceSelectionContext, pContext);
        return win32_impl_result;
    }
    inline uint32_t WinHttpGetProxyResult(void* hResolver, Windows::Win32::Http::WINHTTP_PROXY_RESULT* pProxyResult)
    {
        auto win32_impl_result = WIN32_IMPL_WinHttpGetProxyResult(hResolver, pProxyResult);
        return win32_impl_result;
    }
    inline uint32_t WinHttpGetProxyResultEx(void* hResolver, Windows::Win32::Http::WINHTTP_PROXY_RESULT_EX* pProxyResultEx)
    {
        auto win32_impl_result = WIN32_IMPL_WinHttpGetProxyResultEx(hResolver, pProxyResultEx);
        return win32_impl_result;
    }
    inline void WinHttpFreeProxyResult(Windows::Win32::Http::WINHTTP_PROXY_RESULT* pProxyResult)
    {
        WIN32_IMPL_WinHttpFreeProxyResult(pProxyResult);
    }
    inline void WinHttpFreeProxyResultEx(Windows::Win32::Http::WINHTTP_PROXY_RESULT_EX* pProxyResultEx)
    {
        WIN32_IMPL_WinHttpFreeProxyResultEx(pProxyResultEx);
    }
    inline uint32_t WinHttpResetAutoProxy(void* hSession, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_WinHttpResetAutoProxy(hSession, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WinHttpGetIEProxyConfigForCurrentUser(Windows::Win32::Http::WINHTTP_CURRENT_USER_IE_PROXY_CONFIG* pProxyConfig)
    {
        auto win32_impl_result = WIN32_IMPL_WinHttpGetIEProxyConfigForCurrentUser(pProxyConfig);
        return win32_impl_result;
    }
    inline uint32_t WinHttpWriteProxySettings(void* hSession, Windows::Win32::SystemServices::BOOL fForceUpdate, Windows::Win32::Http::WINHTTP_PROXY_SETTINGS* pWinHttpProxySettings)
    {
        auto win32_impl_result = WIN32_IMPL_WinHttpWriteProxySettings(hSession, fForceUpdate, pWinHttpProxySettings);
        return win32_impl_result;
    }
    inline uint32_t WinHttpReadProxySettings(void* hSession, uint16_t* pcwszConnectionName, Windows::Win32::SystemServices::BOOL fFallBackToDefaultSettings, Windows::Win32::SystemServices::BOOL fSetAutoDiscoverForDefaultSettings, uint32_t* pdwSettingsVersion, int32_t* pfDefaultSettingsAreReturned, Windows::Win32::Http::WINHTTP_PROXY_SETTINGS* pWinHttpProxySettings)
    {
        auto win32_impl_result = WIN32_IMPL_WinHttpReadProxySettings(hSession, pcwszConnectionName, fFallBackToDefaultSettings, fSetAutoDiscoverForDefaultSettings, pdwSettingsVersion, pfDefaultSettingsAreReturned, pWinHttpProxySettings);
        return win32_impl_result;
    }
    inline void WinHttpFreeProxySettings(Windows::Win32::Http::WINHTTP_PROXY_SETTINGS* pWinHttpProxySettings)
    {
        WIN32_IMPL_WinHttpFreeProxySettings(pWinHttpProxySettings);
    }
    inline uint32_t WinHttpGetProxySettingsVersion(void* hSession, uint32_t* pdwProxySettingsVersion)
    {
        auto win32_impl_result = WIN32_IMPL_WinHttpGetProxySettingsVersion(hSession, pdwProxySettingsVersion);
        return win32_impl_result;
    }
    inline uint32_t WinHttpSetProxySettingsPerUser(Windows::Win32::SystemServices::BOOL fProxySettingsPerUser)
    {
        auto win32_impl_result = WIN32_IMPL_WinHttpSetProxySettingsPerUser(fProxySettingsPerUser);
        return win32_impl_result;
    }
    inline void* WinHttpWebSocketCompleteUpgrade(void* hRequest, size_t pContext)
    {
        auto win32_impl_result = WIN32_IMPL_WinHttpWebSocketCompleteUpgrade(hRequest, pContext);
        return win32_impl_result;
    }
    inline uint32_t WinHttpWebSocketSend(void* hWebSocket, Windows::Win32::Http::WINHTTP_WEB_SOCKET_BUFFER_TYPE eBufferType, void* pvBuffer, uint32_t dwBufferLength)
    {
        auto win32_impl_result = WIN32_IMPL_WinHttpWebSocketSend(hWebSocket, eBufferType, pvBuffer, dwBufferLength);
        return win32_impl_result;
    }
    inline uint32_t WinHttpWebSocketReceive(void* hWebSocket, void* pvBuffer, uint32_t dwBufferLength, uint32_t* pdwBytesRead, Windows::Win32::Http::WINHTTP_WEB_SOCKET_BUFFER_TYPE* peBufferType)
    {
        auto win32_impl_result = WIN32_IMPL_WinHttpWebSocketReceive(hWebSocket, pvBuffer, dwBufferLength, pdwBytesRead, peBufferType);
        return win32_impl_result;
    }
    inline uint32_t WinHttpWebSocketShutdown(void* hWebSocket, uint16_t usStatus, void* pvReason, uint32_t dwReasonLength)
    {
        auto win32_impl_result = WIN32_IMPL_WinHttpWebSocketShutdown(hWebSocket, usStatus, pvReason, dwReasonLength);
        return win32_impl_result;
    }
    inline uint32_t WinHttpWebSocketClose(void* hWebSocket, uint16_t usStatus, void* pvReason, uint32_t dwReasonLength)
    {
        auto win32_impl_result = WIN32_IMPL_WinHttpWebSocketClose(hWebSocket, usStatus, pvReason, dwReasonLength);
        return win32_impl_result;
    }
    inline uint32_t WinHttpWebSocketQueryCloseStatus(void* hWebSocket, uint16_t* pusStatus, void* pvReason, uint32_t dwReasonLength, uint32_t* pdwReasonLengthConsumed)
    {
        auto win32_impl_result = WIN32_IMPL_WinHttpWebSocketQueryCloseStatus(hWebSocket, pusStatus, pvReason, dwReasonLength, pdwReasonLengthConsumed);
        return win32_impl_result;
    }

#pragma endregion methods

}
#endif
