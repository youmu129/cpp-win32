// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_IScsiDisc_H
#define WIN32_Windows_Win32_IScsiDisc_H
#include "win32/base.h"
static_assert(win32::check_version(CPPWIN32_VERSION, "0.0.0.1"), "Mismatched C++/Win32 headers.");
#define CPPWIN32_VERSION "0.0.0.1"
#include "win32/impl/Windows.Win32.IScsiDisc.2.h"
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
#pragma region methods
    inline uint32_t GetIScsiVersionInformation(Windows::Win32::IScsiDisc::ISCSI_VERSION_INFO* VersionInfo)
    {
        auto win32_impl_result = WIN32_IMPL_GetIScsiVersionInformation(VersionInfo);
        return win32_impl_result;
    }
    inline uint32_t GetIScsiTargetInformationW(uint16_t* TargetName, uint16_t* DiscoveryMechanism, Windows::Win32::IScsiDisc::TARGET_INFORMATION_CLASS InfoClass, uint32_t* BufferSize, void* Buffer)
    {
        auto win32_impl_result = WIN32_IMPL_GetIScsiTargetInformationW(TargetName, DiscoveryMechanism, InfoClass, BufferSize, Buffer);
        return win32_impl_result;
    }
    inline uint32_t GetIScsiTargetInformationA(int8_t* TargetName, int8_t* DiscoveryMechanism, Windows::Win32::IScsiDisc::TARGET_INFORMATION_CLASS InfoClass, uint32_t* BufferSize, void* Buffer)
    {
        auto win32_impl_result = WIN32_IMPL_GetIScsiTargetInformationA(TargetName, DiscoveryMechanism, InfoClass, BufferSize, Buffer);
        return win32_impl_result;
    }
    inline uint32_t AddIScsiConnectionW(Windows::Win32::IScsiDisc::ISCSI_UNIQUE_SESSION_ID* UniqueSessionId, void* Reserved, uint32_t InitiatorPortNumber, Windows::Win32::IScsiDisc::ISCSI_TARGET_PORTALW* TargetPortal, uint64_t SecurityFlags, Windows::Win32::IScsiDisc::ISCSI_LOGIN_OPTIONS* LoginOptions, uint32_t KeySize, int8_t* Key, Windows::Win32::IScsiDisc::ISCSI_UNIQUE_SESSION_ID* ConnectionId)
    {
        auto win32_impl_result = WIN32_IMPL_AddIScsiConnectionW(UniqueSessionId, Reserved, InitiatorPortNumber, TargetPortal, SecurityFlags, LoginOptions, KeySize, Key, ConnectionId);
        return win32_impl_result;
    }
    inline uint32_t AddIScsiConnectionA(Windows::Win32::IScsiDisc::ISCSI_UNIQUE_SESSION_ID* UniqueSessionId, void* Reserved, uint32_t InitiatorPortNumber, Windows::Win32::IScsiDisc::ISCSI_TARGET_PORTALA* TargetPortal, uint64_t SecurityFlags, Windows::Win32::IScsiDisc::ISCSI_LOGIN_OPTIONS* LoginOptions, uint32_t KeySize, int8_t* Key, Windows::Win32::IScsiDisc::ISCSI_UNIQUE_SESSION_ID* ConnectionId)
    {
        auto win32_impl_result = WIN32_IMPL_AddIScsiConnectionA(UniqueSessionId, Reserved, InitiatorPortNumber, TargetPortal, SecurityFlags, LoginOptions, KeySize, Key, ConnectionId);
        return win32_impl_result;
    }
    inline uint32_t RemoveIScsiConnection(Windows::Win32::IScsiDisc::ISCSI_UNIQUE_SESSION_ID* UniqueSessionId, Windows::Win32::IScsiDisc::ISCSI_UNIQUE_SESSION_ID* ConnectionId)
    {
        auto win32_impl_result = WIN32_IMPL_RemoveIScsiConnection(UniqueSessionId, ConnectionId);
        return win32_impl_result;
    }
    inline uint32_t ReportIScsiTargetsW(uint8_t ForceUpdate, uint32_t* BufferSize, uint16_t* Buffer)
    {
        auto win32_impl_result = WIN32_IMPL_ReportIScsiTargetsW(ForceUpdate, BufferSize, Buffer);
        return win32_impl_result;
    }
    inline uint32_t ReportIScsiTargetsA(uint8_t ForceUpdate, uint32_t* BufferSize, int8_t* Buffer)
    {
        auto win32_impl_result = WIN32_IMPL_ReportIScsiTargetsA(ForceUpdate, BufferSize, Buffer);
        return win32_impl_result;
    }
    inline uint32_t AddIScsiStaticTargetW(uint16_t* TargetName, uint16_t* TargetAlias, uint32_t TargetFlags, uint8_t Persist, Windows::Win32::IScsiDisc::ISCSI_TARGET_MAPPINGW* Mappings, Windows::Win32::IScsiDisc::ISCSI_LOGIN_OPTIONS* LoginOptions, Windows::Win32::IScsiDisc::ISCSI_TARGET_PORTAL_GROUPW* PortalGroup)
    {
        auto win32_impl_result = WIN32_IMPL_AddIScsiStaticTargetW(TargetName, TargetAlias, TargetFlags, Persist, Mappings, LoginOptions, PortalGroup);
        return win32_impl_result;
    }
    inline uint32_t AddIScsiStaticTargetA(int8_t* TargetName, int8_t* TargetAlias, uint32_t TargetFlags, uint8_t Persist, Windows::Win32::IScsiDisc::ISCSI_TARGET_MAPPINGA* Mappings, Windows::Win32::IScsiDisc::ISCSI_LOGIN_OPTIONS* LoginOptions, Windows::Win32::IScsiDisc::ISCSI_TARGET_PORTAL_GROUPA* PortalGroup)
    {
        auto win32_impl_result = WIN32_IMPL_AddIScsiStaticTargetA(TargetName, TargetAlias, TargetFlags, Persist, Mappings, LoginOptions, PortalGroup);
        return win32_impl_result;
    }
    inline uint32_t RemoveIScsiStaticTargetW(uint16_t* TargetName)
    {
        auto win32_impl_result = WIN32_IMPL_RemoveIScsiStaticTargetW(TargetName);
        return win32_impl_result;
    }
    inline uint32_t RemoveIScsiStaticTargetA(int8_t* TargetName)
    {
        auto win32_impl_result = WIN32_IMPL_RemoveIScsiStaticTargetA(TargetName);
        return win32_impl_result;
    }
    inline uint32_t AddIScsiSendTargetPortalW(uint16_t* InitiatorInstance, uint32_t InitiatorPortNumber, Windows::Win32::IScsiDisc::ISCSI_LOGIN_OPTIONS* LoginOptions, uint64_t SecurityFlags, Windows::Win32::IScsiDisc::ISCSI_TARGET_PORTALW* Portal)
    {
        auto win32_impl_result = WIN32_IMPL_AddIScsiSendTargetPortalW(InitiatorInstance, InitiatorPortNumber, LoginOptions, SecurityFlags, Portal);
        return win32_impl_result;
    }
    inline uint32_t AddIScsiSendTargetPortalA(int8_t* InitiatorInstance, uint32_t InitiatorPortNumber, Windows::Win32::IScsiDisc::ISCSI_LOGIN_OPTIONS* LoginOptions, uint64_t SecurityFlags, Windows::Win32::IScsiDisc::ISCSI_TARGET_PORTALA* Portal)
    {
        auto win32_impl_result = WIN32_IMPL_AddIScsiSendTargetPortalA(InitiatorInstance, InitiatorPortNumber, LoginOptions, SecurityFlags, Portal);
        return win32_impl_result;
    }
    inline uint32_t RemoveIScsiSendTargetPortalW(uint16_t* InitiatorInstance, uint32_t InitiatorPortNumber, Windows::Win32::IScsiDisc::ISCSI_TARGET_PORTALW* Portal)
    {
        auto win32_impl_result = WIN32_IMPL_RemoveIScsiSendTargetPortalW(InitiatorInstance, InitiatorPortNumber, Portal);
        return win32_impl_result;
    }
    inline uint32_t RemoveIScsiSendTargetPortalA(int8_t* InitiatorInstance, uint32_t InitiatorPortNumber, Windows::Win32::IScsiDisc::ISCSI_TARGET_PORTALA* Portal)
    {
        auto win32_impl_result = WIN32_IMPL_RemoveIScsiSendTargetPortalA(InitiatorInstance, InitiatorPortNumber, Portal);
        return win32_impl_result;
    }
    inline uint32_t RefreshIScsiSendTargetPortalW(uint16_t* InitiatorInstance, uint32_t InitiatorPortNumber, Windows::Win32::IScsiDisc::ISCSI_TARGET_PORTALW* Portal)
    {
        auto win32_impl_result = WIN32_IMPL_RefreshIScsiSendTargetPortalW(InitiatorInstance, InitiatorPortNumber, Portal);
        return win32_impl_result;
    }
    inline uint32_t RefreshIScsiSendTargetPortalA(int8_t* InitiatorInstance, uint32_t InitiatorPortNumber, Windows::Win32::IScsiDisc::ISCSI_TARGET_PORTALA* Portal)
    {
        auto win32_impl_result = WIN32_IMPL_RefreshIScsiSendTargetPortalA(InitiatorInstance, InitiatorPortNumber, Portal);
        return win32_impl_result;
    }
    inline uint32_t ReportIScsiSendTargetPortalsW(uint32_t* PortalCount, Windows::Win32::IScsiDisc::ISCSI_TARGET_PORTAL_INFOW* PortalInfo)
    {
        auto win32_impl_result = WIN32_IMPL_ReportIScsiSendTargetPortalsW(PortalCount, PortalInfo);
        return win32_impl_result;
    }
    inline uint32_t ReportIScsiSendTargetPortalsA(uint32_t* PortalCount, Windows::Win32::IScsiDisc::ISCSI_TARGET_PORTAL_INFOA* PortalInfo)
    {
        auto win32_impl_result = WIN32_IMPL_ReportIScsiSendTargetPortalsA(PortalCount, PortalInfo);
        return win32_impl_result;
    }
    inline uint32_t ReportIScsiSendTargetPortalsExW(uint32_t* PortalCount, uint32_t* PortalInfoSize, Windows::Win32::IScsiDisc::ISCSI_TARGET_PORTAL_INFO_EXW* PortalInfo)
    {
        auto win32_impl_result = WIN32_IMPL_ReportIScsiSendTargetPortalsExW(PortalCount, PortalInfoSize, PortalInfo);
        return win32_impl_result;
    }
    inline uint32_t ReportIScsiSendTargetPortalsExA(uint32_t* PortalCount, uint32_t* PortalInfoSize, Windows::Win32::IScsiDisc::ISCSI_TARGET_PORTAL_INFO_EXA* PortalInfo)
    {
        auto win32_impl_result = WIN32_IMPL_ReportIScsiSendTargetPortalsExA(PortalCount, PortalInfoSize, PortalInfo);
        return win32_impl_result;
    }
    inline uint32_t LoginIScsiTargetW(uint16_t* TargetName, uint8_t IsInformationalSession, uint16_t* InitiatorInstance, uint32_t InitiatorPortNumber, Windows::Win32::IScsiDisc::ISCSI_TARGET_PORTALW* TargetPortal, uint64_t SecurityFlags, Windows::Win32::IScsiDisc::ISCSI_TARGET_MAPPINGW* Mappings, Windows::Win32::IScsiDisc::ISCSI_LOGIN_OPTIONS* LoginOptions, uint32_t KeySize, int8_t* Key, uint8_t IsPersistent, Windows::Win32::IScsiDisc::ISCSI_UNIQUE_SESSION_ID* UniqueSessionId, Windows::Win32::IScsiDisc::ISCSI_UNIQUE_SESSION_ID* UniqueConnectionId)
    {
        auto win32_impl_result = WIN32_IMPL_LoginIScsiTargetW(TargetName, IsInformationalSession, InitiatorInstance, InitiatorPortNumber, TargetPortal, SecurityFlags, Mappings, LoginOptions, KeySize, Key, IsPersistent, UniqueSessionId, UniqueConnectionId);
        return win32_impl_result;
    }
    inline uint32_t LoginIScsiTargetA(int8_t* TargetName, uint8_t IsInformationalSession, int8_t* InitiatorInstance, uint32_t InitiatorPortNumber, Windows::Win32::IScsiDisc::ISCSI_TARGET_PORTALA* TargetPortal, uint64_t SecurityFlags, Windows::Win32::IScsiDisc::ISCSI_TARGET_MAPPINGA* Mappings, Windows::Win32::IScsiDisc::ISCSI_LOGIN_OPTIONS* LoginOptions, uint32_t KeySize, int8_t* Key, uint8_t IsPersistent, Windows::Win32::IScsiDisc::ISCSI_UNIQUE_SESSION_ID* UniqueSessionId, Windows::Win32::IScsiDisc::ISCSI_UNIQUE_SESSION_ID* UniqueConnectionId)
    {
        auto win32_impl_result = WIN32_IMPL_LoginIScsiTargetA(TargetName, IsInformationalSession, InitiatorInstance, InitiatorPortNumber, TargetPortal, SecurityFlags, Mappings, LoginOptions, KeySize, Key, IsPersistent, UniqueSessionId, UniqueConnectionId);
        return win32_impl_result;
    }
    inline uint32_t ReportIScsiPersistentLoginsW(uint32_t* Count, Windows::Win32::IScsiDisc::PERSISTENT_ISCSI_LOGIN_INFOW* PersistentLoginInfo, uint32_t* BufferSizeInBytes)
    {
        auto win32_impl_result = WIN32_IMPL_ReportIScsiPersistentLoginsW(Count, PersistentLoginInfo, BufferSizeInBytes);
        return win32_impl_result;
    }
    inline uint32_t ReportIScsiPersistentLoginsA(uint32_t* Count, Windows::Win32::IScsiDisc::PERSISTENT_ISCSI_LOGIN_INFOA* PersistentLoginInfo, uint32_t* BufferSizeInBytes)
    {
        auto win32_impl_result = WIN32_IMPL_ReportIScsiPersistentLoginsA(Count, PersistentLoginInfo, BufferSizeInBytes);
        return win32_impl_result;
    }
    inline uint32_t LogoutIScsiTarget(Windows::Win32::IScsiDisc::ISCSI_UNIQUE_SESSION_ID* UniqueSessionId)
    {
        auto win32_impl_result = WIN32_IMPL_LogoutIScsiTarget(UniqueSessionId);
        return win32_impl_result;
    }
    inline uint32_t RemoveIScsiPersistentTargetW(uint16_t* InitiatorInstance, uint32_t InitiatorPortNumber, uint16_t* TargetName, Windows::Win32::IScsiDisc::ISCSI_TARGET_PORTALW* Portal)
    {
        auto win32_impl_result = WIN32_IMPL_RemoveIScsiPersistentTargetW(InitiatorInstance, InitiatorPortNumber, TargetName, Portal);
        return win32_impl_result;
    }
    inline uint32_t RemoveIScsiPersistentTargetA(int8_t* InitiatorInstance, uint32_t InitiatorPortNumber, int8_t* TargetName, Windows::Win32::IScsiDisc::ISCSI_TARGET_PORTALA* Portal)
    {
        auto win32_impl_result = WIN32_IMPL_RemoveIScsiPersistentTargetA(InitiatorInstance, InitiatorPortNumber, TargetName, Portal);
        return win32_impl_result;
    }
    inline uint32_t SendScsiInquiry(Windows::Win32::IScsiDisc::ISCSI_UNIQUE_SESSION_ID* UniqueSessionId, uint64_t Lun, uint8_t EvpdCmddt, uint8_t PageCode, uint8_t* ScsiStatus, uint32_t* ResponseSize, uint8_t* ResponseBuffer, uint32_t* SenseSize, uint8_t* SenseBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_SendScsiInquiry(UniqueSessionId, Lun, EvpdCmddt, PageCode, ScsiStatus, ResponseSize, ResponseBuffer, SenseSize, SenseBuffer);
        return win32_impl_result;
    }
    inline uint32_t SendScsiReadCapacity(Windows::Win32::IScsiDisc::ISCSI_UNIQUE_SESSION_ID* UniqueSessionId, uint64_t Lun, uint8_t* ScsiStatus, uint32_t* ResponseSize, uint8_t* ResponseBuffer, uint32_t* SenseSize, uint8_t* SenseBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_SendScsiReadCapacity(UniqueSessionId, Lun, ScsiStatus, ResponseSize, ResponseBuffer, SenseSize, SenseBuffer);
        return win32_impl_result;
    }
    inline uint32_t SendScsiReportLuns(Windows::Win32::IScsiDisc::ISCSI_UNIQUE_SESSION_ID* UniqueSessionId, uint8_t* ScsiStatus, uint32_t* ResponseSize, uint8_t* ResponseBuffer, uint32_t* SenseSize, uint8_t* SenseBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_SendScsiReportLuns(UniqueSessionId, ScsiStatus, ResponseSize, ResponseBuffer, SenseSize, SenseBuffer);
        return win32_impl_result;
    }
    inline uint32_t ReportIScsiInitiatorListW(uint32_t* BufferSize, uint16_t* Buffer)
    {
        auto win32_impl_result = WIN32_IMPL_ReportIScsiInitiatorListW(BufferSize, Buffer);
        return win32_impl_result;
    }
    inline uint32_t ReportIScsiInitiatorListA(uint32_t* BufferSize, int8_t* Buffer)
    {
        auto win32_impl_result = WIN32_IMPL_ReportIScsiInitiatorListA(BufferSize, Buffer);
        return win32_impl_result;
    }
    inline uint32_t ReportActiveIScsiTargetMappingsW(uint32_t* BufferSize, uint32_t* MappingCount, Windows::Win32::IScsiDisc::ISCSI_TARGET_MAPPINGW* Mappings)
    {
        auto win32_impl_result = WIN32_IMPL_ReportActiveIScsiTargetMappingsW(BufferSize, MappingCount, Mappings);
        return win32_impl_result;
    }
    inline uint32_t ReportActiveIScsiTargetMappingsA(uint32_t* BufferSize, uint32_t* MappingCount, Windows::Win32::IScsiDisc::ISCSI_TARGET_MAPPINGA* Mappings)
    {
        auto win32_impl_result = WIN32_IMPL_ReportActiveIScsiTargetMappingsA(BufferSize, MappingCount, Mappings);
        return win32_impl_result;
    }
    inline uint32_t SetIScsiTunnelModeOuterAddressW(uint16_t* InitiatorName, uint32_t InitiatorPortNumber, uint16_t* DestinationAddress, uint16_t* OuterModeAddress, uint8_t Persist)
    {
        auto win32_impl_result = WIN32_IMPL_SetIScsiTunnelModeOuterAddressW(InitiatorName, InitiatorPortNumber, DestinationAddress, OuterModeAddress, Persist);
        return win32_impl_result;
    }
    inline uint32_t SetIScsiTunnelModeOuterAddressA(int8_t* InitiatorName, uint32_t InitiatorPortNumber, int8_t* DestinationAddress, int8_t* OuterModeAddress, uint8_t Persist)
    {
        auto win32_impl_result = WIN32_IMPL_SetIScsiTunnelModeOuterAddressA(InitiatorName, InitiatorPortNumber, DestinationAddress, OuterModeAddress, Persist);
        return win32_impl_result;
    }
    inline uint32_t SetIScsiIKEInfoW(uint16_t* InitiatorName, uint32_t InitiatorPortNumber, Windows::Win32::IScsiDisc::IKE_AUTHENTICATION_INFORMATION* AuthInfo, uint8_t Persist)
    {
        auto win32_impl_result = WIN32_IMPL_SetIScsiIKEInfoW(InitiatorName, InitiatorPortNumber, AuthInfo, Persist);
        return win32_impl_result;
    }
    inline uint32_t SetIScsiIKEInfoA(int8_t* InitiatorName, uint32_t InitiatorPortNumber, Windows::Win32::IScsiDisc::IKE_AUTHENTICATION_INFORMATION* AuthInfo, uint8_t Persist)
    {
        auto win32_impl_result = WIN32_IMPL_SetIScsiIKEInfoA(InitiatorName, InitiatorPortNumber, AuthInfo, Persist);
        return win32_impl_result;
    }
    inline uint32_t GetIScsiIKEInfoW(uint16_t* InitiatorName, uint32_t InitiatorPortNumber, uint32_t* Reserved, Windows::Win32::IScsiDisc::IKE_AUTHENTICATION_INFORMATION* AuthInfo)
    {
        auto win32_impl_result = WIN32_IMPL_GetIScsiIKEInfoW(InitiatorName, InitiatorPortNumber, Reserved, AuthInfo);
        return win32_impl_result;
    }
    inline uint32_t GetIScsiIKEInfoA(int8_t* InitiatorName, uint32_t InitiatorPortNumber, uint32_t* Reserved, Windows::Win32::IScsiDisc::IKE_AUTHENTICATION_INFORMATION* AuthInfo)
    {
        auto win32_impl_result = WIN32_IMPL_GetIScsiIKEInfoA(InitiatorName, InitiatorPortNumber, Reserved, AuthInfo);
        return win32_impl_result;
    }
    inline uint32_t SetIScsiGroupPresharedKey(uint32_t KeyLength, uint8_t* Key, uint8_t Persist)
    {
        auto win32_impl_result = WIN32_IMPL_SetIScsiGroupPresharedKey(KeyLength, Key, Persist);
        return win32_impl_result;
    }
    inline uint32_t SetIScsiInitiatorCHAPSharedSecret(uint32_t SharedSecretLength, uint8_t* SharedSecret)
    {
        auto win32_impl_result = WIN32_IMPL_SetIScsiInitiatorCHAPSharedSecret(SharedSecretLength, SharedSecret);
        return win32_impl_result;
    }
    inline uint32_t SetIScsiInitiatorRADIUSSharedSecret(uint32_t SharedSecretLength, uint8_t* SharedSecret)
    {
        auto win32_impl_result = WIN32_IMPL_SetIScsiInitiatorRADIUSSharedSecret(SharedSecretLength, SharedSecret);
        return win32_impl_result;
    }
    inline uint32_t SetIScsiInitiatorNodeNameW(uint16_t* InitiatorNodeName)
    {
        auto win32_impl_result = WIN32_IMPL_SetIScsiInitiatorNodeNameW(InitiatorNodeName);
        return win32_impl_result;
    }
    inline uint32_t SetIScsiInitiatorNodeNameA(int8_t* InitiatorNodeName)
    {
        auto win32_impl_result = WIN32_IMPL_SetIScsiInitiatorNodeNameA(InitiatorNodeName);
        return win32_impl_result;
    }
    inline uint32_t GetIScsiInitiatorNodeNameW(uint16_t* InitiatorNodeName)
    {
        auto win32_impl_result = WIN32_IMPL_GetIScsiInitiatorNodeNameW(InitiatorNodeName);
        return win32_impl_result;
    }
    inline uint32_t GetIScsiInitiatorNodeNameA(int8_t* InitiatorNodeName)
    {
        auto win32_impl_result = WIN32_IMPL_GetIScsiInitiatorNodeNameA(InitiatorNodeName);
        return win32_impl_result;
    }
    inline uint32_t AddISNSServerW(uint16_t* Address)
    {
        auto win32_impl_result = WIN32_IMPL_AddISNSServerW(Address);
        return win32_impl_result;
    }
    inline uint32_t AddISNSServerA(int8_t* Address)
    {
        auto win32_impl_result = WIN32_IMPL_AddISNSServerA(Address);
        return win32_impl_result;
    }
    inline uint32_t RemoveISNSServerW(uint16_t* Address)
    {
        auto win32_impl_result = WIN32_IMPL_RemoveISNSServerW(Address);
        return win32_impl_result;
    }
    inline uint32_t RemoveISNSServerA(int8_t* Address)
    {
        auto win32_impl_result = WIN32_IMPL_RemoveISNSServerA(Address);
        return win32_impl_result;
    }
    inline uint32_t RefreshISNSServerW(uint16_t* Address)
    {
        auto win32_impl_result = WIN32_IMPL_RefreshISNSServerW(Address);
        return win32_impl_result;
    }
    inline uint32_t RefreshISNSServerA(int8_t* Address)
    {
        auto win32_impl_result = WIN32_IMPL_RefreshISNSServerA(Address);
        return win32_impl_result;
    }
    inline uint32_t ReportISNSServerListW(uint32_t* BufferSizeInChar, uint16_t* Buffer)
    {
        auto win32_impl_result = WIN32_IMPL_ReportISNSServerListW(BufferSizeInChar, Buffer);
        return win32_impl_result;
    }
    inline uint32_t ReportISNSServerListA(uint32_t* BufferSizeInChar, int8_t* Buffer)
    {
        auto win32_impl_result = WIN32_IMPL_ReportISNSServerListA(BufferSizeInChar, Buffer);
        return win32_impl_result;
    }
    inline uint32_t GetIScsiSessionListW(uint32_t* BufferSize, uint32_t* SessionCount, Windows::Win32::IScsiDisc::ISCSI_SESSION_INFOW* SessionInfo)
    {
        auto win32_impl_result = WIN32_IMPL_GetIScsiSessionListW(BufferSize, SessionCount, SessionInfo);
        return win32_impl_result;
    }
    inline uint32_t GetIScsiSessionListA(uint32_t* BufferSize, uint32_t* SessionCount, Windows::Win32::IScsiDisc::ISCSI_SESSION_INFOA* SessionInfo)
    {
        auto win32_impl_result = WIN32_IMPL_GetIScsiSessionListA(BufferSize, SessionCount, SessionInfo);
        return win32_impl_result;
    }
    inline uint32_t GetIScsiSessionListEx(uint32_t* BufferSize, uint32_t* SessionCountPtr, Windows::Win32::IScsiDisc::ISCSI_SESSION_INFO_EX* SessionInfo)
    {
        auto win32_impl_result = WIN32_IMPL_GetIScsiSessionListEx(BufferSize, SessionCountPtr, SessionInfo);
        return win32_impl_result;
    }
    inline uint32_t GetDevicesForIScsiSessionW(Windows::Win32::IScsiDisc::ISCSI_UNIQUE_SESSION_ID* UniqueSessionId, uint32_t* DeviceCount, Windows::Win32::IScsiDisc::ISCSI_DEVICE_ON_SESSIONW* Devices)
    {
        auto win32_impl_result = WIN32_IMPL_GetDevicesForIScsiSessionW(UniqueSessionId, DeviceCount, Devices);
        return win32_impl_result;
    }
    inline uint32_t GetDevicesForIScsiSessionA(Windows::Win32::IScsiDisc::ISCSI_UNIQUE_SESSION_ID* UniqueSessionId, uint32_t* DeviceCount, Windows::Win32::IScsiDisc::ISCSI_DEVICE_ON_SESSIONA* Devices)
    {
        auto win32_impl_result = WIN32_IMPL_GetDevicesForIScsiSessionA(UniqueSessionId, DeviceCount, Devices);
        return win32_impl_result;
    }
    inline uint32_t SetupPersistentIScsiVolumes()
    {
        auto win32_impl_result = WIN32_IMPL_SetupPersistentIScsiVolumes();
        return win32_impl_result;
    }
    inline uint32_t SetupPersistentIScsiDevices()
    {
        auto win32_impl_result = WIN32_IMPL_SetupPersistentIScsiDevices();
        return win32_impl_result;
    }
    inline uint32_t AddPersistentIScsiDeviceW(uint16_t* DevicePath)
    {
        auto win32_impl_result = WIN32_IMPL_AddPersistentIScsiDeviceW(DevicePath);
        return win32_impl_result;
    }
    inline uint32_t AddPersistentIScsiDeviceA(int8_t* DevicePath)
    {
        auto win32_impl_result = WIN32_IMPL_AddPersistentIScsiDeviceA(DevicePath);
        return win32_impl_result;
    }
    inline uint32_t RemovePersistentIScsiDeviceW(uint16_t* DevicePath)
    {
        auto win32_impl_result = WIN32_IMPL_RemovePersistentIScsiDeviceW(DevicePath);
        return win32_impl_result;
    }
    inline uint32_t RemovePersistentIScsiDeviceA(int8_t* DevicePath)
    {
        auto win32_impl_result = WIN32_IMPL_RemovePersistentIScsiDeviceA(DevicePath);
        return win32_impl_result;
    }
    inline uint32_t ClearPersistentIScsiDevices()
    {
        auto win32_impl_result = WIN32_IMPL_ClearPersistentIScsiDevices();
        return win32_impl_result;
    }
    inline uint32_t ReportPersistentIScsiDevicesW(uint32_t* BufferSizeInChar, uint16_t* Buffer)
    {
        auto win32_impl_result = WIN32_IMPL_ReportPersistentIScsiDevicesW(BufferSizeInChar, Buffer);
        return win32_impl_result;
    }
    inline uint32_t ReportPersistentIScsiDevicesA(uint32_t* BufferSizeInChar, int8_t* Buffer)
    {
        auto win32_impl_result = WIN32_IMPL_ReportPersistentIScsiDevicesA(BufferSizeInChar, Buffer);
        return win32_impl_result;
    }
    inline uint32_t ReportIScsiTargetPortalsW(uint16_t* InitiatorName, uint16_t* TargetName, uint16_t* TargetPortalTag, uint32_t* ElementCount, Windows::Win32::IScsiDisc::ISCSI_TARGET_PORTALW* Portals)
    {
        auto win32_impl_result = WIN32_IMPL_ReportIScsiTargetPortalsW(InitiatorName, TargetName, TargetPortalTag, ElementCount, Portals);
        return win32_impl_result;
    }
    inline uint32_t ReportIScsiTargetPortalsA(int8_t* InitiatorName, int8_t* TargetName, uint16_t* TargetPortalTag, uint32_t* ElementCount, Windows::Win32::IScsiDisc::ISCSI_TARGET_PORTALA* Portals)
    {
        auto win32_impl_result = WIN32_IMPL_ReportIScsiTargetPortalsA(InitiatorName, TargetName, TargetPortalTag, ElementCount, Portals);
        return win32_impl_result;
    }
    inline uint32_t AddRadiusServerW(uint16_t* Address)
    {
        auto win32_impl_result = WIN32_IMPL_AddRadiusServerW(Address);
        return win32_impl_result;
    }
    inline uint32_t AddRadiusServerA(int8_t* Address)
    {
        auto win32_impl_result = WIN32_IMPL_AddRadiusServerA(Address);
        return win32_impl_result;
    }
    inline uint32_t RemoveRadiusServerW(uint16_t* Address)
    {
        auto win32_impl_result = WIN32_IMPL_RemoveRadiusServerW(Address);
        return win32_impl_result;
    }
    inline uint32_t RemoveRadiusServerA(int8_t* Address)
    {
        auto win32_impl_result = WIN32_IMPL_RemoveRadiusServerA(Address);
        return win32_impl_result;
    }
    inline uint32_t ReportRadiusServerListW(uint32_t* BufferSizeInChar, uint16_t* Buffer)
    {
        auto win32_impl_result = WIN32_IMPL_ReportRadiusServerListW(BufferSizeInChar, Buffer);
        return win32_impl_result;
    }
    inline uint32_t ReportRadiusServerListA(uint32_t* BufferSizeInChar, int8_t* Buffer)
    {
        auto win32_impl_result = WIN32_IMPL_ReportRadiusServerListA(BufferSizeInChar, Buffer);
        return win32_impl_result;
    }

#pragma endregion methods

}
#endif
