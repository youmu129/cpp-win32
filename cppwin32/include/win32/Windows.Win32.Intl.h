// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Intl_H
#define WIN32_Windows_Win32_Intl_H
#include "win32/base.h"
static_assert(win32::check_version(CPPWIN32_VERSION, "0.0.0.1"), "Mismatched C++/Win32 headers.");
#define CPPWIN32_VERSION "0.0.0.1"
#include "win32/impl/Windows.Win32.Intl.2.h"
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
#pragma region methods
    inline int32_t GetTextCharset(Windows::Win32::Gdi::HDC hdc)
    {
        auto win32_impl_result = WIN32_IMPL_GetTextCharset(hdc);
        return win32_impl_result;
    }
    inline int32_t GetTextCharsetInfo(Windows::Win32::Gdi::HDC hdc, Windows::Win32::Intl::FONTSIGNATURE* lpSig, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_GetTextCharsetInfo(hdc, lpSig, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL TranslateCharsetInfo(uint32_t* lpSrc, Windows::Win32::Intl::CHARSETINFO* lpCs, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_TranslateCharsetInfo(lpSrc, lpCs, dwFlags);
        return win32_impl_result;
    }
    inline int32_t GetDateFormatA(uint32_t Locale, uint32_t dwFlags, Windows::Win32::WindowsProgramming::SYSTEMTIME* lpDate, int8_t* lpFormat, int8_t* lpDateStr, int32_t cchDate)
    {
        auto win32_impl_result = WIN32_IMPL_GetDateFormatA(Locale, dwFlags, lpDate, lpFormat, lpDateStr, cchDate);
        return win32_impl_result;
    }
    inline int32_t GetDateFormatW(uint32_t Locale, uint32_t dwFlags, Windows::Win32::WindowsProgramming::SYSTEMTIME* lpDate, uint16_t* lpFormat, uint16_t* lpDateStr, int32_t cchDate)
    {
        auto win32_impl_result = WIN32_IMPL_GetDateFormatW(Locale, dwFlags, lpDate, lpFormat, lpDateStr, cchDate);
        return win32_impl_result;
    }
    inline int32_t GetTimeFormatA(uint32_t Locale, uint32_t dwFlags, Windows::Win32::WindowsProgramming::SYSTEMTIME* lpTime, int8_t* lpFormat, int8_t* lpTimeStr, int32_t cchTime)
    {
        auto win32_impl_result = WIN32_IMPL_GetTimeFormatA(Locale, dwFlags, lpTime, lpFormat, lpTimeStr, cchTime);
        return win32_impl_result;
    }
    inline int32_t GetTimeFormatW(uint32_t Locale, uint32_t dwFlags, Windows::Win32::WindowsProgramming::SYSTEMTIME* lpTime, uint16_t* lpFormat, uint16_t* lpTimeStr, int32_t cchTime)
    {
        auto win32_impl_result = WIN32_IMPL_GetTimeFormatW(Locale, dwFlags, lpTime, lpFormat, lpTimeStr, cchTime);
        return win32_impl_result;
    }
    inline int32_t GetTimeFormatEx(uint16_t* lpLocaleName, uint32_t dwFlags, Windows::Win32::WindowsProgramming::SYSTEMTIME* lpTime, uint16_t* lpFormat, uint16_t* lpTimeStr, int32_t cchTime)
    {
        auto win32_impl_result = WIN32_IMPL_GetTimeFormatEx(lpLocaleName, dwFlags, lpTime, lpFormat, lpTimeStr, cchTime);
        return win32_impl_result;
    }
    inline int32_t GetDateFormatEx(uint16_t* lpLocaleName, uint32_t dwFlags, Windows::Win32::WindowsProgramming::SYSTEMTIME* lpDate, uint16_t* lpFormat, uint16_t* lpDateStr, int32_t cchDate, uint16_t* lpCalendar)
    {
        auto win32_impl_result = WIN32_IMPL_GetDateFormatEx(lpLocaleName, dwFlags, lpDate, lpFormat, lpDateStr, cchDate, lpCalendar);
        return win32_impl_result;
    }
    inline int32_t GetDurationFormatEx(uint16_t* lpLocaleName, uint32_t dwFlags, Windows::Win32::WindowsProgramming::SYSTEMTIME* lpDuration, uint64_t ullDuration, uint16_t* lpFormat, uint16_t* lpDurationStr, int32_t cchDuration)
    {
        auto win32_impl_result = WIN32_IMPL_GetDurationFormatEx(lpLocaleName, dwFlags, lpDuration, ullDuration, lpFormat, lpDurationStr, cchDuration);
        return win32_impl_result;
    }
    inline int32_t CompareStringEx(uint16_t* lpLocaleName, uint32_t dwCmpFlags, uint16_t* lpString1, int32_t cchCount1, uint16_t* lpString2, int32_t cchCount2, Windows::Win32::Intl::NLSVERSIONINFO* lpVersionInformation, void* lpReserved, Windows::Win32::WindowsAndMessaging::LPARAM lParam)
    {
        auto win32_impl_result = WIN32_IMPL_CompareStringEx(lpLocaleName, dwCmpFlags, lpString1, cchCount1, lpString2, cchCount2, lpVersionInformation, lpReserved, lParam);
        return win32_impl_result;
    }
    inline int32_t CompareStringOrdinal(uint16_t* lpString1, int32_t cchCount1, uint16_t* lpString2, int32_t cchCount2, Windows::Win32::SystemServices::BOOL bIgnoreCase)
    {
        auto win32_impl_result = WIN32_IMPL_CompareStringOrdinal(lpString1, cchCount1, lpString2, cchCount2, bIgnoreCase);
        return win32_impl_result;
    }
    inline int32_t CompareStringW(uint32_t Locale, uint32_t dwCmpFlags, uint16_t* lpString1, int32_t cchCount1, uint16_t* lpString2, int32_t cchCount2)
    {
        auto win32_impl_result = WIN32_IMPL_CompareStringW(Locale, dwCmpFlags, lpString1, cchCount1, lpString2, cchCount2);
        return win32_impl_result;
    }
    inline int32_t FoldStringW(uint32_t dwMapFlags, uint16_t* lpSrcStr, int32_t cchSrc, uint16_t* lpDestStr, int32_t cchDest)
    {
        auto win32_impl_result = WIN32_IMPL_FoldStringW(dwMapFlags, lpSrcStr, cchSrc, lpDestStr, cchDest);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetStringTypeExW(uint32_t Locale, uint32_t dwInfoType, uint16_t* lpSrcStr, int32_t cchSrc, uint16_t* lpCharType)
    {
        auto win32_impl_result = WIN32_IMPL_GetStringTypeExW(Locale, dwInfoType, lpSrcStr, cchSrc, lpCharType);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetStringTypeW(uint32_t dwInfoType, uint16_t* lpSrcStr, int32_t cchSrc, uint16_t* lpCharType)
    {
        auto win32_impl_result = WIN32_IMPL_GetStringTypeW(dwInfoType, lpSrcStr, cchSrc, lpCharType);
        return win32_impl_result;
    }
    inline int32_t MultiByteToWideChar(uint32_t CodePage, uint32_t dwFlags, int8_t* lpMultiByteStr, int32_t cbMultiByte, uint16_t* lpWideCharStr, int32_t cchWideChar)
    {
        auto win32_impl_result = WIN32_IMPL_MultiByteToWideChar(CodePage, dwFlags, lpMultiByteStr, cbMultiByte, lpWideCharStr, cchWideChar);
        return win32_impl_result;
    }
    inline int32_t WideCharToMultiByte(uint32_t CodePage, uint32_t dwFlags, uint16_t* lpWideCharStr, int32_t cchWideChar, int8_t* lpMultiByteStr, int32_t cbMultiByte, int8_t* lpDefaultChar, int32_t* lpUsedDefaultChar)
    {
        auto win32_impl_result = WIN32_IMPL_WideCharToMultiByte(CodePage, dwFlags, lpWideCharStr, cchWideChar, lpMultiByteStr, cbMultiByte, lpDefaultChar, lpUsedDefaultChar);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL IsValidCodePage(uint32_t CodePage)
    {
        auto win32_impl_result = WIN32_IMPL_IsValidCodePage(CodePage);
        return win32_impl_result;
    }
    inline uint32_t GetACP()
    {
        auto win32_impl_result = WIN32_IMPL_GetACP();
        return win32_impl_result;
    }
    inline uint32_t GetOEMCP()
    {
        auto win32_impl_result = WIN32_IMPL_GetOEMCP();
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetCPInfo(uint32_t CodePage, Windows::Win32::Intl::CPINFO* lpCPInfo)
    {
        auto win32_impl_result = WIN32_IMPL_GetCPInfo(CodePage, lpCPInfo);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetCPInfoExA(uint32_t CodePage, uint32_t dwFlags, Windows::Win32::Intl::CPINFOEXA* lpCPInfoEx)
    {
        auto win32_impl_result = WIN32_IMPL_GetCPInfoExA(CodePage, dwFlags, lpCPInfoEx);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetCPInfoExW(uint32_t CodePage, uint32_t dwFlags, Windows::Win32::Intl::CPINFOEXW* lpCPInfoEx)
    {
        auto win32_impl_result = WIN32_IMPL_GetCPInfoExW(CodePage, dwFlags, lpCPInfoEx);
        return win32_impl_result;
    }
    inline int32_t CompareStringA(uint32_t Locale, uint32_t dwCmpFlags, int8_t* lpString1, int32_t cchCount1, int8_t* lpString2, int32_t cchCount2)
    {
        auto win32_impl_result = WIN32_IMPL_CompareStringA(Locale, dwCmpFlags, lpString1, cchCount1, lpString2, cchCount2);
        return win32_impl_result;
    }
    inline int32_t FindNLSString(uint32_t Locale, uint32_t dwFindNLSStringFlags, uint16_t* lpStringSource, int32_t cchSource, uint16_t* lpStringValue, int32_t cchValue, int32_t* pcchFound)
    {
        auto win32_impl_result = WIN32_IMPL_FindNLSString(Locale, dwFindNLSStringFlags, lpStringSource, cchSource, lpStringValue, cchValue, pcchFound);
        return win32_impl_result;
    }
    inline int32_t LCMapStringW(uint32_t Locale, uint32_t dwMapFlags, uint16_t* lpSrcStr, int32_t cchSrc, uint16_t* lpDestStr, int32_t cchDest)
    {
        auto win32_impl_result = WIN32_IMPL_LCMapStringW(Locale, dwMapFlags, lpSrcStr, cchSrc, lpDestStr, cchDest);
        return win32_impl_result;
    }
    inline int32_t LCMapStringA(uint32_t Locale, uint32_t dwMapFlags, int8_t* lpSrcStr, int32_t cchSrc, int8_t* lpDestStr, int32_t cchDest)
    {
        auto win32_impl_result = WIN32_IMPL_LCMapStringA(Locale, dwMapFlags, lpSrcStr, cchSrc, lpDestStr, cchDest);
        return win32_impl_result;
    }
    inline int32_t GetLocaleInfoW(uint32_t Locale, uint32_t LCType, uint16_t* lpLCData, int32_t cchData)
    {
        auto win32_impl_result = WIN32_IMPL_GetLocaleInfoW(Locale, LCType, lpLCData, cchData);
        return win32_impl_result;
    }
    inline int32_t GetLocaleInfoA(uint32_t Locale, uint32_t LCType, int8_t* lpLCData, int32_t cchData)
    {
        auto win32_impl_result = WIN32_IMPL_GetLocaleInfoA(Locale, LCType, lpLCData, cchData);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SetLocaleInfoA(uint32_t Locale, uint32_t LCType, int8_t* lpLCData)
    {
        auto win32_impl_result = WIN32_IMPL_SetLocaleInfoA(Locale, LCType, lpLCData);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SetLocaleInfoW(uint32_t Locale, uint32_t LCType, uint16_t* lpLCData)
    {
        auto win32_impl_result = WIN32_IMPL_SetLocaleInfoW(Locale, LCType, lpLCData);
        return win32_impl_result;
    }
    inline int32_t GetCalendarInfoA(uint32_t Locale, uint32_t Calendar, uint32_t CalType, int8_t* lpCalData, int32_t cchData, uint32_t* lpValue)
    {
        auto win32_impl_result = WIN32_IMPL_GetCalendarInfoA(Locale, Calendar, CalType, lpCalData, cchData, lpValue);
        return win32_impl_result;
    }
    inline int32_t GetCalendarInfoW(uint32_t Locale, uint32_t Calendar, uint32_t CalType, uint16_t* lpCalData, int32_t cchData, uint32_t* lpValue)
    {
        auto win32_impl_result = WIN32_IMPL_GetCalendarInfoW(Locale, Calendar, CalType, lpCalData, cchData, lpValue);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SetCalendarInfoA(uint32_t Locale, uint32_t Calendar, uint32_t CalType, int8_t* lpCalData)
    {
        auto win32_impl_result = WIN32_IMPL_SetCalendarInfoA(Locale, Calendar, CalType, lpCalData);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SetCalendarInfoW(uint32_t Locale, uint32_t Calendar, uint32_t CalType, uint16_t* lpCalData)
    {
        auto win32_impl_result = WIN32_IMPL_SetCalendarInfoW(Locale, Calendar, CalType, lpCalData);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL IsDBCSLeadByte(uint8_t TestChar)
    {
        auto win32_impl_result = WIN32_IMPL_IsDBCSLeadByte(TestChar);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL IsDBCSLeadByteEx(uint32_t CodePage, uint8_t TestChar)
    {
        auto win32_impl_result = WIN32_IMPL_IsDBCSLeadByteEx(CodePage, TestChar);
        return win32_impl_result;
    }
    inline uint32_t LocaleNameToLCID(uint16_t* lpName, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_LocaleNameToLCID(lpName, dwFlags);
        return win32_impl_result;
    }
    inline int32_t LCIDToLocaleName(uint32_t Locale, uint16_t* lpName, int32_t cchName, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_LCIDToLocaleName(Locale, lpName, cchName, dwFlags);
        return win32_impl_result;
    }
    inline int32_t GetDurationFormat(uint32_t Locale, uint32_t dwFlags, Windows::Win32::WindowsProgramming::SYSTEMTIME* lpDuration, uint64_t ullDuration, uint16_t* lpFormat, uint16_t* lpDurationStr, int32_t cchDuration)
    {
        auto win32_impl_result = WIN32_IMPL_GetDurationFormat(Locale, dwFlags, lpDuration, ullDuration, lpFormat, lpDurationStr, cchDuration);
        return win32_impl_result;
    }
    inline int32_t GetNumberFormatA(uint32_t Locale, uint32_t dwFlags, int8_t* lpValue, Windows::Win32::Intl::NUMBERFMTA* lpFormat, int8_t* lpNumberStr, int32_t cchNumber)
    {
        auto win32_impl_result = WIN32_IMPL_GetNumberFormatA(Locale, dwFlags, lpValue, lpFormat, lpNumberStr, cchNumber);
        return win32_impl_result;
    }
    inline int32_t GetNumberFormatW(uint32_t Locale, uint32_t dwFlags, uint16_t* lpValue, Windows::Win32::Intl::NUMBERFMTW* lpFormat, uint16_t* lpNumberStr, int32_t cchNumber)
    {
        auto win32_impl_result = WIN32_IMPL_GetNumberFormatW(Locale, dwFlags, lpValue, lpFormat, lpNumberStr, cchNumber);
        return win32_impl_result;
    }
    inline int32_t GetCurrencyFormatA(uint32_t Locale, uint32_t dwFlags, int8_t* lpValue, Windows::Win32::Intl::CURRENCYFMTA* lpFormat, int8_t* lpCurrencyStr, int32_t cchCurrency)
    {
        auto win32_impl_result = WIN32_IMPL_GetCurrencyFormatA(Locale, dwFlags, lpValue, lpFormat, lpCurrencyStr, cchCurrency);
        return win32_impl_result;
    }
    inline int32_t GetCurrencyFormatW(uint32_t Locale, uint32_t dwFlags, uint16_t* lpValue, Windows::Win32::Intl::CURRENCYFMTW* lpFormat, uint16_t* lpCurrencyStr, int32_t cchCurrency)
    {
        auto win32_impl_result = WIN32_IMPL_GetCurrencyFormatW(Locale, dwFlags, lpValue, lpFormat, lpCurrencyStr, cchCurrency);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL EnumCalendarInfoA(Windows::Win32::Intl::CALINFO_ENUMPROCA* lpCalInfoEnumProc, uint32_t Locale, uint32_t Calendar, uint32_t CalType)
    {
        auto win32_impl_result = WIN32_IMPL_EnumCalendarInfoA(lpCalInfoEnumProc, Locale, Calendar, CalType);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL EnumCalendarInfoW(Windows::Win32::Intl::CALINFO_ENUMPROCW* lpCalInfoEnumProc, uint32_t Locale, uint32_t Calendar, uint32_t CalType)
    {
        auto win32_impl_result = WIN32_IMPL_EnumCalendarInfoW(lpCalInfoEnumProc, Locale, Calendar, CalType);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL EnumCalendarInfoExA(Windows::Win32::Intl::CALINFO_ENUMPROCEXA* lpCalInfoEnumProcEx, uint32_t Locale, uint32_t Calendar, uint32_t CalType)
    {
        auto win32_impl_result = WIN32_IMPL_EnumCalendarInfoExA(lpCalInfoEnumProcEx, Locale, Calendar, CalType);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL EnumCalendarInfoExW(Windows::Win32::Intl::CALINFO_ENUMPROCEXW* lpCalInfoEnumProcEx, uint32_t Locale, uint32_t Calendar, uint32_t CalType)
    {
        auto win32_impl_result = WIN32_IMPL_EnumCalendarInfoExW(lpCalInfoEnumProcEx, Locale, Calendar, CalType);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL EnumTimeFormatsA(Windows::Win32::Intl::TIMEFMT_ENUMPROCA* lpTimeFmtEnumProc, uint32_t Locale, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_EnumTimeFormatsA(lpTimeFmtEnumProc, Locale, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL EnumTimeFormatsW(Windows::Win32::Intl::TIMEFMT_ENUMPROCW* lpTimeFmtEnumProc, uint32_t Locale, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_EnumTimeFormatsW(lpTimeFmtEnumProc, Locale, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL EnumDateFormatsA(Windows::Win32::Intl::DATEFMT_ENUMPROCA* lpDateFmtEnumProc, uint32_t Locale, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_EnumDateFormatsA(lpDateFmtEnumProc, Locale, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL EnumDateFormatsW(Windows::Win32::Intl::DATEFMT_ENUMPROCW* lpDateFmtEnumProc, uint32_t Locale, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_EnumDateFormatsW(lpDateFmtEnumProc, Locale, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL EnumDateFormatsExA(Windows::Win32::Intl::DATEFMT_ENUMPROCEXA* lpDateFmtEnumProcEx, uint32_t Locale, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_EnumDateFormatsExA(lpDateFmtEnumProcEx, Locale, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL EnumDateFormatsExW(Windows::Win32::Intl::DATEFMT_ENUMPROCEXW* lpDateFmtEnumProcEx, uint32_t Locale, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_EnumDateFormatsExW(lpDateFmtEnumProcEx, Locale, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL IsValidLanguageGroup(uint32_t LanguageGroup, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_IsValidLanguageGroup(LanguageGroup, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetNLSVersion(uint32_t Function, uint32_t Locale, Windows::Win32::Intl::NLSVERSIONINFO* lpVersionInformation)
    {
        auto win32_impl_result = WIN32_IMPL_GetNLSVersion(Function, Locale, lpVersionInformation);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL IsValidLocale(uint32_t Locale, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_IsValidLocale(Locale, dwFlags);
        return win32_impl_result;
    }
    inline int32_t GetGeoInfoA(int32_t Location, uint32_t GeoType, int8_t* lpGeoData, int32_t cchData, uint16_t LangId)
    {
        auto win32_impl_result = WIN32_IMPL_GetGeoInfoA(Location, GeoType, lpGeoData, cchData, LangId);
        return win32_impl_result;
    }
    inline int32_t GetGeoInfoW(int32_t Location, uint32_t GeoType, uint16_t* lpGeoData, int32_t cchData, uint16_t LangId)
    {
        auto win32_impl_result = WIN32_IMPL_GetGeoInfoW(Location, GeoType, lpGeoData, cchData, LangId);
        return win32_impl_result;
    }
    inline int32_t GetGeoInfoEx(uint16_t* location, uint32_t geoType, uint16_t* geoData, int32_t geoDataCount)
    {
        auto win32_impl_result = WIN32_IMPL_GetGeoInfoEx(location, geoType, geoData, geoDataCount);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL EnumSystemGeoID(uint32_t GeoClass, int32_t ParentGeoId, Windows::Win32::Intl::GEO_ENUMPROC* lpGeoEnumProc)
    {
        auto win32_impl_result = WIN32_IMPL_EnumSystemGeoID(GeoClass, ParentGeoId, lpGeoEnumProc);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL EnumSystemGeoNames(uint32_t geoClass, Windows::Win32::Intl::GEO_ENUMNAMEPROC* geoEnumProc, Windows::Win32::WindowsAndMessaging::LPARAM data)
    {
        auto win32_impl_result = WIN32_IMPL_EnumSystemGeoNames(geoClass, geoEnumProc, data);
        return win32_impl_result;
    }
    inline int32_t GetUserGeoID(uint32_t GeoClass)
    {
        auto win32_impl_result = WIN32_IMPL_GetUserGeoID(GeoClass);
        return win32_impl_result;
    }
    inline int32_t GetUserDefaultGeoName(uint16_t* geoName, int32_t geoNameCount)
    {
        auto win32_impl_result = WIN32_IMPL_GetUserDefaultGeoName(geoName, geoNameCount);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SetUserGeoID(int32_t GeoId)
    {
        auto win32_impl_result = WIN32_IMPL_SetUserGeoID(GeoId);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SetUserGeoName(uint16_t* geoName)
    {
        auto win32_impl_result = WIN32_IMPL_SetUserGeoName(geoName);
        return win32_impl_result;
    }
    inline uint32_t ConvertDefaultLocale(uint32_t Locale)
    {
        auto win32_impl_result = WIN32_IMPL_ConvertDefaultLocale(Locale);
        return win32_impl_result;
    }
    inline uint16_t GetSystemDefaultUILanguage()
    {
        auto win32_impl_result = WIN32_IMPL_GetSystemDefaultUILanguage();
        return win32_impl_result;
    }
    inline uint32_t GetThreadLocale()
    {
        auto win32_impl_result = WIN32_IMPL_GetThreadLocale();
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SetThreadLocale(uint32_t Locale)
    {
        auto win32_impl_result = WIN32_IMPL_SetThreadLocale(Locale);
        return win32_impl_result;
    }
    inline uint16_t GetUserDefaultUILanguage()
    {
        auto win32_impl_result = WIN32_IMPL_GetUserDefaultUILanguage();
        return win32_impl_result;
    }
    inline uint16_t GetUserDefaultLangID()
    {
        auto win32_impl_result = WIN32_IMPL_GetUserDefaultLangID();
        return win32_impl_result;
    }
    inline uint16_t GetSystemDefaultLangID()
    {
        auto win32_impl_result = WIN32_IMPL_GetSystemDefaultLangID();
        return win32_impl_result;
    }
    inline uint32_t GetSystemDefaultLCID()
    {
        auto win32_impl_result = WIN32_IMPL_GetSystemDefaultLCID();
        return win32_impl_result;
    }
    inline uint32_t GetUserDefaultLCID()
    {
        auto win32_impl_result = WIN32_IMPL_GetUserDefaultLCID();
        return win32_impl_result;
    }
    inline uint16_t SetThreadUILanguage(uint16_t LangId)
    {
        auto win32_impl_result = WIN32_IMPL_SetThreadUILanguage(LangId);
        return win32_impl_result;
    }
    inline uint16_t GetThreadUILanguage()
    {
        auto win32_impl_result = WIN32_IMPL_GetThreadUILanguage();
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetProcessPreferredUILanguages(uint32_t dwFlags, uint32_t* pulNumLanguages, uint16_t* pwszLanguagesBuffer, uint32_t* pcchLanguagesBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_GetProcessPreferredUILanguages(dwFlags, pulNumLanguages, pwszLanguagesBuffer, pcchLanguagesBuffer);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SetProcessPreferredUILanguages(uint32_t dwFlags, uint16_t* pwszLanguagesBuffer, uint32_t* pulNumLanguages)
    {
        auto win32_impl_result = WIN32_IMPL_SetProcessPreferredUILanguages(dwFlags, pwszLanguagesBuffer, pulNumLanguages);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetUserPreferredUILanguages(uint32_t dwFlags, uint32_t* pulNumLanguages, uint16_t* pwszLanguagesBuffer, uint32_t* pcchLanguagesBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_GetUserPreferredUILanguages(dwFlags, pulNumLanguages, pwszLanguagesBuffer, pcchLanguagesBuffer);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetSystemPreferredUILanguages(uint32_t dwFlags, uint32_t* pulNumLanguages, uint16_t* pwszLanguagesBuffer, uint32_t* pcchLanguagesBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_GetSystemPreferredUILanguages(dwFlags, pulNumLanguages, pwszLanguagesBuffer, pcchLanguagesBuffer);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetThreadPreferredUILanguages(uint32_t dwFlags, uint32_t* pulNumLanguages, uint16_t* pwszLanguagesBuffer, uint32_t* pcchLanguagesBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_GetThreadPreferredUILanguages(dwFlags, pulNumLanguages, pwszLanguagesBuffer, pcchLanguagesBuffer);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SetThreadPreferredUILanguages(uint32_t dwFlags, uint16_t* pwszLanguagesBuffer, uint32_t* pulNumLanguages)
    {
        auto win32_impl_result = WIN32_IMPL_SetThreadPreferredUILanguages(dwFlags, pwszLanguagesBuffer, pulNumLanguages);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetFileMUIInfo(uint32_t dwFlags, uint16_t* pcwszFilePath, Windows::Win32::Intl::FILEMUIINFO* pFileMUIInfo, uint32_t* pcbFileMUIInfo)
    {
        auto win32_impl_result = WIN32_IMPL_GetFileMUIInfo(dwFlags, pcwszFilePath, pFileMUIInfo, pcbFileMUIInfo);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetFileMUIPath(uint32_t dwFlags, uint16_t* pcwszFilePath, uint16_t* pwszLanguage, uint32_t* pcchLanguage, uint16_t* pwszFileMUIPath, uint32_t* pcchFileMUIPath, uint64_t* pululEnumerator)
    {
        auto win32_impl_result = WIN32_IMPL_GetFileMUIPath(dwFlags, pcwszFilePath, pwszLanguage, pcchLanguage, pwszFileMUIPath, pcchFileMUIPath, pululEnumerator);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetUILanguageInfo(uint32_t dwFlags, uint16_t* pwmszLanguage, uint16_t* pwszFallbackLanguages, uint32_t* pcchFallbackLanguages, uint32_t* pAttributes)
    {
        auto win32_impl_result = WIN32_IMPL_GetUILanguageInfo(dwFlags, pwmszLanguage, pwszFallbackLanguages, pcchFallbackLanguages, pAttributes);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SetThreadPreferredUILanguages2(uint32_t flags, uint16_t* languages, uint32_t* numLanguagesSet, Windows::Win32::Intl::HSAVEDUILANGUAGES__** snapshot)
    {
        auto win32_impl_result = WIN32_IMPL_SetThreadPreferredUILanguages2(flags, languages, numLanguagesSet, snapshot);
        return win32_impl_result;
    }
    inline void RestoreThreadPreferredUILanguages(Windows::Win32::Intl::HSAVEDUILANGUAGES__* snapshot)
    {
        WIN32_IMPL_RestoreThreadPreferredUILanguages(snapshot);
    }
    inline Windows::Win32::SystemServices::BOOL NotifyUILanguageChange(uint32_t dwFlags, uint16_t* pcwstrNewLanguage, uint16_t* pcwstrPreviousLanguage, uint32_t dwReserved, uint32_t* pdwStatusRtrn)
    {
        auto win32_impl_result = WIN32_IMPL_NotifyUILanguageChange(dwFlags, pcwstrNewLanguage, pcwstrPreviousLanguage, dwReserved, pdwStatusRtrn);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetStringTypeExA(uint32_t Locale, uint32_t dwInfoType, int8_t* lpSrcStr, int32_t cchSrc, uint16_t* lpCharType)
    {
        auto win32_impl_result = WIN32_IMPL_GetStringTypeExA(Locale, dwInfoType, lpSrcStr, cchSrc, lpCharType);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetStringTypeA(uint32_t Locale, uint32_t dwInfoType, int8_t* lpSrcStr, int32_t cchSrc, uint16_t* lpCharType)
    {
        auto win32_impl_result = WIN32_IMPL_GetStringTypeA(Locale, dwInfoType, lpSrcStr, cchSrc, lpCharType);
        return win32_impl_result;
    }
    inline int32_t FoldStringA(uint32_t dwMapFlags, int8_t* lpSrcStr, int32_t cchSrc, int8_t* lpDestStr, int32_t cchDest)
    {
        auto win32_impl_result = WIN32_IMPL_FoldStringA(dwMapFlags, lpSrcStr, cchSrc, lpDestStr, cchDest);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL EnumSystemLocalesA(Windows::Win32::Intl::LOCALE_ENUMPROCA* lpLocaleEnumProc, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_EnumSystemLocalesA(lpLocaleEnumProc, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL EnumSystemLocalesW(Windows::Win32::Intl::LOCALE_ENUMPROCW* lpLocaleEnumProc, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_EnumSystemLocalesW(lpLocaleEnumProc, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL EnumSystemLanguageGroupsA(Windows::Win32::Intl::LANGUAGEGROUP_ENUMPROCA* lpLanguageGroupEnumProc, uint32_t dwFlags, intptr_t lParam)
    {
        auto win32_impl_result = WIN32_IMPL_EnumSystemLanguageGroupsA(lpLanguageGroupEnumProc, dwFlags, lParam);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL EnumSystemLanguageGroupsW(Windows::Win32::Intl::LANGUAGEGROUP_ENUMPROCW* lpLanguageGroupEnumProc, uint32_t dwFlags, intptr_t lParam)
    {
        auto win32_impl_result = WIN32_IMPL_EnumSystemLanguageGroupsW(lpLanguageGroupEnumProc, dwFlags, lParam);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL EnumLanguageGroupLocalesA(Windows::Win32::Intl::LANGGROUPLOCALE_ENUMPROCA* lpLangGroupLocaleEnumProc, uint32_t LanguageGroup, uint32_t dwFlags, intptr_t lParam)
    {
        auto win32_impl_result = WIN32_IMPL_EnumLanguageGroupLocalesA(lpLangGroupLocaleEnumProc, LanguageGroup, dwFlags, lParam);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL EnumLanguageGroupLocalesW(Windows::Win32::Intl::LANGGROUPLOCALE_ENUMPROCW* lpLangGroupLocaleEnumProc, uint32_t LanguageGroup, uint32_t dwFlags, intptr_t lParam)
    {
        auto win32_impl_result = WIN32_IMPL_EnumLanguageGroupLocalesW(lpLangGroupLocaleEnumProc, LanguageGroup, dwFlags, lParam);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL EnumUILanguagesA(Windows::Win32::Intl::UILANGUAGE_ENUMPROCA* lpUILanguageEnumProc, uint32_t dwFlags, intptr_t lParam)
    {
        auto win32_impl_result = WIN32_IMPL_EnumUILanguagesA(lpUILanguageEnumProc, dwFlags, lParam);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL EnumUILanguagesW(Windows::Win32::Intl::UILANGUAGE_ENUMPROCW* lpUILanguageEnumProc, uint32_t dwFlags, intptr_t lParam)
    {
        auto win32_impl_result = WIN32_IMPL_EnumUILanguagesW(lpUILanguageEnumProc, dwFlags, lParam);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL EnumSystemCodePagesA(Windows::Win32::Intl::CODEPAGE_ENUMPROCA* lpCodePageEnumProc, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_EnumSystemCodePagesA(lpCodePageEnumProc, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL EnumSystemCodePagesW(Windows::Win32::Intl::CODEPAGE_ENUMPROCW* lpCodePageEnumProc, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_EnumSystemCodePagesW(lpCodePageEnumProc, dwFlags);
        return win32_impl_result;
    }
    inline int32_t IdnToAscii(uint32_t dwFlags, uint16_t* lpUnicodeCharStr, int32_t cchUnicodeChar, uint16_t* lpASCIICharStr, int32_t cchASCIIChar)
    {
        auto win32_impl_result = WIN32_IMPL_IdnToAscii(dwFlags, lpUnicodeCharStr, cchUnicodeChar, lpASCIICharStr, cchASCIIChar);
        return win32_impl_result;
    }
    inline int32_t IdnToUnicode(uint32_t dwFlags, uint16_t* lpASCIICharStr, int32_t cchASCIIChar, uint16_t* lpUnicodeCharStr, int32_t cchUnicodeChar)
    {
        auto win32_impl_result = WIN32_IMPL_IdnToUnicode(dwFlags, lpASCIICharStr, cchASCIIChar, lpUnicodeCharStr, cchUnicodeChar);
        return win32_impl_result;
    }
    inline int32_t IdnToNameprepUnicode(uint32_t dwFlags, uint16_t* lpUnicodeCharStr, int32_t cchUnicodeChar, uint16_t* lpNameprepCharStr, int32_t cchNameprepChar)
    {
        auto win32_impl_result = WIN32_IMPL_IdnToNameprepUnicode(dwFlags, lpUnicodeCharStr, cchUnicodeChar, lpNameprepCharStr, cchNameprepChar);
        return win32_impl_result;
    }
    inline int32_t NormalizeString(Windows::Win32::Intl::NORM_FORM NormForm, uint16_t* lpSrcString, int32_t cwSrcLength, uint16_t* lpDstString, int32_t cwDstLength)
    {
        auto win32_impl_result = WIN32_IMPL_NormalizeString(NormForm, lpSrcString, cwSrcLength, lpDstString, cwDstLength);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL IsNormalizedString(Windows::Win32::Intl::NORM_FORM NormForm, uint16_t* lpString, int32_t cwLength)
    {
        auto win32_impl_result = WIN32_IMPL_IsNormalizedString(NormForm, lpString, cwLength);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL VerifyScripts(uint32_t dwFlags, uint16_t* lpLocaleScripts, int32_t cchLocaleScripts, uint16_t* lpTestScripts, int32_t cchTestScripts)
    {
        auto win32_impl_result = WIN32_IMPL_VerifyScripts(dwFlags, lpLocaleScripts, cchLocaleScripts, lpTestScripts, cchTestScripts);
        return win32_impl_result;
    }
    inline int32_t GetStringScripts(uint32_t dwFlags, uint16_t* lpString, int32_t cchString, uint16_t* lpScripts, int32_t cchScripts)
    {
        auto win32_impl_result = WIN32_IMPL_GetStringScripts(dwFlags, lpString, cchString, lpScripts, cchScripts);
        return win32_impl_result;
    }
    inline int32_t GetLocaleInfoEx(uint16_t* lpLocaleName, uint32_t LCType, uint16_t* lpLCData, int32_t cchData)
    {
        auto win32_impl_result = WIN32_IMPL_GetLocaleInfoEx(lpLocaleName, LCType, lpLCData, cchData);
        return win32_impl_result;
    }
    inline int32_t GetCalendarInfoEx(uint16_t* lpLocaleName, uint32_t Calendar, uint16_t* lpReserved, uint32_t CalType, uint16_t* lpCalData, int32_t cchData, uint32_t* lpValue)
    {
        auto win32_impl_result = WIN32_IMPL_GetCalendarInfoEx(lpLocaleName, Calendar, lpReserved, CalType, lpCalData, cchData, lpValue);
        return win32_impl_result;
    }
    inline int32_t GetNumberFormatEx(uint16_t* lpLocaleName, uint32_t dwFlags, uint16_t* lpValue, Windows::Win32::Intl::NUMBERFMTW* lpFormat, uint16_t* lpNumberStr, int32_t cchNumber)
    {
        auto win32_impl_result = WIN32_IMPL_GetNumberFormatEx(lpLocaleName, dwFlags, lpValue, lpFormat, lpNumberStr, cchNumber);
        return win32_impl_result;
    }
    inline int32_t GetCurrencyFormatEx(uint16_t* lpLocaleName, uint32_t dwFlags, uint16_t* lpValue, Windows::Win32::Intl::CURRENCYFMTW* lpFormat, uint16_t* lpCurrencyStr, int32_t cchCurrency)
    {
        auto win32_impl_result = WIN32_IMPL_GetCurrencyFormatEx(lpLocaleName, dwFlags, lpValue, lpFormat, lpCurrencyStr, cchCurrency);
        return win32_impl_result;
    }
    inline int32_t GetUserDefaultLocaleName(uint16_t* lpLocaleName, int32_t cchLocaleName)
    {
        auto win32_impl_result = WIN32_IMPL_GetUserDefaultLocaleName(lpLocaleName, cchLocaleName);
        return win32_impl_result;
    }
    inline int32_t GetSystemDefaultLocaleName(uint16_t* lpLocaleName, int32_t cchLocaleName)
    {
        auto win32_impl_result = WIN32_IMPL_GetSystemDefaultLocaleName(lpLocaleName, cchLocaleName);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL IsNLSDefinedString(uint32_t Function, uint32_t dwFlags, Windows::Win32::Intl::NLSVERSIONINFO* lpVersionInformation, uint16_t* lpString, int32_t cchStr)
    {
        auto win32_impl_result = WIN32_IMPL_IsNLSDefinedString(Function, dwFlags, lpVersionInformation, lpString, cchStr);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetNLSVersionEx(uint32_t function, uint16_t* lpLocaleName, Windows::Win32::Intl::NLSVERSIONINFOEX* lpVersionInformation)
    {
        auto win32_impl_result = WIN32_IMPL_GetNLSVersionEx(function, lpLocaleName, lpVersionInformation);
        return win32_impl_result;
    }
    inline uint32_t IsValidNLSVersion(uint32_t function, uint16_t* lpLocaleName, Windows::Win32::Intl::NLSVERSIONINFOEX* lpVersionInformation)
    {
        auto win32_impl_result = WIN32_IMPL_IsValidNLSVersion(function, lpLocaleName, lpVersionInformation);
        return win32_impl_result;
    }
    inline int32_t FindNLSStringEx(uint16_t* lpLocaleName, uint32_t dwFindNLSStringFlags, uint16_t* lpStringSource, int32_t cchSource, uint16_t* lpStringValue, int32_t cchValue, int32_t* pcchFound, Windows::Win32::Intl::NLSVERSIONINFO* lpVersionInformation, void* lpReserved, Windows::Win32::WindowsAndMessaging::LPARAM sortHandle)
    {
        auto win32_impl_result = WIN32_IMPL_FindNLSStringEx(lpLocaleName, dwFindNLSStringFlags, lpStringSource, cchSource, lpStringValue, cchValue, pcchFound, lpVersionInformation, lpReserved, sortHandle);
        return win32_impl_result;
    }
    inline int32_t LCMapStringEx(uint16_t* lpLocaleName, uint32_t dwMapFlags, uint16_t* lpSrcStr, int32_t cchSrc, uint16_t* lpDestStr, int32_t cchDest, Windows::Win32::Intl::NLSVERSIONINFO* lpVersionInformation, void* lpReserved, Windows::Win32::WindowsAndMessaging::LPARAM sortHandle)
    {
        auto win32_impl_result = WIN32_IMPL_LCMapStringEx(lpLocaleName, dwMapFlags, lpSrcStr, cchSrc, lpDestStr, cchDest, lpVersionInformation, lpReserved, sortHandle);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL IsValidLocaleName(uint16_t* lpLocaleName)
    {
        auto win32_impl_result = WIN32_IMPL_IsValidLocaleName(lpLocaleName);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL EnumCalendarInfoExEx(Windows::Win32::Intl::CALINFO_ENUMPROCEXEX* pCalInfoEnumProcExEx, uint16_t* lpLocaleName, uint32_t Calendar, uint16_t* lpReserved, uint32_t CalType, Windows::Win32::WindowsAndMessaging::LPARAM lParam)
    {
        auto win32_impl_result = WIN32_IMPL_EnumCalendarInfoExEx(pCalInfoEnumProcExEx, lpLocaleName, Calendar, lpReserved, CalType, lParam);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL EnumDateFormatsExEx(Windows::Win32::Intl::DATEFMT_ENUMPROCEXEX* lpDateFmtEnumProcExEx, uint16_t* lpLocaleName, uint32_t dwFlags, Windows::Win32::WindowsAndMessaging::LPARAM lParam)
    {
        auto win32_impl_result = WIN32_IMPL_EnumDateFormatsExEx(lpDateFmtEnumProcExEx, lpLocaleName, dwFlags, lParam);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL EnumTimeFormatsEx(Windows::Win32::Intl::TIMEFMT_ENUMPROCEX* lpTimeFmtEnumProcEx, uint16_t* lpLocaleName, uint32_t dwFlags, Windows::Win32::WindowsAndMessaging::LPARAM lParam)
    {
        auto win32_impl_result = WIN32_IMPL_EnumTimeFormatsEx(lpTimeFmtEnumProcEx, lpLocaleName, dwFlags, lParam);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL EnumSystemLocalesEx(Windows::Win32::Intl::LOCALE_ENUMPROCEX* lpLocaleEnumProcEx, uint32_t dwFlags, Windows::Win32::WindowsAndMessaging::LPARAM lParam, void* lpReserved)
    {
        auto win32_impl_result = WIN32_IMPL_EnumSystemLocalesEx(lpLocaleEnumProcEx, dwFlags, lParam, lpReserved);
        return win32_impl_result;
    }
    inline int32_t ResolveLocaleName(uint16_t* lpNameToResolve, uint16_t* lpLocaleName, int32_t cchLocaleName)
    {
        auto win32_impl_result = WIN32_IMPL_ResolveLocaleName(lpNameToResolve, lpLocaleName, cchLocaleName);
        return win32_impl_result;
    }
    inline intptr_t ImmInstallIMEA(int8_t* lpszIMEFileName, int8_t* lpszLayoutText)
    {
        auto win32_impl_result = WIN32_IMPL_ImmInstallIMEA(lpszIMEFileName, lpszLayoutText);
        return win32_impl_result;
    }
    inline intptr_t ImmInstallIMEW(uint16_t* lpszIMEFileName, uint16_t* lpszLayoutText)
    {
        auto win32_impl_result = WIN32_IMPL_ImmInstallIMEW(lpszIMEFileName, lpszLayoutText);
        return win32_impl_result;
    }
    inline Windows::Win32::WindowsAndMessaging::HWND ImmGetDefaultIMEWnd(Windows::Win32::WindowsAndMessaging::HWND param0)
    {
        auto win32_impl_result = WIN32_IMPL_ImmGetDefaultIMEWnd(param0);
        return win32_impl_result;
    }
    inline uint32_t ImmGetDescriptionA(intptr_t param0, int8_t* lpszDescription, uint32_t uBufLen)
    {
        auto win32_impl_result = WIN32_IMPL_ImmGetDescriptionA(param0, lpszDescription, uBufLen);
        return win32_impl_result;
    }
    inline uint32_t ImmGetDescriptionW(intptr_t param0, uint16_t* lpszDescription, uint32_t uBufLen)
    {
        auto win32_impl_result = WIN32_IMPL_ImmGetDescriptionW(param0, lpszDescription, uBufLen);
        return win32_impl_result;
    }
    inline uint32_t ImmGetIMEFileNameA(intptr_t param0, int8_t* lpszFileName, uint32_t uBufLen)
    {
        auto win32_impl_result = WIN32_IMPL_ImmGetIMEFileNameA(param0, lpszFileName, uBufLen);
        return win32_impl_result;
    }
    inline uint32_t ImmGetIMEFileNameW(intptr_t param0, uint16_t* lpszFileName, uint32_t uBufLen)
    {
        auto win32_impl_result = WIN32_IMPL_ImmGetIMEFileNameW(param0, lpszFileName, uBufLen);
        return win32_impl_result;
    }
    inline uint32_t ImmGetProperty(intptr_t param0, uint32_t param1)
    {
        auto win32_impl_result = WIN32_IMPL_ImmGetProperty(param0, param1);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ImmIsIME(intptr_t param0)
    {
        auto win32_impl_result = WIN32_IMPL_ImmIsIME(param0);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ImmSimulateHotKey(Windows::Win32::WindowsAndMessaging::HWND param0, uint32_t param1)
    {
        auto win32_impl_result = WIN32_IMPL_ImmSimulateHotKey(param0, param1);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::HIMC__* ImmCreateContext()
    {
        auto win32_impl_result = WIN32_IMPL_ImmCreateContext();
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ImmDestroyContext(Windows::Win32::Intl::HIMC__* param0)
    {
        auto win32_impl_result = WIN32_IMPL_ImmDestroyContext(param0);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::HIMC__* ImmGetContext(Windows::Win32::WindowsAndMessaging::HWND param0)
    {
        auto win32_impl_result = WIN32_IMPL_ImmGetContext(param0);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ImmReleaseContext(Windows::Win32::WindowsAndMessaging::HWND param0, Windows::Win32::Intl::HIMC__* param1)
    {
        auto win32_impl_result = WIN32_IMPL_ImmReleaseContext(param0, param1);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::HIMC__* ImmAssociateContext(Windows::Win32::WindowsAndMessaging::HWND param0, Windows::Win32::Intl::HIMC__* param1)
    {
        auto win32_impl_result = WIN32_IMPL_ImmAssociateContext(param0, param1);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ImmAssociateContextEx(Windows::Win32::WindowsAndMessaging::HWND param0, Windows::Win32::Intl::HIMC__* param1, uint32_t param2)
    {
        auto win32_impl_result = WIN32_IMPL_ImmAssociateContextEx(param0, param1, param2);
        return win32_impl_result;
    }
    inline int32_t ImmGetCompositionStringA(Windows::Win32::Intl::HIMC__* param0, uint32_t param1, void* lpBuf, uint32_t dwBufLen)
    {
        auto win32_impl_result = WIN32_IMPL_ImmGetCompositionStringA(param0, param1, lpBuf, dwBufLen);
        return win32_impl_result;
    }
    inline int32_t ImmGetCompositionStringW(Windows::Win32::Intl::HIMC__* param0, uint32_t param1, void* lpBuf, uint32_t dwBufLen)
    {
        auto win32_impl_result = WIN32_IMPL_ImmGetCompositionStringW(param0, param1, lpBuf, dwBufLen);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ImmSetCompositionStringA(Windows::Win32::Intl::HIMC__* param0, uint32_t dwIndex, void* lpComp, uint32_t dwCompLen, void* lpRead, uint32_t dwReadLen)
    {
        auto win32_impl_result = WIN32_IMPL_ImmSetCompositionStringA(param0, dwIndex, lpComp, dwCompLen, lpRead, dwReadLen);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ImmSetCompositionStringW(Windows::Win32::Intl::HIMC__* param0, uint32_t dwIndex, void* lpComp, uint32_t dwCompLen, void* lpRead, uint32_t dwReadLen)
    {
        auto win32_impl_result = WIN32_IMPL_ImmSetCompositionStringW(param0, dwIndex, lpComp, dwCompLen, lpRead, dwReadLen);
        return win32_impl_result;
    }
    inline uint32_t ImmGetCandidateListCountA(Windows::Win32::Intl::HIMC__* param0, uint32_t* lpdwListCount)
    {
        auto win32_impl_result = WIN32_IMPL_ImmGetCandidateListCountA(param0, lpdwListCount);
        return win32_impl_result;
    }
    inline uint32_t ImmGetCandidateListCountW(Windows::Win32::Intl::HIMC__* param0, uint32_t* lpdwListCount)
    {
        auto win32_impl_result = WIN32_IMPL_ImmGetCandidateListCountW(param0, lpdwListCount);
        return win32_impl_result;
    }
    inline uint32_t ImmGetCandidateListA(Windows::Win32::Intl::HIMC__* param0, uint32_t deIndex, Windows::Win32::Intl::CANDIDATELIST* lpCandList, uint32_t dwBufLen)
    {
        auto win32_impl_result = WIN32_IMPL_ImmGetCandidateListA(param0, deIndex, lpCandList, dwBufLen);
        return win32_impl_result;
    }
    inline uint32_t ImmGetCandidateListW(Windows::Win32::Intl::HIMC__* param0, uint32_t deIndex, Windows::Win32::Intl::CANDIDATELIST* lpCandList, uint32_t dwBufLen)
    {
        auto win32_impl_result = WIN32_IMPL_ImmGetCandidateListW(param0, deIndex, lpCandList, dwBufLen);
        return win32_impl_result;
    }
    inline uint32_t ImmGetGuideLineA(Windows::Win32::Intl::HIMC__* param0, uint32_t dwIndex, int8_t* lpBuf, uint32_t dwBufLen)
    {
        auto win32_impl_result = WIN32_IMPL_ImmGetGuideLineA(param0, dwIndex, lpBuf, dwBufLen);
        return win32_impl_result;
    }
    inline uint32_t ImmGetGuideLineW(Windows::Win32::Intl::HIMC__* param0, uint32_t dwIndex, uint16_t* lpBuf, uint32_t dwBufLen)
    {
        auto win32_impl_result = WIN32_IMPL_ImmGetGuideLineW(param0, dwIndex, lpBuf, dwBufLen);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ImmGetConversionStatus(Windows::Win32::Intl::HIMC__* param0, uint32_t* lpfdwConversion, uint32_t* lpfdwSentence)
    {
        auto win32_impl_result = WIN32_IMPL_ImmGetConversionStatus(param0, lpfdwConversion, lpfdwSentence);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ImmSetConversionStatus(Windows::Win32::Intl::HIMC__* param0, uint32_t param1, uint32_t param2)
    {
        auto win32_impl_result = WIN32_IMPL_ImmSetConversionStatus(param0, param1, param2);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ImmGetOpenStatus(Windows::Win32::Intl::HIMC__* param0)
    {
        auto win32_impl_result = WIN32_IMPL_ImmGetOpenStatus(param0);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ImmSetOpenStatus(Windows::Win32::Intl::HIMC__* param0, Windows::Win32::SystemServices::BOOL param1)
    {
        auto win32_impl_result = WIN32_IMPL_ImmSetOpenStatus(param0, param1);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ImmGetCompositionFontA(Windows::Win32::Intl::HIMC__* param0, Windows::Win32::Shell::LOGFONTA* lplf)
    {
        auto win32_impl_result = WIN32_IMPL_ImmGetCompositionFontA(param0, lplf);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ImmGetCompositionFontW(Windows::Win32::Intl::HIMC__* param0, Windows::Win32::Shell::LOGFONTW* lplf)
    {
        auto win32_impl_result = WIN32_IMPL_ImmGetCompositionFontW(param0, lplf);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ImmSetCompositionFontA(Windows::Win32::Intl::HIMC__* param0, Windows::Win32::Shell::LOGFONTA* lplf)
    {
        auto win32_impl_result = WIN32_IMPL_ImmSetCompositionFontA(param0, lplf);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ImmSetCompositionFontW(Windows::Win32::Intl::HIMC__* param0, Windows::Win32::Shell::LOGFONTW* lplf)
    {
        auto win32_impl_result = WIN32_IMPL_ImmSetCompositionFontW(param0, lplf);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ImmConfigureIMEA(intptr_t param0, Windows::Win32::WindowsAndMessaging::HWND param1, uint32_t param2, void* param3)
    {
        auto win32_impl_result = WIN32_IMPL_ImmConfigureIMEA(param0, param1, param2, param3);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ImmConfigureIMEW(intptr_t param0, Windows::Win32::WindowsAndMessaging::HWND param1, uint32_t param2, void* param3)
    {
        auto win32_impl_result = WIN32_IMPL_ImmConfigureIMEW(param0, param1, param2, param3);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::LRESULT ImmEscapeA(intptr_t param0, Windows::Win32::Intl::HIMC__* param1, uint32_t param2, void* param3)
    {
        auto win32_impl_result = WIN32_IMPL_ImmEscapeA(param0, param1, param2, param3);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::LRESULT ImmEscapeW(intptr_t param0, Windows::Win32::Intl::HIMC__* param1, uint32_t param2, void* param3)
    {
        auto win32_impl_result = WIN32_IMPL_ImmEscapeW(param0, param1, param2, param3);
        return win32_impl_result;
    }
    inline uint32_t ImmGetConversionListA(intptr_t param0, Windows::Win32::Intl::HIMC__* param1, int8_t* lpSrc, Windows::Win32::Intl::CANDIDATELIST* lpDst, uint32_t dwBufLen, uint32_t uFlag)
    {
        auto win32_impl_result = WIN32_IMPL_ImmGetConversionListA(param0, param1, lpSrc, lpDst, dwBufLen, uFlag);
        return win32_impl_result;
    }
    inline uint32_t ImmGetConversionListW(intptr_t param0, Windows::Win32::Intl::HIMC__* param1, uint16_t* lpSrc, Windows::Win32::Intl::CANDIDATELIST* lpDst, uint32_t dwBufLen, uint32_t uFlag)
    {
        auto win32_impl_result = WIN32_IMPL_ImmGetConversionListW(param0, param1, lpSrc, lpDst, dwBufLen, uFlag);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ImmNotifyIME(Windows::Win32::Intl::HIMC__* param0, uint32_t dwAction, uint32_t dwIndex, uint32_t dwValue)
    {
        auto win32_impl_result = WIN32_IMPL_ImmNotifyIME(param0, dwAction, dwIndex, dwValue);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ImmGetStatusWindowPos(Windows::Win32::Intl::HIMC__* param0, Windows::Win32::DisplayDevices::POINT* lpptPos)
    {
        auto win32_impl_result = WIN32_IMPL_ImmGetStatusWindowPos(param0, lpptPos);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ImmSetStatusWindowPos(Windows::Win32::Intl::HIMC__* param0, Windows::Win32::DisplayDevices::POINT* lpptPos)
    {
        auto win32_impl_result = WIN32_IMPL_ImmSetStatusWindowPos(param0, lpptPos);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ImmGetCompositionWindow(Windows::Win32::Intl::HIMC__* param0, Windows::Win32::Intl::COMPOSITIONFORM* lpCompForm)
    {
        auto win32_impl_result = WIN32_IMPL_ImmGetCompositionWindow(param0, lpCompForm);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ImmSetCompositionWindow(Windows::Win32::Intl::HIMC__* param0, Windows::Win32::Intl::COMPOSITIONFORM* lpCompForm)
    {
        auto win32_impl_result = WIN32_IMPL_ImmSetCompositionWindow(param0, lpCompForm);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ImmGetCandidateWindow(Windows::Win32::Intl::HIMC__* param0, uint32_t param1, Windows::Win32::Intl::CANDIDATEFORM* lpCandidate)
    {
        auto win32_impl_result = WIN32_IMPL_ImmGetCandidateWindow(param0, param1, lpCandidate);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ImmSetCandidateWindow(Windows::Win32::Intl::HIMC__* param0, Windows::Win32::Intl::CANDIDATEFORM* lpCandidate)
    {
        auto win32_impl_result = WIN32_IMPL_ImmSetCandidateWindow(param0, lpCandidate);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ImmIsUIMessageA(Windows::Win32::WindowsAndMessaging::HWND param0, uint32_t param1, Windows::Win32::WindowsAndMessaging::WPARAM param2, Windows::Win32::WindowsAndMessaging::LPARAM param3)
    {
        auto win32_impl_result = WIN32_IMPL_ImmIsUIMessageA(param0, param1, param2, param3);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ImmIsUIMessageW(Windows::Win32::WindowsAndMessaging::HWND param0, uint32_t param1, Windows::Win32::WindowsAndMessaging::WPARAM param2, Windows::Win32::WindowsAndMessaging::LPARAM param3)
    {
        auto win32_impl_result = WIN32_IMPL_ImmIsUIMessageW(param0, param1, param2, param3);
        return win32_impl_result;
    }
    inline uint32_t ImmGetVirtualKey(Windows::Win32::WindowsAndMessaging::HWND param0)
    {
        auto win32_impl_result = WIN32_IMPL_ImmGetVirtualKey(param0);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ImmRegisterWordA(intptr_t param0, int8_t* lpszReading, uint32_t param2, int8_t* lpszRegister)
    {
        auto win32_impl_result = WIN32_IMPL_ImmRegisterWordA(param0, lpszReading, param2, lpszRegister);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ImmRegisterWordW(intptr_t param0, uint16_t* lpszReading, uint32_t param2, uint16_t* lpszRegister)
    {
        auto win32_impl_result = WIN32_IMPL_ImmRegisterWordW(param0, lpszReading, param2, lpszRegister);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ImmUnregisterWordA(intptr_t param0, int8_t* lpszReading, uint32_t param2, int8_t* lpszUnregister)
    {
        auto win32_impl_result = WIN32_IMPL_ImmUnregisterWordA(param0, lpszReading, param2, lpszUnregister);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ImmUnregisterWordW(intptr_t param0, uint16_t* lpszReading, uint32_t param2, uint16_t* lpszUnregister)
    {
        auto win32_impl_result = WIN32_IMPL_ImmUnregisterWordW(param0, lpszReading, param2, lpszUnregister);
        return win32_impl_result;
    }
    inline uint32_t ImmGetRegisterWordStyleA(intptr_t param0, uint32_t nItem, Windows::Win32::Intl::STYLEBUFA* lpStyleBuf)
    {
        auto win32_impl_result = WIN32_IMPL_ImmGetRegisterWordStyleA(param0, nItem, lpStyleBuf);
        return win32_impl_result;
    }
    inline uint32_t ImmGetRegisterWordStyleW(intptr_t param0, uint32_t nItem, Windows::Win32::Intl::STYLEBUFW* lpStyleBuf)
    {
        auto win32_impl_result = WIN32_IMPL_ImmGetRegisterWordStyleW(param0, nItem, lpStyleBuf);
        return win32_impl_result;
    }
    inline uint32_t ImmEnumRegisterWordA(intptr_t param0, Windows::Win32::Intl::REGISTERWORDENUMPROCA* param1, int8_t* lpszReading, uint32_t param3, int8_t* lpszRegister, void* param5)
    {
        auto win32_impl_result = WIN32_IMPL_ImmEnumRegisterWordA(param0, param1, lpszReading, param3, lpszRegister, param5);
        return win32_impl_result;
    }
    inline uint32_t ImmEnumRegisterWordW(intptr_t param0, Windows::Win32::Intl::REGISTERWORDENUMPROCW* param1, uint16_t* lpszReading, uint32_t param3, uint16_t* lpszRegister, void* param5)
    {
        auto win32_impl_result = WIN32_IMPL_ImmEnumRegisterWordW(param0, param1, lpszReading, param3, lpszRegister, param5);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ImmDisableIME(uint32_t param0)
    {
        auto win32_impl_result = WIN32_IMPL_ImmDisableIME(param0);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ImmEnumInputContext(uint32_t idThread, Windows::Win32::Intl::IMCENUMPROC* lpfn, Windows::Win32::WindowsAndMessaging::LPARAM lParam)
    {
        auto win32_impl_result = WIN32_IMPL_ImmEnumInputContext(idThread, lpfn, lParam);
        return win32_impl_result;
    }
    inline uint32_t ImmGetImeMenuItemsA(Windows::Win32::Intl::HIMC__* param0, uint32_t param1, uint32_t param2, Windows::Win32::Intl::IMEMENUITEMINFOA* lpImeParentMenu, Windows::Win32::Intl::IMEMENUITEMINFOA* lpImeMenu, uint32_t dwSize)
    {
        auto win32_impl_result = WIN32_IMPL_ImmGetImeMenuItemsA(param0, param1, param2, lpImeParentMenu, lpImeMenu, dwSize);
        return win32_impl_result;
    }
    inline uint32_t ImmGetImeMenuItemsW(Windows::Win32::Intl::HIMC__* param0, uint32_t param1, uint32_t param2, Windows::Win32::Intl::IMEMENUITEMINFOW* lpImeParentMenu, Windows::Win32::Intl::IMEMENUITEMINFOW* lpImeMenu, uint32_t dwSize)
    {
        auto win32_impl_result = WIN32_IMPL_ImmGetImeMenuItemsW(param0, param1, param2, lpImeParentMenu, lpImeMenu, dwSize);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ImmDisableTextFrameService(uint32_t idThread)
    {
        auto win32_impl_result = WIN32_IMPL_ImmDisableTextFrameService(idThread);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ImmDisableLegacyIME()
    {
        auto win32_impl_result = WIN32_IMPL_ImmDisableLegacyIME();
        return win32_impl_result;
    }
    inline int32_t MappingGetServices(Windows::Win32::Intl::MAPPING_ENUM_OPTIONS* pOptions, Windows::Win32::Intl::MAPPING_SERVICE_INFO** prgServices, uint32_t* pdwServicesCount)
    {
        auto win32_impl_result = WIN32_IMPL_MappingGetServices(pOptions, prgServices, pdwServicesCount);
        return win32_impl_result;
    }
    inline int32_t MappingFreeServices(Windows::Win32::Intl::MAPPING_SERVICE_INFO* pServiceInfo)
    {
        auto win32_impl_result = WIN32_IMPL_MappingFreeServices(pServiceInfo);
        return win32_impl_result;
    }
    inline int32_t MappingRecognizeText(Windows::Win32::Intl::MAPPING_SERVICE_INFO* pServiceInfo, uint16_t* pszText, uint32_t dwLength, uint32_t dwIndex, Windows::Win32::Intl::MAPPING_OPTIONS* pOptions, Windows::Win32::Intl::MAPPING_PROPERTY_BAG* pbag)
    {
        auto win32_impl_result = WIN32_IMPL_MappingRecognizeText(pServiceInfo, pszText, dwLength, dwIndex, pOptions, pbag);
        return win32_impl_result;
    }
    inline int32_t MappingDoAction(Windows::Win32::Intl::MAPPING_PROPERTY_BAG* pBag, uint32_t dwRangeIndex, uint16_t* pszActionId)
    {
        auto win32_impl_result = WIN32_IMPL_MappingDoAction(pBag, dwRangeIndex, pszActionId);
        return win32_impl_result;
    }
    inline int32_t MappingFreePropertyBag(Windows::Win32::Intl::MAPPING_PROPERTY_BAG* pBag)
    {
        auto win32_impl_result = WIN32_IMPL_MappingFreePropertyBag(pBag);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ImmGetHotKey(uint32_t param0, uint32_t* lpuModifiers, uint32_t* lpuVKey, intptr_t* phKL)
    {
        auto win32_impl_result = WIN32_IMPL_ImmGetHotKey(param0, lpuModifiers, lpuVKey, phKL);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ImmSetHotKey(uint32_t param0, uint32_t param1, uint32_t param2, intptr_t param3)
    {
        auto win32_impl_result = WIN32_IMPL_ImmSetHotKey(param0, param1, param2, param3);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ImmGenerateMessage(Windows::Win32::Intl::HIMC__* param0)
    {
        auto win32_impl_result = WIN32_IMPL_ImmGenerateMessage(param0);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::LRESULT ImmRequestMessageA(Windows::Win32::Intl::HIMC__* param0, Windows::Win32::WindowsAndMessaging::WPARAM param1, Windows::Win32::WindowsAndMessaging::LPARAM param2)
    {
        auto win32_impl_result = WIN32_IMPL_ImmRequestMessageA(param0, param1, param2);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::LRESULT ImmRequestMessageW(Windows::Win32::Intl::HIMC__* param0, Windows::Win32::WindowsAndMessaging::WPARAM param1, Windows::Win32::WindowsAndMessaging::LPARAM param2)
    {
        auto win32_impl_result = WIN32_IMPL_ImmRequestMessageW(param0, param1, param2);
        return win32_impl_result;
    }
    inline Windows::Win32::WindowsAndMessaging::HWND ImmCreateSoftKeyboard(uint32_t param0, Windows::Win32::WindowsAndMessaging::HWND param1, int32_t param2, int32_t param3)
    {
        auto win32_impl_result = WIN32_IMPL_ImmCreateSoftKeyboard(param0, param1, param2, param3);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ImmDestroySoftKeyboard(Windows::Win32::WindowsAndMessaging::HWND param0)
    {
        auto win32_impl_result = WIN32_IMPL_ImmDestroySoftKeyboard(param0);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ImmShowSoftKeyboard(Windows::Win32::WindowsAndMessaging::HWND param0, int32_t param1)
    {
        auto win32_impl_result = WIN32_IMPL_ImmShowSoftKeyboard(param0, param1);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::INPUTCONTEXT* ImmLockIMC(Windows::Win32::Intl::HIMC__* param0)
    {
        auto win32_impl_result = WIN32_IMPL_ImmLockIMC(param0);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ImmUnlockIMC(Windows::Win32::Intl::HIMC__* param0)
    {
        auto win32_impl_result = WIN32_IMPL_ImmUnlockIMC(param0);
        return win32_impl_result;
    }
    inline uint32_t ImmGetIMCLockCount(Windows::Win32::Intl::HIMC__* param0)
    {
        auto win32_impl_result = WIN32_IMPL_ImmGetIMCLockCount(param0);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::HIMCC__* ImmCreateIMCC(uint32_t param0)
    {
        auto win32_impl_result = WIN32_IMPL_ImmCreateIMCC(param0);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::HIMCC__* ImmDestroyIMCC(Windows::Win32::Intl::HIMCC__* param0)
    {
        auto win32_impl_result = WIN32_IMPL_ImmDestroyIMCC(param0);
        return win32_impl_result;
    }
    inline void* ImmLockIMCC(Windows::Win32::Intl::HIMCC__* param0)
    {
        auto win32_impl_result = WIN32_IMPL_ImmLockIMCC(param0);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ImmUnlockIMCC(Windows::Win32::Intl::HIMCC__* param0)
    {
        auto win32_impl_result = WIN32_IMPL_ImmUnlockIMCC(param0);
        return win32_impl_result;
    }
    inline uint32_t ImmGetIMCCLockCount(Windows::Win32::Intl::HIMCC__* param0)
    {
        auto win32_impl_result = WIN32_IMPL_ImmGetIMCCLockCount(param0);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::HIMCC__* ImmReSizeIMCC(Windows::Win32::Intl::HIMCC__* param0, uint32_t param1)
    {
        auto win32_impl_result = WIN32_IMPL_ImmReSizeIMCC(param0, param1);
        return win32_impl_result;
    }
    inline uint32_t ImmGetIMCCSize(Windows::Win32::Intl::HIMCC__* param0)
    {
        auto win32_impl_result = WIN32_IMPL_ImmGetIMCCSize(param0);
        return win32_impl_result;
    }
    inline int32_t ScriptFreeCache(void** psc)
    {
        auto win32_impl_result = WIN32_IMPL_ScriptFreeCache(psc);
        return win32_impl_result;
    }
    inline int32_t ScriptItemize(uint16_t* pwcInChars, int32_t cInChars, int32_t cMaxItems, Windows::Win32::Intl::SCRIPT_CONTROL* psControl, Windows::Win32::Intl::SCRIPT_STATE* psState, Windows::Win32::Intl::SCRIPT_ITEM* pItems, int32_t* pcItems)
    {
        auto win32_impl_result = WIN32_IMPL_ScriptItemize(pwcInChars, cInChars, cMaxItems, psControl, psState, pItems, pcItems);
        return win32_impl_result;
    }
    inline int32_t ScriptLayout(int32_t cRuns, uint8_t* pbLevel, int32_t* piVisualToLogical, int32_t* piLogicalToVisual)
    {
        auto win32_impl_result = WIN32_IMPL_ScriptLayout(cRuns, pbLevel, piVisualToLogical, piLogicalToVisual);
        return win32_impl_result;
    }
    inline int32_t ScriptShape(Windows::Win32::Gdi::HDC hdc, void** psc, uint16_t* pwcChars, int32_t cChars, int32_t cMaxGlyphs, Windows::Win32::Intl::SCRIPT_ANALYSIS* psa, uint16_t* pwOutGlyphs, uint16_t* pwLogClust, Windows::Win32::Intl::SCRIPT_VISATTR* psva, int32_t* pcGlyphs)
    {
        auto win32_impl_result = WIN32_IMPL_ScriptShape(hdc, psc, pwcChars, cChars, cMaxGlyphs, psa, pwOutGlyphs, pwLogClust, psva, pcGlyphs);
        return win32_impl_result;
    }
    inline int32_t ScriptPlace(Windows::Win32::Gdi::HDC hdc, void** psc, uint16_t* pwGlyphs, int32_t cGlyphs, Windows::Win32::Intl::SCRIPT_VISATTR* psva, Windows::Win32::Intl::SCRIPT_ANALYSIS* psa, int32_t* piAdvance, Windows::Win32::Intl::GOFFSET* pGoffset, Windows::Win32::Gdi::ABC* pABC)
    {
        auto win32_impl_result = WIN32_IMPL_ScriptPlace(hdc, psc, pwGlyphs, cGlyphs, psva, psa, piAdvance, pGoffset, pABC);
        return win32_impl_result;
    }
    inline int32_t ScriptTextOut(intptr_t hdc, void** psc, int32_t x, int32_t y, uint32_t fuOptions, Windows::Win32::DisplayDevices::RECT* lprc, Windows::Win32::Intl::SCRIPT_ANALYSIS* psa, uint16_t* pwcReserved, int32_t iReserved, uint16_t* pwGlyphs, int32_t cGlyphs, int32_t* piAdvance, int32_t* piJustify, Windows::Win32::Intl::GOFFSET* pGoffset)
    {
        auto win32_impl_result = WIN32_IMPL_ScriptTextOut(hdc, psc, x, y, fuOptions, lprc, psa, pwcReserved, iReserved, pwGlyphs, cGlyphs, piAdvance, piJustify, pGoffset);
        return win32_impl_result;
    }
    inline int32_t ScriptJustify(Windows::Win32::Intl::SCRIPT_VISATTR* psva, int32_t* piAdvance, int32_t cGlyphs, int32_t iDx, int32_t iMinKashida, int32_t* piJustify)
    {
        auto win32_impl_result = WIN32_IMPL_ScriptJustify(psva, piAdvance, cGlyphs, iDx, iMinKashida, piJustify);
        return win32_impl_result;
    }
    inline int32_t ScriptBreak(uint16_t* pwcChars, int32_t cChars, Windows::Win32::Intl::SCRIPT_ANALYSIS* psa, Windows::Win32::Intl::SCRIPT_LOGATTR* psla)
    {
        auto win32_impl_result = WIN32_IMPL_ScriptBreak(pwcChars, cChars, psa, psla);
        return win32_impl_result;
    }
    inline int32_t ScriptCPtoX(int32_t iCP, Windows::Win32::SystemServices::BOOL fTrailing, int32_t cChars, int32_t cGlyphs, uint16_t* pwLogClust, Windows::Win32::Intl::SCRIPT_VISATTR* psva, int32_t* piAdvance, Windows::Win32::Intl::SCRIPT_ANALYSIS* psa, int32_t* piX)
    {
        auto win32_impl_result = WIN32_IMPL_ScriptCPtoX(iCP, fTrailing, cChars, cGlyphs, pwLogClust, psva, piAdvance, psa, piX);
        return win32_impl_result;
    }
    inline int32_t ScriptXtoCP(int32_t iX, int32_t cChars, int32_t cGlyphs, uint16_t* pwLogClust, Windows::Win32::Intl::SCRIPT_VISATTR* psva, int32_t* piAdvance, Windows::Win32::Intl::SCRIPT_ANALYSIS* psa, int32_t* piCP, int32_t* piTrailing)
    {
        auto win32_impl_result = WIN32_IMPL_ScriptXtoCP(iX, cChars, cGlyphs, pwLogClust, psva, piAdvance, psa, piCP, piTrailing);
        return win32_impl_result;
    }
    inline int32_t ScriptGetLogicalWidths(Windows::Win32::Intl::SCRIPT_ANALYSIS* psa, int32_t cChars, int32_t cGlyphs, int32_t* piGlyphWidth, uint16_t* pwLogClust, Windows::Win32::Intl::SCRIPT_VISATTR* psva, int32_t* piDx)
    {
        auto win32_impl_result = WIN32_IMPL_ScriptGetLogicalWidths(psa, cChars, cGlyphs, piGlyphWidth, pwLogClust, psva, piDx);
        return win32_impl_result;
    }
    inline int32_t ScriptApplyLogicalWidth(int32_t* piDx, int32_t cChars, int32_t cGlyphs, uint16_t* pwLogClust, Windows::Win32::Intl::SCRIPT_VISATTR* psva, int32_t* piAdvance, Windows::Win32::Intl::SCRIPT_ANALYSIS* psa, Windows::Win32::Gdi::ABC* pABC, int32_t* piJustify)
    {
        auto win32_impl_result = WIN32_IMPL_ScriptApplyLogicalWidth(piDx, cChars, cGlyphs, pwLogClust, psva, piAdvance, psa, pABC, piJustify);
        return win32_impl_result;
    }
    inline int32_t ScriptGetCMap(Windows::Win32::Gdi::HDC hdc, void** psc, uint16_t* pwcInChars, int32_t cChars, uint32_t dwFlags, uint16_t* pwOutGlyphs)
    {
        auto win32_impl_result = WIN32_IMPL_ScriptGetCMap(hdc, psc, pwcInChars, cChars, dwFlags, pwOutGlyphs);
        return win32_impl_result;
    }
    inline int32_t ScriptGetGlyphABCWidth(Windows::Win32::Gdi::HDC hdc, void** psc, uint16_t wGlyph, Windows::Win32::Gdi::ABC* pABC)
    {
        auto win32_impl_result = WIN32_IMPL_ScriptGetGlyphABCWidth(hdc, psc, wGlyph, pABC);
        return win32_impl_result;
    }
    inline int32_t ScriptGetProperties(Windows::Win32::Intl::SCRIPT_PROPERTIES*** ppSp, int32_t* piNumScripts)
    {
        auto win32_impl_result = WIN32_IMPL_ScriptGetProperties(ppSp, piNumScripts);
        return win32_impl_result;
    }
    inline int32_t ScriptGetFontProperties(Windows::Win32::Gdi::HDC hdc, void** psc, Windows::Win32::Intl::SCRIPT_FONTPROPERTIES* sfp)
    {
        auto win32_impl_result = WIN32_IMPL_ScriptGetFontProperties(hdc, psc, sfp);
        return win32_impl_result;
    }
    inline int32_t ScriptCacheGetHeight(Windows::Win32::Gdi::HDC hdc, void** psc, int32_t* tmHeight)
    {
        auto win32_impl_result = WIN32_IMPL_ScriptCacheGetHeight(hdc, psc, tmHeight);
        return win32_impl_result;
    }
    inline int32_t ScriptStringAnalyse(Windows::Win32::Gdi::HDC hdc, void* pString, int32_t cString, int32_t cGlyphs, int32_t iCharset, uint32_t dwFlags, int32_t iReqWidth, Windows::Win32::Intl::SCRIPT_CONTROL* psControl, Windows::Win32::Intl::SCRIPT_STATE* psState, int32_t* piDx, Windows::Win32::Intl::SCRIPT_TABDEF* pTabdef, uint8_t* pbInClass, void** pssa)
    {
        auto win32_impl_result = WIN32_IMPL_ScriptStringAnalyse(hdc, pString, cString, cGlyphs, iCharset, dwFlags, iReqWidth, psControl, psState, piDx, pTabdef, pbInClass, pssa);
        return win32_impl_result;
    }
    inline int32_t ScriptStringFree(void** pssa)
    {
        auto win32_impl_result = WIN32_IMPL_ScriptStringFree(pssa);
        return win32_impl_result;
    }
    inline Windows::Win32::DisplayDevices::SIZE* ScriptString_pSize(void* ssa)
    {
        auto win32_impl_result = WIN32_IMPL_ScriptString_pSize(ssa);
        return win32_impl_result;
    }
    inline int32_t* ScriptString_pcOutChars(void* ssa)
    {
        auto win32_impl_result = WIN32_IMPL_ScriptString_pcOutChars(ssa);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::SCRIPT_LOGATTR* ScriptString_pLogAttr(void* ssa)
    {
        auto win32_impl_result = WIN32_IMPL_ScriptString_pLogAttr(ssa);
        return win32_impl_result;
    }
    inline int32_t ScriptStringGetOrder(void* ssa, uint32_t* puOrder)
    {
        auto win32_impl_result = WIN32_IMPL_ScriptStringGetOrder(ssa, puOrder);
        return win32_impl_result;
    }
    inline int32_t ScriptStringCPtoX(void* ssa, int32_t icp, Windows::Win32::SystemServices::BOOL fTrailing, int32_t* pX)
    {
        auto win32_impl_result = WIN32_IMPL_ScriptStringCPtoX(ssa, icp, fTrailing, pX);
        return win32_impl_result;
    }
    inline int32_t ScriptStringXtoCP(void* ssa, int32_t iX, int32_t* piCh, int32_t* piTrailing)
    {
        auto win32_impl_result = WIN32_IMPL_ScriptStringXtoCP(ssa, iX, piCh, piTrailing);
        return win32_impl_result;
    }
    inline int32_t ScriptStringGetLogicalWidths(void* ssa, int32_t* piDx)
    {
        auto win32_impl_result = WIN32_IMPL_ScriptStringGetLogicalWidths(ssa, piDx);
        return win32_impl_result;
    }
    inline int32_t ScriptStringValidate(void* ssa)
    {
        auto win32_impl_result = WIN32_IMPL_ScriptStringValidate(ssa);
        return win32_impl_result;
    }
    inline int32_t ScriptStringOut(void* ssa, int32_t iX, int32_t iY, uint32_t uOptions, Windows::Win32::DisplayDevices::RECT* prc, int32_t iMinSel, int32_t iMaxSel, Windows::Win32::SystemServices::BOOL fDisabled)
    {
        auto win32_impl_result = WIN32_IMPL_ScriptStringOut(ssa, iX, iY, uOptions, prc, iMinSel, iMaxSel, fDisabled);
        return win32_impl_result;
    }
    inline int32_t ScriptIsComplex(uint16_t* pwcInChars, int32_t cInChars, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_ScriptIsComplex(pwcInChars, cInChars, dwFlags);
        return win32_impl_result;
    }
    inline int32_t ScriptRecordDigitSubstitution(uint32_t Locale, Windows::Win32::Intl::SCRIPT_DIGITSUBSTITUTE* psds)
    {
        auto win32_impl_result = WIN32_IMPL_ScriptRecordDigitSubstitution(Locale, psds);
        return win32_impl_result;
    }
    inline int32_t ScriptApplyDigitSubstitution(Windows::Win32::Intl::SCRIPT_DIGITSUBSTITUTE* psds, Windows::Win32::Intl::SCRIPT_CONTROL* psc, Windows::Win32::Intl::SCRIPT_STATE* pss)
    {
        auto win32_impl_result = WIN32_IMPL_ScriptApplyDigitSubstitution(psds, psc, pss);
        return win32_impl_result;
    }
    inline int32_t ScriptShapeOpenType(Windows::Win32::Gdi::HDC hdc, void** psc, Windows::Win32::Intl::SCRIPT_ANALYSIS* psa, uint32_t tagScript, uint32_t tagLangSys, int32_t* rcRangeChars, Windows::Win32::Intl::textrange_properties** rpRangeProperties, int32_t cRanges, uint16_t* pwcChars, int32_t cChars, int32_t cMaxGlyphs, uint16_t* pwLogClust, Windows::Win32::Intl::script_charprop* pCharProps, uint16_t* pwOutGlyphs, Windows::Win32::Intl::script_glyphprop* pOutGlyphProps, int32_t* pcGlyphs)
    {
        auto win32_impl_result = WIN32_IMPL_ScriptShapeOpenType(hdc, psc, psa, tagScript, tagLangSys, rcRangeChars, rpRangeProperties, cRanges, pwcChars, cChars, cMaxGlyphs, pwLogClust, pCharProps, pwOutGlyphs, pOutGlyphProps, pcGlyphs);
        return win32_impl_result;
    }
    inline int32_t ScriptPlaceOpenType(Windows::Win32::Gdi::HDC hdc, void** psc, Windows::Win32::Intl::SCRIPT_ANALYSIS* psa, uint32_t tagScript, uint32_t tagLangSys, int32_t* rcRangeChars, Windows::Win32::Intl::textrange_properties** rpRangeProperties, int32_t cRanges, uint16_t* pwcChars, uint16_t* pwLogClust, Windows::Win32::Intl::script_charprop* pCharProps, int32_t cChars, uint16_t* pwGlyphs, Windows::Win32::Intl::script_glyphprop* pGlyphProps, int32_t cGlyphs, int32_t* piAdvance, Windows::Win32::Intl::GOFFSET* pGoffset, Windows::Win32::Gdi::ABC* pABC)
    {
        auto win32_impl_result = WIN32_IMPL_ScriptPlaceOpenType(hdc, psc, psa, tagScript, tagLangSys, rcRangeChars, rpRangeProperties, cRanges, pwcChars, pwLogClust, pCharProps, cChars, pwGlyphs, pGlyphProps, cGlyphs, piAdvance, pGoffset, pABC);
        return win32_impl_result;
    }
    inline int32_t ScriptItemizeOpenType(uint16_t* pwcInChars, int32_t cInChars, int32_t cMaxItems, Windows::Win32::Intl::SCRIPT_CONTROL* psControl, Windows::Win32::Intl::SCRIPT_STATE* psState, Windows::Win32::Intl::SCRIPT_ITEM* pItems, uint32_t* pScriptTags, int32_t* pcItems)
    {
        auto win32_impl_result = WIN32_IMPL_ScriptItemizeOpenType(pwcInChars, cInChars, cMaxItems, psControl, psState, pItems, pScriptTags, pcItems);
        return win32_impl_result;
    }
    inline int32_t ScriptGetFontScriptTags(Windows::Win32::Gdi::HDC hdc, void** psc, Windows::Win32::Intl::SCRIPT_ANALYSIS* psa, int32_t cMaxTags, uint32_t* pScriptTags, int32_t* pcTags)
    {
        auto win32_impl_result = WIN32_IMPL_ScriptGetFontScriptTags(hdc, psc, psa, cMaxTags, pScriptTags, pcTags);
        return win32_impl_result;
    }
    inline int32_t ScriptGetFontLanguageTags(Windows::Win32::Gdi::HDC hdc, void** psc, Windows::Win32::Intl::SCRIPT_ANALYSIS* psa, uint32_t tagScript, int32_t cMaxTags, uint32_t* pLangsysTags, int32_t* pcTags)
    {
        auto win32_impl_result = WIN32_IMPL_ScriptGetFontLanguageTags(hdc, psc, psa, tagScript, cMaxTags, pLangsysTags, pcTags);
        return win32_impl_result;
    }
    inline int32_t ScriptGetFontFeatureTags(Windows::Win32::Gdi::HDC hdc, void** psc, Windows::Win32::Intl::SCRIPT_ANALYSIS* psa, uint32_t tagScript, uint32_t tagLangSys, int32_t cMaxTags, uint32_t* pFeatureTags, int32_t* pcTags)
    {
        auto win32_impl_result = WIN32_IMPL_ScriptGetFontFeatureTags(hdc, psc, psa, tagScript, tagLangSys, cMaxTags, pFeatureTags, pcTags);
        return win32_impl_result;
    }
    inline int32_t ScriptGetFontAlternateGlyphs(Windows::Win32::Gdi::HDC hdc, void** psc, Windows::Win32::Intl::SCRIPT_ANALYSIS* psa, uint32_t tagScript, uint32_t tagLangSys, uint32_t tagFeature, uint16_t wGlyphId, int32_t cMaxAlternates, uint16_t* pAlternateGlyphs, int32_t* pcAlternates)
    {
        auto win32_impl_result = WIN32_IMPL_ScriptGetFontAlternateGlyphs(hdc, psc, psa, tagScript, tagLangSys, tagFeature, wGlyphId, cMaxAlternates, pAlternateGlyphs, pcAlternates);
        return win32_impl_result;
    }
    inline int32_t ScriptSubstituteSingleGlyph(Windows::Win32::Gdi::HDC hdc, void** psc, Windows::Win32::Intl::SCRIPT_ANALYSIS* psa, uint32_t tagScript, uint32_t tagLangSys, uint32_t tagFeature, int32_t lParameter, uint16_t wGlyphId, uint16_t* pwOutGlyphId)
    {
        auto win32_impl_result = WIN32_IMPL_ScriptSubstituteSingleGlyph(hdc, psc, psa, tagScript, tagLangSys, tagFeature, lParameter, wGlyphId, pwOutGlyphId);
        return win32_impl_result;
    }
    inline int32_t ScriptPositionSingleGlyph(Windows::Win32::Gdi::HDC hdc, void** psc, Windows::Win32::Intl::SCRIPT_ANALYSIS* psa, uint32_t tagScript, uint32_t tagLangSys, uint32_t tagFeature, int32_t lParameter, uint16_t wGlyphId, int32_t iAdvance, Windows::Win32::Intl::GOFFSET GOffset, int32_t* piOutAdvance, Windows::Win32::Intl::GOFFSET* pOutGoffset)
    {
        auto win32_impl_result = WIN32_IMPL_ScriptPositionSingleGlyph(hdc, psc, psa, tagScript, tagLangSys, tagFeature, lParameter, wGlyphId, iAdvance, GOffset, piOutAdvance, pOutGoffset);
        return win32_impl_result;
    }
    inline int32_t utf8_nextCharSafeBody(uint8_t* s, int32_t* pi, int32_t length, int32_t c, int8_t strict)
    {
        auto win32_impl_result = WIN32_IMPL_utf8_nextCharSafeBody(s, pi, length, c, strict);
        return win32_impl_result;
    }
    inline int32_t utf8_appendCharSafeBody(uint8_t* s, int32_t i, int32_t length, int32_t c, int8_t* pIsError)
    {
        auto win32_impl_result = WIN32_IMPL_utf8_appendCharSafeBody(s, i, length, c, pIsError);
        return win32_impl_result;
    }
    inline int32_t utf8_prevCharSafeBody(uint8_t* s, int32_t start, int32_t* pi, int32_t c, int8_t strict)
    {
        auto win32_impl_result = WIN32_IMPL_utf8_prevCharSafeBody(s, start, pi, c, strict);
        return win32_impl_result;
    }
    inline int32_t utf8_back1SafeBody(uint8_t* s, int32_t start, int32_t i)
    {
        auto win32_impl_result = WIN32_IMPL_utf8_back1SafeBody(s, start, i);
        return win32_impl_result;
    }
    inline void u_versionFromString(uint8_t* versionArray, int8_t* versionString)
    {
        WIN32_IMPL_u_versionFromString(versionArray, versionString);
    }
    inline void u_versionFromUString(uint8_t* versionArray, uint16_t* versionString)
    {
        WIN32_IMPL_u_versionFromUString(versionArray, versionString);
    }
    inline void u_versionToString(uint8_t* versionArray, int8_t* versionString)
    {
        WIN32_IMPL_u_versionToString(versionArray, versionString);
    }
    inline void u_getVersion(uint8_t* versionArray)
    {
        WIN32_IMPL_u_getVersion(versionArray);
    }
    inline int8_t* u_errorName(Windows::Win32::Intl::UErrorCode code)
    {
        auto win32_impl_result = WIN32_IMPL_u_errorName(code);
        return win32_impl_result;
    }
    inline void utrace_setLevel(int32_t traceLevel)
    {
        WIN32_IMPL_utrace_setLevel(traceLevel);
    }
    inline int32_t utrace_getLevel()
    {
        auto win32_impl_result = WIN32_IMPL_utrace_getLevel();
        return win32_impl_result;
    }
    inline void utrace_setFunctions(void* context, Windows::Win32::Intl::UTraceEntry** e, Windows::Win32::Intl::UTraceExit** x, Windows::Win32::Intl::UTraceData** d)
    {
        WIN32_IMPL_utrace_setFunctions(context, e, x, d);
    }
    inline void utrace_getFunctions(void** context, Windows::Win32::Intl::UTraceEntry*** e, Windows::Win32::Intl::UTraceExit*** x, Windows::Win32::Intl::UTraceData*** d)
    {
        WIN32_IMPL_utrace_getFunctions(context, e, x, d);
    }
    inline int32_t utrace_vformat(int8_t* outBuf, int32_t capacity, int32_t indent, int8_t* fmt, int8_t* args)
    {
        auto win32_impl_result = WIN32_IMPL_utrace_vformat(outBuf, capacity, indent, fmt, args);
        return win32_impl_result;
    }
    inline int32_t utrace_format(int8_t* outBuf, int32_t capacity, int32_t indent, int8_t* fmt)
    {
        auto win32_impl_result = WIN32_IMPL_utrace_format(outBuf, capacity, indent, fmt);
        return win32_impl_result;
    }
    inline int8_t* utrace_functionName(int32_t fnNumber)
    {
        auto win32_impl_result = WIN32_IMPL_utrace_functionName(fnNumber);
        return win32_impl_result;
    }
    inline int32_t u_shapeArabic(uint16_t* source, int32_t sourceLength, uint16_t* dest, int32_t destSize, uint32_t options, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_u_shapeArabic(source, sourceLength, dest, destSize, options, pErrorCode);
        return win32_impl_result;
    }
    inline int32_t uscript_getCode(int8_t* nameOrAbbrOrLocale, Windows::Win32::Intl::UScriptCode* fillIn, int32_t capacity, Windows::Win32::Intl::UErrorCode* err)
    {
        auto win32_impl_result = WIN32_IMPL_uscript_getCode(nameOrAbbrOrLocale, fillIn, capacity, err);
        return win32_impl_result;
    }
    inline int8_t* uscript_getName(Windows::Win32::Intl::UScriptCode scriptCode)
    {
        auto win32_impl_result = WIN32_IMPL_uscript_getName(scriptCode);
        return win32_impl_result;
    }
    inline int8_t* uscript_getShortName(Windows::Win32::Intl::UScriptCode scriptCode)
    {
        auto win32_impl_result = WIN32_IMPL_uscript_getShortName(scriptCode);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UScriptCode uscript_getScript(int32_t codepoint, Windows::Win32::Intl::UErrorCode* err)
    {
        auto win32_impl_result = WIN32_IMPL_uscript_getScript(codepoint, err);
        return win32_impl_result;
    }
    inline int8_t uscript_hasScript(int32_t c, Windows::Win32::Intl::UScriptCode sc)
    {
        auto win32_impl_result = WIN32_IMPL_uscript_hasScript(c, sc);
        return win32_impl_result;
    }
    inline int32_t uscript_getScriptExtensions(int32_t c, Windows::Win32::Intl::UScriptCode* scripts, int32_t capacity, Windows::Win32::Intl::UErrorCode* errorCode)
    {
        auto win32_impl_result = WIN32_IMPL_uscript_getScriptExtensions(c, scripts, capacity, errorCode);
        return win32_impl_result;
    }
    inline int32_t uscript_getSampleString(Windows::Win32::Intl::UScriptCode script, uint16_t* dest, int32_t capacity, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_uscript_getSampleString(script, dest, capacity, pErrorCode);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UScriptUsage uscript_getUsage(Windows::Win32::Intl::UScriptCode script)
    {
        auto win32_impl_result = WIN32_IMPL_uscript_getUsage(script);
        return win32_impl_result;
    }
    inline int8_t uscript_isRightToLeft(Windows::Win32::Intl::UScriptCode script)
    {
        auto win32_impl_result = WIN32_IMPL_uscript_isRightToLeft(script);
        return win32_impl_result;
    }
    inline int8_t uscript_breaksBetweenLetters(Windows::Win32::Intl::UScriptCode script)
    {
        auto win32_impl_result = WIN32_IMPL_uscript_breaksBetweenLetters(script);
        return win32_impl_result;
    }
    inline int8_t uscript_isCased(Windows::Win32::Intl::UScriptCode script)
    {
        auto win32_impl_result = WIN32_IMPL_uscript_isCased(script);
        return win32_impl_result;
    }
    inline int32_t uiter_current32(Windows::Win32::Intl::UCharIterator* iter)
    {
        auto win32_impl_result = WIN32_IMPL_uiter_current32(iter);
        return win32_impl_result;
    }
    inline int32_t uiter_next32(Windows::Win32::Intl::UCharIterator* iter)
    {
        auto win32_impl_result = WIN32_IMPL_uiter_next32(iter);
        return win32_impl_result;
    }
    inline int32_t uiter_previous32(Windows::Win32::Intl::UCharIterator* iter)
    {
        auto win32_impl_result = WIN32_IMPL_uiter_previous32(iter);
        return win32_impl_result;
    }
    inline uint32_t uiter_getState(Windows::Win32::Intl::UCharIterator* iter)
    {
        auto win32_impl_result = WIN32_IMPL_uiter_getState(iter);
        return win32_impl_result;
    }
    inline void uiter_setState(Windows::Win32::Intl::UCharIterator* iter, uint32_t state, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        WIN32_IMPL_uiter_setState(iter, state, pErrorCode);
    }
    inline void uiter_setString(Windows::Win32::Intl::UCharIterator* iter, uint16_t* s, int32_t length)
    {
        WIN32_IMPL_uiter_setString(iter, s, length);
    }
    inline void uiter_setUTF16BE(Windows::Win32::Intl::UCharIterator* iter, int8_t* s, int32_t length)
    {
        WIN32_IMPL_uiter_setUTF16BE(iter, s, length);
    }
    inline void uiter_setUTF8(Windows::Win32::Intl::UCharIterator* iter, int8_t* s, int32_t length)
    {
        WIN32_IMPL_uiter_setUTF8(iter, s, length);
    }
    inline void uenum_close(Windows::Win32::Intl::UEnumeration* en)
    {
        WIN32_IMPL_uenum_close(en);
    }
    inline int32_t uenum_count(Windows::Win32::Intl::UEnumeration* en, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uenum_count(en, status);
        return win32_impl_result;
    }
    inline uint16_t* uenum_unext(Windows::Win32::Intl::UEnumeration* en, int32_t* resultLength, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uenum_unext(en, resultLength, status);
        return win32_impl_result;
    }
    inline int8_t* uenum_next(Windows::Win32::Intl::UEnumeration* en, int32_t* resultLength, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uenum_next(en, resultLength, status);
        return win32_impl_result;
    }
    inline void uenum_reset(Windows::Win32::Intl::UEnumeration* en, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_uenum_reset(en, status);
    }
    inline Windows::Win32::Intl::UEnumeration* uenum_openUCharStringsEnumeration(uint16_t** strings, int32_t count, Windows::Win32::Intl::UErrorCode* ec)
    {
        auto win32_impl_result = WIN32_IMPL_uenum_openUCharStringsEnumeration(strings, count, ec);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UEnumeration* uenum_openCharStringsEnumeration(int8_t** strings, int32_t count, Windows::Win32::Intl::UErrorCode* ec)
    {
        auto win32_impl_result = WIN32_IMPL_uenum_openCharStringsEnumeration(strings, count, ec);
        return win32_impl_result;
    }
    inline int8_t* uloc_getDefault()
    {
        auto win32_impl_result = WIN32_IMPL_uloc_getDefault();
        return win32_impl_result;
    }
    inline void uloc_setDefault(int8_t* localeID, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_uloc_setDefault(localeID, status);
    }
    inline int32_t uloc_getLanguage(int8_t* localeID, int8_t* language, int32_t languageCapacity, Windows::Win32::Intl::UErrorCode* err)
    {
        auto win32_impl_result = WIN32_IMPL_uloc_getLanguage(localeID, language, languageCapacity, err);
        return win32_impl_result;
    }
    inline int32_t uloc_getScript(int8_t* localeID, int8_t* script, int32_t scriptCapacity, Windows::Win32::Intl::UErrorCode* err)
    {
        auto win32_impl_result = WIN32_IMPL_uloc_getScript(localeID, script, scriptCapacity, err);
        return win32_impl_result;
    }
    inline int32_t uloc_getCountry(int8_t* localeID, int8_t* country, int32_t countryCapacity, Windows::Win32::Intl::UErrorCode* err)
    {
        auto win32_impl_result = WIN32_IMPL_uloc_getCountry(localeID, country, countryCapacity, err);
        return win32_impl_result;
    }
    inline int32_t uloc_getVariant(int8_t* localeID, int8_t* variant, int32_t variantCapacity, Windows::Win32::Intl::UErrorCode* err)
    {
        auto win32_impl_result = WIN32_IMPL_uloc_getVariant(localeID, variant, variantCapacity, err);
        return win32_impl_result;
    }
    inline int32_t uloc_getName(int8_t* localeID, int8_t* name, int32_t nameCapacity, Windows::Win32::Intl::UErrorCode* err)
    {
        auto win32_impl_result = WIN32_IMPL_uloc_getName(localeID, name, nameCapacity, err);
        return win32_impl_result;
    }
    inline int32_t uloc_canonicalize(int8_t* localeID, int8_t* name, int32_t nameCapacity, Windows::Win32::Intl::UErrorCode* err)
    {
        auto win32_impl_result = WIN32_IMPL_uloc_canonicalize(localeID, name, nameCapacity, err);
        return win32_impl_result;
    }
    inline int8_t* uloc_getISO3Language(int8_t* localeID)
    {
        auto win32_impl_result = WIN32_IMPL_uloc_getISO3Language(localeID);
        return win32_impl_result;
    }
    inline int8_t* uloc_getISO3Country(int8_t* localeID)
    {
        auto win32_impl_result = WIN32_IMPL_uloc_getISO3Country(localeID);
        return win32_impl_result;
    }
    inline uint32_t uloc_getLCID(int8_t* localeID)
    {
        auto win32_impl_result = WIN32_IMPL_uloc_getLCID(localeID);
        return win32_impl_result;
    }
    inline int32_t uloc_getDisplayLanguage(int8_t* locale, int8_t* displayLocale, uint16_t* language, int32_t languageCapacity, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uloc_getDisplayLanguage(locale, displayLocale, language, languageCapacity, status);
        return win32_impl_result;
    }
    inline int32_t uloc_getDisplayScript(int8_t* locale, int8_t* displayLocale, uint16_t* script, int32_t scriptCapacity, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uloc_getDisplayScript(locale, displayLocale, script, scriptCapacity, status);
        return win32_impl_result;
    }
    inline int32_t uloc_getDisplayCountry(int8_t* locale, int8_t* displayLocale, uint16_t* country, int32_t countryCapacity, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uloc_getDisplayCountry(locale, displayLocale, country, countryCapacity, status);
        return win32_impl_result;
    }
    inline int32_t uloc_getDisplayVariant(int8_t* locale, int8_t* displayLocale, uint16_t* variant, int32_t variantCapacity, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uloc_getDisplayVariant(locale, displayLocale, variant, variantCapacity, status);
        return win32_impl_result;
    }
    inline int32_t uloc_getDisplayKeyword(int8_t* keyword, int8_t* displayLocale, uint16_t* dest, int32_t destCapacity, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uloc_getDisplayKeyword(keyword, displayLocale, dest, destCapacity, status);
        return win32_impl_result;
    }
    inline int32_t uloc_getDisplayKeywordValue(int8_t* locale, int8_t* keyword, int8_t* displayLocale, uint16_t* dest, int32_t destCapacity, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uloc_getDisplayKeywordValue(locale, keyword, displayLocale, dest, destCapacity, status);
        return win32_impl_result;
    }
    inline int32_t uloc_getDisplayName(int8_t* localeID, int8_t* inLocaleID, uint16_t* result, int32_t maxResultSize, Windows::Win32::Intl::UErrorCode* err)
    {
        auto win32_impl_result = WIN32_IMPL_uloc_getDisplayName(localeID, inLocaleID, result, maxResultSize, err);
        return win32_impl_result;
    }
    inline int8_t* uloc_getAvailable(int32_t n)
    {
        auto win32_impl_result = WIN32_IMPL_uloc_getAvailable(n);
        return win32_impl_result;
    }
    inline int32_t uloc_countAvailable()
    {
        auto win32_impl_result = WIN32_IMPL_uloc_countAvailable();
        return win32_impl_result;
    }
    inline int8_t** uloc_getISOLanguages()
    {
        auto win32_impl_result = WIN32_IMPL_uloc_getISOLanguages();
        return win32_impl_result;
    }
    inline int8_t** uloc_getISOCountries()
    {
        auto win32_impl_result = WIN32_IMPL_uloc_getISOCountries();
        return win32_impl_result;
    }
    inline int32_t uloc_getParent(int8_t* localeID, int8_t* parent, int32_t parentCapacity, Windows::Win32::Intl::UErrorCode* err)
    {
        auto win32_impl_result = WIN32_IMPL_uloc_getParent(localeID, parent, parentCapacity, err);
        return win32_impl_result;
    }
    inline int32_t uloc_getBaseName(int8_t* localeID, int8_t* name, int32_t nameCapacity, Windows::Win32::Intl::UErrorCode* err)
    {
        auto win32_impl_result = WIN32_IMPL_uloc_getBaseName(localeID, name, nameCapacity, err);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UEnumeration* uloc_openKeywords(int8_t* localeID, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uloc_openKeywords(localeID, status);
        return win32_impl_result;
    }
    inline int32_t uloc_getKeywordValue(int8_t* localeID, int8_t* keywordName, int8_t* buffer, int32_t bufferCapacity, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uloc_getKeywordValue(localeID, keywordName, buffer, bufferCapacity, status);
        return win32_impl_result;
    }
    inline int32_t uloc_setKeywordValue(int8_t* keywordName, int8_t* keywordValue, int8_t* buffer, int32_t bufferCapacity, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uloc_setKeywordValue(keywordName, keywordValue, buffer, bufferCapacity, status);
        return win32_impl_result;
    }
    inline int8_t uloc_isRightToLeft(int8_t* locale)
    {
        auto win32_impl_result = WIN32_IMPL_uloc_isRightToLeft(locale);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::ULayoutType uloc_getCharacterOrientation(int8_t* localeId, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uloc_getCharacterOrientation(localeId, status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::ULayoutType uloc_getLineOrientation(int8_t* localeId, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uloc_getLineOrientation(localeId, status);
        return win32_impl_result;
    }
    inline int32_t uloc_acceptLanguageFromHTTP(int8_t* result, int32_t resultAvailable, Windows::Win32::Intl::UAcceptResult* outResult, int8_t* httpAcceptLanguage, Windows::Win32::Intl::UEnumeration* availableLocales, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uloc_acceptLanguageFromHTTP(result, resultAvailable, outResult, httpAcceptLanguage, availableLocales, status);
        return win32_impl_result;
    }
    inline int32_t uloc_acceptLanguage(int8_t* result, int32_t resultAvailable, Windows::Win32::Intl::UAcceptResult* outResult, int8_t** acceptList, int32_t acceptListCount, Windows::Win32::Intl::UEnumeration* availableLocales, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uloc_acceptLanguage(result, resultAvailable, outResult, acceptList, acceptListCount, availableLocales, status);
        return win32_impl_result;
    }
    inline int32_t uloc_getLocaleForLCID(uint32_t hostID, int8_t* locale, int32_t localeCapacity, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uloc_getLocaleForLCID(hostID, locale, localeCapacity, status);
        return win32_impl_result;
    }
    inline int32_t uloc_addLikelySubtags(int8_t* localeID, int8_t* maximizedLocaleID, int32_t maximizedLocaleIDCapacity, Windows::Win32::Intl::UErrorCode* err)
    {
        auto win32_impl_result = WIN32_IMPL_uloc_addLikelySubtags(localeID, maximizedLocaleID, maximizedLocaleIDCapacity, err);
        return win32_impl_result;
    }
    inline int32_t uloc_minimizeSubtags(int8_t* localeID, int8_t* minimizedLocaleID, int32_t minimizedLocaleIDCapacity, Windows::Win32::Intl::UErrorCode* err)
    {
        auto win32_impl_result = WIN32_IMPL_uloc_minimizeSubtags(localeID, minimizedLocaleID, minimizedLocaleIDCapacity, err);
        return win32_impl_result;
    }
    inline int32_t uloc_forLanguageTag(int8_t* langtag, int8_t* localeID, int32_t localeIDCapacity, int32_t* parsedLength, Windows::Win32::Intl::UErrorCode* err)
    {
        auto win32_impl_result = WIN32_IMPL_uloc_forLanguageTag(langtag, localeID, localeIDCapacity, parsedLength, err);
        return win32_impl_result;
    }
    inline int32_t uloc_toLanguageTag(int8_t* localeID, int8_t* langtag, int32_t langtagCapacity, int8_t strict, Windows::Win32::Intl::UErrorCode* err)
    {
        auto win32_impl_result = WIN32_IMPL_uloc_toLanguageTag(localeID, langtag, langtagCapacity, strict, err);
        return win32_impl_result;
    }
    inline int8_t* uloc_toUnicodeLocaleKey(int8_t* keyword)
    {
        auto win32_impl_result = WIN32_IMPL_uloc_toUnicodeLocaleKey(keyword);
        return win32_impl_result;
    }
    inline int8_t* uloc_toUnicodeLocaleType(int8_t* keyword, int8_t* value)
    {
        auto win32_impl_result = WIN32_IMPL_uloc_toUnicodeLocaleType(keyword, value);
        return win32_impl_result;
    }
    inline int8_t* uloc_toLegacyKey(int8_t* keyword)
    {
        auto win32_impl_result = WIN32_IMPL_uloc_toLegacyKey(keyword);
        return win32_impl_result;
    }
    inline int8_t* uloc_toLegacyType(int8_t* keyword, int8_t* value)
    {
        auto win32_impl_result = WIN32_IMPL_uloc_toLegacyType(keyword, value);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UResourceBundle* ures_open(int8_t* packageName, int8_t* locale, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ures_open(packageName, locale, status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UResourceBundle* ures_openDirect(int8_t* packageName, int8_t* locale, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ures_openDirect(packageName, locale, status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UResourceBundle* ures_openU(uint16_t* packageName, int8_t* locale, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ures_openU(packageName, locale, status);
        return win32_impl_result;
    }
    inline void ures_close(Windows::Win32::Intl::UResourceBundle* resourceBundle)
    {
        WIN32_IMPL_ures_close(resourceBundle);
    }
    inline void ures_getVersion(Windows::Win32::Intl::UResourceBundle* resB, uint8_t* versionInfo)
    {
        WIN32_IMPL_ures_getVersion(resB, versionInfo);
    }
    inline int8_t* ures_getLocaleByType(Windows::Win32::Intl::UResourceBundle* resourceBundle, Windows::Win32::Intl::ULocDataLocaleType type, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ures_getLocaleByType(resourceBundle, type, status);
        return win32_impl_result;
    }
    inline uint16_t* ures_getString(Windows::Win32::Intl::UResourceBundle* resourceBundle, int32_t* len, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ures_getString(resourceBundle, len, status);
        return win32_impl_result;
    }
    inline int8_t* ures_getUTF8String(Windows::Win32::Intl::UResourceBundle* resB, int8_t* dest, int32_t* length, int8_t forceCopy, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ures_getUTF8String(resB, dest, length, forceCopy, status);
        return win32_impl_result;
    }
    inline uint8_t* ures_getBinary(Windows::Win32::Intl::UResourceBundle* resourceBundle, int32_t* len, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ures_getBinary(resourceBundle, len, status);
        return win32_impl_result;
    }
    inline int32_t* ures_getIntVector(Windows::Win32::Intl::UResourceBundle* resourceBundle, int32_t* len, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ures_getIntVector(resourceBundle, len, status);
        return win32_impl_result;
    }
    inline uint32_t ures_getUInt(Windows::Win32::Intl::UResourceBundle* resourceBundle, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ures_getUInt(resourceBundle, status);
        return win32_impl_result;
    }
    inline int32_t ures_getInt(Windows::Win32::Intl::UResourceBundle* resourceBundle, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ures_getInt(resourceBundle, status);
        return win32_impl_result;
    }
    inline int32_t ures_getSize(Windows::Win32::Intl::UResourceBundle* resourceBundle)
    {
        auto win32_impl_result = WIN32_IMPL_ures_getSize(resourceBundle);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UResType ures_getType(Windows::Win32::Intl::UResourceBundle* resourceBundle)
    {
        auto win32_impl_result = WIN32_IMPL_ures_getType(resourceBundle);
        return win32_impl_result;
    }
    inline int8_t* ures_getKey(Windows::Win32::Intl::UResourceBundle* resourceBundle)
    {
        auto win32_impl_result = WIN32_IMPL_ures_getKey(resourceBundle);
        return win32_impl_result;
    }
    inline void ures_resetIterator(Windows::Win32::Intl::UResourceBundle* resourceBundle)
    {
        WIN32_IMPL_ures_resetIterator(resourceBundle);
    }
    inline int8_t ures_hasNext(Windows::Win32::Intl::UResourceBundle* resourceBundle)
    {
        auto win32_impl_result = WIN32_IMPL_ures_hasNext(resourceBundle);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UResourceBundle* ures_getNextResource(Windows::Win32::Intl::UResourceBundle* resourceBundle, Windows::Win32::Intl::UResourceBundle* fillIn, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ures_getNextResource(resourceBundle, fillIn, status);
        return win32_impl_result;
    }
    inline uint16_t* ures_getNextString(Windows::Win32::Intl::UResourceBundle* resourceBundle, int32_t* len, int8_t** key, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ures_getNextString(resourceBundle, len, key, status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UResourceBundle* ures_getByIndex(Windows::Win32::Intl::UResourceBundle* resourceBundle, int32_t indexR, Windows::Win32::Intl::UResourceBundle* fillIn, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ures_getByIndex(resourceBundle, indexR, fillIn, status);
        return win32_impl_result;
    }
    inline uint16_t* ures_getStringByIndex(Windows::Win32::Intl::UResourceBundle* resourceBundle, int32_t indexS, int32_t* len, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ures_getStringByIndex(resourceBundle, indexS, len, status);
        return win32_impl_result;
    }
    inline int8_t* ures_getUTF8StringByIndex(Windows::Win32::Intl::UResourceBundle* resB, int32_t stringIndex, int8_t* dest, int32_t* pLength, int8_t forceCopy, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ures_getUTF8StringByIndex(resB, stringIndex, dest, pLength, forceCopy, status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UResourceBundle* ures_getByKey(Windows::Win32::Intl::UResourceBundle* resourceBundle, int8_t* key, Windows::Win32::Intl::UResourceBundle* fillIn, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ures_getByKey(resourceBundle, key, fillIn, status);
        return win32_impl_result;
    }
    inline uint16_t* ures_getStringByKey(Windows::Win32::Intl::UResourceBundle* resB, int8_t* key, int32_t* len, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ures_getStringByKey(resB, key, len, status);
        return win32_impl_result;
    }
    inline int8_t* ures_getUTF8StringByKey(Windows::Win32::Intl::UResourceBundle* resB, int8_t* key, int8_t* dest, int32_t* pLength, int8_t forceCopy, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ures_getUTF8StringByKey(resB, key, dest, pLength, forceCopy, status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UEnumeration* ures_openAvailableLocales(int8_t* packageName, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ures_openAvailableLocales(packageName, status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::ULocaleDisplayNames* uldn_open(int8_t* locale, Windows::Win32::Intl::UDialectHandling dialectHandling, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_uldn_open(locale, dialectHandling, pErrorCode);
        return win32_impl_result;
    }
    inline void uldn_close(Windows::Win32::Intl::ULocaleDisplayNames* ldn)
    {
        WIN32_IMPL_uldn_close(ldn);
    }
    inline int8_t* uldn_getLocale(Windows::Win32::Intl::ULocaleDisplayNames* ldn)
    {
        auto win32_impl_result = WIN32_IMPL_uldn_getLocale(ldn);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UDialectHandling uldn_getDialectHandling(Windows::Win32::Intl::ULocaleDisplayNames* ldn)
    {
        auto win32_impl_result = WIN32_IMPL_uldn_getDialectHandling(ldn);
        return win32_impl_result;
    }
    inline int32_t uldn_localeDisplayName(Windows::Win32::Intl::ULocaleDisplayNames* ldn, int8_t* locale, uint16_t* result, int32_t maxResultSize, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_uldn_localeDisplayName(ldn, locale, result, maxResultSize, pErrorCode);
        return win32_impl_result;
    }
    inline int32_t uldn_languageDisplayName(Windows::Win32::Intl::ULocaleDisplayNames* ldn, int8_t* lang, uint16_t* result, int32_t maxResultSize, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_uldn_languageDisplayName(ldn, lang, result, maxResultSize, pErrorCode);
        return win32_impl_result;
    }
    inline int32_t uldn_scriptDisplayName(Windows::Win32::Intl::ULocaleDisplayNames* ldn, int8_t* script, uint16_t* result, int32_t maxResultSize, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_uldn_scriptDisplayName(ldn, script, result, maxResultSize, pErrorCode);
        return win32_impl_result;
    }
    inline int32_t uldn_scriptCodeDisplayName(Windows::Win32::Intl::ULocaleDisplayNames* ldn, Windows::Win32::Intl::UScriptCode scriptCode, uint16_t* result, int32_t maxResultSize, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_uldn_scriptCodeDisplayName(ldn, scriptCode, result, maxResultSize, pErrorCode);
        return win32_impl_result;
    }
    inline int32_t uldn_regionDisplayName(Windows::Win32::Intl::ULocaleDisplayNames* ldn, int8_t* region, uint16_t* result, int32_t maxResultSize, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_uldn_regionDisplayName(ldn, region, result, maxResultSize, pErrorCode);
        return win32_impl_result;
    }
    inline int32_t uldn_variantDisplayName(Windows::Win32::Intl::ULocaleDisplayNames* ldn, int8_t* variant, uint16_t* result, int32_t maxResultSize, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_uldn_variantDisplayName(ldn, variant, result, maxResultSize, pErrorCode);
        return win32_impl_result;
    }
    inline int32_t uldn_keyDisplayName(Windows::Win32::Intl::ULocaleDisplayNames* ldn, int8_t* key, uint16_t* result, int32_t maxResultSize, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_uldn_keyDisplayName(ldn, key, result, maxResultSize, pErrorCode);
        return win32_impl_result;
    }
    inline int32_t uldn_keyValueDisplayName(Windows::Win32::Intl::ULocaleDisplayNames* ldn, int8_t* key, int8_t* value, uint16_t* result, int32_t maxResultSize, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_uldn_keyValueDisplayName(ldn, key, value, result, maxResultSize, pErrorCode);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::ULocaleDisplayNames* uldn_openForContext(int8_t* locale, Windows::Win32::Intl::UDisplayContext* contexts, int32_t length, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_uldn_openForContext(locale, contexts, length, pErrorCode);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UDisplayContext uldn_getContext(Windows::Win32::Intl::ULocaleDisplayNames* ldn, Windows::Win32::Intl::UDisplayContextType type, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_uldn_getContext(ldn, type, pErrorCode);
        return win32_impl_result;
    }
    inline int32_t ucurr_forLocale(int8_t* locale, uint16_t* buff, int32_t buffCapacity, Windows::Win32::Intl::UErrorCode* ec)
    {
        auto win32_impl_result = WIN32_IMPL_ucurr_forLocale(locale, buff, buffCapacity, ec);
        return win32_impl_result;
    }
    inline void* ucurr_register(uint16_t* isoCode, int8_t* locale, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucurr_register(isoCode, locale, status);
        return win32_impl_result;
    }
    inline int8_t ucurr_unregister(void* key, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucurr_unregister(key, status);
        return win32_impl_result;
    }
    inline uint16_t* ucurr_getName(uint16_t* currency, int8_t* locale, Windows::Win32::Intl::UCurrNameStyle nameStyle, int8_t* isChoiceFormat, int32_t* len, Windows::Win32::Intl::UErrorCode* ec)
    {
        auto win32_impl_result = WIN32_IMPL_ucurr_getName(currency, locale, nameStyle, isChoiceFormat, len, ec);
        return win32_impl_result;
    }
    inline uint16_t* ucurr_getPluralName(uint16_t* currency, int8_t* locale, int8_t* isChoiceFormat, int8_t* pluralCount, int32_t* len, Windows::Win32::Intl::UErrorCode* ec)
    {
        auto win32_impl_result = WIN32_IMPL_ucurr_getPluralName(currency, locale, isChoiceFormat, pluralCount, len, ec);
        return win32_impl_result;
    }
    inline int32_t ucurr_getDefaultFractionDigits(uint16_t* currency, Windows::Win32::Intl::UErrorCode* ec)
    {
        auto win32_impl_result = WIN32_IMPL_ucurr_getDefaultFractionDigits(currency, ec);
        return win32_impl_result;
    }
    inline int32_t ucurr_getDefaultFractionDigitsForUsage(uint16_t* currency, Windows::Win32::Intl::UCurrencyUsage usage, Windows::Win32::Intl::UErrorCode* ec)
    {
        auto win32_impl_result = WIN32_IMPL_ucurr_getDefaultFractionDigitsForUsage(currency, usage, ec);
        return win32_impl_result;
    }
    inline double ucurr_getRoundingIncrement(uint16_t* currency, Windows::Win32::Intl::UErrorCode* ec)
    {
        auto win32_impl_result = WIN32_IMPL_ucurr_getRoundingIncrement(currency, ec);
        return win32_impl_result;
    }
    inline double ucurr_getRoundingIncrementForUsage(uint16_t* currency, Windows::Win32::Intl::UCurrencyUsage usage, Windows::Win32::Intl::UErrorCode* ec)
    {
        auto win32_impl_result = WIN32_IMPL_ucurr_getRoundingIncrementForUsage(currency, usage, ec);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UEnumeration* ucurr_openISOCurrencies(uint32_t currType, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_ucurr_openISOCurrencies(currType, pErrorCode);
        return win32_impl_result;
    }
    inline int8_t ucurr_isAvailable(uint16_t* isoCode, double from, double to, Windows::Win32::Intl::UErrorCode* errorCode)
    {
        auto win32_impl_result = WIN32_IMPL_ucurr_isAvailable(isoCode, from, to, errorCode);
        return win32_impl_result;
    }
    inline int32_t ucurr_countCurrencies(int8_t* locale, double date, Windows::Win32::Intl::UErrorCode* ec)
    {
        auto win32_impl_result = WIN32_IMPL_ucurr_countCurrencies(locale, date, ec);
        return win32_impl_result;
    }
    inline int32_t ucurr_forLocaleAndDate(int8_t* locale, double date, int32_t index, uint16_t* buff, int32_t buffCapacity, Windows::Win32::Intl::UErrorCode* ec)
    {
        auto win32_impl_result = WIN32_IMPL_ucurr_forLocaleAndDate(locale, date, index, buff, buffCapacity, ec);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UEnumeration* ucurr_getKeywordValuesForLocale(int8_t* key, int8_t* locale, int8_t commonlyUsed, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucurr_getKeywordValuesForLocale(key, locale, commonlyUsed, status);
        return win32_impl_result;
    }
    inline int32_t ucurr_getNumericCode(uint16_t* currency)
    {
        auto win32_impl_result = WIN32_IMPL_ucurr_getNumericCode(currency);
        return win32_impl_result;
    }
    inline void UCNV_FROM_U_CALLBACK_STOP(void* context, Windows::Win32::Intl::UConverterFromUnicodeArgs* fromUArgs, uint16_t* codeUnits, int32_t length, int32_t codePoint, Windows::Win32::Intl::UConverterCallbackReason reason, Windows::Win32::Intl::UErrorCode* err)
    {
        WIN32_IMPL_UCNV_FROM_U_CALLBACK_STOP(context, fromUArgs, codeUnits, length, codePoint, reason, err);
    }
    inline void UCNV_TO_U_CALLBACK_STOP(void* context, Windows::Win32::Intl::UConverterToUnicodeArgs* toUArgs, int8_t* codeUnits, int32_t length, Windows::Win32::Intl::UConverterCallbackReason reason, Windows::Win32::Intl::UErrorCode* err)
    {
        WIN32_IMPL_UCNV_TO_U_CALLBACK_STOP(context, toUArgs, codeUnits, length, reason, err);
    }
    inline void UCNV_FROM_U_CALLBACK_SKIP(void* context, Windows::Win32::Intl::UConverterFromUnicodeArgs* fromUArgs, uint16_t* codeUnits, int32_t length, int32_t codePoint, Windows::Win32::Intl::UConverterCallbackReason reason, Windows::Win32::Intl::UErrorCode* err)
    {
        WIN32_IMPL_UCNV_FROM_U_CALLBACK_SKIP(context, fromUArgs, codeUnits, length, codePoint, reason, err);
    }
    inline void UCNV_FROM_U_CALLBACK_SUBSTITUTE(void* context, Windows::Win32::Intl::UConverterFromUnicodeArgs* fromUArgs, uint16_t* codeUnits, int32_t length, int32_t codePoint, Windows::Win32::Intl::UConverterCallbackReason reason, Windows::Win32::Intl::UErrorCode* err)
    {
        WIN32_IMPL_UCNV_FROM_U_CALLBACK_SUBSTITUTE(context, fromUArgs, codeUnits, length, codePoint, reason, err);
    }
    inline void UCNV_FROM_U_CALLBACK_ESCAPE(void* context, Windows::Win32::Intl::UConverterFromUnicodeArgs* fromUArgs, uint16_t* codeUnits, int32_t length, int32_t codePoint, Windows::Win32::Intl::UConverterCallbackReason reason, Windows::Win32::Intl::UErrorCode* err)
    {
        WIN32_IMPL_UCNV_FROM_U_CALLBACK_ESCAPE(context, fromUArgs, codeUnits, length, codePoint, reason, err);
    }
    inline void UCNV_TO_U_CALLBACK_SKIP(void* context, Windows::Win32::Intl::UConverterToUnicodeArgs* toUArgs, int8_t* codeUnits, int32_t length, Windows::Win32::Intl::UConverterCallbackReason reason, Windows::Win32::Intl::UErrorCode* err)
    {
        WIN32_IMPL_UCNV_TO_U_CALLBACK_SKIP(context, toUArgs, codeUnits, length, reason, err);
    }
    inline void UCNV_TO_U_CALLBACK_SUBSTITUTE(void* context, Windows::Win32::Intl::UConverterToUnicodeArgs* toUArgs, int8_t* codeUnits, int32_t length, Windows::Win32::Intl::UConverterCallbackReason reason, Windows::Win32::Intl::UErrorCode* err)
    {
        WIN32_IMPL_UCNV_TO_U_CALLBACK_SUBSTITUTE(context, toUArgs, codeUnits, length, reason, err);
    }
    inline void UCNV_TO_U_CALLBACK_ESCAPE(void* context, Windows::Win32::Intl::UConverterToUnicodeArgs* toUArgs, int8_t* codeUnits, int32_t length, Windows::Win32::Intl::UConverterCallbackReason reason, Windows::Win32::Intl::UErrorCode* err)
    {
        WIN32_IMPL_UCNV_TO_U_CALLBACK_ESCAPE(context, toUArgs, codeUnits, length, reason, err);
    }
    inline int32_t ucnv_compareNames(int8_t* name1, int8_t* name2)
    {
        auto win32_impl_result = WIN32_IMPL_ucnv_compareNames(name1, name2);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UConverter* ucnv_open(int8_t* converterName, Windows::Win32::Intl::UErrorCode* err)
    {
        auto win32_impl_result = WIN32_IMPL_ucnv_open(converterName, err);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UConverter* ucnv_openU(uint16_t* name, Windows::Win32::Intl::UErrorCode* err)
    {
        auto win32_impl_result = WIN32_IMPL_ucnv_openU(name, err);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UConverter* ucnv_openCCSID(int32_t codepage, Windows::Win32::Intl::UConverterPlatform platform, Windows::Win32::Intl::UErrorCode* err)
    {
        auto win32_impl_result = WIN32_IMPL_ucnv_openCCSID(codepage, platform, err);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UConverter* ucnv_openPackage(int8_t* packageName, int8_t* converterName, Windows::Win32::Intl::UErrorCode* err)
    {
        auto win32_impl_result = WIN32_IMPL_ucnv_openPackage(packageName, converterName, err);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UConverter* ucnv_safeClone(Windows::Win32::Intl::UConverter* cnv, void* stackBuffer, int32_t* pBufferSize, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucnv_safeClone(cnv, stackBuffer, pBufferSize, status);
        return win32_impl_result;
    }
    inline void ucnv_close(Windows::Win32::Intl::UConverter* converter)
    {
        WIN32_IMPL_ucnv_close(converter);
    }
    inline void ucnv_getSubstChars(Windows::Win32::Intl::UConverter* converter, int8_t* subChars, int8_t* len, Windows::Win32::Intl::UErrorCode* err)
    {
        WIN32_IMPL_ucnv_getSubstChars(converter, subChars, len, err);
    }
    inline void ucnv_setSubstChars(Windows::Win32::Intl::UConverter* converter, int8_t* subChars, int8_t len, Windows::Win32::Intl::UErrorCode* err)
    {
        WIN32_IMPL_ucnv_setSubstChars(converter, subChars, len, err);
    }
    inline void ucnv_setSubstString(Windows::Win32::Intl::UConverter* cnv, uint16_t* s, int32_t length, Windows::Win32::Intl::UErrorCode* err)
    {
        WIN32_IMPL_ucnv_setSubstString(cnv, s, length, err);
    }
    inline void ucnv_getInvalidChars(Windows::Win32::Intl::UConverter* converter, int8_t* errBytes, int8_t* len, Windows::Win32::Intl::UErrorCode* err)
    {
        WIN32_IMPL_ucnv_getInvalidChars(converter, errBytes, len, err);
    }
    inline void ucnv_getInvalidUChars(Windows::Win32::Intl::UConverter* converter, uint16_t* errUChars, int8_t* len, Windows::Win32::Intl::UErrorCode* err)
    {
        WIN32_IMPL_ucnv_getInvalidUChars(converter, errUChars, len, err);
    }
    inline void ucnv_reset(Windows::Win32::Intl::UConverter* converter)
    {
        WIN32_IMPL_ucnv_reset(converter);
    }
    inline void ucnv_resetToUnicode(Windows::Win32::Intl::UConverter* converter)
    {
        WIN32_IMPL_ucnv_resetToUnicode(converter);
    }
    inline void ucnv_resetFromUnicode(Windows::Win32::Intl::UConverter* converter)
    {
        WIN32_IMPL_ucnv_resetFromUnicode(converter);
    }
    inline int8_t ucnv_getMaxCharSize(Windows::Win32::Intl::UConverter* converter)
    {
        auto win32_impl_result = WIN32_IMPL_ucnv_getMaxCharSize(converter);
        return win32_impl_result;
    }
    inline int8_t ucnv_getMinCharSize(Windows::Win32::Intl::UConverter* converter)
    {
        auto win32_impl_result = WIN32_IMPL_ucnv_getMinCharSize(converter);
        return win32_impl_result;
    }
    inline int32_t ucnv_getDisplayName(Windows::Win32::Intl::UConverter* converter, int8_t* displayLocale, uint16_t* displayName, int32_t displayNameCapacity, Windows::Win32::Intl::UErrorCode* err)
    {
        auto win32_impl_result = WIN32_IMPL_ucnv_getDisplayName(converter, displayLocale, displayName, displayNameCapacity, err);
        return win32_impl_result;
    }
    inline int8_t* ucnv_getName(Windows::Win32::Intl::UConverter* converter, Windows::Win32::Intl::UErrorCode* err)
    {
        auto win32_impl_result = WIN32_IMPL_ucnv_getName(converter, err);
        return win32_impl_result;
    }
    inline int32_t ucnv_getCCSID(Windows::Win32::Intl::UConverter* converter, Windows::Win32::Intl::UErrorCode* err)
    {
        auto win32_impl_result = WIN32_IMPL_ucnv_getCCSID(converter, err);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UConverterPlatform ucnv_getPlatform(Windows::Win32::Intl::UConverter* converter, Windows::Win32::Intl::UErrorCode* err)
    {
        auto win32_impl_result = WIN32_IMPL_ucnv_getPlatform(converter, err);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UConverterType ucnv_getType(Windows::Win32::Intl::UConverter* converter)
    {
        auto win32_impl_result = WIN32_IMPL_ucnv_getType(converter);
        return win32_impl_result;
    }
    inline void ucnv_getStarters(Windows::Win32::Intl::UConverter* converter, int8_t* starters, Windows::Win32::Intl::UErrorCode* err)
    {
        WIN32_IMPL_ucnv_getStarters(converter, starters, err);
    }
    inline void ucnv_getUnicodeSet(Windows::Win32::Intl::UConverter* cnv, Windows::Win32::Intl::USet* setFillIn, Windows::Win32::Intl::UConverterUnicodeSet whichSet, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        WIN32_IMPL_ucnv_getUnicodeSet(cnv, setFillIn, whichSet, pErrorCode);
    }
    inline void ucnv_getToUCallBack(Windows::Win32::Intl::UConverter* converter, Windows::Win32::Intl::UConverterToUCallback** action, void** context)
    {
        WIN32_IMPL_ucnv_getToUCallBack(converter, action, context);
    }
    inline void ucnv_getFromUCallBack(Windows::Win32::Intl::UConverter* converter, Windows::Win32::Intl::UConverterFromUCallback** action, void** context)
    {
        WIN32_IMPL_ucnv_getFromUCallBack(converter, action, context);
    }
    inline void ucnv_setToUCallBack(Windows::Win32::Intl::UConverter* converter, Windows::Win32::Intl::UConverterToUCallback* newAction, void* newContext, Windows::Win32::Intl::UConverterToUCallback** oldAction, void** oldContext, Windows::Win32::Intl::UErrorCode* err)
    {
        WIN32_IMPL_ucnv_setToUCallBack(converter, newAction, newContext, oldAction, oldContext, err);
    }
    inline void ucnv_setFromUCallBack(Windows::Win32::Intl::UConverter* converter, Windows::Win32::Intl::UConverterFromUCallback* newAction, void* newContext, Windows::Win32::Intl::UConverterFromUCallback** oldAction, void** oldContext, Windows::Win32::Intl::UErrorCode* err)
    {
        WIN32_IMPL_ucnv_setFromUCallBack(converter, newAction, newContext, oldAction, oldContext, err);
    }
    inline void ucnv_fromUnicode(Windows::Win32::Intl::UConverter* converter, int8_t** target, int8_t* targetLimit, uint16_t** source, uint16_t* sourceLimit, int32_t* offsets, int8_t flush, Windows::Win32::Intl::UErrorCode* err)
    {
        WIN32_IMPL_ucnv_fromUnicode(converter, target, targetLimit, source, sourceLimit, offsets, flush, err);
    }
    inline void ucnv_toUnicode(Windows::Win32::Intl::UConverter* converter, uint16_t** target, uint16_t* targetLimit, int8_t** source, int8_t* sourceLimit, int32_t* offsets, int8_t flush, Windows::Win32::Intl::UErrorCode* err)
    {
        WIN32_IMPL_ucnv_toUnicode(converter, target, targetLimit, source, sourceLimit, offsets, flush, err);
    }
    inline int32_t ucnv_fromUChars(Windows::Win32::Intl::UConverter* cnv, int8_t* dest, int32_t destCapacity, uint16_t* src, int32_t srcLength, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_ucnv_fromUChars(cnv, dest, destCapacity, src, srcLength, pErrorCode);
        return win32_impl_result;
    }
    inline int32_t ucnv_toUChars(Windows::Win32::Intl::UConverter* cnv, uint16_t* dest, int32_t destCapacity, int8_t* src, int32_t srcLength, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_ucnv_toUChars(cnv, dest, destCapacity, src, srcLength, pErrorCode);
        return win32_impl_result;
    }
    inline int32_t ucnv_getNextUChar(Windows::Win32::Intl::UConverter* converter, int8_t** source, int8_t* sourceLimit, Windows::Win32::Intl::UErrorCode* err)
    {
        auto win32_impl_result = WIN32_IMPL_ucnv_getNextUChar(converter, source, sourceLimit, err);
        return win32_impl_result;
    }
    inline void ucnv_convertEx(Windows::Win32::Intl::UConverter* targetCnv, Windows::Win32::Intl::UConverter* sourceCnv, int8_t** target, int8_t* targetLimit, int8_t** source, int8_t* sourceLimit, uint16_t* pivotStart, uint16_t** pivotSource, uint16_t** pivotTarget, uint16_t* pivotLimit, int8_t reset, int8_t flush, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        WIN32_IMPL_ucnv_convertEx(targetCnv, sourceCnv, target, targetLimit, source, sourceLimit, pivotStart, pivotSource, pivotTarget, pivotLimit, reset, flush, pErrorCode);
    }
    inline int32_t ucnv_convert(int8_t* toConverterName, int8_t* fromConverterName, int8_t* target, int32_t targetCapacity, int8_t* source, int32_t sourceLength, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_ucnv_convert(toConverterName, fromConverterName, target, targetCapacity, source, sourceLength, pErrorCode);
        return win32_impl_result;
    }
    inline int32_t ucnv_toAlgorithmic(Windows::Win32::Intl::UConverterType algorithmicType, Windows::Win32::Intl::UConverter* cnv, int8_t* target, int32_t targetCapacity, int8_t* source, int32_t sourceLength, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_ucnv_toAlgorithmic(algorithmicType, cnv, target, targetCapacity, source, sourceLength, pErrorCode);
        return win32_impl_result;
    }
    inline int32_t ucnv_fromAlgorithmic(Windows::Win32::Intl::UConverter* cnv, Windows::Win32::Intl::UConverterType algorithmicType, int8_t* target, int32_t targetCapacity, int8_t* source, int32_t sourceLength, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_ucnv_fromAlgorithmic(cnv, algorithmicType, target, targetCapacity, source, sourceLength, pErrorCode);
        return win32_impl_result;
    }
    inline int32_t ucnv_flushCache()
    {
        auto win32_impl_result = WIN32_IMPL_ucnv_flushCache();
        return win32_impl_result;
    }
    inline int32_t ucnv_countAvailable()
    {
        auto win32_impl_result = WIN32_IMPL_ucnv_countAvailable();
        return win32_impl_result;
    }
    inline int8_t* ucnv_getAvailableName(int32_t n)
    {
        auto win32_impl_result = WIN32_IMPL_ucnv_getAvailableName(n);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UEnumeration* ucnv_openAllNames(Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_ucnv_openAllNames(pErrorCode);
        return win32_impl_result;
    }
    inline uint16_t ucnv_countAliases(int8_t* alias, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_ucnv_countAliases(alias, pErrorCode);
        return win32_impl_result;
    }
    inline int8_t* ucnv_getAlias(int8_t* alias, uint16_t n, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_ucnv_getAlias(alias, n, pErrorCode);
        return win32_impl_result;
    }
    inline void ucnv_getAliases(int8_t* alias, int8_t** aliases, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        WIN32_IMPL_ucnv_getAliases(alias, aliases, pErrorCode);
    }
    inline Windows::Win32::Intl::UEnumeration* ucnv_openStandardNames(int8_t* convName, int8_t* standard, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_ucnv_openStandardNames(convName, standard, pErrorCode);
        return win32_impl_result;
    }
    inline uint16_t ucnv_countStandards()
    {
        auto win32_impl_result = WIN32_IMPL_ucnv_countStandards();
        return win32_impl_result;
    }
    inline int8_t* ucnv_getStandard(uint16_t n, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_ucnv_getStandard(n, pErrorCode);
        return win32_impl_result;
    }
    inline int8_t* ucnv_getStandardName(int8_t* name, int8_t* standard, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_ucnv_getStandardName(name, standard, pErrorCode);
        return win32_impl_result;
    }
    inline int8_t* ucnv_getCanonicalName(int8_t* alias, int8_t* standard, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_ucnv_getCanonicalName(alias, standard, pErrorCode);
        return win32_impl_result;
    }
    inline int8_t* ucnv_getDefaultName()
    {
        auto win32_impl_result = WIN32_IMPL_ucnv_getDefaultName();
        return win32_impl_result;
    }
    inline void ucnv_setDefaultName(int8_t* name)
    {
        WIN32_IMPL_ucnv_setDefaultName(name);
    }
    inline void ucnv_fixFileSeparator(Windows::Win32::Intl::UConverter* cnv, uint16_t* source, int32_t sourceLen)
    {
        WIN32_IMPL_ucnv_fixFileSeparator(cnv, source, sourceLen);
    }
    inline int8_t ucnv_isAmbiguous(Windows::Win32::Intl::UConverter* cnv)
    {
        auto win32_impl_result = WIN32_IMPL_ucnv_isAmbiguous(cnv);
        return win32_impl_result;
    }
    inline void ucnv_setFallback(Windows::Win32::Intl::UConverter* cnv, int8_t usesFallback)
    {
        WIN32_IMPL_ucnv_setFallback(cnv, usesFallback);
    }
    inline int8_t ucnv_usesFallback(Windows::Win32::Intl::UConverter* cnv)
    {
        auto win32_impl_result = WIN32_IMPL_ucnv_usesFallback(cnv);
        return win32_impl_result;
    }
    inline int8_t* ucnv_detectUnicodeSignature(int8_t* source, int32_t sourceLength, int32_t* signatureLength, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_ucnv_detectUnicodeSignature(source, sourceLength, signatureLength, pErrorCode);
        return win32_impl_result;
    }
    inline int32_t ucnv_fromUCountPending(Windows::Win32::Intl::UConverter* cnv, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucnv_fromUCountPending(cnv, status);
        return win32_impl_result;
    }
    inline int32_t ucnv_toUCountPending(Windows::Win32::Intl::UConverter* cnv, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucnv_toUCountPending(cnv, status);
        return win32_impl_result;
    }
    inline int8_t ucnv_isFixedWidth(Windows::Win32::Intl::UConverter* cnv, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucnv_isFixedWidth(cnv, status);
        return win32_impl_result;
    }
    inline void ucnv_cbFromUWriteBytes(Windows::Win32::Intl::UConverterFromUnicodeArgs* args, int8_t* source, int32_t length, int32_t offsetIndex, Windows::Win32::Intl::UErrorCode* err)
    {
        WIN32_IMPL_ucnv_cbFromUWriteBytes(args, source, length, offsetIndex, err);
    }
    inline void ucnv_cbFromUWriteSub(Windows::Win32::Intl::UConverterFromUnicodeArgs* args, int32_t offsetIndex, Windows::Win32::Intl::UErrorCode* err)
    {
        WIN32_IMPL_ucnv_cbFromUWriteSub(args, offsetIndex, err);
    }
    inline void ucnv_cbFromUWriteUChars(Windows::Win32::Intl::UConverterFromUnicodeArgs* args, uint16_t** source, uint16_t* sourceLimit, int32_t offsetIndex, Windows::Win32::Intl::UErrorCode* err)
    {
        WIN32_IMPL_ucnv_cbFromUWriteUChars(args, source, sourceLimit, offsetIndex, err);
    }
    inline void ucnv_cbToUWriteUChars(Windows::Win32::Intl::UConverterToUnicodeArgs* args, uint16_t* source, int32_t length, int32_t offsetIndex, Windows::Win32::Intl::UErrorCode* err)
    {
        WIN32_IMPL_ucnv_cbToUWriteUChars(args, source, length, offsetIndex, err);
    }
    inline void ucnv_cbToUWriteSub(Windows::Win32::Intl::UConverterToUnicodeArgs* args, int32_t offsetIndex, Windows::Win32::Intl::UErrorCode* err)
    {
        WIN32_IMPL_ucnv_cbToUWriteSub(args, offsetIndex, err);
    }
    inline void u_init(Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_u_init(status);
    }
    inline void u_cleanup()
    {
        WIN32_IMPL_u_cleanup();
    }
    inline void u_setMemoryFunctions(void* context, Windows::Win32::Intl::UMemAllocFn** a, Windows::Win32::Intl::UMemReallocFn** r, Windows::Win32::Intl::UMemFreeFn** f, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_u_setMemoryFunctions(context, a, r, f, status);
    }
    inline Windows::Win32::Intl::UResourceBundle* u_catopen(int8_t* name, int8_t* locale, Windows::Win32::Intl::UErrorCode* ec)
    {
        auto win32_impl_result = WIN32_IMPL_u_catopen(name, locale, ec);
        return win32_impl_result;
    }
    inline void u_catclose(Windows::Win32::Intl::UResourceBundle* catd)
    {
        WIN32_IMPL_u_catclose(catd);
    }
    inline uint16_t* u_catgets(Windows::Win32::Intl::UResourceBundle* catd, int32_t set_num, int32_t msg_num, uint16_t* s, int32_t* len, Windows::Win32::Intl::UErrorCode* ec)
    {
        auto win32_impl_result = WIN32_IMPL_u_catgets(catd, set_num, msg_num, s, len, ec);
        return win32_impl_result;
    }
    inline int8_t u_hasBinaryProperty(int32_t c, Windows::Win32::Intl::UProperty which)
    {
        auto win32_impl_result = WIN32_IMPL_u_hasBinaryProperty(c, which);
        return win32_impl_result;
    }
    inline int8_t u_isUAlphabetic(int32_t c)
    {
        auto win32_impl_result = WIN32_IMPL_u_isUAlphabetic(c);
        return win32_impl_result;
    }
    inline int8_t u_isULowercase(int32_t c)
    {
        auto win32_impl_result = WIN32_IMPL_u_isULowercase(c);
        return win32_impl_result;
    }
    inline int8_t u_isUUppercase(int32_t c)
    {
        auto win32_impl_result = WIN32_IMPL_u_isUUppercase(c);
        return win32_impl_result;
    }
    inline int8_t u_isUWhiteSpace(int32_t c)
    {
        auto win32_impl_result = WIN32_IMPL_u_isUWhiteSpace(c);
        return win32_impl_result;
    }
    inline int32_t u_getIntPropertyValue(int32_t c, Windows::Win32::Intl::UProperty which)
    {
        auto win32_impl_result = WIN32_IMPL_u_getIntPropertyValue(c, which);
        return win32_impl_result;
    }
    inline int32_t u_getIntPropertyMinValue(Windows::Win32::Intl::UProperty which)
    {
        auto win32_impl_result = WIN32_IMPL_u_getIntPropertyMinValue(which);
        return win32_impl_result;
    }
    inline int32_t u_getIntPropertyMaxValue(Windows::Win32::Intl::UProperty which)
    {
        auto win32_impl_result = WIN32_IMPL_u_getIntPropertyMaxValue(which);
        return win32_impl_result;
    }
    inline double u_getNumericValue(int32_t c)
    {
        auto win32_impl_result = WIN32_IMPL_u_getNumericValue(c);
        return win32_impl_result;
    }
    inline int8_t u_islower(int32_t c)
    {
        auto win32_impl_result = WIN32_IMPL_u_islower(c);
        return win32_impl_result;
    }
    inline int8_t u_isupper(int32_t c)
    {
        auto win32_impl_result = WIN32_IMPL_u_isupper(c);
        return win32_impl_result;
    }
    inline int8_t u_istitle(int32_t c)
    {
        auto win32_impl_result = WIN32_IMPL_u_istitle(c);
        return win32_impl_result;
    }
    inline int8_t u_isdigit(int32_t c)
    {
        auto win32_impl_result = WIN32_IMPL_u_isdigit(c);
        return win32_impl_result;
    }
    inline int8_t u_isalpha(int32_t c)
    {
        auto win32_impl_result = WIN32_IMPL_u_isalpha(c);
        return win32_impl_result;
    }
    inline int8_t u_isalnum(int32_t c)
    {
        auto win32_impl_result = WIN32_IMPL_u_isalnum(c);
        return win32_impl_result;
    }
    inline int8_t u_isxdigit(int32_t c)
    {
        auto win32_impl_result = WIN32_IMPL_u_isxdigit(c);
        return win32_impl_result;
    }
    inline int8_t u_ispunct(int32_t c)
    {
        auto win32_impl_result = WIN32_IMPL_u_ispunct(c);
        return win32_impl_result;
    }
    inline int8_t u_isgraph(int32_t c)
    {
        auto win32_impl_result = WIN32_IMPL_u_isgraph(c);
        return win32_impl_result;
    }
    inline int8_t u_isblank(int32_t c)
    {
        auto win32_impl_result = WIN32_IMPL_u_isblank(c);
        return win32_impl_result;
    }
    inline int8_t u_isdefined(int32_t c)
    {
        auto win32_impl_result = WIN32_IMPL_u_isdefined(c);
        return win32_impl_result;
    }
    inline int8_t u_isspace(int32_t c)
    {
        auto win32_impl_result = WIN32_IMPL_u_isspace(c);
        return win32_impl_result;
    }
    inline int8_t u_isJavaSpaceChar(int32_t c)
    {
        auto win32_impl_result = WIN32_IMPL_u_isJavaSpaceChar(c);
        return win32_impl_result;
    }
    inline int8_t u_isWhitespace(int32_t c)
    {
        auto win32_impl_result = WIN32_IMPL_u_isWhitespace(c);
        return win32_impl_result;
    }
    inline int8_t u_iscntrl(int32_t c)
    {
        auto win32_impl_result = WIN32_IMPL_u_iscntrl(c);
        return win32_impl_result;
    }
    inline int8_t u_isISOControl(int32_t c)
    {
        auto win32_impl_result = WIN32_IMPL_u_isISOControl(c);
        return win32_impl_result;
    }
    inline int8_t u_isprint(int32_t c)
    {
        auto win32_impl_result = WIN32_IMPL_u_isprint(c);
        return win32_impl_result;
    }
    inline int8_t u_isbase(int32_t c)
    {
        auto win32_impl_result = WIN32_IMPL_u_isbase(c);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UCharDirection u_charDirection(int32_t c)
    {
        auto win32_impl_result = WIN32_IMPL_u_charDirection(c);
        return win32_impl_result;
    }
    inline int8_t u_isMirrored(int32_t c)
    {
        auto win32_impl_result = WIN32_IMPL_u_isMirrored(c);
        return win32_impl_result;
    }
    inline int32_t u_charMirror(int32_t c)
    {
        auto win32_impl_result = WIN32_IMPL_u_charMirror(c);
        return win32_impl_result;
    }
    inline int32_t u_getBidiPairedBracket(int32_t c)
    {
        auto win32_impl_result = WIN32_IMPL_u_getBidiPairedBracket(c);
        return win32_impl_result;
    }
    inline int8_t u_charType(int32_t c)
    {
        auto win32_impl_result = WIN32_IMPL_u_charType(c);
        return win32_impl_result;
    }
    inline void u_enumCharTypes(Windows::Win32::Intl::UCharEnumTypeRange** enumRange, void* context)
    {
        WIN32_IMPL_u_enumCharTypes(enumRange, context);
    }
    inline uint8_t u_getCombiningClass(int32_t c)
    {
        auto win32_impl_result = WIN32_IMPL_u_getCombiningClass(c);
        return win32_impl_result;
    }
    inline int32_t u_charDigitValue(int32_t c)
    {
        auto win32_impl_result = WIN32_IMPL_u_charDigitValue(c);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UBlockCode ublock_getCode(int32_t c)
    {
        auto win32_impl_result = WIN32_IMPL_ublock_getCode(c);
        return win32_impl_result;
    }
    inline int32_t u_charName(int32_t code, Windows::Win32::Intl::UCharNameChoice nameChoice, int8_t* buffer, int32_t bufferLength, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_u_charName(code, nameChoice, buffer, bufferLength, pErrorCode);
        return win32_impl_result;
    }
    inline int32_t u_charFromName(Windows::Win32::Intl::UCharNameChoice nameChoice, int8_t* name, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_u_charFromName(nameChoice, name, pErrorCode);
        return win32_impl_result;
    }
    inline void u_enumCharNames(int32_t start, int32_t limit, Windows::Win32::Intl::UEnumCharNamesFn** fn, void* context, Windows::Win32::Intl::UCharNameChoice nameChoice, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        WIN32_IMPL_u_enumCharNames(start, limit, fn, context, nameChoice, pErrorCode);
    }
    inline int8_t* u_getPropertyName(Windows::Win32::Intl::UProperty property, Windows::Win32::Intl::UPropertyNameChoice nameChoice)
    {
        auto win32_impl_result = WIN32_IMPL_u_getPropertyName(property, nameChoice);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UProperty u_getPropertyEnum(int8_t* alias)
    {
        auto win32_impl_result = WIN32_IMPL_u_getPropertyEnum(alias);
        return win32_impl_result;
    }
    inline int8_t* u_getPropertyValueName(Windows::Win32::Intl::UProperty property, int32_t value, Windows::Win32::Intl::UPropertyNameChoice nameChoice)
    {
        auto win32_impl_result = WIN32_IMPL_u_getPropertyValueName(property, value, nameChoice);
        return win32_impl_result;
    }
    inline int32_t u_getPropertyValueEnum(Windows::Win32::Intl::UProperty property, int8_t* alias)
    {
        auto win32_impl_result = WIN32_IMPL_u_getPropertyValueEnum(property, alias);
        return win32_impl_result;
    }
    inline int8_t u_isIDStart(int32_t c)
    {
        auto win32_impl_result = WIN32_IMPL_u_isIDStart(c);
        return win32_impl_result;
    }
    inline int8_t u_isIDPart(int32_t c)
    {
        auto win32_impl_result = WIN32_IMPL_u_isIDPart(c);
        return win32_impl_result;
    }
    inline int8_t u_isIDIgnorable(int32_t c)
    {
        auto win32_impl_result = WIN32_IMPL_u_isIDIgnorable(c);
        return win32_impl_result;
    }
    inline int8_t u_isJavaIDStart(int32_t c)
    {
        auto win32_impl_result = WIN32_IMPL_u_isJavaIDStart(c);
        return win32_impl_result;
    }
    inline int8_t u_isJavaIDPart(int32_t c)
    {
        auto win32_impl_result = WIN32_IMPL_u_isJavaIDPart(c);
        return win32_impl_result;
    }
    inline int32_t u_tolower(int32_t c)
    {
        auto win32_impl_result = WIN32_IMPL_u_tolower(c);
        return win32_impl_result;
    }
    inline int32_t u_toupper(int32_t c)
    {
        auto win32_impl_result = WIN32_IMPL_u_toupper(c);
        return win32_impl_result;
    }
    inline int32_t u_totitle(int32_t c)
    {
        auto win32_impl_result = WIN32_IMPL_u_totitle(c);
        return win32_impl_result;
    }
    inline int32_t u_foldCase(int32_t c, uint32_t options)
    {
        auto win32_impl_result = WIN32_IMPL_u_foldCase(c, options);
        return win32_impl_result;
    }
    inline int32_t u_digit(int32_t ch, int8_t radix)
    {
        auto win32_impl_result = WIN32_IMPL_u_digit(ch, radix);
        return win32_impl_result;
    }
    inline int32_t u_forDigit(int32_t digit, int8_t radix)
    {
        auto win32_impl_result = WIN32_IMPL_u_forDigit(digit, radix);
        return win32_impl_result;
    }
    inline void u_charAge(int32_t c, uint8_t* versionArray)
    {
        WIN32_IMPL_u_charAge(c, versionArray);
    }
    inline void u_getUnicodeVersion(uint8_t* versionArray)
    {
        WIN32_IMPL_u_getUnicodeVersion(versionArray);
    }
    inline int32_t u_getFC_NFKC_Closure(int32_t c, uint16_t* dest, int32_t destCapacity, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_u_getFC_NFKC_Closure(c, dest, destCapacity, pErrorCode);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UBiDi* ubidi_open()
    {
        auto win32_impl_result = WIN32_IMPL_ubidi_open();
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UBiDi* ubidi_openSized(int32_t maxLength, int32_t maxRunCount, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_ubidi_openSized(maxLength, maxRunCount, pErrorCode);
        return win32_impl_result;
    }
    inline void ubidi_close(Windows::Win32::Intl::UBiDi* pBiDi)
    {
        WIN32_IMPL_ubidi_close(pBiDi);
    }
    inline void ubidi_setInverse(Windows::Win32::Intl::UBiDi* pBiDi, int8_t isInverse)
    {
        WIN32_IMPL_ubidi_setInverse(pBiDi, isInverse);
    }
    inline int8_t ubidi_isInverse(Windows::Win32::Intl::UBiDi* pBiDi)
    {
        auto win32_impl_result = WIN32_IMPL_ubidi_isInverse(pBiDi);
        return win32_impl_result;
    }
    inline void ubidi_orderParagraphsLTR(Windows::Win32::Intl::UBiDi* pBiDi, int8_t orderParagraphsLTR)
    {
        WIN32_IMPL_ubidi_orderParagraphsLTR(pBiDi, orderParagraphsLTR);
    }
    inline int8_t ubidi_isOrderParagraphsLTR(Windows::Win32::Intl::UBiDi* pBiDi)
    {
        auto win32_impl_result = WIN32_IMPL_ubidi_isOrderParagraphsLTR(pBiDi);
        return win32_impl_result;
    }
    inline void ubidi_setReorderingMode(Windows::Win32::Intl::UBiDi* pBiDi, Windows::Win32::Intl::UBiDiReorderingMode reorderingMode)
    {
        WIN32_IMPL_ubidi_setReorderingMode(pBiDi, reorderingMode);
    }
    inline Windows::Win32::Intl::UBiDiReorderingMode ubidi_getReorderingMode(Windows::Win32::Intl::UBiDi* pBiDi)
    {
        auto win32_impl_result = WIN32_IMPL_ubidi_getReorderingMode(pBiDi);
        return win32_impl_result;
    }
    inline void ubidi_setReorderingOptions(Windows::Win32::Intl::UBiDi* pBiDi, uint32_t reorderingOptions)
    {
        WIN32_IMPL_ubidi_setReorderingOptions(pBiDi, reorderingOptions);
    }
    inline uint32_t ubidi_getReorderingOptions(Windows::Win32::Intl::UBiDi* pBiDi)
    {
        auto win32_impl_result = WIN32_IMPL_ubidi_getReorderingOptions(pBiDi);
        return win32_impl_result;
    }
    inline void ubidi_setContext(Windows::Win32::Intl::UBiDi* pBiDi, uint16_t* prologue, int32_t proLength, uint16_t* epilogue, int32_t epiLength, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        WIN32_IMPL_ubidi_setContext(pBiDi, prologue, proLength, epilogue, epiLength, pErrorCode);
    }
    inline void ubidi_setPara(Windows::Win32::Intl::UBiDi* pBiDi, uint16_t* text, int32_t length, uint8_t paraLevel, uint8_t* embeddingLevels, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        WIN32_IMPL_ubidi_setPara(pBiDi, text, length, paraLevel, embeddingLevels, pErrorCode);
    }
    inline void ubidi_setLine(Windows::Win32::Intl::UBiDi* pParaBiDi, int32_t start, int32_t limit, Windows::Win32::Intl::UBiDi* pLineBiDi, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        WIN32_IMPL_ubidi_setLine(pParaBiDi, start, limit, pLineBiDi, pErrorCode);
    }
    inline Windows::Win32::Intl::UBiDiDirection ubidi_getDirection(Windows::Win32::Intl::UBiDi* pBiDi)
    {
        auto win32_impl_result = WIN32_IMPL_ubidi_getDirection(pBiDi);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UBiDiDirection ubidi_getBaseDirection(uint16_t* text, int32_t length)
    {
        auto win32_impl_result = WIN32_IMPL_ubidi_getBaseDirection(text, length);
        return win32_impl_result;
    }
    inline uint16_t* ubidi_getText(Windows::Win32::Intl::UBiDi* pBiDi)
    {
        auto win32_impl_result = WIN32_IMPL_ubidi_getText(pBiDi);
        return win32_impl_result;
    }
    inline int32_t ubidi_getLength(Windows::Win32::Intl::UBiDi* pBiDi)
    {
        auto win32_impl_result = WIN32_IMPL_ubidi_getLength(pBiDi);
        return win32_impl_result;
    }
    inline uint8_t ubidi_getParaLevel(Windows::Win32::Intl::UBiDi* pBiDi)
    {
        auto win32_impl_result = WIN32_IMPL_ubidi_getParaLevel(pBiDi);
        return win32_impl_result;
    }
    inline int32_t ubidi_countParagraphs(Windows::Win32::Intl::UBiDi* pBiDi)
    {
        auto win32_impl_result = WIN32_IMPL_ubidi_countParagraphs(pBiDi);
        return win32_impl_result;
    }
    inline int32_t ubidi_getParagraph(Windows::Win32::Intl::UBiDi* pBiDi, int32_t charIndex, int32_t* pParaStart, int32_t* pParaLimit, uint8_t* pParaLevel, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_ubidi_getParagraph(pBiDi, charIndex, pParaStart, pParaLimit, pParaLevel, pErrorCode);
        return win32_impl_result;
    }
    inline void ubidi_getParagraphByIndex(Windows::Win32::Intl::UBiDi* pBiDi, int32_t paraIndex, int32_t* pParaStart, int32_t* pParaLimit, uint8_t* pParaLevel, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        WIN32_IMPL_ubidi_getParagraphByIndex(pBiDi, paraIndex, pParaStart, pParaLimit, pParaLevel, pErrorCode);
    }
    inline uint8_t ubidi_getLevelAt(Windows::Win32::Intl::UBiDi* pBiDi, int32_t charIndex)
    {
        auto win32_impl_result = WIN32_IMPL_ubidi_getLevelAt(pBiDi, charIndex);
        return win32_impl_result;
    }
    inline uint8_t* ubidi_getLevels(Windows::Win32::Intl::UBiDi* pBiDi, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_ubidi_getLevels(pBiDi, pErrorCode);
        return win32_impl_result;
    }
    inline void ubidi_getLogicalRun(Windows::Win32::Intl::UBiDi* pBiDi, int32_t logicalPosition, int32_t* pLogicalLimit, uint8_t* pLevel)
    {
        WIN32_IMPL_ubidi_getLogicalRun(pBiDi, logicalPosition, pLogicalLimit, pLevel);
    }
    inline int32_t ubidi_countRuns(Windows::Win32::Intl::UBiDi* pBiDi, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_ubidi_countRuns(pBiDi, pErrorCode);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UBiDiDirection ubidi_getVisualRun(Windows::Win32::Intl::UBiDi* pBiDi, int32_t runIndex, int32_t* pLogicalStart, int32_t* pLength)
    {
        auto win32_impl_result = WIN32_IMPL_ubidi_getVisualRun(pBiDi, runIndex, pLogicalStart, pLength);
        return win32_impl_result;
    }
    inline int32_t ubidi_getVisualIndex(Windows::Win32::Intl::UBiDi* pBiDi, int32_t logicalIndex, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_ubidi_getVisualIndex(pBiDi, logicalIndex, pErrorCode);
        return win32_impl_result;
    }
    inline int32_t ubidi_getLogicalIndex(Windows::Win32::Intl::UBiDi* pBiDi, int32_t visualIndex, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_ubidi_getLogicalIndex(pBiDi, visualIndex, pErrorCode);
        return win32_impl_result;
    }
    inline void ubidi_getLogicalMap(Windows::Win32::Intl::UBiDi* pBiDi, int32_t* indexMap, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        WIN32_IMPL_ubidi_getLogicalMap(pBiDi, indexMap, pErrorCode);
    }
    inline void ubidi_getVisualMap(Windows::Win32::Intl::UBiDi* pBiDi, int32_t* indexMap, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        WIN32_IMPL_ubidi_getVisualMap(pBiDi, indexMap, pErrorCode);
    }
    inline void ubidi_reorderLogical(uint8_t* levels, int32_t length, int32_t* indexMap)
    {
        WIN32_IMPL_ubidi_reorderLogical(levels, length, indexMap);
    }
    inline void ubidi_reorderVisual(uint8_t* levels, int32_t length, int32_t* indexMap)
    {
        WIN32_IMPL_ubidi_reorderVisual(levels, length, indexMap);
    }
    inline void ubidi_invertMap(int32_t* srcMap, int32_t* destMap, int32_t length)
    {
        WIN32_IMPL_ubidi_invertMap(srcMap, destMap, length);
    }
    inline int32_t ubidi_getProcessedLength(Windows::Win32::Intl::UBiDi* pBiDi)
    {
        auto win32_impl_result = WIN32_IMPL_ubidi_getProcessedLength(pBiDi);
        return win32_impl_result;
    }
    inline int32_t ubidi_getResultLength(Windows::Win32::Intl::UBiDi* pBiDi)
    {
        auto win32_impl_result = WIN32_IMPL_ubidi_getResultLength(pBiDi);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UCharDirection ubidi_getCustomizedClass(Windows::Win32::Intl::UBiDi* pBiDi, int32_t c)
    {
        auto win32_impl_result = WIN32_IMPL_ubidi_getCustomizedClass(pBiDi, c);
        return win32_impl_result;
    }
    inline void ubidi_setClassCallback(Windows::Win32::Intl::UBiDi* pBiDi, Windows::Win32::Intl::UBiDiClassCallback** newFn, void* newContext, Windows::Win32::Intl::UBiDiClassCallback*** oldFn, void** oldContext, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        WIN32_IMPL_ubidi_setClassCallback(pBiDi, newFn, newContext, oldFn, oldContext, pErrorCode);
    }
    inline void ubidi_getClassCallback(Windows::Win32::Intl::UBiDi* pBiDi, Windows::Win32::Intl::UBiDiClassCallback*** fn, void** context)
    {
        WIN32_IMPL_ubidi_getClassCallback(pBiDi, fn, context);
    }
    inline int32_t ubidi_writeReordered(Windows::Win32::Intl::UBiDi* pBiDi, uint16_t* dest, int32_t destSize, uint16_t options, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_ubidi_writeReordered(pBiDi, dest, destSize, options, pErrorCode);
        return win32_impl_result;
    }
    inline int32_t ubidi_writeReverse(uint16_t* src, int32_t srcLength, uint16_t* dest, int32_t destSize, uint16_t options, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_ubidi_writeReverse(src, srcLength, dest, destSize, options, pErrorCode);
        return win32_impl_result;
    }
    inline uint32_t ubiditransform_transform(Windows::Win32::Intl::UBiDiTransform* pBiDiTransform, uint16_t* src, int32_t srcLength, uint16_t* dest, int32_t destSize, uint8_t inParaLevel, Windows::Win32::Intl::UBiDiOrder inOrder, uint8_t outParaLevel, Windows::Win32::Intl::UBiDiOrder outOrder, Windows::Win32::Intl::UBiDiMirroring doMirroring, uint32_t shapingOptions, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_ubiditransform_transform(pBiDiTransform, src, srcLength, dest, destSize, inParaLevel, inOrder, outParaLevel, outOrder, doMirroring, shapingOptions, pErrorCode);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UBiDiTransform* ubiditransform_open(Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_ubiditransform_open(pErrorCode);
        return win32_impl_result;
    }
    inline void ubiditransform_close(Windows::Win32::Intl::UBiDiTransform* pBidiTransform)
    {
        WIN32_IMPL_ubiditransform_close(pBidiTransform);
    }
    inline Windows::Win32::Intl::UText* utext_close(Windows::Win32::Intl::UText* ut)
    {
        auto win32_impl_result = WIN32_IMPL_utext_close(ut);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UText* utext_openUTF8(Windows::Win32::Intl::UText* ut, int8_t* s, int64_t length, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_utext_openUTF8(ut, s, length, status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UText* utext_openUChars(Windows::Win32::Intl::UText* ut, uint16_t* s, int64_t length, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_utext_openUChars(ut, s, length, status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UText* utext_clone(Windows::Win32::Intl::UText* dest, Windows::Win32::Intl::UText* src, int8_t deep, int8_t readOnly, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_utext_clone(dest, src, deep, readOnly, status);
        return win32_impl_result;
    }
    inline int8_t utext_equals(Windows::Win32::Intl::UText* a, Windows::Win32::Intl::UText* b)
    {
        auto win32_impl_result = WIN32_IMPL_utext_equals(a, b);
        return win32_impl_result;
    }
    inline int64_t utext_nativeLength(Windows::Win32::Intl::UText* ut)
    {
        auto win32_impl_result = WIN32_IMPL_utext_nativeLength(ut);
        return win32_impl_result;
    }
    inline int8_t utext_isLengthExpensive(Windows::Win32::Intl::UText* ut)
    {
        auto win32_impl_result = WIN32_IMPL_utext_isLengthExpensive(ut);
        return win32_impl_result;
    }
    inline int32_t utext_char32At(Windows::Win32::Intl::UText* ut, int64_t nativeIndex)
    {
        auto win32_impl_result = WIN32_IMPL_utext_char32At(ut, nativeIndex);
        return win32_impl_result;
    }
    inline int32_t utext_current32(Windows::Win32::Intl::UText* ut)
    {
        auto win32_impl_result = WIN32_IMPL_utext_current32(ut);
        return win32_impl_result;
    }
    inline int32_t utext_next32(Windows::Win32::Intl::UText* ut)
    {
        auto win32_impl_result = WIN32_IMPL_utext_next32(ut);
        return win32_impl_result;
    }
    inline int32_t utext_previous32(Windows::Win32::Intl::UText* ut)
    {
        auto win32_impl_result = WIN32_IMPL_utext_previous32(ut);
        return win32_impl_result;
    }
    inline int32_t utext_next32From(Windows::Win32::Intl::UText* ut, int64_t nativeIndex)
    {
        auto win32_impl_result = WIN32_IMPL_utext_next32From(ut, nativeIndex);
        return win32_impl_result;
    }
    inline int32_t utext_previous32From(Windows::Win32::Intl::UText* ut, int64_t nativeIndex)
    {
        auto win32_impl_result = WIN32_IMPL_utext_previous32From(ut, nativeIndex);
        return win32_impl_result;
    }
    inline int64_t utext_getNativeIndex(Windows::Win32::Intl::UText* ut)
    {
        auto win32_impl_result = WIN32_IMPL_utext_getNativeIndex(ut);
        return win32_impl_result;
    }
    inline void utext_setNativeIndex(Windows::Win32::Intl::UText* ut, int64_t nativeIndex)
    {
        WIN32_IMPL_utext_setNativeIndex(ut, nativeIndex);
    }
    inline int8_t utext_moveIndex32(Windows::Win32::Intl::UText* ut, int32_t delta)
    {
        auto win32_impl_result = WIN32_IMPL_utext_moveIndex32(ut, delta);
        return win32_impl_result;
    }
    inline int64_t utext_getPreviousNativeIndex(Windows::Win32::Intl::UText* ut)
    {
        auto win32_impl_result = WIN32_IMPL_utext_getPreviousNativeIndex(ut);
        return win32_impl_result;
    }
    inline int32_t utext_extract(Windows::Win32::Intl::UText* ut, int64_t nativeStart, int64_t nativeLimit, uint16_t* dest, int32_t destCapacity, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_utext_extract(ut, nativeStart, nativeLimit, dest, destCapacity, status);
        return win32_impl_result;
    }
    inline int8_t utext_isWritable(Windows::Win32::Intl::UText* ut)
    {
        auto win32_impl_result = WIN32_IMPL_utext_isWritable(ut);
        return win32_impl_result;
    }
    inline int8_t utext_hasMetaData(Windows::Win32::Intl::UText* ut)
    {
        auto win32_impl_result = WIN32_IMPL_utext_hasMetaData(ut);
        return win32_impl_result;
    }
    inline int32_t utext_replace(Windows::Win32::Intl::UText* ut, int64_t nativeStart, int64_t nativeLimit, uint16_t* replacementText, int32_t replacementLength, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_utext_replace(ut, nativeStart, nativeLimit, replacementText, replacementLength, status);
        return win32_impl_result;
    }
    inline void utext_copy(Windows::Win32::Intl::UText* ut, int64_t nativeStart, int64_t nativeLimit, int64_t destIndex, int8_t move, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_utext_copy(ut, nativeStart, nativeLimit, destIndex, move, status);
    }
    inline void utext_freeze(Windows::Win32::Intl::UText* ut)
    {
        WIN32_IMPL_utext_freeze(ut);
    }
    inline Windows::Win32::Intl::UText* utext_setup(Windows::Win32::Intl::UText* ut, int32_t extraSpace, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_utext_setup(ut, extraSpace, status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::USet* uset_openEmpty()
    {
        auto win32_impl_result = WIN32_IMPL_uset_openEmpty();
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::USet* uset_open(int32_t start, int32_t end)
    {
        auto win32_impl_result = WIN32_IMPL_uset_open(start, end);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::USet* uset_openPattern(uint16_t* pattern, int32_t patternLength, Windows::Win32::Intl::UErrorCode* ec)
    {
        auto win32_impl_result = WIN32_IMPL_uset_openPattern(pattern, patternLength, ec);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::USet* uset_openPatternOptions(uint16_t* pattern, int32_t patternLength, uint32_t options, Windows::Win32::Intl::UErrorCode* ec)
    {
        auto win32_impl_result = WIN32_IMPL_uset_openPatternOptions(pattern, patternLength, options, ec);
        return win32_impl_result;
    }
    inline void uset_close(Windows::Win32::Intl::USet* set)
    {
        WIN32_IMPL_uset_close(set);
    }
    inline Windows::Win32::Intl::USet* uset_clone(Windows::Win32::Intl::USet* set)
    {
        auto win32_impl_result = WIN32_IMPL_uset_clone(set);
        return win32_impl_result;
    }
    inline int8_t uset_isFrozen(Windows::Win32::Intl::USet* set)
    {
        auto win32_impl_result = WIN32_IMPL_uset_isFrozen(set);
        return win32_impl_result;
    }
    inline void uset_freeze(Windows::Win32::Intl::USet* set)
    {
        WIN32_IMPL_uset_freeze(set);
    }
    inline Windows::Win32::Intl::USet* uset_cloneAsThawed(Windows::Win32::Intl::USet* set)
    {
        auto win32_impl_result = WIN32_IMPL_uset_cloneAsThawed(set);
        return win32_impl_result;
    }
    inline void uset_set(Windows::Win32::Intl::USet* set, int32_t start, int32_t end)
    {
        WIN32_IMPL_uset_set(set, start, end);
    }
    inline int32_t uset_applyPattern(Windows::Win32::Intl::USet* set, uint16_t* pattern, int32_t patternLength, uint32_t options, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uset_applyPattern(set, pattern, patternLength, options, status);
        return win32_impl_result;
    }
    inline void uset_applyIntPropertyValue(Windows::Win32::Intl::USet* set, Windows::Win32::Intl::UProperty prop, int32_t value, Windows::Win32::Intl::UErrorCode* ec)
    {
        WIN32_IMPL_uset_applyIntPropertyValue(set, prop, value, ec);
    }
    inline void uset_applyPropertyAlias(Windows::Win32::Intl::USet* set, uint16_t* prop, int32_t propLength, uint16_t* value, int32_t valueLength, Windows::Win32::Intl::UErrorCode* ec)
    {
        WIN32_IMPL_uset_applyPropertyAlias(set, prop, propLength, value, valueLength, ec);
    }
    inline int8_t uset_resemblesPattern(uint16_t* pattern, int32_t patternLength, int32_t pos)
    {
        auto win32_impl_result = WIN32_IMPL_uset_resemblesPattern(pattern, patternLength, pos);
        return win32_impl_result;
    }
    inline int32_t uset_toPattern(Windows::Win32::Intl::USet* set, uint16_t* result, int32_t resultCapacity, int8_t escapeUnprintable, Windows::Win32::Intl::UErrorCode* ec)
    {
        auto win32_impl_result = WIN32_IMPL_uset_toPattern(set, result, resultCapacity, escapeUnprintable, ec);
        return win32_impl_result;
    }
    inline void uset_add(Windows::Win32::Intl::USet* set, int32_t c)
    {
        WIN32_IMPL_uset_add(set, c);
    }
    inline void uset_addAll(Windows::Win32::Intl::USet* set, Windows::Win32::Intl::USet* additionalSet)
    {
        WIN32_IMPL_uset_addAll(set, additionalSet);
    }
    inline void uset_addRange(Windows::Win32::Intl::USet* set, int32_t start, int32_t end)
    {
        WIN32_IMPL_uset_addRange(set, start, end);
    }
    inline void uset_addString(Windows::Win32::Intl::USet* set, uint16_t* str, int32_t strLen)
    {
        WIN32_IMPL_uset_addString(set, str, strLen);
    }
    inline void uset_addAllCodePoints(Windows::Win32::Intl::USet* set, uint16_t* str, int32_t strLen)
    {
        WIN32_IMPL_uset_addAllCodePoints(set, str, strLen);
    }
    inline void uset_remove(Windows::Win32::Intl::USet* set, int32_t c)
    {
        WIN32_IMPL_uset_remove(set, c);
    }
    inline void uset_removeRange(Windows::Win32::Intl::USet* set, int32_t start, int32_t end)
    {
        WIN32_IMPL_uset_removeRange(set, start, end);
    }
    inline void uset_removeString(Windows::Win32::Intl::USet* set, uint16_t* str, int32_t strLen)
    {
        WIN32_IMPL_uset_removeString(set, str, strLen);
    }
    inline void uset_removeAll(Windows::Win32::Intl::USet* set, Windows::Win32::Intl::USet* removeSet)
    {
        WIN32_IMPL_uset_removeAll(set, removeSet);
    }
    inline void uset_retain(Windows::Win32::Intl::USet* set, int32_t start, int32_t end)
    {
        WIN32_IMPL_uset_retain(set, start, end);
    }
    inline void uset_retainAll(Windows::Win32::Intl::USet* set, Windows::Win32::Intl::USet* retain)
    {
        WIN32_IMPL_uset_retainAll(set, retain);
    }
    inline void uset_compact(Windows::Win32::Intl::USet* set)
    {
        WIN32_IMPL_uset_compact(set);
    }
    inline void uset_complement(Windows::Win32::Intl::USet* set)
    {
        WIN32_IMPL_uset_complement(set);
    }
    inline void uset_complementAll(Windows::Win32::Intl::USet* set, Windows::Win32::Intl::USet* complement)
    {
        WIN32_IMPL_uset_complementAll(set, complement);
    }
    inline void uset_clear(Windows::Win32::Intl::USet* set)
    {
        WIN32_IMPL_uset_clear(set);
    }
    inline void uset_closeOver(Windows::Win32::Intl::USet* set, int32_t attributes)
    {
        WIN32_IMPL_uset_closeOver(set, attributes);
    }
    inline void uset_removeAllStrings(Windows::Win32::Intl::USet* set)
    {
        WIN32_IMPL_uset_removeAllStrings(set);
    }
    inline int8_t uset_isEmpty(Windows::Win32::Intl::USet* set)
    {
        auto win32_impl_result = WIN32_IMPL_uset_isEmpty(set);
        return win32_impl_result;
    }
    inline int8_t uset_contains(Windows::Win32::Intl::USet* set, int32_t c)
    {
        auto win32_impl_result = WIN32_IMPL_uset_contains(set, c);
        return win32_impl_result;
    }
    inline int8_t uset_containsRange(Windows::Win32::Intl::USet* set, int32_t start, int32_t end)
    {
        auto win32_impl_result = WIN32_IMPL_uset_containsRange(set, start, end);
        return win32_impl_result;
    }
    inline int8_t uset_containsString(Windows::Win32::Intl::USet* set, uint16_t* str, int32_t strLen)
    {
        auto win32_impl_result = WIN32_IMPL_uset_containsString(set, str, strLen);
        return win32_impl_result;
    }
    inline int32_t uset_indexOf(Windows::Win32::Intl::USet* set, int32_t c)
    {
        auto win32_impl_result = WIN32_IMPL_uset_indexOf(set, c);
        return win32_impl_result;
    }
    inline int32_t uset_charAt(Windows::Win32::Intl::USet* set, int32_t charIndex)
    {
        auto win32_impl_result = WIN32_IMPL_uset_charAt(set, charIndex);
        return win32_impl_result;
    }
    inline int32_t uset_size(Windows::Win32::Intl::USet* set)
    {
        auto win32_impl_result = WIN32_IMPL_uset_size(set);
        return win32_impl_result;
    }
    inline int32_t uset_getItemCount(Windows::Win32::Intl::USet* set)
    {
        auto win32_impl_result = WIN32_IMPL_uset_getItemCount(set);
        return win32_impl_result;
    }
    inline int32_t uset_getItem(Windows::Win32::Intl::USet* set, int32_t itemIndex, int32_t* start, int32_t* end, uint16_t* str, int32_t strCapacity, Windows::Win32::Intl::UErrorCode* ec)
    {
        auto win32_impl_result = WIN32_IMPL_uset_getItem(set, itemIndex, start, end, str, strCapacity, ec);
        return win32_impl_result;
    }
    inline int8_t uset_containsAll(Windows::Win32::Intl::USet* set1, Windows::Win32::Intl::USet* set2)
    {
        auto win32_impl_result = WIN32_IMPL_uset_containsAll(set1, set2);
        return win32_impl_result;
    }
    inline int8_t uset_containsAllCodePoints(Windows::Win32::Intl::USet* set, uint16_t* str, int32_t strLen)
    {
        auto win32_impl_result = WIN32_IMPL_uset_containsAllCodePoints(set, str, strLen);
        return win32_impl_result;
    }
    inline int8_t uset_containsNone(Windows::Win32::Intl::USet* set1, Windows::Win32::Intl::USet* set2)
    {
        auto win32_impl_result = WIN32_IMPL_uset_containsNone(set1, set2);
        return win32_impl_result;
    }
    inline int8_t uset_containsSome(Windows::Win32::Intl::USet* set1, Windows::Win32::Intl::USet* set2)
    {
        auto win32_impl_result = WIN32_IMPL_uset_containsSome(set1, set2);
        return win32_impl_result;
    }
    inline int32_t uset_span(Windows::Win32::Intl::USet* set, uint16_t* s, int32_t length, Windows::Win32::Intl::USetSpanCondition spanCondition)
    {
        auto win32_impl_result = WIN32_IMPL_uset_span(set, s, length, spanCondition);
        return win32_impl_result;
    }
    inline int32_t uset_spanBack(Windows::Win32::Intl::USet* set, uint16_t* s, int32_t length, Windows::Win32::Intl::USetSpanCondition spanCondition)
    {
        auto win32_impl_result = WIN32_IMPL_uset_spanBack(set, s, length, spanCondition);
        return win32_impl_result;
    }
    inline int32_t uset_spanUTF8(Windows::Win32::Intl::USet* set, int8_t* s, int32_t length, Windows::Win32::Intl::USetSpanCondition spanCondition)
    {
        auto win32_impl_result = WIN32_IMPL_uset_spanUTF8(set, s, length, spanCondition);
        return win32_impl_result;
    }
    inline int32_t uset_spanBackUTF8(Windows::Win32::Intl::USet* set, int8_t* s, int32_t length, Windows::Win32::Intl::USetSpanCondition spanCondition)
    {
        auto win32_impl_result = WIN32_IMPL_uset_spanBackUTF8(set, s, length, spanCondition);
        return win32_impl_result;
    }
    inline int8_t uset_equals(Windows::Win32::Intl::USet* set1, Windows::Win32::Intl::USet* set2)
    {
        auto win32_impl_result = WIN32_IMPL_uset_equals(set1, set2);
        return win32_impl_result;
    }
    inline int32_t uset_serialize(Windows::Win32::Intl::USet* set, uint16_t* dest, int32_t destCapacity, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_uset_serialize(set, dest, destCapacity, pErrorCode);
        return win32_impl_result;
    }
    inline int8_t uset_getSerializedSet(Windows::Win32::Intl::USerializedSet* fillSet, uint16_t* src, int32_t srcLength)
    {
        auto win32_impl_result = WIN32_IMPL_uset_getSerializedSet(fillSet, src, srcLength);
        return win32_impl_result;
    }
    inline void uset_setSerializedToOne(Windows::Win32::Intl::USerializedSet* fillSet, int32_t c)
    {
        WIN32_IMPL_uset_setSerializedToOne(fillSet, c);
    }
    inline int8_t uset_serializedContains(Windows::Win32::Intl::USerializedSet* set, int32_t c)
    {
        auto win32_impl_result = WIN32_IMPL_uset_serializedContains(set, c);
        return win32_impl_result;
    }
    inline int32_t uset_getSerializedRangeCount(Windows::Win32::Intl::USerializedSet* set)
    {
        auto win32_impl_result = WIN32_IMPL_uset_getSerializedRangeCount(set);
        return win32_impl_result;
    }
    inline int8_t uset_getSerializedRange(Windows::Win32::Intl::USerializedSet* set, int32_t rangeIndex, int32_t* pStart, int32_t* pEnd)
    {
        auto win32_impl_result = WIN32_IMPL_uset_getSerializedRange(set, rangeIndex, pStart, pEnd);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UNormalizer2* unorm2_getNFCInstance(Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_unorm2_getNFCInstance(pErrorCode);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UNormalizer2* unorm2_getNFDInstance(Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_unorm2_getNFDInstance(pErrorCode);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UNormalizer2* unorm2_getNFKCInstance(Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_unorm2_getNFKCInstance(pErrorCode);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UNormalizer2* unorm2_getNFKDInstance(Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_unorm2_getNFKDInstance(pErrorCode);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UNormalizer2* unorm2_getNFKCCasefoldInstance(Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_unorm2_getNFKCCasefoldInstance(pErrorCode);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UNormalizer2* unorm2_getInstance(int8_t* packageName, int8_t* name, Windows::Win32::Intl::UNormalization2Mode mode, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_unorm2_getInstance(packageName, name, mode, pErrorCode);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UNormalizer2* unorm2_openFiltered(Windows::Win32::Intl::UNormalizer2* norm2, Windows::Win32::Intl::USet* filterSet, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_unorm2_openFiltered(norm2, filterSet, pErrorCode);
        return win32_impl_result;
    }
    inline void unorm2_close(Windows::Win32::Intl::UNormalizer2* norm2)
    {
        WIN32_IMPL_unorm2_close(norm2);
    }
    inline int32_t unorm2_normalize(Windows::Win32::Intl::UNormalizer2* norm2, uint16_t* src, int32_t length, uint16_t* dest, int32_t capacity, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_unorm2_normalize(norm2, src, length, dest, capacity, pErrorCode);
        return win32_impl_result;
    }
    inline int32_t unorm2_normalizeSecondAndAppend(Windows::Win32::Intl::UNormalizer2* norm2, uint16_t* first, int32_t firstLength, int32_t firstCapacity, uint16_t* second, int32_t secondLength, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_unorm2_normalizeSecondAndAppend(norm2, first, firstLength, firstCapacity, second, secondLength, pErrorCode);
        return win32_impl_result;
    }
    inline int32_t unorm2_append(Windows::Win32::Intl::UNormalizer2* norm2, uint16_t* first, int32_t firstLength, int32_t firstCapacity, uint16_t* second, int32_t secondLength, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_unorm2_append(norm2, first, firstLength, firstCapacity, second, secondLength, pErrorCode);
        return win32_impl_result;
    }
    inline int32_t unorm2_getDecomposition(Windows::Win32::Intl::UNormalizer2* norm2, int32_t c, uint16_t* decomposition, int32_t capacity, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_unorm2_getDecomposition(norm2, c, decomposition, capacity, pErrorCode);
        return win32_impl_result;
    }
    inline int32_t unorm2_getRawDecomposition(Windows::Win32::Intl::UNormalizer2* norm2, int32_t c, uint16_t* decomposition, int32_t capacity, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_unorm2_getRawDecomposition(norm2, c, decomposition, capacity, pErrorCode);
        return win32_impl_result;
    }
    inline int32_t unorm2_composePair(Windows::Win32::Intl::UNormalizer2* norm2, int32_t a, int32_t b)
    {
        auto win32_impl_result = WIN32_IMPL_unorm2_composePair(norm2, a, b);
        return win32_impl_result;
    }
    inline uint8_t unorm2_getCombiningClass(Windows::Win32::Intl::UNormalizer2* norm2, int32_t c)
    {
        auto win32_impl_result = WIN32_IMPL_unorm2_getCombiningClass(norm2, c);
        return win32_impl_result;
    }
    inline int8_t unorm2_isNormalized(Windows::Win32::Intl::UNormalizer2* norm2, uint16_t* s, int32_t length, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_unorm2_isNormalized(norm2, s, length, pErrorCode);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UNormalizationCheckResult unorm2_quickCheck(Windows::Win32::Intl::UNormalizer2* norm2, uint16_t* s, int32_t length, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_unorm2_quickCheck(norm2, s, length, pErrorCode);
        return win32_impl_result;
    }
    inline int32_t unorm2_spanQuickCheckYes(Windows::Win32::Intl::UNormalizer2* norm2, uint16_t* s, int32_t length, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_unorm2_spanQuickCheckYes(norm2, s, length, pErrorCode);
        return win32_impl_result;
    }
    inline int8_t unorm2_hasBoundaryBefore(Windows::Win32::Intl::UNormalizer2* norm2, int32_t c)
    {
        auto win32_impl_result = WIN32_IMPL_unorm2_hasBoundaryBefore(norm2, c);
        return win32_impl_result;
    }
    inline int8_t unorm2_hasBoundaryAfter(Windows::Win32::Intl::UNormalizer2* norm2, int32_t c)
    {
        auto win32_impl_result = WIN32_IMPL_unorm2_hasBoundaryAfter(norm2, c);
        return win32_impl_result;
    }
    inline int8_t unorm2_isInert(Windows::Win32::Intl::UNormalizer2* norm2, int32_t c)
    {
        auto win32_impl_result = WIN32_IMPL_unorm2_isInert(norm2, c);
        return win32_impl_result;
    }
    inline int32_t unorm_compare(uint16_t* s1, int32_t length1, uint16_t* s2, int32_t length2, uint32_t options, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_unorm_compare(s1, length1, s2, length2, options, pErrorCode);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UConverterSelector* ucnvsel_open(int8_t** converterList, int32_t converterListSize, Windows::Win32::Intl::USet* excludedCodePoints, Windows::Win32::Intl::UConverterUnicodeSet whichSet, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucnvsel_open(converterList, converterListSize, excludedCodePoints, whichSet, status);
        return win32_impl_result;
    }
    inline void ucnvsel_close(Windows::Win32::Intl::UConverterSelector* sel)
    {
        WIN32_IMPL_ucnvsel_close(sel);
    }
    inline Windows::Win32::Intl::UConverterSelector* ucnvsel_openFromSerialized(void* buffer, int32_t length, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucnvsel_openFromSerialized(buffer, length, status);
        return win32_impl_result;
    }
    inline int32_t ucnvsel_serialize(Windows::Win32::Intl::UConverterSelector* sel, void* buffer, int32_t bufferCapacity, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucnvsel_serialize(sel, buffer, bufferCapacity, status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UEnumeration* ucnvsel_selectForString(Windows::Win32::Intl::UConverterSelector* sel, uint16_t* s, int32_t length, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucnvsel_selectForString(sel, s, length, status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UEnumeration* ucnvsel_selectForUTF8(Windows::Win32::Intl::UConverterSelector* sel, int8_t* s, int32_t length, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucnvsel_selectForUTF8(sel, s, length, status);
        return win32_impl_result;
    }
    inline void u_charsToUChars(int8_t* cs, uint16_t* us, int32_t length)
    {
        WIN32_IMPL_u_charsToUChars(cs, us, length);
    }
    inline void u_UCharsToChars(uint16_t* us, int8_t* cs, int32_t length)
    {
        WIN32_IMPL_u_UCharsToChars(us, cs, length);
    }
    inline int32_t u_strlen(uint16_t* s)
    {
        auto win32_impl_result = WIN32_IMPL_u_strlen(s);
        return win32_impl_result;
    }
    inline int32_t u_countChar32(uint16_t* s, int32_t length)
    {
        auto win32_impl_result = WIN32_IMPL_u_countChar32(s, length);
        return win32_impl_result;
    }
    inline int8_t u_strHasMoreChar32Than(uint16_t* s, int32_t length, int32_t number)
    {
        auto win32_impl_result = WIN32_IMPL_u_strHasMoreChar32Than(s, length, number);
        return win32_impl_result;
    }
    inline uint16_t* u_strcat(uint16_t* dst, uint16_t* src)
    {
        auto win32_impl_result = WIN32_IMPL_u_strcat(dst, src);
        return win32_impl_result;
    }
    inline uint16_t* u_strncat(uint16_t* dst, uint16_t* src, int32_t n)
    {
        auto win32_impl_result = WIN32_IMPL_u_strncat(dst, src, n);
        return win32_impl_result;
    }
    inline uint16_t* u_strstr(uint16_t* s, uint16_t* substring)
    {
        auto win32_impl_result = WIN32_IMPL_u_strstr(s, substring);
        return win32_impl_result;
    }
    inline uint16_t* u_strFindFirst(uint16_t* s, int32_t length, uint16_t* substring, int32_t subLength)
    {
        auto win32_impl_result = WIN32_IMPL_u_strFindFirst(s, length, substring, subLength);
        return win32_impl_result;
    }
    inline uint16_t* u_strchr(uint16_t* s, uint16_t c)
    {
        auto win32_impl_result = WIN32_IMPL_u_strchr(s, c);
        return win32_impl_result;
    }
    inline uint16_t* u_strchr32(uint16_t* s, int32_t c)
    {
        auto win32_impl_result = WIN32_IMPL_u_strchr32(s, c);
        return win32_impl_result;
    }
    inline uint16_t* u_strrstr(uint16_t* s, uint16_t* substring)
    {
        auto win32_impl_result = WIN32_IMPL_u_strrstr(s, substring);
        return win32_impl_result;
    }
    inline uint16_t* u_strFindLast(uint16_t* s, int32_t length, uint16_t* substring, int32_t subLength)
    {
        auto win32_impl_result = WIN32_IMPL_u_strFindLast(s, length, substring, subLength);
        return win32_impl_result;
    }
    inline uint16_t* u_strrchr(uint16_t* s, uint16_t c)
    {
        auto win32_impl_result = WIN32_IMPL_u_strrchr(s, c);
        return win32_impl_result;
    }
    inline uint16_t* u_strrchr32(uint16_t* s, int32_t c)
    {
        auto win32_impl_result = WIN32_IMPL_u_strrchr32(s, c);
        return win32_impl_result;
    }
    inline uint16_t* u_strpbrk(uint16_t* string, uint16_t* matchSet)
    {
        auto win32_impl_result = WIN32_IMPL_u_strpbrk(string, matchSet);
        return win32_impl_result;
    }
    inline int32_t u_strcspn(uint16_t* string, uint16_t* matchSet)
    {
        auto win32_impl_result = WIN32_IMPL_u_strcspn(string, matchSet);
        return win32_impl_result;
    }
    inline int32_t u_strspn(uint16_t* string, uint16_t* matchSet)
    {
        auto win32_impl_result = WIN32_IMPL_u_strspn(string, matchSet);
        return win32_impl_result;
    }
    inline uint16_t* u_strtok_r(uint16_t* src, uint16_t* delim, uint16_t** saveState)
    {
        auto win32_impl_result = WIN32_IMPL_u_strtok_r(src, delim, saveState);
        return win32_impl_result;
    }
    inline int32_t u_strcmp(uint16_t* s1, uint16_t* s2)
    {
        auto win32_impl_result = WIN32_IMPL_u_strcmp(s1, s2);
        return win32_impl_result;
    }
    inline int32_t u_strcmpCodePointOrder(uint16_t* s1, uint16_t* s2)
    {
        auto win32_impl_result = WIN32_IMPL_u_strcmpCodePointOrder(s1, s2);
        return win32_impl_result;
    }
    inline int32_t u_strCompare(uint16_t* s1, int32_t length1, uint16_t* s2, int32_t length2, int8_t codePointOrder)
    {
        auto win32_impl_result = WIN32_IMPL_u_strCompare(s1, length1, s2, length2, codePointOrder);
        return win32_impl_result;
    }
    inline int32_t u_strCompareIter(Windows::Win32::Intl::UCharIterator* iter1, Windows::Win32::Intl::UCharIterator* iter2, int8_t codePointOrder)
    {
        auto win32_impl_result = WIN32_IMPL_u_strCompareIter(iter1, iter2, codePointOrder);
        return win32_impl_result;
    }
    inline int32_t u_strCaseCompare(uint16_t* s1, int32_t length1, uint16_t* s2, int32_t length2, uint32_t options, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_u_strCaseCompare(s1, length1, s2, length2, options, pErrorCode);
        return win32_impl_result;
    }
    inline int32_t u_strncmp(uint16_t* ucs1, uint16_t* ucs2, int32_t n)
    {
        auto win32_impl_result = WIN32_IMPL_u_strncmp(ucs1, ucs2, n);
        return win32_impl_result;
    }
    inline int32_t u_strncmpCodePointOrder(uint16_t* s1, uint16_t* s2, int32_t n)
    {
        auto win32_impl_result = WIN32_IMPL_u_strncmpCodePointOrder(s1, s2, n);
        return win32_impl_result;
    }
    inline int32_t u_strcasecmp(uint16_t* s1, uint16_t* s2, uint32_t options)
    {
        auto win32_impl_result = WIN32_IMPL_u_strcasecmp(s1, s2, options);
        return win32_impl_result;
    }
    inline int32_t u_strncasecmp(uint16_t* s1, uint16_t* s2, int32_t n, uint32_t options)
    {
        auto win32_impl_result = WIN32_IMPL_u_strncasecmp(s1, s2, n, options);
        return win32_impl_result;
    }
    inline int32_t u_memcasecmp(uint16_t* s1, uint16_t* s2, int32_t length, uint32_t options)
    {
        auto win32_impl_result = WIN32_IMPL_u_memcasecmp(s1, s2, length, options);
        return win32_impl_result;
    }
    inline uint16_t* u_strcpy(uint16_t* dst, uint16_t* src)
    {
        auto win32_impl_result = WIN32_IMPL_u_strcpy(dst, src);
        return win32_impl_result;
    }
    inline uint16_t* u_strncpy(uint16_t* dst, uint16_t* src, int32_t n)
    {
        auto win32_impl_result = WIN32_IMPL_u_strncpy(dst, src, n);
        return win32_impl_result;
    }
    inline uint16_t* u_uastrcpy(uint16_t* dst, int8_t* src)
    {
        auto win32_impl_result = WIN32_IMPL_u_uastrcpy(dst, src);
        return win32_impl_result;
    }
    inline uint16_t* u_uastrncpy(uint16_t* dst, int8_t* src, int32_t n)
    {
        auto win32_impl_result = WIN32_IMPL_u_uastrncpy(dst, src, n);
        return win32_impl_result;
    }
    inline int8_t* u_austrcpy(int8_t* dst, uint16_t* src)
    {
        auto win32_impl_result = WIN32_IMPL_u_austrcpy(dst, src);
        return win32_impl_result;
    }
    inline int8_t* u_austrncpy(int8_t* dst, uint16_t* src, int32_t n)
    {
        auto win32_impl_result = WIN32_IMPL_u_austrncpy(dst, src, n);
        return win32_impl_result;
    }
    inline uint16_t* u_memcpy(uint16_t* dest, uint16_t* src, int32_t count)
    {
        auto win32_impl_result = WIN32_IMPL_u_memcpy(dest, src, count);
        return win32_impl_result;
    }
    inline uint16_t* u_memmove(uint16_t* dest, uint16_t* src, int32_t count)
    {
        auto win32_impl_result = WIN32_IMPL_u_memmove(dest, src, count);
        return win32_impl_result;
    }
    inline uint16_t* u_memset(uint16_t* dest, uint16_t c, int32_t count)
    {
        auto win32_impl_result = WIN32_IMPL_u_memset(dest, c, count);
        return win32_impl_result;
    }
    inline int32_t u_memcmp(uint16_t* buf1, uint16_t* buf2, int32_t count)
    {
        auto win32_impl_result = WIN32_IMPL_u_memcmp(buf1, buf2, count);
        return win32_impl_result;
    }
    inline int32_t u_memcmpCodePointOrder(uint16_t* s1, uint16_t* s2, int32_t count)
    {
        auto win32_impl_result = WIN32_IMPL_u_memcmpCodePointOrder(s1, s2, count);
        return win32_impl_result;
    }
    inline uint16_t* u_memchr(uint16_t* s, uint16_t c, int32_t count)
    {
        auto win32_impl_result = WIN32_IMPL_u_memchr(s, c, count);
        return win32_impl_result;
    }
    inline uint16_t* u_memchr32(uint16_t* s, int32_t c, int32_t count)
    {
        auto win32_impl_result = WIN32_IMPL_u_memchr32(s, c, count);
        return win32_impl_result;
    }
    inline uint16_t* u_memrchr(uint16_t* s, uint16_t c, int32_t count)
    {
        auto win32_impl_result = WIN32_IMPL_u_memrchr(s, c, count);
        return win32_impl_result;
    }
    inline uint16_t* u_memrchr32(uint16_t* s, int32_t c, int32_t count)
    {
        auto win32_impl_result = WIN32_IMPL_u_memrchr32(s, c, count);
        return win32_impl_result;
    }
    inline int32_t u_unescape(int8_t* src, uint16_t* dest, int32_t destCapacity)
    {
        auto win32_impl_result = WIN32_IMPL_u_unescape(src, dest, destCapacity);
        return win32_impl_result;
    }
    inline int32_t u_unescapeAt(Windows::Win32::Intl::UNESCAPE_CHAR_AT* charAt, int32_t* offset, int32_t length, void* context)
    {
        auto win32_impl_result = WIN32_IMPL_u_unescapeAt(charAt, offset, length, context);
        return win32_impl_result;
    }
    inline int32_t u_strToUpper(uint16_t* dest, int32_t destCapacity, uint16_t* src, int32_t srcLength, int8_t* locale, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_u_strToUpper(dest, destCapacity, src, srcLength, locale, pErrorCode);
        return win32_impl_result;
    }
    inline int32_t u_strToLower(uint16_t* dest, int32_t destCapacity, uint16_t* src, int32_t srcLength, int8_t* locale, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_u_strToLower(dest, destCapacity, src, srcLength, locale, pErrorCode);
        return win32_impl_result;
    }
    inline int32_t u_strToTitle(uint16_t* dest, int32_t destCapacity, uint16_t* src, int32_t srcLength, Windows::Win32::Intl::UBreakIterator* titleIter, int8_t* locale, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_u_strToTitle(dest, destCapacity, src, srcLength, titleIter, locale, pErrorCode);
        return win32_impl_result;
    }
    inline int32_t u_strFoldCase(uint16_t* dest, int32_t destCapacity, uint16_t* src, int32_t srcLength, uint32_t options, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_u_strFoldCase(dest, destCapacity, src, srcLength, options, pErrorCode);
        return win32_impl_result;
    }
    inline uint16_t* u_strToWCS(uint16_t* dest, int32_t destCapacity, int32_t* pDestLength, uint16_t* src, int32_t srcLength, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_u_strToWCS(dest, destCapacity, pDestLength, src, srcLength, pErrorCode);
        return win32_impl_result;
    }
    inline uint16_t* u_strFromWCS(uint16_t* dest, int32_t destCapacity, int32_t* pDestLength, uint16_t* src, int32_t srcLength, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_u_strFromWCS(dest, destCapacity, pDestLength, src, srcLength, pErrorCode);
        return win32_impl_result;
    }
    inline int8_t* u_strToUTF8(int8_t* dest, int32_t destCapacity, int32_t* pDestLength, uint16_t* src, int32_t srcLength, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_u_strToUTF8(dest, destCapacity, pDestLength, src, srcLength, pErrorCode);
        return win32_impl_result;
    }
    inline uint16_t* u_strFromUTF8(uint16_t* dest, int32_t destCapacity, int32_t* pDestLength, int8_t* src, int32_t srcLength, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_u_strFromUTF8(dest, destCapacity, pDestLength, src, srcLength, pErrorCode);
        return win32_impl_result;
    }
    inline int8_t* u_strToUTF8WithSub(int8_t* dest, int32_t destCapacity, int32_t* pDestLength, uint16_t* src, int32_t srcLength, int32_t subchar, int32_t* pNumSubstitutions, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_u_strToUTF8WithSub(dest, destCapacity, pDestLength, src, srcLength, subchar, pNumSubstitutions, pErrorCode);
        return win32_impl_result;
    }
    inline uint16_t* u_strFromUTF8WithSub(uint16_t* dest, int32_t destCapacity, int32_t* pDestLength, int8_t* src, int32_t srcLength, int32_t subchar, int32_t* pNumSubstitutions, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_u_strFromUTF8WithSub(dest, destCapacity, pDestLength, src, srcLength, subchar, pNumSubstitutions, pErrorCode);
        return win32_impl_result;
    }
    inline uint16_t* u_strFromUTF8Lenient(uint16_t* dest, int32_t destCapacity, int32_t* pDestLength, int8_t* src, int32_t srcLength, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_u_strFromUTF8Lenient(dest, destCapacity, pDestLength, src, srcLength, pErrorCode);
        return win32_impl_result;
    }
    inline int32_t* u_strToUTF32(int32_t* dest, int32_t destCapacity, int32_t* pDestLength, uint16_t* src, int32_t srcLength, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_u_strToUTF32(dest, destCapacity, pDestLength, src, srcLength, pErrorCode);
        return win32_impl_result;
    }
    inline uint16_t* u_strFromUTF32(uint16_t* dest, int32_t destCapacity, int32_t* pDestLength, int32_t* src, int32_t srcLength, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_u_strFromUTF32(dest, destCapacity, pDestLength, src, srcLength, pErrorCode);
        return win32_impl_result;
    }
    inline int32_t* u_strToUTF32WithSub(int32_t* dest, int32_t destCapacity, int32_t* pDestLength, uint16_t* src, int32_t srcLength, int32_t subchar, int32_t* pNumSubstitutions, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_u_strToUTF32WithSub(dest, destCapacity, pDestLength, src, srcLength, subchar, pNumSubstitutions, pErrorCode);
        return win32_impl_result;
    }
    inline uint16_t* u_strFromUTF32WithSub(uint16_t* dest, int32_t destCapacity, int32_t* pDestLength, int32_t* src, int32_t srcLength, int32_t subchar, int32_t* pNumSubstitutions, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_u_strFromUTF32WithSub(dest, destCapacity, pDestLength, src, srcLength, subchar, pNumSubstitutions, pErrorCode);
        return win32_impl_result;
    }
    inline int8_t* u_strToJavaModifiedUTF8(int8_t* dest, int32_t destCapacity, int32_t* pDestLength, uint16_t* src, int32_t srcLength, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_u_strToJavaModifiedUTF8(dest, destCapacity, pDestLength, src, srcLength, pErrorCode);
        return win32_impl_result;
    }
    inline uint16_t* u_strFromJavaModifiedUTF8WithSub(uint16_t* dest, int32_t destCapacity, int32_t* pDestLength, int8_t* src, int32_t srcLength, int32_t subchar, int32_t* pNumSubstitutions, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_u_strFromJavaModifiedUTF8WithSub(dest, destCapacity, pDestLength, src, srcLength, subchar, pNumSubstitutions, pErrorCode);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UCaseMap* ucasemap_open(int8_t* locale, uint32_t options, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_ucasemap_open(locale, options, pErrorCode);
        return win32_impl_result;
    }
    inline void ucasemap_close(Windows::Win32::Intl::UCaseMap* csm)
    {
        WIN32_IMPL_ucasemap_close(csm);
    }
    inline int8_t* ucasemap_getLocale(Windows::Win32::Intl::UCaseMap* csm)
    {
        auto win32_impl_result = WIN32_IMPL_ucasemap_getLocale(csm);
        return win32_impl_result;
    }
    inline uint32_t ucasemap_getOptions(Windows::Win32::Intl::UCaseMap* csm)
    {
        auto win32_impl_result = WIN32_IMPL_ucasemap_getOptions(csm);
        return win32_impl_result;
    }
    inline void ucasemap_setLocale(Windows::Win32::Intl::UCaseMap* csm, int8_t* locale, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        WIN32_IMPL_ucasemap_setLocale(csm, locale, pErrorCode);
    }
    inline void ucasemap_setOptions(Windows::Win32::Intl::UCaseMap* csm, uint32_t options, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        WIN32_IMPL_ucasemap_setOptions(csm, options, pErrorCode);
    }
    inline Windows::Win32::Intl::UBreakIterator* ucasemap_getBreakIterator(Windows::Win32::Intl::UCaseMap* csm)
    {
        auto win32_impl_result = WIN32_IMPL_ucasemap_getBreakIterator(csm);
        return win32_impl_result;
    }
    inline void ucasemap_setBreakIterator(Windows::Win32::Intl::UCaseMap* csm, Windows::Win32::Intl::UBreakIterator* iterToAdopt, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        WIN32_IMPL_ucasemap_setBreakIterator(csm, iterToAdopt, pErrorCode);
    }
    inline int32_t ucasemap_toTitle(Windows::Win32::Intl::UCaseMap* csm, uint16_t* dest, int32_t destCapacity, uint16_t* src, int32_t srcLength, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_ucasemap_toTitle(csm, dest, destCapacity, src, srcLength, pErrorCode);
        return win32_impl_result;
    }
    inline int32_t ucasemap_utf8ToLower(Windows::Win32::Intl::UCaseMap* csm, int8_t* dest, int32_t destCapacity, int8_t* src, int32_t srcLength, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_ucasemap_utf8ToLower(csm, dest, destCapacity, src, srcLength, pErrorCode);
        return win32_impl_result;
    }
    inline int32_t ucasemap_utf8ToUpper(Windows::Win32::Intl::UCaseMap* csm, int8_t* dest, int32_t destCapacity, int8_t* src, int32_t srcLength, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_ucasemap_utf8ToUpper(csm, dest, destCapacity, src, srcLength, pErrorCode);
        return win32_impl_result;
    }
    inline int32_t ucasemap_utf8ToTitle(Windows::Win32::Intl::UCaseMap* csm, int8_t* dest, int32_t destCapacity, int8_t* src, int32_t srcLength, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_ucasemap_utf8ToTitle(csm, dest, destCapacity, src, srcLength, pErrorCode);
        return win32_impl_result;
    }
    inline int32_t ucasemap_utf8FoldCase(Windows::Win32::Intl::UCaseMap* csm, int8_t* dest, int32_t destCapacity, int8_t* src, int32_t srcLength, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_ucasemap_utf8FoldCase(csm, dest, destCapacity, src, srcLength, pErrorCode);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UStringPrepProfile* usprep_open(int8_t* path, int8_t* fileName, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_usprep_open(path, fileName, status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UStringPrepProfile* usprep_openByType(Windows::Win32::Intl::UStringPrepProfileType type, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_usprep_openByType(type, status);
        return win32_impl_result;
    }
    inline void usprep_close(Windows::Win32::Intl::UStringPrepProfile* profile)
    {
        WIN32_IMPL_usprep_close(profile);
    }
    inline int32_t usprep_prepare(Windows::Win32::Intl::UStringPrepProfile* prep, uint16_t* src, int32_t srcLength, uint16_t* dest, int32_t destCapacity, int32_t options, Windows::Win32::Intl::UParseError* parseError, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_usprep_prepare(prep, src, srcLength, dest, destCapacity, options, parseError, status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UIDNA* uidna_openUTS46(uint32_t options, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_uidna_openUTS46(options, pErrorCode);
        return win32_impl_result;
    }
    inline void uidna_close(Windows::Win32::Intl::UIDNA* idna)
    {
        WIN32_IMPL_uidna_close(idna);
    }
    inline int32_t uidna_labelToASCII(Windows::Win32::Intl::UIDNA* idna, uint16_t* label, int32_t length, uint16_t* dest, int32_t capacity, Windows::Win32::Intl::UIDNAInfo* pInfo, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_uidna_labelToASCII(idna, label, length, dest, capacity, pInfo, pErrorCode);
        return win32_impl_result;
    }
    inline int32_t uidna_labelToUnicode(Windows::Win32::Intl::UIDNA* idna, uint16_t* label, int32_t length, uint16_t* dest, int32_t capacity, Windows::Win32::Intl::UIDNAInfo* pInfo, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_uidna_labelToUnicode(idna, label, length, dest, capacity, pInfo, pErrorCode);
        return win32_impl_result;
    }
    inline int32_t uidna_nameToASCII(Windows::Win32::Intl::UIDNA* idna, uint16_t* name, int32_t length, uint16_t* dest, int32_t capacity, Windows::Win32::Intl::UIDNAInfo* pInfo, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_uidna_nameToASCII(idna, name, length, dest, capacity, pInfo, pErrorCode);
        return win32_impl_result;
    }
    inline int32_t uidna_nameToUnicode(Windows::Win32::Intl::UIDNA* idna, uint16_t* name, int32_t length, uint16_t* dest, int32_t capacity, Windows::Win32::Intl::UIDNAInfo* pInfo, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_uidna_nameToUnicode(idna, name, length, dest, capacity, pInfo, pErrorCode);
        return win32_impl_result;
    }
    inline int32_t uidna_labelToASCII_UTF8(Windows::Win32::Intl::UIDNA* idna, int8_t* label, int32_t length, int8_t* dest, int32_t capacity, Windows::Win32::Intl::UIDNAInfo* pInfo, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_uidna_labelToASCII_UTF8(idna, label, length, dest, capacity, pInfo, pErrorCode);
        return win32_impl_result;
    }
    inline int32_t uidna_labelToUnicodeUTF8(Windows::Win32::Intl::UIDNA* idna, int8_t* label, int32_t length, int8_t* dest, int32_t capacity, Windows::Win32::Intl::UIDNAInfo* pInfo, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_uidna_labelToUnicodeUTF8(idna, label, length, dest, capacity, pInfo, pErrorCode);
        return win32_impl_result;
    }
    inline int32_t uidna_nameToASCII_UTF8(Windows::Win32::Intl::UIDNA* idna, int8_t* name, int32_t length, int8_t* dest, int32_t capacity, Windows::Win32::Intl::UIDNAInfo* pInfo, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_uidna_nameToASCII_UTF8(idna, name, length, dest, capacity, pInfo, pErrorCode);
        return win32_impl_result;
    }
    inline int32_t uidna_nameToUnicodeUTF8(Windows::Win32::Intl::UIDNA* idna, int8_t* name, int32_t length, int8_t* dest, int32_t capacity, Windows::Win32::Intl::UIDNAInfo* pInfo, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_uidna_nameToUnicodeUTF8(idna, name, length, dest, capacity, pInfo, pErrorCode);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UBreakIterator* ubrk_open(Windows::Win32::Intl::UBreakIteratorType type, int8_t* locale, uint16_t* text, int32_t textLength, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ubrk_open(type, locale, text, textLength, status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UBreakIterator* ubrk_openRules(uint16_t* rules, int32_t rulesLength, uint16_t* text, int32_t textLength, Windows::Win32::Intl::UParseError* parseErr, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ubrk_openRules(rules, rulesLength, text, textLength, parseErr, status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UBreakIterator* ubrk_openBinaryRules(uint8_t* binaryRules, int32_t rulesLength, uint16_t* text, int32_t textLength, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ubrk_openBinaryRules(binaryRules, rulesLength, text, textLength, status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UBreakIterator* ubrk_safeClone(Windows::Win32::Intl::UBreakIterator* bi, void* stackBuffer, int32_t* pBufferSize, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ubrk_safeClone(bi, stackBuffer, pBufferSize, status);
        return win32_impl_result;
    }
    inline void ubrk_close(Windows::Win32::Intl::UBreakIterator* bi)
    {
        WIN32_IMPL_ubrk_close(bi);
    }
    inline void ubrk_setText(Windows::Win32::Intl::UBreakIterator* bi, uint16_t* text, int32_t textLength, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_ubrk_setText(bi, text, textLength, status);
    }
    inline void ubrk_setUText(Windows::Win32::Intl::UBreakIterator* bi, Windows::Win32::Intl::UText* text, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_ubrk_setUText(bi, text, status);
    }
    inline int32_t ubrk_current(Windows::Win32::Intl::UBreakIterator* bi)
    {
        auto win32_impl_result = WIN32_IMPL_ubrk_current(bi);
        return win32_impl_result;
    }
    inline int32_t ubrk_next(Windows::Win32::Intl::UBreakIterator* bi)
    {
        auto win32_impl_result = WIN32_IMPL_ubrk_next(bi);
        return win32_impl_result;
    }
    inline int32_t ubrk_previous(Windows::Win32::Intl::UBreakIterator* bi)
    {
        auto win32_impl_result = WIN32_IMPL_ubrk_previous(bi);
        return win32_impl_result;
    }
    inline int32_t ubrk_first(Windows::Win32::Intl::UBreakIterator* bi)
    {
        auto win32_impl_result = WIN32_IMPL_ubrk_first(bi);
        return win32_impl_result;
    }
    inline int32_t ubrk_last(Windows::Win32::Intl::UBreakIterator* bi)
    {
        auto win32_impl_result = WIN32_IMPL_ubrk_last(bi);
        return win32_impl_result;
    }
    inline int32_t ubrk_preceding(Windows::Win32::Intl::UBreakIterator* bi, int32_t offset)
    {
        auto win32_impl_result = WIN32_IMPL_ubrk_preceding(bi, offset);
        return win32_impl_result;
    }
    inline int32_t ubrk_following(Windows::Win32::Intl::UBreakIterator* bi, int32_t offset)
    {
        auto win32_impl_result = WIN32_IMPL_ubrk_following(bi, offset);
        return win32_impl_result;
    }
    inline int8_t* ubrk_getAvailable(int32_t index)
    {
        auto win32_impl_result = WIN32_IMPL_ubrk_getAvailable(index);
        return win32_impl_result;
    }
    inline int32_t ubrk_countAvailable()
    {
        auto win32_impl_result = WIN32_IMPL_ubrk_countAvailable();
        return win32_impl_result;
    }
    inline int8_t ubrk_isBoundary(Windows::Win32::Intl::UBreakIterator* bi, int32_t offset)
    {
        auto win32_impl_result = WIN32_IMPL_ubrk_isBoundary(bi, offset);
        return win32_impl_result;
    }
    inline int32_t ubrk_getRuleStatus(Windows::Win32::Intl::UBreakIterator* bi)
    {
        auto win32_impl_result = WIN32_IMPL_ubrk_getRuleStatus(bi);
        return win32_impl_result;
    }
    inline int32_t ubrk_getRuleStatusVec(Windows::Win32::Intl::UBreakIterator* bi, int32_t* fillInVec, int32_t capacity, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ubrk_getRuleStatusVec(bi, fillInVec, capacity, status);
        return win32_impl_result;
    }
    inline int8_t* ubrk_getLocaleByType(Windows::Win32::Intl::UBreakIterator* bi, Windows::Win32::Intl::ULocDataLocaleType type, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ubrk_getLocaleByType(bi, type, status);
        return win32_impl_result;
    }
    inline void ubrk_refreshUText(Windows::Win32::Intl::UBreakIterator* bi, Windows::Win32::Intl::UText* text, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_ubrk_refreshUText(bi, text, status);
    }
    inline int32_t ubrk_getBinaryRules(Windows::Win32::Intl::UBreakIterator* bi, uint8_t* binaryRules, int32_t rulesCapacity, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ubrk_getBinaryRules(bi, binaryRules, rulesCapacity, status);
        return win32_impl_result;
    }
    inline void u_getDataVersion(uint8_t* dataVersionFillin, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_u_getDataVersion(dataVersionFillin, status);
    }
    inline Windows::Win32::Intl::UEnumeration* ucal_openTimeZoneIDEnumeration(Windows::Win32::Intl::USystemTimeZoneType zoneType, int8_t* region, int32_t* rawOffset, Windows::Win32::Intl::UErrorCode* ec)
    {
        auto win32_impl_result = WIN32_IMPL_ucal_openTimeZoneIDEnumeration(zoneType, region, rawOffset, ec);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UEnumeration* ucal_openTimeZones(Windows::Win32::Intl::UErrorCode* ec)
    {
        auto win32_impl_result = WIN32_IMPL_ucal_openTimeZones(ec);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UEnumeration* ucal_openCountryTimeZones(int8_t* country, Windows::Win32::Intl::UErrorCode* ec)
    {
        auto win32_impl_result = WIN32_IMPL_ucal_openCountryTimeZones(country, ec);
        return win32_impl_result;
    }
    inline int32_t ucal_getDefaultTimeZone(uint16_t* result, int32_t resultCapacity, Windows::Win32::Intl::UErrorCode* ec)
    {
        auto win32_impl_result = WIN32_IMPL_ucal_getDefaultTimeZone(result, resultCapacity, ec);
        return win32_impl_result;
    }
    inline void ucal_setDefaultTimeZone(uint16_t* zoneID, Windows::Win32::Intl::UErrorCode* ec)
    {
        WIN32_IMPL_ucal_setDefaultTimeZone(zoneID, ec);
    }
    inline int32_t ucal_getDSTSavings(uint16_t* zoneID, Windows::Win32::Intl::UErrorCode* ec)
    {
        auto win32_impl_result = WIN32_IMPL_ucal_getDSTSavings(zoneID, ec);
        return win32_impl_result;
    }
    inline double ucal_getNow()
    {
        auto win32_impl_result = WIN32_IMPL_ucal_getNow();
        return win32_impl_result;
    }
    inline void** ucal_open(uint16_t* zoneID, int32_t len, int8_t* locale, Windows::Win32::Intl::UCalendarType type, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucal_open(zoneID, len, locale, type, status);
        return win32_impl_result;
    }
    inline void ucal_close(void** cal)
    {
        WIN32_IMPL_ucal_close(cal);
    }
    inline void** ucal_clone(void** cal, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucal_clone(cal, status);
        return win32_impl_result;
    }
    inline void ucal_setTimeZone(void** cal, uint16_t* zoneID, int32_t len, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_ucal_setTimeZone(cal, zoneID, len, status);
    }
    inline int32_t ucal_getTimeZoneID(void** cal, uint16_t* result, int32_t resultLength, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucal_getTimeZoneID(cal, result, resultLength, status);
        return win32_impl_result;
    }
    inline int32_t ucal_getTimeZoneDisplayName(void** cal, Windows::Win32::Intl::UCalendarDisplayNameType type, int8_t* locale, uint16_t* result, int32_t resultLength, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucal_getTimeZoneDisplayName(cal, type, locale, result, resultLength, status);
        return win32_impl_result;
    }
    inline int8_t ucal_inDaylightTime(void** cal, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucal_inDaylightTime(cal, status);
        return win32_impl_result;
    }
    inline void ucal_setGregorianChange(void** cal, double date, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        WIN32_IMPL_ucal_setGregorianChange(cal, date, pErrorCode);
    }
    inline double ucal_getGregorianChange(void** cal, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_ucal_getGregorianChange(cal, pErrorCode);
        return win32_impl_result;
    }
    inline int32_t ucal_getAttribute(void** cal, Windows::Win32::Intl::UCalendarAttribute attr)
    {
        auto win32_impl_result = WIN32_IMPL_ucal_getAttribute(cal, attr);
        return win32_impl_result;
    }
    inline void ucal_setAttribute(void** cal, Windows::Win32::Intl::UCalendarAttribute attr, int32_t newValue)
    {
        WIN32_IMPL_ucal_setAttribute(cal, attr, newValue);
    }
    inline int8_t* ucal_getAvailable(int32_t localeIndex)
    {
        auto win32_impl_result = WIN32_IMPL_ucal_getAvailable(localeIndex);
        return win32_impl_result;
    }
    inline int32_t ucal_countAvailable()
    {
        auto win32_impl_result = WIN32_IMPL_ucal_countAvailable();
        return win32_impl_result;
    }
    inline double ucal_getMillis(void** cal, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucal_getMillis(cal, status);
        return win32_impl_result;
    }
    inline void ucal_setMillis(void** cal, double dateTime, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_ucal_setMillis(cal, dateTime, status);
    }
    inline void ucal_setDate(void** cal, int32_t year, int32_t month, int32_t date, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_ucal_setDate(cal, year, month, date, status);
    }
    inline void ucal_setDateTime(void** cal, int32_t year, int32_t month, int32_t date, int32_t hour, int32_t minute, int32_t second, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_ucal_setDateTime(cal, year, month, date, hour, minute, second, status);
    }
    inline int8_t ucal_equivalentTo(void** cal1, void** cal2)
    {
        auto win32_impl_result = WIN32_IMPL_ucal_equivalentTo(cal1, cal2);
        return win32_impl_result;
    }
    inline void ucal_add(void** cal, Windows::Win32::Intl::UCalendarDateFields field, int32_t amount, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_ucal_add(cal, field, amount, status);
    }
    inline void ucal_roll(void** cal, Windows::Win32::Intl::UCalendarDateFields field, int32_t amount, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_ucal_roll(cal, field, amount, status);
    }
    inline int32_t ucal_get(void** cal, Windows::Win32::Intl::UCalendarDateFields field, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucal_get(cal, field, status);
        return win32_impl_result;
    }
    inline void ucal_set(void** cal, Windows::Win32::Intl::UCalendarDateFields field, int32_t value)
    {
        WIN32_IMPL_ucal_set(cal, field, value);
    }
    inline int8_t ucal_isSet(void** cal, Windows::Win32::Intl::UCalendarDateFields field)
    {
        auto win32_impl_result = WIN32_IMPL_ucal_isSet(cal, field);
        return win32_impl_result;
    }
    inline void ucal_clearField(void** cal, Windows::Win32::Intl::UCalendarDateFields field)
    {
        WIN32_IMPL_ucal_clearField(cal, field);
    }
    inline void ucal_clear(void** calendar)
    {
        WIN32_IMPL_ucal_clear(calendar);
    }
    inline int32_t ucal_getLimit(void** cal, Windows::Win32::Intl::UCalendarDateFields field, Windows::Win32::Intl::UCalendarLimitType type, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucal_getLimit(cal, field, type, status);
        return win32_impl_result;
    }
    inline int8_t* ucal_getLocaleByType(void** cal, Windows::Win32::Intl::ULocDataLocaleType type, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucal_getLocaleByType(cal, type, status);
        return win32_impl_result;
    }
    inline int8_t* ucal_getTZDataVersion(Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucal_getTZDataVersion(status);
        return win32_impl_result;
    }
    inline int32_t ucal_getCanonicalTimeZoneID(uint16_t* id, int32_t len, uint16_t* result, int32_t resultCapacity, int8_t* isSystemID, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucal_getCanonicalTimeZoneID(id, len, result, resultCapacity, isSystemID, status);
        return win32_impl_result;
    }
    inline int8_t* ucal_getType(void** cal, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucal_getType(cal, status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UEnumeration* ucal_getKeywordValuesForLocale(int8_t* key, int8_t* locale, int8_t commonlyUsed, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucal_getKeywordValuesForLocale(key, locale, commonlyUsed, status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UCalendarWeekdayType ucal_getDayOfWeekType(void** cal, Windows::Win32::Intl::UCalendarDaysOfWeek dayOfWeek, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucal_getDayOfWeekType(cal, dayOfWeek, status);
        return win32_impl_result;
    }
    inline int32_t ucal_getWeekendTransition(void** cal, Windows::Win32::Intl::UCalendarDaysOfWeek dayOfWeek, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucal_getWeekendTransition(cal, dayOfWeek, status);
        return win32_impl_result;
    }
    inline int8_t ucal_isWeekend(void** cal, double date, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucal_isWeekend(cal, date, status);
        return win32_impl_result;
    }
    inline int32_t ucal_getFieldDifference(void** cal, double target, Windows::Win32::Intl::UCalendarDateFields field, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucal_getFieldDifference(cal, target, field, status);
        return win32_impl_result;
    }
    inline int8_t ucal_getTimeZoneTransitionDate(void** cal, Windows::Win32::Intl::UTimeZoneTransitionType type, double* transition, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucal_getTimeZoneTransitionDate(cal, type, transition, status);
        return win32_impl_result;
    }
    inline int32_t ucal_getWindowsTimeZoneID(uint16_t* id, int32_t len, uint16_t* winid, int32_t winidCapacity, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucal_getWindowsTimeZoneID(id, len, winid, winidCapacity, status);
        return win32_impl_result;
    }
    inline int32_t ucal_getTimeZoneIDForWindowsID(uint16_t* winid, int32_t len, int8_t* region, uint16_t* id, int32_t idCapacity, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucal_getTimeZoneIDForWindowsID(winid, len, region, id, idCapacity, status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UCollator* ucol_open(int8_t* loc, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucol_open(loc, status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UCollator* ucol_openRules(uint16_t* rules, int32_t rulesLength, Windows::Win32::Intl::UColAttributeValue normalizationMode, Windows::Win32::Intl::UColAttributeValue strength, Windows::Win32::Intl::UParseError* parseError, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucol_openRules(rules, rulesLength, normalizationMode, strength, parseError, status);
        return win32_impl_result;
    }
    inline void ucol_getContractionsAndExpansions(Windows::Win32::Intl::UCollator* coll, Windows::Win32::Intl::USet* contractions, Windows::Win32::Intl::USet* expansions, int8_t addPrefixes, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_ucol_getContractionsAndExpansions(coll, contractions, expansions, addPrefixes, status);
    }
    inline void ucol_close(Windows::Win32::Intl::UCollator* coll)
    {
        WIN32_IMPL_ucol_close(coll);
    }
    inline Windows::Win32::Intl::UCollationResult ucol_strcoll(Windows::Win32::Intl::UCollator* coll, uint16_t* source, int32_t sourceLength, uint16_t* target, int32_t targetLength)
    {
        auto win32_impl_result = WIN32_IMPL_ucol_strcoll(coll, source, sourceLength, target, targetLength);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UCollationResult ucol_strcollUTF8(Windows::Win32::Intl::UCollator* coll, int8_t* source, int32_t sourceLength, int8_t* target, int32_t targetLength, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucol_strcollUTF8(coll, source, sourceLength, target, targetLength, status);
        return win32_impl_result;
    }
    inline int8_t ucol_greater(Windows::Win32::Intl::UCollator* coll, uint16_t* source, int32_t sourceLength, uint16_t* target, int32_t targetLength)
    {
        auto win32_impl_result = WIN32_IMPL_ucol_greater(coll, source, sourceLength, target, targetLength);
        return win32_impl_result;
    }
    inline int8_t ucol_greaterOrEqual(Windows::Win32::Intl::UCollator* coll, uint16_t* source, int32_t sourceLength, uint16_t* target, int32_t targetLength)
    {
        auto win32_impl_result = WIN32_IMPL_ucol_greaterOrEqual(coll, source, sourceLength, target, targetLength);
        return win32_impl_result;
    }
    inline int8_t ucol_equal(Windows::Win32::Intl::UCollator* coll, uint16_t* source, int32_t sourceLength, uint16_t* target, int32_t targetLength)
    {
        auto win32_impl_result = WIN32_IMPL_ucol_equal(coll, source, sourceLength, target, targetLength);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UCollationResult ucol_strcollIter(Windows::Win32::Intl::UCollator* coll, Windows::Win32::Intl::UCharIterator* sIter, Windows::Win32::Intl::UCharIterator* tIter, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucol_strcollIter(coll, sIter, tIter, status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UColAttributeValue ucol_getStrength(Windows::Win32::Intl::UCollator* coll)
    {
        auto win32_impl_result = WIN32_IMPL_ucol_getStrength(coll);
        return win32_impl_result;
    }
    inline void ucol_setStrength(Windows::Win32::Intl::UCollator* coll, Windows::Win32::Intl::UColAttributeValue strength)
    {
        WIN32_IMPL_ucol_setStrength(coll, strength);
    }
    inline int32_t ucol_getReorderCodes(Windows::Win32::Intl::UCollator* coll, int32_t* dest, int32_t destCapacity, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_ucol_getReorderCodes(coll, dest, destCapacity, pErrorCode);
        return win32_impl_result;
    }
    inline void ucol_setReorderCodes(Windows::Win32::Intl::UCollator* coll, int32_t* reorderCodes, int32_t reorderCodesLength, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        WIN32_IMPL_ucol_setReorderCodes(coll, reorderCodes, reorderCodesLength, pErrorCode);
    }
    inline int32_t ucol_getEquivalentReorderCodes(int32_t reorderCode, int32_t* dest, int32_t destCapacity, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_ucol_getEquivalentReorderCodes(reorderCode, dest, destCapacity, pErrorCode);
        return win32_impl_result;
    }
    inline int32_t ucol_getDisplayName(int8_t* objLoc, int8_t* dispLoc, uint16_t* result, int32_t resultLength, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucol_getDisplayName(objLoc, dispLoc, result, resultLength, status);
        return win32_impl_result;
    }
    inline int8_t* ucol_getAvailable(int32_t localeIndex)
    {
        auto win32_impl_result = WIN32_IMPL_ucol_getAvailable(localeIndex);
        return win32_impl_result;
    }
    inline int32_t ucol_countAvailable()
    {
        auto win32_impl_result = WIN32_IMPL_ucol_countAvailable();
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UEnumeration* ucol_openAvailableLocales(Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucol_openAvailableLocales(status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UEnumeration* ucol_getKeywords(Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucol_getKeywords(status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UEnumeration* ucol_getKeywordValues(int8_t* keyword, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucol_getKeywordValues(keyword, status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UEnumeration* ucol_getKeywordValuesForLocale(int8_t* key, int8_t* locale, int8_t commonlyUsed, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucol_getKeywordValuesForLocale(key, locale, commonlyUsed, status);
        return win32_impl_result;
    }
    inline int32_t ucol_getFunctionalEquivalent(int8_t* result, int32_t resultCapacity, int8_t* keyword, int8_t* locale, int8_t* isAvailable, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucol_getFunctionalEquivalent(result, resultCapacity, keyword, locale, isAvailable, status);
        return win32_impl_result;
    }
    inline uint16_t* ucol_getRules(Windows::Win32::Intl::UCollator* coll, int32_t* length)
    {
        auto win32_impl_result = WIN32_IMPL_ucol_getRules(coll, length);
        return win32_impl_result;
    }
    inline int32_t ucol_getSortKey(Windows::Win32::Intl::UCollator* coll, uint16_t* source, int32_t sourceLength, uint8_t* result, int32_t resultLength)
    {
        auto win32_impl_result = WIN32_IMPL_ucol_getSortKey(coll, source, sourceLength, result, resultLength);
        return win32_impl_result;
    }
    inline int32_t ucol_nextSortKeyPart(Windows::Win32::Intl::UCollator* coll, Windows::Win32::Intl::UCharIterator* iter, uint32_t* state, uint8_t* dest, int32_t count, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucol_nextSortKeyPart(coll, iter, state, dest, count, status);
        return win32_impl_result;
    }
    inline int32_t ucol_getBound(uint8_t* source, int32_t sourceLength, Windows::Win32::Intl::UColBoundMode boundType, uint32_t noOfLevels, uint8_t* result, int32_t resultLength, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucol_getBound(source, sourceLength, boundType, noOfLevels, result, resultLength, status);
        return win32_impl_result;
    }
    inline void ucol_getVersion(Windows::Win32::Intl::UCollator* coll, uint8_t* info)
    {
        WIN32_IMPL_ucol_getVersion(coll, info);
    }
    inline void ucol_getUCAVersion(Windows::Win32::Intl::UCollator* coll, uint8_t* info)
    {
        WIN32_IMPL_ucol_getUCAVersion(coll, info);
    }
    inline int32_t ucol_mergeSortkeys(uint8_t* src1, int32_t src1Length, uint8_t* src2, int32_t src2Length, uint8_t* dest, int32_t destCapacity)
    {
        auto win32_impl_result = WIN32_IMPL_ucol_mergeSortkeys(src1, src1Length, src2, src2Length, dest, destCapacity);
        return win32_impl_result;
    }
    inline void ucol_setAttribute(Windows::Win32::Intl::UCollator* coll, Windows::Win32::Intl::UColAttribute attr, Windows::Win32::Intl::UColAttributeValue value, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_ucol_setAttribute(coll, attr, value, status);
    }
    inline Windows::Win32::Intl::UColAttributeValue ucol_getAttribute(Windows::Win32::Intl::UCollator* coll, Windows::Win32::Intl::UColAttribute attr, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucol_getAttribute(coll, attr, status);
        return win32_impl_result;
    }
    inline void ucol_setMaxVariable(Windows::Win32::Intl::UCollator* coll, Windows::Win32::Intl::UColReorderCode group, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        WIN32_IMPL_ucol_setMaxVariable(coll, group, pErrorCode);
    }
    inline Windows::Win32::Intl::UColReorderCode ucol_getMaxVariable(Windows::Win32::Intl::UCollator* coll)
    {
        auto win32_impl_result = WIN32_IMPL_ucol_getMaxVariable(coll);
        return win32_impl_result;
    }
    inline uint32_t ucol_getVariableTop(Windows::Win32::Intl::UCollator* coll, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucol_getVariableTop(coll, status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UCollator* ucol_safeClone(Windows::Win32::Intl::UCollator* coll, void* stackBuffer, int32_t* pBufferSize, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucol_safeClone(coll, stackBuffer, pBufferSize, status);
        return win32_impl_result;
    }
    inline int32_t ucol_getRulesEx(Windows::Win32::Intl::UCollator* coll, Windows::Win32::Intl::UColRuleOption delta, uint16_t* buffer, int32_t bufferLen)
    {
        auto win32_impl_result = WIN32_IMPL_ucol_getRulesEx(coll, delta, buffer, bufferLen);
        return win32_impl_result;
    }
    inline int8_t* ucol_getLocaleByType(Windows::Win32::Intl::UCollator* coll, Windows::Win32::Intl::ULocDataLocaleType type, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucol_getLocaleByType(coll, type, status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::USet* ucol_getTailoredSet(Windows::Win32::Intl::UCollator* coll, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucol_getTailoredSet(coll, status);
        return win32_impl_result;
    }
    inline int32_t ucol_cloneBinary(Windows::Win32::Intl::UCollator* coll, uint8_t* buffer, int32_t capacity, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucol_cloneBinary(coll, buffer, capacity, status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UCollator* ucol_openBinary(uint8_t* bin, int32_t length, Windows::Win32::Intl::UCollator* base, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucol_openBinary(bin, length, base, status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UCollationElements* ucol_openElements(Windows::Win32::Intl::UCollator* coll, uint16_t* text, int32_t textLength, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucol_openElements(coll, text, textLength, status);
        return win32_impl_result;
    }
    inline int32_t ucol_keyHashCode(uint8_t* key, int32_t length)
    {
        auto win32_impl_result = WIN32_IMPL_ucol_keyHashCode(key, length);
        return win32_impl_result;
    }
    inline void ucol_closeElements(Windows::Win32::Intl::UCollationElements* elems)
    {
        WIN32_IMPL_ucol_closeElements(elems);
    }
    inline void ucol_reset(Windows::Win32::Intl::UCollationElements* elems)
    {
        WIN32_IMPL_ucol_reset(elems);
    }
    inline int32_t ucol_next(Windows::Win32::Intl::UCollationElements* elems, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucol_next(elems, status);
        return win32_impl_result;
    }
    inline int32_t ucol_previous(Windows::Win32::Intl::UCollationElements* elems, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucol_previous(elems, status);
        return win32_impl_result;
    }
    inline int32_t ucol_getMaxExpansion(Windows::Win32::Intl::UCollationElements* elems, int32_t order)
    {
        auto win32_impl_result = WIN32_IMPL_ucol_getMaxExpansion(elems, order);
        return win32_impl_result;
    }
    inline void ucol_setText(Windows::Win32::Intl::UCollationElements* elems, uint16_t* text, int32_t textLength, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_ucol_setText(elems, text, textLength, status);
    }
    inline int32_t ucol_getOffset(Windows::Win32::Intl::UCollationElements* elems)
    {
        auto win32_impl_result = WIN32_IMPL_ucol_getOffset(elems);
        return win32_impl_result;
    }
    inline void ucol_setOffset(Windows::Win32::Intl::UCollationElements* elems, int32_t offset, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_ucol_setOffset(elems, offset, status);
    }
    inline int32_t ucol_primaryOrder(int32_t order)
    {
        auto win32_impl_result = WIN32_IMPL_ucol_primaryOrder(order);
        return win32_impl_result;
    }
    inline int32_t ucol_secondaryOrder(int32_t order)
    {
        auto win32_impl_result = WIN32_IMPL_ucol_secondaryOrder(order);
        return win32_impl_result;
    }
    inline int32_t ucol_tertiaryOrder(int32_t order)
    {
        auto win32_impl_result = WIN32_IMPL_ucol_tertiaryOrder(order);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UCharsetDetector* ucsdet_open(Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucsdet_open(status);
        return win32_impl_result;
    }
    inline void ucsdet_close(Windows::Win32::Intl::UCharsetDetector* ucsd)
    {
        WIN32_IMPL_ucsdet_close(ucsd);
    }
    inline void ucsdet_setText(Windows::Win32::Intl::UCharsetDetector* ucsd, int8_t* textIn, int32_t len, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_ucsdet_setText(ucsd, textIn, len, status);
    }
    inline void ucsdet_setDeclaredEncoding(Windows::Win32::Intl::UCharsetDetector* ucsd, int8_t* encoding, int32_t length, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_ucsdet_setDeclaredEncoding(ucsd, encoding, length, status);
    }
    inline Windows::Win32::Intl::UCharsetMatch* ucsdet_detect(Windows::Win32::Intl::UCharsetDetector* ucsd, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucsdet_detect(ucsd, status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UCharsetMatch** ucsdet_detectAll(Windows::Win32::Intl::UCharsetDetector* ucsd, int32_t* matchesFound, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucsdet_detectAll(ucsd, matchesFound, status);
        return win32_impl_result;
    }
    inline int8_t* ucsdet_getName(Windows::Win32::Intl::UCharsetMatch* ucsm, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucsdet_getName(ucsm, status);
        return win32_impl_result;
    }
    inline int32_t ucsdet_getConfidence(Windows::Win32::Intl::UCharsetMatch* ucsm, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucsdet_getConfidence(ucsm, status);
        return win32_impl_result;
    }
    inline int8_t* ucsdet_getLanguage(Windows::Win32::Intl::UCharsetMatch* ucsm, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucsdet_getLanguage(ucsm, status);
        return win32_impl_result;
    }
    inline int32_t ucsdet_getUChars(Windows::Win32::Intl::UCharsetMatch* ucsm, uint16_t* buf, int32_t cap, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucsdet_getUChars(ucsm, buf, cap, status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UEnumeration* ucsdet_getAllDetectableCharsets(Windows::Win32::Intl::UCharsetDetector* ucsd, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ucsdet_getAllDetectableCharsets(ucsd, status);
        return win32_impl_result;
    }
    inline int8_t ucsdet_isInputFilterEnabled(Windows::Win32::Intl::UCharsetDetector* ucsd)
    {
        auto win32_impl_result = WIN32_IMPL_ucsdet_isInputFilterEnabled(ucsd);
        return win32_impl_result;
    }
    inline int8_t ucsdet_enableInputFilter(Windows::Win32::Intl::UCharsetDetector* ucsd, int8_t filter)
    {
        auto win32_impl_result = WIN32_IMPL_ucsdet_enableInputFilter(ucsd, filter);
        return win32_impl_result;
    }
    inline void** udatpg_open(int8_t* locale, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_udatpg_open(locale, pErrorCode);
        return win32_impl_result;
    }
    inline void** udatpg_openEmpty(Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_udatpg_openEmpty(pErrorCode);
        return win32_impl_result;
    }
    inline void udatpg_close(void** dtpg)
    {
        WIN32_IMPL_udatpg_close(dtpg);
    }
    inline void** udatpg_clone(void** dtpg, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_udatpg_clone(dtpg, pErrorCode);
        return win32_impl_result;
    }
    inline int32_t udatpg_getBestPattern(void** dtpg, uint16_t* skeleton, int32_t length, uint16_t* bestPattern, int32_t capacity, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_udatpg_getBestPattern(dtpg, skeleton, length, bestPattern, capacity, pErrorCode);
        return win32_impl_result;
    }
    inline int32_t udatpg_getBestPatternWithOptions(void** dtpg, uint16_t* skeleton, int32_t length, Windows::Win32::Intl::UDateTimePatternMatchOptions options, uint16_t* bestPattern, int32_t capacity, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_udatpg_getBestPatternWithOptions(dtpg, skeleton, length, options, bestPattern, capacity, pErrorCode);
        return win32_impl_result;
    }
    inline int32_t udatpg_getSkeleton(void** unusedDtpg, uint16_t* pattern, int32_t length, uint16_t* skeleton, int32_t capacity, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_udatpg_getSkeleton(unusedDtpg, pattern, length, skeleton, capacity, pErrorCode);
        return win32_impl_result;
    }
    inline int32_t udatpg_getBaseSkeleton(void** unusedDtpg, uint16_t* pattern, int32_t length, uint16_t* baseSkeleton, int32_t capacity, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_udatpg_getBaseSkeleton(unusedDtpg, pattern, length, baseSkeleton, capacity, pErrorCode);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UDateTimePatternConflict udatpg_addPattern(void** dtpg, uint16_t* pattern, int32_t patternLength, int8_t override, uint16_t* conflictingPattern, int32_t capacity, int32_t* pLength, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_udatpg_addPattern(dtpg, pattern, patternLength, override, conflictingPattern, capacity, pLength, pErrorCode);
        return win32_impl_result;
    }
    inline void udatpg_setAppendItemFormat(void** dtpg, Windows::Win32::Intl::UDateTimePatternField field, uint16_t* value, int32_t length)
    {
        WIN32_IMPL_udatpg_setAppendItemFormat(dtpg, field, value, length);
    }
    inline uint16_t* udatpg_getAppendItemFormat(void** dtpg, Windows::Win32::Intl::UDateTimePatternField field, int32_t* pLength)
    {
        auto win32_impl_result = WIN32_IMPL_udatpg_getAppendItemFormat(dtpg, field, pLength);
        return win32_impl_result;
    }
    inline void udatpg_setAppendItemName(void** dtpg, Windows::Win32::Intl::UDateTimePatternField field, uint16_t* value, int32_t length)
    {
        WIN32_IMPL_udatpg_setAppendItemName(dtpg, field, value, length);
    }
    inline uint16_t* udatpg_getAppendItemName(void** dtpg, Windows::Win32::Intl::UDateTimePatternField field, int32_t* pLength)
    {
        auto win32_impl_result = WIN32_IMPL_udatpg_getAppendItemName(dtpg, field, pLength);
        return win32_impl_result;
    }
    inline int32_t udatpg_getFieldDisplayName(void** dtpg, Windows::Win32::Intl::UDateTimePatternField field, Windows::Win32::Intl::UDateTimePGDisplayWidth width, uint16_t* fieldName, int32_t capacity, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_udatpg_getFieldDisplayName(dtpg, field, width, fieldName, capacity, pErrorCode);
        return win32_impl_result;
    }
    inline void udatpg_setDateTimeFormat(void** dtpg, uint16_t* dtFormat, int32_t length)
    {
        WIN32_IMPL_udatpg_setDateTimeFormat(dtpg, dtFormat, length);
    }
    inline uint16_t* udatpg_getDateTimeFormat(void** dtpg, int32_t* pLength)
    {
        auto win32_impl_result = WIN32_IMPL_udatpg_getDateTimeFormat(dtpg, pLength);
        return win32_impl_result;
    }
    inline void udatpg_setDecimal(void** dtpg, uint16_t* decimal, int32_t length)
    {
        WIN32_IMPL_udatpg_setDecimal(dtpg, decimal, length);
    }
    inline uint16_t* udatpg_getDecimal(void** dtpg, int32_t* pLength)
    {
        auto win32_impl_result = WIN32_IMPL_udatpg_getDecimal(dtpg, pLength);
        return win32_impl_result;
    }
    inline int32_t udatpg_replaceFieldTypes(void** dtpg, uint16_t* pattern, int32_t patternLength, uint16_t* skeleton, int32_t skeletonLength, uint16_t* dest, int32_t destCapacity, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_udatpg_replaceFieldTypes(dtpg, pattern, patternLength, skeleton, skeletonLength, dest, destCapacity, pErrorCode);
        return win32_impl_result;
    }
    inline int32_t udatpg_replaceFieldTypesWithOptions(void** dtpg, uint16_t* pattern, int32_t patternLength, uint16_t* skeleton, int32_t skeletonLength, Windows::Win32::Intl::UDateTimePatternMatchOptions options, uint16_t* dest, int32_t destCapacity, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_udatpg_replaceFieldTypesWithOptions(dtpg, pattern, patternLength, skeleton, skeletonLength, options, dest, destCapacity, pErrorCode);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UEnumeration* udatpg_openSkeletons(void** dtpg, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_udatpg_openSkeletons(dtpg, pErrorCode);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UEnumeration* udatpg_openBaseSkeletons(void** dtpg, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_udatpg_openBaseSkeletons(dtpg, pErrorCode);
        return win32_impl_result;
    }
    inline uint16_t* udatpg_getPatternForSkeleton(void** dtpg, uint16_t* skeleton, int32_t skeletonLength, int32_t* pLength)
    {
        auto win32_impl_result = WIN32_IMPL_udatpg_getPatternForSkeleton(dtpg, skeleton, skeletonLength, pLength);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UFieldPositionIterator* ufieldpositer_open(Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ufieldpositer_open(status);
        return win32_impl_result;
    }
    inline void ufieldpositer_close(Windows::Win32::Intl::UFieldPositionIterator* fpositer)
    {
        WIN32_IMPL_ufieldpositer_close(fpositer);
    }
    inline int32_t ufieldpositer_next(Windows::Win32::Intl::UFieldPositionIterator* fpositer, int32_t* beginIndex, int32_t* endIndex)
    {
        auto win32_impl_result = WIN32_IMPL_ufieldpositer_next(fpositer, beginIndex, endIndex);
        return win32_impl_result;
    }
    inline void** ufmt_open(Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ufmt_open(status);
        return win32_impl_result;
    }
    inline void ufmt_close(void** fmt)
    {
        WIN32_IMPL_ufmt_close(fmt);
    }
    inline Windows::Win32::Intl::UFormattableType ufmt_getType(void** fmt, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ufmt_getType(fmt, status);
        return win32_impl_result;
    }
    inline int8_t ufmt_isNumeric(void** fmt)
    {
        auto win32_impl_result = WIN32_IMPL_ufmt_isNumeric(fmt);
        return win32_impl_result;
    }
    inline double ufmt_getDate(void** fmt, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ufmt_getDate(fmt, status);
        return win32_impl_result;
    }
    inline double ufmt_getDouble(void** fmt, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ufmt_getDouble(fmt, status);
        return win32_impl_result;
    }
    inline int32_t ufmt_getLong(void** fmt, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ufmt_getLong(fmt, status);
        return win32_impl_result;
    }
    inline int64_t ufmt_getInt64(void** fmt, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ufmt_getInt64(fmt, status);
        return win32_impl_result;
    }
    inline void* ufmt_getObject(void** fmt, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ufmt_getObject(fmt, status);
        return win32_impl_result;
    }
    inline uint16_t* ufmt_getUChars(void** fmt, int32_t* len, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ufmt_getUChars(fmt, len, status);
        return win32_impl_result;
    }
    inline int32_t ufmt_getArrayLength(void** fmt, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ufmt_getArrayLength(fmt, status);
        return win32_impl_result;
    }
    inline void** ufmt_getArrayItemByIndex(void** fmt, int32_t n, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ufmt_getArrayItemByIndex(fmt, n, status);
        return win32_impl_result;
    }
    inline int8_t* ufmt_getDecNumChars(void** fmt, int32_t* len, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ufmt_getDecNumChars(fmt, len, status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UDateIntervalFormat* udtitvfmt_open(int8_t* locale, uint16_t* skeleton, int32_t skeletonLength, uint16_t* tzID, int32_t tzIDLength, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_udtitvfmt_open(locale, skeleton, skeletonLength, tzID, tzIDLength, status);
        return win32_impl_result;
    }
    inline void udtitvfmt_close(Windows::Win32::Intl::UDateIntervalFormat* formatter)
    {
        WIN32_IMPL_udtitvfmt_close(formatter);
    }
    inline int32_t udtitvfmt_format(Windows::Win32::Intl::UDateIntervalFormat* formatter, double fromDate, double toDate, uint16_t* result, int32_t resultCapacity, Windows::Win32::Intl::UFieldPosition* position, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_udtitvfmt_format(formatter, fromDate, toDate, result, resultCapacity, position, status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UGenderInfo* ugender_getInstance(int8_t* locale, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ugender_getInstance(locale, status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UGender ugender_getListGender(Windows::Win32::Intl::UGenderInfo* genderInfo, Windows::Win32::Intl::UGender* genders, int32_t size, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ugender_getListGender(genderInfo, genders, size, status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UListFormatter* ulistfmt_open(int8_t* locale, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ulistfmt_open(locale, status);
        return win32_impl_result;
    }
    inline void ulistfmt_close(Windows::Win32::Intl::UListFormatter* listfmt)
    {
        WIN32_IMPL_ulistfmt_close(listfmt);
    }
    inline int32_t ulistfmt_format(Windows::Win32::Intl::UListFormatter* listfmt, uint16_t** strings, int32_t* stringLengths, int32_t stringCount, uint16_t* result, int32_t resultCapacity, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ulistfmt_format(listfmt, strings, stringLengths, stringCount, result, resultCapacity, status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::ULocaleData* ulocdata_open(int8_t* localeID, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ulocdata_open(localeID, status);
        return win32_impl_result;
    }
    inline void ulocdata_close(Windows::Win32::Intl::ULocaleData* uld)
    {
        WIN32_IMPL_ulocdata_close(uld);
    }
    inline void ulocdata_setNoSubstitute(Windows::Win32::Intl::ULocaleData* uld, int8_t setting)
    {
        WIN32_IMPL_ulocdata_setNoSubstitute(uld, setting);
    }
    inline int8_t ulocdata_getNoSubstitute(Windows::Win32::Intl::ULocaleData* uld)
    {
        auto win32_impl_result = WIN32_IMPL_ulocdata_getNoSubstitute(uld);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::USet* ulocdata_getExemplarSet(Windows::Win32::Intl::ULocaleData* uld, Windows::Win32::Intl::USet* fillIn, uint32_t options, Windows::Win32::Intl::ULocaleDataExemplarSetType extype, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ulocdata_getExemplarSet(uld, fillIn, options, extype, status);
        return win32_impl_result;
    }
    inline int32_t ulocdata_getDelimiter(Windows::Win32::Intl::ULocaleData* uld, Windows::Win32::Intl::ULocaleDataDelimiterType type, uint16_t* result, int32_t resultLength, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ulocdata_getDelimiter(uld, type, result, resultLength, status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UMeasurementSystem ulocdata_getMeasurementSystem(int8_t* localeID, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ulocdata_getMeasurementSystem(localeID, status);
        return win32_impl_result;
    }
    inline void ulocdata_getPaperSize(int8_t* localeID, int32_t* height, int32_t* width, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_ulocdata_getPaperSize(localeID, height, width, status);
    }
    inline void ulocdata_getCLDRVersion(uint8_t* versionArray, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_ulocdata_getCLDRVersion(versionArray, status);
    }
    inline int32_t ulocdata_getLocaleDisplayPattern(Windows::Win32::Intl::ULocaleData* uld, uint16_t* pattern, int32_t patternCapacity, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ulocdata_getLocaleDisplayPattern(uld, pattern, patternCapacity, status);
        return win32_impl_result;
    }
    inline int32_t ulocdata_getLocaleSeparator(Windows::Win32::Intl::ULocaleData* uld, uint16_t* separator, int32_t separatorCapacity, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ulocdata_getLocaleSeparator(uld, separator, separatorCapacity, status);
        return win32_impl_result;
    }
    inline int32_t u_formatMessage(int8_t* locale, uint16_t* pattern, int32_t patternLength, uint16_t* result, int32_t resultLength, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_u_formatMessage(locale, pattern, patternLength, result, resultLength, status);
        return win32_impl_result;
    }
    inline int32_t u_vformatMessage(int8_t* locale, uint16_t* pattern, int32_t patternLength, uint16_t* result, int32_t resultLength, int8_t* ap, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_u_vformatMessage(locale, pattern, patternLength, result, resultLength, ap, status);
        return win32_impl_result;
    }
    inline void u_parseMessage(int8_t* locale, uint16_t* pattern, int32_t patternLength, uint16_t* source, int32_t sourceLength, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_u_parseMessage(locale, pattern, patternLength, source, sourceLength, status);
    }
    inline void u_vparseMessage(int8_t* locale, uint16_t* pattern, int32_t patternLength, uint16_t* source, int32_t sourceLength, int8_t* ap, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_u_vparseMessage(locale, pattern, patternLength, source, sourceLength, ap, status);
    }
    inline int32_t u_formatMessageWithError(int8_t* locale, uint16_t* pattern, int32_t patternLength, uint16_t* result, int32_t resultLength, Windows::Win32::Intl::UParseError* parseError, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_u_formatMessageWithError(locale, pattern, patternLength, result, resultLength, parseError, status);
        return win32_impl_result;
    }
    inline int32_t u_vformatMessageWithError(int8_t* locale, uint16_t* pattern, int32_t patternLength, uint16_t* result, int32_t resultLength, Windows::Win32::Intl::UParseError* parseError, int8_t* ap, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_u_vformatMessageWithError(locale, pattern, patternLength, result, resultLength, parseError, ap, status);
        return win32_impl_result;
    }
    inline void u_parseMessageWithError(int8_t* locale, uint16_t* pattern, int32_t patternLength, uint16_t* source, int32_t sourceLength, Windows::Win32::Intl::UParseError* parseError, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_u_parseMessageWithError(locale, pattern, patternLength, source, sourceLength, parseError, status);
    }
    inline void u_vparseMessageWithError(int8_t* locale, uint16_t* pattern, int32_t patternLength, uint16_t* source, int32_t sourceLength, int8_t* ap, Windows::Win32::Intl::UParseError* parseError, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_u_vparseMessageWithError(locale, pattern, patternLength, source, sourceLength, ap, parseError, status);
    }
    inline void** umsg_open(uint16_t* pattern, int32_t patternLength, int8_t* locale, Windows::Win32::Intl::UParseError* parseError, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_umsg_open(pattern, patternLength, locale, parseError, status);
        return win32_impl_result;
    }
    inline void umsg_close(void** format)
    {
        WIN32_IMPL_umsg_close(format);
    }
    inline void* umsg_clone(void** fmt, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_umsg_clone(fmt, status);
        return win32_impl_result;
    }
    inline void umsg_setLocale(void** fmt, int8_t* locale)
    {
        WIN32_IMPL_umsg_setLocale(fmt, locale);
    }
    inline int8_t* umsg_getLocale(void** fmt)
    {
        auto win32_impl_result = WIN32_IMPL_umsg_getLocale(fmt);
        return win32_impl_result;
    }
    inline void umsg_applyPattern(void** fmt, uint16_t* pattern, int32_t patternLength, Windows::Win32::Intl::UParseError* parseError, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_umsg_applyPattern(fmt, pattern, patternLength, parseError, status);
    }
    inline int32_t umsg_toPattern(void** fmt, uint16_t* result, int32_t resultLength, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_umsg_toPattern(fmt, result, resultLength, status);
        return win32_impl_result;
    }
    inline int32_t umsg_format(void** fmt, uint16_t* result, int32_t resultLength, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_umsg_format(fmt, result, resultLength, status);
        return win32_impl_result;
    }
    inline int32_t umsg_vformat(void** fmt, uint16_t* result, int32_t resultLength, int8_t* ap, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_umsg_vformat(fmt, result, resultLength, ap, status);
        return win32_impl_result;
    }
    inline void umsg_parse(void** fmt, uint16_t* source, int32_t sourceLength, int32_t* count, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_umsg_parse(fmt, source, sourceLength, count, status);
    }
    inline void umsg_vparse(void** fmt, uint16_t* source, int32_t sourceLength, int32_t* count, int8_t* ap, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_umsg_vparse(fmt, source, sourceLength, count, ap, status);
    }
    inline int32_t umsg_autoQuoteApostrophe(uint16_t* pattern, int32_t patternLength, uint16_t* dest, int32_t destCapacity, Windows::Win32::Intl::UErrorCode* ec)
    {
        auto win32_impl_result = WIN32_IMPL_umsg_autoQuoteApostrophe(pattern, patternLength, dest, destCapacity, ec);
        return win32_impl_result;
    }
    inline void** unum_open(Windows::Win32::Intl::UNumberFormatStyle style, uint16_t* pattern, int32_t patternLength, int8_t* locale, Windows::Win32::Intl::UParseError* parseErr, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_unum_open(style, pattern, patternLength, locale, parseErr, status);
        return win32_impl_result;
    }
    inline void unum_close(void** fmt)
    {
        WIN32_IMPL_unum_close(fmt);
    }
    inline void** unum_clone(void** fmt, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_unum_clone(fmt, status);
        return win32_impl_result;
    }
    inline int32_t unum_format(void** fmt, int32_t number, uint16_t* result, int32_t resultLength, Windows::Win32::Intl::UFieldPosition* pos, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_unum_format(fmt, number, result, resultLength, pos, status);
        return win32_impl_result;
    }
    inline int32_t unum_formatInt64(void** fmt, int64_t number, uint16_t* result, int32_t resultLength, Windows::Win32::Intl::UFieldPosition* pos, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_unum_formatInt64(fmt, number, result, resultLength, pos, status);
        return win32_impl_result;
    }
    inline int32_t unum_formatDouble(void** fmt, double number, uint16_t* result, int32_t resultLength, Windows::Win32::Intl::UFieldPosition* pos, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_unum_formatDouble(fmt, number, result, resultLength, pos, status);
        return win32_impl_result;
    }
    inline int32_t unum_formatDoubleForFields(void** format, double number, uint16_t* result, int32_t resultLength, Windows::Win32::Intl::UFieldPositionIterator* fpositer, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_unum_formatDoubleForFields(format, number, result, resultLength, fpositer, status);
        return win32_impl_result;
    }
    inline int32_t unum_formatDecimal(void** fmt, int8_t* number, int32_t length, uint16_t* result, int32_t resultLength, Windows::Win32::Intl::UFieldPosition* pos, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_unum_formatDecimal(fmt, number, length, result, resultLength, pos, status);
        return win32_impl_result;
    }
    inline int32_t unum_formatDoubleCurrency(void** fmt, double number, uint16_t* currency, uint16_t* result, int32_t resultLength, Windows::Win32::Intl::UFieldPosition* pos, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_unum_formatDoubleCurrency(fmt, number, currency, result, resultLength, pos, status);
        return win32_impl_result;
    }
    inline int32_t unum_formatUFormattable(void** fmt, void** number, uint16_t* result, int32_t resultLength, Windows::Win32::Intl::UFieldPosition* pos, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_unum_formatUFormattable(fmt, number, result, resultLength, pos, status);
        return win32_impl_result;
    }
    inline int32_t unum_parse(void** fmt, uint16_t* text, int32_t textLength, int32_t* parsePos, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_unum_parse(fmt, text, textLength, parsePos, status);
        return win32_impl_result;
    }
    inline int64_t unum_parseInt64(void** fmt, uint16_t* text, int32_t textLength, int32_t* parsePos, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_unum_parseInt64(fmt, text, textLength, parsePos, status);
        return win32_impl_result;
    }
    inline double unum_parseDouble(void** fmt, uint16_t* text, int32_t textLength, int32_t* parsePos, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_unum_parseDouble(fmt, text, textLength, parsePos, status);
        return win32_impl_result;
    }
    inline int32_t unum_parseDecimal(void** fmt, uint16_t* text, int32_t textLength, int32_t* parsePos, int8_t* outBuf, int32_t outBufLength, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_unum_parseDecimal(fmt, text, textLength, parsePos, outBuf, outBufLength, status);
        return win32_impl_result;
    }
    inline double unum_parseDoubleCurrency(void** fmt, uint16_t* text, int32_t textLength, int32_t* parsePos, uint16_t* currency, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_unum_parseDoubleCurrency(fmt, text, textLength, parsePos, currency, status);
        return win32_impl_result;
    }
    inline void** unum_parseToUFormattable(void** fmt, void** result, uint16_t* text, int32_t textLength, int32_t* parsePos, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_unum_parseToUFormattable(fmt, result, text, textLength, parsePos, status);
        return win32_impl_result;
    }
    inline void unum_applyPattern(void** format, int8_t localized, uint16_t* pattern, int32_t patternLength, Windows::Win32::Intl::UParseError* parseError, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_unum_applyPattern(format, localized, pattern, patternLength, parseError, status);
    }
    inline int8_t* unum_getAvailable(int32_t localeIndex)
    {
        auto win32_impl_result = WIN32_IMPL_unum_getAvailable(localeIndex);
        return win32_impl_result;
    }
    inline int32_t unum_countAvailable()
    {
        auto win32_impl_result = WIN32_IMPL_unum_countAvailable();
        return win32_impl_result;
    }
    inline int32_t unum_getAttribute(void** fmt, Windows::Win32::Intl::UNumberFormatAttribute attr)
    {
        auto win32_impl_result = WIN32_IMPL_unum_getAttribute(fmt, attr);
        return win32_impl_result;
    }
    inline void unum_setAttribute(void** fmt, Windows::Win32::Intl::UNumberFormatAttribute attr, int32_t newValue)
    {
        WIN32_IMPL_unum_setAttribute(fmt, attr, newValue);
    }
    inline double unum_getDoubleAttribute(void** fmt, Windows::Win32::Intl::UNumberFormatAttribute attr)
    {
        auto win32_impl_result = WIN32_IMPL_unum_getDoubleAttribute(fmt, attr);
        return win32_impl_result;
    }
    inline void unum_setDoubleAttribute(void** fmt, Windows::Win32::Intl::UNumberFormatAttribute attr, double newValue)
    {
        WIN32_IMPL_unum_setDoubleAttribute(fmt, attr, newValue);
    }
    inline int32_t unum_getTextAttribute(void** fmt, Windows::Win32::Intl::UNumberFormatTextAttribute tag, uint16_t* result, int32_t resultLength, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_unum_getTextAttribute(fmt, tag, result, resultLength, status);
        return win32_impl_result;
    }
    inline void unum_setTextAttribute(void** fmt, Windows::Win32::Intl::UNumberFormatTextAttribute tag, uint16_t* newValue, int32_t newValueLength, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_unum_setTextAttribute(fmt, tag, newValue, newValueLength, status);
    }
    inline int32_t unum_toPattern(void** fmt, int8_t isPatternLocalized, uint16_t* result, int32_t resultLength, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_unum_toPattern(fmt, isPatternLocalized, result, resultLength, status);
        return win32_impl_result;
    }
    inline int32_t unum_getSymbol(void** fmt, Windows::Win32::Intl::UNumberFormatSymbol symbol, uint16_t* buffer, int32_t size, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_unum_getSymbol(fmt, symbol, buffer, size, status);
        return win32_impl_result;
    }
    inline void unum_setSymbol(void** fmt, Windows::Win32::Intl::UNumberFormatSymbol symbol, uint16_t* value, int32_t length, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_unum_setSymbol(fmt, symbol, value, length, status);
    }
    inline int8_t* unum_getLocaleByType(void** fmt, Windows::Win32::Intl::ULocDataLocaleType type, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_unum_getLocaleByType(fmt, type, status);
        return win32_impl_result;
    }
    inline void unum_setContext(void** fmt, Windows::Win32::Intl::UDisplayContext value, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_unum_setContext(fmt, value, status);
    }
    inline Windows::Win32::Intl::UDisplayContext unum_getContext(void** fmt, Windows::Win32::Intl::UDisplayContextType type, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_unum_getContext(fmt, type, status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UCalendarDateFields udat_toCalendarDateField(Windows::Win32::Intl::UDateFormatField field)
    {
        auto win32_impl_result = WIN32_IMPL_udat_toCalendarDateField(field);
        return win32_impl_result;
    }
    inline void** udat_open(Windows::Win32::Intl::UDateFormatStyle timeStyle, Windows::Win32::Intl::UDateFormatStyle dateStyle, int8_t* locale, uint16_t* tzID, int32_t tzIDLength, uint16_t* pattern, int32_t patternLength, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_udat_open(timeStyle, dateStyle, locale, tzID, tzIDLength, pattern, patternLength, status);
        return win32_impl_result;
    }
    inline void udat_close(void** format)
    {
        WIN32_IMPL_udat_close(format);
    }
    inline int8_t udat_getBooleanAttribute(void** fmt, Windows::Win32::Intl::UDateFormatBooleanAttribute attr, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_udat_getBooleanAttribute(fmt, attr, status);
        return win32_impl_result;
    }
    inline void udat_setBooleanAttribute(void** fmt, Windows::Win32::Intl::UDateFormatBooleanAttribute attr, int8_t newValue, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_udat_setBooleanAttribute(fmt, attr, newValue, status);
    }
    inline void** udat_clone(void** fmt, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_udat_clone(fmt, status);
        return win32_impl_result;
    }
    inline int32_t udat_format(void** format, double dateToFormat, uint16_t* result, int32_t resultLength, Windows::Win32::Intl::UFieldPosition* position, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_udat_format(format, dateToFormat, result, resultLength, position, status);
        return win32_impl_result;
    }
    inline int32_t udat_formatCalendar(void** format, void** calendar, uint16_t* result, int32_t capacity, Windows::Win32::Intl::UFieldPosition* position, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_udat_formatCalendar(format, calendar, result, capacity, position, status);
        return win32_impl_result;
    }
    inline int32_t udat_formatForFields(void** format, double dateToFormat, uint16_t* result, int32_t resultLength, Windows::Win32::Intl::UFieldPositionIterator* fpositer, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_udat_formatForFields(format, dateToFormat, result, resultLength, fpositer, status);
        return win32_impl_result;
    }
    inline int32_t udat_formatCalendarForFields(void** format, void** calendar, uint16_t* result, int32_t capacity, Windows::Win32::Intl::UFieldPositionIterator* fpositer, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_udat_formatCalendarForFields(format, calendar, result, capacity, fpositer, status);
        return win32_impl_result;
    }
    inline double udat_parse(void** format, uint16_t* text, int32_t textLength, int32_t* parsePos, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_udat_parse(format, text, textLength, parsePos, status);
        return win32_impl_result;
    }
    inline void udat_parseCalendar(void** format, void** calendar, uint16_t* text, int32_t textLength, int32_t* parsePos, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_udat_parseCalendar(format, calendar, text, textLength, parsePos, status);
    }
    inline int8_t udat_isLenient(void** fmt)
    {
        auto win32_impl_result = WIN32_IMPL_udat_isLenient(fmt);
        return win32_impl_result;
    }
    inline void udat_setLenient(void** fmt, int8_t isLenient)
    {
        WIN32_IMPL_udat_setLenient(fmt, isLenient);
    }
    inline void** udat_getCalendar(void** fmt)
    {
        auto win32_impl_result = WIN32_IMPL_udat_getCalendar(fmt);
        return win32_impl_result;
    }
    inline void udat_setCalendar(void** fmt, void** calendarToSet)
    {
        WIN32_IMPL_udat_setCalendar(fmt, calendarToSet);
    }
    inline void** udat_getNumberFormat(void** fmt)
    {
        auto win32_impl_result = WIN32_IMPL_udat_getNumberFormat(fmt);
        return win32_impl_result;
    }
    inline void** udat_getNumberFormatForField(void** fmt, uint16_t field)
    {
        auto win32_impl_result = WIN32_IMPL_udat_getNumberFormatForField(fmt, field);
        return win32_impl_result;
    }
    inline void udat_adoptNumberFormatForFields(void** fmt, uint16_t* fields, void** numberFormatToSet, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_udat_adoptNumberFormatForFields(fmt, fields, numberFormatToSet, status);
    }
    inline void udat_setNumberFormat(void** fmt, void** numberFormatToSet)
    {
        WIN32_IMPL_udat_setNumberFormat(fmt, numberFormatToSet);
    }
    inline void udat_adoptNumberFormat(void** fmt, void** numberFormatToAdopt)
    {
        WIN32_IMPL_udat_adoptNumberFormat(fmt, numberFormatToAdopt);
    }
    inline int8_t* udat_getAvailable(int32_t localeIndex)
    {
        auto win32_impl_result = WIN32_IMPL_udat_getAvailable(localeIndex);
        return win32_impl_result;
    }
    inline int32_t udat_countAvailable()
    {
        auto win32_impl_result = WIN32_IMPL_udat_countAvailable();
        return win32_impl_result;
    }
    inline double udat_get2DigitYearStart(void** fmt, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_udat_get2DigitYearStart(fmt, status);
        return win32_impl_result;
    }
    inline void udat_set2DigitYearStart(void** fmt, double d, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_udat_set2DigitYearStart(fmt, d, status);
    }
    inline int32_t udat_toPattern(void** fmt, int8_t localized, uint16_t* result, int32_t resultLength, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_udat_toPattern(fmt, localized, result, resultLength, status);
        return win32_impl_result;
    }
    inline void udat_applyPattern(void** format, int8_t localized, uint16_t* pattern, int32_t patternLength)
    {
        WIN32_IMPL_udat_applyPattern(format, localized, pattern, patternLength);
    }
    inline int32_t udat_getSymbols(void** fmt, Windows::Win32::Intl::UDateFormatSymbolType type, int32_t symbolIndex, uint16_t* result, int32_t resultLength, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_udat_getSymbols(fmt, type, symbolIndex, result, resultLength, status);
        return win32_impl_result;
    }
    inline int32_t udat_countSymbols(void** fmt, Windows::Win32::Intl::UDateFormatSymbolType type)
    {
        auto win32_impl_result = WIN32_IMPL_udat_countSymbols(fmt, type);
        return win32_impl_result;
    }
    inline void udat_setSymbols(void** format, Windows::Win32::Intl::UDateFormatSymbolType type, int32_t symbolIndex, uint16_t* value, int32_t valueLength, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_udat_setSymbols(format, type, symbolIndex, value, valueLength, status);
    }
    inline int8_t* udat_getLocaleByType(void** fmt, Windows::Win32::Intl::ULocDataLocaleType type, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_udat_getLocaleByType(fmt, type, status);
        return win32_impl_result;
    }
    inline void udat_setContext(void** fmt, Windows::Win32::Intl::UDisplayContext value, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_udat_setContext(fmt, value, status);
    }
    inline Windows::Win32::Intl::UDisplayContext udat_getContext(void** fmt, Windows::Win32::Intl::UDisplayContextType type, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_udat_getContext(fmt, type, status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UNumberFormatter* unumf_openForSkeletonAndLocale(uint16_t* skeleton, int32_t skeletonLen, int8_t* locale, Windows::Win32::Intl::UErrorCode* ec)
    {
        auto win32_impl_result = WIN32_IMPL_unumf_openForSkeletonAndLocale(skeleton, skeletonLen, locale, ec);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UFormattedNumber* unumf_openResult(Windows::Win32::Intl::UErrorCode* ec)
    {
        auto win32_impl_result = WIN32_IMPL_unumf_openResult(ec);
        return win32_impl_result;
    }
    inline void unumf_formatInt(Windows::Win32::Intl::UNumberFormatter* uformatter, int64_t value, Windows::Win32::Intl::UFormattedNumber* uresult, Windows::Win32::Intl::UErrorCode* ec)
    {
        WIN32_IMPL_unumf_formatInt(uformatter, value, uresult, ec);
    }
    inline void unumf_formatDouble(Windows::Win32::Intl::UNumberFormatter* uformatter, double value, Windows::Win32::Intl::UFormattedNumber* uresult, Windows::Win32::Intl::UErrorCode* ec)
    {
        WIN32_IMPL_unumf_formatDouble(uformatter, value, uresult, ec);
    }
    inline void unumf_formatDecimal(Windows::Win32::Intl::UNumberFormatter* uformatter, int8_t* value, int32_t valueLen, Windows::Win32::Intl::UFormattedNumber* uresult, Windows::Win32::Intl::UErrorCode* ec)
    {
        WIN32_IMPL_unumf_formatDecimal(uformatter, value, valueLen, uresult, ec);
    }
    inline int32_t unumf_resultToString(Windows::Win32::Intl::UFormattedNumber* uresult, uint16_t* buffer, int32_t bufferCapacity, Windows::Win32::Intl::UErrorCode* ec)
    {
        auto win32_impl_result = WIN32_IMPL_unumf_resultToString(uresult, buffer, bufferCapacity, ec);
        return win32_impl_result;
    }
    inline int8_t unumf_resultNextFieldPosition(Windows::Win32::Intl::UFormattedNumber* uresult, Windows::Win32::Intl::UFieldPosition* ufpos, Windows::Win32::Intl::UErrorCode* ec)
    {
        auto win32_impl_result = WIN32_IMPL_unumf_resultNextFieldPosition(uresult, ufpos, ec);
        return win32_impl_result;
    }
    inline void unumf_resultGetAllFieldPositions(Windows::Win32::Intl::UFormattedNumber* uresult, Windows::Win32::Intl::UFieldPositionIterator* ufpositer, Windows::Win32::Intl::UErrorCode* ec)
    {
        WIN32_IMPL_unumf_resultGetAllFieldPositions(uresult, ufpositer, ec);
    }
    inline void unumf_close(Windows::Win32::Intl::UNumberFormatter* uformatter)
    {
        WIN32_IMPL_unumf_close(uformatter);
    }
    inline void unumf_closeResult(Windows::Win32::Intl::UFormattedNumber* uresult)
    {
        WIN32_IMPL_unumf_closeResult(uresult);
    }
    inline Windows::Win32::Intl::UNumberingSystem* unumsys_open(int8_t* locale, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_unumsys_open(locale, status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UNumberingSystem* unumsys_openByName(int8_t* name, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_unumsys_openByName(name, status);
        return win32_impl_result;
    }
    inline void unumsys_close(Windows::Win32::Intl::UNumberingSystem* unumsys)
    {
        WIN32_IMPL_unumsys_close(unumsys);
    }
    inline Windows::Win32::Intl::UEnumeration* unumsys_openAvailableNames(Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_unumsys_openAvailableNames(status);
        return win32_impl_result;
    }
    inline int8_t* unumsys_getName(Windows::Win32::Intl::UNumberingSystem* unumsys)
    {
        auto win32_impl_result = WIN32_IMPL_unumsys_getName(unumsys);
        return win32_impl_result;
    }
    inline int8_t unumsys_isAlgorithmic(Windows::Win32::Intl::UNumberingSystem* unumsys)
    {
        auto win32_impl_result = WIN32_IMPL_unumsys_isAlgorithmic(unumsys);
        return win32_impl_result;
    }
    inline int32_t unumsys_getRadix(Windows::Win32::Intl::UNumberingSystem* unumsys)
    {
        auto win32_impl_result = WIN32_IMPL_unumsys_getRadix(unumsys);
        return win32_impl_result;
    }
    inline int32_t unumsys_getDescription(Windows::Win32::Intl::UNumberingSystem* unumsys, uint16_t* result, int32_t resultLength, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_unumsys_getDescription(unumsys, result, resultLength, status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UPluralRules* uplrules_open(int8_t* locale, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uplrules_open(locale, status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UPluralRules* uplrules_openForType(int8_t* locale, Windows::Win32::Intl::UPluralType type, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uplrules_openForType(locale, type, status);
        return win32_impl_result;
    }
    inline void uplrules_close(Windows::Win32::Intl::UPluralRules* uplrules)
    {
        WIN32_IMPL_uplrules_close(uplrules);
    }
    inline int32_t uplrules_select(Windows::Win32::Intl::UPluralRules* uplrules, double number, uint16_t* keyword, int32_t capacity, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uplrules_select(uplrules, number, keyword, capacity, status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UEnumeration* uplrules_getKeywords(Windows::Win32::Intl::UPluralRules* uplrules, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uplrules_getKeywords(uplrules, status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::URegularExpression* uregex_open(uint16_t* pattern, int32_t patternLength, uint32_t flags, Windows::Win32::Intl::UParseError* pe, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uregex_open(pattern, patternLength, flags, pe, status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::URegularExpression* uregex_openUText(Windows::Win32::Intl::UText* pattern, uint32_t flags, Windows::Win32::Intl::UParseError* pe, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uregex_openUText(pattern, flags, pe, status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::URegularExpression* uregex_openC(int8_t* pattern, uint32_t flags, Windows::Win32::Intl::UParseError* pe, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uregex_openC(pattern, flags, pe, status);
        return win32_impl_result;
    }
    inline void uregex_close(Windows::Win32::Intl::URegularExpression* regexp)
    {
        WIN32_IMPL_uregex_close(regexp);
    }
    inline Windows::Win32::Intl::URegularExpression* uregex_clone(Windows::Win32::Intl::URegularExpression* regexp, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uregex_clone(regexp, status);
        return win32_impl_result;
    }
    inline uint16_t* uregex_pattern(Windows::Win32::Intl::URegularExpression* regexp, int32_t* patLength, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uregex_pattern(regexp, patLength, status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UText* uregex_patternUText(Windows::Win32::Intl::URegularExpression* regexp, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uregex_patternUText(regexp, status);
        return win32_impl_result;
    }
    inline int32_t uregex_flags(Windows::Win32::Intl::URegularExpression* regexp, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uregex_flags(regexp, status);
        return win32_impl_result;
    }
    inline void uregex_setText(Windows::Win32::Intl::URegularExpression* regexp, uint16_t* text, int32_t textLength, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_uregex_setText(regexp, text, textLength, status);
    }
    inline void uregex_setUText(Windows::Win32::Intl::URegularExpression* regexp, Windows::Win32::Intl::UText* text, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_uregex_setUText(regexp, text, status);
    }
    inline uint16_t* uregex_getText(Windows::Win32::Intl::URegularExpression* regexp, int32_t* textLength, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uregex_getText(regexp, textLength, status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UText* uregex_getUText(Windows::Win32::Intl::URegularExpression* regexp, Windows::Win32::Intl::UText* dest, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uregex_getUText(regexp, dest, status);
        return win32_impl_result;
    }
    inline void uregex_refreshUText(Windows::Win32::Intl::URegularExpression* regexp, Windows::Win32::Intl::UText* text, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_uregex_refreshUText(regexp, text, status);
    }
    inline int8_t uregex_matches(Windows::Win32::Intl::URegularExpression* regexp, int32_t startIndex, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uregex_matches(regexp, startIndex, status);
        return win32_impl_result;
    }
    inline int8_t uregex_matches64(Windows::Win32::Intl::URegularExpression* regexp, int64_t startIndex, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uregex_matches64(regexp, startIndex, status);
        return win32_impl_result;
    }
    inline int8_t uregex_lookingAt(Windows::Win32::Intl::URegularExpression* regexp, int32_t startIndex, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uregex_lookingAt(regexp, startIndex, status);
        return win32_impl_result;
    }
    inline int8_t uregex_lookingAt64(Windows::Win32::Intl::URegularExpression* regexp, int64_t startIndex, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uregex_lookingAt64(regexp, startIndex, status);
        return win32_impl_result;
    }
    inline int8_t uregex_find(Windows::Win32::Intl::URegularExpression* regexp, int32_t startIndex, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uregex_find(regexp, startIndex, status);
        return win32_impl_result;
    }
    inline int8_t uregex_find64(Windows::Win32::Intl::URegularExpression* regexp, int64_t startIndex, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uregex_find64(regexp, startIndex, status);
        return win32_impl_result;
    }
    inline int8_t uregex_findNext(Windows::Win32::Intl::URegularExpression* regexp, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uregex_findNext(regexp, status);
        return win32_impl_result;
    }
    inline int32_t uregex_groupCount(Windows::Win32::Intl::URegularExpression* regexp, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uregex_groupCount(regexp, status);
        return win32_impl_result;
    }
    inline int32_t uregex_groupNumberFromName(Windows::Win32::Intl::URegularExpression* regexp, uint16_t* groupName, int32_t nameLength, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uregex_groupNumberFromName(regexp, groupName, nameLength, status);
        return win32_impl_result;
    }
    inline int32_t uregex_groupNumberFromCName(Windows::Win32::Intl::URegularExpression* regexp, int8_t* groupName, int32_t nameLength, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uregex_groupNumberFromCName(regexp, groupName, nameLength, status);
        return win32_impl_result;
    }
    inline int32_t uregex_group(Windows::Win32::Intl::URegularExpression* regexp, int32_t groupNum, uint16_t* dest, int32_t destCapacity, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uregex_group(regexp, groupNum, dest, destCapacity, status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UText* uregex_groupUText(Windows::Win32::Intl::URegularExpression* regexp, int32_t groupNum, Windows::Win32::Intl::UText* dest, int64_t* groupLength, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uregex_groupUText(regexp, groupNum, dest, groupLength, status);
        return win32_impl_result;
    }
    inline int32_t uregex_start(Windows::Win32::Intl::URegularExpression* regexp, int32_t groupNum, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uregex_start(regexp, groupNum, status);
        return win32_impl_result;
    }
    inline int64_t uregex_start64(Windows::Win32::Intl::URegularExpression* regexp, int32_t groupNum, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uregex_start64(regexp, groupNum, status);
        return win32_impl_result;
    }
    inline int32_t uregex_end(Windows::Win32::Intl::URegularExpression* regexp, int32_t groupNum, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uregex_end(regexp, groupNum, status);
        return win32_impl_result;
    }
    inline int64_t uregex_end64(Windows::Win32::Intl::URegularExpression* regexp, int32_t groupNum, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uregex_end64(regexp, groupNum, status);
        return win32_impl_result;
    }
    inline void uregex_reset(Windows::Win32::Intl::URegularExpression* regexp, int32_t index, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_uregex_reset(regexp, index, status);
    }
    inline void uregex_reset64(Windows::Win32::Intl::URegularExpression* regexp, int64_t index, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_uregex_reset64(regexp, index, status);
    }
    inline void uregex_setRegion(Windows::Win32::Intl::URegularExpression* regexp, int32_t regionStart, int32_t regionLimit, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_uregex_setRegion(regexp, regionStart, regionLimit, status);
    }
    inline void uregex_setRegion64(Windows::Win32::Intl::URegularExpression* regexp, int64_t regionStart, int64_t regionLimit, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_uregex_setRegion64(regexp, regionStart, regionLimit, status);
    }
    inline void uregex_setRegionAndStart(Windows::Win32::Intl::URegularExpression* regexp, int64_t regionStart, int64_t regionLimit, int64_t startIndex, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_uregex_setRegionAndStart(regexp, regionStart, regionLimit, startIndex, status);
    }
    inline int32_t uregex_regionStart(Windows::Win32::Intl::URegularExpression* regexp, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uregex_regionStart(regexp, status);
        return win32_impl_result;
    }
    inline int64_t uregex_regionStart64(Windows::Win32::Intl::URegularExpression* regexp, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uregex_regionStart64(regexp, status);
        return win32_impl_result;
    }
    inline int32_t uregex_regionEnd(Windows::Win32::Intl::URegularExpression* regexp, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uregex_regionEnd(regexp, status);
        return win32_impl_result;
    }
    inline int64_t uregex_regionEnd64(Windows::Win32::Intl::URegularExpression* regexp, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uregex_regionEnd64(regexp, status);
        return win32_impl_result;
    }
    inline int8_t uregex_hasTransparentBounds(Windows::Win32::Intl::URegularExpression* regexp, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uregex_hasTransparentBounds(regexp, status);
        return win32_impl_result;
    }
    inline void uregex_useTransparentBounds(Windows::Win32::Intl::URegularExpression* regexp, int8_t b, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_uregex_useTransparentBounds(regexp, b, status);
    }
    inline int8_t uregex_hasAnchoringBounds(Windows::Win32::Intl::URegularExpression* regexp, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uregex_hasAnchoringBounds(regexp, status);
        return win32_impl_result;
    }
    inline void uregex_useAnchoringBounds(Windows::Win32::Intl::URegularExpression* regexp, int8_t b, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_uregex_useAnchoringBounds(regexp, b, status);
    }
    inline int8_t uregex_hitEnd(Windows::Win32::Intl::URegularExpression* regexp, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uregex_hitEnd(regexp, status);
        return win32_impl_result;
    }
    inline int8_t uregex_requireEnd(Windows::Win32::Intl::URegularExpression* regexp, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uregex_requireEnd(regexp, status);
        return win32_impl_result;
    }
    inline int32_t uregex_replaceAll(Windows::Win32::Intl::URegularExpression* regexp, uint16_t* replacementText, int32_t replacementLength, uint16_t* destBuf, int32_t destCapacity, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uregex_replaceAll(regexp, replacementText, replacementLength, destBuf, destCapacity, status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UText* uregex_replaceAllUText(Windows::Win32::Intl::URegularExpression* regexp, Windows::Win32::Intl::UText* replacement, Windows::Win32::Intl::UText* dest, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uregex_replaceAllUText(regexp, replacement, dest, status);
        return win32_impl_result;
    }
    inline int32_t uregex_replaceFirst(Windows::Win32::Intl::URegularExpression* regexp, uint16_t* replacementText, int32_t replacementLength, uint16_t* destBuf, int32_t destCapacity, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uregex_replaceFirst(regexp, replacementText, replacementLength, destBuf, destCapacity, status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UText* uregex_replaceFirstUText(Windows::Win32::Intl::URegularExpression* regexp, Windows::Win32::Intl::UText* replacement, Windows::Win32::Intl::UText* dest, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uregex_replaceFirstUText(regexp, replacement, dest, status);
        return win32_impl_result;
    }
    inline int32_t uregex_appendReplacement(Windows::Win32::Intl::URegularExpression* regexp, uint16_t* replacementText, int32_t replacementLength, uint16_t** destBuf, int32_t* destCapacity, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uregex_appendReplacement(regexp, replacementText, replacementLength, destBuf, destCapacity, status);
        return win32_impl_result;
    }
    inline void uregex_appendReplacementUText(Windows::Win32::Intl::URegularExpression* regexp, Windows::Win32::Intl::UText* replacementText, Windows::Win32::Intl::UText* dest, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_uregex_appendReplacementUText(regexp, replacementText, dest, status);
    }
    inline int32_t uregex_appendTail(Windows::Win32::Intl::URegularExpression* regexp, uint16_t** destBuf, int32_t* destCapacity, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uregex_appendTail(regexp, destBuf, destCapacity, status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UText* uregex_appendTailUText(Windows::Win32::Intl::URegularExpression* regexp, Windows::Win32::Intl::UText* dest, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uregex_appendTailUText(regexp, dest, status);
        return win32_impl_result;
    }
    inline int32_t uregex_split(Windows::Win32::Intl::URegularExpression* regexp, uint16_t* destBuf, int32_t destCapacity, int32_t* requiredCapacity, uint16_t** destFields, int32_t destFieldsCapacity, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uregex_split(regexp, destBuf, destCapacity, requiredCapacity, destFields, destFieldsCapacity, status);
        return win32_impl_result;
    }
    inline int32_t uregex_splitUText(Windows::Win32::Intl::URegularExpression* regexp, Windows::Win32::Intl::UText** destFields, int32_t destFieldsCapacity, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uregex_splitUText(regexp, destFields, destFieldsCapacity, status);
        return win32_impl_result;
    }
    inline void uregex_setTimeLimit(Windows::Win32::Intl::URegularExpression* regexp, int32_t limit, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_uregex_setTimeLimit(regexp, limit, status);
    }
    inline int32_t uregex_getTimeLimit(Windows::Win32::Intl::URegularExpression* regexp, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uregex_getTimeLimit(regexp, status);
        return win32_impl_result;
    }
    inline void uregex_setStackLimit(Windows::Win32::Intl::URegularExpression* regexp, int32_t limit, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_uregex_setStackLimit(regexp, limit, status);
    }
    inline int32_t uregex_getStackLimit(Windows::Win32::Intl::URegularExpression* regexp, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uregex_getStackLimit(regexp, status);
        return win32_impl_result;
    }
    inline void uregex_setMatchCallback(Windows::Win32::Intl::URegularExpression* regexp, Windows::Win32::Intl::URegexMatchCallback** callback, void* context, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_uregex_setMatchCallback(regexp, callback, context, status);
    }
    inline void uregex_getMatchCallback(Windows::Win32::Intl::URegularExpression* regexp, Windows::Win32::Intl::URegexMatchCallback*** callback, void** context, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_uregex_getMatchCallback(regexp, callback, context, status);
    }
    inline void uregex_setFindProgressCallback(Windows::Win32::Intl::URegularExpression* regexp, Windows::Win32::Intl::URegexFindProgressCallback** callback, void* context, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_uregex_setFindProgressCallback(regexp, callback, context, status);
    }
    inline void uregex_getFindProgressCallback(Windows::Win32::Intl::URegularExpression* regexp, Windows::Win32::Intl::URegexFindProgressCallback*** callback, void** context, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_uregex_getFindProgressCallback(regexp, callback, context, status);
    }
    inline Windows::Win32::Intl::URegion* uregion_getRegionFromCode(int8_t* regionCode, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uregion_getRegionFromCode(regionCode, status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::URegion* uregion_getRegionFromNumericCode(int32_t code, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uregion_getRegionFromNumericCode(code, status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UEnumeration* uregion_getAvailable(Windows::Win32::Intl::URegionType type, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uregion_getAvailable(type, status);
        return win32_impl_result;
    }
    inline int8_t uregion_areEqual(Windows::Win32::Intl::URegion* uregion, Windows::Win32::Intl::URegion* otherRegion)
    {
        auto win32_impl_result = WIN32_IMPL_uregion_areEqual(uregion, otherRegion);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::URegion* uregion_getContainingRegion(Windows::Win32::Intl::URegion* uregion)
    {
        auto win32_impl_result = WIN32_IMPL_uregion_getContainingRegion(uregion);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::URegion* uregion_getContainingRegionOfType(Windows::Win32::Intl::URegion* uregion, Windows::Win32::Intl::URegionType type)
    {
        auto win32_impl_result = WIN32_IMPL_uregion_getContainingRegionOfType(uregion, type);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UEnumeration* uregion_getContainedRegions(Windows::Win32::Intl::URegion* uregion, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uregion_getContainedRegions(uregion, status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UEnumeration* uregion_getContainedRegionsOfType(Windows::Win32::Intl::URegion* uregion, Windows::Win32::Intl::URegionType type, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uregion_getContainedRegionsOfType(uregion, type, status);
        return win32_impl_result;
    }
    inline int8_t uregion_contains(Windows::Win32::Intl::URegion* uregion, Windows::Win32::Intl::URegion* otherRegion)
    {
        auto win32_impl_result = WIN32_IMPL_uregion_contains(uregion, otherRegion);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UEnumeration* uregion_getPreferredValues(Windows::Win32::Intl::URegion* uregion, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uregion_getPreferredValues(uregion, status);
        return win32_impl_result;
    }
    inline int8_t* uregion_getRegionCode(Windows::Win32::Intl::URegion* uregion)
    {
        auto win32_impl_result = WIN32_IMPL_uregion_getRegionCode(uregion);
        return win32_impl_result;
    }
    inline int32_t uregion_getNumericCode(Windows::Win32::Intl::URegion* uregion)
    {
        auto win32_impl_result = WIN32_IMPL_uregion_getNumericCode(uregion);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::URegionType uregion_getType(Windows::Win32::Intl::URegion* uregion)
    {
        auto win32_impl_result = WIN32_IMPL_uregion_getType(uregion);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::URelativeDateTimeFormatter* ureldatefmt_open(int8_t* locale, void** nfToAdopt, Windows::Win32::Intl::UDateRelativeDateTimeFormatterStyle width, Windows::Win32::Intl::UDisplayContext capitalizationContext, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ureldatefmt_open(locale, nfToAdopt, width, capitalizationContext, status);
        return win32_impl_result;
    }
    inline void ureldatefmt_close(Windows::Win32::Intl::URelativeDateTimeFormatter* reldatefmt)
    {
        WIN32_IMPL_ureldatefmt_close(reldatefmt);
    }
    inline int32_t ureldatefmt_formatNumeric(Windows::Win32::Intl::URelativeDateTimeFormatter* reldatefmt, double offset, Windows::Win32::Intl::URelativeDateTimeUnit unit, uint16_t* result, int32_t resultCapacity, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ureldatefmt_formatNumeric(reldatefmt, offset, unit, result, resultCapacity, status);
        return win32_impl_result;
    }
    inline int32_t ureldatefmt_format(Windows::Win32::Intl::URelativeDateTimeFormatter* reldatefmt, double offset, Windows::Win32::Intl::URelativeDateTimeUnit unit, uint16_t* result, int32_t resultCapacity, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ureldatefmt_format(reldatefmt, offset, unit, result, resultCapacity, status);
        return win32_impl_result;
    }
    inline int32_t ureldatefmt_combineDateAndTime(Windows::Win32::Intl::URelativeDateTimeFormatter* reldatefmt, uint16_t* relativeDateString, int32_t relativeDateStringLen, uint16_t* timeString, int32_t timeStringLen, uint16_t* result, int32_t resultCapacity, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_ureldatefmt_combineDateAndTime(reldatefmt, relativeDateString, relativeDateStringLen, timeString, timeStringLen, result, resultCapacity, status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UStringSearch* usearch_open(uint16_t* pattern, int32_t patternlength, uint16_t* text, int32_t textlength, int8_t* locale, Windows::Win32::Intl::UBreakIterator* breakiter, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_usearch_open(pattern, patternlength, text, textlength, locale, breakiter, status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UStringSearch* usearch_openFromCollator(uint16_t* pattern, int32_t patternlength, uint16_t* text, int32_t textlength, Windows::Win32::Intl::UCollator* collator, Windows::Win32::Intl::UBreakIterator* breakiter, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_usearch_openFromCollator(pattern, patternlength, text, textlength, collator, breakiter, status);
        return win32_impl_result;
    }
    inline void usearch_close(Windows::Win32::Intl::UStringSearch* searchiter)
    {
        WIN32_IMPL_usearch_close(searchiter);
    }
    inline void usearch_setOffset(Windows::Win32::Intl::UStringSearch* strsrch, int32_t position, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_usearch_setOffset(strsrch, position, status);
    }
    inline int32_t usearch_getOffset(Windows::Win32::Intl::UStringSearch* strsrch)
    {
        auto win32_impl_result = WIN32_IMPL_usearch_getOffset(strsrch);
        return win32_impl_result;
    }
    inline void usearch_setAttribute(Windows::Win32::Intl::UStringSearch* strsrch, Windows::Win32::Intl::USearchAttribute attribute, Windows::Win32::Intl::USearchAttributeValue value, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_usearch_setAttribute(strsrch, attribute, value, status);
    }
    inline Windows::Win32::Intl::USearchAttributeValue usearch_getAttribute(Windows::Win32::Intl::UStringSearch* strsrch, Windows::Win32::Intl::USearchAttribute attribute)
    {
        auto win32_impl_result = WIN32_IMPL_usearch_getAttribute(strsrch, attribute);
        return win32_impl_result;
    }
    inline int32_t usearch_getMatchedStart(Windows::Win32::Intl::UStringSearch* strsrch)
    {
        auto win32_impl_result = WIN32_IMPL_usearch_getMatchedStart(strsrch);
        return win32_impl_result;
    }
    inline int32_t usearch_getMatchedLength(Windows::Win32::Intl::UStringSearch* strsrch)
    {
        auto win32_impl_result = WIN32_IMPL_usearch_getMatchedLength(strsrch);
        return win32_impl_result;
    }
    inline int32_t usearch_getMatchedText(Windows::Win32::Intl::UStringSearch* strsrch, uint16_t* result, int32_t resultCapacity, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_usearch_getMatchedText(strsrch, result, resultCapacity, status);
        return win32_impl_result;
    }
    inline void usearch_setBreakIterator(Windows::Win32::Intl::UStringSearch* strsrch, Windows::Win32::Intl::UBreakIterator* breakiter, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_usearch_setBreakIterator(strsrch, breakiter, status);
    }
    inline Windows::Win32::Intl::UBreakIterator* usearch_getBreakIterator(Windows::Win32::Intl::UStringSearch* strsrch)
    {
        auto win32_impl_result = WIN32_IMPL_usearch_getBreakIterator(strsrch);
        return win32_impl_result;
    }
    inline void usearch_setText(Windows::Win32::Intl::UStringSearch* strsrch, uint16_t* text, int32_t textlength, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_usearch_setText(strsrch, text, textlength, status);
    }
    inline uint16_t* usearch_getText(Windows::Win32::Intl::UStringSearch* strsrch, int32_t* length)
    {
        auto win32_impl_result = WIN32_IMPL_usearch_getText(strsrch, length);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UCollator* usearch_getCollator(Windows::Win32::Intl::UStringSearch* strsrch)
    {
        auto win32_impl_result = WIN32_IMPL_usearch_getCollator(strsrch);
        return win32_impl_result;
    }
    inline void usearch_setCollator(Windows::Win32::Intl::UStringSearch* strsrch, Windows::Win32::Intl::UCollator* collator, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_usearch_setCollator(strsrch, collator, status);
    }
    inline void usearch_setPattern(Windows::Win32::Intl::UStringSearch* strsrch, uint16_t* pattern, int32_t patternlength, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_usearch_setPattern(strsrch, pattern, patternlength, status);
    }
    inline uint16_t* usearch_getPattern(Windows::Win32::Intl::UStringSearch* strsrch, int32_t* length)
    {
        auto win32_impl_result = WIN32_IMPL_usearch_getPattern(strsrch, length);
        return win32_impl_result;
    }
    inline int32_t usearch_first(Windows::Win32::Intl::UStringSearch* strsrch, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_usearch_first(strsrch, status);
        return win32_impl_result;
    }
    inline int32_t usearch_following(Windows::Win32::Intl::UStringSearch* strsrch, int32_t position, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_usearch_following(strsrch, position, status);
        return win32_impl_result;
    }
    inline int32_t usearch_last(Windows::Win32::Intl::UStringSearch* strsrch, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_usearch_last(strsrch, status);
        return win32_impl_result;
    }
    inline int32_t usearch_preceding(Windows::Win32::Intl::UStringSearch* strsrch, int32_t position, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_usearch_preceding(strsrch, position, status);
        return win32_impl_result;
    }
    inline int32_t usearch_next(Windows::Win32::Intl::UStringSearch* strsrch, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_usearch_next(strsrch, status);
        return win32_impl_result;
    }
    inline int32_t usearch_previous(Windows::Win32::Intl::UStringSearch* strsrch, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_usearch_previous(strsrch, status);
        return win32_impl_result;
    }
    inline void usearch_reset(Windows::Win32::Intl::UStringSearch* strsrch)
    {
        WIN32_IMPL_usearch_reset(strsrch);
    }
    inline Windows::Win32::Intl::USpoofChecker* uspoof_open(Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uspoof_open(status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::USpoofChecker* uspoof_openFromSerialized(void* data, int32_t length, int32_t* pActualLength, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_uspoof_openFromSerialized(data, length, pActualLength, pErrorCode);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::USpoofChecker* uspoof_openFromSource(int8_t* confusables, int32_t confusablesLen, int8_t* confusablesWholeScript, int32_t confusablesWholeScriptLen, int32_t* errType, Windows::Win32::Intl::UParseError* pe, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uspoof_openFromSource(confusables, confusablesLen, confusablesWholeScript, confusablesWholeScriptLen, errType, pe, status);
        return win32_impl_result;
    }
    inline void uspoof_close(Windows::Win32::Intl::USpoofChecker* sc)
    {
        WIN32_IMPL_uspoof_close(sc);
    }
    inline Windows::Win32::Intl::USpoofChecker* uspoof_clone(Windows::Win32::Intl::USpoofChecker* sc, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uspoof_clone(sc, status);
        return win32_impl_result;
    }
    inline void uspoof_setChecks(Windows::Win32::Intl::USpoofChecker* sc, int32_t checks, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_uspoof_setChecks(sc, checks, status);
    }
    inline int32_t uspoof_getChecks(Windows::Win32::Intl::USpoofChecker* sc, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uspoof_getChecks(sc, status);
        return win32_impl_result;
    }
    inline void uspoof_setRestrictionLevel(Windows::Win32::Intl::USpoofChecker* sc, Windows::Win32::Intl::URestrictionLevel restrictionLevel)
    {
        WIN32_IMPL_uspoof_setRestrictionLevel(sc, restrictionLevel);
    }
    inline Windows::Win32::Intl::URestrictionLevel uspoof_getRestrictionLevel(Windows::Win32::Intl::USpoofChecker* sc)
    {
        auto win32_impl_result = WIN32_IMPL_uspoof_getRestrictionLevel(sc);
        return win32_impl_result;
    }
    inline void uspoof_setAllowedLocales(Windows::Win32::Intl::USpoofChecker* sc, int8_t* localesList, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_uspoof_setAllowedLocales(sc, localesList, status);
    }
    inline int8_t* uspoof_getAllowedLocales(Windows::Win32::Intl::USpoofChecker* sc, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uspoof_getAllowedLocales(sc, status);
        return win32_impl_result;
    }
    inline void uspoof_setAllowedChars(Windows::Win32::Intl::USpoofChecker* sc, Windows::Win32::Intl::USet* chars, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_uspoof_setAllowedChars(sc, chars, status);
    }
    inline Windows::Win32::Intl::USet* uspoof_getAllowedChars(Windows::Win32::Intl::USpoofChecker* sc, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uspoof_getAllowedChars(sc, status);
        return win32_impl_result;
    }
    inline int32_t uspoof_check(Windows::Win32::Intl::USpoofChecker* sc, uint16_t* id, int32_t length, int32_t* position, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uspoof_check(sc, id, length, position, status);
        return win32_impl_result;
    }
    inline int32_t uspoof_checkUTF8(Windows::Win32::Intl::USpoofChecker* sc, int8_t* id, int32_t length, int32_t* position, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uspoof_checkUTF8(sc, id, length, position, status);
        return win32_impl_result;
    }
    inline int32_t uspoof_check2(Windows::Win32::Intl::USpoofChecker* sc, uint16_t* id, int32_t length, Windows::Win32::Intl::USpoofCheckResult* checkResult, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uspoof_check2(sc, id, length, checkResult, status);
        return win32_impl_result;
    }
    inline int32_t uspoof_check2UTF8(Windows::Win32::Intl::USpoofChecker* sc, int8_t* id, int32_t length, Windows::Win32::Intl::USpoofCheckResult* checkResult, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uspoof_check2UTF8(sc, id, length, checkResult, status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::USpoofCheckResult* uspoof_openCheckResult(Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uspoof_openCheckResult(status);
        return win32_impl_result;
    }
    inline void uspoof_closeCheckResult(Windows::Win32::Intl::USpoofCheckResult* checkResult)
    {
        WIN32_IMPL_uspoof_closeCheckResult(checkResult);
    }
    inline int32_t uspoof_getCheckResultChecks(Windows::Win32::Intl::USpoofCheckResult* checkResult, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uspoof_getCheckResultChecks(checkResult, status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::URestrictionLevel uspoof_getCheckResultRestrictionLevel(Windows::Win32::Intl::USpoofCheckResult* checkResult, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uspoof_getCheckResultRestrictionLevel(checkResult, status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::USet* uspoof_getCheckResultNumerics(Windows::Win32::Intl::USpoofCheckResult* checkResult, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uspoof_getCheckResultNumerics(checkResult, status);
        return win32_impl_result;
    }
    inline int32_t uspoof_areConfusable(Windows::Win32::Intl::USpoofChecker* sc, uint16_t* id1, int32_t length1, uint16_t* id2, int32_t length2, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uspoof_areConfusable(sc, id1, length1, id2, length2, status);
        return win32_impl_result;
    }
    inline int32_t uspoof_areConfusableUTF8(Windows::Win32::Intl::USpoofChecker* sc, int8_t* id1, int32_t length1, int8_t* id2, int32_t length2, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uspoof_areConfusableUTF8(sc, id1, length1, id2, length2, status);
        return win32_impl_result;
    }
    inline int32_t uspoof_getSkeleton(Windows::Win32::Intl::USpoofChecker* sc, uint32_t type, uint16_t* id, int32_t length, uint16_t* dest, int32_t destCapacity, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uspoof_getSkeleton(sc, type, id, length, dest, destCapacity, status);
        return win32_impl_result;
    }
    inline int32_t uspoof_getSkeletonUTF8(Windows::Win32::Intl::USpoofChecker* sc, uint32_t type, int8_t* id, int32_t length, int8_t* dest, int32_t destCapacity, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uspoof_getSkeletonUTF8(sc, type, id, length, dest, destCapacity, status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::USet* uspoof_getInclusionSet(Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uspoof_getInclusionSet(status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::USet* uspoof_getRecommendedSet(Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uspoof_getRecommendedSet(status);
        return win32_impl_result;
    }
    inline int32_t uspoof_serialize(Windows::Win32::Intl::USpoofChecker* sc, void* data, int32_t capacity, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_uspoof_serialize(sc, data, capacity, status);
        return win32_impl_result;
    }
    inline int64_t utmscale_getTimeScaleValue(Windows::Win32::Intl::UDateTimeScale timeScale, Windows::Win32::Intl::UTimeScaleValue value, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_utmscale_getTimeScaleValue(timeScale, value, status);
        return win32_impl_result;
    }
    inline int64_t utmscale_fromInt64(int64_t otherTime, Windows::Win32::Intl::UDateTimeScale timeScale, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_utmscale_fromInt64(otherTime, timeScale, status);
        return win32_impl_result;
    }
    inline int64_t utmscale_toInt64(int64_t universalTime, Windows::Win32::Intl::UDateTimeScale timeScale, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_utmscale_toInt64(universalTime, timeScale, status);
        return win32_impl_result;
    }
    inline void** utrans_openU(uint16_t* id, int32_t idLength, Windows::Win32::Intl::UTransDirection dir, uint16_t* rules, int32_t rulesLength, Windows::Win32::Intl::UParseError* parseError, Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_utrans_openU(id, idLength, dir, rules, rulesLength, parseError, pErrorCode);
        return win32_impl_result;
    }
    inline void** utrans_openInverse(void** trans, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_utrans_openInverse(trans, status);
        return win32_impl_result;
    }
    inline void** utrans_clone(void** trans, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_utrans_clone(trans, status);
        return win32_impl_result;
    }
    inline void utrans_close(void** trans)
    {
        WIN32_IMPL_utrans_close(trans);
    }
    inline uint16_t* utrans_getUnicodeID(void** trans, int32_t* resultLength)
    {
        auto win32_impl_result = WIN32_IMPL_utrans_getUnicodeID(trans, resultLength);
        return win32_impl_result;
    }
    inline void utrans_register(void** adoptedTrans, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_utrans_register(adoptedTrans, status);
    }
    inline void utrans_unregisterID(uint16_t* id, int32_t idLength)
    {
        WIN32_IMPL_utrans_unregisterID(id, idLength);
    }
    inline void utrans_setFilter(void** trans, uint16_t* filterPattern, int32_t filterPatternLen, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_utrans_setFilter(trans, filterPattern, filterPatternLen, status);
    }
    inline int32_t utrans_countAvailableIDs()
    {
        auto win32_impl_result = WIN32_IMPL_utrans_countAvailableIDs();
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::UEnumeration* utrans_openIDs(Windows::Win32::Intl::UErrorCode* pErrorCode)
    {
        auto win32_impl_result = WIN32_IMPL_utrans_openIDs(pErrorCode);
        return win32_impl_result;
    }
    inline void utrans_trans(void** trans, void** rep, Windows::Win32::Intl::UReplaceableCallbacks* repFunc, int32_t start, int32_t* limit, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_utrans_trans(trans, rep, repFunc, start, limit, status);
    }
    inline void utrans_transIncremental(void** trans, void** rep, Windows::Win32::Intl::UReplaceableCallbacks* repFunc, Windows::Win32::Intl::UTransPosition* pos, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_utrans_transIncremental(trans, rep, repFunc, pos, status);
    }
    inline void utrans_transUChars(void** trans, uint16_t* text, int32_t* textLength, int32_t textCapacity, int32_t start, int32_t* limit, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_utrans_transUChars(trans, text, textLength, textCapacity, start, limit, status);
    }
    inline void utrans_transIncrementalUChars(void** trans, uint16_t* text, int32_t* textLength, int32_t textCapacity, Windows::Win32::Intl::UTransPosition* pos, Windows::Win32::Intl::UErrorCode* status)
    {
        WIN32_IMPL_utrans_transIncrementalUChars(trans, text, textLength, textCapacity, pos, status);
    }
    inline int32_t utrans_toRules(void** trans, int8_t escapeUnprintable, uint16_t* result, int32_t resultLength, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_utrans_toRules(trans, escapeUnprintable, result, resultLength, status);
        return win32_impl_result;
    }
    inline Windows::Win32::Intl::USet* utrans_getSourceSet(void** trans, int8_t ignoreFilter, Windows::Win32::Intl::USet* fillIn, Windows::Win32::Intl::UErrorCode* status)
    {
        auto win32_impl_result = WIN32_IMPL_utrans_getSourceSet(trans, ignoreFilter, fillIn, status);
        return win32_impl_result;
    }
    inline int32_t FindStringOrdinal(uint32_t dwFindStringOrdinalFlags, uint16_t* lpStringSource, int32_t cchSource, uint16_t* lpStringValue, int32_t cchValue, Windows::Win32::SystemServices::BOOL bIgnoreCase)
    {
        auto win32_impl_result = WIN32_IMPL_FindStringOrdinal(dwFindStringOrdinalFlags, lpStringSource, cchSource, lpStringValue, cchValue, bIgnoreCase);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL IsTextUnicode(void* lpv, int32_t iSize, int32_t* lpiResult)
    {
        auto win32_impl_result = WIN32_IMPL_IsTextUnicode(lpv, iSize, lpiResult);
        return win32_impl_result;
    }

    inline constexpr int32_t UITER_UNKNOWN_INDEX = -2;
    inline constexpr int32_t UTEXT_PROVIDER_LENGTH_IS_EXPENSIVE = 1;
    inline constexpr int32_t UTEXT_PROVIDER_STABLE_CHUNKS = 2;
    inline constexpr int32_t UTEXT_PROVIDER_WRITABLE = 3;
    inline constexpr int32_t UTEXT_PROVIDER_HAS_META_DATA = 4;
    inline constexpr int32_t UTEXT_PROVIDER_OWNS_TEXT = 5;
    inline constexpr int32_t UTEXT_MAGIC = 878368812;
    inline constexpr int32_t USET_IGNORE_SPACE = 1;
    inline constexpr int32_t USET_CASE_INSENSITIVE = 2;
    inline constexpr int32_t USET_ADD_CASE_MAPPINGS = 4;
    inline constexpr int32_t USET_SERIALIZED_STATIC_ARRAY_CAPACITY = 8;
    inline constexpr int32_t U_PARSE_CONTEXT_LEN = 16;
    inline constexpr int32_t UIDNA_DEFAULT = 0;
    inline constexpr int32_t UIDNA_USE_STD3_RULES = 2;
    inline constexpr int32_t UIDNA_CHECK_BIDI = 4;
    inline constexpr int32_t UIDNA_CHECK_CONTEXTJ = 8;
    inline constexpr int32_t UIDNA_NONTRANSITIONAL_TO_ASCII = 16;
    inline constexpr int32_t UIDNA_NONTRANSITIONAL_TO_UNICODE = 32;
    inline constexpr int32_t UIDNA_CHECK_CONTEXTO = 64;
    inline constexpr int32_t UIDNA_ERROR_EMPTY_LABEL = 1;
    inline constexpr int32_t UIDNA_ERROR_LABEL_TOO_LONG = 2;
    inline constexpr int32_t UIDNA_ERROR_DOMAIN_NAME_TOO_LONG = 4;
    inline constexpr int32_t UIDNA_ERROR_LEADING_HYPHEN = 8;
    inline constexpr int32_t UIDNA_ERROR_TRAILING_HYPHEN = 16;
    inline constexpr int32_t UIDNA_ERROR_HYPHEN_3_4 = 32;
    inline constexpr int32_t UIDNA_ERROR_LEADING_COMBINING_MARK = 64;
    inline constexpr int32_t UIDNA_ERROR_DISALLOWED = 128;
    inline constexpr int32_t UIDNA_ERROR_PUNYCODE = 256;
    inline constexpr int32_t UIDNA_ERROR_LABEL_HAS_DOT = 512;
    inline constexpr int32_t UIDNA_ERROR_INVALID_ACE_LABEL = 1024;
    inline constexpr int32_t UIDNA_ERROR_BIDI = 2048;
    inline constexpr int32_t UIDNA_ERROR_CONTEXTJ = 4096;
    inline constexpr int32_t UIDNA_ERROR_CONTEXTO_PUNCTUATION = 8192;
    inline constexpr int32_t UIDNA_ERROR_CONTEXTO_DIGITS = 16384;
#pragma endregion methods

}
#endif
