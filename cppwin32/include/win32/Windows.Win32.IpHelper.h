// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_IpHelper_H
#define WIN32_Windows_Win32_IpHelper_H
#include "win32/base.h"
static_assert(win32::check_version(CPPWIN32_VERSION, "0.0.0.1"), "Mismatched C++/Win32 headers.");
#define CPPWIN32_VERSION "0.0.0.1"
#include "win32/impl/Windows.Win32.IpHelper.2.h"
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
#pragma region methods
    inline Windows::Win32::SystemServices::NTSTATUS GetIfEntry2(Windows::Win32::Mib::MIB_IF_ROW2* Row)
    {
        auto win32_impl_result = WIN32_IMPL_GetIfEntry2(Row);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS GetIfEntry2Ex(Windows::Win32::IpHelper::MIB_IF_ENTRY_LEVEL Level, Windows::Win32::Mib::MIB_IF_ROW2* Row)
    {
        auto win32_impl_result = WIN32_IMPL_GetIfEntry2Ex(Level, Row);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS GetIfTable2(Windows::Win32::Mib::MIB_IF_TABLE2** Table)
    {
        auto win32_impl_result = WIN32_IMPL_GetIfTable2(Table);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS GetIfTable2Ex(Windows::Win32::NetworkDrivers::MIB_IF_TABLE_LEVEL Level, Windows::Win32::Mib::MIB_IF_TABLE2** Table)
    {
        auto win32_impl_result = WIN32_IMPL_GetIfTable2Ex(Level, Table);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS GetIfStackTable(Windows::Win32::Mib::MIB_IFSTACK_TABLE** Table)
    {
        auto win32_impl_result = WIN32_IMPL_GetIfStackTable(Table);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS GetInvertedIfStackTable(Windows::Win32::Mib::MIB_INVERTEDIFSTACK_TABLE** Table)
    {
        auto win32_impl_result = WIN32_IMPL_GetInvertedIfStackTable(Table);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS GetIpInterfaceEntry(Windows::Win32::Mib::MIB_IPINTERFACE_ROW* Row)
    {
        auto win32_impl_result = WIN32_IMPL_GetIpInterfaceEntry(Row);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS GetIpInterfaceTable(uint16_t Family, Windows::Win32::Mib::MIB_IPINTERFACE_TABLE** Table)
    {
        auto win32_impl_result = WIN32_IMPL_GetIpInterfaceTable(Family, Table);
        return win32_impl_result;
    }
    inline void InitializeIpInterfaceEntry(Windows::Win32::Mib::MIB_IPINTERFACE_ROW* Row)
    {
        WIN32_IMPL_InitializeIpInterfaceEntry(Row);
    }
    inline Windows::Win32::SystemServices::NTSTATUS NotifyIpInterfaceChange(uint16_t Family, Windows::Win32::IpHelper::PIPINTERFACE_CHANGE_CALLBACK* Callback, void* CallerContext, uint8_t InitialNotification, Windows::Win32::SystemServices::HANDLE* NotificationHandle)
    {
        auto win32_impl_result = WIN32_IMPL_NotifyIpInterfaceChange(Family, Callback, CallerContext, InitialNotification, NotificationHandle);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS SetIpInterfaceEntry(Windows::Win32::Mib::MIB_IPINTERFACE_ROW* Row)
    {
        auto win32_impl_result = WIN32_IMPL_SetIpInterfaceEntry(Row);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS GetIpNetworkConnectionBandwidthEstimates(uint32_t InterfaceIndex, uint16_t AddressFamily, Windows::Win32::Mib::MIB_IP_NETWORK_CONNECTION_BANDWIDTH_ESTIMATES* BandwidthEstimates)
    {
        auto win32_impl_result = WIN32_IMPL_GetIpNetworkConnectionBandwidthEstimates(InterfaceIndex, AddressFamily, BandwidthEstimates);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS CreateUnicastIpAddressEntry(Windows::Win32::Mib::MIB_UNICASTIPADDRESS_ROW* Row)
    {
        auto win32_impl_result = WIN32_IMPL_CreateUnicastIpAddressEntry(Row);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS DeleteUnicastIpAddressEntry(Windows::Win32::Mib::MIB_UNICASTIPADDRESS_ROW* Row)
    {
        auto win32_impl_result = WIN32_IMPL_DeleteUnicastIpAddressEntry(Row);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS GetUnicastIpAddressEntry(Windows::Win32::Mib::MIB_UNICASTIPADDRESS_ROW* Row)
    {
        auto win32_impl_result = WIN32_IMPL_GetUnicastIpAddressEntry(Row);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS GetUnicastIpAddressTable(uint16_t Family, Windows::Win32::Mib::MIB_UNICASTIPADDRESS_TABLE** Table)
    {
        auto win32_impl_result = WIN32_IMPL_GetUnicastIpAddressTable(Family, Table);
        return win32_impl_result;
    }
    inline void InitializeUnicastIpAddressEntry(Windows::Win32::Mib::MIB_UNICASTIPADDRESS_ROW* Row)
    {
        WIN32_IMPL_InitializeUnicastIpAddressEntry(Row);
    }
    inline Windows::Win32::SystemServices::NTSTATUS NotifyUnicastIpAddressChange(uint16_t Family, Windows::Win32::IpHelper::PUNICAST_IPADDRESS_CHANGE_CALLBACK* Callback, void* CallerContext, uint8_t InitialNotification, Windows::Win32::SystemServices::HANDLE* NotificationHandle)
    {
        auto win32_impl_result = WIN32_IMPL_NotifyUnicastIpAddressChange(Family, Callback, CallerContext, InitialNotification, NotificationHandle);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS NotifyStableUnicastIpAddressTable(uint16_t Family, Windows::Win32::Mib::MIB_UNICASTIPADDRESS_TABLE** Table, Windows::Win32::IpHelper::PSTABLE_UNICAST_IPADDRESS_TABLE_CALLBACK* CallerCallback, void* CallerContext, Windows::Win32::SystemServices::HANDLE* NotificationHandle)
    {
        auto win32_impl_result = WIN32_IMPL_NotifyStableUnicastIpAddressTable(Family, Table, CallerCallback, CallerContext, NotificationHandle);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS SetUnicastIpAddressEntry(Windows::Win32::Mib::MIB_UNICASTIPADDRESS_ROW* Row)
    {
        auto win32_impl_result = WIN32_IMPL_SetUnicastIpAddressEntry(Row);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS CreateAnycastIpAddressEntry(Windows::Win32::Mib::MIB_ANYCASTIPADDRESS_ROW* Row)
    {
        auto win32_impl_result = WIN32_IMPL_CreateAnycastIpAddressEntry(Row);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS DeleteAnycastIpAddressEntry(Windows::Win32::Mib::MIB_ANYCASTIPADDRESS_ROW* Row)
    {
        auto win32_impl_result = WIN32_IMPL_DeleteAnycastIpAddressEntry(Row);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS GetAnycastIpAddressEntry(Windows::Win32::Mib::MIB_ANYCASTIPADDRESS_ROW* Row)
    {
        auto win32_impl_result = WIN32_IMPL_GetAnycastIpAddressEntry(Row);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS GetAnycastIpAddressTable(uint16_t Family, Windows::Win32::Mib::MIB_ANYCASTIPADDRESS_TABLE** Table)
    {
        auto win32_impl_result = WIN32_IMPL_GetAnycastIpAddressTable(Family, Table);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS GetMulticastIpAddressEntry(Windows::Win32::Mib::MIB_MULTICASTIPADDRESS_ROW* Row)
    {
        auto win32_impl_result = WIN32_IMPL_GetMulticastIpAddressEntry(Row);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS GetMulticastIpAddressTable(uint16_t Family, Windows::Win32::Mib::MIB_MULTICASTIPADDRESS_TABLE** Table)
    {
        auto win32_impl_result = WIN32_IMPL_GetMulticastIpAddressTable(Family, Table);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS CreateIpForwardEntry2(Windows::Win32::Mib::MIB_IPFORWARD_ROW2* Row)
    {
        auto win32_impl_result = WIN32_IMPL_CreateIpForwardEntry2(Row);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS DeleteIpForwardEntry2(Windows::Win32::Mib::MIB_IPFORWARD_ROW2* Row)
    {
        auto win32_impl_result = WIN32_IMPL_DeleteIpForwardEntry2(Row);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS GetBestRoute2(Windows::Win32::IpHelper::NET_LUID_LH* InterfaceLuid, uint32_t InterfaceIndex, Windows::Win32::IpHelper::SOCKADDR_INET* SourceAddress, Windows::Win32::IpHelper::SOCKADDR_INET* DestinationAddress, uint32_t AddressSortOptions, Windows::Win32::Mib::MIB_IPFORWARD_ROW2* BestRoute, Windows::Win32::IpHelper::SOCKADDR_INET* BestSourceAddress)
    {
        auto win32_impl_result = WIN32_IMPL_GetBestRoute2(InterfaceLuid, InterfaceIndex, SourceAddress, DestinationAddress, AddressSortOptions, BestRoute, BestSourceAddress);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS GetIpForwardEntry2(Windows::Win32::Mib::MIB_IPFORWARD_ROW2* Row)
    {
        auto win32_impl_result = WIN32_IMPL_GetIpForwardEntry2(Row);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS GetIpForwardTable2(uint16_t Family, Windows::Win32::Mib::MIB_IPFORWARD_TABLE2** Table)
    {
        auto win32_impl_result = WIN32_IMPL_GetIpForwardTable2(Family, Table);
        return win32_impl_result;
    }
    inline void InitializeIpForwardEntry(Windows::Win32::Mib::MIB_IPFORWARD_ROW2* Row)
    {
        WIN32_IMPL_InitializeIpForwardEntry(Row);
    }
    inline Windows::Win32::SystemServices::NTSTATUS NotifyRouteChange2(uint16_t AddressFamily, Windows::Win32::IpHelper::PIPFORWARD_CHANGE_CALLBACK* Callback, void* CallerContext, uint8_t InitialNotification, Windows::Win32::SystemServices::HANDLE* NotificationHandle)
    {
        auto win32_impl_result = WIN32_IMPL_NotifyRouteChange2(AddressFamily, Callback, CallerContext, InitialNotification, NotificationHandle);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS SetIpForwardEntry2(Windows::Win32::Mib::MIB_IPFORWARD_ROW2* Route)
    {
        auto win32_impl_result = WIN32_IMPL_SetIpForwardEntry2(Route);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS FlushIpPathTable(uint16_t Family)
    {
        auto win32_impl_result = WIN32_IMPL_FlushIpPathTable(Family);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS GetIpPathEntry(Windows::Win32::Mib::MIB_IPPATH_ROW* Row)
    {
        auto win32_impl_result = WIN32_IMPL_GetIpPathEntry(Row);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS GetIpPathTable(uint16_t Family, Windows::Win32::Mib::MIB_IPPATH_TABLE** Table)
    {
        auto win32_impl_result = WIN32_IMPL_GetIpPathTable(Family, Table);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS CreateIpNetEntry2(Windows::Win32::Mib::MIB_IPNET_ROW2* Row)
    {
        auto win32_impl_result = WIN32_IMPL_CreateIpNetEntry2(Row);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS DeleteIpNetEntry2(Windows::Win32::Mib::MIB_IPNET_ROW2* Row)
    {
        auto win32_impl_result = WIN32_IMPL_DeleteIpNetEntry2(Row);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS FlushIpNetTable2(uint16_t Family, uint32_t InterfaceIndex)
    {
        auto win32_impl_result = WIN32_IMPL_FlushIpNetTable2(Family, InterfaceIndex);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS GetIpNetEntry2(Windows::Win32::Mib::MIB_IPNET_ROW2* Row)
    {
        auto win32_impl_result = WIN32_IMPL_GetIpNetEntry2(Row);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS GetIpNetTable2(uint16_t Family, Windows::Win32::Mib::MIB_IPNET_TABLE2** Table)
    {
        auto win32_impl_result = WIN32_IMPL_GetIpNetTable2(Family, Table);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS ResolveIpNetEntry2(Windows::Win32::Mib::MIB_IPNET_ROW2* Row, Windows::Win32::IpHelper::SOCKADDR_INET* SourceAddress)
    {
        auto win32_impl_result = WIN32_IMPL_ResolveIpNetEntry2(Row, SourceAddress);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS SetIpNetEntry2(Windows::Win32::Mib::MIB_IPNET_ROW2* Row)
    {
        auto win32_impl_result = WIN32_IMPL_SetIpNetEntry2(Row);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS NotifyTeredoPortChange(Windows::Win32::IpHelper::PTEREDO_PORT_CHANGE_CALLBACK* Callback, void* CallerContext, uint8_t InitialNotification, Windows::Win32::SystemServices::HANDLE* NotificationHandle)
    {
        auto win32_impl_result = WIN32_IMPL_NotifyTeredoPortChange(Callback, CallerContext, InitialNotification, NotificationHandle);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS GetTeredoPort(uint16_t* Port)
    {
        auto win32_impl_result = WIN32_IMPL_GetTeredoPort(Port);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS CancelMibChangeNotify2(Windows::Win32::SystemServices::HANDLE NotificationHandle)
    {
        auto win32_impl_result = WIN32_IMPL_CancelMibChangeNotify2(NotificationHandle);
        return win32_impl_result;
    }
    inline void FreeMibTable(void* Memory)
    {
        WIN32_IMPL_FreeMibTable(Memory);
    }
    inline Windows::Win32::SystemServices::NTSTATUS CreateSortedAddressPairs(Windows::Win32::NetworkDrivers::SOCKADDR_IN6_LH* SourceAddressList, uint32_t SourceAddressCount, Windows::Win32::NetworkDrivers::SOCKADDR_IN6_LH* DestinationAddressList, uint32_t DestinationAddressCount, uint32_t AddressSortOptions, Windows::Win32::IpHelper::SOCKADDR_IN6_PAIR** SortedAddressPairList, uint32_t* SortedAddressPairCount)
    {
        auto win32_impl_result = WIN32_IMPL_CreateSortedAddressPairs(SourceAddressList, SourceAddressCount, DestinationAddressList, DestinationAddressCount, AddressSortOptions, SortedAddressPairList, SortedAddressPairCount);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS ConvertCompartmentGuidToId(::win32::guid* CompartmentGuid, uint32_t* CompartmentId)
    {
        auto win32_impl_result = WIN32_IMPL_ConvertCompartmentGuidToId(CompartmentGuid, CompartmentId);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS ConvertCompartmentIdToGuid(uint32_t CompartmentId, ::win32::guid* CompartmentGuid)
    {
        auto win32_impl_result = WIN32_IMPL_ConvertCompartmentIdToGuid(CompartmentId, CompartmentGuid);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS ConvertInterfaceNameToLuidA(int8_t* InterfaceName, Windows::Win32::IpHelper::NET_LUID_LH* InterfaceLuid)
    {
        auto win32_impl_result = WIN32_IMPL_ConvertInterfaceNameToLuidA(InterfaceName, InterfaceLuid);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS ConvertInterfaceNameToLuidW(uint16_t* InterfaceName, Windows::Win32::IpHelper::NET_LUID_LH* InterfaceLuid)
    {
        auto win32_impl_result = WIN32_IMPL_ConvertInterfaceNameToLuidW(InterfaceName, InterfaceLuid);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS ConvertInterfaceLuidToNameA(Windows::Win32::IpHelper::NET_LUID_LH* InterfaceLuid, int8_t* InterfaceName, size_t Length)
    {
        auto win32_impl_result = WIN32_IMPL_ConvertInterfaceLuidToNameA(InterfaceLuid, InterfaceName, Length);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS ConvertInterfaceLuidToNameW(Windows::Win32::IpHelper::NET_LUID_LH* InterfaceLuid, uint16_t* InterfaceName, size_t Length)
    {
        auto win32_impl_result = WIN32_IMPL_ConvertInterfaceLuidToNameW(InterfaceLuid, InterfaceName, Length);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS ConvertInterfaceLuidToIndex(Windows::Win32::IpHelper::NET_LUID_LH* InterfaceLuid, uint32_t* InterfaceIndex)
    {
        auto win32_impl_result = WIN32_IMPL_ConvertInterfaceLuidToIndex(InterfaceLuid, InterfaceIndex);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS ConvertInterfaceIndexToLuid(uint32_t InterfaceIndex, Windows::Win32::IpHelper::NET_LUID_LH* InterfaceLuid)
    {
        auto win32_impl_result = WIN32_IMPL_ConvertInterfaceIndexToLuid(InterfaceIndex, InterfaceLuid);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS ConvertInterfaceLuidToAlias(Windows::Win32::IpHelper::NET_LUID_LH* InterfaceLuid, uint16_t* InterfaceAlias, size_t Length)
    {
        auto win32_impl_result = WIN32_IMPL_ConvertInterfaceLuidToAlias(InterfaceLuid, InterfaceAlias, Length);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS ConvertInterfaceAliasToLuid(uint16_t* InterfaceAlias, Windows::Win32::IpHelper::NET_LUID_LH* InterfaceLuid)
    {
        auto win32_impl_result = WIN32_IMPL_ConvertInterfaceAliasToLuid(InterfaceAlias, InterfaceLuid);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS ConvertInterfaceLuidToGuid(Windows::Win32::IpHelper::NET_LUID_LH* InterfaceLuid, ::win32::guid* InterfaceGuid)
    {
        auto win32_impl_result = WIN32_IMPL_ConvertInterfaceLuidToGuid(InterfaceLuid, InterfaceGuid);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS ConvertInterfaceGuidToLuid(::win32::guid* InterfaceGuid, Windows::Win32::IpHelper::NET_LUID_LH* InterfaceLuid)
    {
        auto win32_impl_result = WIN32_IMPL_ConvertInterfaceGuidToLuid(InterfaceGuid, InterfaceLuid);
        return win32_impl_result;
    }
    inline uint32_t if_nametoindex(int8_t* InterfaceName)
    {
        auto win32_impl_result = WIN32_IMPL_if_nametoindex(InterfaceName);
        return win32_impl_result;
    }
    inline int8_t* if_indextoname(uint32_t InterfaceIndex, int8_t* InterfaceName)
    {
        auto win32_impl_result = WIN32_IMPL_if_indextoname(InterfaceIndex, InterfaceName);
        return win32_impl_result;
    }
    inline void GetCurrentThreadCompartmentScope(uint32_t* CompartmentScope, uint32_t* CompartmentId)
    {
        WIN32_IMPL_GetCurrentThreadCompartmentScope(CompartmentScope, CompartmentId);
    }
    inline Windows::Win32::SystemServices::NTSTATUS SetCurrentThreadCompartmentScope(uint32_t CompartmentScope)
    {
        auto win32_impl_result = WIN32_IMPL_SetCurrentThreadCompartmentScope(CompartmentScope);
        return win32_impl_result;
    }
    inline uint32_t GetJobCompartmentId(Windows::Win32::SystemServices::HANDLE JobHandle)
    {
        auto win32_impl_result = WIN32_IMPL_GetJobCompartmentId(JobHandle);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS SetJobCompartmentId(Windows::Win32::SystemServices::HANDLE JobHandle, uint32_t CompartmentId)
    {
        auto win32_impl_result = WIN32_IMPL_SetJobCompartmentId(JobHandle, CompartmentId);
        return win32_impl_result;
    }
    inline uint32_t GetDefaultCompartmentId()
    {
        auto win32_impl_result = WIN32_IMPL_GetDefaultCompartmentId();
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS ConvertLengthToIpv4Mask(uint32_t MaskLength, uint32_t* Mask)
    {
        auto win32_impl_result = WIN32_IMPL_ConvertLengthToIpv4Mask(MaskLength, Mask);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS ConvertIpv4MaskToLength(uint32_t Mask, uint8_t* MaskLength)
    {
        auto win32_impl_result = WIN32_IMPL_ConvertIpv4MaskToLength(Mask, MaskLength);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS GetDnsSettings(Windows::Win32::IpHelper::DNS_SETTINGS* Settings)
    {
        auto win32_impl_result = WIN32_IMPL_GetDnsSettings(Settings);
        return win32_impl_result;
    }
    inline void FreeDnsSettings(Windows::Win32::IpHelper::DNS_SETTINGS* Settings)
    {
        WIN32_IMPL_FreeDnsSettings(Settings);
    }
    inline Windows::Win32::SystemServices::NTSTATUS SetDnsSettings(Windows::Win32::IpHelper::DNS_SETTINGS* Settings)
    {
        auto win32_impl_result = WIN32_IMPL_SetDnsSettings(Settings);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS GetInterfaceDnsSettings(::win32::guid Interface, Windows::Win32::IpHelper::DNS_INTERFACE_SETTINGS* Settings)
    {
        auto win32_impl_result = WIN32_IMPL_GetInterfaceDnsSettings(Interface, Settings);
        return win32_impl_result;
    }
    inline void FreeInterfaceDnsSettings(Windows::Win32::IpHelper::DNS_INTERFACE_SETTINGS* Settings)
    {
        WIN32_IMPL_FreeInterfaceDnsSettings(Settings);
    }
    inline Windows::Win32::SystemServices::NTSTATUS SetInterfaceDnsSettings(::win32::guid Interface, Windows::Win32::IpHelper::DNS_INTERFACE_SETTINGS* Settings)
    {
        auto win32_impl_result = WIN32_IMPL_SetInterfaceDnsSettings(Interface, Settings);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS GetNetworkConnectivityHint(Windows::Win32::IpHelper::NL_NETWORK_CONNECTIVITY_HINT* ConnectivityHint)
    {
        auto win32_impl_result = WIN32_IMPL_GetNetworkConnectivityHint(ConnectivityHint);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS GetNetworkConnectivityHintForInterface(uint32_t InterfaceIndex, Windows::Win32::IpHelper::NL_NETWORK_CONNECTIVITY_HINT* ConnectivityHint)
    {
        auto win32_impl_result = WIN32_IMPL_GetNetworkConnectivityHintForInterface(InterfaceIndex, ConnectivityHint);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS NotifyNetworkConnectivityHintChange(Windows::Win32::IpHelper::PNETWORK_CONNECTIVITY_HINT_CHANGE_CALLBACK* Callback, void* CallerContext, uint8_t InitialNotification, intptr_t* NotificationHandle)
    {
        auto win32_impl_result = WIN32_IMPL_NotifyNetworkConnectivityHintChange(Callback, CallerContext, InitialNotification, NotificationHandle);
        return win32_impl_result;
    }
    inline Windows::Win32::IpHelper::IcmpHandle IcmpCreateFile()
    {
        auto win32_impl_result = WIN32_IMPL_IcmpCreateFile();
        return win32_impl_result;
    }
    inline Windows::Win32::IpHelper::IcmpHandle Icmp6CreateFile()
    {
        auto win32_impl_result = WIN32_IMPL_Icmp6CreateFile();
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL IcmpCloseHandle(Windows::Win32::SystemServices::HANDLE IcmpHandle)
    {
        auto win32_impl_result = WIN32_IMPL_IcmpCloseHandle(IcmpHandle);
        return win32_impl_result;
    }
    inline uint32_t IcmpSendEcho(Windows::Win32::SystemServices::HANDLE IcmpHandle, uint32_t DestinationAddress, void* RequestData, uint16_t RequestSize, Windows::Win32::IpHelper::ip_option_information* RequestOptions, void* ReplyBuffer, uint32_t ReplySize, uint32_t Timeout)
    {
        auto win32_impl_result = WIN32_IMPL_IcmpSendEcho(IcmpHandle, DestinationAddress, RequestData, RequestSize, RequestOptions, ReplyBuffer, ReplySize, Timeout);
        return win32_impl_result;
    }
    inline uint32_t IcmpSendEcho2(Windows::Win32::SystemServices::HANDLE IcmpHandle, Windows::Win32::SystemServices::HANDLE Event, Windows::Win32::SystemServices::FARPROC* ApcRoutine, void* ApcContext, uint32_t DestinationAddress, void* RequestData, uint16_t RequestSize, Windows::Win32::IpHelper::ip_option_information* RequestOptions, void* ReplyBuffer, uint32_t ReplySize, uint32_t Timeout)
    {
        auto win32_impl_result = WIN32_IMPL_IcmpSendEcho2(IcmpHandle, Event, ApcRoutine, ApcContext, DestinationAddress, RequestData, RequestSize, RequestOptions, ReplyBuffer, ReplySize, Timeout);
        return win32_impl_result;
    }
    inline uint32_t IcmpSendEcho2Ex(Windows::Win32::SystemServices::HANDLE IcmpHandle, Windows::Win32::SystemServices::HANDLE Event, Windows::Win32::SystemServices::FARPROC* ApcRoutine, void* ApcContext, uint32_t SourceAddress, uint32_t DestinationAddress, void* RequestData, uint16_t RequestSize, Windows::Win32::IpHelper::ip_option_information* RequestOptions, void* ReplyBuffer, uint32_t ReplySize, uint32_t Timeout)
    {
        auto win32_impl_result = WIN32_IMPL_IcmpSendEcho2Ex(IcmpHandle, Event, ApcRoutine, ApcContext, SourceAddress, DestinationAddress, RequestData, RequestSize, RequestOptions, ReplyBuffer, ReplySize, Timeout);
        return win32_impl_result;
    }
    inline uint32_t Icmp6SendEcho2(Windows::Win32::SystemServices::HANDLE IcmpHandle, Windows::Win32::SystemServices::HANDLE Event, Windows::Win32::SystemServices::FARPROC* ApcRoutine, void* ApcContext, Windows::Win32::NetworkDrivers::SOCKADDR_IN6_LH* SourceAddress, Windows::Win32::NetworkDrivers::SOCKADDR_IN6_LH* DestinationAddress, void* RequestData, uint16_t RequestSize, Windows::Win32::IpHelper::ip_option_information* RequestOptions, void* ReplyBuffer, uint32_t ReplySize, uint32_t Timeout)
    {
        auto win32_impl_result = WIN32_IMPL_Icmp6SendEcho2(IcmpHandle, Event, ApcRoutine, ApcContext, SourceAddress, DestinationAddress, RequestData, RequestSize, RequestOptions, ReplyBuffer, ReplySize, Timeout);
        return win32_impl_result;
    }
    inline uint32_t IcmpParseReplies(void* ReplyBuffer, uint32_t ReplySize)
    {
        auto win32_impl_result = WIN32_IMPL_IcmpParseReplies(ReplyBuffer, ReplySize);
        return win32_impl_result;
    }
    inline uint32_t Icmp6ParseReplies(void* ReplyBuffer, uint32_t ReplySize)
    {
        auto win32_impl_result = WIN32_IMPL_Icmp6ParseReplies(ReplyBuffer, ReplySize);
        return win32_impl_result;
    }
    inline uint32_t GetNumberOfInterfaces(uint32_t* pdwNumIf)
    {
        auto win32_impl_result = WIN32_IMPL_GetNumberOfInterfaces(pdwNumIf);
        return win32_impl_result;
    }
    inline uint32_t GetIfEntry(Windows::Win32::Mib::MIB_IFROW* pIfRow)
    {
        auto win32_impl_result = WIN32_IMPL_GetIfEntry(pIfRow);
        return win32_impl_result;
    }
    inline uint32_t GetIfTable(Windows::Win32::Mib::MIB_IFTABLE* pIfTable, uint32_t* pdwSize, Windows::Win32::SystemServices::BOOL bOrder)
    {
        auto win32_impl_result = WIN32_IMPL_GetIfTable(pIfTable, pdwSize, bOrder);
        return win32_impl_result;
    }
    inline uint32_t GetIpAddrTable(Windows::Win32::Mib::MIB_IPADDRTABLE* pIpAddrTable, uint32_t* pdwSize, Windows::Win32::SystemServices::BOOL bOrder)
    {
        auto win32_impl_result = WIN32_IMPL_GetIpAddrTable(pIpAddrTable, pdwSize, bOrder);
        return win32_impl_result;
    }
    inline uint32_t GetIpNetTable(Windows::Win32::Mib::MIB_IPNETTABLE* IpNetTable, uint32_t* SizePointer, Windows::Win32::SystemServices::BOOL Order)
    {
        auto win32_impl_result = WIN32_IMPL_GetIpNetTable(IpNetTable, SizePointer, Order);
        return win32_impl_result;
    }
    inline uint32_t GetIpForwardTable(Windows::Win32::Mib::MIB_IPFORWARDTABLE* pIpForwardTable, uint32_t* pdwSize, Windows::Win32::SystemServices::BOOL bOrder)
    {
        auto win32_impl_result = WIN32_IMPL_GetIpForwardTable(pIpForwardTable, pdwSize, bOrder);
        return win32_impl_result;
    }
    inline uint32_t GetTcpTable(Windows::Win32::Mib::MIB_TCPTABLE* TcpTable, uint32_t* SizePointer, Windows::Win32::SystemServices::BOOL Order)
    {
        auto win32_impl_result = WIN32_IMPL_GetTcpTable(TcpTable, SizePointer, Order);
        return win32_impl_result;
    }
    inline uint32_t GetExtendedTcpTable(void* pTcpTable, uint32_t* pdwSize, Windows::Win32::SystemServices::BOOL bOrder, uint32_t ulAf, Windows::Win32::IpHelper::TCP_TABLE_CLASS TableClass, uint32_t Reserved)
    {
        auto win32_impl_result = WIN32_IMPL_GetExtendedTcpTable(pTcpTable, pdwSize, bOrder, ulAf, TableClass, Reserved);
        return win32_impl_result;
    }
    inline uint32_t GetOwnerModuleFromTcpEntry(Windows::Win32::Mib::MIB_TCPROW_OWNER_MODULE* pTcpEntry, Windows::Win32::IpHelper::TCPIP_OWNER_MODULE_INFO_CLASS Class, void* pBuffer, uint32_t* pdwSize)
    {
        auto win32_impl_result = WIN32_IMPL_GetOwnerModuleFromTcpEntry(pTcpEntry, Class, pBuffer, pdwSize);
        return win32_impl_result;
    }
    inline uint32_t GetUdpTable(Windows::Win32::Mib::MIB_UDPTABLE* UdpTable, uint32_t* SizePointer, Windows::Win32::SystemServices::BOOL Order)
    {
        auto win32_impl_result = WIN32_IMPL_GetUdpTable(UdpTable, SizePointer, Order);
        return win32_impl_result;
    }
    inline uint32_t GetExtendedUdpTable(void* pUdpTable, uint32_t* pdwSize, Windows::Win32::SystemServices::BOOL bOrder, uint32_t ulAf, Windows::Win32::IpHelper::UDP_TABLE_CLASS TableClass, uint32_t Reserved)
    {
        auto win32_impl_result = WIN32_IMPL_GetExtendedUdpTable(pUdpTable, pdwSize, bOrder, ulAf, TableClass, Reserved);
        return win32_impl_result;
    }
    inline uint32_t GetOwnerModuleFromUdpEntry(Windows::Win32::Mib::MIB_UDPROW_OWNER_MODULE* pUdpEntry, Windows::Win32::IpHelper::TCPIP_OWNER_MODULE_INFO_CLASS Class, void* pBuffer, uint32_t* pdwSize)
    {
        auto win32_impl_result = WIN32_IMPL_GetOwnerModuleFromUdpEntry(pUdpEntry, Class, pBuffer, pdwSize);
        return win32_impl_result;
    }
    inline uint32_t GetTcpTable2(Windows::Win32::Mib::MIB_TCPTABLE2* TcpTable, uint32_t* SizePointer, Windows::Win32::SystemServices::BOOL Order)
    {
        auto win32_impl_result = WIN32_IMPL_GetTcpTable2(TcpTable, SizePointer, Order);
        return win32_impl_result;
    }
    inline uint32_t GetTcp6Table(Windows::Win32::Mib::MIB_TCP6TABLE* TcpTable, uint32_t* SizePointer, Windows::Win32::SystemServices::BOOL Order)
    {
        auto win32_impl_result = WIN32_IMPL_GetTcp6Table(TcpTable, SizePointer, Order);
        return win32_impl_result;
    }
    inline uint32_t GetTcp6Table2(Windows::Win32::Mib::MIB_TCP6TABLE2* TcpTable, uint32_t* SizePointer, Windows::Win32::SystemServices::BOOL Order)
    {
        auto win32_impl_result = WIN32_IMPL_GetTcp6Table2(TcpTable, SizePointer, Order);
        return win32_impl_result;
    }
    inline uint32_t GetPerTcpConnectionEStats(Windows::Win32::Mib::MIB_TCPROW_LH* Row, Windows::Win32::IpHelper::TCP_ESTATS_TYPE EstatsType, uint8_t* Rw, uint32_t RwVersion, uint32_t RwSize, uint8_t* Ros, uint32_t RosVersion, uint32_t RosSize, uint8_t* Rod, uint32_t RodVersion, uint32_t RodSize)
    {
        auto win32_impl_result = WIN32_IMPL_GetPerTcpConnectionEStats(Row, EstatsType, Rw, RwVersion, RwSize, Ros, RosVersion, RosSize, Rod, RodVersion, RodSize);
        return win32_impl_result;
    }
    inline uint32_t SetPerTcpConnectionEStats(Windows::Win32::Mib::MIB_TCPROW_LH* Row, Windows::Win32::IpHelper::TCP_ESTATS_TYPE EstatsType, uint8_t* Rw, uint32_t RwVersion, uint32_t RwSize, uint32_t Offset)
    {
        auto win32_impl_result = WIN32_IMPL_SetPerTcpConnectionEStats(Row, EstatsType, Rw, RwVersion, RwSize, Offset);
        return win32_impl_result;
    }
    inline uint32_t GetPerTcp6ConnectionEStats(Windows::Win32::Mib::MIB_TCP6ROW* Row, Windows::Win32::IpHelper::TCP_ESTATS_TYPE EstatsType, uint8_t* Rw, uint32_t RwVersion, uint32_t RwSize, uint8_t* Ros, uint32_t RosVersion, uint32_t RosSize, uint8_t* Rod, uint32_t RodVersion, uint32_t RodSize)
    {
        auto win32_impl_result = WIN32_IMPL_GetPerTcp6ConnectionEStats(Row, EstatsType, Rw, RwVersion, RwSize, Ros, RosVersion, RosSize, Rod, RodVersion, RodSize);
        return win32_impl_result;
    }
    inline uint32_t SetPerTcp6ConnectionEStats(Windows::Win32::Mib::MIB_TCP6ROW* Row, Windows::Win32::IpHelper::TCP_ESTATS_TYPE EstatsType, uint8_t* Rw, uint32_t RwVersion, uint32_t RwSize, uint32_t Offset)
    {
        auto win32_impl_result = WIN32_IMPL_SetPerTcp6ConnectionEStats(Row, EstatsType, Rw, RwVersion, RwSize, Offset);
        return win32_impl_result;
    }
    inline uint32_t GetOwnerModuleFromTcp6Entry(Windows::Win32::Mib::MIB_TCP6ROW_OWNER_MODULE* pTcpEntry, Windows::Win32::IpHelper::TCPIP_OWNER_MODULE_INFO_CLASS Class, void* pBuffer, uint32_t* pdwSize)
    {
        auto win32_impl_result = WIN32_IMPL_GetOwnerModuleFromTcp6Entry(pTcpEntry, Class, pBuffer, pdwSize);
        return win32_impl_result;
    }
    inline uint32_t GetUdp6Table(Windows::Win32::Mib::MIB_UDP6TABLE* Udp6Table, uint32_t* SizePointer, Windows::Win32::SystemServices::BOOL Order)
    {
        auto win32_impl_result = WIN32_IMPL_GetUdp6Table(Udp6Table, SizePointer, Order);
        return win32_impl_result;
    }
    inline uint32_t GetOwnerModuleFromUdp6Entry(Windows::Win32::Mib::MIB_UDP6ROW_OWNER_MODULE* pUdpEntry, Windows::Win32::IpHelper::TCPIP_OWNER_MODULE_INFO_CLASS Class, void* pBuffer, uint32_t* pdwSize)
    {
        auto win32_impl_result = WIN32_IMPL_GetOwnerModuleFromUdp6Entry(pUdpEntry, Class, pBuffer, pdwSize);
        return win32_impl_result;
    }
    inline uint32_t GetOwnerModuleFromPidAndInfo(uint32_t ulPid, uint64_t* pInfo, Windows::Win32::IpHelper::TCPIP_OWNER_MODULE_INFO_CLASS Class, void* pBuffer, uint32_t* pdwSize)
    {
        auto win32_impl_result = WIN32_IMPL_GetOwnerModuleFromPidAndInfo(ulPid, pInfo, Class, pBuffer, pdwSize);
        return win32_impl_result;
    }
    inline uint32_t GetIpStatistics(Windows::Win32::Mib::MIB_IPSTATS_LH* Statistics)
    {
        auto win32_impl_result = WIN32_IMPL_GetIpStatistics(Statistics);
        return win32_impl_result;
    }
    inline uint32_t GetIcmpStatistics(Windows::Win32::Mib::MIB_ICMP* Statistics)
    {
        auto win32_impl_result = WIN32_IMPL_GetIcmpStatistics(Statistics);
        return win32_impl_result;
    }
    inline uint32_t GetTcpStatistics(Windows::Win32::Mib::MIB_TCPSTATS_LH* Statistics)
    {
        auto win32_impl_result = WIN32_IMPL_GetTcpStatistics(Statistics);
        return win32_impl_result;
    }
    inline uint32_t GetUdpStatistics(Windows::Win32::Mib::MIB_UDPSTATS* Stats)
    {
        auto win32_impl_result = WIN32_IMPL_GetUdpStatistics(Stats);
        return win32_impl_result;
    }
    inline uint32_t SetIpStatisticsEx(Windows::Win32::Mib::MIB_IPSTATS_LH* Statistics, uint32_t Family)
    {
        auto win32_impl_result = WIN32_IMPL_SetIpStatisticsEx(Statistics, Family);
        return win32_impl_result;
    }
    inline uint32_t GetIpStatisticsEx(Windows::Win32::Mib::MIB_IPSTATS_LH* Statistics, uint32_t Family)
    {
        auto win32_impl_result = WIN32_IMPL_GetIpStatisticsEx(Statistics, Family);
        return win32_impl_result;
    }
    inline uint32_t GetIcmpStatisticsEx(Windows::Win32::Mib::MIB_ICMP_EX_XPSP1* Statistics, uint32_t Family)
    {
        auto win32_impl_result = WIN32_IMPL_GetIcmpStatisticsEx(Statistics, Family);
        return win32_impl_result;
    }
    inline uint32_t GetTcpStatisticsEx(Windows::Win32::Mib::MIB_TCPSTATS_LH* Statistics, uint32_t Family)
    {
        auto win32_impl_result = WIN32_IMPL_GetTcpStatisticsEx(Statistics, Family);
        return win32_impl_result;
    }
    inline uint32_t GetUdpStatisticsEx(Windows::Win32::Mib::MIB_UDPSTATS* Statistics, uint32_t Family)
    {
        auto win32_impl_result = WIN32_IMPL_GetUdpStatisticsEx(Statistics, Family);
        return win32_impl_result;
    }
    inline uint32_t GetTcpStatisticsEx2(Windows::Win32::Mib::MIB_TCPSTATS2* Statistics, uint32_t Family)
    {
        auto win32_impl_result = WIN32_IMPL_GetTcpStatisticsEx2(Statistics, Family);
        return win32_impl_result;
    }
    inline uint32_t GetUdpStatisticsEx2(Windows::Win32::Mib::MIB_UDPSTATS2* Statistics, uint32_t Family)
    {
        auto win32_impl_result = WIN32_IMPL_GetUdpStatisticsEx2(Statistics, Family);
        return win32_impl_result;
    }
    inline uint32_t SetIfEntry(Windows::Win32::Mib::MIB_IFROW* pIfRow)
    {
        auto win32_impl_result = WIN32_IMPL_SetIfEntry(pIfRow);
        return win32_impl_result;
    }
    inline uint32_t CreateIpForwardEntry(Windows::Win32::Mib::MIB_IPFORWARDROW* pRoute)
    {
        auto win32_impl_result = WIN32_IMPL_CreateIpForwardEntry(pRoute);
        return win32_impl_result;
    }
    inline uint32_t SetIpForwardEntry(Windows::Win32::Mib::MIB_IPFORWARDROW* pRoute)
    {
        auto win32_impl_result = WIN32_IMPL_SetIpForwardEntry(pRoute);
        return win32_impl_result;
    }
    inline uint32_t DeleteIpForwardEntry(Windows::Win32::Mib::MIB_IPFORWARDROW* pRoute)
    {
        auto win32_impl_result = WIN32_IMPL_DeleteIpForwardEntry(pRoute);
        return win32_impl_result;
    }
    inline uint32_t SetIpStatistics(Windows::Win32::Mib::MIB_IPSTATS_LH* pIpStats)
    {
        auto win32_impl_result = WIN32_IMPL_SetIpStatistics(pIpStats);
        return win32_impl_result;
    }
    inline uint32_t SetIpTTL(uint32_t nTTL)
    {
        auto win32_impl_result = WIN32_IMPL_SetIpTTL(nTTL);
        return win32_impl_result;
    }
    inline uint32_t CreateIpNetEntry(Windows::Win32::Mib::MIB_IPNETROW_LH* pArpEntry)
    {
        auto win32_impl_result = WIN32_IMPL_CreateIpNetEntry(pArpEntry);
        return win32_impl_result;
    }
    inline uint32_t SetIpNetEntry(Windows::Win32::Mib::MIB_IPNETROW_LH* pArpEntry)
    {
        auto win32_impl_result = WIN32_IMPL_SetIpNetEntry(pArpEntry);
        return win32_impl_result;
    }
    inline uint32_t DeleteIpNetEntry(Windows::Win32::Mib::MIB_IPNETROW_LH* pArpEntry)
    {
        auto win32_impl_result = WIN32_IMPL_DeleteIpNetEntry(pArpEntry);
        return win32_impl_result;
    }
    inline uint32_t FlushIpNetTable(uint32_t dwIfIndex)
    {
        auto win32_impl_result = WIN32_IMPL_FlushIpNetTable(dwIfIndex);
        return win32_impl_result;
    }
    inline uint32_t CreateProxyArpEntry(uint32_t dwAddress, uint32_t dwMask, uint32_t dwIfIndex)
    {
        auto win32_impl_result = WIN32_IMPL_CreateProxyArpEntry(dwAddress, dwMask, dwIfIndex);
        return win32_impl_result;
    }
    inline uint32_t DeleteProxyArpEntry(uint32_t dwAddress, uint32_t dwMask, uint32_t dwIfIndex)
    {
        auto win32_impl_result = WIN32_IMPL_DeleteProxyArpEntry(dwAddress, dwMask, dwIfIndex);
        return win32_impl_result;
    }
    inline uint32_t SetTcpEntry(Windows::Win32::Mib::MIB_TCPROW_LH* pTcpRow)
    {
        auto win32_impl_result = WIN32_IMPL_SetTcpEntry(pTcpRow);
        return win32_impl_result;
    }
    inline uint32_t GetInterfaceInfo(Windows::Win32::IpHelper::IP_INTERFACE_INFO* pIfTable, uint32_t* dwOutBufLen)
    {
        auto win32_impl_result = WIN32_IMPL_GetInterfaceInfo(pIfTable, dwOutBufLen);
        return win32_impl_result;
    }
    inline uint32_t GetUniDirectionalAdapterInfo(Windows::Win32::IpHelper::IP_UNIDIRECTIONAL_ADAPTER_ADDRESS* pIPIfInfo, uint32_t* dwOutBufLen)
    {
        auto win32_impl_result = WIN32_IMPL_GetUniDirectionalAdapterInfo(pIPIfInfo, dwOutBufLen);
        return win32_impl_result;
    }
    inline uint32_t NhpAllocateAndGetInterfaceInfoFromStack(Windows::Win32::IpHelper::ip_interface_name_info_w2ksp1** ppTable, uint32_t* pdwCount, Windows::Win32::SystemServices::BOOL bOrder, Windows::Win32::SystemServices::HANDLE hHeap, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_NhpAllocateAndGetInterfaceInfoFromStack(ppTable, pdwCount, bOrder, hHeap, dwFlags);
        return win32_impl_result;
    }
    inline uint32_t GetBestInterface(uint32_t dwDestAddr, uint32_t* pdwBestIfIndex)
    {
        auto win32_impl_result = WIN32_IMPL_GetBestInterface(dwDestAddr, pdwBestIfIndex);
        return win32_impl_result;
    }
    inline uint32_t GetBestInterfaceEx(Windows::Win32::WinSock::SOCKADDR* pDestAddr, uint32_t* pdwBestIfIndex)
    {
        auto win32_impl_result = WIN32_IMPL_GetBestInterfaceEx(pDestAddr, pdwBestIfIndex);
        return win32_impl_result;
    }
    inline uint32_t GetBestRoute(uint32_t dwDestAddr, uint32_t dwSourceAddr, Windows::Win32::Mib::MIB_IPFORWARDROW* pBestRoute)
    {
        auto win32_impl_result = WIN32_IMPL_GetBestRoute(dwDestAddr, dwSourceAddr, pBestRoute);
        return win32_impl_result;
    }
    inline uint32_t NotifyAddrChange(intptr_t* Handle, Windows::Win32::SystemServices::OVERLAPPED* overlapped)
    {
        auto win32_impl_result = WIN32_IMPL_NotifyAddrChange(Handle, overlapped);
        return win32_impl_result;
    }
    inline uint32_t NotifyRouteChange(intptr_t* Handle, Windows::Win32::SystemServices::OVERLAPPED* overlapped)
    {
        auto win32_impl_result = WIN32_IMPL_NotifyRouteChange(Handle, overlapped);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CancelIPChangeNotify(Windows::Win32::SystemServices::OVERLAPPED* notifyOverlapped)
    {
        auto win32_impl_result = WIN32_IMPL_CancelIPChangeNotify(notifyOverlapped);
        return win32_impl_result;
    }
    inline uint32_t GetAdapterIndex(uint16_t* AdapterName, uint32_t* IfIndex)
    {
        auto win32_impl_result = WIN32_IMPL_GetAdapterIndex(AdapterName, IfIndex);
        return win32_impl_result;
    }
    inline uint32_t AddIPAddress(uint32_t Address, uint32_t IpMask, uint32_t IfIndex, uint32_t* NTEContext, uint32_t* NTEInstance)
    {
        auto win32_impl_result = WIN32_IMPL_AddIPAddress(Address, IpMask, IfIndex, NTEContext, NTEInstance);
        return win32_impl_result;
    }
    inline uint32_t DeleteIPAddress(uint32_t NTEContext)
    {
        auto win32_impl_result = WIN32_IMPL_DeleteIPAddress(NTEContext);
        return win32_impl_result;
    }
    inline uint32_t GetNetworkParams(Windows::Win32::IpHelper::FIXED_INFO_W2KSP1* pFixedInfo, uint32_t* pOutBufLen)
    {
        auto win32_impl_result = WIN32_IMPL_GetNetworkParams(pFixedInfo, pOutBufLen);
        return win32_impl_result;
    }
    inline uint32_t GetAdaptersInfo(Windows::Win32::IpHelper::IP_ADAPTER_INFO* AdapterInfo, uint32_t* SizePointer)
    {
        auto win32_impl_result = WIN32_IMPL_GetAdaptersInfo(AdapterInfo, SizePointer);
        return win32_impl_result;
    }
    inline Windows::Win32::IpHelper::IP_ADAPTER_ORDER_MAP* GetAdapterOrderMap()
    {
        auto win32_impl_result = WIN32_IMPL_GetAdapterOrderMap();
        return win32_impl_result;
    }
    inline uint32_t GetAdaptersAddresses(uint32_t Family, uint32_t Flags, void* Reserved, Windows::Win32::IpHelper::IP_ADAPTER_ADDRESSES_LH* AdapterAddresses, uint32_t* SizePointer)
    {
        auto win32_impl_result = WIN32_IMPL_GetAdaptersAddresses(Family, Flags, Reserved, AdapterAddresses, SizePointer);
        return win32_impl_result;
    }
    inline uint32_t GetPerAdapterInfo(uint32_t IfIndex, Windows::Win32::IpHelper::IP_PER_ADAPTER_INFO_W2KSP1* pPerAdapterInfo, uint32_t* pOutBufLen)
    {
        auto win32_impl_result = WIN32_IMPL_GetPerAdapterInfo(IfIndex, pPerAdapterInfo, pOutBufLen);
        return win32_impl_result;
    }
    inline uint32_t GetInterfaceCurrentTimestampCapabilities(Windows::Win32::IpHelper::NET_LUID_LH* InterfaceLuid, Windows::Win32::IpHelper::INTERFACE_TIMESTAMP_CAPABILITIES* TimestampCapabilites)
    {
        auto win32_impl_result = WIN32_IMPL_GetInterfaceCurrentTimestampCapabilities(InterfaceLuid, TimestampCapabilites);
        return win32_impl_result;
    }
    inline uint32_t GetInterfaceHardwareTimestampCapabilities(Windows::Win32::IpHelper::NET_LUID_LH* InterfaceLuid, Windows::Win32::IpHelper::INTERFACE_TIMESTAMP_CAPABILITIES* TimestampCapabilites)
    {
        auto win32_impl_result = WIN32_IMPL_GetInterfaceHardwareTimestampCapabilities(InterfaceLuid, TimestampCapabilites);
        return win32_impl_result;
    }
    inline uint32_t CaptureInterfaceHardwareCrossTimestamp(Windows::Win32::IpHelper::NET_LUID_LH* InterfaceLuid, Windows::Win32::IpHelper::INTERFACE_HARDWARE_CROSSTIMESTAMP* CrossTimestamp)
    {
        auto win32_impl_result = WIN32_IMPL_CaptureInterfaceHardwareCrossTimestamp(InterfaceLuid, CrossTimestamp);
        return win32_impl_result;
    }
    inline uint32_t NotifyIfTimestampConfigChange(void* CallerContext, Windows::Win32::IpHelper::PINTERFACE_TIMESTAMP_CONFIG_CHANGE_CALLBACK* Callback, Windows::Win32::IpHelper::HIFTIMESTAMPCHANGE__** NotificationHandle)
    {
        auto win32_impl_result = WIN32_IMPL_NotifyIfTimestampConfigChange(CallerContext, Callback, NotificationHandle);
        return win32_impl_result;
    }
    inline void CancelIfTimestampConfigChange(Windows::Win32::IpHelper::HIFTIMESTAMPCHANGE__* NotificationHandle)
    {
        WIN32_IMPL_CancelIfTimestampConfigChange(NotificationHandle);
    }
    inline uint32_t IpReleaseAddress(Windows::Win32::IpHelper::IP_ADAPTER_INDEX_MAP* AdapterInfo)
    {
        auto win32_impl_result = WIN32_IMPL_IpReleaseAddress(AdapterInfo);
        return win32_impl_result;
    }
    inline uint32_t IpRenewAddress(Windows::Win32::IpHelper::IP_ADAPTER_INDEX_MAP* AdapterInfo)
    {
        auto win32_impl_result = WIN32_IMPL_IpRenewAddress(AdapterInfo);
        return win32_impl_result;
    }
    inline uint32_t SendARP(uint32_t DestIP, uint32_t SrcIP, void* pMacAddr, uint32_t* PhyAddrLen)
    {
        auto win32_impl_result = WIN32_IMPL_SendARP(DestIP, SrcIP, pMacAddr, PhyAddrLen);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetRTTAndHopCount(uint32_t DestIpAddress, uint32_t* HopCount, uint32_t MaxHops, uint32_t* RTT)
    {
        auto win32_impl_result = WIN32_IMPL_GetRTTAndHopCount(DestIpAddress, HopCount, MaxHops, RTT);
        return win32_impl_result;
    }
    inline uint32_t GetFriendlyIfIndex(uint32_t IfIndex)
    {
        auto win32_impl_result = WIN32_IMPL_GetFriendlyIfIndex(IfIndex);
        return win32_impl_result;
    }
    inline uint32_t EnableRouter(Windows::Win32::SystemServices::HANDLE* pHandle, Windows::Win32::SystemServices::OVERLAPPED* pOverlapped)
    {
        auto win32_impl_result = WIN32_IMPL_EnableRouter(pHandle, pOverlapped);
        return win32_impl_result;
    }
    inline uint32_t UnenableRouter(Windows::Win32::SystemServices::OVERLAPPED* pOverlapped, uint32_t* lpdwEnableCount)
    {
        auto win32_impl_result = WIN32_IMPL_UnenableRouter(pOverlapped, lpdwEnableCount);
        return win32_impl_result;
    }
    inline uint32_t DisableMediaSense(Windows::Win32::SystemServices::HANDLE* pHandle, Windows::Win32::SystemServices::OVERLAPPED* pOverLapped)
    {
        auto win32_impl_result = WIN32_IMPL_DisableMediaSense(pHandle, pOverLapped);
        return win32_impl_result;
    }
    inline uint32_t RestoreMediaSense(Windows::Win32::SystemServices::OVERLAPPED* pOverlapped, uint32_t* lpdwEnableCount)
    {
        auto win32_impl_result = WIN32_IMPL_RestoreMediaSense(pOverlapped, lpdwEnableCount);
        return win32_impl_result;
    }
    inline uint32_t GetIpErrorString(uint32_t ErrorCode, uint16_t* Buffer, uint32_t* Size)
    {
        auto win32_impl_result = WIN32_IMPL_GetIpErrorString(ErrorCode, Buffer, Size);
        return win32_impl_result;
    }
    inline uint32_t ResolveNeighbor(Windows::Win32::WinSock::SOCKADDR* NetworkAddress, void* PhysicalAddress, uint32_t* PhysicalAddressLength)
    {
        auto win32_impl_result = WIN32_IMPL_ResolveNeighbor(NetworkAddress, PhysicalAddress, PhysicalAddressLength);
        return win32_impl_result;
    }
    inline uint32_t CreatePersistentTcpPortReservation(uint16_t StartPort, uint16_t NumberOfPorts, uint64_t* Token)
    {
        auto win32_impl_result = WIN32_IMPL_CreatePersistentTcpPortReservation(StartPort, NumberOfPorts, Token);
        return win32_impl_result;
    }
    inline uint32_t CreatePersistentUdpPortReservation(uint16_t StartPort, uint16_t NumberOfPorts, uint64_t* Token)
    {
        auto win32_impl_result = WIN32_IMPL_CreatePersistentUdpPortReservation(StartPort, NumberOfPorts, Token);
        return win32_impl_result;
    }
    inline uint32_t DeletePersistentTcpPortReservation(uint16_t StartPort, uint16_t NumberOfPorts)
    {
        auto win32_impl_result = WIN32_IMPL_DeletePersistentTcpPortReservation(StartPort, NumberOfPorts);
        return win32_impl_result;
    }
    inline uint32_t DeletePersistentUdpPortReservation(uint16_t StartPort, uint16_t NumberOfPorts)
    {
        auto win32_impl_result = WIN32_IMPL_DeletePersistentUdpPortReservation(StartPort, NumberOfPorts);
        return win32_impl_result;
    }
    inline uint32_t LookupPersistentTcpPortReservation(uint16_t StartPort, uint16_t NumberOfPorts, uint64_t* Token)
    {
        auto win32_impl_result = WIN32_IMPL_LookupPersistentTcpPortReservation(StartPort, NumberOfPorts, Token);
        return win32_impl_result;
    }
    inline uint32_t LookupPersistentUdpPortReservation(uint16_t StartPort, uint16_t NumberOfPorts, uint64_t* Token)
    {
        auto win32_impl_result = WIN32_IMPL_LookupPersistentUdpPortReservation(StartPort, NumberOfPorts, Token);
        return win32_impl_result;
    }
    inline int8_t* RtlIpv4AddressToStringA(Windows::Win32::WinSock::in_addr* Addr, int8_t* S)
    {
        auto win32_impl_result = WIN32_IMPL_RtlIpv4AddressToStringA(Addr, S);
        return win32_impl_result;
    }
    inline uint16_t* RtlIpv4AddressToStringW(Windows::Win32::WinSock::in_addr* Addr, uint16_t* S)
    {
        auto win32_impl_result = WIN32_IMPL_RtlIpv4AddressToStringW(Addr, S);
        return win32_impl_result;
    }
    inline int32_t RtlIpv4AddressToStringExW(Windows::Win32::WinSock::in_addr* Address, uint16_t Port, uint16_t* AddressString, uint32_t* AddressStringLength)
    {
        auto win32_impl_result = WIN32_IMPL_RtlIpv4AddressToStringExW(Address, Port, AddressString, AddressStringLength);
        return win32_impl_result;
    }
    inline int32_t RtlIpv4StringToAddressA(int8_t* S, uint8_t Strict, int8_t** Terminator, Windows::Win32::WinSock::in_addr* Addr)
    {
        auto win32_impl_result = WIN32_IMPL_RtlIpv4StringToAddressA(S, Strict, Terminator, Addr);
        return win32_impl_result;
    }
    inline int32_t RtlIpv4StringToAddressW(uint16_t* S, uint8_t Strict, uint16_t** Terminator, Windows::Win32::WinSock::in_addr* Addr)
    {
        auto win32_impl_result = WIN32_IMPL_RtlIpv4StringToAddressW(S, Strict, Terminator, Addr);
        return win32_impl_result;
    }
    inline int32_t RtlIpv4StringToAddressExW(uint16_t* AddressString, uint8_t Strict, Windows::Win32::WinSock::in_addr* Address, uint16_t* Port)
    {
        auto win32_impl_result = WIN32_IMPL_RtlIpv4StringToAddressExW(AddressString, Strict, Address, Port);
        return win32_impl_result;
    }
    inline int8_t* RtlIpv6AddressToStringA(Windows::Win32::WinSock::in6_addr* Addr, int8_t* S)
    {
        auto win32_impl_result = WIN32_IMPL_RtlIpv6AddressToStringA(Addr, S);
        return win32_impl_result;
    }
    inline uint16_t* RtlIpv6AddressToStringW(Windows::Win32::WinSock::in6_addr* Addr, uint16_t* S)
    {
        auto win32_impl_result = WIN32_IMPL_RtlIpv6AddressToStringW(Addr, S);
        return win32_impl_result;
    }
    inline int32_t RtlIpv6AddressToStringExW(Windows::Win32::WinSock::in6_addr* Address, uint32_t ScopeId, uint16_t Port, uint16_t* AddressString, uint32_t* AddressStringLength)
    {
        auto win32_impl_result = WIN32_IMPL_RtlIpv6AddressToStringExW(Address, ScopeId, Port, AddressString, AddressStringLength);
        return win32_impl_result;
    }
    inline int32_t RtlIpv6StringToAddressA(int8_t* S, int8_t** Terminator, Windows::Win32::WinSock::in6_addr* Addr)
    {
        auto win32_impl_result = WIN32_IMPL_RtlIpv6StringToAddressA(S, Terminator, Addr);
        return win32_impl_result;
    }
    inline int32_t RtlIpv6StringToAddressW(uint16_t* S, uint16_t** Terminator, Windows::Win32::WinSock::in6_addr* Addr)
    {
        auto win32_impl_result = WIN32_IMPL_RtlIpv6StringToAddressW(S, Terminator, Addr);
        return win32_impl_result;
    }
    inline int32_t RtlIpv6StringToAddressExW(uint16_t* AddressString, Windows::Win32::WinSock::in6_addr* Address, uint32_t* ScopeId, uint16_t* Port)
    {
        auto win32_impl_result = WIN32_IMPL_RtlIpv6StringToAddressExW(AddressString, Address, ScopeId, Port);
        return win32_impl_result;
    }
    inline int8_t* RtlEthernetAddressToStringA(Windows::Win32::WindowsFiltering::DL_EUI48* Addr, int8_t* S)
    {
        auto win32_impl_result = WIN32_IMPL_RtlEthernetAddressToStringA(Addr, S);
        return win32_impl_result;
    }
    inline uint16_t* RtlEthernetAddressToStringW(Windows::Win32::WindowsFiltering::DL_EUI48* Addr, uint16_t* S)
    {
        auto win32_impl_result = WIN32_IMPL_RtlEthernetAddressToStringW(Addr, S);
        return win32_impl_result;
    }
    inline int32_t RtlEthernetStringToAddressA(int8_t* S, int8_t** Terminator, Windows::Win32::WindowsFiltering::DL_EUI48* Addr)
    {
        auto win32_impl_result = WIN32_IMPL_RtlEthernetStringToAddressA(S, Terminator, Addr);
        return win32_impl_result;
    }
    inline int32_t RtlEthernetStringToAddressW(uint16_t* S, uint16_t** Terminator, Windows::Win32::WindowsFiltering::DL_EUI48* Addr)
    {
        auto win32_impl_result = WIN32_IMPL_RtlEthernetStringToAddressW(S, Terminator, Addr);
        return win32_impl_result;
    }

#pragma endregion methods

}
#endif
