// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_KeyboardAndMouseInput_H
#define WIN32_Windows_Win32_KeyboardAndMouseInput_H
#include "win32/base.h"
static_assert(win32::check_version(CPPWIN32_VERSION, "0.0.0.1"), "Mismatched C++/Win32 headers.");
#define CPPWIN32_VERSION "0.0.0.1"
#include "win32/impl/Windows.Win32.KeyboardAndMouseInput.2.h"
WIN32_EXPORT namespace win32::Windows::Win32::KeyboardAndMouseInput
{
#pragma region methods
    inline Windows::Win32::SystemServices::BOOL _TrackMouseEvent(Windows::Win32::KeyboardAndMouseInput::TRACKMOUSEEVENT* lpEventTrack)
    {
        auto win32_impl_result = WIN32_IMPL__TrackMouseEvent(lpEventTrack);
        return win32_impl_result;
    }
    inline intptr_t LoadKeyboardLayoutA(int8_t* pwszKLID, uint32_t Flags)
    {
        auto win32_impl_result = WIN32_IMPL_LoadKeyboardLayoutA(pwszKLID, Flags);
        return win32_impl_result;
    }
    inline intptr_t LoadKeyboardLayoutW(uint16_t* pwszKLID, uint32_t Flags)
    {
        auto win32_impl_result = WIN32_IMPL_LoadKeyboardLayoutW(pwszKLID, Flags);
        return win32_impl_result;
    }
    inline intptr_t ActivateKeyboardLayout(intptr_t hkl, uint32_t Flags)
    {
        auto win32_impl_result = WIN32_IMPL_ActivateKeyboardLayout(hkl, Flags);
        return win32_impl_result;
    }
    inline int32_t ToUnicodeEx(uint32_t wVirtKey, uint32_t wScanCode, uint8_t* lpKeyState, uint16_t* pwszBuff, int32_t cchBuff, uint32_t wFlags, intptr_t dwhkl)
    {
        auto win32_impl_result = WIN32_IMPL_ToUnicodeEx(wVirtKey, wScanCode, lpKeyState, pwszBuff, cchBuff, wFlags, dwhkl);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL UnloadKeyboardLayout(intptr_t hkl)
    {
        auto win32_impl_result = WIN32_IMPL_UnloadKeyboardLayout(hkl);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetKeyboardLayoutNameA(int8_t* pwszKLID)
    {
        auto win32_impl_result = WIN32_IMPL_GetKeyboardLayoutNameA(pwszKLID);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetKeyboardLayoutNameW(uint16_t* pwszKLID)
    {
        auto win32_impl_result = WIN32_IMPL_GetKeyboardLayoutNameW(pwszKLID);
        return win32_impl_result;
    }
    inline int32_t GetKeyboardLayoutList(int32_t nBuff, intptr_t* lpList)
    {
        auto win32_impl_result = WIN32_IMPL_GetKeyboardLayoutList(nBuff, lpList);
        return win32_impl_result;
    }
    inline intptr_t GetKeyboardLayout(uint32_t idThread)
    {
        auto win32_impl_result = WIN32_IMPL_GetKeyboardLayout(idThread);
        return win32_impl_result;
    }
    inline int32_t GetMouseMovePointsEx(uint32_t cbSize, Windows::Win32::KeyboardAndMouseInput::MOUSEMOVEPOINT* lppt, Windows::Win32::KeyboardAndMouseInput::MOUSEMOVEPOINT* lpptBuf, int32_t nBufPoints, uint32_t resolution)
    {
        auto win32_impl_result = WIN32_IMPL_GetMouseMovePointsEx(cbSize, lppt, lpptBuf, nBufPoints, resolution);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL TrackMouseEvent(Windows::Win32::KeyboardAndMouseInput::TRACKMOUSEEVENT* lpEventTrack)
    {
        auto win32_impl_result = WIN32_IMPL_TrackMouseEvent(lpEventTrack);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL RegisterHotKey(Windows::Win32::WindowsAndMessaging::HWND hWnd, int32_t id, uint32_t fsModifiers, uint32_t vk)
    {
        auto win32_impl_result = WIN32_IMPL_RegisterHotKey(hWnd, id, fsModifiers, vk);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL UnregisterHotKey(Windows::Win32::WindowsAndMessaging::HWND hWnd, int32_t id)
    {
        auto win32_impl_result = WIN32_IMPL_UnregisterHotKey(hWnd, id);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SwapMouseButton(Windows::Win32::SystemServices::BOOL fSwap)
    {
        auto win32_impl_result = WIN32_IMPL_SwapMouseButton(fSwap);
        return win32_impl_result;
    }
    inline uint32_t GetDoubleClickTime()
    {
        auto win32_impl_result = WIN32_IMPL_GetDoubleClickTime();
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SetDoubleClickTime(uint32_t param0)
    {
        auto win32_impl_result = WIN32_IMPL_SetDoubleClickTime(param0);
        return win32_impl_result;
    }
    inline Windows::Win32::WindowsAndMessaging::HWND SetFocus(Windows::Win32::WindowsAndMessaging::HWND hWnd)
    {
        auto win32_impl_result = WIN32_IMPL_SetFocus(hWnd);
        return win32_impl_result;
    }
    inline Windows::Win32::WindowsAndMessaging::HWND GetActiveWindow()
    {
        auto win32_impl_result = WIN32_IMPL_GetActiveWindow();
        return win32_impl_result;
    }
    inline Windows::Win32::WindowsAndMessaging::HWND GetFocus()
    {
        auto win32_impl_result = WIN32_IMPL_GetFocus();
        return win32_impl_result;
    }
    inline uint32_t GetKBCodePage()
    {
        auto win32_impl_result = WIN32_IMPL_GetKBCodePage();
        return win32_impl_result;
    }
    inline int16_t GetKeyState(int32_t nVirtKey)
    {
        auto win32_impl_result = WIN32_IMPL_GetKeyState(nVirtKey);
        return win32_impl_result;
    }
    inline int16_t GetAsyncKeyState(int32_t vKey)
    {
        auto win32_impl_result = WIN32_IMPL_GetAsyncKeyState(vKey);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetKeyboardState(uint8_t* lpKeyState)
    {
        auto win32_impl_result = WIN32_IMPL_GetKeyboardState(lpKeyState);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SetKeyboardState(uint8_t* lpKeyState)
    {
        auto win32_impl_result = WIN32_IMPL_SetKeyboardState(lpKeyState);
        return win32_impl_result;
    }
    inline int32_t GetKeyNameTextA(int32_t lParam, int8_t* lpString, int32_t cchSize)
    {
        auto win32_impl_result = WIN32_IMPL_GetKeyNameTextA(lParam, lpString, cchSize);
        return win32_impl_result;
    }
    inline int32_t GetKeyNameTextW(int32_t lParam, uint16_t* lpString, int32_t cchSize)
    {
        auto win32_impl_result = WIN32_IMPL_GetKeyNameTextW(lParam, lpString, cchSize);
        return win32_impl_result;
    }
    inline int32_t GetKeyboardType(int32_t nTypeFlag)
    {
        auto win32_impl_result = WIN32_IMPL_GetKeyboardType(nTypeFlag);
        return win32_impl_result;
    }
    inline int32_t ToAscii(uint32_t uVirtKey, uint32_t uScanCode, uint8_t* lpKeyState, uint16_t* lpChar, uint32_t uFlags)
    {
        auto win32_impl_result = WIN32_IMPL_ToAscii(uVirtKey, uScanCode, lpKeyState, lpChar, uFlags);
        return win32_impl_result;
    }
    inline int32_t ToAsciiEx(uint32_t uVirtKey, uint32_t uScanCode, uint8_t* lpKeyState, uint16_t* lpChar, uint32_t uFlags, intptr_t dwhkl)
    {
        auto win32_impl_result = WIN32_IMPL_ToAsciiEx(uVirtKey, uScanCode, lpKeyState, lpChar, uFlags, dwhkl);
        return win32_impl_result;
    }
    inline int32_t ToUnicode(uint32_t wVirtKey, uint32_t wScanCode, uint8_t* lpKeyState, uint16_t* pwszBuff, int32_t cchBuff, uint32_t wFlags)
    {
        auto win32_impl_result = WIN32_IMPL_ToUnicode(wVirtKey, wScanCode, lpKeyState, pwszBuff, cchBuff, wFlags);
        return win32_impl_result;
    }
    inline uint32_t OemKeyScan(uint16_t wOemChar)
    {
        auto win32_impl_result = WIN32_IMPL_OemKeyScan(wOemChar);
        return win32_impl_result;
    }
    inline int16_t VkKeyScanA(int8_t ch)
    {
        auto win32_impl_result = WIN32_IMPL_VkKeyScanA(ch);
        return win32_impl_result;
    }
    inline int16_t VkKeyScanW(uint16_t ch)
    {
        auto win32_impl_result = WIN32_IMPL_VkKeyScanW(ch);
        return win32_impl_result;
    }
    inline int16_t VkKeyScanExA(int8_t ch, intptr_t dwhkl)
    {
        auto win32_impl_result = WIN32_IMPL_VkKeyScanExA(ch, dwhkl);
        return win32_impl_result;
    }
    inline int16_t VkKeyScanExW(uint16_t ch, intptr_t dwhkl)
    {
        auto win32_impl_result = WIN32_IMPL_VkKeyScanExW(ch, dwhkl);
        return win32_impl_result;
    }
    inline void keybd_event(uint8_t bVk, uint8_t bScan, uint32_t dwFlags, size_t dwExtraInfo)
    {
        WIN32_IMPL_keybd_event(bVk, bScan, dwFlags, dwExtraInfo);
    }
    inline void mouse_event(uint32_t dwFlags, uint32_t dx, uint32_t dy, uint32_t dwData, size_t dwExtraInfo)
    {
        WIN32_IMPL_mouse_event(dwFlags, dx, dy, dwData, dwExtraInfo);
    }
    inline uint32_t SendInput(uint32_t cInputs, Windows::Win32::KeyboardAndMouseInput::INPUT* pInputs, int32_t cbSize)
    {
        auto win32_impl_result = WIN32_IMPL_SendInput(cInputs, pInputs, cbSize);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetLastInputInfo(Windows::Win32::KeyboardAndMouseInput::LASTINPUTINFO* plii)
    {
        auto win32_impl_result = WIN32_IMPL_GetLastInputInfo(plii);
        return win32_impl_result;
    }
    inline uint32_t MapVirtualKeyA(uint32_t uCode, uint32_t uMapType)
    {
        auto win32_impl_result = WIN32_IMPL_MapVirtualKeyA(uCode, uMapType);
        return win32_impl_result;
    }
    inline uint32_t MapVirtualKeyW(uint32_t uCode, uint32_t uMapType)
    {
        auto win32_impl_result = WIN32_IMPL_MapVirtualKeyW(uCode, uMapType);
        return win32_impl_result;
    }
    inline uint32_t MapVirtualKeyExA(uint32_t uCode, uint32_t uMapType, intptr_t dwhkl)
    {
        auto win32_impl_result = WIN32_IMPL_MapVirtualKeyExA(uCode, uMapType, dwhkl);
        return win32_impl_result;
    }
    inline uint32_t MapVirtualKeyExW(uint32_t uCode, uint32_t uMapType, intptr_t dwhkl)
    {
        auto win32_impl_result = WIN32_IMPL_MapVirtualKeyExW(uCode, uMapType, dwhkl);
        return win32_impl_result;
    }
    inline Windows::Win32::WindowsAndMessaging::HWND GetCapture()
    {
        auto win32_impl_result = WIN32_IMPL_GetCapture();
        return win32_impl_result;
    }
    inline Windows::Win32::WindowsAndMessaging::HWND SetCapture(Windows::Win32::WindowsAndMessaging::HWND hWnd)
    {
        auto win32_impl_result = WIN32_IMPL_SetCapture(hWnd);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ReleaseCapture()
    {
        auto win32_impl_result = WIN32_IMPL_ReleaseCapture();
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL EnableWindow(Windows::Win32::WindowsAndMessaging::HWND hWnd, Windows::Win32::SystemServices::BOOL bEnable)
    {
        auto win32_impl_result = WIN32_IMPL_EnableWindow(hWnd, bEnable);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL IsWindowEnabled(Windows::Win32::WindowsAndMessaging::HWND hWnd)
    {
        auto win32_impl_result = WIN32_IMPL_IsWindowEnabled(hWnd);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL DragDetect(Windows::Win32::WindowsAndMessaging::HWND hwnd, Windows::Win32::DisplayDevices::POINT pt)
    {
        auto win32_impl_result = WIN32_IMPL_DragDetect(hwnd, pt);
        return win32_impl_result;
    }
    inline Windows::Win32::WindowsAndMessaging::HWND SetActiveWindow(Windows::Win32::WindowsAndMessaging::HWND hWnd)
    {
        auto win32_impl_result = WIN32_IMPL_SetActiveWindow(hWnd);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL BlockInput(Windows::Win32::SystemServices::BOOL fBlockIt)
    {
        auto win32_impl_result = WIN32_IMPL_BlockInput(fBlockIt);
        return win32_impl_result;
    }
    inline uint32_t GetRawInputData(intptr_t hRawInput, uint32_t uiCommand, void* pData, uint32_t* pcbSize, uint32_t cbSizeHeader)
    {
        auto win32_impl_result = WIN32_IMPL_GetRawInputData(hRawInput, uiCommand, pData, pcbSize, cbSizeHeader);
        return win32_impl_result;
    }
    inline uint32_t GetRawInputDeviceInfoA(Windows::Win32::SystemServices::HANDLE hDevice, uint32_t uiCommand, void* pData, uint32_t* pcbSize)
    {
        auto win32_impl_result = WIN32_IMPL_GetRawInputDeviceInfoA(hDevice, uiCommand, pData, pcbSize);
        return win32_impl_result;
    }
    inline uint32_t GetRawInputDeviceInfoW(Windows::Win32::SystemServices::HANDLE hDevice, uint32_t uiCommand, void* pData, uint32_t* pcbSize)
    {
        auto win32_impl_result = WIN32_IMPL_GetRawInputDeviceInfoW(hDevice, uiCommand, pData, pcbSize);
        return win32_impl_result;
    }
    inline uint32_t GetRawInputBuffer(Windows::Win32::KeyboardAndMouseInput::RAWINPUT* pData, uint32_t* pcbSize, uint32_t cbSizeHeader)
    {
        auto win32_impl_result = WIN32_IMPL_GetRawInputBuffer(pData, pcbSize, cbSizeHeader);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL RegisterRawInputDevices(Windows::Win32::KeyboardAndMouseInput::RAWINPUTDEVICE* pRawInputDevices, uint32_t uiNumDevices, uint32_t cbSize)
    {
        auto win32_impl_result = WIN32_IMPL_RegisterRawInputDevices(pRawInputDevices, uiNumDevices, cbSize);
        return win32_impl_result;
    }
    inline uint32_t GetRegisteredRawInputDevices(Windows::Win32::KeyboardAndMouseInput::RAWINPUTDEVICE* pRawInputDevices, uint32_t* puiNumDevices, uint32_t cbSize)
    {
        auto win32_impl_result = WIN32_IMPL_GetRegisteredRawInputDevices(pRawInputDevices, puiNumDevices, cbSize);
        return win32_impl_result;
    }
    inline uint32_t GetRawInputDeviceList(Windows::Win32::KeyboardAndMouseInput::RAWINPUTDEVICELIST* pRawInputDeviceList, uint32_t* puiNumDevices, uint32_t cbSize)
    {
        auto win32_impl_result = WIN32_IMPL_GetRawInputDeviceList(pRawInputDeviceList, puiNumDevices, cbSize);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::LRESULT DefRawInputProc(Windows::Win32::KeyboardAndMouseInput::RAWINPUT** paRawInput, int32_t nInput, uint32_t cbSizeHeader)
    {
        auto win32_impl_result = WIN32_IMPL_DefRawInputProc(paRawInput, nInput, cbSizeHeader);
        return win32_impl_result;
    }

#pragma endregion methods

}
#endif
