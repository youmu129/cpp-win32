// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_MediaFoundation_H
#define WIN32_Windows_Win32_MediaFoundation_H
#include "win32/base.h"
static_assert(win32::check_version(CPPWIN32_VERSION, "0.0.0.1"), "Mismatched C++/Win32 headers.");
#define CPPWIN32_VERSION "0.0.0.1"
#include "win32/impl/Windows.Win32.MediaFoundation.2.h"
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
#pragma region methods
    inline int32_t DXVAHD_CreateDevice(Windows::Win32::Direct2D::IDirect3DDevice9Ex* pD3DDevice, Windows::Win32::MediaFoundation::DXVAHD_CONTENT_DESC* pContentDesc, Windows::Win32::MediaFoundation::DXVAHD_DEVICE_USAGE Usage, Windows::Win32::MediaFoundation::PDXVAHDSW_Plugin* pPlugin, Windows::Win32::MediaFoundation::IDXVAHD_Device** ppDevice)
    {
        auto win32_impl_result = WIN32_IMPL_DXVAHD_CreateDevice(pD3DDevice, pContentDesc, Usage, pPlugin, ppDevice);
        return win32_impl_result;
    }
    inline int32_t DXVA2CreateDirect3DDeviceManager9(uint32_t* pResetToken, Windows::Win32::MediaFoundation::IDirect3DDeviceManager9** ppDeviceManager)
    {
        auto win32_impl_result = WIN32_IMPL_DXVA2CreateDirect3DDeviceManager9(pResetToken, ppDeviceManager);
        return win32_impl_result;
    }
    inline int32_t DXVA2CreateVideoService(Windows::Win32::Direct2D::IDirect3DDevice9* pDD, ::win32::guid* riid, void** ppService)
    {
        auto win32_impl_result = WIN32_IMPL_DXVA2CreateVideoService(pDD, riid, ppService);
        return win32_impl_result;
    }
    inline int32_t OPMGetVideoOutputsFromHMONITOR(intptr_t hMonitor, Windows::Win32::MediaFoundation::OPM_VIDEO_OUTPUT_SEMANTICS vos, uint32_t* pulNumVideoOutputs, Windows::Win32::MediaFoundation::IOPMVideoOutput*** pppOPMVideoOutputArray)
    {
        auto win32_impl_result = WIN32_IMPL_OPMGetVideoOutputsFromHMONITOR(hMonitor, vos, pulNumVideoOutputs, pppOPMVideoOutputArray);
        return win32_impl_result;
    }
    inline int32_t OPMGetVideoOutputForTarget(Windows::Win32::Kernel::LUID* pAdapterLuid, uint32_t VidPnTarget, Windows::Win32::MediaFoundation::OPM_VIDEO_OUTPUT_SEMANTICS vos, Windows::Win32::MediaFoundation::IOPMVideoOutput** ppOPMVideoOutput)
    {
        auto win32_impl_result = WIN32_IMPL_OPMGetVideoOutputForTarget(pAdapterLuid, VidPnTarget, vos, ppOPMVideoOutput);
        return win32_impl_result;
    }
    inline int32_t OPMGetVideoOutputsFromIDirect3DDevice9Object(Windows::Win32::Direct2D::IDirect3DDevice9* pDirect3DDevice9, Windows::Win32::MediaFoundation::OPM_VIDEO_OUTPUT_SEMANTICS vos, uint32_t* pulNumVideoOutputs, Windows::Win32::MediaFoundation::IOPMVideoOutput*** pppOPMVideoOutputArray)
    {
        auto win32_impl_result = WIN32_IMPL_OPMGetVideoOutputsFromIDirect3DDevice9Object(pDirect3DDevice9, vos, pulNumVideoOutputs, pppOPMVideoOutputArray);
        return win32_impl_result;
    }
    inline int32_t MFSerializeAttributesToStream(Windows::Win32::MediaFoundation::IMFAttributes* pAttr, uint32_t dwOptions, Windows::Win32::StructuredStorage::IStream* pStm)
    {
        auto win32_impl_result = WIN32_IMPL_MFSerializeAttributesToStream(pAttr, dwOptions, pStm);
        return win32_impl_result;
    }
    inline int32_t MFDeserializeAttributesFromStream(Windows::Win32::MediaFoundation::IMFAttributes* pAttr, uint32_t dwOptions, Windows::Win32::StructuredStorage::IStream* pStm)
    {
        auto win32_impl_result = WIN32_IMPL_MFDeserializeAttributesFromStream(pAttr, dwOptions, pStm);
        return win32_impl_result;
    }
    inline int32_t MFCreateTransformActivate(Windows::Win32::MediaFoundation::IMFActivate** ppActivate)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateTransformActivate(ppActivate);
        return win32_impl_result;
    }
    inline int32_t MFCreateMediaSession(Windows::Win32::MediaFoundation::IMFAttributes* pConfiguration, Windows::Win32::MediaFoundation::IMFMediaSession** ppMediaSession)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateMediaSession(pConfiguration, ppMediaSession);
        return win32_impl_result;
    }
    inline int32_t MFCreatePMPMediaSession(uint32_t dwCreationFlags, Windows::Win32::MediaFoundation::IMFAttributes* pConfiguration, Windows::Win32::MediaFoundation::IMFMediaSession** ppMediaSession, Windows::Win32::MediaFoundation::IMFActivate** ppEnablerActivate)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreatePMPMediaSession(dwCreationFlags, pConfiguration, ppMediaSession, ppEnablerActivate);
        return win32_impl_result;
    }
    inline int32_t MFCreateSourceResolver(Windows::Win32::MediaFoundation::IMFSourceResolver** ppISourceResolver)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateSourceResolver(ppISourceResolver);
        return win32_impl_result;
    }
    inline int32_t CreatePropertyStore(Windows::Win32::Audio::IPropertyStore** ppStore)
    {
        auto win32_impl_result = WIN32_IMPL_CreatePropertyStore(ppStore);
        return win32_impl_result;
    }
    inline int32_t MFGetSupportedSchemes(Windows::Win32::StructuredStorage::PROPVARIANT* pPropVarSchemeArray)
    {
        auto win32_impl_result = WIN32_IMPL_MFGetSupportedSchemes(pPropVarSchemeArray);
        return win32_impl_result;
    }
    inline int32_t MFGetSupportedMimeTypes(Windows::Win32::StructuredStorage::PROPVARIANT* pPropVarMimeTypeArray)
    {
        auto win32_impl_result = WIN32_IMPL_MFGetSupportedMimeTypes(pPropVarMimeTypeArray);
        return win32_impl_result;
    }
    inline int32_t MFCreateTopology(Windows::Win32::MediaFoundation::IMFTopology** ppTopo)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateTopology(ppTopo);
        return win32_impl_result;
    }
    inline int32_t MFCreateTopologyNode(Windows::Win32::MediaFoundation::MF_TOPOLOGY_TYPE NodeType, Windows::Win32::MediaFoundation::IMFTopologyNode** ppNode)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateTopologyNode(NodeType, ppNode);
        return win32_impl_result;
    }
    inline int32_t MFGetTopoNodeCurrentType(Windows::Win32::MediaFoundation::IMFTopologyNode* pNode, uint32_t dwStreamIndex, Windows::Win32::SystemServices::BOOL fOutput, Windows::Win32::MediaFoundation::IMFMediaType** ppType)
    {
        auto win32_impl_result = WIN32_IMPL_MFGetTopoNodeCurrentType(pNode, dwStreamIndex, fOutput, ppType);
        return win32_impl_result;
    }
    inline int32_t MFGetService(Windows::Win32::Com::IUnknown* punkObject, ::win32::guid* guidService, ::win32::guid* riid, void** ppvObject)
    {
        auto win32_impl_result = WIN32_IMPL_MFGetService(punkObject, guidService, riid, ppvObject);
        return win32_impl_result;
    }
    inline int64_t MFGetSystemTime()
    {
        auto win32_impl_result = WIN32_IMPL_MFGetSystemTime();
        return win32_impl_result;
    }
    inline int32_t MFCreatePresentationClock(Windows::Win32::MediaFoundation::IMFPresentationClock** ppPresentationClock)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreatePresentationClock(ppPresentationClock);
        return win32_impl_result;
    }
    inline int32_t MFCreateSystemTimeSource(Windows::Win32::MediaFoundation::IMFPresentationTimeSource** ppSystemTimeSource)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateSystemTimeSource(ppSystemTimeSource);
        return win32_impl_result;
    }
    inline int32_t MFCreatePresentationDescriptor(uint32_t cStreamDescriptors, Windows::Win32::MediaFoundation::IMFStreamDescriptor** apStreamDescriptors, Windows::Win32::MediaFoundation::IMFPresentationDescriptor** ppPresentationDescriptor)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreatePresentationDescriptor(cStreamDescriptors, apStreamDescriptors, ppPresentationDescriptor);
        return win32_impl_result;
    }
    inline int32_t MFRequireProtectedEnvironment(Windows::Win32::MediaFoundation::IMFPresentationDescriptor* pPresentationDescriptor)
    {
        auto win32_impl_result = WIN32_IMPL_MFRequireProtectedEnvironment(pPresentationDescriptor);
        return win32_impl_result;
    }
    inline int32_t MFSerializePresentationDescriptor(Windows::Win32::MediaFoundation::IMFPresentationDescriptor* pPD, uint32_t* pcbData, uint8_t** ppbData)
    {
        auto win32_impl_result = WIN32_IMPL_MFSerializePresentationDescriptor(pPD, pcbData, ppbData);
        return win32_impl_result;
    }
    inline int32_t MFDeserializePresentationDescriptor(uint32_t cbData, uint8_t* pbData, Windows::Win32::MediaFoundation::IMFPresentationDescriptor** ppPD)
    {
        auto win32_impl_result = WIN32_IMPL_MFDeserializePresentationDescriptor(cbData, pbData, ppPD);
        return win32_impl_result;
    }
    inline int32_t MFCreateStreamDescriptor(uint32_t dwStreamIdentifier, uint32_t cMediaTypes, Windows::Win32::MediaFoundation::IMFMediaType** apMediaTypes, Windows::Win32::MediaFoundation::IMFStreamDescriptor** ppDescriptor)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateStreamDescriptor(dwStreamIdentifier, cMediaTypes, apMediaTypes, ppDescriptor);
        return win32_impl_result;
    }
    inline int32_t MFCreateSimpleTypeHandler(Windows::Win32::MediaFoundation::IMFMediaTypeHandler** ppHandler)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateSimpleTypeHandler(ppHandler);
        return win32_impl_result;
    }
    inline int32_t MFShutdownObject(Windows::Win32::Com::IUnknown* pUnk)
    {
        auto win32_impl_result = WIN32_IMPL_MFShutdownObject(pUnk);
        return win32_impl_result;
    }
    inline int32_t MFCreateAudioRenderer(Windows::Win32::MediaFoundation::IMFAttributes* pAudioAttributes, Windows::Win32::MediaFoundation::IMFMediaSink** ppSink)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateAudioRenderer(pAudioAttributes, ppSink);
        return win32_impl_result;
    }
    inline int32_t MFCreateAudioRendererActivate(Windows::Win32::MediaFoundation::IMFActivate** ppActivate)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateAudioRendererActivate(ppActivate);
        return win32_impl_result;
    }
    inline int32_t MFCreateVideoRendererActivate(Windows::Win32::WindowsAndMessaging::HWND hwndVideo, Windows::Win32::MediaFoundation::IMFActivate** ppActivate)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateVideoRendererActivate(hwndVideo, ppActivate);
        return win32_impl_result;
    }
    inline int32_t MFCreateMPEG4MediaSink(Windows::Win32::MediaFoundation::IMFByteStream* pIByteStream, Windows::Win32::MediaFoundation::IMFMediaType* pVideoMediaType, Windows::Win32::MediaFoundation::IMFMediaType* pAudioMediaType, Windows::Win32::MediaFoundation::IMFMediaSink** ppIMediaSink)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateMPEG4MediaSink(pIByteStream, pVideoMediaType, pAudioMediaType, ppIMediaSink);
        return win32_impl_result;
    }
    inline int32_t MFCreate3GPMediaSink(Windows::Win32::MediaFoundation::IMFByteStream* pIByteStream, Windows::Win32::MediaFoundation::IMFMediaType* pVideoMediaType, Windows::Win32::MediaFoundation::IMFMediaType* pAudioMediaType, Windows::Win32::MediaFoundation::IMFMediaSink** ppIMediaSink)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreate3GPMediaSink(pIByteStream, pVideoMediaType, pAudioMediaType, ppIMediaSink);
        return win32_impl_result;
    }
    inline int32_t MFCreateMP3MediaSink(Windows::Win32::MediaFoundation::IMFByteStream* pTargetByteStream, Windows::Win32::MediaFoundation::IMFMediaSink** ppMediaSink)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateMP3MediaSink(pTargetByteStream, ppMediaSink);
        return win32_impl_result;
    }
    inline int32_t MFCreateAC3MediaSink(Windows::Win32::MediaFoundation::IMFByteStream* pTargetByteStream, Windows::Win32::MediaFoundation::IMFMediaType* pAudioMediaType, Windows::Win32::MediaFoundation::IMFMediaSink** ppMediaSink)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateAC3MediaSink(pTargetByteStream, pAudioMediaType, ppMediaSink);
        return win32_impl_result;
    }
    inline int32_t MFCreateADTSMediaSink(Windows::Win32::MediaFoundation::IMFByteStream* pTargetByteStream, Windows::Win32::MediaFoundation::IMFMediaType* pAudioMediaType, Windows::Win32::MediaFoundation::IMFMediaSink** ppMediaSink)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateADTSMediaSink(pTargetByteStream, pAudioMediaType, ppMediaSink);
        return win32_impl_result;
    }
    inline int32_t MFCreateMuxSink(::win32::guid guidOutputSubType, Windows::Win32::MediaFoundation::IMFAttributes* pOutputAttributes, Windows::Win32::MediaFoundation::IMFByteStream* pOutputByteStream, Windows::Win32::MediaFoundation::IMFMediaSink** ppMuxSink)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateMuxSink(guidOutputSubType, pOutputAttributes, pOutputByteStream, ppMuxSink);
        return win32_impl_result;
    }
    inline int32_t MFCreateFMPEG4MediaSink(Windows::Win32::MediaFoundation::IMFByteStream* pIByteStream, Windows::Win32::MediaFoundation::IMFMediaType* pVideoMediaType, Windows::Win32::MediaFoundation::IMFMediaType* pAudioMediaType, Windows::Win32::MediaFoundation::IMFMediaSink** ppIMediaSink)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateFMPEG4MediaSink(pIByteStream, pVideoMediaType, pAudioMediaType, ppIMediaSink);
        return win32_impl_result;
    }
    inline int32_t MFCreateAVIMediaSink(Windows::Win32::MediaFoundation::IMFByteStream* pIByteStream, Windows::Win32::MediaFoundation::IMFMediaType* pVideoMediaType, Windows::Win32::MediaFoundation::IMFMediaType* pAudioMediaType, Windows::Win32::MediaFoundation::IMFMediaSink** ppIMediaSink)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateAVIMediaSink(pIByteStream, pVideoMediaType, pAudioMediaType, ppIMediaSink);
        return win32_impl_result;
    }
    inline int32_t MFCreateWAVEMediaSink(Windows::Win32::MediaFoundation::IMFByteStream* pTargetByteStream, Windows::Win32::MediaFoundation::IMFMediaType* pAudioMediaType, Windows::Win32::MediaFoundation::IMFMediaSink** ppMediaSink)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateWAVEMediaSink(pTargetByteStream, pAudioMediaType, ppMediaSink);
        return win32_impl_result;
    }
    inline int32_t MFCreateTopoLoader(Windows::Win32::MediaFoundation::IMFTopoLoader** ppObj)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateTopoLoader(ppObj);
        return win32_impl_result;
    }
    inline int32_t MFCreateSampleGrabberSinkActivate(Windows::Win32::MediaFoundation::IMFMediaType* pIMFMediaType, Windows::Win32::MediaFoundation::IMFSampleGrabberSinkCallback* pIMFSampleGrabberSinkCallback, Windows::Win32::MediaFoundation::IMFActivate** ppIActivate)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateSampleGrabberSinkActivate(pIMFMediaType, pIMFSampleGrabberSinkCallback, ppIActivate);
        return win32_impl_result;
    }
    inline int32_t MFCreateStandardQualityManager(Windows::Win32::MediaFoundation::IMFQualityManager** ppQualityManager)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateStandardQualityManager(ppQualityManager);
        return win32_impl_result;
    }
    inline int32_t MFCreateSequencerSource(Windows::Win32::Com::IUnknown* pReserved, Windows::Win32::MediaFoundation::IMFSequencerSource** ppSequencerSource)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateSequencerSource(pReserved, ppSequencerSource);
        return win32_impl_result;
    }
    inline int32_t MFCreateSequencerSegmentOffset(uint32_t dwId, int64_t hnsOffset, Windows::Win32::StructuredStorage::PROPVARIANT* pvarSegmentOffset)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateSequencerSegmentOffset(dwId, hnsOffset, pvarSegmentOffset);
        return win32_impl_result;
    }
    inline int32_t MFCreateAggregateSource(Windows::Win32::MediaFoundation::IMFCollection* pSourceCollection, Windows::Win32::MediaFoundation::IMFMediaSource** ppAggSource)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateAggregateSource(pSourceCollection, ppAggSource);
        return win32_impl_result;
    }
    inline int32_t MFCreateCredentialCache(Windows::Win32::MediaFoundation::IMFNetCredentialCache** ppCache)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateCredentialCache(ppCache);
        return win32_impl_result;
    }
    inline int32_t MFCreateProxyLocator(uint16_t* pszProtocol, Windows::Win32::Audio::IPropertyStore* pProxyConfig, Windows::Win32::MediaFoundation::IMFNetProxyLocator** ppProxyLocator)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateProxyLocator(pszProtocol, pProxyConfig, ppProxyLocator);
        return win32_impl_result;
    }
    inline int32_t MFCreateNetSchemePlugin(::win32::guid* riid, void** ppvHandler)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateNetSchemePlugin(riid, ppvHandler);
        return win32_impl_result;
    }
    inline int32_t MFCreatePMPServer(uint32_t dwCreationFlags, Windows::Win32::MediaFoundation::IMFPMPServer** ppPMPServer)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreatePMPServer(dwCreationFlags, ppPMPServer);
        return win32_impl_result;
    }
    inline int32_t MFCreateRemoteDesktopPlugin(Windows::Win32::MediaFoundation::IMFRemoteDesktopPlugin** ppPlugin)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateRemoteDesktopPlugin(ppPlugin);
        return win32_impl_result;
    }
    inline int32_t CreateNamedPropertyStore(Windows::Win32::Shell::INamedPropertyStore** ppStore)
    {
        auto win32_impl_result = WIN32_IMPL_CreateNamedPropertyStore(ppStore);
        return win32_impl_result;
    }
    inline int32_t MFCreateSampleCopierMFT(Windows::Win32::MediaFoundation::IMFTransform** ppCopierMFT)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateSampleCopierMFT(ppCopierMFT);
        return win32_impl_result;
    }
    inline int32_t MFCreateTranscodeProfile(Windows::Win32::MediaFoundation::IMFTranscodeProfile** ppTranscodeProfile)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateTranscodeProfile(ppTranscodeProfile);
        return win32_impl_result;
    }
    inline int32_t MFCreateTranscodeTopology(Windows::Win32::MediaFoundation::IMFMediaSource* pSrc, uint16_t* pwszOutputFilePath, Windows::Win32::MediaFoundation::IMFTranscodeProfile* pProfile, Windows::Win32::MediaFoundation::IMFTopology** ppTranscodeTopo)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateTranscodeTopology(pSrc, pwszOutputFilePath, pProfile, ppTranscodeTopo);
        return win32_impl_result;
    }
    inline int32_t MFCreateTranscodeTopologyFromByteStream(Windows::Win32::MediaFoundation::IMFMediaSource* pSrc, Windows::Win32::MediaFoundation::IMFByteStream* pOutputStream, Windows::Win32::MediaFoundation::IMFTranscodeProfile* pProfile, Windows::Win32::MediaFoundation::IMFTopology** ppTranscodeTopo)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateTranscodeTopologyFromByteStream(pSrc, pOutputStream, pProfile, ppTranscodeTopo);
        return win32_impl_result;
    }
    inline int32_t MFTranscodeGetAudioOutputAvailableTypes(::win32::guid* guidSubType, uint32_t dwMFTFlags, Windows::Win32::MediaFoundation::IMFAttributes* pCodecConfig, Windows::Win32::MediaFoundation::IMFCollection** ppAvailableTypes)
    {
        auto win32_impl_result = WIN32_IMPL_MFTranscodeGetAudioOutputAvailableTypes(guidSubType, dwMFTFlags, pCodecConfig, ppAvailableTypes);
        return win32_impl_result;
    }
    inline int32_t MFCreateTranscodeSinkActivate(Windows::Win32::MediaFoundation::IMFActivate** ppActivate)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateTranscodeSinkActivate(ppActivate);
        return win32_impl_result;
    }
    inline int32_t MFCreateTrackedSample(Windows::Win32::MediaFoundation::IMFTrackedSample** ppMFSample)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateTrackedSample(ppMFSample);
        return win32_impl_result;
    }
    inline int32_t MFCreateMFByteStreamOnStream(Windows::Win32::StructuredStorage::IStream* pStream, Windows::Win32::MediaFoundation::IMFByteStream** ppByteStream)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateMFByteStreamOnStream(pStream, ppByteStream);
        return win32_impl_result;
    }
    inline int32_t MFCreateStreamOnMFByteStream(Windows::Win32::MediaFoundation::IMFByteStream* pByteStream, Windows::Win32::StructuredStorage::IStream** ppStream)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateStreamOnMFByteStream(pByteStream, ppStream);
        return win32_impl_result;
    }
    inline int32_t MFCreateMFByteStreamOnStreamEx(Windows::Win32::Com::IUnknown* punkStream, Windows::Win32::MediaFoundation::IMFByteStream** ppByteStream)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateMFByteStreamOnStreamEx(punkStream, ppByteStream);
        return win32_impl_result;
    }
    inline int32_t MFCreateStreamOnMFByteStreamEx(Windows::Win32::MediaFoundation::IMFByteStream* pByteStream, ::win32::guid* riid, void** ppv)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateStreamOnMFByteStreamEx(pByteStream, riid, ppv);
        return win32_impl_result;
    }
    inline int32_t MFCreateMediaTypeFromProperties(Windows::Win32::Com::IUnknown* punkStream, Windows::Win32::MediaFoundation::IMFMediaType** ppMediaType)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateMediaTypeFromProperties(punkStream, ppMediaType);
        return win32_impl_result;
    }
    inline int32_t MFCreatePropertiesFromMediaType(Windows::Win32::MediaFoundation::IMFMediaType* pMediaType, ::win32::guid* riid, void** ppv)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreatePropertiesFromMediaType(pMediaType, riid, ppv);
        return win32_impl_result;
    }
    inline int32_t MFEnumDeviceSources(Windows::Win32::MediaFoundation::IMFAttributes* pAttributes, Windows::Win32::MediaFoundation::IMFActivate*** pppSourceActivate, uint32_t* pcSourceActivate)
    {
        auto win32_impl_result = WIN32_IMPL_MFEnumDeviceSources(pAttributes, pppSourceActivate, pcSourceActivate);
        return win32_impl_result;
    }
    inline int32_t MFCreateDeviceSource(Windows::Win32::MediaFoundation::IMFAttributes* pAttributes, Windows::Win32::MediaFoundation::IMFMediaSource** ppSource)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateDeviceSource(pAttributes, ppSource);
        return win32_impl_result;
    }
    inline int32_t MFCreateDeviceSourceActivate(Windows::Win32::MediaFoundation::IMFAttributes* pAttributes, Windows::Win32::MediaFoundation::IMFActivate** ppActivate)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateDeviceSourceActivate(pAttributes, ppActivate);
        return win32_impl_result;
    }
    inline int32_t MFCreateProtectedEnvironmentAccess(Windows::Win32::MediaFoundation::IMFProtectedEnvironmentAccess** ppAccess)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateProtectedEnvironmentAccess(ppAccess);
        return win32_impl_result;
    }
    inline int32_t MFLoadSignedLibrary(uint16_t* pszName, Windows::Win32::MediaFoundation::IMFSignedLibrary** ppLib)
    {
        auto win32_impl_result = WIN32_IMPL_MFLoadSignedLibrary(pszName, ppLib);
        return win32_impl_result;
    }
    inline int32_t MFGetSystemId(Windows::Win32::MediaFoundation::IMFSystemId** ppId)
    {
        auto win32_impl_result = WIN32_IMPL_MFGetSystemId(ppId);
        return win32_impl_result;
    }
    inline int32_t MFGetLocalId(uint8_t* verifier, uint32_t size, uint16_t** id)
    {
        auto win32_impl_result = WIN32_IMPL_MFGetLocalId(verifier, size, id);
        return win32_impl_result;
    }
    inline int32_t MFCreateContentProtectionDevice(::win32::guid* ProtectionSystemId, Windows::Win32::MediaFoundation::IMFContentProtectionDevice** ContentProtectionDevice)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateContentProtectionDevice(ProtectionSystemId, ContentProtectionDevice);
        return win32_impl_result;
    }
    inline int32_t MFIsContentProtectionDeviceSupported(::win32::guid* ProtectionSystemId, int32_t* isSupported)
    {
        auto win32_impl_result = WIN32_IMPL_MFIsContentProtectionDeviceSupported(ProtectionSystemId, isSupported);
        return win32_impl_result;
    }
    inline int32_t MFCreateContentDecryptorContext(::win32::guid* guidMediaProtectionSystemId, Windows::Win32::MediaFoundation::IMFDXGIDeviceManager* pD3DManager, Windows::Win32::MediaFoundation::IMFContentProtectionDevice* pContentProtectionDevice, Windows::Win32::MediaFoundation::IMFContentDecryptorContext** ppContentDecryptorContext)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateContentDecryptorContext(guidMediaProtectionSystemId, pD3DManager, pContentProtectionDevice, ppContentDecryptorContext);
        return win32_impl_result;
    }
    inline int32_t MFCreateSensorGroup(uint16_t* SensorGroupSymbolicLink, Windows::Win32::MediaFoundation::IMFSensorGroup** ppSensorGroup)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateSensorGroup(SensorGroupSymbolicLink, ppSensorGroup);
        return win32_impl_result;
    }
    inline int32_t MFCreateSensorStream(uint32_t StreamId, Windows::Win32::MediaFoundation::IMFAttributes* pAttributes, Windows::Win32::MediaFoundation::IMFCollection* pMediaTypeCollection, Windows::Win32::MediaFoundation::IMFSensorStream** ppStream)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateSensorStream(StreamId, pAttributes, pMediaTypeCollection, ppStream);
        return win32_impl_result;
    }
    inline int32_t MFCreateSensorProfile(::win32::guid* ProfileType, uint32_t ProfileIndex, uint16_t* Constraints, Windows::Win32::MediaFoundation::IMFSensorProfile** ppProfile)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateSensorProfile(ProfileType, ProfileIndex, Constraints, ppProfile);
        return win32_impl_result;
    }
    inline int32_t MFCreateSensorProfileCollection(Windows::Win32::MediaFoundation::IMFSensorProfileCollection** ppSensorProfile)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateSensorProfileCollection(ppSensorProfile);
        return win32_impl_result;
    }
    inline int32_t MFCreateSensorActivityMonitor(Windows::Win32::MediaFoundation::IMFSensorActivitiesReportCallback* pCallback, Windows::Win32::MediaFoundation::IMFSensorActivityMonitor** ppActivityMonitor)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateSensorActivityMonitor(pCallback, ppActivityMonitor);
        return win32_impl_result;
    }
    inline int32_t MFCreateExtendedCameraIntrinsics(Windows::Win32::MediaFoundation::IMFExtendedCameraIntrinsics** ppExtendedCameraIntrinsics)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateExtendedCameraIntrinsics(ppExtendedCameraIntrinsics);
        return win32_impl_result;
    }
    inline int32_t MFCreateExtendedCameraIntrinsicModel(Windows::Win32::MediaFoundation::MFCameraIntrinsic_DistortionModelType distortionModelType, Windows::Win32::MediaFoundation::IMFExtendedCameraIntrinsicModel** ppExtendedCameraIntrinsicModel)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateExtendedCameraIntrinsicModel(distortionModelType, ppExtendedCameraIntrinsicModel);
        return win32_impl_result;
    }
    inline int32_t MFCreateRelativePanelWatcher(uint16_t* videoDeviceId, uint16_t* displayMonitorDeviceId, Windows::Win32::MediaFoundation::IMFRelativePanelWatcher** ppRelativePanelWatcher)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateRelativePanelWatcher(videoDeviceId, displayMonitorDeviceId, ppRelativePanelWatcher);
        return win32_impl_result;
    }
    inline int32_t MFCreateASFContentInfo(Windows::Win32::MediaFoundation::IMFASFContentInfo** ppIContentInfo)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateASFContentInfo(ppIContentInfo);
        return win32_impl_result;
    }
    inline int32_t MFCreateASFIndexer(Windows::Win32::MediaFoundation::IMFASFIndexer** ppIIndexer)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateASFIndexer(ppIIndexer);
        return win32_impl_result;
    }
    inline int32_t MFCreateASFIndexerByteStream(Windows::Win32::MediaFoundation::IMFByteStream* pIContentByteStream, uint64_t cbIndexStartOffset, Windows::Win32::MediaFoundation::IMFByteStream** pIIndexByteStream)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateASFIndexerByteStream(pIContentByteStream, cbIndexStartOffset, pIIndexByteStream);
        return win32_impl_result;
    }
    inline int32_t MFCreateASFSplitter(Windows::Win32::MediaFoundation::IMFASFSplitter** ppISplitter)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateASFSplitter(ppISplitter);
        return win32_impl_result;
    }
    inline int32_t MFCreateASFProfile(Windows::Win32::MediaFoundation::IMFASFProfile** ppIProfile)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateASFProfile(ppIProfile);
        return win32_impl_result;
    }
    inline int32_t MFCreateASFProfileFromPresentationDescriptor(Windows::Win32::MediaFoundation::IMFPresentationDescriptor* pIPD, Windows::Win32::MediaFoundation::IMFASFProfile** ppIProfile)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateASFProfileFromPresentationDescriptor(pIPD, ppIProfile);
        return win32_impl_result;
    }
    inline int32_t MFCreatePresentationDescriptorFromASFProfile(Windows::Win32::MediaFoundation::IMFASFProfile* pIProfile, Windows::Win32::MediaFoundation::IMFPresentationDescriptor** ppIPD)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreatePresentationDescriptorFromASFProfile(pIProfile, ppIPD);
        return win32_impl_result;
    }
    inline int32_t MFCreateASFMultiplexer(Windows::Win32::MediaFoundation::IMFASFMultiplexer** ppIMultiplexer)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateASFMultiplexer(ppIMultiplexer);
        return win32_impl_result;
    }
    inline int32_t MFCreateASFStreamSelector(Windows::Win32::MediaFoundation::IMFASFProfile* pIASFProfile, Windows::Win32::MediaFoundation::IMFASFStreamSelector** ppSelector)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateASFStreamSelector(pIASFProfile, ppSelector);
        return win32_impl_result;
    }
    inline int32_t MFCreateASFMediaSink(Windows::Win32::MediaFoundation::IMFByteStream* pIByteStream, Windows::Win32::MediaFoundation::IMFMediaSink** ppIMediaSink)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateASFMediaSink(pIByteStream, ppIMediaSink);
        return win32_impl_result;
    }
    inline int32_t MFCreateASFMediaSinkActivate(uint16_t* pwszFileName, Windows::Win32::MediaFoundation::IMFASFContentInfo* pContentInfo, Windows::Win32::MediaFoundation::IMFActivate** ppIActivate)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateASFMediaSinkActivate(pwszFileName, pContentInfo, ppIActivate);
        return win32_impl_result;
    }
    inline int32_t MFCreateWMVEncoderActivate(Windows::Win32::MediaFoundation::IMFMediaType* pMediaType, Windows::Win32::Audio::IPropertyStore* pEncodingConfigurationProperties, Windows::Win32::MediaFoundation::IMFActivate** ppActivate)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateWMVEncoderActivate(pMediaType, pEncodingConfigurationProperties, ppActivate);
        return win32_impl_result;
    }
    inline int32_t MFCreateWMAEncoderActivate(Windows::Win32::MediaFoundation::IMFMediaType* pMediaType, Windows::Win32::Audio::IPropertyStore* pEncodingConfigurationProperties, Windows::Win32::MediaFoundation::IMFActivate** ppActivate)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateWMAEncoderActivate(pMediaType, pEncodingConfigurationProperties, ppActivate);
        return win32_impl_result;
    }
    inline int32_t MFCreateASFStreamingMediaSink(Windows::Win32::MediaFoundation::IMFByteStream* pIByteStream, Windows::Win32::MediaFoundation::IMFMediaSink** ppIMediaSink)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateASFStreamingMediaSink(pIByteStream, ppIMediaSink);
        return win32_impl_result;
    }
    inline int32_t MFCreateASFStreamingMediaSinkActivate(Windows::Win32::MediaFoundation::IMFActivate* pByteStreamActivate, Windows::Win32::MediaFoundation::IMFASFContentInfo* pContentInfo, Windows::Win32::MediaFoundation::IMFActivate** ppIActivate)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateASFStreamingMediaSinkActivate(pByteStreamActivate, pContentInfo, ppIActivate);
        return win32_impl_result;
    }
    inline int32_t MFStartup(uint32_t Version, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_MFStartup(Version, dwFlags);
        return win32_impl_result;
    }
    inline int32_t MFShutdown()
    {
        auto win32_impl_result = WIN32_IMPL_MFShutdown();
        return win32_impl_result;
    }
    inline int32_t MFLockPlatform()
    {
        auto win32_impl_result = WIN32_IMPL_MFLockPlatform();
        return win32_impl_result;
    }
    inline int32_t MFUnlockPlatform()
    {
        auto win32_impl_result = WIN32_IMPL_MFUnlockPlatform();
        return win32_impl_result;
    }
    inline int32_t MFPutWorkItem(uint32_t dwQueue, Windows::Win32::MediaFoundation::IMFAsyncCallback* pCallback, Windows::Win32::Com::IUnknown* pState)
    {
        auto win32_impl_result = WIN32_IMPL_MFPutWorkItem(dwQueue, pCallback, pState);
        return win32_impl_result;
    }
    inline int32_t MFPutWorkItem2(uint32_t dwQueue, int32_t Priority, Windows::Win32::MediaFoundation::IMFAsyncCallback* pCallback, Windows::Win32::Com::IUnknown* pState)
    {
        auto win32_impl_result = WIN32_IMPL_MFPutWorkItem2(dwQueue, Priority, pCallback, pState);
        return win32_impl_result;
    }
    inline int32_t MFPutWorkItemEx(uint32_t dwQueue, Windows::Win32::MediaFoundation::IMFAsyncResult* pResult)
    {
        auto win32_impl_result = WIN32_IMPL_MFPutWorkItemEx(dwQueue, pResult);
        return win32_impl_result;
    }
    inline int32_t MFPutWorkItemEx2(uint32_t dwQueue, int32_t Priority, Windows::Win32::MediaFoundation::IMFAsyncResult* pResult)
    {
        auto win32_impl_result = WIN32_IMPL_MFPutWorkItemEx2(dwQueue, Priority, pResult);
        return win32_impl_result;
    }
    inline int32_t MFPutWaitingWorkItem(Windows::Win32::SystemServices::HANDLE hEvent, int32_t Priority, Windows::Win32::MediaFoundation::IMFAsyncResult* pResult, uint64_t* pKey)
    {
        auto win32_impl_result = WIN32_IMPL_MFPutWaitingWorkItem(hEvent, Priority, pResult, pKey);
        return win32_impl_result;
    }
    inline int32_t MFAllocateSerialWorkQueue(uint32_t dwWorkQueue, uint32_t* pdwWorkQueue)
    {
        auto win32_impl_result = WIN32_IMPL_MFAllocateSerialWorkQueue(dwWorkQueue, pdwWorkQueue);
        return win32_impl_result;
    }
    inline int32_t MFScheduleWorkItemEx(Windows::Win32::MediaFoundation::IMFAsyncResult* pResult, int64_t Timeout, uint64_t* pKey)
    {
        auto win32_impl_result = WIN32_IMPL_MFScheduleWorkItemEx(pResult, Timeout, pKey);
        return win32_impl_result;
    }
    inline int32_t MFScheduleWorkItem(Windows::Win32::MediaFoundation::IMFAsyncCallback* pCallback, Windows::Win32::Com::IUnknown* pState, int64_t Timeout, uint64_t* pKey)
    {
        auto win32_impl_result = WIN32_IMPL_MFScheduleWorkItem(pCallback, pState, Timeout, pKey);
        return win32_impl_result;
    }
    inline int32_t MFCancelWorkItem(uint64_t Key)
    {
        auto win32_impl_result = WIN32_IMPL_MFCancelWorkItem(Key);
        return win32_impl_result;
    }
    inline int32_t MFGetTimerPeriodicity(uint32_t* Periodicity)
    {
        auto win32_impl_result = WIN32_IMPL_MFGetTimerPeriodicity(Periodicity);
        return win32_impl_result;
    }
    inline int32_t MFAddPeriodicCallback(Windows::Win32::MediaFoundation::MFPERIODICCALLBACK* Callback, Windows::Win32::Com::IUnknown* pContext, uint32_t* pdwKey)
    {
        auto win32_impl_result = WIN32_IMPL_MFAddPeriodicCallback(Callback, pContext, pdwKey);
        return win32_impl_result;
    }
    inline int32_t MFRemovePeriodicCallback(uint32_t dwKey)
    {
        auto win32_impl_result = WIN32_IMPL_MFRemovePeriodicCallback(dwKey);
        return win32_impl_result;
    }
    inline int32_t MFAllocateWorkQueueEx(Windows::Win32::MediaFoundation::MFASYNC_WORKQUEUE_TYPE WorkQueueType, uint32_t* pdwWorkQueue)
    {
        auto win32_impl_result = WIN32_IMPL_MFAllocateWorkQueueEx(WorkQueueType, pdwWorkQueue);
        return win32_impl_result;
    }
    inline int32_t MFAllocateWorkQueue(uint32_t* pdwWorkQueue)
    {
        auto win32_impl_result = WIN32_IMPL_MFAllocateWorkQueue(pdwWorkQueue);
        return win32_impl_result;
    }
    inline int32_t MFLockWorkQueue(uint32_t dwWorkQueue)
    {
        auto win32_impl_result = WIN32_IMPL_MFLockWorkQueue(dwWorkQueue);
        return win32_impl_result;
    }
    inline int32_t MFUnlockWorkQueue(uint32_t dwWorkQueue)
    {
        auto win32_impl_result = WIN32_IMPL_MFUnlockWorkQueue(dwWorkQueue);
        return win32_impl_result;
    }
    inline int32_t MFBeginRegisterWorkQueueWithMMCSS(uint32_t dwWorkQueueId, uint16_t* wszClass, uint32_t dwTaskId, Windows::Win32::MediaFoundation::IMFAsyncCallback* pDoneCallback, Windows::Win32::Com::IUnknown* pDoneState)
    {
        auto win32_impl_result = WIN32_IMPL_MFBeginRegisterWorkQueueWithMMCSS(dwWorkQueueId, wszClass, dwTaskId, pDoneCallback, pDoneState);
        return win32_impl_result;
    }
    inline int32_t MFBeginRegisterWorkQueueWithMMCSSEx(uint32_t dwWorkQueueId, uint16_t* wszClass, uint32_t dwTaskId, int32_t lPriority, Windows::Win32::MediaFoundation::IMFAsyncCallback* pDoneCallback, Windows::Win32::Com::IUnknown* pDoneState)
    {
        auto win32_impl_result = WIN32_IMPL_MFBeginRegisterWorkQueueWithMMCSSEx(dwWorkQueueId, wszClass, dwTaskId, lPriority, pDoneCallback, pDoneState);
        return win32_impl_result;
    }
    inline int32_t MFEndRegisterWorkQueueWithMMCSS(Windows::Win32::MediaFoundation::IMFAsyncResult* pResult, uint32_t* pdwTaskId)
    {
        auto win32_impl_result = WIN32_IMPL_MFEndRegisterWorkQueueWithMMCSS(pResult, pdwTaskId);
        return win32_impl_result;
    }
    inline int32_t MFBeginUnregisterWorkQueueWithMMCSS(uint32_t dwWorkQueueId, Windows::Win32::MediaFoundation::IMFAsyncCallback* pDoneCallback, Windows::Win32::Com::IUnknown* pDoneState)
    {
        auto win32_impl_result = WIN32_IMPL_MFBeginUnregisterWorkQueueWithMMCSS(dwWorkQueueId, pDoneCallback, pDoneState);
        return win32_impl_result;
    }
    inline int32_t MFEndUnregisterWorkQueueWithMMCSS(Windows::Win32::MediaFoundation::IMFAsyncResult* pResult)
    {
        auto win32_impl_result = WIN32_IMPL_MFEndUnregisterWorkQueueWithMMCSS(pResult);
        return win32_impl_result;
    }
    inline int32_t MFGetWorkQueueMMCSSClass(uint32_t dwWorkQueueId, uint16_t* pwszClass, uint32_t* pcchClass)
    {
        auto win32_impl_result = WIN32_IMPL_MFGetWorkQueueMMCSSClass(dwWorkQueueId, pwszClass, pcchClass);
        return win32_impl_result;
    }
    inline int32_t MFGetWorkQueueMMCSSTaskId(uint32_t dwWorkQueueId, uint32_t* pdwTaskId)
    {
        auto win32_impl_result = WIN32_IMPL_MFGetWorkQueueMMCSSTaskId(dwWorkQueueId, pdwTaskId);
        return win32_impl_result;
    }
    inline int32_t MFRegisterPlatformWithMMCSS(uint16_t* wszClass, uint32_t* pdwTaskId, int32_t lPriority)
    {
        auto win32_impl_result = WIN32_IMPL_MFRegisterPlatformWithMMCSS(wszClass, pdwTaskId, lPriority);
        return win32_impl_result;
    }
    inline int32_t MFUnregisterPlatformFromMMCSS()
    {
        auto win32_impl_result = WIN32_IMPL_MFUnregisterPlatformFromMMCSS();
        return win32_impl_result;
    }
    inline int32_t MFLockSharedWorkQueue(uint16_t* wszClass, int32_t BasePriority, uint32_t* pdwTaskId, uint32_t* pID)
    {
        auto win32_impl_result = WIN32_IMPL_MFLockSharedWorkQueue(wszClass, BasePriority, pdwTaskId, pID);
        return win32_impl_result;
    }
    inline int32_t MFGetWorkQueueMMCSSPriority(uint32_t dwWorkQueueId, int32_t* lPriority)
    {
        auto win32_impl_result = WIN32_IMPL_MFGetWorkQueueMMCSSPriority(dwWorkQueueId, lPriority);
        return win32_impl_result;
    }
    inline int32_t MFCreateAsyncResult(Windows::Win32::Com::IUnknown* punkObject, Windows::Win32::MediaFoundation::IMFAsyncCallback* pCallback, Windows::Win32::Com::IUnknown* punkState, Windows::Win32::MediaFoundation::IMFAsyncResult** ppAsyncResult)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateAsyncResult(punkObject, pCallback, punkState, ppAsyncResult);
        return win32_impl_result;
    }
    inline int32_t MFInvokeCallback(Windows::Win32::MediaFoundation::IMFAsyncResult* pAsyncResult)
    {
        auto win32_impl_result = WIN32_IMPL_MFInvokeCallback(pAsyncResult);
        return win32_impl_result;
    }
    inline int32_t MFCreateFile(Windows::Win32::MediaFoundation::MF_FILE_ACCESSMODE AccessMode, Windows::Win32::MediaFoundation::MF_FILE_OPENMODE OpenMode, Windows::Win32::MediaFoundation::MF_FILE_FLAGS fFlags, uint16_t* pwszFileURL, Windows::Win32::MediaFoundation::IMFByteStream** ppIByteStream)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateFile(AccessMode, OpenMode, fFlags, pwszFileURL, ppIByteStream);
        return win32_impl_result;
    }
    inline int32_t MFCreateTempFile(Windows::Win32::MediaFoundation::MF_FILE_ACCESSMODE AccessMode, Windows::Win32::MediaFoundation::MF_FILE_OPENMODE OpenMode, Windows::Win32::MediaFoundation::MF_FILE_FLAGS fFlags, Windows::Win32::MediaFoundation::IMFByteStream** ppIByteStream)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateTempFile(AccessMode, OpenMode, fFlags, ppIByteStream);
        return win32_impl_result;
    }
    inline int32_t MFBeginCreateFile(Windows::Win32::MediaFoundation::MF_FILE_ACCESSMODE AccessMode, Windows::Win32::MediaFoundation::MF_FILE_OPENMODE OpenMode, Windows::Win32::MediaFoundation::MF_FILE_FLAGS fFlags, uint16_t* pwszFilePath, Windows::Win32::MediaFoundation::IMFAsyncCallback* pCallback, Windows::Win32::Com::IUnknown* pState, Windows::Win32::Com::IUnknown** ppCancelCookie)
    {
        auto win32_impl_result = WIN32_IMPL_MFBeginCreateFile(AccessMode, OpenMode, fFlags, pwszFilePath, pCallback, pState, ppCancelCookie);
        return win32_impl_result;
    }
    inline int32_t MFEndCreateFile(Windows::Win32::MediaFoundation::IMFAsyncResult* pResult, Windows::Win32::MediaFoundation::IMFByteStream** ppFile)
    {
        auto win32_impl_result = WIN32_IMPL_MFEndCreateFile(pResult, ppFile);
        return win32_impl_result;
    }
    inline int32_t MFCancelCreateFile(Windows::Win32::Com::IUnknown* pCancelCookie)
    {
        auto win32_impl_result = WIN32_IMPL_MFCancelCreateFile(pCancelCookie);
        return win32_impl_result;
    }
    inline int32_t MFCreateMemoryBuffer(uint32_t cbMaxLength, Windows::Win32::MediaFoundation::IMFMediaBuffer** ppBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateMemoryBuffer(cbMaxLength, ppBuffer);
        return win32_impl_result;
    }
    inline int32_t MFCreateMediaBufferWrapper(Windows::Win32::MediaFoundation::IMFMediaBuffer* pBuffer, uint32_t cbOffset, uint32_t dwLength, Windows::Win32::MediaFoundation::IMFMediaBuffer** ppBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateMediaBufferWrapper(pBuffer, cbOffset, dwLength, ppBuffer);
        return win32_impl_result;
    }
    inline int32_t MFCreateLegacyMediaBufferOnMFMediaBuffer(Windows::Win32::MediaFoundation::IMFSample* pSample, Windows::Win32::MediaFoundation::IMFMediaBuffer* pMFMediaBuffer, uint32_t cbOffset, Windows::Win32::DirectShow::IMediaBuffer** ppMediaBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateLegacyMediaBufferOnMFMediaBuffer(pSample, pMFMediaBuffer, cbOffset, ppMediaBuffer);
        return win32_impl_result;
    }
    inline Windows::Win32::Dxgi::DXGI_FORMAT MFMapDX9FormatToDXGIFormat(uint32_t dx9)
    {
        auto win32_impl_result = WIN32_IMPL_MFMapDX9FormatToDXGIFormat(dx9);
        return win32_impl_result;
    }
    inline uint32_t MFMapDXGIFormatToDX9Format(Windows::Win32::Dxgi::DXGI_FORMAT dx11)
    {
        auto win32_impl_result = WIN32_IMPL_MFMapDXGIFormatToDX9Format(dx11);
        return win32_impl_result;
    }
    inline int32_t MFLockDXGIDeviceManager(uint32_t* pResetToken, Windows::Win32::MediaFoundation::IMFDXGIDeviceManager** ppManager)
    {
        auto win32_impl_result = WIN32_IMPL_MFLockDXGIDeviceManager(pResetToken, ppManager);
        return win32_impl_result;
    }
    inline int32_t MFUnlockDXGIDeviceManager()
    {
        auto win32_impl_result = WIN32_IMPL_MFUnlockDXGIDeviceManager();
        return win32_impl_result;
    }
    inline int32_t MFCreateDXSurfaceBuffer(::win32::guid* riid, Windows::Win32::Com::IUnknown* punkSurface, Windows::Win32::SystemServices::BOOL fBottomUpWhenLinear, Windows::Win32::MediaFoundation::IMFMediaBuffer** ppBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateDXSurfaceBuffer(riid, punkSurface, fBottomUpWhenLinear, ppBuffer);
        return win32_impl_result;
    }
    inline int32_t MFCreateWICBitmapBuffer(::win32::guid* riid, Windows::Win32::Com::IUnknown* punkSurface, Windows::Win32::MediaFoundation::IMFMediaBuffer** ppBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateWICBitmapBuffer(riid, punkSurface, ppBuffer);
        return win32_impl_result;
    }
    inline int32_t MFCreateDXGISurfaceBuffer(::win32::guid* riid, Windows::Win32::Com::IUnknown* punkSurface, uint32_t uSubresourceIndex, Windows::Win32::SystemServices::BOOL fBottomUpWhenLinear, Windows::Win32::MediaFoundation::IMFMediaBuffer** ppBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateDXGISurfaceBuffer(riid, punkSurface, uSubresourceIndex, fBottomUpWhenLinear, ppBuffer);
        return win32_impl_result;
    }
    inline int32_t MFCreateVideoSampleAllocatorEx(::win32::guid* riid, void** ppSampleAllocator)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateVideoSampleAllocatorEx(riid, ppSampleAllocator);
        return win32_impl_result;
    }
    inline int32_t MFCreateDXGIDeviceManager(uint32_t* resetToken, Windows::Win32::MediaFoundation::IMFDXGIDeviceManager** ppDeviceManager)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateDXGIDeviceManager(resetToken, ppDeviceManager);
        return win32_impl_result;
    }
    inline int32_t MFCreateAlignedMemoryBuffer(uint32_t cbMaxLength, uint32_t cbAligment, Windows::Win32::MediaFoundation::IMFMediaBuffer** ppBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateAlignedMemoryBuffer(cbMaxLength, cbAligment, ppBuffer);
        return win32_impl_result;
    }
    inline int32_t MFCreateMediaEvent(uint32_t met, ::win32::guid* guidExtendedType, int32_t hrStatus, Windows::Win32::StructuredStorage::PROPVARIANT* pvValue, Windows::Win32::MediaFoundation::IMFMediaEvent** ppEvent)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateMediaEvent(met, guidExtendedType, hrStatus, pvValue, ppEvent);
        return win32_impl_result;
    }
    inline int32_t MFCreateEventQueue(Windows::Win32::MediaFoundation::IMFMediaEventQueue** ppMediaEventQueue)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateEventQueue(ppMediaEventQueue);
        return win32_impl_result;
    }
    inline int32_t MFCreateSample(Windows::Win32::MediaFoundation::IMFSample** ppIMFSample)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateSample(ppIMFSample);
        return win32_impl_result;
    }
    inline int32_t MFCreateAttributes(Windows::Win32::MediaFoundation::IMFAttributes** ppMFAttributes, uint32_t cInitialSize)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateAttributes(ppMFAttributes, cInitialSize);
        return win32_impl_result;
    }
    inline int32_t MFInitAttributesFromBlob(Windows::Win32::MediaFoundation::IMFAttributes* pAttributes, uint8_t* pBuf, uint32_t cbBufSize)
    {
        auto win32_impl_result = WIN32_IMPL_MFInitAttributesFromBlob(pAttributes, pBuf, cbBufSize);
        return win32_impl_result;
    }
    inline int32_t MFGetAttributesAsBlobSize(Windows::Win32::MediaFoundation::IMFAttributes* pAttributes, uint32_t* pcbBufSize)
    {
        auto win32_impl_result = WIN32_IMPL_MFGetAttributesAsBlobSize(pAttributes, pcbBufSize);
        return win32_impl_result;
    }
    inline int32_t MFGetAttributesAsBlob(Windows::Win32::MediaFoundation::IMFAttributes* pAttributes, uint8_t* pBuf, uint32_t cbBufSize)
    {
        auto win32_impl_result = WIN32_IMPL_MFGetAttributesAsBlob(pAttributes, pBuf, cbBufSize);
        return win32_impl_result;
    }
    inline int32_t MFTRegister(::win32::guid clsidMFT, ::win32::guid guidCategory, uint16_t* pszName, uint32_t Flags, uint32_t cInputTypes, Windows::Win32::MediaFoundation::MFT_REGISTER_TYPE_INFO* pInputTypes, uint32_t cOutputTypes, Windows::Win32::MediaFoundation::MFT_REGISTER_TYPE_INFO* pOutputTypes, Windows::Win32::MediaFoundation::IMFAttributes* pAttributes)
    {
        auto win32_impl_result = WIN32_IMPL_MFTRegister(clsidMFT, guidCategory, pszName, Flags, cInputTypes, pInputTypes, cOutputTypes, pOutputTypes, pAttributes);
        return win32_impl_result;
    }
    inline int32_t MFTUnregister(::win32::guid clsidMFT)
    {
        auto win32_impl_result = WIN32_IMPL_MFTUnregister(clsidMFT);
        return win32_impl_result;
    }
    inline int32_t MFTRegisterLocal(Windows::Win32::Com::IClassFactory* pClassFactory, ::win32::guid* guidCategory, uint16_t* pszName, uint32_t Flags, uint32_t cInputTypes, Windows::Win32::MediaFoundation::MFT_REGISTER_TYPE_INFO* pInputTypes, uint32_t cOutputTypes, Windows::Win32::MediaFoundation::MFT_REGISTER_TYPE_INFO* pOutputTypes)
    {
        auto win32_impl_result = WIN32_IMPL_MFTRegisterLocal(pClassFactory, guidCategory, pszName, Flags, cInputTypes, pInputTypes, cOutputTypes, pOutputTypes);
        return win32_impl_result;
    }
    inline int32_t MFTUnregisterLocal(Windows::Win32::Com::IClassFactory* pClassFactory)
    {
        auto win32_impl_result = WIN32_IMPL_MFTUnregisterLocal(pClassFactory);
        return win32_impl_result;
    }
    inline int32_t MFTRegisterLocalByCLSID(::win32::guid* clisdMFT, ::win32::guid* guidCategory, uint16_t* pszName, uint32_t Flags, uint32_t cInputTypes, Windows::Win32::MediaFoundation::MFT_REGISTER_TYPE_INFO* pInputTypes, uint32_t cOutputTypes, Windows::Win32::MediaFoundation::MFT_REGISTER_TYPE_INFO* pOutputTypes)
    {
        auto win32_impl_result = WIN32_IMPL_MFTRegisterLocalByCLSID(clisdMFT, guidCategory, pszName, Flags, cInputTypes, pInputTypes, cOutputTypes, pOutputTypes);
        return win32_impl_result;
    }
    inline int32_t MFTUnregisterLocalByCLSID(::win32::guid clsidMFT)
    {
        auto win32_impl_result = WIN32_IMPL_MFTUnregisterLocalByCLSID(clsidMFT);
        return win32_impl_result;
    }
    inline int32_t MFTEnum(::win32::guid guidCategory, uint32_t Flags, Windows::Win32::MediaFoundation::MFT_REGISTER_TYPE_INFO* pInputType, Windows::Win32::MediaFoundation::MFT_REGISTER_TYPE_INFO* pOutputType, Windows::Win32::MediaFoundation::IMFAttributes* pAttributes, ::win32::guid** ppclsidMFT, uint32_t* pcMFTs)
    {
        auto win32_impl_result = WIN32_IMPL_MFTEnum(guidCategory, Flags, pInputType, pOutputType, pAttributes, ppclsidMFT, pcMFTs);
        return win32_impl_result;
    }
    inline int32_t MFTEnumEx(::win32::guid guidCategory, uint32_t Flags, Windows::Win32::MediaFoundation::MFT_REGISTER_TYPE_INFO* pInputType, Windows::Win32::MediaFoundation::MFT_REGISTER_TYPE_INFO* pOutputType, Windows::Win32::MediaFoundation::IMFActivate*** pppMFTActivate, uint32_t* pnumMFTActivate)
    {
        auto win32_impl_result = WIN32_IMPL_MFTEnumEx(guidCategory, Flags, pInputType, pOutputType, pppMFTActivate, pnumMFTActivate);
        return win32_impl_result;
    }
    inline int32_t MFTEnum2(::win32::guid guidCategory, uint32_t Flags, Windows::Win32::MediaFoundation::MFT_REGISTER_TYPE_INFO* pInputType, Windows::Win32::MediaFoundation::MFT_REGISTER_TYPE_INFO* pOutputType, Windows::Win32::MediaFoundation::IMFAttributes* pAttributes, Windows::Win32::MediaFoundation::IMFActivate*** pppMFTActivate, uint32_t* pnumMFTActivate)
    {
        auto win32_impl_result = WIN32_IMPL_MFTEnum2(guidCategory, Flags, pInputType, pOutputType, pAttributes, pppMFTActivate, pnumMFTActivate);
        return win32_impl_result;
    }
    inline int32_t MFTGetInfo(::win32::guid clsidMFT, uint16_t** pszName, Windows::Win32::MediaFoundation::MFT_REGISTER_TYPE_INFO** ppInputTypes, uint32_t* pcInputTypes, Windows::Win32::MediaFoundation::MFT_REGISTER_TYPE_INFO** ppOutputTypes, uint32_t* pcOutputTypes, Windows::Win32::MediaFoundation::IMFAttributes** ppAttributes)
    {
        auto win32_impl_result = WIN32_IMPL_MFTGetInfo(clsidMFT, pszName, ppInputTypes, pcInputTypes, ppOutputTypes, pcOutputTypes, ppAttributes);
        return win32_impl_result;
    }
    inline int32_t MFGetPluginControl(Windows::Win32::MediaFoundation::IMFPluginControl** ppPluginControl)
    {
        auto win32_impl_result = WIN32_IMPL_MFGetPluginControl(ppPluginControl);
        return win32_impl_result;
    }
    inline int32_t MFGetMFTMerit(Windows::Win32::Com::IUnknown* pMFT, uint32_t cbVerifier, uint8_t* verifier, uint32_t* merit)
    {
        auto win32_impl_result = WIN32_IMPL_MFGetMFTMerit(pMFT, cbVerifier, verifier, merit);
        return win32_impl_result;
    }
    inline int32_t MFRegisterLocalSchemeHandler(uint16_t* szScheme, Windows::Win32::MediaFoundation::IMFActivate* pActivate)
    {
        auto win32_impl_result = WIN32_IMPL_MFRegisterLocalSchemeHandler(szScheme, pActivate);
        return win32_impl_result;
    }
    inline int32_t MFRegisterLocalByteStreamHandler(uint16_t* szFileExtension, uint16_t* szMimeType, Windows::Win32::MediaFoundation::IMFActivate* pActivate)
    {
        auto win32_impl_result = WIN32_IMPL_MFRegisterLocalByteStreamHandler(szFileExtension, szMimeType, pActivate);
        return win32_impl_result;
    }
    inline int32_t MFCreateMFByteStreamWrapper(Windows::Win32::MediaFoundation::IMFByteStream* pStream, Windows::Win32::MediaFoundation::IMFByteStream** ppStreamWrapper)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateMFByteStreamWrapper(pStream, ppStreamWrapper);
        return win32_impl_result;
    }
    inline int32_t MFCreateMediaExtensionActivate(uint16_t* szActivatableClassId, Windows::Win32::Com::IUnknown* pConfiguration, ::win32::guid* riid, void** ppvObject)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateMediaExtensionActivate(szActivatableClassId, pConfiguration, riid, ppvObject);
        return win32_impl_result;
    }
    inline int32_t MFCreateMuxStreamAttributes(Windows::Win32::MediaFoundation::IMFCollection* pAttributesToMux, Windows::Win32::MediaFoundation::IMFAttributes** ppMuxAttribs)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateMuxStreamAttributes(pAttributesToMux, ppMuxAttribs);
        return win32_impl_result;
    }
    inline int32_t MFCreateMuxStreamMediaType(Windows::Win32::MediaFoundation::IMFCollection* pMediaTypesToMux, Windows::Win32::MediaFoundation::IMFMediaType** ppMuxMediaType)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateMuxStreamMediaType(pMediaTypesToMux, ppMuxMediaType);
        return win32_impl_result;
    }
    inline int32_t MFCreateMuxStreamSample(Windows::Win32::MediaFoundation::IMFCollection* pSamplesToMux, Windows::Win32::MediaFoundation::IMFSample** ppMuxSample)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateMuxStreamSample(pSamplesToMux, ppMuxSample);
        return win32_impl_result;
    }
    inline int32_t MFValidateMediaTypeSize(::win32::guid FormatType, uint8_t* pBlock, uint32_t cbSize)
    {
        auto win32_impl_result = WIN32_IMPL_MFValidateMediaTypeSize(FormatType, pBlock, cbSize);
        return win32_impl_result;
    }
    inline int32_t MFCreateMediaType(Windows::Win32::MediaFoundation::IMFMediaType** ppMFType)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateMediaType(ppMFType);
        return win32_impl_result;
    }
    inline int32_t MFCreateMFVideoFormatFromMFMediaType(Windows::Win32::MediaFoundation::IMFMediaType* pMFType, Windows::Win32::MediaFoundation::MFVIDEOFORMAT** ppMFVF, uint32_t* pcbSize)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateMFVideoFormatFromMFMediaType(pMFType, ppMFVF, pcbSize);
        return win32_impl_result;
    }
    inline int32_t MFCreateWaveFormatExFromMFMediaType(Windows::Win32::MediaFoundation::IMFMediaType* pMFType, Windows::Win32::Multimedia::WAVEFORMATEX** ppWF, uint32_t* pcbSize, uint32_t Flags)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateWaveFormatExFromMFMediaType(pMFType, ppWF, pcbSize, Flags);
        return win32_impl_result;
    }
    inline int32_t MFInitMediaTypeFromVideoInfoHeader(Windows::Win32::MediaFoundation::IMFMediaType* pMFType, Windows::Win32::DirectShow::VIDEOINFOHEADER* pVIH, uint32_t cbBufSize, ::win32::guid* pSubtype)
    {
        auto win32_impl_result = WIN32_IMPL_MFInitMediaTypeFromVideoInfoHeader(pMFType, pVIH, cbBufSize, pSubtype);
        return win32_impl_result;
    }
    inline int32_t MFInitMediaTypeFromVideoInfoHeader2(Windows::Win32::MediaFoundation::IMFMediaType* pMFType, Windows::Win32::DirectShow::VIDEOINFOHEADER2* pVIH2, uint32_t cbBufSize, ::win32::guid* pSubtype)
    {
        auto win32_impl_result = WIN32_IMPL_MFInitMediaTypeFromVideoInfoHeader2(pMFType, pVIH2, cbBufSize, pSubtype);
        return win32_impl_result;
    }
    inline int32_t MFInitMediaTypeFromMPEG1VideoInfo(Windows::Win32::MediaFoundation::IMFMediaType* pMFType, Windows::Win32::DirectShow::MPEG1VIDEOINFO* pMP1VI, uint32_t cbBufSize, ::win32::guid* pSubtype)
    {
        auto win32_impl_result = WIN32_IMPL_MFInitMediaTypeFromMPEG1VideoInfo(pMFType, pMP1VI, cbBufSize, pSubtype);
        return win32_impl_result;
    }
    inline int32_t MFInitMediaTypeFromMPEG2VideoInfo(Windows::Win32::MediaFoundation::IMFMediaType* pMFType, Windows::Win32::DirectShow::MPEG2VIDEOINFO* pMP2VI, uint32_t cbBufSize, ::win32::guid* pSubtype)
    {
        auto win32_impl_result = WIN32_IMPL_MFInitMediaTypeFromMPEG2VideoInfo(pMFType, pMP2VI, cbBufSize, pSubtype);
        return win32_impl_result;
    }
    inline int32_t MFCalculateBitmapImageSize(Windows::Win32::DirectShow::BITMAPINFOHEADER* pBMIH, uint32_t cbBufSize, uint32_t* pcbImageSize, int32_t* pbKnown)
    {
        auto win32_impl_result = WIN32_IMPL_MFCalculateBitmapImageSize(pBMIH, cbBufSize, pcbImageSize, pbKnown);
        return win32_impl_result;
    }
    inline int32_t MFCalculateImageSize(::win32::guid* guidSubtype, uint32_t unWidth, uint32_t unHeight, uint32_t* pcbImageSize)
    {
        auto win32_impl_result = WIN32_IMPL_MFCalculateImageSize(guidSubtype, unWidth, unHeight, pcbImageSize);
        return win32_impl_result;
    }
    inline int32_t MFFrameRateToAverageTimePerFrame(uint32_t unNumerator, uint32_t unDenominator, uint64_t* punAverageTimePerFrame)
    {
        auto win32_impl_result = WIN32_IMPL_MFFrameRateToAverageTimePerFrame(unNumerator, unDenominator, punAverageTimePerFrame);
        return win32_impl_result;
    }
    inline int32_t MFAverageTimePerFrameToFrameRate(uint64_t unAverageTimePerFrame, uint32_t* punNumerator, uint32_t* punDenominator)
    {
        auto win32_impl_result = WIN32_IMPL_MFAverageTimePerFrameToFrameRate(unAverageTimePerFrame, punNumerator, punDenominator);
        return win32_impl_result;
    }
    inline int32_t MFInitMediaTypeFromMFVideoFormat(Windows::Win32::MediaFoundation::IMFMediaType* pMFType, Windows::Win32::MediaFoundation::MFVIDEOFORMAT* pMFVF, uint32_t cbBufSize)
    {
        auto win32_impl_result = WIN32_IMPL_MFInitMediaTypeFromMFVideoFormat(pMFType, pMFVF, cbBufSize);
        return win32_impl_result;
    }
    inline int32_t MFInitMediaTypeFromWaveFormatEx(Windows::Win32::MediaFoundation::IMFMediaType* pMFType, Windows::Win32::Multimedia::WAVEFORMATEX* pWaveFormat, uint32_t cbBufSize)
    {
        auto win32_impl_result = WIN32_IMPL_MFInitMediaTypeFromWaveFormatEx(pMFType, pWaveFormat, cbBufSize);
        return win32_impl_result;
    }
    inline int32_t MFInitMediaTypeFromAMMediaType(Windows::Win32::MediaFoundation::IMFMediaType* pMFType, Windows::Win32::DirectShow::AM_MEDIA_TYPE* pAMType)
    {
        auto win32_impl_result = WIN32_IMPL_MFInitMediaTypeFromAMMediaType(pMFType, pAMType);
        return win32_impl_result;
    }
    inline int32_t MFInitAMMediaTypeFromMFMediaType(Windows::Win32::MediaFoundation::IMFMediaType* pMFType, ::win32::guid guidFormatBlockType, Windows::Win32::DirectShow::AM_MEDIA_TYPE* pAMType)
    {
        auto win32_impl_result = WIN32_IMPL_MFInitAMMediaTypeFromMFMediaType(pMFType, guidFormatBlockType, pAMType);
        return win32_impl_result;
    }
    inline int32_t MFCreateAMMediaTypeFromMFMediaType(Windows::Win32::MediaFoundation::IMFMediaType* pMFType, ::win32::guid guidFormatBlockType, Windows::Win32::DirectShow::AM_MEDIA_TYPE** ppAMType)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateAMMediaTypeFromMFMediaType(pMFType, guidFormatBlockType, ppAMType);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL MFCompareFullToPartialMediaType(Windows::Win32::MediaFoundation::IMFMediaType* pMFTypeFull, Windows::Win32::MediaFoundation::IMFMediaType* pMFTypePartial)
    {
        auto win32_impl_result = WIN32_IMPL_MFCompareFullToPartialMediaType(pMFTypeFull, pMFTypePartial);
        return win32_impl_result;
    }
    inline int32_t MFWrapMediaType(Windows::Win32::MediaFoundation::IMFMediaType* pOrig, ::win32::guid* MajorType, ::win32::guid* SubType, Windows::Win32::MediaFoundation::IMFMediaType** ppWrap)
    {
        auto win32_impl_result = WIN32_IMPL_MFWrapMediaType(pOrig, MajorType, SubType, ppWrap);
        return win32_impl_result;
    }
    inline int32_t MFUnwrapMediaType(Windows::Win32::MediaFoundation::IMFMediaType* pWrap, Windows::Win32::MediaFoundation::IMFMediaType** ppOrig)
    {
        auto win32_impl_result = WIN32_IMPL_MFUnwrapMediaType(pWrap, ppOrig);
        return win32_impl_result;
    }
    inline int32_t MFCreateVideoMediaType(Windows::Win32::MediaFoundation::MFVIDEOFORMAT* pVideoFormat, Windows::Win32::MediaFoundation::IMFVideoMediaType** ppIVideoMediaType)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateVideoMediaType(pVideoFormat, ppIVideoMediaType);
        return win32_impl_result;
    }
    inline int32_t MFCreateVideoMediaTypeFromSubtype(::win32::guid* pAMSubtype, Windows::Win32::MediaFoundation::IMFVideoMediaType** ppIVideoMediaType)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateVideoMediaTypeFromSubtype(pAMSubtype, ppIVideoMediaType);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL MFIsFormatYUV(uint32_t Format)
    {
        auto win32_impl_result = WIN32_IMPL_MFIsFormatYUV(Format);
        return win32_impl_result;
    }
    inline int32_t MFCreateVideoMediaTypeFromBitMapInfoHeader(Windows::Win32::DirectShow::BITMAPINFOHEADER* pbmihBitMapInfoHeader, uint32_t dwPixelAspectRatioX, uint32_t dwPixelAspectRatioY, Windows::Win32::MediaFoundation::MFVideoInterlaceMode InterlaceMode, uint64_t VideoFlags, uint64_t qwFramesPerSecondNumerator, uint64_t qwFramesPerSecondDenominator, uint32_t dwMaxBitRate, Windows::Win32::MediaFoundation::IMFVideoMediaType** ppIVideoMediaType)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateVideoMediaTypeFromBitMapInfoHeader(pbmihBitMapInfoHeader, dwPixelAspectRatioX, dwPixelAspectRatioY, InterlaceMode, VideoFlags, qwFramesPerSecondNumerator, qwFramesPerSecondDenominator, dwMaxBitRate, ppIVideoMediaType);
        return win32_impl_result;
    }
    inline int32_t MFGetStrideForBitmapInfoHeader(uint32_t format, uint32_t dwWidth, int32_t* pStride)
    {
        auto win32_impl_result = WIN32_IMPL_MFGetStrideForBitmapInfoHeader(format, dwWidth, pStride);
        return win32_impl_result;
    }
    inline int32_t MFGetPlaneSize(uint32_t format, uint32_t dwWidth, uint32_t dwHeight, uint32_t* pdwPlaneSize)
    {
        auto win32_impl_result = WIN32_IMPL_MFGetPlaneSize(format, dwWidth, dwHeight, pdwPlaneSize);
        return win32_impl_result;
    }
    inline int32_t MFCreateVideoMediaTypeFromBitMapInfoHeaderEx(Windows::Win32::DirectShow::BITMAPINFOHEADER* pbmihBitMapInfoHeader, uint32_t cbBitMapInfoHeader, uint32_t dwPixelAspectRatioX, uint32_t dwPixelAspectRatioY, Windows::Win32::MediaFoundation::MFVideoInterlaceMode InterlaceMode, uint64_t VideoFlags, uint32_t dwFramesPerSecondNumerator, uint32_t dwFramesPerSecondDenominator, uint32_t dwMaxBitRate, Windows::Win32::MediaFoundation::IMFVideoMediaType** ppIVideoMediaType)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateVideoMediaTypeFromBitMapInfoHeaderEx(pbmihBitMapInfoHeader, cbBitMapInfoHeader, dwPixelAspectRatioX, dwPixelAspectRatioY, InterlaceMode, VideoFlags, dwFramesPerSecondNumerator, dwFramesPerSecondDenominator, dwMaxBitRate, ppIVideoMediaType);
        return win32_impl_result;
    }
    inline int32_t MFCreateMediaTypeFromRepresentation(::win32::guid guidRepresentation, void* pvRepresentation, Windows::Win32::MediaFoundation::IMFMediaType** ppIMediaType)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateMediaTypeFromRepresentation(guidRepresentation, pvRepresentation, ppIMediaType);
        return win32_impl_result;
    }
    inline int32_t MFCreateAudioMediaType(Windows::Win32::Multimedia::WAVEFORMATEX* pAudioFormat, Windows::Win32::MediaFoundation::IMFAudioMediaType** ppIAudioMediaType)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateAudioMediaType(pAudioFormat, ppIAudioMediaType);
        return win32_impl_result;
    }
    inline uint32_t MFGetUncompressedVideoFormat(Windows::Win32::MediaFoundation::MFVIDEOFORMAT* pVideoFormat)
    {
        auto win32_impl_result = WIN32_IMPL_MFGetUncompressedVideoFormat(pVideoFormat);
        return win32_impl_result;
    }
    inline int32_t MFInitVideoFormat(Windows::Win32::MediaFoundation::MFVIDEOFORMAT* pVideoFormat, Windows::Win32::MediaFoundation::MFStandardVideoFormat type)
    {
        auto win32_impl_result = WIN32_IMPL_MFInitVideoFormat(pVideoFormat, type);
        return win32_impl_result;
    }
    inline int32_t MFInitVideoFormat_RGB(Windows::Win32::MediaFoundation::MFVIDEOFORMAT* pVideoFormat, uint32_t dwWidth, uint32_t dwHeight, uint32_t D3Dfmt)
    {
        auto win32_impl_result = WIN32_IMPL_MFInitVideoFormat_RGB(pVideoFormat, dwWidth, dwHeight, D3Dfmt);
        return win32_impl_result;
    }
    inline int32_t MFConvertColorInfoToDXVA(uint32_t* pdwToDXVA, Windows::Win32::MediaFoundation::MFVIDEOFORMAT* pFromFormat)
    {
        auto win32_impl_result = WIN32_IMPL_MFConvertColorInfoToDXVA(pdwToDXVA, pFromFormat);
        return win32_impl_result;
    }
    inline int32_t MFConvertColorInfoFromDXVA(Windows::Win32::MediaFoundation::MFVIDEOFORMAT* pToFormat, uint32_t dwFromDXVA)
    {
        auto win32_impl_result = WIN32_IMPL_MFConvertColorInfoFromDXVA(pToFormat, dwFromDXVA);
        return win32_impl_result;
    }
    inline int32_t MFCopyImage(uint8_t* pDest, int32_t lDestStride, uint8_t* pSrc, int32_t lSrcStride, uint32_t dwWidthInBytes, uint32_t dwLines)
    {
        auto win32_impl_result = WIN32_IMPL_MFCopyImage(pDest, lDestStride, pSrc, lSrcStride, dwWidthInBytes, dwLines);
        return win32_impl_result;
    }
    inline int32_t MFConvertFromFP16Array(float* pDest, uint16_t* pSrc, uint32_t dwCount)
    {
        auto win32_impl_result = WIN32_IMPL_MFConvertFromFP16Array(pDest, pSrc, dwCount);
        return win32_impl_result;
    }
    inline int32_t MFConvertToFP16Array(uint16_t* pDest, float* pSrc, uint32_t dwCount)
    {
        auto win32_impl_result = WIN32_IMPL_MFConvertToFP16Array(pDest, pSrc, dwCount);
        return win32_impl_result;
    }
    inline int32_t MFCreate2DMediaBuffer(uint32_t dwWidth, uint32_t dwHeight, uint32_t dwFourCC, Windows::Win32::SystemServices::BOOL fBottomUp, Windows::Win32::MediaFoundation::IMFMediaBuffer** ppBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreate2DMediaBuffer(dwWidth, dwHeight, dwFourCC, fBottomUp, ppBuffer);
        return win32_impl_result;
    }
    inline int32_t MFCreateMediaBufferFromMediaType(Windows::Win32::MediaFoundation::IMFMediaType* pMediaType, int64_t llDuration, uint32_t dwMinLength, uint32_t dwMinAlignment, Windows::Win32::MediaFoundation::IMFMediaBuffer** ppBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateMediaBufferFromMediaType(pMediaType, llDuration, dwMinLength, dwMinAlignment, ppBuffer);
        return win32_impl_result;
    }
    inline int32_t MFCreateCollection(Windows::Win32::MediaFoundation::IMFCollection** ppIMFCollection)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateCollection(ppIMFCollection);
        return win32_impl_result;
    }
    inline void* MFHeapAlloc(size_t nSize, uint32_t dwFlags, int8_t* pszFile, int32_t line, Windows::Win32::MediaFoundation::EAllocationType eat)
    {
        auto win32_impl_result = WIN32_IMPL_MFHeapAlloc(nSize, dwFlags, pszFile, line, eat);
        return win32_impl_result;
    }
    inline void MFHeapFree(void* pv)
    {
        WIN32_IMPL_MFHeapFree(pv);
    }
    inline int64_t MFllMulDiv(int64_t a, int64_t b, int64_t c, int64_t d)
    {
        auto win32_impl_result = WIN32_IMPL_MFllMulDiv(a, b, c, d);
        return win32_impl_result;
    }
    inline int32_t MFGetContentProtectionSystemCLSID(::win32::guid* guidProtectionSystemID, ::win32::guid* pclsid)
    {
        auto win32_impl_result = WIN32_IMPL_MFGetContentProtectionSystemCLSID(guidProtectionSystemID, pclsid);
        return win32_impl_result;
    }
    inline int32_t MFCombineSamples(Windows::Win32::MediaFoundation::IMFSample* pSample, Windows::Win32::MediaFoundation::IMFSample* pSampleToAdd, uint32_t dwMaxMergedDurationInMS, int32_t* pMerged)
    {
        auto win32_impl_result = WIN32_IMPL_MFCombineSamples(pSample, pSampleToAdd, dwMaxMergedDurationInMS, pMerged);
        return win32_impl_result;
    }
    inline int32_t MFSplitSample(Windows::Win32::MediaFoundation::IMFSample* pSample, Windows::Win32::MediaFoundation::IMFSample** pOutputSamples, uint32_t dwOutputSampleMaxCount, uint32_t* pdwOutputSampleCount)
    {
        auto win32_impl_result = WIN32_IMPL_MFSplitSample(pSample, pOutputSamples, dwOutputSampleMaxCount, pdwOutputSampleCount);
        return win32_impl_result;
    }
    inline int32_t MFCreateSourceReaderFromURL(uint16_t* pwszURL, Windows::Win32::MediaFoundation::IMFAttributes* pAttributes, Windows::Win32::MediaFoundation::IMFSourceReader** ppSourceReader)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateSourceReaderFromURL(pwszURL, pAttributes, ppSourceReader);
        return win32_impl_result;
    }
    inline int32_t MFCreateSourceReaderFromByteStream(Windows::Win32::MediaFoundation::IMFByteStream* pByteStream, Windows::Win32::MediaFoundation::IMFAttributes* pAttributes, Windows::Win32::MediaFoundation::IMFSourceReader** ppSourceReader)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateSourceReaderFromByteStream(pByteStream, pAttributes, ppSourceReader);
        return win32_impl_result;
    }
    inline int32_t MFCreateSourceReaderFromMediaSource(Windows::Win32::MediaFoundation::IMFMediaSource* pMediaSource, Windows::Win32::MediaFoundation::IMFAttributes* pAttributes, Windows::Win32::MediaFoundation::IMFSourceReader** ppSourceReader)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateSourceReaderFromMediaSource(pMediaSource, pAttributes, ppSourceReader);
        return win32_impl_result;
    }
    inline int32_t MFCreateSinkWriterFromURL(uint16_t* pwszOutputURL, Windows::Win32::MediaFoundation::IMFByteStream* pByteStream, Windows::Win32::MediaFoundation::IMFAttributes* pAttributes, Windows::Win32::MediaFoundation::IMFSinkWriter** ppSinkWriter)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateSinkWriterFromURL(pwszOutputURL, pByteStream, pAttributes, ppSinkWriter);
        return win32_impl_result;
    }
    inline int32_t MFCreateSinkWriterFromMediaSink(Windows::Win32::MediaFoundation::IMFMediaSink* pMediaSink, Windows::Win32::MediaFoundation::IMFAttributes* pAttributes, Windows::Win32::MediaFoundation::IMFSinkWriter** ppSinkWriter)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateSinkWriterFromMediaSink(pMediaSink, pAttributes, ppSinkWriter);
        return win32_impl_result;
    }
    inline int32_t MFCreateVideoPresenter(Windows::Win32::Com::IUnknown* pOwner, ::win32::guid* riidDevice, ::win32::guid* riid, void** ppVideoPresenter)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateVideoPresenter(pOwner, riidDevice, riid, ppVideoPresenter);
        return win32_impl_result;
    }
    inline int32_t MFCreateVideoMixer(Windows::Win32::Com::IUnknown* pOwner, ::win32::guid* riidDevice, ::win32::guid* riid, void** ppv)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateVideoMixer(pOwner, riidDevice, riid, ppv);
        return win32_impl_result;
    }
    inline int32_t MFCreateVideoMixerAndPresenter(Windows::Win32::Com::IUnknown* pMixerOwner, Windows::Win32::Com::IUnknown* pPresenterOwner, ::win32::guid* riidMixer, void** ppvVideoMixer, ::win32::guid* riidPresenter, void** ppvVideoPresenter)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateVideoMixerAndPresenter(pMixerOwner, pPresenterOwner, riidMixer, ppvVideoMixer, riidPresenter, ppvVideoPresenter);
        return win32_impl_result;
    }
    inline int32_t MFCreateVideoRenderer(::win32::guid* riidRenderer, void** ppVideoRenderer)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateVideoRenderer(riidRenderer, ppVideoRenderer);
        return win32_impl_result;
    }
    inline int32_t MFCreateVideoSampleFromSurface(Windows::Win32::Com::IUnknown* pUnkSurface, Windows::Win32::MediaFoundation::IMFSample** ppSample)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateVideoSampleFromSurface(pUnkSurface, ppSample);
        return win32_impl_result;
    }
    inline int32_t MFCreateVideoSampleAllocator(::win32::guid* riid, void** ppSampleAllocator)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateVideoSampleAllocator(riid, ppSampleAllocator);
        return win32_impl_result;
    }
    inline int32_t MFPCreateMediaPlayer(uint16_t* pwszURL, Windows::Win32::SystemServices::BOOL fStartPlayback, uint32_t creationOptions, Windows::Win32::MediaFoundation::IMFPMediaPlayerCallback* pCallback, Windows::Win32::WindowsAndMessaging::HWND hWnd, Windows::Win32::MediaFoundation::IMFPMediaPlayer** ppMediaPlayer)
    {
        auto win32_impl_result = WIN32_IMPL_MFPCreateMediaPlayer(pwszURL, fStartPlayback, creationOptions, pCallback, hWnd, ppMediaPlayer);
        return win32_impl_result;
    }
    inline int32_t MFCreateEncryptedMediaExtensionsStoreActivate(Windows::Win32::MediaFoundation::IMFPMPHostApp* pmpHost, Windows::Win32::StructuredStorage::IStream* objectStream, uint16_t* classId, Windows::Win32::MediaFoundation::IMFActivate** activate)
    {
        auto win32_impl_result = WIN32_IMPL_MFCreateEncryptedMediaExtensionsStoreActivate(pmpHost, objectStream, classId, activate);
        return win32_impl_result;
    }

    inline constexpr wchar_t const* g_wszSpeechFormatCaps = L"SpeechFormatCap";
    inline constexpr wchar_t const* g_wszWMCPCodecName = L"_CODECNAME";
    inline constexpr wchar_t const* g_wszWMCPSupportedVBRModes = L"_SUPPORTEDVBRMODES";
    inline constexpr wchar_t const* g_wszWMCPAudioVBRSupported = L"_VBRENABLED";
    inline constexpr wchar_t const* g_wszWMCPAudioVBRQuality = L"_VBRQUALITY";
    inline constexpr wchar_t const* g_wszWMCPMaxPasses = L"_PASSESRECOMMENDED";
    inline constexpr wchar_t const* g_wszWMCPDefaultCrisp = L"_DEFAULTCRISP";
    inline constexpr int32_t COPP_ProtectionType_Unknown = -2147483648;
    inline constexpr int32_t COPP_ProtectionType_None = 0;
    inline constexpr int32_t COPP_ProtectionType_HDCP = 1;
    inline constexpr int32_t COPP_ProtectionType_ACP = 2;
    inline constexpr int32_t COPP_ProtectionType_CGMSA = 4;
    inline constexpr int32_t COPP_ProtectionType_Mask = -2147483641;
    inline constexpr int32_t COPP_ProtectionType_Reserved = 2147483640;
#pragma endregion methods

}
#endif
