// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Monitor_H
#define WIN32_Windows_Win32_Monitor_H
#include "win32/base.h"
static_assert(win32::check_version(CPPWIN32_VERSION, "0.0.0.1"), "Mismatched C++/Win32 headers.");
#define CPPWIN32_VERSION "0.0.0.1"
#include "win32/impl/Windows.Win32.Monitor.2.h"
WIN32_EXPORT namespace win32::Windows::Win32::Monitor
{
#pragma region methods
    inline int32_t GetNumberOfPhysicalMonitorsFromHMONITOR(intptr_t hMonitor, uint32_t* pdwNumberOfPhysicalMonitors)
    {
        auto win32_impl_result = WIN32_IMPL_GetNumberOfPhysicalMonitorsFromHMONITOR(hMonitor, pdwNumberOfPhysicalMonitors);
        return win32_impl_result;
    }
    inline int32_t GetNumberOfPhysicalMonitorsFromIDirect3DDevice9(Windows::Win32::Direct2D::IDirect3DDevice9* pDirect3DDevice9, uint32_t* pdwNumberOfPhysicalMonitors)
    {
        auto win32_impl_result = WIN32_IMPL_GetNumberOfPhysicalMonitorsFromIDirect3DDevice9(pDirect3DDevice9, pdwNumberOfPhysicalMonitors);
        return win32_impl_result;
    }
    inline int32_t GetPhysicalMonitorsFromHMONITOR(intptr_t hMonitor, uint32_t dwPhysicalMonitorArraySize, Windows::Win32::Monitor::PHYSICAL_MONITOR* pPhysicalMonitorArray)
    {
        auto win32_impl_result = WIN32_IMPL_GetPhysicalMonitorsFromHMONITOR(hMonitor, dwPhysicalMonitorArraySize, pPhysicalMonitorArray);
        return win32_impl_result;
    }
    inline int32_t GetPhysicalMonitorsFromIDirect3DDevice9(Windows::Win32::Direct2D::IDirect3DDevice9* pDirect3DDevice9, uint32_t dwPhysicalMonitorArraySize, Windows::Win32::Monitor::PHYSICAL_MONITOR* pPhysicalMonitorArray)
    {
        auto win32_impl_result = WIN32_IMPL_GetPhysicalMonitorsFromIDirect3DDevice9(pDirect3DDevice9, dwPhysicalMonitorArraySize, pPhysicalMonitorArray);
        return win32_impl_result;
    }
    inline int32_t DestroyPhysicalMonitor(Windows::Win32::SystemServices::HANDLE hMonitor)
    {
        auto win32_impl_result = WIN32_IMPL_DestroyPhysicalMonitor(hMonitor);
        return win32_impl_result;
    }
    inline int32_t DestroyPhysicalMonitors(uint32_t dwPhysicalMonitorArraySize, Windows::Win32::Monitor::PHYSICAL_MONITOR* pPhysicalMonitorArray)
    {
        auto win32_impl_result = WIN32_IMPL_DestroyPhysicalMonitors(dwPhysicalMonitorArraySize, pPhysicalMonitorArray);
        return win32_impl_result;
    }
    inline int32_t GetVCPFeatureAndVCPFeatureReply(Windows::Win32::SystemServices::HANDLE hMonitor, uint8_t bVCPCode, Windows::Win32::Monitor::MC_VCP_CODE_TYPE* pvct, uint32_t* pdwCurrentValue, uint32_t* pdwMaximumValue)
    {
        auto win32_impl_result = WIN32_IMPL_GetVCPFeatureAndVCPFeatureReply(hMonitor, bVCPCode, pvct, pdwCurrentValue, pdwMaximumValue);
        return win32_impl_result;
    }
    inline int32_t SetVCPFeature(Windows::Win32::SystemServices::HANDLE hMonitor, uint8_t bVCPCode, uint32_t dwNewValue)
    {
        auto win32_impl_result = WIN32_IMPL_SetVCPFeature(hMonitor, bVCPCode, dwNewValue);
        return win32_impl_result;
    }
    inline int32_t SaveCurrentSettings(Windows::Win32::SystemServices::HANDLE hMonitor)
    {
        auto win32_impl_result = WIN32_IMPL_SaveCurrentSettings(hMonitor);
        return win32_impl_result;
    }
    inline int32_t GetCapabilitiesStringLength(Windows::Win32::SystemServices::HANDLE hMonitor, uint32_t* pdwCapabilitiesStringLengthInCharacters)
    {
        auto win32_impl_result = WIN32_IMPL_GetCapabilitiesStringLength(hMonitor, pdwCapabilitiesStringLengthInCharacters);
        return win32_impl_result;
    }
    inline int32_t CapabilitiesRequestAndCapabilitiesReply(Windows::Win32::SystemServices::HANDLE hMonitor, int8_t* pszASCIICapabilitiesString, uint32_t dwCapabilitiesStringLengthInCharacters)
    {
        auto win32_impl_result = WIN32_IMPL_CapabilitiesRequestAndCapabilitiesReply(hMonitor, pszASCIICapabilitiesString, dwCapabilitiesStringLengthInCharacters);
        return win32_impl_result;
    }
    inline int32_t GetTimingReport(Windows::Win32::SystemServices::HANDLE hMonitor, Windows::Win32::Monitor::MC_TIMING_REPORT* pmtrMonitorTimingReport)
    {
        auto win32_impl_result = WIN32_IMPL_GetTimingReport(hMonitor, pmtrMonitorTimingReport);
        return win32_impl_result;
    }
    inline int32_t GetMonitorCapabilities(Windows::Win32::SystemServices::HANDLE hMonitor, uint32_t* pdwMonitorCapabilities, uint32_t* pdwSupportedColorTemperatures)
    {
        auto win32_impl_result = WIN32_IMPL_GetMonitorCapabilities(hMonitor, pdwMonitorCapabilities, pdwSupportedColorTemperatures);
        return win32_impl_result;
    }
    inline int32_t SaveCurrentMonitorSettings(Windows::Win32::SystemServices::HANDLE hMonitor)
    {
        auto win32_impl_result = WIN32_IMPL_SaveCurrentMonitorSettings(hMonitor);
        return win32_impl_result;
    }
    inline int32_t GetMonitorTechnologyType(Windows::Win32::SystemServices::HANDLE hMonitor, Windows::Win32::Monitor::MC_DISPLAY_TECHNOLOGY_TYPE* pdtyDisplayTechnologyType)
    {
        auto win32_impl_result = WIN32_IMPL_GetMonitorTechnologyType(hMonitor, pdtyDisplayTechnologyType);
        return win32_impl_result;
    }
    inline int32_t GetMonitorBrightness(Windows::Win32::SystemServices::HANDLE hMonitor, uint32_t* pdwMinimumBrightness, uint32_t* pdwCurrentBrightness, uint32_t* pdwMaximumBrightness)
    {
        auto win32_impl_result = WIN32_IMPL_GetMonitorBrightness(hMonitor, pdwMinimumBrightness, pdwCurrentBrightness, pdwMaximumBrightness);
        return win32_impl_result;
    }
    inline int32_t GetMonitorContrast(Windows::Win32::SystemServices::HANDLE hMonitor, uint32_t* pdwMinimumContrast, uint32_t* pdwCurrentContrast, uint32_t* pdwMaximumContrast)
    {
        auto win32_impl_result = WIN32_IMPL_GetMonitorContrast(hMonitor, pdwMinimumContrast, pdwCurrentContrast, pdwMaximumContrast);
        return win32_impl_result;
    }
    inline int32_t GetMonitorColorTemperature(Windows::Win32::SystemServices::HANDLE hMonitor, Windows::Win32::Monitor::MC_COLOR_TEMPERATURE* pctCurrentColorTemperature)
    {
        auto win32_impl_result = WIN32_IMPL_GetMonitorColorTemperature(hMonitor, pctCurrentColorTemperature);
        return win32_impl_result;
    }
    inline int32_t GetMonitorRedGreenOrBlueDrive(Windows::Win32::SystemServices::HANDLE hMonitor, Windows::Win32::Monitor::MC_DRIVE_TYPE dtDriveType, uint32_t* pdwMinimumDrive, uint32_t* pdwCurrentDrive, uint32_t* pdwMaximumDrive)
    {
        auto win32_impl_result = WIN32_IMPL_GetMonitorRedGreenOrBlueDrive(hMonitor, dtDriveType, pdwMinimumDrive, pdwCurrentDrive, pdwMaximumDrive);
        return win32_impl_result;
    }
    inline int32_t GetMonitorRedGreenOrBlueGain(Windows::Win32::SystemServices::HANDLE hMonitor, Windows::Win32::Monitor::MC_GAIN_TYPE gtGainType, uint32_t* pdwMinimumGain, uint32_t* pdwCurrentGain, uint32_t* pdwMaximumGain)
    {
        auto win32_impl_result = WIN32_IMPL_GetMonitorRedGreenOrBlueGain(hMonitor, gtGainType, pdwMinimumGain, pdwCurrentGain, pdwMaximumGain);
        return win32_impl_result;
    }
    inline int32_t SetMonitorBrightness(Windows::Win32::SystemServices::HANDLE hMonitor, uint32_t dwNewBrightness)
    {
        auto win32_impl_result = WIN32_IMPL_SetMonitorBrightness(hMonitor, dwNewBrightness);
        return win32_impl_result;
    }
    inline int32_t SetMonitorContrast(Windows::Win32::SystemServices::HANDLE hMonitor, uint32_t dwNewContrast)
    {
        auto win32_impl_result = WIN32_IMPL_SetMonitorContrast(hMonitor, dwNewContrast);
        return win32_impl_result;
    }
    inline int32_t SetMonitorColorTemperature(Windows::Win32::SystemServices::HANDLE hMonitor, Windows::Win32::Monitor::MC_COLOR_TEMPERATURE ctCurrentColorTemperature)
    {
        auto win32_impl_result = WIN32_IMPL_SetMonitorColorTemperature(hMonitor, ctCurrentColorTemperature);
        return win32_impl_result;
    }
    inline int32_t SetMonitorRedGreenOrBlueDrive(Windows::Win32::SystemServices::HANDLE hMonitor, Windows::Win32::Monitor::MC_DRIVE_TYPE dtDriveType, uint32_t dwNewDrive)
    {
        auto win32_impl_result = WIN32_IMPL_SetMonitorRedGreenOrBlueDrive(hMonitor, dtDriveType, dwNewDrive);
        return win32_impl_result;
    }
    inline int32_t SetMonitorRedGreenOrBlueGain(Windows::Win32::SystemServices::HANDLE hMonitor, Windows::Win32::Monitor::MC_GAIN_TYPE gtGainType, uint32_t dwNewGain)
    {
        auto win32_impl_result = WIN32_IMPL_SetMonitorRedGreenOrBlueGain(hMonitor, gtGainType, dwNewGain);
        return win32_impl_result;
    }
    inline int32_t DegaussMonitor(Windows::Win32::SystemServices::HANDLE hMonitor)
    {
        auto win32_impl_result = WIN32_IMPL_DegaussMonitor(hMonitor);
        return win32_impl_result;
    }
    inline int32_t GetMonitorDisplayAreaSize(Windows::Win32::SystemServices::HANDLE hMonitor, Windows::Win32::Monitor::MC_SIZE_TYPE stSizeType, uint32_t* pdwMinimumWidthOrHeight, uint32_t* pdwCurrentWidthOrHeight, uint32_t* pdwMaximumWidthOrHeight)
    {
        auto win32_impl_result = WIN32_IMPL_GetMonitorDisplayAreaSize(hMonitor, stSizeType, pdwMinimumWidthOrHeight, pdwCurrentWidthOrHeight, pdwMaximumWidthOrHeight);
        return win32_impl_result;
    }
    inline int32_t GetMonitorDisplayAreaPosition(Windows::Win32::SystemServices::HANDLE hMonitor, Windows::Win32::Monitor::MC_POSITION_TYPE ptPositionType, uint32_t* pdwMinimumPosition, uint32_t* pdwCurrentPosition, uint32_t* pdwMaximumPosition)
    {
        auto win32_impl_result = WIN32_IMPL_GetMonitorDisplayAreaPosition(hMonitor, ptPositionType, pdwMinimumPosition, pdwCurrentPosition, pdwMaximumPosition);
        return win32_impl_result;
    }
    inline int32_t SetMonitorDisplayAreaSize(Windows::Win32::SystemServices::HANDLE hMonitor, Windows::Win32::Monitor::MC_SIZE_TYPE stSizeType, uint32_t dwNewDisplayAreaWidthOrHeight)
    {
        auto win32_impl_result = WIN32_IMPL_SetMonitorDisplayAreaSize(hMonitor, stSizeType, dwNewDisplayAreaWidthOrHeight);
        return win32_impl_result;
    }
    inline int32_t SetMonitorDisplayAreaPosition(Windows::Win32::SystemServices::HANDLE hMonitor, Windows::Win32::Monitor::MC_POSITION_TYPE ptPositionType, uint32_t dwNewPosition)
    {
        auto win32_impl_result = WIN32_IMPL_SetMonitorDisplayAreaPosition(hMonitor, ptPositionType, dwNewPosition);
        return win32_impl_result;
    }
    inline int32_t RestoreMonitorFactoryColorDefaults(Windows::Win32::SystemServices::HANDLE hMonitor)
    {
        auto win32_impl_result = WIN32_IMPL_RestoreMonitorFactoryColorDefaults(hMonitor);
        return win32_impl_result;
    }
    inline int32_t RestoreMonitorFactoryDefaults(Windows::Win32::SystemServices::HANDLE hMonitor)
    {
        auto win32_impl_result = WIN32_IMPL_RestoreMonitorFactoryDefaults(hMonitor);
        return win32_impl_result;
    }

#pragma endregion methods

}
#endif
