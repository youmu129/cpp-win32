// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_NetManagement_H
#define WIN32_Windows_Win32_NetManagement_H
#include "win32/base.h"
static_assert(win32::check_version(CPPWIN32_VERSION, "0.0.0.1"), "Mismatched C++/Win32 headers.");
#define CPPWIN32_VERSION "0.0.0.1"
#include "win32/impl/Windows.Win32.NetManagement.2.h"
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
#pragma region methods
    inline uint32_t NetUserAdd(uint16_t* servername, uint32_t level, uint8_t* buf, uint32_t* parm_err)
    {
        auto win32_impl_result = WIN32_IMPL_NetUserAdd(servername, level, buf, parm_err);
        return win32_impl_result;
    }
    inline uint32_t NetUserEnum(uint16_t* servername, uint32_t level, uint32_t filter, uint8_t** bufptr, uint32_t prefmaxlen, uint32_t* entriesread, uint32_t* totalentries, uint32_t* resume_handle)
    {
        auto win32_impl_result = WIN32_IMPL_NetUserEnum(servername, level, filter, bufptr, prefmaxlen, entriesread, totalentries, resume_handle);
        return win32_impl_result;
    }
    inline uint32_t NetUserGetInfo(uint16_t* servername, uint16_t* username, uint32_t level, uint8_t** bufptr)
    {
        auto win32_impl_result = WIN32_IMPL_NetUserGetInfo(servername, username, level, bufptr);
        return win32_impl_result;
    }
    inline uint32_t NetUserSetInfo(uint16_t* servername, uint16_t* username, uint32_t level, uint8_t* buf, uint32_t* parm_err)
    {
        auto win32_impl_result = WIN32_IMPL_NetUserSetInfo(servername, username, level, buf, parm_err);
        return win32_impl_result;
    }
    inline uint32_t NetUserDel(uint16_t* servername, uint16_t* username)
    {
        auto win32_impl_result = WIN32_IMPL_NetUserDel(servername, username);
        return win32_impl_result;
    }
    inline uint32_t NetUserGetGroups(uint16_t* servername, uint16_t* username, uint32_t level, uint8_t** bufptr, uint32_t prefmaxlen, uint32_t* entriesread, uint32_t* totalentries)
    {
        auto win32_impl_result = WIN32_IMPL_NetUserGetGroups(servername, username, level, bufptr, prefmaxlen, entriesread, totalentries);
        return win32_impl_result;
    }
    inline uint32_t NetUserSetGroups(uint16_t* servername, uint16_t* username, uint32_t level, uint8_t* buf, uint32_t num_entries)
    {
        auto win32_impl_result = WIN32_IMPL_NetUserSetGroups(servername, username, level, buf, num_entries);
        return win32_impl_result;
    }
    inline uint32_t NetUserGetLocalGroups(uint16_t* servername, uint16_t* username, uint32_t level, uint32_t flags, uint8_t** bufptr, uint32_t prefmaxlen, uint32_t* entriesread, uint32_t* totalentries)
    {
        auto win32_impl_result = WIN32_IMPL_NetUserGetLocalGroups(servername, username, level, flags, bufptr, prefmaxlen, entriesread, totalentries);
        return win32_impl_result;
    }
    inline uint32_t NetUserModalsGet(uint16_t* servername, uint32_t level, uint8_t** bufptr)
    {
        auto win32_impl_result = WIN32_IMPL_NetUserModalsGet(servername, level, bufptr);
        return win32_impl_result;
    }
    inline uint32_t NetUserModalsSet(uint16_t* servername, uint32_t level, uint8_t* buf, uint32_t* parm_err)
    {
        auto win32_impl_result = WIN32_IMPL_NetUserModalsSet(servername, level, buf, parm_err);
        return win32_impl_result;
    }
    inline uint32_t NetUserChangePassword(uint16_t* domainname, uint16_t* username, uint16_t* oldpassword, uint16_t* newpassword)
    {
        auto win32_impl_result = WIN32_IMPL_NetUserChangePassword(domainname, username, oldpassword, newpassword);
        return win32_impl_result;
    }
    inline uint32_t NetGroupAdd(uint16_t* servername, uint32_t level, uint8_t* buf, uint32_t* parm_err)
    {
        auto win32_impl_result = WIN32_IMPL_NetGroupAdd(servername, level, buf, parm_err);
        return win32_impl_result;
    }
    inline uint32_t NetGroupAddUser(uint16_t* servername, uint16_t* GroupName, uint16_t* username)
    {
        auto win32_impl_result = WIN32_IMPL_NetGroupAddUser(servername, GroupName, username);
        return win32_impl_result;
    }
    inline uint32_t NetGroupEnum(uint16_t* servername, uint32_t level, uint8_t** bufptr, uint32_t prefmaxlen, uint32_t* entriesread, uint32_t* totalentries, size_t* resume_handle)
    {
        auto win32_impl_result = WIN32_IMPL_NetGroupEnum(servername, level, bufptr, prefmaxlen, entriesread, totalentries, resume_handle);
        return win32_impl_result;
    }
    inline uint32_t NetGroupGetInfo(uint16_t* servername, uint16_t* groupname, uint32_t level, uint8_t** bufptr)
    {
        auto win32_impl_result = WIN32_IMPL_NetGroupGetInfo(servername, groupname, level, bufptr);
        return win32_impl_result;
    }
    inline uint32_t NetGroupSetInfo(uint16_t* servername, uint16_t* groupname, uint32_t level, uint8_t* buf, uint32_t* parm_err)
    {
        auto win32_impl_result = WIN32_IMPL_NetGroupSetInfo(servername, groupname, level, buf, parm_err);
        return win32_impl_result;
    }
    inline uint32_t NetGroupDel(uint16_t* servername, uint16_t* groupname)
    {
        auto win32_impl_result = WIN32_IMPL_NetGroupDel(servername, groupname);
        return win32_impl_result;
    }
    inline uint32_t NetGroupDelUser(uint16_t* servername, uint16_t* GroupName, uint16_t* Username)
    {
        auto win32_impl_result = WIN32_IMPL_NetGroupDelUser(servername, GroupName, Username);
        return win32_impl_result;
    }
    inline uint32_t NetGroupGetUsers(uint16_t* servername, uint16_t* groupname, uint32_t level, uint8_t** bufptr, uint32_t prefmaxlen, uint32_t* entriesread, uint32_t* totalentries, size_t* ResumeHandle)
    {
        auto win32_impl_result = WIN32_IMPL_NetGroupGetUsers(servername, groupname, level, bufptr, prefmaxlen, entriesread, totalentries, ResumeHandle);
        return win32_impl_result;
    }
    inline uint32_t NetGroupSetUsers(uint16_t* servername, uint16_t* groupname, uint32_t level, uint8_t* buf, uint32_t totalentries)
    {
        auto win32_impl_result = WIN32_IMPL_NetGroupSetUsers(servername, groupname, level, buf, totalentries);
        return win32_impl_result;
    }
    inline uint32_t NetLocalGroupAdd(uint16_t* servername, uint32_t level, uint8_t* buf, uint32_t* parm_err)
    {
        auto win32_impl_result = WIN32_IMPL_NetLocalGroupAdd(servername, level, buf, parm_err);
        return win32_impl_result;
    }
    inline uint32_t NetLocalGroupAddMember(uint16_t* servername, uint16_t* groupname, void* membersid)
    {
        auto win32_impl_result = WIN32_IMPL_NetLocalGroupAddMember(servername, groupname, membersid);
        return win32_impl_result;
    }
    inline uint32_t NetLocalGroupEnum(uint16_t* servername, uint32_t level, uint8_t** bufptr, uint32_t prefmaxlen, uint32_t* entriesread, uint32_t* totalentries, size_t* resumehandle)
    {
        auto win32_impl_result = WIN32_IMPL_NetLocalGroupEnum(servername, level, bufptr, prefmaxlen, entriesread, totalentries, resumehandle);
        return win32_impl_result;
    }
    inline uint32_t NetLocalGroupGetInfo(uint16_t* servername, uint16_t* groupname, uint32_t level, uint8_t** bufptr)
    {
        auto win32_impl_result = WIN32_IMPL_NetLocalGroupGetInfo(servername, groupname, level, bufptr);
        return win32_impl_result;
    }
    inline uint32_t NetLocalGroupSetInfo(uint16_t* servername, uint16_t* groupname, uint32_t level, uint8_t* buf, uint32_t* parm_err)
    {
        auto win32_impl_result = WIN32_IMPL_NetLocalGroupSetInfo(servername, groupname, level, buf, parm_err);
        return win32_impl_result;
    }
    inline uint32_t NetLocalGroupDel(uint16_t* servername, uint16_t* groupname)
    {
        auto win32_impl_result = WIN32_IMPL_NetLocalGroupDel(servername, groupname);
        return win32_impl_result;
    }
    inline uint32_t NetLocalGroupDelMember(uint16_t* servername, uint16_t* groupname, void* membersid)
    {
        auto win32_impl_result = WIN32_IMPL_NetLocalGroupDelMember(servername, groupname, membersid);
        return win32_impl_result;
    }
    inline uint32_t NetLocalGroupGetMembers(uint16_t* servername, uint16_t* localgroupname, uint32_t level, uint8_t** bufptr, uint32_t prefmaxlen, uint32_t* entriesread, uint32_t* totalentries, size_t* resumehandle)
    {
        auto win32_impl_result = WIN32_IMPL_NetLocalGroupGetMembers(servername, localgroupname, level, bufptr, prefmaxlen, entriesread, totalentries, resumehandle);
        return win32_impl_result;
    }
    inline uint32_t NetLocalGroupSetMembers(uint16_t* servername, uint16_t* groupname, uint32_t level, uint8_t* buf, uint32_t totalentries)
    {
        auto win32_impl_result = WIN32_IMPL_NetLocalGroupSetMembers(servername, groupname, level, buf, totalentries);
        return win32_impl_result;
    }
    inline uint32_t NetLocalGroupAddMembers(uint16_t* servername, uint16_t* groupname, uint32_t level, uint8_t* buf, uint32_t totalentries)
    {
        auto win32_impl_result = WIN32_IMPL_NetLocalGroupAddMembers(servername, groupname, level, buf, totalentries);
        return win32_impl_result;
    }
    inline uint32_t NetLocalGroupDelMembers(uint16_t* servername, uint16_t* groupname, uint32_t level, uint8_t* buf, uint32_t totalentries)
    {
        auto win32_impl_result = WIN32_IMPL_NetLocalGroupDelMembers(servername, groupname, level, buf, totalentries);
        return win32_impl_result;
    }
    inline uint32_t NetQueryDisplayInformation(uint16_t* ServerName, uint32_t Level, uint32_t Index, uint32_t EntriesRequested, uint32_t PreferredMaximumLength, uint32_t* ReturnedEntryCount, void** SortedBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_NetQueryDisplayInformation(ServerName, Level, Index, EntriesRequested, PreferredMaximumLength, ReturnedEntryCount, SortedBuffer);
        return win32_impl_result;
    }
    inline uint32_t NetGetDisplayInformationIndex(uint16_t* ServerName, uint32_t Level, uint16_t* Prefix, uint32_t* Index)
    {
        auto win32_impl_result = WIN32_IMPL_NetGetDisplayInformationIndex(ServerName, Level, Prefix, Index);
        return win32_impl_result;
    }
    inline uint32_t NetAccessAdd(uint16_t* servername, uint32_t level, uint8_t* buf, uint32_t* parm_err)
    {
        auto win32_impl_result = WIN32_IMPL_NetAccessAdd(servername, level, buf, parm_err);
        return win32_impl_result;
    }
    inline uint32_t NetAccessEnum(uint16_t* servername, uint16_t* BasePath, uint32_t Recursive, uint32_t level, uint8_t** bufptr, uint32_t prefmaxlen, uint32_t* entriesread, uint32_t* totalentries, uint32_t* resume_handle)
    {
        auto win32_impl_result = WIN32_IMPL_NetAccessEnum(servername, BasePath, Recursive, level, bufptr, prefmaxlen, entriesread, totalentries, resume_handle);
        return win32_impl_result;
    }
    inline uint32_t NetAccessGetInfo(uint16_t* servername, uint16_t* resource, uint32_t level, uint8_t** bufptr)
    {
        auto win32_impl_result = WIN32_IMPL_NetAccessGetInfo(servername, resource, level, bufptr);
        return win32_impl_result;
    }
    inline uint32_t NetAccessSetInfo(uint16_t* servername, uint16_t* resource, uint32_t level, uint8_t* buf, uint32_t* parm_err)
    {
        auto win32_impl_result = WIN32_IMPL_NetAccessSetInfo(servername, resource, level, buf, parm_err);
        return win32_impl_result;
    }
    inline uint32_t NetAccessDel(uint16_t* servername, uint16_t* resource)
    {
        auto win32_impl_result = WIN32_IMPL_NetAccessDel(servername, resource);
        return win32_impl_result;
    }
    inline uint32_t NetAccessGetUserPerms(uint16_t* servername, uint16_t* UGname, uint16_t* resource, uint32_t* Perms)
    {
        auto win32_impl_result = WIN32_IMPL_NetAccessGetUserPerms(servername, UGname, resource, Perms);
        return win32_impl_result;
    }
    inline uint32_t NetValidatePasswordPolicy(uint16_t* ServerName, void* Qualifier, Windows::Win32::NetManagement::NET_VALIDATE_PASSWORD_TYPE ValidationType, void* InputArg, void** OutputArg)
    {
        auto win32_impl_result = WIN32_IMPL_NetValidatePasswordPolicy(ServerName, Qualifier, ValidationType, InputArg, OutputArg);
        return win32_impl_result;
    }
    inline uint32_t NetValidatePasswordPolicyFree(void** OutputArg)
    {
        auto win32_impl_result = WIN32_IMPL_NetValidatePasswordPolicyFree(OutputArg);
        return win32_impl_result;
    }
    inline uint32_t NetGetDCName(uint16_t* ServerName, uint16_t* DomainName, uint8_t** Buffer)
    {
        auto win32_impl_result = WIN32_IMPL_NetGetDCName(ServerName, DomainName, Buffer);
        return win32_impl_result;
    }
    inline uint32_t NetGetAnyDCName(uint16_t* ServerName, uint16_t* DomainName, uint8_t** Buffer)
    {
        auto win32_impl_result = WIN32_IMPL_NetGetAnyDCName(ServerName, DomainName, Buffer);
        return win32_impl_result;
    }
    inline uint32_t NetJoinDomain(uint16_t* lpServer, uint16_t* lpDomain, uint16_t* lpMachineAccountOU, uint16_t* lpAccount, uint16_t* lpPassword, uint32_t fJoinOptions)
    {
        auto win32_impl_result = WIN32_IMPL_NetJoinDomain(lpServer, lpDomain, lpMachineAccountOU, lpAccount, lpPassword, fJoinOptions);
        return win32_impl_result;
    }
    inline uint32_t NetUnjoinDomain(uint16_t* lpServer, uint16_t* lpAccount, uint16_t* lpPassword, uint32_t fUnjoinOptions)
    {
        auto win32_impl_result = WIN32_IMPL_NetUnjoinDomain(lpServer, lpAccount, lpPassword, fUnjoinOptions);
        return win32_impl_result;
    }
    inline uint32_t NetRenameMachineInDomain(uint16_t* lpServer, uint16_t* lpNewMachineName, uint16_t* lpAccount, uint16_t* lpPassword, uint32_t fRenameOptions)
    {
        auto win32_impl_result = WIN32_IMPL_NetRenameMachineInDomain(lpServer, lpNewMachineName, lpAccount, lpPassword, fRenameOptions);
        return win32_impl_result;
    }
    inline uint32_t NetValidateName(uint16_t* lpServer, uint16_t* lpName, uint16_t* lpAccount, uint16_t* lpPassword, Windows::Win32::NetManagement::NETSETUP_NAME_TYPE NameType)
    {
        auto win32_impl_result = WIN32_IMPL_NetValidateName(lpServer, lpName, lpAccount, lpPassword, NameType);
        return win32_impl_result;
    }
    inline uint32_t NetGetJoinableOUs(uint16_t* lpServer, uint16_t* lpDomain, uint16_t* lpAccount, uint16_t* lpPassword, uint32_t* OUCount, uint16_t*** OUs)
    {
        auto win32_impl_result = WIN32_IMPL_NetGetJoinableOUs(lpServer, lpDomain, lpAccount, lpPassword, OUCount, OUs);
        return win32_impl_result;
    }
    inline uint32_t NetAddAlternateComputerName(uint16_t* Server, uint16_t* AlternateName, uint16_t* DomainAccount, uint16_t* DomainAccountPassword, uint32_t Reserved)
    {
        auto win32_impl_result = WIN32_IMPL_NetAddAlternateComputerName(Server, AlternateName, DomainAccount, DomainAccountPassword, Reserved);
        return win32_impl_result;
    }
    inline uint32_t NetRemoveAlternateComputerName(uint16_t* Server, uint16_t* AlternateName, uint16_t* DomainAccount, uint16_t* DomainAccountPassword, uint32_t Reserved)
    {
        auto win32_impl_result = WIN32_IMPL_NetRemoveAlternateComputerName(Server, AlternateName, DomainAccount, DomainAccountPassword, Reserved);
        return win32_impl_result;
    }
    inline uint32_t NetSetPrimaryComputerName(uint16_t* Server, uint16_t* PrimaryName, uint16_t* DomainAccount, uint16_t* DomainAccountPassword, uint32_t Reserved)
    {
        auto win32_impl_result = WIN32_IMPL_NetSetPrimaryComputerName(Server, PrimaryName, DomainAccount, DomainAccountPassword, Reserved);
        return win32_impl_result;
    }
    inline uint32_t NetEnumerateComputerNames(uint16_t* Server, Windows::Win32::NetManagement::NET_COMPUTER_NAME_TYPE NameType, uint32_t Reserved, uint32_t* EntryCount, uint16_t*** ComputerNames)
    {
        auto win32_impl_result = WIN32_IMPL_NetEnumerateComputerNames(Server, NameType, Reserved, EntryCount, ComputerNames);
        return win32_impl_result;
    }
    inline uint32_t NetProvisionComputerAccount(uint16_t* lpDomain, uint16_t* lpMachineName, uint16_t* lpMachineAccountOU, uint16_t* lpDcName, uint32_t dwOptions, uint8_t** pProvisionBinData, uint32_t* pdwProvisionBinDataSize, uint16_t** pProvisionTextData)
    {
        auto win32_impl_result = WIN32_IMPL_NetProvisionComputerAccount(lpDomain, lpMachineName, lpMachineAccountOU, lpDcName, dwOptions, pProvisionBinData, pdwProvisionBinDataSize, pProvisionTextData);
        return win32_impl_result;
    }
    inline uint32_t NetRequestOfflineDomainJoin(uint8_t* pProvisionBinData, uint32_t cbProvisionBinDataSize, uint32_t dwOptions, uint16_t* lpWindowsPath)
    {
        auto win32_impl_result = WIN32_IMPL_NetRequestOfflineDomainJoin(pProvisionBinData, cbProvisionBinDataSize, dwOptions, lpWindowsPath);
        return win32_impl_result;
    }
    inline uint32_t NetCreateProvisioningPackage(Windows::Win32::NetManagement::NETSETUP_PROVISIONING_PARAMS* pProvisioningParams, uint8_t** ppPackageBinData, uint32_t* pdwPackageBinDataSize, uint16_t** ppPackageTextData)
    {
        auto win32_impl_result = WIN32_IMPL_NetCreateProvisioningPackage(pProvisioningParams, ppPackageBinData, pdwPackageBinDataSize, ppPackageTextData);
        return win32_impl_result;
    }
    inline uint32_t NetRequestProvisioningPackageInstall(uint8_t* pPackageBinData, uint32_t dwPackageBinDataSize, uint32_t dwProvisionOptions, uint16_t* lpWindowsPath, void* pvReserved)
    {
        auto win32_impl_result = WIN32_IMPL_NetRequestProvisioningPackageInstall(pPackageBinData, dwPackageBinDataSize, dwProvisionOptions, lpWindowsPath, pvReserved);
        return win32_impl_result;
    }
    inline int32_t NetGetAadJoinInformation(uint16_t* pcszTenantId, Windows::Win32::NetManagement::DSREG_JOIN_INFO** ppJoinInfo)
    {
        auto win32_impl_result = WIN32_IMPL_NetGetAadJoinInformation(pcszTenantId, ppJoinInfo);
        return win32_impl_result;
    }
    inline void NetFreeAadJoinInformation(Windows::Win32::NetManagement::DSREG_JOIN_INFO* pJoinInfo)
    {
        WIN32_IMPL_NetFreeAadJoinInformation(pJoinInfo);
    }
    inline uint32_t NetGetJoinInformation(uint16_t* lpServer, uint16_t** lpNameBuffer, Windows::Win32::NetManagement::NETSETUP_JOIN_STATUS* BufferType)
    {
        auto win32_impl_result = WIN32_IMPL_NetGetJoinInformation(lpServer, lpNameBuffer, BufferType);
        return win32_impl_result;
    }
    inline int32_t GetNetScheduleAccountInformation(uint16_t* pwszServerName, uint32_t ccAccount, uint16_t* wszAccount)
    {
        auto win32_impl_result = WIN32_IMPL_GetNetScheduleAccountInformation(pwszServerName, ccAccount, wszAccount);
        return win32_impl_result;
    }
    inline int32_t SetNetScheduleAccountInformation(uint16_t* pwszServerName, uint16_t* pwszAccount, uint16_t* pwszPassword)
    {
        auto win32_impl_result = WIN32_IMPL_SetNetScheduleAccountInformation(pwszServerName, pwszAccount, pwszPassword);
        return win32_impl_result;
    }
    inline uint32_t NetAlertRaise(uint16_t* AlertType, void* Buffer, uint32_t BufferSize)
    {
        auto win32_impl_result = WIN32_IMPL_NetAlertRaise(AlertType, Buffer, BufferSize);
        return win32_impl_result;
    }
    inline uint32_t NetAlertRaiseEx(uint16_t* AlertType, void* VariableInfo, uint32_t VariableInfoSize, uint16_t* ServiceName)
    {
        auto win32_impl_result = WIN32_IMPL_NetAlertRaiseEx(AlertType, VariableInfo, VariableInfoSize, ServiceName);
        return win32_impl_result;
    }
    inline uint32_t NetApiBufferAllocate(uint32_t ByteCount, void** Buffer)
    {
        auto win32_impl_result = WIN32_IMPL_NetApiBufferAllocate(ByteCount, Buffer);
        return win32_impl_result;
    }
    inline uint32_t NetApiBufferFree(void* Buffer)
    {
        auto win32_impl_result = WIN32_IMPL_NetApiBufferFree(Buffer);
        return win32_impl_result;
    }
    inline uint32_t NetApiBufferReallocate(void* OldBuffer, uint32_t NewByteCount, void** NewBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_NetApiBufferReallocate(OldBuffer, NewByteCount, NewBuffer);
        return win32_impl_result;
    }
    inline uint32_t NetApiBufferSize(void* Buffer, uint32_t* ByteCount)
    {
        auto win32_impl_result = WIN32_IMPL_NetApiBufferSize(Buffer, ByteCount);
        return win32_impl_result;
    }
    inline uint32_t NetAuditClear(uint16_t* server, uint16_t* backupfile, uint16_t* service)
    {
        auto win32_impl_result = WIN32_IMPL_NetAuditClear(server, backupfile, service);
        return win32_impl_result;
    }
    inline uint32_t NetAuditRead(uint16_t* server, uint16_t* service, Windows::Win32::NetManagement::HLOG* auditloghandle, uint32_t offset, uint32_t* reserved1, uint32_t reserved2, uint32_t offsetflag, uint8_t** bufptr, uint32_t prefmaxlen, uint32_t* bytesread, uint32_t* totalavailable)
    {
        auto win32_impl_result = WIN32_IMPL_NetAuditRead(server, service, auditloghandle, offset, reserved1, reserved2, offsetflag, bufptr, prefmaxlen, bytesread, totalavailable);
        return win32_impl_result;
    }
    inline uint32_t NetAuditWrite(uint32_t type, uint8_t* buf, uint32_t numbytes, uint16_t* service, uint8_t* reserved)
    {
        auto win32_impl_result = WIN32_IMPL_NetAuditWrite(type, buf, numbytes, service, reserved);
        return win32_impl_result;
    }
    inline uint32_t NetConfigGet(uint16_t* server, uint16_t* component, uint16_t* parameter, uint8_t** bufptr)
    {
        auto win32_impl_result = WIN32_IMPL_NetConfigGet(server, component, parameter, bufptr);
        return win32_impl_result;
    }
    inline uint32_t NetConfigGetAll(uint16_t* server, uint16_t* component, uint8_t** bufptr)
    {
        auto win32_impl_result = WIN32_IMPL_NetConfigGetAll(server, component, bufptr);
        return win32_impl_result;
    }
    inline uint32_t NetConfigSet(uint16_t* server, uint16_t* reserved1, uint16_t* component, uint32_t level, uint32_t reserved2, uint8_t* buf, uint32_t reserved3)
    {
        auto win32_impl_result = WIN32_IMPL_NetConfigSet(server, reserved1, component, level, reserved2, buf, reserved3);
        return win32_impl_result;
    }
    inline uint32_t NetErrorLogClear(uint16_t* UncServerName, uint16_t* BackupFile, uint8_t* Reserved)
    {
        auto win32_impl_result = WIN32_IMPL_NetErrorLogClear(UncServerName, BackupFile, Reserved);
        return win32_impl_result;
    }
    inline uint32_t NetErrorLogRead(uint16_t* UncServerName, uint16_t* Reserved1, Windows::Win32::NetManagement::HLOG* ErrorLogHandle, uint32_t Offset, uint32_t* Reserved2, uint32_t Reserved3, uint32_t OffsetFlag, uint8_t** BufPtr, uint32_t PrefMaxSize, uint32_t* BytesRead, uint32_t* TotalAvailable)
    {
        auto win32_impl_result = WIN32_IMPL_NetErrorLogRead(UncServerName, Reserved1, ErrorLogHandle, Offset, Reserved2, Reserved3, OffsetFlag, BufPtr, PrefMaxSize, BytesRead, TotalAvailable);
        return win32_impl_result;
    }
    inline uint32_t NetErrorLogWrite(uint8_t* Reserved1, uint32_t Code, uint16_t* Component, uint8_t* Buffer, uint32_t NumBytes, uint8_t* MsgBuf, uint32_t StrCount, uint8_t* Reserved2)
    {
        auto win32_impl_result = WIN32_IMPL_NetErrorLogWrite(Reserved1, Code, Component, Buffer, NumBytes, MsgBuf, StrCount, Reserved2);
        return win32_impl_result;
    }
    inline uint32_t NetMessageNameAdd(uint16_t* servername, uint16_t* msgname)
    {
        auto win32_impl_result = WIN32_IMPL_NetMessageNameAdd(servername, msgname);
        return win32_impl_result;
    }
    inline uint32_t NetMessageNameEnum(uint16_t* servername, uint32_t level, uint8_t** bufptr, uint32_t prefmaxlen, uint32_t* entriesread, uint32_t* totalentries, uint32_t* resume_handle)
    {
        auto win32_impl_result = WIN32_IMPL_NetMessageNameEnum(servername, level, bufptr, prefmaxlen, entriesread, totalentries, resume_handle);
        return win32_impl_result;
    }
    inline uint32_t NetMessageNameGetInfo(uint16_t* servername, uint16_t* msgname, uint32_t level, uint8_t** bufptr)
    {
        auto win32_impl_result = WIN32_IMPL_NetMessageNameGetInfo(servername, msgname, level, bufptr);
        return win32_impl_result;
    }
    inline uint32_t NetMessageNameDel(uint16_t* servername, uint16_t* msgname)
    {
        auto win32_impl_result = WIN32_IMPL_NetMessageNameDel(servername, msgname);
        return win32_impl_result;
    }
    inline uint32_t NetMessageBufferSend(uint16_t* servername, uint16_t* msgname, uint16_t* fromname, uint8_t* buf, uint32_t buflen)
    {
        auto win32_impl_result = WIN32_IMPL_NetMessageBufferSend(servername, msgname, fromname, buf, buflen);
        return win32_impl_result;
    }
    inline uint32_t NetRemoteTOD(uint16_t* UncServerName, uint8_t** BufferPtr)
    {
        auto win32_impl_result = WIN32_IMPL_NetRemoteTOD(UncServerName, BufferPtr);
        return win32_impl_result;
    }
    inline uint32_t NetRemoteComputerSupports(uint16_t* UncServerName, uint32_t OptionsWanted, uint32_t* OptionsSupported)
    {
        auto win32_impl_result = WIN32_IMPL_NetRemoteComputerSupports(UncServerName, OptionsWanted, OptionsSupported);
        return win32_impl_result;
    }
    inline uint32_t NetScheduleJobAdd(uint16_t* Servername, uint8_t* Buffer, uint32_t* JobId)
    {
        auto win32_impl_result = WIN32_IMPL_NetScheduleJobAdd(Servername, Buffer, JobId);
        return win32_impl_result;
    }
    inline uint32_t NetScheduleJobDel(uint16_t* Servername, uint32_t MinJobId, uint32_t MaxJobId)
    {
        auto win32_impl_result = WIN32_IMPL_NetScheduleJobDel(Servername, MinJobId, MaxJobId);
        return win32_impl_result;
    }
    inline uint32_t NetScheduleJobEnum(uint16_t* Servername, uint8_t** PointerToBuffer, uint32_t PrefferedMaximumLength, uint32_t* EntriesRead, uint32_t* TotalEntries, uint32_t* ResumeHandle)
    {
        auto win32_impl_result = WIN32_IMPL_NetScheduleJobEnum(Servername, PointerToBuffer, PrefferedMaximumLength, EntriesRead, TotalEntries, ResumeHandle);
        return win32_impl_result;
    }
    inline uint32_t NetScheduleJobGetInfo(uint16_t* Servername, uint32_t JobId, uint8_t** PointerToBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_NetScheduleJobGetInfo(Servername, JobId, PointerToBuffer);
        return win32_impl_result;
    }
    inline uint32_t NetServerEnum(uint16_t* servername, uint32_t level, uint8_t** bufptr, uint32_t prefmaxlen, uint32_t* entriesread, uint32_t* totalentries, uint32_t servertype, uint16_t* domain, uint32_t* resume_handle)
    {
        auto win32_impl_result = WIN32_IMPL_NetServerEnum(servername, level, bufptr, prefmaxlen, entriesread, totalentries, servertype, domain, resume_handle);
        return win32_impl_result;
    }
    inline uint32_t NetServerGetInfo(uint16_t* servername, uint32_t level, uint8_t** bufptr)
    {
        auto win32_impl_result = WIN32_IMPL_NetServerGetInfo(servername, level, bufptr);
        return win32_impl_result;
    }
    inline uint32_t NetServerSetInfo(uint16_t* servername, uint32_t level, uint8_t* buf, uint32_t* ParmError)
    {
        auto win32_impl_result = WIN32_IMPL_NetServerSetInfo(servername, level, buf, ParmError);
        return win32_impl_result;
    }
    inline uint32_t NetServerDiskEnum(uint16_t* servername, uint32_t level, uint8_t** bufptr, uint32_t prefmaxlen, uint32_t* entriesread, uint32_t* totalentries, uint32_t* resume_handle)
    {
        auto win32_impl_result = WIN32_IMPL_NetServerDiskEnum(servername, level, bufptr, prefmaxlen, entriesread, totalentries, resume_handle);
        return win32_impl_result;
    }
    inline uint32_t NetServerComputerNameAdd(uint16_t* ServerName, uint16_t* EmulatedDomainName, uint16_t* EmulatedServerName)
    {
        auto win32_impl_result = WIN32_IMPL_NetServerComputerNameAdd(ServerName, EmulatedDomainName, EmulatedServerName);
        return win32_impl_result;
    }
    inline uint32_t NetServerComputerNameDel(uint16_t* ServerName, uint16_t* EmulatedServerName)
    {
        auto win32_impl_result = WIN32_IMPL_NetServerComputerNameDel(ServerName, EmulatedServerName);
        return win32_impl_result;
    }
    inline uint32_t NetServerTransportAdd(uint16_t* servername, uint32_t level, uint8_t* bufptr)
    {
        auto win32_impl_result = WIN32_IMPL_NetServerTransportAdd(servername, level, bufptr);
        return win32_impl_result;
    }
    inline uint32_t NetServerTransportAddEx(uint16_t* servername, uint32_t level, uint8_t* bufptr)
    {
        auto win32_impl_result = WIN32_IMPL_NetServerTransportAddEx(servername, level, bufptr);
        return win32_impl_result;
    }
    inline uint32_t NetServerTransportDel(uint16_t* servername, uint32_t level, uint8_t* bufptr)
    {
        auto win32_impl_result = WIN32_IMPL_NetServerTransportDel(servername, level, bufptr);
        return win32_impl_result;
    }
    inline uint32_t NetServerTransportEnum(uint16_t* servername, uint32_t level, uint8_t** bufptr, uint32_t prefmaxlen, uint32_t* entriesread, uint32_t* totalentries, uint32_t* resume_handle)
    {
        auto win32_impl_result = WIN32_IMPL_NetServerTransportEnum(servername, level, bufptr, prefmaxlen, entriesread, totalentries, resume_handle);
        return win32_impl_result;
    }
    inline uint32_t NetServiceControl(uint16_t* servername, uint16_t* service, uint32_t opcode, uint32_t arg, uint8_t** bufptr)
    {
        auto win32_impl_result = WIN32_IMPL_NetServiceControl(servername, service, opcode, arg, bufptr);
        return win32_impl_result;
    }
    inline uint32_t NetServiceEnum(uint16_t* servername, uint32_t level, uint8_t** bufptr, uint32_t prefmaxlen, uint32_t* entriesread, uint32_t* totalentries, uint32_t* resume_handle)
    {
        auto win32_impl_result = WIN32_IMPL_NetServiceEnum(servername, level, bufptr, prefmaxlen, entriesread, totalentries, resume_handle);
        return win32_impl_result;
    }
    inline uint32_t NetServiceGetInfo(uint16_t* servername, uint16_t* service, uint32_t level, uint8_t** bufptr)
    {
        auto win32_impl_result = WIN32_IMPL_NetServiceGetInfo(servername, service, level, bufptr);
        return win32_impl_result;
    }
    inline uint32_t NetServiceInstall(uint16_t* servername, uint16_t* service, uint32_t argc, uint16_t** argv, uint8_t** bufptr)
    {
        auto win32_impl_result = WIN32_IMPL_NetServiceInstall(servername, service, argc, argv, bufptr);
        return win32_impl_result;
    }
    inline uint32_t NetUseAdd(int8_t* servername, uint32_t LevelFlags, uint8_t* buf, uint32_t* parm_err)
    {
        auto win32_impl_result = WIN32_IMPL_NetUseAdd(servername, LevelFlags, buf, parm_err);
        return win32_impl_result;
    }
    inline uint32_t NetUseDel(uint16_t* UncServerName, uint16_t* UseName, uint32_t ForceLevelFlags)
    {
        auto win32_impl_result = WIN32_IMPL_NetUseDel(UncServerName, UseName, ForceLevelFlags);
        return win32_impl_result;
    }
    inline uint32_t NetUseEnum(uint16_t* UncServerName, uint32_t LevelFlags, uint8_t** BufPtr, uint32_t PreferedMaximumSize, uint32_t* EntriesRead, uint32_t* TotalEntries, uint32_t* ResumeHandle)
    {
        auto win32_impl_result = WIN32_IMPL_NetUseEnum(UncServerName, LevelFlags, BufPtr, PreferedMaximumSize, EntriesRead, TotalEntries, ResumeHandle);
        return win32_impl_result;
    }
    inline uint32_t NetUseGetInfo(uint16_t* UncServerName, uint16_t* UseName, uint32_t LevelFlags, uint8_t** bufptr)
    {
        auto win32_impl_result = WIN32_IMPL_NetUseGetInfo(UncServerName, UseName, LevelFlags, bufptr);
        return win32_impl_result;
    }
    inline uint32_t NetWkstaGetInfo(uint16_t* servername, uint32_t level, uint8_t** bufptr)
    {
        auto win32_impl_result = WIN32_IMPL_NetWkstaGetInfo(servername, level, bufptr);
        return win32_impl_result;
    }
    inline uint32_t NetWkstaSetInfo(uint16_t* servername, uint32_t level, uint8_t* buffer, uint32_t* parm_err)
    {
        auto win32_impl_result = WIN32_IMPL_NetWkstaSetInfo(servername, level, buffer, parm_err);
        return win32_impl_result;
    }
    inline uint32_t NetWkstaUserGetInfo(uint16_t* reserved, uint32_t level, uint8_t** bufptr)
    {
        auto win32_impl_result = WIN32_IMPL_NetWkstaUserGetInfo(reserved, level, bufptr);
        return win32_impl_result;
    }
    inline uint32_t NetWkstaUserSetInfo(uint16_t* reserved, uint32_t level, uint8_t* buf, uint32_t* parm_err)
    {
        auto win32_impl_result = WIN32_IMPL_NetWkstaUserSetInfo(reserved, level, buf, parm_err);
        return win32_impl_result;
    }
    inline uint32_t NetWkstaUserEnum(uint16_t* servername, uint32_t level, uint8_t** bufptr, uint32_t prefmaxlen, uint32_t* entriesread, uint32_t* totalentries, uint32_t* resumehandle)
    {
        auto win32_impl_result = WIN32_IMPL_NetWkstaUserEnum(servername, level, bufptr, prefmaxlen, entriesread, totalentries, resumehandle);
        return win32_impl_result;
    }
    inline uint32_t NetWkstaTransportAdd(int8_t* servername, uint32_t level, uint8_t* buf, uint32_t* parm_err)
    {
        auto win32_impl_result = WIN32_IMPL_NetWkstaTransportAdd(servername, level, buf, parm_err);
        return win32_impl_result;
    }
    inline uint32_t NetWkstaTransportDel(uint16_t* servername, uint16_t* transportname, uint32_t ucond)
    {
        auto win32_impl_result = WIN32_IMPL_NetWkstaTransportDel(servername, transportname, ucond);
        return win32_impl_result;
    }
    inline uint32_t NetWkstaTransportEnum(int8_t* servername, uint32_t level, uint8_t** bufptr, uint32_t prefmaxlen, uint32_t* entriesread, uint32_t* totalentries, uint32_t* resume_handle)
    {
        auto win32_impl_result = WIN32_IMPL_NetWkstaTransportEnum(servername, level, bufptr, prefmaxlen, entriesread, totalentries, resume_handle);
        return win32_impl_result;
    }

#pragma endregion methods

}
#endif
