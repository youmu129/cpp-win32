// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_NetworkDiagnosticsFramework_H
#define WIN32_Windows_Win32_NetworkDiagnosticsFramework_H
#include "win32/base.h"
static_assert(win32::check_version(CPPWIN32_VERSION, "0.0.0.1"), "Mismatched C++/Win32 headers.");
#define CPPWIN32_VERSION "0.0.0.1"
#include "win32/impl/Windows.Win32.NetworkDiagnosticsFramework.2.h"
WIN32_EXPORT namespace win32::Windows::Win32::NetworkDiagnosticsFramework
{
#pragma region methods
    inline int32_t NdfCreateIncident(uint16_t* helperClassName, uint32_t celt, Windows::Win32::NetworkDiagnosticsFramework::HELPER_ATTRIBUTE* attributes, void** handle)
    {
        auto win32_impl_result = WIN32_IMPL_NdfCreateIncident(helperClassName, celt, attributes, handle);
        return win32_impl_result;
    }
    inline int32_t NdfCreateWinSockIncident(size_t sock, uint16_t* host, uint16_t port, uint16_t* appId, Windows::Win32::Security::SID* userId, void** handle)
    {
        auto win32_impl_result = WIN32_IMPL_NdfCreateWinSockIncident(sock, host, port, appId, userId, handle);
        return win32_impl_result;
    }
    inline int32_t NdfCreateWebIncident(uint16_t* url, void** handle)
    {
        auto win32_impl_result = WIN32_IMPL_NdfCreateWebIncident(url, handle);
        return win32_impl_result;
    }
    inline int32_t NdfCreateWebIncidentEx(uint16_t* url, Windows::Win32::SystemServices::BOOL useWinHTTP, uint16_t* moduleName, void** handle)
    {
        auto win32_impl_result = WIN32_IMPL_NdfCreateWebIncidentEx(url, useWinHTTP, moduleName, handle);
        return win32_impl_result;
    }
    inline int32_t NdfCreateSharingIncident(uint16_t* UNCPath, void** handle)
    {
        auto win32_impl_result = WIN32_IMPL_NdfCreateSharingIncident(UNCPath, handle);
        return win32_impl_result;
    }
    inline int32_t NdfCreateDNSIncident(uint16_t* hostname, uint16_t queryType, void** handle)
    {
        auto win32_impl_result = WIN32_IMPL_NdfCreateDNSIncident(hostname, queryType, handle);
        return win32_impl_result;
    }
    inline int32_t NdfCreateConnectivityIncident(void** handle)
    {
        auto win32_impl_result = WIN32_IMPL_NdfCreateConnectivityIncident(handle);
        return win32_impl_result;
    }
    inline int32_t NdfCreateNetConnectionIncident(void** handle, ::win32::guid id)
    {
        auto win32_impl_result = WIN32_IMPL_NdfCreateNetConnectionIncident(handle, id);
        return win32_impl_result;
    }
    inline int32_t NdfCreatePnrpIncident(uint16_t* cloudname, uint16_t* peername, Windows::Win32::SystemServices::BOOL diagnosePublish, uint16_t* appId, void** handle)
    {
        auto win32_impl_result = WIN32_IMPL_NdfCreatePnrpIncident(cloudname, peername, diagnosePublish, appId, handle);
        return win32_impl_result;
    }
    inline int32_t NdfCreateGroupingIncident(uint16_t* CloudName, uint16_t* GroupName, uint16_t* Identity, uint16_t* Invitation, Windows::Win32::NetworkDrivers::SOCKET_ADDRESS_LIST* Addresses, uint16_t* appId, void** handle)
    {
        auto win32_impl_result = WIN32_IMPL_NdfCreateGroupingIncident(CloudName, GroupName, Identity, Invitation, Addresses, appId, handle);
        return win32_impl_result;
    }
    inline int32_t NdfExecuteDiagnosis(void* handle, Windows::Win32::WindowsAndMessaging::HWND hwnd)
    {
        auto win32_impl_result = WIN32_IMPL_NdfExecuteDiagnosis(handle, hwnd);
        return win32_impl_result;
    }
    inline int32_t NdfCloseIncident(void* handle)
    {
        auto win32_impl_result = WIN32_IMPL_NdfCloseIncident(handle);
        return win32_impl_result;
    }
    inline int32_t NdfDiagnoseIncident(void* Handle, uint32_t* RootCauseCount, Windows::Win32::NetworkDiagnosticsFramework::RootCauseInfo** RootCauses, uint32_t dwWait, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_NdfDiagnoseIncident(Handle, RootCauseCount, RootCauses, dwWait, dwFlags);
        return win32_impl_result;
    }
    inline int32_t NdfRepairIncident(void* Handle, Windows::Win32::NetworkDiagnosticsFramework::RepairInfoEx* RepairEx, uint32_t dwWait)
    {
        auto win32_impl_result = WIN32_IMPL_NdfRepairIncident(Handle, RepairEx, dwWait);
        return win32_impl_result;
    }
    inline int32_t NdfCancelIncident(void* Handle)
    {
        auto win32_impl_result = WIN32_IMPL_NdfCancelIncident(Handle);
        return win32_impl_result;
    }
    inline int32_t NdfGetTraceFile(void* Handle, uint16_t** TraceFileLocation)
    {
        auto win32_impl_result = WIN32_IMPL_NdfGetTraceFile(Handle, TraceFileLocation);
        return win32_impl_result;
    }

#pragma endregion methods

}
#endif
