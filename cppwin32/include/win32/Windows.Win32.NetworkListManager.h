// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_NetworkListManager_H
#define WIN32_Windows_Win32_NetworkListManager_H
#include "win32/base.h"
static_assert(win32::check_version(CPPWIN32_VERSION, "0.0.0.1"), "Mismatched C++/Win32 headers.");
#define CPPWIN32_VERSION "0.0.0.1"
#include "win32/impl/Windows.Win32.NetworkListManager.2.h"
WIN32_EXPORT namespace win32::Windows::Win32::NetworkListManager
{
#pragma region methods
    inline int32_t OnDemandGetRoutingHint(uint16_t* destinationHostName, uint32_t* interfaceIndex)
    {
        auto win32_impl_result = WIN32_IMPL_OnDemandGetRoutingHint(destinationHostName, interfaceIndex);
        return win32_impl_result;
    }
    inline int32_t OnDemandRegisterNotification(Windows::Win32::NetworkListManager::ONDEMAND_NOTIFICATION_CALLBACK* callback, void* callbackContext, Windows::Win32::SystemServices::HANDLE* registrationHandle)
    {
        auto win32_impl_result = WIN32_IMPL_OnDemandRegisterNotification(callback, callbackContext, registrationHandle);
        return win32_impl_result;
    }
    inline int32_t OnDemandUnRegisterNotification(Windows::Win32::SystemServices::HANDLE registrationHandle)
    {
        auto win32_impl_result = WIN32_IMPL_OnDemandUnRegisterNotification(registrationHandle);
        return win32_impl_result;
    }
    inline int32_t GetInterfaceContextTableForHostName(uint16_t* HostName, uint16_t* ProxyName, uint32_t Flags, uint8_t* ConnectionProfileFilterRawData, uint32_t ConnectionProfileFilterRawDataSize, Windows::Win32::NetworkListManager::NET_INTERFACE_CONTEXT_TABLE** InterfaceContextTable)
    {
        auto win32_impl_result = WIN32_IMPL_GetInterfaceContextTableForHostName(HostName, ProxyName, Flags, ConnectionProfileFilterRawData, ConnectionProfileFilterRawDataSize, InterfaceContextTable);
        return win32_impl_result;
    }
    inline void FreeInterfaceContextTable(Windows::Win32::NetworkListManager::NET_INTERFACE_CONTEXT_TABLE* InterfaceContextTable)
    {
        WIN32_IMPL_FreeInterfaceContextTable(InterfaceContextTable);
    }

#pragma endregion methods

}
#endif
