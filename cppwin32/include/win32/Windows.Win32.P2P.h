// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_P2P_H
#define WIN32_Windows_Win32_P2P_H
#include "win32/base.h"
static_assert(win32::check_version(CPPWIN32_VERSION, "0.0.0.1"), "Mismatched C++/Win32 headers.");
#define CPPWIN32_VERSION "0.0.0.1"
#include "win32/impl/Windows.Win32.P2P.2.h"
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
#pragma region methods
    inline int32_t PeerGraphStartup(uint16_t wVersionRequested, Windows::Win32::P2P::PEER_VERSION_DATA* pVersionData)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGraphStartup(wVersionRequested, pVersionData);
        return win32_impl_result;
    }
    inline int32_t PeerGraphShutdown()
    {
        auto win32_impl_result = WIN32_IMPL_PeerGraphShutdown();
        return win32_impl_result;
    }
    inline void PeerGraphFreeData(void* pvData)
    {
        WIN32_IMPL_PeerGraphFreeData(pvData);
    }
    inline int32_t PeerGraphGetItemCount(void* hPeerEnum, uint32_t* pCount)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGraphGetItemCount(hPeerEnum, pCount);
        return win32_impl_result;
    }
    inline int32_t PeerGraphGetNextItem(void* hPeerEnum, uint32_t* pCount, void*** pppvItems)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGraphGetNextItem(hPeerEnum, pCount, pppvItems);
        return win32_impl_result;
    }
    inline int32_t PeerGraphEndEnumeration(void* hPeerEnum)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGraphEndEnumeration(hPeerEnum);
        return win32_impl_result;
    }
    inline int32_t PeerGraphCreate(Windows::Win32::P2P::PEER_GRAPH_PROPERTIES* pGraphProperties, uint16_t* pwzDatabaseName, Windows::Win32::P2P::PEER_SECURITY_INTERFACE* pSecurityInterface, void** phGraph)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGraphCreate(pGraphProperties, pwzDatabaseName, pSecurityInterface, phGraph);
        return win32_impl_result;
    }
    inline int32_t PeerGraphOpen(uint16_t* pwzGraphId, uint16_t* pwzPeerId, uint16_t* pwzDatabaseName, Windows::Win32::P2P::PEER_SECURITY_INTERFACE* pSecurityInterface, uint32_t cRecordTypeSyncPrecedence, ::win32::guid* pRecordTypeSyncPrecedence, void** phGraph)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGraphOpen(pwzGraphId, pwzPeerId, pwzDatabaseName, pSecurityInterface, cRecordTypeSyncPrecedence, pRecordTypeSyncPrecedence, phGraph);
        return win32_impl_result;
    }
    inline int32_t PeerGraphListen(void* hGraph, uint32_t dwScope, uint32_t dwScopeId, uint16_t wPort)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGraphListen(hGraph, dwScope, dwScopeId, wPort);
        return win32_impl_result;
    }
    inline int32_t PeerGraphConnect(void* hGraph, uint16_t* pwzPeerId, Windows::Win32::P2P::PEER_ADDRESS* pAddress, uint64_t* pullConnectionId)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGraphConnect(hGraph, pwzPeerId, pAddress, pullConnectionId);
        return win32_impl_result;
    }
    inline int32_t PeerGraphClose(void* hGraph)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGraphClose(hGraph);
        return win32_impl_result;
    }
    inline int32_t PeerGraphDelete(uint16_t* pwzGraphId, uint16_t* pwzPeerId, uint16_t* pwzDatabaseName)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGraphDelete(pwzGraphId, pwzPeerId, pwzDatabaseName);
        return win32_impl_result;
    }
    inline int32_t PeerGraphGetStatus(void* hGraph, uint32_t* pdwStatus)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGraphGetStatus(hGraph, pdwStatus);
        return win32_impl_result;
    }
    inline int32_t PeerGraphGetProperties(void* hGraph, Windows::Win32::P2P::PEER_GRAPH_PROPERTIES** ppGraphProperties)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGraphGetProperties(hGraph, ppGraphProperties);
        return win32_impl_result;
    }
    inline int32_t PeerGraphSetProperties(void* hGraph, Windows::Win32::P2P::PEER_GRAPH_PROPERTIES* pGraphProperties)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGraphSetProperties(hGraph, pGraphProperties);
        return win32_impl_result;
    }
    inline int32_t PeerGraphRegisterEvent(void* hGraph, Windows::Win32::SystemServices::HANDLE hEvent, uint32_t cEventRegistrations, Windows::Win32::P2P::PEER_GRAPH_EVENT_REGISTRATION* pEventRegistrations, void** phPeerEvent)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGraphRegisterEvent(hGraph, hEvent, cEventRegistrations, pEventRegistrations, phPeerEvent);
        return win32_impl_result;
    }
    inline int32_t PeerGraphUnregisterEvent(void* hPeerEvent)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGraphUnregisterEvent(hPeerEvent);
        return win32_impl_result;
    }
    inline int32_t PeerGraphGetEventData(void* hPeerEvent, Windows::Win32::P2P::PEER_GRAPH_EVENT_DATA** ppEventData)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGraphGetEventData(hPeerEvent, ppEventData);
        return win32_impl_result;
    }
    inline int32_t PeerGraphGetRecord(void* hGraph, ::win32::guid* pRecordId, Windows::Win32::P2P::PEER_RECORD** ppRecord)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGraphGetRecord(hGraph, pRecordId, ppRecord);
        return win32_impl_result;
    }
    inline int32_t PeerGraphAddRecord(void* hGraph, Windows::Win32::P2P::PEER_RECORD* pRecord, ::win32::guid* pRecordId)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGraphAddRecord(hGraph, pRecord, pRecordId);
        return win32_impl_result;
    }
    inline int32_t PeerGraphUpdateRecord(void* hGraph, Windows::Win32::P2P::PEER_RECORD* pRecord)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGraphUpdateRecord(hGraph, pRecord);
        return win32_impl_result;
    }
    inline int32_t PeerGraphDeleteRecord(void* hGraph, ::win32::guid* pRecordId, Windows::Win32::SystemServices::BOOL fLocal)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGraphDeleteRecord(hGraph, pRecordId, fLocal);
        return win32_impl_result;
    }
    inline int32_t PeerGraphEnumRecords(void* hGraph, ::win32::guid* pRecordType, uint16_t* pwzPeerId, void** phPeerEnum)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGraphEnumRecords(hGraph, pRecordType, pwzPeerId, phPeerEnum);
        return win32_impl_result;
    }
    inline int32_t PeerGraphSearchRecords(void* hGraph, uint16_t* pwzCriteria, void** phPeerEnum)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGraphSearchRecords(hGraph, pwzCriteria, phPeerEnum);
        return win32_impl_result;
    }
    inline int32_t PeerGraphExportDatabase(void* hGraph, uint16_t* pwzFilePath)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGraphExportDatabase(hGraph, pwzFilePath);
        return win32_impl_result;
    }
    inline int32_t PeerGraphImportDatabase(void* hGraph, uint16_t* pwzFilePath)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGraphImportDatabase(hGraph, pwzFilePath);
        return win32_impl_result;
    }
    inline int32_t PeerGraphValidateDeferredRecords(void* hGraph, uint32_t cRecordIds, ::win32::guid* pRecordIds)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGraphValidateDeferredRecords(hGraph, cRecordIds, pRecordIds);
        return win32_impl_result;
    }
    inline int32_t PeerGraphOpenDirectConnection(void* hGraph, uint16_t* pwzPeerId, Windows::Win32::P2P::PEER_ADDRESS* pAddress, uint64_t* pullConnectionId)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGraphOpenDirectConnection(hGraph, pwzPeerId, pAddress, pullConnectionId);
        return win32_impl_result;
    }
    inline int32_t PeerGraphSendData(void* hGraph, uint64_t ullConnectionId, ::win32::guid* pType, uint32_t cbData, void* pvData)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGraphSendData(hGraph, ullConnectionId, pType, cbData, pvData);
        return win32_impl_result;
    }
    inline int32_t PeerGraphCloseDirectConnection(void* hGraph, uint64_t ullConnectionId)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGraphCloseDirectConnection(hGraph, ullConnectionId);
        return win32_impl_result;
    }
    inline int32_t PeerGraphEnumConnections(void* hGraph, uint32_t dwFlags, void** phPeerEnum)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGraphEnumConnections(hGraph, dwFlags, phPeerEnum);
        return win32_impl_result;
    }
    inline int32_t PeerGraphEnumNodes(void* hGraph, uint16_t* pwzPeerId, void** phPeerEnum)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGraphEnumNodes(hGraph, pwzPeerId, phPeerEnum);
        return win32_impl_result;
    }
    inline int32_t PeerGraphSetPresence(void* hGraph, Windows::Win32::SystemServices::BOOL fPresent)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGraphSetPresence(hGraph, fPresent);
        return win32_impl_result;
    }
    inline int32_t PeerGraphGetNodeInfo(void* hGraph, uint64_t ullNodeId, Windows::Win32::P2P::PEER_NODE_INFO** ppNodeInfo)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGraphGetNodeInfo(hGraph, ullNodeId, ppNodeInfo);
        return win32_impl_result;
    }
    inline int32_t PeerGraphSetNodeAttributes(void* hGraph, uint16_t* pwzAttributes)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGraphSetNodeAttributes(hGraph, pwzAttributes);
        return win32_impl_result;
    }
    inline int32_t PeerGraphPeerTimeToUniversalTime(void* hGraph, Windows::Win32::WindowsProgramming::FILETIME* pftPeerTime, Windows::Win32::WindowsProgramming::FILETIME* pftUniversalTime)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGraphPeerTimeToUniversalTime(hGraph, pftPeerTime, pftUniversalTime);
        return win32_impl_result;
    }
    inline int32_t PeerGraphUniversalTimeToPeerTime(void* hGraph, Windows::Win32::WindowsProgramming::FILETIME* pftUniversalTime, Windows::Win32::WindowsProgramming::FILETIME* pftPeerTime)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGraphUniversalTimeToPeerTime(hGraph, pftUniversalTime, pftPeerTime);
        return win32_impl_result;
    }
    inline void PeerFreeData(void* pvData)
    {
        WIN32_IMPL_PeerFreeData(pvData);
    }
    inline int32_t PeerGetItemCount(void* hPeerEnum, uint32_t* pCount)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGetItemCount(hPeerEnum, pCount);
        return win32_impl_result;
    }
    inline int32_t PeerGetNextItem(void* hPeerEnum, uint32_t* pCount, void*** pppvItems)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGetNextItem(hPeerEnum, pCount, pppvItems);
        return win32_impl_result;
    }
    inline int32_t PeerEndEnumeration(void* hPeerEnum)
    {
        auto win32_impl_result = WIN32_IMPL_PeerEndEnumeration(hPeerEnum);
        return win32_impl_result;
    }
    inline int32_t PeerGroupStartup(uint16_t wVersionRequested, Windows::Win32::P2P::PEER_VERSION_DATA* pVersionData)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGroupStartup(wVersionRequested, pVersionData);
        return win32_impl_result;
    }
    inline int32_t PeerGroupShutdown()
    {
        auto win32_impl_result = WIN32_IMPL_PeerGroupShutdown();
        return win32_impl_result;
    }
    inline int32_t PeerGroupCreate(Windows::Win32::P2P::PEER_GROUP_PROPERTIES* pProperties, void** phGroup)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGroupCreate(pProperties, phGroup);
        return win32_impl_result;
    }
    inline int32_t PeerGroupOpen(uint16_t* pwzIdentity, uint16_t* pwzGroupPeerName, uint16_t* pwzCloud, void** phGroup)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGroupOpen(pwzIdentity, pwzGroupPeerName, pwzCloud, phGroup);
        return win32_impl_result;
    }
    inline int32_t PeerGroupJoin(uint16_t* pwzIdentity, uint16_t* pwzInvitation, uint16_t* pwzCloud, void** phGroup)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGroupJoin(pwzIdentity, pwzInvitation, pwzCloud, phGroup);
        return win32_impl_result;
    }
    inline int32_t PeerGroupPasswordJoin(uint16_t* pwzIdentity, uint16_t* pwzInvitation, uint16_t* pwzPassword, uint16_t* pwzCloud, void** phGroup)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGroupPasswordJoin(pwzIdentity, pwzInvitation, pwzPassword, pwzCloud, phGroup);
        return win32_impl_result;
    }
    inline int32_t PeerGroupConnect(void* hGroup)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGroupConnect(hGroup);
        return win32_impl_result;
    }
    inline int32_t PeerGroupConnectByAddress(void* hGroup, uint32_t cAddresses, Windows::Win32::P2P::PEER_ADDRESS* pAddresses)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGroupConnectByAddress(hGroup, cAddresses, pAddresses);
        return win32_impl_result;
    }
    inline int32_t PeerGroupClose(void* hGroup)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGroupClose(hGroup);
        return win32_impl_result;
    }
    inline int32_t PeerGroupDelete(uint16_t* pwzIdentity, uint16_t* pwzGroupPeerName)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGroupDelete(pwzIdentity, pwzGroupPeerName);
        return win32_impl_result;
    }
    inline int32_t PeerGroupCreateInvitation(void* hGroup, uint16_t* pwzIdentityInfo, Windows::Win32::WindowsProgramming::FILETIME* pftExpiration, uint32_t cRoles, ::win32::guid* pRoles, uint16_t** ppwzInvitation)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGroupCreateInvitation(hGroup, pwzIdentityInfo, pftExpiration, cRoles, pRoles, ppwzInvitation);
        return win32_impl_result;
    }
    inline int32_t PeerGroupCreatePasswordInvitation(void* hGroup, uint16_t** ppwzInvitation)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGroupCreatePasswordInvitation(hGroup, ppwzInvitation);
        return win32_impl_result;
    }
    inline int32_t PeerGroupParseInvitation(uint16_t* pwzInvitation, Windows::Win32::P2P::PEER_INVITATION_INFO** ppInvitationInfo)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGroupParseInvitation(pwzInvitation, ppInvitationInfo);
        return win32_impl_result;
    }
    inline int32_t PeerGroupGetStatus(void* hGroup, uint32_t* pdwStatus)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGroupGetStatus(hGroup, pdwStatus);
        return win32_impl_result;
    }
    inline int32_t PeerGroupGetProperties(void* hGroup, Windows::Win32::P2P::PEER_GROUP_PROPERTIES** ppProperties)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGroupGetProperties(hGroup, ppProperties);
        return win32_impl_result;
    }
    inline int32_t PeerGroupSetProperties(void* hGroup, Windows::Win32::P2P::PEER_GROUP_PROPERTIES* pProperties)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGroupSetProperties(hGroup, pProperties);
        return win32_impl_result;
    }
    inline int32_t PeerGroupEnumMembers(void* hGroup, uint32_t dwFlags, uint16_t* pwzIdentity, void** phPeerEnum)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGroupEnumMembers(hGroup, dwFlags, pwzIdentity, phPeerEnum);
        return win32_impl_result;
    }
    inline int32_t PeerGroupOpenDirectConnection(void* hGroup, uint16_t* pwzIdentity, Windows::Win32::P2P::PEER_ADDRESS* pAddress, uint64_t* pullConnectionId)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGroupOpenDirectConnection(hGroup, pwzIdentity, pAddress, pullConnectionId);
        return win32_impl_result;
    }
    inline int32_t PeerGroupCloseDirectConnection(void* hGroup, uint64_t ullConnectionId)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGroupCloseDirectConnection(hGroup, ullConnectionId);
        return win32_impl_result;
    }
    inline int32_t PeerGroupEnumConnections(void* hGroup, uint32_t dwFlags, void** phPeerEnum)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGroupEnumConnections(hGroup, dwFlags, phPeerEnum);
        return win32_impl_result;
    }
    inline int32_t PeerGroupSendData(void* hGroup, uint64_t ullConnectionId, ::win32::guid* pType, uint32_t cbData, void* pvData)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGroupSendData(hGroup, ullConnectionId, pType, cbData, pvData);
        return win32_impl_result;
    }
    inline int32_t PeerGroupRegisterEvent(void* hGroup, Windows::Win32::SystemServices::HANDLE hEvent, uint32_t cEventRegistration, Windows::Win32::P2P::PEER_GROUP_EVENT_REGISTRATION* pEventRegistrations, void** phPeerEvent)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGroupRegisterEvent(hGroup, hEvent, cEventRegistration, pEventRegistrations, phPeerEvent);
        return win32_impl_result;
    }
    inline int32_t PeerGroupUnregisterEvent(void* hPeerEvent)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGroupUnregisterEvent(hPeerEvent);
        return win32_impl_result;
    }
    inline int32_t PeerGroupGetEventData(void* hPeerEvent, Windows::Win32::P2P::PEER_GROUP_EVENT_DATA** ppEventData)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGroupGetEventData(hPeerEvent, ppEventData);
        return win32_impl_result;
    }
    inline int32_t PeerGroupGetRecord(void* hGroup, ::win32::guid* pRecordId, Windows::Win32::P2P::PEER_RECORD** ppRecord)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGroupGetRecord(hGroup, pRecordId, ppRecord);
        return win32_impl_result;
    }
    inline int32_t PeerGroupAddRecord(void* hGroup, Windows::Win32::P2P::PEER_RECORD* pRecord, ::win32::guid* pRecordId)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGroupAddRecord(hGroup, pRecord, pRecordId);
        return win32_impl_result;
    }
    inline int32_t PeerGroupUpdateRecord(void* hGroup, Windows::Win32::P2P::PEER_RECORD* pRecord)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGroupUpdateRecord(hGroup, pRecord);
        return win32_impl_result;
    }
    inline int32_t PeerGroupDeleteRecord(void* hGroup, ::win32::guid* pRecordId)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGroupDeleteRecord(hGroup, pRecordId);
        return win32_impl_result;
    }
    inline int32_t PeerGroupEnumRecords(void* hGroup, ::win32::guid* pRecordType, void** phPeerEnum)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGroupEnumRecords(hGroup, pRecordType, phPeerEnum);
        return win32_impl_result;
    }
    inline int32_t PeerGroupSearchRecords(void* hGroup, uint16_t* pwzCriteria, void** phPeerEnum)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGroupSearchRecords(hGroup, pwzCriteria, phPeerEnum);
        return win32_impl_result;
    }
    inline int32_t PeerGroupExportDatabase(void* hGroup, uint16_t* pwzFilePath)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGroupExportDatabase(hGroup, pwzFilePath);
        return win32_impl_result;
    }
    inline int32_t PeerGroupImportDatabase(void* hGroup, uint16_t* pwzFilePath)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGroupImportDatabase(hGroup, pwzFilePath);
        return win32_impl_result;
    }
    inline int32_t PeerGroupIssueCredentials(void* hGroup, uint16_t* pwzSubjectIdentity, Windows::Win32::P2P::PEER_CREDENTIAL_INFO* pCredentialInfo, uint32_t dwFlags, uint16_t** ppwzInvitation)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGroupIssueCredentials(hGroup, pwzSubjectIdentity, pCredentialInfo, dwFlags, ppwzInvitation);
        return win32_impl_result;
    }
    inline int32_t PeerGroupExportConfig(void* hGroup, uint16_t* pwzPassword, uint16_t** ppwzXML)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGroupExportConfig(hGroup, pwzPassword, ppwzXML);
        return win32_impl_result;
    }
    inline int32_t PeerGroupImportConfig(uint16_t* pwzXML, uint16_t* pwzPassword, Windows::Win32::SystemServices::BOOL fOverwrite, uint16_t** ppwzIdentity, uint16_t** ppwzGroup)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGroupImportConfig(pwzXML, pwzPassword, fOverwrite, ppwzIdentity, ppwzGroup);
        return win32_impl_result;
    }
    inline int32_t PeerGroupPeerTimeToUniversalTime(void* hGroup, Windows::Win32::WindowsProgramming::FILETIME* pftPeerTime, Windows::Win32::WindowsProgramming::FILETIME* pftUniversalTime)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGroupPeerTimeToUniversalTime(hGroup, pftPeerTime, pftUniversalTime);
        return win32_impl_result;
    }
    inline int32_t PeerGroupUniversalTimeToPeerTime(void* hGroup, Windows::Win32::WindowsProgramming::FILETIME* pftUniversalTime, Windows::Win32::WindowsProgramming::FILETIME* pftPeerTime)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGroupUniversalTimeToPeerTime(hGroup, pftUniversalTime, pftPeerTime);
        return win32_impl_result;
    }
    inline int32_t PeerGroupResumePasswordAuthentication(void* hGroup, void* hPeerEventHandle)
    {
        auto win32_impl_result = WIN32_IMPL_PeerGroupResumePasswordAuthentication(hGroup, hPeerEventHandle);
        return win32_impl_result;
    }
    inline int32_t PeerIdentityCreate(uint16_t* pwzClassifier, uint16_t* pwzFriendlyName, size_t hCryptProv, uint16_t** ppwzIdentity)
    {
        auto win32_impl_result = WIN32_IMPL_PeerIdentityCreate(pwzClassifier, pwzFriendlyName, hCryptProv, ppwzIdentity);
        return win32_impl_result;
    }
    inline int32_t PeerIdentityGetFriendlyName(uint16_t* pwzIdentity, uint16_t** ppwzFriendlyName)
    {
        auto win32_impl_result = WIN32_IMPL_PeerIdentityGetFriendlyName(pwzIdentity, ppwzFriendlyName);
        return win32_impl_result;
    }
    inline int32_t PeerIdentitySetFriendlyName(uint16_t* pwzIdentity, uint16_t* pwzFriendlyName)
    {
        auto win32_impl_result = WIN32_IMPL_PeerIdentitySetFriendlyName(pwzIdentity, pwzFriendlyName);
        return win32_impl_result;
    }
    inline int32_t PeerIdentityGetCryptKey(uint16_t* pwzIdentity, size_t* phCryptProv)
    {
        auto win32_impl_result = WIN32_IMPL_PeerIdentityGetCryptKey(pwzIdentity, phCryptProv);
        return win32_impl_result;
    }
    inline int32_t PeerIdentityDelete(uint16_t* pwzIdentity)
    {
        auto win32_impl_result = WIN32_IMPL_PeerIdentityDelete(pwzIdentity);
        return win32_impl_result;
    }
    inline int32_t PeerEnumIdentities(void** phPeerEnum)
    {
        auto win32_impl_result = WIN32_IMPL_PeerEnumIdentities(phPeerEnum);
        return win32_impl_result;
    }
    inline int32_t PeerEnumGroups(uint16_t* pwzIdentity, void** phPeerEnum)
    {
        auto win32_impl_result = WIN32_IMPL_PeerEnumGroups(pwzIdentity, phPeerEnum);
        return win32_impl_result;
    }
    inline int32_t PeerCreatePeerName(uint16_t* pwzIdentity, uint16_t* pwzClassifier, uint16_t** ppwzPeerName)
    {
        auto win32_impl_result = WIN32_IMPL_PeerCreatePeerName(pwzIdentity, pwzClassifier, ppwzPeerName);
        return win32_impl_result;
    }
    inline int32_t PeerIdentityGetXML(uint16_t* pwzIdentity, uint16_t** ppwzIdentityXML)
    {
        auto win32_impl_result = WIN32_IMPL_PeerIdentityGetXML(pwzIdentity, ppwzIdentityXML);
        return win32_impl_result;
    }
    inline int32_t PeerIdentityExport(uint16_t* pwzIdentity, uint16_t* pwzPassword, uint16_t** ppwzExportXML)
    {
        auto win32_impl_result = WIN32_IMPL_PeerIdentityExport(pwzIdentity, pwzPassword, ppwzExportXML);
        return win32_impl_result;
    }
    inline int32_t PeerIdentityImport(uint16_t* pwzImportXML, uint16_t* pwzPassword, uint16_t** ppwzIdentity)
    {
        auto win32_impl_result = WIN32_IMPL_PeerIdentityImport(pwzImportXML, pwzPassword, ppwzIdentity);
        return win32_impl_result;
    }
    inline int32_t PeerIdentityGetDefault(uint16_t** ppwzPeerName)
    {
        auto win32_impl_result = WIN32_IMPL_PeerIdentityGetDefault(ppwzPeerName);
        return win32_impl_result;
    }
    inline int32_t PeerCollabStartup(uint16_t wVersionRequested)
    {
        auto win32_impl_result = WIN32_IMPL_PeerCollabStartup(wVersionRequested);
        return win32_impl_result;
    }
    inline int32_t PeerCollabShutdown()
    {
        auto win32_impl_result = WIN32_IMPL_PeerCollabShutdown();
        return win32_impl_result;
    }
    inline int32_t PeerCollabSignin(Windows::Win32::WindowsAndMessaging::HWND hwndParent, uint32_t dwSigninOptions)
    {
        auto win32_impl_result = WIN32_IMPL_PeerCollabSignin(hwndParent, dwSigninOptions);
        return win32_impl_result;
    }
    inline int32_t PeerCollabSignout(uint32_t dwSigninOptions)
    {
        auto win32_impl_result = WIN32_IMPL_PeerCollabSignout(dwSigninOptions);
        return win32_impl_result;
    }
    inline int32_t PeerCollabGetSigninOptions(uint32_t* pdwSigninOptions)
    {
        auto win32_impl_result = WIN32_IMPL_PeerCollabGetSigninOptions(pdwSigninOptions);
        return win32_impl_result;
    }
    inline int32_t PeerCollabAsyncInviteContact(Windows::Win32::P2P::PEER_CONTACT* pcContact, Windows::Win32::P2P::PEER_ENDPOINT* pcEndpoint, Windows::Win32::P2P::PEER_INVITATION* pcInvitation, Windows::Win32::SystemServices::HANDLE hEvent, Windows::Win32::SystemServices::HANDLE* phInvitation)
    {
        auto win32_impl_result = WIN32_IMPL_PeerCollabAsyncInviteContact(pcContact, pcEndpoint, pcInvitation, hEvent, phInvitation);
        return win32_impl_result;
    }
    inline int32_t PeerCollabGetInvitationResponse(Windows::Win32::SystemServices::HANDLE hInvitation, Windows::Win32::P2P::PEER_INVITATION_RESPONSE** ppInvitationResponse)
    {
        auto win32_impl_result = WIN32_IMPL_PeerCollabGetInvitationResponse(hInvitation, ppInvitationResponse);
        return win32_impl_result;
    }
    inline int32_t PeerCollabCancelInvitation(Windows::Win32::SystemServices::HANDLE hInvitation)
    {
        auto win32_impl_result = WIN32_IMPL_PeerCollabCancelInvitation(hInvitation);
        return win32_impl_result;
    }
    inline int32_t PeerCollabCloseHandle(Windows::Win32::SystemServices::HANDLE hInvitation)
    {
        auto win32_impl_result = WIN32_IMPL_PeerCollabCloseHandle(hInvitation);
        return win32_impl_result;
    }
    inline int32_t PeerCollabInviteContact(Windows::Win32::P2P::PEER_CONTACT* pcContact, Windows::Win32::P2P::PEER_ENDPOINT* pcEndpoint, Windows::Win32::P2P::PEER_INVITATION* pcInvitation, Windows::Win32::P2P::PEER_INVITATION_RESPONSE** ppResponse)
    {
        auto win32_impl_result = WIN32_IMPL_PeerCollabInviteContact(pcContact, pcEndpoint, pcInvitation, ppResponse);
        return win32_impl_result;
    }
    inline int32_t PeerCollabAsyncInviteEndpoint(Windows::Win32::P2P::PEER_ENDPOINT* pcEndpoint, Windows::Win32::P2P::PEER_INVITATION* pcInvitation, Windows::Win32::SystemServices::HANDLE hEvent, Windows::Win32::SystemServices::HANDLE* phInvitation)
    {
        auto win32_impl_result = WIN32_IMPL_PeerCollabAsyncInviteEndpoint(pcEndpoint, pcInvitation, hEvent, phInvitation);
        return win32_impl_result;
    }
    inline int32_t PeerCollabInviteEndpoint(Windows::Win32::P2P::PEER_ENDPOINT* pcEndpoint, Windows::Win32::P2P::PEER_INVITATION* pcInvitation, Windows::Win32::P2P::PEER_INVITATION_RESPONSE** ppResponse)
    {
        auto win32_impl_result = WIN32_IMPL_PeerCollabInviteEndpoint(pcEndpoint, pcInvitation, ppResponse);
        return win32_impl_result;
    }
    inline int32_t PeerCollabGetAppLaunchInfo(Windows::Win32::P2P::PEER_APP_LAUNCH_INFO** ppLaunchInfo)
    {
        auto win32_impl_result = WIN32_IMPL_PeerCollabGetAppLaunchInfo(ppLaunchInfo);
        return win32_impl_result;
    }
    inline int32_t PeerCollabRegisterApplication(Windows::Win32::P2P::PEER_APPLICATION_REGISTRATION_INFO* pcApplication, Windows::Win32::P2P::PEER_APPLICATION_REGISTRATION_TYPE registrationType)
    {
        auto win32_impl_result = WIN32_IMPL_PeerCollabRegisterApplication(pcApplication, registrationType);
        return win32_impl_result;
    }
    inline int32_t PeerCollabUnregisterApplication(::win32::guid* pApplicationId, Windows::Win32::P2P::PEER_APPLICATION_REGISTRATION_TYPE registrationType)
    {
        auto win32_impl_result = WIN32_IMPL_PeerCollabUnregisterApplication(pApplicationId, registrationType);
        return win32_impl_result;
    }
    inline int32_t PeerCollabGetApplicationRegistrationInfo(::win32::guid* pApplicationId, Windows::Win32::P2P::PEER_APPLICATION_REGISTRATION_TYPE registrationType, Windows::Win32::P2P::PEER_APPLICATION_REGISTRATION_INFO** ppApplication)
    {
        auto win32_impl_result = WIN32_IMPL_PeerCollabGetApplicationRegistrationInfo(pApplicationId, registrationType, ppApplication);
        return win32_impl_result;
    }
    inline int32_t PeerCollabEnumApplicationRegistrationInfo(Windows::Win32::P2P::PEER_APPLICATION_REGISTRATION_TYPE registrationType, void** phPeerEnum)
    {
        auto win32_impl_result = WIN32_IMPL_PeerCollabEnumApplicationRegistrationInfo(registrationType, phPeerEnum);
        return win32_impl_result;
    }
    inline int32_t PeerCollabGetPresenceInfo(Windows::Win32::P2P::PEER_ENDPOINT* pcEndpoint, Windows::Win32::P2P::PEER_PRESENCE_INFO** ppPresenceInfo)
    {
        auto win32_impl_result = WIN32_IMPL_PeerCollabGetPresenceInfo(pcEndpoint, ppPresenceInfo);
        return win32_impl_result;
    }
    inline int32_t PeerCollabEnumApplications(Windows::Win32::P2P::PEER_ENDPOINT* pcEndpoint, ::win32::guid* pApplicationId, void** phPeerEnum)
    {
        auto win32_impl_result = WIN32_IMPL_PeerCollabEnumApplications(pcEndpoint, pApplicationId, phPeerEnum);
        return win32_impl_result;
    }
    inline int32_t PeerCollabEnumObjects(Windows::Win32::P2P::PEER_ENDPOINT* pcEndpoint, ::win32::guid* pObjectId, void** phPeerEnum)
    {
        auto win32_impl_result = WIN32_IMPL_PeerCollabEnumObjects(pcEndpoint, pObjectId, phPeerEnum);
        return win32_impl_result;
    }
    inline int32_t PeerCollabEnumEndpoints(Windows::Win32::P2P::PEER_CONTACT* pcContact, void** phPeerEnum)
    {
        auto win32_impl_result = WIN32_IMPL_PeerCollabEnumEndpoints(pcContact, phPeerEnum);
        return win32_impl_result;
    }
    inline int32_t PeerCollabRefreshEndpointData(Windows::Win32::P2P::PEER_ENDPOINT* pcEndpoint)
    {
        auto win32_impl_result = WIN32_IMPL_PeerCollabRefreshEndpointData(pcEndpoint);
        return win32_impl_result;
    }
    inline int32_t PeerCollabDeleteEndpointData(Windows::Win32::P2P::PEER_ENDPOINT* pcEndpoint)
    {
        auto win32_impl_result = WIN32_IMPL_PeerCollabDeleteEndpointData(pcEndpoint);
        return win32_impl_result;
    }
    inline int32_t PeerCollabQueryContactData(Windows::Win32::P2P::PEER_ENDPOINT* pcEndpoint, uint16_t** ppwzContactData)
    {
        auto win32_impl_result = WIN32_IMPL_PeerCollabQueryContactData(pcEndpoint, ppwzContactData);
        return win32_impl_result;
    }
    inline int32_t PeerCollabSubscribeEndpointData(Windows::Win32::P2P::PEER_ENDPOINT* pcEndpoint)
    {
        auto win32_impl_result = WIN32_IMPL_PeerCollabSubscribeEndpointData(pcEndpoint);
        return win32_impl_result;
    }
    inline int32_t PeerCollabUnsubscribeEndpointData(Windows::Win32::P2P::PEER_ENDPOINT* pcEndpoint)
    {
        auto win32_impl_result = WIN32_IMPL_PeerCollabUnsubscribeEndpointData(pcEndpoint);
        return win32_impl_result;
    }
    inline int32_t PeerCollabSetPresenceInfo(Windows::Win32::P2P::PEER_PRESENCE_INFO* pcPresenceInfo)
    {
        auto win32_impl_result = WIN32_IMPL_PeerCollabSetPresenceInfo(pcPresenceInfo);
        return win32_impl_result;
    }
    inline int32_t PeerCollabGetEndpointName(uint16_t** ppwzEndpointName)
    {
        auto win32_impl_result = WIN32_IMPL_PeerCollabGetEndpointName(ppwzEndpointName);
        return win32_impl_result;
    }
    inline int32_t PeerCollabSetEndpointName(uint16_t* pwzEndpointName)
    {
        auto win32_impl_result = WIN32_IMPL_PeerCollabSetEndpointName(pwzEndpointName);
        return win32_impl_result;
    }
    inline int32_t PeerCollabSetObject(Windows::Win32::P2P::PEER_OBJECT* pcObject)
    {
        auto win32_impl_result = WIN32_IMPL_PeerCollabSetObject(pcObject);
        return win32_impl_result;
    }
    inline int32_t PeerCollabDeleteObject(::win32::guid* pObjectId)
    {
        auto win32_impl_result = WIN32_IMPL_PeerCollabDeleteObject(pObjectId);
        return win32_impl_result;
    }
    inline int32_t PeerCollabRegisterEvent(Windows::Win32::SystemServices::HANDLE hEvent, uint32_t cEventRegistration, Windows::Win32::P2P::PEER_COLLAB_EVENT_REGISTRATION* pEventRegistrations, void** phPeerEvent)
    {
        auto win32_impl_result = WIN32_IMPL_PeerCollabRegisterEvent(hEvent, cEventRegistration, pEventRegistrations, phPeerEvent);
        return win32_impl_result;
    }
    inline int32_t PeerCollabGetEventData(void* hPeerEvent, Windows::Win32::P2P::PEER_COLLAB_EVENT_DATA** ppEventData)
    {
        auto win32_impl_result = WIN32_IMPL_PeerCollabGetEventData(hPeerEvent, ppEventData);
        return win32_impl_result;
    }
    inline int32_t PeerCollabUnregisterEvent(void* hPeerEvent)
    {
        auto win32_impl_result = WIN32_IMPL_PeerCollabUnregisterEvent(hPeerEvent);
        return win32_impl_result;
    }
    inline int32_t PeerCollabEnumPeopleNearMe(void** phPeerEnum)
    {
        auto win32_impl_result = WIN32_IMPL_PeerCollabEnumPeopleNearMe(phPeerEnum);
        return win32_impl_result;
    }
    inline int32_t PeerCollabAddContact(uint16_t* pwzContactData, Windows::Win32::P2P::PEER_CONTACT** ppContact)
    {
        auto win32_impl_result = WIN32_IMPL_PeerCollabAddContact(pwzContactData, ppContact);
        return win32_impl_result;
    }
    inline int32_t PeerCollabDeleteContact(uint16_t* pwzPeerName)
    {
        auto win32_impl_result = WIN32_IMPL_PeerCollabDeleteContact(pwzPeerName);
        return win32_impl_result;
    }
    inline int32_t PeerCollabGetContact(uint16_t* pwzPeerName, Windows::Win32::P2P::PEER_CONTACT** ppContact)
    {
        auto win32_impl_result = WIN32_IMPL_PeerCollabGetContact(pwzPeerName, ppContact);
        return win32_impl_result;
    }
    inline int32_t PeerCollabUpdateContact(Windows::Win32::P2P::PEER_CONTACT* pContact)
    {
        auto win32_impl_result = WIN32_IMPL_PeerCollabUpdateContact(pContact);
        return win32_impl_result;
    }
    inline int32_t PeerCollabEnumContacts(void** phPeerEnum)
    {
        auto win32_impl_result = WIN32_IMPL_PeerCollabEnumContacts(phPeerEnum);
        return win32_impl_result;
    }
    inline int32_t PeerCollabExportContact(uint16_t* pwzPeerName, uint16_t** ppwzContactData)
    {
        auto win32_impl_result = WIN32_IMPL_PeerCollabExportContact(pwzPeerName, ppwzContactData);
        return win32_impl_result;
    }
    inline int32_t PeerCollabParseContact(uint16_t* pwzContactData, Windows::Win32::P2P::PEER_CONTACT** ppContact)
    {
        auto win32_impl_result = WIN32_IMPL_PeerCollabParseContact(pwzContactData, ppContact);
        return win32_impl_result;
    }
    inline int32_t PeerNameToPeerHostName(uint16_t* pwzPeerName, uint16_t** ppwzHostName)
    {
        auto win32_impl_result = WIN32_IMPL_PeerNameToPeerHostName(pwzPeerName, ppwzHostName);
        return win32_impl_result;
    }
    inline int32_t PeerHostNameToPeerName(uint16_t* pwzHostName, uint16_t** ppwzPeerName)
    {
        auto win32_impl_result = WIN32_IMPL_PeerHostNameToPeerName(pwzHostName, ppwzPeerName);
        return win32_impl_result;
    }
    inline int32_t PeerPnrpStartup(uint16_t wVersionRequested)
    {
        auto win32_impl_result = WIN32_IMPL_PeerPnrpStartup(wVersionRequested);
        return win32_impl_result;
    }
    inline int32_t PeerPnrpShutdown()
    {
        auto win32_impl_result = WIN32_IMPL_PeerPnrpShutdown();
        return win32_impl_result;
    }
    inline int32_t PeerPnrpRegister(uint16_t* pcwzPeerName, Windows::Win32::P2P::PEER_PNRP_REGISTRATION_INFO* pRegistrationInfo, void** phRegistration)
    {
        auto win32_impl_result = WIN32_IMPL_PeerPnrpRegister(pcwzPeerName, pRegistrationInfo, phRegistration);
        return win32_impl_result;
    }
    inline int32_t PeerPnrpUpdateRegistration(void* hRegistration, Windows::Win32::P2P::PEER_PNRP_REGISTRATION_INFO* pRegistrationInfo)
    {
        auto win32_impl_result = WIN32_IMPL_PeerPnrpUpdateRegistration(hRegistration, pRegistrationInfo);
        return win32_impl_result;
    }
    inline int32_t PeerPnrpUnregister(void* hRegistration)
    {
        auto win32_impl_result = WIN32_IMPL_PeerPnrpUnregister(hRegistration);
        return win32_impl_result;
    }
    inline int32_t PeerPnrpResolve(uint16_t* pcwzPeerName, uint16_t* pcwzCloudName, uint32_t* pcEndpoints, Windows::Win32::P2P::PEER_PNRP_ENDPOINT_INFO** ppEndpoints)
    {
        auto win32_impl_result = WIN32_IMPL_PeerPnrpResolve(pcwzPeerName, pcwzCloudName, pcEndpoints, ppEndpoints);
        return win32_impl_result;
    }
    inline int32_t PeerPnrpStartResolve(uint16_t* pcwzPeerName, uint16_t* pcwzCloudName, uint32_t cMaxEndpoints, Windows::Win32::SystemServices::HANDLE hEvent, void** phResolve)
    {
        auto win32_impl_result = WIN32_IMPL_PeerPnrpStartResolve(pcwzPeerName, pcwzCloudName, cMaxEndpoints, hEvent, phResolve);
        return win32_impl_result;
    }
    inline int32_t PeerPnrpGetCloudInfo(uint32_t* pcNumClouds, Windows::Win32::P2P::PEER_PNRP_CLOUD_INFO** ppCloudInfo)
    {
        auto win32_impl_result = WIN32_IMPL_PeerPnrpGetCloudInfo(pcNumClouds, ppCloudInfo);
        return win32_impl_result;
    }
    inline int32_t PeerPnrpGetEndpoint(void* hResolve, Windows::Win32::P2P::PEER_PNRP_ENDPOINT_INFO** ppEndpoint)
    {
        auto win32_impl_result = WIN32_IMPL_PeerPnrpGetEndpoint(hResolve, ppEndpoint);
        return win32_impl_result;
    }
    inline int32_t PeerPnrpEndResolve(void* hResolve)
    {
        auto win32_impl_result = WIN32_IMPL_PeerPnrpEndResolve(hResolve);
        return win32_impl_result;
    }
    inline int32_t DrtCreatePnrpBootstrapResolver(Windows::Win32::SystemServices::BOOL fPublish, uint16_t* pwzPeerName, uint16_t* pwzCloudName, uint16_t* pwzPublishingIdentity, Windows::Win32::P2P::DRT_BOOTSTRAP_PROVIDER** ppResolver)
    {
        auto win32_impl_result = WIN32_IMPL_DrtCreatePnrpBootstrapResolver(fPublish, pwzPeerName, pwzCloudName, pwzPublishingIdentity, ppResolver);
        return win32_impl_result;
    }
    inline void DrtDeletePnrpBootstrapResolver(Windows::Win32::P2P::DRT_BOOTSTRAP_PROVIDER* pResolver)
    {
        WIN32_IMPL_DrtDeletePnrpBootstrapResolver(pResolver);
    }
    inline int32_t DrtCreateDnsBootstrapResolver(uint16_t port, uint16_t* pwszAddress, Windows::Win32::P2P::DRT_BOOTSTRAP_PROVIDER** ppModule)
    {
        auto win32_impl_result = WIN32_IMPL_DrtCreateDnsBootstrapResolver(port, pwszAddress, ppModule);
        return win32_impl_result;
    }
    inline void DrtDeleteDnsBootstrapResolver(Windows::Win32::P2P::DRT_BOOTSTRAP_PROVIDER* pResolver)
    {
        WIN32_IMPL_DrtDeleteDnsBootstrapResolver(pResolver);
    }
    inline int32_t DrtCreateIpv6UdpTransport(Windows::Win32::P2P::DRT_SCOPE scope, uint32_t dwScopeId, uint32_t dwLocalityThreshold, uint16_t* pwPort, void** phTransport)
    {
        auto win32_impl_result = WIN32_IMPL_DrtCreateIpv6UdpTransport(scope, dwScopeId, dwLocalityThreshold, pwPort, phTransport);
        return win32_impl_result;
    }
    inline int32_t DrtDeleteIpv6UdpTransport(void* hTransport)
    {
        auto win32_impl_result = WIN32_IMPL_DrtDeleteIpv6UdpTransport(hTransport);
        return win32_impl_result;
    }
    inline int32_t DrtCreateDerivedKeySecurityProvider(Windows::Win32::Security::CERT_CONTEXT* pRootCert, Windows::Win32::Security::CERT_CONTEXT* pLocalCert, Windows::Win32::P2P::DRT_SECURITY_PROVIDER** ppSecurityProvider)
    {
        auto win32_impl_result = WIN32_IMPL_DrtCreateDerivedKeySecurityProvider(pRootCert, pLocalCert, ppSecurityProvider);
        return win32_impl_result;
    }
    inline int32_t DrtCreateDerivedKey(Windows::Win32::Security::CERT_CONTEXT* pLocalCert, Windows::Win32::P2P::DRT_DATA* pKey)
    {
        auto win32_impl_result = WIN32_IMPL_DrtCreateDerivedKey(pLocalCert, pKey);
        return win32_impl_result;
    }
    inline void DrtDeleteDerivedKeySecurityProvider(Windows::Win32::P2P::DRT_SECURITY_PROVIDER* pSecurityProvider)
    {
        WIN32_IMPL_DrtDeleteDerivedKeySecurityProvider(pSecurityProvider);
    }
    inline int32_t DrtCreateNullSecurityProvider(Windows::Win32::P2P::DRT_SECURITY_PROVIDER** ppSecurityProvider)
    {
        auto win32_impl_result = WIN32_IMPL_DrtCreateNullSecurityProvider(ppSecurityProvider);
        return win32_impl_result;
    }
    inline void DrtDeleteNullSecurityProvider(Windows::Win32::P2P::DRT_SECURITY_PROVIDER* pSecurityProvider)
    {
        WIN32_IMPL_DrtDeleteNullSecurityProvider(pSecurityProvider);
    }
    inline int32_t DrtOpen(Windows::Win32::P2P::DRT_SETTINGS* pSettings, Windows::Win32::SystemServices::HANDLE hEvent, void* pvContext, void** phDrt)
    {
        auto win32_impl_result = WIN32_IMPL_DrtOpen(pSettings, hEvent, pvContext, phDrt);
        return win32_impl_result;
    }
    inline void DrtClose(void* hDrt)
    {
        WIN32_IMPL_DrtClose(hDrt);
    }
    inline int32_t DrtGetEventDataSize(void* hDrt, uint32_t* pulEventDataLen)
    {
        auto win32_impl_result = WIN32_IMPL_DrtGetEventDataSize(hDrt, pulEventDataLen);
        return win32_impl_result;
    }
    inline int32_t DrtGetEventData(void* hDrt, uint32_t ulEventDataLen, Windows::Win32::P2P::DRT_EVENT_DATA* pEventData)
    {
        auto win32_impl_result = WIN32_IMPL_DrtGetEventData(hDrt, ulEventDataLen, pEventData);
        return win32_impl_result;
    }
    inline int32_t DrtRegisterKey(void* hDrt, Windows::Win32::P2P::DRT_REGISTRATION* pRegistration, void* pvKeyContext, void** phKeyRegistration)
    {
        auto win32_impl_result = WIN32_IMPL_DrtRegisterKey(hDrt, pRegistration, pvKeyContext, phKeyRegistration);
        return win32_impl_result;
    }
    inline int32_t DrtUpdateKey(void* hKeyRegistration, Windows::Win32::P2P::DRT_DATA* pAppData)
    {
        auto win32_impl_result = WIN32_IMPL_DrtUpdateKey(hKeyRegistration, pAppData);
        return win32_impl_result;
    }
    inline void DrtUnregisterKey(void* hKeyRegistration)
    {
        WIN32_IMPL_DrtUnregisterKey(hKeyRegistration);
    }
    inline int32_t DrtStartSearch(void* hDrt, Windows::Win32::P2P::DRT_DATA* pKey, Windows::Win32::P2P::DRT_SEARCH_INFO* pInfo, uint32_t timeout, Windows::Win32::SystemServices::HANDLE hEvent, void* pvContext, void** hSearchContext)
    {
        auto win32_impl_result = WIN32_IMPL_DrtStartSearch(hDrt, pKey, pInfo, timeout, hEvent, pvContext, hSearchContext);
        return win32_impl_result;
    }
    inline int32_t DrtContinueSearch(void* hSearchContext)
    {
        auto win32_impl_result = WIN32_IMPL_DrtContinueSearch(hSearchContext);
        return win32_impl_result;
    }
    inline int32_t DrtGetSearchResultSize(void* hSearchContext, uint32_t* pulSearchResultSize)
    {
        auto win32_impl_result = WIN32_IMPL_DrtGetSearchResultSize(hSearchContext, pulSearchResultSize);
        return win32_impl_result;
    }
    inline int32_t DrtGetSearchResult(void* hSearchContext, uint32_t ulSearchResultSize, Windows::Win32::P2P::DRT_SEARCH_RESULT* pSearchResult)
    {
        auto win32_impl_result = WIN32_IMPL_DrtGetSearchResult(hSearchContext, ulSearchResultSize, pSearchResult);
        return win32_impl_result;
    }
    inline int32_t DrtGetSearchPathSize(void* hSearchContext, uint32_t* pulSearchPathSize)
    {
        auto win32_impl_result = WIN32_IMPL_DrtGetSearchPathSize(hSearchContext, pulSearchPathSize);
        return win32_impl_result;
    }
    inline int32_t DrtGetSearchPath(void* hSearchContext, uint32_t ulSearchPathSize, Windows::Win32::P2P::DRT_ADDRESS_LIST* pSearchPath)
    {
        auto win32_impl_result = WIN32_IMPL_DrtGetSearchPath(hSearchContext, ulSearchPathSize, pSearchPath);
        return win32_impl_result;
    }
    inline int32_t DrtEndSearch(void* hSearchContext)
    {
        auto win32_impl_result = WIN32_IMPL_DrtEndSearch(hSearchContext);
        return win32_impl_result;
    }
    inline int32_t DrtGetInstanceName(void* hDrt, uint32_t ulcbInstanceNameSize, uint16_t* pwzDrtInstanceName)
    {
        auto win32_impl_result = WIN32_IMPL_DrtGetInstanceName(hDrt, ulcbInstanceNameSize, pwzDrtInstanceName);
        return win32_impl_result;
    }
    inline int32_t DrtGetInstanceNameSize(void* hDrt, uint32_t* pulcbInstanceNameSize)
    {
        auto win32_impl_result = WIN32_IMPL_DrtGetInstanceNameSize(hDrt, pulcbInstanceNameSize);
        return win32_impl_result;
    }
    inline uint32_t PeerDistStartup(uint32_t dwVersionRequested, intptr_t* phPeerDist, uint32_t* pdwSupportedVersion)
    {
        auto win32_impl_result = WIN32_IMPL_PeerDistStartup(dwVersionRequested, phPeerDist, pdwSupportedVersion);
        return win32_impl_result;
    }
    inline uint32_t PeerDistShutdown(intptr_t hPeerDist)
    {
        auto win32_impl_result = WIN32_IMPL_PeerDistShutdown(hPeerDist);
        return win32_impl_result;
    }
    inline uint32_t PeerDistGetStatus(intptr_t hPeerDist, Windows::Win32::P2P::PEERDIST_STATUS* pPeerDistStatus)
    {
        auto win32_impl_result = WIN32_IMPL_PeerDistGetStatus(hPeerDist, pPeerDistStatus);
        return win32_impl_result;
    }
    inline uint32_t PeerDistRegisterForStatusChangeNotification(intptr_t hPeerDist, Windows::Win32::SystemServices::HANDLE hCompletionPort, size_t ulCompletionKey, Windows::Win32::SystemServices::OVERLAPPED* lpOverlapped, Windows::Win32::P2P::PEERDIST_STATUS* pPeerDistStatus)
    {
        auto win32_impl_result = WIN32_IMPL_PeerDistRegisterForStatusChangeNotification(hPeerDist, hCompletionPort, ulCompletionKey, lpOverlapped, pPeerDistStatus);
        return win32_impl_result;
    }
    inline uint32_t PeerDistUnregisterForStatusChangeNotification(intptr_t hPeerDist)
    {
        auto win32_impl_result = WIN32_IMPL_PeerDistUnregisterForStatusChangeNotification(hPeerDist);
        return win32_impl_result;
    }
    inline uint32_t PeerDistServerPublishStream(intptr_t hPeerDist, uint32_t cbContentIdentifier, uint8_t* pContentIdentifier, uint64_t cbContentLength, Windows::Win32::P2P::PEERDIST_PUBLICATION_OPTIONS* pPublishOptions, Windows::Win32::SystemServices::HANDLE hCompletionPort, size_t ulCompletionKey, intptr_t* phStream)
    {
        auto win32_impl_result = WIN32_IMPL_PeerDistServerPublishStream(hPeerDist, cbContentIdentifier, pContentIdentifier, cbContentLength, pPublishOptions, hCompletionPort, ulCompletionKey, phStream);
        return win32_impl_result;
    }
    inline uint32_t PeerDistServerPublishAddToStream(intptr_t hPeerDist, intptr_t hStream, uint32_t cbNumberOfBytes, uint8_t* pBuffer, Windows::Win32::SystemServices::OVERLAPPED* lpOverlapped)
    {
        auto win32_impl_result = WIN32_IMPL_PeerDistServerPublishAddToStream(hPeerDist, hStream, cbNumberOfBytes, pBuffer, lpOverlapped);
        return win32_impl_result;
    }
    inline uint32_t PeerDistServerPublishCompleteStream(intptr_t hPeerDist, intptr_t hStream, Windows::Win32::SystemServices::OVERLAPPED* lpOverlapped)
    {
        auto win32_impl_result = WIN32_IMPL_PeerDistServerPublishCompleteStream(hPeerDist, hStream, lpOverlapped);
        return win32_impl_result;
    }
    inline uint32_t PeerDistServerCloseStreamHandle(intptr_t hPeerDist, intptr_t hStream)
    {
        auto win32_impl_result = WIN32_IMPL_PeerDistServerCloseStreamHandle(hPeerDist, hStream);
        return win32_impl_result;
    }
    inline uint32_t PeerDistServerUnpublish(intptr_t hPeerDist, uint32_t cbContentIdentifier, uint8_t* pContentIdentifier)
    {
        auto win32_impl_result = WIN32_IMPL_PeerDistServerUnpublish(hPeerDist, cbContentIdentifier, pContentIdentifier);
        return win32_impl_result;
    }
    inline uint32_t PeerDistServerOpenContentInformation(intptr_t hPeerDist, uint32_t cbContentIdentifier, uint8_t* pContentIdentifier, uint64_t ullContentOffset, uint64_t cbContentLength, Windows::Win32::SystemServices::HANDLE hCompletionPort, size_t ulCompletionKey, intptr_t* phContentInfo)
    {
        auto win32_impl_result = WIN32_IMPL_PeerDistServerOpenContentInformation(hPeerDist, cbContentIdentifier, pContentIdentifier, ullContentOffset, cbContentLength, hCompletionPort, ulCompletionKey, phContentInfo);
        return win32_impl_result;
    }
    inline uint32_t PeerDistServerRetrieveContentInformation(intptr_t hPeerDist, intptr_t hContentInfo, uint32_t cbMaxNumberOfBytes, uint8_t* pBuffer, Windows::Win32::SystemServices::OVERLAPPED* lpOverlapped)
    {
        auto win32_impl_result = WIN32_IMPL_PeerDistServerRetrieveContentInformation(hPeerDist, hContentInfo, cbMaxNumberOfBytes, pBuffer, lpOverlapped);
        return win32_impl_result;
    }
    inline uint32_t PeerDistServerCloseContentInformation(intptr_t hPeerDist, intptr_t hContentInfo)
    {
        auto win32_impl_result = WIN32_IMPL_PeerDistServerCloseContentInformation(hPeerDist, hContentInfo);
        return win32_impl_result;
    }
    inline uint32_t PeerDistServerCancelAsyncOperation(intptr_t hPeerDist, uint32_t cbContentIdentifier, uint8_t* pContentIdentifier, Windows::Win32::SystemServices::OVERLAPPED* pOverlapped)
    {
        auto win32_impl_result = WIN32_IMPL_PeerDistServerCancelAsyncOperation(hPeerDist, cbContentIdentifier, pContentIdentifier, pOverlapped);
        return win32_impl_result;
    }
    inline uint32_t PeerDistClientOpenContent(intptr_t hPeerDist, Windows::Win32::P2P::PEERDIST_CONTENT_TAG* pContentTag, Windows::Win32::SystemServices::HANDLE hCompletionPort, size_t ulCompletionKey, intptr_t* phContentHandle)
    {
        auto win32_impl_result = WIN32_IMPL_PeerDistClientOpenContent(hPeerDist, pContentTag, hCompletionPort, ulCompletionKey, phContentHandle);
        return win32_impl_result;
    }
    inline uint32_t PeerDistClientCloseContent(intptr_t hPeerDist, intptr_t hContentHandle)
    {
        auto win32_impl_result = WIN32_IMPL_PeerDistClientCloseContent(hPeerDist, hContentHandle);
        return win32_impl_result;
    }
    inline uint32_t PeerDistClientAddContentInformation(intptr_t hPeerDist, intptr_t hContentHandle, uint32_t cbNumberOfBytes, uint8_t* pBuffer, Windows::Win32::SystemServices::OVERLAPPED* lpOverlapped)
    {
        auto win32_impl_result = WIN32_IMPL_PeerDistClientAddContentInformation(hPeerDist, hContentHandle, cbNumberOfBytes, pBuffer, lpOverlapped);
        return win32_impl_result;
    }
    inline uint32_t PeerDistClientCompleteContentInformation(intptr_t hPeerDist, intptr_t hContentHandle, Windows::Win32::SystemServices::OVERLAPPED* lpOverlapped)
    {
        auto win32_impl_result = WIN32_IMPL_PeerDistClientCompleteContentInformation(hPeerDist, hContentHandle, lpOverlapped);
        return win32_impl_result;
    }
    inline uint32_t PeerDistClientAddData(intptr_t hPeerDist, intptr_t hContentHandle, uint32_t cbNumberOfBytes, uint8_t* pBuffer, Windows::Win32::SystemServices::OVERLAPPED* lpOverlapped)
    {
        auto win32_impl_result = WIN32_IMPL_PeerDistClientAddData(hPeerDist, hContentHandle, cbNumberOfBytes, pBuffer, lpOverlapped);
        return win32_impl_result;
    }
    inline uint32_t PeerDistClientBlockRead(intptr_t hPeerDist, intptr_t hContentHandle, uint32_t cbMaxNumberOfBytes, uint8_t* pBuffer, uint32_t dwTimeoutInMilliseconds, Windows::Win32::SystemServices::OVERLAPPED* lpOverlapped)
    {
        auto win32_impl_result = WIN32_IMPL_PeerDistClientBlockRead(hPeerDist, hContentHandle, cbMaxNumberOfBytes, pBuffer, dwTimeoutInMilliseconds, lpOverlapped);
        return win32_impl_result;
    }
    inline uint32_t PeerDistClientStreamRead(intptr_t hPeerDist, intptr_t hContentHandle, uint32_t cbMaxNumberOfBytes, uint8_t* pBuffer, uint32_t dwTimeoutInMilliseconds, Windows::Win32::SystemServices::OVERLAPPED* lpOverlapped)
    {
        auto win32_impl_result = WIN32_IMPL_PeerDistClientStreamRead(hPeerDist, hContentHandle, cbMaxNumberOfBytes, pBuffer, dwTimeoutInMilliseconds, lpOverlapped);
        return win32_impl_result;
    }
    inline uint32_t PeerDistClientFlushContent(intptr_t hPeerDist, Windows::Win32::P2P::PEERDIST_CONTENT_TAG* pContentTag, Windows::Win32::SystemServices::HANDLE hCompletionPort, size_t ulCompletionKey, Windows::Win32::SystemServices::OVERLAPPED* lpOverlapped)
    {
        auto win32_impl_result = WIN32_IMPL_PeerDistClientFlushContent(hPeerDist, pContentTag, hCompletionPort, ulCompletionKey, lpOverlapped);
        return win32_impl_result;
    }
    inline uint32_t PeerDistClientCancelAsyncOperation(intptr_t hPeerDist, intptr_t hContentHandle, Windows::Win32::SystemServices::OVERLAPPED* pOverlapped)
    {
        auto win32_impl_result = WIN32_IMPL_PeerDistClientCancelAsyncOperation(hPeerDist, hContentHandle, pOverlapped);
        return win32_impl_result;
    }
    inline uint32_t PeerDistGetStatusEx(intptr_t hPeerDist, Windows::Win32::P2P::PEERDIST_STATUS_INFO* pPeerDistStatus)
    {
        auto win32_impl_result = WIN32_IMPL_PeerDistGetStatusEx(hPeerDist, pPeerDistStatus);
        return win32_impl_result;
    }
    inline uint32_t PeerDistRegisterForStatusChangeNotificationEx(intptr_t hPeerDist, Windows::Win32::SystemServices::HANDLE hCompletionPort, size_t ulCompletionKey, Windows::Win32::SystemServices::OVERLAPPED* lpOverlapped, Windows::Win32::P2P::PEERDIST_STATUS_INFO* pPeerDistStatus)
    {
        auto win32_impl_result = WIN32_IMPL_PeerDistRegisterForStatusChangeNotificationEx(hPeerDist, hCompletionPort, ulCompletionKey, lpOverlapped, pPeerDistStatus);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL PeerDistGetOverlappedResult(Windows::Win32::SystemServices::OVERLAPPED* lpOverlapped, uint32_t* lpNumberOfBytesTransferred, Windows::Win32::SystemServices::BOOL bWait)
    {
        auto win32_impl_result = WIN32_IMPL_PeerDistGetOverlappedResult(lpOverlapped, lpNumberOfBytesTransferred, bWait);
        return win32_impl_result;
    }
    inline uint32_t PeerDistServerOpenContentInformationEx(intptr_t hPeerDist, uint32_t cbContentIdentifier, uint8_t* pContentIdentifier, uint64_t ullContentOffset, uint64_t cbContentLength, Windows::Win32::P2P::PEERDIST_RETRIEVAL_OPTIONS* pRetrievalOptions, Windows::Win32::SystemServices::HANDLE hCompletionPort, size_t ulCompletionKey, intptr_t* phContentInfo)
    {
        auto win32_impl_result = WIN32_IMPL_PeerDistServerOpenContentInformationEx(hPeerDist, cbContentIdentifier, pContentIdentifier, ullContentOffset, cbContentLength, pRetrievalOptions, hCompletionPort, ulCompletionKey, phContentInfo);
        return win32_impl_result;
    }
    inline uint32_t PeerDistClientGetInformationByHandle(intptr_t hPeerDist, intptr_t hContentHandle, Windows::Win32::P2P::PEERDIST_CLIENT_INFO_BY_HANDLE_CLASS PeerDistClientInfoClass, uint32_t dwBufferSize, void* lpInformation)
    {
        auto win32_impl_result = WIN32_IMPL_PeerDistClientGetInformationByHandle(hPeerDist, hContentHandle, PeerDistClientInfoClass, dwBufferSize, lpInformation);
        return win32_impl_result;
    }

#pragma endregion methods

}
#endif
