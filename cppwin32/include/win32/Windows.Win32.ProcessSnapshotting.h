// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_ProcessSnapshotting_H
#define WIN32_Windows_Win32_ProcessSnapshotting_H
#include "win32/base.h"
static_assert(win32::check_version(CPPWIN32_VERSION, "0.0.0.1"), "Mismatched C++/Win32 headers.");
#define CPPWIN32_VERSION "0.0.0.1"
#include "win32/impl/Windows.Win32.ProcessSnapshotting.2.h"
WIN32_EXPORT namespace win32::Windows::Win32::ProcessSnapshotting
{
#pragma region methods
    inline uint32_t PssCaptureSnapshot(Windows::Win32::SystemServices::HANDLE ProcessHandle, Windows::Win32::ProcessSnapshotting::PSS_CAPTURE_FLAGS CaptureFlags, uint32_t ThreadContextFlags, Windows::Win32::ProcessSnapshotting::HPSS__** SnapshotHandle)
    {
        auto win32_impl_result = WIN32_IMPL_PssCaptureSnapshot(ProcessHandle, CaptureFlags, ThreadContextFlags, SnapshotHandle);
        return win32_impl_result;
    }
    inline uint32_t PssFreeSnapshot(Windows::Win32::SystemServices::HANDLE ProcessHandle, Windows::Win32::ProcessSnapshotting::HPSS__* SnapshotHandle)
    {
        auto win32_impl_result = WIN32_IMPL_PssFreeSnapshot(ProcessHandle, SnapshotHandle);
        return win32_impl_result;
    }
    inline uint32_t PssQuerySnapshot(Windows::Win32::ProcessSnapshotting::HPSS__* SnapshotHandle, Windows::Win32::ProcessSnapshotting::PSS_QUERY_INFORMATION_CLASS InformationClass, void* Buffer, uint32_t BufferLength)
    {
        auto win32_impl_result = WIN32_IMPL_PssQuerySnapshot(SnapshotHandle, InformationClass, Buffer, BufferLength);
        return win32_impl_result;
    }
    inline uint32_t PssWalkSnapshot(Windows::Win32::ProcessSnapshotting::HPSS__* SnapshotHandle, Windows::Win32::ProcessSnapshotting::PSS_WALK_INFORMATION_CLASS InformationClass, Windows::Win32::ProcessSnapshotting::HPSSWALK__* WalkMarkerHandle, void* Buffer, uint32_t BufferLength)
    {
        auto win32_impl_result = WIN32_IMPL_PssWalkSnapshot(SnapshotHandle, InformationClass, WalkMarkerHandle, Buffer, BufferLength);
        return win32_impl_result;
    }
    inline uint32_t PssDuplicateSnapshot(Windows::Win32::SystemServices::HANDLE SourceProcessHandle, Windows::Win32::ProcessSnapshotting::HPSS__* SnapshotHandle, Windows::Win32::SystemServices::HANDLE TargetProcessHandle, Windows::Win32::ProcessSnapshotting::HPSS__** TargetSnapshotHandle, Windows::Win32::ProcessSnapshotting::PSS_DUPLICATE_FLAGS Flags)
    {
        auto win32_impl_result = WIN32_IMPL_PssDuplicateSnapshot(SourceProcessHandle, SnapshotHandle, TargetProcessHandle, TargetSnapshotHandle, Flags);
        return win32_impl_result;
    }
    inline uint32_t PssWalkMarkerCreate(Windows::Win32::ProcessSnapshotting::PSS_ALLOCATOR* Allocator, Windows::Win32::ProcessSnapshotting::HPSSWALK__** WalkMarkerHandle)
    {
        auto win32_impl_result = WIN32_IMPL_PssWalkMarkerCreate(Allocator, WalkMarkerHandle);
        return win32_impl_result;
    }
    inline uint32_t PssWalkMarkerFree(Windows::Win32::ProcessSnapshotting::HPSSWALK__* WalkMarkerHandle)
    {
        auto win32_impl_result = WIN32_IMPL_PssWalkMarkerFree(WalkMarkerHandle);
        return win32_impl_result;
    }
    inline uint32_t PssWalkMarkerGetPosition(Windows::Win32::ProcessSnapshotting::HPSSWALK__* WalkMarkerHandle, size_t* Position)
    {
        auto win32_impl_result = WIN32_IMPL_PssWalkMarkerGetPosition(WalkMarkerHandle, Position);
        return win32_impl_result;
    }
    inline uint32_t PssWalkMarkerSetPosition(Windows::Win32::ProcessSnapshotting::HPSSWALK__* WalkMarkerHandle, size_t Position)
    {
        auto win32_impl_result = WIN32_IMPL_PssWalkMarkerSetPosition(WalkMarkerHandle, Position);
        return win32_impl_result;
    }
    inline uint32_t PssWalkMarkerSeekToBeginning(Windows::Win32::ProcessSnapshotting::HPSSWALK__* WalkMarkerHandle)
    {
        auto win32_impl_result = WIN32_IMPL_PssWalkMarkerSeekToBeginning(WalkMarkerHandle);
        return win32_impl_result;
    }

#pragma endregion methods

}
#endif
