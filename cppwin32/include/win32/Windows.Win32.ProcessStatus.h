// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_ProcessStatus_H
#define WIN32_Windows_Win32_ProcessStatus_H
#include "win32/base.h"
static_assert(win32::check_version(CPPWIN32_VERSION, "0.0.0.1"), "Mismatched C++/Win32 headers.");
#define CPPWIN32_VERSION "0.0.0.1"
#include "win32/impl/Windows.Win32.ProcessStatus.2.h"
WIN32_EXPORT namespace win32::Windows::Win32::ProcessStatus
{
#pragma region methods
    inline Windows::Win32::SystemServices::BOOL K32EnumProcesses(uint32_t* lpidProcess, uint32_t cb, uint32_t* lpcbNeeded)
    {
        auto win32_impl_result = WIN32_IMPL_K32EnumProcesses(lpidProcess, cb, lpcbNeeded);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL K32EnumProcessModules(Windows::Win32::SystemServices::HANDLE hProcess, intptr_t* lphModule, uint32_t cb, uint32_t* lpcbNeeded)
    {
        auto win32_impl_result = WIN32_IMPL_K32EnumProcessModules(hProcess, lphModule, cb, lpcbNeeded);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL K32EnumProcessModulesEx(Windows::Win32::SystemServices::HANDLE hProcess, intptr_t* lphModule, uint32_t cb, uint32_t* lpcbNeeded, uint32_t dwFilterFlag)
    {
        auto win32_impl_result = WIN32_IMPL_K32EnumProcessModulesEx(hProcess, lphModule, cb, lpcbNeeded, dwFilterFlag);
        return win32_impl_result;
    }
    inline uint32_t K32GetModuleBaseNameA(Windows::Win32::SystemServices::HANDLE hProcess, intptr_t hModule, int8_t* lpBaseName, uint32_t nSize)
    {
        auto win32_impl_result = WIN32_IMPL_K32GetModuleBaseNameA(hProcess, hModule, lpBaseName, nSize);
        return win32_impl_result;
    }
    inline uint32_t K32GetModuleBaseNameW(Windows::Win32::SystemServices::HANDLE hProcess, intptr_t hModule, uint16_t* lpBaseName, uint32_t nSize)
    {
        auto win32_impl_result = WIN32_IMPL_K32GetModuleBaseNameW(hProcess, hModule, lpBaseName, nSize);
        return win32_impl_result;
    }
    inline uint32_t K32GetModuleFileNameExA(Windows::Win32::SystemServices::HANDLE hProcess, intptr_t hModule, int8_t* lpFilename, uint32_t nSize)
    {
        auto win32_impl_result = WIN32_IMPL_K32GetModuleFileNameExA(hProcess, hModule, lpFilename, nSize);
        return win32_impl_result;
    }
    inline uint32_t K32GetModuleFileNameExW(Windows::Win32::SystemServices::HANDLE hProcess, intptr_t hModule, uint16_t* lpFilename, uint32_t nSize)
    {
        auto win32_impl_result = WIN32_IMPL_K32GetModuleFileNameExW(hProcess, hModule, lpFilename, nSize);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL K32GetModuleInformation(Windows::Win32::SystemServices::HANDLE hProcess, intptr_t hModule, Windows::Win32::ProcessStatus::MODULEINFO* lpmodinfo, uint32_t cb)
    {
        auto win32_impl_result = WIN32_IMPL_K32GetModuleInformation(hProcess, hModule, lpmodinfo, cb);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL K32EmptyWorkingSet(Windows::Win32::SystemServices::HANDLE hProcess)
    {
        auto win32_impl_result = WIN32_IMPL_K32EmptyWorkingSet(hProcess);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL K32QueryWorkingSet(Windows::Win32::SystemServices::HANDLE hProcess, void* pv, uint32_t cb)
    {
        auto win32_impl_result = WIN32_IMPL_K32QueryWorkingSet(hProcess, pv, cb);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL K32QueryWorkingSetEx(Windows::Win32::SystemServices::HANDLE hProcess, void* pv, uint32_t cb)
    {
        auto win32_impl_result = WIN32_IMPL_K32QueryWorkingSetEx(hProcess, pv, cb);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL K32InitializeProcessForWsWatch(Windows::Win32::SystemServices::HANDLE hProcess)
    {
        auto win32_impl_result = WIN32_IMPL_K32InitializeProcessForWsWatch(hProcess);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL K32GetWsChanges(Windows::Win32::SystemServices::HANDLE hProcess, Windows::Win32::ProcessStatus::PSAPI_WS_WATCH_INFORMATION* lpWatchInfo, uint32_t cb)
    {
        auto win32_impl_result = WIN32_IMPL_K32GetWsChanges(hProcess, lpWatchInfo, cb);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL K32GetWsChangesEx(Windows::Win32::SystemServices::HANDLE hProcess, Windows::Win32::ProcessStatus::PSAPI_WS_WATCH_INFORMATION_EX* lpWatchInfoEx, uint32_t* cb)
    {
        auto win32_impl_result = WIN32_IMPL_K32GetWsChangesEx(hProcess, lpWatchInfoEx, cb);
        return win32_impl_result;
    }
    inline uint32_t K32GetMappedFileNameW(Windows::Win32::SystemServices::HANDLE hProcess, void* lpv, uint16_t* lpFilename, uint32_t nSize)
    {
        auto win32_impl_result = WIN32_IMPL_K32GetMappedFileNameW(hProcess, lpv, lpFilename, nSize);
        return win32_impl_result;
    }
    inline uint32_t K32GetMappedFileNameA(Windows::Win32::SystemServices::HANDLE hProcess, void* lpv, int8_t* lpFilename, uint32_t nSize)
    {
        auto win32_impl_result = WIN32_IMPL_K32GetMappedFileNameA(hProcess, lpv, lpFilename, nSize);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL K32EnumDeviceDrivers(void** lpImageBase, uint32_t cb, uint32_t* lpcbNeeded)
    {
        auto win32_impl_result = WIN32_IMPL_K32EnumDeviceDrivers(lpImageBase, cb, lpcbNeeded);
        return win32_impl_result;
    }
    inline uint32_t K32GetDeviceDriverBaseNameA(void* ImageBase, int8_t* lpFilename, uint32_t nSize)
    {
        auto win32_impl_result = WIN32_IMPL_K32GetDeviceDriverBaseNameA(ImageBase, lpFilename, nSize);
        return win32_impl_result;
    }
    inline uint32_t K32GetDeviceDriverBaseNameW(void* ImageBase, uint16_t* lpBaseName, uint32_t nSize)
    {
        auto win32_impl_result = WIN32_IMPL_K32GetDeviceDriverBaseNameW(ImageBase, lpBaseName, nSize);
        return win32_impl_result;
    }
    inline uint32_t K32GetDeviceDriverFileNameA(void* ImageBase, int8_t* lpFilename, uint32_t nSize)
    {
        auto win32_impl_result = WIN32_IMPL_K32GetDeviceDriverFileNameA(ImageBase, lpFilename, nSize);
        return win32_impl_result;
    }
    inline uint32_t K32GetDeviceDriverFileNameW(void* ImageBase, uint16_t* lpFilename, uint32_t nSize)
    {
        auto win32_impl_result = WIN32_IMPL_K32GetDeviceDriverFileNameW(ImageBase, lpFilename, nSize);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL K32GetProcessMemoryInfo(Windows::Win32::SystemServices::HANDLE Process, Windows::Win32::ProcessStatus::PROCESS_MEMORY_COUNTERS* ppsmemCounters, uint32_t cb)
    {
        auto win32_impl_result = WIN32_IMPL_K32GetProcessMemoryInfo(Process, ppsmemCounters, cb);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL K32GetPerformanceInfo(Windows::Win32::ProcessStatus::PERFORMANCE_INFORMATION* pPerformanceInformation, uint32_t cb)
    {
        auto win32_impl_result = WIN32_IMPL_K32GetPerformanceInfo(pPerformanceInformation, cb);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL K32EnumPageFilesW(Windows::Win32::ProcessStatus::PENUM_PAGE_FILE_CALLBACKW* pCallBackRoutine, void* pContext)
    {
        auto win32_impl_result = WIN32_IMPL_K32EnumPageFilesW(pCallBackRoutine, pContext);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL K32EnumPageFilesA(Windows::Win32::ProcessStatus::PENUM_PAGE_FILE_CALLBACKA* pCallBackRoutine, void* pContext)
    {
        auto win32_impl_result = WIN32_IMPL_K32EnumPageFilesA(pCallBackRoutine, pContext);
        return win32_impl_result;
    }
    inline uint32_t K32GetProcessImageFileNameA(Windows::Win32::SystemServices::HANDLE hProcess, int8_t* lpImageFileName, uint32_t nSize)
    {
        auto win32_impl_result = WIN32_IMPL_K32GetProcessImageFileNameA(hProcess, lpImageFileName, nSize);
        return win32_impl_result;
    }
    inline uint32_t K32GetProcessImageFileNameW(Windows::Win32::SystemServices::HANDLE hProcess, uint16_t* lpImageFileName, uint32_t nSize)
    {
        auto win32_impl_result = WIN32_IMPL_K32GetProcessImageFileNameW(hProcess, lpImageFileName, nSize);
        return win32_impl_result;
    }

#pragma endregion methods

}
#endif
