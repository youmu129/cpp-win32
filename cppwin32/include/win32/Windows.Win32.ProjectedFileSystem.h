// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_ProjectedFileSystem_H
#define WIN32_Windows_Win32_ProjectedFileSystem_H
#include "win32/base.h"
static_assert(win32::check_version(CPPWIN32_VERSION, "0.0.0.1"), "Mismatched C++/Win32 headers.");
#define CPPWIN32_VERSION "0.0.0.1"
#include "win32/impl/Windows.Win32.ProjectedFileSystem.2.h"
WIN32_EXPORT namespace win32::Windows::Win32::ProjectedFileSystem
{
#pragma region methods
    inline int32_t PrjStartVirtualizing(uint16_t* virtualizationRootPath, Windows::Win32::ProjectedFileSystem::PRJ_CALLBACKS* callbacks, void* instanceContext, Windows::Win32::ProjectedFileSystem::PRJ_STARTVIRTUALIZING_OPTIONS* options, Windows::Win32::ProjectedFileSystem::PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT__** namespaceVirtualizationContext)
    {
        auto win32_impl_result = WIN32_IMPL_PrjStartVirtualizing(virtualizationRootPath, callbacks, instanceContext, options, namespaceVirtualizationContext);
        return win32_impl_result;
    }
    inline void PrjStopVirtualizing(Windows::Win32::ProjectedFileSystem::PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT__* namespaceVirtualizationContext)
    {
        WIN32_IMPL_PrjStopVirtualizing(namespaceVirtualizationContext);
    }
    inline int32_t PrjClearNegativePathCache(Windows::Win32::ProjectedFileSystem::PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT__* namespaceVirtualizationContext, uint32_t* totalEntryNumber)
    {
        auto win32_impl_result = WIN32_IMPL_PrjClearNegativePathCache(namespaceVirtualizationContext, totalEntryNumber);
        return win32_impl_result;
    }
    inline int32_t PrjGetVirtualizationInstanceInfo(Windows::Win32::ProjectedFileSystem::PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT__* namespaceVirtualizationContext, Windows::Win32::ProjectedFileSystem::PRJ_VIRTUALIZATION_INSTANCE_INFO* virtualizationInstanceInfo)
    {
        auto win32_impl_result = WIN32_IMPL_PrjGetVirtualizationInstanceInfo(namespaceVirtualizationContext, virtualizationInstanceInfo);
        return win32_impl_result;
    }
    inline int32_t PrjMarkDirectoryAsPlaceholder(uint16_t* rootPathName, uint16_t* targetPathName, Windows::Win32::ProjectedFileSystem::PRJ_PLACEHOLDER_VERSION_INFO* versionInfo, ::win32::guid* virtualizationInstanceID)
    {
        auto win32_impl_result = WIN32_IMPL_PrjMarkDirectoryAsPlaceholder(rootPathName, targetPathName, versionInfo, virtualizationInstanceID);
        return win32_impl_result;
    }
    inline int32_t PrjWritePlaceholderInfo(Windows::Win32::ProjectedFileSystem::PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT__* namespaceVirtualizationContext, uint16_t* destinationFileName, Windows::Win32::ProjectedFileSystem::PRJ_PLACEHOLDER_INFO* placeholderInfo, uint32_t placeholderInfoSize)
    {
        auto win32_impl_result = WIN32_IMPL_PrjWritePlaceholderInfo(namespaceVirtualizationContext, destinationFileName, placeholderInfo, placeholderInfoSize);
        return win32_impl_result;
    }
    inline int32_t PrjWritePlaceholderInfo2(Windows::Win32::ProjectedFileSystem::PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT__* namespaceVirtualizationContext, uint16_t* destinationFileName, Windows::Win32::ProjectedFileSystem::PRJ_PLACEHOLDER_INFO* placeholderInfo, uint32_t placeholderInfoSize, Windows::Win32::ProjectedFileSystem::PRJ_EXTENDED_INFO* ExtendedInfo)
    {
        auto win32_impl_result = WIN32_IMPL_PrjWritePlaceholderInfo2(namespaceVirtualizationContext, destinationFileName, placeholderInfo, placeholderInfoSize, ExtendedInfo);
        return win32_impl_result;
    }
    inline int32_t PrjUpdateFileIfNeeded(Windows::Win32::ProjectedFileSystem::PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT__* namespaceVirtualizationContext, uint16_t* destinationFileName, Windows::Win32::ProjectedFileSystem::PRJ_PLACEHOLDER_INFO* placeholderInfo, uint32_t placeholderInfoSize, Windows::Win32::ProjectedFileSystem::PRJ_UPDATE_TYPES updateFlags, Windows::Win32::ProjectedFileSystem::PRJ_UPDATE_FAILURE_CAUSES* failureReason)
    {
        auto win32_impl_result = WIN32_IMPL_PrjUpdateFileIfNeeded(namespaceVirtualizationContext, destinationFileName, placeholderInfo, placeholderInfoSize, updateFlags, failureReason);
        return win32_impl_result;
    }
    inline int32_t PrjDeleteFile(Windows::Win32::ProjectedFileSystem::PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT__* namespaceVirtualizationContext, uint16_t* destinationFileName, Windows::Win32::ProjectedFileSystem::PRJ_UPDATE_TYPES updateFlags, Windows::Win32::ProjectedFileSystem::PRJ_UPDATE_FAILURE_CAUSES* failureReason)
    {
        auto win32_impl_result = WIN32_IMPL_PrjDeleteFile(namespaceVirtualizationContext, destinationFileName, updateFlags, failureReason);
        return win32_impl_result;
    }
    inline int32_t PrjWriteFileData(Windows::Win32::ProjectedFileSystem::PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT__* namespaceVirtualizationContext, ::win32::guid* dataStreamId, void* buffer, uint64_t byteOffset, uint32_t length)
    {
        auto win32_impl_result = WIN32_IMPL_PrjWriteFileData(namespaceVirtualizationContext, dataStreamId, buffer, byteOffset, length);
        return win32_impl_result;
    }
    inline int32_t PrjGetOnDiskFileState(uint16_t* destinationFileName, Windows::Win32::ProjectedFileSystem::PRJ_FILE_STATE* fileState)
    {
        auto win32_impl_result = WIN32_IMPL_PrjGetOnDiskFileState(destinationFileName, fileState);
        return win32_impl_result;
    }
    inline void* PrjAllocateAlignedBuffer(Windows::Win32::ProjectedFileSystem::PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT__* namespaceVirtualizationContext, size_t size)
    {
        auto win32_impl_result = WIN32_IMPL_PrjAllocateAlignedBuffer(namespaceVirtualizationContext, size);
        return win32_impl_result;
    }
    inline void PrjFreeAlignedBuffer(void* buffer)
    {
        WIN32_IMPL_PrjFreeAlignedBuffer(buffer);
    }
    inline int32_t PrjCompleteCommand(Windows::Win32::ProjectedFileSystem::PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT__* namespaceVirtualizationContext, int32_t commandId, int32_t completionResult, Windows::Win32::ProjectedFileSystem::PRJ_COMPLETE_COMMAND_EXTENDED_PARAMETERS* extendedParameters)
    {
        auto win32_impl_result = WIN32_IMPL_PrjCompleteCommand(namespaceVirtualizationContext, commandId, completionResult, extendedParameters);
        return win32_impl_result;
    }
    inline int32_t PrjFillDirEntryBuffer(uint16_t* fileName, Windows::Win32::ProjectedFileSystem::PRJ_FILE_BASIC_INFO* fileBasicInfo, Windows::Win32::ProjectedFileSystem::PRJ_DIR_ENTRY_BUFFER_HANDLE__* dirEntryBufferHandle)
    {
        auto win32_impl_result = WIN32_IMPL_PrjFillDirEntryBuffer(fileName, fileBasicInfo, dirEntryBufferHandle);
        return win32_impl_result;
    }
    inline int32_t PrjFillDirEntryBuffer2(Windows::Win32::ProjectedFileSystem::PRJ_DIR_ENTRY_BUFFER_HANDLE__* dirEntryBufferHandle, uint16_t* fileName, Windows::Win32::ProjectedFileSystem::PRJ_FILE_BASIC_INFO* fileBasicInfo, Windows::Win32::ProjectedFileSystem::PRJ_EXTENDED_INFO* extendedInfo)
    {
        auto win32_impl_result = WIN32_IMPL_PrjFillDirEntryBuffer2(dirEntryBufferHandle, fileName, fileBasicInfo, extendedInfo);
        return win32_impl_result;
    }
    inline uint8_t PrjFileNameMatch(uint16_t* fileNameToCheck, uint16_t* pattern)
    {
        auto win32_impl_result = WIN32_IMPL_PrjFileNameMatch(fileNameToCheck, pattern);
        return win32_impl_result;
    }
    inline int32_t PrjFileNameCompare(uint16_t* fileName1, uint16_t* fileName2)
    {
        auto win32_impl_result = WIN32_IMPL_PrjFileNameCompare(fileName1, fileName2);
        return win32_impl_result;
    }
    inline uint8_t PrjDoesNameContainWildCards(uint16_t* fileName)
    {
        auto win32_impl_result = WIN32_IMPL_PrjDoesNameContainWildCards(fileName);
        return win32_impl_result;
    }

#pragma endregion methods

}
#endif
