// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_RemoteDesktopServices_H
#define WIN32_Windows_Win32_RemoteDesktopServices_H
#include "win32/base.h"
static_assert(win32::check_version(CPPWIN32_VERSION, "0.0.0.1"), "Mismatched C++/Win32 headers.");
#define CPPWIN32_VERSION "0.0.0.1"
#include "win32/impl/Windows.Win32.RemoteDesktopServices.2.h"
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
#pragma region methods
    inline Windows::Win32::SystemServices::BOOL ProcessIdToSessionId(uint32_t dwProcessId, uint32_t* pSessionId)
    {
        auto win32_impl_result = WIN32_IMPL_ProcessIdToSessionId(dwProcessId, pSessionId);
        return win32_impl_result;
    }
    inline uint32_t WTSGetActiveConsoleSessionId()
    {
        auto win32_impl_result = WIN32_IMPL_WTSGetActiveConsoleSessionId();
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WTSStopRemoteControlSession(uint32_t LogonId)
    {
        auto win32_impl_result = WIN32_IMPL_WTSStopRemoteControlSession(LogonId);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WTSStartRemoteControlSessionW(uint16_t* pTargetServerName, uint32_t TargetLogonId, uint8_t HotkeyVk, uint16_t HotkeyModifiers)
    {
        auto win32_impl_result = WIN32_IMPL_WTSStartRemoteControlSessionW(pTargetServerName, TargetLogonId, HotkeyVk, HotkeyModifiers);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WTSStartRemoteControlSessionA(int8_t* pTargetServerName, uint32_t TargetLogonId, uint8_t HotkeyVk, uint16_t HotkeyModifiers)
    {
        auto win32_impl_result = WIN32_IMPL_WTSStartRemoteControlSessionA(pTargetServerName, TargetLogonId, HotkeyVk, HotkeyModifiers);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WTSConnectSessionA(uint32_t LogonId, uint32_t TargetLogonId, int8_t* pPassword, Windows::Win32::SystemServices::BOOL bWait)
    {
        auto win32_impl_result = WIN32_IMPL_WTSConnectSessionA(LogonId, TargetLogonId, pPassword, bWait);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WTSConnectSessionW(uint32_t LogonId, uint32_t TargetLogonId, uint16_t* pPassword, Windows::Win32::SystemServices::BOOL bWait)
    {
        auto win32_impl_result = WIN32_IMPL_WTSConnectSessionW(LogonId, TargetLogonId, pPassword, bWait);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WTSEnumerateServersW(uint16_t* pDomainName, uint32_t Reserved, uint32_t Version, Windows::Win32::RemoteDesktopServices::WTS_SERVER_INFOW** ppServerInfo, uint32_t* pCount)
    {
        auto win32_impl_result = WIN32_IMPL_WTSEnumerateServersW(pDomainName, Reserved, Version, ppServerInfo, pCount);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WTSEnumerateServersA(int8_t* pDomainName, uint32_t Reserved, uint32_t Version, Windows::Win32::RemoteDesktopServices::WTS_SERVER_INFOA** ppServerInfo, uint32_t* pCount)
    {
        auto win32_impl_result = WIN32_IMPL_WTSEnumerateServersA(pDomainName, Reserved, Version, ppServerInfo, pCount);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::HANDLE WTSOpenServerW(uint16_t* pServerName)
    {
        auto win32_impl_result = WIN32_IMPL_WTSOpenServerW(pServerName);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::HANDLE WTSOpenServerA(int8_t* pServerName)
    {
        auto win32_impl_result = WIN32_IMPL_WTSOpenServerA(pServerName);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::HANDLE WTSOpenServerExW(uint16_t* pServerName)
    {
        auto win32_impl_result = WIN32_IMPL_WTSOpenServerExW(pServerName);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::HANDLE WTSOpenServerExA(int8_t* pServerName)
    {
        auto win32_impl_result = WIN32_IMPL_WTSOpenServerExA(pServerName);
        return win32_impl_result;
    }
    inline void WTSCloseServer(Windows::Win32::SystemServices::HANDLE hServer)
    {
        WIN32_IMPL_WTSCloseServer(hServer);
    }
    inline Windows::Win32::SystemServices::BOOL WTSEnumerateSessionsW(Windows::Win32::SystemServices::HANDLE hServer, uint32_t Reserved, uint32_t Version, Windows::Win32::RemoteDesktopServices::WTS_SESSION_INFOW** ppSessionInfo, uint32_t* pCount)
    {
        auto win32_impl_result = WIN32_IMPL_WTSEnumerateSessionsW(hServer, Reserved, Version, ppSessionInfo, pCount);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WTSEnumerateSessionsA(Windows::Win32::SystemServices::HANDLE hServer, uint32_t Reserved, uint32_t Version, Windows::Win32::RemoteDesktopServices::WTS_SESSION_INFOA** ppSessionInfo, uint32_t* pCount)
    {
        auto win32_impl_result = WIN32_IMPL_WTSEnumerateSessionsA(hServer, Reserved, Version, ppSessionInfo, pCount);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WTSEnumerateSessionsExW(Windows::Win32::SystemServices::HANDLE hServer, uint32_t* pLevel, uint32_t Filter, Windows::Win32::RemoteDesktopServices::WTS_SESSION_INFO_1W** ppSessionInfo, uint32_t* pCount)
    {
        auto win32_impl_result = WIN32_IMPL_WTSEnumerateSessionsExW(hServer, pLevel, Filter, ppSessionInfo, pCount);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WTSEnumerateSessionsExA(Windows::Win32::SystemServices::HANDLE hServer, uint32_t* pLevel, uint32_t Filter, Windows::Win32::RemoteDesktopServices::WTS_SESSION_INFO_1A** ppSessionInfo, uint32_t* pCount)
    {
        auto win32_impl_result = WIN32_IMPL_WTSEnumerateSessionsExA(hServer, pLevel, Filter, ppSessionInfo, pCount);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WTSEnumerateProcessesW(Windows::Win32::SystemServices::HANDLE hServer, uint32_t Reserved, uint32_t Version, Windows::Win32::RemoteDesktopServices::WTS_PROCESS_INFOW** ppProcessInfo, uint32_t* pCount)
    {
        auto win32_impl_result = WIN32_IMPL_WTSEnumerateProcessesW(hServer, Reserved, Version, ppProcessInfo, pCount);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WTSEnumerateProcessesA(Windows::Win32::SystemServices::HANDLE hServer, uint32_t Reserved, uint32_t Version, Windows::Win32::RemoteDesktopServices::WTS_PROCESS_INFOA** ppProcessInfo, uint32_t* pCount)
    {
        auto win32_impl_result = WIN32_IMPL_WTSEnumerateProcessesA(hServer, Reserved, Version, ppProcessInfo, pCount);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WTSTerminateProcess(Windows::Win32::SystemServices::HANDLE hServer, uint32_t ProcessId, uint32_t ExitCode)
    {
        auto win32_impl_result = WIN32_IMPL_WTSTerminateProcess(hServer, ProcessId, ExitCode);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WTSQuerySessionInformationW(Windows::Win32::SystemServices::HANDLE hServer, uint32_t SessionId, Windows::Win32::RemoteDesktopServices::WTS_INFO_CLASS WTSInfoClass, uint16_t** ppBuffer, uint32_t* pBytesReturned)
    {
        auto win32_impl_result = WIN32_IMPL_WTSQuerySessionInformationW(hServer, SessionId, WTSInfoClass, ppBuffer, pBytesReturned);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WTSQuerySessionInformationA(Windows::Win32::SystemServices::HANDLE hServer, uint32_t SessionId, Windows::Win32::RemoteDesktopServices::WTS_INFO_CLASS WTSInfoClass, int8_t** ppBuffer, uint32_t* pBytesReturned)
    {
        auto win32_impl_result = WIN32_IMPL_WTSQuerySessionInformationA(hServer, SessionId, WTSInfoClass, ppBuffer, pBytesReturned);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WTSQueryUserConfigW(uint16_t* pServerName, uint16_t* pUserName, Windows::Win32::RemoteDesktopServices::WTS_CONFIG_CLASS WTSConfigClass, uint16_t** ppBuffer, uint32_t* pBytesReturned)
    {
        auto win32_impl_result = WIN32_IMPL_WTSQueryUserConfigW(pServerName, pUserName, WTSConfigClass, ppBuffer, pBytesReturned);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WTSQueryUserConfigA(int8_t* pServerName, int8_t* pUserName, Windows::Win32::RemoteDesktopServices::WTS_CONFIG_CLASS WTSConfigClass, int8_t** ppBuffer, uint32_t* pBytesReturned)
    {
        auto win32_impl_result = WIN32_IMPL_WTSQueryUserConfigA(pServerName, pUserName, WTSConfigClass, ppBuffer, pBytesReturned);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WTSSetUserConfigW(uint16_t* pServerName, uint16_t* pUserName, Windows::Win32::RemoteDesktopServices::WTS_CONFIG_CLASS WTSConfigClass, uint16_t* pBuffer, uint32_t DataLength)
    {
        auto win32_impl_result = WIN32_IMPL_WTSSetUserConfigW(pServerName, pUserName, WTSConfigClass, pBuffer, DataLength);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WTSSetUserConfigA(int8_t* pServerName, int8_t* pUserName, Windows::Win32::RemoteDesktopServices::WTS_CONFIG_CLASS WTSConfigClass, int8_t* pBuffer, uint32_t DataLength)
    {
        auto win32_impl_result = WIN32_IMPL_WTSSetUserConfigA(pServerName, pUserName, WTSConfigClass, pBuffer, DataLength);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WTSSendMessageW(Windows::Win32::SystemServices::HANDLE hServer, uint32_t SessionId, uint16_t* pTitle, uint32_t TitleLength, uint16_t* pMessage, uint32_t MessageLength, uint32_t Style, uint32_t Timeout, uint32_t* pResponse, Windows::Win32::SystemServices::BOOL bWait)
    {
        auto win32_impl_result = WIN32_IMPL_WTSSendMessageW(hServer, SessionId, pTitle, TitleLength, pMessage, MessageLength, Style, Timeout, pResponse, bWait);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WTSSendMessageA(Windows::Win32::SystemServices::HANDLE hServer, uint32_t SessionId, int8_t* pTitle, uint32_t TitleLength, int8_t* pMessage, uint32_t MessageLength, uint32_t Style, uint32_t Timeout, uint32_t* pResponse, Windows::Win32::SystemServices::BOOL bWait)
    {
        auto win32_impl_result = WIN32_IMPL_WTSSendMessageA(hServer, SessionId, pTitle, TitleLength, pMessage, MessageLength, Style, Timeout, pResponse, bWait);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WTSDisconnectSession(Windows::Win32::SystemServices::HANDLE hServer, uint32_t SessionId, Windows::Win32::SystemServices::BOOL bWait)
    {
        auto win32_impl_result = WIN32_IMPL_WTSDisconnectSession(hServer, SessionId, bWait);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WTSLogoffSession(Windows::Win32::SystemServices::HANDLE hServer, uint32_t SessionId, Windows::Win32::SystemServices::BOOL bWait)
    {
        auto win32_impl_result = WIN32_IMPL_WTSLogoffSession(hServer, SessionId, bWait);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WTSShutdownSystem(Windows::Win32::SystemServices::HANDLE hServer, uint32_t ShutdownFlag)
    {
        auto win32_impl_result = WIN32_IMPL_WTSShutdownSystem(hServer, ShutdownFlag);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WTSWaitSystemEvent(Windows::Win32::SystemServices::HANDLE hServer, uint32_t EventMask, uint32_t* pEventFlags)
    {
        auto win32_impl_result = WIN32_IMPL_WTSWaitSystemEvent(hServer, EventMask, pEventFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::RemoteDesktopServices::HwtsVirtualChannelHandle WTSVirtualChannelOpen(Windows::Win32::SystemServices::HANDLE hServer, uint32_t SessionId, int8_t* pVirtualName)
    {
        auto win32_impl_result = WIN32_IMPL_WTSVirtualChannelOpen(hServer, SessionId, pVirtualName);
        return win32_impl_result;
    }
    inline Windows::Win32::RemoteDesktopServices::HwtsVirtualChannelHandle WTSVirtualChannelOpenEx(uint32_t SessionId, int8_t* pVirtualName, uint32_t flags)
    {
        auto win32_impl_result = WIN32_IMPL_WTSVirtualChannelOpenEx(SessionId, pVirtualName, flags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WTSVirtualChannelClose(Windows::Win32::SystemServices::HANDLE hChannelHandle)
    {
        auto win32_impl_result = WIN32_IMPL_WTSVirtualChannelClose(hChannelHandle);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WTSVirtualChannelRead(Windows::Win32::SystemServices::HANDLE hChannelHandle, uint32_t TimeOut, int8_t* Buffer, uint32_t BufferSize, uint32_t* pBytesRead)
    {
        auto win32_impl_result = WIN32_IMPL_WTSVirtualChannelRead(hChannelHandle, TimeOut, Buffer, BufferSize, pBytesRead);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WTSVirtualChannelWrite(Windows::Win32::SystemServices::HANDLE hChannelHandle, int8_t* Buffer, uint32_t Length, uint32_t* pBytesWritten)
    {
        auto win32_impl_result = WIN32_IMPL_WTSVirtualChannelWrite(hChannelHandle, Buffer, Length, pBytesWritten);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WTSVirtualChannelPurgeInput(Windows::Win32::SystemServices::HANDLE hChannelHandle)
    {
        auto win32_impl_result = WIN32_IMPL_WTSVirtualChannelPurgeInput(hChannelHandle);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WTSVirtualChannelPurgeOutput(Windows::Win32::SystemServices::HANDLE hChannelHandle)
    {
        auto win32_impl_result = WIN32_IMPL_WTSVirtualChannelPurgeOutput(hChannelHandle);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WTSVirtualChannelQuery(Windows::Win32::SystemServices::HANDLE hChannelHandle, Windows::Win32::RemoteDesktopServices::WTS_VIRTUAL_CLASS param1, void** ppBuffer, uint32_t* pBytesReturned)
    {
        auto win32_impl_result = WIN32_IMPL_WTSVirtualChannelQuery(hChannelHandle, param1, ppBuffer, pBytesReturned);
        return win32_impl_result;
    }
    inline void WTSFreeMemory(void* pMemory)
    {
        WIN32_IMPL_WTSFreeMemory(pMemory);
    }
    inline Windows::Win32::SystemServices::BOOL WTSRegisterSessionNotification(Windows::Win32::WindowsAndMessaging::HWND hWnd, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_WTSRegisterSessionNotification(hWnd, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WTSUnRegisterSessionNotification(Windows::Win32::WindowsAndMessaging::HWND hWnd)
    {
        auto win32_impl_result = WIN32_IMPL_WTSUnRegisterSessionNotification(hWnd);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WTSRegisterSessionNotificationEx(Windows::Win32::SystemServices::HANDLE hServer, Windows::Win32::WindowsAndMessaging::HWND hWnd, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_WTSRegisterSessionNotificationEx(hServer, hWnd, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WTSUnRegisterSessionNotificationEx(Windows::Win32::SystemServices::HANDLE hServer, Windows::Win32::WindowsAndMessaging::HWND hWnd)
    {
        auto win32_impl_result = WIN32_IMPL_WTSUnRegisterSessionNotificationEx(hServer, hWnd);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WTSQueryUserToken(uint32_t SessionId, intptr_t* phToken)
    {
        auto win32_impl_result = WIN32_IMPL_WTSQueryUserToken(SessionId, phToken);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WTSFreeMemoryExW(Windows::Win32::RemoteDesktopServices::WTS_TYPE_CLASS WTSTypeClass, void* pMemory, uint32_t NumberOfEntries)
    {
        auto win32_impl_result = WIN32_IMPL_WTSFreeMemoryExW(WTSTypeClass, pMemory, NumberOfEntries);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WTSFreeMemoryExA(Windows::Win32::RemoteDesktopServices::WTS_TYPE_CLASS WTSTypeClass, void* pMemory, uint32_t NumberOfEntries)
    {
        auto win32_impl_result = WIN32_IMPL_WTSFreeMemoryExA(WTSTypeClass, pMemory, NumberOfEntries);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WTSEnumerateProcessesExW(Windows::Win32::SystemServices::HANDLE hServer, uint32_t* pLevel, uint32_t SessionId, uint16_t** ppProcessInfo, uint32_t* pCount)
    {
        auto win32_impl_result = WIN32_IMPL_WTSEnumerateProcessesExW(hServer, pLevel, SessionId, ppProcessInfo, pCount);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WTSEnumerateProcessesExA(Windows::Win32::SystemServices::HANDLE hServer, uint32_t* pLevel, uint32_t SessionId, int8_t** ppProcessInfo, uint32_t* pCount)
    {
        auto win32_impl_result = WIN32_IMPL_WTSEnumerateProcessesExA(hServer, pLevel, SessionId, ppProcessInfo, pCount);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WTSEnumerateListenersW(Windows::Win32::SystemServices::HANDLE hServer, void* pReserved, uint32_t Reserved, uint16_t** pListeners, uint32_t* pCount)
    {
        auto win32_impl_result = WIN32_IMPL_WTSEnumerateListenersW(hServer, pReserved, Reserved, pListeners, pCount);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WTSEnumerateListenersA(Windows::Win32::SystemServices::HANDLE hServer, void* pReserved, uint32_t Reserved, int8_t** pListeners, uint32_t* pCount)
    {
        auto win32_impl_result = WIN32_IMPL_WTSEnumerateListenersA(hServer, pReserved, Reserved, pListeners, pCount);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WTSQueryListenerConfigW(Windows::Win32::SystemServices::HANDLE hServer, void* pReserved, uint32_t Reserved, uint16_t* pListenerName, Windows::Win32::RemoteDesktopServices::WTSLISTENERCONFIGW* pBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_WTSQueryListenerConfigW(hServer, pReserved, Reserved, pListenerName, pBuffer);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WTSQueryListenerConfigA(Windows::Win32::SystemServices::HANDLE hServer, void* pReserved, uint32_t Reserved, int8_t* pListenerName, Windows::Win32::RemoteDesktopServices::WTSLISTENERCONFIGA* pBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_WTSQueryListenerConfigA(hServer, pReserved, Reserved, pListenerName, pBuffer);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WTSCreateListenerW(Windows::Win32::SystemServices::HANDLE hServer, void* pReserved, uint32_t Reserved, uint16_t* pListenerName, Windows::Win32::RemoteDesktopServices::WTSLISTENERCONFIGW* pBuffer, uint32_t flag)
    {
        auto win32_impl_result = WIN32_IMPL_WTSCreateListenerW(hServer, pReserved, Reserved, pListenerName, pBuffer, flag);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WTSCreateListenerA(Windows::Win32::SystemServices::HANDLE hServer, void* pReserved, uint32_t Reserved, int8_t* pListenerName, Windows::Win32::RemoteDesktopServices::WTSLISTENERCONFIGA* pBuffer, uint32_t flag)
    {
        auto win32_impl_result = WIN32_IMPL_WTSCreateListenerA(hServer, pReserved, Reserved, pListenerName, pBuffer, flag);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WTSSetListenerSecurityW(Windows::Win32::SystemServices::HANDLE hServer, void* pReserved, uint32_t Reserved, uint16_t* pListenerName, uint32_t SecurityInformation, void* pSecurityDescriptor)
    {
        auto win32_impl_result = WIN32_IMPL_WTSSetListenerSecurityW(hServer, pReserved, Reserved, pListenerName, SecurityInformation, pSecurityDescriptor);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WTSSetListenerSecurityA(Windows::Win32::SystemServices::HANDLE hServer, void* pReserved, uint32_t Reserved, int8_t* pListenerName, uint32_t SecurityInformation, void* pSecurityDescriptor)
    {
        auto win32_impl_result = WIN32_IMPL_WTSSetListenerSecurityA(hServer, pReserved, Reserved, pListenerName, SecurityInformation, pSecurityDescriptor);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WTSGetListenerSecurityW(Windows::Win32::SystemServices::HANDLE hServer, void* pReserved, uint32_t Reserved, uint16_t* pListenerName, uint32_t SecurityInformation, void* pSecurityDescriptor, uint32_t nLength, uint32_t* lpnLengthNeeded)
    {
        auto win32_impl_result = WIN32_IMPL_WTSGetListenerSecurityW(hServer, pReserved, Reserved, pListenerName, SecurityInformation, pSecurityDescriptor, nLength, lpnLengthNeeded);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WTSGetListenerSecurityA(Windows::Win32::SystemServices::HANDLE hServer, void* pReserved, uint32_t Reserved, int8_t* pListenerName, uint32_t SecurityInformation, void* pSecurityDescriptor, uint32_t nLength, uint32_t* lpnLengthNeeded)
    {
        auto win32_impl_result = WIN32_IMPL_WTSGetListenerSecurityA(hServer, pReserved, Reserved, pListenerName, SecurityInformation, pSecurityDescriptor, nLength, lpnLengthNeeded);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WTSEnableChildSessions(Windows::Win32::SystemServices::BOOL bEnable)
    {
        auto win32_impl_result = WIN32_IMPL_WTSEnableChildSessions(bEnable);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WTSIsChildSessionsEnabled(int32_t* pbEnabled)
    {
        auto win32_impl_result = WIN32_IMPL_WTSIsChildSessionsEnabled(pbEnabled);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WTSGetChildSessionId(uint32_t* pSessionId)
    {
        auto win32_impl_result = WIN32_IMPL_WTSGetChildSessionId(pSessionId);
        return win32_impl_result;
    }
    inline int32_t WTSSetRenderHint(uint64_t* pRenderHintID, Windows::Win32::WindowsAndMessaging::HWND hwndOwner, uint32_t renderHintType, uint32_t cbHintDataLength, uint8_t* pHintData)
    {
        auto win32_impl_result = WIN32_IMPL_WTSSetRenderHint(pRenderHintID, hwndOwner, renderHintType, cbHintDataLength, pHintData);
        return win32_impl_result;
    }

#pragma endregion methods

}
#endif
