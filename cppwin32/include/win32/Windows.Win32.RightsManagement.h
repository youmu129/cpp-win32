// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_RightsManagement_H
#define WIN32_Windows_Win32_RightsManagement_H
#include "win32/base.h"
static_assert(win32::check_version(CPPWIN32_VERSION, "0.0.0.1"), "Mismatched C++/Win32 headers.");
#define CPPWIN32_VERSION "0.0.0.1"
#include "win32/impl/Windows.Win32.RightsManagement.2.h"
WIN32_EXPORT namespace win32::Windows::Win32::RightsManagement
{
#pragma region methods
    inline int32_t DRMSetGlobalOptions(Windows::Win32::RightsManagement::DRMGLOBALOPTIONS eGlobalOptions, void* pvdata, uint32_t dwlen)
    {
        auto win32_impl_result = WIN32_IMPL_DRMSetGlobalOptions(eGlobalOptions, pvdata, dwlen);
        return win32_impl_result;
    }
    inline int32_t DRMGetClientVersion(Windows::Win32::RightsManagement::DRM_CLIENT_VERSION_INFO* pDRMClientVersionInfo)
    {
        auto win32_impl_result = WIN32_IMPL_DRMGetClientVersion(pDRMClientVersionInfo);
        return win32_impl_result;
    }
    inline int32_t DRMInitEnvironment(Windows::Win32::RightsManagement::DRMSECURITYPROVIDERTYPE eSecurityProviderType, Windows::Win32::RightsManagement::DRMSPECTYPE eSpecification, uint16_t* wszSecurityProvider, uint16_t* wszManifestCredentials, uint16_t* wszMachineCredentials, uint32_t* phEnv, uint32_t* phDefaultLibrary)
    {
        auto win32_impl_result = WIN32_IMPL_DRMInitEnvironment(eSecurityProviderType, eSpecification, wszSecurityProvider, wszManifestCredentials, wszMachineCredentials, phEnv, phDefaultLibrary);
        return win32_impl_result;
    }
    inline int32_t DRMLoadLibrary(uint32_t hEnv, Windows::Win32::RightsManagement::DRMSPECTYPE eSpecification, uint16_t* wszLibraryProvider, uint16_t* wszCredentials, uint32_t* phLibrary)
    {
        auto win32_impl_result = WIN32_IMPL_DRMLoadLibrary(hEnv, eSpecification, wszLibraryProvider, wszCredentials, phLibrary);
        return win32_impl_result;
    }
    inline int32_t DRMCreateEnablingPrincipal(uint32_t hEnv, uint32_t hLibrary, uint16_t* wszObject, Windows::Win32::RightsManagement::DRMID* pidPrincipal, uint16_t* wszCredentials, uint32_t* phEnablingPrincipal)
    {
        auto win32_impl_result = WIN32_IMPL_DRMCreateEnablingPrincipal(hEnv, hLibrary, wszObject, pidPrincipal, wszCredentials, phEnablingPrincipal);
        return win32_impl_result;
    }
    inline int32_t DRMCloseHandle(uint32_t handle)
    {
        auto win32_impl_result = WIN32_IMPL_DRMCloseHandle(handle);
        return win32_impl_result;
    }
    inline int32_t DRMCloseEnvironmentHandle(uint32_t hEnv)
    {
        auto win32_impl_result = WIN32_IMPL_DRMCloseEnvironmentHandle(hEnv);
        return win32_impl_result;
    }
    inline int32_t DRMDuplicateHandle(uint32_t hToCopy, uint32_t* phCopy)
    {
        auto win32_impl_result = WIN32_IMPL_DRMDuplicateHandle(hToCopy, phCopy);
        return win32_impl_result;
    }
    inline int32_t DRMDuplicateEnvironmentHandle(uint32_t hToCopy, uint32_t* phCopy)
    {
        auto win32_impl_result = WIN32_IMPL_DRMDuplicateEnvironmentHandle(hToCopy, phCopy);
        return win32_impl_result;
    }
    inline int32_t DRMRegisterRevocationList(uint32_t hEnv, uint16_t* wszRevocationList)
    {
        auto win32_impl_result = WIN32_IMPL_DRMRegisterRevocationList(hEnv, wszRevocationList);
        return win32_impl_result;
    }
    inline int32_t DRMCheckSecurity(uint32_t hEnv, uint32_t cLevel)
    {
        auto win32_impl_result = WIN32_IMPL_DRMCheckSecurity(hEnv, cLevel);
        return win32_impl_result;
    }
    inline int32_t DRMRegisterContent(Windows::Win32::SystemServices::BOOL fRegister)
    {
        auto win32_impl_result = WIN32_IMPL_DRMRegisterContent(fRegister);
        return win32_impl_result;
    }
    inline int32_t DRMEncrypt(uint32_t hCryptoProvider, uint32_t iPosition, uint32_t cNumInBytes, uint8_t* pbInData, uint32_t* pcNumOutBytes, uint8_t* pbOutData)
    {
        auto win32_impl_result = WIN32_IMPL_DRMEncrypt(hCryptoProvider, iPosition, cNumInBytes, pbInData, pcNumOutBytes, pbOutData);
        return win32_impl_result;
    }
    inline int32_t DRMDecrypt(uint32_t hCryptoProvider, uint32_t iPosition, uint32_t cNumInBytes, uint8_t* pbInData, uint32_t* pcNumOutBytes, uint8_t* pbOutData)
    {
        auto win32_impl_result = WIN32_IMPL_DRMDecrypt(hCryptoProvider, iPosition, cNumInBytes, pbInData, pcNumOutBytes, pbOutData);
        return win32_impl_result;
    }
    inline int32_t DRMCreateBoundLicense(uint32_t hEnv, Windows::Win32::RightsManagement::DRMBOUNDLICENSEPARAMS* pParams, uint16_t* wszLicenseChain, uint32_t* phBoundLicense, uint32_t* phErrorLog)
    {
        auto win32_impl_result = WIN32_IMPL_DRMCreateBoundLicense(hEnv, pParams, wszLicenseChain, phBoundLicense, phErrorLog);
        return win32_impl_result;
    }
    inline int32_t DRMCreateEnablingBitsDecryptor(uint32_t hBoundLicense, uint16_t* wszRight, uint32_t hAuxLib, uint16_t* wszAuxPlug, uint32_t* phDecryptor)
    {
        auto win32_impl_result = WIN32_IMPL_DRMCreateEnablingBitsDecryptor(hBoundLicense, wszRight, hAuxLib, wszAuxPlug, phDecryptor);
        return win32_impl_result;
    }
    inline int32_t DRMCreateEnablingBitsEncryptor(uint32_t hBoundLicense, uint16_t* wszRight, uint32_t hAuxLib, uint16_t* wszAuxPlug, uint32_t* phEncryptor)
    {
        auto win32_impl_result = WIN32_IMPL_DRMCreateEnablingBitsEncryptor(hBoundLicense, wszRight, hAuxLib, wszAuxPlug, phEncryptor);
        return win32_impl_result;
    }
    inline int32_t DRMAttest(uint32_t hEnablingPrincipal, uint16_t* wszData, Windows::Win32::RightsManagement::DRMATTESTTYPE eType, uint32_t* pcAttestedBlob, uint16_t* wszAttestedBlob)
    {
        auto win32_impl_result = WIN32_IMPL_DRMAttest(hEnablingPrincipal, wszData, eType, pcAttestedBlob, wszAttestedBlob);
        return win32_impl_result;
    }
    inline int32_t DRMGetTime(uint32_t hEnv, Windows::Win32::RightsManagement::DRMTIMETYPE eTimerIdType, Windows::Win32::WindowsProgramming::SYSTEMTIME* poTimeObject)
    {
        auto win32_impl_result = WIN32_IMPL_DRMGetTime(hEnv, eTimerIdType, poTimeObject);
        return win32_impl_result;
    }
    inline int32_t DRMGetInfo(uint32_t handle, uint16_t* wszAttribute, Windows::Win32::RightsManagement::DRMENCODINGTYPE* peEncoding, uint32_t* pcBuffer, uint8_t* pbBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_DRMGetInfo(handle, wszAttribute, peEncoding, pcBuffer, pbBuffer);
        return win32_impl_result;
    }
    inline int32_t DRMGetEnvironmentInfo(uint32_t handle, uint16_t* wszAttribute, Windows::Win32::RightsManagement::DRMENCODINGTYPE* peEncoding, uint32_t* pcBuffer, uint8_t* pbBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_DRMGetEnvironmentInfo(handle, wszAttribute, peEncoding, pcBuffer, pbBuffer);
        return win32_impl_result;
    }
    inline int32_t DRMGetProcAddress(uint32_t hLibrary, uint16_t* wszProcName, Windows::Win32::SystemServices::FARPROC** ppfnProcAddress)
    {
        auto win32_impl_result = WIN32_IMPL_DRMGetProcAddress(hLibrary, wszProcName, ppfnProcAddress);
        return win32_impl_result;
    }
    inline int32_t DRMGetBoundLicenseObjectCount(uint32_t hQueryRoot, uint16_t* wszSubObjectType, uint32_t* pcSubObjects)
    {
        auto win32_impl_result = WIN32_IMPL_DRMGetBoundLicenseObjectCount(hQueryRoot, wszSubObjectType, pcSubObjects);
        return win32_impl_result;
    }
    inline int32_t DRMGetBoundLicenseObject(uint32_t hQueryRoot, uint16_t* wszSubObjectType, uint32_t iWhich, uint32_t* phSubObject)
    {
        auto win32_impl_result = WIN32_IMPL_DRMGetBoundLicenseObject(hQueryRoot, wszSubObjectType, iWhich, phSubObject);
        return win32_impl_result;
    }
    inline int32_t DRMGetBoundLicenseAttributeCount(uint32_t hQueryRoot, uint16_t* wszAttribute, uint32_t* pcAttributes)
    {
        auto win32_impl_result = WIN32_IMPL_DRMGetBoundLicenseAttributeCount(hQueryRoot, wszAttribute, pcAttributes);
        return win32_impl_result;
    }
    inline int32_t DRMGetBoundLicenseAttribute(uint32_t hQueryRoot, uint16_t* wszAttribute, uint32_t iWhich, Windows::Win32::RightsManagement::DRMENCODINGTYPE* peEncoding, uint32_t* pcBuffer, uint8_t* pbBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_DRMGetBoundLicenseAttribute(hQueryRoot, wszAttribute, iWhich, peEncoding, pcBuffer, pbBuffer);
        return win32_impl_result;
    }
    inline int32_t DRMCreateClientSession(Windows::Win32::RightsManagement::DRMCALLBACK* pfnCallback, uint32_t uCallbackVersion, uint16_t* wszGroupIDProviderType, uint16_t* wszGroupID, uint32_t* phClient)
    {
        auto win32_impl_result = WIN32_IMPL_DRMCreateClientSession(pfnCallback, uCallbackVersion, wszGroupIDProviderType, wszGroupID, phClient);
        return win32_impl_result;
    }
    inline int32_t DRMIsActivated(uint32_t hClient, uint32_t uFlags, Windows::Win32::RightsManagement::DRM_ACTSERV_INFO* pActServInfo)
    {
        auto win32_impl_result = WIN32_IMPL_DRMIsActivated(hClient, uFlags, pActServInfo);
        return win32_impl_result;
    }
    inline int32_t DRMActivate(uint32_t hClient, uint32_t uFlags, uint32_t uLangID, Windows::Win32::RightsManagement::DRM_ACTSERV_INFO* pActServInfo, void* pvContext, Windows::Win32::WindowsAndMessaging::HWND hParentWnd)
    {
        auto win32_impl_result = WIN32_IMPL_DRMActivate(hClient, uFlags, uLangID, pActServInfo, pvContext, hParentWnd);
        return win32_impl_result;
    }
    inline int32_t DRMGetServiceLocation(uint32_t hClient, uint32_t uServiceType, uint32_t uServiceLocation, uint16_t* wszIssuanceLicense, uint32_t* puServiceURLLength, uint16_t* wszServiceURL)
    {
        auto win32_impl_result = WIN32_IMPL_DRMGetServiceLocation(hClient, uServiceType, uServiceLocation, wszIssuanceLicense, puServiceURLLength, wszServiceURL);
        return win32_impl_result;
    }
    inline int32_t DRMCreateLicenseStorageSession(uint32_t hEnv, uint32_t hDefaultLibrary, uint32_t hClient, uint32_t uFlags, uint16_t* wszIssuanceLicense, uint32_t* phLicenseStorage)
    {
        auto win32_impl_result = WIN32_IMPL_DRMCreateLicenseStorageSession(hEnv, hDefaultLibrary, hClient, uFlags, wszIssuanceLicense, phLicenseStorage);
        return win32_impl_result;
    }
    inline int32_t DRMAddLicense(uint32_t hLicenseStorage, uint32_t uFlags, uint16_t* wszLicense)
    {
        auto win32_impl_result = WIN32_IMPL_DRMAddLicense(hLicenseStorage, uFlags, wszLicense);
        return win32_impl_result;
    }
    inline int32_t DRMAcquireAdvisories(uint32_t hLicenseStorage, uint16_t* wszLicense, uint16_t* wszURL, void* pvContext)
    {
        auto win32_impl_result = WIN32_IMPL_DRMAcquireAdvisories(hLicenseStorage, wszLicense, wszURL, pvContext);
        return win32_impl_result;
    }
    inline int32_t DRMEnumerateLicense(uint32_t hSession, uint32_t uFlags, uint32_t uIndex, int32_t* pfSharedFlag, uint32_t* puCertificateDataLen, uint16_t* wszCertificateData)
    {
        auto win32_impl_result = WIN32_IMPL_DRMEnumerateLicense(hSession, uFlags, uIndex, pfSharedFlag, puCertificateDataLen, wszCertificateData);
        return win32_impl_result;
    }
    inline int32_t DRMAcquireLicense(uint32_t hSession, uint32_t uFlags, uint16_t* wszGroupIdentityCredential, uint16_t* wszRequestedRights, uint16_t* wszCustomData, uint16_t* wszURL, void* pvContext)
    {
        auto win32_impl_result = WIN32_IMPL_DRMAcquireLicense(hSession, uFlags, wszGroupIdentityCredential, wszRequestedRights, wszCustomData, wszURL, pvContext);
        return win32_impl_result;
    }
    inline int32_t DRMDeleteLicense(uint32_t hSession, uint16_t* wszLicenseId)
    {
        auto win32_impl_result = WIN32_IMPL_DRMDeleteLicense(hSession, wszLicenseId);
        return win32_impl_result;
    }
    inline int32_t DRMCloseSession(uint32_t hSession)
    {
        auto win32_impl_result = WIN32_IMPL_DRMCloseSession(hSession);
        return win32_impl_result;
    }
    inline int32_t DRMDuplicateSession(uint32_t hSessionIn, uint32_t* phSessionOut)
    {
        auto win32_impl_result = WIN32_IMPL_DRMDuplicateSession(hSessionIn, phSessionOut);
        return win32_impl_result;
    }
    inline int32_t DRMGetSecurityProvider(uint32_t uFlags, uint32_t* puTypeLen, uint16_t* wszType, uint32_t* puPathLen, uint16_t* wszPath)
    {
        auto win32_impl_result = WIN32_IMPL_DRMGetSecurityProvider(uFlags, puTypeLen, wszType, puPathLen, wszPath);
        return win32_impl_result;
    }
    inline int32_t DRMEncode(uint16_t* wszAlgID, uint32_t uDataLen, uint8_t* pbDecodedData, uint32_t* puEncodedStringLen, uint16_t* wszEncodedString)
    {
        auto win32_impl_result = WIN32_IMPL_DRMEncode(wszAlgID, uDataLen, pbDecodedData, puEncodedStringLen, wszEncodedString);
        return win32_impl_result;
    }
    inline int32_t DRMDecode(uint16_t* wszAlgID, uint16_t* wszEncodedString, uint32_t* puDecodedDataLen, uint8_t* pbDecodedData)
    {
        auto win32_impl_result = WIN32_IMPL_DRMDecode(wszAlgID, wszEncodedString, puDecodedDataLen, pbDecodedData);
        return win32_impl_result;
    }
    inline int32_t DRMConstructCertificateChain(uint32_t cCertificates, uint16_t** rgwszCertificates, uint32_t* pcChain, uint16_t* wszChain)
    {
        auto win32_impl_result = WIN32_IMPL_DRMConstructCertificateChain(cCertificates, rgwszCertificates, pcChain, wszChain);
        return win32_impl_result;
    }
    inline int32_t DRMParseUnboundLicense(uint16_t* wszCertificate, uint32_t* phQueryRoot)
    {
        auto win32_impl_result = WIN32_IMPL_DRMParseUnboundLicense(wszCertificate, phQueryRoot);
        return win32_impl_result;
    }
    inline int32_t DRMCloseQueryHandle(uint32_t hQuery)
    {
        auto win32_impl_result = WIN32_IMPL_DRMCloseQueryHandle(hQuery);
        return win32_impl_result;
    }
    inline int32_t DRMGetUnboundLicenseObjectCount(uint32_t hQueryRoot, uint16_t* wszSubObjectType, uint32_t* pcSubObjects)
    {
        auto win32_impl_result = WIN32_IMPL_DRMGetUnboundLicenseObjectCount(hQueryRoot, wszSubObjectType, pcSubObjects);
        return win32_impl_result;
    }
    inline int32_t DRMGetUnboundLicenseObject(uint32_t hQueryRoot, uint16_t* wszSubObjectType, uint32_t iIndex, uint32_t* phSubQuery)
    {
        auto win32_impl_result = WIN32_IMPL_DRMGetUnboundLicenseObject(hQueryRoot, wszSubObjectType, iIndex, phSubQuery);
        return win32_impl_result;
    }
    inline int32_t DRMGetUnboundLicenseAttributeCount(uint32_t hQueryRoot, uint16_t* wszAttributeType, uint32_t* pcAttributes)
    {
        auto win32_impl_result = WIN32_IMPL_DRMGetUnboundLicenseAttributeCount(hQueryRoot, wszAttributeType, pcAttributes);
        return win32_impl_result;
    }
    inline int32_t DRMGetUnboundLicenseAttribute(uint32_t hQueryRoot, uint16_t* wszAttributeType, uint32_t iWhich, Windows::Win32::RightsManagement::DRMENCODINGTYPE* peEncoding, uint32_t* pcBuffer, uint8_t* pbBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_DRMGetUnboundLicenseAttribute(hQueryRoot, wszAttributeType, iWhich, peEncoding, pcBuffer, pbBuffer);
        return win32_impl_result;
    }
    inline int32_t DRMGetCertificateChainCount(uint16_t* wszChain, uint32_t* pcCertCount)
    {
        auto win32_impl_result = WIN32_IMPL_DRMGetCertificateChainCount(wszChain, pcCertCount);
        return win32_impl_result;
    }
    inline int32_t DRMDeconstructCertificateChain(uint16_t* wszChain, uint32_t iWhich, uint32_t* pcCert, uint16_t* wszCert)
    {
        auto win32_impl_result = WIN32_IMPL_DRMDeconstructCertificateChain(wszChain, iWhich, pcCert, wszCert);
        return win32_impl_result;
    }
    inline int32_t DRMVerify(uint16_t* wszData, uint32_t* pcAttestedData, uint16_t* wszAttestedData, Windows::Win32::RightsManagement::DRMATTESTTYPE* peType, uint32_t* pcPrincipal, uint16_t* wszPrincipal, uint32_t* pcManifest, uint16_t* wszManifest)
    {
        auto win32_impl_result = WIN32_IMPL_DRMVerify(wszData, pcAttestedData, wszAttestedData, peType, pcPrincipal, wszPrincipal, pcManifest, wszManifest);
        return win32_impl_result;
    }
    inline int32_t DRMCreateUser(uint16_t* wszUserName, uint16_t* wszUserId, uint16_t* wszUserIdType, uint32_t* phUser)
    {
        auto win32_impl_result = WIN32_IMPL_DRMCreateUser(wszUserName, wszUserId, wszUserIdType, phUser);
        return win32_impl_result;
    }
    inline int32_t DRMCreateRight(uint16_t* wszRightName, Windows::Win32::WindowsProgramming::SYSTEMTIME* pstFrom, Windows::Win32::WindowsProgramming::SYSTEMTIME* pstUntil, uint32_t cExtendedInfo, uint16_t** pwszExtendedInfoName, uint16_t** pwszExtendedInfoValue, uint32_t* phRight)
    {
        auto win32_impl_result = WIN32_IMPL_DRMCreateRight(wszRightName, pstFrom, pstUntil, cExtendedInfo, pwszExtendedInfoName, pwszExtendedInfoValue, phRight);
        return win32_impl_result;
    }
    inline int32_t DRMCreateIssuanceLicense(Windows::Win32::WindowsProgramming::SYSTEMTIME* pstTimeFrom, Windows::Win32::WindowsProgramming::SYSTEMTIME* pstTimeUntil, uint16_t* wszReferralInfoName, uint16_t* wszReferralInfoURL, uint32_t hOwner, uint16_t* wszIssuanceLicense, uint32_t hBoundLicense, uint32_t* phIssuanceLicense)
    {
        auto win32_impl_result = WIN32_IMPL_DRMCreateIssuanceLicense(pstTimeFrom, pstTimeUntil, wszReferralInfoName, wszReferralInfoURL, hOwner, wszIssuanceLicense, hBoundLicense, phIssuanceLicense);
        return win32_impl_result;
    }
    inline int32_t DRMAddRightWithUser(uint32_t hIssuanceLicense, uint32_t hRight, uint32_t hUser)
    {
        auto win32_impl_result = WIN32_IMPL_DRMAddRightWithUser(hIssuanceLicense, hRight, hUser);
        return win32_impl_result;
    }
    inline int32_t DRMClearAllRights(uint32_t hIssuanceLicense)
    {
        auto win32_impl_result = WIN32_IMPL_DRMClearAllRights(hIssuanceLicense);
        return win32_impl_result;
    }
    inline int32_t DRMSetMetaData(uint32_t hIssuanceLicense, uint16_t* wszContentId, uint16_t* wszContentIdType, uint16_t* wszSKUId, uint16_t* wszSKUIdType, uint16_t* wszContentType, uint16_t* wszContentName)
    {
        auto win32_impl_result = WIN32_IMPL_DRMSetMetaData(hIssuanceLicense, wszContentId, wszContentIdType, wszSKUId, wszSKUIdType, wszContentType, wszContentName);
        return win32_impl_result;
    }
    inline int32_t DRMSetUsagePolicy(uint32_t hIssuanceLicense, Windows::Win32::RightsManagement::DRM_USAGEPOLICY_TYPE eUsagePolicyType, Windows::Win32::SystemServices::BOOL fDelete, Windows::Win32::SystemServices::BOOL fExclusion, uint16_t* wszName, uint16_t* wszMinVersion, uint16_t* wszMaxVersion, uint16_t* wszPublicKey, uint16_t* wszDigestAlgorithm, uint8_t* pbDigest, uint32_t cbDigest)
    {
        auto win32_impl_result = WIN32_IMPL_DRMSetUsagePolicy(hIssuanceLicense, eUsagePolicyType, fDelete, fExclusion, wszName, wszMinVersion, wszMaxVersion, wszPublicKey, wszDigestAlgorithm, pbDigest, cbDigest);
        return win32_impl_result;
    }
    inline int32_t DRMSetRevocationPoint(uint32_t hIssuanceLicense, Windows::Win32::SystemServices::BOOL fDelete, uint16_t* wszId, uint16_t* wszIdType, uint16_t* wszURL, Windows::Win32::WindowsProgramming::SYSTEMTIME* pstFrequency, uint16_t* wszName, uint16_t* wszPublicKey)
    {
        auto win32_impl_result = WIN32_IMPL_DRMSetRevocationPoint(hIssuanceLicense, fDelete, wszId, wszIdType, wszURL, pstFrequency, wszName, wszPublicKey);
        return win32_impl_result;
    }
    inline int32_t DRMSetApplicationSpecificData(uint32_t hIssuanceLicense, Windows::Win32::SystemServices::BOOL fDelete, uint16_t* wszName, uint16_t* wszValue)
    {
        auto win32_impl_result = WIN32_IMPL_DRMSetApplicationSpecificData(hIssuanceLicense, fDelete, wszName, wszValue);
        return win32_impl_result;
    }
    inline int32_t DRMSetNameAndDescription(uint32_t hIssuanceLicense, Windows::Win32::SystemServices::BOOL fDelete, uint32_t lcid, uint16_t* wszName, uint16_t* wszDescription)
    {
        auto win32_impl_result = WIN32_IMPL_DRMSetNameAndDescription(hIssuanceLicense, fDelete, lcid, wszName, wszDescription);
        return win32_impl_result;
    }
    inline int32_t DRMSetIntervalTime(uint32_t hIssuanceLicense, uint32_t cDays)
    {
        auto win32_impl_result = WIN32_IMPL_DRMSetIntervalTime(hIssuanceLicense, cDays);
        return win32_impl_result;
    }
    inline int32_t DRMGetIssuanceLicenseTemplate(uint32_t hIssuanceLicense, uint32_t* puIssuanceLicenseTemplateLength, uint16_t* wszIssuanceLicenseTemplate)
    {
        auto win32_impl_result = WIN32_IMPL_DRMGetIssuanceLicenseTemplate(hIssuanceLicense, puIssuanceLicenseTemplateLength, wszIssuanceLicenseTemplate);
        return win32_impl_result;
    }
    inline int32_t DRMGetSignedIssuanceLicense(uint32_t hEnv, uint32_t hIssuanceLicense, uint32_t uFlags, uint8_t* pbSymKey, uint32_t cbSymKey, uint16_t* wszSymKeyType, uint16_t* wszClientLicensorCertificate, Windows::Win32::RightsManagement::DRMCALLBACK* pfnCallback, uint16_t* wszURL, void* pvContext)
    {
        auto win32_impl_result = WIN32_IMPL_DRMGetSignedIssuanceLicense(hEnv, hIssuanceLicense, uFlags, pbSymKey, cbSymKey, wszSymKeyType, wszClientLicensorCertificate, pfnCallback, wszURL, pvContext);
        return win32_impl_result;
    }
    inline int32_t DRMGetSignedIssuanceLicenseEx(uint32_t hEnv, uint32_t hIssuanceLicense, uint32_t uFlags, uint8_t* pbSymKey, uint32_t cbSymKey, uint16_t* wszSymKeyType, void* pvReserved, uint32_t hEnablingPrincipal, uint32_t hBoundLicenseCLC, Windows::Win32::RightsManagement::DRMCALLBACK* pfnCallback, void* pvContext)
    {
        auto win32_impl_result = WIN32_IMPL_DRMGetSignedIssuanceLicenseEx(hEnv, hIssuanceLicense, uFlags, pbSymKey, cbSymKey, wszSymKeyType, pvReserved, hEnablingPrincipal, hBoundLicenseCLC, pfnCallback, pvContext);
        return win32_impl_result;
    }
    inline int32_t DRMClosePubHandle(uint32_t hPub)
    {
        auto win32_impl_result = WIN32_IMPL_DRMClosePubHandle(hPub);
        return win32_impl_result;
    }
    inline int32_t DRMDuplicatePubHandle(uint32_t hPubIn, uint32_t* phPubOut)
    {
        auto win32_impl_result = WIN32_IMPL_DRMDuplicatePubHandle(hPubIn, phPubOut);
        return win32_impl_result;
    }
    inline int32_t DRMGetUserInfo(uint32_t hUser, uint32_t* puUserNameLength, uint16_t* wszUserName, uint32_t* puUserIdLength, uint16_t* wszUserId, uint32_t* puUserIdTypeLength, uint16_t* wszUserIdType)
    {
        auto win32_impl_result = WIN32_IMPL_DRMGetUserInfo(hUser, puUserNameLength, wszUserName, puUserIdLength, wszUserId, puUserIdTypeLength, wszUserIdType);
        return win32_impl_result;
    }
    inline int32_t DRMGetRightInfo(uint32_t hRight, uint32_t* puRightNameLength, uint16_t* wszRightName, Windows::Win32::WindowsProgramming::SYSTEMTIME* pstFrom, Windows::Win32::WindowsProgramming::SYSTEMTIME* pstUntil)
    {
        auto win32_impl_result = WIN32_IMPL_DRMGetRightInfo(hRight, puRightNameLength, wszRightName, pstFrom, pstUntil);
        return win32_impl_result;
    }
    inline int32_t DRMGetRightExtendedInfo(uint32_t hRight, uint32_t uIndex, uint32_t* puExtendedInfoNameLength, uint16_t* wszExtendedInfoName, uint32_t* puExtendedInfoValueLength, uint16_t* wszExtendedInfoValue)
    {
        auto win32_impl_result = WIN32_IMPL_DRMGetRightExtendedInfo(hRight, uIndex, puExtendedInfoNameLength, wszExtendedInfoName, puExtendedInfoValueLength, wszExtendedInfoValue);
        return win32_impl_result;
    }
    inline int32_t DRMGetUsers(uint32_t hIssuanceLicense, uint32_t uIndex, uint32_t* phUser)
    {
        auto win32_impl_result = WIN32_IMPL_DRMGetUsers(hIssuanceLicense, uIndex, phUser);
        return win32_impl_result;
    }
    inline int32_t DRMGetUserRights(uint32_t hIssuanceLicense, uint32_t hUser, uint32_t uIndex, uint32_t* phRight)
    {
        auto win32_impl_result = WIN32_IMPL_DRMGetUserRights(hIssuanceLicense, hUser, uIndex, phRight);
        return win32_impl_result;
    }
    inline int32_t DRMGetMetaData(uint32_t hIssuanceLicense, uint32_t* puContentIdLength, uint16_t* wszContentId, uint32_t* puContentIdTypeLength, uint16_t* wszContentIdType, uint32_t* puSKUIdLength, uint16_t* wszSKUId, uint32_t* puSKUIdTypeLength, uint16_t* wszSKUIdType, uint32_t* puContentTypeLength, uint16_t* wszContentType, uint32_t* puContentNameLength, uint16_t* wszContentName)
    {
        auto win32_impl_result = WIN32_IMPL_DRMGetMetaData(hIssuanceLicense, puContentIdLength, wszContentId, puContentIdTypeLength, wszContentIdType, puSKUIdLength, wszSKUId, puSKUIdTypeLength, wszSKUIdType, puContentTypeLength, wszContentType, puContentNameLength, wszContentName);
        return win32_impl_result;
    }
    inline int32_t DRMGetApplicationSpecificData(uint32_t hIssuanceLicense, uint32_t uIndex, uint32_t* puNameLength, uint16_t* wszName, uint32_t* puValueLength, uint16_t* wszValue)
    {
        auto win32_impl_result = WIN32_IMPL_DRMGetApplicationSpecificData(hIssuanceLicense, uIndex, puNameLength, wszName, puValueLength, wszValue);
        return win32_impl_result;
    }
    inline int32_t DRMGetIssuanceLicenseInfo(uint32_t hIssuanceLicense, Windows::Win32::WindowsProgramming::SYSTEMTIME* pstTimeFrom, Windows::Win32::WindowsProgramming::SYSTEMTIME* pstTimeUntil, uint32_t uFlags, uint32_t* puDistributionPointNameLength, uint16_t* wszDistributionPointName, uint32_t* puDistributionPointURLLength, uint16_t* wszDistributionPointURL, uint32_t* phOwner, int32_t* pfOfficial)
    {
        auto win32_impl_result = WIN32_IMPL_DRMGetIssuanceLicenseInfo(hIssuanceLicense, pstTimeFrom, pstTimeUntil, uFlags, puDistributionPointNameLength, wszDistributionPointName, puDistributionPointURLLength, wszDistributionPointURL, phOwner, pfOfficial);
        return win32_impl_result;
    }
    inline int32_t DRMGetRevocationPoint(uint32_t hIssuanceLicense, uint32_t* puIdLength, uint16_t* wszId, uint32_t* puIdTypeLength, uint16_t* wszIdType, uint32_t* puURLLength, uint16_t* wszRL, Windows::Win32::WindowsProgramming::SYSTEMTIME* pstFrequency, uint32_t* puNameLength, uint16_t* wszName, uint32_t* puPublicKeyLength, uint16_t* wszPublicKey)
    {
        auto win32_impl_result = WIN32_IMPL_DRMGetRevocationPoint(hIssuanceLicense, puIdLength, wszId, puIdTypeLength, wszIdType, puURLLength, wszRL, pstFrequency, puNameLength, wszName, puPublicKeyLength, wszPublicKey);
        return win32_impl_result;
    }
    inline int32_t DRMGetUsagePolicy(uint32_t hIssuanceLicense, uint32_t uIndex, Windows::Win32::RightsManagement::DRM_USAGEPOLICY_TYPE* peUsagePolicyType, int32_t* pfExclusion, uint32_t* puNameLength, uint16_t* wszName, uint32_t* puMinVersionLength, uint16_t* wszMinVersion, uint32_t* puMaxVersionLength, uint16_t* wszMaxVersion, uint32_t* puPublicKeyLength, uint16_t* wszPublicKey, uint32_t* puDigestAlgorithmLength, uint16_t* wszDigestAlgorithm, uint32_t* pcbDigest, uint8_t* pbDigest)
    {
        auto win32_impl_result = WIN32_IMPL_DRMGetUsagePolicy(hIssuanceLicense, uIndex, peUsagePolicyType, pfExclusion, puNameLength, wszName, puMinVersionLength, wszMinVersion, puMaxVersionLength, wszMaxVersion, puPublicKeyLength, wszPublicKey, puDigestAlgorithmLength, wszDigestAlgorithm, pcbDigest, pbDigest);
        return win32_impl_result;
    }
    inline int32_t DRMGetNameAndDescription(uint32_t hIssuanceLicense, uint32_t uIndex, uint32_t* pulcid, uint32_t* puNameLength, uint16_t* wszName, uint32_t* puDescriptionLength, uint16_t* wszDescription)
    {
        auto win32_impl_result = WIN32_IMPL_DRMGetNameAndDescription(hIssuanceLicense, uIndex, pulcid, puNameLength, wszName, puDescriptionLength, wszDescription);
        return win32_impl_result;
    }
    inline int32_t DRMGetOwnerLicense(uint32_t hIssuanceLicense, uint32_t* puOwnerLicenseLength, uint16_t* wszOwnerLicense)
    {
        auto win32_impl_result = WIN32_IMPL_DRMGetOwnerLicense(hIssuanceLicense, puOwnerLicenseLength, wszOwnerLicense);
        return win32_impl_result;
    }
    inline int32_t DRMGetIntervalTime(uint32_t hIssuanceLicense, uint32_t* pcDays)
    {
        auto win32_impl_result = WIN32_IMPL_DRMGetIntervalTime(hIssuanceLicense, pcDays);
        return win32_impl_result;
    }
    inline int32_t DRMRepair()
    {
        auto win32_impl_result = WIN32_IMPL_DRMRepair();
        return win32_impl_result;
    }
    inline int32_t DRMRegisterProtectedWindow(uint32_t hEnv, Windows::Win32::WindowsAndMessaging::HWND hwnd)
    {
        auto win32_impl_result = WIN32_IMPL_DRMRegisterProtectedWindow(hEnv, hwnd);
        return win32_impl_result;
    }
    inline int32_t DRMIsWindowProtected(Windows::Win32::WindowsAndMessaging::HWND hwnd, int32_t* pfProtected)
    {
        auto win32_impl_result = WIN32_IMPL_DRMIsWindowProtected(hwnd, pfProtected);
        return win32_impl_result;
    }
    inline int32_t DRMAcquireIssuanceLicenseTemplate(uint32_t hClient, uint32_t uFlags, void* pvReserved, uint32_t cTemplates, uint16_t** pwszTemplateIds, uint16_t* wszUrl, void* pvContext)
    {
        auto win32_impl_result = WIN32_IMPL_DRMAcquireIssuanceLicenseTemplate(hClient, uFlags, pvReserved, cTemplates, pwszTemplateIds, wszUrl, pvContext);
        return win32_impl_result;
    }

    inline constexpr uint32_t DRMIDVERSION = 0x0;
    inline constexpr uint32_t DRMBOUNDLICENSEPARAMSVERSION = 0x1;
    inline constexpr uint32_t DRMBINDINGFLAGS_IGNORE_VALIDITY_INTERVALS = 0x1;
    inline constexpr uint32_t DRMLICENSEACQDATAVERSION = 0x0;
    inline constexpr uint32_t DRMACTSERVINFOVERSION = 0x0;
    inline constexpr uint32_t DRMCLIENTSTRUCTVERSION = 0x1;
    inline constexpr uint32_t DRMCALLBACKVERSION = 0x1;
#pragma endregion methods

}
#endif
