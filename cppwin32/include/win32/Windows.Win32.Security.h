// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Security_H
#define WIN32_Windows_Win32_Security_H
#include "win32/base.h"
static_assert(win32::check_version(CPPWIN32_VERSION, "0.0.0.1"), "Mismatched C++/Win32 headers.");
#define CPPWIN32_VERSION "0.0.0.1"
#include "win32/impl/Windows.Win32.Security.2.h"
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
#pragma region methods
    inline Windows::Win32::SystemServices::NTSTATUS NetAddServiceAccount(uint16_t* ServerName, uint16_t* AccountName, uint16_t* Password, uint32_t Flags)
    {
        auto win32_impl_result = WIN32_IMPL_NetAddServiceAccount(ServerName, AccountName, Password, Flags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS NetRemoveServiceAccount(uint16_t* ServerName, uint16_t* AccountName, uint32_t Flags)
    {
        auto win32_impl_result = WIN32_IMPL_NetRemoveServiceAccount(ServerName, AccountName, Flags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS NetEnumerateServiceAccounts(uint16_t* ServerName, uint32_t Flags, uint32_t* AccountsCount, uint16_t*** Accounts)
    {
        auto win32_impl_result = WIN32_IMPL_NetEnumerateServiceAccounts(ServerName, Flags, AccountsCount, Accounts);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS NetIsServiceAccount(uint16_t* ServerName, uint16_t* AccountName, int32_t* IsService)
    {
        auto win32_impl_result = WIN32_IMPL_NetIsServiceAccount(ServerName, AccountName, IsService);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS NetQueryServiceAccount(uint16_t* ServerName, uint16_t* AccountName, uint32_t InfoLevel, uint8_t** Buffer)
    {
        auto win32_impl_result = WIN32_IMPL_NetQueryServiceAccount(ServerName, AccountName, InfoLevel, Buffer);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SetServiceBits(Windows::Win32::Security::SERVICE_STATUS_HANDLE__* hServiceStatus, uint32_t dwServiceBits, Windows::Win32::SystemServices::BOOL bSetBitsOn, Windows::Win32::SystemServices::BOOL bUpdateImmediately)
    {
        auto win32_impl_result = WIN32_IMPL_SetServiceBits(hServiceStatus, dwServiceBits, bSetBitsOn, bUpdateImmediately);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ImpersonateNamedPipeClient(Windows::Win32::SystemServices::HANDLE hNamedPipe)
    {
        auto win32_impl_result = WIN32_IMPL_ImpersonateNamedPipeClient(hNamedPipe);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SetUserObjectSecurity(Windows::Win32::SystemServices::HANDLE hObj, uint32_t* pSIRequested, void* pSID)
    {
        auto win32_impl_result = WIN32_IMPL_SetUserObjectSecurity(hObj, pSIRequested, pSID);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetUserObjectSecurity(Windows::Win32::SystemServices::HANDLE hObj, uint32_t* pSIRequested, void* pSID, uint32_t nLength, uint32_t* lpnLengthNeeded)
    {
        auto win32_impl_result = WIN32_IMPL_GetUserObjectSecurity(hObj, pSIRequested, pSID, nLength, lpnLengthNeeded);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AccessCheck(void* pSecurityDescriptor, Windows::Win32::SystemServices::HANDLE ClientToken, uint32_t DesiredAccess, Windows::Win32::Security::GENERIC_MAPPING* GenericMapping, Windows::Win32::Security::PRIVILEGE_SET* PrivilegeSet, uint32_t* PrivilegeSetLength, uint32_t* GrantedAccess, int32_t* AccessStatus)
    {
        auto win32_impl_result = WIN32_IMPL_AccessCheck(pSecurityDescriptor, ClientToken, DesiredAccess, GenericMapping, PrivilegeSet, PrivilegeSetLength, GrantedAccess, AccessStatus);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AccessCheckAndAuditAlarmW(uint16_t* SubsystemName, void* HandleId, uint16_t* ObjectTypeName, uint16_t* ObjectName, void* SecurityDescriptor, uint32_t DesiredAccess, Windows::Win32::Security::GENERIC_MAPPING* GenericMapping, Windows::Win32::SystemServices::BOOL ObjectCreation, uint32_t* GrantedAccess, int32_t* AccessStatus, int32_t* pfGenerateOnClose)
    {
        auto win32_impl_result = WIN32_IMPL_AccessCheckAndAuditAlarmW(SubsystemName, HandleId, ObjectTypeName, ObjectName, SecurityDescriptor, DesiredAccess, GenericMapping, ObjectCreation, GrantedAccess, AccessStatus, pfGenerateOnClose);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AccessCheckByType(void* pSecurityDescriptor, void* PrincipalSelfSid, Windows::Win32::SystemServices::HANDLE ClientToken, uint32_t DesiredAccess, Windows::Win32::Security::OBJECT_TYPE_LIST* ObjectTypeList, uint32_t ObjectTypeListLength, Windows::Win32::Security::GENERIC_MAPPING* GenericMapping, Windows::Win32::Security::PRIVILEGE_SET* PrivilegeSet, uint32_t* PrivilegeSetLength, uint32_t* GrantedAccess, int32_t* AccessStatus)
    {
        auto win32_impl_result = WIN32_IMPL_AccessCheckByType(pSecurityDescriptor, PrincipalSelfSid, ClientToken, DesiredAccess, ObjectTypeList, ObjectTypeListLength, GenericMapping, PrivilegeSet, PrivilegeSetLength, GrantedAccess, AccessStatus);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AccessCheckByTypeResultList(void* pSecurityDescriptor, void* PrincipalSelfSid, Windows::Win32::SystemServices::HANDLE ClientToken, uint32_t DesiredAccess, Windows::Win32::Security::OBJECT_TYPE_LIST* ObjectTypeList, uint32_t ObjectTypeListLength, Windows::Win32::Security::GENERIC_MAPPING* GenericMapping, Windows::Win32::Security::PRIVILEGE_SET* PrivilegeSet, uint32_t* PrivilegeSetLength, uint32_t* GrantedAccessList, uint32_t* AccessStatusList)
    {
        auto win32_impl_result = WIN32_IMPL_AccessCheckByTypeResultList(pSecurityDescriptor, PrincipalSelfSid, ClientToken, DesiredAccess, ObjectTypeList, ObjectTypeListLength, GenericMapping, PrivilegeSet, PrivilegeSetLength, GrantedAccessList, AccessStatusList);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AccessCheckByTypeAndAuditAlarmW(uint16_t* SubsystemName, void* HandleId, uint16_t* ObjectTypeName, uint16_t* ObjectName, void* SecurityDescriptor, void* PrincipalSelfSid, uint32_t DesiredAccess, Windows::Win32::Security::AUDIT_EVENT_TYPE AuditType, uint32_t Flags, Windows::Win32::Security::OBJECT_TYPE_LIST* ObjectTypeList, uint32_t ObjectTypeListLength, Windows::Win32::Security::GENERIC_MAPPING* GenericMapping, Windows::Win32::SystemServices::BOOL ObjectCreation, uint32_t* GrantedAccess, int32_t* AccessStatus, int32_t* pfGenerateOnClose)
    {
        auto win32_impl_result = WIN32_IMPL_AccessCheckByTypeAndAuditAlarmW(SubsystemName, HandleId, ObjectTypeName, ObjectName, SecurityDescriptor, PrincipalSelfSid, DesiredAccess, AuditType, Flags, ObjectTypeList, ObjectTypeListLength, GenericMapping, ObjectCreation, GrantedAccess, AccessStatus, pfGenerateOnClose);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AccessCheckByTypeResultListAndAuditAlarmW(uint16_t* SubsystemName, void* HandleId, uint16_t* ObjectTypeName, uint16_t* ObjectName, void* SecurityDescriptor, void* PrincipalSelfSid, uint32_t DesiredAccess, Windows::Win32::Security::AUDIT_EVENT_TYPE AuditType, uint32_t Flags, Windows::Win32::Security::OBJECT_TYPE_LIST* ObjectTypeList, uint32_t ObjectTypeListLength, Windows::Win32::Security::GENERIC_MAPPING* GenericMapping, Windows::Win32::SystemServices::BOOL ObjectCreation, uint32_t* GrantedAccessList, uint32_t* AccessStatusList, int32_t* pfGenerateOnClose)
    {
        auto win32_impl_result = WIN32_IMPL_AccessCheckByTypeResultListAndAuditAlarmW(SubsystemName, HandleId, ObjectTypeName, ObjectName, SecurityDescriptor, PrincipalSelfSid, DesiredAccess, AuditType, Flags, ObjectTypeList, ObjectTypeListLength, GenericMapping, ObjectCreation, GrantedAccessList, AccessStatusList, pfGenerateOnClose);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AccessCheckByTypeResultListAndAuditAlarmByHandleW(uint16_t* SubsystemName, void* HandleId, Windows::Win32::SystemServices::HANDLE ClientToken, uint16_t* ObjectTypeName, uint16_t* ObjectName, void* SecurityDescriptor, void* PrincipalSelfSid, uint32_t DesiredAccess, Windows::Win32::Security::AUDIT_EVENT_TYPE AuditType, uint32_t Flags, Windows::Win32::Security::OBJECT_TYPE_LIST* ObjectTypeList, uint32_t ObjectTypeListLength, Windows::Win32::Security::GENERIC_MAPPING* GenericMapping, Windows::Win32::SystemServices::BOOL ObjectCreation, uint32_t* GrantedAccessList, uint32_t* AccessStatusList, int32_t* pfGenerateOnClose)
    {
        auto win32_impl_result = WIN32_IMPL_AccessCheckByTypeResultListAndAuditAlarmByHandleW(SubsystemName, HandleId, ClientToken, ObjectTypeName, ObjectName, SecurityDescriptor, PrincipalSelfSid, DesiredAccess, AuditType, Flags, ObjectTypeList, ObjectTypeListLength, GenericMapping, ObjectCreation, GrantedAccessList, AccessStatusList, pfGenerateOnClose);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AddAccessAllowedAce(Windows::Win32::Security::ACL* pAcl, uint32_t dwAceRevision, uint32_t AccessMask, void* pSid)
    {
        auto win32_impl_result = WIN32_IMPL_AddAccessAllowedAce(pAcl, dwAceRevision, AccessMask, pSid);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AddAccessAllowedAceEx(Windows::Win32::Security::ACL* pAcl, uint32_t dwAceRevision, uint32_t AceFlags, uint32_t AccessMask, void* pSid)
    {
        auto win32_impl_result = WIN32_IMPL_AddAccessAllowedAceEx(pAcl, dwAceRevision, AceFlags, AccessMask, pSid);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AddAccessAllowedObjectAce(Windows::Win32::Security::ACL* pAcl, uint32_t dwAceRevision, uint32_t AceFlags, uint32_t AccessMask, ::win32::guid* ObjectTypeGuid, ::win32::guid* InheritedObjectTypeGuid, void* pSid)
    {
        auto win32_impl_result = WIN32_IMPL_AddAccessAllowedObjectAce(pAcl, dwAceRevision, AceFlags, AccessMask, ObjectTypeGuid, InheritedObjectTypeGuid, pSid);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AddAccessDeniedAce(Windows::Win32::Security::ACL* pAcl, uint32_t dwAceRevision, uint32_t AccessMask, void* pSid)
    {
        auto win32_impl_result = WIN32_IMPL_AddAccessDeniedAce(pAcl, dwAceRevision, AccessMask, pSid);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AddAccessDeniedAceEx(Windows::Win32::Security::ACL* pAcl, uint32_t dwAceRevision, uint32_t AceFlags, uint32_t AccessMask, void* pSid)
    {
        auto win32_impl_result = WIN32_IMPL_AddAccessDeniedAceEx(pAcl, dwAceRevision, AceFlags, AccessMask, pSid);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AddAccessDeniedObjectAce(Windows::Win32::Security::ACL* pAcl, uint32_t dwAceRevision, uint32_t AceFlags, uint32_t AccessMask, ::win32::guid* ObjectTypeGuid, ::win32::guid* InheritedObjectTypeGuid, void* pSid)
    {
        auto win32_impl_result = WIN32_IMPL_AddAccessDeniedObjectAce(pAcl, dwAceRevision, AceFlags, AccessMask, ObjectTypeGuid, InheritedObjectTypeGuid, pSid);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AddAce(Windows::Win32::Security::ACL* pAcl, uint32_t dwAceRevision, uint32_t dwStartingAceIndex, void* pAceList, uint32_t nAceListLength)
    {
        auto win32_impl_result = WIN32_IMPL_AddAce(pAcl, dwAceRevision, dwStartingAceIndex, pAceList, nAceListLength);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AddAuditAccessAce(Windows::Win32::Security::ACL* pAcl, uint32_t dwAceRevision, uint32_t dwAccessMask, void* pSid, Windows::Win32::SystemServices::BOOL bAuditSuccess, Windows::Win32::SystemServices::BOOL bAuditFailure)
    {
        auto win32_impl_result = WIN32_IMPL_AddAuditAccessAce(pAcl, dwAceRevision, dwAccessMask, pSid, bAuditSuccess, bAuditFailure);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AddAuditAccessAceEx(Windows::Win32::Security::ACL* pAcl, uint32_t dwAceRevision, uint32_t AceFlags, uint32_t dwAccessMask, void* pSid, Windows::Win32::SystemServices::BOOL bAuditSuccess, Windows::Win32::SystemServices::BOOL bAuditFailure)
    {
        auto win32_impl_result = WIN32_IMPL_AddAuditAccessAceEx(pAcl, dwAceRevision, AceFlags, dwAccessMask, pSid, bAuditSuccess, bAuditFailure);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AddAuditAccessObjectAce(Windows::Win32::Security::ACL* pAcl, uint32_t dwAceRevision, uint32_t AceFlags, uint32_t AccessMask, ::win32::guid* ObjectTypeGuid, ::win32::guid* InheritedObjectTypeGuid, void* pSid, Windows::Win32::SystemServices::BOOL bAuditSuccess, Windows::Win32::SystemServices::BOOL bAuditFailure)
    {
        auto win32_impl_result = WIN32_IMPL_AddAuditAccessObjectAce(pAcl, dwAceRevision, AceFlags, AccessMask, ObjectTypeGuid, InheritedObjectTypeGuid, pSid, bAuditSuccess, bAuditFailure);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AddMandatoryAce(Windows::Win32::Security::ACL* pAcl, uint32_t dwAceRevision, uint32_t AceFlags, uint32_t MandatoryPolicy, void* pLabelSid)
    {
        auto win32_impl_result = WIN32_IMPL_AddMandatoryAce(pAcl, dwAceRevision, AceFlags, MandatoryPolicy, pLabelSid);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AddResourceAttributeAce(Windows::Win32::Security::ACL* pAcl, uint32_t dwAceRevision, uint32_t AceFlags, uint32_t AccessMask, void* pSid, Windows::Win32::Security::CLAIM_SECURITY_ATTRIBUTES_INFORMATION* pAttributeInfo, uint32_t* pReturnLength)
    {
        auto win32_impl_result = WIN32_IMPL_AddResourceAttributeAce(pAcl, dwAceRevision, AceFlags, AccessMask, pSid, pAttributeInfo, pReturnLength);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AddScopedPolicyIDAce(Windows::Win32::Security::ACL* pAcl, uint32_t dwAceRevision, uint32_t AceFlags, uint32_t AccessMask, void* pSid)
    {
        auto win32_impl_result = WIN32_IMPL_AddScopedPolicyIDAce(pAcl, dwAceRevision, AceFlags, AccessMask, pSid);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AdjustTokenGroups(Windows::Win32::SystemServices::HANDLE TokenHandle, Windows::Win32::SystemServices::BOOL ResetToDefault, Windows::Win32::Security::TOKEN_GROUPS* NewState, uint32_t BufferLength, Windows::Win32::Security::TOKEN_GROUPS* PreviousState, uint32_t* ReturnLength)
    {
        auto win32_impl_result = WIN32_IMPL_AdjustTokenGroups(TokenHandle, ResetToDefault, NewState, BufferLength, PreviousState, ReturnLength);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AdjustTokenPrivileges(Windows::Win32::SystemServices::HANDLE TokenHandle, Windows::Win32::SystemServices::BOOL DisableAllPrivileges, Windows::Win32::Security::TOKEN_PRIVILEGES* NewState, uint32_t BufferLength, Windows::Win32::Security::TOKEN_PRIVILEGES* PreviousState, uint32_t* ReturnLength)
    {
        auto win32_impl_result = WIN32_IMPL_AdjustTokenPrivileges(TokenHandle, DisableAllPrivileges, NewState, BufferLength, PreviousState, ReturnLength);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AllocateAndInitializeSid(Windows::Win32::Security::SID_IDENTIFIER_AUTHORITY* pIdentifierAuthority, uint8_t nSubAuthorityCount, uint32_t nSubAuthority0, uint32_t nSubAuthority1, uint32_t nSubAuthority2, uint32_t nSubAuthority3, uint32_t nSubAuthority4, uint32_t nSubAuthority5, uint32_t nSubAuthority6, uint32_t nSubAuthority7, void** pSid)
    {
        auto win32_impl_result = WIN32_IMPL_AllocateAndInitializeSid(pIdentifierAuthority, nSubAuthorityCount, nSubAuthority0, nSubAuthority1, nSubAuthority2, nSubAuthority3, nSubAuthority4, nSubAuthority5, nSubAuthority6, nSubAuthority7, pSid);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AllocateLocallyUniqueId(Windows::Win32::Kernel::LUID* Luid)
    {
        auto win32_impl_result = WIN32_IMPL_AllocateLocallyUniqueId(Luid);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AreAllAccessesGranted(uint32_t GrantedAccess, uint32_t DesiredAccess)
    {
        auto win32_impl_result = WIN32_IMPL_AreAllAccessesGranted(GrantedAccess, DesiredAccess);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AreAnyAccessesGranted(uint32_t GrantedAccess, uint32_t DesiredAccess)
    {
        auto win32_impl_result = WIN32_IMPL_AreAnyAccessesGranted(GrantedAccess, DesiredAccess);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CheckTokenMembership(Windows::Win32::SystemServices::HANDLE TokenHandle, void* SidToCheck, int32_t* IsMember)
    {
        auto win32_impl_result = WIN32_IMPL_CheckTokenMembership(TokenHandle, SidToCheck, IsMember);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CheckTokenCapability(Windows::Win32::SystemServices::HANDLE TokenHandle, void* CapabilitySidToCheck, int32_t* HasCapability)
    {
        auto win32_impl_result = WIN32_IMPL_CheckTokenCapability(TokenHandle, CapabilitySidToCheck, HasCapability);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetAppContainerAce(Windows::Win32::Security::ACL* Acl, uint32_t StartingAceIndex, void** AppContainerAce, uint32_t* AppContainerAceIndex)
    {
        auto win32_impl_result = WIN32_IMPL_GetAppContainerAce(Acl, StartingAceIndex, AppContainerAce, AppContainerAceIndex);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CheckTokenMembershipEx(Windows::Win32::SystemServices::HANDLE TokenHandle, void* SidToCheck, uint32_t Flags, int32_t* IsMember)
    {
        auto win32_impl_result = WIN32_IMPL_CheckTokenMembershipEx(TokenHandle, SidToCheck, Flags, IsMember);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ConvertToAutoInheritPrivateObjectSecurity(void* ParentDescriptor, void* CurrentSecurityDescriptor, void** NewSecurityDescriptor, ::win32::guid* ObjectType, uint8_t IsDirectoryObject, Windows::Win32::Security::GENERIC_MAPPING* GenericMapping)
    {
        auto win32_impl_result = WIN32_IMPL_ConvertToAutoInheritPrivateObjectSecurity(ParentDescriptor, CurrentSecurityDescriptor, NewSecurityDescriptor, ObjectType, IsDirectoryObject, GenericMapping);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CopySid(uint32_t nDestinationSidLength, void* pDestinationSid, void* pSourceSid)
    {
        auto win32_impl_result = WIN32_IMPL_CopySid(nDestinationSidLength, pDestinationSid, pSourceSid);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CreatePrivateObjectSecurity(void* ParentDescriptor, void* CreatorDescriptor, void** NewDescriptor, Windows::Win32::SystemServices::BOOL IsDirectoryObject, Windows::Win32::SystemServices::HANDLE Token, Windows::Win32::Security::GENERIC_MAPPING* GenericMapping)
    {
        auto win32_impl_result = WIN32_IMPL_CreatePrivateObjectSecurity(ParentDescriptor, CreatorDescriptor, NewDescriptor, IsDirectoryObject, Token, GenericMapping);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CreatePrivateObjectSecurityEx(void* ParentDescriptor, void* CreatorDescriptor, void** NewDescriptor, ::win32::guid* ObjectType, Windows::Win32::SystemServices::BOOL IsContainerObject, uint32_t AutoInheritFlags, Windows::Win32::SystemServices::HANDLE Token, Windows::Win32::Security::GENERIC_MAPPING* GenericMapping)
    {
        auto win32_impl_result = WIN32_IMPL_CreatePrivateObjectSecurityEx(ParentDescriptor, CreatorDescriptor, NewDescriptor, ObjectType, IsContainerObject, AutoInheritFlags, Token, GenericMapping);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CreatePrivateObjectSecurityWithMultipleInheritance(void* ParentDescriptor, void* CreatorDescriptor, void** NewDescriptor, ::win32::guid** ObjectTypes, uint32_t GuidCount, Windows::Win32::SystemServices::BOOL IsContainerObject, uint32_t AutoInheritFlags, Windows::Win32::SystemServices::HANDLE Token, Windows::Win32::Security::GENERIC_MAPPING* GenericMapping)
    {
        auto win32_impl_result = WIN32_IMPL_CreatePrivateObjectSecurityWithMultipleInheritance(ParentDescriptor, CreatorDescriptor, NewDescriptor, ObjectTypes, GuidCount, IsContainerObject, AutoInheritFlags, Token, GenericMapping);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CreateRestrictedToken(Windows::Win32::SystemServices::HANDLE ExistingTokenHandle, uint32_t Flags, uint32_t DisableSidCount, Windows::Win32::Security::SID_AND_ATTRIBUTES* SidsToDisable, uint32_t DeletePrivilegeCount, Windows::Win32::Security::LUID_AND_ATTRIBUTES* PrivilegesToDelete, uint32_t RestrictedSidCount, Windows::Win32::Security::SID_AND_ATTRIBUTES* SidsToRestrict, intptr_t* NewTokenHandle)
    {
        auto win32_impl_result = WIN32_IMPL_CreateRestrictedToken(ExistingTokenHandle, Flags, DisableSidCount, SidsToDisable, DeletePrivilegeCount, PrivilegesToDelete, RestrictedSidCount, SidsToRestrict, NewTokenHandle);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CreateWellKnownSid(Windows::Win32::Security::WELL_KNOWN_SID_TYPE WellKnownSidType, void* DomainSid, void* pSid, uint32_t* cbSid)
    {
        auto win32_impl_result = WIN32_IMPL_CreateWellKnownSid(WellKnownSidType, DomainSid, pSid, cbSid);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL EqualDomainSid(void* pSid1, void* pSid2, int32_t* pfEqual)
    {
        auto win32_impl_result = WIN32_IMPL_EqualDomainSid(pSid1, pSid2, pfEqual);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL DeleteAce(Windows::Win32::Security::ACL* pAcl, uint32_t dwAceIndex)
    {
        auto win32_impl_result = WIN32_IMPL_DeleteAce(pAcl, dwAceIndex);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL DestroyPrivateObjectSecurity(void** ObjectDescriptor)
    {
        auto win32_impl_result = WIN32_IMPL_DestroyPrivateObjectSecurity(ObjectDescriptor);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL DuplicateToken(Windows::Win32::SystemServices::HANDLE ExistingTokenHandle, Windows::Win32::Security::SECURITY_IMPERSONATION_LEVEL ImpersonationLevel, intptr_t* DuplicateTokenHandle)
    {
        auto win32_impl_result = WIN32_IMPL_DuplicateToken(ExistingTokenHandle, ImpersonationLevel, DuplicateTokenHandle);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL DuplicateTokenEx(Windows::Win32::SystemServices::HANDLE hExistingToken, uint32_t dwDesiredAccess, Windows::Win32::SystemServices::SECURITY_ATTRIBUTES* lpTokenAttributes, Windows::Win32::Security::SECURITY_IMPERSONATION_LEVEL ImpersonationLevel, Windows::Win32::Security::TOKEN_TYPE TokenType, intptr_t* phNewToken)
    {
        auto win32_impl_result = WIN32_IMPL_DuplicateTokenEx(hExistingToken, dwDesiredAccess, lpTokenAttributes, ImpersonationLevel, TokenType, phNewToken);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL EqualPrefixSid(void* pSid1, void* pSid2)
    {
        auto win32_impl_result = WIN32_IMPL_EqualPrefixSid(pSid1, pSid2);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL EqualSid(void* pSid1, void* pSid2)
    {
        auto win32_impl_result = WIN32_IMPL_EqualSid(pSid1, pSid2);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL FindFirstFreeAce(Windows::Win32::Security::ACL* pAcl, void** pAce)
    {
        auto win32_impl_result = WIN32_IMPL_FindFirstFreeAce(pAcl, pAce);
        return win32_impl_result;
    }
    inline void* FreeSid(void* pSid)
    {
        auto win32_impl_result = WIN32_IMPL_FreeSid(pSid);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetAce(Windows::Win32::Security::ACL* pAcl, uint32_t dwAceIndex, void** pAce)
    {
        auto win32_impl_result = WIN32_IMPL_GetAce(pAcl, dwAceIndex, pAce);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetAclInformation(Windows::Win32::Security::ACL* pAcl, void* pAclInformation, uint32_t nAclInformationLength, Windows::Win32::Security::ACL_INFORMATION_CLASS dwAclInformationClass)
    {
        auto win32_impl_result = WIN32_IMPL_GetAclInformation(pAcl, pAclInformation, nAclInformationLength, dwAclInformationClass);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetFileSecurityW(uint16_t* lpFileName, uint32_t RequestedInformation, void* pSecurityDescriptor, uint32_t nLength, uint32_t* lpnLengthNeeded)
    {
        auto win32_impl_result = WIN32_IMPL_GetFileSecurityW(lpFileName, RequestedInformation, pSecurityDescriptor, nLength, lpnLengthNeeded);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetKernelObjectSecurity(Windows::Win32::SystemServices::HANDLE Handle, uint32_t RequestedInformation, void* pSecurityDescriptor, uint32_t nLength, uint32_t* lpnLengthNeeded)
    {
        auto win32_impl_result = WIN32_IMPL_GetKernelObjectSecurity(Handle, RequestedInformation, pSecurityDescriptor, nLength, lpnLengthNeeded);
        return win32_impl_result;
    }
    inline uint32_t GetLengthSid(void* pSid)
    {
        auto win32_impl_result = WIN32_IMPL_GetLengthSid(pSid);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetPrivateObjectSecurity(void* ObjectDescriptor, uint32_t SecurityInformation, void* ResultantDescriptor, uint32_t DescriptorLength, uint32_t* ReturnLength)
    {
        auto win32_impl_result = WIN32_IMPL_GetPrivateObjectSecurity(ObjectDescriptor, SecurityInformation, ResultantDescriptor, DescriptorLength, ReturnLength);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetSecurityDescriptorControl(void* pSecurityDescriptor, uint16_t* pControl, uint32_t* lpdwRevision)
    {
        auto win32_impl_result = WIN32_IMPL_GetSecurityDescriptorControl(pSecurityDescriptor, pControl, lpdwRevision);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetSecurityDescriptorDacl(void* pSecurityDescriptor, int32_t* lpbDaclPresent, Windows::Win32::Security::ACL** pDacl, int32_t* lpbDaclDefaulted)
    {
        auto win32_impl_result = WIN32_IMPL_GetSecurityDescriptorDacl(pSecurityDescriptor, lpbDaclPresent, pDacl, lpbDaclDefaulted);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetSecurityDescriptorGroup(void* pSecurityDescriptor, void** pGroup, int32_t* lpbGroupDefaulted)
    {
        auto win32_impl_result = WIN32_IMPL_GetSecurityDescriptorGroup(pSecurityDescriptor, pGroup, lpbGroupDefaulted);
        return win32_impl_result;
    }
    inline uint32_t GetSecurityDescriptorLength(void* pSecurityDescriptor)
    {
        auto win32_impl_result = WIN32_IMPL_GetSecurityDescriptorLength(pSecurityDescriptor);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetSecurityDescriptorOwner(void* pSecurityDescriptor, void** pOwner, int32_t* lpbOwnerDefaulted)
    {
        auto win32_impl_result = WIN32_IMPL_GetSecurityDescriptorOwner(pSecurityDescriptor, pOwner, lpbOwnerDefaulted);
        return win32_impl_result;
    }
    inline uint32_t GetSecurityDescriptorRMControl(void* SecurityDescriptor, uint8_t* RMControl)
    {
        auto win32_impl_result = WIN32_IMPL_GetSecurityDescriptorRMControl(SecurityDescriptor, RMControl);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetSecurityDescriptorSacl(void* pSecurityDescriptor, int32_t* lpbSaclPresent, Windows::Win32::Security::ACL** pSacl, int32_t* lpbSaclDefaulted)
    {
        auto win32_impl_result = WIN32_IMPL_GetSecurityDescriptorSacl(pSecurityDescriptor, lpbSaclPresent, pSacl, lpbSaclDefaulted);
        return win32_impl_result;
    }
    inline Windows::Win32::Security::SID_IDENTIFIER_AUTHORITY* GetSidIdentifierAuthority(void* pSid)
    {
        auto win32_impl_result = WIN32_IMPL_GetSidIdentifierAuthority(pSid);
        return win32_impl_result;
    }
    inline uint32_t GetSidLengthRequired(uint8_t nSubAuthorityCount)
    {
        auto win32_impl_result = WIN32_IMPL_GetSidLengthRequired(nSubAuthorityCount);
        return win32_impl_result;
    }
    inline uint32_t* GetSidSubAuthority(void* pSid, uint32_t nSubAuthority)
    {
        auto win32_impl_result = WIN32_IMPL_GetSidSubAuthority(pSid, nSubAuthority);
        return win32_impl_result;
    }
    inline uint8_t* GetSidSubAuthorityCount(void* pSid)
    {
        auto win32_impl_result = WIN32_IMPL_GetSidSubAuthorityCount(pSid);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetTokenInformation(Windows::Win32::SystemServices::HANDLE TokenHandle, Windows::Win32::Security::TOKEN_INFORMATION_CLASS TokenInformationClass, void* TokenInformation, uint32_t TokenInformationLength, uint32_t* ReturnLength)
    {
        auto win32_impl_result = WIN32_IMPL_GetTokenInformation(TokenHandle, TokenInformationClass, TokenInformation, TokenInformationLength, ReturnLength);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetWindowsAccountDomainSid(void* pSid, void* pDomainSid, uint32_t* cbDomainSid)
    {
        auto win32_impl_result = WIN32_IMPL_GetWindowsAccountDomainSid(pSid, pDomainSid, cbDomainSid);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ImpersonateAnonymousToken(Windows::Win32::SystemServices::HANDLE ThreadHandle)
    {
        auto win32_impl_result = WIN32_IMPL_ImpersonateAnonymousToken(ThreadHandle);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ImpersonateLoggedOnUser(Windows::Win32::SystemServices::HANDLE hToken)
    {
        auto win32_impl_result = WIN32_IMPL_ImpersonateLoggedOnUser(hToken);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ImpersonateSelf(Windows::Win32::Security::SECURITY_IMPERSONATION_LEVEL ImpersonationLevel)
    {
        auto win32_impl_result = WIN32_IMPL_ImpersonateSelf(ImpersonationLevel);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL InitializeAcl(Windows::Win32::Security::ACL* pAcl, uint32_t nAclLength, uint32_t dwAclRevision)
    {
        auto win32_impl_result = WIN32_IMPL_InitializeAcl(pAcl, nAclLength, dwAclRevision);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL InitializeSecurityDescriptor(void* pSecurityDescriptor, uint32_t dwRevision)
    {
        auto win32_impl_result = WIN32_IMPL_InitializeSecurityDescriptor(pSecurityDescriptor, dwRevision);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL InitializeSid(void* Sid, Windows::Win32::Security::SID_IDENTIFIER_AUTHORITY* pIdentifierAuthority, uint8_t nSubAuthorityCount)
    {
        auto win32_impl_result = WIN32_IMPL_InitializeSid(Sid, pIdentifierAuthority, nSubAuthorityCount);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL IsTokenRestricted(Windows::Win32::SystemServices::HANDLE TokenHandle)
    {
        auto win32_impl_result = WIN32_IMPL_IsTokenRestricted(TokenHandle);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL IsValidAcl(Windows::Win32::Security::ACL* pAcl)
    {
        auto win32_impl_result = WIN32_IMPL_IsValidAcl(pAcl);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL IsValidSecurityDescriptor(void* pSecurityDescriptor)
    {
        auto win32_impl_result = WIN32_IMPL_IsValidSecurityDescriptor(pSecurityDescriptor);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL IsValidSid(void* pSid)
    {
        auto win32_impl_result = WIN32_IMPL_IsValidSid(pSid);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL IsWellKnownSid(void* pSid, Windows::Win32::Security::WELL_KNOWN_SID_TYPE WellKnownSidType)
    {
        auto win32_impl_result = WIN32_IMPL_IsWellKnownSid(pSid, WellKnownSidType);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL MakeAbsoluteSD(void* pSelfRelativeSecurityDescriptor, void* pAbsoluteSecurityDescriptor, uint32_t* lpdwAbsoluteSecurityDescriptorSize, Windows::Win32::Security::ACL* pDacl, uint32_t* lpdwDaclSize, Windows::Win32::Security::ACL* pSacl, uint32_t* lpdwSaclSize, void* pOwner, uint32_t* lpdwOwnerSize, void* pPrimaryGroup, uint32_t* lpdwPrimaryGroupSize)
    {
        auto win32_impl_result = WIN32_IMPL_MakeAbsoluteSD(pSelfRelativeSecurityDescriptor, pAbsoluteSecurityDescriptor, lpdwAbsoluteSecurityDescriptorSize, pDacl, lpdwDaclSize, pSacl, lpdwSaclSize, pOwner, lpdwOwnerSize, pPrimaryGroup, lpdwPrimaryGroupSize);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL MakeSelfRelativeSD(void* pAbsoluteSecurityDescriptor, void* pSelfRelativeSecurityDescriptor, uint32_t* lpdwBufferLength)
    {
        auto win32_impl_result = WIN32_IMPL_MakeSelfRelativeSD(pAbsoluteSecurityDescriptor, pSelfRelativeSecurityDescriptor, lpdwBufferLength);
        return win32_impl_result;
    }
    inline void MapGenericMask(uint32_t* AccessMask, Windows::Win32::Security::GENERIC_MAPPING* GenericMapping)
    {
        WIN32_IMPL_MapGenericMask(AccessMask, GenericMapping);
    }
    inline Windows::Win32::SystemServices::BOOL ObjectCloseAuditAlarmW(uint16_t* SubsystemName, void* HandleId, Windows::Win32::SystemServices::BOOL GenerateOnClose)
    {
        auto win32_impl_result = WIN32_IMPL_ObjectCloseAuditAlarmW(SubsystemName, HandleId, GenerateOnClose);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ObjectDeleteAuditAlarmW(uint16_t* SubsystemName, void* HandleId, Windows::Win32::SystemServices::BOOL GenerateOnClose)
    {
        auto win32_impl_result = WIN32_IMPL_ObjectDeleteAuditAlarmW(SubsystemName, HandleId, GenerateOnClose);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ObjectOpenAuditAlarmW(uint16_t* SubsystemName, void* HandleId, uint16_t* ObjectTypeName, uint16_t* ObjectName, void* pSecurityDescriptor, Windows::Win32::SystemServices::HANDLE ClientToken, uint32_t DesiredAccess, uint32_t GrantedAccess, Windows::Win32::Security::PRIVILEGE_SET* Privileges, Windows::Win32::SystemServices::BOOL ObjectCreation, Windows::Win32::SystemServices::BOOL AccessGranted, int32_t* GenerateOnClose)
    {
        auto win32_impl_result = WIN32_IMPL_ObjectOpenAuditAlarmW(SubsystemName, HandleId, ObjectTypeName, ObjectName, pSecurityDescriptor, ClientToken, DesiredAccess, GrantedAccess, Privileges, ObjectCreation, AccessGranted, GenerateOnClose);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ObjectPrivilegeAuditAlarmW(uint16_t* SubsystemName, void* HandleId, Windows::Win32::SystemServices::HANDLE ClientToken, uint32_t DesiredAccess, Windows::Win32::Security::PRIVILEGE_SET* Privileges, Windows::Win32::SystemServices::BOOL AccessGranted)
    {
        auto win32_impl_result = WIN32_IMPL_ObjectPrivilegeAuditAlarmW(SubsystemName, HandleId, ClientToken, DesiredAccess, Privileges, AccessGranted);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL PrivilegeCheck(Windows::Win32::SystemServices::HANDLE ClientToken, Windows::Win32::Security::PRIVILEGE_SET* RequiredPrivileges, int32_t* pfResult)
    {
        auto win32_impl_result = WIN32_IMPL_PrivilegeCheck(ClientToken, RequiredPrivileges, pfResult);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL PrivilegedServiceAuditAlarmW(uint16_t* SubsystemName, uint16_t* ServiceName, Windows::Win32::SystemServices::HANDLE ClientToken, Windows::Win32::Security::PRIVILEGE_SET* Privileges, Windows::Win32::SystemServices::BOOL AccessGranted)
    {
        auto win32_impl_result = WIN32_IMPL_PrivilegedServiceAuditAlarmW(SubsystemName, ServiceName, ClientToken, Privileges, AccessGranted);
        return win32_impl_result;
    }
    inline void QuerySecurityAccessMask(uint32_t SecurityInformation, uint32_t* DesiredAccess)
    {
        WIN32_IMPL_QuerySecurityAccessMask(SecurityInformation, DesiredAccess);
    }
    inline Windows::Win32::SystemServices::BOOL RevertToSelf()
    {
        auto win32_impl_result = WIN32_IMPL_RevertToSelf();
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SetAclInformation(Windows::Win32::Security::ACL* pAcl, void* pAclInformation, uint32_t nAclInformationLength, Windows::Win32::Security::ACL_INFORMATION_CLASS dwAclInformationClass)
    {
        auto win32_impl_result = WIN32_IMPL_SetAclInformation(pAcl, pAclInformation, nAclInformationLength, dwAclInformationClass);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SetFileSecurityW(uint16_t* lpFileName, uint32_t SecurityInformation, void* pSecurityDescriptor)
    {
        auto win32_impl_result = WIN32_IMPL_SetFileSecurityW(lpFileName, SecurityInformation, pSecurityDescriptor);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SetKernelObjectSecurity(Windows::Win32::SystemServices::HANDLE Handle, uint32_t SecurityInformation, void* SecurityDescriptor)
    {
        auto win32_impl_result = WIN32_IMPL_SetKernelObjectSecurity(Handle, SecurityInformation, SecurityDescriptor);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SetPrivateObjectSecurity(uint32_t SecurityInformation, void* ModificationDescriptor, void** ObjectsSecurityDescriptor, Windows::Win32::Security::GENERIC_MAPPING* GenericMapping, Windows::Win32::SystemServices::HANDLE Token)
    {
        auto win32_impl_result = WIN32_IMPL_SetPrivateObjectSecurity(SecurityInformation, ModificationDescriptor, ObjectsSecurityDescriptor, GenericMapping, Token);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SetPrivateObjectSecurityEx(uint32_t SecurityInformation, void* ModificationDescriptor, void** ObjectsSecurityDescriptor, uint32_t AutoInheritFlags, Windows::Win32::Security::GENERIC_MAPPING* GenericMapping, Windows::Win32::SystemServices::HANDLE Token)
    {
        auto win32_impl_result = WIN32_IMPL_SetPrivateObjectSecurityEx(SecurityInformation, ModificationDescriptor, ObjectsSecurityDescriptor, AutoInheritFlags, GenericMapping, Token);
        return win32_impl_result;
    }
    inline void SetSecurityAccessMask(uint32_t SecurityInformation, uint32_t* DesiredAccess)
    {
        WIN32_IMPL_SetSecurityAccessMask(SecurityInformation, DesiredAccess);
    }
    inline Windows::Win32::SystemServices::BOOL SetSecurityDescriptorControl(void* pSecurityDescriptor, uint16_t ControlBitsOfInterest, uint16_t ControlBitsToSet)
    {
        auto win32_impl_result = WIN32_IMPL_SetSecurityDescriptorControl(pSecurityDescriptor, ControlBitsOfInterest, ControlBitsToSet);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SetSecurityDescriptorDacl(void* pSecurityDescriptor, Windows::Win32::SystemServices::BOOL bDaclPresent, Windows::Win32::Security::ACL* pDacl, Windows::Win32::SystemServices::BOOL bDaclDefaulted)
    {
        auto win32_impl_result = WIN32_IMPL_SetSecurityDescriptorDacl(pSecurityDescriptor, bDaclPresent, pDacl, bDaclDefaulted);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SetSecurityDescriptorGroup(void* pSecurityDescriptor, void* pGroup, Windows::Win32::SystemServices::BOOL bGroupDefaulted)
    {
        auto win32_impl_result = WIN32_IMPL_SetSecurityDescriptorGroup(pSecurityDescriptor, pGroup, bGroupDefaulted);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SetSecurityDescriptorOwner(void* pSecurityDescriptor, void* pOwner, Windows::Win32::SystemServices::BOOL bOwnerDefaulted)
    {
        auto win32_impl_result = WIN32_IMPL_SetSecurityDescriptorOwner(pSecurityDescriptor, pOwner, bOwnerDefaulted);
        return win32_impl_result;
    }
    inline uint32_t SetSecurityDescriptorRMControl(void* SecurityDescriptor, uint8_t* RMControl)
    {
        auto win32_impl_result = WIN32_IMPL_SetSecurityDescriptorRMControl(SecurityDescriptor, RMControl);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SetSecurityDescriptorSacl(void* pSecurityDescriptor, Windows::Win32::SystemServices::BOOL bSaclPresent, Windows::Win32::Security::ACL* pSacl, Windows::Win32::SystemServices::BOOL bSaclDefaulted)
    {
        auto win32_impl_result = WIN32_IMPL_SetSecurityDescriptorSacl(pSecurityDescriptor, bSaclPresent, pSacl, bSaclDefaulted);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SetTokenInformation(Windows::Win32::SystemServices::HANDLE TokenHandle, Windows::Win32::Security::TOKEN_INFORMATION_CLASS TokenInformationClass, void* TokenInformation, uint32_t TokenInformationLength)
    {
        auto win32_impl_result = WIN32_IMPL_SetTokenInformation(TokenHandle, TokenInformationClass, TokenInformation, TokenInformationLength);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SetCachedSigningLevel(intptr_t* SourceFiles, uint32_t SourceFileCount, uint32_t Flags, Windows::Win32::SystemServices::HANDLE TargetFile)
    {
        auto win32_impl_result = WIN32_IMPL_SetCachedSigningLevel(SourceFiles, SourceFileCount, Flags, TargetFile);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetCachedSigningLevel(Windows::Win32::SystemServices::HANDLE File, uint32_t* Flags, uint32_t* SigningLevel, uint8_t* Thumbprint, uint32_t* ThumbprintSize, uint32_t* ThumbprintAlgorithm)
    {
        auto win32_impl_result = WIN32_IMPL_GetCachedSigningLevel(File, Flags, SigningLevel, Thumbprint, ThumbprintSize, ThumbprintAlgorithm);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL DeriveCapabilitySidsFromName(uint16_t* CapName, void*** CapabilityGroupSids, uint32_t* CapabilityGroupSidCount, void*** CapabilitySids, uint32_t* CapabilitySidCount)
    {
        auto win32_impl_result = WIN32_IMPL_DeriveCapabilitySidsFromName(CapName, CapabilityGroupSids, CapabilityGroupSidCount, CapabilitySids, CapabilitySidCount);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetAppContainerNamedObjectPath(Windows::Win32::SystemServices::HANDLE Token, void* AppContainerSid, uint32_t ObjectPathLength, uint16_t* ObjectPath, uint32_t* ReturnLength)
    {
        auto win32_impl_result = WIN32_IMPL_GetAppContainerNamedObjectPath(Token, AppContainerSid, ObjectPathLength, ObjectPath, ReturnLength);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptAcquireContextA(size_t* phProv, int8_t* szContainer, int8_t* szProvider, uint32_t dwProvType, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_CryptAcquireContextA(phProv, szContainer, szProvider, dwProvType, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptAcquireContextW(size_t* phProv, uint16_t* szContainer, uint16_t* szProvider, uint32_t dwProvType, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_CryptAcquireContextW(phProv, szContainer, szProvider, dwProvType, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptReleaseContext(size_t hProv, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_CryptReleaseContext(hProv, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptGenKey(size_t hProv, uint32_t Algid, uint32_t dwFlags, size_t* phKey)
    {
        auto win32_impl_result = WIN32_IMPL_CryptGenKey(hProv, Algid, dwFlags, phKey);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptDeriveKey(size_t hProv, uint32_t Algid, size_t hBaseData, uint32_t dwFlags, size_t* phKey)
    {
        auto win32_impl_result = WIN32_IMPL_CryptDeriveKey(hProv, Algid, hBaseData, dwFlags, phKey);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptDestroyKey(size_t hKey)
    {
        auto win32_impl_result = WIN32_IMPL_CryptDestroyKey(hKey);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptSetKeyParam(size_t hKey, uint32_t dwParam, uint8_t* pbData, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_CryptSetKeyParam(hKey, dwParam, pbData, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptGetKeyParam(size_t hKey, uint32_t dwParam, uint8_t* pbData, uint32_t* pdwDataLen, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_CryptGetKeyParam(hKey, dwParam, pbData, pdwDataLen, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptSetHashParam(size_t hHash, uint32_t dwParam, uint8_t* pbData, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_CryptSetHashParam(hHash, dwParam, pbData, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptGetHashParam(size_t hHash, uint32_t dwParam, uint8_t* pbData, uint32_t* pdwDataLen, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_CryptGetHashParam(hHash, dwParam, pbData, pdwDataLen, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptSetProvParam(size_t hProv, uint32_t dwParam, uint8_t* pbData, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_CryptSetProvParam(hProv, dwParam, pbData, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptGetProvParam(size_t hProv, uint32_t dwParam, uint8_t* pbData, uint32_t* pdwDataLen, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_CryptGetProvParam(hProv, dwParam, pbData, pdwDataLen, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptGenRandom(size_t hProv, uint32_t dwLen, uint8_t* pbBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_CryptGenRandom(hProv, dwLen, pbBuffer);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptGetUserKey(size_t hProv, uint32_t dwKeySpec, size_t* phUserKey)
    {
        auto win32_impl_result = WIN32_IMPL_CryptGetUserKey(hProv, dwKeySpec, phUserKey);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptExportKey(size_t hKey, size_t hExpKey, uint32_t dwBlobType, uint32_t dwFlags, uint8_t* pbData, uint32_t* pdwDataLen)
    {
        auto win32_impl_result = WIN32_IMPL_CryptExportKey(hKey, hExpKey, dwBlobType, dwFlags, pbData, pdwDataLen);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptImportKey(size_t hProv, uint8_t* pbData, uint32_t dwDataLen, size_t hPubKey, uint32_t dwFlags, size_t* phKey)
    {
        auto win32_impl_result = WIN32_IMPL_CryptImportKey(hProv, pbData, dwDataLen, hPubKey, dwFlags, phKey);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptEncrypt(size_t hKey, size_t hHash, Windows::Win32::SystemServices::BOOL Final, uint32_t dwFlags, uint8_t* pbData, uint32_t* pdwDataLen, uint32_t dwBufLen)
    {
        auto win32_impl_result = WIN32_IMPL_CryptEncrypt(hKey, hHash, Final, dwFlags, pbData, pdwDataLen, dwBufLen);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptDecrypt(size_t hKey, size_t hHash, Windows::Win32::SystemServices::BOOL Final, uint32_t dwFlags, uint8_t* pbData, uint32_t* pdwDataLen)
    {
        auto win32_impl_result = WIN32_IMPL_CryptDecrypt(hKey, hHash, Final, dwFlags, pbData, pdwDataLen);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptCreateHash(size_t hProv, uint32_t Algid, size_t hKey, uint32_t dwFlags, size_t* phHash)
    {
        auto win32_impl_result = WIN32_IMPL_CryptCreateHash(hProv, Algid, hKey, dwFlags, phHash);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptHashData(size_t hHash, uint8_t* pbData, uint32_t dwDataLen, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_CryptHashData(hHash, pbData, dwDataLen, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptHashSessionKey(size_t hHash, size_t hKey, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_CryptHashSessionKey(hHash, hKey, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptDestroyHash(size_t hHash)
    {
        auto win32_impl_result = WIN32_IMPL_CryptDestroyHash(hHash);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptSignHashA(size_t hHash, uint32_t dwKeySpec, int8_t* szDescription, uint32_t dwFlags, uint8_t* pbSignature, uint32_t* pdwSigLen)
    {
        auto win32_impl_result = WIN32_IMPL_CryptSignHashA(hHash, dwKeySpec, szDescription, dwFlags, pbSignature, pdwSigLen);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptSignHashW(size_t hHash, uint32_t dwKeySpec, uint16_t* szDescription, uint32_t dwFlags, uint8_t* pbSignature, uint32_t* pdwSigLen)
    {
        auto win32_impl_result = WIN32_IMPL_CryptSignHashW(hHash, dwKeySpec, szDescription, dwFlags, pbSignature, pdwSigLen);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptVerifySignatureA(size_t hHash, uint8_t* pbSignature, uint32_t dwSigLen, size_t hPubKey, int8_t* szDescription, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_CryptVerifySignatureA(hHash, pbSignature, dwSigLen, hPubKey, szDescription, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptVerifySignatureW(size_t hHash, uint8_t* pbSignature, uint32_t dwSigLen, size_t hPubKey, uint16_t* szDescription, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_CryptVerifySignatureW(hHash, pbSignature, dwSigLen, hPubKey, szDescription, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptSetProviderA(int8_t* pszProvName, uint32_t dwProvType)
    {
        auto win32_impl_result = WIN32_IMPL_CryptSetProviderA(pszProvName, dwProvType);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptSetProviderW(uint16_t* pszProvName, uint32_t dwProvType)
    {
        auto win32_impl_result = WIN32_IMPL_CryptSetProviderW(pszProvName, dwProvType);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptSetProviderExA(int8_t* pszProvName, uint32_t dwProvType, uint32_t* pdwReserved, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_CryptSetProviderExA(pszProvName, dwProvType, pdwReserved, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptSetProviderExW(uint16_t* pszProvName, uint32_t dwProvType, uint32_t* pdwReserved, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_CryptSetProviderExW(pszProvName, dwProvType, pdwReserved, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptGetDefaultProviderA(uint32_t dwProvType, uint32_t* pdwReserved, uint32_t dwFlags, int8_t* pszProvName, uint32_t* pcbProvName)
    {
        auto win32_impl_result = WIN32_IMPL_CryptGetDefaultProviderA(dwProvType, pdwReserved, dwFlags, pszProvName, pcbProvName);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptGetDefaultProviderW(uint32_t dwProvType, uint32_t* pdwReserved, uint32_t dwFlags, uint16_t* pszProvName, uint32_t* pcbProvName)
    {
        auto win32_impl_result = WIN32_IMPL_CryptGetDefaultProviderW(dwProvType, pdwReserved, dwFlags, pszProvName, pcbProvName);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptEnumProviderTypesA(uint32_t dwIndex, uint32_t* pdwReserved, uint32_t dwFlags, uint32_t* pdwProvType, int8_t* szTypeName, uint32_t* pcbTypeName)
    {
        auto win32_impl_result = WIN32_IMPL_CryptEnumProviderTypesA(dwIndex, pdwReserved, dwFlags, pdwProvType, szTypeName, pcbTypeName);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptEnumProviderTypesW(uint32_t dwIndex, uint32_t* pdwReserved, uint32_t dwFlags, uint32_t* pdwProvType, uint16_t* szTypeName, uint32_t* pcbTypeName)
    {
        auto win32_impl_result = WIN32_IMPL_CryptEnumProviderTypesW(dwIndex, pdwReserved, dwFlags, pdwProvType, szTypeName, pcbTypeName);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptEnumProvidersA(uint32_t dwIndex, uint32_t* pdwReserved, uint32_t dwFlags, uint32_t* pdwProvType, int8_t* szProvName, uint32_t* pcbProvName)
    {
        auto win32_impl_result = WIN32_IMPL_CryptEnumProvidersA(dwIndex, pdwReserved, dwFlags, pdwProvType, szProvName, pcbProvName);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptEnumProvidersW(uint32_t dwIndex, uint32_t* pdwReserved, uint32_t dwFlags, uint32_t* pdwProvType, uint16_t* szProvName, uint32_t* pcbProvName)
    {
        auto win32_impl_result = WIN32_IMPL_CryptEnumProvidersW(dwIndex, pdwReserved, dwFlags, pdwProvType, szProvName, pcbProvName);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptContextAddRef(size_t hProv, uint32_t* pdwReserved, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_CryptContextAddRef(hProv, pdwReserved, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptDuplicateKey(size_t hKey, uint32_t* pdwReserved, uint32_t dwFlags, size_t* phKey)
    {
        auto win32_impl_result = WIN32_IMPL_CryptDuplicateKey(hKey, pdwReserved, dwFlags, phKey);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptDuplicateHash(size_t hHash, uint32_t* pdwReserved, uint32_t dwFlags, size_t* phHash)
    {
        auto win32_impl_result = WIN32_IMPL_CryptDuplicateHash(hHash, pdwReserved, dwFlags, phHash);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS BCryptOpenAlgorithmProvider(void** phAlgorithm, uint16_t* pszAlgId, uint16_t* pszImplementation, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_BCryptOpenAlgorithmProvider(phAlgorithm, pszAlgId, pszImplementation, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS BCryptEnumAlgorithms(uint32_t dwAlgOperations, uint32_t* pAlgCount, Windows::Win32::Security::BCRYPT_ALGORITHM_IDENTIFIER** ppAlgList, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_BCryptEnumAlgorithms(dwAlgOperations, pAlgCount, ppAlgList, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS BCryptEnumProviders(uint16_t* pszAlgId, uint32_t* pImplCount, Windows::Win32::Security::BCRYPT_PROVIDER_NAME** ppImplList, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_BCryptEnumProviders(pszAlgId, pImplCount, ppImplList, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS BCryptGetProperty(void* hObject, uint16_t* pszProperty, uint8_t* pbOutput, uint32_t cbOutput, uint32_t* pcbResult, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_BCryptGetProperty(hObject, pszProperty, pbOutput, cbOutput, pcbResult, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS BCryptSetProperty(void* hObject, uint16_t* pszProperty, uint8_t* pbInput, uint32_t cbInput, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_BCryptSetProperty(hObject, pszProperty, pbInput, cbInput, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS BCryptCloseAlgorithmProvider(void* hAlgorithm, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_BCryptCloseAlgorithmProvider(hAlgorithm, dwFlags);
        return win32_impl_result;
    }
    inline void BCryptFreeBuffer(void* pvBuffer)
    {
        WIN32_IMPL_BCryptFreeBuffer(pvBuffer);
    }
    inline Windows::Win32::SystemServices::NTSTATUS BCryptGenerateSymmetricKey(void* hAlgorithm, void** phKey, uint8_t* pbKeyObject, uint32_t cbKeyObject, uint8_t* pbSecret, uint32_t cbSecret, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_BCryptGenerateSymmetricKey(hAlgorithm, phKey, pbKeyObject, cbKeyObject, pbSecret, cbSecret, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS BCryptGenerateKeyPair(void* hAlgorithm, void** phKey, uint32_t dwLength, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_BCryptGenerateKeyPair(hAlgorithm, phKey, dwLength, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS BCryptEncrypt(void* hKey, uint8_t* pbInput, uint32_t cbInput, void* pPaddingInfo, uint8_t* pbIV, uint32_t cbIV, uint8_t* pbOutput, uint32_t cbOutput, uint32_t* pcbResult, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_BCryptEncrypt(hKey, pbInput, cbInput, pPaddingInfo, pbIV, cbIV, pbOutput, cbOutput, pcbResult, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS BCryptDecrypt(void* hKey, uint8_t* pbInput, uint32_t cbInput, void* pPaddingInfo, uint8_t* pbIV, uint32_t cbIV, uint8_t* pbOutput, uint32_t cbOutput, uint32_t* pcbResult, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_BCryptDecrypt(hKey, pbInput, cbInput, pPaddingInfo, pbIV, cbIV, pbOutput, cbOutput, pcbResult, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS BCryptExportKey(void* hKey, void* hExportKey, uint16_t* pszBlobType, uint8_t* pbOutput, uint32_t cbOutput, uint32_t* pcbResult, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_BCryptExportKey(hKey, hExportKey, pszBlobType, pbOutput, cbOutput, pcbResult, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS BCryptImportKey(void* hAlgorithm, void* hImportKey, uint16_t* pszBlobType, void** phKey, uint8_t* pbKeyObject, uint32_t cbKeyObject, uint8_t* pbInput, uint32_t cbInput, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_BCryptImportKey(hAlgorithm, hImportKey, pszBlobType, phKey, pbKeyObject, cbKeyObject, pbInput, cbInput, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS BCryptImportKeyPair(void* hAlgorithm, void* hImportKey, uint16_t* pszBlobType, void** phKey, uint8_t* pbInput, uint32_t cbInput, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_BCryptImportKeyPair(hAlgorithm, hImportKey, pszBlobType, phKey, pbInput, cbInput, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS BCryptDuplicateKey(void* hKey, void** phNewKey, uint8_t* pbKeyObject, uint32_t cbKeyObject, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_BCryptDuplicateKey(hKey, phNewKey, pbKeyObject, cbKeyObject, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS BCryptFinalizeKeyPair(void* hKey, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_BCryptFinalizeKeyPair(hKey, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS BCryptDestroyKey(void* hKey)
    {
        auto win32_impl_result = WIN32_IMPL_BCryptDestroyKey(hKey);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS BCryptDestroySecret(void* hSecret)
    {
        auto win32_impl_result = WIN32_IMPL_BCryptDestroySecret(hSecret);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS BCryptSignHash(void* hKey, void* pPaddingInfo, uint8_t* pbInput, uint32_t cbInput, uint8_t* pbOutput, uint32_t cbOutput, uint32_t* pcbResult, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_BCryptSignHash(hKey, pPaddingInfo, pbInput, cbInput, pbOutput, cbOutput, pcbResult, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS BCryptVerifySignature(void* hKey, void* pPaddingInfo, uint8_t* pbHash, uint32_t cbHash, uint8_t* pbSignature, uint32_t cbSignature, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_BCryptVerifySignature(hKey, pPaddingInfo, pbHash, cbHash, pbSignature, cbSignature, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS BCryptSecretAgreement(void* hPrivKey, void* hPubKey, void** phAgreedSecret, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_BCryptSecretAgreement(hPrivKey, hPubKey, phAgreedSecret, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS BCryptDeriveKey(void* hSharedSecret, uint16_t* pwszKDF, Windows::Win32::Security::BCryptBufferDesc* pParameterList, uint8_t* pbDerivedKey, uint32_t cbDerivedKey, uint32_t* pcbResult, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_BCryptDeriveKey(hSharedSecret, pwszKDF, pParameterList, pbDerivedKey, cbDerivedKey, pcbResult, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS BCryptKeyDerivation(void* hKey, Windows::Win32::Security::BCryptBufferDesc* pParameterList, uint8_t* pbDerivedKey, uint32_t cbDerivedKey, uint32_t* pcbResult, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_BCryptKeyDerivation(hKey, pParameterList, pbDerivedKey, cbDerivedKey, pcbResult, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS BCryptCreateHash(void* hAlgorithm, void** phHash, uint8_t* pbHashObject, uint32_t cbHashObject, uint8_t* pbSecret, uint32_t cbSecret, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_BCryptCreateHash(hAlgorithm, phHash, pbHashObject, cbHashObject, pbSecret, cbSecret, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS BCryptHashData(void* hHash, uint8_t* pbInput, uint32_t cbInput, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_BCryptHashData(hHash, pbInput, cbInput, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS BCryptFinishHash(void* hHash, uint8_t* pbOutput, uint32_t cbOutput, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_BCryptFinishHash(hHash, pbOutput, cbOutput, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS BCryptCreateMultiHash(void* hAlgorithm, void** phHash, uint32_t nHashes, uint8_t* pbHashObject, uint32_t cbHashObject, uint8_t* pbSecret, uint32_t cbSecret, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_BCryptCreateMultiHash(hAlgorithm, phHash, nHashes, pbHashObject, cbHashObject, pbSecret, cbSecret, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS BCryptProcessMultiOperations(void* hObject, Windows::Win32::Security::BCRYPT_MULTI_OPERATION_TYPE operationType, void* pOperations, uint32_t cbOperations, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_BCryptProcessMultiOperations(hObject, operationType, pOperations, cbOperations, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS BCryptDuplicateHash(void* hHash, void** phNewHash, uint8_t* pbHashObject, uint32_t cbHashObject, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_BCryptDuplicateHash(hHash, phNewHash, pbHashObject, cbHashObject, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS BCryptDestroyHash(void* hHash)
    {
        auto win32_impl_result = WIN32_IMPL_BCryptDestroyHash(hHash);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS BCryptHash(void* hAlgorithm, uint8_t* pbSecret, uint32_t cbSecret, uint8_t* pbInput, uint32_t cbInput, uint8_t* pbOutput, uint32_t cbOutput)
    {
        auto win32_impl_result = WIN32_IMPL_BCryptHash(hAlgorithm, pbSecret, cbSecret, pbInput, cbInput, pbOutput, cbOutput);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS BCryptGenRandom(void* hAlgorithm, uint8_t* pbBuffer, uint32_t cbBuffer, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_BCryptGenRandom(hAlgorithm, pbBuffer, cbBuffer, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS BCryptDeriveKeyCapi(void* hHash, void* hTargetAlg, uint8_t* pbDerivedKey, uint32_t cbDerivedKey, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_BCryptDeriveKeyCapi(hHash, hTargetAlg, pbDerivedKey, cbDerivedKey, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS BCryptDeriveKeyPBKDF2(void* hPrf, uint8_t* pbPassword, uint32_t cbPassword, uint8_t* pbSalt, uint32_t cbSalt, uint64_t cIterations, uint8_t* pbDerivedKey, uint32_t cbDerivedKey, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_BCryptDeriveKeyPBKDF2(hPrf, pbPassword, cbPassword, pbSalt, cbSalt, cIterations, pbDerivedKey, cbDerivedKey, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS BCryptQueryProviderRegistration(uint16_t* pszProvider, uint32_t dwMode, uint32_t dwInterface, uint32_t* pcbBuffer, Windows::Win32::Security::CRYPT_PROVIDER_REG** ppBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_BCryptQueryProviderRegistration(pszProvider, dwMode, dwInterface, pcbBuffer, ppBuffer);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS BCryptEnumRegisteredProviders(uint32_t* pcbBuffer, Windows::Win32::Security::CRYPT_PROVIDERS** ppBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_BCryptEnumRegisteredProviders(pcbBuffer, ppBuffer);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS BCryptCreateContext(uint32_t dwTable, uint16_t* pszContext, Windows::Win32::Security::CRYPT_CONTEXT_CONFIG* pConfig)
    {
        auto win32_impl_result = WIN32_IMPL_BCryptCreateContext(dwTable, pszContext, pConfig);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS BCryptDeleteContext(uint32_t dwTable, uint16_t* pszContext)
    {
        auto win32_impl_result = WIN32_IMPL_BCryptDeleteContext(dwTable, pszContext);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS BCryptEnumContexts(uint32_t dwTable, uint32_t* pcbBuffer, Windows::Win32::Security::CRYPT_CONTEXTS** ppBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_BCryptEnumContexts(dwTable, pcbBuffer, ppBuffer);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS BCryptConfigureContext(uint32_t dwTable, uint16_t* pszContext, Windows::Win32::Security::CRYPT_CONTEXT_CONFIG* pConfig)
    {
        auto win32_impl_result = WIN32_IMPL_BCryptConfigureContext(dwTable, pszContext, pConfig);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS BCryptQueryContextConfiguration(uint32_t dwTable, uint16_t* pszContext, uint32_t* pcbBuffer, Windows::Win32::Security::CRYPT_CONTEXT_CONFIG** ppBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_BCryptQueryContextConfiguration(dwTable, pszContext, pcbBuffer, ppBuffer);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS BCryptAddContextFunction(uint32_t dwTable, uint16_t* pszContext, uint32_t dwInterface, uint16_t* pszFunction, uint32_t dwPosition)
    {
        auto win32_impl_result = WIN32_IMPL_BCryptAddContextFunction(dwTable, pszContext, dwInterface, pszFunction, dwPosition);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS BCryptRemoveContextFunction(uint32_t dwTable, uint16_t* pszContext, uint32_t dwInterface, uint16_t* pszFunction)
    {
        auto win32_impl_result = WIN32_IMPL_BCryptRemoveContextFunction(dwTable, pszContext, dwInterface, pszFunction);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS BCryptEnumContextFunctions(uint32_t dwTable, uint16_t* pszContext, uint32_t dwInterface, uint32_t* pcbBuffer, Windows::Win32::Security::CRYPT_CONTEXT_FUNCTIONS** ppBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_BCryptEnumContextFunctions(dwTable, pszContext, dwInterface, pcbBuffer, ppBuffer);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS BCryptConfigureContextFunction(uint32_t dwTable, uint16_t* pszContext, uint32_t dwInterface, uint16_t* pszFunction, Windows::Win32::Security::CRYPT_CONTEXT_FUNCTION_CONFIG* pConfig)
    {
        auto win32_impl_result = WIN32_IMPL_BCryptConfigureContextFunction(dwTable, pszContext, dwInterface, pszFunction, pConfig);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS BCryptQueryContextFunctionConfiguration(uint32_t dwTable, uint16_t* pszContext, uint32_t dwInterface, uint16_t* pszFunction, uint32_t* pcbBuffer, Windows::Win32::Security::CRYPT_CONTEXT_FUNCTION_CONFIG** ppBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_BCryptQueryContextFunctionConfiguration(dwTable, pszContext, dwInterface, pszFunction, pcbBuffer, ppBuffer);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS BCryptEnumContextFunctionProviders(uint32_t dwTable, uint16_t* pszContext, uint32_t dwInterface, uint16_t* pszFunction, uint32_t* pcbBuffer, Windows::Win32::Security::CRYPT_CONTEXT_FUNCTION_PROVIDERS** ppBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_BCryptEnumContextFunctionProviders(dwTable, pszContext, dwInterface, pszFunction, pcbBuffer, ppBuffer);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS BCryptSetContextFunctionProperty(uint32_t dwTable, uint16_t* pszContext, uint32_t dwInterface, uint16_t* pszFunction, uint16_t* pszProperty, uint32_t cbValue, uint8_t* pbValue)
    {
        auto win32_impl_result = WIN32_IMPL_BCryptSetContextFunctionProperty(dwTable, pszContext, dwInterface, pszFunction, pszProperty, cbValue, pbValue);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS BCryptQueryContextFunctionProperty(uint32_t dwTable, uint16_t* pszContext, uint32_t dwInterface, uint16_t* pszFunction, uint16_t* pszProperty, uint32_t* pcbValue, uint8_t** ppbValue)
    {
        auto win32_impl_result = WIN32_IMPL_BCryptQueryContextFunctionProperty(dwTable, pszContext, dwInterface, pszFunction, pszProperty, pcbValue, ppbValue);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS BCryptRegisterConfigChangeNotify(Windows::Win32::SystemServices::HANDLE* phEvent)
    {
        auto win32_impl_result = WIN32_IMPL_BCryptRegisterConfigChangeNotify(phEvent);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS BCryptUnregisterConfigChangeNotify(Windows::Win32::SystemServices::HANDLE hEvent)
    {
        auto win32_impl_result = WIN32_IMPL_BCryptUnregisterConfigChangeNotify(hEvent);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS BCryptResolveProviders(uint16_t* pszContext, uint32_t dwInterface, uint16_t* pszFunction, uint16_t* pszProvider, uint32_t dwMode, uint32_t dwFlags, uint32_t* pcbBuffer, Windows::Win32::Security::CRYPT_PROVIDER_REFS** ppBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_BCryptResolveProviders(pszContext, dwInterface, pszFunction, pszProvider, dwMode, dwFlags, pcbBuffer, ppBuffer);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS BCryptGetFipsAlgorithmMode(uint8_t* pfEnabled)
    {
        auto win32_impl_result = WIN32_IMPL_BCryptGetFipsAlgorithmMode(pfEnabled);
        return win32_impl_result;
    }
    inline int32_t NCryptOpenStorageProvider(size_t* phProvider, uint16_t* pszProviderName, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_NCryptOpenStorageProvider(phProvider, pszProviderName, dwFlags);
        return win32_impl_result;
    }
    inline int32_t NCryptEnumAlgorithms(size_t hProvider, uint32_t dwAlgOperations, uint32_t* pdwAlgCount, Windows::Win32::Security::NCryptAlgorithmName** ppAlgList, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_NCryptEnumAlgorithms(hProvider, dwAlgOperations, pdwAlgCount, ppAlgList, dwFlags);
        return win32_impl_result;
    }
    inline int32_t NCryptIsAlgSupported(size_t hProvider, uint16_t* pszAlgId, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_NCryptIsAlgSupported(hProvider, pszAlgId, dwFlags);
        return win32_impl_result;
    }
    inline int32_t NCryptEnumKeys(size_t hProvider, uint16_t* pszScope, Windows::Win32::Security::NCryptKeyName** ppKeyName, void** ppEnumState, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_NCryptEnumKeys(hProvider, pszScope, ppKeyName, ppEnumState, dwFlags);
        return win32_impl_result;
    }
    inline int32_t NCryptEnumStorageProviders(uint32_t* pdwProviderCount, Windows::Win32::Security::NCryptProviderName** ppProviderList, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_NCryptEnumStorageProviders(pdwProviderCount, ppProviderList, dwFlags);
        return win32_impl_result;
    }
    inline int32_t NCryptFreeBuffer(void* pvInput)
    {
        auto win32_impl_result = WIN32_IMPL_NCryptFreeBuffer(pvInput);
        return win32_impl_result;
    }
    inline int32_t NCryptOpenKey(size_t hProvider, size_t* phKey, uint16_t* pszKeyName, uint32_t dwLegacyKeySpec, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_NCryptOpenKey(hProvider, phKey, pszKeyName, dwLegacyKeySpec, dwFlags);
        return win32_impl_result;
    }
    inline int32_t NCryptCreatePersistedKey(size_t hProvider, size_t* phKey, uint16_t* pszAlgId, uint16_t* pszKeyName, uint32_t dwLegacyKeySpec, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_NCryptCreatePersistedKey(hProvider, phKey, pszAlgId, pszKeyName, dwLegacyKeySpec, dwFlags);
        return win32_impl_result;
    }
    inline int32_t NCryptGetProperty(size_t hObject, uint16_t* pszProperty, uint8_t* pbOutput, uint32_t cbOutput, uint32_t* pcbResult, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_NCryptGetProperty(hObject, pszProperty, pbOutput, cbOutput, pcbResult, dwFlags);
        return win32_impl_result;
    }
    inline int32_t NCryptSetProperty(size_t hObject, uint16_t* pszProperty, uint8_t* pbInput, uint32_t cbInput, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_NCryptSetProperty(hObject, pszProperty, pbInput, cbInput, dwFlags);
        return win32_impl_result;
    }
    inline int32_t NCryptFinalizeKey(size_t hKey, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_NCryptFinalizeKey(hKey, dwFlags);
        return win32_impl_result;
    }
    inline int32_t NCryptEncrypt(size_t hKey, uint8_t* pbInput, uint32_t cbInput, void* pPaddingInfo, uint8_t* pbOutput, uint32_t cbOutput, uint32_t* pcbResult, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_NCryptEncrypt(hKey, pbInput, cbInput, pPaddingInfo, pbOutput, cbOutput, pcbResult, dwFlags);
        return win32_impl_result;
    }
    inline int32_t NCryptDecrypt(size_t hKey, uint8_t* pbInput, uint32_t cbInput, void* pPaddingInfo, uint8_t* pbOutput, uint32_t cbOutput, uint32_t* pcbResult, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_NCryptDecrypt(hKey, pbInput, cbInput, pPaddingInfo, pbOutput, cbOutput, pcbResult, dwFlags);
        return win32_impl_result;
    }
    inline int32_t NCryptImportKey(size_t hProvider, size_t hImportKey, uint16_t* pszBlobType, Windows::Win32::Security::BCryptBufferDesc* pParameterList, size_t* phKey, uint8_t* pbData, uint32_t cbData, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_NCryptImportKey(hProvider, hImportKey, pszBlobType, pParameterList, phKey, pbData, cbData, dwFlags);
        return win32_impl_result;
    }
    inline int32_t NCryptExportKey(size_t hKey, size_t hExportKey, uint16_t* pszBlobType, Windows::Win32::Security::BCryptBufferDesc* pParameterList, uint8_t* pbOutput, uint32_t cbOutput, uint32_t* pcbResult, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_NCryptExportKey(hKey, hExportKey, pszBlobType, pParameterList, pbOutput, cbOutput, pcbResult, dwFlags);
        return win32_impl_result;
    }
    inline int32_t NCryptSignHash(size_t hKey, void* pPaddingInfo, uint8_t* pbHashValue, uint32_t cbHashValue, uint8_t* pbSignature, uint32_t cbSignature, uint32_t* pcbResult, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_NCryptSignHash(hKey, pPaddingInfo, pbHashValue, cbHashValue, pbSignature, cbSignature, pcbResult, dwFlags);
        return win32_impl_result;
    }
    inline int32_t NCryptVerifySignature(size_t hKey, void* pPaddingInfo, uint8_t* pbHashValue, uint32_t cbHashValue, uint8_t* pbSignature, uint32_t cbSignature, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_NCryptVerifySignature(hKey, pPaddingInfo, pbHashValue, cbHashValue, pbSignature, cbSignature, dwFlags);
        return win32_impl_result;
    }
    inline int32_t NCryptDeleteKey(size_t hKey, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_NCryptDeleteKey(hKey, dwFlags);
        return win32_impl_result;
    }
    inline int32_t NCryptFreeObject(size_t hObject)
    {
        auto win32_impl_result = WIN32_IMPL_NCryptFreeObject(hObject);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL NCryptIsKeyHandle(size_t hKey)
    {
        auto win32_impl_result = WIN32_IMPL_NCryptIsKeyHandle(hKey);
        return win32_impl_result;
    }
    inline int32_t NCryptTranslateHandle(size_t* phProvider, size_t* phKey, size_t hLegacyProv, size_t hLegacyKey, uint32_t dwLegacyKeySpec, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_NCryptTranslateHandle(phProvider, phKey, hLegacyProv, hLegacyKey, dwLegacyKeySpec, dwFlags);
        return win32_impl_result;
    }
    inline int32_t NCryptNotifyChangeKey(size_t hProvider, Windows::Win32::SystemServices::HANDLE* phEvent, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_NCryptNotifyChangeKey(hProvider, phEvent, dwFlags);
        return win32_impl_result;
    }
    inline int32_t NCryptSecretAgreement(size_t hPrivKey, size_t hPubKey, size_t* phAgreedSecret, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_NCryptSecretAgreement(hPrivKey, hPubKey, phAgreedSecret, dwFlags);
        return win32_impl_result;
    }
    inline int32_t NCryptDeriveKey(size_t hSharedSecret, uint16_t* pwszKDF, Windows::Win32::Security::BCryptBufferDesc* pParameterList, uint8_t* pbDerivedKey, uint32_t cbDerivedKey, uint32_t* pcbResult, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_NCryptDeriveKey(hSharedSecret, pwszKDF, pParameterList, pbDerivedKey, cbDerivedKey, pcbResult, dwFlags);
        return win32_impl_result;
    }
    inline int32_t NCryptKeyDerivation(size_t hKey, Windows::Win32::Security::BCryptBufferDesc* pParameterList, uint8_t* pbDerivedKey, uint32_t cbDerivedKey, uint32_t* pcbResult, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_NCryptKeyDerivation(hKey, pParameterList, pbDerivedKey, cbDerivedKey, pcbResult, dwFlags);
        return win32_impl_result;
    }
    inline int32_t NCryptCreateClaim(size_t hSubjectKey, size_t hAuthorityKey, uint32_t dwClaimType, Windows::Win32::Security::BCryptBufferDesc* pParameterList, uint8_t* pbClaimBlob, uint32_t cbClaimBlob, uint32_t* pcbResult, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_NCryptCreateClaim(hSubjectKey, hAuthorityKey, dwClaimType, pParameterList, pbClaimBlob, cbClaimBlob, pcbResult, dwFlags);
        return win32_impl_result;
    }
    inline int32_t NCryptVerifyClaim(size_t hSubjectKey, size_t hAuthorityKey, uint32_t dwClaimType, Windows::Win32::Security::BCryptBufferDesc* pParameterList, uint8_t* pbClaimBlob, uint32_t cbClaimBlob, Windows::Win32::Security::BCryptBufferDesc* pOutput, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_NCryptVerifyClaim(hSubjectKey, hAuthorityKey, dwClaimType, pParameterList, pbClaimBlob, cbClaimBlob, pOutput, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptFormatObject(uint32_t dwCertEncodingType, uint32_t dwFormatType, uint32_t dwFormatStrType, void* pFormatStruct, int8_t* lpszStructType, uint8_t* pbEncoded, uint32_t cbEncoded, void* pbFormat, uint32_t* pcbFormat)
    {
        auto win32_impl_result = WIN32_IMPL_CryptFormatObject(dwCertEncodingType, dwFormatType, dwFormatStrType, pFormatStruct, lpszStructType, pbEncoded, cbEncoded, pbFormat, pcbFormat);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptEncodeObjectEx(uint32_t dwCertEncodingType, int8_t* lpszStructType, void* pvStructInfo, uint32_t dwFlags, Windows::Win32::Security::CRYPT_ENCODE_PARA* pEncodePara, void* pvEncoded, uint32_t* pcbEncoded)
    {
        auto win32_impl_result = WIN32_IMPL_CryptEncodeObjectEx(dwCertEncodingType, lpszStructType, pvStructInfo, dwFlags, pEncodePara, pvEncoded, pcbEncoded);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptEncodeObject(uint32_t dwCertEncodingType, int8_t* lpszStructType, void* pvStructInfo, uint8_t* pbEncoded, uint32_t* pcbEncoded)
    {
        auto win32_impl_result = WIN32_IMPL_CryptEncodeObject(dwCertEncodingType, lpszStructType, pvStructInfo, pbEncoded, pcbEncoded);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptDecodeObjectEx(uint32_t dwCertEncodingType, int8_t* lpszStructType, uint8_t* pbEncoded, uint32_t cbEncoded, uint32_t dwFlags, Windows::Win32::Security::CRYPT_DECODE_PARA* pDecodePara, void* pvStructInfo, uint32_t* pcbStructInfo)
    {
        auto win32_impl_result = WIN32_IMPL_CryptDecodeObjectEx(dwCertEncodingType, lpszStructType, pbEncoded, cbEncoded, dwFlags, pDecodePara, pvStructInfo, pcbStructInfo);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptDecodeObject(uint32_t dwCertEncodingType, int8_t* lpszStructType, uint8_t* pbEncoded, uint32_t cbEncoded, uint32_t dwFlags, void* pvStructInfo, uint32_t* pcbStructInfo)
    {
        auto win32_impl_result = WIN32_IMPL_CryptDecodeObject(dwCertEncodingType, lpszStructType, pbEncoded, cbEncoded, dwFlags, pvStructInfo, pcbStructInfo);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptInstallOIDFunctionAddress(intptr_t hModule, uint32_t dwEncodingType, int8_t* pszFuncName, uint32_t cFuncEntry, Windows::Win32::Security::CRYPT_OID_FUNC_ENTRY* rgFuncEntry, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_CryptInstallOIDFunctionAddress(hModule, dwEncodingType, pszFuncName, cFuncEntry, rgFuncEntry, dwFlags);
        return win32_impl_result;
    }
    inline void* CryptInitOIDFunctionSet(int8_t* pszFuncName, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_CryptInitOIDFunctionSet(pszFuncName, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptGetOIDFunctionAddress(void* hFuncSet, uint32_t dwEncodingType, int8_t* pszOID, uint32_t dwFlags, void** ppvFuncAddr, void** phFuncAddr)
    {
        auto win32_impl_result = WIN32_IMPL_CryptGetOIDFunctionAddress(hFuncSet, dwEncodingType, pszOID, dwFlags, ppvFuncAddr, phFuncAddr);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptGetDefaultOIDDllList(void* hFuncSet, uint32_t dwEncodingType, uint16_t* pwszDllList, uint32_t* pcchDllList)
    {
        auto win32_impl_result = WIN32_IMPL_CryptGetDefaultOIDDllList(hFuncSet, dwEncodingType, pwszDllList, pcchDllList);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptGetDefaultOIDFunctionAddress(void* hFuncSet, uint32_t dwEncodingType, uint16_t* pwszDll, uint32_t dwFlags, void** ppvFuncAddr, void** phFuncAddr)
    {
        auto win32_impl_result = WIN32_IMPL_CryptGetDefaultOIDFunctionAddress(hFuncSet, dwEncodingType, pwszDll, dwFlags, ppvFuncAddr, phFuncAddr);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptFreeOIDFunctionAddress(void* hFuncAddr, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_CryptFreeOIDFunctionAddress(hFuncAddr, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptRegisterOIDFunction(uint32_t dwEncodingType, int8_t* pszFuncName, int8_t* pszOID, uint16_t* pwszDll, int8_t* pszOverrideFuncName)
    {
        auto win32_impl_result = WIN32_IMPL_CryptRegisterOIDFunction(dwEncodingType, pszFuncName, pszOID, pwszDll, pszOverrideFuncName);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptUnregisterOIDFunction(uint32_t dwEncodingType, int8_t* pszFuncName, int8_t* pszOID)
    {
        auto win32_impl_result = WIN32_IMPL_CryptUnregisterOIDFunction(dwEncodingType, pszFuncName, pszOID);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptRegisterDefaultOIDFunction(uint32_t dwEncodingType, int8_t* pszFuncName, uint32_t dwIndex, uint16_t* pwszDll)
    {
        auto win32_impl_result = WIN32_IMPL_CryptRegisterDefaultOIDFunction(dwEncodingType, pszFuncName, dwIndex, pwszDll);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptUnregisterDefaultOIDFunction(uint32_t dwEncodingType, int8_t* pszFuncName, uint16_t* pwszDll)
    {
        auto win32_impl_result = WIN32_IMPL_CryptUnregisterDefaultOIDFunction(dwEncodingType, pszFuncName, pwszDll);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptSetOIDFunctionValue(uint32_t dwEncodingType, int8_t* pszFuncName, int8_t* pszOID, uint16_t* pwszValueName, uint32_t dwValueType, uint8_t* pbValueData, uint32_t cbValueData)
    {
        auto win32_impl_result = WIN32_IMPL_CryptSetOIDFunctionValue(dwEncodingType, pszFuncName, pszOID, pwszValueName, dwValueType, pbValueData, cbValueData);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptGetOIDFunctionValue(uint32_t dwEncodingType, int8_t* pszFuncName, int8_t* pszOID, uint16_t* pwszValueName, uint32_t* pdwValueType, uint8_t* pbValueData, uint32_t* pcbValueData)
    {
        auto win32_impl_result = WIN32_IMPL_CryptGetOIDFunctionValue(dwEncodingType, pszFuncName, pszOID, pwszValueName, pdwValueType, pbValueData, pcbValueData);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptEnumOIDFunction(uint32_t dwEncodingType, int8_t* pszFuncName, int8_t* pszOID, uint32_t dwFlags, void* pvArg, Windows::Win32::Security::PFN_CRYPT_ENUM_OID_FUNC* pfnEnumOIDFunc)
    {
        auto win32_impl_result = WIN32_IMPL_CryptEnumOIDFunction(dwEncodingType, pszFuncName, pszOID, dwFlags, pvArg, pfnEnumOIDFunc);
        return win32_impl_result;
    }
    inline Windows::Win32::Security::CRYPT_OID_INFO* CryptFindOIDInfo(uint32_t dwKeyType, void* pvKey, uint32_t dwGroupId)
    {
        auto win32_impl_result = WIN32_IMPL_CryptFindOIDInfo(dwKeyType, pvKey, dwGroupId);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptRegisterOIDInfo(Windows::Win32::Security::CRYPT_OID_INFO* pInfo, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_CryptRegisterOIDInfo(pInfo, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptUnregisterOIDInfo(Windows::Win32::Security::CRYPT_OID_INFO* pInfo)
    {
        auto win32_impl_result = WIN32_IMPL_CryptUnregisterOIDInfo(pInfo);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptEnumOIDInfo(uint32_t dwGroupId, uint32_t dwFlags, void* pvArg, Windows::Win32::Security::PFN_CRYPT_ENUM_OID_INFO* pfnEnumOIDInfo)
    {
        auto win32_impl_result = WIN32_IMPL_CryptEnumOIDInfo(dwGroupId, dwFlags, pvArg, pfnEnumOIDInfo);
        return win32_impl_result;
    }
    inline uint16_t* CryptFindLocalizedName(uint16_t* pwszCryptName)
    {
        auto win32_impl_result = WIN32_IMPL_CryptFindLocalizedName(pwszCryptName);
        return win32_impl_result;
    }
    inline void* CryptMsgOpenToEncode(uint32_t dwMsgEncodingType, uint32_t dwFlags, uint32_t dwMsgType, void* pvMsgEncodeInfo, int8_t* pszInnerContentObjID, Windows::Win32::Security::CMSG_STREAM_INFO* pStreamInfo)
    {
        auto win32_impl_result = WIN32_IMPL_CryptMsgOpenToEncode(dwMsgEncodingType, dwFlags, dwMsgType, pvMsgEncodeInfo, pszInnerContentObjID, pStreamInfo);
        return win32_impl_result;
    }
    inline uint32_t CryptMsgCalculateEncodedLength(uint32_t dwMsgEncodingType, uint32_t dwFlags, uint32_t dwMsgType, void* pvMsgEncodeInfo, int8_t* pszInnerContentObjID, uint32_t cbData)
    {
        auto win32_impl_result = WIN32_IMPL_CryptMsgCalculateEncodedLength(dwMsgEncodingType, dwFlags, dwMsgType, pvMsgEncodeInfo, pszInnerContentObjID, cbData);
        return win32_impl_result;
    }
    inline void* CryptMsgOpenToDecode(uint32_t dwMsgEncodingType, uint32_t dwFlags, uint32_t dwMsgType, size_t hCryptProv, Windows::Win32::Security::CERT_INFO* pRecipientInfo, Windows::Win32::Security::CMSG_STREAM_INFO* pStreamInfo)
    {
        auto win32_impl_result = WIN32_IMPL_CryptMsgOpenToDecode(dwMsgEncodingType, dwFlags, dwMsgType, hCryptProv, pRecipientInfo, pStreamInfo);
        return win32_impl_result;
    }
    inline void* CryptMsgDuplicate(void* hCryptMsg)
    {
        auto win32_impl_result = WIN32_IMPL_CryptMsgDuplicate(hCryptMsg);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptMsgClose(void* hCryptMsg)
    {
        auto win32_impl_result = WIN32_IMPL_CryptMsgClose(hCryptMsg);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptMsgUpdate(void* hCryptMsg, uint8_t* pbData, uint32_t cbData, Windows::Win32::SystemServices::BOOL fFinal)
    {
        auto win32_impl_result = WIN32_IMPL_CryptMsgUpdate(hCryptMsg, pbData, cbData, fFinal);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptMsgGetParam(void* hCryptMsg, uint32_t dwParamType, uint32_t dwIndex, void* pvData, uint32_t* pcbData)
    {
        auto win32_impl_result = WIN32_IMPL_CryptMsgGetParam(hCryptMsg, dwParamType, dwIndex, pvData, pcbData);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptMsgControl(void* hCryptMsg, uint32_t dwFlags, uint32_t dwCtrlType, void* pvCtrlPara)
    {
        auto win32_impl_result = WIN32_IMPL_CryptMsgControl(hCryptMsg, dwFlags, dwCtrlType, pvCtrlPara);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptMsgVerifyCountersignatureEncoded(size_t hCryptProv, uint32_t dwEncodingType, uint8_t* pbSignerInfo, uint32_t cbSignerInfo, uint8_t* pbSignerInfoCountersignature, uint32_t cbSignerInfoCountersignature, Windows::Win32::Security::CERT_INFO* pciCountersigner)
    {
        auto win32_impl_result = WIN32_IMPL_CryptMsgVerifyCountersignatureEncoded(hCryptProv, dwEncodingType, pbSignerInfo, cbSignerInfo, pbSignerInfoCountersignature, cbSignerInfoCountersignature, pciCountersigner);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptMsgVerifyCountersignatureEncodedEx(size_t hCryptProv, uint32_t dwEncodingType, uint8_t* pbSignerInfo, uint32_t cbSignerInfo, uint8_t* pbSignerInfoCountersignature, uint32_t cbSignerInfoCountersignature, uint32_t dwSignerType, void* pvSigner, uint32_t dwFlags, void* pvExtra)
    {
        auto win32_impl_result = WIN32_IMPL_CryptMsgVerifyCountersignatureEncodedEx(hCryptProv, dwEncodingType, pbSignerInfo, cbSignerInfo, pbSignerInfoCountersignature, cbSignerInfoCountersignature, dwSignerType, pvSigner, dwFlags, pvExtra);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptMsgCountersign(void* hCryptMsg, uint32_t dwIndex, uint32_t cCountersigners, Windows::Win32::Security::CMSG_SIGNER_ENCODE_INFO* rgCountersigners)
    {
        auto win32_impl_result = WIN32_IMPL_CryptMsgCountersign(hCryptMsg, dwIndex, cCountersigners, rgCountersigners);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptMsgCountersignEncoded(uint32_t dwEncodingType, uint8_t* pbSignerInfo, uint32_t cbSignerInfo, uint32_t cCountersigners, Windows::Win32::Security::CMSG_SIGNER_ENCODE_INFO* rgCountersigners, uint8_t* pbCountersignature, uint32_t* pcbCountersignature)
    {
        auto win32_impl_result = WIN32_IMPL_CryptMsgCountersignEncoded(dwEncodingType, pbSignerInfo, cbSignerInfo, cCountersigners, rgCountersigners, pbCountersignature, pcbCountersignature);
        return win32_impl_result;
    }
    inline void* CertOpenStore(int8_t* lpszStoreProvider, uint32_t dwEncodingType, size_t hCryptProv, uint32_t dwFlags, void* pvPara)
    {
        auto win32_impl_result = WIN32_IMPL_CertOpenStore(lpszStoreProvider, dwEncodingType, hCryptProv, dwFlags, pvPara);
        return win32_impl_result;
    }
    inline void* CertDuplicateStore(void* hCertStore)
    {
        auto win32_impl_result = WIN32_IMPL_CertDuplicateStore(hCertStore);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertSaveStore(void* hCertStore, uint32_t dwEncodingType, uint32_t dwSaveAs, uint32_t dwSaveTo, void* pvSaveToPara, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_CertSaveStore(hCertStore, dwEncodingType, dwSaveAs, dwSaveTo, pvSaveToPara, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertCloseStore(void* hCertStore, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_CertCloseStore(hCertStore, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::Security::CERT_CONTEXT* CertGetSubjectCertificateFromStore(void* hCertStore, uint32_t dwCertEncodingType, Windows::Win32::Security::CERT_INFO* pCertId)
    {
        auto win32_impl_result = WIN32_IMPL_CertGetSubjectCertificateFromStore(hCertStore, dwCertEncodingType, pCertId);
        return win32_impl_result;
    }
    inline Windows::Win32::Security::CERT_CONTEXT* CertEnumCertificatesInStore(void* hCertStore, Windows::Win32::Security::CERT_CONTEXT* pPrevCertContext)
    {
        auto win32_impl_result = WIN32_IMPL_CertEnumCertificatesInStore(hCertStore, pPrevCertContext);
        return win32_impl_result;
    }
    inline Windows::Win32::Security::CERT_CONTEXT* CertFindCertificateInStore(void* hCertStore, uint32_t dwCertEncodingType, uint32_t dwFindFlags, uint32_t dwFindType, void* pvFindPara, Windows::Win32::Security::CERT_CONTEXT* pPrevCertContext)
    {
        auto win32_impl_result = WIN32_IMPL_CertFindCertificateInStore(hCertStore, dwCertEncodingType, dwFindFlags, dwFindType, pvFindPara, pPrevCertContext);
        return win32_impl_result;
    }
    inline Windows::Win32::Security::CERT_CONTEXT* CertGetIssuerCertificateFromStore(void* hCertStore, Windows::Win32::Security::CERT_CONTEXT* pSubjectContext, Windows::Win32::Security::CERT_CONTEXT* pPrevIssuerContext, uint32_t* pdwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_CertGetIssuerCertificateFromStore(hCertStore, pSubjectContext, pPrevIssuerContext, pdwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertVerifySubjectCertificateContext(Windows::Win32::Security::CERT_CONTEXT* pSubject, Windows::Win32::Security::CERT_CONTEXT* pIssuer, uint32_t* pdwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_CertVerifySubjectCertificateContext(pSubject, pIssuer, pdwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::Security::CERT_CONTEXT* CertDuplicateCertificateContext(Windows::Win32::Security::CERT_CONTEXT* pCertContext)
    {
        auto win32_impl_result = WIN32_IMPL_CertDuplicateCertificateContext(pCertContext);
        return win32_impl_result;
    }
    inline Windows::Win32::Security::CERT_CONTEXT* CertCreateCertificateContext(uint32_t dwCertEncodingType, uint8_t* pbCertEncoded, uint32_t cbCertEncoded)
    {
        auto win32_impl_result = WIN32_IMPL_CertCreateCertificateContext(dwCertEncodingType, pbCertEncoded, cbCertEncoded);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertFreeCertificateContext(Windows::Win32::Security::CERT_CONTEXT* pCertContext)
    {
        auto win32_impl_result = WIN32_IMPL_CertFreeCertificateContext(pCertContext);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertSetCertificateContextProperty(Windows::Win32::Security::CERT_CONTEXT* pCertContext, uint32_t dwPropId, uint32_t dwFlags, void* pvData)
    {
        auto win32_impl_result = WIN32_IMPL_CertSetCertificateContextProperty(pCertContext, dwPropId, dwFlags, pvData);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertGetCertificateContextProperty(Windows::Win32::Security::CERT_CONTEXT* pCertContext, uint32_t dwPropId, void* pvData, uint32_t* pcbData)
    {
        auto win32_impl_result = WIN32_IMPL_CertGetCertificateContextProperty(pCertContext, dwPropId, pvData, pcbData);
        return win32_impl_result;
    }
    inline uint32_t CertEnumCertificateContextProperties(Windows::Win32::Security::CERT_CONTEXT* pCertContext, uint32_t dwPropId)
    {
        auto win32_impl_result = WIN32_IMPL_CertEnumCertificateContextProperties(pCertContext, dwPropId);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertCreateCTLEntryFromCertificateContextProperties(Windows::Win32::Security::CERT_CONTEXT* pCertContext, uint32_t cOptAttr, Windows::Win32::Security::CRYPT_ATTRIBUTE* rgOptAttr, uint32_t dwFlags, void* pvReserved, Windows::Win32::Security::CTL_ENTRY* pCtlEntry, uint32_t* pcbCtlEntry)
    {
        auto win32_impl_result = WIN32_IMPL_CertCreateCTLEntryFromCertificateContextProperties(pCertContext, cOptAttr, rgOptAttr, dwFlags, pvReserved, pCtlEntry, pcbCtlEntry);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertSetCertificateContextPropertiesFromCTLEntry(Windows::Win32::Security::CERT_CONTEXT* pCertContext, Windows::Win32::Security::CTL_ENTRY* pCtlEntry, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_CertSetCertificateContextPropertiesFromCTLEntry(pCertContext, pCtlEntry, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::Security::CRL_CONTEXT* CertGetCRLFromStore(void* hCertStore, Windows::Win32::Security::CERT_CONTEXT* pIssuerContext, Windows::Win32::Security::CRL_CONTEXT* pPrevCrlContext, uint32_t* pdwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_CertGetCRLFromStore(hCertStore, pIssuerContext, pPrevCrlContext, pdwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::Security::CRL_CONTEXT* CertEnumCRLsInStore(void* hCertStore, Windows::Win32::Security::CRL_CONTEXT* pPrevCrlContext)
    {
        auto win32_impl_result = WIN32_IMPL_CertEnumCRLsInStore(hCertStore, pPrevCrlContext);
        return win32_impl_result;
    }
    inline Windows::Win32::Security::CRL_CONTEXT* CertFindCRLInStore(void* hCertStore, uint32_t dwCertEncodingType, uint32_t dwFindFlags, uint32_t dwFindType, void* pvFindPara, Windows::Win32::Security::CRL_CONTEXT* pPrevCrlContext)
    {
        auto win32_impl_result = WIN32_IMPL_CertFindCRLInStore(hCertStore, dwCertEncodingType, dwFindFlags, dwFindType, pvFindPara, pPrevCrlContext);
        return win32_impl_result;
    }
    inline Windows::Win32::Security::CRL_CONTEXT* CertDuplicateCRLContext(Windows::Win32::Security::CRL_CONTEXT* pCrlContext)
    {
        auto win32_impl_result = WIN32_IMPL_CertDuplicateCRLContext(pCrlContext);
        return win32_impl_result;
    }
    inline Windows::Win32::Security::CRL_CONTEXT* CertCreateCRLContext(uint32_t dwCertEncodingType, uint8_t* pbCrlEncoded, uint32_t cbCrlEncoded)
    {
        auto win32_impl_result = WIN32_IMPL_CertCreateCRLContext(dwCertEncodingType, pbCrlEncoded, cbCrlEncoded);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertFreeCRLContext(Windows::Win32::Security::CRL_CONTEXT* pCrlContext)
    {
        auto win32_impl_result = WIN32_IMPL_CertFreeCRLContext(pCrlContext);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertSetCRLContextProperty(Windows::Win32::Security::CRL_CONTEXT* pCrlContext, uint32_t dwPropId, uint32_t dwFlags, void* pvData)
    {
        auto win32_impl_result = WIN32_IMPL_CertSetCRLContextProperty(pCrlContext, dwPropId, dwFlags, pvData);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertGetCRLContextProperty(Windows::Win32::Security::CRL_CONTEXT* pCrlContext, uint32_t dwPropId, void* pvData, uint32_t* pcbData)
    {
        auto win32_impl_result = WIN32_IMPL_CertGetCRLContextProperty(pCrlContext, dwPropId, pvData, pcbData);
        return win32_impl_result;
    }
    inline uint32_t CertEnumCRLContextProperties(Windows::Win32::Security::CRL_CONTEXT* pCrlContext, uint32_t dwPropId)
    {
        auto win32_impl_result = WIN32_IMPL_CertEnumCRLContextProperties(pCrlContext, dwPropId);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertFindCertificateInCRL(Windows::Win32::Security::CERT_CONTEXT* pCert, Windows::Win32::Security::CRL_CONTEXT* pCrlContext, uint32_t dwFlags, void* pvReserved, Windows::Win32::Security::CRL_ENTRY** ppCrlEntry)
    {
        auto win32_impl_result = WIN32_IMPL_CertFindCertificateInCRL(pCert, pCrlContext, dwFlags, pvReserved, ppCrlEntry);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertIsValidCRLForCertificate(Windows::Win32::Security::CERT_CONTEXT* pCert, Windows::Win32::Security::CRL_CONTEXT* pCrl, uint32_t dwFlags, void* pvReserved)
    {
        auto win32_impl_result = WIN32_IMPL_CertIsValidCRLForCertificate(pCert, pCrl, dwFlags, pvReserved);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertAddEncodedCertificateToStore(void* hCertStore, uint32_t dwCertEncodingType, uint8_t* pbCertEncoded, uint32_t cbCertEncoded, uint32_t dwAddDisposition, Windows::Win32::Security::CERT_CONTEXT** ppCertContext)
    {
        auto win32_impl_result = WIN32_IMPL_CertAddEncodedCertificateToStore(hCertStore, dwCertEncodingType, pbCertEncoded, cbCertEncoded, dwAddDisposition, ppCertContext);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertAddCertificateContextToStore(void* hCertStore, Windows::Win32::Security::CERT_CONTEXT* pCertContext, uint32_t dwAddDisposition, Windows::Win32::Security::CERT_CONTEXT** ppStoreContext)
    {
        auto win32_impl_result = WIN32_IMPL_CertAddCertificateContextToStore(hCertStore, pCertContext, dwAddDisposition, ppStoreContext);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertAddSerializedElementToStore(void* hCertStore, uint8_t* pbElement, uint32_t cbElement, uint32_t dwAddDisposition, uint32_t dwFlags, uint32_t dwContextTypeFlags, uint32_t* pdwContextType, void** ppvContext)
    {
        auto win32_impl_result = WIN32_IMPL_CertAddSerializedElementToStore(hCertStore, pbElement, cbElement, dwAddDisposition, dwFlags, dwContextTypeFlags, pdwContextType, ppvContext);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertDeleteCertificateFromStore(Windows::Win32::Security::CERT_CONTEXT* pCertContext)
    {
        auto win32_impl_result = WIN32_IMPL_CertDeleteCertificateFromStore(pCertContext);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertAddEncodedCRLToStore(void* hCertStore, uint32_t dwCertEncodingType, uint8_t* pbCrlEncoded, uint32_t cbCrlEncoded, uint32_t dwAddDisposition, Windows::Win32::Security::CRL_CONTEXT** ppCrlContext)
    {
        auto win32_impl_result = WIN32_IMPL_CertAddEncodedCRLToStore(hCertStore, dwCertEncodingType, pbCrlEncoded, cbCrlEncoded, dwAddDisposition, ppCrlContext);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertAddCRLContextToStore(void* hCertStore, Windows::Win32::Security::CRL_CONTEXT* pCrlContext, uint32_t dwAddDisposition, Windows::Win32::Security::CRL_CONTEXT** ppStoreContext)
    {
        auto win32_impl_result = WIN32_IMPL_CertAddCRLContextToStore(hCertStore, pCrlContext, dwAddDisposition, ppStoreContext);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertDeleteCRLFromStore(Windows::Win32::Security::CRL_CONTEXT* pCrlContext)
    {
        auto win32_impl_result = WIN32_IMPL_CertDeleteCRLFromStore(pCrlContext);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertSerializeCertificateStoreElement(Windows::Win32::Security::CERT_CONTEXT* pCertContext, uint32_t dwFlags, uint8_t* pbElement, uint32_t* pcbElement)
    {
        auto win32_impl_result = WIN32_IMPL_CertSerializeCertificateStoreElement(pCertContext, dwFlags, pbElement, pcbElement);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertSerializeCRLStoreElement(Windows::Win32::Security::CRL_CONTEXT* pCrlContext, uint32_t dwFlags, uint8_t* pbElement, uint32_t* pcbElement)
    {
        auto win32_impl_result = WIN32_IMPL_CertSerializeCRLStoreElement(pCrlContext, dwFlags, pbElement, pcbElement);
        return win32_impl_result;
    }
    inline Windows::Win32::Security::CTL_CONTEXT* CertDuplicateCTLContext(Windows::Win32::Security::CTL_CONTEXT* pCtlContext)
    {
        auto win32_impl_result = WIN32_IMPL_CertDuplicateCTLContext(pCtlContext);
        return win32_impl_result;
    }
    inline Windows::Win32::Security::CTL_CONTEXT* CertCreateCTLContext(uint32_t dwMsgAndCertEncodingType, uint8_t* pbCtlEncoded, uint32_t cbCtlEncoded)
    {
        auto win32_impl_result = WIN32_IMPL_CertCreateCTLContext(dwMsgAndCertEncodingType, pbCtlEncoded, cbCtlEncoded);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertFreeCTLContext(Windows::Win32::Security::CTL_CONTEXT* pCtlContext)
    {
        auto win32_impl_result = WIN32_IMPL_CertFreeCTLContext(pCtlContext);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertSetCTLContextProperty(Windows::Win32::Security::CTL_CONTEXT* pCtlContext, uint32_t dwPropId, uint32_t dwFlags, void* pvData)
    {
        auto win32_impl_result = WIN32_IMPL_CertSetCTLContextProperty(pCtlContext, dwPropId, dwFlags, pvData);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertGetCTLContextProperty(Windows::Win32::Security::CTL_CONTEXT* pCtlContext, uint32_t dwPropId, void* pvData, uint32_t* pcbData)
    {
        auto win32_impl_result = WIN32_IMPL_CertGetCTLContextProperty(pCtlContext, dwPropId, pvData, pcbData);
        return win32_impl_result;
    }
    inline uint32_t CertEnumCTLContextProperties(Windows::Win32::Security::CTL_CONTEXT* pCtlContext, uint32_t dwPropId)
    {
        auto win32_impl_result = WIN32_IMPL_CertEnumCTLContextProperties(pCtlContext, dwPropId);
        return win32_impl_result;
    }
    inline Windows::Win32::Security::CTL_CONTEXT* CertEnumCTLsInStore(void* hCertStore, Windows::Win32::Security::CTL_CONTEXT* pPrevCtlContext)
    {
        auto win32_impl_result = WIN32_IMPL_CertEnumCTLsInStore(hCertStore, pPrevCtlContext);
        return win32_impl_result;
    }
    inline Windows::Win32::Security::CTL_ENTRY* CertFindSubjectInCTL(uint32_t dwEncodingType, uint32_t dwSubjectType, void* pvSubject, Windows::Win32::Security::CTL_CONTEXT* pCtlContext, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_CertFindSubjectInCTL(dwEncodingType, dwSubjectType, pvSubject, pCtlContext, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::Security::CTL_CONTEXT* CertFindCTLInStore(void* hCertStore, uint32_t dwMsgAndCertEncodingType, uint32_t dwFindFlags, uint32_t dwFindType, void* pvFindPara, Windows::Win32::Security::CTL_CONTEXT* pPrevCtlContext)
    {
        auto win32_impl_result = WIN32_IMPL_CertFindCTLInStore(hCertStore, dwMsgAndCertEncodingType, dwFindFlags, dwFindType, pvFindPara, pPrevCtlContext);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertAddEncodedCTLToStore(void* hCertStore, uint32_t dwMsgAndCertEncodingType, uint8_t* pbCtlEncoded, uint32_t cbCtlEncoded, uint32_t dwAddDisposition, Windows::Win32::Security::CTL_CONTEXT** ppCtlContext)
    {
        auto win32_impl_result = WIN32_IMPL_CertAddEncodedCTLToStore(hCertStore, dwMsgAndCertEncodingType, pbCtlEncoded, cbCtlEncoded, dwAddDisposition, ppCtlContext);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertAddCTLContextToStore(void* hCertStore, Windows::Win32::Security::CTL_CONTEXT* pCtlContext, uint32_t dwAddDisposition, Windows::Win32::Security::CTL_CONTEXT** ppStoreContext)
    {
        auto win32_impl_result = WIN32_IMPL_CertAddCTLContextToStore(hCertStore, pCtlContext, dwAddDisposition, ppStoreContext);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertSerializeCTLStoreElement(Windows::Win32::Security::CTL_CONTEXT* pCtlContext, uint32_t dwFlags, uint8_t* pbElement, uint32_t* pcbElement)
    {
        auto win32_impl_result = WIN32_IMPL_CertSerializeCTLStoreElement(pCtlContext, dwFlags, pbElement, pcbElement);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertDeleteCTLFromStore(Windows::Win32::Security::CTL_CONTEXT* pCtlContext)
    {
        auto win32_impl_result = WIN32_IMPL_CertDeleteCTLFromStore(pCtlContext);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertAddCertificateLinkToStore(void* hCertStore, Windows::Win32::Security::CERT_CONTEXT* pCertContext, uint32_t dwAddDisposition, Windows::Win32::Security::CERT_CONTEXT** ppStoreContext)
    {
        auto win32_impl_result = WIN32_IMPL_CertAddCertificateLinkToStore(hCertStore, pCertContext, dwAddDisposition, ppStoreContext);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertAddCRLLinkToStore(void* hCertStore, Windows::Win32::Security::CRL_CONTEXT* pCrlContext, uint32_t dwAddDisposition, Windows::Win32::Security::CRL_CONTEXT** ppStoreContext)
    {
        auto win32_impl_result = WIN32_IMPL_CertAddCRLLinkToStore(hCertStore, pCrlContext, dwAddDisposition, ppStoreContext);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertAddCTLLinkToStore(void* hCertStore, Windows::Win32::Security::CTL_CONTEXT* pCtlContext, uint32_t dwAddDisposition, Windows::Win32::Security::CTL_CONTEXT** ppStoreContext)
    {
        auto win32_impl_result = WIN32_IMPL_CertAddCTLLinkToStore(hCertStore, pCtlContext, dwAddDisposition, ppStoreContext);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertAddStoreToCollection(void* hCollectionStore, void* hSiblingStore, uint32_t dwUpdateFlags, uint32_t dwPriority)
    {
        auto win32_impl_result = WIN32_IMPL_CertAddStoreToCollection(hCollectionStore, hSiblingStore, dwUpdateFlags, dwPriority);
        return win32_impl_result;
    }
    inline void CertRemoveStoreFromCollection(void* hCollectionStore, void* hSiblingStore)
    {
        WIN32_IMPL_CertRemoveStoreFromCollection(hCollectionStore, hSiblingStore);
    }
    inline Windows::Win32::SystemServices::BOOL CertControlStore(void* hCertStore, uint32_t dwFlags, uint32_t dwCtrlType, void* pvCtrlPara)
    {
        auto win32_impl_result = WIN32_IMPL_CertControlStore(hCertStore, dwFlags, dwCtrlType, pvCtrlPara);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertSetStoreProperty(void* hCertStore, uint32_t dwPropId, uint32_t dwFlags, void* pvData)
    {
        auto win32_impl_result = WIN32_IMPL_CertSetStoreProperty(hCertStore, dwPropId, dwFlags, pvData);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertGetStoreProperty(void* hCertStore, uint32_t dwPropId, void* pvData, uint32_t* pcbData)
    {
        auto win32_impl_result = WIN32_IMPL_CertGetStoreProperty(hCertStore, dwPropId, pvData, pcbData);
        return win32_impl_result;
    }
    inline void* CertCreateContext(uint32_t dwContextType, uint32_t dwEncodingType, uint8_t* pbEncoded, uint32_t cbEncoded, uint32_t dwFlags, Windows::Win32::Security::CERT_CREATE_CONTEXT_PARA* pCreatePara)
    {
        auto win32_impl_result = WIN32_IMPL_CertCreateContext(dwContextType, dwEncodingType, pbEncoded, cbEncoded, dwFlags, pCreatePara);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertRegisterSystemStore(void* pvSystemStore, uint32_t dwFlags, Windows::Win32::Security::CERT_SYSTEM_STORE_INFO* pStoreInfo, void* pvReserved)
    {
        auto win32_impl_result = WIN32_IMPL_CertRegisterSystemStore(pvSystemStore, dwFlags, pStoreInfo, pvReserved);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertRegisterPhysicalStore(void* pvSystemStore, uint32_t dwFlags, uint16_t* pwszStoreName, Windows::Win32::Security::CERT_PHYSICAL_STORE_INFO* pStoreInfo, void* pvReserved)
    {
        auto win32_impl_result = WIN32_IMPL_CertRegisterPhysicalStore(pvSystemStore, dwFlags, pwszStoreName, pStoreInfo, pvReserved);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertUnregisterSystemStore(void* pvSystemStore, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_CertUnregisterSystemStore(pvSystemStore, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertUnregisterPhysicalStore(void* pvSystemStore, uint32_t dwFlags, uint16_t* pwszStoreName)
    {
        auto win32_impl_result = WIN32_IMPL_CertUnregisterPhysicalStore(pvSystemStore, dwFlags, pwszStoreName);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertEnumSystemStoreLocation(uint32_t dwFlags, void* pvArg, Windows::Win32::Security::PFN_CERT_ENUM_SYSTEM_STORE_LOCATION* pfnEnum)
    {
        auto win32_impl_result = WIN32_IMPL_CertEnumSystemStoreLocation(dwFlags, pvArg, pfnEnum);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertEnumSystemStore(uint32_t dwFlags, void* pvSystemStoreLocationPara, void* pvArg, Windows::Win32::Security::PFN_CERT_ENUM_SYSTEM_STORE* pfnEnum)
    {
        auto win32_impl_result = WIN32_IMPL_CertEnumSystemStore(dwFlags, pvSystemStoreLocationPara, pvArg, pfnEnum);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertEnumPhysicalStore(void* pvSystemStore, uint32_t dwFlags, void* pvArg, Windows::Win32::Security::PFN_CERT_ENUM_PHYSICAL_STORE* pfnEnum)
    {
        auto win32_impl_result = WIN32_IMPL_CertEnumPhysicalStore(pvSystemStore, dwFlags, pvArg, pfnEnum);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertGetEnhancedKeyUsage(Windows::Win32::Security::CERT_CONTEXT* pCertContext, uint32_t dwFlags, Windows::Win32::Security::CTL_USAGE* pUsage, uint32_t* pcbUsage)
    {
        auto win32_impl_result = WIN32_IMPL_CertGetEnhancedKeyUsage(pCertContext, dwFlags, pUsage, pcbUsage);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertSetEnhancedKeyUsage(Windows::Win32::Security::CERT_CONTEXT* pCertContext, Windows::Win32::Security::CTL_USAGE* pUsage)
    {
        auto win32_impl_result = WIN32_IMPL_CertSetEnhancedKeyUsage(pCertContext, pUsage);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertAddEnhancedKeyUsageIdentifier(Windows::Win32::Security::CERT_CONTEXT* pCertContext, int8_t* pszUsageIdentifier)
    {
        auto win32_impl_result = WIN32_IMPL_CertAddEnhancedKeyUsageIdentifier(pCertContext, pszUsageIdentifier);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertRemoveEnhancedKeyUsageIdentifier(Windows::Win32::Security::CERT_CONTEXT* pCertContext, int8_t* pszUsageIdentifier)
    {
        auto win32_impl_result = WIN32_IMPL_CertRemoveEnhancedKeyUsageIdentifier(pCertContext, pszUsageIdentifier);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertGetValidUsages(uint32_t cCerts, Windows::Win32::Security::CERT_CONTEXT** rghCerts, int32_t* cNumOIDs, int8_t** rghOIDs, uint32_t* pcbOIDs)
    {
        auto win32_impl_result = WIN32_IMPL_CertGetValidUsages(cCerts, rghCerts, cNumOIDs, rghOIDs, pcbOIDs);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptMsgGetAndVerifySigner(void* hCryptMsg, uint32_t cSignerStore, void** rghSignerStore, uint32_t dwFlags, Windows::Win32::Security::CERT_CONTEXT** ppSigner, uint32_t* pdwSignerIndex)
    {
        auto win32_impl_result = WIN32_IMPL_CryptMsgGetAndVerifySigner(hCryptMsg, cSignerStore, rghSignerStore, dwFlags, ppSigner, pdwSignerIndex);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptMsgSignCTL(uint32_t dwMsgEncodingType, uint8_t* pbCtlContent, uint32_t cbCtlContent, Windows::Win32::Security::CMSG_SIGNED_ENCODE_INFO* pSignInfo, uint32_t dwFlags, uint8_t* pbEncoded, uint32_t* pcbEncoded)
    {
        auto win32_impl_result = WIN32_IMPL_CryptMsgSignCTL(dwMsgEncodingType, pbCtlContent, cbCtlContent, pSignInfo, dwFlags, pbEncoded, pcbEncoded);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptMsgEncodeAndSignCTL(uint32_t dwMsgEncodingType, Windows::Win32::Security::CTL_INFO* pCtlInfo, Windows::Win32::Security::CMSG_SIGNED_ENCODE_INFO* pSignInfo, uint32_t dwFlags, uint8_t* pbEncoded, uint32_t* pcbEncoded)
    {
        auto win32_impl_result = WIN32_IMPL_CryptMsgEncodeAndSignCTL(dwMsgEncodingType, pCtlInfo, pSignInfo, dwFlags, pbEncoded, pcbEncoded);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertFindSubjectInSortedCTL(Windows::Win32::Security::CRYPTOAPI_BLOB* pSubjectIdentifier, Windows::Win32::Security::CTL_CONTEXT* pCtlContext, uint32_t dwFlags, void* pvReserved, Windows::Win32::Security::CRYPTOAPI_BLOB* pEncodedAttributes)
    {
        auto win32_impl_result = WIN32_IMPL_CertFindSubjectInSortedCTL(pSubjectIdentifier, pCtlContext, dwFlags, pvReserved, pEncodedAttributes);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertEnumSubjectInSortedCTL(Windows::Win32::Security::CTL_CONTEXT* pCtlContext, void** ppvNextSubject, Windows::Win32::Security::CRYPTOAPI_BLOB* pSubjectIdentifier, Windows::Win32::Security::CRYPTOAPI_BLOB* pEncodedAttributes)
    {
        auto win32_impl_result = WIN32_IMPL_CertEnumSubjectInSortedCTL(pCtlContext, ppvNextSubject, pSubjectIdentifier, pEncodedAttributes);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertVerifyCTLUsage(uint32_t dwEncodingType, uint32_t dwSubjectType, void* pvSubject, Windows::Win32::Security::CTL_USAGE* pSubjectUsage, uint32_t dwFlags, Windows::Win32::Security::CTL_VERIFY_USAGE_PARA* pVerifyUsagePara, Windows::Win32::Security::CTL_VERIFY_USAGE_STATUS* pVerifyUsageStatus)
    {
        auto win32_impl_result = WIN32_IMPL_CertVerifyCTLUsage(dwEncodingType, dwSubjectType, pvSubject, pSubjectUsage, dwFlags, pVerifyUsagePara, pVerifyUsageStatus);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertVerifyRevocation(uint32_t dwEncodingType, uint32_t dwRevType, uint32_t cContext, void** rgpvContext, uint32_t dwFlags, Windows::Win32::Security::CERT_REVOCATION_PARA* pRevPara, Windows::Win32::Security::CERT_REVOCATION_STATUS* pRevStatus)
    {
        auto win32_impl_result = WIN32_IMPL_CertVerifyRevocation(dwEncodingType, dwRevType, cContext, rgpvContext, dwFlags, pRevPara, pRevStatus);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertCompareIntegerBlob(Windows::Win32::Security::CRYPTOAPI_BLOB* pInt1, Windows::Win32::Security::CRYPTOAPI_BLOB* pInt2)
    {
        auto win32_impl_result = WIN32_IMPL_CertCompareIntegerBlob(pInt1, pInt2);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertCompareCertificate(uint32_t dwCertEncodingType, Windows::Win32::Security::CERT_INFO* pCertId1, Windows::Win32::Security::CERT_INFO* pCertId2)
    {
        auto win32_impl_result = WIN32_IMPL_CertCompareCertificate(dwCertEncodingType, pCertId1, pCertId2);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertCompareCertificateName(uint32_t dwCertEncodingType, Windows::Win32::Security::CRYPTOAPI_BLOB* pCertName1, Windows::Win32::Security::CRYPTOAPI_BLOB* pCertName2)
    {
        auto win32_impl_result = WIN32_IMPL_CertCompareCertificateName(dwCertEncodingType, pCertName1, pCertName2);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertIsRDNAttrsInCertificateName(uint32_t dwCertEncodingType, uint32_t dwFlags, Windows::Win32::Security::CRYPTOAPI_BLOB* pCertName, Windows::Win32::Security::CERT_RDN* pRDN)
    {
        auto win32_impl_result = WIN32_IMPL_CertIsRDNAttrsInCertificateName(dwCertEncodingType, dwFlags, pCertName, pRDN);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertComparePublicKeyInfo(uint32_t dwCertEncodingType, Windows::Win32::Security::CERT_PUBLIC_KEY_INFO* pPublicKey1, Windows::Win32::Security::CERT_PUBLIC_KEY_INFO* pPublicKey2)
    {
        auto win32_impl_result = WIN32_IMPL_CertComparePublicKeyInfo(dwCertEncodingType, pPublicKey1, pPublicKey2);
        return win32_impl_result;
    }
    inline uint32_t CertGetPublicKeyLength(uint32_t dwCertEncodingType, Windows::Win32::Security::CERT_PUBLIC_KEY_INFO* pPublicKey)
    {
        auto win32_impl_result = WIN32_IMPL_CertGetPublicKeyLength(dwCertEncodingType, pPublicKey);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptVerifyCertificateSignature(size_t hCryptProv, uint32_t dwCertEncodingType, uint8_t* pbEncoded, uint32_t cbEncoded, Windows::Win32::Security::CERT_PUBLIC_KEY_INFO* pPublicKey)
    {
        auto win32_impl_result = WIN32_IMPL_CryptVerifyCertificateSignature(hCryptProv, dwCertEncodingType, pbEncoded, cbEncoded, pPublicKey);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptVerifyCertificateSignatureEx(size_t hCryptProv, uint32_t dwCertEncodingType, uint32_t dwSubjectType, void* pvSubject, uint32_t dwIssuerType, void* pvIssuer, uint32_t dwFlags, void* pvExtra)
    {
        auto win32_impl_result = WIN32_IMPL_CryptVerifyCertificateSignatureEx(hCryptProv, dwCertEncodingType, dwSubjectType, pvSubject, dwIssuerType, pvIssuer, dwFlags, pvExtra);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertIsStrongHashToSign(Windows::Win32::Security::CERT_STRONG_SIGN_PARA* pStrongSignPara, uint16_t* pwszCNGHashAlgid, Windows::Win32::Security::CERT_CONTEXT* pSigningCert)
    {
        auto win32_impl_result = WIN32_IMPL_CertIsStrongHashToSign(pStrongSignPara, pwszCNGHashAlgid, pSigningCert);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptHashToBeSigned(size_t hCryptProv, uint32_t dwCertEncodingType, uint8_t* pbEncoded, uint32_t cbEncoded, uint8_t* pbComputedHash, uint32_t* pcbComputedHash)
    {
        auto win32_impl_result = WIN32_IMPL_CryptHashToBeSigned(hCryptProv, dwCertEncodingType, pbEncoded, cbEncoded, pbComputedHash, pcbComputedHash);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptHashCertificate(size_t hCryptProv, uint32_t Algid, uint32_t dwFlags, uint8_t* pbEncoded, uint32_t cbEncoded, uint8_t* pbComputedHash, uint32_t* pcbComputedHash)
    {
        auto win32_impl_result = WIN32_IMPL_CryptHashCertificate(hCryptProv, Algid, dwFlags, pbEncoded, cbEncoded, pbComputedHash, pcbComputedHash);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptHashCertificate2(uint16_t* pwszCNGHashAlgid, uint32_t dwFlags, void* pvReserved, uint8_t* pbEncoded, uint32_t cbEncoded, uint8_t* pbComputedHash, uint32_t* pcbComputedHash)
    {
        auto win32_impl_result = WIN32_IMPL_CryptHashCertificate2(pwszCNGHashAlgid, dwFlags, pvReserved, pbEncoded, cbEncoded, pbComputedHash, pcbComputedHash);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptSignCertificate(size_t hCryptProvOrNCryptKey, uint32_t dwKeySpec, uint32_t dwCertEncodingType, uint8_t* pbEncodedToBeSigned, uint32_t cbEncodedToBeSigned, Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER* pSignatureAlgorithm, void* pvHashAuxInfo, uint8_t* pbSignature, uint32_t* pcbSignature)
    {
        auto win32_impl_result = WIN32_IMPL_CryptSignCertificate(hCryptProvOrNCryptKey, dwKeySpec, dwCertEncodingType, pbEncodedToBeSigned, cbEncodedToBeSigned, pSignatureAlgorithm, pvHashAuxInfo, pbSignature, pcbSignature);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptSignAndEncodeCertificate(size_t hCryptProvOrNCryptKey, uint32_t dwKeySpec, uint32_t dwCertEncodingType, int8_t* lpszStructType, void* pvStructInfo, Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER* pSignatureAlgorithm, void* pvHashAuxInfo, uint8_t* pbEncoded, uint32_t* pcbEncoded)
    {
        auto win32_impl_result = WIN32_IMPL_CryptSignAndEncodeCertificate(hCryptProvOrNCryptKey, dwKeySpec, dwCertEncodingType, lpszStructType, pvStructInfo, pSignatureAlgorithm, pvHashAuxInfo, pbEncoded, pcbEncoded);
        return win32_impl_result;
    }
    inline int32_t CertVerifyTimeValidity(Windows::Win32::WindowsProgramming::FILETIME* pTimeToVerify, Windows::Win32::Security::CERT_INFO* pCertInfo)
    {
        auto win32_impl_result = WIN32_IMPL_CertVerifyTimeValidity(pTimeToVerify, pCertInfo);
        return win32_impl_result;
    }
    inline int32_t CertVerifyCRLTimeValidity(Windows::Win32::WindowsProgramming::FILETIME* pTimeToVerify, Windows::Win32::Security::CRL_INFO* pCrlInfo)
    {
        auto win32_impl_result = WIN32_IMPL_CertVerifyCRLTimeValidity(pTimeToVerify, pCrlInfo);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertVerifyValidityNesting(Windows::Win32::Security::CERT_INFO* pSubjectInfo, Windows::Win32::Security::CERT_INFO* pIssuerInfo)
    {
        auto win32_impl_result = WIN32_IMPL_CertVerifyValidityNesting(pSubjectInfo, pIssuerInfo);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertVerifyCRLRevocation(uint32_t dwCertEncodingType, Windows::Win32::Security::CERT_INFO* pCertId, uint32_t cCrlInfo, Windows::Win32::Security::CRL_INFO** rgpCrlInfo)
    {
        auto win32_impl_result = WIN32_IMPL_CertVerifyCRLRevocation(dwCertEncodingType, pCertId, cCrlInfo, rgpCrlInfo);
        return win32_impl_result;
    }
    inline int8_t* CertAlgIdToOID(uint32_t dwAlgId)
    {
        auto win32_impl_result = WIN32_IMPL_CertAlgIdToOID(dwAlgId);
        return win32_impl_result;
    }
    inline uint32_t CertOIDToAlgId(int8_t* pszObjId)
    {
        auto win32_impl_result = WIN32_IMPL_CertOIDToAlgId(pszObjId);
        return win32_impl_result;
    }
    inline Windows::Win32::Security::CERT_EXTENSION* CertFindExtension(int8_t* pszObjId, uint32_t cExtensions, Windows::Win32::Security::CERT_EXTENSION* rgExtensions)
    {
        auto win32_impl_result = WIN32_IMPL_CertFindExtension(pszObjId, cExtensions, rgExtensions);
        return win32_impl_result;
    }
    inline Windows::Win32::Security::CRYPT_ATTRIBUTE* CertFindAttribute(int8_t* pszObjId, uint32_t cAttr, Windows::Win32::Security::CRYPT_ATTRIBUTE* rgAttr)
    {
        auto win32_impl_result = WIN32_IMPL_CertFindAttribute(pszObjId, cAttr, rgAttr);
        return win32_impl_result;
    }
    inline Windows::Win32::Security::CERT_RDN_ATTR* CertFindRDNAttr(int8_t* pszObjId, Windows::Win32::Security::CERT_NAME_INFO* pName)
    {
        auto win32_impl_result = WIN32_IMPL_CertFindRDNAttr(pszObjId, pName);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertGetIntendedKeyUsage(uint32_t dwCertEncodingType, Windows::Win32::Security::CERT_INFO* pCertInfo, uint8_t* pbKeyUsage, uint32_t cbKeyUsage)
    {
        auto win32_impl_result = WIN32_IMPL_CertGetIntendedKeyUsage(dwCertEncodingType, pCertInfo, pbKeyUsage, cbKeyUsage);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptInstallDefaultContext(size_t hCryptProv, uint32_t dwDefaultType, void* pvDefaultPara, uint32_t dwFlags, void* pvReserved, void** phDefaultContext)
    {
        auto win32_impl_result = WIN32_IMPL_CryptInstallDefaultContext(hCryptProv, dwDefaultType, pvDefaultPara, dwFlags, pvReserved, phDefaultContext);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptUninstallDefaultContext(void* hDefaultContext, uint32_t dwFlags, void* pvReserved)
    {
        auto win32_impl_result = WIN32_IMPL_CryptUninstallDefaultContext(hDefaultContext, dwFlags, pvReserved);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptExportPublicKeyInfo(size_t hCryptProvOrNCryptKey, uint32_t dwKeySpec, uint32_t dwCertEncodingType, Windows::Win32::Security::CERT_PUBLIC_KEY_INFO* pInfo, uint32_t* pcbInfo)
    {
        auto win32_impl_result = WIN32_IMPL_CryptExportPublicKeyInfo(hCryptProvOrNCryptKey, dwKeySpec, dwCertEncodingType, pInfo, pcbInfo);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptExportPublicKeyInfoEx(size_t hCryptProvOrNCryptKey, uint32_t dwKeySpec, uint32_t dwCertEncodingType, int8_t* pszPublicKeyObjId, uint32_t dwFlags, void* pvAuxInfo, Windows::Win32::Security::CERT_PUBLIC_KEY_INFO* pInfo, uint32_t* pcbInfo)
    {
        auto win32_impl_result = WIN32_IMPL_CryptExportPublicKeyInfoEx(hCryptProvOrNCryptKey, dwKeySpec, dwCertEncodingType, pszPublicKeyObjId, dwFlags, pvAuxInfo, pInfo, pcbInfo);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptExportPublicKeyInfoFromBCryptKeyHandle(void* hBCryptKey, uint32_t dwCertEncodingType, int8_t* pszPublicKeyObjId, uint32_t dwFlags, void* pvAuxInfo, Windows::Win32::Security::CERT_PUBLIC_KEY_INFO* pInfo, uint32_t* pcbInfo)
    {
        auto win32_impl_result = WIN32_IMPL_CryptExportPublicKeyInfoFromBCryptKeyHandle(hBCryptKey, dwCertEncodingType, pszPublicKeyObjId, dwFlags, pvAuxInfo, pInfo, pcbInfo);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptImportPublicKeyInfo(size_t hCryptProv, uint32_t dwCertEncodingType, Windows::Win32::Security::CERT_PUBLIC_KEY_INFO* pInfo, size_t* phKey)
    {
        auto win32_impl_result = WIN32_IMPL_CryptImportPublicKeyInfo(hCryptProv, dwCertEncodingType, pInfo, phKey);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptImportPublicKeyInfoEx(size_t hCryptProv, uint32_t dwCertEncodingType, Windows::Win32::Security::CERT_PUBLIC_KEY_INFO* pInfo, uint32_t aiKeyAlg, uint32_t dwFlags, void* pvAuxInfo, size_t* phKey)
    {
        auto win32_impl_result = WIN32_IMPL_CryptImportPublicKeyInfoEx(hCryptProv, dwCertEncodingType, pInfo, aiKeyAlg, dwFlags, pvAuxInfo, phKey);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptImportPublicKeyInfoEx2(uint32_t dwCertEncodingType, Windows::Win32::Security::CERT_PUBLIC_KEY_INFO* pInfo, uint32_t dwFlags, void* pvAuxInfo, void** phKey)
    {
        auto win32_impl_result = WIN32_IMPL_CryptImportPublicKeyInfoEx2(dwCertEncodingType, pInfo, dwFlags, pvAuxInfo, phKey);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptAcquireCertificatePrivateKey(Windows::Win32::Security::CERT_CONTEXT* pCert, uint32_t dwFlags, void* pvParameters, size_t* phCryptProvOrNCryptKey, uint32_t* pdwKeySpec, int32_t* pfCallerFreeProvOrNCryptKey)
    {
        auto win32_impl_result = WIN32_IMPL_CryptAcquireCertificatePrivateKey(pCert, dwFlags, pvParameters, phCryptProvOrNCryptKey, pdwKeySpec, pfCallerFreeProvOrNCryptKey);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptFindCertificateKeyProvInfo(Windows::Win32::Security::CERT_CONTEXT* pCert, uint32_t dwFlags, void* pvReserved)
    {
        auto win32_impl_result = WIN32_IMPL_CryptFindCertificateKeyProvInfo(pCert, dwFlags, pvReserved);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptImportPKCS8(Windows::Win32::Security::CRYPT_PKCS8_IMPORT_PARAMS sPrivateKeyAndParams, uint32_t dwFlags, size_t* phCryptProv, void* pvAuxInfo)
    {
        auto win32_impl_result = WIN32_IMPL_CryptImportPKCS8(sPrivateKeyAndParams, dwFlags, phCryptProv, pvAuxInfo);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptExportPKCS8(size_t hCryptProv, uint32_t dwKeySpec, int8_t* pszPrivateKeyObjId, uint32_t dwFlags, void* pvAuxInfo, uint8_t* pbPrivateKeyBlob, uint32_t* pcbPrivateKeyBlob)
    {
        auto win32_impl_result = WIN32_IMPL_CryptExportPKCS8(hCryptProv, dwKeySpec, pszPrivateKeyObjId, dwFlags, pvAuxInfo, pbPrivateKeyBlob, pcbPrivateKeyBlob);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptHashPublicKeyInfo(size_t hCryptProv, uint32_t Algid, uint32_t dwFlags, uint32_t dwCertEncodingType, Windows::Win32::Security::CERT_PUBLIC_KEY_INFO* pInfo, uint8_t* pbComputedHash, uint32_t* pcbComputedHash)
    {
        auto win32_impl_result = WIN32_IMPL_CryptHashPublicKeyInfo(hCryptProv, Algid, dwFlags, dwCertEncodingType, pInfo, pbComputedHash, pcbComputedHash);
        return win32_impl_result;
    }
    inline uint32_t CertRDNValueToStrA(uint32_t dwValueType, Windows::Win32::Security::CRYPTOAPI_BLOB* pValue, int8_t* psz, uint32_t csz)
    {
        auto win32_impl_result = WIN32_IMPL_CertRDNValueToStrA(dwValueType, pValue, psz, csz);
        return win32_impl_result;
    }
    inline uint32_t CertRDNValueToStrW(uint32_t dwValueType, Windows::Win32::Security::CRYPTOAPI_BLOB* pValue, uint16_t* psz, uint32_t csz)
    {
        auto win32_impl_result = WIN32_IMPL_CertRDNValueToStrW(dwValueType, pValue, psz, csz);
        return win32_impl_result;
    }
    inline uint32_t CertNameToStrA(uint32_t dwCertEncodingType, Windows::Win32::Security::CRYPTOAPI_BLOB* pName, uint32_t dwStrType, int8_t* psz, uint32_t csz)
    {
        auto win32_impl_result = WIN32_IMPL_CertNameToStrA(dwCertEncodingType, pName, dwStrType, psz, csz);
        return win32_impl_result;
    }
    inline uint32_t CertNameToStrW(uint32_t dwCertEncodingType, Windows::Win32::Security::CRYPTOAPI_BLOB* pName, uint32_t dwStrType, uint16_t* psz, uint32_t csz)
    {
        auto win32_impl_result = WIN32_IMPL_CertNameToStrW(dwCertEncodingType, pName, dwStrType, psz, csz);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertStrToNameA(uint32_t dwCertEncodingType, int8_t* pszX500, uint32_t dwStrType, void* pvReserved, uint8_t* pbEncoded, uint32_t* pcbEncoded, int8_t** ppszError)
    {
        auto win32_impl_result = WIN32_IMPL_CertStrToNameA(dwCertEncodingType, pszX500, dwStrType, pvReserved, pbEncoded, pcbEncoded, ppszError);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertStrToNameW(uint32_t dwCertEncodingType, uint16_t* pszX500, uint32_t dwStrType, void* pvReserved, uint8_t* pbEncoded, uint32_t* pcbEncoded, uint16_t** ppszError)
    {
        auto win32_impl_result = WIN32_IMPL_CertStrToNameW(dwCertEncodingType, pszX500, dwStrType, pvReserved, pbEncoded, pcbEncoded, ppszError);
        return win32_impl_result;
    }
    inline uint32_t CertGetNameStringA(Windows::Win32::Security::CERT_CONTEXT* pCertContext, uint32_t dwType, uint32_t dwFlags, void* pvTypePara, int8_t* pszNameString, uint32_t cchNameString)
    {
        auto win32_impl_result = WIN32_IMPL_CertGetNameStringA(pCertContext, dwType, dwFlags, pvTypePara, pszNameString, cchNameString);
        return win32_impl_result;
    }
    inline uint32_t CertGetNameStringW(Windows::Win32::Security::CERT_CONTEXT* pCertContext, uint32_t dwType, uint32_t dwFlags, void* pvTypePara, uint16_t* pszNameString, uint32_t cchNameString)
    {
        auto win32_impl_result = WIN32_IMPL_CertGetNameStringW(pCertContext, dwType, dwFlags, pvTypePara, pszNameString, cchNameString);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptSignMessage(Windows::Win32::Security::CRYPT_SIGN_MESSAGE_PARA* pSignPara, Windows::Win32::SystemServices::BOOL fDetachedSignature, uint32_t cToBeSigned, uint8_t** rgpbToBeSigned, uint32_t* rgcbToBeSigned, uint8_t* pbSignedBlob, uint32_t* pcbSignedBlob)
    {
        auto win32_impl_result = WIN32_IMPL_CryptSignMessage(pSignPara, fDetachedSignature, cToBeSigned, rgpbToBeSigned, rgcbToBeSigned, pbSignedBlob, pcbSignedBlob);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptVerifyMessageSignature(Windows::Win32::Security::CRYPT_VERIFY_MESSAGE_PARA* pVerifyPara, uint32_t dwSignerIndex, uint8_t* pbSignedBlob, uint32_t cbSignedBlob, uint8_t* pbDecoded, uint32_t* pcbDecoded, Windows::Win32::Security::CERT_CONTEXT** ppSignerCert)
    {
        auto win32_impl_result = WIN32_IMPL_CryptVerifyMessageSignature(pVerifyPara, dwSignerIndex, pbSignedBlob, cbSignedBlob, pbDecoded, pcbDecoded, ppSignerCert);
        return win32_impl_result;
    }
    inline int32_t CryptGetMessageSignerCount(uint32_t dwMsgEncodingType, uint8_t* pbSignedBlob, uint32_t cbSignedBlob)
    {
        auto win32_impl_result = WIN32_IMPL_CryptGetMessageSignerCount(dwMsgEncodingType, pbSignedBlob, cbSignedBlob);
        return win32_impl_result;
    }
    inline void* CryptGetMessageCertificates(uint32_t dwMsgAndCertEncodingType, size_t hCryptProv, uint32_t dwFlags, uint8_t* pbSignedBlob, uint32_t cbSignedBlob)
    {
        auto win32_impl_result = WIN32_IMPL_CryptGetMessageCertificates(dwMsgAndCertEncodingType, hCryptProv, dwFlags, pbSignedBlob, cbSignedBlob);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptVerifyDetachedMessageSignature(Windows::Win32::Security::CRYPT_VERIFY_MESSAGE_PARA* pVerifyPara, uint32_t dwSignerIndex, uint8_t* pbDetachedSignBlob, uint32_t cbDetachedSignBlob, uint32_t cToBeSigned, uint8_t** rgpbToBeSigned, uint32_t* rgcbToBeSigned, Windows::Win32::Security::CERT_CONTEXT** ppSignerCert)
    {
        auto win32_impl_result = WIN32_IMPL_CryptVerifyDetachedMessageSignature(pVerifyPara, dwSignerIndex, pbDetachedSignBlob, cbDetachedSignBlob, cToBeSigned, rgpbToBeSigned, rgcbToBeSigned, ppSignerCert);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptEncryptMessage(Windows::Win32::Security::CRYPT_ENCRYPT_MESSAGE_PARA* pEncryptPara, uint32_t cRecipientCert, Windows::Win32::Security::CERT_CONTEXT** rgpRecipientCert, uint8_t* pbToBeEncrypted, uint32_t cbToBeEncrypted, uint8_t* pbEncryptedBlob, uint32_t* pcbEncryptedBlob)
    {
        auto win32_impl_result = WIN32_IMPL_CryptEncryptMessage(pEncryptPara, cRecipientCert, rgpRecipientCert, pbToBeEncrypted, cbToBeEncrypted, pbEncryptedBlob, pcbEncryptedBlob);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptDecryptMessage(Windows::Win32::Security::CRYPT_DECRYPT_MESSAGE_PARA* pDecryptPara, uint8_t* pbEncryptedBlob, uint32_t cbEncryptedBlob, uint8_t* pbDecrypted, uint32_t* pcbDecrypted, Windows::Win32::Security::CERT_CONTEXT** ppXchgCert)
    {
        auto win32_impl_result = WIN32_IMPL_CryptDecryptMessage(pDecryptPara, pbEncryptedBlob, cbEncryptedBlob, pbDecrypted, pcbDecrypted, ppXchgCert);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptSignAndEncryptMessage(Windows::Win32::Security::CRYPT_SIGN_MESSAGE_PARA* pSignPara, Windows::Win32::Security::CRYPT_ENCRYPT_MESSAGE_PARA* pEncryptPara, uint32_t cRecipientCert, Windows::Win32::Security::CERT_CONTEXT** rgpRecipientCert, uint8_t* pbToBeSignedAndEncrypted, uint32_t cbToBeSignedAndEncrypted, uint8_t* pbSignedAndEncryptedBlob, uint32_t* pcbSignedAndEncryptedBlob)
    {
        auto win32_impl_result = WIN32_IMPL_CryptSignAndEncryptMessage(pSignPara, pEncryptPara, cRecipientCert, rgpRecipientCert, pbToBeSignedAndEncrypted, cbToBeSignedAndEncrypted, pbSignedAndEncryptedBlob, pcbSignedAndEncryptedBlob);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptDecryptAndVerifyMessageSignature(Windows::Win32::Security::CRYPT_DECRYPT_MESSAGE_PARA* pDecryptPara, Windows::Win32::Security::CRYPT_VERIFY_MESSAGE_PARA* pVerifyPara, uint32_t dwSignerIndex, uint8_t* pbEncryptedBlob, uint32_t cbEncryptedBlob, uint8_t* pbDecrypted, uint32_t* pcbDecrypted, Windows::Win32::Security::CERT_CONTEXT** ppXchgCert, Windows::Win32::Security::CERT_CONTEXT** ppSignerCert)
    {
        auto win32_impl_result = WIN32_IMPL_CryptDecryptAndVerifyMessageSignature(pDecryptPara, pVerifyPara, dwSignerIndex, pbEncryptedBlob, cbEncryptedBlob, pbDecrypted, pcbDecrypted, ppXchgCert, ppSignerCert);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptDecodeMessage(uint32_t dwMsgTypeFlags, Windows::Win32::Security::CRYPT_DECRYPT_MESSAGE_PARA* pDecryptPara, Windows::Win32::Security::CRYPT_VERIFY_MESSAGE_PARA* pVerifyPara, uint32_t dwSignerIndex, uint8_t* pbEncodedBlob, uint32_t cbEncodedBlob, uint32_t dwPrevInnerContentType, uint32_t* pdwMsgType, uint32_t* pdwInnerContentType, uint8_t* pbDecoded, uint32_t* pcbDecoded, Windows::Win32::Security::CERT_CONTEXT** ppXchgCert, Windows::Win32::Security::CERT_CONTEXT** ppSignerCert)
    {
        auto win32_impl_result = WIN32_IMPL_CryptDecodeMessage(dwMsgTypeFlags, pDecryptPara, pVerifyPara, dwSignerIndex, pbEncodedBlob, cbEncodedBlob, dwPrevInnerContentType, pdwMsgType, pdwInnerContentType, pbDecoded, pcbDecoded, ppXchgCert, ppSignerCert);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptHashMessage(Windows::Win32::Security::CRYPT_HASH_MESSAGE_PARA* pHashPara, Windows::Win32::SystemServices::BOOL fDetachedHash, uint32_t cToBeHashed, uint8_t** rgpbToBeHashed, uint32_t* rgcbToBeHashed, uint8_t* pbHashedBlob, uint32_t* pcbHashedBlob, uint8_t* pbComputedHash, uint32_t* pcbComputedHash)
    {
        auto win32_impl_result = WIN32_IMPL_CryptHashMessage(pHashPara, fDetachedHash, cToBeHashed, rgpbToBeHashed, rgcbToBeHashed, pbHashedBlob, pcbHashedBlob, pbComputedHash, pcbComputedHash);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptVerifyMessageHash(Windows::Win32::Security::CRYPT_HASH_MESSAGE_PARA* pHashPara, uint8_t* pbHashedBlob, uint32_t cbHashedBlob, uint8_t* pbToBeHashed, uint32_t* pcbToBeHashed, uint8_t* pbComputedHash, uint32_t* pcbComputedHash)
    {
        auto win32_impl_result = WIN32_IMPL_CryptVerifyMessageHash(pHashPara, pbHashedBlob, cbHashedBlob, pbToBeHashed, pcbToBeHashed, pbComputedHash, pcbComputedHash);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptVerifyDetachedMessageHash(Windows::Win32::Security::CRYPT_HASH_MESSAGE_PARA* pHashPara, uint8_t* pbDetachedHashBlob, uint32_t cbDetachedHashBlob, uint32_t cToBeHashed, uint8_t** rgpbToBeHashed, uint32_t* rgcbToBeHashed, uint8_t* pbComputedHash, uint32_t* pcbComputedHash)
    {
        auto win32_impl_result = WIN32_IMPL_CryptVerifyDetachedMessageHash(pHashPara, pbDetachedHashBlob, cbDetachedHashBlob, cToBeHashed, rgpbToBeHashed, rgcbToBeHashed, pbComputedHash, pcbComputedHash);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptSignMessageWithKey(Windows::Win32::Security::CRYPT_KEY_SIGN_MESSAGE_PARA* pSignPara, uint8_t* pbToBeSigned, uint32_t cbToBeSigned, uint8_t* pbSignedBlob, uint32_t* pcbSignedBlob)
    {
        auto win32_impl_result = WIN32_IMPL_CryptSignMessageWithKey(pSignPara, pbToBeSigned, cbToBeSigned, pbSignedBlob, pcbSignedBlob);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptVerifyMessageSignatureWithKey(Windows::Win32::Security::CRYPT_KEY_VERIFY_MESSAGE_PARA* pVerifyPara, Windows::Win32::Security::CERT_PUBLIC_KEY_INFO* pPublicKeyInfo, uint8_t* pbSignedBlob, uint32_t cbSignedBlob, uint8_t* pbDecoded, uint32_t* pcbDecoded)
    {
        auto win32_impl_result = WIN32_IMPL_CryptVerifyMessageSignatureWithKey(pVerifyPara, pPublicKeyInfo, pbSignedBlob, cbSignedBlob, pbDecoded, pcbDecoded);
        return win32_impl_result;
    }
    inline void* CertOpenSystemStoreA(size_t hProv, int8_t* szSubsystemProtocol)
    {
        auto win32_impl_result = WIN32_IMPL_CertOpenSystemStoreA(hProv, szSubsystemProtocol);
        return win32_impl_result;
    }
    inline void* CertOpenSystemStoreW(size_t hProv, uint16_t* szSubsystemProtocol)
    {
        auto win32_impl_result = WIN32_IMPL_CertOpenSystemStoreW(hProv, szSubsystemProtocol);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertAddEncodedCertificateToSystemStoreA(int8_t* szCertStoreName, uint8_t* pbCertEncoded, uint32_t cbCertEncoded)
    {
        auto win32_impl_result = WIN32_IMPL_CertAddEncodedCertificateToSystemStoreA(szCertStoreName, pbCertEncoded, cbCertEncoded);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertAddEncodedCertificateToSystemStoreW(uint16_t* szCertStoreName, uint8_t* pbCertEncoded, uint32_t cbCertEncoded)
    {
        auto win32_impl_result = WIN32_IMPL_CertAddEncodedCertificateToSystemStoreW(szCertStoreName, pbCertEncoded, cbCertEncoded);
        return win32_impl_result;
    }
    inline int32_t FindCertsByIssuer(Windows::Win32::Security::CERT_CHAIN* pCertChains, uint32_t* pcbCertChains, uint32_t* pcCertChains, uint8_t* pbEncodedIssuerName, uint32_t cbEncodedIssuerName, uint16_t* pwszPurpose, uint32_t dwKeySpec)
    {
        auto win32_impl_result = WIN32_IMPL_FindCertsByIssuer(pCertChains, pcbCertChains, pcCertChains, pbEncodedIssuerName, cbEncodedIssuerName, pwszPurpose, dwKeySpec);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptQueryObject(uint32_t dwObjectType, void* pvObject, uint32_t dwExpectedContentTypeFlags, uint32_t dwExpectedFormatTypeFlags, uint32_t dwFlags, uint32_t* pdwMsgAndCertEncodingType, uint32_t* pdwContentType, uint32_t* pdwFormatType, void** phCertStore, void** phMsg, void** ppvContext)
    {
        auto win32_impl_result = WIN32_IMPL_CryptQueryObject(dwObjectType, pvObject, dwExpectedContentTypeFlags, dwExpectedFormatTypeFlags, dwFlags, pdwMsgAndCertEncodingType, pdwContentType, pdwFormatType, phCertStore, phMsg, ppvContext);
        return win32_impl_result;
    }
    inline void* CryptMemAlloc(uint32_t cbSize)
    {
        auto win32_impl_result = WIN32_IMPL_CryptMemAlloc(cbSize);
        return win32_impl_result;
    }
    inline void* CryptMemRealloc(void* pv, uint32_t cbSize)
    {
        auto win32_impl_result = WIN32_IMPL_CryptMemRealloc(pv, cbSize);
        return win32_impl_result;
    }
    inline void CryptMemFree(void* pv)
    {
        WIN32_IMPL_CryptMemFree(pv);
    }
    inline Windows::Win32::SystemServices::BOOL CryptCreateAsyncHandle(uint32_t dwFlags, Windows::Win32::Security::HCRYPTASYNC* phAsync)
    {
        auto win32_impl_result = WIN32_IMPL_CryptCreateAsyncHandle(dwFlags, phAsync);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptSetAsyncParam(Windows::Win32::Security::HCRYPTASYNC hAsync, int8_t* pszParamOid, void* pvParam, Windows::Win32::Security::PFN_CRYPT_ASYNC_PARAM_FREE_FUNC* pfnFree)
    {
        auto win32_impl_result = WIN32_IMPL_CryptSetAsyncParam(hAsync, pszParamOid, pvParam, pfnFree);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptGetAsyncParam(Windows::Win32::Security::HCRYPTASYNC hAsync, int8_t* pszParamOid, void** ppvParam, Windows::Win32::Security::PFN_CRYPT_ASYNC_PARAM_FREE_FUNC** ppfnFree)
    {
        auto win32_impl_result = WIN32_IMPL_CryptGetAsyncParam(hAsync, pszParamOid, ppvParam, ppfnFree);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptCloseAsyncHandle(Windows::Win32::Security::HCRYPTASYNC hAsync)
    {
        auto win32_impl_result = WIN32_IMPL_CryptCloseAsyncHandle(hAsync);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptRetrieveObjectByUrlA(int8_t* pszUrl, int8_t* pszObjectOid, uint32_t dwRetrievalFlags, uint32_t dwTimeout, void** ppvObject, Windows::Win32::Security::HCRYPTASYNC hAsyncRetrieve, Windows::Win32::Security::CRYPT_CREDENTIALS* pCredentials, void* pvVerify, Windows::Win32::Security::CRYPT_RETRIEVE_AUX_INFO* pAuxInfo)
    {
        auto win32_impl_result = WIN32_IMPL_CryptRetrieveObjectByUrlA(pszUrl, pszObjectOid, dwRetrievalFlags, dwTimeout, ppvObject, hAsyncRetrieve, pCredentials, pvVerify, pAuxInfo);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptRetrieveObjectByUrlW(uint16_t* pszUrl, int8_t* pszObjectOid, uint32_t dwRetrievalFlags, uint32_t dwTimeout, void** ppvObject, Windows::Win32::Security::HCRYPTASYNC hAsyncRetrieve, Windows::Win32::Security::CRYPT_CREDENTIALS* pCredentials, void* pvVerify, Windows::Win32::Security::CRYPT_RETRIEVE_AUX_INFO* pAuxInfo)
    {
        auto win32_impl_result = WIN32_IMPL_CryptRetrieveObjectByUrlW(pszUrl, pszObjectOid, dwRetrievalFlags, dwTimeout, ppvObject, hAsyncRetrieve, pCredentials, pvVerify, pAuxInfo);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptInstallCancelRetrieval(Windows::Win32::Security::PFN_CRYPT_CANCEL_RETRIEVAL* pfnCancel, void* pvArg, uint32_t dwFlags, void* pvReserved)
    {
        auto win32_impl_result = WIN32_IMPL_CryptInstallCancelRetrieval(pfnCancel, pvArg, dwFlags, pvReserved);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptUninstallCancelRetrieval(uint32_t dwFlags, void* pvReserved)
    {
        auto win32_impl_result = WIN32_IMPL_CryptUninstallCancelRetrieval(dwFlags, pvReserved);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptGetObjectUrl(int8_t* pszUrlOid, void* pvPara, uint32_t dwFlags, Windows::Win32::Security::CRYPT_URL_ARRAY* pUrlArray, uint32_t* pcbUrlArray, Windows::Win32::Security::CRYPT_URL_INFO* pUrlInfo, uint32_t* pcbUrlInfo, void* pvReserved)
    {
        auto win32_impl_result = WIN32_IMPL_CryptGetObjectUrl(pszUrlOid, pvPara, dwFlags, pUrlArray, pcbUrlArray, pUrlInfo, pcbUrlInfo, pvReserved);
        return win32_impl_result;
    }
    inline Windows::Win32::Security::CERT_CONTEXT* CertCreateSelfSignCertificate(size_t hCryptProvOrNCryptKey, Windows::Win32::Security::CRYPTOAPI_BLOB* pSubjectIssuerBlob, uint32_t dwFlags, Windows::Win32::Security::CRYPT_KEY_PROV_INFO* pKeyProvInfo, Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER* pSignatureAlgorithm, Windows::Win32::WindowsProgramming::SYSTEMTIME* pStartTime, Windows::Win32::WindowsProgramming::SYSTEMTIME* pEndTime, Windows::Win32::Security::CERT_EXTENSIONS* pExtensions)
    {
        auto win32_impl_result = WIN32_IMPL_CertCreateSelfSignCertificate(hCryptProvOrNCryptKey, pSubjectIssuerBlob, dwFlags, pKeyProvInfo, pSignatureAlgorithm, pStartTime, pEndTime, pExtensions);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptGetKeyIdentifierProperty(Windows::Win32::Security::CRYPTOAPI_BLOB* pKeyIdentifier, uint32_t dwPropId, uint32_t dwFlags, uint16_t* pwszComputerName, void* pvReserved, void* pvData, uint32_t* pcbData)
    {
        auto win32_impl_result = WIN32_IMPL_CryptGetKeyIdentifierProperty(pKeyIdentifier, dwPropId, dwFlags, pwszComputerName, pvReserved, pvData, pcbData);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptSetKeyIdentifierProperty(Windows::Win32::Security::CRYPTOAPI_BLOB* pKeyIdentifier, uint32_t dwPropId, uint32_t dwFlags, uint16_t* pwszComputerName, void* pvReserved, void* pvData)
    {
        auto win32_impl_result = WIN32_IMPL_CryptSetKeyIdentifierProperty(pKeyIdentifier, dwPropId, dwFlags, pwszComputerName, pvReserved, pvData);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptEnumKeyIdentifierProperties(Windows::Win32::Security::CRYPTOAPI_BLOB* pKeyIdentifier, uint32_t dwPropId, uint32_t dwFlags, uint16_t* pwszComputerName, void* pvReserved, void* pvArg, Windows::Win32::Security::PFN_CRYPT_ENUM_KEYID_PROP* pfnEnum)
    {
        auto win32_impl_result = WIN32_IMPL_CryptEnumKeyIdentifierProperties(pKeyIdentifier, dwPropId, dwFlags, pwszComputerName, pvReserved, pvArg, pfnEnum);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptCreateKeyIdentifierFromCSP(uint32_t dwCertEncodingType, int8_t* pszPubKeyOID, Windows::Win32::Security::PUBLICKEYSTRUC* pPubKeyStruc, uint32_t cbPubKeyStruc, uint32_t dwFlags, void* pvReserved, uint8_t* pbHash, uint32_t* pcbHash)
    {
        auto win32_impl_result = WIN32_IMPL_CryptCreateKeyIdentifierFromCSP(dwCertEncodingType, pszPubKeyOID, pPubKeyStruc, cbPubKeyStruc, dwFlags, pvReserved, pbHash, pcbHash);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertCreateCertificateChainEngine(Windows::Win32::Security::CERT_CHAIN_ENGINE_CONFIG* pConfig, Windows::Win32::Security::HCERTCHAINENGINE* phChainEngine)
    {
        auto win32_impl_result = WIN32_IMPL_CertCreateCertificateChainEngine(pConfig, phChainEngine);
        return win32_impl_result;
    }
    inline void CertFreeCertificateChainEngine(Windows::Win32::Security::HCERTCHAINENGINE hChainEngine)
    {
        WIN32_IMPL_CertFreeCertificateChainEngine(hChainEngine);
    }
    inline Windows::Win32::SystemServices::BOOL CertResyncCertificateChainEngine(Windows::Win32::Security::HCERTCHAINENGINE hChainEngine)
    {
        auto win32_impl_result = WIN32_IMPL_CertResyncCertificateChainEngine(hChainEngine);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertGetCertificateChain(Windows::Win32::Security::HCERTCHAINENGINE hChainEngine, Windows::Win32::Security::CERT_CONTEXT* pCertContext, Windows::Win32::WindowsProgramming::FILETIME* pTime, void* hAdditionalStore, Windows::Win32::Security::CERT_CHAIN_PARA* pChainPara, uint32_t dwFlags, void* pvReserved, Windows::Win32::Security::CERT_CHAIN_CONTEXT** ppChainContext)
    {
        auto win32_impl_result = WIN32_IMPL_CertGetCertificateChain(hChainEngine, pCertContext, pTime, hAdditionalStore, pChainPara, dwFlags, pvReserved, ppChainContext);
        return win32_impl_result;
    }
    inline void CertFreeCertificateChain(Windows::Win32::Security::CERT_CHAIN_CONTEXT* pChainContext)
    {
        WIN32_IMPL_CertFreeCertificateChain(pChainContext);
    }
    inline Windows::Win32::Security::CERT_CHAIN_CONTEXT* CertDuplicateCertificateChain(Windows::Win32::Security::CERT_CHAIN_CONTEXT* pChainContext)
    {
        auto win32_impl_result = WIN32_IMPL_CertDuplicateCertificateChain(pChainContext);
        return win32_impl_result;
    }
    inline Windows::Win32::Security::CERT_CHAIN_CONTEXT* CertFindChainInStore(void* hCertStore, uint32_t dwCertEncodingType, uint32_t dwFindFlags, uint32_t dwFindType, void* pvFindPara, Windows::Win32::Security::CERT_CHAIN_CONTEXT* pPrevChainContext)
    {
        auto win32_impl_result = WIN32_IMPL_CertFindChainInStore(hCertStore, dwCertEncodingType, dwFindFlags, dwFindType, pvFindPara, pPrevChainContext);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertVerifyCertificateChainPolicy(int8_t* pszPolicyOID, Windows::Win32::Security::CERT_CHAIN_CONTEXT* pChainContext, Windows::Win32::Security::CERT_CHAIN_POLICY_PARA* pPolicyPara, Windows::Win32::Security::CERT_CHAIN_POLICY_STATUS* pPolicyStatus)
    {
        auto win32_impl_result = WIN32_IMPL_CertVerifyCertificateChainPolicy(pszPolicyOID, pChainContext, pPolicyPara, pPolicyStatus);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptStringToBinaryA(int8_t* pszString, uint32_t cchString, uint32_t dwFlags, uint8_t* pbBinary, uint32_t* pcbBinary, uint32_t* pdwSkip, uint32_t* pdwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_CryptStringToBinaryA(pszString, cchString, dwFlags, pbBinary, pcbBinary, pdwSkip, pdwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptStringToBinaryW(uint16_t* pszString, uint32_t cchString, uint32_t dwFlags, uint8_t* pbBinary, uint32_t* pcbBinary, uint32_t* pdwSkip, uint32_t* pdwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_CryptStringToBinaryW(pszString, cchString, dwFlags, pbBinary, pcbBinary, pdwSkip, pdwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptBinaryToStringA(uint8_t* pbBinary, uint32_t cbBinary, uint32_t dwFlags, int8_t* pszString, uint32_t* pcchString)
    {
        auto win32_impl_result = WIN32_IMPL_CryptBinaryToStringA(pbBinary, cbBinary, dwFlags, pszString, pcchString);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptBinaryToStringW(uint8_t* pbBinary, uint32_t cbBinary, uint32_t dwFlags, uint16_t* pszString, uint32_t* pcchString)
    {
        auto win32_impl_result = WIN32_IMPL_CryptBinaryToStringW(pbBinary, cbBinary, dwFlags, pszString, pcchString);
        return win32_impl_result;
    }
    inline void* PFXImportCertStore(Windows::Win32::Security::CRYPTOAPI_BLOB* pPFX, uint16_t* szPassword, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_PFXImportCertStore(pPFX, szPassword, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL PFXIsPFXBlob(Windows::Win32::Security::CRYPTOAPI_BLOB* pPFX)
    {
        auto win32_impl_result = WIN32_IMPL_PFXIsPFXBlob(pPFX);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL PFXVerifyPassword(Windows::Win32::Security::CRYPTOAPI_BLOB* pPFX, uint16_t* szPassword, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_PFXVerifyPassword(pPFX, szPassword, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL PFXExportCertStoreEx(void* hStore, Windows::Win32::Security::CRYPTOAPI_BLOB* pPFX, uint16_t* szPassword, void* pvPara, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_PFXExportCertStoreEx(hStore, pPFX, szPassword, pvPara, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL PFXExportCertStore(void* hStore, Windows::Win32::Security::CRYPTOAPI_BLOB* pPFX, uint16_t* szPassword, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_PFXExportCertStore(hStore, pPFX, szPassword, dwFlags);
        return win32_impl_result;
    }
    inline void* CertOpenServerOcspResponse(Windows::Win32::Security::CERT_CHAIN_CONTEXT* pChainContext, uint32_t dwFlags, Windows::Win32::Security::CERT_SERVER_OCSP_RESPONSE_OPEN_PARA* pOpenPara)
    {
        auto win32_impl_result = WIN32_IMPL_CertOpenServerOcspResponse(pChainContext, dwFlags, pOpenPara);
        return win32_impl_result;
    }
    inline void CertAddRefServerOcspResponse(void* hServerOcspResponse)
    {
        WIN32_IMPL_CertAddRefServerOcspResponse(hServerOcspResponse);
    }
    inline void CertCloseServerOcspResponse(void* hServerOcspResponse, uint32_t dwFlags)
    {
        WIN32_IMPL_CertCloseServerOcspResponse(hServerOcspResponse, dwFlags);
    }
    inline Windows::Win32::Security::CERT_SERVER_OCSP_RESPONSE_CONTEXT* CertGetServerOcspResponseContext(void* hServerOcspResponse, uint32_t dwFlags, void* pvReserved)
    {
        auto win32_impl_result = WIN32_IMPL_CertGetServerOcspResponseContext(hServerOcspResponse, dwFlags, pvReserved);
        return win32_impl_result;
    }
    inline void CertAddRefServerOcspResponseContext(Windows::Win32::Security::CERT_SERVER_OCSP_RESPONSE_CONTEXT* pServerOcspResponseContext)
    {
        WIN32_IMPL_CertAddRefServerOcspResponseContext(pServerOcspResponseContext);
    }
    inline void CertFreeServerOcspResponseContext(Windows::Win32::Security::CERT_SERVER_OCSP_RESPONSE_CONTEXT* pServerOcspResponseContext)
    {
        WIN32_IMPL_CertFreeServerOcspResponseContext(pServerOcspResponseContext);
    }
    inline Windows::Win32::SystemServices::BOOL CertRetrieveLogoOrBiometricInfo(Windows::Win32::Security::CERT_CONTEXT* pCertContext, int8_t* lpszLogoOrBiometricType, uint32_t dwRetrievalFlags, uint32_t dwTimeout, uint32_t dwFlags, void* pvReserved, uint8_t** ppbData, uint32_t* pcbData, uint16_t** ppwszMimeType)
    {
        auto win32_impl_result = WIN32_IMPL_CertRetrieveLogoOrBiometricInfo(pCertContext, lpszLogoOrBiometricType, dwRetrievalFlags, dwTimeout, dwFlags, pvReserved, ppbData, pcbData, ppwszMimeType);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertSelectCertificateChains(::win32::guid* pSelectionContext, uint32_t dwFlags, Windows::Win32::Security::CERT_SELECT_CHAIN_PARA* pChainParameters, uint32_t cCriteria, Windows::Win32::Security::CERT_SELECT_CRITERIA* rgpCriteria, void* hStore, uint32_t* pcSelection, Windows::Win32::Security::CERT_CHAIN_CONTEXT*** pprgpSelection)
    {
        auto win32_impl_result = WIN32_IMPL_CertSelectCertificateChains(pSelectionContext, dwFlags, pChainParameters, cCriteria, rgpCriteria, hStore, pcSelection, pprgpSelection);
        return win32_impl_result;
    }
    inline void CertFreeCertificateChainList(Windows::Win32::Security::CERT_CHAIN_CONTEXT** prgpSelection)
    {
        WIN32_IMPL_CertFreeCertificateChainList(prgpSelection);
    }
    inline Windows::Win32::SystemServices::BOOL CryptRetrieveTimeStamp(uint16_t* wszUrl, uint32_t dwRetrievalFlags, uint32_t dwTimeout, int8_t* pszHashId, Windows::Win32::Security::CRYPT_TIMESTAMP_PARA* pPara, uint8_t* pbData, uint32_t cbData, Windows::Win32::Security::CRYPT_TIMESTAMP_CONTEXT** ppTsContext, Windows::Win32::Security::CERT_CONTEXT** ppTsSigner, void** phStore)
    {
        auto win32_impl_result = WIN32_IMPL_CryptRetrieveTimeStamp(wszUrl, dwRetrievalFlags, dwTimeout, pszHashId, pPara, pbData, cbData, ppTsContext, ppTsSigner, phStore);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptVerifyTimeStampSignature(uint8_t* pbTSContentInfo, uint32_t cbTSContentInfo, uint8_t* pbData, uint32_t cbData, void* hAdditionalStore, Windows::Win32::Security::CRYPT_TIMESTAMP_CONTEXT** ppTsContext, Windows::Win32::Security::CERT_CONTEXT** ppTsSigner, void** phStore)
    {
        auto win32_impl_result = WIN32_IMPL_CryptVerifyTimeStampSignature(pbTSContentInfo, cbTSContentInfo, pbData, cbData, hAdditionalStore, ppTsContext, ppTsSigner, phStore);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CertIsWeakHash(uint32_t dwHashUseType, uint16_t* pwszCNGHashAlgid, uint32_t dwChainFlags, Windows::Win32::Security::CERT_CHAIN_CONTEXT* pSignerChainContext, Windows::Win32::WindowsProgramming::FILETIME* pTimeStamp, uint16_t* pwszFileName)
    {
        auto win32_impl_result = WIN32_IMPL_CertIsWeakHash(dwHashUseType, pwszCNGHashAlgid, dwChainFlags, pSignerChainContext, pTimeStamp, pwszFileName);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptProtectData(Windows::Win32::Security::CRYPTOAPI_BLOB* pDataIn, uint16_t* szDataDescr, Windows::Win32::Security::CRYPTOAPI_BLOB* pOptionalEntropy, void* pvReserved, Windows::Win32::Security::CRYPTPROTECT_PROMPTSTRUCT* pPromptStruct, uint32_t dwFlags, Windows::Win32::Security::CRYPTOAPI_BLOB* pDataOut)
    {
        auto win32_impl_result = WIN32_IMPL_CryptProtectData(pDataIn, szDataDescr, pOptionalEntropy, pvReserved, pPromptStruct, dwFlags, pDataOut);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptUnprotectData(Windows::Win32::Security::CRYPTOAPI_BLOB* pDataIn, uint16_t** ppszDataDescr, Windows::Win32::Security::CRYPTOAPI_BLOB* pOptionalEntropy, void* pvReserved, Windows::Win32::Security::CRYPTPROTECT_PROMPTSTRUCT* pPromptStruct, uint32_t dwFlags, Windows::Win32::Security::CRYPTOAPI_BLOB* pDataOut)
    {
        auto win32_impl_result = WIN32_IMPL_CryptUnprotectData(pDataIn, ppszDataDescr, pOptionalEntropy, pvReserved, pPromptStruct, dwFlags, pDataOut);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptUpdateProtectedState(void* pOldSid, uint16_t* pwszOldPassword, uint32_t dwFlags, uint32_t* pdwSuccessCount, uint32_t* pdwFailureCount)
    {
        auto win32_impl_result = WIN32_IMPL_CryptUpdateProtectedState(pOldSid, pwszOldPassword, dwFlags, pdwSuccessCount, pdwFailureCount);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptProtectMemory(void* pDataIn, uint32_t cbDataIn, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_CryptProtectMemory(pDataIn, cbDataIn, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptUnprotectMemory(void* pDataIn, uint32_t cbDataIn, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_CryptUnprotectMemory(pDataIn, cbDataIn, dwFlags);
        return win32_impl_result;
    }
    inline int32_t SCardEstablishContext(uint32_t dwScope, void* pvReserved1, void* pvReserved2, size_t* phContext)
    {
        auto win32_impl_result = WIN32_IMPL_SCardEstablishContext(dwScope, pvReserved1, pvReserved2, phContext);
        return win32_impl_result;
    }
    inline int32_t SCardReleaseContext(size_t hContext)
    {
        auto win32_impl_result = WIN32_IMPL_SCardReleaseContext(hContext);
        return win32_impl_result;
    }
    inline int32_t SCardIsValidContext(size_t hContext)
    {
        auto win32_impl_result = WIN32_IMPL_SCardIsValidContext(hContext);
        return win32_impl_result;
    }
    inline int32_t SCardListReaderGroupsA(size_t hContext, int8_t* mszGroups, uint32_t* pcchGroups)
    {
        auto win32_impl_result = WIN32_IMPL_SCardListReaderGroupsA(hContext, mszGroups, pcchGroups);
        return win32_impl_result;
    }
    inline int32_t SCardListReaderGroupsW(size_t hContext, uint16_t* mszGroups, uint32_t* pcchGroups)
    {
        auto win32_impl_result = WIN32_IMPL_SCardListReaderGroupsW(hContext, mszGroups, pcchGroups);
        return win32_impl_result;
    }
    inline int32_t SCardListReadersA(size_t hContext, int8_t* mszGroups, int8_t* mszReaders, uint32_t* pcchReaders)
    {
        auto win32_impl_result = WIN32_IMPL_SCardListReadersA(hContext, mszGroups, mszReaders, pcchReaders);
        return win32_impl_result;
    }
    inline int32_t SCardListReadersW(size_t hContext, uint16_t* mszGroups, uint16_t* mszReaders, uint32_t* pcchReaders)
    {
        auto win32_impl_result = WIN32_IMPL_SCardListReadersW(hContext, mszGroups, mszReaders, pcchReaders);
        return win32_impl_result;
    }
    inline int32_t SCardListCardsA(size_t hContext, uint8_t* pbAtr, ::win32::guid* rgquidInterfaces, uint32_t cguidInterfaceCount, int8_t* mszCards, uint32_t* pcchCards)
    {
        auto win32_impl_result = WIN32_IMPL_SCardListCardsA(hContext, pbAtr, rgquidInterfaces, cguidInterfaceCount, mszCards, pcchCards);
        return win32_impl_result;
    }
    inline int32_t SCardListCardsW(size_t hContext, uint8_t* pbAtr, ::win32::guid* rgquidInterfaces, uint32_t cguidInterfaceCount, uint16_t* mszCards, uint32_t* pcchCards)
    {
        auto win32_impl_result = WIN32_IMPL_SCardListCardsW(hContext, pbAtr, rgquidInterfaces, cguidInterfaceCount, mszCards, pcchCards);
        return win32_impl_result;
    }
    inline int32_t SCardListInterfacesA(size_t hContext, int8_t* szCard, ::win32::guid* pguidInterfaces, uint32_t* pcguidInterfaces)
    {
        auto win32_impl_result = WIN32_IMPL_SCardListInterfacesA(hContext, szCard, pguidInterfaces, pcguidInterfaces);
        return win32_impl_result;
    }
    inline int32_t SCardListInterfacesW(size_t hContext, uint16_t* szCard, ::win32::guid* pguidInterfaces, uint32_t* pcguidInterfaces)
    {
        auto win32_impl_result = WIN32_IMPL_SCardListInterfacesW(hContext, szCard, pguidInterfaces, pcguidInterfaces);
        return win32_impl_result;
    }
    inline int32_t SCardGetProviderIdA(size_t hContext, int8_t* szCard, ::win32::guid* pguidProviderId)
    {
        auto win32_impl_result = WIN32_IMPL_SCardGetProviderIdA(hContext, szCard, pguidProviderId);
        return win32_impl_result;
    }
    inline int32_t SCardGetProviderIdW(size_t hContext, uint16_t* szCard, ::win32::guid* pguidProviderId)
    {
        auto win32_impl_result = WIN32_IMPL_SCardGetProviderIdW(hContext, szCard, pguidProviderId);
        return win32_impl_result;
    }
    inline int32_t SCardGetCardTypeProviderNameA(size_t hContext, int8_t* szCardName, uint32_t dwProviderId, int8_t* szProvider, uint32_t* pcchProvider)
    {
        auto win32_impl_result = WIN32_IMPL_SCardGetCardTypeProviderNameA(hContext, szCardName, dwProviderId, szProvider, pcchProvider);
        return win32_impl_result;
    }
    inline int32_t SCardGetCardTypeProviderNameW(size_t hContext, uint16_t* szCardName, uint32_t dwProviderId, uint16_t* szProvider, uint32_t* pcchProvider)
    {
        auto win32_impl_result = WIN32_IMPL_SCardGetCardTypeProviderNameW(hContext, szCardName, dwProviderId, szProvider, pcchProvider);
        return win32_impl_result;
    }
    inline int32_t SCardIntroduceReaderGroupA(size_t hContext, int8_t* szGroupName)
    {
        auto win32_impl_result = WIN32_IMPL_SCardIntroduceReaderGroupA(hContext, szGroupName);
        return win32_impl_result;
    }
    inline int32_t SCardIntroduceReaderGroupW(size_t hContext, uint16_t* szGroupName)
    {
        auto win32_impl_result = WIN32_IMPL_SCardIntroduceReaderGroupW(hContext, szGroupName);
        return win32_impl_result;
    }
    inline int32_t SCardForgetReaderGroupA(size_t hContext, int8_t* szGroupName)
    {
        auto win32_impl_result = WIN32_IMPL_SCardForgetReaderGroupA(hContext, szGroupName);
        return win32_impl_result;
    }
    inline int32_t SCardForgetReaderGroupW(size_t hContext, uint16_t* szGroupName)
    {
        auto win32_impl_result = WIN32_IMPL_SCardForgetReaderGroupW(hContext, szGroupName);
        return win32_impl_result;
    }
    inline int32_t SCardIntroduceReaderA(size_t hContext, int8_t* szReaderName, int8_t* szDeviceName)
    {
        auto win32_impl_result = WIN32_IMPL_SCardIntroduceReaderA(hContext, szReaderName, szDeviceName);
        return win32_impl_result;
    }
    inline int32_t SCardIntroduceReaderW(size_t hContext, uint16_t* szReaderName, uint16_t* szDeviceName)
    {
        auto win32_impl_result = WIN32_IMPL_SCardIntroduceReaderW(hContext, szReaderName, szDeviceName);
        return win32_impl_result;
    }
    inline int32_t SCardForgetReaderA(size_t hContext, int8_t* szReaderName)
    {
        auto win32_impl_result = WIN32_IMPL_SCardForgetReaderA(hContext, szReaderName);
        return win32_impl_result;
    }
    inline int32_t SCardForgetReaderW(size_t hContext, uint16_t* szReaderName)
    {
        auto win32_impl_result = WIN32_IMPL_SCardForgetReaderW(hContext, szReaderName);
        return win32_impl_result;
    }
    inline int32_t SCardAddReaderToGroupA(size_t hContext, int8_t* szReaderName, int8_t* szGroupName)
    {
        auto win32_impl_result = WIN32_IMPL_SCardAddReaderToGroupA(hContext, szReaderName, szGroupName);
        return win32_impl_result;
    }
    inline int32_t SCardAddReaderToGroupW(size_t hContext, uint16_t* szReaderName, uint16_t* szGroupName)
    {
        auto win32_impl_result = WIN32_IMPL_SCardAddReaderToGroupW(hContext, szReaderName, szGroupName);
        return win32_impl_result;
    }
    inline int32_t SCardRemoveReaderFromGroupA(size_t hContext, int8_t* szReaderName, int8_t* szGroupName)
    {
        auto win32_impl_result = WIN32_IMPL_SCardRemoveReaderFromGroupA(hContext, szReaderName, szGroupName);
        return win32_impl_result;
    }
    inline int32_t SCardRemoveReaderFromGroupW(size_t hContext, uint16_t* szReaderName, uint16_t* szGroupName)
    {
        auto win32_impl_result = WIN32_IMPL_SCardRemoveReaderFromGroupW(hContext, szReaderName, szGroupName);
        return win32_impl_result;
    }
    inline int32_t SCardIntroduceCardTypeA(size_t hContext, int8_t* szCardName, ::win32::guid* pguidPrimaryProvider, ::win32::guid* rgguidInterfaces, uint32_t dwInterfaceCount, uint8_t* pbAtr, uint8_t* pbAtrMask, uint32_t cbAtrLen)
    {
        auto win32_impl_result = WIN32_IMPL_SCardIntroduceCardTypeA(hContext, szCardName, pguidPrimaryProvider, rgguidInterfaces, dwInterfaceCount, pbAtr, pbAtrMask, cbAtrLen);
        return win32_impl_result;
    }
    inline int32_t SCardIntroduceCardTypeW(size_t hContext, uint16_t* szCardName, ::win32::guid* pguidPrimaryProvider, ::win32::guid* rgguidInterfaces, uint32_t dwInterfaceCount, uint8_t* pbAtr, uint8_t* pbAtrMask, uint32_t cbAtrLen)
    {
        auto win32_impl_result = WIN32_IMPL_SCardIntroduceCardTypeW(hContext, szCardName, pguidPrimaryProvider, rgguidInterfaces, dwInterfaceCount, pbAtr, pbAtrMask, cbAtrLen);
        return win32_impl_result;
    }
    inline int32_t SCardSetCardTypeProviderNameA(size_t hContext, int8_t* szCardName, uint32_t dwProviderId, int8_t* szProvider)
    {
        auto win32_impl_result = WIN32_IMPL_SCardSetCardTypeProviderNameA(hContext, szCardName, dwProviderId, szProvider);
        return win32_impl_result;
    }
    inline int32_t SCardSetCardTypeProviderNameW(size_t hContext, uint16_t* szCardName, uint32_t dwProviderId, uint16_t* szProvider)
    {
        auto win32_impl_result = WIN32_IMPL_SCardSetCardTypeProviderNameW(hContext, szCardName, dwProviderId, szProvider);
        return win32_impl_result;
    }
    inline int32_t SCardForgetCardTypeA(size_t hContext, int8_t* szCardName)
    {
        auto win32_impl_result = WIN32_IMPL_SCardForgetCardTypeA(hContext, szCardName);
        return win32_impl_result;
    }
    inline int32_t SCardForgetCardTypeW(size_t hContext, uint16_t* szCardName)
    {
        auto win32_impl_result = WIN32_IMPL_SCardForgetCardTypeW(hContext, szCardName);
        return win32_impl_result;
    }
    inline int32_t SCardFreeMemory(size_t hContext, void* pvMem)
    {
        auto win32_impl_result = WIN32_IMPL_SCardFreeMemory(hContext, pvMem);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::HANDLE SCardAccessStartedEvent()
    {
        auto win32_impl_result = WIN32_IMPL_SCardAccessStartedEvent();
        return win32_impl_result;
    }
    inline void SCardReleaseStartedEvent()
    {
        WIN32_IMPL_SCardReleaseStartedEvent();
    }
    inline int32_t SCardLocateCardsA(size_t hContext, int8_t* mszCards, Windows::Win32::Security::SCARD_READERSTATEA* rgReaderStates, uint32_t cReaders)
    {
        auto win32_impl_result = WIN32_IMPL_SCardLocateCardsA(hContext, mszCards, rgReaderStates, cReaders);
        return win32_impl_result;
    }
    inline int32_t SCardLocateCardsW(size_t hContext, uint16_t* mszCards, Windows::Win32::Security::SCARD_READERSTATEW* rgReaderStates, uint32_t cReaders)
    {
        auto win32_impl_result = WIN32_IMPL_SCardLocateCardsW(hContext, mszCards, rgReaderStates, cReaders);
        return win32_impl_result;
    }
    inline int32_t SCardLocateCardsByATRA(size_t hContext, Windows::Win32::Security::SCARD_ATRMASK* rgAtrMasks, uint32_t cAtrs, Windows::Win32::Security::SCARD_READERSTATEA* rgReaderStates, uint32_t cReaders)
    {
        auto win32_impl_result = WIN32_IMPL_SCardLocateCardsByATRA(hContext, rgAtrMasks, cAtrs, rgReaderStates, cReaders);
        return win32_impl_result;
    }
    inline int32_t SCardLocateCardsByATRW(size_t hContext, Windows::Win32::Security::SCARD_ATRMASK* rgAtrMasks, uint32_t cAtrs, Windows::Win32::Security::SCARD_READERSTATEW* rgReaderStates, uint32_t cReaders)
    {
        auto win32_impl_result = WIN32_IMPL_SCardLocateCardsByATRW(hContext, rgAtrMasks, cAtrs, rgReaderStates, cReaders);
        return win32_impl_result;
    }
    inline int32_t SCardGetStatusChangeA(size_t hContext, uint32_t dwTimeout, Windows::Win32::Security::SCARD_READERSTATEA* rgReaderStates, uint32_t cReaders)
    {
        auto win32_impl_result = WIN32_IMPL_SCardGetStatusChangeA(hContext, dwTimeout, rgReaderStates, cReaders);
        return win32_impl_result;
    }
    inline int32_t SCardGetStatusChangeW(size_t hContext, uint32_t dwTimeout, Windows::Win32::Security::SCARD_READERSTATEW* rgReaderStates, uint32_t cReaders)
    {
        auto win32_impl_result = WIN32_IMPL_SCardGetStatusChangeW(hContext, dwTimeout, rgReaderStates, cReaders);
        return win32_impl_result;
    }
    inline int32_t SCardCancel(size_t hContext)
    {
        auto win32_impl_result = WIN32_IMPL_SCardCancel(hContext);
        return win32_impl_result;
    }
    inline int32_t SCardConnectA(size_t hContext, int8_t* szReader, uint32_t dwShareMode, uint32_t dwPreferredProtocols, size_t* phCard, uint32_t* pdwActiveProtocol)
    {
        auto win32_impl_result = WIN32_IMPL_SCardConnectA(hContext, szReader, dwShareMode, dwPreferredProtocols, phCard, pdwActiveProtocol);
        return win32_impl_result;
    }
    inline int32_t SCardConnectW(size_t hContext, uint16_t* szReader, uint32_t dwShareMode, uint32_t dwPreferredProtocols, size_t* phCard, uint32_t* pdwActiveProtocol)
    {
        auto win32_impl_result = WIN32_IMPL_SCardConnectW(hContext, szReader, dwShareMode, dwPreferredProtocols, phCard, pdwActiveProtocol);
        return win32_impl_result;
    }
    inline int32_t SCardReconnect(size_t hCard, uint32_t dwShareMode, uint32_t dwPreferredProtocols, uint32_t dwInitialization, uint32_t* pdwActiveProtocol)
    {
        auto win32_impl_result = WIN32_IMPL_SCardReconnect(hCard, dwShareMode, dwPreferredProtocols, dwInitialization, pdwActiveProtocol);
        return win32_impl_result;
    }
    inline int32_t SCardDisconnect(size_t hCard, uint32_t dwDisposition)
    {
        auto win32_impl_result = WIN32_IMPL_SCardDisconnect(hCard, dwDisposition);
        return win32_impl_result;
    }
    inline int32_t SCardBeginTransaction(size_t hCard)
    {
        auto win32_impl_result = WIN32_IMPL_SCardBeginTransaction(hCard);
        return win32_impl_result;
    }
    inline int32_t SCardEndTransaction(size_t hCard, uint32_t dwDisposition)
    {
        auto win32_impl_result = WIN32_IMPL_SCardEndTransaction(hCard, dwDisposition);
        return win32_impl_result;
    }
    inline int32_t SCardState(size_t hCard, uint32_t* pdwState, uint32_t* pdwProtocol, uint8_t* pbAtr, uint32_t* pcbAtrLen)
    {
        auto win32_impl_result = WIN32_IMPL_SCardState(hCard, pdwState, pdwProtocol, pbAtr, pcbAtrLen);
        return win32_impl_result;
    }
    inline int32_t SCardStatusA(size_t hCard, int8_t* mszReaderNames, uint32_t* pcchReaderLen, uint32_t* pdwState, uint32_t* pdwProtocol, uint8_t* pbAtr, uint32_t* pcbAtrLen)
    {
        auto win32_impl_result = WIN32_IMPL_SCardStatusA(hCard, mszReaderNames, pcchReaderLen, pdwState, pdwProtocol, pbAtr, pcbAtrLen);
        return win32_impl_result;
    }
    inline int32_t SCardStatusW(size_t hCard, uint16_t* mszReaderNames, uint32_t* pcchReaderLen, uint32_t* pdwState, uint32_t* pdwProtocol, uint8_t* pbAtr, uint32_t* pcbAtrLen)
    {
        auto win32_impl_result = WIN32_IMPL_SCardStatusW(hCard, mszReaderNames, pcchReaderLen, pdwState, pdwProtocol, pbAtr, pcbAtrLen);
        return win32_impl_result;
    }
    inline int32_t SCardTransmit(size_t hCard, Windows::Win32::SystemServices::SCARD_IO_REQUEST* pioSendPci, uint8_t* pbSendBuffer, uint32_t cbSendLength, Windows::Win32::SystemServices::SCARD_IO_REQUEST* pioRecvPci, uint8_t* pbRecvBuffer, uint32_t* pcbRecvLength)
    {
        auto win32_impl_result = WIN32_IMPL_SCardTransmit(hCard, pioSendPci, pbSendBuffer, cbSendLength, pioRecvPci, pbRecvBuffer, pcbRecvLength);
        return win32_impl_result;
    }
    inline int32_t SCardGetTransmitCount(size_t hCard, uint32_t* pcTransmitCount)
    {
        auto win32_impl_result = WIN32_IMPL_SCardGetTransmitCount(hCard, pcTransmitCount);
        return win32_impl_result;
    }
    inline int32_t SCardControl(size_t hCard, uint32_t dwControlCode, void* lpInBuffer, uint32_t cbInBufferSize, void* lpOutBuffer, uint32_t cbOutBufferSize, uint32_t* lpBytesReturned)
    {
        auto win32_impl_result = WIN32_IMPL_SCardControl(hCard, dwControlCode, lpInBuffer, cbInBufferSize, lpOutBuffer, cbOutBufferSize, lpBytesReturned);
        return win32_impl_result;
    }
    inline int32_t SCardGetAttrib(size_t hCard, uint32_t dwAttrId, uint8_t* pbAttr, uint32_t* pcbAttrLen)
    {
        auto win32_impl_result = WIN32_IMPL_SCardGetAttrib(hCard, dwAttrId, pbAttr, pcbAttrLen);
        return win32_impl_result;
    }
    inline int32_t SCardSetAttrib(size_t hCard, uint32_t dwAttrId, uint8_t* pbAttr, uint32_t cbAttrLen)
    {
        auto win32_impl_result = WIN32_IMPL_SCardSetAttrib(hCard, dwAttrId, pbAttr, cbAttrLen);
        return win32_impl_result;
    }
    inline int32_t SCardUIDlgSelectCardA(Windows::Win32::Security::OPENCARDNAME_EXA* param0)
    {
        auto win32_impl_result = WIN32_IMPL_SCardUIDlgSelectCardA(param0);
        return win32_impl_result;
    }
    inline int32_t SCardUIDlgSelectCardW(Windows::Win32::Security::OPENCARDNAME_EXW* param0)
    {
        auto win32_impl_result = WIN32_IMPL_SCardUIDlgSelectCardW(param0);
        return win32_impl_result;
    }
    inline int32_t GetOpenCardNameA(Windows::Win32::Security::OPENCARDNAMEA* param0)
    {
        auto win32_impl_result = WIN32_IMPL_GetOpenCardNameA(param0);
        return win32_impl_result;
    }
    inline int32_t GetOpenCardNameW(Windows::Win32::Security::OPENCARDNAMEW* param0)
    {
        auto win32_impl_result = WIN32_IMPL_GetOpenCardNameW(param0);
        return win32_impl_result;
    }
    inline int32_t SCardDlgExtendedError()
    {
        auto win32_impl_result = WIN32_IMPL_SCardDlgExtendedError();
        return win32_impl_result;
    }
    inline int32_t SCardReadCacheA(size_t hContext, ::win32::guid* CardIdentifier, uint32_t FreshnessCounter, int8_t* LookupName, uint8_t* Data, uint32_t* DataLen)
    {
        auto win32_impl_result = WIN32_IMPL_SCardReadCacheA(hContext, CardIdentifier, FreshnessCounter, LookupName, Data, DataLen);
        return win32_impl_result;
    }
    inline int32_t SCardReadCacheW(size_t hContext, ::win32::guid* CardIdentifier, uint32_t FreshnessCounter, uint16_t* LookupName, uint8_t* Data, uint32_t* DataLen)
    {
        auto win32_impl_result = WIN32_IMPL_SCardReadCacheW(hContext, CardIdentifier, FreshnessCounter, LookupName, Data, DataLen);
        return win32_impl_result;
    }
    inline int32_t SCardWriteCacheA(size_t hContext, ::win32::guid* CardIdentifier, uint32_t FreshnessCounter, int8_t* LookupName, uint8_t* Data, uint32_t DataLen)
    {
        auto win32_impl_result = WIN32_IMPL_SCardWriteCacheA(hContext, CardIdentifier, FreshnessCounter, LookupName, Data, DataLen);
        return win32_impl_result;
    }
    inline int32_t SCardWriteCacheW(size_t hContext, ::win32::guid* CardIdentifier, uint32_t FreshnessCounter, uint16_t* LookupName, uint8_t* Data, uint32_t DataLen)
    {
        auto win32_impl_result = WIN32_IMPL_SCardWriteCacheW(hContext, CardIdentifier, FreshnessCounter, LookupName, Data, DataLen);
        return win32_impl_result;
    }
    inline int32_t SCardGetReaderIconA(size_t hContext, int8_t* szReaderName, uint8_t* pbIcon, uint32_t* pcbIcon)
    {
        auto win32_impl_result = WIN32_IMPL_SCardGetReaderIconA(hContext, szReaderName, pbIcon, pcbIcon);
        return win32_impl_result;
    }
    inline int32_t SCardGetReaderIconW(size_t hContext, uint16_t* szReaderName, uint8_t* pbIcon, uint32_t* pcbIcon)
    {
        auto win32_impl_result = WIN32_IMPL_SCardGetReaderIconW(hContext, szReaderName, pbIcon, pcbIcon);
        return win32_impl_result;
    }
    inline int32_t SCardGetDeviceTypeIdA(size_t hContext, int8_t* szReaderName, uint32_t* pdwDeviceTypeId)
    {
        auto win32_impl_result = WIN32_IMPL_SCardGetDeviceTypeIdA(hContext, szReaderName, pdwDeviceTypeId);
        return win32_impl_result;
    }
    inline int32_t SCardGetDeviceTypeIdW(size_t hContext, uint16_t* szReaderName, uint32_t* pdwDeviceTypeId)
    {
        auto win32_impl_result = WIN32_IMPL_SCardGetDeviceTypeIdW(hContext, szReaderName, pdwDeviceTypeId);
        return win32_impl_result;
    }
    inline int32_t SCardGetReaderDeviceInstanceIdA(size_t hContext, int8_t* szReaderName, int8_t* szDeviceInstanceId, uint32_t* pcchDeviceInstanceId)
    {
        auto win32_impl_result = WIN32_IMPL_SCardGetReaderDeviceInstanceIdA(hContext, szReaderName, szDeviceInstanceId, pcchDeviceInstanceId);
        return win32_impl_result;
    }
    inline int32_t SCardGetReaderDeviceInstanceIdW(size_t hContext, uint16_t* szReaderName, uint16_t* szDeviceInstanceId, uint32_t* pcchDeviceInstanceId)
    {
        auto win32_impl_result = WIN32_IMPL_SCardGetReaderDeviceInstanceIdW(hContext, szReaderName, szDeviceInstanceId, pcchDeviceInstanceId);
        return win32_impl_result;
    }
    inline int32_t SCardListReadersWithDeviceInstanceIdA(size_t hContext, int8_t* szDeviceInstanceId, int8_t* mszReaders, uint32_t* pcchReaders)
    {
        auto win32_impl_result = WIN32_IMPL_SCardListReadersWithDeviceInstanceIdA(hContext, szDeviceInstanceId, mszReaders, pcchReaders);
        return win32_impl_result;
    }
    inline int32_t SCardListReadersWithDeviceInstanceIdW(size_t hContext, uint16_t* szDeviceInstanceId, uint16_t* mszReaders, uint32_t* pcchReaders)
    {
        auto win32_impl_result = WIN32_IMPL_SCardListReadersWithDeviceInstanceIdW(hContext, szDeviceInstanceId, mszReaders, pcchReaders);
        return win32_impl_result;
    }
    inline int32_t SCardAudit(size_t hContext, uint32_t dwEvent)
    {
        auto win32_impl_result = WIN32_IMPL_SCardAudit(hContext, dwEvent);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ChangeServiceConfig2A(Windows::Win32::Security::SC_HANDLE__* hService, uint32_t dwInfoLevel, void* lpInfo)
    {
        auto win32_impl_result = WIN32_IMPL_ChangeServiceConfig2A(hService, dwInfoLevel, lpInfo);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ChangeServiceConfig2W(Windows::Win32::Security::SC_HANDLE__* hService, uint32_t dwInfoLevel, void* lpInfo)
    {
        auto win32_impl_result = WIN32_IMPL_ChangeServiceConfig2W(hService, dwInfoLevel, lpInfo);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CloseServiceHandle(Windows::Win32::Security::SC_HANDLE__* hSCObject)
    {
        auto win32_impl_result = WIN32_IMPL_CloseServiceHandle(hSCObject);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ControlService(Windows::Win32::Security::SC_HANDLE__* hService, uint32_t dwControl, Windows::Win32::Security::SERVICE_STATUS* lpServiceStatus)
    {
        auto win32_impl_result = WIN32_IMPL_ControlService(hService, dwControl, lpServiceStatus);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL DeleteService(Windows::Win32::Security::SC_HANDLE__* hService)
    {
        auto win32_impl_result = WIN32_IMPL_DeleteService(hService);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL EnumDependentServicesA(Windows::Win32::Security::SC_HANDLE__* hService, uint32_t dwServiceState, Windows::Win32::Security::ENUM_SERVICE_STATUSA* lpServices, uint32_t cbBufSize, uint32_t* pcbBytesNeeded, uint32_t* lpServicesReturned)
    {
        auto win32_impl_result = WIN32_IMPL_EnumDependentServicesA(hService, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL EnumDependentServicesW(Windows::Win32::Security::SC_HANDLE__* hService, uint32_t dwServiceState, Windows::Win32::Security::ENUM_SERVICE_STATUSW* lpServices, uint32_t cbBufSize, uint32_t* pcbBytesNeeded, uint32_t* lpServicesReturned)
    {
        auto win32_impl_result = WIN32_IMPL_EnumDependentServicesW(hService, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL EnumServicesStatusA(Windows::Win32::Security::SC_HANDLE__* hSCManager, uint32_t dwServiceType, uint32_t dwServiceState, Windows::Win32::Security::ENUM_SERVICE_STATUSA* lpServices, uint32_t cbBufSize, uint32_t* pcbBytesNeeded, uint32_t* lpServicesReturned, uint32_t* lpResumeHandle)
    {
        auto win32_impl_result = WIN32_IMPL_EnumServicesStatusA(hSCManager, dwServiceType, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned, lpResumeHandle);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL EnumServicesStatusW(Windows::Win32::Security::SC_HANDLE__* hSCManager, uint32_t dwServiceType, uint32_t dwServiceState, Windows::Win32::Security::ENUM_SERVICE_STATUSW* lpServices, uint32_t cbBufSize, uint32_t* pcbBytesNeeded, uint32_t* lpServicesReturned, uint32_t* lpResumeHandle)
    {
        auto win32_impl_result = WIN32_IMPL_EnumServicesStatusW(hSCManager, dwServiceType, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned, lpResumeHandle);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL EnumServicesStatusExA(Windows::Win32::Security::SC_HANDLE__* hSCManager, Windows::Win32::Security::SC_ENUM_TYPE InfoLevel, uint32_t dwServiceType, uint32_t dwServiceState, uint8_t* lpServices, uint32_t cbBufSize, uint32_t* pcbBytesNeeded, uint32_t* lpServicesReturned, uint32_t* lpResumeHandle, int8_t* pszGroupName)
    {
        auto win32_impl_result = WIN32_IMPL_EnumServicesStatusExA(hSCManager, InfoLevel, dwServiceType, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned, lpResumeHandle, pszGroupName);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL EnumServicesStatusExW(Windows::Win32::Security::SC_HANDLE__* hSCManager, Windows::Win32::Security::SC_ENUM_TYPE InfoLevel, uint32_t dwServiceType, uint32_t dwServiceState, uint8_t* lpServices, uint32_t cbBufSize, uint32_t* pcbBytesNeeded, uint32_t* lpServicesReturned, uint32_t* lpResumeHandle, uint16_t* pszGroupName)
    {
        auto win32_impl_result = WIN32_IMPL_EnumServicesStatusExW(hSCManager, InfoLevel, dwServiceType, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned, lpResumeHandle, pszGroupName);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetServiceKeyNameA(Windows::Win32::Security::SC_HANDLE__* hSCManager, int8_t* lpDisplayName, int8_t* lpServiceName, uint32_t* lpcchBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_GetServiceKeyNameA(hSCManager, lpDisplayName, lpServiceName, lpcchBuffer);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetServiceKeyNameW(Windows::Win32::Security::SC_HANDLE__* hSCManager, uint16_t* lpDisplayName, uint16_t* lpServiceName, uint32_t* lpcchBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_GetServiceKeyNameW(hSCManager, lpDisplayName, lpServiceName, lpcchBuffer);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetServiceDisplayNameA(Windows::Win32::Security::SC_HANDLE__* hSCManager, int8_t* lpServiceName, int8_t* lpDisplayName, uint32_t* lpcchBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_GetServiceDisplayNameA(hSCManager, lpServiceName, lpDisplayName, lpcchBuffer);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetServiceDisplayNameW(Windows::Win32::Security::SC_HANDLE__* hSCManager, uint16_t* lpServiceName, uint16_t* lpDisplayName, uint32_t* lpcchBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_GetServiceDisplayNameW(hSCManager, lpServiceName, lpDisplayName, lpcchBuffer);
        return win32_impl_result;
    }
    inline void* LockServiceDatabase(Windows::Win32::Security::SC_HANDLE__* hSCManager)
    {
        auto win32_impl_result = WIN32_IMPL_LockServiceDatabase(hSCManager);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL NotifyBootConfigStatus(Windows::Win32::SystemServices::BOOL BootAcceptable)
    {
        auto win32_impl_result = WIN32_IMPL_NotifyBootConfigStatus(BootAcceptable);
        return win32_impl_result;
    }
    inline Windows::Win32::Security::SC_HANDLE__* OpenSCManagerA(int8_t* lpMachineName, int8_t* lpDatabaseName, uint32_t dwDesiredAccess)
    {
        auto win32_impl_result = WIN32_IMPL_OpenSCManagerA(lpMachineName, lpDatabaseName, dwDesiredAccess);
        return win32_impl_result;
    }
    inline Windows::Win32::Security::SC_HANDLE__* OpenSCManagerW(uint16_t* lpMachineName, uint16_t* lpDatabaseName, uint32_t dwDesiredAccess)
    {
        auto win32_impl_result = WIN32_IMPL_OpenSCManagerW(lpMachineName, lpDatabaseName, dwDesiredAccess);
        return win32_impl_result;
    }
    inline Windows::Win32::Security::SC_HANDLE__* OpenServiceA(Windows::Win32::Security::SC_HANDLE__* hSCManager, int8_t* lpServiceName, uint32_t dwDesiredAccess)
    {
        auto win32_impl_result = WIN32_IMPL_OpenServiceA(hSCManager, lpServiceName, dwDesiredAccess);
        return win32_impl_result;
    }
    inline Windows::Win32::Security::SC_HANDLE__* OpenServiceW(Windows::Win32::Security::SC_HANDLE__* hSCManager, uint16_t* lpServiceName, uint32_t dwDesiredAccess)
    {
        auto win32_impl_result = WIN32_IMPL_OpenServiceW(hSCManager, lpServiceName, dwDesiredAccess);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL QueryServiceConfigA(Windows::Win32::Security::SC_HANDLE__* hService, Windows::Win32::Security::QUERY_SERVICE_CONFIGA* lpServiceConfig, uint32_t cbBufSize, uint32_t* pcbBytesNeeded)
    {
        auto win32_impl_result = WIN32_IMPL_QueryServiceConfigA(hService, lpServiceConfig, cbBufSize, pcbBytesNeeded);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL QueryServiceConfigW(Windows::Win32::Security::SC_HANDLE__* hService, Windows::Win32::Security::QUERY_SERVICE_CONFIGW* lpServiceConfig, uint32_t cbBufSize, uint32_t* pcbBytesNeeded)
    {
        auto win32_impl_result = WIN32_IMPL_QueryServiceConfigW(hService, lpServiceConfig, cbBufSize, pcbBytesNeeded);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL QueryServiceConfig2A(Windows::Win32::Security::SC_HANDLE__* hService, uint32_t dwInfoLevel, uint8_t* lpBuffer, uint32_t cbBufSize, uint32_t* pcbBytesNeeded)
    {
        auto win32_impl_result = WIN32_IMPL_QueryServiceConfig2A(hService, dwInfoLevel, lpBuffer, cbBufSize, pcbBytesNeeded);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL QueryServiceConfig2W(Windows::Win32::Security::SC_HANDLE__* hService, uint32_t dwInfoLevel, uint8_t* lpBuffer, uint32_t cbBufSize, uint32_t* pcbBytesNeeded)
    {
        auto win32_impl_result = WIN32_IMPL_QueryServiceConfig2W(hService, dwInfoLevel, lpBuffer, cbBufSize, pcbBytesNeeded);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL QueryServiceLockStatusA(Windows::Win32::Security::SC_HANDLE__* hSCManager, Windows::Win32::Security::QUERY_SERVICE_LOCK_STATUSA* lpLockStatus, uint32_t cbBufSize, uint32_t* pcbBytesNeeded)
    {
        auto win32_impl_result = WIN32_IMPL_QueryServiceLockStatusA(hSCManager, lpLockStatus, cbBufSize, pcbBytesNeeded);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL QueryServiceLockStatusW(Windows::Win32::Security::SC_HANDLE__* hSCManager, Windows::Win32::Security::QUERY_SERVICE_LOCK_STATUSW* lpLockStatus, uint32_t cbBufSize, uint32_t* pcbBytesNeeded)
    {
        auto win32_impl_result = WIN32_IMPL_QueryServiceLockStatusW(hSCManager, lpLockStatus, cbBufSize, pcbBytesNeeded);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL QueryServiceObjectSecurity(Windows::Win32::Security::SC_HANDLE__* hService, uint32_t dwSecurityInformation, void* lpSecurityDescriptor, uint32_t cbBufSize, uint32_t* pcbBytesNeeded)
    {
        auto win32_impl_result = WIN32_IMPL_QueryServiceObjectSecurity(hService, dwSecurityInformation, lpSecurityDescriptor, cbBufSize, pcbBytesNeeded);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL QueryServiceStatus(Windows::Win32::Security::SC_HANDLE__* hService, Windows::Win32::Security::SERVICE_STATUS* lpServiceStatus)
    {
        auto win32_impl_result = WIN32_IMPL_QueryServiceStatus(hService, lpServiceStatus);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL QueryServiceStatusEx(Windows::Win32::Security::SC_HANDLE__* hService, Windows::Win32::Security::SC_STATUS_TYPE InfoLevel, uint8_t* lpBuffer, uint32_t cbBufSize, uint32_t* pcbBytesNeeded)
    {
        auto win32_impl_result = WIN32_IMPL_QueryServiceStatusEx(hService, InfoLevel, lpBuffer, cbBufSize, pcbBytesNeeded);
        return win32_impl_result;
    }
    inline Windows::Win32::Security::SERVICE_STATUS_HANDLE__* RegisterServiceCtrlHandlerA(int8_t* lpServiceName, Windows::Win32::Security::LPHANDLER_FUNCTION* lpHandlerProc)
    {
        auto win32_impl_result = WIN32_IMPL_RegisterServiceCtrlHandlerA(lpServiceName, lpHandlerProc);
        return win32_impl_result;
    }
    inline Windows::Win32::Security::SERVICE_STATUS_HANDLE__* RegisterServiceCtrlHandlerW(uint16_t* lpServiceName, Windows::Win32::Security::LPHANDLER_FUNCTION* lpHandlerProc)
    {
        auto win32_impl_result = WIN32_IMPL_RegisterServiceCtrlHandlerW(lpServiceName, lpHandlerProc);
        return win32_impl_result;
    }
    inline Windows::Win32::Security::SERVICE_STATUS_HANDLE__* RegisterServiceCtrlHandlerExA(int8_t* lpServiceName, Windows::Win32::Security::LPHANDLER_FUNCTION_EX* lpHandlerProc, void* lpContext)
    {
        auto win32_impl_result = WIN32_IMPL_RegisterServiceCtrlHandlerExA(lpServiceName, lpHandlerProc, lpContext);
        return win32_impl_result;
    }
    inline Windows::Win32::Security::SERVICE_STATUS_HANDLE__* RegisterServiceCtrlHandlerExW(uint16_t* lpServiceName, Windows::Win32::Security::LPHANDLER_FUNCTION_EX* lpHandlerProc, void* lpContext)
    {
        auto win32_impl_result = WIN32_IMPL_RegisterServiceCtrlHandlerExW(lpServiceName, lpHandlerProc, lpContext);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SetServiceObjectSecurity(Windows::Win32::Security::SC_HANDLE__* hService, uint32_t dwSecurityInformation, void* lpSecurityDescriptor)
    {
        auto win32_impl_result = WIN32_IMPL_SetServiceObjectSecurity(hService, dwSecurityInformation, lpSecurityDescriptor);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SetServiceStatus(Windows::Win32::Security::SERVICE_STATUS_HANDLE__* hServiceStatus, Windows::Win32::Security::SERVICE_STATUS* lpServiceStatus)
    {
        auto win32_impl_result = WIN32_IMPL_SetServiceStatus(hServiceStatus, lpServiceStatus);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL StartServiceCtrlDispatcherA(Windows::Win32::Security::SERVICE_TABLE_ENTRYA* lpServiceStartTable)
    {
        auto win32_impl_result = WIN32_IMPL_StartServiceCtrlDispatcherA(lpServiceStartTable);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL StartServiceCtrlDispatcherW(Windows::Win32::Security::SERVICE_TABLE_ENTRYW* lpServiceStartTable)
    {
        auto win32_impl_result = WIN32_IMPL_StartServiceCtrlDispatcherW(lpServiceStartTable);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL StartServiceA(Windows::Win32::Security::SC_HANDLE__* hService, uint32_t dwNumServiceArgs, int8_t** lpServiceArgVectors)
    {
        auto win32_impl_result = WIN32_IMPL_StartServiceA(hService, dwNumServiceArgs, lpServiceArgVectors);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL StartServiceW(Windows::Win32::Security::SC_HANDLE__* hService, uint32_t dwNumServiceArgs, uint16_t** lpServiceArgVectors)
    {
        auto win32_impl_result = WIN32_IMPL_StartServiceW(hService, dwNumServiceArgs, lpServiceArgVectors);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL UnlockServiceDatabase(void* ScLock)
    {
        auto win32_impl_result = WIN32_IMPL_UnlockServiceDatabase(ScLock);
        return win32_impl_result;
    }
    inline uint32_t NotifyServiceStatusChangeA(Windows::Win32::Security::SC_HANDLE__* hService, uint32_t dwNotifyMask, Windows::Win32::Security::SERVICE_NOTIFY_2A* pNotifyBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_NotifyServiceStatusChangeA(hService, dwNotifyMask, pNotifyBuffer);
        return win32_impl_result;
    }
    inline uint32_t NotifyServiceStatusChangeW(Windows::Win32::Security::SC_HANDLE__* hService, uint32_t dwNotifyMask, Windows::Win32::Security::SERVICE_NOTIFY_2W* pNotifyBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_NotifyServiceStatusChangeW(hService, dwNotifyMask, pNotifyBuffer);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ControlServiceExA(Windows::Win32::Security::SC_HANDLE__* hService, uint32_t dwControl, uint32_t dwInfoLevel, void* pControlParams)
    {
        auto win32_impl_result = WIN32_IMPL_ControlServiceExA(hService, dwControl, dwInfoLevel, pControlParams);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ControlServiceExW(Windows::Win32::Security::SC_HANDLE__* hService, uint32_t dwControl, uint32_t dwInfoLevel, void* pControlParams)
    {
        auto win32_impl_result = WIN32_IMPL_ControlServiceExW(hService, dwControl, dwInfoLevel, pControlParams);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL QueryServiceDynamicInformation(Windows::Win32::Security::SERVICE_STATUS_HANDLE__* hServiceStatus, uint32_t dwInfoLevel, void** ppDynamicInfo)
    {
        auto win32_impl_result = WIN32_IMPL_QueryServiceDynamicInformation(hServiceStatus, dwInfoLevel, ppDynamicInfo);
        return win32_impl_result;
    }
    inline uint32_t WaitServiceState(Windows::Win32::Security::SC_HANDLE__* hService, uint32_t dwNotify, uint32_t dwTimeout, Windows::Win32::SystemServices::HANDLE hCancelEvent)
    {
        auto win32_impl_result = WIN32_IMPL_WaitServiceState(hService, dwNotify, dwTimeout, hCancelEvent);
        return win32_impl_result;
    }
    inline uint32_t GetServiceRegistryStateKey(Windows::Win32::Security::SERVICE_STATUS_HANDLE__* ServiceStatusHandle, Windows::Win32::Security::SERVICE_REGISTRY_STATE_TYPE StateType, uint32_t AccessMask, Windows::Win32::WindowsProgramming::HKEY* ServiceStateKey)
    {
        auto win32_impl_result = WIN32_IMPL_GetServiceRegistryStateKey(ServiceStatusHandle, StateType, AccessMask, ServiceStateKey);
        return win32_impl_result;
    }
    inline uint32_t GetServiceDirectory(Windows::Win32::Security::SERVICE_STATUS_HANDLE__* hServiceStatus, Windows::Win32::Security::SERVICE_DIRECTORY_TYPE eDirectoryType, uint16_t* lpPathBuffer, uint32_t cchPathBufferLength, uint32_t* lpcchRequiredBufferLength)
    {
        auto win32_impl_result = WIN32_IMPL_GetServiceDirectory(hServiceStatus, eDirectoryType, lpPathBuffer, cchPathBufferLength, lpcchRequiredBufferLength);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS LsaRegisterLogonProcess(Windows::Win32::WindowsProgramming::STRING* LogonProcessName, Windows::Win32::Security::LsaHandle* LsaHandle, uint32_t* SecurityMode)
    {
        auto win32_impl_result = WIN32_IMPL_LsaRegisterLogonProcess(LogonProcessName, LsaHandle, SecurityMode);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS LsaLogonUser(Windows::Win32::SystemServices::HANDLE LsaHandle, Windows::Win32::WindowsProgramming::STRING* OriginName, Windows::Win32::Security::SECURITY_LOGON_TYPE LogonType, uint32_t AuthenticationPackage, void* AuthenticationInformation, uint32_t AuthenticationInformationLength, Windows::Win32::Security::TOKEN_GROUPS* LocalGroups, Windows::Win32::Security::TOKEN_SOURCE* SourceContext, void** ProfileBuffer, uint32_t* ProfileBufferLength, Windows::Win32::Kernel::LUID* LogonId, intptr_t* Token, Windows::Win32::Security::QUOTA_LIMITS* Quotas, int32_t* SubStatus)
    {
        auto win32_impl_result = WIN32_IMPL_LsaLogonUser(LsaHandle, OriginName, LogonType, AuthenticationPackage, AuthenticationInformation, AuthenticationInformationLength, LocalGroups, SourceContext, ProfileBuffer, ProfileBufferLength, LogonId, Token, Quotas, SubStatus);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS LsaLookupAuthenticationPackage(Windows::Win32::SystemServices::HANDLE LsaHandle, Windows::Win32::WindowsProgramming::STRING* PackageName, uint32_t* AuthenticationPackage)
    {
        auto win32_impl_result = WIN32_IMPL_LsaLookupAuthenticationPackage(LsaHandle, PackageName, AuthenticationPackage);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS LsaFreeReturnBuffer(void* Buffer)
    {
        auto win32_impl_result = WIN32_IMPL_LsaFreeReturnBuffer(Buffer);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS LsaCallAuthenticationPackage(Windows::Win32::SystemServices::HANDLE LsaHandle, uint32_t AuthenticationPackage, void* ProtocolSubmitBuffer, uint32_t SubmitBufferLength, void** ProtocolReturnBuffer, uint32_t* ReturnBufferLength, int32_t* ProtocolStatus)
    {
        auto win32_impl_result = WIN32_IMPL_LsaCallAuthenticationPackage(LsaHandle, AuthenticationPackage, ProtocolSubmitBuffer, SubmitBufferLength, ProtocolReturnBuffer, ReturnBufferLength, ProtocolStatus);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS LsaDeregisterLogonProcess(Windows::Win32::SystemServices::HANDLE LsaHandle)
    {
        auto win32_impl_result = WIN32_IMPL_LsaDeregisterLogonProcess(LsaHandle);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS LsaConnectUntrusted(intptr_t* LsaHandle)
    {
        auto win32_impl_result = WIN32_IMPL_LsaConnectUntrusted(LsaHandle);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS LsaFreeMemory(void* Buffer)
    {
        auto win32_impl_result = WIN32_IMPL_LsaFreeMemory(Buffer);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS LsaClose(void* ObjectHandle)
    {
        auto win32_impl_result = WIN32_IMPL_LsaClose(ObjectHandle);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS LsaEnumerateLogonSessions(uint32_t* LogonSessionCount, Windows::Win32::Kernel::LUID** LogonSessionList)
    {
        auto win32_impl_result = WIN32_IMPL_LsaEnumerateLogonSessions(LogonSessionCount, LogonSessionList);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS LsaGetLogonSessionData(Windows::Win32::Kernel::LUID* LogonId, Windows::Win32::Security::SECURITY_LOGON_SESSION_DATA** ppLogonSessionData)
    {
        auto win32_impl_result = WIN32_IMPL_LsaGetLogonSessionData(LogonId, ppLogonSessionData);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS LsaOpenPolicy(Windows::Win32::Security::UNICODE_STRING* SystemName, Windows::Win32::WindowsProgramming::OBJECT_ATTRIBUTES* ObjectAttributes, uint32_t DesiredAccess, void** PolicyHandle)
    {
        auto win32_impl_result = WIN32_IMPL_LsaOpenPolicy(SystemName, ObjectAttributes, DesiredAccess, PolicyHandle);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS LsaSetCAPs(Windows::Win32::Security::UNICODE_STRING* CAPDNs, uint32_t CAPDNCount, uint32_t Flags)
    {
        auto win32_impl_result = WIN32_IMPL_LsaSetCAPs(CAPDNs, CAPDNCount, Flags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS LsaGetAppliedCAPIDs(Windows::Win32::Security::UNICODE_STRING* SystemName, void*** CAPIDs, uint32_t* CAPIDCount)
    {
        auto win32_impl_result = WIN32_IMPL_LsaGetAppliedCAPIDs(SystemName, CAPIDs, CAPIDCount);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS LsaQueryCAPs(void** CAPIDs, uint32_t CAPIDCount, Windows::Win32::Security::CENTRAL_ACCESS_POLICY** CAPs, uint32_t* CAPCount)
    {
        auto win32_impl_result = WIN32_IMPL_LsaQueryCAPs(CAPIDs, CAPIDCount, CAPs, CAPCount);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS LsaQueryInformationPolicy(void* PolicyHandle, Windows::Win32::Security::POLICY_INFORMATION_CLASS InformationClass, void** Buffer)
    {
        auto win32_impl_result = WIN32_IMPL_LsaQueryInformationPolicy(PolicyHandle, InformationClass, Buffer);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS LsaSetInformationPolicy(void* PolicyHandle, Windows::Win32::Security::POLICY_INFORMATION_CLASS InformationClass, void* Buffer)
    {
        auto win32_impl_result = WIN32_IMPL_LsaSetInformationPolicy(PolicyHandle, InformationClass, Buffer);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS LsaQueryDomainInformationPolicy(void* PolicyHandle, Windows::Win32::Security::POLICY_DOMAIN_INFORMATION_CLASS InformationClass, void** Buffer)
    {
        auto win32_impl_result = WIN32_IMPL_LsaQueryDomainInformationPolicy(PolicyHandle, InformationClass, Buffer);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS LsaSetDomainInformationPolicy(void* PolicyHandle, Windows::Win32::Security::POLICY_DOMAIN_INFORMATION_CLASS InformationClass, void* Buffer)
    {
        auto win32_impl_result = WIN32_IMPL_LsaSetDomainInformationPolicy(PolicyHandle, InformationClass, Buffer);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS LsaRegisterPolicyChangeNotification(Windows::Win32::Security::POLICY_NOTIFICATION_INFORMATION_CLASS InformationClass, Windows::Win32::SystemServices::HANDLE NotificationEventHandle)
    {
        auto win32_impl_result = WIN32_IMPL_LsaRegisterPolicyChangeNotification(InformationClass, NotificationEventHandle);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS LsaUnregisterPolicyChangeNotification(Windows::Win32::Security::POLICY_NOTIFICATION_INFORMATION_CLASS InformationClass, Windows::Win32::SystemServices::HANDLE NotificationEventHandle)
    {
        auto win32_impl_result = WIN32_IMPL_LsaUnregisterPolicyChangeNotification(InformationClass, NotificationEventHandle);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS LsaEnumerateTrustedDomains(void* PolicyHandle, uint32_t* EnumerationContext, void** Buffer, uint32_t PreferedMaximumLength, uint32_t* CountReturned)
    {
        auto win32_impl_result = WIN32_IMPL_LsaEnumerateTrustedDomains(PolicyHandle, EnumerationContext, Buffer, PreferedMaximumLength, CountReturned);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS LsaLookupNames(void* PolicyHandle, uint32_t Count, Windows::Win32::Security::UNICODE_STRING* Names, Windows::Win32::Security::LSA_REFERENCED_DOMAIN_LIST** ReferencedDomains, Windows::Win32::Security::LSA_TRANSLATED_SID** Sids)
    {
        auto win32_impl_result = WIN32_IMPL_LsaLookupNames(PolicyHandle, Count, Names, ReferencedDomains, Sids);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS LsaLookupNames2(void* PolicyHandle, uint32_t Flags, uint32_t Count, Windows::Win32::Security::UNICODE_STRING* Names, Windows::Win32::Security::LSA_REFERENCED_DOMAIN_LIST** ReferencedDomains, Windows::Win32::Security::LSA_TRANSLATED_SID2** Sids)
    {
        auto win32_impl_result = WIN32_IMPL_LsaLookupNames2(PolicyHandle, Flags, Count, Names, ReferencedDomains, Sids);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS LsaLookupSids(void* PolicyHandle, uint32_t Count, void** Sids, Windows::Win32::Security::LSA_REFERENCED_DOMAIN_LIST** ReferencedDomains, Windows::Win32::Security::LSA_TRANSLATED_NAME** Names)
    {
        auto win32_impl_result = WIN32_IMPL_LsaLookupSids(PolicyHandle, Count, Sids, ReferencedDomains, Names);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS LsaLookupSids2(void* PolicyHandle, uint32_t LookupOptions, uint32_t Count, void** Sids, Windows::Win32::Security::LSA_REFERENCED_DOMAIN_LIST** ReferencedDomains, Windows::Win32::Security::LSA_TRANSLATED_NAME** Names)
    {
        auto win32_impl_result = WIN32_IMPL_LsaLookupSids2(PolicyHandle, LookupOptions, Count, Sids, ReferencedDomains, Names);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS LsaEnumerateAccountsWithUserRight(void* PolicyHandle, Windows::Win32::Security::UNICODE_STRING* UserRight, void** Buffer, uint32_t* CountReturned)
    {
        auto win32_impl_result = WIN32_IMPL_LsaEnumerateAccountsWithUserRight(PolicyHandle, UserRight, Buffer, CountReturned);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS LsaEnumerateAccountRights(void* PolicyHandle, void* AccountSid, Windows::Win32::Security::UNICODE_STRING** UserRights, uint32_t* CountOfRights)
    {
        auto win32_impl_result = WIN32_IMPL_LsaEnumerateAccountRights(PolicyHandle, AccountSid, UserRights, CountOfRights);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS LsaAddAccountRights(void* PolicyHandle, void* AccountSid, Windows::Win32::Security::UNICODE_STRING* UserRights, uint32_t CountOfRights)
    {
        auto win32_impl_result = WIN32_IMPL_LsaAddAccountRights(PolicyHandle, AccountSid, UserRights, CountOfRights);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS LsaRemoveAccountRights(void* PolicyHandle, void* AccountSid, uint8_t AllRights, Windows::Win32::Security::UNICODE_STRING* UserRights, uint32_t CountOfRights)
    {
        auto win32_impl_result = WIN32_IMPL_LsaRemoveAccountRights(PolicyHandle, AccountSid, AllRights, UserRights, CountOfRights);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS LsaOpenTrustedDomainByName(void* PolicyHandle, Windows::Win32::Security::UNICODE_STRING* TrustedDomainName, uint32_t DesiredAccess, void** TrustedDomainHandle)
    {
        auto win32_impl_result = WIN32_IMPL_LsaOpenTrustedDomainByName(PolicyHandle, TrustedDomainName, DesiredAccess, TrustedDomainHandle);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS LsaQueryTrustedDomainInfo(void* PolicyHandle, void* TrustedDomainSid, Windows::Win32::Security::TRUSTED_INFORMATION_CLASS InformationClass, void** Buffer)
    {
        auto win32_impl_result = WIN32_IMPL_LsaQueryTrustedDomainInfo(PolicyHandle, TrustedDomainSid, InformationClass, Buffer);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS LsaSetTrustedDomainInformation(void* PolicyHandle, void* TrustedDomainSid, Windows::Win32::Security::TRUSTED_INFORMATION_CLASS InformationClass, void* Buffer)
    {
        auto win32_impl_result = WIN32_IMPL_LsaSetTrustedDomainInformation(PolicyHandle, TrustedDomainSid, InformationClass, Buffer);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS LsaDeleteTrustedDomain(void* PolicyHandle, void* TrustedDomainSid)
    {
        auto win32_impl_result = WIN32_IMPL_LsaDeleteTrustedDomain(PolicyHandle, TrustedDomainSid);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS LsaQueryTrustedDomainInfoByName(void* PolicyHandle, Windows::Win32::Security::UNICODE_STRING* TrustedDomainName, Windows::Win32::Security::TRUSTED_INFORMATION_CLASS InformationClass, void** Buffer)
    {
        auto win32_impl_result = WIN32_IMPL_LsaQueryTrustedDomainInfoByName(PolicyHandle, TrustedDomainName, InformationClass, Buffer);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS LsaSetTrustedDomainInfoByName(void* PolicyHandle, Windows::Win32::Security::UNICODE_STRING* TrustedDomainName, Windows::Win32::Security::TRUSTED_INFORMATION_CLASS InformationClass, void* Buffer)
    {
        auto win32_impl_result = WIN32_IMPL_LsaSetTrustedDomainInfoByName(PolicyHandle, TrustedDomainName, InformationClass, Buffer);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS LsaEnumerateTrustedDomainsEx(void* PolicyHandle, uint32_t* EnumerationContext, void** Buffer, uint32_t PreferedMaximumLength, uint32_t* CountReturned)
    {
        auto win32_impl_result = WIN32_IMPL_LsaEnumerateTrustedDomainsEx(PolicyHandle, EnumerationContext, Buffer, PreferedMaximumLength, CountReturned);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS LsaCreateTrustedDomainEx(void* PolicyHandle, Windows::Win32::Security::TRUSTED_DOMAIN_INFORMATION_EX* TrustedDomainInformation, Windows::Win32::Security::TRUSTED_DOMAIN_AUTH_INFORMATION* AuthenticationInformation, uint32_t DesiredAccess, void** TrustedDomainHandle)
    {
        auto win32_impl_result = WIN32_IMPL_LsaCreateTrustedDomainEx(PolicyHandle, TrustedDomainInformation, AuthenticationInformation, DesiredAccess, TrustedDomainHandle);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS LsaQueryForestTrustInformation(void* PolicyHandle, Windows::Win32::Security::UNICODE_STRING* TrustedDomainName, Windows::Win32::Security::LSA_FOREST_TRUST_INFORMATION** ForestTrustInfo)
    {
        auto win32_impl_result = WIN32_IMPL_LsaQueryForestTrustInformation(PolicyHandle, TrustedDomainName, ForestTrustInfo);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS LsaSetForestTrustInformation(void* PolicyHandle, Windows::Win32::Security::UNICODE_STRING* TrustedDomainName, Windows::Win32::Security::LSA_FOREST_TRUST_INFORMATION* ForestTrustInfo, uint8_t CheckOnly, Windows::Win32::Security::LSA_FOREST_TRUST_COLLISION_INFORMATION** CollisionInfo)
    {
        auto win32_impl_result = WIN32_IMPL_LsaSetForestTrustInformation(PolicyHandle, TrustedDomainName, ForestTrustInfo, CheckOnly, CollisionInfo);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS LsaStorePrivateData(void* PolicyHandle, Windows::Win32::Security::UNICODE_STRING* KeyName, Windows::Win32::Security::UNICODE_STRING* PrivateData)
    {
        auto win32_impl_result = WIN32_IMPL_LsaStorePrivateData(PolicyHandle, KeyName, PrivateData);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS LsaRetrievePrivateData(void* PolicyHandle, Windows::Win32::Security::UNICODE_STRING* KeyName, Windows::Win32::Security::UNICODE_STRING** PrivateData)
    {
        auto win32_impl_result = WIN32_IMPL_LsaRetrievePrivateData(PolicyHandle, KeyName, PrivateData);
        return win32_impl_result;
    }
    inline uint32_t LsaNtStatusToWinError(Windows::Win32::SystemServices::NTSTATUS Status)
    {
        auto win32_impl_result = WIN32_IMPL_LsaNtStatusToWinError(Status);
        return win32_impl_result;
    }
    inline uint8_t SystemFunction036(void* RandomBuffer, uint32_t RandomBufferLength)
    {
        auto win32_impl_result = WIN32_IMPL_SystemFunction036(RandomBuffer, RandomBufferLength);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS SystemFunction040(void* Memory, uint32_t MemorySize, uint32_t OptionFlags)
    {
        auto win32_impl_result = WIN32_IMPL_SystemFunction040(Memory, MemorySize, OptionFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS SystemFunction041(void* Memory, uint32_t MemorySize, uint32_t OptionFlags)
    {
        auto win32_impl_result = WIN32_IMPL_SystemFunction041(Memory, MemorySize, OptionFlags);
        return win32_impl_result;
    }
    inline uint8_t AuditSetSystemPolicy(Windows::Win32::Security::AUDIT_POLICY_INFORMATION* pAuditPolicy, uint32_t dwPolicyCount)
    {
        auto win32_impl_result = WIN32_IMPL_AuditSetSystemPolicy(pAuditPolicy, dwPolicyCount);
        return win32_impl_result;
    }
    inline uint8_t AuditSetPerUserPolicy(void* pSid, Windows::Win32::Security::AUDIT_POLICY_INFORMATION* pAuditPolicy, uint32_t dwPolicyCount)
    {
        auto win32_impl_result = WIN32_IMPL_AuditSetPerUserPolicy(pSid, pAuditPolicy, dwPolicyCount);
        return win32_impl_result;
    }
    inline uint8_t AuditQuerySystemPolicy(::win32::guid* pSubCategoryGuids, uint32_t dwPolicyCount, Windows::Win32::Security::AUDIT_POLICY_INFORMATION** ppAuditPolicy)
    {
        auto win32_impl_result = WIN32_IMPL_AuditQuerySystemPolicy(pSubCategoryGuids, dwPolicyCount, ppAuditPolicy);
        return win32_impl_result;
    }
    inline uint8_t AuditQueryPerUserPolicy(void* pSid, ::win32::guid* pSubCategoryGuids, uint32_t dwPolicyCount, Windows::Win32::Security::AUDIT_POLICY_INFORMATION** ppAuditPolicy)
    {
        auto win32_impl_result = WIN32_IMPL_AuditQueryPerUserPolicy(pSid, pSubCategoryGuids, dwPolicyCount, ppAuditPolicy);
        return win32_impl_result;
    }
    inline uint8_t AuditEnumeratePerUserPolicy(Windows::Win32::Security::POLICY_AUDIT_SID_ARRAY** ppAuditSidArray)
    {
        auto win32_impl_result = WIN32_IMPL_AuditEnumeratePerUserPolicy(ppAuditSidArray);
        return win32_impl_result;
    }
    inline uint8_t AuditComputeEffectivePolicyBySid(void* pSid, ::win32::guid* pSubCategoryGuids, uint32_t dwPolicyCount, Windows::Win32::Security::AUDIT_POLICY_INFORMATION** ppAuditPolicy)
    {
        auto win32_impl_result = WIN32_IMPL_AuditComputeEffectivePolicyBySid(pSid, pSubCategoryGuids, dwPolicyCount, ppAuditPolicy);
        return win32_impl_result;
    }
    inline uint8_t AuditComputeEffectivePolicyByToken(Windows::Win32::SystemServices::HANDLE hTokenHandle, ::win32::guid* pSubCategoryGuids, uint32_t dwPolicyCount, Windows::Win32::Security::AUDIT_POLICY_INFORMATION** ppAuditPolicy)
    {
        auto win32_impl_result = WIN32_IMPL_AuditComputeEffectivePolicyByToken(hTokenHandle, pSubCategoryGuids, dwPolicyCount, ppAuditPolicy);
        return win32_impl_result;
    }
    inline uint8_t AuditEnumerateCategories(::win32::guid** ppAuditCategoriesArray, uint32_t* pdwCountReturned)
    {
        auto win32_impl_result = WIN32_IMPL_AuditEnumerateCategories(ppAuditCategoriesArray, pdwCountReturned);
        return win32_impl_result;
    }
    inline uint8_t AuditEnumerateSubCategories(::win32::guid* pAuditCategoryGuid, uint8_t bRetrieveAllSubCategories, ::win32::guid** ppAuditSubCategoriesArray, uint32_t* pdwCountReturned)
    {
        auto win32_impl_result = WIN32_IMPL_AuditEnumerateSubCategories(pAuditCategoryGuid, bRetrieveAllSubCategories, ppAuditSubCategoriesArray, pdwCountReturned);
        return win32_impl_result;
    }
    inline uint8_t AuditLookupCategoryNameW(::win32::guid* pAuditCategoryGuid, uint16_t** ppszCategoryName)
    {
        auto win32_impl_result = WIN32_IMPL_AuditLookupCategoryNameW(pAuditCategoryGuid, ppszCategoryName);
        return win32_impl_result;
    }
    inline uint8_t AuditLookupCategoryNameA(::win32::guid* pAuditCategoryGuid, int8_t** ppszCategoryName)
    {
        auto win32_impl_result = WIN32_IMPL_AuditLookupCategoryNameA(pAuditCategoryGuid, ppszCategoryName);
        return win32_impl_result;
    }
    inline uint8_t AuditLookupSubCategoryNameW(::win32::guid* pAuditSubCategoryGuid, uint16_t** ppszSubCategoryName)
    {
        auto win32_impl_result = WIN32_IMPL_AuditLookupSubCategoryNameW(pAuditSubCategoryGuid, ppszSubCategoryName);
        return win32_impl_result;
    }
    inline uint8_t AuditLookupSubCategoryNameA(::win32::guid* pAuditSubCategoryGuid, int8_t** ppszSubCategoryName)
    {
        auto win32_impl_result = WIN32_IMPL_AuditLookupSubCategoryNameA(pAuditSubCategoryGuid, ppszSubCategoryName);
        return win32_impl_result;
    }
    inline uint8_t AuditLookupCategoryIdFromCategoryGuid(::win32::guid* pAuditCategoryGuid, Windows::Win32::Security::POLICY_AUDIT_EVENT_TYPE* pAuditCategoryId)
    {
        auto win32_impl_result = WIN32_IMPL_AuditLookupCategoryIdFromCategoryGuid(pAuditCategoryGuid, pAuditCategoryId);
        return win32_impl_result;
    }
    inline uint8_t AuditLookupCategoryGuidFromCategoryId(Windows::Win32::Security::POLICY_AUDIT_EVENT_TYPE AuditCategoryId, ::win32::guid* pAuditCategoryGuid)
    {
        auto win32_impl_result = WIN32_IMPL_AuditLookupCategoryGuidFromCategoryId(AuditCategoryId, pAuditCategoryGuid);
        return win32_impl_result;
    }
    inline uint8_t AuditSetSecurity(uint32_t SecurityInformation, void* pSecurityDescriptor)
    {
        auto win32_impl_result = WIN32_IMPL_AuditSetSecurity(SecurityInformation, pSecurityDescriptor);
        return win32_impl_result;
    }
    inline uint8_t AuditQuerySecurity(uint32_t SecurityInformation, void** ppSecurityDescriptor)
    {
        auto win32_impl_result = WIN32_IMPL_AuditQuerySecurity(SecurityInformation, ppSecurityDescriptor);
        return win32_impl_result;
    }
    inline uint8_t AuditSetGlobalSaclW(uint16_t* ObjectTypeName, Windows::Win32::Security::ACL* Acl)
    {
        auto win32_impl_result = WIN32_IMPL_AuditSetGlobalSaclW(ObjectTypeName, Acl);
        return win32_impl_result;
    }
    inline uint8_t AuditSetGlobalSaclA(int8_t* ObjectTypeName, Windows::Win32::Security::ACL* Acl)
    {
        auto win32_impl_result = WIN32_IMPL_AuditSetGlobalSaclA(ObjectTypeName, Acl);
        return win32_impl_result;
    }
    inline uint8_t AuditQueryGlobalSaclW(uint16_t* ObjectTypeName, Windows::Win32::Security::ACL** Acl)
    {
        auto win32_impl_result = WIN32_IMPL_AuditQueryGlobalSaclW(ObjectTypeName, Acl);
        return win32_impl_result;
    }
    inline uint8_t AuditQueryGlobalSaclA(int8_t* ObjectTypeName, Windows::Win32::Security::ACL** Acl)
    {
        auto win32_impl_result = WIN32_IMPL_AuditQueryGlobalSaclA(ObjectTypeName, Acl);
        return win32_impl_result;
    }
    inline void AuditFree(void* Buffer)
    {
        WIN32_IMPL_AuditFree(Buffer);
    }
    inline int32_t AcquireCredentialsHandleW(uint16_t* pszPrincipal, uint16_t* pszPackage, uint32_t fCredentialUse, void* pvLogonId, void* pAuthData, Windows::Win32::Security::SEC_GET_KEY_FN* pGetKeyFn, void* pvGetKeyArgument, Windows::Win32::Security::SecHandle* phCredential, Windows::Win32::SystemServices::LARGE_INTEGER* ptsExpiry)
    {
        auto win32_impl_result = WIN32_IMPL_AcquireCredentialsHandleW(pszPrincipal, pszPackage, fCredentialUse, pvLogonId, pAuthData, pGetKeyFn, pvGetKeyArgument, phCredential, ptsExpiry);
        return win32_impl_result;
    }
    inline int32_t AcquireCredentialsHandleA(int8_t* pszPrincipal, int8_t* pszPackage, uint32_t fCredentialUse, void* pvLogonId, void* pAuthData, Windows::Win32::Security::SEC_GET_KEY_FN* pGetKeyFn, void* pvGetKeyArgument, Windows::Win32::Security::SecHandle* phCredential, Windows::Win32::SystemServices::LARGE_INTEGER* ptsExpiry)
    {
        auto win32_impl_result = WIN32_IMPL_AcquireCredentialsHandleA(pszPrincipal, pszPackage, fCredentialUse, pvLogonId, pAuthData, pGetKeyFn, pvGetKeyArgument, phCredential, ptsExpiry);
        return win32_impl_result;
    }
    inline int32_t FreeCredentialsHandle(Windows::Win32::Security::SecHandle* phCredential)
    {
        auto win32_impl_result = WIN32_IMPL_FreeCredentialsHandle(phCredential);
        return win32_impl_result;
    }
    inline int32_t AddCredentialsW(Windows::Win32::Security::SecHandle* hCredentials, uint16_t* pszPrincipal, uint16_t* pszPackage, uint32_t fCredentialUse, void* pAuthData, Windows::Win32::Security::SEC_GET_KEY_FN* pGetKeyFn, void* pvGetKeyArgument, Windows::Win32::SystemServices::LARGE_INTEGER* ptsExpiry)
    {
        auto win32_impl_result = WIN32_IMPL_AddCredentialsW(hCredentials, pszPrincipal, pszPackage, fCredentialUse, pAuthData, pGetKeyFn, pvGetKeyArgument, ptsExpiry);
        return win32_impl_result;
    }
    inline int32_t AddCredentialsA(Windows::Win32::Security::SecHandle* hCredentials, int8_t* pszPrincipal, int8_t* pszPackage, uint32_t fCredentialUse, void* pAuthData, Windows::Win32::Security::SEC_GET_KEY_FN* pGetKeyFn, void* pvGetKeyArgument, Windows::Win32::SystemServices::LARGE_INTEGER* ptsExpiry)
    {
        auto win32_impl_result = WIN32_IMPL_AddCredentialsA(hCredentials, pszPrincipal, pszPackage, fCredentialUse, pAuthData, pGetKeyFn, pvGetKeyArgument, ptsExpiry);
        return win32_impl_result;
    }
    inline int32_t ChangeAccountPasswordW(uint16_t* pszPackageName, uint16_t* pszDomainName, uint16_t* pszAccountName, uint16_t* pszOldPassword, uint16_t* pszNewPassword, uint8_t bImpersonating, uint32_t dwReserved, Windows::Win32::Security::SecBufferDesc* pOutput)
    {
        auto win32_impl_result = WIN32_IMPL_ChangeAccountPasswordW(pszPackageName, pszDomainName, pszAccountName, pszOldPassword, pszNewPassword, bImpersonating, dwReserved, pOutput);
        return win32_impl_result;
    }
    inline int32_t ChangeAccountPasswordA(int8_t* pszPackageName, int8_t* pszDomainName, int8_t* pszAccountName, int8_t* pszOldPassword, int8_t* pszNewPassword, uint8_t bImpersonating, uint32_t dwReserved, Windows::Win32::Security::SecBufferDesc* pOutput)
    {
        auto win32_impl_result = WIN32_IMPL_ChangeAccountPasswordA(pszPackageName, pszDomainName, pszAccountName, pszOldPassword, pszNewPassword, bImpersonating, dwReserved, pOutput);
        return win32_impl_result;
    }
    inline int32_t InitializeSecurityContextW(Windows::Win32::Security::SecHandle* phCredential, Windows::Win32::Security::SecHandle* phContext, uint16_t* pszTargetName, uint32_t fContextReq, uint32_t Reserved1, uint32_t TargetDataRep, Windows::Win32::Security::SecBufferDesc* pInput, uint32_t Reserved2, Windows::Win32::Security::SecHandle* phNewContext, Windows::Win32::Security::SecBufferDesc* pOutput, uint32_t* pfContextAttr, Windows::Win32::SystemServices::LARGE_INTEGER* ptsExpiry)
    {
        auto win32_impl_result = WIN32_IMPL_InitializeSecurityContextW(phCredential, phContext, pszTargetName, fContextReq, Reserved1, TargetDataRep, pInput, Reserved2, phNewContext, pOutput, pfContextAttr, ptsExpiry);
        return win32_impl_result;
    }
    inline int32_t InitializeSecurityContextA(Windows::Win32::Security::SecHandle* phCredential, Windows::Win32::Security::SecHandle* phContext, int8_t* pszTargetName, uint32_t fContextReq, uint32_t Reserved1, uint32_t TargetDataRep, Windows::Win32::Security::SecBufferDesc* pInput, uint32_t Reserved2, Windows::Win32::Security::SecHandle* phNewContext, Windows::Win32::Security::SecBufferDesc* pOutput, uint32_t* pfContextAttr, Windows::Win32::SystemServices::LARGE_INTEGER* ptsExpiry)
    {
        auto win32_impl_result = WIN32_IMPL_InitializeSecurityContextA(phCredential, phContext, pszTargetName, fContextReq, Reserved1, TargetDataRep, pInput, Reserved2, phNewContext, pOutput, pfContextAttr, ptsExpiry);
        return win32_impl_result;
    }
    inline int32_t AcceptSecurityContext(Windows::Win32::Security::SecHandle* phCredential, Windows::Win32::Security::SecHandle* phContext, Windows::Win32::Security::SecBufferDesc* pInput, uint32_t fContextReq, uint32_t TargetDataRep, Windows::Win32::Security::SecHandle* phNewContext, Windows::Win32::Security::SecBufferDesc* pOutput, uint32_t* pfContextAttr, Windows::Win32::SystemServices::LARGE_INTEGER* ptsExpiry)
    {
        auto win32_impl_result = WIN32_IMPL_AcceptSecurityContext(phCredential, phContext, pInput, fContextReq, TargetDataRep, phNewContext, pOutput, pfContextAttr, ptsExpiry);
        return win32_impl_result;
    }
    inline int32_t CompleteAuthToken(Windows::Win32::Security::SecHandle* phContext, Windows::Win32::Security::SecBufferDesc* pToken)
    {
        auto win32_impl_result = WIN32_IMPL_CompleteAuthToken(phContext, pToken);
        return win32_impl_result;
    }
    inline int32_t ImpersonateSecurityContext(Windows::Win32::Security::SecHandle* phContext)
    {
        auto win32_impl_result = WIN32_IMPL_ImpersonateSecurityContext(phContext);
        return win32_impl_result;
    }
    inline int32_t RevertSecurityContext(Windows::Win32::Security::SecHandle* phContext)
    {
        auto win32_impl_result = WIN32_IMPL_RevertSecurityContext(phContext);
        return win32_impl_result;
    }
    inline int32_t QuerySecurityContextToken(Windows::Win32::Security::SecHandle* phContext, void** Token)
    {
        auto win32_impl_result = WIN32_IMPL_QuerySecurityContextToken(phContext, Token);
        return win32_impl_result;
    }
    inline int32_t DeleteSecurityContext(Windows::Win32::Security::SecHandle* phContext)
    {
        auto win32_impl_result = WIN32_IMPL_DeleteSecurityContext(phContext);
        return win32_impl_result;
    }
    inline int32_t ApplyControlToken(Windows::Win32::Security::SecHandle* phContext, Windows::Win32::Security::SecBufferDesc* pInput)
    {
        auto win32_impl_result = WIN32_IMPL_ApplyControlToken(phContext, pInput);
        return win32_impl_result;
    }
    inline int32_t QueryContextAttributesW(Windows::Win32::Security::SecHandle* phContext, uint32_t ulAttribute, void* pBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_QueryContextAttributesW(phContext, ulAttribute, pBuffer);
        return win32_impl_result;
    }
    inline int32_t QueryContextAttributesExW(Windows::Win32::Security::SecHandle* phContext, uint32_t ulAttribute, void* pBuffer, uint32_t cbBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_QueryContextAttributesExW(phContext, ulAttribute, pBuffer, cbBuffer);
        return win32_impl_result;
    }
    inline int32_t QueryContextAttributesA(Windows::Win32::Security::SecHandle* phContext, uint32_t ulAttribute, void* pBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_QueryContextAttributesA(phContext, ulAttribute, pBuffer);
        return win32_impl_result;
    }
    inline int32_t QueryContextAttributesExA(Windows::Win32::Security::SecHandle* phContext, uint32_t ulAttribute, void* pBuffer, uint32_t cbBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_QueryContextAttributesExA(phContext, ulAttribute, pBuffer, cbBuffer);
        return win32_impl_result;
    }
    inline int32_t SetContextAttributesW(Windows::Win32::Security::SecHandle* phContext, uint32_t ulAttribute, void* pBuffer, uint32_t cbBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_SetContextAttributesW(phContext, ulAttribute, pBuffer, cbBuffer);
        return win32_impl_result;
    }
    inline int32_t SetContextAttributesA(Windows::Win32::Security::SecHandle* phContext, uint32_t ulAttribute, void* pBuffer, uint32_t cbBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_SetContextAttributesA(phContext, ulAttribute, pBuffer, cbBuffer);
        return win32_impl_result;
    }
    inline int32_t QueryCredentialsAttributesW(Windows::Win32::Security::SecHandle* phCredential, uint32_t ulAttribute, void* pBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_QueryCredentialsAttributesW(phCredential, ulAttribute, pBuffer);
        return win32_impl_result;
    }
    inline int32_t QueryCredentialsAttributesExW(Windows::Win32::Security::SecHandle* phCredential, uint32_t ulAttribute, void* pBuffer, uint32_t cbBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_QueryCredentialsAttributesExW(phCredential, ulAttribute, pBuffer, cbBuffer);
        return win32_impl_result;
    }
    inline int32_t QueryCredentialsAttributesA(Windows::Win32::Security::SecHandle* phCredential, uint32_t ulAttribute, void* pBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_QueryCredentialsAttributesA(phCredential, ulAttribute, pBuffer);
        return win32_impl_result;
    }
    inline int32_t QueryCredentialsAttributesExA(Windows::Win32::Security::SecHandle* phCredential, uint32_t ulAttribute, void* pBuffer, uint32_t cbBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_QueryCredentialsAttributesExA(phCredential, ulAttribute, pBuffer, cbBuffer);
        return win32_impl_result;
    }
    inline int32_t SetCredentialsAttributesW(Windows::Win32::Security::SecHandle* phCredential, uint32_t ulAttribute, void* pBuffer, uint32_t cbBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_SetCredentialsAttributesW(phCredential, ulAttribute, pBuffer, cbBuffer);
        return win32_impl_result;
    }
    inline int32_t SetCredentialsAttributesA(Windows::Win32::Security::SecHandle* phCredential, uint32_t ulAttribute, void* pBuffer, uint32_t cbBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_SetCredentialsAttributesA(phCredential, ulAttribute, pBuffer, cbBuffer);
        return win32_impl_result;
    }
    inline int32_t FreeContextBuffer(void* pvContextBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_FreeContextBuffer(pvContextBuffer);
        return win32_impl_result;
    }
    inline int32_t MakeSignature(Windows::Win32::Security::SecHandle* phContext, uint32_t fQOP, Windows::Win32::Security::SecBufferDesc* pMessage, uint32_t MessageSeqNo)
    {
        auto win32_impl_result = WIN32_IMPL_MakeSignature(phContext, fQOP, pMessage, MessageSeqNo);
        return win32_impl_result;
    }
    inline int32_t VerifySignature(Windows::Win32::Security::SecHandle* phContext, Windows::Win32::Security::SecBufferDesc* pMessage, uint32_t MessageSeqNo, uint32_t* pfQOP)
    {
        auto win32_impl_result = WIN32_IMPL_VerifySignature(phContext, pMessage, MessageSeqNo, pfQOP);
        return win32_impl_result;
    }
    inline int32_t EncryptMessage(Windows::Win32::Security::SecHandle* phContext, uint32_t fQOP, Windows::Win32::Security::SecBufferDesc* pMessage, uint32_t MessageSeqNo)
    {
        auto win32_impl_result = WIN32_IMPL_EncryptMessage(phContext, fQOP, pMessage, MessageSeqNo);
        return win32_impl_result;
    }
    inline int32_t DecryptMessage(Windows::Win32::Security::SecHandle* phContext, Windows::Win32::Security::SecBufferDesc* pMessage, uint32_t MessageSeqNo, uint32_t* pfQOP)
    {
        auto win32_impl_result = WIN32_IMPL_DecryptMessage(phContext, pMessage, MessageSeqNo, pfQOP);
        return win32_impl_result;
    }
    inline int32_t EnumerateSecurityPackagesW(uint32_t* pcPackages, Windows::Win32::Security::SecPkgInfoW** ppPackageInfo)
    {
        auto win32_impl_result = WIN32_IMPL_EnumerateSecurityPackagesW(pcPackages, ppPackageInfo);
        return win32_impl_result;
    }
    inline int32_t EnumerateSecurityPackagesA(uint32_t* pcPackages, Windows::Win32::Security::SecPkgInfoA** ppPackageInfo)
    {
        auto win32_impl_result = WIN32_IMPL_EnumerateSecurityPackagesA(pcPackages, ppPackageInfo);
        return win32_impl_result;
    }
    inline int32_t QuerySecurityPackageInfoW(uint16_t* pszPackageName, Windows::Win32::Security::SecPkgInfoW** ppPackageInfo)
    {
        auto win32_impl_result = WIN32_IMPL_QuerySecurityPackageInfoW(pszPackageName, ppPackageInfo);
        return win32_impl_result;
    }
    inline int32_t QuerySecurityPackageInfoA(int8_t* pszPackageName, Windows::Win32::Security::SecPkgInfoA** ppPackageInfo)
    {
        auto win32_impl_result = WIN32_IMPL_QuerySecurityPackageInfoA(pszPackageName, ppPackageInfo);
        return win32_impl_result;
    }
    inline int32_t ExportSecurityContext(Windows::Win32::Security::SecHandle* phContext, uint32_t fFlags, Windows::Win32::Security::SecBuffer* pPackedContext, void** pToken)
    {
        auto win32_impl_result = WIN32_IMPL_ExportSecurityContext(phContext, fFlags, pPackedContext, pToken);
        return win32_impl_result;
    }
    inline int32_t ImportSecurityContextW(uint16_t* pszPackage, Windows::Win32::Security::SecBuffer* pPackedContext, void* Token, Windows::Win32::Security::SecHandle* phContext)
    {
        auto win32_impl_result = WIN32_IMPL_ImportSecurityContextW(pszPackage, pPackedContext, Token, phContext);
        return win32_impl_result;
    }
    inline int32_t ImportSecurityContextA(int8_t* pszPackage, Windows::Win32::Security::SecBuffer* pPackedContext, void* Token, Windows::Win32::Security::SecHandle* phContext)
    {
        auto win32_impl_result = WIN32_IMPL_ImportSecurityContextA(pszPackage, pPackedContext, Token, phContext);
        return win32_impl_result;
    }
    inline Windows::Win32::Security::SecurityFunctionTableA* InitSecurityInterfaceA()
    {
        auto win32_impl_result = WIN32_IMPL_InitSecurityInterfaceA();
        return win32_impl_result;
    }
    inline Windows::Win32::Security::SecurityFunctionTableW* InitSecurityInterfaceW()
    {
        auto win32_impl_result = WIN32_IMPL_InitSecurityInterfaceW();
        return win32_impl_result;
    }
    inline int32_t SaslEnumerateProfilesA(int8_t** ProfileList, uint32_t* ProfileCount)
    {
        auto win32_impl_result = WIN32_IMPL_SaslEnumerateProfilesA(ProfileList, ProfileCount);
        return win32_impl_result;
    }
    inline int32_t SaslEnumerateProfilesW(uint16_t** ProfileList, uint32_t* ProfileCount)
    {
        auto win32_impl_result = WIN32_IMPL_SaslEnumerateProfilesW(ProfileList, ProfileCount);
        return win32_impl_result;
    }
    inline int32_t SaslGetProfilePackageA(int8_t* ProfileName, Windows::Win32::Security::SecPkgInfoA** PackageInfo)
    {
        auto win32_impl_result = WIN32_IMPL_SaslGetProfilePackageA(ProfileName, PackageInfo);
        return win32_impl_result;
    }
    inline int32_t SaslGetProfilePackageW(uint16_t* ProfileName, Windows::Win32::Security::SecPkgInfoW** PackageInfo)
    {
        auto win32_impl_result = WIN32_IMPL_SaslGetProfilePackageW(ProfileName, PackageInfo);
        return win32_impl_result;
    }
    inline int32_t SaslIdentifyPackageA(Windows::Win32::Security::SecBufferDesc* pInput, Windows::Win32::Security::SecPkgInfoA** PackageInfo)
    {
        auto win32_impl_result = WIN32_IMPL_SaslIdentifyPackageA(pInput, PackageInfo);
        return win32_impl_result;
    }
    inline int32_t SaslIdentifyPackageW(Windows::Win32::Security::SecBufferDesc* pInput, Windows::Win32::Security::SecPkgInfoW** PackageInfo)
    {
        auto win32_impl_result = WIN32_IMPL_SaslIdentifyPackageW(pInput, PackageInfo);
        return win32_impl_result;
    }
    inline int32_t SaslInitializeSecurityContextW(Windows::Win32::Security::SecHandle* phCredential, Windows::Win32::Security::SecHandle* phContext, uint16_t* pszTargetName, uint32_t fContextReq, uint32_t Reserved1, uint32_t TargetDataRep, Windows::Win32::Security::SecBufferDesc* pInput, uint32_t Reserved2, Windows::Win32::Security::SecHandle* phNewContext, Windows::Win32::Security::SecBufferDesc* pOutput, uint32_t* pfContextAttr, Windows::Win32::SystemServices::LARGE_INTEGER* ptsExpiry)
    {
        auto win32_impl_result = WIN32_IMPL_SaslInitializeSecurityContextW(phCredential, phContext, pszTargetName, fContextReq, Reserved1, TargetDataRep, pInput, Reserved2, phNewContext, pOutput, pfContextAttr, ptsExpiry);
        return win32_impl_result;
    }
    inline int32_t SaslInitializeSecurityContextA(Windows::Win32::Security::SecHandle* phCredential, Windows::Win32::Security::SecHandle* phContext, int8_t* pszTargetName, uint32_t fContextReq, uint32_t Reserved1, uint32_t TargetDataRep, Windows::Win32::Security::SecBufferDesc* pInput, uint32_t Reserved2, Windows::Win32::Security::SecHandle* phNewContext, Windows::Win32::Security::SecBufferDesc* pOutput, uint32_t* pfContextAttr, Windows::Win32::SystemServices::LARGE_INTEGER* ptsExpiry)
    {
        auto win32_impl_result = WIN32_IMPL_SaslInitializeSecurityContextA(phCredential, phContext, pszTargetName, fContextReq, Reserved1, TargetDataRep, pInput, Reserved2, phNewContext, pOutput, pfContextAttr, ptsExpiry);
        return win32_impl_result;
    }
    inline int32_t SaslAcceptSecurityContext(Windows::Win32::Security::SecHandle* phCredential, Windows::Win32::Security::SecHandle* phContext, Windows::Win32::Security::SecBufferDesc* pInput, uint32_t fContextReq, uint32_t TargetDataRep, Windows::Win32::Security::SecHandle* phNewContext, Windows::Win32::Security::SecBufferDesc* pOutput, uint32_t* pfContextAttr, Windows::Win32::SystemServices::LARGE_INTEGER* ptsExpiry)
    {
        auto win32_impl_result = WIN32_IMPL_SaslAcceptSecurityContext(phCredential, phContext, pInput, fContextReq, TargetDataRep, phNewContext, pOutput, pfContextAttr, ptsExpiry);
        return win32_impl_result;
    }
    inline int32_t SaslSetContextOption(Windows::Win32::Security::SecHandle* ContextHandle, uint32_t Option, void* Value, uint32_t Size)
    {
        auto win32_impl_result = WIN32_IMPL_SaslSetContextOption(ContextHandle, Option, Value, Size);
        return win32_impl_result;
    }
    inline int32_t SaslGetContextOption(Windows::Win32::Security::SecHandle* ContextHandle, uint32_t Option, void* Value, uint32_t Size, uint32_t* Needed)
    {
        auto win32_impl_result = WIN32_IMPL_SaslGetContextOption(ContextHandle, Option, Value, Size, Needed);
        return win32_impl_result;
    }
    inline uint32_t SspiPromptForCredentialsW(uint16_t* pszTargetName, void* pUiInfo, uint32_t dwAuthError, uint16_t* pszPackage, void* pInputAuthIdentity, void** ppAuthIdentity, int32_t* pfSave, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_SspiPromptForCredentialsW(pszTargetName, pUiInfo, dwAuthError, pszPackage, pInputAuthIdentity, ppAuthIdentity, pfSave, dwFlags);
        return win32_impl_result;
    }
    inline uint32_t SspiPromptForCredentialsA(int8_t* pszTargetName, void* pUiInfo, uint32_t dwAuthError, int8_t* pszPackage, void* pInputAuthIdentity, void** ppAuthIdentity, int32_t* pfSave, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_SspiPromptForCredentialsA(pszTargetName, pUiInfo, dwAuthError, pszPackage, pInputAuthIdentity, ppAuthIdentity, pfSave, dwFlags);
        return win32_impl_result;
    }
    inline int32_t SspiPrepareForCredRead(void* AuthIdentity, uint16_t* pszTargetName, uint32_t* pCredmanCredentialType, uint16_t** ppszCredmanTargetName)
    {
        auto win32_impl_result = WIN32_IMPL_SspiPrepareForCredRead(AuthIdentity, pszTargetName, pCredmanCredentialType, ppszCredmanTargetName);
        return win32_impl_result;
    }
    inline int32_t SspiPrepareForCredWrite(void* AuthIdentity, uint16_t* pszTargetName, uint32_t* pCredmanCredentialType, uint16_t** ppszCredmanTargetName, uint16_t** ppszCredmanUserName, uint8_t** ppCredentialBlob, uint32_t* pCredentialBlobSize)
    {
        auto win32_impl_result = WIN32_IMPL_SspiPrepareForCredWrite(AuthIdentity, pszTargetName, pCredmanCredentialType, ppszCredmanTargetName, ppszCredmanUserName, ppCredentialBlob, pCredentialBlobSize);
        return win32_impl_result;
    }
    inline int32_t SspiEncryptAuthIdentity(void* AuthData)
    {
        auto win32_impl_result = WIN32_IMPL_SspiEncryptAuthIdentity(AuthData);
        return win32_impl_result;
    }
    inline int32_t SspiEncryptAuthIdentityEx(uint32_t Options, void* AuthData)
    {
        auto win32_impl_result = WIN32_IMPL_SspiEncryptAuthIdentityEx(Options, AuthData);
        return win32_impl_result;
    }
    inline int32_t SspiDecryptAuthIdentity(void* EncryptedAuthData)
    {
        auto win32_impl_result = WIN32_IMPL_SspiDecryptAuthIdentity(EncryptedAuthData);
        return win32_impl_result;
    }
    inline int32_t SspiDecryptAuthIdentityEx(uint32_t Options, void* EncryptedAuthData)
    {
        auto win32_impl_result = WIN32_IMPL_SspiDecryptAuthIdentityEx(Options, EncryptedAuthData);
        return win32_impl_result;
    }
    inline uint8_t SspiIsAuthIdentityEncrypted(void* EncryptedAuthData)
    {
        auto win32_impl_result = WIN32_IMPL_SspiIsAuthIdentityEncrypted(EncryptedAuthData);
        return win32_impl_result;
    }
    inline int32_t SspiEncodeAuthIdentityAsStrings(void* pAuthIdentity, uint16_t** ppszUserName, uint16_t** ppszDomainName, uint16_t** ppszPackedCredentialsString)
    {
        auto win32_impl_result = WIN32_IMPL_SspiEncodeAuthIdentityAsStrings(pAuthIdentity, ppszUserName, ppszDomainName, ppszPackedCredentialsString);
        return win32_impl_result;
    }
    inline int32_t SspiValidateAuthIdentity(void* AuthData)
    {
        auto win32_impl_result = WIN32_IMPL_SspiValidateAuthIdentity(AuthData);
        return win32_impl_result;
    }
    inline int32_t SspiCopyAuthIdentity(void* AuthData, void** AuthDataCopy)
    {
        auto win32_impl_result = WIN32_IMPL_SspiCopyAuthIdentity(AuthData, AuthDataCopy);
        return win32_impl_result;
    }
    inline void SspiFreeAuthIdentity(void* AuthData)
    {
        WIN32_IMPL_SspiFreeAuthIdentity(AuthData);
    }
    inline void SspiZeroAuthIdentity(void* AuthData)
    {
        WIN32_IMPL_SspiZeroAuthIdentity(AuthData);
    }
    inline void SspiLocalFree(void* DataBuffer)
    {
        WIN32_IMPL_SspiLocalFree(DataBuffer);
    }
    inline int32_t SspiEncodeStringsAsAuthIdentity(uint16_t* pszUserName, uint16_t* pszDomainName, uint16_t* pszPackedCredentialsString, void** ppAuthIdentity)
    {
        auto win32_impl_result = WIN32_IMPL_SspiEncodeStringsAsAuthIdentity(pszUserName, pszDomainName, pszPackedCredentialsString, ppAuthIdentity);
        return win32_impl_result;
    }
    inline int32_t SspiCompareAuthIdentities(void* AuthIdentity1, void* AuthIdentity2, uint8_t* SameSuppliedUser, uint8_t* SameSuppliedIdentity)
    {
        auto win32_impl_result = WIN32_IMPL_SspiCompareAuthIdentities(AuthIdentity1, AuthIdentity2, SameSuppliedUser, SameSuppliedIdentity);
        return win32_impl_result;
    }
    inline int32_t SspiMarshalAuthIdentity(void* AuthIdentity, uint32_t* AuthIdentityLength, int8_t** AuthIdentityByteArray)
    {
        auto win32_impl_result = WIN32_IMPL_SspiMarshalAuthIdentity(AuthIdentity, AuthIdentityLength, AuthIdentityByteArray);
        return win32_impl_result;
    }
    inline int32_t SspiUnmarshalAuthIdentity(uint32_t AuthIdentityLength, int8_t* AuthIdentityByteArray, void** ppAuthIdentity)
    {
        auto win32_impl_result = WIN32_IMPL_SspiUnmarshalAuthIdentity(AuthIdentityLength, AuthIdentityByteArray, ppAuthIdentity);
        return win32_impl_result;
    }
    inline uint8_t SspiIsPromptingNeeded(uint32_t ErrorOrNtStatus)
    {
        auto win32_impl_result = WIN32_IMPL_SspiIsPromptingNeeded(ErrorOrNtStatus);
        return win32_impl_result;
    }
    inline int32_t SspiGetTargetHostName(uint16_t* pszTargetName, uint16_t** pszHostName)
    {
        auto win32_impl_result = WIN32_IMPL_SspiGetTargetHostName(pszTargetName, pszHostName);
        return win32_impl_result;
    }
    inline int32_t SspiExcludePackage(void* AuthIdentity, uint16_t* pszPackageName, void** ppNewAuthIdentity)
    {
        auto win32_impl_result = WIN32_IMPL_SspiExcludePackage(AuthIdentity, pszPackageName, ppNewAuthIdentity);
        return win32_impl_result;
    }
    inline int32_t AddSecurityPackageA(int8_t* pszPackageName, Windows::Win32::Security::SECURITY_PACKAGE_OPTIONS* pOptions)
    {
        auto win32_impl_result = WIN32_IMPL_AddSecurityPackageA(pszPackageName, pOptions);
        return win32_impl_result;
    }
    inline int32_t AddSecurityPackageW(uint16_t* pszPackageName, Windows::Win32::Security::SECURITY_PACKAGE_OPTIONS* pOptions)
    {
        auto win32_impl_result = WIN32_IMPL_AddSecurityPackageW(pszPackageName, pOptions);
        return win32_impl_result;
    }
    inline int32_t DeleteSecurityPackageA(int8_t* pszPackageName)
    {
        auto win32_impl_result = WIN32_IMPL_DeleteSecurityPackageA(pszPackageName);
        return win32_impl_result;
    }
    inline int32_t DeleteSecurityPackageW(uint16_t* pszPackageName)
    {
        auto win32_impl_result = WIN32_IMPL_DeleteSecurityPackageW(pszPackageName);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CredWriteW(Windows::Win32::Security::CREDENTIALW* Credential, uint32_t Flags)
    {
        auto win32_impl_result = WIN32_IMPL_CredWriteW(Credential, Flags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CredWriteA(Windows::Win32::Security::CREDENTIALA* Credential, uint32_t Flags)
    {
        auto win32_impl_result = WIN32_IMPL_CredWriteA(Credential, Flags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CredReadW(uint16_t* TargetName, uint32_t Type, uint32_t Flags, Windows::Win32::Security::CREDENTIALW** Credential)
    {
        auto win32_impl_result = WIN32_IMPL_CredReadW(TargetName, Type, Flags, Credential);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CredReadA(int8_t* TargetName, uint32_t Type, uint32_t Flags, Windows::Win32::Security::CREDENTIALA** Credential)
    {
        auto win32_impl_result = WIN32_IMPL_CredReadA(TargetName, Type, Flags, Credential);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CredEnumerateW(uint16_t* Filter, uint32_t Flags, uint32_t* Count, Windows::Win32::Security::CREDENTIALW*** Credential)
    {
        auto win32_impl_result = WIN32_IMPL_CredEnumerateW(Filter, Flags, Count, Credential);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CredEnumerateA(int8_t* Filter, uint32_t Flags, uint32_t* Count, Windows::Win32::Security::CREDENTIALA*** Credential)
    {
        auto win32_impl_result = WIN32_IMPL_CredEnumerateA(Filter, Flags, Count, Credential);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CredWriteDomainCredentialsW(Windows::Win32::Security::CREDENTIAL_TARGET_INFORMATIONW* TargetInfo, Windows::Win32::Security::CREDENTIALW* Credential, uint32_t Flags)
    {
        auto win32_impl_result = WIN32_IMPL_CredWriteDomainCredentialsW(TargetInfo, Credential, Flags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CredWriteDomainCredentialsA(Windows::Win32::Security::CREDENTIAL_TARGET_INFORMATIONA* TargetInfo, Windows::Win32::Security::CREDENTIALA* Credential, uint32_t Flags)
    {
        auto win32_impl_result = WIN32_IMPL_CredWriteDomainCredentialsA(TargetInfo, Credential, Flags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CredReadDomainCredentialsW(Windows::Win32::Security::CREDENTIAL_TARGET_INFORMATIONW* TargetInfo, uint32_t Flags, uint32_t* Count, Windows::Win32::Security::CREDENTIALW*** Credential)
    {
        auto win32_impl_result = WIN32_IMPL_CredReadDomainCredentialsW(TargetInfo, Flags, Count, Credential);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CredReadDomainCredentialsA(Windows::Win32::Security::CREDENTIAL_TARGET_INFORMATIONA* TargetInfo, uint32_t Flags, uint32_t* Count, Windows::Win32::Security::CREDENTIALA*** Credential)
    {
        auto win32_impl_result = WIN32_IMPL_CredReadDomainCredentialsA(TargetInfo, Flags, Count, Credential);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CredDeleteW(uint16_t* TargetName, uint32_t Type, uint32_t Flags)
    {
        auto win32_impl_result = WIN32_IMPL_CredDeleteW(TargetName, Type, Flags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CredDeleteA(int8_t* TargetName, uint32_t Type, uint32_t Flags)
    {
        auto win32_impl_result = WIN32_IMPL_CredDeleteA(TargetName, Type, Flags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CredRenameW(uint16_t* OldTargetName, uint16_t* NewTargetName, uint32_t Type, uint32_t Flags)
    {
        auto win32_impl_result = WIN32_IMPL_CredRenameW(OldTargetName, NewTargetName, Type, Flags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CredRenameA(int8_t* OldTargetName, int8_t* NewTargetName, uint32_t Type, uint32_t Flags)
    {
        auto win32_impl_result = WIN32_IMPL_CredRenameA(OldTargetName, NewTargetName, Type, Flags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CredGetTargetInfoW(uint16_t* TargetName, uint32_t Flags, Windows::Win32::Security::CREDENTIAL_TARGET_INFORMATIONW** TargetInfo)
    {
        auto win32_impl_result = WIN32_IMPL_CredGetTargetInfoW(TargetName, Flags, TargetInfo);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CredGetTargetInfoA(int8_t* TargetName, uint32_t Flags, Windows::Win32::Security::CREDENTIAL_TARGET_INFORMATIONA** TargetInfo)
    {
        auto win32_impl_result = WIN32_IMPL_CredGetTargetInfoA(TargetName, Flags, TargetInfo);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CredMarshalCredentialW(Windows::Win32::Security::CRED_MARSHAL_TYPE CredType, void* Credential, uint16_t** MarshaledCredential)
    {
        auto win32_impl_result = WIN32_IMPL_CredMarshalCredentialW(CredType, Credential, MarshaledCredential);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CredMarshalCredentialA(Windows::Win32::Security::CRED_MARSHAL_TYPE CredType, void* Credential, int8_t** MarshaledCredential)
    {
        auto win32_impl_result = WIN32_IMPL_CredMarshalCredentialA(CredType, Credential, MarshaledCredential);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CredUnmarshalCredentialW(uint16_t* MarshaledCredential, Windows::Win32::Security::CRED_MARSHAL_TYPE* CredType, void** Credential)
    {
        auto win32_impl_result = WIN32_IMPL_CredUnmarshalCredentialW(MarshaledCredential, CredType, Credential);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CredUnmarshalCredentialA(int8_t* MarshaledCredential, Windows::Win32::Security::CRED_MARSHAL_TYPE* CredType, void** Credential)
    {
        auto win32_impl_result = WIN32_IMPL_CredUnmarshalCredentialA(MarshaledCredential, CredType, Credential);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CredIsMarshaledCredentialW(uint16_t* MarshaledCredential)
    {
        auto win32_impl_result = WIN32_IMPL_CredIsMarshaledCredentialW(MarshaledCredential);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CredIsMarshaledCredentialA(int8_t* MarshaledCredential)
    {
        auto win32_impl_result = WIN32_IMPL_CredIsMarshaledCredentialA(MarshaledCredential);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CredUnPackAuthenticationBufferW(uint32_t dwFlags, void* pAuthBuffer, uint32_t cbAuthBuffer, uint16_t* pszUserName, uint32_t* pcchMaxUserName, uint16_t* pszDomainName, uint32_t* pcchMaxDomainName, uint16_t* pszPassword, uint32_t* pcchMaxPassword)
    {
        auto win32_impl_result = WIN32_IMPL_CredUnPackAuthenticationBufferW(dwFlags, pAuthBuffer, cbAuthBuffer, pszUserName, pcchMaxUserName, pszDomainName, pcchMaxDomainName, pszPassword, pcchMaxPassword);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CredUnPackAuthenticationBufferA(uint32_t dwFlags, void* pAuthBuffer, uint32_t cbAuthBuffer, int8_t* pszUserName, uint32_t* pcchlMaxUserName, int8_t* pszDomainName, uint32_t* pcchMaxDomainName, int8_t* pszPassword, uint32_t* pcchMaxPassword)
    {
        auto win32_impl_result = WIN32_IMPL_CredUnPackAuthenticationBufferA(dwFlags, pAuthBuffer, cbAuthBuffer, pszUserName, pcchlMaxUserName, pszDomainName, pcchMaxDomainName, pszPassword, pcchMaxPassword);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CredPackAuthenticationBufferW(uint32_t dwFlags, uint16_t* pszUserName, uint16_t* pszPassword, uint8_t* pPackedCredentials, uint32_t* pcbPackedCredentials)
    {
        auto win32_impl_result = WIN32_IMPL_CredPackAuthenticationBufferW(dwFlags, pszUserName, pszPassword, pPackedCredentials, pcbPackedCredentials);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CredPackAuthenticationBufferA(uint32_t dwFlags, int8_t* pszUserName, int8_t* pszPassword, uint8_t* pPackedCredentials, uint32_t* pcbPackedCredentials)
    {
        auto win32_impl_result = WIN32_IMPL_CredPackAuthenticationBufferA(dwFlags, pszUserName, pszPassword, pPackedCredentials, pcbPackedCredentials);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CredProtectW(Windows::Win32::SystemServices::BOOL fAsSelf, uint16_t* pszCredentials, uint32_t cchCredentials, uint16_t* pszProtectedCredentials, uint32_t* pcchMaxChars, Windows::Win32::Security::CRED_PROTECTION_TYPE* ProtectionType)
    {
        auto win32_impl_result = WIN32_IMPL_CredProtectW(fAsSelf, pszCredentials, cchCredentials, pszProtectedCredentials, pcchMaxChars, ProtectionType);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CredProtectA(Windows::Win32::SystemServices::BOOL fAsSelf, int8_t* pszCredentials, uint32_t cchCredentials, int8_t* pszProtectedCredentials, uint32_t* pcchMaxChars, Windows::Win32::Security::CRED_PROTECTION_TYPE* ProtectionType)
    {
        auto win32_impl_result = WIN32_IMPL_CredProtectA(fAsSelf, pszCredentials, cchCredentials, pszProtectedCredentials, pcchMaxChars, ProtectionType);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CredUnprotectW(Windows::Win32::SystemServices::BOOL fAsSelf, uint16_t* pszProtectedCredentials, uint32_t cchProtectedCredentials, uint16_t* pszCredentials, uint32_t* pcchMaxChars)
    {
        auto win32_impl_result = WIN32_IMPL_CredUnprotectW(fAsSelf, pszProtectedCredentials, cchProtectedCredentials, pszCredentials, pcchMaxChars);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CredUnprotectA(Windows::Win32::SystemServices::BOOL fAsSelf, int8_t* pszProtectedCredentials, uint32_t cchProtectedCredentials, int8_t* pszCredentials, uint32_t* pcchMaxChars)
    {
        auto win32_impl_result = WIN32_IMPL_CredUnprotectA(fAsSelf, pszProtectedCredentials, cchProtectedCredentials, pszCredentials, pcchMaxChars);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CredIsProtectedW(uint16_t* pszProtectedCredentials, Windows::Win32::Security::CRED_PROTECTION_TYPE* pProtectionType)
    {
        auto win32_impl_result = WIN32_IMPL_CredIsProtectedW(pszProtectedCredentials, pProtectionType);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CredIsProtectedA(int8_t* pszProtectedCredentials, Windows::Win32::Security::CRED_PROTECTION_TYPE* pProtectionType)
    {
        auto win32_impl_result = WIN32_IMPL_CredIsProtectedA(pszProtectedCredentials, pProtectionType);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CredFindBestCredentialW(uint16_t* TargetName, uint32_t Type, uint32_t Flags, Windows::Win32::Security::CREDENTIALW** Credential)
    {
        auto win32_impl_result = WIN32_IMPL_CredFindBestCredentialW(TargetName, Type, Flags, Credential);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CredFindBestCredentialA(int8_t* TargetName, uint32_t Type, uint32_t Flags, Windows::Win32::Security::CREDENTIALA** Credential)
    {
        auto win32_impl_result = WIN32_IMPL_CredFindBestCredentialA(TargetName, Type, Flags, Credential);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CredGetSessionTypes(uint32_t MaximumPersistCount, uint32_t* MaximumPersist)
    {
        auto win32_impl_result = WIN32_IMPL_CredGetSessionTypes(MaximumPersistCount, MaximumPersist);
        return win32_impl_result;
    }
    inline void CredFree(void* Buffer)
    {
        WIN32_IMPL_CredFree(Buffer);
    }
    inline uint32_t CredUIPromptForCredentialsW(Windows::Win32::Security::CREDUI_INFOW* pUiInfo, uint16_t* pszTargetName, Windows::Win32::Security::SecHandle* pContext, uint32_t dwAuthError, uint16_t* pszUserName, uint32_t ulUserNameBufferSize, uint16_t* pszPassword, uint32_t ulPasswordBufferSize, int32_t* save, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_CredUIPromptForCredentialsW(pUiInfo, pszTargetName, pContext, dwAuthError, pszUserName, ulUserNameBufferSize, pszPassword, ulPasswordBufferSize, save, dwFlags);
        return win32_impl_result;
    }
    inline uint32_t CredUIPromptForCredentialsA(Windows::Win32::Security::CREDUI_INFOA* pUiInfo, int8_t* pszTargetName, Windows::Win32::Security::SecHandle* pContext, uint32_t dwAuthError, int8_t* pszUserName, uint32_t ulUserNameBufferSize, int8_t* pszPassword, uint32_t ulPasswordBufferSize, int32_t* save, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_CredUIPromptForCredentialsA(pUiInfo, pszTargetName, pContext, dwAuthError, pszUserName, ulUserNameBufferSize, pszPassword, ulPasswordBufferSize, save, dwFlags);
        return win32_impl_result;
    }
    inline uint32_t CredUIPromptForWindowsCredentialsW(Windows::Win32::Security::CREDUI_INFOW* pUiInfo, uint32_t dwAuthError, uint32_t* pulAuthPackage, void* pvInAuthBuffer, uint32_t ulInAuthBufferSize, void** ppvOutAuthBuffer, uint32_t* pulOutAuthBufferSize, int32_t* pfSave, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_CredUIPromptForWindowsCredentialsW(pUiInfo, dwAuthError, pulAuthPackage, pvInAuthBuffer, ulInAuthBufferSize, ppvOutAuthBuffer, pulOutAuthBufferSize, pfSave, dwFlags);
        return win32_impl_result;
    }
    inline uint32_t CredUIPromptForWindowsCredentialsA(Windows::Win32::Security::CREDUI_INFOA* pUiInfo, uint32_t dwAuthError, uint32_t* pulAuthPackage, void* pvInAuthBuffer, uint32_t ulInAuthBufferSize, void** ppvOutAuthBuffer, uint32_t* pulOutAuthBufferSize, int32_t* pfSave, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_CredUIPromptForWindowsCredentialsA(pUiInfo, dwAuthError, pulAuthPackage, pvInAuthBuffer, ulInAuthBufferSize, ppvOutAuthBuffer, pulOutAuthBufferSize, pfSave, dwFlags);
        return win32_impl_result;
    }
    inline uint32_t CredUIParseUserNameW(uint16_t* UserName, uint16_t* user, uint32_t userBufferSize, uint16_t* domain, uint32_t domainBufferSize)
    {
        auto win32_impl_result = WIN32_IMPL_CredUIParseUserNameW(UserName, user, userBufferSize, domain, domainBufferSize);
        return win32_impl_result;
    }
    inline uint32_t CredUIParseUserNameA(int8_t* userName, int8_t* user, uint32_t userBufferSize, int8_t* domain, uint32_t domainBufferSize)
    {
        auto win32_impl_result = WIN32_IMPL_CredUIParseUserNameA(userName, user, userBufferSize, domain, domainBufferSize);
        return win32_impl_result;
    }
    inline uint32_t CredUICmdLinePromptForCredentialsW(uint16_t* pszTargetName, Windows::Win32::Security::SecHandle* pContext, uint32_t dwAuthError, uint16_t* UserName, uint32_t ulUserBufferSize, uint16_t* pszPassword, uint32_t ulPasswordBufferSize, int32_t* pfSave, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_CredUICmdLinePromptForCredentialsW(pszTargetName, pContext, dwAuthError, UserName, ulUserBufferSize, pszPassword, ulPasswordBufferSize, pfSave, dwFlags);
        return win32_impl_result;
    }
    inline uint32_t CredUICmdLinePromptForCredentialsA(int8_t* pszTargetName, Windows::Win32::Security::SecHandle* pContext, uint32_t dwAuthError, int8_t* UserName, uint32_t ulUserBufferSize, int8_t* pszPassword, uint32_t ulPasswordBufferSize, int32_t* pfSave, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_CredUICmdLinePromptForCredentialsA(pszTargetName, pContext, dwAuthError, UserName, ulUserBufferSize, pszPassword, ulPasswordBufferSize, pfSave, dwFlags);
        return win32_impl_result;
    }
    inline uint32_t CredUIConfirmCredentialsW(uint16_t* pszTargetName, Windows::Win32::SystemServices::BOOL bConfirm)
    {
        auto win32_impl_result = WIN32_IMPL_CredUIConfirmCredentialsW(pszTargetName, bConfirm);
        return win32_impl_result;
    }
    inline uint32_t CredUIConfirmCredentialsA(int8_t* pszTargetName, Windows::Win32::SystemServices::BOOL bConfirm)
    {
        auto win32_impl_result = WIN32_IMPL_CredUIConfirmCredentialsA(pszTargetName, bConfirm);
        return win32_impl_result;
    }
    inline uint32_t CredUIStoreSSOCredW(uint16_t* pszRealm, uint16_t* pszUsername, uint16_t* pszPassword, Windows::Win32::SystemServices::BOOL bPersist)
    {
        auto win32_impl_result = WIN32_IMPL_CredUIStoreSSOCredW(pszRealm, pszUsername, pszPassword, bPersist);
        return win32_impl_result;
    }
    inline uint32_t CredUIReadSSOCredW(uint16_t* pszRealm, uint16_t** ppszUsername)
    {
        auto win32_impl_result = WIN32_IMPL_CredUIReadSSOCredW(pszRealm, ppszUsername);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS CredMarshalTargetInfo(Windows::Win32::Security::CREDENTIAL_TARGET_INFORMATIONW* InTargetInfo, uint16_t** Buffer, uint32_t* BufferSize)
    {
        auto win32_impl_result = WIN32_IMPL_CredMarshalTargetInfo(InTargetInfo, Buffer, BufferSize);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS CredUnmarshalTargetInfo(uint16_t* Buffer, uint32_t BufferSize, Windows::Win32::Security::CREDENTIAL_TARGET_INFORMATIONW** RetTargetInfo, uint32_t* RetActualSize)
    {
        auto win32_impl_result = WIN32_IMPL_CredUnmarshalTargetInfo(Buffer, BufferSize, RetTargetInfo, RetActualSize);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SslEmptyCacheA(int8_t* pszTargetName, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_SslEmptyCacheA(pszTargetName, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SslEmptyCacheW(uint16_t* pszTargetName, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_SslEmptyCacheW(pszTargetName, dwFlags);
        return win32_impl_result;
    }
    inline void SslGenerateRandomBits(uint8_t* pRandomData, int32_t cRandomData)
    {
        WIN32_IMPL_SslGenerateRandomBits(pRandomData, cRandomData);
    }
    inline Windows::Win32::SystemServices::BOOL SslCrackCertificate(uint8_t* pbCertificate, uint32_t cbCertificate, uint32_t dwFlags, Windows::Win32::Security::X509Certificate** ppCertificate)
    {
        auto win32_impl_result = WIN32_IMPL_SslCrackCertificate(pbCertificate, cbCertificate, dwFlags, ppCertificate);
        return win32_impl_result;
    }
    inline void SslFreeCertificate(Windows::Win32::Security::X509Certificate* pCertificate)
    {
        WIN32_IMPL_SslFreeCertificate(pCertificate);
    }
    inline uint32_t SslGetMaximumKeySize(uint32_t Reserved)
    {
        auto win32_impl_result = WIN32_IMPL_SslGetMaximumKeySize(Reserved);
        return win32_impl_result;
    }
    inline int32_t SslGetServerIdentity(uint8_t* ClientHello, uint32_t ClientHelloSize, uint8_t** ServerIdentity, uint32_t* ServerIdentitySize, uint32_t Flags)
    {
        auto win32_impl_result = WIN32_IMPL_SslGetServerIdentity(ClientHello, ClientHelloSize, ServerIdentity, ServerIdentitySize, Flags);
        return win32_impl_result;
    }
    inline int32_t SslGetExtensions(uint8_t* clientHello, uint32_t clientHelloByteSize, Windows::Win32::Security::SCH_EXTENSION_DATA* genericExtensions, uint8_t genericExtensionsCount, uint32_t* bytesToRead, Windows::Win32::Security::SchGetExtensionsOptions flags)
    {
        auto win32_impl_result = WIN32_IMPL_SslGetExtensions(clientHello, clientHelloByteSize, genericExtensions, genericExtensionsCount, bytesToRead, flags);
        return win32_impl_result;
    }
    inline int32_t KeyCredentialManagerGetOperationErrorStates(Windows::Win32::Security::KeyCredentialManagerOperationType keyCredentialManagerOperationType, int32_t* isReady, Windows::Win32::Security::KeyCredentialManagerOperationErrorStates* keyCredentialManagerOperationErrorStates)
    {
        auto win32_impl_result = WIN32_IMPL_KeyCredentialManagerGetOperationErrorStates(keyCredentialManagerOperationType, isReady, keyCredentialManagerOperationErrorStates);
        return win32_impl_result;
    }
    inline int32_t KeyCredentialManagerShowUIOperation(Windows::Win32::WindowsAndMessaging::HWND hWndOwner, Windows::Win32::Security::KeyCredentialManagerOperationType keyCredentialManagerOperationType)
    {
        auto win32_impl_result = WIN32_IMPL_KeyCredentialManagerShowUIOperation(hWndOwner, keyCredentialManagerOperationType);
        return win32_impl_result;
    }
    inline int32_t KeyCredentialManagerGetInformation(Windows::Win32::Security::KeyCredentialManagerInfo** keyCredentialManagerInfo)
    {
        auto win32_impl_result = WIN32_IMPL_KeyCredentialManagerGetInformation(keyCredentialManagerInfo);
        return win32_impl_result;
    }
    inline void KeyCredentialManagerFreeInformation(Windows::Win32::Security::KeyCredentialManagerInfo* keyCredentialManagerInfo)
    {
        WIN32_IMPL_KeyCredentialManagerFreeInformation(keyCredentialManagerInfo);
    }
    inline uint32_t NPAddConnection(Windows::Win32::Security::NETRESOURCEW* lpNetResource, uint16_t* lpPassword, uint16_t* lpUserName)
    {
        auto win32_impl_result = WIN32_IMPL_NPAddConnection(lpNetResource, lpPassword, lpUserName);
        return win32_impl_result;
    }
    inline uint32_t NPAddConnection3(Windows::Win32::WindowsAndMessaging::HWND hwndOwner, Windows::Win32::Security::NETRESOURCEW* lpNetResource, uint16_t* lpPassword, uint16_t* lpUserName, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_NPAddConnection3(hwndOwner, lpNetResource, lpPassword, lpUserName, dwFlags);
        return win32_impl_result;
    }
    inline uint32_t NPAddConnection4(Windows::Win32::WindowsAndMessaging::HWND hwndOwner, Windows::Win32::Security::NETRESOURCEW* lpNetResource, void* lpAuthBuffer, uint32_t cbAuthBuffer, uint32_t dwFlags, uint8_t* lpUseOptions, uint32_t cbUseOptions)
    {
        auto win32_impl_result = WIN32_IMPL_NPAddConnection4(hwndOwner, lpNetResource, lpAuthBuffer, cbAuthBuffer, dwFlags, lpUseOptions, cbUseOptions);
        return win32_impl_result;
    }
    inline uint32_t NPCancelConnection(uint16_t* lpName, Windows::Win32::SystemServices::BOOL fForce)
    {
        auto win32_impl_result = WIN32_IMPL_NPCancelConnection(lpName, fForce);
        return win32_impl_result;
    }
    inline uint32_t NPGetConnection(uint16_t* lpLocalName, uint16_t* lpRemoteName, uint32_t* lpnBufferLen)
    {
        auto win32_impl_result = WIN32_IMPL_NPGetConnection(lpLocalName, lpRemoteName, lpnBufferLen);
        return win32_impl_result;
    }
    inline uint32_t NPGetConnection3(uint16_t* lpLocalName, uint32_t dwLevel, void* lpBuffer, uint32_t* lpBufferSize)
    {
        auto win32_impl_result = WIN32_IMPL_NPGetConnection3(lpLocalName, dwLevel, lpBuffer, lpBufferSize);
        return win32_impl_result;
    }
    inline uint32_t NPGetUniversalName(uint16_t* lpLocalPath, uint32_t dwInfoLevel, void* lpBuffer, uint32_t* lpBufferSize)
    {
        auto win32_impl_result = WIN32_IMPL_NPGetUniversalName(lpLocalPath, dwInfoLevel, lpBuffer, lpBufferSize);
        return win32_impl_result;
    }
    inline uint32_t NPGetConnectionPerformance(uint16_t* lpRemoteName, Windows::Win32::Security::NETCONNECTINFOSTRUCT* lpNetConnectInfo)
    {
        auto win32_impl_result = WIN32_IMPL_NPGetConnectionPerformance(lpRemoteName, lpNetConnectInfo);
        return win32_impl_result;
    }
    inline uint32_t NPOpenEnum(uint32_t dwScope, uint32_t dwType, uint32_t dwUsage, Windows::Win32::Security::NETRESOURCEW* lpNetResource, intptr_t* lphEnum)
    {
        auto win32_impl_result = WIN32_IMPL_NPOpenEnum(dwScope, dwType, dwUsage, lpNetResource, lphEnum);
        return win32_impl_result;
    }
    inline uint32_t NPEnumResource(Windows::Win32::SystemServices::HANDLE hEnum, uint32_t* lpcCount, void* lpBuffer, uint32_t* lpBufferSize)
    {
        auto win32_impl_result = WIN32_IMPL_NPEnumResource(hEnum, lpcCount, lpBuffer, lpBufferSize);
        return win32_impl_result;
    }
    inline uint32_t NPCloseEnum(Windows::Win32::SystemServices::HANDLE hEnum)
    {
        auto win32_impl_result = WIN32_IMPL_NPCloseEnum(hEnum);
        return win32_impl_result;
    }
    inline uint32_t NPGetCaps(uint32_t ndex)
    {
        auto win32_impl_result = WIN32_IMPL_NPGetCaps(ndex);
        return win32_impl_result;
    }
    inline uint32_t NPGetUser(uint16_t* lpName, uint16_t* lpUserName, uint32_t* lpnBufferLen)
    {
        auto win32_impl_result = WIN32_IMPL_NPGetUser(lpName, lpUserName, lpnBufferLen);
        return win32_impl_result;
    }
    inline uint32_t NPGetPersistentUseOptionsForConnection(uint16_t* lpRemotePath, uint8_t* lpReadUseOptions, uint32_t cbReadUseOptions, uint8_t* lpWriteUseOptions, uint32_t* lpSizeWriteUseOptions)
    {
        auto win32_impl_result = WIN32_IMPL_NPGetPersistentUseOptionsForConnection(lpRemotePath, lpReadUseOptions, cbReadUseOptions, lpWriteUseOptions, lpSizeWriteUseOptions);
        return win32_impl_result;
    }
    inline uint32_t NPGetResourceParent(Windows::Win32::Security::NETRESOURCEW* lpNetResource, void* lpBuffer, uint32_t* lpBufferSize)
    {
        auto win32_impl_result = WIN32_IMPL_NPGetResourceParent(lpNetResource, lpBuffer, lpBufferSize);
        return win32_impl_result;
    }
    inline uint32_t NPGetResourceInformation(Windows::Win32::Security::NETRESOURCEW* lpNetResource, void* lpBuffer, uint32_t* lpBufferSize, uint16_t** lplpSystem)
    {
        auto win32_impl_result = WIN32_IMPL_NPGetResourceInformation(lpNetResource, lpBuffer, lpBufferSize, lplpSystem);
        return win32_impl_result;
    }
    inline uint32_t NPFormatNetworkName(uint16_t* lpRemoteName, uint16_t* lpFormattedName, uint32_t* lpnLength, uint32_t dwFlags, uint32_t dwAveCharPerLine)
    {
        auto win32_impl_result = WIN32_IMPL_NPFormatNetworkName(lpRemoteName, lpFormattedName, lpnLength, dwFlags, dwAveCharPerLine);
        return win32_impl_result;
    }
    inline void WNetSetLastErrorA(uint32_t err, int8_t* lpError, int8_t* lpProviders)
    {
        WIN32_IMPL_WNetSetLastErrorA(err, lpError, lpProviders);
    }
    inline void WNetSetLastErrorW(uint32_t err, uint16_t* lpError, uint16_t* lpProviders)
    {
        WIN32_IMPL_WNetSetLastErrorW(err, lpError, lpProviders);
    }
    inline Windows::Win32::SystemServices::NTSTATUS PstGetTrustAnchors(Windows::Win32::Security::UNICODE_STRING* pTargetName, uint32_t cCriteria, Windows::Win32::Security::CERT_SELECT_CRITERIA* rgpCriteria, Windows::Win32::Security::SecPkgContext_IssuerListInfoEx** ppTrustedIssuers)
    {
        auto win32_impl_result = WIN32_IMPL_PstGetTrustAnchors(pTargetName, cCriteria, rgpCriteria, ppTrustedIssuers);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS PstGetTrustAnchorsEx(Windows::Win32::Security::UNICODE_STRING* pTargetName, uint32_t cCriteria, Windows::Win32::Security::CERT_SELECT_CRITERIA* rgpCriteria, Windows::Win32::Security::CERT_CONTEXT* pCertContext, Windows::Win32::Security::SecPkgContext_IssuerListInfoEx** ppTrustedIssuers)
    {
        auto win32_impl_result = WIN32_IMPL_PstGetTrustAnchorsEx(pTargetName, cCriteria, rgpCriteria, pCertContext, ppTrustedIssuers);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS PstGetCertificateChain(Windows::Win32::Security::CERT_CONTEXT* pCert, Windows::Win32::Security::SecPkgContext_IssuerListInfoEx* pTrustedIssuers, Windows::Win32::Security::CERT_CHAIN_CONTEXT** ppCertChainContext)
    {
        auto win32_impl_result = WIN32_IMPL_PstGetCertificateChain(pCert, pTrustedIssuers, ppCertChainContext);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS PstGetCertificates(Windows::Win32::Security::UNICODE_STRING* pTargetName, uint32_t cCriteria, Windows::Win32::Security::CERT_SELECT_CRITERIA* rgpCriteria, Windows::Win32::SystemServices::BOOL bIsClient, uint32_t* pdwCertChainContextCount, Windows::Win32::Security::CERT_CHAIN_CONTEXT*** ppCertChainContexts)
    {
        auto win32_impl_result = WIN32_IMPL_PstGetCertificates(pTargetName, cCriteria, rgpCriteria, bIsClient, pdwCertChainContextCount, ppCertChainContexts);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS PstAcquirePrivateKey(Windows::Win32::Security::CERT_CONTEXT* pCert)
    {
        auto win32_impl_result = WIN32_IMPL_PstAcquirePrivateKey(pCert);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS PstValidate(Windows::Win32::Security::UNICODE_STRING* pTargetName, Windows::Win32::SystemServices::BOOL bIsClient, Windows::Win32::Security::CERT_USAGE_MATCH* pRequestedIssuancePolicy, void** phAdditionalCertStore, Windows::Win32::Security::CERT_CONTEXT* pCert, ::win32::guid* pProvGUID)
    {
        auto win32_impl_result = WIN32_IMPL_PstValidate(pTargetName, bIsClient, pRequestedIssuancePolicy, phAdditionalCertStore, pCert, pProvGUID);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS PstMapCertificate(Windows::Win32::Security::CERT_CONTEXT* pCert, Windows::Win32::Security::LSA_TOKEN_INFORMATION_TYPE* pTokenInformationType, void** ppTokenInformation)
    {
        auto win32_impl_result = WIN32_IMPL_PstMapCertificate(pCert, pTokenInformationType, ppTokenInformation);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS PstGetUserNameForCertificate(Windows::Win32::Security::CERT_CONTEXT* pCertContext, Windows::Win32::Security::UNICODE_STRING* UserName)
    {
        auto win32_impl_result = WIN32_IMPL_PstGetUserNameForCertificate(pCertContext, UserName);
        return win32_impl_result;
    }
    inline void SendSAS(Windows::Win32::SystemServices::BOOL AsUser)
    {
        WIN32_IMPL_SendSAS(AsUser);
    }
    inline Windows::Win32::SystemServices::BOOL AuthzAccessCheck(uint32_t Flags, Windows::Win32::Security::AUTHZ_CLIENT_CONTEXT_HANDLE__* hAuthzClientContext, Windows::Win32::Security::AUTHZ_ACCESS_REQUEST* pRequest, Windows::Win32::Security::AUTHZ_AUDIT_EVENT_HANDLE__* hAuditEvent, void* pSecurityDescriptor, void** OptionalSecurityDescriptorArray, uint32_t OptionalSecurityDescriptorCount, Windows::Win32::Security::AUTHZ_ACCESS_REPLY* pReply, Windows::Win32::Security::AUTHZ_ACCESS_CHECK_RESULTS_HANDLE__** phAccessCheckResults)
    {
        auto win32_impl_result = WIN32_IMPL_AuthzAccessCheck(Flags, hAuthzClientContext, pRequest, hAuditEvent, pSecurityDescriptor, OptionalSecurityDescriptorArray, OptionalSecurityDescriptorCount, pReply, phAccessCheckResults);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AuthzCachedAccessCheck(uint32_t Flags, Windows::Win32::Security::AUTHZ_ACCESS_CHECK_RESULTS_HANDLE__* hAccessCheckResults, Windows::Win32::Security::AUTHZ_ACCESS_REQUEST* pRequest, Windows::Win32::Security::AUTHZ_AUDIT_EVENT_HANDLE__* hAuditEvent, Windows::Win32::Security::AUTHZ_ACCESS_REPLY* pReply)
    {
        auto win32_impl_result = WIN32_IMPL_AuthzCachedAccessCheck(Flags, hAccessCheckResults, pRequest, hAuditEvent, pReply);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AuthzOpenObjectAudit(uint32_t Flags, Windows::Win32::Security::AUTHZ_CLIENT_CONTEXT_HANDLE__* hAuthzClientContext, Windows::Win32::Security::AUTHZ_ACCESS_REQUEST* pRequest, Windows::Win32::Security::AUTHZ_AUDIT_EVENT_HANDLE__* hAuditEvent, void* pSecurityDescriptor, void** OptionalSecurityDescriptorArray, uint32_t OptionalSecurityDescriptorCount, Windows::Win32::Security::AUTHZ_ACCESS_REPLY* pReply)
    {
        auto win32_impl_result = WIN32_IMPL_AuthzOpenObjectAudit(Flags, hAuthzClientContext, pRequest, hAuditEvent, pSecurityDescriptor, OptionalSecurityDescriptorArray, OptionalSecurityDescriptorCount, pReply);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AuthzFreeHandle(Windows::Win32::Security::AUTHZ_ACCESS_CHECK_RESULTS_HANDLE__* hAccessCheckResults)
    {
        auto win32_impl_result = WIN32_IMPL_AuthzFreeHandle(hAccessCheckResults);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AuthzInitializeResourceManager(uint32_t Flags, Windows::Win32::Security::PFN_AUTHZ_DYNAMIC_ACCESS_CHECK* pfnDynamicAccessCheck, Windows::Win32::Security::PFN_AUTHZ_COMPUTE_DYNAMIC_GROUPS* pfnComputeDynamicGroups, Windows::Win32::Security::PFN_AUTHZ_FREE_DYNAMIC_GROUPS* pfnFreeDynamicGroups, uint16_t* szResourceManagerName, Windows::Win32::Security::AUTHZ_RESOURCE_MANAGER_HANDLE__** phAuthzResourceManager)
    {
        auto win32_impl_result = WIN32_IMPL_AuthzInitializeResourceManager(Flags, pfnDynamicAccessCheck, pfnComputeDynamicGroups, pfnFreeDynamicGroups, szResourceManagerName, phAuthzResourceManager);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AuthzInitializeResourceManagerEx(uint32_t Flags, Windows::Win32::Security::AUTHZ_INIT_INFO* pAuthzInitInfo, Windows::Win32::Security::AUTHZ_RESOURCE_MANAGER_HANDLE__** phAuthzResourceManager)
    {
        auto win32_impl_result = WIN32_IMPL_AuthzInitializeResourceManagerEx(Flags, pAuthzInitInfo, phAuthzResourceManager);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AuthzInitializeRemoteResourceManager(Windows::Win32::Security::AUTHZ_RPC_INIT_INFO_CLIENT* pRpcInitInfo, Windows::Win32::Security::AUTHZ_RESOURCE_MANAGER_HANDLE__** phAuthzResourceManager)
    {
        auto win32_impl_result = WIN32_IMPL_AuthzInitializeRemoteResourceManager(pRpcInitInfo, phAuthzResourceManager);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AuthzFreeResourceManager(Windows::Win32::Security::AUTHZ_RESOURCE_MANAGER_HANDLE__* hAuthzResourceManager)
    {
        auto win32_impl_result = WIN32_IMPL_AuthzFreeResourceManager(hAuthzResourceManager);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AuthzInitializeContextFromToken(uint32_t Flags, Windows::Win32::SystemServices::HANDLE TokenHandle, Windows::Win32::Security::AUTHZ_RESOURCE_MANAGER_HANDLE__* hAuthzResourceManager, Windows::Win32::SystemServices::LARGE_INTEGER* pExpirationTime, Windows::Win32::Kernel::LUID Identifier, void* DynamicGroupArgs, Windows::Win32::Security::AUTHZ_CLIENT_CONTEXT_HANDLE__** phAuthzClientContext)
    {
        auto win32_impl_result = WIN32_IMPL_AuthzInitializeContextFromToken(Flags, TokenHandle, hAuthzResourceManager, pExpirationTime, Identifier, DynamicGroupArgs, phAuthzClientContext);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AuthzInitializeContextFromSid(uint32_t Flags, void* UserSid, Windows::Win32::Security::AUTHZ_RESOURCE_MANAGER_HANDLE__* hAuthzResourceManager, Windows::Win32::SystemServices::LARGE_INTEGER* pExpirationTime, Windows::Win32::Kernel::LUID Identifier, void* DynamicGroupArgs, Windows::Win32::Security::AUTHZ_CLIENT_CONTEXT_HANDLE__** phAuthzClientContext)
    {
        auto win32_impl_result = WIN32_IMPL_AuthzInitializeContextFromSid(Flags, UserSid, hAuthzResourceManager, pExpirationTime, Identifier, DynamicGroupArgs, phAuthzClientContext);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AuthzInitializeContextFromAuthzContext(uint32_t Flags, Windows::Win32::Security::AUTHZ_CLIENT_CONTEXT_HANDLE__* hAuthzClientContext, Windows::Win32::SystemServices::LARGE_INTEGER* pExpirationTime, Windows::Win32::Kernel::LUID Identifier, void* DynamicGroupArgs, Windows::Win32::Security::AUTHZ_CLIENT_CONTEXT_HANDLE__** phNewAuthzClientContext)
    {
        auto win32_impl_result = WIN32_IMPL_AuthzInitializeContextFromAuthzContext(Flags, hAuthzClientContext, pExpirationTime, Identifier, DynamicGroupArgs, phNewAuthzClientContext);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AuthzInitializeCompoundContext(Windows::Win32::Security::AUTHZ_CLIENT_CONTEXT_HANDLE__* UserContext, Windows::Win32::Security::AUTHZ_CLIENT_CONTEXT_HANDLE__* DeviceContext, Windows::Win32::Security::AUTHZ_CLIENT_CONTEXT_HANDLE__** phCompoundContext)
    {
        auto win32_impl_result = WIN32_IMPL_AuthzInitializeCompoundContext(UserContext, DeviceContext, phCompoundContext);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AuthzAddSidsToContext(Windows::Win32::Security::AUTHZ_CLIENT_CONTEXT_HANDLE__* hAuthzClientContext, Windows::Win32::Security::SID_AND_ATTRIBUTES* Sids, uint32_t SidCount, Windows::Win32::Security::SID_AND_ATTRIBUTES* RestrictedSids, uint32_t RestrictedSidCount, Windows::Win32::Security::AUTHZ_CLIENT_CONTEXT_HANDLE__** phNewAuthzClientContext)
    {
        auto win32_impl_result = WIN32_IMPL_AuthzAddSidsToContext(hAuthzClientContext, Sids, SidCount, RestrictedSids, RestrictedSidCount, phNewAuthzClientContext);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AuthzModifySecurityAttributes(Windows::Win32::Security::AUTHZ_CLIENT_CONTEXT_HANDLE__* hAuthzClientContext, Windows::Win32::Security::AUTHZ_SECURITY_ATTRIBUTE_OPERATION* pOperations, Windows::Win32::Security::AUTHZ_SECURITY_ATTRIBUTES_INFORMATION* pAttributes)
    {
        auto win32_impl_result = WIN32_IMPL_AuthzModifySecurityAttributes(hAuthzClientContext, pOperations, pAttributes);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AuthzModifyClaims(Windows::Win32::Security::AUTHZ_CLIENT_CONTEXT_HANDLE__* hAuthzClientContext, Windows::Win32::Security::AUTHZ_CONTEXT_INFORMATION_CLASS ClaimClass, Windows::Win32::Security::AUTHZ_SECURITY_ATTRIBUTE_OPERATION* pClaimOperations, Windows::Win32::Security::AUTHZ_SECURITY_ATTRIBUTES_INFORMATION* pClaims)
    {
        auto win32_impl_result = WIN32_IMPL_AuthzModifyClaims(hAuthzClientContext, ClaimClass, pClaimOperations, pClaims);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AuthzModifySids(Windows::Win32::Security::AUTHZ_CLIENT_CONTEXT_HANDLE__* hAuthzClientContext, Windows::Win32::Security::AUTHZ_CONTEXT_INFORMATION_CLASS SidClass, Windows::Win32::Security::AUTHZ_SID_OPERATION* pSidOperations, Windows::Win32::Security::TOKEN_GROUPS* pSids)
    {
        auto win32_impl_result = WIN32_IMPL_AuthzModifySids(hAuthzClientContext, SidClass, pSidOperations, pSids);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AuthzSetAppContainerInformation(Windows::Win32::Security::AUTHZ_CLIENT_CONTEXT_HANDLE__* hAuthzClientContext, void* pAppContainerSid, uint32_t CapabilityCount, Windows::Win32::Security::SID_AND_ATTRIBUTES* pCapabilitySids)
    {
        auto win32_impl_result = WIN32_IMPL_AuthzSetAppContainerInformation(hAuthzClientContext, pAppContainerSid, CapabilityCount, pCapabilitySids);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AuthzGetInformationFromContext(Windows::Win32::Security::AUTHZ_CLIENT_CONTEXT_HANDLE__* hAuthzClientContext, Windows::Win32::Security::AUTHZ_CONTEXT_INFORMATION_CLASS InfoClass, uint32_t BufferSize, uint32_t* pSizeRequired, void* Buffer)
    {
        auto win32_impl_result = WIN32_IMPL_AuthzGetInformationFromContext(hAuthzClientContext, InfoClass, BufferSize, pSizeRequired, Buffer);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AuthzFreeContext(Windows::Win32::Security::AUTHZ_CLIENT_CONTEXT_HANDLE__* hAuthzClientContext)
    {
        auto win32_impl_result = WIN32_IMPL_AuthzFreeContext(hAuthzClientContext);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AuthzInitializeObjectAccessAuditEvent(uint32_t Flags, Windows::Win32::Security::AUTHZ_AUDIT_EVENT_TYPE_HANDLE__* hAuditEventType, uint16_t* szOperationType, uint16_t* szObjectType, uint16_t* szObjectName, uint16_t* szAdditionalInfo, Windows::Win32::Security::AUTHZ_AUDIT_EVENT_HANDLE__** phAuditEvent, uint32_t dwAdditionalParameterCount)
    {
        auto win32_impl_result = WIN32_IMPL_AuthzInitializeObjectAccessAuditEvent(Flags, hAuditEventType, szOperationType, szObjectType, szObjectName, szAdditionalInfo, phAuditEvent, dwAdditionalParameterCount);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AuthzInitializeObjectAccessAuditEvent2(uint32_t Flags, Windows::Win32::Security::AUTHZ_AUDIT_EVENT_TYPE_HANDLE__* hAuditEventType, uint16_t* szOperationType, uint16_t* szObjectType, uint16_t* szObjectName, uint16_t* szAdditionalInfo, uint16_t* szAdditionalInfo2, Windows::Win32::Security::AUTHZ_AUDIT_EVENT_HANDLE__** phAuditEvent, uint32_t dwAdditionalParameterCount)
    {
        auto win32_impl_result = WIN32_IMPL_AuthzInitializeObjectAccessAuditEvent2(Flags, hAuditEventType, szOperationType, szObjectType, szObjectName, szAdditionalInfo, szAdditionalInfo2, phAuditEvent, dwAdditionalParameterCount);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AuthzFreeAuditEvent(Windows::Win32::Security::AUTHZ_AUDIT_EVENT_HANDLE__* hAuditEvent)
    {
        auto win32_impl_result = WIN32_IMPL_AuthzFreeAuditEvent(hAuditEvent);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AuthzEvaluateSacl(Windows::Win32::Security::AUTHZ_CLIENT_CONTEXT_HANDLE__* AuthzClientContext, Windows::Win32::Security::AUTHZ_ACCESS_REQUEST* pRequest, Windows::Win32::Security::ACL* Sacl, uint32_t GrantedAccess, Windows::Win32::SystemServices::BOOL AccessGranted, int32_t* pbGenerateAudit)
    {
        auto win32_impl_result = WIN32_IMPL_AuthzEvaluateSacl(AuthzClientContext, pRequest, Sacl, GrantedAccess, AccessGranted, pbGenerateAudit);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AuthzInstallSecurityEventSource(uint32_t dwFlags, Windows::Win32::Security::AUTHZ_SOURCE_SCHEMA_REGISTRATION* pRegistration)
    {
        auto win32_impl_result = WIN32_IMPL_AuthzInstallSecurityEventSource(dwFlags, pRegistration);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AuthzUninstallSecurityEventSource(uint32_t dwFlags, uint16_t* szEventSourceName)
    {
        auto win32_impl_result = WIN32_IMPL_AuthzUninstallSecurityEventSource(dwFlags, szEventSourceName);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AuthzEnumerateSecurityEventSources(uint32_t dwFlags, Windows::Win32::Security::AUTHZ_SOURCE_SCHEMA_REGISTRATION* Buffer, uint32_t* pdwCount, uint32_t* pdwLength)
    {
        auto win32_impl_result = WIN32_IMPL_AuthzEnumerateSecurityEventSources(dwFlags, Buffer, pdwCount, pdwLength);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AuthzRegisterSecurityEventSource(uint32_t dwFlags, uint16_t* szEventSourceName, Windows::Win32::Security::AUTHZ_SECURITY_EVENT_PROVIDER_HANDLE__** phEventProvider)
    {
        auto win32_impl_result = WIN32_IMPL_AuthzRegisterSecurityEventSource(dwFlags, szEventSourceName, phEventProvider);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AuthzUnregisterSecurityEventSource(uint32_t dwFlags, Windows::Win32::Security::AUTHZ_SECURITY_EVENT_PROVIDER_HANDLE__** phEventProvider)
    {
        auto win32_impl_result = WIN32_IMPL_AuthzUnregisterSecurityEventSource(dwFlags, phEventProvider);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AuthzReportSecurityEvent(uint32_t dwFlags, Windows::Win32::Security::AUTHZ_SECURITY_EVENT_PROVIDER_HANDLE__* hEventProvider, uint32_t dwAuditId, void* pUserSid, uint32_t dwCount)
    {
        auto win32_impl_result = WIN32_IMPL_AuthzReportSecurityEvent(dwFlags, hEventProvider, dwAuditId, pUserSid, dwCount);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AuthzReportSecurityEventFromParams(uint32_t dwFlags, Windows::Win32::Security::AUTHZ_SECURITY_EVENT_PROVIDER_HANDLE__* hEventProvider, uint32_t dwAuditId, void* pUserSid, Windows::Win32::Security::AUDIT_PARAMS* pParams)
    {
        auto win32_impl_result = WIN32_IMPL_AuthzReportSecurityEventFromParams(dwFlags, hEventProvider, dwAuditId, pUserSid, pParams);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AuthzRegisterCapChangeNotification(Windows::Win32::Security::AUTHZ_CAP_CHANGE_SUBSCRIPTION_HANDLE__** phCapChangeSubscription, Windows::Win32::SystemServices::LPTHREAD_START_ROUTINE* pfnCapChangeCallback, void* pCallbackContext)
    {
        auto win32_impl_result = WIN32_IMPL_AuthzRegisterCapChangeNotification(phCapChangeSubscription, pfnCapChangeCallback, pCallbackContext);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AuthzUnregisterCapChangeNotification(Windows::Win32::Security::AUTHZ_CAP_CHANGE_SUBSCRIPTION_HANDLE__* hCapChangeSubscription)
    {
        auto win32_impl_result = WIN32_IMPL_AuthzUnregisterCapChangeNotification(hCapChangeSubscription);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AuthzFreeCentralAccessPolicyCache()
    {
        auto win32_impl_result = WIN32_IMPL_AuthzFreeCentralAccessPolicyCache();
        return win32_impl_result;
    }
    inline Windows::Win32::Controls::HPROPSHEETPAGE CreateSecurityPage(Windows::Win32::Security::ISecurityInformation* psi)
    {
        auto win32_impl_result = WIN32_IMPL_CreateSecurityPage(psi);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL EditSecurity(Windows::Win32::WindowsAndMessaging::HWND hwndOwner, Windows::Win32::Security::ISecurityInformation* psi)
    {
        auto win32_impl_result = WIN32_IMPL_EditSecurity(hwndOwner, psi);
        return win32_impl_result;
    }
    inline int32_t EditSecurityAdvanced(Windows::Win32::WindowsAndMessaging::HWND hwndOwner, Windows::Win32::Security::ISecurityInformation* psi, Windows::Win32::Security::SI_PAGE_TYPE uSIPage)
    {
        auto win32_impl_result = WIN32_IMPL_EditSecurityAdvanced(hwndOwner, psi, uSIPage);
        return win32_impl_result;
    }
    inline uint32_t SetEntriesInAclA(uint32_t cCountOfExplicitEntries, Windows::Win32::Security::EXPLICIT_ACCESS_A* pListOfExplicitEntries, Windows::Win32::Security::ACL* OldAcl, Windows::Win32::Security::ACL** NewAcl)
    {
        auto win32_impl_result = WIN32_IMPL_SetEntriesInAclA(cCountOfExplicitEntries, pListOfExplicitEntries, OldAcl, NewAcl);
        return win32_impl_result;
    }
    inline uint32_t SetEntriesInAclW(uint32_t cCountOfExplicitEntries, Windows::Win32::Security::EXPLICIT_ACCESS_W* pListOfExplicitEntries, Windows::Win32::Security::ACL* OldAcl, Windows::Win32::Security::ACL** NewAcl)
    {
        auto win32_impl_result = WIN32_IMPL_SetEntriesInAclW(cCountOfExplicitEntries, pListOfExplicitEntries, OldAcl, NewAcl);
        return win32_impl_result;
    }
    inline uint32_t GetExplicitEntriesFromAclA(Windows::Win32::Security::ACL* pacl, uint32_t* pcCountOfExplicitEntries, Windows::Win32::Security::EXPLICIT_ACCESS_A** pListOfExplicitEntries)
    {
        auto win32_impl_result = WIN32_IMPL_GetExplicitEntriesFromAclA(pacl, pcCountOfExplicitEntries, pListOfExplicitEntries);
        return win32_impl_result;
    }
    inline uint32_t GetExplicitEntriesFromAclW(Windows::Win32::Security::ACL* pacl, uint32_t* pcCountOfExplicitEntries, Windows::Win32::Security::EXPLICIT_ACCESS_W** pListOfExplicitEntries)
    {
        auto win32_impl_result = WIN32_IMPL_GetExplicitEntriesFromAclW(pacl, pcCountOfExplicitEntries, pListOfExplicitEntries);
        return win32_impl_result;
    }
    inline uint32_t GetEffectiveRightsFromAclA(Windows::Win32::Security::ACL* pacl, Windows::Win32::Security::TRUSTEE_A* pTrustee, uint32_t* pAccessRights)
    {
        auto win32_impl_result = WIN32_IMPL_GetEffectiveRightsFromAclA(pacl, pTrustee, pAccessRights);
        return win32_impl_result;
    }
    inline uint32_t GetEffectiveRightsFromAclW(Windows::Win32::Security::ACL* pacl, Windows::Win32::Security::TRUSTEE_W* pTrustee, uint32_t* pAccessRights)
    {
        auto win32_impl_result = WIN32_IMPL_GetEffectiveRightsFromAclW(pacl, pTrustee, pAccessRights);
        return win32_impl_result;
    }
    inline uint32_t GetAuditedPermissionsFromAclA(Windows::Win32::Security::ACL* pacl, Windows::Win32::Security::TRUSTEE_A* pTrustee, uint32_t* pSuccessfulAuditedRights, uint32_t* pFailedAuditRights)
    {
        auto win32_impl_result = WIN32_IMPL_GetAuditedPermissionsFromAclA(pacl, pTrustee, pSuccessfulAuditedRights, pFailedAuditRights);
        return win32_impl_result;
    }
    inline uint32_t GetAuditedPermissionsFromAclW(Windows::Win32::Security::ACL* pacl, Windows::Win32::Security::TRUSTEE_W* pTrustee, uint32_t* pSuccessfulAuditedRights, uint32_t* pFailedAuditRights)
    {
        auto win32_impl_result = WIN32_IMPL_GetAuditedPermissionsFromAclW(pacl, pTrustee, pSuccessfulAuditedRights, pFailedAuditRights);
        return win32_impl_result;
    }
    inline uint32_t GetNamedSecurityInfoA(int8_t* pObjectName, Windows::Win32::Security::SE_OBJECT_TYPE ObjectType, uint32_t SecurityInfo, void** ppsidOwner, void** ppsidGroup, Windows::Win32::Security::ACL** ppDacl, Windows::Win32::Security::ACL** ppSacl, void** ppSecurityDescriptor)
    {
        auto win32_impl_result = WIN32_IMPL_GetNamedSecurityInfoA(pObjectName, ObjectType, SecurityInfo, ppsidOwner, ppsidGroup, ppDacl, ppSacl, ppSecurityDescriptor);
        return win32_impl_result;
    }
    inline uint32_t GetNamedSecurityInfoW(uint16_t* pObjectName, Windows::Win32::Security::SE_OBJECT_TYPE ObjectType, uint32_t SecurityInfo, void** ppsidOwner, void** ppsidGroup, Windows::Win32::Security::ACL** ppDacl, Windows::Win32::Security::ACL** ppSacl, void** ppSecurityDescriptor)
    {
        auto win32_impl_result = WIN32_IMPL_GetNamedSecurityInfoW(pObjectName, ObjectType, SecurityInfo, ppsidOwner, ppsidGroup, ppDacl, ppSacl, ppSecurityDescriptor);
        return win32_impl_result;
    }
    inline uint32_t GetSecurityInfo(Windows::Win32::SystemServices::HANDLE handle, Windows::Win32::Security::SE_OBJECT_TYPE ObjectType, uint32_t SecurityInfo, void** ppsidOwner, void** ppsidGroup, Windows::Win32::Security::ACL** ppDacl, Windows::Win32::Security::ACL** ppSacl, void** ppSecurityDescriptor)
    {
        auto win32_impl_result = WIN32_IMPL_GetSecurityInfo(handle, ObjectType, SecurityInfo, ppsidOwner, ppsidGroup, ppDacl, ppSacl, ppSecurityDescriptor);
        return win32_impl_result;
    }
    inline uint32_t SetNamedSecurityInfoA(int8_t* pObjectName, Windows::Win32::Security::SE_OBJECT_TYPE ObjectType, uint32_t SecurityInfo, void* psidOwner, void* psidGroup, Windows::Win32::Security::ACL* pDacl, Windows::Win32::Security::ACL* pSacl)
    {
        auto win32_impl_result = WIN32_IMPL_SetNamedSecurityInfoA(pObjectName, ObjectType, SecurityInfo, psidOwner, psidGroup, pDacl, pSacl);
        return win32_impl_result;
    }
    inline uint32_t SetNamedSecurityInfoW(uint16_t* pObjectName, Windows::Win32::Security::SE_OBJECT_TYPE ObjectType, uint32_t SecurityInfo, void* psidOwner, void* psidGroup, Windows::Win32::Security::ACL* pDacl, Windows::Win32::Security::ACL* pSacl)
    {
        auto win32_impl_result = WIN32_IMPL_SetNamedSecurityInfoW(pObjectName, ObjectType, SecurityInfo, psidOwner, psidGroup, pDacl, pSacl);
        return win32_impl_result;
    }
    inline uint32_t SetSecurityInfo(Windows::Win32::SystemServices::HANDLE handle, Windows::Win32::Security::SE_OBJECT_TYPE ObjectType, uint32_t SecurityInfo, void* psidOwner, void* psidGroup, Windows::Win32::Security::ACL* pDacl, Windows::Win32::Security::ACL* pSacl)
    {
        auto win32_impl_result = WIN32_IMPL_SetSecurityInfo(handle, ObjectType, SecurityInfo, psidOwner, psidGroup, pDacl, pSacl);
        return win32_impl_result;
    }
    inline uint32_t GetInheritanceSourceA(int8_t* pObjectName, Windows::Win32::Security::SE_OBJECT_TYPE ObjectType, uint32_t SecurityInfo, Windows::Win32::SystemServices::BOOL Container, ::win32::guid** pObjectClassGuids, uint32_t GuidCount, Windows::Win32::Security::ACL* pAcl, Windows::Win32::Security::_FN_OBJECT_MGR_FUNCTIONS* pfnArray, Windows::Win32::Security::GENERIC_MAPPING* pGenericMapping, Windows::Win32::Security::INHERITED_FROMA* pInheritArray)
    {
        auto win32_impl_result = WIN32_IMPL_GetInheritanceSourceA(pObjectName, ObjectType, SecurityInfo, Container, pObjectClassGuids, GuidCount, pAcl, pfnArray, pGenericMapping, pInheritArray);
        return win32_impl_result;
    }
    inline uint32_t GetInheritanceSourceW(uint16_t* pObjectName, Windows::Win32::Security::SE_OBJECT_TYPE ObjectType, uint32_t SecurityInfo, Windows::Win32::SystemServices::BOOL Container, ::win32::guid** pObjectClassGuids, uint32_t GuidCount, Windows::Win32::Security::ACL* pAcl, Windows::Win32::Security::_FN_OBJECT_MGR_FUNCTIONS* pfnArray, Windows::Win32::Security::GENERIC_MAPPING* pGenericMapping, Windows::Win32::Security::INHERITED_FROMW* pInheritArray)
    {
        auto win32_impl_result = WIN32_IMPL_GetInheritanceSourceW(pObjectName, ObjectType, SecurityInfo, Container, pObjectClassGuids, GuidCount, pAcl, pfnArray, pGenericMapping, pInheritArray);
        return win32_impl_result;
    }
    inline uint32_t FreeInheritedFromArray(Windows::Win32::Security::INHERITED_FROMW* pInheritArray, uint16_t AceCnt, Windows::Win32::Security::_FN_OBJECT_MGR_FUNCTIONS* pfnArray)
    {
        auto win32_impl_result = WIN32_IMPL_FreeInheritedFromArray(pInheritArray, AceCnt, pfnArray);
        return win32_impl_result;
    }
    inline uint32_t TreeResetNamedSecurityInfoA(int8_t* pObjectName, Windows::Win32::Security::SE_OBJECT_TYPE ObjectType, uint32_t SecurityInfo, void* pOwner, void* pGroup, Windows::Win32::Security::ACL* pDacl, Windows::Win32::Security::ACL* pSacl, Windows::Win32::SystemServices::BOOL KeepExplicit, Windows::Win32::Security::FN_PROGRESS* fnProgress, Windows::Win32::Security::PROG_INVOKE_SETTING ProgressInvokeSetting, void* Args)
    {
        auto win32_impl_result = WIN32_IMPL_TreeResetNamedSecurityInfoA(pObjectName, ObjectType, SecurityInfo, pOwner, pGroup, pDacl, pSacl, KeepExplicit, fnProgress, ProgressInvokeSetting, Args);
        return win32_impl_result;
    }
    inline uint32_t TreeResetNamedSecurityInfoW(uint16_t* pObjectName, Windows::Win32::Security::SE_OBJECT_TYPE ObjectType, uint32_t SecurityInfo, void* pOwner, void* pGroup, Windows::Win32::Security::ACL* pDacl, Windows::Win32::Security::ACL* pSacl, Windows::Win32::SystemServices::BOOL KeepExplicit, Windows::Win32::Security::FN_PROGRESS* fnProgress, Windows::Win32::Security::PROG_INVOKE_SETTING ProgressInvokeSetting, void* Args)
    {
        auto win32_impl_result = WIN32_IMPL_TreeResetNamedSecurityInfoW(pObjectName, ObjectType, SecurityInfo, pOwner, pGroup, pDacl, pSacl, KeepExplicit, fnProgress, ProgressInvokeSetting, Args);
        return win32_impl_result;
    }
    inline uint32_t TreeSetNamedSecurityInfoA(int8_t* pObjectName, Windows::Win32::Security::SE_OBJECT_TYPE ObjectType, uint32_t SecurityInfo, void* pOwner, void* pGroup, Windows::Win32::Security::ACL* pDacl, Windows::Win32::Security::ACL* pSacl, uint32_t dwAction, Windows::Win32::Security::FN_PROGRESS* fnProgress, Windows::Win32::Security::PROG_INVOKE_SETTING ProgressInvokeSetting, void* Args)
    {
        auto win32_impl_result = WIN32_IMPL_TreeSetNamedSecurityInfoA(pObjectName, ObjectType, SecurityInfo, pOwner, pGroup, pDacl, pSacl, dwAction, fnProgress, ProgressInvokeSetting, Args);
        return win32_impl_result;
    }
    inline uint32_t TreeSetNamedSecurityInfoW(uint16_t* pObjectName, Windows::Win32::Security::SE_OBJECT_TYPE ObjectType, uint32_t SecurityInfo, void* pOwner, void* pGroup, Windows::Win32::Security::ACL* pDacl, Windows::Win32::Security::ACL* pSacl, uint32_t dwAction, Windows::Win32::Security::FN_PROGRESS* fnProgress, Windows::Win32::Security::PROG_INVOKE_SETTING ProgressInvokeSetting, void* Args)
    {
        auto win32_impl_result = WIN32_IMPL_TreeSetNamedSecurityInfoW(pObjectName, ObjectType, SecurityInfo, pOwner, pGroup, pDacl, pSacl, dwAction, fnProgress, ProgressInvokeSetting, Args);
        return win32_impl_result;
    }
    inline uint32_t BuildSecurityDescriptorA(Windows::Win32::Security::TRUSTEE_A* pOwner, Windows::Win32::Security::TRUSTEE_A* pGroup, uint32_t cCountOfAccessEntries, Windows::Win32::Security::EXPLICIT_ACCESS_A* pListOfAccessEntries, uint32_t cCountOfAuditEntries, Windows::Win32::Security::EXPLICIT_ACCESS_A* pListOfAuditEntries, void* pOldSD, uint32_t* pSizeNewSD, void** pNewSD)
    {
        auto win32_impl_result = WIN32_IMPL_BuildSecurityDescriptorA(pOwner, pGroup, cCountOfAccessEntries, pListOfAccessEntries, cCountOfAuditEntries, pListOfAuditEntries, pOldSD, pSizeNewSD, pNewSD);
        return win32_impl_result;
    }
    inline uint32_t BuildSecurityDescriptorW(Windows::Win32::Security::TRUSTEE_W* pOwner, Windows::Win32::Security::TRUSTEE_W* pGroup, uint32_t cCountOfAccessEntries, Windows::Win32::Security::EXPLICIT_ACCESS_W* pListOfAccessEntries, uint32_t cCountOfAuditEntries, Windows::Win32::Security::EXPLICIT_ACCESS_W* pListOfAuditEntries, void* pOldSD, uint32_t* pSizeNewSD, void** pNewSD)
    {
        auto win32_impl_result = WIN32_IMPL_BuildSecurityDescriptorW(pOwner, pGroup, cCountOfAccessEntries, pListOfAccessEntries, cCountOfAuditEntries, pListOfAuditEntries, pOldSD, pSizeNewSD, pNewSD);
        return win32_impl_result;
    }
    inline uint32_t LookupSecurityDescriptorPartsA(Windows::Win32::Security::TRUSTEE_A** ppOwner, Windows::Win32::Security::TRUSTEE_A** ppGroup, uint32_t* pcCountOfAccessEntries, Windows::Win32::Security::EXPLICIT_ACCESS_A** ppListOfAccessEntries, uint32_t* pcCountOfAuditEntries, Windows::Win32::Security::EXPLICIT_ACCESS_A** ppListOfAuditEntries, void* pSD)
    {
        auto win32_impl_result = WIN32_IMPL_LookupSecurityDescriptorPartsA(ppOwner, ppGroup, pcCountOfAccessEntries, ppListOfAccessEntries, pcCountOfAuditEntries, ppListOfAuditEntries, pSD);
        return win32_impl_result;
    }
    inline uint32_t LookupSecurityDescriptorPartsW(Windows::Win32::Security::TRUSTEE_W** ppOwner, Windows::Win32::Security::TRUSTEE_W** ppGroup, uint32_t* pcCountOfAccessEntries, Windows::Win32::Security::EXPLICIT_ACCESS_W** ppListOfAccessEntries, uint32_t* pcCountOfAuditEntries, Windows::Win32::Security::EXPLICIT_ACCESS_W** ppListOfAuditEntries, void* pSD)
    {
        auto win32_impl_result = WIN32_IMPL_LookupSecurityDescriptorPartsW(ppOwner, ppGroup, pcCountOfAccessEntries, ppListOfAccessEntries, pcCountOfAuditEntries, ppListOfAuditEntries, pSD);
        return win32_impl_result;
    }
    inline void BuildExplicitAccessWithNameA(Windows::Win32::Security::EXPLICIT_ACCESS_A* pExplicitAccess, int8_t* pTrusteeName, uint32_t AccessPermissions, Windows::Win32::Security::ACCESS_MODE AccessMode, uint32_t Inheritance)
    {
        WIN32_IMPL_BuildExplicitAccessWithNameA(pExplicitAccess, pTrusteeName, AccessPermissions, AccessMode, Inheritance);
    }
    inline void BuildExplicitAccessWithNameW(Windows::Win32::Security::EXPLICIT_ACCESS_W* pExplicitAccess, uint16_t* pTrusteeName, uint32_t AccessPermissions, Windows::Win32::Security::ACCESS_MODE AccessMode, uint32_t Inheritance)
    {
        WIN32_IMPL_BuildExplicitAccessWithNameW(pExplicitAccess, pTrusteeName, AccessPermissions, AccessMode, Inheritance);
    }
    inline void BuildImpersonateExplicitAccessWithNameA(Windows::Win32::Security::EXPLICIT_ACCESS_A* pExplicitAccess, int8_t* pTrusteeName, Windows::Win32::Security::TRUSTEE_A* pTrustee, uint32_t AccessPermissions, Windows::Win32::Security::ACCESS_MODE AccessMode, uint32_t Inheritance)
    {
        WIN32_IMPL_BuildImpersonateExplicitAccessWithNameA(pExplicitAccess, pTrusteeName, pTrustee, AccessPermissions, AccessMode, Inheritance);
    }
    inline void BuildImpersonateExplicitAccessWithNameW(Windows::Win32::Security::EXPLICIT_ACCESS_W* pExplicitAccess, uint16_t* pTrusteeName, Windows::Win32::Security::TRUSTEE_W* pTrustee, uint32_t AccessPermissions, Windows::Win32::Security::ACCESS_MODE AccessMode, uint32_t Inheritance)
    {
        WIN32_IMPL_BuildImpersonateExplicitAccessWithNameW(pExplicitAccess, pTrusteeName, pTrustee, AccessPermissions, AccessMode, Inheritance);
    }
    inline void BuildTrusteeWithNameA(Windows::Win32::Security::TRUSTEE_A* pTrustee, int8_t* pName)
    {
        WIN32_IMPL_BuildTrusteeWithNameA(pTrustee, pName);
    }
    inline void BuildTrusteeWithNameW(Windows::Win32::Security::TRUSTEE_W* pTrustee, uint16_t* pName)
    {
        WIN32_IMPL_BuildTrusteeWithNameW(pTrustee, pName);
    }
    inline void BuildImpersonateTrusteeA(Windows::Win32::Security::TRUSTEE_A* pTrustee, Windows::Win32::Security::TRUSTEE_A* pImpersonateTrustee)
    {
        WIN32_IMPL_BuildImpersonateTrusteeA(pTrustee, pImpersonateTrustee);
    }
    inline void BuildImpersonateTrusteeW(Windows::Win32::Security::TRUSTEE_W* pTrustee, Windows::Win32::Security::TRUSTEE_W* pImpersonateTrustee)
    {
        WIN32_IMPL_BuildImpersonateTrusteeW(pTrustee, pImpersonateTrustee);
    }
    inline void BuildTrusteeWithSidA(Windows::Win32::Security::TRUSTEE_A* pTrustee, void* pSid)
    {
        WIN32_IMPL_BuildTrusteeWithSidA(pTrustee, pSid);
    }
    inline void BuildTrusteeWithSidW(Windows::Win32::Security::TRUSTEE_W* pTrustee, void* pSid)
    {
        WIN32_IMPL_BuildTrusteeWithSidW(pTrustee, pSid);
    }
    inline void BuildTrusteeWithObjectsAndSidA(Windows::Win32::Security::TRUSTEE_A* pTrustee, Windows::Win32::Security::OBJECTS_AND_SID* pObjSid, ::win32::guid* pObjectGuid, ::win32::guid* pInheritedObjectGuid, void* pSid)
    {
        WIN32_IMPL_BuildTrusteeWithObjectsAndSidA(pTrustee, pObjSid, pObjectGuid, pInheritedObjectGuid, pSid);
    }
    inline void BuildTrusteeWithObjectsAndSidW(Windows::Win32::Security::TRUSTEE_W* pTrustee, Windows::Win32::Security::OBJECTS_AND_SID* pObjSid, ::win32::guid* pObjectGuid, ::win32::guid* pInheritedObjectGuid, void* pSid)
    {
        WIN32_IMPL_BuildTrusteeWithObjectsAndSidW(pTrustee, pObjSid, pObjectGuid, pInheritedObjectGuid, pSid);
    }
    inline void BuildTrusteeWithObjectsAndNameA(Windows::Win32::Security::TRUSTEE_A* pTrustee, Windows::Win32::Security::OBJECTS_AND_NAME_A* pObjName, Windows::Win32::Security::SE_OBJECT_TYPE ObjectType, int8_t* ObjectTypeName, int8_t* InheritedObjectTypeName, int8_t* Name)
    {
        WIN32_IMPL_BuildTrusteeWithObjectsAndNameA(pTrustee, pObjName, ObjectType, ObjectTypeName, InheritedObjectTypeName, Name);
    }
    inline void BuildTrusteeWithObjectsAndNameW(Windows::Win32::Security::TRUSTEE_W* pTrustee, Windows::Win32::Security::OBJECTS_AND_NAME_W* pObjName, Windows::Win32::Security::SE_OBJECT_TYPE ObjectType, uint16_t* ObjectTypeName, uint16_t* InheritedObjectTypeName, uint16_t* Name)
    {
        WIN32_IMPL_BuildTrusteeWithObjectsAndNameW(pTrustee, pObjName, ObjectType, ObjectTypeName, InheritedObjectTypeName, Name);
    }
    inline int8_t* GetTrusteeNameA(Windows::Win32::Security::TRUSTEE_A* pTrustee)
    {
        auto win32_impl_result = WIN32_IMPL_GetTrusteeNameA(pTrustee);
        return win32_impl_result;
    }
    inline uint16_t* GetTrusteeNameW(Windows::Win32::Security::TRUSTEE_W* pTrustee)
    {
        auto win32_impl_result = WIN32_IMPL_GetTrusteeNameW(pTrustee);
        return win32_impl_result;
    }
    inline Windows::Win32::Security::TRUSTEE_TYPE GetTrusteeTypeA(Windows::Win32::Security::TRUSTEE_A* pTrustee)
    {
        auto win32_impl_result = WIN32_IMPL_GetTrusteeTypeA(pTrustee);
        return win32_impl_result;
    }
    inline Windows::Win32::Security::TRUSTEE_TYPE GetTrusteeTypeW(Windows::Win32::Security::TRUSTEE_W* pTrustee)
    {
        auto win32_impl_result = WIN32_IMPL_GetTrusteeTypeW(pTrustee);
        return win32_impl_result;
    }
    inline Windows::Win32::Security::TRUSTEE_FORM GetTrusteeFormA(Windows::Win32::Security::TRUSTEE_A* pTrustee)
    {
        auto win32_impl_result = WIN32_IMPL_GetTrusteeFormA(pTrustee);
        return win32_impl_result;
    }
    inline Windows::Win32::Security::TRUSTEE_FORM GetTrusteeFormW(Windows::Win32::Security::TRUSTEE_W* pTrustee)
    {
        auto win32_impl_result = WIN32_IMPL_GetTrusteeFormW(pTrustee);
        return win32_impl_result;
    }
    inline Windows::Win32::Security::MULTIPLE_TRUSTEE_OPERATION GetMultipleTrusteeOperationA(Windows::Win32::Security::TRUSTEE_A* pTrustee)
    {
        auto win32_impl_result = WIN32_IMPL_GetMultipleTrusteeOperationA(pTrustee);
        return win32_impl_result;
    }
    inline Windows::Win32::Security::MULTIPLE_TRUSTEE_OPERATION GetMultipleTrusteeOperationW(Windows::Win32::Security::TRUSTEE_W* pTrustee)
    {
        auto win32_impl_result = WIN32_IMPL_GetMultipleTrusteeOperationW(pTrustee);
        return win32_impl_result;
    }
    inline Windows::Win32::Security::TRUSTEE_A* GetMultipleTrusteeA(Windows::Win32::Security::TRUSTEE_A* pTrustee)
    {
        auto win32_impl_result = WIN32_IMPL_GetMultipleTrusteeA(pTrustee);
        return win32_impl_result;
    }
    inline Windows::Win32::Security::TRUSTEE_W* GetMultipleTrusteeW(Windows::Win32::Security::TRUSTEE_W* pTrustee)
    {
        auto win32_impl_result = WIN32_IMPL_GetMultipleTrusteeW(pTrustee);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ConvertSidToStringSidA(void* Sid, int8_t** StringSid)
    {
        auto win32_impl_result = WIN32_IMPL_ConvertSidToStringSidA(Sid, StringSid);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ConvertSidToStringSidW(void* Sid, uint16_t** StringSid)
    {
        auto win32_impl_result = WIN32_IMPL_ConvertSidToStringSidW(Sid, StringSid);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ConvertStringSidToSidA(int8_t* StringSid, void** Sid)
    {
        auto win32_impl_result = WIN32_IMPL_ConvertStringSidToSidA(StringSid, Sid);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ConvertStringSidToSidW(uint16_t* StringSid, void** Sid)
    {
        auto win32_impl_result = WIN32_IMPL_ConvertStringSidToSidW(StringSid, Sid);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ConvertStringSecurityDescriptorToSecurityDescriptorA(int8_t* StringSecurityDescriptor, uint32_t StringSDRevision, void** SecurityDescriptor, uint32_t* SecurityDescriptorSize)
    {
        auto win32_impl_result = WIN32_IMPL_ConvertStringSecurityDescriptorToSecurityDescriptorA(StringSecurityDescriptor, StringSDRevision, SecurityDescriptor, SecurityDescriptorSize);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ConvertStringSecurityDescriptorToSecurityDescriptorW(uint16_t* StringSecurityDescriptor, uint32_t StringSDRevision, void** SecurityDescriptor, uint32_t* SecurityDescriptorSize)
    {
        auto win32_impl_result = WIN32_IMPL_ConvertStringSecurityDescriptorToSecurityDescriptorW(StringSecurityDescriptor, StringSDRevision, SecurityDescriptor, SecurityDescriptorSize);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ConvertSecurityDescriptorToStringSecurityDescriptorA(void* SecurityDescriptor, uint32_t RequestedStringSDRevision, uint32_t SecurityInformation, int8_t** StringSecurityDescriptor, uint32_t* StringSecurityDescriptorLen)
    {
        auto win32_impl_result = WIN32_IMPL_ConvertSecurityDescriptorToStringSecurityDescriptorA(SecurityDescriptor, RequestedStringSDRevision, SecurityInformation, StringSecurityDescriptor, StringSecurityDescriptorLen);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ConvertSecurityDescriptorToStringSecurityDescriptorW(void* SecurityDescriptor, uint32_t RequestedStringSDRevision, uint32_t SecurityInformation, uint16_t** StringSecurityDescriptor, uint32_t* StringSecurityDescriptorLen)
    {
        auto win32_impl_result = WIN32_IMPL_ConvertSecurityDescriptorToStringSecurityDescriptorW(SecurityDescriptor, RequestedStringSDRevision, SecurityInformation, StringSecurityDescriptor, StringSecurityDescriptorLen);
        return win32_impl_result;
    }
    inline int32_t DSCreateISecurityInfoObject(uint16_t* pwszObjectPath, uint16_t* pwszObjectClass, uint32_t dwFlags, Windows::Win32::Security::ISecurityInformation** ppSI, Windows::Win32::Security::PFNREADOBJECTSECURITY* pfnReadSD, Windows::Win32::Security::PFNWRITEOBJECTSECURITY* pfnWriteSD, Windows::Win32::WindowsAndMessaging::LPARAM lpContext)
    {
        auto win32_impl_result = WIN32_IMPL_DSCreateISecurityInfoObject(pwszObjectPath, pwszObjectClass, dwFlags, ppSI, pfnReadSD, pfnWriteSD, lpContext);
        return win32_impl_result;
    }
    inline int32_t DSCreateISecurityInfoObjectEx(uint16_t* pwszObjectPath, uint16_t* pwszObjectClass, uint16_t* pwszServer, uint16_t* pwszUserName, uint16_t* pwszPassword, uint32_t dwFlags, Windows::Win32::Security::ISecurityInformation** ppSI, Windows::Win32::Security::PFNREADOBJECTSECURITY* pfnReadSD, Windows::Win32::Security::PFNWRITEOBJECTSECURITY* pfnWriteSD, Windows::Win32::WindowsAndMessaging::LPARAM lpContext)
    {
        auto win32_impl_result = WIN32_IMPL_DSCreateISecurityInfoObjectEx(pwszObjectPath, pwszObjectClass, pwszServer, pwszUserName, pwszPassword, dwFlags, ppSI, pfnReadSD, pfnWriteSD, lpContext);
        return win32_impl_result;
    }
    inline int32_t DSCreateSecurityPage(uint16_t* pwszObjectPath, uint16_t* pwszObjectClass, uint32_t dwFlags, Windows::Win32::Controls::HPROPSHEETPAGE* phPage, Windows::Win32::Security::PFNREADOBJECTSECURITY* pfnReadSD, Windows::Win32::Security::PFNWRITEOBJECTSECURITY* pfnWriteSD, Windows::Win32::WindowsAndMessaging::LPARAM lpContext)
    {
        auto win32_impl_result = WIN32_IMPL_DSCreateSecurityPage(pwszObjectPath, pwszObjectClass, dwFlags, phPage, pfnReadSD, pfnWriteSD, lpContext);
        return win32_impl_result;
    }
    inline int32_t DSEditSecurity(Windows::Win32::WindowsAndMessaging::HWND hwndOwner, uint16_t* pwszObjectPath, uint16_t* pwszObjectClass, uint32_t dwFlags, uint16_t* pwszCaption, Windows::Win32::Security::PFNREADOBJECTSECURITY* pfnReadSD, Windows::Win32::Security::PFNWRITEOBJECTSECURITY* pfnWriteSD, Windows::Win32::WindowsAndMessaging::LPARAM lpContext)
    {
        auto win32_impl_result = WIN32_IMPL_DSEditSecurity(hwndOwner, pwszObjectPath, pwszObjectClass, dwFlags, pwszCaption, pfnReadSD, pfnWriteSD, lpContext);
        return win32_impl_result;
    }
    inline int32_t CertSrvIsServerOnlineW(uint16_t* pwszServerName, int32_t* pfServerOnline)
    {
        auto win32_impl_result = WIN32_IMPL_CertSrvIsServerOnlineW(pwszServerName, pfServerOnline);
        return win32_impl_result;
    }
    inline int32_t CertSrvBackupGetDynamicFileListW(void* hbc, uint16_t** ppwszzFileList, uint32_t* pcbSize)
    {
        auto win32_impl_result = WIN32_IMPL_CertSrvBackupGetDynamicFileListW(hbc, ppwszzFileList, pcbSize);
        return win32_impl_result;
    }
    inline int32_t CertSrvBackupPrepareW(uint16_t* pwszServerName, uint32_t grbitJet, uint32_t dwBackupFlags, void** phbc)
    {
        auto win32_impl_result = WIN32_IMPL_CertSrvBackupPrepareW(pwszServerName, grbitJet, dwBackupFlags, phbc);
        return win32_impl_result;
    }
    inline int32_t CertSrvBackupGetDatabaseNamesW(void* hbc, uint16_t** ppwszzAttachmentInformation, uint32_t* pcbSize)
    {
        auto win32_impl_result = WIN32_IMPL_CertSrvBackupGetDatabaseNamesW(hbc, ppwszzAttachmentInformation, pcbSize);
        return win32_impl_result;
    }
    inline int32_t CertSrvBackupOpenFileW(void* hbc, uint16_t* pwszAttachmentName, uint32_t cbReadHintSize, Windows::Win32::SystemServices::LARGE_INTEGER* pliFileSize)
    {
        auto win32_impl_result = WIN32_IMPL_CertSrvBackupOpenFileW(hbc, pwszAttachmentName, cbReadHintSize, pliFileSize);
        return win32_impl_result;
    }
    inline int32_t CertSrvBackupRead(void* hbc, void* pvBuffer, uint32_t cbBuffer, uint32_t* pcbRead)
    {
        auto win32_impl_result = WIN32_IMPL_CertSrvBackupRead(hbc, pvBuffer, cbBuffer, pcbRead);
        return win32_impl_result;
    }
    inline int32_t CertSrvBackupClose(void* hbc)
    {
        auto win32_impl_result = WIN32_IMPL_CertSrvBackupClose(hbc);
        return win32_impl_result;
    }
    inline int32_t CertSrvBackupGetBackupLogsW(void* hbc, uint16_t** ppwszzBackupLogFiles, uint32_t* pcbSize)
    {
        auto win32_impl_result = WIN32_IMPL_CertSrvBackupGetBackupLogsW(hbc, ppwszzBackupLogFiles, pcbSize);
        return win32_impl_result;
    }
    inline int32_t CertSrvBackupTruncateLogs(void* hbc)
    {
        auto win32_impl_result = WIN32_IMPL_CertSrvBackupTruncateLogs(hbc);
        return win32_impl_result;
    }
    inline int32_t CertSrvBackupEnd(void* hbc)
    {
        auto win32_impl_result = WIN32_IMPL_CertSrvBackupEnd(hbc);
        return win32_impl_result;
    }
    inline void CertSrvBackupFree(void* pv)
    {
        WIN32_IMPL_CertSrvBackupFree(pv);
    }
    inline int32_t CertSrvRestoreGetDatabaseLocationsW(void* hbc, uint16_t** ppwszzDatabaseLocationList, uint32_t* pcbSize)
    {
        auto win32_impl_result = WIN32_IMPL_CertSrvRestoreGetDatabaseLocationsW(hbc, ppwszzDatabaseLocationList, pcbSize);
        return win32_impl_result;
    }
    inline int32_t CertSrvRestorePrepareW(uint16_t* pwszServerName, uint32_t dwRestoreFlags, void** phbc)
    {
        auto win32_impl_result = WIN32_IMPL_CertSrvRestorePrepareW(pwszServerName, dwRestoreFlags, phbc);
        return win32_impl_result;
    }
    inline int32_t CertSrvRestoreRegisterW(void* hbc, uint16_t* pwszCheckPointFilePath, uint16_t* pwszLogPath, Windows::Win32::Security::CSEDB_RSTMAPW* rgrstmap, int32_t crstmap, uint16_t* pwszBackupLogPath, uint32_t genLow, uint32_t genHigh)
    {
        auto win32_impl_result = WIN32_IMPL_CertSrvRestoreRegisterW(hbc, pwszCheckPointFilePath, pwszLogPath, rgrstmap, crstmap, pwszBackupLogPath, genLow, genHigh);
        return win32_impl_result;
    }
    inline int32_t CertSrvRestoreRegisterThroughFile(void* hbc, uint16_t* pwszCheckPointFilePath, uint16_t* pwszLogPath, Windows::Win32::Security::CSEDB_RSTMAPW* rgrstmap, int32_t crstmap, uint16_t* pwszBackupLogPath, uint32_t genLow, uint32_t genHigh)
    {
        auto win32_impl_result = WIN32_IMPL_CertSrvRestoreRegisterThroughFile(hbc, pwszCheckPointFilePath, pwszLogPath, rgrstmap, crstmap, pwszBackupLogPath, genLow, genHigh);
        return win32_impl_result;
    }
    inline int32_t CertSrvRestoreRegisterComplete(void* hbc, int32_t hrRestoreState)
    {
        auto win32_impl_result = WIN32_IMPL_CertSrvRestoreRegisterComplete(hbc, hrRestoreState);
        return win32_impl_result;
    }
    inline int32_t CertSrvRestoreEnd(void* hbc)
    {
        auto win32_impl_result = WIN32_IMPL_CertSrvRestoreEnd(hbc);
        return win32_impl_result;
    }
    inline int32_t CertSrvServerControlW(uint16_t* pwszServerName, uint32_t dwControlFlags, uint32_t* pcbOut, uint8_t** ppbOut)
    {
        auto win32_impl_result = WIN32_IMPL_CertSrvServerControlW(pwszServerName, dwControlFlags, pcbOut, ppbOut);
        return win32_impl_result;
    }
    inline int32_t NCryptRegisterProtectionDescriptorName(uint16_t* pwszName, uint16_t* pwszDescriptorString, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_NCryptRegisterProtectionDescriptorName(pwszName, pwszDescriptorString, dwFlags);
        return win32_impl_result;
    }
    inline int32_t NCryptQueryProtectionDescriptorName(uint16_t* pwszName, uint16_t* pwszDescriptorString, size_t* pcDescriptorString, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_NCryptQueryProtectionDescriptorName(pwszName, pwszDescriptorString, pcDescriptorString, dwFlags);
        return win32_impl_result;
    }
    inline int32_t NCryptCreateProtectionDescriptor(uint16_t* pwszDescriptorString, uint32_t dwFlags, Windows::Win32::Security::NCRYPT_DESCRIPTOR_HANDLE__** phDescriptor)
    {
        auto win32_impl_result = WIN32_IMPL_NCryptCreateProtectionDescriptor(pwszDescriptorString, dwFlags, phDescriptor);
        return win32_impl_result;
    }
    inline int32_t NCryptCloseProtectionDescriptor(Windows::Win32::Security::NCRYPT_DESCRIPTOR_HANDLE__* hDescriptor)
    {
        auto win32_impl_result = WIN32_IMPL_NCryptCloseProtectionDescriptor(hDescriptor);
        return win32_impl_result;
    }
    inline int32_t NCryptGetProtectionDescriptorInfo(Windows::Win32::Security::NCRYPT_DESCRIPTOR_HANDLE__* hDescriptor, Windows::Win32::Security::NCRYPT_ALLOC_PARA* pMemPara, uint32_t dwInfoType, void** ppvInfo)
    {
        auto win32_impl_result = WIN32_IMPL_NCryptGetProtectionDescriptorInfo(hDescriptor, pMemPara, dwInfoType, ppvInfo);
        return win32_impl_result;
    }
    inline int32_t NCryptProtectSecret(Windows::Win32::Security::NCRYPT_DESCRIPTOR_HANDLE__* hDescriptor, uint32_t dwFlags, uint8_t* pbData, uint32_t cbData, Windows::Win32::Security::NCRYPT_ALLOC_PARA* pMemPara, Windows::Win32::WindowsAndMessaging::HWND hWnd, uint8_t** ppbProtectedBlob, uint32_t* pcbProtectedBlob)
    {
        auto win32_impl_result = WIN32_IMPL_NCryptProtectSecret(hDescriptor, dwFlags, pbData, cbData, pMemPara, hWnd, ppbProtectedBlob, pcbProtectedBlob);
        return win32_impl_result;
    }
    inline int32_t NCryptUnprotectSecret(Windows::Win32::Security::NCRYPT_DESCRIPTOR_HANDLE__** phDescriptor, uint32_t dwFlags, uint8_t* pbProtectedBlob, uint32_t cbProtectedBlob, Windows::Win32::Security::NCRYPT_ALLOC_PARA* pMemPara, Windows::Win32::WindowsAndMessaging::HWND hWnd, uint8_t** ppbData, uint32_t* pcbData)
    {
        auto win32_impl_result = WIN32_IMPL_NCryptUnprotectSecret(phDescriptor, dwFlags, pbProtectedBlob, cbProtectedBlob, pMemPara, hWnd, ppbData, pcbData);
        return win32_impl_result;
    }
    inline int32_t NCryptStreamOpenToProtect(Windows::Win32::Security::NCRYPT_DESCRIPTOR_HANDLE__* hDescriptor, uint32_t dwFlags, Windows::Win32::WindowsAndMessaging::HWND hWnd, Windows::Win32::Security::NCRYPT_PROTECT_STREAM_INFO* pStreamInfo, Windows::Win32::Security::NCRYPT_STREAM_HANDLE__** phStream)
    {
        auto win32_impl_result = WIN32_IMPL_NCryptStreamOpenToProtect(hDescriptor, dwFlags, hWnd, pStreamInfo, phStream);
        return win32_impl_result;
    }
    inline int32_t NCryptStreamOpenToUnprotect(Windows::Win32::Security::NCRYPT_PROTECT_STREAM_INFO* pStreamInfo, uint32_t dwFlags, Windows::Win32::WindowsAndMessaging::HWND hWnd, Windows::Win32::Security::NCRYPT_STREAM_HANDLE__** phStream)
    {
        auto win32_impl_result = WIN32_IMPL_NCryptStreamOpenToUnprotect(pStreamInfo, dwFlags, hWnd, phStream);
        return win32_impl_result;
    }
    inline int32_t NCryptStreamOpenToUnprotectEx(Windows::Win32::Security::NCRYPT_PROTECT_STREAM_INFO_EX* pStreamInfo, uint32_t dwFlags, Windows::Win32::WindowsAndMessaging::HWND hWnd, Windows::Win32::Security::NCRYPT_STREAM_HANDLE__** phStream)
    {
        auto win32_impl_result = WIN32_IMPL_NCryptStreamOpenToUnprotectEx(pStreamInfo, dwFlags, hWnd, phStream);
        return win32_impl_result;
    }
    inline int32_t NCryptStreamUpdate(Windows::Win32::Security::NCRYPT_STREAM_HANDLE__* hStream, uint8_t* pbData, size_t cbData, Windows::Win32::SystemServices::BOOL fFinal)
    {
        auto win32_impl_result = WIN32_IMPL_NCryptStreamUpdate(hStream, pbData, cbData, fFinal);
        return win32_impl_result;
    }
    inline int32_t NCryptStreamClose(Windows::Win32::Security::NCRYPT_STREAM_HANDLE__* hStream)
    {
        auto win32_impl_result = WIN32_IMPL_NCryptStreamClose(hStream);
        return win32_impl_result;
    }
    inline int32_t TokenBindingGenerateBinding(Windows::Win32::Security::TOKENBINDING_KEY_PARAMETERS_TYPE keyType, uint16_t* targetURL, Windows::Win32::Security::TOKENBINDING_TYPE bindingType, void* tlsEKM, uint32_t tlsEKMSize, Windows::Win32::Security::TOKENBINDING_EXTENSION_FORMAT extensionFormat, void* extensionData, void** tokenBinding, uint32_t* tokenBindingSize, Windows::Win32::Security::TOKENBINDING_RESULT_DATA** resultData)
    {
        auto win32_impl_result = WIN32_IMPL_TokenBindingGenerateBinding(keyType, targetURL, bindingType, tlsEKM, tlsEKMSize, extensionFormat, extensionData, tokenBinding, tokenBindingSize, resultData);
        return win32_impl_result;
    }
    inline int32_t TokenBindingGenerateMessage(void** tokenBindings, uint32_t* tokenBindingsSize, uint32_t tokenBindingsCount, void** tokenBindingMessage, uint32_t* tokenBindingMessageSize)
    {
        auto win32_impl_result = WIN32_IMPL_TokenBindingGenerateMessage(tokenBindings, tokenBindingsSize, tokenBindingsCount, tokenBindingMessage, tokenBindingMessageSize);
        return win32_impl_result;
    }
    inline int32_t TokenBindingVerifyMessage(void* tokenBindingMessage, uint32_t tokenBindingMessageSize, Windows::Win32::Security::TOKENBINDING_KEY_PARAMETERS_TYPE keyType, void* tlsEKM, uint32_t tlsEKMSize, Windows::Win32::Security::TOKENBINDING_RESULT_LIST** resultList)
    {
        auto win32_impl_result = WIN32_IMPL_TokenBindingVerifyMessage(tokenBindingMessage, tokenBindingMessageSize, keyType, tlsEKM, tlsEKMSize, resultList);
        return win32_impl_result;
    }
    inline int32_t TokenBindingGetKeyTypesClient(Windows::Win32::Security::TOKENBINDING_KEY_TYPES** keyTypes)
    {
        auto win32_impl_result = WIN32_IMPL_TokenBindingGetKeyTypesClient(keyTypes);
        return win32_impl_result;
    }
    inline int32_t TokenBindingGetKeyTypesServer(Windows::Win32::Security::TOKENBINDING_KEY_TYPES** keyTypes)
    {
        auto win32_impl_result = WIN32_IMPL_TokenBindingGetKeyTypesServer(keyTypes);
        return win32_impl_result;
    }
    inline int32_t TokenBindingDeleteBinding(uint16_t* targetURL)
    {
        auto win32_impl_result = WIN32_IMPL_TokenBindingDeleteBinding(targetURL);
        return win32_impl_result;
    }
    inline int32_t TokenBindingDeleteAllBindings()
    {
        auto win32_impl_result = WIN32_IMPL_TokenBindingDeleteAllBindings();
        return win32_impl_result;
    }
    inline int32_t TokenBindingGenerateID(Windows::Win32::Security::TOKENBINDING_KEY_PARAMETERS_TYPE keyType, void* publicKey, uint32_t publicKeySize, Windows::Win32::Security::TOKENBINDING_RESULT_DATA** resultData)
    {
        auto win32_impl_result = WIN32_IMPL_TokenBindingGenerateID(keyType, publicKey, publicKeySize, resultData);
        return win32_impl_result;
    }
    inline int32_t TokenBindingGenerateIDForUri(Windows::Win32::Security::TOKENBINDING_KEY_PARAMETERS_TYPE keyType, uint16_t* targetUri, Windows::Win32::Security::TOKENBINDING_RESULT_DATA** resultData)
    {
        auto win32_impl_result = WIN32_IMPL_TokenBindingGenerateIDForUri(keyType, targetUri, resultData);
        return win32_impl_result;
    }
    inline int32_t TokenBindingGetHighestSupportedVersion(uint8_t* majorVersion, uint8_t* minorVersion)
    {
        auto win32_impl_result = WIN32_IMPL_TokenBindingGetHighestSupportedVersion(majorVersion, minorVersion);
        return win32_impl_result;
    }
    inline int32_t CryptXmlClose(void* hCryptXml)
    {
        auto win32_impl_result = WIN32_IMPL_CryptXmlClose(hCryptXml);
        return win32_impl_result;
    }
    inline int32_t CryptXmlGetTransforms(Windows::Win32::Security::CRYPT_XML_TRANSFORM_CHAIN_CONFIG** ppConfig)
    {
        auto win32_impl_result = WIN32_IMPL_CryptXmlGetTransforms(ppConfig);
        return win32_impl_result;
    }
    inline int32_t CryptXmlOpenToEncode(Windows::Win32::Security::CRYPT_XML_TRANSFORM_CHAIN_CONFIG* pConfig, uint32_t dwFlags, uint16_t* wszId, Windows::Win32::Security::CRYPT_XML_PROPERTY* rgProperty, uint32_t cProperty, Windows::Win32::Security::CRYPT_XML_BLOB* pEncoded, void** phSignature)
    {
        auto win32_impl_result = WIN32_IMPL_CryptXmlOpenToEncode(pConfig, dwFlags, wszId, rgProperty, cProperty, pEncoded, phSignature);
        return win32_impl_result;
    }
    inline int32_t CryptXmlOpenToDecode(Windows::Win32::Security::CRYPT_XML_TRANSFORM_CHAIN_CONFIG* pConfig, uint32_t dwFlags, Windows::Win32::Security::CRYPT_XML_PROPERTY* rgProperty, uint32_t cProperty, Windows::Win32::Security::CRYPT_XML_BLOB* pEncoded, void** phCryptXml)
    {
        auto win32_impl_result = WIN32_IMPL_CryptXmlOpenToDecode(pConfig, dwFlags, rgProperty, cProperty, pEncoded, phCryptXml);
        return win32_impl_result;
    }
    inline int32_t CryptXmlAddObject(void* hSignatureOrObject, uint32_t dwFlags, Windows::Win32::Security::CRYPT_XML_PROPERTY* rgProperty, uint32_t cProperty, Windows::Win32::Security::CRYPT_XML_BLOB* pEncoded, Windows::Win32::Security::CRYPT_XML_OBJECT** ppObject)
    {
        auto win32_impl_result = WIN32_IMPL_CryptXmlAddObject(hSignatureOrObject, dwFlags, rgProperty, cProperty, pEncoded, ppObject);
        return win32_impl_result;
    }
    inline int32_t CryptXmlCreateReference(void* hCryptXml, uint32_t dwFlags, uint16_t* wszId, uint16_t* wszURI, uint16_t* wszType, Windows::Win32::Security::CRYPT_XML_ALGORITHM* pDigestMethod, uint32_t cTransform, Windows::Win32::Security::CRYPT_XML_ALGORITHM* rgTransform, void** phReference)
    {
        auto win32_impl_result = WIN32_IMPL_CryptXmlCreateReference(hCryptXml, dwFlags, wszId, wszURI, wszType, pDigestMethod, cTransform, rgTransform, phReference);
        return win32_impl_result;
    }
    inline int32_t CryptXmlDigestReference(void* hReference, uint32_t dwFlags, Windows::Win32::Security::CRYPT_XML_DATA_PROVIDER* pDataProviderIn)
    {
        auto win32_impl_result = WIN32_IMPL_CryptXmlDigestReference(hReference, dwFlags, pDataProviderIn);
        return win32_impl_result;
    }
    inline int32_t CryptXmlSetHMACSecret(void* hSignature, uint8_t* pbSecret, uint32_t cbSecret)
    {
        auto win32_impl_result = WIN32_IMPL_CryptXmlSetHMACSecret(hSignature, pbSecret, cbSecret);
        return win32_impl_result;
    }
    inline int32_t CryptXmlSign(void* hSignature, size_t hKey, uint32_t dwKeySpec, uint32_t dwFlags, Windows::Win32::Security::CRYPT_XML_KEYINFO_SPEC dwKeyInfoSpec, void* pvKeyInfoSpec, Windows::Win32::Security::CRYPT_XML_ALGORITHM* pSignatureMethod, Windows::Win32::Security::CRYPT_XML_ALGORITHM* pCanonicalization)
    {
        auto win32_impl_result = WIN32_IMPL_CryptXmlSign(hSignature, hKey, dwKeySpec, dwFlags, dwKeyInfoSpec, pvKeyInfoSpec, pSignatureMethod, pCanonicalization);
        return win32_impl_result;
    }
    inline int32_t CryptXmlImportPublicKey(uint32_t dwFlags, Windows::Win32::Security::CRYPT_XML_KEY_VALUE* pKeyValue, void** phKey)
    {
        auto win32_impl_result = WIN32_IMPL_CryptXmlImportPublicKey(dwFlags, pKeyValue, phKey);
        return win32_impl_result;
    }
    inline int32_t CryptXmlVerifySignature(void* hSignature, void* hKey, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_CryptXmlVerifySignature(hSignature, hKey, dwFlags);
        return win32_impl_result;
    }
    inline int32_t CryptXmlGetDocContext(void* hCryptXml, Windows::Win32::Security::CRYPT_XML_DOC_CTXT** ppStruct)
    {
        auto win32_impl_result = WIN32_IMPL_CryptXmlGetDocContext(hCryptXml, ppStruct);
        return win32_impl_result;
    }
    inline int32_t CryptXmlGetSignature(void* hCryptXml, Windows::Win32::Security::CRYPT_XML_SIGNATURE** ppStruct)
    {
        auto win32_impl_result = WIN32_IMPL_CryptXmlGetSignature(hCryptXml, ppStruct);
        return win32_impl_result;
    }
    inline int32_t CryptXmlGetReference(void* hCryptXml, Windows::Win32::Security::CRYPT_XML_REFERENCE** ppStruct)
    {
        auto win32_impl_result = WIN32_IMPL_CryptXmlGetReference(hCryptXml, ppStruct);
        return win32_impl_result;
    }
    inline int32_t CryptXmlGetStatus(void* hCryptXml, Windows::Win32::Security::CRYPT_XML_STATUS* pStatus)
    {
        auto win32_impl_result = WIN32_IMPL_CryptXmlGetStatus(hCryptXml, pStatus);
        return win32_impl_result;
    }
    inline int32_t CryptXmlEncode(void* hCryptXml, Windows::Win32::Security::CRYPT_XML_CHARSET dwCharset, Windows::Win32::Security::CRYPT_XML_PROPERTY* rgProperty, uint32_t cProperty, void* pvCallbackState, Windows::Win32::Security::PFN_CRYPT_XML_WRITE_CALLBACK* pfnWrite)
    {
        auto win32_impl_result = WIN32_IMPL_CryptXmlEncode(hCryptXml, dwCharset, rgProperty, cProperty, pvCallbackState, pfnWrite);
        return win32_impl_result;
    }
    inline int32_t CryptXmlGetAlgorithmInfo(Windows::Win32::Security::CRYPT_XML_ALGORITHM* pXmlAlgorithm, uint32_t dwFlags, Windows::Win32::Security::CRYPT_XML_ALGORITHM_INFO** ppAlgInfo)
    {
        auto win32_impl_result = WIN32_IMPL_CryptXmlGetAlgorithmInfo(pXmlAlgorithm, dwFlags, ppAlgInfo);
        return win32_impl_result;
    }
    inline Windows::Win32::Security::CRYPT_XML_ALGORITHM_INFO* CryptXmlFindAlgorithmInfo(uint32_t dwFindByType, void* pvFindBy, uint32_t dwGroupId, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_CryptXmlFindAlgorithmInfo(dwFindByType, pvFindBy, dwGroupId, dwFlags);
        return win32_impl_result;
    }
    inline int32_t CryptXmlEnumAlgorithmInfo(uint32_t dwGroupId, uint32_t dwFlags, void* pvArg, Windows::Win32::Security::PFN_CRYPT_XML_ENUM_ALG_INFO* pfnEnumAlgInfo)
    {
        auto win32_impl_result = WIN32_IMPL_CryptXmlEnumAlgorithmInfo(dwGroupId, dwFlags, pvArg, pfnEnumAlgInfo);
        return win32_impl_result;
    }
    inline int32_t WinVerifyTrust(Windows::Win32::WindowsAndMessaging::HWND hwnd, ::win32::guid* pgActionID, void* pWVTData)
    {
        auto win32_impl_result = WIN32_IMPL_WinVerifyTrust(hwnd, pgActionID, pWVTData);
        return win32_impl_result;
    }
    inline int32_t WinVerifyTrustEx(Windows::Win32::WindowsAndMessaging::HWND hwnd, ::win32::guid* pgActionID, Windows::Win32::Security::WINTRUST_DATA* pWinTrustData)
    {
        auto win32_impl_result = WIN32_IMPL_WinVerifyTrustEx(hwnd, pgActionID, pWinTrustData);
        return win32_impl_result;
    }
    inline void WintrustGetRegPolicyFlags(uint32_t* pdwPolicyFlags)
    {
        WIN32_IMPL_WintrustGetRegPolicyFlags(pdwPolicyFlags);
    }
    inline Windows::Win32::SystemServices::BOOL WintrustSetRegPolicyFlags(uint32_t dwPolicyFlags)
    {
        auto win32_impl_result = WIN32_IMPL_WintrustSetRegPolicyFlags(dwPolicyFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WintrustAddActionID(::win32::guid* pgActionID, uint32_t fdwFlags, Windows::Win32::Security::CRYPT_REGISTER_ACTIONID* psProvInfo)
    {
        auto win32_impl_result = WIN32_IMPL_WintrustAddActionID(pgActionID, fdwFlags, psProvInfo);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WintrustRemoveActionID(::win32::guid* pgActionID)
    {
        auto win32_impl_result = WIN32_IMPL_WintrustRemoveActionID(pgActionID);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WintrustLoadFunctionPointers(::win32::guid* pgActionID, Windows::Win32::Security::CRYPT_PROVIDER_FUNCTIONS* pPfns)
    {
        auto win32_impl_result = WIN32_IMPL_WintrustLoadFunctionPointers(pgActionID, pPfns);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WintrustAddDefaultForUsage(int8_t* pszUsageOID, Windows::Win32::Security::CRYPT_PROVIDER_REGDEFUSAGE* psDefUsage)
    {
        auto win32_impl_result = WIN32_IMPL_WintrustAddDefaultForUsage(pszUsageOID, psDefUsage);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WintrustGetDefaultForUsage(uint32_t dwAction, int8_t* pszUsageOID, Windows::Win32::Security::CRYPT_PROVIDER_DEFUSAGE* psUsage)
    {
        auto win32_impl_result = WIN32_IMPL_WintrustGetDefaultForUsage(dwAction, pszUsageOID, psUsage);
        return win32_impl_result;
    }
    inline Windows::Win32::Security::CRYPT_PROVIDER_SGNR* WTHelperGetProvSignerFromChain(Windows::Win32::Security::CRYPT_PROVIDER_DATA* pProvData, uint32_t idxSigner, Windows::Win32::SystemServices::BOOL fCounterSigner, uint32_t idxCounterSigner)
    {
        auto win32_impl_result = WIN32_IMPL_WTHelperGetProvSignerFromChain(pProvData, idxSigner, fCounterSigner, idxCounterSigner);
        return win32_impl_result;
    }
    inline Windows::Win32::Security::CRYPT_PROVIDER_CERT* WTHelperGetProvCertFromChain(Windows::Win32::Security::CRYPT_PROVIDER_SGNR* pSgnr, uint32_t idxCert)
    {
        auto win32_impl_result = WIN32_IMPL_WTHelperGetProvCertFromChain(pSgnr, idxCert);
        return win32_impl_result;
    }
    inline Windows::Win32::Security::CRYPT_PROVIDER_DATA* WTHelperProvDataFromStateData(Windows::Win32::SystemServices::HANDLE hStateData)
    {
        auto win32_impl_result = WIN32_IMPL_WTHelperProvDataFromStateData(hStateData);
        return win32_impl_result;
    }
    inline Windows::Win32::Security::CRYPT_PROVIDER_PRIVDATA* WTHelperGetProvPrivateDataFromChain(Windows::Win32::Security::CRYPT_PROVIDER_DATA* pProvData, ::win32::guid* pgProviderID)
    {
        auto win32_impl_result = WIN32_IMPL_WTHelperGetProvPrivateDataFromChain(pProvData, pgProviderID);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WTHelperCertIsSelfSigned(uint32_t dwEncoding, Windows::Win32::Security::CERT_INFO* pCert)
    {
        auto win32_impl_result = WIN32_IMPL_WTHelperCertIsSelfSigned(dwEncoding, pCert);
        return win32_impl_result;
    }
    inline int32_t WTHelperCertCheckValidSignature(Windows::Win32::Security::CRYPT_PROVIDER_DATA* pProvData)
    {
        auto win32_impl_result = WIN32_IMPL_WTHelperCertCheckValidSignature(pProvData);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL OpenPersonalTrustDBDialogEx(Windows::Win32::WindowsAndMessaging::HWND hwndParent, uint32_t dwFlags, void** pvReserved)
    {
        auto win32_impl_result = WIN32_IMPL_OpenPersonalTrustDBDialogEx(hwndParent, dwFlags, pvReserved);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL OpenPersonalTrustDBDialog(Windows::Win32::WindowsAndMessaging::HWND hwndParent)
    {
        auto win32_impl_result = WIN32_IMPL_OpenPersonalTrustDBDialog(hwndParent);
        return win32_impl_result;
    }
    inline void WintrustSetDefaultIncludePEPageHashes(Windows::Win32::SystemServices::BOOL fIncludePEPageHashes)
    {
        WIN32_IMPL_WintrustSetDefaultIncludePEPageHashes(fIncludePEPageHashes);
    }
    inline Windows::Win32::SystemServices::BOOL CryptUIDlgViewContext(uint32_t dwContextType, void* pvContext, Windows::Win32::WindowsAndMessaging::HWND hwnd, uint16_t* pwszTitle, uint32_t dwFlags, void* pvReserved)
    {
        auto win32_impl_result = WIN32_IMPL_CryptUIDlgViewContext(dwContextType, pvContext, hwnd, pwszTitle, dwFlags, pvReserved);
        return win32_impl_result;
    }
    inline Windows::Win32::Security::CERT_CONTEXT* CryptUIDlgSelectCertificateFromStore(void* hCertStore, Windows::Win32::WindowsAndMessaging::HWND hwnd, uint16_t* pwszTitle, uint16_t* pwszDisplayString, uint32_t dwDontUseColumn, uint32_t dwFlags, void* pvReserved)
    {
        auto win32_impl_result = WIN32_IMPL_CryptUIDlgSelectCertificateFromStore(hCertStore, hwnd, pwszTitle, pwszDisplayString, dwDontUseColumn, dwFlags, pvReserved);
        return win32_impl_result;
    }
    inline int32_t CertSelectionGetSerializedBlob(Windows::Win32::Security::CERT_SELECTUI_INPUT* pcsi, void** ppOutBuffer, uint32_t* pulOutBufferSize)
    {
        auto win32_impl_result = WIN32_IMPL_CertSelectionGetSerializedBlob(pcsi, ppOutBuffer, pulOutBufferSize);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptUIDlgCertMgr(Windows::Win32::Security::CRYPTUI_CERT_MGR_STRUCT* pCryptUICertMgr)
    {
        auto win32_impl_result = WIN32_IMPL_CryptUIDlgCertMgr(pCryptUICertMgr);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptUIWizDigitalSign(uint32_t dwFlags, Windows::Win32::WindowsAndMessaging::HWND hwndParent, uint16_t* pwszWizardTitle, Windows::Win32::Security::CRYPTUI_WIZ_DIGITAL_SIGN_INFO* pDigitalSignInfo, Windows::Win32::Security::CRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT** ppSignContext)
    {
        auto win32_impl_result = WIN32_IMPL_CryptUIWizDigitalSign(dwFlags, hwndParent, pwszWizardTitle, pDigitalSignInfo, ppSignContext);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptUIWizFreeDigitalSignContext(Windows::Win32::Security::CRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT* pSignContext)
    {
        auto win32_impl_result = WIN32_IMPL_CryptUIWizFreeDigitalSignContext(pSignContext);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptUIDlgViewCertificateW(Windows::Win32::Security::CRYPTUI_VIEWCERTIFICATE_STRUCTW* pCertViewInfo, int32_t* pfPropertiesChanged)
    {
        auto win32_impl_result = WIN32_IMPL_CryptUIDlgViewCertificateW(pCertViewInfo, pfPropertiesChanged);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptUIDlgViewCertificateA(Windows::Win32::Security::CRYPTUI_VIEWCERTIFICATE_STRUCTA* pCertViewInfo, int32_t* pfPropertiesChanged)
    {
        auto win32_impl_result = WIN32_IMPL_CryptUIDlgViewCertificateA(pCertViewInfo, pfPropertiesChanged);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptUIWizExport(uint32_t dwFlags, Windows::Win32::WindowsAndMessaging::HWND hwndParent, uint16_t* pwszWizardTitle, Windows::Win32::Security::CRYPTUI_WIZ_EXPORT_INFO* pExportInfo, void* pvoid)
    {
        auto win32_impl_result = WIN32_IMPL_CryptUIWizExport(dwFlags, hwndParent, pwszWizardTitle, pExportInfo, pvoid);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptUIWizImport(uint32_t dwFlags, Windows::Win32::WindowsAndMessaging::HWND hwndParent, uint16_t* pwszWizardTitle, Windows::Win32::Security::CRYPTUI_WIZ_IMPORT_SRC_INFO* pImportSrc, void* hDestCertStore)
    {
        auto win32_impl_result = WIN32_IMPL_CryptUIWizImport(dwFlags, hwndParent, pwszWizardTitle, pImportSrc, hDestCertStore);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptSIPGetSignedDataMsg(Windows::Win32::Security::SIP_SUBJECTINFO* pSubjectInfo, uint32_t* pdwEncodingType, uint32_t dwIndex, uint32_t* pcbSignedDataMsg, uint8_t* pbSignedDataMsg)
    {
        auto win32_impl_result = WIN32_IMPL_CryptSIPGetSignedDataMsg(pSubjectInfo, pdwEncodingType, dwIndex, pcbSignedDataMsg, pbSignedDataMsg);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptSIPPutSignedDataMsg(Windows::Win32::Security::SIP_SUBJECTINFO* pSubjectInfo, uint32_t dwEncodingType, uint32_t* pdwIndex, uint32_t cbSignedDataMsg, uint8_t* pbSignedDataMsg)
    {
        auto win32_impl_result = WIN32_IMPL_CryptSIPPutSignedDataMsg(pSubjectInfo, dwEncodingType, pdwIndex, cbSignedDataMsg, pbSignedDataMsg);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptSIPCreateIndirectData(Windows::Win32::Security::SIP_SUBJECTINFO* pSubjectInfo, uint32_t* pcbIndirectData, Windows::Win32::Security::SIP_INDIRECT_DATA* pIndirectData)
    {
        auto win32_impl_result = WIN32_IMPL_CryptSIPCreateIndirectData(pSubjectInfo, pcbIndirectData, pIndirectData);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptSIPVerifyIndirectData(Windows::Win32::Security::SIP_SUBJECTINFO* pSubjectInfo, Windows::Win32::Security::SIP_INDIRECT_DATA* pIndirectData)
    {
        auto win32_impl_result = WIN32_IMPL_CryptSIPVerifyIndirectData(pSubjectInfo, pIndirectData);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptSIPRemoveSignedDataMsg(Windows::Win32::Security::SIP_SUBJECTINFO* pSubjectInfo, uint32_t dwIndex)
    {
        auto win32_impl_result = WIN32_IMPL_CryptSIPRemoveSignedDataMsg(pSubjectInfo, dwIndex);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptSIPLoad(::win32::guid* pgSubject, uint32_t dwFlags, Windows::Win32::Security::SIP_DISPATCH_INFO* pSipDispatch)
    {
        auto win32_impl_result = WIN32_IMPL_CryptSIPLoad(pgSubject, dwFlags, pSipDispatch);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptSIPRetrieveSubjectGuid(uint16_t* FileName, Windows::Win32::SystemServices::HANDLE hFileIn, ::win32::guid* pgSubject)
    {
        auto win32_impl_result = WIN32_IMPL_CryptSIPRetrieveSubjectGuid(FileName, hFileIn, pgSubject);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptSIPRetrieveSubjectGuidForCatalogFile(uint16_t* FileName, Windows::Win32::SystemServices::HANDLE hFileIn, ::win32::guid* pgSubject)
    {
        auto win32_impl_result = WIN32_IMPL_CryptSIPRetrieveSubjectGuidForCatalogFile(FileName, hFileIn, pgSubject);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptSIPAddProvider(Windows::Win32::Security::SIP_ADD_NEWPROVIDER* psNewProv)
    {
        auto win32_impl_result = WIN32_IMPL_CryptSIPAddProvider(psNewProv);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptSIPRemoveProvider(::win32::guid* pgProv)
    {
        auto win32_impl_result = WIN32_IMPL_CryptSIPRemoveProvider(pgProv);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptSIPGetCaps(Windows::Win32::Security::SIP_SUBJECTINFO* pSubjInfo, Windows::Win32::Security::SIP_CAP_SET_V3* pCaps)
    {
        auto win32_impl_result = WIN32_IMPL_CryptSIPGetCaps(pSubjInfo, pCaps);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptSIPGetSealedDigest(Windows::Win32::Security::SIP_SUBJECTINFO* pSubjectInfo, uint8_t* pSig, uint32_t dwSig, uint8_t* pbDigest, uint32_t* pcbDigest)
    {
        auto win32_impl_result = WIN32_IMPL_CryptSIPGetSealedDigest(pSubjectInfo, pSig, dwSig, pbDigest, pcbDigest);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::HANDLE CryptCATOpen(uint16_t* pwszFileName, uint32_t fdwOpenFlags, size_t hProv, uint32_t dwPublicVersion, uint32_t dwEncodingType)
    {
        auto win32_impl_result = WIN32_IMPL_CryptCATOpen(pwszFileName, fdwOpenFlags, hProv, dwPublicVersion, dwEncodingType);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptCATClose(Windows::Win32::SystemServices::HANDLE hCatalog)
    {
        auto win32_impl_result = WIN32_IMPL_CryptCATClose(hCatalog);
        return win32_impl_result;
    }
    inline Windows::Win32::Security::CRYPTCATSTORE* CryptCATStoreFromHandle(Windows::Win32::SystemServices::HANDLE hCatalog)
    {
        auto win32_impl_result = WIN32_IMPL_CryptCATStoreFromHandle(hCatalog);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::HANDLE CryptCATHandleFromStore(Windows::Win32::Security::CRYPTCATSTORE* pCatStore)
    {
        auto win32_impl_result = WIN32_IMPL_CryptCATHandleFromStore(pCatStore);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptCATPersistStore(Windows::Win32::SystemServices::HANDLE hCatalog)
    {
        auto win32_impl_result = WIN32_IMPL_CryptCATPersistStore(hCatalog);
        return win32_impl_result;
    }
    inline Windows::Win32::Security::CRYPTCATATTRIBUTE* CryptCATGetCatAttrInfo(Windows::Win32::SystemServices::HANDLE hCatalog, uint16_t* pwszReferenceTag)
    {
        auto win32_impl_result = WIN32_IMPL_CryptCATGetCatAttrInfo(hCatalog, pwszReferenceTag);
        return win32_impl_result;
    }
    inline Windows::Win32::Security::CRYPTCATATTRIBUTE* CryptCATPutCatAttrInfo(Windows::Win32::SystemServices::HANDLE hCatalog, uint16_t* pwszReferenceTag, uint32_t dwAttrTypeAndAction, uint32_t cbData, uint8_t* pbData)
    {
        auto win32_impl_result = WIN32_IMPL_CryptCATPutCatAttrInfo(hCatalog, pwszReferenceTag, dwAttrTypeAndAction, cbData, pbData);
        return win32_impl_result;
    }
    inline Windows::Win32::Security::CRYPTCATATTRIBUTE* CryptCATEnumerateCatAttr(Windows::Win32::SystemServices::HANDLE hCatalog, Windows::Win32::Security::CRYPTCATATTRIBUTE* pPrevAttr)
    {
        auto win32_impl_result = WIN32_IMPL_CryptCATEnumerateCatAttr(hCatalog, pPrevAttr);
        return win32_impl_result;
    }
    inline Windows::Win32::Security::CRYPTCATMEMBER* CryptCATGetMemberInfo(Windows::Win32::SystemServices::HANDLE hCatalog, uint16_t* pwszReferenceTag)
    {
        auto win32_impl_result = WIN32_IMPL_CryptCATGetMemberInfo(hCatalog, pwszReferenceTag);
        return win32_impl_result;
    }
    inline Windows::Win32::Security::CRYPTCATMEMBER* CryptCATAllocSortedMemberInfo(Windows::Win32::SystemServices::HANDLE hCatalog, uint16_t* pwszReferenceTag)
    {
        auto win32_impl_result = WIN32_IMPL_CryptCATAllocSortedMemberInfo(hCatalog, pwszReferenceTag);
        return win32_impl_result;
    }
    inline void CryptCATFreeSortedMemberInfo(Windows::Win32::SystemServices::HANDLE hCatalog, Windows::Win32::Security::CRYPTCATMEMBER* pCatMember)
    {
        WIN32_IMPL_CryptCATFreeSortedMemberInfo(hCatalog, pCatMember);
    }
    inline Windows::Win32::Security::CRYPTCATATTRIBUTE* CryptCATGetAttrInfo(Windows::Win32::SystemServices::HANDLE hCatalog, Windows::Win32::Security::CRYPTCATMEMBER* pCatMember, uint16_t* pwszReferenceTag)
    {
        auto win32_impl_result = WIN32_IMPL_CryptCATGetAttrInfo(hCatalog, pCatMember, pwszReferenceTag);
        return win32_impl_result;
    }
    inline Windows::Win32::Security::CRYPTCATMEMBER* CryptCATPutMemberInfo(Windows::Win32::SystemServices::HANDLE hCatalog, uint16_t* pwszFileName, uint16_t* pwszReferenceTag, ::win32::guid* pgSubjectType, uint32_t dwCertVersion, uint32_t cbSIPIndirectData, uint8_t* pbSIPIndirectData)
    {
        auto win32_impl_result = WIN32_IMPL_CryptCATPutMemberInfo(hCatalog, pwszFileName, pwszReferenceTag, pgSubjectType, dwCertVersion, cbSIPIndirectData, pbSIPIndirectData);
        return win32_impl_result;
    }
    inline Windows::Win32::Security::CRYPTCATATTRIBUTE* CryptCATPutAttrInfo(Windows::Win32::SystemServices::HANDLE hCatalog, Windows::Win32::Security::CRYPTCATMEMBER* pCatMember, uint16_t* pwszReferenceTag, uint32_t dwAttrTypeAndAction, uint32_t cbData, uint8_t* pbData)
    {
        auto win32_impl_result = WIN32_IMPL_CryptCATPutAttrInfo(hCatalog, pCatMember, pwszReferenceTag, dwAttrTypeAndAction, cbData, pbData);
        return win32_impl_result;
    }
    inline Windows::Win32::Security::CRYPTCATMEMBER* CryptCATEnumerateMember(Windows::Win32::SystemServices::HANDLE hCatalog, Windows::Win32::Security::CRYPTCATMEMBER* pPrevMember)
    {
        auto win32_impl_result = WIN32_IMPL_CryptCATEnumerateMember(hCatalog, pPrevMember);
        return win32_impl_result;
    }
    inline Windows::Win32::Security::CRYPTCATATTRIBUTE* CryptCATEnumerateAttr(Windows::Win32::SystemServices::HANDLE hCatalog, Windows::Win32::Security::CRYPTCATMEMBER* pCatMember, Windows::Win32::Security::CRYPTCATATTRIBUTE* pPrevAttr)
    {
        auto win32_impl_result = WIN32_IMPL_CryptCATEnumerateAttr(hCatalog, pCatMember, pPrevAttr);
        return win32_impl_result;
    }
    inline Windows::Win32::Security::CRYPTCATCDF* CryptCATCDFOpen(uint16_t* pwszFilePath, Windows::Win32::Security::PFN_CDF_PARSE_ERROR_CALLBACK* pfnParseError)
    {
        auto win32_impl_result = WIN32_IMPL_CryptCATCDFOpen(pwszFilePath, pfnParseError);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptCATCDFClose(Windows::Win32::Security::CRYPTCATCDF* pCDF)
    {
        auto win32_impl_result = WIN32_IMPL_CryptCATCDFClose(pCDF);
        return win32_impl_result;
    }
    inline Windows::Win32::Security::CRYPTCATATTRIBUTE* CryptCATCDFEnumCatAttributes(Windows::Win32::Security::CRYPTCATCDF* pCDF, Windows::Win32::Security::CRYPTCATATTRIBUTE* pPrevAttr, Windows::Win32::Security::PFN_CDF_PARSE_ERROR_CALLBACK* pfnParseError)
    {
        auto win32_impl_result = WIN32_IMPL_CryptCATCDFEnumCatAttributes(pCDF, pPrevAttr, pfnParseError);
        return win32_impl_result;
    }
    inline Windows::Win32::Security::CRYPTCATMEMBER* CryptCATCDFEnumMembers(Windows::Win32::Security::CRYPTCATCDF* pCDF, Windows::Win32::Security::CRYPTCATMEMBER* pPrevMember, Windows::Win32::Security::PFN_CDF_PARSE_ERROR_CALLBACK* pfnParseError)
    {
        auto win32_impl_result = WIN32_IMPL_CryptCATCDFEnumMembers(pCDF, pPrevMember, pfnParseError);
        return win32_impl_result;
    }
    inline Windows::Win32::Security::CRYPTCATATTRIBUTE* CryptCATCDFEnumAttributes(Windows::Win32::Security::CRYPTCATCDF* pCDF, Windows::Win32::Security::CRYPTCATMEMBER* pMember, Windows::Win32::Security::CRYPTCATATTRIBUTE* pPrevAttr, Windows::Win32::Security::PFN_CDF_PARSE_ERROR_CALLBACK* pfnParseError)
    {
        auto win32_impl_result = WIN32_IMPL_CryptCATCDFEnumAttributes(pCDF, pMember, pPrevAttr, pfnParseError);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL IsCatalogFile(Windows::Win32::SystemServices::HANDLE hFile, uint16_t* pwszFileName)
    {
        auto win32_impl_result = WIN32_IMPL_IsCatalogFile(hFile, pwszFileName);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptCATAdminAcquireContext(intptr_t* phCatAdmin, ::win32::guid* pgSubsystem, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_CryptCATAdminAcquireContext(phCatAdmin, pgSubsystem, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptCATAdminAcquireContext2(intptr_t* phCatAdmin, ::win32::guid* pgSubsystem, uint16_t* pwszHashAlgorithm, Windows::Win32::Security::CERT_STRONG_SIGN_PARA* pStrongHashPolicy, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_CryptCATAdminAcquireContext2(phCatAdmin, pgSubsystem, pwszHashAlgorithm, pStrongHashPolicy, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptCATAdminReleaseContext(intptr_t hCatAdmin, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_CryptCATAdminReleaseContext(hCatAdmin, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptCATAdminReleaseCatalogContext(intptr_t hCatAdmin, intptr_t hCatInfo, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_CryptCATAdminReleaseCatalogContext(hCatAdmin, hCatInfo, dwFlags);
        return win32_impl_result;
    }
    inline intptr_t CryptCATAdminEnumCatalogFromHash(intptr_t hCatAdmin, uint8_t* pbHash, uint32_t cbHash, uint32_t dwFlags, intptr_t* phPrevCatInfo)
    {
        auto win32_impl_result = WIN32_IMPL_CryptCATAdminEnumCatalogFromHash(hCatAdmin, pbHash, cbHash, dwFlags, phPrevCatInfo);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptCATAdminCalcHashFromFileHandle(Windows::Win32::SystemServices::HANDLE hFile, uint32_t* pcbHash, uint8_t* pbHash, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_CryptCATAdminCalcHashFromFileHandle(hFile, pcbHash, pbHash, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptCATAdminCalcHashFromFileHandle2(intptr_t hCatAdmin, Windows::Win32::SystemServices::HANDLE hFile, uint32_t* pcbHash, uint8_t* pbHash, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_CryptCATAdminCalcHashFromFileHandle2(hCatAdmin, hFile, pcbHash, pbHash, dwFlags);
        return win32_impl_result;
    }
    inline intptr_t CryptCATAdminAddCatalog(intptr_t hCatAdmin, uint16_t* pwszCatalogFile, uint16_t* pwszSelectBaseName, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_CryptCATAdminAddCatalog(hCatAdmin, pwszCatalogFile, pwszSelectBaseName, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptCATAdminRemoveCatalog(intptr_t hCatAdmin, uint16_t* pwszCatalogFile, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_CryptCATAdminRemoveCatalog(hCatAdmin, pwszCatalogFile, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptCATCatalogInfoFromContext(intptr_t hCatInfo, Windows::Win32::Security::CATALOG_INFO* psCatInfo, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_CryptCATCatalogInfoFromContext(hCatInfo, psCatInfo, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptCATAdminResolveCatalogPath(intptr_t hCatAdmin, uint16_t* pwszCatalogFile, Windows::Win32::Security::CATALOG_INFO* psCatInfo, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_CryptCATAdminResolveCatalogPath(hCatAdmin, pwszCatalogFile, psCatInfo, dwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CryptCATAdminPauseServiceForBackup(uint32_t dwFlags, Windows::Win32::SystemServices::BOOL fResume)
    {
        auto win32_impl_result = WIN32_IMPL_CryptCATAdminPauseServiceForBackup(dwFlags, fResume);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SaferGetPolicyInformation(uint32_t dwScopeId, Windows::Win32::Security::SAFER_POLICY_INFO_CLASS SaferPolicyInfoClass, uint32_t InfoBufferSize, void* InfoBuffer, uint32_t* InfoBufferRetSize, void* lpReserved)
    {
        auto win32_impl_result = WIN32_IMPL_SaferGetPolicyInformation(dwScopeId, SaferPolicyInfoClass, InfoBufferSize, InfoBuffer, InfoBufferRetSize, lpReserved);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SaferSetPolicyInformation(uint32_t dwScopeId, Windows::Win32::Security::SAFER_POLICY_INFO_CLASS SaferPolicyInfoClass, uint32_t InfoBufferSize, void* InfoBuffer, void* lpReserved)
    {
        auto win32_impl_result = WIN32_IMPL_SaferSetPolicyInformation(dwScopeId, SaferPolicyInfoClass, InfoBufferSize, InfoBuffer, lpReserved);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SaferCreateLevel(uint32_t dwScopeId, uint32_t dwLevelId, uint32_t OpenFlags, Windows::Win32::Security::SAFER_LEVEL_HANDLE__** pLevelHandle, void* lpReserved)
    {
        auto win32_impl_result = WIN32_IMPL_SaferCreateLevel(dwScopeId, dwLevelId, OpenFlags, pLevelHandle, lpReserved);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SaferCloseLevel(Windows::Win32::Security::SAFER_LEVEL_HANDLE__* hLevelHandle)
    {
        auto win32_impl_result = WIN32_IMPL_SaferCloseLevel(hLevelHandle);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SaferIdentifyLevel(uint32_t dwNumProperties, Windows::Win32::Security::SAFER_CODE_PROPERTIES_V2* pCodeProperties, Windows::Win32::Security::SAFER_LEVEL_HANDLE__** pLevelHandle, void* lpReserved)
    {
        auto win32_impl_result = WIN32_IMPL_SaferIdentifyLevel(dwNumProperties, pCodeProperties, pLevelHandle, lpReserved);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SaferComputeTokenFromLevel(Windows::Win32::Security::SAFER_LEVEL_HANDLE__* LevelHandle, Windows::Win32::SystemServices::HANDLE InAccessToken, intptr_t* OutAccessToken, uint32_t dwFlags, void* lpReserved)
    {
        auto win32_impl_result = WIN32_IMPL_SaferComputeTokenFromLevel(LevelHandle, InAccessToken, OutAccessToken, dwFlags, lpReserved);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SaferGetLevelInformation(Windows::Win32::Security::SAFER_LEVEL_HANDLE__* LevelHandle, Windows::Win32::Security::SAFER_OBJECT_INFO_CLASS dwInfoType, void* lpQueryBuffer, uint32_t dwInBufferSize, uint32_t* lpdwOutBufferSize)
    {
        auto win32_impl_result = WIN32_IMPL_SaferGetLevelInformation(LevelHandle, dwInfoType, lpQueryBuffer, dwInBufferSize, lpdwOutBufferSize);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SaferSetLevelInformation(Windows::Win32::Security::SAFER_LEVEL_HANDLE__* LevelHandle, Windows::Win32::Security::SAFER_OBJECT_INFO_CLASS dwInfoType, void* lpQueryBuffer, uint32_t dwInBufferSize)
    {
        auto win32_impl_result = WIN32_IMPL_SaferSetLevelInformation(LevelHandle, dwInfoType, lpQueryBuffer, dwInBufferSize);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SaferRecordEventLogEntry(Windows::Win32::Security::SAFER_LEVEL_HANDLE__* hLevel, uint16_t* szTargetPath, void* lpReserved)
    {
        auto win32_impl_result = WIN32_IMPL_SaferRecordEventLogEntry(hLevel, szTargetPath, lpReserved);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SaferiIsExecutableFileType(uint16_t* szFullPathname, uint8_t bFromShellExecute)
    {
        auto win32_impl_result = WIN32_IMPL_SaferiIsExecutableFileType(szFullPathname, bFromShellExecute);
        return win32_impl_result;
    }
    inline int32_t SLOpen(void** phSLC)
    {
        auto win32_impl_result = WIN32_IMPL_SLOpen(phSLC);
        return win32_impl_result;
    }
    inline int32_t SLClose(void* hSLC)
    {
        auto win32_impl_result = WIN32_IMPL_SLClose(hSLC);
        return win32_impl_result;
    }
    inline int32_t SLInstallProofOfPurchase(void* hSLC, uint16_t* pwszPKeyAlgorithm, uint16_t* pwszPKeyString, uint32_t cbPKeySpecificData, uint8_t* pbPKeySpecificData, ::win32::guid* pPkeyId)
    {
        auto win32_impl_result = WIN32_IMPL_SLInstallProofOfPurchase(hSLC, pwszPKeyAlgorithm, pwszPKeyString, cbPKeySpecificData, pbPKeySpecificData, pPkeyId);
        return win32_impl_result;
    }
    inline int32_t SLUninstallProofOfPurchase(void* hSLC, ::win32::guid* pPKeyId)
    {
        auto win32_impl_result = WIN32_IMPL_SLUninstallProofOfPurchase(hSLC, pPKeyId);
        return win32_impl_result;
    }
    inline int32_t SLInstallLicense(void* hSLC, uint32_t cbLicenseBlob, uint8_t* pbLicenseBlob, ::win32::guid* pLicenseFileId)
    {
        auto win32_impl_result = WIN32_IMPL_SLInstallLicense(hSLC, cbLicenseBlob, pbLicenseBlob, pLicenseFileId);
        return win32_impl_result;
    }
    inline int32_t SLUninstallLicense(void* hSLC, ::win32::guid* pLicenseFileId)
    {
        auto win32_impl_result = WIN32_IMPL_SLUninstallLicense(hSLC, pLicenseFileId);
        return win32_impl_result;
    }
    inline int32_t SLConsumeRight(void* hSLC, ::win32::guid* pAppId, ::win32::guid* pProductSkuId, uint16_t* pwszRightName, void* pvReserved)
    {
        auto win32_impl_result = WIN32_IMPL_SLConsumeRight(hSLC, pAppId, pProductSkuId, pwszRightName, pvReserved);
        return win32_impl_result;
    }
    inline int32_t SLGetProductSkuInformation(void* hSLC, ::win32::guid* pProductSkuId, uint16_t* pwszValueName, Windows::Win32::Security::SLDATATYPE* peDataType, uint32_t* pcbValue, uint8_t** ppbValue)
    {
        auto win32_impl_result = WIN32_IMPL_SLGetProductSkuInformation(hSLC, pProductSkuId, pwszValueName, peDataType, pcbValue, ppbValue);
        return win32_impl_result;
    }
    inline int32_t SLGetPKeyInformation(void* hSLC, ::win32::guid* pPKeyId, uint16_t* pwszValueName, Windows::Win32::Security::SLDATATYPE* peDataType, uint32_t* pcbValue, uint8_t** ppbValue)
    {
        auto win32_impl_result = WIN32_IMPL_SLGetPKeyInformation(hSLC, pPKeyId, pwszValueName, peDataType, pcbValue, ppbValue);
        return win32_impl_result;
    }
    inline int32_t SLGetLicenseInformation(void* hSLC, ::win32::guid* pSLLicenseId, uint16_t* pwszValueName, Windows::Win32::Security::SLDATATYPE* peDataType, uint32_t* pcbValue, uint8_t** ppbValue)
    {
        auto win32_impl_result = WIN32_IMPL_SLGetLicenseInformation(hSLC, pSLLicenseId, pwszValueName, peDataType, pcbValue, ppbValue);
        return win32_impl_result;
    }
    inline int32_t SLGetLicensingStatusInformation(void* hSLC, ::win32::guid* pAppID, ::win32::guid* pProductSkuId, uint16_t* pwszRightName, uint32_t* pnStatusCount, Windows::Win32::Security::SL_LICENSING_STATUS** ppLicensingStatus)
    {
        auto win32_impl_result = WIN32_IMPL_SLGetLicensingStatusInformation(hSLC, pAppID, pProductSkuId, pwszRightName, pnStatusCount, ppLicensingStatus);
        return win32_impl_result;
    }
    inline int32_t SLGetPolicyInformation(void* hSLC, uint16_t* pwszValueName, Windows::Win32::Security::SLDATATYPE* peDataType, uint32_t* pcbValue, uint8_t** ppbValue)
    {
        auto win32_impl_result = WIN32_IMPL_SLGetPolicyInformation(hSLC, pwszValueName, peDataType, pcbValue, ppbValue);
        return win32_impl_result;
    }
    inline int32_t SLGetPolicyInformationDWORD(void* hSLC, uint16_t* pwszValueName, uint32_t* pdwValue)
    {
        auto win32_impl_result = WIN32_IMPL_SLGetPolicyInformationDWORD(hSLC, pwszValueName, pdwValue);
        return win32_impl_result;
    }
    inline int32_t SLGetServiceInformation(void* hSLC, uint16_t* pwszValueName, Windows::Win32::Security::SLDATATYPE* peDataType, uint32_t* pcbValue, uint8_t** ppbValue)
    {
        auto win32_impl_result = WIN32_IMPL_SLGetServiceInformation(hSLC, pwszValueName, peDataType, pcbValue, ppbValue);
        return win32_impl_result;
    }
    inline int32_t SLGetApplicationInformation(void* hSLC, ::win32::guid* pApplicationId, uint16_t* pwszValueName, Windows::Win32::Security::SLDATATYPE* peDataType, uint32_t* pcbValue, uint8_t** ppbValue)
    {
        auto win32_impl_result = WIN32_IMPL_SLGetApplicationInformation(hSLC, pApplicationId, pwszValueName, peDataType, pcbValue, ppbValue);
        return win32_impl_result;
    }
    inline int32_t SLActivateProduct(void* hSLC, ::win32::guid* pProductSkuId, uint32_t cbAppSpecificData, void* pvAppSpecificData, Windows::Win32::Security::SL_ACTIVATION_INFO_HEADER* pActivationInfo, uint16_t* pwszProxyServer, uint16_t wProxyPort)
    {
        auto win32_impl_result = WIN32_IMPL_SLActivateProduct(hSLC, pProductSkuId, cbAppSpecificData, pvAppSpecificData, pActivationInfo, pwszProxyServer, wProxyPort);
        return win32_impl_result;
    }
    inline int32_t SLGetServerStatus(uint16_t* pwszServerURL, uint16_t* pwszAcquisitionType, uint16_t* pwszProxyServer, uint16_t wProxyPort, int32_t* phrStatus)
    {
        auto win32_impl_result = WIN32_IMPL_SLGetServerStatus(pwszServerURL, pwszAcquisitionType, pwszProxyServer, wProxyPort, phrStatus);
        return win32_impl_result;
    }
    inline int32_t SLGenerateOfflineInstallationId(void* hSLC, ::win32::guid* pProductSkuId, uint16_t** ppwszInstallationId)
    {
        auto win32_impl_result = WIN32_IMPL_SLGenerateOfflineInstallationId(hSLC, pProductSkuId, ppwszInstallationId);
        return win32_impl_result;
    }
    inline int32_t SLGenerateOfflineInstallationIdEx(void* hSLC, ::win32::guid* pProductSkuId, Windows::Win32::Security::SL_ACTIVATION_INFO_HEADER* pActivationInfo, uint16_t** ppwszInstallationId)
    {
        auto win32_impl_result = WIN32_IMPL_SLGenerateOfflineInstallationIdEx(hSLC, pProductSkuId, pActivationInfo, ppwszInstallationId);
        return win32_impl_result;
    }
    inline int32_t SLDepositOfflineConfirmationId(void* hSLC, ::win32::guid* pProductSkuId, uint16_t* pwszInstallationId, uint16_t* pwszConfirmationId)
    {
        auto win32_impl_result = WIN32_IMPL_SLDepositOfflineConfirmationId(hSLC, pProductSkuId, pwszInstallationId, pwszConfirmationId);
        return win32_impl_result;
    }
    inline int32_t SLDepositOfflineConfirmationIdEx(void* hSLC, ::win32::guid* pProductSkuId, Windows::Win32::Security::SL_ACTIVATION_INFO_HEADER* pActivationInfo, uint16_t* pwszInstallationId, uint16_t* pwszConfirmationId)
    {
        auto win32_impl_result = WIN32_IMPL_SLDepositOfflineConfirmationIdEx(hSLC, pProductSkuId, pActivationInfo, pwszInstallationId, pwszConfirmationId);
        return win32_impl_result;
    }
    inline int32_t SLGetPKeyId(void* hSLC, uint16_t* pwszPKeyAlgorithm, uint16_t* pwszPKeyString, uint32_t cbPKeySpecificData, uint8_t* pbPKeySpecificData, ::win32::guid* pPKeyId)
    {
        auto win32_impl_result = WIN32_IMPL_SLGetPKeyId(hSLC, pwszPKeyAlgorithm, pwszPKeyString, cbPKeySpecificData, pbPKeySpecificData, pPKeyId);
        return win32_impl_result;
    }
    inline int32_t SLGetInstalledProductKeyIds(void* hSLC, ::win32::guid* pProductSkuId, uint32_t* pnProductKeyIds, ::win32::guid** ppProductKeyIds)
    {
        auto win32_impl_result = WIN32_IMPL_SLGetInstalledProductKeyIds(hSLC, pProductSkuId, pnProductKeyIds, ppProductKeyIds);
        return win32_impl_result;
    }
    inline int32_t SLSetCurrentProductKey(void* hSLC, ::win32::guid* pProductSkuId, ::win32::guid* pProductKeyId)
    {
        auto win32_impl_result = WIN32_IMPL_SLSetCurrentProductKey(hSLC, pProductSkuId, pProductKeyId);
        return win32_impl_result;
    }
    inline int32_t SLGetSLIDList(void* hSLC, Windows::Win32::Security::SLIDTYPE eQueryIdType, ::win32::guid* pQueryId, Windows::Win32::Security::SLIDTYPE eReturnIdType, uint32_t* pnReturnIds, ::win32::guid** ppReturnIds)
    {
        auto win32_impl_result = WIN32_IMPL_SLGetSLIDList(hSLC, eQueryIdType, pQueryId, eReturnIdType, pnReturnIds, ppReturnIds);
        return win32_impl_result;
    }
    inline int32_t SLGetLicenseFileId(void* hSLC, uint32_t cbLicenseBlob, uint8_t* pbLicenseBlob, ::win32::guid* pLicenseFileId)
    {
        auto win32_impl_result = WIN32_IMPL_SLGetLicenseFileId(hSLC, cbLicenseBlob, pbLicenseBlob, pLicenseFileId);
        return win32_impl_result;
    }
    inline int32_t SLGetLicense(void* hSLC, ::win32::guid* pLicenseFileId, uint32_t* pcbLicenseFile, uint8_t** ppbLicenseFile)
    {
        auto win32_impl_result = WIN32_IMPL_SLGetLicense(hSLC, pLicenseFileId, pcbLicenseFile, ppbLicenseFile);
        return win32_impl_result;
    }
    inline int32_t SLFireEvent(void* hSLC, uint16_t* pwszEventId, ::win32::guid* pApplicationId)
    {
        auto win32_impl_result = WIN32_IMPL_SLFireEvent(hSLC, pwszEventId, pApplicationId);
        return win32_impl_result;
    }
    inline int32_t SLRegisterEvent(void* hSLC, uint16_t* pwszEventId, ::win32::guid* pApplicationId, Windows::Win32::SystemServices::HANDLE hEvent)
    {
        auto win32_impl_result = WIN32_IMPL_SLRegisterEvent(hSLC, pwszEventId, pApplicationId, hEvent);
        return win32_impl_result;
    }
    inline int32_t SLUnregisterEvent(void* hSLC, uint16_t* pwszEventId, ::win32::guid* pApplicationId, Windows::Win32::SystemServices::HANDLE hEvent)
    {
        auto win32_impl_result = WIN32_IMPL_SLUnregisterEvent(hSLC, pwszEventId, pApplicationId, hEvent);
        return win32_impl_result;
    }
    inline int32_t SLGetWindowsInformation(uint16_t* pwszValueName, Windows::Win32::Security::SLDATATYPE* peDataType, uint32_t* pcbValue, uint8_t** ppbValue)
    {
        auto win32_impl_result = WIN32_IMPL_SLGetWindowsInformation(pwszValueName, peDataType, pcbValue, ppbValue);
        return win32_impl_result;
    }
    inline int32_t SLGetWindowsInformationDWORD(uint16_t* pwszValueName, uint32_t* pdwValue)
    {
        auto win32_impl_result = WIN32_IMPL_SLGetWindowsInformationDWORD(pwszValueName, pdwValue);
        return win32_impl_result;
    }
    inline int32_t SLIsGenuineLocal(::win32::guid* pAppId, Windows::Win32::Security::SL_GENUINE_STATE* pGenuineState, Windows::Win32::Security::SL_NONGENUINE_UI_OPTIONS* pUIOptions)
    {
        auto win32_impl_result = WIN32_IMPL_SLIsGenuineLocal(pAppId, pGenuineState, pUIOptions);
        return win32_impl_result;
    }
    inline int32_t SLAcquireGenuineTicket(void** ppTicketBlob, uint32_t* pcbTicketBlob, uint16_t* pwszTemplateId, uint16_t* pwszServerUrl, uint16_t* pwszClientToken)
    {
        auto win32_impl_result = WIN32_IMPL_SLAcquireGenuineTicket(ppTicketBlob, pcbTicketBlob, pwszTemplateId, pwszServerUrl, pwszClientToken);
        return win32_impl_result;
    }
    inline int32_t SLSetGenuineInformation(::win32::guid* pQueryId, uint16_t* pwszValueName, Windows::Win32::Security::SLDATATYPE eDataType, uint32_t cbValue, uint8_t* pbValue)
    {
        auto win32_impl_result = WIN32_IMPL_SLSetGenuineInformation(pQueryId, pwszValueName, eDataType, cbValue, pbValue);
        return win32_impl_result;
    }
    inline int32_t SLGetReferralInformation(void* hSLC, Windows::Win32::Security::SLREFERRALTYPE eReferralType, ::win32::guid* pSkuOrAppId, uint16_t* pwszValueName, uint16_t** ppwszValue)
    {
        auto win32_impl_result = WIN32_IMPL_SLGetReferralInformation(hSLC, eReferralType, pSkuOrAppId, pwszValueName, ppwszValue);
        return win32_impl_result;
    }
    inline int32_t SLGetGenuineInformation(::win32::guid* pQueryId, uint16_t* pwszValueName, Windows::Win32::Security::SLDATATYPE* peDataType, uint32_t* pcbValue, uint8_t** ppbValue)
    {
        auto win32_impl_result = WIN32_IMPL_SLGetGenuineInformation(pQueryId, pwszValueName, peDataType, pcbValue, ppbValue);
        return win32_impl_result;
    }
    inline int32_t SLQueryLicenseValueFromApp(uint16_t* valueName, uint32_t* valueType, void* dataBuffer, uint32_t dataSize, uint32_t* resultDataSize)
    {
        auto win32_impl_result = WIN32_IMPL_SLQueryLicenseValueFromApp(valueName, valueType, dataBuffer, dataSize, resultDataSize);
        return win32_impl_result;
    }
    inline int32_t DdqCreateSession(Windows::Win32::Security::DdqAccessLevel accessLevel, Windows::Win32::Security::HDIAGNOSTIC_DATA_QUERY_SESSION__** hSession)
    {
        auto win32_impl_result = WIN32_IMPL_DdqCreateSession(accessLevel, hSession);
        return win32_impl_result;
    }
    inline int32_t DdqCloseSession(Windows::Win32::Security::HDIAGNOSTIC_DATA_QUERY_SESSION__* hSession)
    {
        auto win32_impl_result = WIN32_IMPL_DdqCloseSession(hSession);
        return win32_impl_result;
    }
    inline int32_t DdqGetSessionAccessLevel(Windows::Win32::Security::HDIAGNOSTIC_DATA_QUERY_SESSION__* hSession, Windows::Win32::Security::DdqAccessLevel* accessLevel)
    {
        auto win32_impl_result = WIN32_IMPL_DdqGetSessionAccessLevel(hSession, accessLevel);
        return win32_impl_result;
    }
    inline int32_t DdqGetDiagnosticDataAccessLevelAllowed(Windows::Win32::Security::DdqAccessLevel* accessLevel)
    {
        auto win32_impl_result = WIN32_IMPL_DdqGetDiagnosticDataAccessLevelAllowed(accessLevel);
        return win32_impl_result;
    }
    inline int32_t DdqGetDiagnosticRecordStats(Windows::Win32::Security::HDIAGNOSTIC_DATA_QUERY_SESSION__* hSession, Windows::Win32::Security::DIAGNOSTIC_DATA_SEARCH_CRITERIA* searchCriteria, uint32_t* recordCount, int64_t* minRowId, int64_t* maxRowId)
    {
        auto win32_impl_result = WIN32_IMPL_DdqGetDiagnosticRecordStats(hSession, searchCriteria, recordCount, minRowId, maxRowId);
        return win32_impl_result;
    }
    inline int32_t DdqGetDiagnosticRecordPayload(Windows::Win32::Security::HDIAGNOSTIC_DATA_QUERY_SESSION__* hSession, int64_t rowId, uint16_t** payload)
    {
        auto win32_impl_result = WIN32_IMPL_DdqGetDiagnosticRecordPayload(hSession, rowId, payload);
        return win32_impl_result;
    }
    inline int32_t DdqGetDiagnosticRecordLocaleTags(Windows::Win32::Security::HDIAGNOSTIC_DATA_QUERY_SESSION__* hSession, uint16_t* locale, Windows::Win32::Security::HDIAGNOSTIC_EVENT_TAG_DESCRIPTION__** hTagDescription)
    {
        auto win32_impl_result = WIN32_IMPL_DdqGetDiagnosticRecordLocaleTags(hSession, locale, hTagDescription);
        return win32_impl_result;
    }
    inline int32_t DdqFreeDiagnosticRecordLocaleTags(Windows::Win32::Security::HDIAGNOSTIC_EVENT_TAG_DESCRIPTION__* hTagDescription)
    {
        auto win32_impl_result = WIN32_IMPL_DdqFreeDiagnosticRecordLocaleTags(hTagDescription);
        return win32_impl_result;
    }
    inline int32_t DdqGetDiagnosticRecordLocaleTagAtIndex(Windows::Win32::Security::HDIAGNOSTIC_EVENT_TAG_DESCRIPTION__* hTagDescription, uint32_t index, Windows::Win32::Security::DIAGNOSTIC_DATA_EVENT_TAG_DESCRIPTION* tagDescription)
    {
        auto win32_impl_result = WIN32_IMPL_DdqGetDiagnosticRecordLocaleTagAtIndex(hTagDescription, index, tagDescription);
        return win32_impl_result;
    }
    inline int32_t DdqGetDiagnosticRecordLocaleTagCount(Windows::Win32::Security::HDIAGNOSTIC_EVENT_TAG_DESCRIPTION__* hTagDescription, uint32_t* tagDescriptionCount)
    {
        auto win32_impl_result = WIN32_IMPL_DdqGetDiagnosticRecordLocaleTagCount(hTagDescription, tagDescriptionCount);
        return win32_impl_result;
    }
    inline int32_t DdqGetDiagnosticRecordProducers(Windows::Win32::Security::HDIAGNOSTIC_DATA_QUERY_SESSION__* hSession, Windows::Win32::Security::HDIAGNOSTIC_EVENT_PRODUCER_DESCRIPTION__** hProducerDescription)
    {
        auto win32_impl_result = WIN32_IMPL_DdqGetDiagnosticRecordProducers(hSession, hProducerDescription);
        return win32_impl_result;
    }
    inline int32_t DdqFreeDiagnosticRecordProducers(Windows::Win32::Security::HDIAGNOSTIC_EVENT_PRODUCER_DESCRIPTION__* hProducerDescription)
    {
        auto win32_impl_result = WIN32_IMPL_DdqFreeDiagnosticRecordProducers(hProducerDescription);
        return win32_impl_result;
    }
    inline int32_t DdqGetDiagnosticRecordProducerAtIndex(Windows::Win32::Security::HDIAGNOSTIC_EVENT_PRODUCER_DESCRIPTION__* hProducerDescription, uint32_t index, Windows::Win32::Security::DIAGNOSTIC_DATA_EVENT_PRODUCER_DESCRIPTION* producerDescription)
    {
        auto win32_impl_result = WIN32_IMPL_DdqGetDiagnosticRecordProducerAtIndex(hProducerDescription, index, producerDescription);
        return win32_impl_result;
    }
    inline int32_t DdqGetDiagnosticRecordProducerCount(Windows::Win32::Security::HDIAGNOSTIC_EVENT_PRODUCER_DESCRIPTION__* hProducerDescription, uint32_t* producerDescriptionCount)
    {
        auto win32_impl_result = WIN32_IMPL_DdqGetDiagnosticRecordProducerCount(hProducerDescription, producerDescriptionCount);
        return win32_impl_result;
    }
    inline int32_t DdqGetDiagnosticRecordProducerCategories(Windows::Win32::Security::HDIAGNOSTIC_DATA_QUERY_SESSION__* hSession, uint16_t* producerName, Windows::Win32::Security::HDIAGNOSTIC_EVENT_CATEGORY_DESCRIPTION__** hCategoryDescription)
    {
        auto win32_impl_result = WIN32_IMPL_DdqGetDiagnosticRecordProducerCategories(hSession, producerName, hCategoryDescription);
        return win32_impl_result;
    }
    inline int32_t DdqFreeDiagnosticRecordProducerCategories(Windows::Win32::Security::HDIAGNOSTIC_EVENT_CATEGORY_DESCRIPTION__* hCategoryDescription)
    {
        auto win32_impl_result = WIN32_IMPL_DdqFreeDiagnosticRecordProducerCategories(hCategoryDescription);
        return win32_impl_result;
    }
    inline int32_t DdqGetDiagnosticRecordCategoryAtIndex(Windows::Win32::Security::HDIAGNOSTIC_EVENT_CATEGORY_DESCRIPTION__* hCategoryDescription, uint32_t index, Windows::Win32::Security::DIAGNOSTIC_DATA_EVENT_CATEGORY_DESCRIPTION* categoryDescription)
    {
        auto win32_impl_result = WIN32_IMPL_DdqGetDiagnosticRecordCategoryAtIndex(hCategoryDescription, index, categoryDescription);
        return win32_impl_result;
    }
    inline int32_t DdqGetDiagnosticRecordCategoryCount(Windows::Win32::Security::HDIAGNOSTIC_EVENT_CATEGORY_DESCRIPTION__* hCategoryDescription, uint32_t* categoryDescriptionCount)
    {
        auto win32_impl_result = WIN32_IMPL_DdqGetDiagnosticRecordCategoryCount(hCategoryDescription, categoryDescriptionCount);
        return win32_impl_result;
    }
    inline int32_t DdqIsDiagnosticRecordSampledIn(Windows::Win32::Security::HDIAGNOSTIC_DATA_QUERY_SESSION__* hSession, ::win32::guid* providerGroup, ::win32::guid* providerId, uint16_t* providerName, uint32_t* eventId, uint16_t* eventName, uint32_t* eventVersion, uint64_t* eventKeywords, int32_t* isSampledIn)
    {
        auto win32_impl_result = WIN32_IMPL_DdqIsDiagnosticRecordSampledIn(hSession, providerGroup, providerId, providerName, eventId, eventName, eventVersion, eventKeywords, isSampledIn);
        return win32_impl_result;
    }
    inline int32_t DdqGetDiagnosticRecordPage(Windows::Win32::Security::HDIAGNOSTIC_DATA_QUERY_SESSION__* hSession, Windows::Win32::Security::DIAGNOSTIC_DATA_SEARCH_CRITERIA* searchCriteria, uint32_t offset, uint32_t pageRecordCount, int64_t baseRowId, Windows::Win32::Security::HDIAGNOSTIC_RECORD__** hRecord)
    {
        auto win32_impl_result = WIN32_IMPL_DdqGetDiagnosticRecordPage(hSession, searchCriteria, offset, pageRecordCount, baseRowId, hRecord);
        return win32_impl_result;
    }
    inline int32_t DdqFreeDiagnosticRecordPage(Windows::Win32::Security::HDIAGNOSTIC_RECORD__* hRecord)
    {
        auto win32_impl_result = WIN32_IMPL_DdqFreeDiagnosticRecordPage(hRecord);
        return win32_impl_result;
    }
    inline int32_t DdqGetDiagnosticRecordAtIndex(Windows::Win32::Security::HDIAGNOSTIC_RECORD__* hRecord, uint32_t index, Windows::Win32::Security::DIAGNOSTIC_DATA_RECORD* record)
    {
        auto win32_impl_result = WIN32_IMPL_DdqGetDiagnosticRecordAtIndex(hRecord, index, record);
        return win32_impl_result;
    }
    inline int32_t DdqGetDiagnosticRecordCount(Windows::Win32::Security::HDIAGNOSTIC_RECORD__* hRecord, uint32_t* recordCount)
    {
        auto win32_impl_result = WIN32_IMPL_DdqGetDiagnosticRecordCount(hRecord, recordCount);
        return win32_impl_result;
    }
    inline int32_t DdqGetDiagnosticReportStoreReportCount(Windows::Win32::Security::HDIAGNOSTIC_DATA_QUERY_SESSION__* hSession, uint32_t reportStoreType, uint32_t* reportCount)
    {
        auto win32_impl_result = WIN32_IMPL_DdqGetDiagnosticReportStoreReportCount(hSession, reportStoreType, reportCount);
        return win32_impl_result;
    }
    inline int32_t DdqCancelDiagnosticRecordOperation(Windows::Win32::Security::HDIAGNOSTIC_DATA_QUERY_SESSION__* hSession)
    {
        auto win32_impl_result = WIN32_IMPL_DdqCancelDiagnosticRecordOperation(hSession);
        return win32_impl_result;
    }
    inline int32_t DdqGetDiagnosticReport(Windows::Win32::Security::HDIAGNOSTIC_DATA_QUERY_SESSION__* hSession, uint32_t reportStoreType, Windows::Win32::Security::HDIAGNOSTIC_REPORT__** hReport)
    {
        auto win32_impl_result = WIN32_IMPL_DdqGetDiagnosticReport(hSession, reportStoreType, hReport);
        return win32_impl_result;
    }
    inline int32_t DdqFreeDiagnosticReport(Windows::Win32::Security::HDIAGNOSTIC_REPORT__* hReport)
    {
        auto win32_impl_result = WIN32_IMPL_DdqFreeDiagnosticReport(hReport);
        return win32_impl_result;
    }
    inline int32_t DdqGetDiagnosticReportAtIndex(Windows::Win32::Security::HDIAGNOSTIC_REPORT__* hReport, uint32_t index, Windows::Win32::Security::DIAGNOSTIC_REPORT_DATA* report)
    {
        auto win32_impl_result = WIN32_IMPL_DdqGetDiagnosticReportAtIndex(hReport, index, report);
        return win32_impl_result;
    }
    inline int32_t DdqGetDiagnosticReportCount(Windows::Win32::Security::HDIAGNOSTIC_REPORT__* hReport, uint32_t* reportCount)
    {
        auto win32_impl_result = WIN32_IMPL_DdqGetDiagnosticReportCount(hReport, reportCount);
        return win32_impl_result;
    }
    inline int32_t DdqExtractDiagnosticReport(Windows::Win32::Security::HDIAGNOSTIC_DATA_QUERY_SESSION__* hSession, uint32_t reportStoreType, uint16_t* reportKey, uint16_t* destinationPath)
    {
        auto win32_impl_result = WIN32_IMPL_DdqExtractDiagnosticReport(hSession, reportStoreType, reportKey, destinationPath);
        return win32_impl_result;
    }
    inline int32_t DdqGetDiagnosticRecordTagDistribution(Windows::Win32::Security::HDIAGNOSTIC_DATA_QUERY_SESSION__* hSession, uint16_t** producerNames, uint32_t producerNameCount, Windows::Win32::Security::DIAGNOSTIC_DATA_EVENT_TAG_STATS** tagStats, uint32_t* statCount)
    {
        auto win32_impl_result = WIN32_IMPL_DdqGetDiagnosticRecordTagDistribution(hSession, producerNames, producerNameCount, tagStats, statCount);
        return win32_impl_result;
    }
    inline int32_t DdqGetDiagnosticRecordBinaryDistribution(Windows::Win32::Security::HDIAGNOSTIC_DATA_QUERY_SESSION__* hSession, uint16_t** producerNames, uint32_t producerNameCount, uint32_t topNBinaries, Windows::Win32::Security::DIAGNOSTIC_DATA_EVENT_BINARY_STATS** binaryStats, uint32_t* statCount)
    {
        auto win32_impl_result = WIN32_IMPL_DdqGetDiagnosticRecordBinaryDistribution(hSession, producerNames, producerNameCount, topNBinaries, binaryStats, statCount);
        return win32_impl_result;
    }
    inline int32_t DdqGetDiagnosticRecordSummary(Windows::Win32::Security::HDIAGNOSTIC_DATA_QUERY_SESSION__* hSession, uint16_t** producerNames, uint32_t producerNameCount, Windows::Win32::Security::DIAGNOSTIC_DATA_GENERAL_STATS* generalStats)
    {
        auto win32_impl_result = WIN32_IMPL_DdqGetDiagnosticRecordSummary(hSession, producerNames, producerNameCount, generalStats);
        return win32_impl_result;
    }
    inline int32_t DdqSetTranscriptConfiguration(Windows::Win32::Security::HDIAGNOSTIC_DATA_QUERY_SESSION__* hSession, Windows::Win32::Security::DIAGNOSTIC_DATA_EVENT_TRANSCRIPT_CONFIGURATION* desiredConfig)
    {
        auto win32_impl_result = WIN32_IMPL_DdqSetTranscriptConfiguration(hSession, desiredConfig);
        return win32_impl_result;
    }
    inline int32_t DdqGetTranscriptConfiguration(Windows::Win32::Security::HDIAGNOSTIC_DATA_QUERY_SESSION__* hSession, Windows::Win32::Security::DIAGNOSTIC_DATA_EVENT_TRANSCRIPT_CONFIGURATION* currentConfig)
    {
        auto win32_impl_result = WIN32_IMPL_DdqGetTranscriptConfiguration(hSession, currentConfig);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SetThreadToken(intptr_t* Thread, Windows::Win32::SystemServices::HANDLE Token)
    {
        auto win32_impl_result = WIN32_IMPL_SetThreadToken(Thread, Token);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL OpenProcessToken(Windows::Win32::SystemServices::HANDLE ProcessHandle, uint32_t DesiredAccess, intptr_t* TokenHandle)
    {
        auto win32_impl_result = WIN32_IMPL_OpenProcessToken(ProcessHandle, DesiredAccess, TokenHandle);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL OpenThreadToken(Windows::Win32::SystemServices::HANDLE ThreadHandle, uint32_t DesiredAccess, Windows::Win32::SystemServices::BOOL OpenAsSelf, intptr_t* TokenHandle)
    {
        auto win32_impl_result = WIN32_IMPL_OpenThreadToken(ThreadHandle, DesiredAccess, OpenAsSelf, TokenHandle);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL InstallELAMCertificateInfo(Windows::Win32::SystemServices::HANDLE ELAMFile)
    {
        auto win32_impl_result = WIN32_IMPL_InstallELAMCertificateInfo(ELAMFile);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AccessCheckAndAuditAlarmA(int8_t* SubsystemName, void* HandleId, int8_t* ObjectTypeName, int8_t* ObjectName, void* SecurityDescriptor, uint32_t DesiredAccess, Windows::Win32::Security::GENERIC_MAPPING* GenericMapping, Windows::Win32::SystemServices::BOOL ObjectCreation, uint32_t* GrantedAccess, int32_t* AccessStatus, int32_t* pfGenerateOnClose)
    {
        auto win32_impl_result = WIN32_IMPL_AccessCheckAndAuditAlarmA(SubsystemName, HandleId, ObjectTypeName, ObjectName, SecurityDescriptor, DesiredAccess, GenericMapping, ObjectCreation, GrantedAccess, AccessStatus, pfGenerateOnClose);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AccessCheckByTypeAndAuditAlarmA(int8_t* SubsystemName, void* HandleId, int8_t* ObjectTypeName, int8_t* ObjectName, void* SecurityDescriptor, void* PrincipalSelfSid, uint32_t DesiredAccess, Windows::Win32::Security::AUDIT_EVENT_TYPE AuditType, uint32_t Flags, Windows::Win32::Security::OBJECT_TYPE_LIST* ObjectTypeList, uint32_t ObjectTypeListLength, Windows::Win32::Security::GENERIC_MAPPING* GenericMapping, Windows::Win32::SystemServices::BOOL ObjectCreation, uint32_t* GrantedAccess, int32_t* AccessStatus, int32_t* pfGenerateOnClose)
    {
        auto win32_impl_result = WIN32_IMPL_AccessCheckByTypeAndAuditAlarmA(SubsystemName, HandleId, ObjectTypeName, ObjectName, SecurityDescriptor, PrincipalSelfSid, DesiredAccess, AuditType, Flags, ObjectTypeList, ObjectTypeListLength, GenericMapping, ObjectCreation, GrantedAccess, AccessStatus, pfGenerateOnClose);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AccessCheckByTypeResultListAndAuditAlarmA(int8_t* SubsystemName, void* HandleId, int8_t* ObjectTypeName, int8_t* ObjectName, void* SecurityDescriptor, void* PrincipalSelfSid, uint32_t DesiredAccess, Windows::Win32::Security::AUDIT_EVENT_TYPE AuditType, uint32_t Flags, Windows::Win32::Security::OBJECT_TYPE_LIST* ObjectTypeList, uint32_t ObjectTypeListLength, Windows::Win32::Security::GENERIC_MAPPING* GenericMapping, Windows::Win32::SystemServices::BOOL ObjectCreation, uint32_t* GrantedAccess, uint32_t* AccessStatusList, int32_t* pfGenerateOnClose)
    {
        auto win32_impl_result = WIN32_IMPL_AccessCheckByTypeResultListAndAuditAlarmA(SubsystemName, HandleId, ObjectTypeName, ObjectName, SecurityDescriptor, PrincipalSelfSid, DesiredAccess, AuditType, Flags, ObjectTypeList, ObjectTypeListLength, GenericMapping, ObjectCreation, GrantedAccess, AccessStatusList, pfGenerateOnClose);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AccessCheckByTypeResultListAndAuditAlarmByHandleA(int8_t* SubsystemName, void* HandleId, Windows::Win32::SystemServices::HANDLE ClientToken, int8_t* ObjectTypeName, int8_t* ObjectName, void* SecurityDescriptor, void* PrincipalSelfSid, uint32_t DesiredAccess, Windows::Win32::Security::AUDIT_EVENT_TYPE AuditType, uint32_t Flags, Windows::Win32::Security::OBJECT_TYPE_LIST* ObjectTypeList, uint32_t ObjectTypeListLength, Windows::Win32::Security::GENERIC_MAPPING* GenericMapping, Windows::Win32::SystemServices::BOOL ObjectCreation, uint32_t* GrantedAccess, uint32_t* AccessStatusList, int32_t* pfGenerateOnClose)
    {
        auto win32_impl_result = WIN32_IMPL_AccessCheckByTypeResultListAndAuditAlarmByHandleA(SubsystemName, HandleId, ClientToken, ObjectTypeName, ObjectName, SecurityDescriptor, PrincipalSelfSid, DesiredAccess, AuditType, Flags, ObjectTypeList, ObjectTypeListLength, GenericMapping, ObjectCreation, GrantedAccess, AccessStatusList, pfGenerateOnClose);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ObjectOpenAuditAlarmA(int8_t* SubsystemName, void* HandleId, int8_t* ObjectTypeName, int8_t* ObjectName, void* pSecurityDescriptor, Windows::Win32::SystemServices::HANDLE ClientToken, uint32_t DesiredAccess, uint32_t GrantedAccess, Windows::Win32::Security::PRIVILEGE_SET* Privileges, Windows::Win32::SystemServices::BOOL ObjectCreation, Windows::Win32::SystemServices::BOOL AccessGranted, int32_t* GenerateOnClose)
    {
        auto win32_impl_result = WIN32_IMPL_ObjectOpenAuditAlarmA(SubsystemName, HandleId, ObjectTypeName, ObjectName, pSecurityDescriptor, ClientToken, DesiredAccess, GrantedAccess, Privileges, ObjectCreation, AccessGranted, GenerateOnClose);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ObjectPrivilegeAuditAlarmA(int8_t* SubsystemName, void* HandleId, Windows::Win32::SystemServices::HANDLE ClientToken, uint32_t DesiredAccess, Windows::Win32::Security::PRIVILEGE_SET* Privileges, Windows::Win32::SystemServices::BOOL AccessGranted)
    {
        auto win32_impl_result = WIN32_IMPL_ObjectPrivilegeAuditAlarmA(SubsystemName, HandleId, ClientToken, DesiredAccess, Privileges, AccessGranted);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ObjectCloseAuditAlarmA(int8_t* SubsystemName, void* HandleId, Windows::Win32::SystemServices::BOOL GenerateOnClose)
    {
        auto win32_impl_result = WIN32_IMPL_ObjectCloseAuditAlarmA(SubsystemName, HandleId, GenerateOnClose);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL ObjectDeleteAuditAlarmA(int8_t* SubsystemName, void* HandleId, Windows::Win32::SystemServices::BOOL GenerateOnClose)
    {
        auto win32_impl_result = WIN32_IMPL_ObjectDeleteAuditAlarmA(SubsystemName, HandleId, GenerateOnClose);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL PrivilegedServiceAuditAlarmA(int8_t* SubsystemName, int8_t* ServiceName, Windows::Win32::SystemServices::HANDLE ClientToken, Windows::Win32::Security::PRIVILEGE_SET* Privileges, Windows::Win32::SystemServices::BOOL AccessGranted)
    {
        auto win32_impl_result = WIN32_IMPL_PrivilegedServiceAuditAlarmA(SubsystemName, ServiceName, ClientToken, Privileges, AccessGranted);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AddConditionalAce(Windows::Win32::Security::ACL* pAcl, uint32_t dwAceRevision, uint32_t AceFlags, uint8_t AceType, uint32_t AccessMask, void* pSid, uint16_t* ConditionStr, uint32_t* ReturnLength)
    {
        auto win32_impl_result = WIN32_IMPL_AddConditionalAce(pAcl, dwAceRevision, AceFlags, AceType, AccessMask, pSid, ConditionStr, ReturnLength);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SetFileSecurityA(int8_t* lpFileName, uint32_t SecurityInformation, void* pSecurityDescriptor)
    {
        auto win32_impl_result = WIN32_IMPL_SetFileSecurityA(lpFileName, SecurityInformation, pSecurityDescriptor);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetFileSecurityA(int8_t* lpFileName, uint32_t RequestedInformation, void* pSecurityDescriptor, uint32_t nLength, uint32_t* lpnLengthNeeded)
    {
        auto win32_impl_result = WIN32_IMPL_GetFileSecurityA(lpFileName, RequestedInformation, pSecurityDescriptor, nLength, lpnLengthNeeded);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL LookupAccountSidA(int8_t* lpSystemName, void* Sid, int8_t* Name, uint32_t* cchName, int8_t* ReferencedDomainName, uint32_t* cchReferencedDomainName, Windows::Win32::Security::SID_NAME_USE* peUse)
    {
        auto win32_impl_result = WIN32_IMPL_LookupAccountSidA(lpSystemName, Sid, Name, cchName, ReferencedDomainName, cchReferencedDomainName, peUse);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL LookupAccountSidW(uint16_t* lpSystemName, void* Sid, uint16_t* Name, uint32_t* cchName, uint16_t* ReferencedDomainName, uint32_t* cchReferencedDomainName, Windows::Win32::Security::SID_NAME_USE* peUse)
    {
        auto win32_impl_result = WIN32_IMPL_LookupAccountSidW(lpSystemName, Sid, Name, cchName, ReferencedDomainName, cchReferencedDomainName, peUse);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL LookupAccountNameA(int8_t* lpSystemName, int8_t* lpAccountName, void* Sid, uint32_t* cbSid, int8_t* ReferencedDomainName, uint32_t* cchReferencedDomainName, Windows::Win32::Security::SID_NAME_USE* peUse)
    {
        auto win32_impl_result = WIN32_IMPL_LookupAccountNameA(lpSystemName, lpAccountName, Sid, cbSid, ReferencedDomainName, cchReferencedDomainName, peUse);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL LookupAccountNameW(uint16_t* lpSystemName, uint16_t* lpAccountName, void* Sid, uint32_t* cbSid, uint16_t* ReferencedDomainName, uint32_t* cchReferencedDomainName, Windows::Win32::Security::SID_NAME_USE* peUse)
    {
        auto win32_impl_result = WIN32_IMPL_LookupAccountNameW(lpSystemName, lpAccountName, Sid, cbSid, ReferencedDomainName, cchReferencedDomainName, peUse);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL LookupPrivilegeValueA(int8_t* lpSystemName, int8_t* lpName, Windows::Win32::Kernel::LUID* lpLuid)
    {
        auto win32_impl_result = WIN32_IMPL_LookupPrivilegeValueA(lpSystemName, lpName, lpLuid);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL LookupPrivilegeValueW(uint16_t* lpSystemName, uint16_t* lpName, Windows::Win32::Kernel::LUID* lpLuid)
    {
        auto win32_impl_result = WIN32_IMPL_LookupPrivilegeValueW(lpSystemName, lpName, lpLuid);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL LookupPrivilegeNameA(int8_t* lpSystemName, Windows::Win32::Kernel::LUID* lpLuid, int8_t* lpName, uint32_t* cchName)
    {
        auto win32_impl_result = WIN32_IMPL_LookupPrivilegeNameA(lpSystemName, lpLuid, lpName, cchName);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL LookupPrivilegeNameW(uint16_t* lpSystemName, Windows::Win32::Kernel::LUID* lpLuid, uint16_t* lpName, uint32_t* cchName)
    {
        auto win32_impl_result = WIN32_IMPL_LookupPrivilegeNameW(lpSystemName, lpLuid, lpName, cchName);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL LookupPrivilegeDisplayNameA(int8_t* lpSystemName, int8_t* lpName, int8_t* lpDisplayName, uint32_t* cchDisplayName, uint32_t* lpLanguageId)
    {
        auto win32_impl_result = WIN32_IMPL_LookupPrivilegeDisplayNameA(lpSystemName, lpName, lpDisplayName, cchDisplayName, lpLanguageId);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL LookupPrivilegeDisplayNameW(uint16_t* lpSystemName, uint16_t* lpName, uint16_t* lpDisplayName, uint32_t* cchDisplayName, uint32_t* lpLanguageId)
    {
        auto win32_impl_result = WIN32_IMPL_LookupPrivilegeDisplayNameW(lpSystemName, lpName, lpDisplayName, cchDisplayName, lpLanguageId);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL LogonUserA(int8_t* lpszUsername, int8_t* lpszDomain, int8_t* lpszPassword, uint32_t dwLogonType, uint32_t dwLogonProvider, intptr_t* phToken)
    {
        auto win32_impl_result = WIN32_IMPL_LogonUserA(lpszUsername, lpszDomain, lpszPassword, dwLogonType, dwLogonProvider, phToken);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL LogonUserW(uint16_t* lpszUsername, uint16_t* lpszDomain, uint16_t* lpszPassword, uint32_t dwLogonType, uint32_t dwLogonProvider, intptr_t* phToken)
    {
        auto win32_impl_result = WIN32_IMPL_LogonUserW(lpszUsername, lpszDomain, lpszPassword, dwLogonType, dwLogonProvider, phToken);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL LogonUserExA(int8_t* lpszUsername, int8_t* lpszDomain, int8_t* lpszPassword, uint32_t dwLogonType, uint32_t dwLogonProvider, intptr_t* phToken, void** ppLogonSid, void** ppProfileBuffer, uint32_t* pdwProfileLength, Windows::Win32::Security::QUOTA_LIMITS* pQuotaLimits)
    {
        auto win32_impl_result = WIN32_IMPL_LogonUserExA(lpszUsername, lpszDomain, lpszPassword, dwLogonType, dwLogonProvider, phToken, ppLogonSid, ppProfileBuffer, pdwProfileLength, pQuotaLimits);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL LogonUserExW(uint16_t* lpszUsername, uint16_t* lpszDomain, uint16_t* lpszPassword, uint32_t dwLogonType, uint32_t dwLogonProvider, intptr_t* phToken, void** ppLogonSid, void** ppProfileBuffer, uint32_t* pdwProfileLength, Windows::Win32::Security::QUOTA_LIMITS* pQuotaLimits)
    {
        auto win32_impl_result = WIN32_IMPL_LogonUserExW(lpszUsername, lpszDomain, lpszPassword, dwLogonType, dwLogonProvider, phToken, ppLogonSid, ppProfileBuffer, pdwProfileLength, pQuotaLimits);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::LSTATUS RegGetKeySecurity(Windows::Win32::WindowsProgramming::HKEY hKey, uint32_t SecurityInformation, void* pSecurityDescriptor, uint32_t* lpcbSecurityDescriptor)
    {
        auto win32_impl_result = WIN32_IMPL_RegGetKeySecurity(hKey, SecurityInformation, pSecurityDescriptor, lpcbSecurityDescriptor);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::LSTATUS RegSetKeySecurity(Windows::Win32::WindowsProgramming::HKEY hKey, uint32_t SecurityInformation, void* pSecurityDescriptor)
    {
        auto win32_impl_result = WIN32_IMPL_RegSetKeySecurity(hKey, SecurityInformation, pSecurityDescriptor);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS RtlConvertSidToUnicodeString(Windows::Win32::Security::UNICODE_STRING* UnicodeString, void* Sid, uint8_t AllocateDestinationString)
    {
        auto win32_impl_result = WIN32_IMPL_RtlConvertSidToUnicodeString(UnicodeString, Sid, AllocateDestinationString);
        return win32_impl_result;
    }

    inline constexpr wchar_t const* wszCMM_PROP_NAME = L"Name";
    inline constexpr wchar_t const* wszCMM_PROP_DESCRIPTION = L"Description";
    inline constexpr wchar_t const* wszCMM_PROP_COPYRIGHT = L"Copyright";
    inline constexpr wchar_t const* wszCMM_PROP_FILEVER = L"File Version";
    inline constexpr wchar_t const* wszCMM_PROP_PRODUCTVER = L"Product Version";
    inline constexpr wchar_t const* wszCMM_PROP_DISPLAY_HWND = L"HWND";
    inline constexpr wchar_t const* wszCMM_PROP_ISMULTITHREADED = L"IsMultiThreaded";
#pragma endregion methods

}
#endif
