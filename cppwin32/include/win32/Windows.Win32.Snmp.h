// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Snmp_H
#define WIN32_Windows_Win32_Snmp_H
#include "win32/base.h"
static_assert(win32::check_version(CPPWIN32_VERSION, "0.0.0.1"), "Mismatched C++/Win32 headers.");
#define CPPWIN32_VERSION "0.0.0.1"
#include "win32/impl/Windows.Win32.Snmp.2.h"
WIN32_EXPORT namespace win32::Windows::Win32::Snmp
{
#pragma region methods
    inline int32_t SnmpUtilOidCpy(Windows::Win32::Snmp::AsnObjectIdentifier* pOidDst, Windows::Win32::Snmp::AsnObjectIdentifier* pOidSrc)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpUtilOidCpy(pOidDst, pOidSrc);
        return win32_impl_result;
    }
    inline int32_t SnmpUtilOidAppend(Windows::Win32::Snmp::AsnObjectIdentifier* pOidDst, Windows::Win32::Snmp::AsnObjectIdentifier* pOidSrc)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpUtilOidAppend(pOidDst, pOidSrc);
        return win32_impl_result;
    }
    inline int32_t SnmpUtilOidNCmp(Windows::Win32::Snmp::AsnObjectIdentifier* pOid1, Windows::Win32::Snmp::AsnObjectIdentifier* pOid2, uint32_t nSubIds)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpUtilOidNCmp(pOid1, pOid2, nSubIds);
        return win32_impl_result;
    }
    inline int32_t SnmpUtilOidCmp(Windows::Win32::Snmp::AsnObjectIdentifier* pOid1, Windows::Win32::Snmp::AsnObjectIdentifier* pOid2)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpUtilOidCmp(pOid1, pOid2);
        return win32_impl_result;
    }
    inline void SnmpUtilOidFree(Windows::Win32::Snmp::AsnObjectIdentifier* pOid)
    {
        WIN32_IMPL_SnmpUtilOidFree(pOid);
    }
    inline int32_t SnmpUtilOctetsCmp(Windows::Win32::Snmp::AsnOctetString* pOctets1, Windows::Win32::Snmp::AsnOctetString* pOctets2)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpUtilOctetsCmp(pOctets1, pOctets2);
        return win32_impl_result;
    }
    inline int32_t SnmpUtilOctetsNCmp(Windows::Win32::Snmp::AsnOctetString* pOctets1, Windows::Win32::Snmp::AsnOctetString* pOctets2, uint32_t nChars)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpUtilOctetsNCmp(pOctets1, pOctets2, nChars);
        return win32_impl_result;
    }
    inline int32_t SnmpUtilOctetsCpy(Windows::Win32::Snmp::AsnOctetString* pOctetsDst, Windows::Win32::Snmp::AsnOctetString* pOctetsSrc)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpUtilOctetsCpy(pOctetsDst, pOctetsSrc);
        return win32_impl_result;
    }
    inline void SnmpUtilOctetsFree(Windows::Win32::Snmp::AsnOctetString* pOctets)
    {
        WIN32_IMPL_SnmpUtilOctetsFree(pOctets);
    }
    inline int32_t SnmpUtilAsnAnyCpy(Windows::Win32::Snmp::AsnAny* pAnyDst, Windows::Win32::Snmp::AsnAny* pAnySrc)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpUtilAsnAnyCpy(pAnyDst, pAnySrc);
        return win32_impl_result;
    }
    inline void SnmpUtilAsnAnyFree(Windows::Win32::Snmp::AsnAny* pAny)
    {
        WIN32_IMPL_SnmpUtilAsnAnyFree(pAny);
    }
    inline int32_t SnmpUtilVarBindCpy(Windows::Win32::Snmp::SnmpVarBind* pVbDst, Windows::Win32::Snmp::SnmpVarBind* pVbSrc)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpUtilVarBindCpy(pVbDst, pVbSrc);
        return win32_impl_result;
    }
    inline void SnmpUtilVarBindFree(Windows::Win32::Snmp::SnmpVarBind* pVb)
    {
        WIN32_IMPL_SnmpUtilVarBindFree(pVb);
    }
    inline int32_t SnmpUtilVarBindListCpy(Windows::Win32::Snmp::SnmpVarBindList* pVblDst, Windows::Win32::Snmp::SnmpVarBindList* pVblSrc)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpUtilVarBindListCpy(pVblDst, pVblSrc);
        return win32_impl_result;
    }
    inline void SnmpUtilVarBindListFree(Windows::Win32::Snmp::SnmpVarBindList* pVbl)
    {
        WIN32_IMPL_SnmpUtilVarBindListFree(pVbl);
    }
    inline void SnmpUtilMemFree(void* pMem)
    {
        WIN32_IMPL_SnmpUtilMemFree(pMem);
    }
    inline void* SnmpUtilMemAlloc(uint32_t nBytes)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpUtilMemAlloc(nBytes);
        return win32_impl_result;
    }
    inline void* SnmpUtilMemReAlloc(void* pMem, uint32_t nBytes)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpUtilMemReAlloc(pMem, nBytes);
        return win32_impl_result;
    }
    inline int8_t* SnmpUtilOidToA(Windows::Win32::Snmp::AsnObjectIdentifier* Oid)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpUtilOidToA(Oid);
        return win32_impl_result;
    }
    inline int8_t* SnmpUtilIdsToA(uint32_t* Ids, uint32_t IdLength)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpUtilIdsToA(Ids, IdLength);
        return win32_impl_result;
    }
    inline void SnmpUtilPrintOid(Windows::Win32::Snmp::AsnObjectIdentifier* Oid)
    {
        WIN32_IMPL_SnmpUtilPrintOid(Oid);
    }
    inline void SnmpUtilPrintAsnAny(Windows::Win32::Snmp::AsnAny* pAny)
    {
        WIN32_IMPL_SnmpUtilPrintAsnAny(pAny);
    }
    inline uint32_t SnmpSvcGetUptime()
    {
        auto win32_impl_result = WIN32_IMPL_SnmpSvcGetUptime();
        return win32_impl_result;
    }
    inline void SnmpSvcSetLogLevel(int32_t nLogLevel)
    {
        WIN32_IMPL_SnmpSvcSetLogLevel(nLogLevel);
    }
    inline void SnmpSvcSetLogType(int32_t nLogType)
    {
        WIN32_IMPL_SnmpSvcSetLogType(nLogType);
    }
    inline void SnmpUtilDbgPrint(int32_t nLogLevel, int8_t* szFormat)
    {
        WIN32_IMPL_SnmpUtilDbgPrint(nLogLevel, szFormat);
    }
    inline void* SnmpMgrOpen(int8_t* lpAgentAddress, int8_t* lpAgentCommunity, int32_t nTimeOut, int32_t nRetries)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpMgrOpen(lpAgentAddress, lpAgentCommunity, nTimeOut, nRetries);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SnmpMgrCtl(void* session, uint32_t dwCtlCode, void* lpvInBuffer, uint32_t cbInBuffer, void* lpvOUTBuffer, uint32_t cbOUTBuffer, uint32_t* lpcbBytesReturned)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpMgrCtl(session, dwCtlCode, lpvInBuffer, cbInBuffer, lpvOUTBuffer, cbOUTBuffer, lpcbBytesReturned);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SnmpMgrClose(void* session)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpMgrClose(session);
        return win32_impl_result;
    }
    inline int32_t SnmpMgrRequest(void* session, uint8_t requestType, Windows::Win32::Snmp::SnmpVarBindList* variableBindings, int32_t* errorStatus, int32_t* errorIndex)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpMgrRequest(session, requestType, variableBindings, errorStatus, errorIndex);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SnmpMgrStrToOid(int8_t* string, Windows::Win32::Snmp::AsnObjectIdentifier* oid)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpMgrStrToOid(string, oid);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SnmpMgrOidToStr(Windows::Win32::Snmp::AsnObjectIdentifier* oid, int8_t** string)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpMgrOidToStr(oid, string);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SnmpMgrTrapListen(Windows::Win32::SystemServices::HANDLE* phTrapAvailable)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpMgrTrapListen(phTrapAvailable);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SnmpMgrGetTrap(Windows::Win32::Snmp::AsnObjectIdentifier* enterprise, Windows::Win32::Snmp::AsnOctetString* IPAddress, int32_t* genericTrap, int32_t* specificTrap, uint32_t* timeStamp, Windows::Win32::Snmp::SnmpVarBindList* variableBindings)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpMgrGetTrap(enterprise, IPAddress, genericTrap, specificTrap, timeStamp, variableBindings);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SnmpMgrGetTrapEx(Windows::Win32::Snmp::AsnObjectIdentifier* enterprise, Windows::Win32::Snmp::AsnOctetString* agentAddress, Windows::Win32::Snmp::AsnOctetString* sourceAddress, int32_t* genericTrap, int32_t* specificTrap, Windows::Win32::Snmp::AsnOctetString* community, uint32_t* timeStamp, Windows::Win32::Snmp::SnmpVarBindList* variableBindings)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpMgrGetTrapEx(enterprise, agentAddress, sourceAddress, genericTrap, specificTrap, community, timeStamp, variableBindings);
        return win32_impl_result;
    }
    inline uint32_t SnmpGetTranslateMode(uint32_t* nTranslateMode)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpGetTranslateMode(nTranslateMode);
        return win32_impl_result;
    }
    inline uint32_t SnmpSetTranslateMode(uint32_t nTranslateMode)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpSetTranslateMode(nTranslateMode);
        return win32_impl_result;
    }
    inline uint32_t SnmpGetRetransmitMode(uint32_t* nRetransmitMode)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpGetRetransmitMode(nRetransmitMode);
        return win32_impl_result;
    }
    inline uint32_t SnmpSetRetransmitMode(uint32_t nRetransmitMode)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpSetRetransmitMode(nRetransmitMode);
        return win32_impl_result;
    }
    inline uint32_t SnmpGetTimeout(intptr_t hEntity, uint32_t* nPolicyTimeout, uint32_t* nActualTimeout)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpGetTimeout(hEntity, nPolicyTimeout, nActualTimeout);
        return win32_impl_result;
    }
    inline uint32_t SnmpSetTimeout(intptr_t hEntity, uint32_t nPolicyTimeout)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpSetTimeout(hEntity, nPolicyTimeout);
        return win32_impl_result;
    }
    inline uint32_t SnmpGetRetry(intptr_t hEntity, uint32_t* nPolicyRetry, uint32_t* nActualRetry)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpGetRetry(hEntity, nPolicyRetry, nActualRetry);
        return win32_impl_result;
    }
    inline uint32_t SnmpSetRetry(intptr_t hEntity, uint32_t nPolicyRetry)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpSetRetry(hEntity, nPolicyRetry);
        return win32_impl_result;
    }
    inline uint32_t SnmpGetVendorInfo(Windows::Win32::Snmp::smiVENDORINFO* vendorInfo)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpGetVendorInfo(vendorInfo);
        return win32_impl_result;
    }
    inline uint32_t SnmpStartup(uint32_t* nMajorVersion, uint32_t* nMinorVersion, uint32_t* nLevel, uint32_t* nTranslateMode, uint32_t* nRetransmitMode)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpStartup(nMajorVersion, nMinorVersion, nLevel, nTranslateMode, nRetransmitMode);
        return win32_impl_result;
    }
    inline uint32_t SnmpCleanup()
    {
        auto win32_impl_result = WIN32_IMPL_SnmpCleanup();
        return win32_impl_result;
    }
    inline intptr_t SnmpOpen(Windows::Win32::WindowsAndMessaging::HWND hWnd, uint32_t wMsg)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpOpen(hWnd, wMsg);
        return win32_impl_result;
    }
    inline uint32_t SnmpClose(intptr_t session)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpClose(session);
        return win32_impl_result;
    }
    inline uint32_t SnmpSendMsg(intptr_t session, intptr_t srcEntity, intptr_t dstEntity, intptr_t context, intptr_t PDU)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpSendMsg(session, srcEntity, dstEntity, context, PDU);
        return win32_impl_result;
    }
    inline uint32_t SnmpRecvMsg(intptr_t session, intptr_t* srcEntity, intptr_t* dstEntity, intptr_t* context, intptr_t* PDU)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpRecvMsg(session, srcEntity, dstEntity, context, PDU);
        return win32_impl_result;
    }
    inline uint32_t SnmpRegister(intptr_t session, intptr_t srcEntity, intptr_t dstEntity, intptr_t context, Windows::Win32::Snmp::smiOID* notification, uint32_t state)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpRegister(session, srcEntity, dstEntity, context, notification, state);
        return win32_impl_result;
    }
    inline intptr_t SnmpCreateSession(Windows::Win32::WindowsAndMessaging::HWND hWnd, uint32_t wMsg, Windows::Win32::Snmp::SNMPAPI_CALLBACK* fCallBack, void* lpClientData)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpCreateSession(hWnd, wMsg, fCallBack, lpClientData);
        return win32_impl_result;
    }
    inline uint32_t SnmpListen(intptr_t hEntity, uint32_t lStatus)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpListen(hEntity, lStatus);
        return win32_impl_result;
    }
    inline uint32_t SnmpListenEx(intptr_t hEntity, uint32_t lStatus, uint32_t nUseEntityAddr)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpListenEx(hEntity, lStatus, nUseEntityAddr);
        return win32_impl_result;
    }
    inline uint32_t SnmpCancelMsg(intptr_t session, int32_t reqId)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpCancelMsg(session, reqId);
        return win32_impl_result;
    }
    inline uint32_t SnmpStartupEx(uint32_t* nMajorVersion, uint32_t* nMinorVersion, uint32_t* nLevel, uint32_t* nTranslateMode, uint32_t* nRetransmitMode)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpStartupEx(nMajorVersion, nMinorVersion, nLevel, nTranslateMode, nRetransmitMode);
        return win32_impl_result;
    }
    inline uint32_t SnmpCleanupEx()
    {
        auto win32_impl_result = WIN32_IMPL_SnmpCleanupEx();
        return win32_impl_result;
    }
    inline intptr_t SnmpStrToEntity(intptr_t session, int8_t* string)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpStrToEntity(session, string);
        return win32_impl_result;
    }
    inline uint32_t SnmpEntityToStr(intptr_t entity, uint32_t size, int8_t* string)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpEntityToStr(entity, size, string);
        return win32_impl_result;
    }
    inline uint32_t SnmpFreeEntity(intptr_t entity)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpFreeEntity(entity);
        return win32_impl_result;
    }
    inline intptr_t SnmpStrToContext(intptr_t session, Windows::Win32::Snmp::smiOCTETS* string)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpStrToContext(session, string);
        return win32_impl_result;
    }
    inline uint32_t SnmpContextToStr(intptr_t context, Windows::Win32::Snmp::smiOCTETS* string)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpContextToStr(context, string);
        return win32_impl_result;
    }
    inline uint32_t SnmpFreeContext(intptr_t context)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpFreeContext(context);
        return win32_impl_result;
    }
    inline uint32_t SnmpSetPort(intptr_t hEntity, uint32_t nPort)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpSetPort(hEntity, nPort);
        return win32_impl_result;
    }
    inline intptr_t SnmpCreatePdu(intptr_t session, int32_t PDU_type, int32_t request_id, int32_t error_status, int32_t error_index, intptr_t varbindlist)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpCreatePdu(session, PDU_type, request_id, error_status, error_index, varbindlist);
        return win32_impl_result;
    }
    inline uint32_t SnmpGetPduData(intptr_t PDU, int32_t* PDU_type, int32_t* request_id, int32_t* error_status, int32_t* error_index, intptr_t* varbindlist)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpGetPduData(PDU, PDU_type, request_id, error_status, error_index, varbindlist);
        return win32_impl_result;
    }
    inline uint32_t SnmpSetPduData(intptr_t PDU, int32_t* PDU_type, int32_t* request_id, int32_t* non_repeaters, int32_t* max_repetitions, intptr_t* varbindlist)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpSetPduData(PDU, PDU_type, request_id, non_repeaters, max_repetitions, varbindlist);
        return win32_impl_result;
    }
    inline intptr_t SnmpDuplicatePdu(intptr_t session, intptr_t PDU)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpDuplicatePdu(session, PDU);
        return win32_impl_result;
    }
    inline uint32_t SnmpFreePdu(intptr_t PDU)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpFreePdu(PDU);
        return win32_impl_result;
    }
    inline intptr_t SnmpCreateVbl(intptr_t session, Windows::Win32::Snmp::smiOID* name, Windows::Win32::Snmp::smiVALUE* value)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpCreateVbl(session, name, value);
        return win32_impl_result;
    }
    inline intptr_t SnmpDuplicateVbl(intptr_t session, intptr_t vbl)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpDuplicateVbl(session, vbl);
        return win32_impl_result;
    }
    inline uint32_t SnmpFreeVbl(intptr_t vbl)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpFreeVbl(vbl);
        return win32_impl_result;
    }
    inline uint32_t SnmpCountVbl(intptr_t vbl)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpCountVbl(vbl);
        return win32_impl_result;
    }
    inline uint32_t SnmpGetVb(intptr_t vbl, uint32_t index, Windows::Win32::Snmp::smiOID* name, Windows::Win32::Snmp::smiVALUE* value)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpGetVb(vbl, index, name, value);
        return win32_impl_result;
    }
    inline uint32_t SnmpSetVb(intptr_t vbl, uint32_t index, Windows::Win32::Snmp::smiOID* name, Windows::Win32::Snmp::smiVALUE* value)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpSetVb(vbl, index, name, value);
        return win32_impl_result;
    }
    inline uint32_t SnmpDeleteVb(intptr_t vbl, uint32_t index)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpDeleteVb(vbl, index);
        return win32_impl_result;
    }
    inline uint32_t SnmpGetLastError(intptr_t session)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpGetLastError(session);
        return win32_impl_result;
    }
    inline uint32_t SnmpStrToOid(int8_t* string, Windows::Win32::Snmp::smiOID* dstOID)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpStrToOid(string, dstOID);
        return win32_impl_result;
    }
    inline uint32_t SnmpOidToStr(Windows::Win32::Snmp::smiOID* srcOID, uint32_t size, int8_t* string)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpOidToStr(srcOID, size, string);
        return win32_impl_result;
    }
    inline uint32_t SnmpOidCopy(Windows::Win32::Snmp::smiOID* srcOID, Windows::Win32::Snmp::smiOID* dstOID)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpOidCopy(srcOID, dstOID);
        return win32_impl_result;
    }
    inline uint32_t SnmpOidCompare(Windows::Win32::Snmp::smiOID* xOID, Windows::Win32::Snmp::smiOID* yOID, uint32_t maxlen, int32_t* result)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpOidCompare(xOID, yOID, maxlen, result);
        return win32_impl_result;
    }
    inline uint32_t SnmpEncodeMsg(intptr_t session, intptr_t srcEntity, intptr_t dstEntity, intptr_t context, intptr_t pdu, Windows::Win32::Snmp::smiOCTETS* msgBufDesc)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpEncodeMsg(session, srcEntity, dstEntity, context, pdu, msgBufDesc);
        return win32_impl_result;
    }
    inline uint32_t SnmpDecodeMsg(intptr_t session, intptr_t* srcEntity, intptr_t* dstEntity, intptr_t* context, intptr_t* pdu, Windows::Win32::Snmp::smiOCTETS* msgBufDesc)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpDecodeMsg(session, srcEntity, dstEntity, context, pdu, msgBufDesc);
        return win32_impl_result;
    }
    inline uint32_t SnmpFreeDescriptor(uint32_t syntax, Windows::Win32::Snmp::smiOCTETS* descriptor)
    {
        auto win32_impl_result = WIN32_IMPL_SnmpFreeDescriptor(syntax, descriptor);
        return win32_impl_result;
    }

#pragma endregion methods

}
#endif
