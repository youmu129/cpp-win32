// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_TitleCallableUI_H
#define WIN32_Windows_Win32_TitleCallableUI_H
#include "win32/base.h"
static_assert(win32::check_version(CPPWIN32_VERSION, "0.0.0.1"), "Mismatched C++/Win32 headers.");
#define CPPWIN32_VERSION "0.0.0.1"
#include "win32/impl/Windows.Win32.TitleCallableUI.2.h"
WIN32_EXPORT namespace win32::Windows::Win32::TitleCallableUI
{
#pragma region methods
    inline int32_t ShowGameInviteUI(intptr_t serviceConfigurationId, intptr_t sessionTemplateName, intptr_t sessionId, intptr_t invitationDisplayText, Windows::Win32::TitleCallableUI::GameUICompletionRoutine* completionRoutine, void* context)
    {
        auto win32_impl_result = WIN32_IMPL_ShowGameInviteUI(serviceConfigurationId, sessionTemplateName, sessionId, invitationDisplayText, completionRoutine, context);
        return win32_impl_result;
    }
    inline int32_t ShowPlayerPickerUI(intptr_t promptDisplayText, intptr_t* xuids, size_t xuidsCount, intptr_t* preSelectedXuids, size_t preSelectedXuidsCount, size_t minSelectionCount, size_t maxSelectionCount, Windows::Win32::TitleCallableUI::PlayerPickerUICompletionRoutine* completionRoutine, void* context)
    {
        auto win32_impl_result = WIN32_IMPL_ShowPlayerPickerUI(promptDisplayText, xuids, xuidsCount, preSelectedXuids, preSelectedXuidsCount, minSelectionCount, maxSelectionCount, completionRoutine, context);
        return win32_impl_result;
    }
    inline int32_t ShowProfileCardUI(intptr_t targetUserXuid, Windows::Win32::TitleCallableUI::GameUICompletionRoutine* completionRoutine, void* context)
    {
        auto win32_impl_result = WIN32_IMPL_ShowProfileCardUI(targetUserXuid, completionRoutine, context);
        return win32_impl_result;
    }
    inline int32_t ShowChangeFriendRelationshipUI(intptr_t targetUserXuid, Windows::Win32::TitleCallableUI::GameUICompletionRoutine* completionRoutine, void* context)
    {
        auto win32_impl_result = WIN32_IMPL_ShowChangeFriendRelationshipUI(targetUserXuid, completionRoutine, context);
        return win32_impl_result;
    }
    inline int32_t ShowTitleAchievementsUI(uint32_t titleId, Windows::Win32::TitleCallableUI::GameUICompletionRoutine* completionRoutine, void* context)
    {
        auto win32_impl_result = WIN32_IMPL_ShowTitleAchievementsUI(titleId, completionRoutine, context);
        return win32_impl_result;
    }
    inline int32_t ProcessPendingGameUI(Windows::Win32::SystemServices::BOOL waitForCompletion)
    {
        auto win32_impl_result = WIN32_IMPL_ProcessPendingGameUI(waitForCompletion);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL TryCancelPendingGameUI()
    {
        auto win32_impl_result = WIN32_IMPL_TryCancelPendingGameUI();
        return win32_impl_result;
    }
    inline int32_t CheckGamingPrivilegeWithUI(uint32_t privilegeId, intptr_t scope, intptr_t policy, intptr_t friendlyMessage, Windows::Win32::TitleCallableUI::GameUICompletionRoutine* completionRoutine, void* context)
    {
        auto win32_impl_result = WIN32_IMPL_CheckGamingPrivilegeWithUI(privilegeId, scope, policy, friendlyMessage, completionRoutine, context);
        return win32_impl_result;
    }
    inline int32_t CheckGamingPrivilegeSilently(uint32_t privilegeId, intptr_t scope, intptr_t policy, int32_t* hasPrivilege)
    {
        auto win32_impl_result = WIN32_IMPL_CheckGamingPrivilegeSilently(privilegeId, scope, policy, hasPrivilege);
        return win32_impl_result;
    }
    inline int32_t ShowGameInviteUIForUser(Windows::Win32::WinRT::IInspectable* user, intptr_t serviceConfigurationId, intptr_t sessionTemplateName, intptr_t sessionId, intptr_t invitationDisplayText, Windows::Win32::TitleCallableUI::GameUICompletionRoutine* completionRoutine, void* context)
    {
        auto win32_impl_result = WIN32_IMPL_ShowGameInviteUIForUser(user, serviceConfigurationId, sessionTemplateName, sessionId, invitationDisplayText, completionRoutine, context);
        return win32_impl_result;
    }
    inline int32_t ShowPlayerPickerUIForUser(Windows::Win32::WinRT::IInspectable* user, intptr_t promptDisplayText, intptr_t* xuids, size_t xuidsCount, intptr_t* preSelectedXuids, size_t preSelectedXuidsCount, size_t minSelectionCount, size_t maxSelectionCount, Windows::Win32::TitleCallableUI::PlayerPickerUICompletionRoutine* completionRoutine, void* context)
    {
        auto win32_impl_result = WIN32_IMPL_ShowPlayerPickerUIForUser(user, promptDisplayText, xuids, xuidsCount, preSelectedXuids, preSelectedXuidsCount, minSelectionCount, maxSelectionCount, completionRoutine, context);
        return win32_impl_result;
    }
    inline int32_t ShowProfileCardUIForUser(Windows::Win32::WinRT::IInspectable* user, intptr_t targetUserXuid, Windows::Win32::TitleCallableUI::GameUICompletionRoutine* completionRoutine, void* context)
    {
        auto win32_impl_result = WIN32_IMPL_ShowProfileCardUIForUser(user, targetUserXuid, completionRoutine, context);
        return win32_impl_result;
    }
    inline int32_t ShowChangeFriendRelationshipUIForUser(Windows::Win32::WinRT::IInspectable* user, intptr_t targetUserXuid, Windows::Win32::TitleCallableUI::GameUICompletionRoutine* completionRoutine, void* context)
    {
        auto win32_impl_result = WIN32_IMPL_ShowChangeFriendRelationshipUIForUser(user, targetUserXuid, completionRoutine, context);
        return win32_impl_result;
    }
    inline int32_t ShowTitleAchievementsUIForUser(Windows::Win32::WinRT::IInspectable* user, uint32_t titleId, Windows::Win32::TitleCallableUI::GameUICompletionRoutine* completionRoutine, void* context)
    {
        auto win32_impl_result = WIN32_IMPL_ShowTitleAchievementsUIForUser(user, titleId, completionRoutine, context);
        return win32_impl_result;
    }
    inline int32_t CheckGamingPrivilegeWithUIForUser(Windows::Win32::WinRT::IInspectable* user, uint32_t privilegeId, intptr_t scope, intptr_t policy, intptr_t friendlyMessage, Windows::Win32::TitleCallableUI::GameUICompletionRoutine* completionRoutine, void* context)
    {
        auto win32_impl_result = WIN32_IMPL_CheckGamingPrivilegeWithUIForUser(user, privilegeId, scope, policy, friendlyMessage, completionRoutine, context);
        return win32_impl_result;
    }
    inline int32_t CheckGamingPrivilegeSilentlyForUser(Windows::Win32::WinRT::IInspectable* user, uint32_t privilegeId, intptr_t scope, intptr_t policy, int32_t* hasPrivilege)
    {
        auto win32_impl_result = WIN32_IMPL_CheckGamingPrivilegeSilentlyForUser(user, privilegeId, scope, policy, hasPrivilege);
        return win32_impl_result;
    }
    inline int32_t ShowGameInviteUIWithContext(intptr_t serviceConfigurationId, intptr_t sessionTemplateName, intptr_t sessionId, intptr_t invitationDisplayText, intptr_t customActivationContext, Windows::Win32::TitleCallableUI::GameUICompletionRoutine* completionRoutine, void* context)
    {
        auto win32_impl_result = WIN32_IMPL_ShowGameInviteUIWithContext(serviceConfigurationId, sessionTemplateName, sessionId, invitationDisplayText, customActivationContext, completionRoutine, context);
        return win32_impl_result;
    }
    inline int32_t ShowGameInviteUIWithContextForUser(Windows::Win32::WinRT::IInspectable* user, intptr_t serviceConfigurationId, intptr_t sessionTemplateName, intptr_t sessionId, intptr_t invitationDisplayText, intptr_t customActivationContext, Windows::Win32::TitleCallableUI::GameUICompletionRoutine* completionRoutine, void* context)
    {
        auto win32_impl_result = WIN32_IMPL_ShowGameInviteUIWithContextForUser(user, serviceConfigurationId, sessionTemplateName, sessionId, invitationDisplayText, customActivationContext, completionRoutine, context);
        return win32_impl_result;
    }
    inline int32_t ShowGameInfoUI(uint32_t titleId, Windows::Win32::TitleCallableUI::GameUICompletionRoutine* completionRoutine, void* context)
    {
        auto win32_impl_result = WIN32_IMPL_ShowGameInfoUI(titleId, completionRoutine, context);
        return win32_impl_result;
    }
    inline int32_t ShowGameInfoUIForUser(Windows::Win32::WinRT::IInspectable* user, uint32_t titleId, Windows::Win32::TitleCallableUI::GameUICompletionRoutine* completionRoutine, void* context)
    {
        auto win32_impl_result = WIN32_IMPL_ShowGameInfoUIForUser(user, titleId, completionRoutine, context);
        return win32_impl_result;
    }
    inline int32_t ShowFindFriendsUI(Windows::Win32::TitleCallableUI::GameUICompletionRoutine* completionRoutine, void* context)
    {
        auto win32_impl_result = WIN32_IMPL_ShowFindFriendsUI(completionRoutine, context);
        return win32_impl_result;
    }
    inline int32_t ShowFindFriendsUIForUser(Windows::Win32::WinRT::IInspectable* user, Windows::Win32::TitleCallableUI::GameUICompletionRoutine* completionRoutine, void* context)
    {
        auto win32_impl_result = WIN32_IMPL_ShowFindFriendsUIForUser(user, completionRoutine, context);
        return win32_impl_result;
    }
    inline int32_t ShowCustomizeUserProfileUI(Windows::Win32::TitleCallableUI::GameUICompletionRoutine* completionRoutine, void* context)
    {
        auto win32_impl_result = WIN32_IMPL_ShowCustomizeUserProfileUI(completionRoutine, context);
        return win32_impl_result;
    }
    inline int32_t ShowCustomizeUserProfileUIForUser(Windows::Win32::WinRT::IInspectable* user, Windows::Win32::TitleCallableUI::GameUICompletionRoutine* completionRoutine, void* context)
    {
        auto win32_impl_result = WIN32_IMPL_ShowCustomizeUserProfileUIForUser(user, completionRoutine, context);
        return win32_impl_result;
    }
    inline int32_t ShowUserSettingsUI(Windows::Win32::TitleCallableUI::GameUICompletionRoutine* completionRoutine, void* context)
    {
        auto win32_impl_result = WIN32_IMPL_ShowUserSettingsUI(completionRoutine, context);
        return win32_impl_result;
    }
    inline int32_t ShowUserSettingsUIForUser(Windows::Win32::WinRT::IInspectable* user, Windows::Win32::TitleCallableUI::GameUICompletionRoutine* completionRoutine, void* context)
    {
        auto win32_impl_result = WIN32_IMPL_ShowUserSettingsUIForUser(user, completionRoutine, context);
        return win32_impl_result;
    }

#pragma endregion methods

}
#endif
