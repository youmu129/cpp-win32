// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_TouchInput_H
#define WIN32_Windows_Win32_TouchInput_H
#include "win32/base.h"
static_assert(win32::check_version(CPPWIN32_VERSION, "0.0.0.1"), "Mismatched C++/Win32 headers.");
#define CPPWIN32_VERSION "0.0.0.1"
#include "win32/impl/Windows.Win32.TouchInput.2.h"
WIN32_EXPORT namespace win32::Windows::Win32::TouchInput
{
#pragma region methods
    inline Windows::Win32::SystemServices::BOOL GetTouchInputInfo(intptr_t hTouchInput, uint32_t cInputs, Windows::Win32::TouchInput::TOUCHINPUT* pInputs, int32_t cbSize)
    {
        auto win32_impl_result = WIN32_IMPL_GetTouchInputInfo(hTouchInput, cInputs, pInputs, cbSize);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CloseTouchInputHandle(intptr_t hTouchInput)
    {
        auto win32_impl_result = WIN32_IMPL_CloseTouchInputHandle(hTouchInput);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL RegisterTouchWindow(Windows::Win32::WindowsAndMessaging::HWND hwnd, uint32_t ulFlags)
    {
        auto win32_impl_result = WIN32_IMPL_RegisterTouchWindow(hwnd, ulFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL UnregisterTouchWindow(Windows::Win32::WindowsAndMessaging::HWND hwnd)
    {
        auto win32_impl_result = WIN32_IMPL_UnregisterTouchWindow(hwnd);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL IsTouchWindow(Windows::Win32::WindowsAndMessaging::HWND hwnd, uint32_t* pulFlags)
    {
        auto win32_impl_result = WIN32_IMPL_IsTouchWindow(hwnd, pulFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetGestureInfo(intptr_t hGestureInfo, Windows::Win32::TouchInput::GESTUREINFO* pGestureInfo)
    {
        auto win32_impl_result = WIN32_IMPL_GetGestureInfo(hGestureInfo, pGestureInfo);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetGestureExtraArgs(intptr_t hGestureInfo, uint32_t cbExtraArgs, uint8_t* pExtraArgs)
    {
        auto win32_impl_result = WIN32_IMPL_GetGestureExtraArgs(hGestureInfo, cbExtraArgs, pExtraArgs);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL CloseGestureInfoHandle(intptr_t hGestureInfo)
    {
        auto win32_impl_result = WIN32_IMPL_CloseGestureInfoHandle(hGestureInfo);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL SetGestureConfig(Windows::Win32::WindowsAndMessaging::HWND hwnd, uint32_t dwReserved, uint32_t cIDs, Windows::Win32::TouchInput::GESTURECONFIG* pGestureConfig, uint32_t cbSize)
    {
        auto win32_impl_result = WIN32_IMPL_SetGestureConfig(hwnd, dwReserved, cIDs, pGestureConfig, cbSize);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL GetGestureConfig(Windows::Win32::WindowsAndMessaging::HWND hwnd, uint32_t dwReserved, uint32_t dwFlags, uint32_t* pcIDs, Windows::Win32::TouchInput::GESTURECONFIG* pGestureConfig, uint32_t cbSize)
    {
        auto win32_impl_result = WIN32_IMPL_GetGestureConfig(hwnd, dwReserved, dwFlags, pcIDs, pGestureConfig, cbSize);
        return win32_impl_result;
    }

    inline constexpr float POSITIVE_INFINITY = 0xinf;
    inline constexpr float NEGATIVE_INFINITY = -0xinf;
    inline constexpr float NaN = -0xnan(ind);
#pragma endregion methods

}
#endif
