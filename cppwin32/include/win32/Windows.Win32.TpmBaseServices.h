// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_TpmBaseServices_H
#define WIN32_Windows_Win32_TpmBaseServices_H
#include "win32/base.h"
static_assert(win32::check_version(CPPWIN32_VERSION, "0.0.0.1"), "Mismatched C++/Win32 headers.");
#define CPPWIN32_VERSION "0.0.0.1"
#include "win32/impl/Windows.Win32.TpmBaseServices.2.h"
WIN32_EXPORT namespace win32::Windows::Win32::TpmBaseServices
{
#pragma region methods
    inline uint32_t Tbsi_Context_Create(Windows::Win32::TpmBaseServices::TBS_CONTEXT_PARAMS* pContextParams, void** phContext)
    {
        auto win32_impl_result = WIN32_IMPL_Tbsi_Context_Create(pContextParams, phContext);
        return win32_impl_result;
    }
    inline uint32_t Tbsip_Context_Close(void* hContext)
    {
        auto win32_impl_result = WIN32_IMPL_Tbsip_Context_Close(hContext);
        return win32_impl_result;
    }
    inline uint32_t Tbsip_Submit_Command(void* hContext, uint32_t Locality, uint32_t Priority, uint8_t* pabCommand, uint32_t cbCommand, uint8_t* pabResult, uint32_t* pcbResult)
    {
        auto win32_impl_result = WIN32_IMPL_Tbsip_Submit_Command(hContext, Locality, Priority, pabCommand, cbCommand, pabResult, pcbResult);
        return win32_impl_result;
    }
    inline uint32_t Tbsip_Cancel_Commands(void* hContext)
    {
        auto win32_impl_result = WIN32_IMPL_Tbsip_Cancel_Commands(hContext);
        return win32_impl_result;
    }
    inline uint32_t Tbsi_Physical_Presence_Command(void* hContext, uint8_t* pabInput, uint32_t cbInput, uint8_t* pabOutput, uint32_t* pcbOutput)
    {
        auto win32_impl_result = WIN32_IMPL_Tbsi_Physical_Presence_Command(hContext, pabInput, cbInput, pabOutput, pcbOutput);
        return win32_impl_result;
    }
    inline uint32_t Tbsi_Get_TCG_Log(void* hContext, uint8_t* pOutputBuf, uint32_t* pOutputBufLen)
    {
        auto win32_impl_result = WIN32_IMPL_Tbsi_Get_TCG_Log(hContext, pOutputBuf, pOutputBufLen);
        return win32_impl_result;
    }
    inline uint32_t Tbsi_GetDeviceInfo(uint32_t Size, void* Info)
    {
        auto win32_impl_result = WIN32_IMPL_Tbsi_GetDeviceInfo(Size, Info);
        return win32_impl_result;
    }
    inline uint32_t Tbsi_Get_OwnerAuth(void* hContext, uint32_t ownerauthType, uint8_t* pOutputBuf, uint32_t* pOutputBufLen)
    {
        auto win32_impl_result = WIN32_IMPL_Tbsi_Get_OwnerAuth(hContext, ownerauthType, pOutputBuf, pOutputBufLen);
        return win32_impl_result;
    }
    inline uint32_t Tbsi_Revoke_Attestation()
    {
        auto win32_impl_result = WIN32_IMPL_Tbsi_Revoke_Attestation();
        return win32_impl_result;
    }
    inline int32_t GetDeviceID(uint8_t* pbWindowsAIK, uint32_t cbWindowsAIK, uint32_t* pcbResult, int32_t* pfProtectedByTPM)
    {
        auto win32_impl_result = WIN32_IMPL_GetDeviceID(pbWindowsAIK, cbWindowsAIK, pcbResult, pfProtectedByTPM);
        return win32_impl_result;
    }
    inline int32_t GetDeviceIDString(uint16_t* pszWindowsAIK, uint32_t cchWindowsAIK, uint32_t* pcchResult, int32_t* pfProtectedByTPM)
    {
        auto win32_impl_result = WIN32_IMPL_GetDeviceIDString(pszWindowsAIK, cchWindowsAIK, pcchResult, pfProtectedByTPM);
        return win32_impl_result;
    }
    inline uint32_t Tbsi_Create_Windows_Key(uint32_t keyHandle)
    {
        auto win32_impl_result = WIN32_IMPL_Tbsi_Create_Windows_Key(keyHandle);
        return win32_impl_result;
    }
    inline uint32_t Tbsi_Get_TCG_Log_Ex(uint32_t logType, uint8_t* pbOutput, uint32_t* pcbOutput)
    {
        auto win32_impl_result = WIN32_IMPL_Tbsi_Get_TCG_Log_Ex(logType, pbOutput, pcbOutput);
        return win32_impl_result;
    }

#pragma endregion methods

}
#endif
