// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_UsbDrivers_H
#define WIN32_Windows_Win32_UsbDrivers_H
#include "win32/base.h"
static_assert(win32::check_version(CPPWIN32_VERSION, "0.0.0.1"), "Mismatched C++/Win32 headers.");
#define CPPWIN32_VERSION "0.0.0.1"
#include "win32/impl/Windows.Win32.UsbDrivers.2.h"
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
#pragma region methods
    inline Windows::Win32::SystemServices::BOOL WinUsb_Initialize(Windows::Win32::SystemServices::HANDLE DeviceHandle, void** InterfaceHandle)
    {
        auto win32_impl_result = WIN32_IMPL_WinUsb_Initialize(DeviceHandle, InterfaceHandle);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WinUsb_Free(void* InterfaceHandle)
    {
        auto win32_impl_result = WIN32_IMPL_WinUsb_Free(InterfaceHandle);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WinUsb_GetAssociatedInterface(void* InterfaceHandle, uint8_t AssociatedInterfaceIndex, void** AssociatedInterfaceHandle)
    {
        auto win32_impl_result = WIN32_IMPL_WinUsb_GetAssociatedInterface(InterfaceHandle, AssociatedInterfaceIndex, AssociatedInterfaceHandle);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WinUsb_GetDescriptor(void* InterfaceHandle, uint8_t DescriptorType, uint8_t Index, uint16_t LanguageID, uint8_t* Buffer, uint32_t BufferLength, uint32_t* LengthTransferred)
    {
        auto win32_impl_result = WIN32_IMPL_WinUsb_GetDescriptor(InterfaceHandle, DescriptorType, Index, LanguageID, Buffer, BufferLength, LengthTransferred);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WinUsb_QueryInterfaceSettings(void* InterfaceHandle, uint8_t AlternateInterfaceNumber, Windows::Win32::UsbDrivers::USB_INTERFACE_DESCRIPTOR* UsbAltInterfaceDescriptor)
    {
        auto win32_impl_result = WIN32_IMPL_WinUsb_QueryInterfaceSettings(InterfaceHandle, AlternateInterfaceNumber, UsbAltInterfaceDescriptor);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WinUsb_QueryDeviceInformation(void* InterfaceHandle, uint32_t InformationType, uint32_t* BufferLength, void* Buffer)
    {
        auto win32_impl_result = WIN32_IMPL_WinUsb_QueryDeviceInformation(InterfaceHandle, InformationType, BufferLength, Buffer);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WinUsb_SetCurrentAlternateSetting(void* InterfaceHandle, uint8_t SettingNumber)
    {
        auto win32_impl_result = WIN32_IMPL_WinUsb_SetCurrentAlternateSetting(InterfaceHandle, SettingNumber);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WinUsb_GetCurrentAlternateSetting(void* InterfaceHandle, uint8_t* SettingNumber)
    {
        auto win32_impl_result = WIN32_IMPL_WinUsb_GetCurrentAlternateSetting(InterfaceHandle, SettingNumber);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WinUsb_QueryPipe(void* InterfaceHandle, uint8_t AlternateInterfaceNumber, uint8_t PipeIndex, Windows::Win32::UsbDrivers::WINUSB_PIPE_INFORMATION* PipeInformation)
    {
        auto win32_impl_result = WIN32_IMPL_WinUsb_QueryPipe(InterfaceHandle, AlternateInterfaceNumber, PipeIndex, PipeInformation);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WinUsb_QueryPipeEx(void* InterfaceHandle, uint8_t AlternateSettingNumber, uint8_t PipeIndex, Windows::Win32::UsbDrivers::WINUSB_PIPE_INFORMATION_EX* PipeInformationEx)
    {
        auto win32_impl_result = WIN32_IMPL_WinUsb_QueryPipeEx(InterfaceHandle, AlternateSettingNumber, PipeIndex, PipeInformationEx);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WinUsb_SetPipePolicy(void* InterfaceHandle, uint8_t PipeID, uint32_t PolicyType, uint32_t ValueLength, void* Value)
    {
        auto win32_impl_result = WIN32_IMPL_WinUsb_SetPipePolicy(InterfaceHandle, PipeID, PolicyType, ValueLength, Value);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WinUsb_GetPipePolicy(void* InterfaceHandle, uint8_t PipeID, uint32_t PolicyType, uint32_t* ValueLength, void* Value)
    {
        auto win32_impl_result = WIN32_IMPL_WinUsb_GetPipePolicy(InterfaceHandle, PipeID, PolicyType, ValueLength, Value);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WinUsb_ReadPipe(void* InterfaceHandle, uint8_t PipeID, uint8_t* Buffer, uint32_t BufferLength, uint32_t* LengthTransferred, Windows::Win32::SystemServices::OVERLAPPED* Overlapped)
    {
        auto win32_impl_result = WIN32_IMPL_WinUsb_ReadPipe(InterfaceHandle, PipeID, Buffer, BufferLength, LengthTransferred, Overlapped);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WinUsb_WritePipe(void* InterfaceHandle, uint8_t PipeID, uint8_t* Buffer, uint32_t BufferLength, uint32_t* LengthTransferred, Windows::Win32::SystemServices::OVERLAPPED* Overlapped)
    {
        auto win32_impl_result = WIN32_IMPL_WinUsb_WritePipe(InterfaceHandle, PipeID, Buffer, BufferLength, LengthTransferred, Overlapped);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WinUsb_ControlTransfer(void* InterfaceHandle, Windows::Win32::UsbDrivers::WINUSB_SETUP_PACKET SetupPacket, uint8_t* Buffer, uint32_t BufferLength, uint32_t* LengthTransferred, Windows::Win32::SystemServices::OVERLAPPED* Overlapped)
    {
        auto win32_impl_result = WIN32_IMPL_WinUsb_ControlTransfer(InterfaceHandle, SetupPacket, Buffer, BufferLength, LengthTransferred, Overlapped);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WinUsb_ResetPipe(void* InterfaceHandle, uint8_t PipeID)
    {
        auto win32_impl_result = WIN32_IMPL_WinUsb_ResetPipe(InterfaceHandle, PipeID);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WinUsb_AbortPipe(void* InterfaceHandle, uint8_t PipeID)
    {
        auto win32_impl_result = WIN32_IMPL_WinUsb_AbortPipe(InterfaceHandle, PipeID);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WinUsb_FlushPipe(void* InterfaceHandle, uint8_t PipeID)
    {
        auto win32_impl_result = WIN32_IMPL_WinUsb_FlushPipe(InterfaceHandle, PipeID);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WinUsb_SetPowerPolicy(void* InterfaceHandle, uint32_t PolicyType, uint32_t ValueLength, void* Value)
    {
        auto win32_impl_result = WIN32_IMPL_WinUsb_SetPowerPolicy(InterfaceHandle, PolicyType, ValueLength, Value);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WinUsb_GetPowerPolicy(void* InterfaceHandle, uint32_t PolicyType, uint32_t* ValueLength, void* Value)
    {
        auto win32_impl_result = WIN32_IMPL_WinUsb_GetPowerPolicy(InterfaceHandle, PolicyType, ValueLength, Value);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WinUsb_GetOverlappedResult(void* InterfaceHandle, Windows::Win32::SystemServices::OVERLAPPED* lpOverlapped, uint32_t* lpNumberOfBytesTransferred, Windows::Win32::SystemServices::BOOL bWait)
    {
        auto win32_impl_result = WIN32_IMPL_WinUsb_GetOverlappedResult(InterfaceHandle, lpOverlapped, lpNumberOfBytesTransferred, bWait);
        return win32_impl_result;
    }
    inline Windows::Win32::UsbDrivers::USB_INTERFACE_DESCRIPTOR* WinUsb_ParseConfigurationDescriptor(Windows::Win32::UsbDrivers::USB_CONFIGURATION_DESCRIPTOR* ConfigurationDescriptor, void* StartPosition, int32_t InterfaceNumber, int32_t AlternateSetting, int32_t InterfaceClass, int32_t InterfaceSubClass, int32_t InterfaceProtocol)
    {
        auto win32_impl_result = WIN32_IMPL_WinUsb_ParseConfigurationDescriptor(ConfigurationDescriptor, StartPosition, InterfaceNumber, AlternateSetting, InterfaceClass, InterfaceSubClass, InterfaceProtocol);
        return win32_impl_result;
    }
    inline Windows::Win32::UsbDrivers::USB_COMMON_DESCRIPTOR* WinUsb_ParseDescriptors(void* DescriptorBuffer, uint32_t TotalLength, void* StartPosition, int32_t DescriptorType)
    {
        auto win32_impl_result = WIN32_IMPL_WinUsb_ParseDescriptors(DescriptorBuffer, TotalLength, StartPosition, DescriptorType);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WinUsb_GetCurrentFrameNumber(void* InterfaceHandle, uint32_t* CurrentFrameNumber, Windows::Win32::SystemServices::LARGE_INTEGER* TimeStamp)
    {
        auto win32_impl_result = WIN32_IMPL_WinUsb_GetCurrentFrameNumber(InterfaceHandle, CurrentFrameNumber, TimeStamp);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WinUsb_GetAdjustedFrameNumber(uint32_t* CurrentFrameNumber, Windows::Win32::SystemServices::LARGE_INTEGER TimeStamp)
    {
        auto win32_impl_result = WIN32_IMPL_WinUsb_GetAdjustedFrameNumber(CurrentFrameNumber, TimeStamp);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WinUsb_RegisterIsochBuffer(void* InterfaceHandle, uint8_t PipeID, uint8_t* Buffer, uint32_t BufferLength, void** IsochBufferHandle)
    {
        auto win32_impl_result = WIN32_IMPL_WinUsb_RegisterIsochBuffer(InterfaceHandle, PipeID, Buffer, BufferLength, IsochBufferHandle);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WinUsb_UnregisterIsochBuffer(void* IsochBufferHandle)
    {
        auto win32_impl_result = WIN32_IMPL_WinUsb_UnregisterIsochBuffer(IsochBufferHandle);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WinUsb_WriteIsochPipe(void* BufferHandle, uint32_t Offset, uint32_t Length, uint32_t* FrameNumber, Windows::Win32::SystemServices::OVERLAPPED* Overlapped)
    {
        auto win32_impl_result = WIN32_IMPL_WinUsb_WriteIsochPipe(BufferHandle, Offset, Length, FrameNumber, Overlapped);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WinUsb_ReadIsochPipe(void* BufferHandle, uint32_t Offset, uint32_t Length, uint32_t* FrameNumber, uint32_t NumberOfPackets, Windows::Win32::UsbDrivers::USBD_ISO_PACKET_DESCRIPTOR* IsoPacketDescriptors, Windows::Win32::SystemServices::OVERLAPPED* Overlapped)
    {
        auto win32_impl_result = WIN32_IMPL_WinUsb_ReadIsochPipe(BufferHandle, Offset, Length, FrameNumber, NumberOfPackets, IsoPacketDescriptors, Overlapped);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WinUsb_WriteIsochPipeAsap(void* BufferHandle, uint32_t Offset, uint32_t Length, Windows::Win32::SystemServices::BOOL ContinueStream, Windows::Win32::SystemServices::OVERLAPPED* Overlapped)
    {
        auto win32_impl_result = WIN32_IMPL_WinUsb_WriteIsochPipeAsap(BufferHandle, Offset, Length, ContinueStream, Overlapped);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WinUsb_ReadIsochPipeAsap(void* BufferHandle, uint32_t Offset, uint32_t Length, Windows::Win32::SystemServices::BOOL ContinueStream, uint32_t NumberOfPackets, Windows::Win32::UsbDrivers::USBD_ISO_PACKET_DESCRIPTOR* IsoPacketDescriptors, Windows::Win32::SystemServices::OVERLAPPED* Overlapped)
    {
        auto win32_impl_result = WIN32_IMPL_WinUsb_ReadIsochPipeAsap(BufferHandle, Offset, Length, ContinueStream, NumberOfPackets, IsoPacketDescriptors, Overlapped);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WinUsb_StartTrackingForTimeSync(void* InterfaceHandle, Windows::Win32::UsbDrivers::USB_START_TRACKING_FOR_TIME_SYNC_INFORMATION* StartTrackingInfo)
    {
        auto win32_impl_result = WIN32_IMPL_WinUsb_StartTrackingForTimeSync(InterfaceHandle, StartTrackingInfo);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WinUsb_GetCurrentFrameNumberAndQpc(void* InterfaceHandle, Windows::Win32::UsbDrivers::USB_FRAME_NUMBER_AND_QPC_FOR_TIME_SYNC_INFORMATION* FrameQpcInfo)
    {
        auto win32_impl_result = WIN32_IMPL_WinUsb_GetCurrentFrameNumberAndQpc(InterfaceHandle, FrameQpcInfo);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WinUsb_StopTrackingForTimeSync(void* InterfaceHandle, Windows::Win32::UsbDrivers::USB_STOP_TRACKING_FOR_TIME_SYNC_INFORMATION* StopTrackingInfo)
    {
        auto win32_impl_result = WIN32_IMPL_WinUsb_StopTrackingForTimeSync(InterfaceHandle, StopTrackingInfo);
        return win32_impl_result;
    }

#pragma endregion methods

}
#endif
