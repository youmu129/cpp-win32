// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_VirtualStorage_H
#define WIN32_Windows_Win32_VirtualStorage_H
#include "win32/base.h"
static_assert(win32::check_version(CPPWIN32_VERSION, "0.0.0.1"), "Mismatched C++/Win32 headers.");
#define CPPWIN32_VERSION "0.0.0.1"
#include "win32/impl/Windows.Win32.VirtualStorage.2.h"
WIN32_EXPORT namespace win32::Windows::Win32::VirtualStorage
{
#pragma region methods
    inline uint32_t OpenVirtualDisk(Windows::Win32::VirtualStorage::VIRTUAL_STORAGE_TYPE* VirtualStorageType, uint16_t* Path, Windows::Win32::VirtualStorage::VIRTUAL_DISK_ACCESS_MASK VirtualDiskAccessMask, Windows::Win32::VirtualStorage::OPEN_VIRTUAL_DISK_FLAG Flags, Windows::Win32::VirtualStorage::OPEN_VIRTUAL_DISK_PARAMETERS* Parameters, intptr_t* Handle)
    {
        auto win32_impl_result = WIN32_IMPL_OpenVirtualDisk(VirtualStorageType, Path, VirtualDiskAccessMask, Flags, Parameters, Handle);
        return win32_impl_result;
    }
    inline uint32_t CreateVirtualDisk(Windows::Win32::VirtualStorage::VIRTUAL_STORAGE_TYPE* VirtualStorageType, uint16_t* Path, Windows::Win32::VirtualStorage::VIRTUAL_DISK_ACCESS_MASK VirtualDiskAccessMask, void* SecurityDescriptor, Windows::Win32::VirtualStorage::CREATE_VIRTUAL_DISK_FLAG Flags, uint32_t ProviderSpecificFlags, Windows::Win32::VirtualStorage::CREATE_VIRTUAL_DISK_PARAMETERS* Parameters, Windows::Win32::SystemServices::OVERLAPPED* Overlapped, intptr_t* Handle)
    {
        auto win32_impl_result = WIN32_IMPL_CreateVirtualDisk(VirtualStorageType, Path, VirtualDiskAccessMask, SecurityDescriptor, Flags, ProviderSpecificFlags, Parameters, Overlapped, Handle);
        return win32_impl_result;
    }
    inline uint32_t AttachVirtualDisk(Windows::Win32::SystemServices::HANDLE VirtualDiskHandle, void* SecurityDescriptor, Windows::Win32::VirtualStorage::ATTACH_VIRTUAL_DISK_FLAG Flags, uint32_t ProviderSpecificFlags, Windows::Win32::VirtualStorage::ATTACH_VIRTUAL_DISK_PARAMETERS* Parameters, Windows::Win32::SystemServices::OVERLAPPED* Overlapped)
    {
        auto win32_impl_result = WIN32_IMPL_AttachVirtualDisk(VirtualDiskHandle, SecurityDescriptor, Flags, ProviderSpecificFlags, Parameters, Overlapped);
        return win32_impl_result;
    }
    inline uint32_t DetachVirtualDisk(Windows::Win32::SystemServices::HANDLE VirtualDiskHandle, Windows::Win32::VirtualStorage::DETACH_VIRTUAL_DISK_FLAG Flags, uint32_t ProviderSpecificFlags)
    {
        auto win32_impl_result = WIN32_IMPL_DetachVirtualDisk(VirtualDiskHandle, Flags, ProviderSpecificFlags);
        return win32_impl_result;
    }
    inline uint32_t GetVirtualDiskPhysicalPath(Windows::Win32::SystemServices::HANDLE VirtualDiskHandle, uint32_t* DiskPathSizeInBytes, uint16_t* DiskPath)
    {
        auto win32_impl_result = WIN32_IMPL_GetVirtualDiskPhysicalPath(VirtualDiskHandle, DiskPathSizeInBytes, DiskPath);
        return win32_impl_result;
    }
    inline uint32_t GetAllAttachedVirtualDiskPhysicalPaths(uint32_t* PathsBufferSizeInBytes, uint16_t* PathsBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_GetAllAttachedVirtualDiskPhysicalPaths(PathsBufferSizeInBytes, PathsBuffer);
        return win32_impl_result;
    }
    inline uint32_t GetStorageDependencyInformation(Windows::Win32::SystemServices::HANDLE ObjectHandle, Windows::Win32::VirtualStorage::GET_STORAGE_DEPENDENCY_FLAG Flags, uint32_t StorageDependencyInfoSize, Windows::Win32::VirtualStorage::STORAGE_DEPENDENCY_INFO* StorageDependencyInfo, uint32_t* SizeUsed)
    {
        auto win32_impl_result = WIN32_IMPL_GetStorageDependencyInformation(ObjectHandle, Flags, StorageDependencyInfoSize, StorageDependencyInfo, SizeUsed);
        return win32_impl_result;
    }
    inline uint32_t GetVirtualDiskInformation(Windows::Win32::SystemServices::HANDLE VirtualDiskHandle, uint32_t* VirtualDiskInfoSize, Windows::Win32::VirtualStorage::GET_VIRTUAL_DISK_INFO* VirtualDiskInfo, uint32_t* SizeUsed)
    {
        auto win32_impl_result = WIN32_IMPL_GetVirtualDiskInformation(VirtualDiskHandle, VirtualDiskInfoSize, VirtualDiskInfo, SizeUsed);
        return win32_impl_result;
    }
    inline uint32_t SetVirtualDiskInformation(Windows::Win32::SystemServices::HANDLE VirtualDiskHandle, Windows::Win32::VirtualStorage::SET_VIRTUAL_DISK_INFO* VirtualDiskInfo)
    {
        auto win32_impl_result = WIN32_IMPL_SetVirtualDiskInformation(VirtualDiskHandle, VirtualDiskInfo);
        return win32_impl_result;
    }
    inline uint32_t EnumerateVirtualDiskMetadata(Windows::Win32::SystemServices::HANDLE VirtualDiskHandle, uint32_t* NumberOfItems, ::win32::guid* Items)
    {
        auto win32_impl_result = WIN32_IMPL_EnumerateVirtualDiskMetadata(VirtualDiskHandle, NumberOfItems, Items);
        return win32_impl_result;
    }
    inline uint32_t GetVirtualDiskMetadata(Windows::Win32::SystemServices::HANDLE VirtualDiskHandle, ::win32::guid* Item, uint32_t* MetaDataSize, void* MetaData)
    {
        auto win32_impl_result = WIN32_IMPL_GetVirtualDiskMetadata(VirtualDiskHandle, Item, MetaDataSize, MetaData);
        return win32_impl_result;
    }
    inline uint32_t SetVirtualDiskMetadata(Windows::Win32::SystemServices::HANDLE VirtualDiskHandle, ::win32::guid* Item, uint32_t MetaDataSize, void* MetaData)
    {
        auto win32_impl_result = WIN32_IMPL_SetVirtualDiskMetadata(VirtualDiskHandle, Item, MetaDataSize, MetaData);
        return win32_impl_result;
    }
    inline uint32_t DeleteVirtualDiskMetadata(Windows::Win32::SystemServices::HANDLE VirtualDiskHandle, ::win32::guid* Item)
    {
        auto win32_impl_result = WIN32_IMPL_DeleteVirtualDiskMetadata(VirtualDiskHandle, Item);
        return win32_impl_result;
    }
    inline uint32_t GetVirtualDiskOperationProgress(Windows::Win32::SystemServices::HANDLE VirtualDiskHandle, Windows::Win32::SystemServices::OVERLAPPED* Overlapped, Windows::Win32::VirtualStorage::VIRTUAL_DISK_PROGRESS* Progress)
    {
        auto win32_impl_result = WIN32_IMPL_GetVirtualDiskOperationProgress(VirtualDiskHandle, Overlapped, Progress);
        return win32_impl_result;
    }
    inline uint32_t CompactVirtualDisk(Windows::Win32::SystemServices::HANDLE VirtualDiskHandle, Windows::Win32::VirtualStorage::COMPACT_VIRTUAL_DISK_FLAG Flags, Windows::Win32::VirtualStorage::COMPACT_VIRTUAL_DISK_PARAMETERS* Parameters, Windows::Win32::SystemServices::OVERLAPPED* Overlapped)
    {
        auto win32_impl_result = WIN32_IMPL_CompactVirtualDisk(VirtualDiskHandle, Flags, Parameters, Overlapped);
        return win32_impl_result;
    }
    inline uint32_t MergeVirtualDisk(Windows::Win32::SystemServices::HANDLE VirtualDiskHandle, Windows::Win32::VirtualStorage::MERGE_VIRTUAL_DISK_FLAG Flags, Windows::Win32::VirtualStorage::MERGE_VIRTUAL_DISK_PARAMETERS* Parameters, Windows::Win32::SystemServices::OVERLAPPED* Overlapped)
    {
        auto win32_impl_result = WIN32_IMPL_MergeVirtualDisk(VirtualDiskHandle, Flags, Parameters, Overlapped);
        return win32_impl_result;
    }
    inline uint32_t ExpandVirtualDisk(Windows::Win32::SystemServices::HANDLE VirtualDiskHandle, Windows::Win32::VirtualStorage::EXPAND_VIRTUAL_DISK_FLAG Flags, Windows::Win32::VirtualStorage::EXPAND_VIRTUAL_DISK_PARAMETERS* Parameters, Windows::Win32::SystemServices::OVERLAPPED* Overlapped)
    {
        auto win32_impl_result = WIN32_IMPL_ExpandVirtualDisk(VirtualDiskHandle, Flags, Parameters, Overlapped);
        return win32_impl_result;
    }
    inline uint32_t ResizeVirtualDisk(Windows::Win32::SystemServices::HANDLE VirtualDiskHandle, Windows::Win32::VirtualStorage::RESIZE_VIRTUAL_DISK_FLAG Flags, Windows::Win32::VirtualStorage::RESIZE_VIRTUAL_DISK_PARAMETERS* Parameters, Windows::Win32::SystemServices::OVERLAPPED* Overlapped)
    {
        auto win32_impl_result = WIN32_IMPL_ResizeVirtualDisk(VirtualDiskHandle, Flags, Parameters, Overlapped);
        return win32_impl_result;
    }
    inline uint32_t MirrorVirtualDisk(Windows::Win32::SystemServices::HANDLE VirtualDiskHandle, Windows::Win32::VirtualStorage::MIRROR_VIRTUAL_DISK_FLAG Flags, Windows::Win32::VirtualStorage::MIRROR_VIRTUAL_DISK_PARAMETERS* Parameters, Windows::Win32::SystemServices::OVERLAPPED* Overlapped)
    {
        auto win32_impl_result = WIN32_IMPL_MirrorVirtualDisk(VirtualDiskHandle, Flags, Parameters, Overlapped);
        return win32_impl_result;
    }
    inline uint32_t BreakMirrorVirtualDisk(Windows::Win32::SystemServices::HANDLE VirtualDiskHandle)
    {
        auto win32_impl_result = WIN32_IMPL_BreakMirrorVirtualDisk(VirtualDiskHandle);
        return win32_impl_result;
    }
    inline uint32_t AddVirtualDiskParent(Windows::Win32::SystemServices::HANDLE VirtualDiskHandle, uint16_t* ParentPath)
    {
        auto win32_impl_result = WIN32_IMPL_AddVirtualDiskParent(VirtualDiskHandle, ParentPath);
        return win32_impl_result;
    }
    inline uint32_t QueryChangesVirtualDisk(Windows::Win32::SystemServices::HANDLE VirtualDiskHandle, uint16_t* ChangeTrackingId, uint64_t ByteOffset, uint64_t ByteLength, Windows::Win32::VirtualStorage::QUERY_CHANGES_VIRTUAL_DISK_FLAG Flags, Windows::Win32::VirtualStorage::QUERY_CHANGES_VIRTUAL_DISK_RANGE* Ranges, uint32_t* RangeCount, uint64_t* ProcessedLength)
    {
        auto win32_impl_result = WIN32_IMPL_QueryChangesVirtualDisk(VirtualDiskHandle, ChangeTrackingId, ByteOffset, ByteLength, Flags, Ranges, RangeCount, ProcessedLength);
        return win32_impl_result;
    }
    inline uint32_t TakeSnapshotVhdSet(Windows::Win32::SystemServices::HANDLE VirtualDiskHandle, Windows::Win32::VirtualStorage::TAKE_SNAPSHOT_VHDSET_PARAMETERS* Parameters, Windows::Win32::VirtualStorage::TAKE_SNAPSHOT_VHDSET_FLAG Flags)
    {
        auto win32_impl_result = WIN32_IMPL_TakeSnapshotVhdSet(VirtualDiskHandle, Parameters, Flags);
        return win32_impl_result;
    }
    inline uint32_t DeleteSnapshotVhdSet(Windows::Win32::SystemServices::HANDLE VirtualDiskHandle, Windows::Win32::VirtualStorage::DELETE_SNAPSHOT_VHDSET_PARAMETERS* Parameters, Windows::Win32::VirtualStorage::DELETE_SNAPSHOT_VHDSET_FLAG Flags)
    {
        auto win32_impl_result = WIN32_IMPL_DeleteSnapshotVhdSet(VirtualDiskHandle, Parameters, Flags);
        return win32_impl_result;
    }
    inline uint32_t ModifyVhdSet(Windows::Win32::SystemServices::HANDLE VirtualDiskHandle, Windows::Win32::VirtualStorage::MODIFY_VHDSET_PARAMETERS* Parameters, Windows::Win32::VirtualStorage::MODIFY_VHDSET_FLAG Flags)
    {
        auto win32_impl_result = WIN32_IMPL_ModifyVhdSet(VirtualDiskHandle, Parameters, Flags);
        return win32_impl_result;
    }
    inline uint32_t ApplySnapshotVhdSet(Windows::Win32::SystemServices::HANDLE VirtualDiskHandle, Windows::Win32::VirtualStorage::APPLY_SNAPSHOT_VHDSET_PARAMETERS* Parameters, Windows::Win32::VirtualStorage::APPLY_SNAPSHOT_VHDSET_FLAG Flags)
    {
        auto win32_impl_result = WIN32_IMPL_ApplySnapshotVhdSet(VirtualDiskHandle, Parameters, Flags);
        return win32_impl_result;
    }
    inline uint32_t RawSCSIVirtualDisk(Windows::Win32::SystemServices::HANDLE VirtualDiskHandle, Windows::Win32::VirtualStorage::RAW_SCSI_VIRTUAL_DISK_PARAMETERS* Parameters, Windows::Win32::VirtualStorage::RAW_SCSI_VIRTUAL_DISK_FLAG Flags, Windows::Win32::VirtualStorage::RAW_SCSI_VIRTUAL_DISK_RESPONSE* Response)
    {
        auto win32_impl_result = WIN32_IMPL_RawSCSIVirtualDisk(VirtualDiskHandle, Parameters, Flags, Response);
        return win32_impl_result;
    }
    inline uint32_t ForkVirtualDisk(Windows::Win32::SystemServices::HANDLE VirtualDiskHandle, Windows::Win32::VirtualStorage::FORK_VIRTUAL_DISK_FLAG Flags, Windows::Win32::VirtualStorage::FORK_VIRTUAL_DISK_PARAMETERS* Parameters, Windows::Win32::SystemServices::OVERLAPPED* Overlapped)
    {
        auto win32_impl_result = WIN32_IMPL_ForkVirtualDisk(VirtualDiskHandle, Flags, Parameters, Overlapped);
        return win32_impl_result;
    }
    inline uint32_t CompleteForkVirtualDisk(Windows::Win32::SystemServices::HANDLE VirtualDiskHandle)
    {
        auto win32_impl_result = WIN32_IMPL_CompleteForkVirtualDisk(VirtualDiskHandle);
        return win32_impl_result;
    }

#pragma endregion methods

}
#endif
