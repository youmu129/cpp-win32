// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_WinRT_H
#define WIN32_Windows_Win32_WinRT_H
#include "win32/base.h"
static_assert(win32::check_version(CPPWIN32_VERSION, "0.0.0.1"), "Mismatched C++/Win32 headers.");
#define CPPWIN32_VERSION "0.0.0.1"
#include "win32/impl/Windows.Win32.WinRT.2.h"
WIN32_EXPORT namespace win32::Windows::Win32::WinRT
{
#pragma region methods
    inline int32_t CoDecodeProxy(uint32_t dwClientPid, uint64_t ui64ProxyAddress, Windows::Win32::WinRT::ServerInformation* pServerInformation)
    {
        auto win32_impl_result = WIN32_IMPL_CoDecodeProxy(dwClientPid, ui64ProxyAddress, pServerInformation);
        return win32_impl_result;
    }
    inline int32_t RoGetAgileReference(Windows::Win32::WinRT::AgileReferenceOptions options, ::win32::guid* riid, Windows::Win32::Com::IUnknown* pUnk, Windows::Win32::WinRT::IAgileReference** ppAgileReference)
    {
        auto win32_impl_result = WIN32_IMPL_RoGetAgileReference(options, riid, pUnk, ppAgileReference);
        return win32_impl_result;
    }
    inline uint32_t HSTRING_UserSize(uint32_t* param0, uint32_t param1, intptr_t* param2)
    {
        auto win32_impl_result = WIN32_IMPL_HSTRING_UserSize(param0, param1, param2);
        return win32_impl_result;
    }
    inline uint8_t* HSTRING_UserMarshal(uint32_t* param0, uint8_t* param1, intptr_t* param2)
    {
        auto win32_impl_result = WIN32_IMPL_HSTRING_UserMarshal(param0, param1, param2);
        return win32_impl_result;
    }
    inline uint8_t* HSTRING_UserUnmarshal(uint32_t* param0, uint8_t* param1, intptr_t* param2)
    {
        auto win32_impl_result = WIN32_IMPL_HSTRING_UserUnmarshal(param0, param1, param2);
        return win32_impl_result;
    }
    inline void HSTRING_UserFree(uint32_t* param0, intptr_t* param1)
    {
        WIN32_IMPL_HSTRING_UserFree(param0, param1);
    }
    inline uint32_t HSTRING_UserSize64(uint32_t* param0, uint32_t param1, intptr_t* param2)
    {
        auto win32_impl_result = WIN32_IMPL_HSTRING_UserSize64(param0, param1, param2);
        return win32_impl_result;
    }
    inline uint8_t* HSTRING_UserMarshal64(uint32_t* param0, uint8_t* param1, intptr_t* param2)
    {
        auto win32_impl_result = WIN32_IMPL_HSTRING_UserMarshal64(param0, param1, param2);
        return win32_impl_result;
    }
    inline uint8_t* HSTRING_UserUnmarshal64(uint32_t* param0, uint8_t* param1, intptr_t* param2)
    {
        auto win32_impl_result = WIN32_IMPL_HSTRING_UserUnmarshal64(param0, param1, param2);
        return win32_impl_result;
    }
    inline void HSTRING_UserFree64(uint32_t* param0, intptr_t* param1)
    {
        WIN32_IMPL_HSTRING_UserFree64(param0, param1);
    }
    inline int32_t PdfCreateRenderer(Windows::Win32::Dxgi::IDXGIDevice* pDevice, Windows::Win32::WinRT::IPdfRendererNative** ppRenderer)
    {
        auto win32_impl_result = WIN32_IMPL_PdfCreateRenderer(pDevice, ppRenderer);
        return win32_impl_result;
    }
    inline int32_t WindowsCreateString(uint16_t* sourceString, uint32_t length, intptr_t* string)
    {
        auto win32_impl_result = WIN32_IMPL_WindowsCreateString(sourceString, length, string);
        return win32_impl_result;
    }
    inline int32_t WindowsCreateStringReference(uint16_t* sourceString, uint32_t length, Windows::Win32::WinRT::HSTRING_HEADER* hstringHeader, intptr_t* string)
    {
        auto win32_impl_result = WIN32_IMPL_WindowsCreateStringReference(sourceString, length, hstringHeader, string);
        return win32_impl_result;
    }
    inline int32_t WindowsDeleteString(intptr_t string)
    {
        auto win32_impl_result = WIN32_IMPL_WindowsDeleteString(string);
        return win32_impl_result;
    }
    inline int32_t WindowsDuplicateString(intptr_t string, intptr_t* newString)
    {
        auto win32_impl_result = WIN32_IMPL_WindowsDuplicateString(string, newString);
        return win32_impl_result;
    }
    inline uint32_t WindowsGetStringLen(intptr_t string)
    {
        auto win32_impl_result = WIN32_IMPL_WindowsGetStringLen(string);
        return win32_impl_result;
    }
    inline uint16_t* WindowsGetStringRawBuffer(intptr_t string, uint32_t* length)
    {
        auto win32_impl_result = WIN32_IMPL_WindowsGetStringRawBuffer(string, length);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WindowsIsStringEmpty(intptr_t string)
    {
        auto win32_impl_result = WIN32_IMPL_WindowsIsStringEmpty(string);
        return win32_impl_result;
    }
    inline int32_t WindowsStringHasEmbeddedNull(intptr_t string, int32_t* hasEmbedNull)
    {
        auto win32_impl_result = WIN32_IMPL_WindowsStringHasEmbeddedNull(string, hasEmbedNull);
        return win32_impl_result;
    }
    inline int32_t WindowsCompareStringOrdinal(intptr_t string1, intptr_t string2, int32_t* result)
    {
        auto win32_impl_result = WIN32_IMPL_WindowsCompareStringOrdinal(string1, string2, result);
        return win32_impl_result;
    }
    inline int32_t WindowsSubstring(intptr_t string, uint32_t startIndex, intptr_t* newString)
    {
        auto win32_impl_result = WIN32_IMPL_WindowsSubstring(string, startIndex, newString);
        return win32_impl_result;
    }
    inline int32_t WindowsSubstringWithSpecifiedLength(intptr_t string, uint32_t startIndex, uint32_t length, intptr_t* newString)
    {
        auto win32_impl_result = WIN32_IMPL_WindowsSubstringWithSpecifiedLength(string, startIndex, length, newString);
        return win32_impl_result;
    }
    inline int32_t WindowsConcatString(intptr_t string1, intptr_t string2, intptr_t* newString)
    {
        auto win32_impl_result = WIN32_IMPL_WindowsConcatString(string1, string2, newString);
        return win32_impl_result;
    }
    inline int32_t WindowsReplaceString(intptr_t string, intptr_t stringReplaced, intptr_t stringReplaceWith, intptr_t* newString)
    {
        auto win32_impl_result = WIN32_IMPL_WindowsReplaceString(string, stringReplaced, stringReplaceWith, newString);
        return win32_impl_result;
    }
    inline int32_t WindowsTrimStringStart(intptr_t string, intptr_t trimString, intptr_t* newString)
    {
        auto win32_impl_result = WIN32_IMPL_WindowsTrimStringStart(string, trimString, newString);
        return win32_impl_result;
    }
    inline int32_t WindowsTrimStringEnd(intptr_t string, intptr_t trimString, intptr_t* newString)
    {
        auto win32_impl_result = WIN32_IMPL_WindowsTrimStringEnd(string, trimString, newString);
        return win32_impl_result;
    }
    inline int32_t WindowsPreallocateStringBuffer(uint32_t length, uint16_t** charBuffer, intptr_t* bufferHandle)
    {
        auto win32_impl_result = WIN32_IMPL_WindowsPreallocateStringBuffer(length, charBuffer, bufferHandle);
        return win32_impl_result;
    }
    inline int32_t WindowsPromoteStringBuffer(intptr_t bufferHandle, intptr_t* string)
    {
        auto win32_impl_result = WIN32_IMPL_WindowsPromoteStringBuffer(bufferHandle, string);
        return win32_impl_result;
    }
    inline int32_t WindowsDeleteStringBuffer(intptr_t bufferHandle)
    {
        auto win32_impl_result = WIN32_IMPL_WindowsDeleteStringBuffer(bufferHandle);
        return win32_impl_result;
    }
    inline int32_t WindowsInspectString(size_t targetHString, uint16_t machine, Windows::Win32::WinRT::PINSPECT_HSTRING_CALLBACK* callback, void* context, uint32_t* length, size_t* targetStringAddress)
    {
        auto win32_impl_result = WIN32_IMPL_WindowsInspectString(targetHString, machine, callback, context, length, targetStringAddress);
        return win32_impl_result;
    }
    inline int32_t WindowsInspectString2(uint64_t targetHString, uint16_t machine, Windows::Win32::WinRT::PINSPECT_HSTRING_CALLBACK2* callback, void* context, uint32_t* length, uint64_t* targetStringAddress)
    {
        auto win32_impl_result = WIN32_IMPL_WindowsInspectString2(targetHString, machine, callback, context, length, targetStringAddress);
        return win32_impl_result;
    }
    inline int32_t CreateDirect3D11DeviceFromDXGIDevice(Windows::Win32::Dxgi::IDXGIDevice* dxgiDevice, Windows::Win32::WinRT::IInspectable** graphicsDevice)
    {
        auto win32_impl_result = WIN32_IMPL_CreateDirect3D11DeviceFromDXGIDevice(dxgiDevice, graphicsDevice);
        return win32_impl_result;
    }
    inline int32_t CreateDirect3D11SurfaceFromDXGISurface(Windows::Win32::Dxgi::IDXGISurface* dgxiSurface, Windows::Win32::WinRT::IInspectable** graphicsSurface)
    {
        auto win32_impl_result = WIN32_IMPL_CreateDirect3D11SurfaceFromDXGISurface(dgxiSurface, graphicsSurface);
        return win32_impl_result;
    }
    inline int32_t RoInitialize(Windows::Win32::WinRT::RO_INIT_TYPE initType)
    {
        auto win32_impl_result = WIN32_IMPL_RoInitialize(initType);
        return win32_impl_result;
    }
    inline void RoUninitialize()
    {
        WIN32_IMPL_RoUninitialize();
    }
    inline int32_t RoActivateInstance(intptr_t activatableClassId, Windows::Win32::WinRT::IInspectable** instance)
    {
        auto win32_impl_result = WIN32_IMPL_RoActivateInstance(activatableClassId, instance);
        return win32_impl_result;
    }
    inline int32_t RoRegisterActivationFactories(intptr_t* activatableClassIds, intptr_t* activationFactoryCallbacks, uint32_t count, intptr_t* cookie)
    {
        auto win32_impl_result = WIN32_IMPL_RoRegisterActivationFactories(activatableClassIds, activationFactoryCallbacks, count, cookie);
        return win32_impl_result;
    }
    inline void RoRevokeActivationFactories(intptr_t cookie)
    {
        WIN32_IMPL_RoRevokeActivationFactories(cookie);
    }
    inline int32_t RoGetActivationFactory(intptr_t activatableClassId, ::win32::guid* iid, void** factory)
    {
        auto win32_impl_result = WIN32_IMPL_RoGetActivationFactory(activatableClassId, iid, factory);
        return win32_impl_result;
    }
    inline int32_t RoRegisterForApartmentShutdown(Windows::Win32::WinRT::IApartmentShutdown* callbackObject, uint64_t* apartmentIdentifier, intptr_t* regCookie)
    {
        auto win32_impl_result = WIN32_IMPL_RoRegisterForApartmentShutdown(callbackObject, apartmentIdentifier, regCookie);
        return win32_impl_result;
    }
    inline int32_t RoUnregisterForApartmentShutdown(intptr_t regCookie)
    {
        auto win32_impl_result = WIN32_IMPL_RoUnregisterForApartmentShutdown(regCookie);
        return win32_impl_result;
    }
    inline int32_t RoGetApartmentIdentifier(uint64_t* apartmentIdentifier)
    {
        auto win32_impl_result = WIN32_IMPL_RoGetApartmentIdentifier(apartmentIdentifier);
        return win32_impl_result;
    }
    inline int32_t RoGetBufferMarshaler(Windows::Win32::Com::IMarshal** bufferMarshaler)
    {
        auto win32_impl_result = WIN32_IMPL_RoGetBufferMarshaler(bufferMarshaler);
        return win32_impl_result;
    }
    inline int32_t RoGetErrorReportingFlags(uint32_t* pflags)
    {
        auto win32_impl_result = WIN32_IMPL_RoGetErrorReportingFlags(pflags);
        return win32_impl_result;
    }
    inline int32_t RoSetErrorReportingFlags(uint32_t flags)
    {
        auto win32_impl_result = WIN32_IMPL_RoSetErrorReportingFlags(flags);
        return win32_impl_result;
    }
    inline int32_t RoResolveRestrictedErrorInfoReference(uint16_t* reference, Windows::Win32::WinRT::IRestrictedErrorInfo** ppRestrictedErrorInfo)
    {
        auto win32_impl_result = WIN32_IMPL_RoResolveRestrictedErrorInfoReference(reference, ppRestrictedErrorInfo);
        return win32_impl_result;
    }
    inline int32_t SetRestrictedErrorInfo(Windows::Win32::WinRT::IRestrictedErrorInfo* pRestrictedErrorInfo)
    {
        auto win32_impl_result = WIN32_IMPL_SetRestrictedErrorInfo(pRestrictedErrorInfo);
        return win32_impl_result;
    }
    inline int32_t GetRestrictedErrorInfo(Windows::Win32::WinRT::IRestrictedErrorInfo** ppRestrictedErrorInfo)
    {
        auto win32_impl_result = WIN32_IMPL_GetRestrictedErrorInfo(ppRestrictedErrorInfo);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL RoOriginateErrorW(int32_t error, uint32_t cchMax, uint16_t* message)
    {
        auto win32_impl_result = WIN32_IMPL_RoOriginateErrorW(error, cchMax, message);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL RoOriginateError(int32_t error, intptr_t message)
    {
        auto win32_impl_result = WIN32_IMPL_RoOriginateError(error, message);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL RoTransformErrorW(int32_t oldError, int32_t newError, uint32_t cchMax, uint16_t* message)
    {
        auto win32_impl_result = WIN32_IMPL_RoTransformErrorW(oldError, newError, cchMax, message);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL RoTransformError(int32_t oldError, int32_t newError, intptr_t message)
    {
        auto win32_impl_result = WIN32_IMPL_RoTransformError(oldError, newError, message);
        return win32_impl_result;
    }
    inline int32_t RoCaptureErrorContext(int32_t hr)
    {
        auto win32_impl_result = WIN32_IMPL_RoCaptureErrorContext(hr);
        return win32_impl_result;
    }
    inline void RoFailFastWithErrorContext(int32_t hrError)
    {
        WIN32_IMPL_RoFailFastWithErrorContext(hrError);
    }
    inline Windows::Win32::SystemServices::BOOL RoOriginateLanguageException(int32_t error, intptr_t message, Windows::Win32::Com::IUnknown* languageException)
    {
        auto win32_impl_result = WIN32_IMPL_RoOriginateLanguageException(error, message, languageException);
        return win32_impl_result;
    }
    inline void RoClearError()
    {
        WIN32_IMPL_RoClearError();
    }
    inline int32_t RoReportUnhandledError(Windows::Win32::WinRT::IRestrictedErrorInfo* pRestrictedErrorInfo)
    {
        auto win32_impl_result = WIN32_IMPL_RoReportUnhandledError(pRestrictedErrorInfo);
        return win32_impl_result;
    }
    inline int32_t RoInspectThreadErrorInfo(size_t targetTebAddress, uint16_t machine, Windows::Win32::WinRT::PINSPECT_MEMORY_CALLBACK* readMemoryCallback, void* context, size_t* targetErrorInfoAddress)
    {
        auto win32_impl_result = WIN32_IMPL_RoInspectThreadErrorInfo(targetTebAddress, machine, readMemoryCallback, context, targetErrorInfoAddress);
        return win32_impl_result;
    }
    inline int32_t RoInspectCapturedStackBackTrace(size_t targetErrorInfoAddress, uint16_t machine, Windows::Win32::WinRT::PINSPECT_MEMORY_CALLBACK* readMemoryCallback, void* context, uint32_t* frameCount, size_t* targetBackTraceAddress)
    {
        auto win32_impl_result = WIN32_IMPL_RoInspectCapturedStackBackTrace(targetErrorInfoAddress, machine, readMemoryCallback, context, frameCount, targetBackTraceAddress);
        return win32_impl_result;
    }
    inline int32_t RoGetMatchingRestrictedErrorInfo(int32_t hrIn, Windows::Win32::WinRT::IRestrictedErrorInfo** ppRestrictedErrorInfo)
    {
        auto win32_impl_result = WIN32_IMPL_RoGetMatchingRestrictedErrorInfo(hrIn, ppRestrictedErrorInfo);
        return win32_impl_result;
    }
    inline int32_t RoReportFailedDelegate(Windows::Win32::Com::IUnknown* punkDelegate, Windows::Win32::WinRT::IRestrictedErrorInfo* pRestrictedErrorInfo)
    {
        auto win32_impl_result = WIN32_IMPL_RoReportFailedDelegate(punkDelegate, pRestrictedErrorInfo);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL IsErrorPropagationEnabled()
    {
        auto win32_impl_result = WIN32_IMPL_IsErrorPropagationEnabled();
        return win32_impl_result;
    }
    inline int32_t MetaDataGetDispenser(::win32::guid* rclsid, ::win32::guid* riid, void** ppv)
    {
        auto win32_impl_result = WIN32_IMPL_MetaDataGetDispenser(rclsid, riid, ppv);
        return win32_impl_result;
    }
    inline int32_t RoGetParameterizedTypeInstanceIID(uint32_t nameElementCount, uint16_t** nameElements, Windows::Win32::WinRT::IRoMetaDataLocator* metaDataLocator, ::win32::guid* iid, intptr_t* pExtra)
    {
        auto win32_impl_result = WIN32_IMPL_RoGetParameterizedTypeInstanceIID(nameElementCount, nameElements, metaDataLocator, iid, pExtra);
        return win32_impl_result;
    }
    inline void RoFreeParameterizedTypeExtra(intptr_t extra)
    {
        WIN32_IMPL_RoFreeParameterizedTypeExtra(extra);
    }
    inline int8_t* RoParameterizedTypeExtraGetTypeSignature(intptr_t extra)
    {
        auto win32_impl_result = WIN32_IMPL_RoParameterizedTypeExtraGetTypeSignature(extra);
        return win32_impl_result;
    }
    inline int32_t RoGetServerActivatableClasses(intptr_t serverName, intptr_t** activatableClassIds, uint32_t* count)
    {
        auto win32_impl_result = WIN32_IMPL_RoGetServerActivatableClasses(serverName, activatableClassIds, count);
        return win32_impl_result;
    }
    inline int32_t CreateRandomAccessStreamOnFile(uint16_t* filePath, uint32_t accessMode, ::win32::guid* riid, void** ppv)
    {
        auto win32_impl_result = WIN32_IMPL_CreateRandomAccessStreamOnFile(filePath, accessMode, riid, ppv);
        return win32_impl_result;
    }
    inline int32_t CreateRandomAccessStreamOverStream(Windows::Win32::StructuredStorage::IStream* stream, Windows::Win32::WinRT::BSOS_OPTIONS options, ::win32::guid* riid, void** ppv)
    {
        auto win32_impl_result = WIN32_IMPL_CreateRandomAccessStreamOverStream(stream, options, riid, ppv);
        return win32_impl_result;
    }
    inline int32_t CreateStreamOverRandomAccessStream(Windows::Win32::Com::IUnknown* randomAccessStream, ::win32::guid* riid, void** ppv)
    {
        auto win32_impl_result = WIN32_IMPL_CreateStreamOverRandomAccessStream(randomAccessStream, riid, ppv);
        return win32_impl_result;
    }

    inline constexpr wchar_t const* CastingSourceInfo_Property_PreferredSourceUriScheme = L"PreferredSourceUriScheme";
    inline constexpr wchar_t const* CastingSourceInfo_Property_CastingTypes = L"CastingTypes";
    inline constexpr wchar_t const* CastingSourceInfo_Property_ProtectedMedia = L"ProtectedMedia";
    inline constexpr wchar_t const* InterfaceName_Windows_UI_Xaml_Interop_IBindableIterable = L"Windows.UI.Xaml.Interop.IBindableIterable";
    inline constexpr wchar_t const* InterfaceName_Windows_UI_Xaml_Interop_IBindableIterator = L"Windows.UI.Xaml.Interop.IBindableIterator";
    inline constexpr wchar_t const* InterfaceName_Windows_UI_Xaml_Interop_IBindableObservableVector = L"Windows.UI.Xaml.Interop.IBindableObservableVector";
    inline constexpr wchar_t const* InterfaceName_Windows_UI_Xaml_Interop_IBindableVector = L"Windows.UI.Xaml.Interop.IBindableVector";
    inline constexpr wchar_t const* InterfaceName_Windows_UI_Xaml_Interop_IBindableVectorView = L"Windows.UI.Xaml.Interop.IBindableVectorView";
    inline constexpr wchar_t const* InterfaceName_Windows_UI_Xaml_Interop_INotifyCollectionChanged = L"Windows.UI.Xaml.Interop.INotifyCollectionChanged";
    inline constexpr wchar_t const* InterfaceName_Windows_UI_Xaml_Interop_INotifyCollectionChangedEventArgs = L"Windows.UI.Xaml.Interop.INotifyCollectionChangedEventArgs";
    inline constexpr wchar_t const* InterfaceName_Windows_UI_Xaml_Interop_INotifyCollectionChangedEventArgsFactory = L"Windows.UI.Xaml.Interop.INotifyCollectionChangedEventArgsFactory";
    inline constexpr wchar_t const* RuntimeClass_Windows_UI_Xaml_Interop_NotifyCollectionChangedEventArgs = L"Windows.UI.Xaml.Interop.NotifyCollectionChangedEventArgs";
#pragma endregion methods

}
#endif
