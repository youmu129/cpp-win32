// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_WinSock_H
#define WIN32_Windows_Win32_WinSock_H
#include "win32/base.h"
static_assert(win32::check_version(CPPWIN32_VERSION, "0.0.0.1"), "Mismatched C++/Win32 headers.");
#define CPPWIN32_VERSION "0.0.0.1"
#include "win32/impl/Windows.Win32.WinSock.2.h"
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
#pragma region methods
    inline int32_t __WSAFDIsSet(size_t fd, Windows::Win32::WinSock::fd_set* param1)
    {
        auto win32_impl_result = WIN32_IMPL___WSAFDIsSet(fd, param1);
        return win32_impl_result;
    }
    inline size_t accept(size_t s, Windows::Win32::WinSock::SOCKADDR* addr, int32_t* addrlen)
    {
        auto win32_impl_result = WIN32_IMPL_accept(s, addr, addrlen);
        return win32_impl_result;
    }
    inline int32_t bind(size_t s, Windows::Win32::WinSock::SOCKADDR* name, int32_t namelen)
    {
        auto win32_impl_result = WIN32_IMPL_bind(s, name, namelen);
        return win32_impl_result;
    }
    inline int32_t closesocket(size_t s)
    {
        auto win32_impl_result = WIN32_IMPL_closesocket(s);
        return win32_impl_result;
    }
    inline int32_t connect(size_t s, Windows::Win32::WinSock::SOCKADDR* name, int32_t namelen)
    {
        auto win32_impl_result = WIN32_IMPL_connect(s, name, namelen);
        return win32_impl_result;
    }
    inline int32_t ioctlsocket(size_t s, int32_t cmd, uint32_t* argp)
    {
        auto win32_impl_result = WIN32_IMPL_ioctlsocket(s, cmd, argp);
        return win32_impl_result;
    }
    inline int32_t getpeername(size_t s, Windows::Win32::WinSock::SOCKADDR* name, int32_t* namelen)
    {
        auto win32_impl_result = WIN32_IMPL_getpeername(s, name, namelen);
        return win32_impl_result;
    }
    inline int32_t getsockname(size_t s, Windows::Win32::WinSock::SOCKADDR* name, int32_t* namelen)
    {
        auto win32_impl_result = WIN32_IMPL_getsockname(s, name, namelen);
        return win32_impl_result;
    }
    inline int32_t getsockopt(size_t s, int32_t level, int32_t optname, int8_t* optval, int32_t* optlen)
    {
        auto win32_impl_result = WIN32_IMPL_getsockopt(s, level, optname, optval, optlen);
        return win32_impl_result;
    }
    inline uint32_t htonl(uint32_t hostlong)
    {
        auto win32_impl_result = WIN32_IMPL_htonl(hostlong);
        return win32_impl_result;
    }
    inline uint16_t htons(uint16_t hostshort)
    {
        auto win32_impl_result = WIN32_IMPL_htons(hostshort);
        return win32_impl_result;
    }
    inline uint32_t inet_addr(int8_t* cp)
    {
        auto win32_impl_result = WIN32_IMPL_inet_addr(cp);
        return win32_impl_result;
    }
    inline int8_t* inet_ntoa(Windows::Win32::WinSock::in_addr in)
    {
        auto win32_impl_result = WIN32_IMPL_inet_ntoa(in);
        return win32_impl_result;
    }
    inline int32_t listen(size_t s, int32_t backlog)
    {
        auto win32_impl_result = WIN32_IMPL_listen(s, backlog);
        return win32_impl_result;
    }
    inline uint32_t ntohl(uint32_t netlong)
    {
        auto win32_impl_result = WIN32_IMPL_ntohl(netlong);
        return win32_impl_result;
    }
    inline uint16_t ntohs(uint16_t netshort)
    {
        auto win32_impl_result = WIN32_IMPL_ntohs(netshort);
        return win32_impl_result;
    }
    inline int32_t recv(size_t s, int8_t* buf, int32_t len, int32_t flags)
    {
        auto win32_impl_result = WIN32_IMPL_recv(s, buf, len, flags);
        return win32_impl_result;
    }
    inline int32_t recvfrom(size_t s, int8_t* buf, int32_t len, int32_t flags, Windows::Win32::WinSock::SOCKADDR* from, int32_t* fromlen)
    {
        auto win32_impl_result = WIN32_IMPL_recvfrom(s, buf, len, flags, from, fromlen);
        return win32_impl_result;
    }
    inline int32_t select(int32_t nfds, Windows::Win32::WinSock::fd_set* readfds, Windows::Win32::WinSock::fd_set* writefds, Windows::Win32::WinSock::fd_set* exceptfds, Windows::Win32::WinSock::timeval* timeout)
    {
        auto win32_impl_result = WIN32_IMPL_select(nfds, readfds, writefds, exceptfds, timeout);
        return win32_impl_result;
    }
    inline int32_t send(size_t s, int8_t* buf, int32_t len, int32_t flags)
    {
        auto win32_impl_result = WIN32_IMPL_send(s, buf, len, flags);
        return win32_impl_result;
    }
    inline int32_t sendto(size_t s, int8_t* buf, int32_t len, int32_t flags, Windows::Win32::WinSock::SOCKADDR* to, int32_t tolen)
    {
        auto win32_impl_result = WIN32_IMPL_sendto(s, buf, len, flags, to, tolen);
        return win32_impl_result;
    }
    inline int32_t setsockopt(size_t s, int32_t level, int32_t optname, int8_t* optval, int32_t optlen)
    {
        auto win32_impl_result = WIN32_IMPL_setsockopt(s, level, optname, optval, optlen);
        return win32_impl_result;
    }
    inline int32_t shutdown(size_t s, int32_t how)
    {
        auto win32_impl_result = WIN32_IMPL_shutdown(s, how);
        return win32_impl_result;
    }
    inline size_t socket(int32_t af, int32_t type, int32_t protocol)
    {
        auto win32_impl_result = WIN32_IMPL_socket(af, type, protocol);
        return win32_impl_result;
    }
    inline Windows::Win32::WinSock::hostent* gethostbyaddr(int8_t* addr, int32_t len, int32_t type)
    {
        auto win32_impl_result = WIN32_IMPL_gethostbyaddr(addr, len, type);
        return win32_impl_result;
    }
    inline Windows::Win32::WinSock::hostent* gethostbyname(int8_t* name)
    {
        auto win32_impl_result = WIN32_IMPL_gethostbyname(name);
        return win32_impl_result;
    }
    inline int32_t gethostname(int8_t* name, int32_t namelen)
    {
        auto win32_impl_result = WIN32_IMPL_gethostname(name, namelen);
        return win32_impl_result;
    }
    inline int32_t GetHostNameW(uint16_t* name, int32_t namelen)
    {
        auto win32_impl_result = WIN32_IMPL_GetHostNameW(name, namelen);
        return win32_impl_result;
    }
    inline Windows::Win32::WinSock::servent* getservbyport(int32_t port, int8_t* proto)
    {
        auto win32_impl_result = WIN32_IMPL_getservbyport(port, proto);
        return win32_impl_result;
    }
    inline Windows::Win32::WinSock::servent* getservbyname(int8_t* name, int8_t* proto)
    {
        auto win32_impl_result = WIN32_IMPL_getservbyname(name, proto);
        return win32_impl_result;
    }
    inline Windows::Win32::WinSock::protoent* getprotobynumber(int32_t number)
    {
        auto win32_impl_result = WIN32_IMPL_getprotobynumber(number);
        return win32_impl_result;
    }
    inline Windows::Win32::WinSock::protoent* getprotobyname(int8_t* name)
    {
        auto win32_impl_result = WIN32_IMPL_getprotobyname(name);
        return win32_impl_result;
    }
    inline int32_t WSAStartup(uint16_t wVersionRequested, Windows::Win32::WinSock::WSAData* lpWSAData)
    {
        auto win32_impl_result = WIN32_IMPL_WSAStartup(wVersionRequested, lpWSAData);
        return win32_impl_result;
    }
    inline int32_t WSACleanup()
    {
        auto win32_impl_result = WIN32_IMPL_WSACleanup();
        return win32_impl_result;
    }
    inline void WSASetLastError(int32_t iError)
    {
        WIN32_IMPL_WSASetLastError(iError);
    }
    inline int32_t WSAGetLastError()
    {
        auto win32_impl_result = WIN32_IMPL_WSAGetLastError();
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WSAIsBlocking()
    {
        auto win32_impl_result = WIN32_IMPL_WSAIsBlocking();
        return win32_impl_result;
    }
    inline int32_t WSAUnhookBlockingHook()
    {
        auto win32_impl_result = WIN32_IMPL_WSAUnhookBlockingHook();
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::FARPROC* WSASetBlockingHook(Windows::Win32::SystemServices::FARPROC* lpBlockFunc)
    {
        auto win32_impl_result = WIN32_IMPL_WSASetBlockingHook(lpBlockFunc);
        return win32_impl_result;
    }
    inline int32_t WSACancelBlockingCall()
    {
        auto win32_impl_result = WIN32_IMPL_WSACancelBlockingCall();
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::HANDLE WSAAsyncGetServByName(Windows::Win32::WindowsAndMessaging::HWND hWnd, uint32_t wMsg, int8_t* name, int8_t* proto, int8_t* buf, int32_t buflen)
    {
        auto win32_impl_result = WIN32_IMPL_WSAAsyncGetServByName(hWnd, wMsg, name, proto, buf, buflen);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::HANDLE WSAAsyncGetServByPort(Windows::Win32::WindowsAndMessaging::HWND hWnd, uint32_t wMsg, int32_t port, int8_t* proto, int8_t* buf, int32_t buflen)
    {
        auto win32_impl_result = WIN32_IMPL_WSAAsyncGetServByPort(hWnd, wMsg, port, proto, buf, buflen);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::HANDLE WSAAsyncGetProtoByName(Windows::Win32::WindowsAndMessaging::HWND hWnd, uint32_t wMsg, int8_t* name, int8_t* buf, int32_t buflen)
    {
        auto win32_impl_result = WIN32_IMPL_WSAAsyncGetProtoByName(hWnd, wMsg, name, buf, buflen);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::HANDLE WSAAsyncGetProtoByNumber(Windows::Win32::WindowsAndMessaging::HWND hWnd, uint32_t wMsg, int32_t number, int8_t* buf, int32_t buflen)
    {
        auto win32_impl_result = WIN32_IMPL_WSAAsyncGetProtoByNumber(hWnd, wMsg, number, buf, buflen);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::HANDLE WSAAsyncGetHostByName(Windows::Win32::WindowsAndMessaging::HWND hWnd, uint32_t wMsg, int8_t* name, int8_t* buf, int32_t buflen)
    {
        auto win32_impl_result = WIN32_IMPL_WSAAsyncGetHostByName(hWnd, wMsg, name, buf, buflen);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::HANDLE WSAAsyncGetHostByAddr(Windows::Win32::WindowsAndMessaging::HWND hWnd, uint32_t wMsg, int8_t* addr, int32_t len, int32_t type, int8_t* buf, int32_t buflen)
    {
        auto win32_impl_result = WIN32_IMPL_WSAAsyncGetHostByAddr(hWnd, wMsg, addr, len, type, buf, buflen);
        return win32_impl_result;
    }
    inline int32_t WSACancelAsyncRequest(Windows::Win32::SystemServices::HANDLE hAsyncTaskHandle)
    {
        auto win32_impl_result = WIN32_IMPL_WSACancelAsyncRequest(hAsyncTaskHandle);
        return win32_impl_result;
    }
    inline int32_t WSAAsyncSelect(size_t s, Windows::Win32::WindowsAndMessaging::HWND hWnd, uint32_t wMsg, int32_t lEvent)
    {
        auto win32_impl_result = WIN32_IMPL_WSAAsyncSelect(s, hWnd, wMsg, lEvent);
        return win32_impl_result;
    }
    inline size_t WSAAccept(size_t s, Windows::Win32::WinSock::SOCKADDR* addr, int32_t* addrlen, Windows::Win32::WinSock::LPCONDITIONPROC* lpfnCondition, size_t dwCallbackData)
    {
        auto win32_impl_result = WIN32_IMPL_WSAAccept(s, addr, addrlen, lpfnCondition, dwCallbackData);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WSACloseEvent(Windows::Win32::SystemServices::HANDLE hEvent)
    {
        auto win32_impl_result = WIN32_IMPL_WSACloseEvent(hEvent);
        return win32_impl_result;
    }
    inline int32_t WSAConnect(size_t s, Windows::Win32::WinSock::SOCKADDR* name, int32_t namelen, Windows::Win32::WinSock::WSABUF* lpCallerData, Windows::Win32::WinSock::WSABUF* lpCalleeData, Windows::Win32::QualityOfService::QOS* lpSQOS, Windows::Win32::QualityOfService::QOS* lpGQOS)
    {
        auto win32_impl_result = WIN32_IMPL_WSAConnect(s, name, namelen, lpCallerData, lpCalleeData, lpSQOS, lpGQOS);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WSAConnectByNameW(size_t s, uint16_t* nodename, uint16_t* servicename, uint32_t* LocalAddressLength, Windows::Win32::WinSock::SOCKADDR* LocalAddress, uint32_t* RemoteAddressLength, Windows::Win32::WinSock::SOCKADDR* RemoteAddress, Windows::Win32::WinSock::timeval* timeout, Windows::Win32::SystemServices::OVERLAPPED* Reserved)
    {
        auto win32_impl_result = WIN32_IMPL_WSAConnectByNameW(s, nodename, servicename, LocalAddressLength, LocalAddress, RemoteAddressLength, RemoteAddress, timeout, Reserved);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WSAConnectByNameA(size_t s, int8_t* nodename, int8_t* servicename, uint32_t* LocalAddressLength, Windows::Win32::WinSock::SOCKADDR* LocalAddress, uint32_t* RemoteAddressLength, Windows::Win32::WinSock::SOCKADDR* RemoteAddress, Windows::Win32::WinSock::timeval* timeout, Windows::Win32::SystemServices::OVERLAPPED* Reserved)
    {
        auto win32_impl_result = WIN32_IMPL_WSAConnectByNameA(s, nodename, servicename, LocalAddressLength, LocalAddress, RemoteAddressLength, RemoteAddress, timeout, Reserved);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WSAConnectByList(size_t s, Windows::Win32::NetworkDrivers::SOCKET_ADDRESS_LIST* SocketAddress, uint32_t* LocalAddressLength, Windows::Win32::WinSock::SOCKADDR* LocalAddress, uint32_t* RemoteAddressLength, Windows::Win32::WinSock::SOCKADDR* RemoteAddress, Windows::Win32::WinSock::timeval* timeout, Windows::Win32::SystemServices::OVERLAPPED* Reserved)
    {
        auto win32_impl_result = WIN32_IMPL_WSAConnectByList(s, SocketAddress, LocalAddressLength, LocalAddress, RemoteAddressLength, RemoteAddress, timeout, Reserved);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::HANDLE WSACreateEvent()
    {
        auto win32_impl_result = WIN32_IMPL_WSACreateEvent();
        return win32_impl_result;
    }
    inline int32_t WSADuplicateSocketA(size_t s, uint32_t dwProcessId, Windows::Win32::WinSock::WSAPROTOCOL_INFOA* lpProtocolInfo)
    {
        auto win32_impl_result = WIN32_IMPL_WSADuplicateSocketA(s, dwProcessId, lpProtocolInfo);
        return win32_impl_result;
    }
    inline int32_t WSADuplicateSocketW(size_t s, uint32_t dwProcessId, Windows::Win32::WinSock::WSAPROTOCOL_INFOW* lpProtocolInfo)
    {
        auto win32_impl_result = WIN32_IMPL_WSADuplicateSocketW(s, dwProcessId, lpProtocolInfo);
        return win32_impl_result;
    }
    inline int32_t WSAEnumNetworkEvents(size_t s, Windows::Win32::SystemServices::HANDLE hEventObject, Windows::Win32::WinSock::WSANETWORKEVENTS* lpNetworkEvents)
    {
        auto win32_impl_result = WIN32_IMPL_WSAEnumNetworkEvents(s, hEventObject, lpNetworkEvents);
        return win32_impl_result;
    }
    inline int32_t WSAEnumProtocolsA(int32_t* lpiProtocols, Windows::Win32::WinSock::WSAPROTOCOL_INFOA* lpProtocolBuffer, uint32_t* lpdwBufferLength)
    {
        auto win32_impl_result = WIN32_IMPL_WSAEnumProtocolsA(lpiProtocols, lpProtocolBuffer, lpdwBufferLength);
        return win32_impl_result;
    }
    inline int32_t WSAEnumProtocolsW(int32_t* lpiProtocols, Windows::Win32::WinSock::WSAPROTOCOL_INFOW* lpProtocolBuffer, uint32_t* lpdwBufferLength)
    {
        auto win32_impl_result = WIN32_IMPL_WSAEnumProtocolsW(lpiProtocols, lpProtocolBuffer, lpdwBufferLength);
        return win32_impl_result;
    }
    inline int32_t WSAEventSelect(size_t s, Windows::Win32::SystemServices::HANDLE hEventObject, int32_t lNetworkEvents)
    {
        auto win32_impl_result = WIN32_IMPL_WSAEventSelect(s, hEventObject, lNetworkEvents);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WSAGetOverlappedResult(size_t s, Windows::Win32::SystemServices::OVERLAPPED* lpOverlapped, uint32_t* lpcbTransfer, Windows::Win32::SystemServices::BOOL fWait, uint32_t* lpdwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_WSAGetOverlappedResult(s, lpOverlapped, lpcbTransfer, fWait, lpdwFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WSAGetQOSByName(size_t s, Windows::Win32::WinSock::WSABUF* lpQOSName, Windows::Win32::QualityOfService::QOS* lpQOS)
    {
        auto win32_impl_result = WIN32_IMPL_WSAGetQOSByName(s, lpQOSName, lpQOS);
        return win32_impl_result;
    }
    inline int32_t WSAHtonl(size_t s, uint32_t hostlong, uint32_t* lpnetlong)
    {
        auto win32_impl_result = WIN32_IMPL_WSAHtonl(s, hostlong, lpnetlong);
        return win32_impl_result;
    }
    inline int32_t WSAHtons(size_t s, uint16_t hostshort, uint16_t* lpnetshort)
    {
        auto win32_impl_result = WIN32_IMPL_WSAHtons(s, hostshort, lpnetshort);
        return win32_impl_result;
    }
    inline int32_t WSAIoctl(size_t s, uint32_t dwIoControlCode, void* lpvInBuffer, uint32_t cbInBuffer, void* lpvOutBuffer, uint32_t cbOutBuffer, uint32_t* lpcbBytesReturned, Windows::Win32::SystemServices::OVERLAPPED* lpOverlapped, Windows::Win32::WinSock::LPWSAOVERLAPPED_COMPLETION_ROUTINE* lpCompletionRoutine)
    {
        auto win32_impl_result = WIN32_IMPL_WSAIoctl(s, dwIoControlCode, lpvInBuffer, cbInBuffer, lpvOutBuffer, cbOutBuffer, lpcbBytesReturned, lpOverlapped, lpCompletionRoutine);
        return win32_impl_result;
    }
    inline size_t WSAJoinLeaf(size_t s, Windows::Win32::WinSock::SOCKADDR* name, int32_t namelen, Windows::Win32::WinSock::WSABUF* lpCallerData, Windows::Win32::WinSock::WSABUF* lpCalleeData, Windows::Win32::QualityOfService::QOS* lpSQOS, Windows::Win32::QualityOfService::QOS* lpGQOS, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_WSAJoinLeaf(s, name, namelen, lpCallerData, lpCalleeData, lpSQOS, lpGQOS, dwFlags);
        return win32_impl_result;
    }
    inline int32_t WSANtohl(size_t s, uint32_t netlong, uint32_t* lphostlong)
    {
        auto win32_impl_result = WIN32_IMPL_WSANtohl(s, netlong, lphostlong);
        return win32_impl_result;
    }
    inline int32_t WSANtohs(size_t s, uint16_t netshort, uint16_t* lphostshort)
    {
        auto win32_impl_result = WIN32_IMPL_WSANtohs(s, netshort, lphostshort);
        return win32_impl_result;
    }
    inline int32_t WSARecv(size_t s, Windows::Win32::WinSock::WSABUF* lpBuffers, uint32_t dwBufferCount, uint32_t* lpNumberOfBytesRecvd, uint32_t* lpFlags, Windows::Win32::SystemServices::OVERLAPPED* lpOverlapped, Windows::Win32::WinSock::LPWSAOVERLAPPED_COMPLETION_ROUTINE* lpCompletionRoutine)
    {
        auto win32_impl_result = WIN32_IMPL_WSARecv(s, lpBuffers, dwBufferCount, lpNumberOfBytesRecvd, lpFlags, lpOverlapped, lpCompletionRoutine);
        return win32_impl_result;
    }
    inline int32_t WSARecvDisconnect(size_t s, Windows::Win32::WinSock::WSABUF* lpInboundDisconnectData)
    {
        auto win32_impl_result = WIN32_IMPL_WSARecvDisconnect(s, lpInboundDisconnectData);
        return win32_impl_result;
    }
    inline int32_t WSARecvFrom(size_t s, Windows::Win32::WinSock::WSABUF* lpBuffers, uint32_t dwBufferCount, uint32_t* lpNumberOfBytesRecvd, uint32_t* lpFlags, Windows::Win32::WinSock::SOCKADDR* lpFrom, int32_t* lpFromlen, Windows::Win32::SystemServices::OVERLAPPED* lpOverlapped, Windows::Win32::WinSock::LPWSAOVERLAPPED_COMPLETION_ROUTINE* lpCompletionRoutine)
    {
        auto win32_impl_result = WIN32_IMPL_WSARecvFrom(s, lpBuffers, dwBufferCount, lpNumberOfBytesRecvd, lpFlags, lpFrom, lpFromlen, lpOverlapped, lpCompletionRoutine);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WSAResetEvent(Windows::Win32::SystemServices::HANDLE hEvent)
    {
        auto win32_impl_result = WIN32_IMPL_WSAResetEvent(hEvent);
        return win32_impl_result;
    }
    inline int32_t WSASend(size_t s, Windows::Win32::WinSock::WSABUF* lpBuffers, uint32_t dwBufferCount, uint32_t* lpNumberOfBytesSent, uint32_t dwFlags, Windows::Win32::SystemServices::OVERLAPPED* lpOverlapped, Windows::Win32::WinSock::LPWSAOVERLAPPED_COMPLETION_ROUTINE* lpCompletionRoutine)
    {
        auto win32_impl_result = WIN32_IMPL_WSASend(s, lpBuffers, dwBufferCount, lpNumberOfBytesSent, dwFlags, lpOverlapped, lpCompletionRoutine);
        return win32_impl_result;
    }
    inline int32_t WSASendMsg(size_t Handle, Windows::Win32::WinSock::WSAMSG* lpMsg, uint32_t dwFlags, uint32_t* lpNumberOfBytesSent, Windows::Win32::SystemServices::OVERLAPPED* lpOverlapped, Windows::Win32::WinSock::LPWSAOVERLAPPED_COMPLETION_ROUTINE* lpCompletionRoutine)
    {
        auto win32_impl_result = WIN32_IMPL_WSASendMsg(Handle, lpMsg, dwFlags, lpNumberOfBytesSent, lpOverlapped, lpCompletionRoutine);
        return win32_impl_result;
    }
    inline int32_t WSASendDisconnect(size_t s, Windows::Win32::WinSock::WSABUF* lpOutboundDisconnectData)
    {
        auto win32_impl_result = WIN32_IMPL_WSASendDisconnect(s, lpOutboundDisconnectData);
        return win32_impl_result;
    }
    inline int32_t WSASendTo(size_t s, Windows::Win32::WinSock::WSABUF* lpBuffers, uint32_t dwBufferCount, uint32_t* lpNumberOfBytesSent, uint32_t dwFlags, Windows::Win32::WinSock::SOCKADDR* lpTo, int32_t iTolen, Windows::Win32::SystemServices::OVERLAPPED* lpOverlapped, Windows::Win32::WinSock::LPWSAOVERLAPPED_COMPLETION_ROUTINE* lpCompletionRoutine)
    {
        auto win32_impl_result = WIN32_IMPL_WSASendTo(s, lpBuffers, dwBufferCount, lpNumberOfBytesSent, dwFlags, lpTo, iTolen, lpOverlapped, lpCompletionRoutine);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL WSASetEvent(Windows::Win32::SystemServices::HANDLE hEvent)
    {
        auto win32_impl_result = WIN32_IMPL_WSASetEvent(hEvent);
        return win32_impl_result;
    }
    inline size_t WSASocketA(int32_t af, int32_t type, int32_t protocol, Windows::Win32::WinSock::WSAPROTOCOL_INFOA* lpProtocolInfo, uint32_t g, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_WSASocketA(af, type, protocol, lpProtocolInfo, g, dwFlags);
        return win32_impl_result;
    }
    inline size_t WSASocketW(int32_t af, int32_t type, int32_t protocol, Windows::Win32::WinSock::WSAPROTOCOL_INFOW* lpProtocolInfo, uint32_t g, uint32_t dwFlags)
    {
        auto win32_impl_result = WIN32_IMPL_WSASocketW(af, type, protocol, lpProtocolInfo, g, dwFlags);
        return win32_impl_result;
    }
    inline uint32_t WSAWaitForMultipleEvents(uint32_t cEvents, intptr_t* lphEvents, Windows::Win32::SystemServices::BOOL fWaitAll, uint32_t dwTimeout, Windows::Win32::SystemServices::BOOL fAlertable)
    {
        auto win32_impl_result = WIN32_IMPL_WSAWaitForMultipleEvents(cEvents, lphEvents, fWaitAll, dwTimeout, fAlertable);
        return win32_impl_result;
    }
    inline int32_t WSAAddressToStringA(Windows::Win32::WinSock::SOCKADDR* lpsaAddress, uint32_t dwAddressLength, Windows::Win32::WinSock::WSAPROTOCOL_INFOA* lpProtocolInfo, int8_t* lpszAddressString, uint32_t* lpdwAddressStringLength)
    {
        auto win32_impl_result = WIN32_IMPL_WSAAddressToStringA(lpsaAddress, dwAddressLength, lpProtocolInfo, lpszAddressString, lpdwAddressStringLength);
        return win32_impl_result;
    }
    inline int32_t WSAAddressToStringW(Windows::Win32::WinSock::SOCKADDR* lpsaAddress, uint32_t dwAddressLength, Windows::Win32::WinSock::WSAPROTOCOL_INFOW* lpProtocolInfo, uint16_t* lpszAddressString, uint32_t* lpdwAddressStringLength)
    {
        auto win32_impl_result = WIN32_IMPL_WSAAddressToStringW(lpsaAddress, dwAddressLength, lpProtocolInfo, lpszAddressString, lpdwAddressStringLength);
        return win32_impl_result;
    }
    inline int32_t WSAStringToAddressA(int8_t* AddressString, int32_t AddressFamily, Windows::Win32::WinSock::WSAPROTOCOL_INFOA* lpProtocolInfo, Windows::Win32::WinSock::SOCKADDR* lpAddress, int32_t* lpAddressLength)
    {
        auto win32_impl_result = WIN32_IMPL_WSAStringToAddressA(AddressString, AddressFamily, lpProtocolInfo, lpAddress, lpAddressLength);
        return win32_impl_result;
    }
    inline int32_t WSAStringToAddressW(uint16_t* AddressString, int32_t AddressFamily, Windows::Win32::WinSock::WSAPROTOCOL_INFOW* lpProtocolInfo, Windows::Win32::WinSock::SOCKADDR* lpAddress, int32_t* lpAddressLength)
    {
        auto win32_impl_result = WIN32_IMPL_WSAStringToAddressW(AddressString, AddressFamily, lpProtocolInfo, lpAddress, lpAddressLength);
        return win32_impl_result;
    }
    inline int32_t WSALookupServiceBeginA(Windows::Win32::WinSock::WSAQUERYSETA* lpqsRestrictions, uint32_t dwControlFlags, intptr_t* lphLookup)
    {
        auto win32_impl_result = WIN32_IMPL_WSALookupServiceBeginA(lpqsRestrictions, dwControlFlags, lphLookup);
        return win32_impl_result;
    }
    inline int32_t WSALookupServiceBeginW(Windows::Win32::WinSock::WSAQUERYSETW* lpqsRestrictions, uint32_t dwControlFlags, intptr_t* lphLookup)
    {
        auto win32_impl_result = WIN32_IMPL_WSALookupServiceBeginW(lpqsRestrictions, dwControlFlags, lphLookup);
        return win32_impl_result;
    }
    inline int32_t WSALookupServiceNextA(Windows::Win32::SystemServices::HANDLE hLookup, uint32_t dwControlFlags, uint32_t* lpdwBufferLength, Windows::Win32::WinSock::WSAQUERYSETA* lpqsResults)
    {
        auto win32_impl_result = WIN32_IMPL_WSALookupServiceNextA(hLookup, dwControlFlags, lpdwBufferLength, lpqsResults);
        return win32_impl_result;
    }
    inline int32_t WSALookupServiceNextW(Windows::Win32::SystemServices::HANDLE hLookup, uint32_t dwControlFlags, uint32_t* lpdwBufferLength, Windows::Win32::WinSock::WSAQUERYSETW* lpqsResults)
    {
        auto win32_impl_result = WIN32_IMPL_WSALookupServiceNextW(hLookup, dwControlFlags, lpdwBufferLength, lpqsResults);
        return win32_impl_result;
    }
    inline int32_t WSANSPIoctl(Windows::Win32::SystemServices::HANDLE hLookup, uint32_t dwControlCode, void* lpvInBuffer, uint32_t cbInBuffer, void* lpvOutBuffer, uint32_t cbOutBuffer, uint32_t* lpcbBytesReturned, Windows::Win32::WinSock::WSACOMPLETION* lpCompletion)
    {
        auto win32_impl_result = WIN32_IMPL_WSANSPIoctl(hLookup, dwControlCode, lpvInBuffer, cbInBuffer, lpvOutBuffer, cbOutBuffer, lpcbBytesReturned, lpCompletion);
        return win32_impl_result;
    }
    inline int32_t WSALookupServiceEnd(Windows::Win32::SystemServices::HANDLE hLookup)
    {
        auto win32_impl_result = WIN32_IMPL_WSALookupServiceEnd(hLookup);
        return win32_impl_result;
    }
    inline int32_t WSAInstallServiceClassA(Windows::Win32::WinSock::WSASERVICECLASSINFOA* lpServiceClassInfo)
    {
        auto win32_impl_result = WIN32_IMPL_WSAInstallServiceClassA(lpServiceClassInfo);
        return win32_impl_result;
    }
    inline int32_t WSAInstallServiceClassW(Windows::Win32::WinSock::WSASERVICECLASSINFOW* lpServiceClassInfo)
    {
        auto win32_impl_result = WIN32_IMPL_WSAInstallServiceClassW(lpServiceClassInfo);
        return win32_impl_result;
    }
    inline int32_t WSARemoveServiceClass(::win32::guid* lpServiceClassId)
    {
        auto win32_impl_result = WIN32_IMPL_WSARemoveServiceClass(lpServiceClassId);
        return win32_impl_result;
    }
    inline int32_t WSAGetServiceClassInfoA(::win32::guid* lpProviderId, ::win32::guid* lpServiceClassId, uint32_t* lpdwBufSize, Windows::Win32::WinSock::WSASERVICECLASSINFOA* lpServiceClassInfo)
    {
        auto win32_impl_result = WIN32_IMPL_WSAGetServiceClassInfoA(lpProviderId, lpServiceClassId, lpdwBufSize, lpServiceClassInfo);
        return win32_impl_result;
    }
    inline int32_t WSAGetServiceClassInfoW(::win32::guid* lpProviderId, ::win32::guid* lpServiceClassId, uint32_t* lpdwBufSize, Windows::Win32::WinSock::WSASERVICECLASSINFOW* lpServiceClassInfo)
    {
        auto win32_impl_result = WIN32_IMPL_WSAGetServiceClassInfoW(lpProviderId, lpServiceClassId, lpdwBufSize, lpServiceClassInfo);
        return win32_impl_result;
    }
    inline int32_t WSAEnumNameSpaceProvidersA(uint32_t* lpdwBufferLength, Windows::Win32::WinSock::WSANAMESPACE_INFOA* lpnspBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_WSAEnumNameSpaceProvidersA(lpdwBufferLength, lpnspBuffer);
        return win32_impl_result;
    }
    inline int32_t WSAEnumNameSpaceProvidersW(uint32_t* lpdwBufferLength, Windows::Win32::WinSock::WSANAMESPACE_INFOW* lpnspBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_WSAEnumNameSpaceProvidersW(lpdwBufferLength, lpnspBuffer);
        return win32_impl_result;
    }
    inline int32_t WSAEnumNameSpaceProvidersExA(uint32_t* lpdwBufferLength, Windows::Win32::WinSock::WSANAMESPACE_INFOEXA* lpnspBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_WSAEnumNameSpaceProvidersExA(lpdwBufferLength, lpnspBuffer);
        return win32_impl_result;
    }
    inline int32_t WSAEnumNameSpaceProvidersExW(uint32_t* lpdwBufferLength, Windows::Win32::WinSock::WSANAMESPACE_INFOEXW* lpnspBuffer)
    {
        auto win32_impl_result = WIN32_IMPL_WSAEnumNameSpaceProvidersExW(lpdwBufferLength, lpnspBuffer);
        return win32_impl_result;
    }
    inline int32_t WSAGetServiceClassNameByClassIdA(::win32::guid* lpServiceClassId, int8_t* lpszServiceClassName, uint32_t* lpdwBufferLength)
    {
        auto win32_impl_result = WIN32_IMPL_WSAGetServiceClassNameByClassIdA(lpServiceClassId, lpszServiceClassName, lpdwBufferLength);
        return win32_impl_result;
    }
    inline int32_t WSAGetServiceClassNameByClassIdW(::win32::guid* lpServiceClassId, uint16_t* lpszServiceClassName, uint32_t* lpdwBufferLength)
    {
        auto win32_impl_result = WIN32_IMPL_WSAGetServiceClassNameByClassIdW(lpServiceClassId, lpszServiceClassName, lpdwBufferLength);
        return win32_impl_result;
    }
    inline int32_t WSASetServiceA(Windows::Win32::WinSock::WSAQUERYSETA* lpqsRegInfo, Windows::Win32::WinSock::WSAESETSERVICEOP essoperation, uint32_t dwControlFlags)
    {
        auto win32_impl_result = WIN32_IMPL_WSASetServiceA(lpqsRegInfo, essoperation, dwControlFlags);
        return win32_impl_result;
    }
    inline int32_t WSASetServiceW(Windows::Win32::WinSock::WSAQUERYSETW* lpqsRegInfo, Windows::Win32::WinSock::WSAESETSERVICEOP essoperation, uint32_t dwControlFlags)
    {
        auto win32_impl_result = WIN32_IMPL_WSASetServiceW(lpqsRegInfo, essoperation, dwControlFlags);
        return win32_impl_result;
    }
    inline int32_t WSAProviderConfigChange(intptr_t* lpNotificationHandle, Windows::Win32::SystemServices::OVERLAPPED* lpOverlapped, Windows::Win32::WinSock::LPWSAOVERLAPPED_COMPLETION_ROUTINE* lpCompletionRoutine)
    {
        auto win32_impl_result = WIN32_IMPL_WSAProviderConfigChange(lpNotificationHandle, lpOverlapped, lpCompletionRoutine);
        return win32_impl_result;
    }
    inline int32_t WSAPoll(Windows::Win32::WinSock::WSAPOLLFD* fdArray, uint32_t fds, int32_t timeout)
    {
        auto win32_impl_result = WIN32_IMPL_WSAPoll(fdArray, fds, timeout);
        return win32_impl_result;
    }
    inline int32_t RtlIpv4AddressToStringExA(Windows::Win32::WinSock::in_addr* Address, uint16_t Port, int8_t* AddressString, uint32_t* AddressStringLength)
    {
        auto win32_impl_result = WIN32_IMPL_RtlIpv4AddressToStringExA(Address, Port, AddressString, AddressStringLength);
        return win32_impl_result;
    }
    inline int32_t RtlIpv4StringToAddressExA(int8_t* AddressString, uint8_t Strict, Windows::Win32::WinSock::in_addr* Address, uint16_t* Port)
    {
        auto win32_impl_result = WIN32_IMPL_RtlIpv4StringToAddressExA(AddressString, Strict, Address, Port);
        return win32_impl_result;
    }
    inline int32_t RtlIpv6AddressToStringExA(Windows::Win32::WinSock::in6_addr* Address, uint32_t ScopeId, uint16_t Port, int8_t* AddressString, uint32_t* AddressStringLength)
    {
        auto win32_impl_result = WIN32_IMPL_RtlIpv6AddressToStringExA(Address, ScopeId, Port, AddressString, AddressStringLength);
        return win32_impl_result;
    }
    inline int32_t RtlIpv6StringToAddressExA(int8_t* AddressString, Windows::Win32::WinSock::in6_addr* Address, uint32_t* ScopeId, uint16_t* Port)
    {
        auto win32_impl_result = WIN32_IMPL_RtlIpv6StringToAddressExA(AddressString, Address, ScopeId, Port);
        return win32_impl_result;
    }
    inline int32_t WSARecvEx(size_t s, int8_t* buf, int32_t len, int32_t* flags)
    {
        auto win32_impl_result = WIN32_IMPL_WSARecvEx(s, buf, len, flags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL TransmitFile(size_t hSocket, Windows::Win32::SystemServices::HANDLE hFile, uint32_t nNumberOfBytesToWrite, uint32_t nNumberOfBytesPerSend, Windows::Win32::SystemServices::OVERLAPPED* lpOverlapped, Windows::Win32::WinSock::TRANSMIT_FILE_BUFFERS* lpTransmitBuffers, uint32_t dwReserved)
    {
        auto win32_impl_result = WIN32_IMPL_TransmitFile(hSocket, hFile, nNumberOfBytesToWrite, nNumberOfBytesPerSend, lpOverlapped, lpTransmitBuffers, dwReserved);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::BOOL AcceptEx(size_t sListenSocket, size_t sAcceptSocket, void* lpOutputBuffer, uint32_t dwReceiveDataLength, uint32_t dwLocalAddressLength, uint32_t dwRemoteAddressLength, uint32_t* lpdwBytesReceived, Windows::Win32::SystemServices::OVERLAPPED* lpOverlapped)
    {
        auto win32_impl_result = WIN32_IMPL_AcceptEx(sListenSocket, sAcceptSocket, lpOutputBuffer, dwReceiveDataLength, dwLocalAddressLength, dwRemoteAddressLength, lpdwBytesReceived, lpOverlapped);
        return win32_impl_result;
    }
    inline void GetAcceptExSockaddrs(void* lpOutputBuffer, uint32_t dwReceiveDataLength, uint32_t dwLocalAddressLength, uint32_t dwRemoteAddressLength, Windows::Win32::WinSock::SOCKADDR** LocalSockaddr, int32_t* LocalSockaddrLength, Windows::Win32::WinSock::SOCKADDR** RemoteSockaddr, int32_t* RemoteSockaddrLength)
    {
        WIN32_IMPL_GetAcceptExSockaddrs(lpOutputBuffer, dwReceiveDataLength, dwLocalAddressLength, dwRemoteAddressLength, LocalSockaddr, LocalSockaddrLength, RemoteSockaddr, RemoteSockaddrLength);
    }
    inline int32_t WSCEnumProtocols(int32_t* lpiProtocols, Windows::Win32::WinSock::WSAPROTOCOL_INFOW* lpProtocolBuffer, uint32_t* lpdwBufferLength, int32_t* lpErrno)
    {
        auto win32_impl_result = WIN32_IMPL_WSCEnumProtocols(lpiProtocols, lpProtocolBuffer, lpdwBufferLength, lpErrno);
        return win32_impl_result;
    }
    inline int32_t WSCDeinstallProvider(::win32::guid* lpProviderId, int32_t* lpErrno)
    {
        auto win32_impl_result = WIN32_IMPL_WSCDeinstallProvider(lpProviderId, lpErrno);
        return win32_impl_result;
    }
    inline int32_t WSCInstallProvider(::win32::guid* lpProviderId, uint16_t* lpszProviderDllPath, Windows::Win32::WinSock::WSAPROTOCOL_INFOW* lpProtocolInfoList, uint32_t dwNumberOfEntries, int32_t* lpErrno)
    {
        auto win32_impl_result = WIN32_IMPL_WSCInstallProvider(lpProviderId, lpszProviderDllPath, lpProtocolInfoList, dwNumberOfEntries, lpErrno);
        return win32_impl_result;
    }
    inline int32_t WSCGetProviderPath(::win32::guid* lpProviderId, uint16_t* lpszProviderDllPath, int32_t* lpProviderDllPathLen, int32_t* lpErrno)
    {
        auto win32_impl_result = WIN32_IMPL_WSCGetProviderPath(lpProviderId, lpszProviderDllPath, lpProviderDllPathLen, lpErrno);
        return win32_impl_result;
    }
    inline int32_t WSCUpdateProvider(::win32::guid* lpProviderId, uint16_t* lpszProviderDllPath, Windows::Win32::WinSock::WSAPROTOCOL_INFOW* lpProtocolInfoList, uint32_t dwNumberOfEntries, int32_t* lpErrno)
    {
        auto win32_impl_result = WIN32_IMPL_WSCUpdateProvider(lpProviderId, lpszProviderDllPath, lpProtocolInfoList, dwNumberOfEntries, lpErrno);
        return win32_impl_result;
    }
    inline int32_t WSCSetProviderInfo(::win32::guid* lpProviderId, Windows::Win32::WinSock::WSC_PROVIDER_INFO_TYPE InfoType, uint8_t* Info, size_t InfoSize, uint32_t Flags, int32_t* lpErrno)
    {
        auto win32_impl_result = WIN32_IMPL_WSCSetProviderInfo(lpProviderId, InfoType, Info, InfoSize, Flags, lpErrno);
        return win32_impl_result;
    }
    inline int32_t WSCGetProviderInfo(::win32::guid* lpProviderId, Windows::Win32::WinSock::WSC_PROVIDER_INFO_TYPE InfoType, uint8_t* Info, size_t* InfoSize, uint32_t Flags, int32_t* lpErrno)
    {
        auto win32_impl_result = WIN32_IMPL_WSCGetProviderInfo(lpProviderId, InfoType, Info, InfoSize, Flags, lpErrno);
        return win32_impl_result;
    }
    inline int32_t WSCSetApplicationCategory(uint16_t* Path, uint32_t PathLength, uint16_t* Extra, uint32_t ExtraLength, uint32_t PermittedLspCategories, uint32_t* pPrevPermLspCat, int32_t* lpErrno)
    {
        auto win32_impl_result = WIN32_IMPL_WSCSetApplicationCategory(Path, PathLength, Extra, ExtraLength, PermittedLspCategories, pPrevPermLspCat, lpErrno);
        return win32_impl_result;
    }
    inline int32_t WSCGetApplicationCategory(uint16_t* Path, uint32_t PathLength, uint16_t* Extra, uint32_t ExtraLength, uint32_t* pPermittedLspCategories, int32_t* lpErrno)
    {
        auto win32_impl_result = WIN32_IMPL_WSCGetApplicationCategory(Path, PathLength, Extra, ExtraLength, pPermittedLspCategories, lpErrno);
        return win32_impl_result;
    }
    inline int32_t WPUCompleteOverlappedRequest(size_t s, Windows::Win32::SystemServices::OVERLAPPED* lpOverlapped, uint32_t dwError, uint32_t cbTransferred, int32_t* lpErrno)
    {
        auto win32_impl_result = WIN32_IMPL_WPUCompleteOverlappedRequest(s, lpOverlapped, dwError, cbTransferred, lpErrno);
        return win32_impl_result;
    }
    inline int32_t WSCInstallNameSpace(uint16_t* lpszIdentifier, uint16_t* lpszPathName, uint32_t dwNameSpace, uint32_t dwVersion, ::win32::guid* lpProviderId)
    {
        auto win32_impl_result = WIN32_IMPL_WSCInstallNameSpace(lpszIdentifier, lpszPathName, dwNameSpace, dwVersion, lpProviderId);
        return win32_impl_result;
    }
    inline int32_t WSCUnInstallNameSpace(::win32::guid* lpProviderId)
    {
        auto win32_impl_result = WIN32_IMPL_WSCUnInstallNameSpace(lpProviderId);
        return win32_impl_result;
    }
    inline int32_t WSCInstallNameSpaceEx(uint16_t* lpszIdentifier, uint16_t* lpszPathName, uint32_t dwNameSpace, uint32_t dwVersion, ::win32::guid* lpProviderId, Windows::Win32::WinSock::BLOB* lpProviderSpecific)
    {
        auto win32_impl_result = WIN32_IMPL_WSCInstallNameSpaceEx(lpszIdentifier, lpszPathName, dwNameSpace, dwVersion, lpProviderId, lpProviderSpecific);
        return win32_impl_result;
    }
    inline int32_t WSCEnableNSProvider(::win32::guid* lpProviderId, Windows::Win32::SystemServices::BOOL fEnable)
    {
        auto win32_impl_result = WIN32_IMPL_WSCEnableNSProvider(lpProviderId, fEnable);
        return win32_impl_result;
    }
    inline int32_t WSAAdvertiseProvider(::win32::guid* puuidProviderId, Windows::Win32::WinSock::NSPV2_ROUTINE* pNSPv2Routine)
    {
        auto win32_impl_result = WIN32_IMPL_WSAAdvertiseProvider(puuidProviderId, pNSPv2Routine);
        return win32_impl_result;
    }
    inline int32_t WSAUnadvertiseProvider(::win32::guid* puuidProviderId)
    {
        auto win32_impl_result = WIN32_IMPL_WSAUnadvertiseProvider(puuidProviderId);
        return win32_impl_result;
    }
    inline int32_t WSAProviderCompleteAsyncCall(Windows::Win32::SystemServices::HANDLE hAsyncCall, int32_t iRetCode)
    {
        auto win32_impl_result = WIN32_IMPL_WSAProviderCompleteAsyncCall(hAsyncCall, iRetCode);
        return win32_impl_result;
    }
    inline int32_t EnumProtocolsA(int32_t* lpiProtocols, void* lpProtocolBuffer, uint32_t* lpdwBufferLength)
    {
        auto win32_impl_result = WIN32_IMPL_EnumProtocolsA(lpiProtocols, lpProtocolBuffer, lpdwBufferLength);
        return win32_impl_result;
    }
    inline int32_t EnumProtocolsW(int32_t* lpiProtocols, void* lpProtocolBuffer, uint32_t* lpdwBufferLength)
    {
        auto win32_impl_result = WIN32_IMPL_EnumProtocolsW(lpiProtocols, lpProtocolBuffer, lpdwBufferLength);
        return win32_impl_result;
    }
    inline int32_t GetAddressByNameA(uint32_t dwNameSpace, ::win32::guid* lpServiceType, int8_t* lpServiceName, int32_t* lpiProtocols, uint32_t dwResolution, Windows::Win32::WinSock::SERVICE_ASYNC_INFO* lpServiceAsyncInfo, void* lpCsaddrBuffer, uint32_t* lpdwBufferLength, int8_t* lpAliasBuffer, uint32_t* lpdwAliasBufferLength)
    {
        auto win32_impl_result = WIN32_IMPL_GetAddressByNameA(dwNameSpace, lpServiceType, lpServiceName, lpiProtocols, dwResolution, lpServiceAsyncInfo, lpCsaddrBuffer, lpdwBufferLength, lpAliasBuffer, lpdwAliasBufferLength);
        return win32_impl_result;
    }
    inline int32_t GetAddressByNameW(uint32_t dwNameSpace, ::win32::guid* lpServiceType, uint16_t* lpServiceName, int32_t* lpiProtocols, uint32_t dwResolution, Windows::Win32::WinSock::SERVICE_ASYNC_INFO* lpServiceAsyncInfo, void* lpCsaddrBuffer, uint32_t* lpdwBufferLength, uint16_t* lpAliasBuffer, uint32_t* lpdwAliasBufferLength)
    {
        auto win32_impl_result = WIN32_IMPL_GetAddressByNameW(dwNameSpace, lpServiceType, lpServiceName, lpiProtocols, dwResolution, lpServiceAsyncInfo, lpCsaddrBuffer, lpdwBufferLength, lpAliasBuffer, lpdwAliasBufferLength);
        return win32_impl_result;
    }
    inline int32_t GetTypeByNameA(int8_t* lpServiceName, ::win32::guid* lpServiceType)
    {
        auto win32_impl_result = WIN32_IMPL_GetTypeByNameA(lpServiceName, lpServiceType);
        return win32_impl_result;
    }
    inline int32_t GetTypeByNameW(uint16_t* lpServiceName, ::win32::guid* lpServiceType)
    {
        auto win32_impl_result = WIN32_IMPL_GetTypeByNameW(lpServiceName, lpServiceType);
        return win32_impl_result;
    }
    inline int32_t GetNameByTypeA(::win32::guid* lpServiceType, int8_t* lpServiceName, uint32_t dwNameLength)
    {
        auto win32_impl_result = WIN32_IMPL_GetNameByTypeA(lpServiceType, lpServiceName, dwNameLength);
        return win32_impl_result;
    }
    inline int32_t GetNameByTypeW(::win32::guid* lpServiceType, uint16_t* lpServiceName, uint32_t dwNameLength)
    {
        auto win32_impl_result = WIN32_IMPL_GetNameByTypeW(lpServiceType, lpServiceName, dwNameLength);
        return win32_impl_result;
    }
    inline int32_t SetServiceA(uint32_t dwNameSpace, uint32_t dwOperation, uint32_t dwFlags, Windows::Win32::WinSock::SERVICE_INFOA* lpServiceInfo, Windows::Win32::WinSock::SERVICE_ASYNC_INFO* lpServiceAsyncInfo, uint32_t* lpdwStatusFlags)
    {
        auto win32_impl_result = WIN32_IMPL_SetServiceA(dwNameSpace, dwOperation, dwFlags, lpServiceInfo, lpServiceAsyncInfo, lpdwStatusFlags);
        return win32_impl_result;
    }
    inline int32_t SetServiceW(uint32_t dwNameSpace, uint32_t dwOperation, uint32_t dwFlags, Windows::Win32::WinSock::SERVICE_INFOW* lpServiceInfo, Windows::Win32::WinSock::SERVICE_ASYNC_INFO* lpServiceAsyncInfo, uint32_t* lpdwStatusFlags)
    {
        auto win32_impl_result = WIN32_IMPL_SetServiceW(dwNameSpace, dwOperation, dwFlags, lpServiceInfo, lpServiceAsyncInfo, lpdwStatusFlags);
        return win32_impl_result;
    }
    inline int32_t GetServiceA(uint32_t dwNameSpace, ::win32::guid* lpGuid, int8_t* lpServiceName, uint32_t dwProperties, void* lpBuffer, uint32_t* lpdwBufferSize, Windows::Win32::WinSock::SERVICE_ASYNC_INFO* lpServiceAsyncInfo)
    {
        auto win32_impl_result = WIN32_IMPL_GetServiceA(dwNameSpace, lpGuid, lpServiceName, dwProperties, lpBuffer, lpdwBufferSize, lpServiceAsyncInfo);
        return win32_impl_result;
    }
    inline int32_t GetServiceW(uint32_t dwNameSpace, ::win32::guid* lpGuid, uint16_t* lpServiceName, uint32_t dwProperties, void* lpBuffer, uint32_t* lpdwBufferSize, Windows::Win32::WinSock::SERVICE_ASYNC_INFO* lpServiceAsyncInfo)
    {
        auto win32_impl_result = WIN32_IMPL_GetServiceW(dwNameSpace, lpGuid, lpServiceName, dwProperties, lpBuffer, lpdwBufferSize, lpServiceAsyncInfo);
        return win32_impl_result;
    }
    inline int32_t getaddrinfo(int8_t* pNodeName, int8_t* pServiceName, Windows::Win32::WinSock::ADDRINFOA* pHints, Windows::Win32::WinSock::ADDRINFOA** ppResult)
    {
        auto win32_impl_result = WIN32_IMPL_getaddrinfo(pNodeName, pServiceName, pHints, ppResult);
        return win32_impl_result;
    }
    inline int32_t GetAddrInfoW(uint16_t* pNodeName, uint16_t* pServiceName, Windows::Win32::WinSock::addrinfoW* pHints, Windows::Win32::WinSock::addrinfoW** ppResult)
    {
        auto win32_impl_result = WIN32_IMPL_GetAddrInfoW(pNodeName, pServiceName, pHints, ppResult);
        return win32_impl_result;
    }
    inline int32_t GetAddrInfoExA(int8_t* pName, int8_t* pServiceName, uint32_t dwNameSpace, ::win32::guid* lpNspId, Windows::Win32::WinSock::addrinfoexA* hints, Windows::Win32::WinSock::addrinfoexA** ppResult, Windows::Win32::WinSock::timeval* timeout, Windows::Win32::SystemServices::OVERLAPPED* lpOverlapped, Windows::Win32::WinSock::LPLOOKUPSERVICE_COMPLETION_ROUTINE* lpCompletionRoutine, intptr_t* lpNameHandle)
    {
        auto win32_impl_result = WIN32_IMPL_GetAddrInfoExA(pName, pServiceName, dwNameSpace, lpNspId, hints, ppResult, timeout, lpOverlapped, lpCompletionRoutine, lpNameHandle);
        return win32_impl_result;
    }
    inline int32_t GetAddrInfoExW(uint16_t* pName, uint16_t* pServiceName, uint32_t dwNameSpace, ::win32::guid* lpNspId, Windows::Win32::WinSock::addrinfoexW* hints, Windows::Win32::WinSock::addrinfoexW** ppResult, Windows::Win32::WinSock::timeval* timeout, Windows::Win32::SystemServices::OVERLAPPED* lpOverlapped, Windows::Win32::WinSock::LPLOOKUPSERVICE_COMPLETION_ROUTINE* lpCompletionRoutine, intptr_t* lpHandle)
    {
        auto win32_impl_result = WIN32_IMPL_GetAddrInfoExW(pName, pServiceName, dwNameSpace, lpNspId, hints, ppResult, timeout, lpOverlapped, lpCompletionRoutine, lpHandle);
        return win32_impl_result;
    }
    inline int32_t GetAddrInfoExCancel(intptr_t* lpHandle)
    {
        auto win32_impl_result = WIN32_IMPL_GetAddrInfoExCancel(lpHandle);
        return win32_impl_result;
    }
    inline int32_t GetAddrInfoExOverlappedResult(Windows::Win32::SystemServices::OVERLAPPED* lpOverlapped)
    {
        auto win32_impl_result = WIN32_IMPL_GetAddrInfoExOverlappedResult(lpOverlapped);
        return win32_impl_result;
    }
    inline int32_t SetAddrInfoExA(int8_t* pName, int8_t* pServiceName, Windows::Win32::WinSock::SOCKET_ADDRESS* pAddresses, uint32_t dwAddressCount, Windows::Win32::WinSock::BLOB* lpBlob, uint32_t dwFlags, uint32_t dwNameSpace, ::win32::guid* lpNspId, Windows::Win32::WinSock::timeval* timeout, Windows::Win32::SystemServices::OVERLAPPED* lpOverlapped, Windows::Win32::WinSock::LPLOOKUPSERVICE_COMPLETION_ROUTINE* lpCompletionRoutine, intptr_t* lpNameHandle)
    {
        auto win32_impl_result = WIN32_IMPL_SetAddrInfoExA(pName, pServiceName, pAddresses, dwAddressCount, lpBlob, dwFlags, dwNameSpace, lpNspId, timeout, lpOverlapped, lpCompletionRoutine, lpNameHandle);
        return win32_impl_result;
    }
    inline int32_t SetAddrInfoExW(uint16_t* pName, uint16_t* pServiceName, Windows::Win32::WinSock::SOCKET_ADDRESS* pAddresses, uint32_t dwAddressCount, Windows::Win32::WinSock::BLOB* lpBlob, uint32_t dwFlags, uint32_t dwNameSpace, ::win32::guid* lpNspId, Windows::Win32::WinSock::timeval* timeout, Windows::Win32::SystemServices::OVERLAPPED* lpOverlapped, Windows::Win32::WinSock::LPLOOKUPSERVICE_COMPLETION_ROUTINE* lpCompletionRoutine, intptr_t* lpNameHandle)
    {
        auto win32_impl_result = WIN32_IMPL_SetAddrInfoExW(pName, pServiceName, pAddresses, dwAddressCount, lpBlob, dwFlags, dwNameSpace, lpNspId, timeout, lpOverlapped, lpCompletionRoutine, lpNameHandle);
        return win32_impl_result;
    }
    inline void freeaddrinfo(Windows::Win32::WinSock::ADDRINFOA* pAddrInfo)
    {
        WIN32_IMPL_freeaddrinfo(pAddrInfo);
    }
    inline void FreeAddrInfoW(Windows::Win32::WinSock::addrinfoW* pAddrInfo)
    {
        WIN32_IMPL_FreeAddrInfoW(pAddrInfo);
    }
    inline void FreeAddrInfoEx(Windows::Win32::WinSock::addrinfoexA* pAddrInfoEx)
    {
        WIN32_IMPL_FreeAddrInfoEx(pAddrInfoEx);
    }
    inline void FreeAddrInfoExW(Windows::Win32::WinSock::addrinfoexW* pAddrInfoEx)
    {
        WIN32_IMPL_FreeAddrInfoExW(pAddrInfoEx);
    }
    inline int32_t getnameinfo(Windows::Win32::WinSock::SOCKADDR* pSockaddr, int32_t SockaddrLength, int8_t* pNodeBuffer, uint32_t NodeBufferSize, int8_t* pServiceBuffer, uint32_t ServiceBufferSize, int32_t Flags)
    {
        auto win32_impl_result = WIN32_IMPL_getnameinfo(pSockaddr, SockaddrLength, pNodeBuffer, NodeBufferSize, pServiceBuffer, ServiceBufferSize, Flags);
        return win32_impl_result;
    }
    inline int32_t GetNameInfoW(Windows::Win32::WinSock::SOCKADDR* pSockaddr, int32_t SockaddrLength, uint16_t* pNodeBuffer, uint32_t NodeBufferSize, uint16_t* pServiceBuffer, uint32_t ServiceBufferSize, int32_t Flags)
    {
        auto win32_impl_result = WIN32_IMPL_GetNameInfoW(pSockaddr, SockaddrLength, pNodeBuffer, NodeBufferSize, pServiceBuffer, ServiceBufferSize, Flags);
        return win32_impl_result;
    }
    inline int32_t inet_pton(int32_t Family, int8_t* pszAddrString, void* pAddrBuf)
    {
        auto win32_impl_result = WIN32_IMPL_inet_pton(Family, pszAddrString, pAddrBuf);
        return win32_impl_result;
    }
    inline int32_t InetPtonW(int32_t Family, uint16_t* pszAddrString, void* pAddrBuf)
    {
        auto win32_impl_result = WIN32_IMPL_InetPtonW(Family, pszAddrString, pAddrBuf);
        return win32_impl_result;
    }
    inline int8_t* inet_ntop(int32_t Family, void* pAddr, int8_t* pStringBuf, size_t StringBufSize)
    {
        auto win32_impl_result = WIN32_IMPL_inet_ntop(Family, pAddr, pStringBuf, StringBufSize);
        return win32_impl_result;
    }
    inline uint16_t* InetNtopW(int32_t Family, void* pAddr, uint16_t* pStringBuf, size_t StringBufSize)
    {
        auto win32_impl_result = WIN32_IMPL_InetNtopW(Family, pAddr, pStringBuf, StringBufSize);
        return win32_impl_result;
    }
    inline int32_t WSASetSocketSecurity(size_t Socket, Windows::Win32::WinSock::SOCKET_SECURITY_SETTINGS* SecuritySettings, uint32_t SecuritySettingsLen, Windows::Win32::SystemServices::OVERLAPPED* Overlapped, Windows::Win32::WinSock::LPWSAOVERLAPPED_COMPLETION_ROUTINE* CompletionRoutine)
    {
        auto win32_impl_result = WIN32_IMPL_WSASetSocketSecurity(Socket, SecuritySettings, SecuritySettingsLen, Overlapped, CompletionRoutine);
        return win32_impl_result;
    }
    inline int32_t WSAQuerySocketSecurity(size_t Socket, Windows::Win32::WinSock::SOCKET_SECURITY_QUERY_TEMPLATE* SecurityQueryTemplate, uint32_t SecurityQueryTemplateLen, Windows::Win32::WinSock::SOCKET_SECURITY_QUERY_INFO* SecurityQueryInfo, uint32_t* SecurityQueryInfoLen, Windows::Win32::SystemServices::OVERLAPPED* Overlapped, Windows::Win32::WinSock::LPWSAOVERLAPPED_COMPLETION_ROUTINE* CompletionRoutine)
    {
        auto win32_impl_result = WIN32_IMPL_WSAQuerySocketSecurity(Socket, SecurityQueryTemplate, SecurityQueryTemplateLen, SecurityQueryInfo, SecurityQueryInfoLen, Overlapped, CompletionRoutine);
        return win32_impl_result;
    }
    inline int32_t WSASetSocketPeerTargetName(size_t Socket, Windows::Win32::WinSock::SOCKET_PEER_TARGET_NAME* PeerTargetName, uint32_t PeerTargetNameLen, Windows::Win32::SystemServices::OVERLAPPED* Overlapped, Windows::Win32::WinSock::LPWSAOVERLAPPED_COMPLETION_ROUTINE* CompletionRoutine)
    {
        auto win32_impl_result = WIN32_IMPL_WSASetSocketPeerTargetName(Socket, PeerTargetName, PeerTargetNameLen, Overlapped, CompletionRoutine);
        return win32_impl_result;
    }
    inline int32_t WSADeleteSocketPeerTargetName(size_t Socket, Windows::Win32::WinSock::SOCKADDR* PeerAddr, uint32_t PeerAddrLen, Windows::Win32::SystemServices::OVERLAPPED* Overlapped, Windows::Win32::WinSock::LPWSAOVERLAPPED_COMPLETION_ROUTINE* CompletionRoutine)
    {
        auto win32_impl_result = WIN32_IMPL_WSADeleteSocketPeerTargetName(Socket, PeerAddr, PeerAddrLen, Overlapped, CompletionRoutine);
        return win32_impl_result;
    }
    inline int32_t WSAImpersonateSocketPeer(size_t Socket, Windows::Win32::WinSock::SOCKADDR* PeerAddr, uint32_t PeerAddrLen)
    {
        auto win32_impl_result = WIN32_IMPL_WSAImpersonateSocketPeer(Socket, PeerAddr, PeerAddrLen);
        return win32_impl_result;
    }
    inline int32_t WSARevertImpersonation()
    {
        auto win32_impl_result = WIN32_IMPL_WSARevertImpersonation();
        return win32_impl_result;
    }
    inline int32_t SetSocketMediaStreamingMode(Windows::Win32::SystemServices::BOOL value)
    {
        auto win32_impl_result = WIN32_IMPL_SetSocketMediaStreamingMode(value);
        return win32_impl_result;
    }
    inline int32_t WSCWriteProviderOrder(uint32_t* lpwdCatalogEntryId, uint32_t dwNumberOfEntries)
    {
        auto win32_impl_result = WIN32_IMPL_WSCWriteProviderOrder(lpwdCatalogEntryId, dwNumberOfEntries);
        return win32_impl_result;
    }
    inline int32_t WSCWriteNameSpaceOrder(::win32::guid* lpProviderId, uint32_t dwNumberOfEntries)
    {
        auto win32_impl_result = WIN32_IMPL_WSCWriteNameSpaceOrder(lpProviderId, dwNumberOfEntries);
        return win32_impl_result;
    }

    inline constexpr int32_t LM_HB_Extension = 128;
    inline constexpr int32_t LM_HB1_PnP = 1;
    inline constexpr int32_t LM_HB1_PDA_Palmtop = 2;
    inline constexpr int32_t LM_HB1_Computer = 4;
    inline constexpr int32_t LM_HB1_Printer = 8;
    inline constexpr int32_t LM_HB1_Modem = 16;
    inline constexpr int32_t LM_HB1_Fax = 32;
    inline constexpr int32_t LM_HB1_LANAccess = 64;
    inline constexpr int32_t LM_HB2_Telephony = 1;
    inline constexpr int32_t LM_HB2_FileServer = 2;
#pragma endregion methods

}
#endif
