// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_WindowsBiometricFramework_H
#define WIN32_Windows_Win32_WindowsBiometricFramework_H
#include "win32/base.h"
static_assert(win32::check_version(CPPWIN32_VERSION, "0.0.0.1"), "Mismatched C++/Win32 headers.");
#define CPPWIN32_VERSION "0.0.0.1"
#include "win32/impl/Windows.Win32.WindowsBiometricFramework.2.h"
WIN32_EXPORT namespace win32::Windows::Win32::WindowsBiometricFramework
{
#pragma region methods
    inline int32_t WinBioEnumServiceProviders(uint32_t Factor, Windows::Win32::WindowsBiometricFramework::WINBIO_BSP_SCHEMA** BspSchemaArray, size_t* BspCount)
    {
        auto win32_impl_result = WIN32_IMPL_WinBioEnumServiceProviders(Factor, BspSchemaArray, BspCount);
        return win32_impl_result;
    }
    inline int32_t WinBioEnumBiometricUnits(uint32_t Factor, Windows::Win32::WindowsBiometricFramework::WINBIO_UNIT_SCHEMA** UnitSchemaArray, size_t* UnitCount)
    {
        auto win32_impl_result = WIN32_IMPL_WinBioEnumBiometricUnits(Factor, UnitSchemaArray, UnitCount);
        return win32_impl_result;
    }
    inline int32_t WinBioEnumDatabases(uint32_t Factor, Windows::Win32::WindowsBiometricFramework::WINBIO_STORAGE_SCHEMA** StorageSchemaArray, size_t* StorageCount)
    {
        auto win32_impl_result = WIN32_IMPL_WinBioEnumDatabases(Factor, StorageSchemaArray, StorageCount);
        return win32_impl_result;
    }
    inline int32_t WinBioAsyncOpenFramework(Windows::Win32::WindowsBiometricFramework::WINBIO_ASYNC_NOTIFICATION_METHOD NotificationMethod, Windows::Win32::WindowsAndMessaging::HWND TargetWindow, uint32_t MessageCode, Windows::Win32::WindowsBiometricFramework::PWINBIO_ASYNC_COMPLETION_CALLBACK* CallbackRoutine, void* UserData, Windows::Win32::SystemServices::BOOL AsynchronousOpen, uint32_t* FrameworkHandle)
    {
        auto win32_impl_result = WIN32_IMPL_WinBioAsyncOpenFramework(NotificationMethod, TargetWindow, MessageCode, CallbackRoutine, UserData, AsynchronousOpen, FrameworkHandle);
        return win32_impl_result;
    }
    inline int32_t WinBioCloseFramework(uint32_t FrameworkHandle)
    {
        auto win32_impl_result = WIN32_IMPL_WinBioCloseFramework(FrameworkHandle);
        return win32_impl_result;
    }
    inline int32_t WinBioAsyncEnumServiceProviders(uint32_t FrameworkHandle, uint32_t Factor)
    {
        auto win32_impl_result = WIN32_IMPL_WinBioAsyncEnumServiceProviders(FrameworkHandle, Factor);
        return win32_impl_result;
    }
    inline int32_t WinBioAsyncEnumBiometricUnits(uint32_t FrameworkHandle, uint32_t Factor)
    {
        auto win32_impl_result = WIN32_IMPL_WinBioAsyncEnumBiometricUnits(FrameworkHandle, Factor);
        return win32_impl_result;
    }
    inline int32_t WinBioAsyncEnumDatabases(uint32_t FrameworkHandle, uint32_t Factor)
    {
        auto win32_impl_result = WIN32_IMPL_WinBioAsyncEnumDatabases(FrameworkHandle, Factor);
        return win32_impl_result;
    }
    inline int32_t WinBioAsyncMonitorFrameworkChanges(uint32_t FrameworkHandle, uint32_t ChangeTypes)
    {
        auto win32_impl_result = WIN32_IMPL_WinBioAsyncMonitorFrameworkChanges(FrameworkHandle, ChangeTypes);
        return win32_impl_result;
    }
    inline int32_t WinBioOpenSession(uint32_t Factor, uint32_t PoolType, uint32_t Flags, uint32_t* UnitArray, size_t UnitCount, ::win32::guid* DatabaseId, uint32_t* SessionHandle)
    {
        auto win32_impl_result = WIN32_IMPL_WinBioOpenSession(Factor, PoolType, Flags, UnitArray, UnitCount, DatabaseId, SessionHandle);
        return win32_impl_result;
    }
    inline int32_t WinBioAsyncOpenSession(uint32_t Factor, uint32_t PoolType, uint32_t Flags, uint32_t* UnitArray, size_t UnitCount, ::win32::guid* DatabaseId, Windows::Win32::WindowsBiometricFramework::WINBIO_ASYNC_NOTIFICATION_METHOD NotificationMethod, Windows::Win32::WindowsAndMessaging::HWND TargetWindow, uint32_t MessageCode, Windows::Win32::WindowsBiometricFramework::PWINBIO_ASYNC_COMPLETION_CALLBACK* CallbackRoutine, void* UserData, Windows::Win32::SystemServices::BOOL AsynchronousOpen, uint32_t* SessionHandle)
    {
        auto win32_impl_result = WIN32_IMPL_WinBioAsyncOpenSession(Factor, PoolType, Flags, UnitArray, UnitCount, DatabaseId, NotificationMethod, TargetWindow, MessageCode, CallbackRoutine, UserData, AsynchronousOpen, SessionHandle);
        return win32_impl_result;
    }
    inline int32_t WinBioCloseSession(uint32_t SessionHandle)
    {
        auto win32_impl_result = WIN32_IMPL_WinBioCloseSession(SessionHandle);
        return win32_impl_result;
    }
    inline int32_t WinBioVerify(uint32_t SessionHandle, Windows::Win32::WindowsBiometricFramework::WINBIO_IDENTITY* Identity, uint8_t SubFactor, uint32_t* UnitId, uint8_t* Match, uint32_t* RejectDetail)
    {
        auto win32_impl_result = WIN32_IMPL_WinBioVerify(SessionHandle, Identity, SubFactor, UnitId, Match, RejectDetail);
        return win32_impl_result;
    }
    inline int32_t WinBioVerifyWithCallback(uint32_t SessionHandle, Windows::Win32::WindowsBiometricFramework::WINBIO_IDENTITY* Identity, uint8_t SubFactor, Windows::Win32::WindowsBiometricFramework::PWINBIO_VERIFY_CALLBACK* VerifyCallback, void* VerifyCallbackContext)
    {
        auto win32_impl_result = WIN32_IMPL_WinBioVerifyWithCallback(SessionHandle, Identity, SubFactor, VerifyCallback, VerifyCallbackContext);
        return win32_impl_result;
    }
    inline int32_t WinBioIdentify(uint32_t SessionHandle, uint32_t* UnitId, Windows::Win32::WindowsBiometricFramework::WINBIO_IDENTITY* Identity, uint8_t* SubFactor, uint32_t* RejectDetail)
    {
        auto win32_impl_result = WIN32_IMPL_WinBioIdentify(SessionHandle, UnitId, Identity, SubFactor, RejectDetail);
        return win32_impl_result;
    }
    inline int32_t WinBioIdentifyWithCallback(uint32_t SessionHandle, Windows::Win32::WindowsBiometricFramework::PWINBIO_IDENTIFY_CALLBACK* IdentifyCallback, void* IdentifyCallbackContext)
    {
        auto win32_impl_result = WIN32_IMPL_WinBioIdentifyWithCallback(SessionHandle, IdentifyCallback, IdentifyCallbackContext);
        return win32_impl_result;
    }
    inline int32_t WinBioWait(uint32_t SessionHandle)
    {
        auto win32_impl_result = WIN32_IMPL_WinBioWait(SessionHandle);
        return win32_impl_result;
    }
    inline int32_t WinBioCancel(uint32_t SessionHandle)
    {
        auto win32_impl_result = WIN32_IMPL_WinBioCancel(SessionHandle);
        return win32_impl_result;
    }
    inline int32_t WinBioLocateSensor(uint32_t SessionHandle, uint32_t* UnitId)
    {
        auto win32_impl_result = WIN32_IMPL_WinBioLocateSensor(SessionHandle, UnitId);
        return win32_impl_result;
    }
    inline int32_t WinBioLocateSensorWithCallback(uint32_t SessionHandle, Windows::Win32::WindowsBiometricFramework::PWINBIO_LOCATE_SENSOR_CALLBACK* LocateCallback, void* LocateCallbackContext)
    {
        auto win32_impl_result = WIN32_IMPL_WinBioLocateSensorWithCallback(SessionHandle, LocateCallback, LocateCallbackContext);
        return win32_impl_result;
    }
    inline int32_t WinBioEnrollBegin(uint32_t SessionHandle, uint8_t SubFactor, uint32_t UnitId)
    {
        auto win32_impl_result = WIN32_IMPL_WinBioEnrollBegin(SessionHandle, SubFactor, UnitId);
        return win32_impl_result;
    }
    inline int32_t WinBioEnrollSelect(uint32_t SessionHandle, uint64_t SelectorValue)
    {
        auto win32_impl_result = WIN32_IMPL_WinBioEnrollSelect(SessionHandle, SelectorValue);
        return win32_impl_result;
    }
    inline int32_t WinBioEnrollCapture(uint32_t SessionHandle, uint32_t* RejectDetail)
    {
        auto win32_impl_result = WIN32_IMPL_WinBioEnrollCapture(SessionHandle, RejectDetail);
        return win32_impl_result;
    }
    inline int32_t WinBioEnrollCaptureWithCallback(uint32_t SessionHandle, Windows::Win32::WindowsBiometricFramework::PWINBIO_ENROLL_CAPTURE_CALLBACK* EnrollCallback, void* EnrollCallbackContext)
    {
        auto win32_impl_result = WIN32_IMPL_WinBioEnrollCaptureWithCallback(SessionHandle, EnrollCallback, EnrollCallbackContext);
        return win32_impl_result;
    }
    inline int32_t WinBioEnrollCommit(uint32_t SessionHandle, Windows::Win32::WindowsBiometricFramework::WINBIO_IDENTITY* Identity, uint8_t* IsNewTemplate)
    {
        auto win32_impl_result = WIN32_IMPL_WinBioEnrollCommit(SessionHandle, Identity, IsNewTemplate);
        return win32_impl_result;
    }
    inline int32_t WinBioEnrollDiscard(uint32_t SessionHandle)
    {
        auto win32_impl_result = WIN32_IMPL_WinBioEnrollDiscard(SessionHandle);
        return win32_impl_result;
    }
    inline int32_t WinBioEnumEnrollments(uint32_t SessionHandle, uint32_t UnitId, Windows::Win32::WindowsBiometricFramework::WINBIO_IDENTITY* Identity, uint8_t** SubFactorArray, size_t* SubFactorCount)
    {
        auto win32_impl_result = WIN32_IMPL_WinBioEnumEnrollments(SessionHandle, UnitId, Identity, SubFactorArray, SubFactorCount);
        return win32_impl_result;
    }
    inline int32_t WinBioRegisterEventMonitor(uint32_t SessionHandle, uint32_t EventMask, Windows::Win32::WindowsBiometricFramework::PWINBIO_EVENT_CALLBACK* EventCallback, void* EventCallbackContext)
    {
        auto win32_impl_result = WIN32_IMPL_WinBioRegisterEventMonitor(SessionHandle, EventMask, EventCallback, EventCallbackContext);
        return win32_impl_result;
    }
    inline int32_t WinBioUnregisterEventMonitor(uint32_t SessionHandle)
    {
        auto win32_impl_result = WIN32_IMPL_WinBioUnregisterEventMonitor(SessionHandle);
        return win32_impl_result;
    }
    inline int32_t WinBioMonitorPresence(uint32_t SessionHandle, uint32_t UnitId)
    {
        auto win32_impl_result = WIN32_IMPL_WinBioMonitorPresence(SessionHandle, UnitId);
        return win32_impl_result;
    }
    inline int32_t WinBioCaptureSample(uint32_t SessionHandle, uint8_t Purpose, uint8_t Flags, uint32_t* UnitId, Windows::Win32::WindowsBiometricFramework::WINBIO_BIR** Sample, size_t* SampleSize, uint32_t* RejectDetail)
    {
        auto win32_impl_result = WIN32_IMPL_WinBioCaptureSample(SessionHandle, Purpose, Flags, UnitId, Sample, SampleSize, RejectDetail);
        return win32_impl_result;
    }
    inline int32_t WinBioCaptureSampleWithCallback(uint32_t SessionHandle, uint8_t Purpose, uint8_t Flags, Windows::Win32::WindowsBiometricFramework::PWINBIO_CAPTURE_CALLBACK* CaptureCallback, void* CaptureCallbackContext)
    {
        auto win32_impl_result = WIN32_IMPL_WinBioCaptureSampleWithCallback(SessionHandle, Purpose, Flags, CaptureCallback, CaptureCallbackContext);
        return win32_impl_result;
    }
    inline int32_t WinBioDeleteTemplate(uint32_t SessionHandle, uint32_t UnitId, Windows::Win32::WindowsBiometricFramework::WINBIO_IDENTITY* Identity, uint8_t SubFactor)
    {
        auto win32_impl_result = WIN32_IMPL_WinBioDeleteTemplate(SessionHandle, UnitId, Identity, SubFactor);
        return win32_impl_result;
    }
    inline int32_t WinBioLockUnit(uint32_t SessionHandle, uint32_t UnitId)
    {
        auto win32_impl_result = WIN32_IMPL_WinBioLockUnit(SessionHandle, UnitId);
        return win32_impl_result;
    }
    inline int32_t WinBioUnlockUnit(uint32_t SessionHandle, uint32_t UnitId)
    {
        auto win32_impl_result = WIN32_IMPL_WinBioUnlockUnit(SessionHandle, UnitId);
        return win32_impl_result;
    }
    inline int32_t WinBioControlUnit(uint32_t SessionHandle, uint32_t UnitId, uint32_t Component, uint32_t ControlCode, uint8_t* SendBuffer, size_t SendBufferSize, uint8_t* ReceiveBuffer, size_t ReceiveBufferSize, size_t* ReceiveDataSize, uint32_t* OperationStatus)
    {
        auto win32_impl_result = WIN32_IMPL_WinBioControlUnit(SessionHandle, UnitId, Component, ControlCode, SendBuffer, SendBufferSize, ReceiveBuffer, ReceiveBufferSize, ReceiveDataSize, OperationStatus);
        return win32_impl_result;
    }
    inline int32_t WinBioControlUnitPrivileged(uint32_t SessionHandle, uint32_t UnitId, uint32_t Component, uint32_t ControlCode, uint8_t* SendBuffer, size_t SendBufferSize, uint8_t* ReceiveBuffer, size_t ReceiveBufferSize, size_t* ReceiveDataSize, uint32_t* OperationStatus)
    {
        auto win32_impl_result = WIN32_IMPL_WinBioControlUnitPrivileged(SessionHandle, UnitId, Component, ControlCode, SendBuffer, SendBufferSize, ReceiveBuffer, ReceiveBufferSize, ReceiveDataSize, OperationStatus);
        return win32_impl_result;
    }
    inline int32_t WinBioGetProperty(uint32_t SessionHandle, uint32_t PropertyType, uint32_t PropertyId, uint32_t UnitId, Windows::Win32::WindowsBiometricFramework::WINBIO_IDENTITY* Identity, uint8_t SubFactor, void** PropertyBuffer, size_t* PropertyBufferSize)
    {
        auto win32_impl_result = WIN32_IMPL_WinBioGetProperty(SessionHandle, PropertyType, PropertyId, UnitId, Identity, SubFactor, PropertyBuffer, PropertyBufferSize);
        return win32_impl_result;
    }
    inline int32_t WinBioSetProperty(uint32_t SessionHandle, uint32_t PropertyType, uint32_t PropertyId, uint32_t UnitId, Windows::Win32::WindowsBiometricFramework::WINBIO_IDENTITY* Identity, uint8_t SubFactor, void* PropertyBuffer, size_t PropertyBufferSize)
    {
        auto win32_impl_result = WIN32_IMPL_WinBioSetProperty(SessionHandle, PropertyType, PropertyId, UnitId, Identity, SubFactor, PropertyBuffer, PropertyBufferSize);
        return win32_impl_result;
    }
    inline int32_t WinBioFree(void* Address)
    {
        auto win32_impl_result = WIN32_IMPL_WinBioFree(Address);
        return win32_impl_result;
    }
    inline int32_t WinBioSetCredential(Windows::Win32::WindowsBiometricFramework::WINBIO_CREDENTIAL_TYPE Type, uint8_t* Credential, size_t CredentialSize, Windows::Win32::WindowsBiometricFramework::WINBIO_CREDENTIAL_FORMAT Format)
    {
        auto win32_impl_result = WIN32_IMPL_WinBioSetCredential(Type, Credential, CredentialSize, Format);
        return win32_impl_result;
    }
    inline int32_t WinBioRemoveCredential(Windows::Win32::WindowsBiometricFramework::WINBIO_IDENTITY Identity, Windows::Win32::WindowsBiometricFramework::WINBIO_CREDENTIAL_TYPE Type)
    {
        auto win32_impl_result = WIN32_IMPL_WinBioRemoveCredential(Identity, Type);
        return win32_impl_result;
    }
    inline int32_t WinBioRemoveAllCredentials()
    {
        auto win32_impl_result = WIN32_IMPL_WinBioRemoveAllCredentials();
        return win32_impl_result;
    }
    inline int32_t WinBioRemoveAllDomainCredentials()
    {
        auto win32_impl_result = WIN32_IMPL_WinBioRemoveAllDomainCredentials();
        return win32_impl_result;
    }
    inline int32_t WinBioGetCredentialState(Windows::Win32::WindowsBiometricFramework::WINBIO_IDENTITY Identity, Windows::Win32::WindowsBiometricFramework::WINBIO_CREDENTIAL_TYPE Type, Windows::Win32::WindowsBiometricFramework::WINBIO_CREDENTIAL_STATE* CredentialState)
    {
        auto win32_impl_result = WIN32_IMPL_WinBioGetCredentialState(Identity, Type, CredentialState);
        return win32_impl_result;
    }
    inline int32_t WinBioLogonIdentifiedUser(uint32_t SessionHandle)
    {
        auto win32_impl_result = WIN32_IMPL_WinBioLogonIdentifiedUser(SessionHandle);
        return win32_impl_result;
    }
    inline int32_t WinBioGetEnrolledFactors(Windows::Win32::WindowsBiometricFramework::WINBIO_IDENTITY* AccountOwner, uint32_t* EnrolledFactors)
    {
        auto win32_impl_result = WIN32_IMPL_WinBioGetEnrolledFactors(AccountOwner, EnrolledFactors);
        return win32_impl_result;
    }
    inline void WinBioGetEnabledSetting(uint8_t* Value, uint32_t* Source)
    {
        WIN32_IMPL_WinBioGetEnabledSetting(Value, Source);
    }
    inline void WinBioGetLogonSetting(uint8_t* Value, uint32_t* Source)
    {
        WIN32_IMPL_WinBioGetLogonSetting(Value, Source);
    }
    inline void WinBioGetDomainLogonSetting(uint8_t* Value, uint32_t* Source)
    {
        WIN32_IMPL_WinBioGetDomainLogonSetting(Value, Source);
    }
    inline int32_t WinBioAcquireFocus()
    {
        auto win32_impl_result = WIN32_IMPL_WinBioAcquireFocus();
        return win32_impl_result;
    }
    inline int32_t WinBioReleaseFocus()
    {
        auto win32_impl_result = WIN32_IMPL_WinBioReleaseFocus();
        return win32_impl_result;
    }

#pragma endregion methods

}
#endif
