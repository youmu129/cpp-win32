// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_WindowsImagingComponent_H
#define WIN32_Windows_Win32_WindowsImagingComponent_H
#include "win32/base.h"
static_assert(win32::check_version(CPPWIN32_VERSION, "0.0.0.1"), "Mismatched C++/Win32 headers.");
#define CPPWIN32_VERSION "0.0.0.1"
#include "win32/impl/Windows.Win32.WindowsImagingComponent.2.h"
WIN32_EXPORT namespace win32::Windows::Win32::WindowsImagingComponent
{
#pragma region methods
    inline int32_t WICConvertBitmapSource(::win32::guid* dstFormat, Windows::Win32::WindowsImagingComponent::IWICBitmapSource* pISrc, Windows::Win32::WindowsImagingComponent::IWICBitmapSource** ppIDst)
    {
        auto win32_impl_result = WIN32_IMPL_WICConvertBitmapSource(dstFormat, pISrc, ppIDst);
        return win32_impl_result;
    }
    inline int32_t WICCreateBitmapFromSection(uint32_t width, uint32_t height, ::win32::guid* pixelFormat, Windows::Win32::SystemServices::HANDLE hSection, uint32_t stride, uint32_t offset, Windows::Win32::WindowsImagingComponent::IWICBitmap** ppIBitmap)
    {
        auto win32_impl_result = WIN32_IMPL_WICCreateBitmapFromSection(width, height, pixelFormat, hSection, stride, offset, ppIBitmap);
        return win32_impl_result;
    }
    inline int32_t WICCreateBitmapFromSectionEx(uint32_t width, uint32_t height, ::win32::guid* pixelFormat, Windows::Win32::SystemServices::HANDLE hSection, uint32_t stride, uint32_t offset, Windows::Win32::WindowsImagingComponent::WICSectionAccessLevel desiredAccessLevel, Windows::Win32::WindowsImagingComponent::IWICBitmap** ppIBitmap)
    {
        auto win32_impl_result = WIN32_IMPL_WICCreateBitmapFromSectionEx(width, height, pixelFormat, hSection, stride, offset, desiredAccessLevel, ppIBitmap);
        return win32_impl_result;
    }
    inline int32_t WICMapGuidToShortName(::win32::guid* guid, uint32_t cchName, uint16_t* wzName, uint32_t* pcchActual)
    {
        auto win32_impl_result = WIN32_IMPL_WICMapGuidToShortName(guid, cchName, wzName, pcchActual);
        return win32_impl_result;
    }
    inline int32_t WICMapShortNameToGuid(uint16_t* wzName, ::win32::guid* pguid)
    {
        auto win32_impl_result = WIN32_IMPL_WICMapShortNameToGuid(wzName, pguid);
        return win32_impl_result;
    }
    inline int32_t WICMapSchemaToName(::win32::guid* guidMetadataFormat, uint16_t* pwzSchema, uint32_t cchName, uint16_t* wzName, uint32_t* pcchActual)
    {
        auto win32_impl_result = WIN32_IMPL_WICMapSchemaToName(guidMetadataFormat, pwzSchema, cchName, wzName, pcchActual);
        return win32_impl_result;
    }
    inline int32_t WICMatchMetadataContent(::win32::guid* guidContainerFormat, ::win32::guid* pguidVendor, Windows::Win32::StructuredStorage::IStream* pIStream, ::win32::guid* pguidMetadataFormat)
    {
        auto win32_impl_result = WIN32_IMPL_WICMatchMetadataContent(guidContainerFormat, pguidVendor, pIStream, pguidMetadataFormat);
        return win32_impl_result;
    }
    inline int32_t WICSerializeMetadataContent(::win32::guid* guidContainerFormat, Windows::Win32::WindowsImagingComponent::IWICMetadataWriter* pIWriter, uint32_t dwPersistOptions, Windows::Win32::StructuredStorage::IStream* pIStream)
    {
        auto win32_impl_result = WIN32_IMPL_WICSerializeMetadataContent(guidContainerFormat, pIWriter, dwPersistOptions, pIStream);
        return win32_impl_result;
    }
    inline int32_t WICGetMetadataContentSize(::win32::guid* guidContainerFormat, Windows::Win32::WindowsImagingComponent::IWICMetadataWriter* pIWriter, Windows::Win32::SystemServices::ULARGE_INTEGER* pcbSize)
    {
        auto win32_impl_result = WIN32_IMPL_WICGetMetadataContentSize(guidContainerFormat, pIWriter, pcbSize);
        return win32_impl_result;
    }

#pragma endregion methods

}
#endif
