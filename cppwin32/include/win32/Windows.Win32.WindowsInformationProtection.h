// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_WindowsInformationProtection_H
#define WIN32_Windows_Win32_WindowsInformationProtection_H
#include "win32/base.h"
static_assert(win32::check_version(CPPWIN32_VERSION, "0.0.0.1"), "Mismatched C++/Win32 headers.");
#define CPPWIN32_VERSION "0.0.0.1"
#include "win32/impl/Windows.Win32.WindowsInformationProtection.2.h"
WIN32_EXPORT namespace win32::Windows::Win32::WindowsInformationProtection
{
#pragma region methods
    inline int32_t SrpCreateThreadNetworkContext(uint16_t* enterpriseId, Windows::Win32::WindowsInformationProtection::HTHREAD_NETWORK_CONTEXT* threadNetworkContext)
    {
        auto win32_impl_result = WIN32_IMPL_SrpCreateThreadNetworkContext(enterpriseId, threadNetworkContext);
        return win32_impl_result;
    }
    inline int32_t SrpCloseThreadNetworkContext(Windows::Win32::WindowsInformationProtection::HTHREAD_NETWORK_CONTEXT* threadNetworkContext)
    {
        auto win32_impl_result = WIN32_IMPL_SrpCloseThreadNetworkContext(threadNetworkContext);
        return win32_impl_result;
    }
    inline int32_t SrpSetTokenEnterpriseId(Windows::Win32::SystemServices::HANDLE tokenHandle, uint16_t* enterpriseId)
    {
        auto win32_impl_result = WIN32_IMPL_SrpSetTokenEnterpriseId(tokenHandle, enterpriseId);
        return win32_impl_result;
    }
    inline int32_t SrpGetEnterpriseIds(Windows::Win32::SystemServices::HANDLE tokenHandle, uint32_t* numberOfBytes, uint16_t** enterpriseIds, uint32_t* enterpriseIdCount)
    {
        auto win32_impl_result = WIN32_IMPL_SrpGetEnterpriseIds(tokenHandle, numberOfBytes, enterpriseIds, enterpriseIdCount);
        return win32_impl_result;
    }
    inline int32_t SrpEnablePermissiveModeFileEncryption(uint16_t* enterpriseId)
    {
        auto win32_impl_result = WIN32_IMPL_SrpEnablePermissiveModeFileEncryption(enterpriseId);
        return win32_impl_result;
    }
    inline int32_t SrpDisablePermissiveModeFileEncryption()
    {
        auto win32_impl_result = WIN32_IMPL_SrpDisablePermissiveModeFileEncryption();
        return win32_impl_result;
    }
    inline int32_t SrpGetEnterprisePolicy(Windows::Win32::SystemServices::HANDLE tokenHandle, Windows::Win32::WindowsInformationProtection::ENTERPRISE_DATA_POLICIES* policyFlags)
    {
        auto win32_impl_result = WIN32_IMPL_SrpGetEnterprisePolicy(tokenHandle, policyFlags);
        return win32_impl_result;
    }
    inline Windows::Win32::SystemServices::NTSTATUS SrpIsTokenService(Windows::Win32::SystemServices::HANDLE TokenHandle, uint8_t* IsTokenService)
    {
        auto win32_impl_result = WIN32_IMPL_SrpIsTokenService(TokenHandle, IsTokenService);
        return win32_impl_result;
    }
    inline int32_t SrpDoesPolicyAllowAppExecution(Windows::Win32::AppxPackaging::PACKAGE_ID* packageId, int32_t* isAllowed)
    {
        auto win32_impl_result = WIN32_IMPL_SrpDoesPolicyAllowAppExecution(packageId, isAllowed);
        return win32_impl_result;
    }
    inline int32_t ProtectFileToEnterpriseIdentity(uint16_t* fileOrFolderPath, uint16_t* identity)
    {
        auto win32_impl_result = WIN32_IMPL_ProtectFileToEnterpriseIdentity(fileOrFolderPath, identity);
        return win32_impl_result;
    }
    inline int32_t UnprotectFile(uint16_t* fileOrFolderPath, Windows::Win32::WindowsInformationProtection::FILE_UNPROTECT_OPTIONS* options)
    {
        auto win32_impl_result = WIN32_IMPL_UnprotectFile(fileOrFolderPath, options);
        return win32_impl_result;
    }

#pragma endregion methods

}
#endif
