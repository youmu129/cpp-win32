// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_DeviceAndDriverInstallation_0_H
#define WIN32_Windows_Win32_DeviceAndDriverInstallation_0_H
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct BOOL;
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
#pragma region enums
    enum class CM_NOTIFY_ACTION : int32_t
    {
        CM_NOTIFY_ACTION_DEVICEINTERFACEARRIVAL = 0,
        CM_NOTIFY_ACTION_DEVICEINTERFACEREMOVAL = 1,
        CM_NOTIFY_ACTION_DEVICEQUERYREMOVE = 2,
        CM_NOTIFY_ACTION_DEVICEQUERYREMOVEFAILED = 3,
        CM_NOTIFY_ACTION_DEVICEREMOVEPENDING = 4,
        CM_NOTIFY_ACTION_DEVICEREMOVECOMPLETE = 5,
        CM_NOTIFY_ACTION_DEVICECUSTOMEVENT = 6,
        CM_NOTIFY_ACTION_DEVICEINSTANCEENUMERATED = 7,
        CM_NOTIFY_ACTION_DEVICEINSTANCESTARTED = 8,
        CM_NOTIFY_ACTION_DEVICEINSTANCEREMOVED = 9,
        CM_NOTIFY_ACTION_MAX = 10,
    };
    enum class CM_NOTIFY_FILTER_TYPE : int32_t
    {
        CM_NOTIFY_FILTER_TYPE_DEVICEINTERFACE = 0,
        CM_NOTIFY_FILTER_TYPE_DEVICEHANDLE = 1,
        CM_NOTIFY_FILTER_TYPE_DEVICEINSTANCE = 2,
        CM_NOTIFY_FILTER_TYPE_MAX = 3,
    };
    enum class PNP_VETO_TYPE : int32_t
    {
        PNP_VetoTypeUnknown = 0,
        PNP_VetoLegacyDevice = 1,
        PNP_VetoPendingClose = 2,
        PNP_VetoWindowsApp = 3,
        PNP_VetoWindowsService = 4,
        PNP_VetoOutstandingOpen = 5,
        PNP_VetoDevice = 6,
        PNP_VetoDriver = 7,
        PNP_VetoIllegalDeviceRequest = 8,
        PNP_VetoInsufficientPower = 9,
        PNP_VetoNonDisableable = 10,
        PNP_VetoLegacyDriver = 11,
        PNP_VetoInsufficientRights = 12,
        PNP_VetoAlreadyRemoved = 13,
    };
    enum class SetupFileLogInfo : int32_t
    {
        SetupFileLogSourceFilename = 0,
        SetupFileLogChecksum = 1,
        SetupFileLogDiskTagfile = 2,
        SetupFileLogDiskDescription = 3,
        SetupFileLogOtherInfo = 4,
        SetupFileLogMax = 5,
    };
#pragma endregion enums

#pragma region forward_declarations
    struct BUSNUMBER_DES;
    struct BUSNUMBER_RANGE;
    struct BUSNUMBER_RESOURCE;
    struct CM_NOTIFY_EVENT_DATA;
    struct CM_NOTIFY_FILTER;
    struct COINSTALLER_CONTEXT_DATA;
    struct CONFLICT_DETAILS_A;
    struct CONFLICT_DETAILS_W;
    struct CS_DES;
    struct CS_RESOURCE;
    struct Connection_Des_s;
    struct Connection_Resource_s;
    struct DMA_DES;
    struct DMA_RANGE;
    struct DMA_RESOURCE;
    struct DevPrivate_Des_s;
    struct DevPrivate_Range_s;
    struct DevPrivate_Resource_s;
    struct HCMNOTIFICATION__;
    struct HWProfileInfo_sA;
    struct HWProfileInfo_sW;
    struct IO_DES;
    struct IO_RANGE;
    struct IO_RESOURCE;
    struct IRQ_DES_32;
    struct IRQ_DES_64;
    struct IRQ_RANGE;
    struct IRQ_RESOURCE_32;
    struct IRQ_RESOURCE_64;
    struct MEM_DES;
    struct MEM_RANGE;
    struct MEM_RESOURCE;
    struct MFCARD_DES;
    struct MFCARD_RESOURCE;
    struct Mem_Large_Des_s;
    struct Mem_Large_Range_s;
    struct Mem_Large_Resource_s;
    struct PCCARD_DES;
    struct PCCARD_RESOURCE;
    struct SP_ALTPLATFORM_INFO_V3;
    struct SP_BACKUP_QUEUE_PARAMS_V1_A;
    struct SP_BACKUP_QUEUE_PARAMS_V1_W;
    struct SP_BACKUP_QUEUE_PARAMS_V2_A;
    struct SP_BACKUP_QUEUE_PARAMS_V2_W;
    struct SP_CLASSIMAGELIST_DATA;
    struct SP_CLASSINSTALL_HEADER;
    struct SP_DETECTDEVICE_PARAMS;
    struct SP_DEVICE_INTERFACE_DATA;
    struct SP_DEVICE_INTERFACE_DETAIL_DATA_A;
    struct SP_DEVICE_INTERFACE_DETAIL_DATA_W;
    struct SP_DEVINFO_DATA;
    struct SP_DEVINFO_LIST_DETAIL_DATA_A;
    struct SP_DEVINFO_LIST_DETAIL_DATA_W;
    struct SP_DEVINSTALL_PARAMS_A;
    struct SP_DEVINSTALL_PARAMS_W;
    struct SP_DRVINFO_DATA_V1_A;
    struct SP_DRVINFO_DATA_V1_W;
    struct SP_DRVINFO_DATA_V2_A;
    struct SP_DRVINFO_DATA_V2_W;
    struct SP_DRVINFO_DETAIL_DATA_A;
    struct SP_DRVINFO_DETAIL_DATA_W;
    struct SP_DRVINSTALL_PARAMS;
    struct SP_ENABLECLASS_PARAMS;
    struct SP_INSTALLWIZARD_DATA;
    struct SP_NEWDEVICEWIZARD_DATA;
    struct SP_POWERMESSAGEWAKE_PARAMS_A;
    struct SP_POWERMESSAGEWAKE_PARAMS_W;
    struct SP_PROPCHANGE_PARAMS;
    struct SP_PROPSHEETPAGE_REQUEST;
    struct SP_REMOVEDEVICE_PARAMS;
    struct SP_SELECTDEVICE_PARAMS_A;
    struct SP_SELECTDEVICE_PARAMS_W;
    struct SP_TROUBLESHOOTER_PARAMS_A;
    struct SP_TROUBLESHOOTER_PARAMS_W;
    struct SP_UNREMOVEDEVICE_PARAMS;
#pragma endregion forward_declarations

#pragma region delegates
    using PDETECT_PROGRESS_NOTIFY = Windows::Win32::SystemServices::BOOL __stdcall(void*, uint32_t);
    using PSP_DETSIG_CMPPROC = uint32_t __stdcall(void*, Windows::Win32::DeviceAndDriverInstallation::SP_DEVINFO_DATA*, Windows::Win32::DeviceAndDriverInstallation::SP_DEVINFO_DATA*, void*);
    using PCM_NOTIFY_CALLBACK = uint32_t __stdcall(Windows::Win32::DeviceAndDriverInstallation::HCMNOTIFICATION__*, void*, Windows::Win32::DeviceAndDriverInstallation::CM_NOTIFY_ACTION, Windows::Win32::DeviceAndDriverInstallation::CM_NOTIFY_EVENT_DATA*, uint32_t);
#pragma endregion delegates

}
namespace win32::_impl_
{
#pragma region guids
#pragma endregion guids

}
#endif
