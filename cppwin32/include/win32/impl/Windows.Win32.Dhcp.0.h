// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Dhcp_0_H
#define WIN32_Windows_Win32_Dhcp_0_H
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
#pragma region enums
    enum class DHCPV6_STATELESS_PARAM_TYPE : int32_t
    {
        DhcpStatelessPurgeInterval = 1,
        DhcpStatelessStatus = 2,
    };
    enum class DHCP_FAILOVER_MODE : int32_t
    {
        LoadBalance = 0,
        HotStandby = 1,
    };
    enum class DHCP_FAILOVER_SERVER : int32_t
    {
        PrimaryServer = 0,
        SecondaryServer = 1,
    };
    enum class DHCP_FILTER_LIST_TYPE : int32_t
    {
        Deny = 0,
        Allow = 1,
    };
    enum class DHCP_FORCE_FLAG : int32_t
    {
        DhcpFullForce = 0,
        DhcpNoForce = 1,
        DhcpFailoverForce = 2,
    };
    enum class DHCP_OPTION_DATA_TYPE : int32_t
    {
        DhcpByteOption = 0,
        DhcpWordOption = 1,
        DhcpDWordOption = 2,
        DhcpDWordDWordOption = 3,
        DhcpIpAddressOption = 4,
        DhcpStringDataOption = 5,
        DhcpBinaryDataOption = 6,
        DhcpEncapsulatedDataOption = 7,
        DhcpIpv6AddressOption = 8,
    };
    enum class DHCP_OPTION_SCOPE_TYPE : int32_t
    {
        DhcpDefaultOptions = 0,
        DhcpGlobalOptions = 1,
        DhcpSubnetOptions = 2,
        DhcpReservedOptions = 3,
        DhcpMScopeOptions = 4,
    };
    enum class DHCP_OPTION_SCOPE_TYPE6 : int32_t
    {
        DhcpDefaultOptions6 = 0,
        DhcpScopeOptions6 = 1,
        DhcpReservedOptions6 = 2,
        DhcpGlobalOptions6 = 3,
    };
    enum class DHCP_OPTION_TYPE : int32_t
    {
        DhcpUnaryElementTypeOption = 0,
        DhcpArrayTypeOption = 1,
    };
    enum class DHCP_POLICY_FIELDS_TO_UPDATE : int32_t
    {
        DhcpUpdatePolicyName = 1,
        DhcpUpdatePolicyOrder = 2,
        DhcpUpdatePolicyExpr = 4,
        DhcpUpdatePolicyRanges = 8,
        DhcpUpdatePolicyDescr = 16,
        DhcpUpdatePolicyStatus = 32,
        DhcpUpdatePolicyDnsSuffix = 64,
    };
    enum class DHCP_POL_ATTR_TYPE : int32_t
    {
        DhcpAttrHWAddr = 0,
        DhcpAttrOption = 1,
        DhcpAttrSubOption = 2,
        DhcpAttrFqdn = 3,
        DhcpAttrFqdnSingleLabel = 4,
    };
    enum class DHCP_POL_COMPARATOR : int32_t
    {
        DhcpCompEqual = 0,
        DhcpCompNotEqual = 1,
        DhcpCompBeginsWith = 2,
        DhcpCompNotBeginWith = 3,
        DhcpCompEndsWith = 4,
        DhcpCompNotEndWith = 5,
    };
    enum class DHCP_POL_LOGIC_OPER : int32_t
    {
        DhcpLogicalOr = 0,
        DhcpLogicalAnd = 1,
    };
    enum class DHCP_PROPERTY_ID : int32_t
    {
        DhcpPropIdPolicyDnsSuffix = 0,
        DhcpPropIdClientAddressStateEx = 1,
    };
    enum class DHCP_PROPERTY_TYPE : int32_t
    {
        DhcpPropTypeByte = 0,
        DhcpPropTypeWord = 1,
        DhcpPropTypeDword = 2,
        DhcpPropTypeString = 3,
        DhcpPropTypeBinary = 4,
    };
    enum class DHCP_SCAN_FLAG : int32_t
    {
        DhcpRegistryFix = 0,
        DhcpDatabaseFix = 1,
    };
    enum class DHCP_SEARCH_INFO_TYPE : int32_t
    {
        DhcpClientIpAddress = 0,
        DhcpClientHardwareAddress = 1,
        DhcpClientName = 2,
    };
    enum class DHCP_SEARCH_INFO_TYPE_V6 : int32_t
    {
        Dhcpv6ClientIpAddress = 0,
        Dhcpv6ClientDUID = 1,
        Dhcpv6ClientName = 2,
    };
    enum class DHCP_SUBNET_ELEMENT_TYPE : int32_t
    {
        DhcpIpRanges = 0,
        DhcpSecondaryHosts = 1,
        DhcpReservedIps = 2,
        DhcpExcludedIpRanges = 3,
        DhcpIpUsedClusters = 4,
        DhcpIpRangesDhcpOnly = 5,
        DhcpIpRangesDhcpBootp = 6,
        DhcpIpRangesBootpOnly = 7,
    };
    enum class DHCP_SUBNET_ELEMENT_TYPE_V6 : int32_t
    {
        Dhcpv6IpRanges = 0,
        Dhcpv6ReservedIps = 1,
        Dhcpv6ExcludedIpRanges = 2,
    };
    enum class DHCP_SUBNET_STATE : int32_t
    {
        DhcpSubnetEnabled = 0,
        DhcpSubnetDisabled = 1,
        DhcpSubnetEnabledSwitched = 2,
        DhcpSubnetDisabledSwitched = 3,
        DhcpSubnetInvalidState = 4,
    };
    enum class FSM_STATE : int32_t
    {
        NO_STATE = 0,
        INIT = 1,
        STARTUP = 2,
        NORMAL = 3,
        COMMUNICATION_INT = 4,
        PARTNER_DOWN = 5,
        POTENTIAL_CONFLICT = 6,
        CONFLICT_DONE = 7,
        RESOLUTION_INT = 8,
        RECOVER = 9,
        RECOVER_WAIT = 10,
        RECOVER_DONE = 11,
        PAUSED = 12,
        SHUTDOWN = 13,
    };
    enum class QuarantineStatus : int32_t
    {
        NOQUARANTINE = 0,
        RESTRICTEDACCESS = 1,
        DROPPACKET = 2,
        PROBATION = 3,
        EXEMPT = 4,
        DEFAULTQUARSETTING = 5,
        NOQUARINFO = 6,
    };
    enum class StatusCode : int32_t
    {
        STATUS_NO_ERROR = 0,
        STATUS_UNSPECIFIED_FAILURE = 1,
        STATUS_NO_BINDING = 3,
        STATUS_NOPREFIX_AVAIL = 6,
    };
#pragma endregion enums

#pragma region forward_declarations
    struct DATE_TIME;
    struct DHCPAPI_PARAMS;
    struct DHCPCAPI_CLASSID;
    struct DHCPCAPI_PARAMS_ARRAY;
    struct DHCPDS_SERVER;
    struct DHCPDS_SERVERS;
    struct DHCPV4_FAILOVER_CLIENT_INFO;
    struct DHCPV4_FAILOVER_CLIENT_INFO_ARRAY;
    struct DHCPV4_FAILOVER_CLIENT_INFO_EX;
    struct DHCPV6CAPI_CLASSID;
    struct DHCPV6CAPI_PARAMS;
    struct DHCPV6CAPI_PARAMS_ARRAY;
    struct DHCPV6Prefix;
    struct DHCPV6PrefixLeaseInformation;
    struct DHCPV6_BIND_ELEMENT;
    struct DHCPV6_BIND_ELEMENT_ARRAY;
    struct DHCPV6_IP_ARRAY;
    struct DHCPV6_STATELESS_PARAMS;
    struct DHCPV6_STATELESS_SCOPE_STATS;
    struct DHCPV6_STATELESS_STATS;
    struct DHCP_ADDR_PATTERN;
    struct DHCP_ALL_OPTIONS;
    struct DHCP_ALL_OPTION_VALUES;
    struct DHCP_ALL_OPTION_VALUES_PB;
    struct DHCP_ATTRIB;
    struct DHCP_ATTRIB_ARRAY;
    struct DHCP_BINARY_DATA;
    struct DHCP_BIND_ELEMENT;
    struct DHCP_BIND_ELEMENT_ARRAY;
    struct DHCP_BOOTP_IP_RANGE;
    struct DHCP_CALLOUT_TABLE;
    struct DHCP_CLASS_INFO;
    struct DHCP_CLASS_INFO_ARRAY;
    struct DHCP_CLASS_INFO_ARRAY_V6;
    struct DHCP_CLASS_INFO_V6;
    struct DHCP_CLIENT_FILTER_STATUS_INFO;
    struct DHCP_CLIENT_FILTER_STATUS_INFO_ARRAY;
    struct DHCP_CLIENT_INFO;
    struct DHCP_CLIENT_INFO_ARRAY;
    struct DHCP_CLIENT_INFO_ARRAY_V4;
    struct DHCP_CLIENT_INFO_ARRAY_V5;
    struct DHCP_CLIENT_INFO_ARRAY_V6;
    struct DHCP_CLIENT_INFO_ARRAY_VQ;
    struct DHCP_CLIENT_INFO_EX;
    struct DHCP_CLIENT_INFO_EX_ARRAY;
    struct DHCP_CLIENT_INFO_PB;
    struct DHCP_CLIENT_INFO_PB_ARRAY;
    struct DHCP_CLIENT_INFO_V4;
    struct DHCP_CLIENT_INFO_V5;
    struct DHCP_CLIENT_INFO_V6;
    struct DHCP_CLIENT_INFO_VQ;
    union DHCP_CLIENT_SEARCH_UNION;
    struct DHCP_FAILOVER_RELATIONSHIP;
    struct DHCP_FAILOVER_RELATIONSHIP_ARRAY;
    struct DHCP_FAILOVER_STATISTICS;
    struct DHCP_FILTER_ADD_INFO;
    struct DHCP_FILTER_ENUM_INFO;
    struct DHCP_FILTER_GLOBAL_INFO;
    struct DHCP_FILTER_RECORD;
    struct DHCP_HOST_INFO;
    struct DHCP_HOST_INFO_V6;
    struct DHCP_IPV6_ADDRESS;
    struct DHCP_IP_ARRAY;
    struct DHCP_IP_CLUSTER;
    struct DHCP_IP_RANGE;
    struct DHCP_IP_RANGE_ARRAY;
    struct DHCP_IP_RANGE_V6;
    struct DHCP_IP_RESERVATION;
    struct DHCP_IP_RESERVATION_INFO;
    struct DHCP_IP_RESERVATION_V4;
    struct DHCP_IP_RESERVATION_V6;
    struct DHCP_MIB_INFO;
    struct DHCP_MIB_INFO_V5;
    struct DHCP_MIB_INFO_V6;
    struct DHCP_MIB_INFO_VQ;
    struct DHCP_OPTION;
    struct DHCP_OPTION_ARRAY;
    struct DHCP_OPTION_DATA;
    struct DHCP_OPTION_DATA_ELEMENT;
    union DHCP_OPTION_ELEMENT_UNION;
    struct DHCP_OPTION_LIST;
    struct DHCP_OPTION_SCOPE_INFO;
    struct DHCP_OPTION_SCOPE_INFO6;
    union DHCP_OPTION_SCOPE_UNION6;
    struct DHCP_OPTION_VALUE;
    struct DHCP_OPTION_VALUE_ARRAY;
    struct DHCP_PERF_STATS;
    struct DHCP_POLICY;
    struct DHCP_POLICY_ARRAY;
    struct DHCP_POLICY_EX;
    struct DHCP_POLICY_EX_ARRAY;
    struct DHCP_POL_COND;
    struct DHCP_POL_COND_ARRAY;
    struct DHCP_POL_EXPR;
    struct DHCP_POL_EXPR_ARRAY;
    struct DHCP_PROPERTY;
    struct DHCP_PROPERTY_ARRAY;
    struct DHCP_RESERVATION_INFO_ARRAY;
    struct DHCP_RESERVED_SCOPE;
    struct DHCP_RESERVED_SCOPE6;
    struct DHCP_SCAN_ITEM;
    struct DHCP_SCAN_LIST;
    struct DHCP_SEARCH_INFO;
    struct DHCP_SEARCH_INFO_V6;
    struct DHCP_SERVER_CONFIG_INFO;
    struct DHCP_SERVER_CONFIG_INFO_V4;
    struct DHCP_SERVER_CONFIG_INFO_V6;
    struct DHCP_SERVER_CONFIG_INFO_VQ;
    struct DHCP_SERVER_OPTIONS;
    struct DHCP_SERVER_SPECIFIC_STRINGS;
    struct DHCP_SUBNET_ELEMENT_DATA;
    struct DHCP_SUBNET_ELEMENT_DATA_V4;
    struct DHCP_SUBNET_ELEMENT_DATA_V5;
    struct DHCP_SUBNET_ELEMENT_DATA_V6;
    struct DHCP_SUBNET_ELEMENT_INFO_ARRAY;
    struct DHCP_SUBNET_ELEMENT_INFO_ARRAY_V4;
    struct DHCP_SUBNET_ELEMENT_INFO_ARRAY_V5;
    struct DHCP_SUBNET_ELEMENT_INFO_ARRAY_V6;
    union DHCP_SUBNET_ELEMENT_UNION;
    union DHCP_SUBNET_ELEMENT_UNION_V4;
    union DHCP_SUBNET_ELEMENT_UNION_V6;
    struct DHCP_SUBNET_INFO;
    struct DHCP_SUBNET_INFO_V6;
    struct DHCP_SUBNET_INFO_VQ;
    struct DHCP_SUPER_SCOPE_TABLE;
    struct DHCP_SUPER_SCOPE_TABLE_ENTRY;
    struct DWORD_DWORD;
    struct SCOPE_MIB_INFO;
    struct SCOPE_MIB_INFO_V5;
    struct SCOPE_MIB_INFO_V6;
    struct SCOPE_MIB_INFO_VQ;
#pragma endregion forward_declarations

#pragma region delegates
    using LPDHCP_CONTROL = uint32_t __stdcall(uint32_t, void*);
    using LPDHCP_NEWPKT = uint32_t __stdcall(uint8_t**, uint32_t*, uint32_t, void*, void**, int32_t*);
    using LPDHCP_DROP_SEND = uint32_t __stdcall(uint8_t**, uint32_t*, uint32_t, uint32_t, void*, void*);
    using LPDHCP_PROB = uint32_t __stdcall(uint8_t*, uint32_t, uint32_t, uint32_t, uint32_t, void*, void*);
    using LPDHCP_GIVE_ADDRESS = uint32_t __stdcall(uint8_t*, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, void*, void*);
    using LPDHCP_HANDLE_OPTIONS = uint32_t __stdcall(uint8_t*, uint32_t, void*, void*, Windows::Win32::Dhcp::DHCP_SERVER_OPTIONS*);
    using LPDHCP_DELETE_CLIENT = uint32_t __stdcall(uint32_t, uint8_t*, uint32_t, uint32_t, uint32_t);
    using LPDHCP_ENTRY_POINT_FUNC = uint32_t __stdcall(uint16_t*, uint32_t, Windows::Win32::Dhcp::DHCP_CALLOUT_TABLE*);
#pragma endregion delegates

}
namespace win32::_impl_
{
#pragma region guids
#pragma endregion guids

}
#endif
