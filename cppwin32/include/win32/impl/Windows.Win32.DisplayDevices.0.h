// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_DisplayDevices_0_H
#define WIN32_Windows_Win32_DisplayDevices_0_H
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DD_DESTROYDDLOCALDATA;
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
#pragma region enums
    enum class DISPLAYCONFIG_DEVICE_INFO_TYPE : int32_t
    {
        DISPLAYCONFIG_DEVICE_INFO_GET_SOURCE_NAME = 1,
        DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_NAME = 2,
        DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_PREFERRED_MODE = 3,
        DISPLAYCONFIG_DEVICE_INFO_GET_ADAPTER_NAME = 4,
        DISPLAYCONFIG_DEVICE_INFO_SET_TARGET_PERSISTENCE = 5,
        DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_BASE_TYPE = 6,
        DISPLAYCONFIG_DEVICE_INFO_GET_SUPPORT_VIRTUAL_RESOLUTION = 7,
        DISPLAYCONFIG_DEVICE_INFO_SET_SUPPORT_VIRTUAL_RESOLUTION = 8,
        DISPLAYCONFIG_DEVICE_INFO_GET_ADVANCED_COLOR_INFO = 9,
        DISPLAYCONFIG_DEVICE_INFO_SET_ADVANCED_COLOR_STATE = 10,
        DISPLAYCONFIG_DEVICE_INFO_GET_SDR_WHITE_LEVEL = 11,
        DISPLAYCONFIG_DEVICE_INFO_FORCE_UINT32 = -1,
    };
    enum class DISPLAYCONFIG_MODE_INFO_TYPE : int32_t
    {
        DISPLAYCONFIG_MODE_INFO_TYPE_SOURCE = 1,
        DISPLAYCONFIG_MODE_INFO_TYPE_TARGET = 2,
        DISPLAYCONFIG_MODE_INFO_TYPE_DESKTOP_IMAGE = 3,
        DISPLAYCONFIG_MODE_INFO_TYPE_FORCE_UINT32 = -1,
    };
    enum class DISPLAYCONFIG_PIXELFORMAT : int32_t
    {
        DISPLAYCONFIG_PIXELFORMAT_8BPP = 1,
        DISPLAYCONFIG_PIXELFORMAT_16BPP = 2,
        DISPLAYCONFIG_PIXELFORMAT_24BPP = 3,
        DISPLAYCONFIG_PIXELFORMAT_32BPP = 4,
        DISPLAYCONFIG_PIXELFORMAT_NONGDI = 5,
        DISPLAYCONFIG_PIXELFORMAT_FORCE_UINT32 = -1,
    };
    enum class DISPLAYCONFIG_ROTATION : int32_t
    {
        DISPLAYCONFIG_ROTATION_IDENTITY = 1,
        DISPLAYCONFIG_ROTATION_ROTATE90 = 2,
        DISPLAYCONFIG_ROTATION_ROTATE180 = 3,
        DISPLAYCONFIG_ROTATION_ROTATE270 = 4,
        DISPLAYCONFIG_ROTATION_FORCE_UINT32 = -1,
    };
    enum class DISPLAYCONFIG_SCALING : int32_t
    {
        DISPLAYCONFIG_SCALING_IDENTITY = 1,
        DISPLAYCONFIG_SCALING_CENTERED = 2,
        DISPLAYCONFIG_SCALING_STRETCHED = 3,
        DISPLAYCONFIG_SCALING_ASPECTRATIOCENTEREDMAX = 4,
        DISPLAYCONFIG_SCALING_CUSTOM = 5,
        DISPLAYCONFIG_SCALING_PREFERRED = 128,
        DISPLAYCONFIG_SCALING_FORCE_UINT32 = -1,
    };
    enum class DISPLAYCONFIG_SCANLINE_ORDERING : int32_t
    {
        DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED = 0,
        DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE = 1,
        DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED = 2,
        DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_UPPERFIELDFIRST = 2,
        DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST = 3,
        DISPLAYCONFIG_SCANLINE_ORDERING_FORCE_UINT32 = -1,
    };
    enum class DISPLAYCONFIG_TOPOLOGY_ID : int32_t
    {
        DISPLAYCONFIG_TOPOLOGY_INTERNAL = 1,
        DISPLAYCONFIG_TOPOLOGY_CLONE = 2,
        DISPLAYCONFIG_TOPOLOGY_EXTEND = 4,
        DISPLAYCONFIG_TOPOLOGY_EXTERNAL = 8,
        DISPLAYCONFIG_TOPOLOGY_FORCE_UINT32 = -1,
    };
    enum class DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY : int32_t
    {
        DISPLAYCONFIG_OUTPUT_TECHNOLOGY_OTHER = -1,
        DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HD15 = 0,
        DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SVIDEO = 1,
        DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPOSITE_VIDEO = 2,
        DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPONENT_VIDEO = 3,
        DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DVI = 4,
        DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HDMI = 5,
        DISPLAYCONFIG_OUTPUT_TECHNOLOGY_LVDS = 6,
        DISPLAYCONFIG_OUTPUT_TECHNOLOGY_D_JPN = 8,
        DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDI = 9,
        DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EXTERNAL = 10,
        DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EMBEDDED = 11,
        DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EXTERNAL = 12,
        DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EMBEDDED = 13,
        DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDTVDONGLE = 14,
        DISPLAYCONFIG_OUTPUT_TECHNOLOGY_MIRACAST = 15,
        DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_WIRED = 16,
        DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_VIRTUAL = 17,
        DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INTERNAL = -2147483648,
        DISPLAYCONFIG_OUTPUT_TECHNOLOGY_FORCE_UINT32 = -1,
    };
#pragma endregion enums

#pragma region forward_declarations
    struct BLENDOBJ;
    struct BRUSHOBJ;
    struct CIECHROMA;
    struct CLIPLINE;
    struct CLIPOBJ;
    struct COLORINFO;
    struct DDCOMPBUFFERINFO;
    struct DDCORECAPS;
    struct DDHAL_DESTROYDDLOCALDATA;
    struct DDHAL_WAITFORVERTICALBLANKDATA;
    struct DDKERNELCAPS;
    struct DDMOCOMPBUFFERINFO;
    struct DDVIDEOPORTBANDWIDTH;
    struct DDVIDEOPORTCAPS;
    struct DDVIDEOPORTDESC;
    struct DDVIDEOPORTINFO;
    struct DD_ADDATTACHEDSURFACEDATA;
    struct DD_ATTACHLIST;
    struct DD_BEGINMOCOMPFRAMEDATA;
    struct DD_BLTDATA;
    struct DD_CALLBACKS;
    struct DD_CANCREATESURFACEDATA;
    struct DD_CANCREATEVPORTDATA;
    struct DD_CLIPPER_GLOBAL;
    struct DD_CLIPPER_LOCAL;
    struct DD_COLORCONTROLCALLBACKS;
    struct DD_COLORCONTROLDATA;
    struct DD_CREATEMOCOMPDATA;
    struct DD_CREATEPALETTEDATA;
    struct DD_CREATESURFACEDATA;
    struct DD_CREATESURFACEEXDATA;
    struct DD_CREATEVPORTDATA;
    struct DD_D3DBUFCALLBACKS;
    struct DD_DESTROYMOCOMPDATA;
    struct DD_DESTROYPALETTEDATA;
    struct DD_DESTROYSURFACEDATA;
    struct DD_DESTROYVPORTDATA;
    struct DD_DIRECTDRAW_GLOBAL;
    struct DD_DIRECTDRAW_LOCAL;
    struct DD_ENDMOCOMPFRAMEDATA;
    struct DD_FLIPDATA;
    struct DD_FLIPTOGDISURFACEDATA;
    struct DD_FLIPVPORTDATA;
    struct DD_FREEDRIVERMEMORYDATA;
    struct DD_GETAVAILDRIVERMEMORYDATA;
    struct DD_GETBLTSTATUSDATA;
    struct DD_GETDRIVERINFODATA;
    struct DD_GETDRIVERSTATEDATA;
    struct DD_GETFLIPSTATUSDATA;
    struct DD_GETHEAPALIGNMENTDATA;
    struct DD_GETINTERNALMOCOMPDATA;
    struct DD_GETMOCOMPCOMPBUFFDATA;
    struct DD_GETMOCOMPFORMATSDATA;
    struct DD_GETMOCOMPGUIDSDATA;
    struct DD_GETSCANLINEDATA;
    struct DD_GETVPORTBANDWIDTHDATA;
    struct DD_GETVPORTCONNECTDATA;
    struct DD_GETVPORTFIELDDATA;
    struct DD_GETVPORTFLIPSTATUSDATA;
    struct DD_GETVPORTINPUTFORMATDATA;
    struct DD_GETVPORTLINEDATA;
    struct DD_GETVPORTOUTPUTFORMATDATA;
    struct DD_GETVPORTSIGNALDATA;
    struct DD_HALINFO;
    struct DD_KERNELCALLBACKS;
    struct DD_LOCKDATA;
    struct DD_MAPMEMORYDATA;
    struct DD_MISCELLANEOUS2CALLBACKS;
    struct DD_MISCELLANEOUSCALLBACKS;
    struct DD_MORESURFACECAPS;
    struct DD_MOTIONCOMPCALLBACKS;
    struct DD_MOTIONCOMP_LOCAL;
    struct DD_NONLOCALVIDMEMCAPS;
    struct DD_NTCALLBACKS;
    struct DD_NTPRIVATEDRIVERCAPS;
    struct DD_PALETTECALLBACKS;
    struct DD_PALETTE_GLOBAL;
    struct DD_PALETTE_LOCAL;
    struct DD_QUERYMOCOMPSTATUSDATA;
    struct DD_RENDERMOCOMPDATA;
    struct DD_SETCOLORKEYDATA;
    struct DD_SETENTRIESDATA;
    struct DD_SETEXCLUSIVEMODEDATA;
    struct DD_SETOVERLAYPOSITIONDATA;
    struct DD_SETPALETTEDATA;
    struct DD_STEREOMODE;
    struct DD_SURFACECALLBACKS;
    struct DD_SURFACE_GLOBAL;
    struct DD_SURFACE_INT;
    struct DD_SURFACE_LOCAL;
    struct DD_SURFACE_MORE;
    struct DD_SYNCSURFACEDATA;
    struct DD_SYNCVIDEOPORTDATA;
    struct DD_UNLOCKDATA;
    struct DD_UPDATENONLOCALHEAPDATA;
    struct DD_UPDATEOVERLAYDATA;
    struct DD_UPDATEVPORTDATA;
    struct DD_VIDEOPORTCALLBACKS;
    struct DD_VIDEOPORT_LOCAL;
    struct DD_VPORTCOLORDATA;
    struct DD_WAITFORVERTICALBLANKDATA;
    struct DD_WAITFORVPORTSYNCDATA;
    struct DEVHTADJDATA;
    struct DEVHTINFO;
    struct DEVINFO;
    struct DEVMODEW;
    struct DISPLAYCONFIG_2DREGION;
    struct DISPLAYCONFIG_ADAPTER_NAME;
    struct DISPLAYCONFIG_DESKTOP_IMAGE_INFO;
    struct DISPLAYCONFIG_DEVICE_INFO_HEADER;
    struct DISPLAYCONFIG_MODE_INFO;
    struct DISPLAYCONFIG_PATH_INFO;
    struct DISPLAYCONFIG_PATH_SOURCE_INFO;
    struct DISPLAYCONFIG_PATH_TARGET_INFO;
    struct DISPLAYCONFIG_RATIONAL;
    struct DISPLAYCONFIG_SET_TARGET_PERSISTENCE;
    struct DISPLAYCONFIG_SOURCE_DEVICE_NAME;
    struct DISPLAYCONFIG_SOURCE_MODE;
    struct DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION;
    struct DISPLAYCONFIG_TARGET_BASE_TYPE;
    struct DISPLAYCONFIG_TARGET_DEVICE_NAME;
    struct DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS;
    struct DISPLAYCONFIG_TARGET_MODE;
    struct DISPLAYCONFIG_TARGET_PREFERRED_MODE;
    struct DISPLAYCONFIG_VIDEO_SIGNAL_INFO;
    struct DRIVEROBJ;
    struct DRVENABLEDATA;
    struct DRVFN;
    struct ENGSAFESEMAPHORE;
    struct ENG_TIME_FIELDS;
    struct ENUMRECTS;
    struct FD_DEVICEMETRICS;
    struct FD_GLYPHATTR;
    struct FD_GLYPHSET;
    struct FD_KERNINGPAIR;
    struct FD_XFORM;
    struct FLOATOBJ;
    struct FLOATOBJ_XFORM;
    struct FONTDIFF;
    struct FONTINFO;
    struct FONTOBJ;
    struct FONTSIM;
    struct GAMMARAMP;
    struct GDIINFO;
    struct GLYPHBITS;
    struct GLYPHDATA;
    union GLYPHDEF;
    struct GLYPHPOS;
    struct HEAPALIGNMENT;
    struct IFIEXTRA;
    struct IFIMETRICS;
    struct LINEATTRS;
    struct PALOBJ;
    struct PATHDATA;
    struct PATHOBJ;
    struct PERBANDINFO;
    struct POINT;
    struct POINTL;
    struct POINTS;
    struct RECT;
    struct RECTL;
    struct RUN;
    struct SIZE;
    struct STROBJ;
    struct SURFACEALIGNMENT;
    struct SURFOBJ;
    struct TYPE1_FONT;
    struct VIDEOMEMORY;
    struct VIDEOMEMORYINFO;
    struct VIDEOPARAMETERS;
    struct VMEMHEAP;
    struct WCRUN;
    struct WNDOBJ;
    struct XFORML;
    struct XLATEOBJ;
    struct IDirectDrawKernel;
    struct IDirectDrawSurfaceKernel;
#pragma endregion forward_declarations

#pragma region delegates
    using PDD_CANCREATESURFACE = uint32_t __stdcall(Windows::Win32::DisplayDevices::DD_CANCREATESURFACEDATA*);
    using PDD_WAITFORVERTICALBLANK = uint32_t __stdcall(Windows::Win32::DisplayDevices::DD_WAITFORVERTICALBLANKDATA*);
    using PDD_CREATESURFACE = uint32_t __stdcall(Windows::Win32::DisplayDevices::DD_CREATESURFACEDATA*);
    using PDD_CREATEPALETTE = uint32_t __stdcall(Windows::Win32::DisplayDevices::DD_CREATEPALETTEDATA*);
    using PDD_GETSCANLINE = uint32_t __stdcall(Windows::Win32::DisplayDevices::DD_GETSCANLINEDATA*);
    using PDD_MAPMEMORY = uint32_t __stdcall(Windows::Win32::DisplayDevices::DD_MAPMEMORYDATA*);
    using PDD_GETDRIVERINFO = uint32_t __stdcall(Windows::Win32::DisplayDevices::DD_GETDRIVERINFODATA*);
    using PDD_GETAVAILDRIVERMEMORY = uint32_t __stdcall(Windows::Win32::DisplayDevices::DD_GETAVAILDRIVERMEMORYDATA*);
    using PDD_CREATESURFACEEX = uint32_t __stdcall(Windows::Win32::DisplayDevices::DD_CREATESURFACEEXDATA*);
    using PDD_GETDRIVERSTATE = uint32_t __stdcall(Windows::Win32::DisplayDevices::DD_GETDRIVERSTATEDATA*);
    using PDD_DESTROYDDLOCAL = uint32_t __stdcall(Windows::Win32::SystemServices::DD_DESTROYDDLOCALDATA*);
    using PDD_FREEDRIVERMEMORY = uint32_t __stdcall(Windows::Win32::DisplayDevices::DD_FREEDRIVERMEMORYDATA*);
    using PDD_SETEXCLUSIVEMODE = uint32_t __stdcall(Windows::Win32::DisplayDevices::DD_SETEXCLUSIVEMODEDATA*);
    using PDD_FLIPTOGDISURFACE = uint32_t __stdcall(Windows::Win32::DisplayDevices::DD_FLIPTOGDISURFACEDATA*);
    using PDD_PALCB_DESTROYPALETTE = uint32_t __stdcall(Windows::Win32::DisplayDevices::DD_DESTROYPALETTEDATA*);
    using PDD_PALCB_SETENTRIES = uint32_t __stdcall(Windows::Win32::DisplayDevices::DD_SETENTRIESDATA*);
    using PDD_SURFCB_LOCK = uint32_t __stdcall(Windows::Win32::DisplayDevices::DD_LOCKDATA*);
    using PDD_SURFCB_UNLOCK = uint32_t __stdcall(Windows::Win32::DisplayDevices::DD_UNLOCKDATA*);
    using PDD_SURFCB_BLT = uint32_t __stdcall(Windows::Win32::DisplayDevices::DD_BLTDATA*);
    using PDD_SURFCB_UPDATEOVERLAY = uint32_t __stdcall(Windows::Win32::DisplayDevices::DD_UPDATEOVERLAYDATA*);
    using PDD_SURFCB_SETOVERLAYPOSITION = uint32_t __stdcall(Windows::Win32::DisplayDevices::DD_SETOVERLAYPOSITIONDATA*);
    using PDD_SURFCB_SETPALETTE = uint32_t __stdcall(Windows::Win32::DisplayDevices::DD_SETPALETTEDATA*);
    using PDD_SURFCB_FLIP = uint32_t __stdcall(Windows::Win32::DisplayDevices::DD_FLIPDATA*);
    using PDD_SURFCB_DESTROYSURFACE = uint32_t __stdcall(Windows::Win32::DisplayDevices::DD_DESTROYSURFACEDATA*);
    using PDD_SURFCB_ADDATTACHEDSURFACE = uint32_t __stdcall(Windows::Win32::DisplayDevices::DD_ADDATTACHEDSURFACEDATA*);
    using PDD_SURFCB_SETCOLORKEY = uint32_t __stdcall(Windows::Win32::DisplayDevices::DD_SETCOLORKEYDATA*);
    using PDD_SURFCB_GETBLTSTATUS = uint32_t __stdcall(Windows::Win32::DisplayDevices::DD_GETBLTSTATUSDATA*);
    using PDD_SURFCB_GETFLIPSTATUS = uint32_t __stdcall(Windows::Win32::DisplayDevices::DD_GETFLIPSTATUSDATA*);
    using PDD_VPORTCB_CANCREATEVIDEOPORT = uint32_t __stdcall(Windows::Win32::DisplayDevices::DD_CANCREATEVPORTDATA*);
    using PDD_VPORTCB_CREATEVIDEOPORT = uint32_t __stdcall(Windows::Win32::DisplayDevices::DD_CREATEVPORTDATA*);
    using PDD_VPORTCB_FLIP = uint32_t __stdcall(Windows::Win32::DisplayDevices::DD_FLIPVPORTDATA*);
    using PDD_VPORTCB_GETBANDWIDTH = uint32_t __stdcall(Windows::Win32::DisplayDevices::DD_GETVPORTBANDWIDTHDATA*);
    using PDD_VPORTCB_GETINPUTFORMATS = uint32_t __stdcall(Windows::Win32::DisplayDevices::DD_GETVPORTINPUTFORMATDATA*);
    using PDD_VPORTCB_GETOUTPUTFORMATS = uint32_t __stdcall(Windows::Win32::DisplayDevices::DD_GETVPORTOUTPUTFORMATDATA*);
    using PDD_VPORTCB_GETFIELD = uint32_t __stdcall(Windows::Win32::DisplayDevices::DD_GETVPORTFIELDDATA*);
    using PDD_VPORTCB_GETLINE = uint32_t __stdcall(Windows::Win32::DisplayDevices::DD_GETVPORTLINEDATA*);
    using PDD_VPORTCB_GETVPORTCONNECT = uint32_t __stdcall(Windows::Win32::DisplayDevices::DD_GETVPORTCONNECTDATA*);
    using PDD_VPORTCB_DESTROYVPORT = uint32_t __stdcall(Windows::Win32::DisplayDevices::DD_DESTROYVPORTDATA*);
    using PDD_VPORTCB_GETFLIPSTATUS = uint32_t __stdcall(Windows::Win32::DisplayDevices::DD_GETVPORTFLIPSTATUSDATA*);
    using PDD_VPORTCB_UPDATE = uint32_t __stdcall(Windows::Win32::DisplayDevices::DD_UPDATEVPORTDATA*);
    using PDD_VPORTCB_WAITFORSYNC = uint32_t __stdcall(Windows::Win32::DisplayDevices::DD_WAITFORVPORTSYNCDATA*);
    using PDD_VPORTCB_GETSIGNALSTATUS = uint32_t __stdcall(Windows::Win32::DisplayDevices::DD_GETVPORTSIGNALDATA*);
    using PDD_VPORTCB_COLORCONTROL = uint32_t __stdcall(Windows::Win32::DisplayDevices::DD_VPORTCOLORDATA*);
    using PDD_COLORCB_COLORCONTROL = uint32_t __stdcall(Windows::Win32::DisplayDevices::DD_COLORCONTROLDATA*);
    using PDD_KERNELCB_SYNCSURFACE = uint32_t __stdcall(Windows::Win32::DisplayDevices::DD_SYNCSURFACEDATA*);
    using PDD_KERNELCB_SYNCVIDEOPORT = uint32_t __stdcall(Windows::Win32::DisplayDevices::DD_SYNCVIDEOPORTDATA*);
    using PDD_MOCOMPCB_GETGUIDS = uint32_t __stdcall(Windows::Win32::DisplayDevices::DD_GETMOCOMPGUIDSDATA*);
    using PDD_MOCOMPCB_GETFORMATS = uint32_t __stdcall(Windows::Win32::DisplayDevices::DD_GETMOCOMPFORMATSDATA*);
    using PDD_MOCOMPCB_CREATE = uint32_t __stdcall(Windows::Win32::DisplayDevices::DD_CREATEMOCOMPDATA*);
    using PDD_MOCOMPCB_GETCOMPBUFFINFO = uint32_t __stdcall(Windows::Win32::DisplayDevices::DD_GETMOCOMPCOMPBUFFDATA*);
    using PDD_MOCOMPCB_GETINTERNALINFO = uint32_t __stdcall(Windows::Win32::DisplayDevices::DD_GETINTERNALMOCOMPDATA*);
    using PDD_MOCOMPCB_BEGINFRAME = uint32_t __stdcall(Windows::Win32::DisplayDevices::DD_BEGINMOCOMPFRAMEDATA*);
    using PDD_MOCOMPCB_ENDFRAME = uint32_t __stdcall(Windows::Win32::DisplayDevices::DD_ENDMOCOMPFRAMEDATA*);
    using PDD_MOCOMPCB_RENDER = uint32_t __stdcall(Windows::Win32::DisplayDevices::DD_RENDERMOCOMPDATA*);
    using PDD_MOCOMPCB_QUERYSTATUS = uint32_t __stdcall(Windows::Win32::DisplayDevices::DD_QUERYMOCOMPSTATUSDATA*);
    using PDD_MOCOMPCB_DESTROY = uint32_t __stdcall(Windows::Win32::DisplayDevices::DD_DESTROYMOCOMPDATA*);
    using PFN_DrvQueryGlyphAttrs = Windows::Win32::DisplayDevices::FD_GLYPHATTR* __stdcall(Windows::Win32::DisplayDevices::FONTOBJ*, uint32_t);
#pragma endregion delegates

}
namespace win32::_impl_
{
#pragma region guids
#pragma endregion guids

}
#endif
