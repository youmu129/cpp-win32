// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Dns_0_H
#define WIN32_Windows_Win32_Dns_0_H
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
#pragma region enums
    enum class DNS_CHARSET : int32_t
    {
        DnsCharSetUnknown = 0,
        DnsCharSetUnicode = 1,
        DnsCharSetUtf8 = 2,
        DnsCharSetAnsi = 3,
    };
    enum class DNS_CONFIG_TYPE : int32_t
    {
        DnsConfigPrimaryDomainName_W = 0,
        DnsConfigPrimaryDomainName_A = 1,
        DnsConfigPrimaryDomainName_UTF8 = 2,
        DnsConfigAdapterDomainName_W = 3,
        DnsConfigAdapterDomainName_A = 4,
        DnsConfigAdapterDomainName_UTF8 = 5,
        DnsConfigDnsServerList = 6,
        DnsConfigSearchList = 7,
        DnsConfigAdapterInfo = 8,
        DnsConfigPrimaryHostNameRegistrationEnabled = 9,
        DnsConfigAdapterHostNameRegistrationEnabled = 10,
        DnsConfigAddressRegistrationMaxCount = 11,
        DnsConfigHostName_W = 12,
        DnsConfigHostName_A = 13,
        DnsConfigHostName_UTF8 = 14,
        DnsConfigFullHostName_W = 15,
        DnsConfigFullHostName_A = 16,
        DnsConfigFullHostName_UTF8 = 17,
        DnsConfigNameServer = 18,
    };
    enum class DNS_CONNECTION_POLICY_TAG : int32_t
    {
        TAG_DNS_CONNECTION_POLICY_TAG_DEFAULT = 0,
        TAG_DNS_CONNECTION_POLICY_TAG_CONNECTION_MANAGER = 1,
        TAG_DNS_CONNECTION_POLICY_TAG_WWWPT = 2,
    };
    enum class DNS_CONNECTION_PROXY_INFO_SWITCH : int32_t
    {
        DNS_CONNECTION_PROXY_INFO_SWITCH_CONFIG = 0,
        DNS_CONNECTION_PROXY_INFO_SWITCH_SCRIPT = 1,
        DNS_CONNECTION_PROXY_INFO_SWITCH_WPAD = 2,
    };
    enum class DNS_CONNECTION_PROXY_TYPE : int32_t
    {
        DNS_CONNECTION_PROXY_TYPE_NULL = 0,
        DNS_CONNECTION_PROXY_TYPE_HTTP = 1,
        DNS_CONNECTION_PROXY_TYPE_WAP = 2,
        DNS_CONNECTION_PROXY_TYPE_SOCKS4 = 4,
        DNS_CONNECTION_PROXY_TYPE_SOCKS5 = 5,
    };
    enum class DNS_FREE_TYPE : int32_t
    {
        DnsFreeFlat = 0,
        DnsFreeRecordList = 1,
        DnsFreeParsedMessageFields = 2,
    };
    enum class DNS_NAME_FORMAT : int32_t
    {
        DnsNameDomain = 0,
        DnsNameDomainLabel = 1,
        DnsNameHostnameFull = 2,
        DnsNameHostnameLabel = 3,
        DnsNameWildcard = 4,
        DnsNameSrvRecord = 5,
        DnsNameValidateTld = 6,
    };
    enum class DNS_PROXY_INFORMATION_TYPE : int32_t
    {
        DNS_PROXY_INFORMATION_DIRECT = 0,
        DNS_PROXY_INFORMATION_DEFAULT_SETTINGS = 1,
        DNS_PROXY_INFORMATION_PROXY_NAME = 2,
        DNS_PROXY_INFORMATION_DOES_NOT_EXIST = 3,
    };
    enum class DNS_SECTION : int32_t
    {
        DnsSectionQuestion = 0,
        DnsSectionAnswer = 1,
        DnsSectionAuthority = 2,
        DnsSectionAddtional = 3,
    };
#pragma endregion enums

#pragma region forward_declarations
    struct DNS_AAAA_DATA;
    struct DNS_ADDR;
    struct DNS_ADDR_ARRAY;
    struct DNS_ATMA_DATA;
    struct DNS_A_DATA;
    struct DNS_CONNECTION_IFINDEX_ENTRY;
    struct DNS_CONNECTION_IFINDEX_LIST;
    struct DNS_CONNECTION_NAME;
    struct DNS_CONNECTION_NAME_LIST;
    struct DNS_CONNECTION_POLICY_ENTRY;
    struct DNS_CONNECTION_POLICY_ENTRY_LIST;
    struct DNS_CONNECTION_PROXY_ELEMENT;
    struct DNS_CONNECTION_PROXY_INFO;
    struct DNS_CONNECTION_PROXY_INFO_EX;
    struct DNS_CONNECTION_PROXY_LIST;
    struct DNS_DHCID_DATA;
    struct DNS_DS_DATA;
    struct DNS_HEADER;
    struct DNS_HEADER_EXT;
    struct DNS_KEY_DATA;
    struct DNS_LOC_DATA;
    struct DNS_MESSAGE_BUFFER;
    struct DNS_MINFO_DATAA;
    struct DNS_MINFO_DATAW;
    struct DNS_MX_DATAA;
    struct DNS_MX_DATAW;
    struct DNS_NAPTR_DATAA;
    struct DNS_NAPTR_DATAW;
    struct DNS_NSEC3PARAM_DATA;
    struct DNS_NSEC3_DATA;
    struct DNS_NSEC_DATAA;
    struct DNS_NSEC_DATAW;
    struct DNS_NULL_DATA;
    struct DNS_NXT_DATAA;
    struct DNS_NXT_DATAW;
    struct DNS_OPT_DATA;
    struct DNS_PROXY_INFORMATION;
    struct DNS_PTR_DATAA;
    struct DNS_PTR_DATAW;
    struct DNS_QUERY_CANCEL;
    struct DNS_QUERY_REQUEST;
    struct DNS_QUERY_RESULT;
    struct DNS_RECORDA;
    struct DNS_RECORDW;
    struct DNS_RECORD_FLAGS;
    struct DNS_RRSET;
    struct DNS_SERVICE_BROWSE_REQUEST;
    struct DNS_SERVICE_CANCEL;
    struct DNS_SERVICE_INSTANCE;
    struct DNS_SERVICE_REGISTER_REQUEST;
    struct DNS_SERVICE_RESOLVE_REQUEST;
    struct DNS_SIG_DATAA;
    struct DNS_SIG_DATAW;
    struct DNS_SOA_DATAA;
    struct DNS_SOA_DATAW;
    struct DNS_SRV_DATAA;
    struct DNS_SRV_DATAW;
    struct DNS_TKEY_DATAA;
    struct DNS_TKEY_DATAW;
    struct DNS_TLSA_DATA;
    struct DNS_TSIG_DATAA;
    struct DNS_TSIG_DATAW;
    struct DNS_TXT_DATAA;
    struct DNS_TXT_DATAW;
    struct DNS_UNKNOWN_DATA;
    struct DNS_WINSR_DATAA;
    struct DNS_WINSR_DATAW;
    struct DNS_WINS_DATA;
    struct DNS_WIRE_QUESTION;
    struct DNS_WIRE_RECORD;
    struct DNS_WKS_DATA;
    struct DnsContextHandle;
    struct IP4_ARRAY;
    union IP6_ADDRESS;
    struct MDNS_QUERY_HANDLE;
    struct MDNS_QUERY_REQUEST;
    struct _DnsRecordOptA;
    struct _DnsRecordOptW;
#pragma endregion forward_declarations

#pragma region delegates
    using DNS_PROXY_COMPLETION_ROUTINE = void __stdcall(void*, int32_t);
    using DNS_QUERY_COMPLETION_ROUTINE = void __stdcall(void*, Windows::Win32::Dns::DNS_QUERY_RESULT*);
    using PDNS_QUERY_COMPLETION_ROUTINE = void __stdcall();
    using DNS_SERVICE_BROWSE_CALLBACK = void __stdcall(uint32_t, void*, Windows::Win32::Dns::DNS_RECORDA*);
    using PDNS_SERVICE_BROWSE_CALLBACK = void __stdcall();
    using DNS_SERVICE_RESOLVE_COMPLETE = void __stdcall(uint32_t, void*, Windows::Win32::Dns::DNS_SERVICE_INSTANCE*);
    using PDNS_SERVICE_RESOLVE_COMPLETE = void __stdcall();
    using DNS_SERVICE_REGISTER_COMPLETE = void __stdcall(uint32_t, void*, Windows::Win32::Dns::DNS_SERVICE_INSTANCE*);
    using PDNS_SERVICE_REGISTER_COMPLETE = void __stdcall();
    using MDNS_QUERY_CALLBACK = void __stdcall(void*, Windows::Win32::Dns::MDNS_QUERY_HANDLE*, Windows::Win32::Dns::DNS_QUERY_RESULT*);
    using PMDNS_QUERY_CALLBACK = void __stdcall();
#pragma endregion delegates

}
namespace win32::_impl_
{
#pragma region guids
#pragma endregion guids

}
#endif
