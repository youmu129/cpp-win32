// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_FileSystem_0_H
#define WIN32_Windows_Win32_FileSystem_0_H
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct BOOL;
    struct HANDLE;
    union LARGE_INTEGER;
    struct OVERLAPPED;
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
#pragma region enums
    enum class CLFS_CONTEXT_MODE : int32_t
    {
        ClfsContextNone = 0,
        ClfsContextUndoNext = 1,
        ClfsContextPrevious = 2,
        ClfsContextForward = 3,
    };
    enum class CLFS_IOSTATS_CLASS : int32_t
    {
        ClfsIoStatsDefault = 0,
        ClfsIoStatsMax = 65535,
    };
    enum class CLFS_LOG_ARCHIVE_MODE : int32_t
    {
        ClfsLogArchiveEnabled = 1,
        ClfsLogArchiveDisabled = 2,
    };
    enum class CLFS_MGMT_NOTIFICATION_TYPE : int32_t
    {
        ClfsMgmtAdvanceTailNotification = 0,
        ClfsMgmtLogFullHandlerNotification = 1,
        ClfsMgmtLogUnpinnedNotification = 2,
        ClfsMgmtLogWriteNotification = 3,
    };
    enum class CLFS_MGMT_POLICY_TYPE : int32_t
    {
        ClfsMgmtPolicyMaximumSize = 0,
        ClfsMgmtPolicyMinimumSize = 1,
        ClfsMgmtPolicyNewContainerSize = 2,
        ClfsMgmtPolicyGrowthRate = 3,
        ClfsMgmtPolicyLogTail = 4,
        ClfsMgmtPolicyAutoShrink = 5,
        ClfsMgmtPolicyAutoGrow = 6,
        ClfsMgmtPolicyNewContainerPrefix = 7,
        ClfsMgmtPolicyNewContainerSuffix = 8,
        ClfsMgmtPolicyNewContainerExtension = 9,
        ClfsMgmtPolicyInvalid = 10,
    };
    enum class CLS_CONTEXT_MODE : int32_t
    {
        ClsContextNone = 0,
        ClsContextUndoNext = 1,
        ClsContextPrevious = 2,
        ClsContextForward = 3,
    };
    enum class CLS_IOSTATS_CLASS : int32_t
    {
        ClsIoStatsDefault = 0,
        ClsIoStatsMax = 65535,
    };
    enum class CLS_LOG_INFORMATION_CLASS : int32_t
    {
        ClfsLogBasicInformation = 0,
        ClfsLogBasicInformationPhysical = 1,
        ClfsLogPhysicalNameInformation = 2,
        ClfsLogStreamIdentifierInformation = 3,
        ClfsLogSystemMarkingInformation = 4,
        ClfsLogPhysicalLsnInformation = 5,
    };
    enum class COPYFILE2_COPY_PHASE : int32_t
    {
        COPYFILE2_PHASE_NONE = 0,
        COPYFILE2_PHASE_PREPARE_SOURCE = 1,
        COPYFILE2_PHASE_PREPARE_DEST = 2,
        COPYFILE2_PHASE_READ_SOURCE = 3,
        COPYFILE2_PHASE_WRITE_DESTINATION = 4,
        COPYFILE2_PHASE_SERVER_COPY = 5,
        COPYFILE2_PHASE_NAMEGRAFT_COPY = 6,
        COPYFILE2_PHASE_MAX = 7,
    };
    enum class COPYFILE2_MESSAGE_ACTION : int32_t
    {
        COPYFILE2_PROGRESS_CONTINUE = 0,
        COPYFILE2_PROGRESS_CANCEL = 1,
        COPYFILE2_PROGRESS_STOP = 2,
        COPYFILE2_PROGRESS_QUIET = 3,
        COPYFILE2_PROGRESS_PAUSE = 4,
    };
    enum class COPYFILE2_MESSAGE_TYPE : int32_t
    {
        COPYFILE2_CALLBACK_NONE = 0,
        COPYFILE2_CALLBACK_CHUNK_STARTED = 1,
        COPYFILE2_CALLBACK_CHUNK_FINISHED = 2,
        COPYFILE2_CALLBACK_STREAM_STARTED = 3,
        COPYFILE2_CALLBACK_STREAM_FINISHED = 4,
        COPYFILE2_CALLBACK_POLL_CONTINUE = 5,
        COPYFILE2_CALLBACK_ERROR = 6,
        COPYFILE2_CALLBACK_MAX = 7,
    };
    enum class CSV_CONTROL_OP : int32_t
    {
        CsvControlStartRedirectFile = 2,
        CsvControlStopRedirectFile = 3,
        CsvControlQueryRedirectState = 4,
        CsvControlQueryFileRevision = 6,
        CsvControlQueryMdsPath = 8,
        CsvControlQueryFileRevisionFileId128 = 9,
        CsvControlQueryVolumeRedirectState = 10,
        CsvControlEnableUSNRangeModificationTracking = 13,
        CsvControlMarkHandleLocalVolumeMount = 14,
        CsvControlUnmarkHandleLocalVolumeMount = 15,
        CsvControlGetCsvFsMdsPathV2 = 18,
        CsvControlDisableCaching = 19,
        CsvControlEnableCaching = 20,
        CsvControlStartForceDFO = 21,
        CsvControlStopForceDFO = 22,
    };
    enum class DEFINE_DOS_DEVICE_FLAGS : int32_t
    {
        DDD_RAW_TARGET_PATH = 1,
        DDD_REMOVE_DEFINITION = 2,
        DDD_EXACT_MATCH_ON_REMOVE = 4,
        DDD_NO_BROADCAST_SYSTEM = 8,
        DDD_LUID_BROADCAST_DRIVE = 16,
    };
    enum class FILE_ACCESS_FLAGS : int32_t
    {
        FILE_READ_DATA = 1,
        FILE_LIST_DIRECTORY = 1,
        FILE_WRITE_DATA = 2,
        FILE_ADD_FILE = 2,
        FILE_APPEND_DATA = 4,
        FILE_ADD_SUBDIRECTORY = 4,
        FILE_CREATE_PIPE_INSTANCE = 4,
        FILE_READ_EA = 8,
        FILE_WRITE_EA = 16,
        FILE_EXECUTE = 32,
        FILE_TRAVERSE = 32,
        FILE_DELETE_CHILD = 64,
        FILE_READ_ATTRIBUTES = 128,
        FILE_WRITE_ATTRIBUTES = 256,
        READ_CONTROL = 131072,
        SYNCHRONIZE = 1048576,
        STANDARD_RIGHTS_REQUIRED = 983040,
        STANDARD_RIGHTS_READ = 131072,
        STANDARD_RIGHTS_WRITE = 131072,
        STANDARD_RIGHTS_EXECUTE = 131072,
        STANDARD_RIGHTS_ALL = 2031616,
        SPECIFIC_RIGHTS_ALL = 65535,
        FILE_ALL_ACCESS = 2032127,
        FILE_GENERIC_READ = 1179785,
        FILE_GENERIC_WRITE = 1179926,
        FILE_GENERIC_EXECUTE = 1179808,
    };
    enum class FILE_CREATE_FLAGS : int32_t
    {
        CREATE_NEW = 1,
        CREATE_ALWAYS = 2,
        OPEN_EXISTING = 3,
        OPEN_ALWAYS = 4,
        TRUNCATE_EXISTING = 5,
    };
    enum class FILE_FLAGS_AND_ATTRIBUTES : int32_t
    {
        FILE_ATTRIBUTE_READONLY = 1,
        FILE_ATTRIBUTE_HIDDEN = 2,
        FILE_ATTRIBUTE_SYSTEM = 4,
        FILE_ATTRIBUTE_DIRECTORY = 16,
        FILE_ATTRIBUTE_ARCHIVE = 32,
        FILE_ATTRIBUTE_DEVICE = 64,
        FILE_ATTRIBUTE_NORMAL = 128,
        FILE_ATTRIBUTE_TEMPORARY = 256,
        FILE_ATTRIBUTE_SPARSE_FILE = 512,
        FILE_ATTRIBUTE_REPARSE_POINT = 1024,
        FILE_ATTRIBUTE_COMPRESSED = 2048,
        FILE_ATTRIBUTE_OFFLINE = 4096,
        FILE_ATTRIBUTE_NOT_CONTENT_INDEXED = 8192,
        FILE_ATTRIBUTE_ENCRYPTED = 16384,
        FILE_ATTRIBUTE_INTEGRITY_STREAM = 32768,
        FILE_ATTRIBUTE_VIRTUAL = 65536,
        FILE_ATTRIBUTE_NO_SCRUB_DATA = 131072,
        FILE_ATTRIBUTE_EA = 262144,
        FILE_ATTRIBUTE_PINNED = 524288,
        FILE_ATTRIBUTE_UNPINNED = 1048576,
        FILE_ATTRIBUTE_RECALL_ON_OPEN = 262144,
        FILE_ATTRIBUTE_RECALL_ON_DATA_ACCESS = 4194304,
    };
    enum class FILE_ID_TYPE : int32_t
    {
        FileIdType = 0,
        ObjectIdType = 1,
        ExtendedFileIdType = 2,
        MaximumFileIdType = 3,
    };
    enum class FILE_INFO_BY_HANDLE_CLASS : int32_t
    {
        FileBasicInfo = 0,
        FileStandardInfo = 1,
        FileNameInfo = 2,
        FileRenameInfo = 3,
        FileDispositionInfo = 4,
        FileAllocationInfo = 5,
        FileEndOfFileInfo = 6,
        FileStreamInfo = 7,
        FileCompressionInfo = 8,
        FileAttributeTagInfo = 9,
        FileIdBothDirectoryInfo = 10,
        FileIdBothDirectoryRestartInfo = 11,
        FileIoPriorityHintInfo = 12,
        FileRemoteProtocolInfo = 13,
        FileFullDirectoryInfo = 14,
        FileFullDirectoryRestartInfo = 15,
        FileStorageInfo = 16,
        FileAlignmentInfo = 17,
        FileIdInfo = 18,
        FileIdExtdDirectoryInfo = 19,
        FileIdExtdDirectoryRestartInfo = 20,
        FileDispositionInfoEx = 21,
        FileRenameInfoEx = 22,
        FileCaseSensitiveInfo = 23,
        FileNormalizedNameInfo = 24,
        MaximumFileInfoByHandleClass = 25,
    };
    enum class FILE_NOTIFY_CHANGE : int32_t
    {
        FILE_NOTIFY_CHANGE_FILE_NAME = 1,
        FILE_NOTIFY_CHANGE_DIR_NAME = 2,
        FILE_NOTIFY_CHANGE_ATTRIBUTES = 4,
        FILE_NOTIFY_CHANGE_SIZE = 8,
        FILE_NOTIFY_CHANGE_LAST_WRITE = 16,
        FILE_NOTIFY_CHANGE_LAST_ACCESS = 32,
        FILE_NOTIFY_CHANGE_CREATION = 64,
        FILE_NOTIFY_CHANGE_SECURITY = 256,
    };
    enum class FILE_SHARE_FLAGS : int32_t
    {
        FILE_SHARE_NONE = 0,
        FILE_SHARE_DELETE = 4,
        FILE_SHARE_READ = 1,
        FILE_SHARE_WRITE = 2,
    };
    enum class FILE_STORAGE_TIER_MEDIA_TYPE : int32_t
    {
        FileStorageTierMediaTypeUnspecified = 0,
        FileStorageTierMediaTypeDisk = 1,
        FileStorageTierMediaTypeSsd = 2,
        FileStorageTierMediaTypeScm = 4,
        FileStorageTierMediaTypeMax = 5,
    };
    enum class FINDEX_INFO_LEVELS : int32_t
    {
        FindExInfoStandard = 0,
        FindExInfoBasic = 1,
        FindExInfoMaxInfoLevel = 2,
    };
    enum class FINDEX_SEARCH_OPS : int32_t
    {
        FindExSearchNameMatch = 0,
        FindExSearchLimitToDirectories = 1,
        FindExSearchLimitToDevices = 2,
        FindExSearchMaxSearchOp = 3,
    };
    enum class FIND_FIRST_EX_FLAGS : int32_t
    {
        FIND_FIRST_EX_CASE_SENSITIVE = 1,
        FIND_FIRST_EX_LARGE_FETCH = 2,
        FIND_FIRST_EX_ON_DISK_ENTRIES_ONLY = 4,
    };
    enum class GET_FILEEX_INFO_LEVELS : int32_t
    {
        GetFileExInfoStandard = 0,
        GetFileExMaxInfoLevel = 1,
    };
    enum class MEDIA_TYPE : int32_t
    {
        Unknown = 0,
        F5_1Pt2_512 = 1,
        F3_1Pt44_512 = 2,
        F3_2Pt88_512 = 3,
        F3_20Pt8_512 = 4,
        F3_720_512 = 5,
        F5_360_512 = 6,
        F5_320_512 = 7,
        F5_320_1024 = 8,
        F5_180_512 = 9,
        F5_160_512 = 10,
        RemovableMedia = 11,
        FixedMedia = 12,
        F3_120M_512 = 13,
        F3_640_512 = 14,
        F5_640_512 = 15,
        F5_720_512 = 16,
        F3_1Pt2_512 = 17,
        F3_1Pt23_1024 = 18,
        F5_1Pt23_1024 = 19,
        F3_128Mb_512 = 20,
        F3_230Mb_512 = 21,
        F8_256_128 = 22,
        F3_200Mb_512 = 23,
        F3_240M_512 = 24,
        F3_32M_512 = 25,
    };
    enum class NtmsAccessMask : int32_t
    {
        NTMS_USE_ACCESS = 1,
        NTMS_MODIFY_ACCESS = 2,
        NTMS_CONTROL_ACCESS = 4,
    };
    enum class NtmsAllocateOptions : int32_t
    {
        NTMS_ALLOCATE_NEW = 1,
        NTMS_ALLOCATE_NEXT = 2,
        NTMS_ALLOCATE_ERROR_IF_UNAVAILABLE = 4,
    };
    enum class NtmsAllocationPolicy : int32_t
    {
        NTMS_ALLOCATE_FROMSCRATCH = 1,
    };
    enum class NtmsAsyncOperations : int32_t
    {
        NTMS_ASYNCOP_MOUNT = 1,
    };
    enum class NtmsAsyncStatus : int32_t
    {
        NTMS_ASYNCSTATE_QUEUED = 0,
        NTMS_ASYNCSTATE_WAIT_RESOURCE = 1,
        NTMS_ASYNCSTATE_WAIT_OPERATOR = 2,
        NTMS_ASYNCSTATE_INPROCESS = 3,
        NTMS_ASYNCSTATE_COMPLETE = 4,
    };
    enum class NtmsBarCodeState : int32_t
    {
        NTMS_BARCODESTATE_OK = 1,
        NTMS_BARCODESTATE_UNREADABLE = 2,
    };
    enum class NtmsCreateNtmsMediaOptions : int32_t
    {
        NTMS_ERROR_ON_DUPLICATE = 1,
    };
    enum class NtmsCreateOptions : int32_t
    {
        NTMS_OPEN_EXISTING = 1,
        NTMS_CREATE_NEW = 2,
        NTMS_OPEN_ALWAYS = 3,
    };
    enum class NtmsDeallocationPolicy : int32_t
    {
        NTMS_DEALLOCATE_TOSCRATCH = 1,
    };
    enum class NtmsDismountOptions : int32_t
    {
        NTMS_DISMOUNT_DEFERRED = 1,
        NTMS_DISMOUNT_IMMEDIATE = 2,
    };
    enum class NtmsDoorState : int32_t
    {
        NTMS_DOORSTATE_UNKNOWN = 0,
        NTMS_DOORSTATE_CLOSED = 1,
        NTMS_DOORSTATE_OPEN = 2,
    };
    enum class NtmsDriveState : int32_t
    {
        NTMS_DRIVESTATE_DISMOUNTED = 0,
        NTMS_DRIVESTATE_MOUNTED = 1,
        NTMS_DRIVESTATE_LOADED = 2,
        NTMS_DRIVESTATE_UNLOADED = 5,
        NTMS_DRIVESTATE_BEING_CLEANED = 6,
        NTMS_DRIVESTATE_DISMOUNTABLE = 7,
    };
    enum class NtmsDriveType : int32_t
    {
        NTMS_UNKNOWN_DRIVE = 0,
    };
    enum class NtmsEjectOperation : int32_t
    {
        NTMS_EJECT_START = 0,
        NTMS_EJECT_STOP = 1,
        NTMS_EJECT_QUEUE = 2,
        NTMS_EJECT_FORCE = 3,
        NTMS_EJECT_IMMEDIATE = 4,
        NTMS_EJECT_ASK_USER = 5,
    };
    enum class NtmsEnumerateOption : int32_t
    {
        NTMS_ENUM_DEFAULT = 0,
        NTMS_ENUM_ROOTPOOL = 1,
    };
    enum class NtmsInjectOperation : int32_t
    {
        NTMS_INJECT_START = 0,
        NTMS_INJECT_STOP = 1,
        NTMS_INJECT_RETRACT = 2,
        NTMS_INJECT_STARTMANY = 3,
    };
    enum class NtmsInventoryMethod : int32_t
    {
        NTMS_INVENTORY_NONE = 0,
        NTMS_INVENTORY_FAST = 1,
        NTMS_INVENTORY_OMID = 2,
        NTMS_INVENTORY_DEFAULT = 3,
        NTMS_INVENTORY_SLOT = 4,
        NTMS_INVENTORY_STOP = 5,
        NTMS_INVENTORY_MAX = 6,
    };
    enum class NtmsLibRequestFlags : int32_t
    {
        NTMS_LIBREQFLAGS_NOAUTOPURGE = 1,
        NTMS_LIBREQFLAGS_NOFAILEDPURGE = 2,
    };
    enum class NtmsLibraryFlags : int32_t
    {
        NTMS_LIBRARYFLAG_FIXEDOFFLINE = 1,
        NTMS_LIBRARYFLAG_CLEANERPRESENT = 2,
        NTMS_LIBRARYFLAG_AUTODETECTCHANGE = 4,
        NTMS_LIBRARYFLAG_IGNORECLEANERUSESREMAINING = 8,
        NTMS_LIBRARYFLAG_RECOGNIZECLEANERBARCODE = 16,
    };
    enum class NtmsLibraryType : int32_t
    {
        NTMS_LIBRARYTYPE_UNKNOWN = 0,
        NTMS_LIBRARYTYPE_OFFLINE = 1,
        NTMS_LIBRARYTYPE_ONLINE = 2,
        NTMS_LIBRARYTYPE_STANDALONE = 3,
    };
    enum class NtmsLmOperation : int32_t
    {
        NTMS_LM_REMOVE = 0,
        NTMS_LM_DISABLECHANGER = 1,
        NTMS_LM_DISABLELIBRARY = 1,
        NTMS_LM_ENABLECHANGER = 2,
        NTMS_LM_ENABLELIBRARY = 2,
        NTMS_LM_DISABLEDRIVE = 3,
        NTMS_LM_ENABLEDRIVE = 4,
        NTMS_LM_DISABLEMEDIA = 5,
        NTMS_LM_ENABLEMEDIA = 6,
        NTMS_LM_UPDATEOMID = 7,
        NTMS_LM_INVENTORY = 8,
        NTMS_LM_DOORACCESS = 9,
        NTMS_LM_EJECT = 10,
        NTMS_LM_EJECTCLEANER = 11,
        NTMS_LM_INJECT = 12,
        NTMS_LM_INJECTCLEANER = 13,
        NTMS_LM_PROCESSOMID = 14,
        NTMS_LM_CLEANDRIVE = 15,
        NTMS_LM_DISMOUNT = 16,
        NTMS_LM_MOUNT = 17,
        NTMS_LM_WRITESCRATCH = 18,
        NTMS_LM_CLASSIFY = 19,
        NTMS_LM_RESERVECLEANER = 20,
        NTMS_LM_RELEASECLEANER = 21,
        NTMS_LM_MAXWORKITEM = 22,
    };
    enum class NtmsLmState : int32_t
    {
        NTMS_LM_QUEUED = 0,
        NTMS_LM_INPROCESS = 1,
        NTMS_LM_PASSED = 2,
        NTMS_LM_FAILED = 3,
        NTMS_LM_INVALID = 4,
        NTMS_LM_WAITING = 5,
        NTMS_LM_DEFERRED = 6,
        NTMS_LM_DEFFERED = 6,
        NTMS_LM_CANCELLED = 7,
        NTMS_LM_STOPPED = 8,
    };
    enum class NtmsMediaPoolPolicy : int32_t
    {
        NTMS_POOLPOLICY_PURGEOFFLINESCRATCH = 1,
        NTMS_POOLPOLICY_KEEPOFFLINEIMPORT = 2,
    };
    enum class NtmsMediaState : int32_t
    {
        NTMS_MEDIASTATE_IDLE = 0,
        NTMS_MEDIASTATE_INUSE = 1,
        NTMS_MEDIASTATE_MOUNTED = 2,
        NTMS_MEDIASTATE_LOADED = 3,
        NTMS_MEDIASTATE_UNLOADED = 4,
        NTMS_MEDIASTATE_OPERROR = 5,
        NTMS_MEDIASTATE_OPREQ = 6,
    };
    enum class NtmsMountOptions : int32_t
    {
        NTMS_MOUNT_READ = 1,
        NTMS_MOUNT_WRITE = 2,
        NTMS_MOUNT_ERROR_NOT_AVAILABLE = 4,
        NTMS_MOUNT_ERROR_IF_UNAVAILABLE = 4,
        NTMS_MOUNT_ERROR_OFFLINE = 8,
        NTMS_MOUNT_ERROR_IF_OFFLINE = 8,
        NTMS_MOUNT_SPECIFIC_DRIVE = 16,
        NTMS_MOUNT_NOWAIT = 32,
    };
    enum class NtmsMountPriority : int32_t
    {
        NTMS_PRIORITY_DEFAULT = 0,
        NTMS_PRIORITY_HIGHEST = 15,
        NTMS_PRIORITY_HIGH = 7,
        NTMS_PRIORITY_NORMAL = 0,
        NTMS_PRIORITY_LOW = -7,
        NTMS_PRIORITY_LOWEST = -15,
    };
    enum class NtmsNotificationOperations : int32_t
    {
        NTMS_OBJ_UPDATE = 1,
        NTMS_OBJ_INSERT = 2,
        NTMS_OBJ_DELETE = 3,
        NTMS_EVENT_SIGNAL = 4,
        NTMS_EVENT_COMPLETE = 5,
    };
    enum class NtmsObjectsTypes : int32_t
    {
        NTMS_UNKNOWN = 0,
        NTMS_OBJECT = 1,
        NTMS_CHANGER = 2,
        NTMS_CHANGER_TYPE = 3,
        NTMS_COMPUTER = 4,
        NTMS_DRIVE = 5,
        NTMS_DRIVE_TYPE = 6,
        NTMS_IEDOOR = 7,
        NTMS_IEPORT = 8,
        NTMS_LIBRARY = 9,
        NTMS_LIBREQUEST = 10,
        NTMS_LOGICAL_MEDIA = 11,
        NTMS_MEDIA_POOL = 12,
        NTMS_MEDIA_TYPE = 13,
        NTMS_PARTITION = 14,
        NTMS_PHYSICAL_MEDIA = 15,
        NTMS_STORAGESLOT = 16,
        NTMS_OPREQUEST = 17,
        NTMS_UI_DESTINATION = 18,
        NTMS_NUMBER_OF_OBJECT_TYPES = 19,
    };
    enum class NtmsOpRequestFlags : int32_t
    {
        NTMS_OPREQFLAGS_NOAUTOPURGE = 1,
        NTMS_OPREQFLAGS_NOFAILEDPURGE = 2,
        NTMS_OPREQFLAGS_NOALERTS = 16,
        NTMS_OPREQFLAGS_NOTRAYICON = 32,
    };
    enum class NtmsOperationalState : int32_t
    {
        NTMS_READY = 0,
        NTMS_INITIALIZING = 10,
        NTMS_NEEDS_SERVICE = 20,
        NTMS_NOT_PRESENT = 21,
    };
    enum class NtmsOpreqCommand : int32_t
    {
        NTMS_OPREQ_UNKNOWN = 0,
        NTMS_OPREQ_NEWMEDIA = 1,
        NTMS_OPREQ_CLEANER = 2,
        NTMS_OPREQ_DEVICESERVICE = 3,
        NTMS_OPREQ_MOVEMEDIA = 4,
        NTMS_OPREQ_MESSAGE = 5,
    };
    enum class NtmsOpreqState : int32_t
    {
        NTMS_OPSTATE_UNKNOWN = 0,
        NTMS_OPSTATE_SUBMITTED = 1,
        NTMS_OPSTATE_ACTIVE = 2,
        NTMS_OPSTATE_INPROGRESS = 3,
        NTMS_OPSTATE_REFUSED = 4,
        NTMS_OPSTATE_COMPLETE = 5,
    };
    enum class NtmsPartitionState : int32_t
    {
        NTMS_PARTSTATE_UNKNOWN = 0,
        NTMS_PARTSTATE_UNPREPARED = 1,
        NTMS_PARTSTATE_INCOMPATIBLE = 2,
        NTMS_PARTSTATE_DECOMMISSIONED = 3,
        NTMS_PARTSTATE_AVAILABLE = 4,
        NTMS_PARTSTATE_ALLOCATED = 5,
        NTMS_PARTSTATE_COMPLETE = 6,
        NTMS_PARTSTATE_FOREIGN = 7,
        NTMS_PARTSTATE_IMPORT = 8,
        NTMS_PARTSTATE_RESERVED = 9,
    };
    enum class NtmsPoolType : int32_t
    {
        NTMS_POOLTYPE_UNKNOWN = 0,
        NTMS_POOLTYPE_SCRATCH = 1,
        NTMS_POOLTYPE_FOREIGN = 2,
        NTMS_POOLTYPE_IMPORT = 3,
        NTMS_POOLTYPE_APPLICATION = 1000,
    };
    enum class NtmsPortContent : int32_t
    {
        NTMS_PORTCONTENT_UNKNOWN = 0,
        NTMS_PORTCONTENT_FULL = 1,
        NTMS_PORTCONTENT_EMPTY = 2,
    };
    enum class NtmsPortPosition : int32_t
    {
        NTMS_PORTPOSITION_UNKNOWN = 0,
        NTMS_PORTPOSITION_EXTENDED = 1,
        NTMS_PORTPOSITION_RETRACTED = 2,
    };
    enum class NtmsReadWriteCharacteristics : int32_t
    {
        NTMS_MEDIARW_UNKNOWN = 0,
        NTMS_MEDIARW_REWRITABLE = 1,
        NTMS_MEDIARW_WRITEONCE = 2,
        NTMS_MEDIARW_READONLY = 3,
    };
    enum class NtmsSessionOptions : int32_t
    {
        NTMS_SESSION_QUERYEXPEDITE = 1,
    };
    enum class NtmsSlotState : int32_t
    {
        NTMS_SLOTSTATE_UNKNOWN = 0,
        NTMS_SLOTSTATE_FULL = 1,
        NTMS_SLOTSTATE_EMPTY = 2,
        NTMS_SLOTSTATE_NOTPRESENT = 3,
        NTMS_SLOTSTATE_NEEDSINVENTORY = 4,
    };
    enum class NtmsUIOperations : int32_t
    {
        NTMS_UIDEST_ADD = 1,
        NTMS_UIDEST_DELETE = 2,
        NTMS_UIDEST_DELETEALL = 3,
        NTMS_UIOPERATION_MAX = 4,
    };
    enum class NtmsUITypes : int32_t
    {
        NTMS_UITYPE_INVALID = 0,
        NTMS_UITYPE_INFO = 1,
        NTMS_UITYPE_REQ = 2,
        NTMS_UITYPE_ERR = 3,
        NTMS_UITYPE_MAX = 4,
    };
    enum class PARTITION_STYLE : int32_t
    {
        PARTITION_STYLE_MBR = 0,
        PARTITION_STYLE_GPT = 1,
        PARTITION_STYLE_RAW = 2,
    };
    enum class PRIORITY_HINT : int32_t
    {
        IoPriorityHintVeryLow = 0,
        IoPriorityHintLow = 1,
        IoPriorityHintNormal = 2,
        MaximumIoPriorityHintType = 3,
    };
    enum class READ_DIRECTORY_NOTIFY_INFORMATION_CLASS : int32_t
    {
        ReadDirectoryNotifyInformation = 1,
        ReadDirectoryNotifyExtendedInformation = 2,
    };
    enum class SERVER_CERTIFICATE_TYPE : int32_t
    {
        QUIC = 0,
    };
    enum class STORAGE_COMPONENT_HEALTH_STATUS : int32_t
    {
        HealthStatusUnknown = 0,
        HealthStatusNormal = 1,
        HealthStatusThrottled = 2,
        HealthStatusWarning = 3,
        HealthStatusDisabled = 4,
        HealthStatusFailed = 5,
    };
    enum class STORAGE_DEVICE_FORM_FACTOR : int32_t
    {
        FormFactorUnknown = 0,
        FormFactor3_5 = 1,
        FormFactor2_5 = 2,
        FormFactor1_8 = 3,
        FormFactor1_8Less = 4,
        FormFactorEmbedded = 5,
        FormFactorMemoryCard = 6,
        FormFactormSata = 7,
        FormFactorM_2 = 8,
        FormFactorPCIeBoard = 9,
        FormFactorDimm = 10,
    };
    enum class STORAGE_DEVICE_POWER_CAP_UNITS : int32_t
    {
        StorageDevicePowerCapUnitsPercent = 0,
        StorageDevicePowerCapUnitsMilliwatts = 1,
    };
    enum class STORAGE_PORT_CODE_SET : int32_t
    {
        StoragePortCodeSetReserved = 0,
        StoragePortCodeSetStorport = 1,
        StoragePortCodeSetSCSIport = 2,
        StoragePortCodeSetSpaceport = 3,
        StoragePortCodeSetATAport = 4,
        StoragePortCodeSetUSBport = 5,
        StoragePortCodeSetSBP2port = 6,
        StoragePortCodeSetSDport = 7,
    };
    enum class STORAGE_PROPERTY_ID : int32_t
    {
        StorageDeviceProperty = 0,
        StorageAdapterProperty = 1,
        StorageDeviceIdProperty = 2,
        StorageDeviceUniqueIdProperty = 3,
        StorageDeviceWriteCacheProperty = 4,
        StorageMiniportProperty = 5,
        StorageAccessAlignmentProperty = 6,
        StorageDeviceSeekPenaltyProperty = 7,
        StorageDeviceTrimProperty = 8,
        StorageDeviceWriteAggregationProperty = 9,
        StorageDeviceDeviceTelemetryProperty = 10,
        StorageDeviceLBProvisioningProperty = 11,
        StorageDevicePowerProperty = 12,
        StorageDeviceCopyOffloadProperty = 13,
        StorageDeviceResiliencyProperty = 14,
        StorageDeviceMediumProductType = 15,
        StorageAdapterRpmbProperty = 16,
        StorageAdapterCryptoProperty = 17,
        StorageDeviceIoCapabilityProperty = 48,
        StorageAdapterProtocolSpecificProperty = 49,
        StorageDeviceProtocolSpecificProperty = 50,
        StorageAdapterTemperatureProperty = 51,
        StorageDeviceTemperatureProperty = 52,
        StorageAdapterPhysicalTopologyProperty = 53,
        StorageDevicePhysicalTopologyProperty = 54,
        StorageDeviceAttributesProperty = 55,
        StorageDeviceManagementStatus = 56,
        StorageAdapterSerialNumberProperty = 57,
        StorageDeviceLocationProperty = 58,
        StorageDeviceNumaProperty = 59,
        StorageDeviceZonedDeviceProperty = 60,
        StorageDeviceUnsafeShutdownCount = 61,
        StorageDeviceEnduranceProperty = 62,
    };
    enum class STORAGE_PROTOCOL_ATA_DATA_TYPE : int32_t
    {
        AtaDataTypeUnknown = 0,
        AtaDataTypeIdentify = 1,
        AtaDataTypeLogPage = 2,
    };
    enum class STORAGE_PROTOCOL_NVME_DATA_TYPE : int32_t
    {
        NVMeDataTypeUnknown = 0,
        NVMeDataTypeIdentify = 1,
        NVMeDataTypeLogPage = 2,
        NVMeDataTypeFeature = 3,
    };
    enum class STORAGE_PROTOCOL_TYPE : int32_t
    {
        ProtocolTypeUnknown = 0,
        ProtocolTypeScsi = 1,
        ProtocolTypeAta = 2,
        ProtocolTypeNvme = 3,
        ProtocolTypeSd = 4,
        ProtocolTypeUfs = 5,
        ProtocolTypeProprietary = 126,
        ProtocolTypeMaxReserved = 127,
    };
    enum class STORAGE_QUERY_TYPE : int32_t
    {
        PropertyStandardQuery = 0,
        PropertyExistsQuery = 1,
        PropertyMaskQuery = 2,
        PropertyQueryMaxDefined = 3,
    };
    enum class STREAM_INFO_LEVELS : int32_t
    {
        FindStreamInfoStandard = 0,
        FindStreamInfoMaxInfoLevel = 1,
    };
    enum class TRANSACTION_OUTCOME : int32_t
    {
        TransactionOutcomeUndetermined = 1,
        TransactionOutcomeCommitted = 2,
        TransactionOutcomeAborted = 3,
    };
    enum class WRITE_CACHE_CHANGE : int32_t
    {
        WriteCacheChangeUnknown = 0,
        WriteCacheNotChangeable = 1,
        WriteCacheChangeable = 2,
    };
    enum class WRITE_CACHE_ENABLE : int32_t
    {
        WriteCacheEnableUnknown = 0,
        WriteCacheDisabled = 1,
        WriteCacheEnabled = 2,
    };
    enum class WRITE_CACHE_TYPE : int32_t
    {
        WriteCacheTypeUnknown = 0,
        WriteCacheTypeNone = 1,
        WriteCacheTypeWriteBack = 2,
        WriteCacheTypeWriteThrough = 3,
    };
    enum class WRITE_THROUGH : int32_t
    {
        WriteThroughUnknown = 0,
        WriteThroughNotSupported = 1,
        WriteThroughSupported = 2,
    };
#pragma endregion enums

#pragma region forward_declarations
    struct BOOT_AREA_INFO;
    struct BY_HANDLE_FILE_INFORMATION;
    struct CLFS_LOG_NAME_INFORMATION;
    struct CLFS_MGMT_NOTIFICATION;
    struct CLFS_MGMT_POLICY;
    struct CLFS_NODE_ID;
    struct CLFS_PHYSICAL_LSN_INFORMATION;
    struct CLFS_STREAM_ID_INFORMATION;
    struct CLS_ARCHIVE_DESCRIPTOR;
    struct CLS_CONTAINER_INFORMATION;
    struct CLS_INFORMATION;
    struct CLS_IO_STATISTICS;
    struct CLS_IO_STATISTICS_HEADER;
    struct CLS_LSN;
    struct CLS_SCAN_CONTEXT;
    struct CLS_WRITE_ENTRY;
    struct CONNECTION_INFO_0;
    struct CONNECTION_INFO_1;
    struct COPYFILE2_EXTENDED_PARAMETERS;
    struct COPYFILE2_MESSAGE;
    struct CREATEFILE2_EXTENDED_PARAMETERS;
    struct CREATE_DISK;
    struct CREATE_DISK_GPT;
    struct CREATE_DISK_MBR;
    struct CREATE_USN_JOURNAL_DATA;
    struct CSV_CONTROL_PARAM;
    struct CSV_IS_OWNED_BY_CSVFS;
    struct CSV_NAMESPACE_INFO;
    struct CSV_QUERY_FILE_REVISION;
    struct CSV_QUERY_MDS_PATH;
    struct CSV_QUERY_REDIRECT_STATE;
    struct CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT;
    struct DELETE_USN_JOURNAL_DATA;
    struct DEVICE_COPY_OFFLOAD_DESCRIPTOR;
    struct DEVICE_LB_PROVISIONING_DESCRIPTOR;
    struct DEVICE_POWER_DESCRIPTOR;
    struct DEVICE_SEEK_PENALTY_DESCRIPTOR;
    struct DEVICE_TRIM_DESCRIPTOR;
    struct DEVICE_WRITE_AGGREGATION_DESCRIPTOR;
    struct DISKQUOTA_USER_INFORMATION;
    struct DISK_CACHE_INFORMATION;
    struct DISK_DETECTION_INFO;
    struct DISK_EXTENT;
    struct DISK_EX_INT13_INFO;
    struct DISK_GEOMETRY;
    struct DISK_GEOMETRY_EX;
    struct DISK_GROW_PARTITION;
    struct DISK_INT13_INFO;
    struct DISK_PARTITION_INFO;
    struct DISK_PERFORMANCE;
    struct DISK_SPACE_INFORMATION;
    struct DRIVE_LAYOUT_INFORMATION;
    struct DRIVE_LAYOUT_INFORMATION_EX;
    struct DRIVE_LAYOUT_INFORMATION_GPT;
    struct DRIVE_LAYOUT_INFORMATION_MBR;
    struct DUPLICATE_EXTENTS_DATA;
    struct EFS_CERTIFICATE_BLOB;
    struct EFS_COMPATIBILITY_INFO;
    struct EFS_DECRYPTION_STATUS_INFO;
    struct EFS_ENCRYPTION_STATUS_INFO;
    struct EFS_HASH_BLOB;
    struct EFS_KEY_INFO;
    struct EFS_PIN_BLOB;
    struct EFS_RPC_BLOB;
    struct EFS_VERSION_INFO;
    struct ENCRYPTED_FILE_METADATA_SIGNATURE;
    struct ENCRYPTION_CERTIFICATE;
    struct ENCRYPTION_CERTIFICATE_HASH;
    struct ENCRYPTION_CERTIFICATE_HASH_LIST;
    struct ENCRYPTION_CERTIFICATE_LIST;
    struct ENCRYPTION_PROTECTOR;
    struct ENCRYPTION_PROTECTOR_LIST;
    struct EXFAT_STATISTICS;
    struct FAT_STATISTICS;
    struct FILESYSTEM_STATISTICS;
    struct FILESYSTEM_STATISTICS_EX;
    struct FILE_ALIGNMENT_INFO;
    struct FILE_ALLOCATED_RANGE_BUFFER;
    struct FILE_ALLOCATION_INFO;
    struct FILE_ATTRIBUTE_TAG_INFO;
    struct FILE_BASIC_INFO;
    struct FILE_COMPRESSION_INFO;
    struct FILE_DISPOSITION_INFO;
    struct FILE_END_OF_FILE_INFO;
    struct FILE_EXTENT;
    struct FILE_FULL_DIR_INFO;
    struct FILE_ID_128;
    struct FILE_ID_BOTH_DIR_INFO;
    struct FILE_ID_DESCRIPTOR;
    struct FILE_ID_EXTD_DIR_INFO;
    struct FILE_ID_INFO;
    struct FILE_INFO_2;
    struct FILE_INFO_3;
    struct FILE_IO_PRIORITY_HINT_INFO;
    struct FILE_LEVEL_TRIM;
    struct FILE_LEVEL_TRIM_OUTPUT;
    struct FILE_LEVEL_TRIM_RANGE;
    struct FILE_MAKE_COMPATIBLE_BUFFER;
    struct FILE_NAME_INFO;
    struct FILE_NOTIFY_EXTENDED_INFORMATION;
    struct FILE_NOTIFY_INFORMATION;
    struct FILE_OBJECTID_BUFFER;
    struct FILE_QUERY_ON_DISK_VOL_INFO_BUFFER;
    struct FILE_QUERY_SPARING_BUFFER;
    struct FILE_REMOTE_PROTOCOL_INFO;
    struct FILE_RENAME_INFO;
    struct FILE_SET_DEFECT_MGMT_BUFFER;
    struct FILE_SET_SPARSE_BUFFER;
    struct FILE_STANDARD_INFO;
    struct FILE_STORAGE_INFO;
    struct FILE_STORAGE_TIER;
    struct FILE_STORAGE_TIER_REGION;
    struct FILE_STREAM_INFO;
    struct FILE_SYSTEM_RECOGNITION_INFORMATION;
    struct FILE_ZERO_DATA_INFORMATION;
    struct FIND_BY_SID_DATA;
    struct FIND_BY_SID_OUTPUT;
    struct FORMAT_EX_PARAMETERS;
    struct FORMAT_PARAMETERS;
    struct FSCTL_GET_INTEGRITY_INFORMATION_BUFFER;
    struct FSCTL_QUERY_REGION_INFO_INPUT;
    struct FSCTL_QUERY_REGION_INFO_OUTPUT;
    struct FSCTL_QUERY_STORAGE_CLASSES_OUTPUT;
    struct FSCTL_SET_INTEGRITY_INFORMATION_BUFFER;
    struct FindChangeNotifcationHandle;
    struct FindFileHandle;
    struct FindFileNameHandle;
    struct FindStreamHandle;
    struct FindVolumeHandle;
    struct FindVolumeMointPointHandle;
    struct GET_DISK_ATTRIBUTES;
    struct GET_LENGTH_INFORMATION;
    struct KCRM_MARSHAL_HEADER;
    struct KCRM_PROTOCOL_BLOB;
    struct KCRM_TRANSACTION_BLOB;
    struct LOG_MANAGEMENT_CALLBACKS;
    struct LOOKUP_STREAM_FROM_CLUSTER_ENTRY;
    struct LOOKUP_STREAM_FROM_CLUSTER_INPUT;
    struct LOOKUP_STREAM_FROM_CLUSTER_OUTPUT;
    struct MARK_HANDLE_INFO;
    struct MFT_ENUM_DATA_V0;
    struct MFT_ENUM_DATA_V1;
    struct MOVE_FILE_DATA;
    struct MediaLabelInfo;
    struct NTFS_EXTENDED_VOLUME_DATA;
    struct NTFS_FILE_RECORD_INPUT_BUFFER;
    struct NTFS_FILE_RECORD_OUTPUT_BUFFER;
    struct NTFS_STATISTICS;
    struct NTFS_STATISTICS_EX;
    struct NTFS_VOLUME_DATA_BUFFER;
    struct NTMS_ALLOCATION_INFORMATION;
    struct NTMS_ASYNC_IO;
    struct NTMS_CHANGERINFORMATIONA;
    struct NTMS_CHANGERINFORMATIONW;
    struct NTMS_CHANGERTYPEINFORMATIONA;
    struct NTMS_CHANGERTYPEINFORMATIONW;
    struct NTMS_COMPUTERINFORMATION;
    struct NTMS_DRIVEINFORMATIONA;
    struct NTMS_DRIVEINFORMATIONW;
    struct NTMS_DRIVETYPEINFORMATIONA;
    struct NTMS_DRIVETYPEINFORMATIONW;
    struct NTMS_FILESYSTEM_INFO;
    struct NTMS_I1_LIBRARYINFORMATION;
    struct NTMS_I1_LIBREQUESTINFORMATIONA;
    struct NTMS_I1_LIBREQUESTINFORMATIONW;
    struct NTMS_I1_OBJECTINFORMATIONA;
    struct NTMS_I1_OBJECTINFORMATIONW;
    struct NTMS_I1_OPREQUESTINFORMATIONA;
    struct NTMS_I1_OPREQUESTINFORMATIONW;
    struct NTMS_I1_PARTITIONINFORMATIONA;
    struct NTMS_I1_PARTITIONINFORMATIONW;
    struct NTMS_I1_PMIDINFORMATIONA;
    struct NTMS_I1_PMIDINFORMATIONW;
    struct NTMS_IEDOORINFORMATION;
    struct NTMS_IEPORTINFORMATION;
    struct NTMS_LIBRARYINFORMATION;
    struct NTMS_LIBREQUESTINFORMATIONA;
    struct NTMS_LIBREQUESTINFORMATIONW;
    struct NTMS_LMIDINFORMATION;
    struct NTMS_MEDIAPOOLINFORMATION;
    struct NTMS_MEDIATYPEINFORMATION;
    struct NTMS_MOUNT_INFORMATION;
    struct NTMS_NOTIFICATIONINFORMATION;
    struct NTMS_OBJECTINFORMATIONA;
    struct NTMS_OBJECTINFORMATIONW;
    struct NTMS_OPREQUESTINFORMATIONA;
    struct NTMS_OPREQUESTINFORMATIONW;
    struct NTMS_PARTITIONINFORMATIONA;
    struct NTMS_PARTITIONINFORMATIONW;
    struct NTMS_PMIDINFORMATIONA;
    struct NTMS_PMIDINFORMATIONW;
    struct NTMS_STORAGESLOTINFORMATION;
    struct OFSTRUCT;
    struct OVERLAPPED_ENTRY;
    struct PARTITION_INFORMATION;
    struct PARTITION_INFORMATION_EX;
    struct PARTITION_INFORMATION_GPT;
    struct PARTITION_INFORMATION_MBR;
    struct PLEX_READ_DATA_REQUEST;
    struct READ_FILE_USN_DATA;
    struct READ_USN_JOURNAL_DATA_V0;
    struct READ_USN_JOURNAL_DATA_V1;
    struct REASSIGN_BLOCKS;
    struct REASSIGN_BLOCKS_EX;
    struct REPAIR_COPIES_INPUT;
    struct REPAIR_COPIES_OUTPUT;
    struct REPARSE_GUID_DATA_BUFFER;
    struct REQUEST_OPLOCK_INPUT_BUFFER;
    struct REQUEST_OPLOCK_OUTPUT_BUFFER;
    struct RETRIEVAL_POINTERS_BUFFER;
    struct RETRIEVAL_POINTER_BASE;
    struct SERVER_ALIAS_INFO_0;
    struct SERVER_CERTIFICATE_INFO_0;
    struct SESSION_INFO_0;
    struct SESSION_INFO_1;
    struct SESSION_INFO_10;
    struct SESSION_INFO_2;
    struct SESSION_INFO_502;
    struct SET_DISK_ATTRIBUTES;
    struct SET_PARTITION_INFORMATION;
    struct SHARE_INFO_0;
    struct SHARE_INFO_1;
    struct SHARE_INFO_1004;
    struct SHARE_INFO_1005;
    struct SHARE_INFO_1006;
    struct SHARE_INFO_1501;
    struct SHARE_INFO_1503;
    struct SHARE_INFO_2;
    struct SHARE_INFO_501;
    struct SHARE_INFO_502;
    struct SHARE_INFO_503;
    struct SHRINK_VOLUME_INFORMATION;
    struct STARTING_LCN_INPUT_BUFFER;
    struct STARTING_VCN_INPUT_BUFFER;
    struct STAT_SERVER_0;
    struct STAT_WORKSTATION_0;
    struct STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR;
    struct STORAGE_ADAPTER_DESCRIPTOR;
    struct STORAGE_ADAPTER_SERIAL_NUMBER;
    struct STORAGE_DESCRIPTOR_HEADER;
    struct STORAGE_DEVICE_ATTRIBUTES_DESCRIPTOR;
    struct STORAGE_DEVICE_DESCRIPTOR;
    struct STORAGE_DEVICE_ID_DESCRIPTOR;
    struct STORAGE_DEVICE_IO_CAPABILITY_DESCRIPTOR;
    struct STORAGE_DEVICE_POWER_CAP;
    struct STORAGE_DEVICE_RESILIENCY_DESCRIPTOR;
    struct STORAGE_HW_FIRMWARE_ACTIVATE;
    struct STORAGE_HW_FIRMWARE_DOWNLOAD;
    struct STORAGE_MEDIUM_PRODUCT_TYPE_DESCRIPTOR;
    struct STORAGE_MINIPORT_DESCRIPTOR;
    struct STORAGE_PHYSICAL_ADAPTER_DATA;
    struct STORAGE_PHYSICAL_DEVICE_DATA;
    struct STORAGE_PHYSICAL_NODE_DATA;
    struct STORAGE_PHYSICAL_TOPOLOGY_DESCRIPTOR;
    struct STORAGE_PROPERTY_QUERY;
    struct STORAGE_PROTOCOL_COMMAND;
    struct STORAGE_PROTOCOL_DATA_DESCRIPTOR;
    struct STORAGE_PROTOCOL_SPECIFIC_DATA;
    union STORAGE_SPEC_VERSION;
    struct STORAGE_TEMPERATURE_DATA_DESCRIPTOR;
    struct STORAGE_TEMPERATURE_INFO;
    struct STORAGE_TEMPERATURE_THRESHOLD;
    struct STORAGE_WRITE_CACHE_PROPERTY;
    struct TRANSACTION_NOTIFICATION;
    struct TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT;
    struct TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT;
    struct TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT;
    struct TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT;
    struct TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT;
    struct TXFS_CREATE_MINIVERSION_INFO;
    struct TXFS_GET_METADATA_INFO_OUT;
    struct TXFS_GET_TRANSACTED_VERSION;
    struct TXFS_LIST_TRANSACTIONS;
    struct TXFS_LIST_TRANSACTIONS_ENTRY;
    struct TXFS_LIST_TRANSACTION_LOCKED_FILES;
    struct TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY;
    struct TXFS_MODIFY_RM;
    struct TXFS_QUERY_RM_INFORMATION;
    struct TXFS_READ_BACKUP_INFORMATION_OUT;
    struct TXFS_SAVEPOINT_INFORMATION;
    struct TXFS_TRANSACTION_ACTIVE_INFO;
    struct TXFS_WRITE_BACKUP_INFORMATION;
    struct TXF_ID;
    struct TXF_LOG_RECORD_AFFECTED_FILE;
    struct TXF_LOG_RECORD_BASE;
    struct TXF_LOG_RECORD_TRUNCATE;
    struct TXF_LOG_RECORD_WRITE;
    struct USN_JOURNAL_DATA_V0;
    struct USN_JOURNAL_DATA_V1;
    struct USN_JOURNAL_DATA_V2;
    struct USN_RANGE_TRACK_OUTPUT;
    struct USN_RECORD_COMMON_HEADER;
    struct USN_RECORD_EXTENT;
    struct USN_RECORD_V2;
    struct USN_RECORD_V3;
    struct USN_RECORD_V4;
    struct USN_TRACK_MODIFIED_RANGES;
    struct VERIFY_INFORMATION;
    struct VOLUME_ALLOCATE_BC_STREAM_INPUT;
    struct VOLUME_ALLOCATE_BC_STREAM_OUTPUT;
    struct VOLUME_ALLOCATION_HINT_INPUT;
    struct VOLUME_ALLOCATION_HINT_OUTPUT;
    struct VOLUME_BITMAP_BUFFER;
    struct VOLUME_CRITICAL_IO;
    struct VOLUME_DISK_EXTENTS;
    struct VOLUME_FAILOVER_SET;
    struct VOLUME_GET_BC_PROPERTIES_INPUT;
    struct VOLUME_GET_BC_PROPERTIES_OUTPUT;
    struct VOLUME_GET_GPT_ATTRIBUTES_INFORMATION;
    struct VOLUME_LOGICAL_OFFSET;
    struct VOLUME_NUMBER;
    struct VOLUME_PHYSICAL_OFFSET;
    struct VOLUME_PHYSICAL_OFFSETS;
    struct VOLUME_READ_PLEX_INPUT;
    struct VOLUME_SET_GPT_ATTRIBUTES_INFORMATION;
    struct VOLUME_SHRINK_INFO;
    struct WIM_ENTRY_INFO;
    struct WIM_EXTERNAL_FILE_INFO;
    struct WIN32_FILE_ATTRIBUTE_DATA;
    struct WIN32_FIND_DATAA;
    struct WIN32_FIND_DATAW;
    struct WIN32_FIND_STREAM_DATA;
    struct WOF_FILE_COMPRESSION_INFO_V0;
    struct WOF_FILE_COMPRESSION_INFO_V1;
    struct IDiskQuotaControl;
    struct IDiskQuotaEvents;
    struct IDiskQuotaUser;
    struct IDiskQuotaUserBatch;
    struct IEnumDiskQuotaUsers;
#pragma endregion forward_declarations

#pragma region delegates
    using LPOVERLAPPED_COMPLETION_ROUTINE = void __stdcall(uint32_t, uint32_t, Windows::Win32::SystemServices::OVERLAPPED*);
    using MAXMEDIALABEL = uint32_t __stdcall(uint32_t*);
    using CLAIMMEDIALABEL = uint32_t __stdcall(uint8_t*, uint32_t, Windows::Win32::FileSystem::MediaLabelInfo*);
    using CLAIMMEDIALABELEX = uint32_t __stdcall(uint8_t*, uint32_t, Windows::Win32::FileSystem::MediaLabelInfo*, ::win32::guid*);
    using CLFS_BLOCK_ALLOCATION = void* __stdcall(uint32_t, void*);
    using CLFS_BLOCK_DEALLOCATION = void __stdcall(void*, void*);
    using PCLFS_COMPLETION_ROUTINE = void __stdcall(void*, uint32_t);
    using PLOG_TAIL_ADVANCE_CALLBACK = void __stdcall(Windows::Win32::SystemServices::HANDLE, Windows::Win32::FileSystem::CLS_LSN, void*);
    using PLOG_FULL_HANDLER_CALLBACK = void __stdcall(Windows::Win32::SystemServices::HANDLE, uint32_t, Windows::Win32::SystemServices::BOOL, void*);
    using PLOG_UNPINNED_CALLBACK = void __stdcall(Windows::Win32::SystemServices::HANDLE, void*);
    using WofEnumEntryProc = Windows::Win32::SystemServices::BOOL __stdcall(void*, void*);
    using WofEnumFilesProc = Windows::Win32::SystemServices::BOOL __stdcall(uint16_t*, void*, void*);
    using PFE_EXPORT_FUNC = uint32_t __stdcall(uint8_t*, void*, uint32_t);
    using PFE_IMPORT_FUNC = uint32_t __stdcall(uint8_t*, void*, uint32_t*);
    using LPPROGRESS_ROUTINE = uint32_t __stdcall(Windows::Win32::SystemServices::LARGE_INTEGER, Windows::Win32::SystemServices::LARGE_INTEGER, Windows::Win32::SystemServices::LARGE_INTEGER, Windows::Win32::SystemServices::LARGE_INTEGER, uint32_t, uint32_t, Windows::Win32::SystemServices::HANDLE, Windows::Win32::SystemServices::HANDLE, void*);
    using PCOPYFILE2_PROGRESS_ROUTINE = Windows::Win32::FileSystem::COPYFILE2_MESSAGE_ACTION __stdcall(Windows::Win32::FileSystem::COPYFILE2_MESSAGE*, void*);
#pragma endregion delegates

}
namespace win32::_impl_
{
#pragma region guids
    template <> inline constexpr guid guid_v<Windows::Win32::FileSystem::IDiskQuotaControl>{ 0x7988B572,0xEC89,0x11CF,{ 0x9C,0x00,0x00,0xAA,0x00,0xA1,0x4F,0x56 } }; // 7988B572-EC89-11CF-9C00-00AA00A14F56
    template <> inline constexpr guid guid_v<Windows::Win32::FileSystem::IDiskQuotaEvents>{ 0x7988B579,0xEC89,0x11CF,{ 0x9C,0x00,0x00,0xAA,0x00,0xA1,0x4F,0x56 } }; // 7988B579-EC89-11CF-9C00-00AA00A14F56
    template <> inline constexpr guid guid_v<Windows::Win32::FileSystem::IDiskQuotaUser>{ 0x7988B574,0xEC89,0x11CF,{ 0x9C,0x00,0x00,0xAA,0x00,0xA1,0x4F,0x56 } }; // 7988B574-EC89-11CF-9C00-00AA00A14F56
    template <> inline constexpr guid guid_v<Windows::Win32::FileSystem::IDiskQuotaUserBatch>{ 0x7988B576,0xEC89,0x11CF,{ 0x9C,0x00,0x00,0xAA,0x00,0xA1,0x4F,0x56 } }; // 7988B576-EC89-11CF-9C00-00AA00A14F56
    template <> inline constexpr guid guid_v<Windows::Win32::FileSystem::IEnumDiskQuotaUsers>{ 0x7988B577,0xEC89,0x11CF,{ 0x9C,0x00,0x00,0xAA,0x00,0xA1,0x4F,0x56 } }; // 7988B577-EC89-11CF-9C00-00AA00A14F56
#pragma endregion guids

}
#endif
