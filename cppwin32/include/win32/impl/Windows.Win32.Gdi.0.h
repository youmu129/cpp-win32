// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Gdi_0_H
#define WIN32_Windows_Win32_Gdi_0_H
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct RECT;
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct LOGFONTA;
    struct LOGFONTW;
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct BOOL;
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct HWND;
    struct LPARAM;
    struct WPARAM;
}
WIN32_EXPORT namespace win32::Windows::Win32::Xps
{
    struct DEVMODEA;
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
#pragma region enums
    enum class DISPLAYCONFIG_COLOR_ENCODING : int32_t
    {
        DISPLAYCONFIG_COLOR_ENCODING_RGB = 0,
        DISPLAYCONFIG_COLOR_ENCODING_YCBCR444 = 1,
        DISPLAYCONFIG_COLOR_ENCODING_YCBCR422 = 2,
        DISPLAYCONFIG_COLOR_ENCODING_YCBCR420 = 3,
        DISPLAYCONFIG_COLOR_ENCODING_INTENSITY = 4,
        DISPLAYCONFIG_COLOR_ENCODING_FORCE_UINT32 = -1,
    };
    enum class tagMxdcImageTypeEnums : int32_t
    {
        MXDC_IMAGETYPE_JPEGHIGH_COMPRESSION = 1,
        MXDC_IMAGETYPE_JPEGMEDIUM_COMPRESSION = 2,
        MXDC_IMAGETYPE_JPEGLOW_COMPRESSION = 3,
        MXDC_IMAGETYPE_PNG = 4,
    };
    enum class tagMxdcLandscapeRotationEnums : int32_t
    {
        MXDC_LANDSCAPE_ROTATE_COUNTERCLOCKWISE_90_DEGREES = 90,
        MXDC_LANDSCAPE_ROTATE_NONE = 0,
        MXDC_LANDSCAPE_ROTATE_COUNTERCLOCKWISE_270_DEGREES = -90,
    };
    enum class tagMxdcS0PageEnums : int32_t
    {
        MXDC_RESOURCE_TTF = 0,
        MXDC_RESOURCE_JPEG = 1,
        MXDC_RESOURCE_PNG = 2,
        MXDC_RESOURCE_TIFF = 3,
        MXDC_RESOURCE_WDP = 4,
        MXDC_RESOURCE_DICTIONARY = 5,
        MXDC_RESOURCE_ICC_PROFILE = 6,
        MXDC_RESOURCE_JPEG_THUMBNAIL = 7,
        MXDC_RESOURCE_PNG_THUMBNAIL = 8,
        MXDC_RESOURCE_MAX = 9,
    };
#pragma endregion enums

#pragma region forward_declarations
    struct ABC;
    struct ABCFLOAT;
    struct ABORTPATH;
    struct AXESLISTA;
    struct AXESLISTW;
    struct AXISINFOA;
    struct AXISINFOW;
    struct BITMAP;
    struct BITMAPCOREHEADER;
    struct BITMAPCOREINFO;
    struct BITMAPFILEHEADER;
    struct BITMAPINFO;
    struct BITMAPV4HEADER;
    struct BITMAPV5HEADER;
    struct BLENDFUNCTION;
    struct COLORADJUSTMENT;
    struct COLORCORRECTPALETTE;
    struct COLORMATCHTOTARGET;
    struct DESIGNVECTOR;
    struct DIBSECTION;
    struct DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO;
    struct DISPLAYCONFIG_SDR_WHITE_LEVEL;
    struct DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE;
    struct DISPLAY_DEVICEA;
    struct DISPLAY_DEVICEW;
    struct DRAWTEXTPARAMS;
    struct EMR;
    struct EMRALPHABLEND;
    struct EMRANGLEARC;
    struct EMRARC;
    struct EMRBITBLT;
    struct EMRCREATEBRUSHINDIRECT;
    struct EMRCREATECOLORSPACE;
    struct EMRCREATECOLORSPACEW;
    struct EMRCREATEDIBPATTERNBRUSHPT;
    struct EMRCREATEMONOBRUSH;
    struct EMRCREATEPALETTE;
    struct EMRCREATEPEN;
    struct EMRELLIPSE;
    struct EMREOF;
    struct EMREXCLUDECLIPRECT;
    struct EMREXTCREATEFONTINDIRECTW;
    struct EMREXTCREATEPEN;
    struct EMREXTESCAPE;
    struct EMREXTFLOODFILL;
    struct EMREXTSELECTCLIPRGN;
    struct EMREXTTEXTOUTA;
    struct EMRFILLPATH;
    struct EMRFILLRGN;
    struct EMRFORMAT;
    struct EMRFRAMERGN;
    struct EMRGDICOMMENT;
    struct EMRGLSBOUNDEDRECORD;
    struct EMRGLSRECORD;
    struct EMRGRADIENTFILL;
    struct EMRINVERTRGN;
    struct EMRLINETO;
    struct EMRMASKBLT;
    struct EMRMODIFYWORLDTRANSFORM;
    struct EMRNAMEDESCAPE;
    struct EMROFFSETCLIPRGN;
    struct EMRPIXELFORMAT;
    struct EMRPLGBLT;
    struct EMRPOLYDRAW;
    struct EMRPOLYDRAW16;
    struct EMRPOLYLINE;
    struct EMRPOLYLINE16;
    struct EMRPOLYPOLYLINE;
    struct EMRPOLYPOLYLINE16;
    struct EMRPOLYTEXTOUTA;
    struct EMRRESIZEPALETTE;
    struct EMRRESTOREDC;
    struct EMRROUNDRECT;
    struct EMRSCALEVIEWPORTEXTEX;
    struct EMRSELECTCLIPPATH;
    struct EMRSELECTOBJECT;
    struct EMRSELECTPALETTE;
    struct EMRSETARCDIRECTION;
    struct EMRSETCOLORADJUSTMENT;
    struct EMRSETCOLORSPACE;
    struct EMRSETDIBITSTODEVICE;
    struct EMRSETICMPROFILE;
    struct EMRSETMAPPERFLAGS;
    struct EMRSETMITERLIMIT;
    struct EMRSETPALETTEENTRIES;
    struct EMRSETPIXELV;
    struct EMRSETTEXTCOLOR;
    struct EMRSETVIEWPORTEXTEX;
    struct EMRSETVIEWPORTORGEX;
    struct EMRSETWORLDTRANSFORM;
    struct EMRSTRETCHBLT;
    struct EMRSTRETCHDIBITS;
    struct EMRTEXT;
    struct EMRTRANSPARENTBLT;
    struct ENHMETAHEADER;
    struct ENHMETARECORD;
    struct ENUMLOGFONTA;
    struct ENUMLOGFONTEXA;
    struct ENUMLOGFONTEXDVA;
    struct ENUMLOGFONTEXDVW;
    struct ENUMLOGFONTEXW;
    struct ENUMLOGFONTW;
    struct ENUMTEXTMETRICA;
    struct ENUMTEXTMETRICW;
    struct EXTLOGFONTA;
    struct EXTLOGFONTW;
    struct EXTLOGPEN;
    struct EXTLOGPEN32;
    struct FIXED;
    struct GCP_RESULTSA;
    struct GCP_RESULTSW;
    struct GLYPHMETRICS;
    struct GLYPHSET;
    struct GRADIENT_RECT;
    struct GRADIENT_TRIANGLE;
    struct HANDLETABLE;
    struct HBITMAP;
    struct HBRUSH;
    struct HCOLORSPACE;
    struct HCURSOR;
    struct HDC;
    struct HFONT;
    struct HICON;
    struct HPALETTE;
    struct HPEN;
    struct HRGN;
    struct HdcMetdataEnhFileHandle;
    struct HdcMetdataFileHandle;
    struct KERNINGPAIR;
    struct LOGBRUSH;
    struct LOGBRUSH32;
    struct LOGPALETTE;
    struct LOGPEN;
    struct MAT2;
    struct METAHEADER;
    struct METARECORD;
    struct MONITORINFO;
    struct MONITORINFOEXA;
    struct MONITORINFOEXW;
    struct NEWTEXTMETRICA;
    struct NEWTEXTMETRICEXA;
    struct NEWTEXTMETRICEXW;
    struct NEWTEXTMETRICW;
    struct OUTLINETEXTMETRICA;
    struct OUTLINETEXTMETRICW;
    struct PAINTSTRUCT;
    struct PANOSE;
    struct PELARRAY;
    struct POINTFX;
    struct POLYTEXTA;
    struct POLYTEXTW;
    struct RASTERIZER_STATUS;
    struct RGBQUAD;
    struct RGBTRIPLE;
    struct RGNDATA;
    struct RGNDATAHEADER;
    struct TEXTMETRICA;
    struct TEXTMETRICW;
    struct TRIVERTEX;
    struct TTEMBEDINFO;
    struct TTLOADINFO;
    struct TTPOLYCURVE;
    struct TTPOLYGONHEADER;
    struct TTVALIDATIONTESTSPARAMS;
    struct TTVALIDATIONTESTSPARAMSEX;
    struct WCRANGE;
    struct WGLSWAP;
    struct XFORM;
    struct tagMxdcEscapeHeader;
    struct tagMxdcGetFileNameData;
    struct tagMxdcPrintTicketEscape;
    struct tagMxdcPrintTicketPassthrough;
    struct tagMxdcS0PageData;
    struct tagMxdcS0PagePassthroughEscape;
    struct tagMxdcS0PageResourceEscape;
    struct tagMxdcXpsS0PageResource;
#pragma endregion forward_declarations

#pragma region delegates
    using OLDFONTENUMPROCA = int32_t __stdcall(Windows::Win32::Shell::LOGFONTA*, Windows::Win32::Gdi::TEXTMETRICA*, uint32_t, Windows::Win32::WindowsAndMessaging::LPARAM);
    using OLDFONTENUMPROCW = int32_t __stdcall(Windows::Win32::Shell::LOGFONTW*, Windows::Win32::Gdi::TEXTMETRICW*, uint32_t, Windows::Win32::WindowsAndMessaging::LPARAM);
    using FONTENUMPROCA = int32_t __stdcall();
    using FONTENUMPROCW = int32_t __stdcall();
    using FONTENUMPROC = int32_t __stdcall();
    using GOBJENUMPROC = int32_t __stdcall(void*, Windows::Win32::WindowsAndMessaging::LPARAM);
    using LINEDDAPROC = void __stdcall(int32_t, int32_t, Windows::Win32::WindowsAndMessaging::LPARAM);
    using LPFNDEVMODE = uint32_t __stdcall(Windows::Win32::WindowsAndMessaging::HWND, intptr_t, Windows::Win32::Xps::DEVMODEA*, int8_t*, int8_t*, Windows::Win32::Xps::DEVMODEA*, int8_t*, uint32_t);
    using LPFNDEVCAPS = uint32_t __stdcall(int8_t*, int8_t*, uint32_t, int8_t*, Windows::Win32::Xps::DEVMODEA*);
    using MFENUMPROC = int32_t __stdcall(Windows::Win32::Gdi::HDC, Windows::Win32::Gdi::HANDLETABLE*, Windows::Win32::Gdi::METARECORD*, int32_t, Windows::Win32::WindowsAndMessaging::LPARAM);
    using ENHMFENUMPROC = int32_t __stdcall(Windows::Win32::Gdi::HDC, Windows::Win32::Gdi::HANDLETABLE*, Windows::Win32::Gdi::ENHMETARECORD*, int32_t, Windows::Win32::WindowsAndMessaging::LPARAM);
    using CFP_ALLOCPROC = void* __stdcall(size_t);
    using CFP_REALLOCPROC = void* __stdcall(void*, size_t);
    using CFP_FREEPROC = void __stdcall(void*);
    using READEMBEDPROC = uint32_t __stdcall(void*, void*, uint32_t);
    using WRITEEMBEDPROC = uint32_t __stdcall(void*, void*, uint32_t);
    using GRAYSTRINGPROC = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::Gdi::HDC, Windows::Win32::WindowsAndMessaging::LPARAM, int32_t);
    using DRAWSTATEPROC = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::Gdi::HDC, Windows::Win32::WindowsAndMessaging::LPARAM, Windows::Win32::WindowsAndMessaging::WPARAM, int32_t, int32_t);
    using MONITORENUMPROC = Windows::Win32::SystemServices::BOOL __stdcall(intptr_t, Windows::Win32::Gdi::HDC, Windows::Win32::DisplayDevices::RECT*, Windows::Win32::WindowsAndMessaging::LPARAM);
#pragma endregion delegates

}
namespace win32::_impl_
{
#pragma region guids
#pragma endregion guids

}
#endif
