// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Http_0_H
#define WIN32_Windows_Win32_Http_0_H
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
#pragma region enums
    enum class HTTP_503_RESPONSE_VERBOSITY : int32_t
    {
        Http503ResponseVerbosityBasic = 0,
        Http503ResponseVerbosityLimited = 1,
        Http503ResponseVerbosityFull = 2,
    };
    enum class HTTP_AUTHENTICATION_HARDENING_LEVELS : int32_t
    {
        HttpAuthenticationHardeningLegacy = 0,
        HttpAuthenticationHardeningMedium = 1,
        HttpAuthenticationHardeningStrict = 2,
    };
    enum class HTTP_AUTH_STATUS : int32_t
    {
        HttpAuthStatusSuccess = 0,
        HttpAuthStatusNotAuthenticated = 1,
        HttpAuthStatusFailure = 2,
    };
    enum class HTTP_CACHE_POLICY_TYPE : int32_t
    {
        HttpCachePolicyNocache = 0,
        HttpCachePolicyUserInvalidates = 1,
        HttpCachePolicyTimeToLive = 2,
        HttpCachePolicyMaximum = 3,
    };
    enum class HTTP_DATA_CHUNK_TYPE : int32_t
    {
        HttpDataChunkFromMemory = 0,
        HttpDataChunkFromFileHandle = 1,
        HttpDataChunkFromFragmentCache = 2,
        HttpDataChunkFromFragmentCacheEx = 3,
        HttpDataChunkMaximum = 4,
    };
    enum class HTTP_DELEGATE_REQUEST_PROPERTY_ID : int32_t
    {
        DelegateRequestReservedProperty = 0,
    };
    enum class HTTP_ENABLED_STATE : int32_t
    {
        HttpEnabledStateActive = 0,
        HttpEnabledStateInactive = 1,
    };
    enum class HTTP_HEADER_ID : int32_t
    {
        HttpHeaderCacheControl = 0,
        HttpHeaderConnection = 1,
        HttpHeaderDate = 2,
        HttpHeaderKeepAlive = 3,
        HttpHeaderPragma = 4,
        HttpHeaderTrailer = 5,
        HttpHeaderTransferEncoding = 6,
        HttpHeaderUpgrade = 7,
        HttpHeaderVia = 8,
        HttpHeaderWarning = 9,
        HttpHeaderAllow = 10,
        HttpHeaderContentLength = 11,
        HttpHeaderContentType = 12,
        HttpHeaderContentEncoding = 13,
        HttpHeaderContentLanguage = 14,
        HttpHeaderContentLocation = 15,
        HttpHeaderContentMd5 = 16,
        HttpHeaderContentRange = 17,
        HttpHeaderExpires = 18,
        HttpHeaderLastModified = 19,
        HttpHeaderAccept = 20,
        HttpHeaderAcceptCharset = 21,
        HttpHeaderAcceptEncoding = 22,
        HttpHeaderAcceptLanguage = 23,
        HttpHeaderAuthorization = 24,
        HttpHeaderCookie = 25,
        HttpHeaderExpect = 26,
        HttpHeaderFrom = 27,
        HttpHeaderHost = 28,
        HttpHeaderIfMatch = 29,
        HttpHeaderIfModifiedSince = 30,
        HttpHeaderIfNoneMatch = 31,
        HttpHeaderIfRange = 32,
        HttpHeaderIfUnmodifiedSince = 33,
        HttpHeaderMaxForwards = 34,
        HttpHeaderProxyAuthorization = 35,
        HttpHeaderReferer = 36,
        HttpHeaderRange = 37,
        HttpHeaderTe = 38,
        HttpHeaderTranslate = 39,
        HttpHeaderUserAgent = 40,
        HttpHeaderRequestMaximum = 41,
        HttpHeaderAcceptRanges = 20,
        HttpHeaderAge = 21,
        HttpHeaderEtag = 22,
        HttpHeaderLocation = 23,
        HttpHeaderProxyAuthenticate = 24,
        HttpHeaderRetryAfter = 25,
        HttpHeaderServer = 26,
        HttpHeaderSetCookie = 27,
        HttpHeaderVary = 28,
        HttpHeaderWwwAuthenticate = 29,
        HttpHeaderResponseMaximum = 30,
        HttpHeaderMaximum = 41,
    };
    enum class HTTP_LOGGING_ROLLOVER_TYPE : int32_t
    {
        HttpLoggingRolloverSize = 0,
        HttpLoggingRolloverDaily = 1,
        HttpLoggingRolloverWeekly = 2,
        HttpLoggingRolloverMonthly = 3,
        HttpLoggingRolloverHourly = 4,
    };
    enum class HTTP_LOGGING_TYPE : int32_t
    {
        HttpLoggingTypeW3C = 0,
        HttpLoggingTypeIIS = 1,
        HttpLoggingTypeNCSA = 2,
        HttpLoggingTypeRaw = 3,
    };
    enum class HTTP_LOG_DATA_TYPE : int32_t
    {
        HttpLogDataTypeFields = 0,
    };
    enum class HTTP_PROTECTION_LEVEL_TYPE : int32_t
    {
        HttpProtectionLevelUnrestricted = 0,
        HttpProtectionLevelEdgeRestricted = 1,
        HttpProtectionLevelRestricted = 2,
    };
    enum class HTTP_QOS_SETTING_TYPE : int32_t
    {
        HttpQosSettingTypeBandwidth = 0,
        HttpQosSettingTypeConnectionLimit = 1,
        HttpQosSettingTypeFlowRate = 2,
    };
    enum class HTTP_REQUEST_AUTH_TYPE : int32_t
    {
        HttpRequestAuthTypeNone = 0,
        HttpRequestAuthTypeBasic = 1,
        HttpRequestAuthTypeDigest = 2,
        HttpRequestAuthTypeNTLM = 3,
        HttpRequestAuthTypeNegotiate = 4,
        HttpRequestAuthTypeKerberos = 5,
    };
    enum class HTTP_REQUEST_INFO_TYPE : int32_t
    {
        HttpRequestInfoTypeAuth = 0,
        HttpRequestInfoTypeChannelBind = 1,
        HttpRequestInfoTypeSslProtocol = 2,
        HttpRequestInfoTypeSslTokenBindingDraft = 3,
        HttpRequestInfoTypeSslTokenBinding = 4,
        HttpRequestInfoTypeRequestTiming = 5,
        HttpRequestInfoTypeTcpInfoV0 = 6,
        HttpRequestInfoTypeRequestSizing = 7,
        HttpRequestInfoTypeQuicStats = 8,
        HttpRequestInfoTypeTcpInfoV1 = 9,
    };
    enum class HTTP_REQUEST_PROPERTY : int32_t
    {
        HttpRequestPropertyIsb = 0,
        HttpRequestPropertyTcpInfoV0 = 1,
        HttpRequestPropertyQuicStats = 2,
        HttpRequestPropertyTcpInfoV1 = 3,
        HttpRequestPropertySni = 4,
    };
    enum class HTTP_REQUEST_SIZING_TYPE : int32_t
    {
        HttpRequestSizingTypeTlsHandshakeLeg1ClientData = 0,
        HttpRequestSizingTypeTlsHandshakeLeg1ServerData = 1,
        HttpRequestSizingTypeTlsHandshakeLeg2ClientData = 2,
        HttpRequestSizingTypeTlsHandshakeLeg2ServerData = 3,
        HttpRequestSizingTypeHeaders = 4,
        HttpRequestSizingTypeMax = 5,
    };
    enum class HTTP_REQUEST_TIMING_TYPE : int32_t
    {
        HttpRequestTimingTypeConnectionStart = 0,
        HttpRequestTimingTypeDataStart = 1,
        HttpRequestTimingTypeTlsCertificateLoadStart = 2,
        HttpRequestTimingTypeTlsCertificateLoadEnd = 3,
        HttpRequestTimingTypeTlsHandshakeLeg1Start = 4,
        HttpRequestTimingTypeTlsHandshakeLeg1End = 5,
        HttpRequestTimingTypeTlsHandshakeLeg2Start = 6,
        HttpRequestTimingTypeTlsHandshakeLeg2End = 7,
        HttpRequestTimingTypeTlsAttributesQueryStart = 8,
        HttpRequestTimingTypeTlsAttributesQueryEnd = 9,
        HttpRequestTimingTypeTlsClientCertQueryStart = 10,
        HttpRequestTimingTypeTlsClientCertQueryEnd = 11,
        HttpRequestTimingTypeHttp2StreamStart = 12,
        HttpRequestTimingTypeHttp2HeaderDecodeStart = 13,
        HttpRequestTimingTypeHttp2HeaderDecodeEnd = 14,
        HttpRequestTimingTypeRequestHeaderParseStart = 15,
        HttpRequestTimingTypeRequestHeaderParseEnd = 16,
        HttpRequestTimingTypeRequestRoutingStart = 17,
        HttpRequestTimingTypeRequestRoutingEnd = 18,
        HttpRequestTimingTypeRequestQueuedForInspection = 19,
        HttpRequestTimingTypeRequestDeliveredForInspection = 20,
        HttpRequestTimingTypeRequestReturnedAfterInspection = 21,
        HttpRequestTimingTypeRequestQueuedForDelegation = 22,
        HttpRequestTimingTypeRequestDeliveredForDelegation = 23,
        HttpRequestTimingTypeRequestReturnedAfterDelegation = 24,
        HttpRequestTimingTypeRequestQueuedForIO = 25,
        HttpRequestTimingTypeRequestDeliveredForIO = 26,
        HttpRequestTimingTypeHttp3StreamStart = 27,
        HttpRequestTimingTypeHttp3HeaderDecodeStart = 28,
        HttpRequestTimingTypeHttp3HeaderDecodeEnd = 29,
        HttpRequestTimingTypeMax = 30,
    };
    enum class HTTP_RESPONSE_INFO_TYPE : int32_t
    {
        HttpResponseInfoTypeMultipleKnownHeaders = 0,
        HttpResponseInfoTypeAuthenticationProperty = 1,
        HttpResponseInfoTypeQoSProperty = 2,
        HttpResponseInfoTypeChannelBind = 3,
    };
    enum class HTTP_SERVER_PROPERTY : int32_t
    {
        HttpServerAuthenticationProperty = 0,
        HttpServerLoggingProperty = 1,
        HttpServerQosProperty = 2,
        HttpServerTimeoutsProperty = 3,
        HttpServerQueueLengthProperty = 4,
        HttpServerStateProperty = 5,
        HttpServer503VerbosityProperty = 6,
        HttpServerBindingProperty = 7,
        HttpServerExtendedAuthenticationProperty = 8,
        HttpServerListenEndpointProperty = 9,
        HttpServerChannelBindProperty = 10,
        HttpServerProtectionLevelProperty = 11,
    };
    enum class HTTP_SERVICE_BINDING_TYPE : int32_t
    {
        HttpServiceBindingTypeNone = 0,
        HttpServiceBindingTypeW = 1,
        HttpServiceBindingTypeA = 2,
    };
    enum class HTTP_SERVICE_CONFIG_CACHE_KEY : int32_t
    {
        MaxCacheResponseSize = 0,
        CacheRangeChunkSize = 1,
    };
    enum class HTTP_SERVICE_CONFIG_ID : int32_t
    {
        HttpServiceConfigIPListenList = 0,
        HttpServiceConfigSSLCertInfo = 1,
        HttpServiceConfigUrlAclInfo = 2,
        HttpServiceConfigTimeout = 3,
        HttpServiceConfigCache = 4,
        HttpServiceConfigSslSniCertInfo = 5,
        HttpServiceConfigSslCcsCertInfo = 6,
        HttpServiceConfigSetting = 7,
        HttpServiceConfigSslCertInfoEx = 8,
        HttpServiceConfigSslSniCertInfoEx = 9,
        HttpServiceConfigSslCcsCertInfoEx = 10,
        HttpServiceConfigSslScopedCcsCertInfo = 11,
        HttpServiceConfigSslScopedCcsCertInfoEx = 12,
        HttpServiceConfigMax = 13,
    };
    enum class HTTP_SERVICE_CONFIG_QUERY_TYPE : int32_t
    {
        HttpServiceConfigQueryExact = 0,
        HttpServiceConfigQueryNext = 1,
        HttpServiceConfigQueryMax = 2,
    };
    enum class HTTP_SERVICE_CONFIG_SETTING_KEY : int32_t
    {
        HttpNone = 0,
        HttpTlsThrottle = 1,
    };
    enum class HTTP_SERVICE_CONFIG_TIMEOUT_KEY : int32_t
    {
        IdleConnectionTimeout = 0,
        HeaderWaitTimeout = 1,
    };
    enum class HTTP_SSL_SERVICE_CONFIG_EX_PARAM_TYPE : int32_t
    {
        ExParamTypeHttp2Window = 0,
        ExParamTypeHttp2SettingsLimits = 1,
        ExParamTypeHttpPerformance = 2,
        ExParamTypeMax = 3,
    };
    enum class HTTP_VERB : int32_t
    {
        HttpVerbUnparsed = 0,
        HttpVerbUnknown = 1,
        HttpVerbInvalid = 2,
        HttpVerbOPTIONS = 3,
        HttpVerbGET = 4,
        HttpVerbHEAD = 5,
        HttpVerbPOST = 6,
        HttpVerbPUT = 7,
        HttpVerbDELETE = 8,
        HttpVerbTRACE = 9,
        HttpVerbCONNECT = 10,
        HttpVerbTRACK = 11,
        HttpVerbMOVE = 12,
        HttpVerbCOPY = 13,
        HttpVerbPROPFIND = 14,
        HttpVerbPROPPATCH = 15,
        HttpVerbMKCOL = 16,
        HttpVerbLOCK = 17,
        HttpVerbUNLOCK = 18,
        HttpVerbSEARCH = 19,
        HttpVerbMaximum = 20,
    };
    enum class WINHTTP_REQUEST_STAT_ENTRY : int32_t
    {
        WinHttpConnectFailureCount = 0,
        WinHttpProxyFailureCount = 1,
        WinHttpTlsHandshakeClientLeg1Size = 2,
        WinHttpTlsHandshakeServerLeg1Size = 3,
        WinHttpTlsHandshakeClientLeg2Size = 4,
        WinHttpTlsHandshakeServerLeg2Size = 5,
        WinHttpRequestHeadersSize = 6,
        WinHttpRequestHeadersCompressedSize = 7,
        WinHttpResponseHeadersSize = 8,
        WinHttpResponseHeadersCompressedSize = 9,
        WinHttpResponseBodySize = 10,
        WinHttpResponseBodyCompressedSize = 11,
        WinHttpProxyTlsHandshakeClientLeg1Size = 12,
        WinHttpProxyTlsHandshakeServerLeg1Size = 13,
        WinHttpProxyTlsHandshakeClientLeg2Size = 14,
        WinHttpProxyTlsHandshakeServerLeg2Size = 15,
        WinHttpRequestStatLast = 16,
        WinHttpRequestStatMax = 32,
    };
    enum class WINHTTP_REQUEST_TIME_ENTRY : int32_t
    {
        WinHttpProxyDetectionStart = 0,
        WinHttpProxyDetectionEnd = 1,
        WinHttpConnectionAcquireStart = 2,
        WinHttpConnectionAcquireWaitEnd = 3,
        WinHttpConnectionAcquireEnd = 4,
        WinHttpNameResolutionStart = 5,
        WinHttpNameResolutionEnd = 6,
        WinHttpConnectionEstablishmentStart = 7,
        WinHttpConnectionEstablishmentEnd = 8,
        WinHttpTlsHandshakeClientLeg1Start = 9,
        WinHttpTlsHandshakeClientLeg1End = 10,
        WinHttpTlsHandshakeClientLeg2Start = 11,
        WinHttpTlsHandshakeClientLeg2End = 12,
        WinHttpTlsHandshakeClientLeg3Start = 13,
        WinHttpTlsHandshakeClientLeg3End = 14,
        WinHttpStreamWaitStart = 15,
        WinHttpStreamWaitEnd = 16,
        WinHttpSendRequestStart = 17,
        WinHttpSendRequestHeadersCompressionStart = 18,
        WinHttpSendRequestHeadersCompressionEnd = 19,
        WinHttpSendRequestHeadersEnd = 20,
        WinHttpSendRequestEnd = 21,
        WinHttpReceiveResponseStart = 22,
        WinHttpReceiveResponseHeadersDecompressionStart = 23,
        WinHttpReceiveResponseHeadersDecompressionEnd = 24,
        WinHttpReceiveResponseHeadersEnd = 25,
        WinHttpReceiveResponseBodyDecompressionDelta = 26,
        WinHttpReceiveResponseEnd = 27,
        WinHttpProxyTunnelStart = 28,
        WinHttpProxyTunnelEnd = 29,
        WinHttpProxyTlsHandshakeClientLeg1Start = 30,
        WinHttpProxyTlsHandshakeClientLeg1End = 31,
        WinHttpProxyTlsHandshakeClientLeg2Start = 32,
        WinHttpProxyTlsHandshakeClientLeg2End = 33,
        WinHttpProxyTlsHandshakeClientLeg3Start = 34,
        WinHttpProxyTlsHandshakeClientLeg3End = 35,
        WinHttpRequestTimeLast = 36,
        WinHttpRequestTimeMax = 64,
    };
    enum class WINHTTP_WEB_SOCKET_BUFFER_TYPE : int32_t
    {
        WINHTTP_WEB_SOCKET_BINARY_MESSAGE_BUFFER_TYPE = 0,
        WINHTTP_WEB_SOCKET_BINARY_FRAGMENT_BUFFER_TYPE = 1,
        WINHTTP_WEB_SOCKET_UTF8_MESSAGE_BUFFER_TYPE = 2,
        WINHTTP_WEB_SOCKET_UTF8_FRAGMENT_BUFFER_TYPE = 3,
        WINHTTP_WEB_SOCKET_CLOSE_BUFFER_TYPE = 4,
    };
    enum class WINHTTP_WEB_SOCKET_CLOSE_STATUS : int32_t
    {
        WINHTTP_WEB_SOCKET_SUCCESS_CLOSE_STATUS = 1000,
        WINHTTP_WEB_SOCKET_ENDPOINT_TERMINATED_CLOSE_STATUS = 1001,
        WINHTTP_WEB_SOCKET_PROTOCOL_ERROR_CLOSE_STATUS = 1002,
        WINHTTP_WEB_SOCKET_INVALID_DATA_TYPE_CLOSE_STATUS = 1003,
        WINHTTP_WEB_SOCKET_EMPTY_CLOSE_STATUS = 1005,
        WINHTTP_WEB_SOCKET_ABORTED_CLOSE_STATUS = 1006,
        WINHTTP_WEB_SOCKET_INVALID_PAYLOAD_CLOSE_STATUS = 1007,
        WINHTTP_WEB_SOCKET_POLICY_VIOLATION_CLOSE_STATUS = 1008,
        WINHTTP_WEB_SOCKET_MESSAGE_TOO_BIG_CLOSE_STATUS = 1009,
        WINHTTP_WEB_SOCKET_UNSUPPORTED_EXTENSIONS_CLOSE_STATUS = 1010,
        WINHTTP_WEB_SOCKET_SERVER_ERROR_CLOSE_STATUS = 1011,
        WINHTTP_WEB_SOCKET_SECURE_HANDSHAKE_ERROR_CLOSE_STATUS = 1015,
    };
    enum class WINHTTP_WEB_SOCKET_OPERATION : int32_t
    {
        WINHTTP_WEB_SOCKET_SEND_OPERATION = 0,
        WINHTTP_WEB_SOCKET_RECEIVE_OPERATION = 1,
        WINHTTP_WEB_SOCKET_CLOSE_OPERATION = 2,
        WINHTTP_WEB_SOCKET_SHUTDOWN_OPERATION = 3,
    };
    enum class _HTTP_URI_SCHEME : int32_t
    {
        HttpSchemeHttp = 0,
        HttpSchemeHttps = 1,
        HttpSchemeMaximum = 2,
    };
#pragma endregion enums

#pragma region forward_declarations
    struct HTTP2_SETTINGS_LIMITS_PARAM;
    struct HTTP2_WINDOW_SIZE_PARAM;
    struct HTTPAPI_VERSION;
    struct HTTP_BANDWIDTH_LIMIT_INFO;
    struct HTTP_BINDING_INFO;
    struct HTTP_BYTE_RANGE;
    struct HTTP_CACHE_POLICY;
    struct HTTP_CHANNEL_BIND_INFO;
    struct HTTP_CONNECTION_LIMIT_INFO;
    struct HTTP_COOKED_URL;
    struct HTTP_DATA_CHUNK;
    struct HTTP_DELEGATE_REQUEST_PROPERTY_INFO;
    struct HTTP_FLOWRATE_INFO;
    struct HTTP_KNOWN_HEADER;
    struct HTTP_LISTEN_ENDPOINT_INFO;
    struct HTTP_LOGGING_INFO;
    struct HTTP_LOG_DATA;
    struct HTTP_LOG_FIELDS_DATA;
    struct HTTP_MULTIPLE_KNOWN_HEADERS;
    struct HTTP_PERFORMANCE_PARAM;
    struct HTTP_PROPERTY_FLAGS;
    struct HTTP_PROTECTION_LEVEL_INFO;
    struct HTTP_QOS_SETTING_INFO;
    struct HTTP_QUERY_REQUEST_QUALIFIER_QUIC;
    struct HTTP_QUERY_REQUEST_QUALIFIER_TCP;
    struct HTTP_REQUEST_AUTH_INFO;
    struct HTTP_REQUEST_CHANNEL_BIND_STATUS;
    struct HTTP_REQUEST_HEADERS;
    struct HTTP_REQUEST_INFO;
    struct HTTP_REQUEST_PROPERTY_SNI;
    struct HTTP_REQUEST_SIZING_INFO;
    struct HTTP_REQUEST_TIMING_INFO;
    struct HTTP_REQUEST_TOKEN_BINDING_INFO;
    struct HTTP_REQUEST_V1;
    struct HTTP_REQUEST_V2;
    struct HTTP_RESPONSE_HEADERS;
    struct HTTP_RESPONSE_INFO;
    struct HTTP_RESPONSE_V1;
    struct HTTP_RESPONSE_V2;
    struct HTTP_SERVER_AUTHENTICATION_BASIC_PARAMS;
    struct HTTP_SERVER_AUTHENTICATION_DIGEST_PARAMS;
    struct HTTP_SERVER_AUTHENTICATION_INFO;
    struct HTTP_SERVICE_BINDING_A;
    struct HTTP_SERVICE_BINDING_BASE;
    struct HTTP_SERVICE_BINDING_W;
    struct HTTP_SERVICE_CONFIG_CACHE_SET;
    struct HTTP_SERVICE_CONFIG_IP_LISTEN_PARAM;
    struct HTTP_SERVICE_CONFIG_IP_LISTEN_QUERY;
    struct HTTP_SERVICE_CONFIG_SETTING_SET;
    struct HTTP_SERVICE_CONFIG_SSL_CCS_KEY;
    struct HTTP_SERVICE_CONFIG_SSL_CCS_QUERY;
    struct HTTP_SERVICE_CONFIG_SSL_CCS_QUERY_EX;
    struct HTTP_SERVICE_CONFIG_SSL_CCS_SET;
    struct HTTP_SERVICE_CONFIG_SSL_CCS_SET_EX;
    struct HTTP_SERVICE_CONFIG_SSL_KEY;
    struct HTTP_SERVICE_CONFIG_SSL_KEY_EX;
    struct HTTP_SERVICE_CONFIG_SSL_PARAM;
    struct HTTP_SERVICE_CONFIG_SSL_PARAM_EX;
    struct HTTP_SERVICE_CONFIG_SSL_QUERY;
    struct HTTP_SERVICE_CONFIG_SSL_QUERY_EX;
    struct HTTP_SERVICE_CONFIG_SSL_SET;
    struct HTTP_SERVICE_CONFIG_SSL_SET_EX;
    struct HTTP_SERVICE_CONFIG_SSL_SNI_KEY;
    struct HTTP_SERVICE_CONFIG_SSL_SNI_QUERY;
    struct HTTP_SERVICE_CONFIG_SSL_SNI_QUERY_EX;
    struct HTTP_SERVICE_CONFIG_SSL_SNI_SET;
    struct HTTP_SERVICE_CONFIG_SSL_SNI_SET_EX;
    struct HTTP_SERVICE_CONFIG_TIMEOUT_SET;
    struct HTTP_SERVICE_CONFIG_URLACL_KEY;
    struct HTTP_SERVICE_CONFIG_URLACL_PARAM;
    struct HTTP_SERVICE_CONFIG_URLACL_QUERY;
    struct HTTP_SERVICE_CONFIG_URLACL_SET;
    struct HTTP_SSL_CLIENT_CERT_INFO;
    struct HTTP_SSL_INFO;
    struct HTTP_SSL_PROTOCOL_INFO;
    struct HTTP_STATE_INFO;
    struct HTTP_TIMEOUT_LIMIT_INFO;
    struct HTTP_TRANSPORT_ADDRESS;
    struct HTTP_UNKNOWN_HEADER;
    struct HTTP_VERSION;
    struct URL_COMPONENTS;
    struct WINHTTP_ASYNC_RESULT;
    struct WINHTTP_AUTOPROXY_OPTIONS;
    struct WINHTTP_CERTIFICATE_INFO;
    struct WINHTTP_CONNECTION_INFO;
    struct WINHTTP_CREDS;
    struct WINHTTP_CREDS_EX;
    struct WINHTTP_CURRENT_USER_IE_PROXY_CONFIG;
    struct WINHTTP_EXTENDED_HEADER;
    struct WINHTTP_PROXY_INFO;
    struct WINHTTP_PROXY_RESULT;
    struct WINHTTP_PROXY_RESULT_ENTRY;
    struct WINHTTP_PROXY_RESULT_EX;
    struct WINHTTP_PROXY_SETTINGS;
    struct WINHTTP_REQUEST_STATS;
    struct WINHTTP_REQUEST_TIMES;
    struct WINHTTP_WEB_SOCKET_ASYNC_RESULT;
    struct WINHTTP_WEB_SOCKET_STATUS;
    struct _WinHttpProxyNetworkKey;
#pragma endregion forward_declarations

#pragma region delegates
    using WINHTTP_STATUS_CALLBACK = void __stdcall(void*, size_t, uint32_t, void*, uint32_t);
    using LPWINHTTP_STATUS_CALLBACK = void __stdcall();
#pragma endregion delegates

}
namespace win32::_impl_
{
#pragma region guids
#pragma endregion guids

}
#endif
