// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_IScsiDisc_0_H
#define WIN32_Windows_Win32_IScsiDisc_0_H
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
#pragma region enums
    enum class IKE_AUTHENTICATION_METHOD : int32_t
    {
        IKE_AUTHENTICATION_PRESHARED_KEY_METHOD = 1,
    };
    enum class ISCSI_AUTH_TYPES : int32_t
    {
        ISCSI_NO_AUTH_TYPE = 0,
        ISCSI_CHAP_AUTH_TYPE = 1,
        ISCSI_MUTUAL_CHAP_AUTH_TYPE = 2,
    };
    enum class ISCSI_DIGEST_TYPES : int32_t
    {
        ISCSI_DIGEST_TYPE_NONE = 0,
        ISCSI_DIGEST_TYPE_CRC32C = 1,
    };
    enum class MP_STORAGE_DIAGNOSTIC_LEVEL : int32_t
    {
        MpStorageDiagnosticLevelDefault = 0,
        MpStorageDiagnosticLevelMax = 1,
    };
    enum class MP_STORAGE_DIAGNOSTIC_TARGET_TYPE : int32_t
    {
        MpStorageDiagnosticTargetTypeUndefined = 0,
        MpStorageDiagnosticTargetTypeMiniport = 2,
        MpStorageDiagnosticTargetTypeHbaFirmware = 3,
        MpStorageDiagnosticTargetTypeMax = 4,
    };
    enum class NVCACHE_STATUS : int32_t
    {
        NvCacheStatusUnknown = 0,
        NvCacheStatusDisabling = 1,
        NvCacheStatusDisabled = 2,
        NvCacheStatusEnabled = 3,
    };
    enum class NVCACHE_TYPE : int32_t
    {
        NvCacheTypeUnknown = 0,
        NvCacheTypeNone = 1,
        NvCacheTypeWriteBack = 2,
        NvCacheTypeWriteThrough = 3,
    };
    enum class NV_SEP_WRITE_CACHE_TYPE : int32_t
    {
        NVSEPWriteCacheTypeUnknown = 0,
        NVSEPWriteCacheTypeNone = 1,
        NVSEPWriteCacheTypeWriteBack = 2,
        NVSEPWriteCacheTypeWriteThrough = 3,
    };
    enum class TARGETPROTOCOLTYPE : int32_t
    {
        ISCSI_TCP_PROTOCOL_TYPE = 0,
    };
    enum class TARGET_INFORMATION_CLASS : int32_t
    {
        ProtocolType = 0,
        TargetAlias = 1,
        DiscoveryMechanisms = 2,
        PortalGroups = 3,
        PersistentTargetMappings = 4,
        InitiatorName = 5,
        TargetFlags = 6,
        LoginOptions = 7,
    };
#pragma endregion enums

#pragma region forward_declarations
    struct ATA_PASS_THROUGH_DIRECT;
    struct ATA_PASS_THROUGH_EX;
    struct DSM_NOTIFICATION_REQUEST_BLOCK;
    struct DUMP_DRIVER;
    struct DUMP_DRIVER_EX;
    struct DUMP_POINTERS;
    struct DUMP_POINTERS_EX;
    struct DUMP_POINTERS_VERSION;
    struct FIRMWARE_REQUEST_BLOCK;
    struct HYBRID_DEMOTE_BY_SIZE;
    struct HYBRID_DIRTY_THRESHOLDS;
    struct HYBRID_INFORMATION;
    struct HYBRID_REQUEST_BLOCK;
    struct IDE_IO_CONTROL;
    struct IKE_AUTHENTICATION_INFORMATION;
    struct IKE_AUTHENTICATION_PRESHARED_KEY;
    struct IO_SCSI_CAPABILITIES;
    struct ISCSI_CONNECTION_INFOA;
    struct ISCSI_CONNECTION_INFOW;
    struct ISCSI_CONNECTION_INFO_EX;
    struct ISCSI_DEVICE_ON_SESSIONA;
    struct ISCSI_DEVICE_ON_SESSIONW;
    struct ISCSI_LOGIN_OPTIONS;
    struct ISCSI_SESSION_INFOA;
    struct ISCSI_SESSION_INFOW;
    struct ISCSI_SESSION_INFO_EX;
    struct ISCSI_TARGET_MAPPINGA;
    struct ISCSI_TARGET_MAPPINGW;
    struct ISCSI_TARGET_PORTALA;
    struct ISCSI_TARGET_PORTALW;
    struct ISCSI_TARGET_PORTAL_GROUPA;
    struct ISCSI_TARGET_PORTAL_GROUPW;
    struct ISCSI_TARGET_PORTAL_INFOA;
    struct ISCSI_TARGET_PORTAL_INFOW;
    struct ISCSI_TARGET_PORTAL_INFO_EXA;
    struct ISCSI_TARGET_PORTAL_INFO_EXW;
    struct ISCSI_UNIQUE_SESSION_ID;
    struct ISCSI_VERSION_INFO;
    struct MPIO_PASS_THROUGH_PATH;
    struct MPIO_PASS_THROUGH_PATH_DIRECT;
    struct MPIO_PASS_THROUGH_PATH_DIRECT_EX;
    struct MPIO_PASS_THROUGH_PATH_EX;
    struct MP_DEVICE_DATA_SET_RANGE;
    struct NTSCSI_UNICODE_STRING;
    struct NVCACHE_HINT_PAYLOAD;
    struct NVCACHE_PRIORITY_LEVEL_DESCRIPTOR;
    struct NVCACHE_REQUEST_BLOCK;
    struct NV_FEATURE_PARAMETER;
    struct NV_SEP_CACHE_PARAMETER;
    struct PERSISTENT_ISCSI_LOGIN_INFOA;
    struct PERSISTENT_ISCSI_LOGIN_INFOW;
    struct SCSI_ADAPTER_BUS_INFO;
    struct SCSI_ADDRESS;
    struct SCSI_BUS_DATA;
    struct SCSI_INQUIRY_DATA;
    struct SCSI_LUN_LIST;
    struct SCSI_PASS_THROUGH;
    struct SCSI_PASS_THROUGH_DIRECT;
    struct SCSI_PASS_THROUGH_DIRECT_EX;
    struct SCSI_PASS_THROUGH_EX;
    struct SRB_IO_CONTROL;
    struct STORAGE_DIAGNOSTIC_MP_REQUEST;
    struct STORAGE_ENDURANCE_DATA_DESCRIPTOR;
    struct STORAGE_ENDURANCE_INFO;
    struct STORAGE_FIRMWARE_ACTIVATE;
    struct STORAGE_FIRMWARE_DOWNLOAD;
    struct STORAGE_FIRMWARE_DOWNLOAD_V2;
    struct STORAGE_FIRMWARE_INFO;
    struct STORAGE_FIRMWARE_INFO_V2;
    struct STORAGE_FIRMWARE_SLOT_INFO;
    struct STORAGE_FIRMWARE_SLOT_INFO_V2;
    struct _ADAPTER_OBJECT;
#pragma endregion forward_declarations

#pragma region delegates
    using DUMP_DEVICE_POWERON_ROUTINE = int32_t __stdcall(void*);
    using PDUMP_DEVICE_POWERON_ROUTINE = int32_t __stdcall();
#pragma endregion delegates

}
namespace win32::_impl_
{
#pragma region guids
#pragma endregion guids

}
#endif
