// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Multimedia_0_H
#define WIN32_Windows_Win32_Multimedia_0_H
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct BOOL;
    struct LRESULT;
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct HWND;
    struct LPARAM;
    struct WPARAM;
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
#pragma region enums
#pragma endregion enums

#pragma region forward_declarations
    struct ACMSTREAMHEADER;
    struct ADPCMCOEFSET;
    struct ADPCMEWAVEFORMAT;
    struct ADPCMWAVEFORMAT;
    struct APTXWAVEFORMAT;
    struct AUDIOFILE_AF10WAVEFORMAT;
    struct AUDIOFILE_AF36WAVEFORMAT;
    struct AUXCAPS2A;
    struct AUXCAPS2W;
    struct AUXCAPSA;
    struct AUXCAPSW;
    struct AVICOMPRESSOPTIONS;
    struct AVIFILEINFOA;
    struct AVIFILEINFOW;
    struct AVISTREAMINFOA;
    struct AVISTREAMINFOW;
    struct CAPDRIVERCAPS;
    struct CAPINFOCHUNK;
    struct CAPSTATUS;
    struct CAPTUREPARMS;
    struct COMPVARS;
    struct CONTRESCR10WAVEFORMAT;
    struct CONTRESVQLPCWAVEFORMAT;
    struct CREATIVEADPCMWAVEFORMAT;
    struct CREATIVEFASTSPEECH10WAVEFORMAT;
    struct CREATIVEFASTSPEECH8WAVEFORMAT;
    struct CSIMAADPCMWAVEFORMAT;
    struct DIALOGICOKIADPCMWAVEFORMAT;
    struct DIGIADPCMWAVEFORMAT;
    struct DIGIFIXWAVEFORMAT;
    struct DIGIREALWAVEFORMAT;
    struct DIGISTDWAVEFORMAT;
    struct DOLBYAC2WAVEFORMAT;
    struct DRAWDIBTIME;
    struct DRMWAVEFORMAT;
    struct DRVCONFIGINFO;
    struct DRVCONFIGINFOEX;
    struct DRVM_IOCTL_DATA;
    struct DVIADPCMWAVEFORMAT;
    struct ECHOSC1WAVEFORMAT;
    struct ECHOWAVEFILTER;
    struct EXBMINFOHEADER;
    struct FMTOWNS_SND_WAVEFORMAT;
    struct G721_ADPCMWAVEFORMAT;
    struct G723_ADPCMWAVEFORMAT;
    struct GSM610WAVEFORMAT;
    struct HACMDRIVERID__;
    struct HACMDRIVER__;
    struct HACMOBJ__;
    struct HACMSTREAM__;
    struct HDRVR__;
    struct HIC__;
    struct HMIDIIN__;
    struct HMIDIOUT__;
    struct HMIDISTRM__;
    struct HMIDI__;
    struct HMIXEROBJ__;
    struct HMIXER__;
    struct HMMIO__;
    struct HVIDEO__;
    struct HWAVEIN__;
    struct HWAVEOUT__;
    struct HWAVE__;
    struct ICCOMPRESS;
    struct ICCOMPRESSFRAMES;
    struct ICDECOMPRESS;
    struct ICDECOMPRESSEX;
    struct ICDRAW;
    struct ICDRAWBEGIN;
    struct ICDRAWSUGGEST;
    struct ICINFO;
    struct ICOPEN;
    struct ICPALETTE;
    struct ICSETSTATUSPROC;
    struct IMAADPCMWAVEFORMAT;
    struct JOYCAPS2A;
    struct JOYCAPS2W;
    struct JOYCAPSA;
    struct JOYCAPSW;
    struct JOYINFO;
    struct JOYINFOEX;
    struct JPEGINFOHEADER;
    struct MCI_DGV_CAPTURE_PARMSA;
    struct MCI_DGV_CAPTURE_PARMSW;
    struct MCI_DGV_COPY_PARMS;
    struct MCI_DGV_CUE_PARMS;
    struct MCI_DGV_CUT_PARMS;
    struct MCI_DGV_DELETE_PARMS;
    struct MCI_DGV_INFO_PARMSA;
    struct MCI_DGV_INFO_PARMSW;
    struct MCI_DGV_LIST_PARMSA;
    struct MCI_DGV_LIST_PARMSW;
    struct MCI_DGV_MONITOR_PARMS;
    struct MCI_DGV_OPEN_PARMSA;
    struct MCI_DGV_OPEN_PARMSW;
    struct MCI_DGV_PASTE_PARMS;
    struct MCI_DGV_QUALITY_PARMSA;
    struct MCI_DGV_QUALITY_PARMSW;
    struct MCI_DGV_RECORD_PARMS;
    struct MCI_DGV_RECT_PARMS;
    struct MCI_DGV_RESERVE_PARMSA;
    struct MCI_DGV_RESERVE_PARMSW;
    struct MCI_DGV_RESTORE_PARMSA;
    struct MCI_DGV_RESTORE_PARMSW;
    struct MCI_DGV_SAVE_PARMSA;
    struct MCI_DGV_SAVE_PARMSW;
    struct MCI_DGV_SETAUDIO_PARMSA;
    struct MCI_DGV_SETAUDIO_PARMSW;
    struct MCI_DGV_SETVIDEO_PARMSA;
    struct MCI_DGV_SETVIDEO_PARMSW;
    struct MCI_DGV_SET_PARMS;
    struct MCI_DGV_SIGNAL_PARMS;
    struct MCI_DGV_STATUS_PARMSA;
    struct MCI_DGV_STATUS_PARMSW;
    struct MCI_DGV_STEP_PARMS;
    struct MCI_DGV_UPDATE_PARMS;
    struct MCI_DGV_WINDOW_PARMSA;
    struct MCI_DGV_WINDOW_PARMSW;
    struct MCI_OPEN_DRIVER_PARMS;
    struct MEDIASPACEADPCMWAVEFORMAT;
    struct MIDIEVENT;
    struct MIDIHDR;
    struct MIDIINCAPS2A;
    struct MIDIINCAPS2W;
    struct MIDIINCAPSA;
    struct MIDIINCAPSW;
    struct MIDIOUTCAPS2A;
    struct MIDIOUTCAPS2W;
    struct MIDIOUTCAPSA;
    struct MIDIOUTCAPSW;
    struct MIDIPROPTEMPO;
    struct MIDIPROPTIMEDIV;
    struct MIDISTRMBUFFVER;
    struct MIXERCAPS2A;
    struct MIXERCAPS2W;
    struct MIXERCAPSA;
    struct MIXERCAPSW;
    struct MIXERCONTROLA;
    struct MIXERCONTROLDETAILS;
    struct MIXERCONTROLDETAILS_BOOLEAN;
    struct MIXERCONTROLDETAILS_LISTTEXTA;
    struct MIXERCONTROLDETAILS_LISTTEXTW;
    struct MIXERCONTROLDETAILS_SIGNED;
    struct MIXERCONTROLDETAILS_UNSIGNED;
    struct MIXERCONTROLW;
    struct MIXERLINEA;
    struct MIXERLINECONTROLSA;
    struct MIXERLINECONTROLSW;
    struct MIXERLINEW;
    struct MMCKINFO;
    struct MMIOINFO;
    struct MMTIME;
    struct MSAUDIO1WAVEFORMAT;
    struct NMS_VBXADPCMWAVEFORMAT;
    struct OLIADPCMWAVEFORMAT;
    struct OLICELPWAVEFORMAT;
    struct OLIGSMWAVEFORMAT;
    struct OLIOPRWAVEFORMAT;
    struct OLISBCWAVEFORMAT;
    struct PCMWAVEFORMAT;
    struct SIERRAADPCMWAVEFORMAT;
    struct SONARCWAVEFORMAT;
    struct TIMECAPS;
    struct TRUESPEECHWAVEFORMAT;
    struct VIDEOHDR;
    struct VOLUMEWAVEFILTER;
    struct WAVEFILTER;
    struct WAVEFORMAT;
    struct WAVEFORMATEX;
    struct WAVEFORMATEXTENSIBLE;
    struct WAVEHDR;
    struct WAVEINCAPS2A;
    struct WAVEINCAPS2W;
    struct WAVEINCAPSA;
    struct WAVEINCAPSW;
    struct WAVEOUTCAPS2A;
    struct WAVEOUTCAPS2W;
    struct WAVEOUTCAPSA;
    struct WAVEOUTCAPSW;
    struct WMAUDIO2WAVEFORMAT;
    struct WMAUDIO3WAVEFORMAT;
    struct YAMAHA_ADPCMWAVEFORMAT;
    struct channel_caps_tag;
    struct joycalibrate_tag;
    struct joypos_tag;
    struct joyrange_tag;
    struct joyreghwconfig_tag;
    struct joyreghwsettings_tag;
    struct joyreguservalues_tag;
    struct midiopenstrmid_tag;
    struct s_RIFFWAVE_inst;
    struct tACMDRIVERDETAILSA;
    struct tACMDRIVERDETAILSW;
    struct tACMFILTERCHOOSEA;
    struct tACMFILTERCHOOSEW;
    struct tACMFILTERDETAILSA;
    struct tACMFILTERDETAILSW;
    struct tACMFILTERTAGDETAILSA;
    struct tACMFILTERTAGDETAILSW;
    struct tACMFORMATCHOOSEA;
    struct tACMFORMATCHOOSEW;
    struct tACMFORMATDETAILSA;
    struct tACMFORMATDETAILSW;
    struct tACMFORMATTAGDETAILSA;
    struct tACMFORMATTAGDETAILSW;
    struct tMIXEROPENDESC;
    struct tag_s_RIFFWAVE_INST;
    struct timerevent_tag;
    struct waveopendesc_tag;
    struct IAVIEditStream;
    struct IAVIFile;
    struct IAVIPersistFile;
    struct IAVIStream;
    struct IAVIStreaming;
    struct IGetFrame;
    struct KSDATAFORMAT_SUBTYPE_IEEE_FLOAT;
    struct KSDATAFORMAT_SUBTYPE_PCM;
    struct KSDATAFORMAT_SUBTYPE_WAVEFORMATEX;
#pragma endregion forward_declarations

#pragma region delegates
    using DRVCALLBACK = void __stdcall(intptr_t, uint32_t, size_t, size_t, size_t);
    using LPDRVCALLBACK = void __stdcall();
    using PDRVCALLBACK = void __stdcall();
    using DRIVERPROC = Windows::Win32::SystemServices::LRESULT __stdcall(size_t, intptr_t, uint32_t, Windows::Win32::WindowsAndMessaging::LPARAM, Windows::Win32::WindowsAndMessaging::LPARAM);
    using DRIVERMSGPROC = uint32_t __stdcall(uint32_t, uint32_t, size_t, size_t, size_t);
    using MMIOPROC = Windows::Win32::SystemServices::LRESULT __stdcall(int8_t*, uint32_t, Windows::Win32::WindowsAndMessaging::LPARAM, Windows::Win32::WindowsAndMessaging::LPARAM);
    using LPMMIOPROC = Windows::Win32::SystemServices::LRESULT __stdcall();
    using WAVECALLBACK = void __stdcall();
    using LPWAVECALLBACK = void __stdcall();
    using MIDICALLBACK = void __stdcall();
    using LPMIDICALLBACK = void __stdcall();
    using ACMDRIVERENUMCB = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::Multimedia::HACMDRIVERID__*, size_t, uint32_t);
    using ACMDRIVERPROC = Windows::Win32::SystemServices::LRESULT __stdcall(size_t, Windows::Win32::Multimedia::HACMDRIVERID__*, uint32_t, Windows::Win32::WindowsAndMessaging::LPARAM, Windows::Win32::WindowsAndMessaging::LPARAM);
    using LPACMDRIVERPROC = Windows::Win32::SystemServices::LRESULT __stdcall();
    using ACMFORMATTAGENUMCBA = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::Multimedia::HACMDRIVERID__*, Windows::Win32::Multimedia::tACMFORMATTAGDETAILSA*, size_t, uint32_t);
    using ACMFORMATTAGENUMCBW = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::Multimedia::HACMDRIVERID__*, Windows::Win32::Multimedia::tACMFORMATTAGDETAILSW*, size_t, uint32_t);
    using ACMFORMATENUMCBA = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::Multimedia::HACMDRIVERID__*, Windows::Win32::Multimedia::tACMFORMATDETAILSA*, size_t, uint32_t);
    using ACMFORMATENUMCBW = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::Multimedia::HACMDRIVERID__*, Windows::Win32::Multimedia::tACMFORMATDETAILSW*, size_t, uint32_t);
    using ACMFORMATCHOOSEHOOKPROCA = uint32_t __stdcall(Windows::Win32::WindowsAndMessaging::HWND, uint32_t, Windows::Win32::WindowsAndMessaging::WPARAM, Windows::Win32::WindowsAndMessaging::LPARAM);
    using ACMFORMATCHOOSEHOOKPROCW = uint32_t __stdcall(Windows::Win32::WindowsAndMessaging::HWND, uint32_t, Windows::Win32::WindowsAndMessaging::WPARAM, Windows::Win32::WindowsAndMessaging::LPARAM);
    using ACMFILTERTAGENUMCBA = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::Multimedia::HACMDRIVERID__*, Windows::Win32::Multimedia::tACMFILTERTAGDETAILSA*, size_t, uint32_t);
    using ACMFILTERTAGENUMCBW = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::Multimedia::HACMDRIVERID__*, Windows::Win32::Multimedia::tACMFILTERTAGDETAILSW*, size_t, uint32_t);
    using ACMFILTERENUMCBA = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::Multimedia::HACMDRIVERID__*, Windows::Win32::Multimedia::tACMFILTERDETAILSA*, size_t, uint32_t);
    using ACMFILTERENUMCBW = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::Multimedia::HACMDRIVERID__*, Windows::Win32::Multimedia::tACMFILTERDETAILSW*, size_t, uint32_t);
    using ACMFILTERCHOOSEHOOKPROCA = uint32_t __stdcall(Windows::Win32::WindowsAndMessaging::HWND, uint32_t, Windows::Win32::WindowsAndMessaging::WPARAM, Windows::Win32::WindowsAndMessaging::LPARAM);
    using ACMFILTERCHOOSEHOOKPROCW = uint32_t __stdcall(Windows::Win32::WindowsAndMessaging::HWND, uint32_t, Windows::Win32::WindowsAndMessaging::WPARAM, Windows::Win32::WindowsAndMessaging::LPARAM);
    using AVISAVECALLBACK = Windows::Win32::SystemServices::BOOL __stdcall(int32_t);
    using CAPYIELDCALLBACK = Windows::Win32::SystemServices::LRESULT __stdcall(Windows::Win32::WindowsAndMessaging::HWND);
    using CAPSTATUSCALLBACKW = Windows::Win32::SystemServices::LRESULT __stdcall(Windows::Win32::WindowsAndMessaging::HWND, int32_t, uint16_t*);
    using CAPERRORCALLBACKW = Windows::Win32::SystemServices::LRESULT __stdcall(Windows::Win32::WindowsAndMessaging::HWND, int32_t, uint16_t*);
    using CAPSTATUSCALLBACKA = Windows::Win32::SystemServices::LRESULT __stdcall(Windows::Win32::WindowsAndMessaging::HWND, int32_t, int8_t*);
    using CAPERRORCALLBACKA = Windows::Win32::SystemServices::LRESULT __stdcall(Windows::Win32::WindowsAndMessaging::HWND, int32_t, int8_t*);
    using CAPVIDEOCALLBACK = Windows::Win32::SystemServices::LRESULT __stdcall(Windows::Win32::WindowsAndMessaging::HWND, Windows::Win32::Multimedia::VIDEOHDR*);
    using CAPWAVECALLBACK = Windows::Win32::SystemServices::LRESULT __stdcall(Windows::Win32::WindowsAndMessaging::HWND, Windows::Win32::Multimedia::WAVEHDR*);
    using CAPCONTROLCALLBACK = Windows::Win32::SystemServices::LRESULT __stdcall(Windows::Win32::WindowsAndMessaging::HWND, int32_t);
    using JOYDEVMSGPROC = uint32_t __stdcall(uint32_t, uint32_t, int32_t, int32_t);
    using LPJOYDEVMSGPROC = uint32_t __stdcall();
    using TASKCALLBACK = void __stdcall(size_t);
    using LPTASKCALLBACK = void __stdcall();
#pragma endregion delegates

}
namespace win32::_impl_
{
#pragma region guids
    template <> inline constexpr guid guid_v<Windows::Win32::Multimedia::KSDATAFORMAT_SUBTYPE_IEEE_FLOAT>{ 0x00000003,0x0000,0x0010,{ 0x80,0x00,0x00,0xAA,0x00,0x38,0x9B,0x71 } }; // 00000003-0000-0010-8000-00AA00389B71
    template <> inline constexpr guid guid_v<Windows::Win32::Multimedia::KSDATAFORMAT_SUBTYPE_PCM>{ 0x00000001,0x0000,0x0010,{ 0x80,0x00,0x00,0xAA,0x00,0x38,0x9B,0x71 } }; // 00000001-0000-0010-8000-00AA00389B71
    template <> inline constexpr guid guid_v<Windows::Win32::Multimedia::KSDATAFORMAT_SUBTYPE_WAVEFORMATEX>{ 0x00000000,0x0000,0x0010,{ 0x80,0x00,0x00,0xAA,0x00,0x38,0x9B,0x71 } }; // 00000000-0000-0010-8000-00AA00389B71
#pragma endregion guids

}
#endif
