// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Security_0_H
#define WIN32_Windows_Win32_Security_0_H
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct HPROPSHEETPAGE;
}
WIN32_EXPORT namespace win32::Windows::Win32::Kernel
{
    struct LUID;
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct BOOL;
    struct HANDLE;
    union LARGE_INTEGER;
    struct NTSTATUS;
    struct SECURITY_ATTRIBUTES;
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    using DLGPROC = intptr_t __stdcall(Windows::Win32::WindowsAndMessaging::HWND, uint32_t, Windows::Win32::WindowsAndMessaging::WPARAM, Windows::Win32::WindowsAndMessaging::LPARAM);
    struct DLGTEMPLATE;
    struct HWND;
    struct LPARAM;
    struct WPARAM;
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct FILETIME;
    struct STRING;
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
#pragma region enums
    enum class ACCESS_MODE : int32_t
    {
        NOT_USED_ACCESS = 0,
        GRANT_ACCESS = 1,
        SET_ACCESS = 2,
        DENY_ACCESS = 3,
        REVOKE_ACCESS = 4,
        SET_AUDIT_SUCCESS = 5,
        SET_AUDIT_FAILURE = 6,
    };
    enum class ACL_INFORMATION_CLASS : int32_t
    {
        AclRevisionInformation = 1,
        AclSizeInformation = 2,
    };
    enum class AUDIT_EVENT_TYPE : int32_t
    {
        AuditEventObjectAccess = 0,
        AuditEventDirectoryServiceAccess = 1,
    };
    enum class AUDIT_PARAM_TYPE : int32_t
    {
        APT_None = 1,
        APT_String = 2,
        APT_Ulong = 3,
        APT_Pointer = 4,
        APT_Sid = 5,
        APT_LogonId = 6,
        APT_ObjectTypeList = 7,
        APT_Luid = 8,
        APT_Guid = 9,
        APT_Time = 10,
        APT_Int64 = 11,
        APT_IpAddress = 12,
        APT_LogonIdWithSid = 13,
    };
    enum class AUTHZ_AUDIT_EVENT_INFORMATION_CLASS : int32_t
    {
        AuthzAuditEventInfoFlags = 1,
        AuthzAuditEventInfoOperationType = 2,
        AuthzAuditEventInfoObjectType = 3,
        AuthzAuditEventInfoObjectName = 4,
        AuthzAuditEventInfoAdditionalInfo = 5,
    };
    enum class AUTHZ_CONTEXT_INFORMATION_CLASS : int32_t
    {
        AuthzContextInfoUserSid = 1,
        AuthzContextInfoGroupsSids = 2,
        AuthzContextInfoRestrictedSids = 3,
        AuthzContextInfoPrivileges = 4,
        AuthzContextInfoExpirationTime = 5,
        AuthzContextInfoServerContext = 6,
        AuthzContextInfoIdentifier = 7,
        AuthzContextInfoSource = 8,
        AuthzContextInfoAll = 9,
        AuthzContextInfoAuthenticationId = 10,
        AuthzContextInfoSecurityAttributes = 11,
        AuthzContextInfoDeviceSids = 12,
        AuthzContextInfoUserClaims = 13,
        AuthzContextInfoDeviceClaims = 14,
        AuthzContextInfoAppContainerSid = 15,
        AuthzContextInfoCapabilitySids = 16,
    };
    enum class AUTHZ_SECURITY_ATTRIBUTE_OPERATION : int32_t
    {
        AUTHZ_SECURITY_ATTRIBUTE_OPERATION_NONE = 0,
        AUTHZ_SECURITY_ATTRIBUTE_OPERATION_REPLACE_ALL = 1,
        AUTHZ_SECURITY_ATTRIBUTE_OPERATION_ADD = 2,
        AUTHZ_SECURITY_ATTRIBUTE_OPERATION_DELETE = 3,
        AUTHZ_SECURITY_ATTRIBUTE_OPERATION_REPLACE = 4,
    };
    enum class AUTHZ_SID_OPERATION : int32_t
    {
        AUTHZ_SID_OPERATION_NONE = 0,
        AUTHZ_SID_OPERATION_REPLACE_ALL = 1,
        AUTHZ_SID_OPERATION_ADD = 2,
        AUTHZ_SID_OPERATION_DELETE = 3,
        AUTHZ_SID_OPERATION_REPLACE = 4,
    };
    enum class AZ_PROP_CONSTANTS : int32_t
    {
        AZ_PROP_NAME = 1,
        AZ_PROP_DESCRIPTION = 2,
        AZ_PROP_WRITABLE = 3,
        AZ_PROP_APPLICATION_DATA = 4,
        AZ_PROP_CHILD_CREATE = 5,
        AZ_MAX_APPLICATION_NAME_LENGTH = 512,
        AZ_MAX_OPERATION_NAME_LENGTH = 64,
        AZ_MAX_TASK_NAME_LENGTH = 64,
        AZ_MAX_SCOPE_NAME_LENGTH = 65536,
        AZ_MAX_GROUP_NAME_LENGTH = 64,
        AZ_MAX_ROLE_NAME_LENGTH = 64,
        AZ_MAX_NAME_LENGTH = 65536,
        AZ_MAX_DESCRIPTION_LENGTH = 1024,
        AZ_MAX_APPLICATION_DATA_LENGTH = 4096,
        AZ_SUBMIT_FLAG_ABORT = 1,
        AZ_SUBMIT_FLAG_FLUSH = 2,
        AZ_MAX_POLICY_URL_LENGTH = 65536,
        AZ_AZSTORE_FLAG_CREATE = 1,
        AZ_AZSTORE_FLAG_MANAGE_STORE_ONLY = 2,
        AZ_AZSTORE_FLAG_BATCH_UPDATE = 4,
        AZ_AZSTORE_FLAG_AUDIT_IS_CRITICAL = 8,
        AZ_AZSTORE_FORCE_APPLICATION_CLOSE = 16,
        AZ_AZSTORE_NT6_FUNCTION_LEVEL = 32,
        AZ_AZSTORE_FLAG_MANAGE_ONLY_PASSIVE_SUBMIT = 32768,
        AZ_PROP_AZSTORE_DOMAIN_TIMEOUT = 100,
        AZ_AZSTORE_DEFAULT_DOMAIN_TIMEOUT = 15000,
        AZ_PROP_AZSTORE_SCRIPT_ENGINE_TIMEOUT = 101,
        AZ_AZSTORE_MIN_DOMAIN_TIMEOUT = 500,
        AZ_AZSTORE_MIN_SCRIPT_ENGINE_TIMEOUT = 5000,
        AZ_AZSTORE_DEFAULT_SCRIPT_ENGINE_TIMEOUT = 45000,
        AZ_PROP_AZSTORE_MAX_SCRIPT_ENGINES = 102,
        AZ_AZSTORE_DEFAULT_MAX_SCRIPT_ENGINES = 120,
        AZ_PROP_AZSTORE_MAJOR_VERSION = 103,
        AZ_PROP_AZSTORE_MINOR_VERSION = 104,
        AZ_PROP_AZSTORE_TARGET_MACHINE = 105,
        AZ_PROP_AZTORE_IS_ADAM_INSTANCE = 106,
        AZ_PROP_OPERATION_ID = 200,
        AZ_PROP_TASK_OPERATIONS = 300,
        AZ_PROP_TASK_BIZRULE = 301,
        AZ_PROP_TASK_BIZRULE_LANGUAGE = 302,
        AZ_PROP_TASK_TASKS = 303,
        AZ_PROP_TASK_BIZRULE_IMPORTED_PATH = 304,
        AZ_PROP_TASK_IS_ROLE_DEFINITION = 305,
        AZ_MAX_TASK_BIZRULE_LENGTH = 65536,
        AZ_MAX_TASK_BIZRULE_LANGUAGE_LENGTH = 64,
        AZ_MAX_TASK_BIZRULE_IMPORTED_PATH_LENGTH = 512,
        AZ_MAX_BIZRULE_STRING = 65536,
        AZ_PROP_GROUP_TYPE = 400,
        AZ_GROUPTYPE_LDAP_QUERY = 1,
        AZ_GROUPTYPE_BASIC = 2,
        AZ_GROUPTYPE_BIZRULE = 3,
        AZ_PROP_GROUP_APP_MEMBERS = 401,
        AZ_PROP_GROUP_APP_NON_MEMBERS = 402,
        AZ_PROP_GROUP_LDAP_QUERY = 403,
        AZ_MAX_GROUP_LDAP_QUERY_LENGTH = 4096,
        AZ_PROP_GROUP_MEMBERS = 404,
        AZ_PROP_GROUP_NON_MEMBERS = 405,
        AZ_PROP_GROUP_MEMBERS_NAME = 406,
        AZ_PROP_GROUP_NON_MEMBERS_NAME = 407,
        AZ_PROP_GROUP_BIZRULE = 408,
        AZ_PROP_GROUP_BIZRULE_LANGUAGE = 409,
        AZ_PROP_GROUP_BIZRULE_IMPORTED_PATH = 410,
        AZ_MAX_GROUP_BIZRULE_LENGTH = 65536,
        AZ_MAX_GROUP_BIZRULE_LANGUAGE_LENGTH = 64,
        AZ_MAX_GROUP_BIZRULE_IMPORTED_PATH_LENGTH = 512,
        AZ_PROP_ROLE_APP_MEMBERS = 500,
        AZ_PROP_ROLE_MEMBERS = 501,
        AZ_PROP_ROLE_OPERATIONS = 502,
        AZ_PROP_ROLE_TASKS = 504,
        AZ_PROP_ROLE_MEMBERS_NAME = 505,
        AZ_PROP_SCOPE_BIZRULES_WRITABLE = 600,
        AZ_PROP_SCOPE_CAN_BE_DELEGATED = 601,
        AZ_PROP_CLIENT_CONTEXT_USER_DN = 700,
        AZ_PROP_CLIENT_CONTEXT_USER_SAM_COMPAT = 701,
        AZ_PROP_CLIENT_CONTEXT_USER_DISPLAY = 702,
        AZ_PROP_CLIENT_CONTEXT_USER_GUID = 703,
        AZ_PROP_CLIENT_CONTEXT_USER_CANONICAL = 704,
        AZ_PROP_CLIENT_CONTEXT_USER_UPN = 705,
        AZ_PROP_CLIENT_CONTEXT_USER_DNS_SAM_COMPAT = 707,
        AZ_PROP_CLIENT_CONTEXT_ROLE_FOR_ACCESS_CHECK = 708,
        AZ_PROP_CLIENT_CONTEXT_LDAP_QUERY_DN = 709,
        AZ_PROP_APPLICATION_AUTHZ_INTERFACE_CLSID = 800,
        AZ_PROP_APPLICATION_VERSION = 801,
        AZ_MAX_APPLICATION_VERSION_LENGTH = 512,
        AZ_PROP_APPLICATION_NAME = 802,
        AZ_PROP_APPLICATION_BIZRULE_ENABLED = 803,
        AZ_PROP_APPLY_STORE_SACL = 900,
        AZ_PROP_GENERATE_AUDITS = 901,
        AZ_PROP_POLICY_ADMINS = 902,
        AZ_PROP_POLICY_READERS = 903,
        AZ_PROP_DELEGATED_POLICY_USERS = 904,
        AZ_PROP_POLICY_ADMINS_NAME = 905,
        AZ_PROP_POLICY_READERS_NAME = 906,
        AZ_PROP_DELEGATED_POLICY_USERS_NAME = 907,
        AZ_CLIENT_CONTEXT_SKIP_GROUP = 1,
        AZ_CLIENT_CONTEXT_SKIP_LDAP_QUERY = 1,
        AZ_CLIENT_CONTEXT_GET_GROUP_RECURSIVE = 2,
        AZ_CLIENT_CONTEXT_GET_GROUPS_STORE_LEVEL_ONLY = 2,
    };
    enum class AlgorithmFlags : int32_t
    {
        AlgorithmFlagsNone = 0,
        AlgorithmFlagsWrap = 1,
    };
    enum class AlgorithmOperationFlags : int32_t
    {
        XCN_NCRYPT_NO_OPERATION = 0,
        XCN_NCRYPT_CIPHER_OPERATION = 1,
        XCN_NCRYPT_HASH_OPERATION = 2,
        XCN_NCRYPT_ASYMMETRIC_ENCRYPTION_OPERATION = 4,
        XCN_NCRYPT_SECRET_AGREEMENT_OPERATION = 8,
        XCN_NCRYPT_SIGNATURE_OPERATION = 16,
        XCN_NCRYPT_RNG_OPERATION = 32,
        XCN_NCRYPT_KEY_DERIVATION_OPERATION = 64,
        XCN_NCRYPT_ANY_ASYMMETRIC_OPERATION = 28,
        XCN_NCRYPT_PREFER_SIGNATURE_ONLY_OPERATION = 2097152,
        XCN_NCRYPT_PREFER_NON_SIGNATURE_OPERATION = 4194304,
        XCN_NCRYPT_EXACT_MATCH_OPERATION = 8388608,
        XCN_NCRYPT_PREFERENCE_MASK_OPERATION = 14680064,
    };
    enum class AlgorithmType : int32_t
    {
        XCN_BCRYPT_UNKNOWN_INTERFACE = 0,
        XCN_BCRYPT_CIPHER_INTERFACE = 1,
        XCN_BCRYPT_HASH_INTERFACE = 2,
        XCN_BCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE = 3,
        XCN_BCRYPT_SIGNATURE_INTERFACE = 5,
        XCN_BCRYPT_SECRET_AGREEMENT_INTERFACE = 4,
        XCN_BCRYPT_RNG_INTERFACE = 6,
        XCN_BCRYPT_KEY_DERIVATION_INTERFACE = 7,
    };
    enum class AlternativeNameType : int32_t
    {
        XCN_CERT_ALT_NAME_UNKNOWN = 0,
        XCN_CERT_ALT_NAME_OTHER_NAME = 1,
        XCN_CERT_ALT_NAME_RFC822_NAME = 2,
        XCN_CERT_ALT_NAME_DNS_NAME = 3,
        XCN_CERT_ALT_NAME_X400_ADDRESS = 4,
        XCN_CERT_ALT_NAME_DIRECTORY_NAME = 5,
        XCN_CERT_ALT_NAME_EDI_PARTY_NAME = 6,
        XCN_CERT_ALT_NAME_URL = 7,
        XCN_CERT_ALT_NAME_IP_ADDRESS = 8,
        XCN_CERT_ALT_NAME_REGISTERED_ID = 9,
        XCN_CERT_ALT_NAME_GUID = 10,
        XCN_CERT_ALT_NAME_USER_PRINCIPLE_NAME = 11,
    };
    enum class BCRYPT_HASH_OPERATION_TYPE : int32_t
    {
        BCRYPT_HASH_OPERATION_HASH_DATA = 1,
        BCRYPT_HASH_OPERATION_FINISH_HASH = 2,
    };
    enum class BCRYPT_MULTI_OPERATION_TYPE : int32_t
    {
        BCRYPT_OPERATION_TYPE_HASH = 1,
    };
    enum class CASetupProperty : int32_t
    {
        ENUM_SETUPPROP_INVALID = -1,
        ENUM_SETUPPROP_CATYPE = 0,
        ENUM_SETUPPROP_CAKEYINFORMATION = 1,
        ENUM_SETUPPROP_INTERACTIVE = 2,
        ENUM_SETUPPROP_CANAME = 3,
        ENUM_SETUPPROP_CADSSUFFIX = 4,
        ENUM_SETUPPROP_VALIDITYPERIOD = 5,
        ENUM_SETUPPROP_VALIDITYPERIODUNIT = 6,
        ENUM_SETUPPROP_EXPIRATIONDATE = 7,
        ENUM_SETUPPROP_PRESERVEDATABASE = 8,
        ENUM_SETUPPROP_DATABASEDIRECTORY = 9,
        ENUM_SETUPPROP_LOGDIRECTORY = 10,
        ENUM_SETUPPROP_SHAREDFOLDER = 11,
        ENUM_SETUPPROP_PARENTCAMACHINE = 12,
        ENUM_SETUPPROP_PARENTCANAME = 13,
        ENUM_SETUPPROP_REQUESTFILE = 14,
        ENUM_SETUPPROP_WEBCAMACHINE = 15,
        ENUM_SETUPPROP_WEBCANAME = 16,
    };
    enum class CEPSetupProperty : int32_t
    {
        ENUM_CEPSETUPPROP_AUTHENTICATION = 0,
        ENUM_CEPSETUPPROP_SSLCERTHASH = 1,
        ENUM_CEPSETUPPROP_URL = 2,
        ENUM_CEPSETUPPROP_KEYBASED_RENEWAL = 3,
    };
    enum class CERTENROLL_OBJECTID : int32_t
    {
        XCN_OID_NONE = 0,
        XCN_OID_RSA = 1,
        XCN_OID_PKCS = 2,
        XCN_OID_RSA_HASH = 3,
        XCN_OID_RSA_ENCRYPT = 4,
        XCN_OID_PKCS_1 = 5,
        XCN_OID_PKCS_2 = 6,
        XCN_OID_PKCS_3 = 7,
        XCN_OID_PKCS_4 = 8,
        XCN_OID_PKCS_5 = 9,
        XCN_OID_PKCS_6 = 10,
        XCN_OID_PKCS_7 = 11,
        XCN_OID_PKCS_8 = 12,
        XCN_OID_PKCS_9 = 13,
        XCN_OID_PKCS_10 = 14,
        XCN_OID_PKCS_12 = 15,
        XCN_OID_RSA_RSA = 16,
        XCN_OID_RSA_MD2RSA = 17,
        XCN_OID_RSA_MD4RSA = 18,
        XCN_OID_RSA_MD5RSA = 19,
        XCN_OID_RSA_SHA1RSA = 20,
        XCN_OID_RSA_SETOAEP_RSA = 21,
        XCN_OID_RSA_DH = 22,
        XCN_OID_RSA_data = 23,
        XCN_OID_RSA_signedData = 24,
        XCN_OID_RSA_envelopedData = 25,
        XCN_OID_RSA_signEnvData = 26,
        XCN_OID_RSA_digestedData = 27,
        XCN_OID_RSA_hashedData = 28,
        XCN_OID_RSA_encryptedData = 29,
        XCN_OID_RSA_emailAddr = 30,
        XCN_OID_RSA_unstructName = 31,
        XCN_OID_RSA_contentType = 32,
        XCN_OID_RSA_messageDigest = 33,
        XCN_OID_RSA_signingTime = 34,
        XCN_OID_RSA_counterSign = 35,
        XCN_OID_RSA_challengePwd = 36,
        XCN_OID_RSA_unstructAddr = 37,
        XCN_OID_RSA_extCertAttrs = 38,
        XCN_OID_RSA_certExtensions = 39,
        XCN_OID_RSA_SMIMECapabilities = 40,
        XCN_OID_RSA_preferSignedData = 41,
        XCN_OID_RSA_SMIMEalg = 42,
        XCN_OID_RSA_SMIMEalgESDH = 43,
        XCN_OID_RSA_SMIMEalgCMS3DESwrap = 44,
        XCN_OID_RSA_SMIMEalgCMSRC2wrap = 45,
        XCN_OID_RSA_MD2 = 46,
        XCN_OID_RSA_MD4 = 47,
        XCN_OID_RSA_MD5 = 48,
        XCN_OID_RSA_RC2CBC = 49,
        XCN_OID_RSA_RC4 = 50,
        XCN_OID_RSA_DES_EDE3_CBC = 51,
        XCN_OID_RSA_RC5_CBCPad = 52,
        XCN_OID_ANSI_X942 = 53,
        XCN_OID_ANSI_X942_DH = 54,
        XCN_OID_X957 = 55,
        XCN_OID_X957_DSA = 56,
        XCN_OID_X957_SHA1DSA = 57,
        XCN_OID_DS = 58,
        XCN_OID_DSALG = 59,
        XCN_OID_DSALG_CRPT = 60,
        XCN_OID_DSALG_HASH = 61,
        XCN_OID_DSALG_SIGN = 62,
        XCN_OID_DSALG_RSA = 63,
        XCN_OID_OIW = 64,
        XCN_OID_OIWSEC = 65,
        XCN_OID_OIWSEC_md4RSA = 66,
        XCN_OID_OIWSEC_md5RSA = 67,
        XCN_OID_OIWSEC_md4RSA2 = 68,
        XCN_OID_OIWSEC_desECB = 69,
        XCN_OID_OIWSEC_desCBC = 70,
        XCN_OID_OIWSEC_desOFB = 71,
        XCN_OID_OIWSEC_desCFB = 72,
        XCN_OID_OIWSEC_desMAC = 73,
        XCN_OID_OIWSEC_rsaSign = 74,
        XCN_OID_OIWSEC_dsa = 75,
        XCN_OID_OIWSEC_shaDSA = 76,
        XCN_OID_OIWSEC_mdc2RSA = 77,
        XCN_OID_OIWSEC_shaRSA = 78,
        XCN_OID_OIWSEC_dhCommMod = 79,
        XCN_OID_OIWSEC_desEDE = 80,
        XCN_OID_OIWSEC_sha = 81,
        XCN_OID_OIWSEC_mdc2 = 82,
        XCN_OID_OIWSEC_dsaComm = 83,
        XCN_OID_OIWSEC_dsaCommSHA = 84,
        XCN_OID_OIWSEC_rsaXchg = 85,
        XCN_OID_OIWSEC_keyHashSeal = 86,
        XCN_OID_OIWSEC_md2RSASign = 87,
        XCN_OID_OIWSEC_md5RSASign = 88,
        XCN_OID_OIWSEC_sha1 = 89,
        XCN_OID_OIWSEC_dsaSHA1 = 90,
        XCN_OID_OIWSEC_dsaCommSHA1 = 91,
        XCN_OID_OIWSEC_sha1RSASign = 92,
        XCN_OID_OIWDIR = 93,
        XCN_OID_OIWDIR_CRPT = 94,
        XCN_OID_OIWDIR_HASH = 95,
        XCN_OID_OIWDIR_SIGN = 96,
        XCN_OID_OIWDIR_md2 = 97,
        XCN_OID_OIWDIR_md2RSA = 98,
        XCN_OID_INFOSEC = 99,
        XCN_OID_INFOSEC_sdnsSignature = 100,
        XCN_OID_INFOSEC_mosaicSignature = 101,
        XCN_OID_INFOSEC_sdnsConfidentiality = 102,
        XCN_OID_INFOSEC_mosaicConfidentiality = 103,
        XCN_OID_INFOSEC_sdnsIntegrity = 104,
        XCN_OID_INFOSEC_mosaicIntegrity = 105,
        XCN_OID_INFOSEC_sdnsTokenProtection = 106,
        XCN_OID_INFOSEC_mosaicTokenProtection = 107,
        XCN_OID_INFOSEC_sdnsKeyManagement = 108,
        XCN_OID_INFOSEC_mosaicKeyManagement = 109,
        XCN_OID_INFOSEC_sdnsKMandSig = 110,
        XCN_OID_INFOSEC_mosaicKMandSig = 111,
        XCN_OID_INFOSEC_SuiteASignature = 112,
        XCN_OID_INFOSEC_SuiteAConfidentiality = 113,
        XCN_OID_INFOSEC_SuiteAIntegrity = 114,
        XCN_OID_INFOSEC_SuiteATokenProtection = 115,
        XCN_OID_INFOSEC_SuiteAKeyManagement = 116,
        XCN_OID_INFOSEC_SuiteAKMandSig = 117,
        XCN_OID_INFOSEC_mosaicUpdatedSig = 118,
        XCN_OID_INFOSEC_mosaicKMandUpdSig = 119,
        XCN_OID_INFOSEC_mosaicUpdatedInteg = 120,
        XCN_OID_COMMON_NAME = 121,
        XCN_OID_SUR_NAME = 122,
        XCN_OID_DEVICE_SERIAL_NUMBER = 123,
        XCN_OID_COUNTRY_NAME = 124,
        XCN_OID_LOCALITY_NAME = 125,
        XCN_OID_STATE_OR_PROVINCE_NAME = 126,
        XCN_OID_STREET_ADDRESS = 127,
        XCN_OID_ORGANIZATION_NAME = 128,
        XCN_OID_ORGANIZATIONAL_UNIT_NAME = 129,
        XCN_OID_TITLE = 130,
        XCN_OID_DESCRIPTION = 131,
        XCN_OID_SEARCH_GUIDE = 132,
        XCN_OID_BUSINESS_CATEGORY = 133,
        XCN_OID_POSTAL_ADDRESS = 134,
        XCN_OID_POSTAL_CODE = 135,
        XCN_OID_POST_OFFICE_BOX = 136,
        XCN_OID_PHYSICAL_DELIVERY_OFFICE_NAME = 137,
        XCN_OID_TELEPHONE_NUMBER = 138,
        XCN_OID_TELEX_NUMBER = 139,
        XCN_OID_TELETEXT_TERMINAL_IDENTIFIER = 140,
        XCN_OID_FACSIMILE_TELEPHONE_NUMBER = 141,
        XCN_OID_X21_ADDRESS = 142,
        XCN_OID_INTERNATIONAL_ISDN_NUMBER = 143,
        XCN_OID_REGISTERED_ADDRESS = 144,
        XCN_OID_DESTINATION_INDICATOR = 145,
        XCN_OID_PREFERRED_DELIVERY_METHOD = 146,
        XCN_OID_PRESENTATION_ADDRESS = 147,
        XCN_OID_SUPPORTED_APPLICATION_CONTEXT = 148,
        XCN_OID_MEMBER = 149,
        XCN_OID_OWNER = 150,
        XCN_OID_ROLE_OCCUPANT = 151,
        XCN_OID_SEE_ALSO = 152,
        XCN_OID_USER_PASSWORD = 153,
        XCN_OID_USER_CERTIFICATE = 154,
        XCN_OID_CA_CERTIFICATE = 155,
        XCN_OID_AUTHORITY_REVOCATION_LIST = 156,
        XCN_OID_CERTIFICATE_REVOCATION_LIST = 157,
        XCN_OID_CROSS_CERTIFICATE_PAIR = 158,
        XCN_OID_GIVEN_NAME = 159,
        XCN_OID_INITIALS = 160,
        XCN_OID_DN_QUALIFIER = 161,
        XCN_OID_DOMAIN_COMPONENT = 162,
        XCN_OID_PKCS_12_FRIENDLY_NAME_ATTR = 163,
        XCN_OID_PKCS_12_LOCAL_KEY_ID = 164,
        XCN_OID_PKCS_12_KEY_PROVIDER_NAME_ATTR = 165,
        XCN_OID_LOCAL_MACHINE_KEYSET = 166,
        XCN_OID_PKCS_12_EXTENDED_ATTRIBUTES = 167,
        XCN_OID_KEYID_RDN = 168,
        XCN_OID_AUTHORITY_KEY_IDENTIFIER = 169,
        XCN_OID_KEY_ATTRIBUTES = 170,
        XCN_OID_CERT_POLICIES_95 = 171,
        XCN_OID_KEY_USAGE_RESTRICTION = 172,
        XCN_OID_SUBJECT_ALT_NAME = 173,
        XCN_OID_ISSUER_ALT_NAME = 174,
        XCN_OID_BASIC_CONSTRAINTS = 175,
        XCN_OID_KEY_USAGE = 176,
        XCN_OID_PRIVATEKEY_USAGE_PERIOD = 177,
        XCN_OID_BASIC_CONSTRAINTS2 = 178,
        XCN_OID_CERT_POLICIES = 179,
        XCN_OID_ANY_CERT_POLICY = 180,
        XCN_OID_AUTHORITY_KEY_IDENTIFIER2 = 181,
        XCN_OID_SUBJECT_KEY_IDENTIFIER = 182,
        XCN_OID_SUBJECT_ALT_NAME2 = 183,
        XCN_OID_ISSUER_ALT_NAME2 = 184,
        XCN_OID_CRL_REASON_CODE = 185,
        XCN_OID_REASON_CODE_HOLD = 186,
        XCN_OID_CRL_DIST_POINTS = 187,
        XCN_OID_ENHANCED_KEY_USAGE = 188,
        XCN_OID_CRL_NUMBER = 189,
        XCN_OID_DELTA_CRL_INDICATOR = 190,
        XCN_OID_ISSUING_DIST_POINT = 191,
        XCN_OID_FRESHEST_CRL = 192,
        XCN_OID_NAME_CONSTRAINTS = 193,
        XCN_OID_POLICY_MAPPINGS = 194,
        XCN_OID_LEGACY_POLICY_MAPPINGS = 195,
        XCN_OID_POLICY_CONSTRAINTS = 196,
        XCN_OID_RENEWAL_CERTIFICATE = 197,
        XCN_OID_ENROLLMENT_NAME_VALUE_PAIR = 198,
        XCN_OID_ENROLLMENT_CSP_PROVIDER = 199,
        XCN_OID_OS_VERSION = 200,
        XCN_OID_ENROLLMENT_AGENT = 201,
        XCN_OID_PKIX = 202,
        XCN_OID_PKIX_PE = 203,
        XCN_OID_AUTHORITY_INFO_ACCESS = 204,
        XCN_OID_BIOMETRIC_EXT = 205,
        XCN_OID_LOGOTYPE_EXT = 206,
        XCN_OID_CERT_EXTENSIONS = 207,
        XCN_OID_NEXT_UPDATE_LOCATION = 208,
        XCN_OID_REMOVE_CERTIFICATE = 209,
        XCN_OID_CROSS_CERT_DIST_POINTS = 210,
        XCN_OID_CTL = 211,
        XCN_OID_SORTED_CTL = 212,
        XCN_OID_SERIALIZED = 213,
        XCN_OID_NT_PRINCIPAL_NAME = 214,
        XCN_OID_PRODUCT_UPDATE = 215,
        XCN_OID_ANY_APPLICATION_POLICY = 216,
        XCN_OID_AUTO_ENROLL_CTL_USAGE = 217,
        XCN_OID_ENROLL_CERTTYPE_EXTENSION = 218,
        XCN_OID_CERT_MANIFOLD = 219,
        XCN_OID_CERTSRV_CA_VERSION = 220,
        XCN_OID_CERTSRV_PREVIOUS_CERT_HASH = 221,
        XCN_OID_CRL_VIRTUAL_BASE = 222,
        XCN_OID_CRL_NEXT_PUBLISH = 223,
        XCN_OID_KP_CA_EXCHANGE = 224,
        XCN_OID_KP_KEY_RECOVERY_AGENT = 225,
        XCN_OID_CERTIFICATE_TEMPLATE = 226,
        XCN_OID_ENTERPRISE_OID_ROOT = 227,
        XCN_OID_RDN_DUMMY_SIGNER = 228,
        XCN_OID_APPLICATION_CERT_POLICIES = 229,
        XCN_OID_APPLICATION_POLICY_MAPPINGS = 230,
        XCN_OID_APPLICATION_POLICY_CONSTRAINTS = 231,
        XCN_OID_ARCHIVED_KEY_ATTR = 232,
        XCN_OID_CRL_SELF_CDP = 233,
        XCN_OID_REQUIRE_CERT_CHAIN_POLICY = 234,
        XCN_OID_ARCHIVED_KEY_CERT_HASH = 235,
        XCN_OID_ISSUED_CERT_HASH = 236,
        XCN_OID_DS_EMAIL_REPLICATION = 237,
        XCN_OID_REQUEST_CLIENT_INFO = 238,
        XCN_OID_ENCRYPTED_KEY_HASH = 239,
        XCN_OID_CERTSRV_CROSSCA_VERSION = 240,
        XCN_OID_NTDS_REPLICATION = 241,
        XCN_OID_SUBJECT_DIR_ATTRS = 242,
        XCN_OID_PKIX_KP = 243,
        XCN_OID_PKIX_KP_SERVER_AUTH = 244,
        XCN_OID_PKIX_KP_CLIENT_AUTH = 245,
        XCN_OID_PKIX_KP_CODE_SIGNING = 246,
        XCN_OID_PKIX_KP_EMAIL_PROTECTION = 247,
        XCN_OID_PKIX_KP_IPSEC_END_SYSTEM = 248,
        XCN_OID_PKIX_KP_IPSEC_TUNNEL = 249,
        XCN_OID_PKIX_KP_IPSEC_USER = 250,
        XCN_OID_PKIX_KP_TIMESTAMP_SIGNING = 251,
        XCN_OID_PKIX_KP_OCSP_SIGNING = 252,
        XCN_OID_PKIX_OCSP_NOCHECK = 253,
        XCN_OID_IPSEC_KP_IKE_INTERMEDIATE = 254,
        XCN_OID_KP_CTL_USAGE_SIGNING = 255,
        XCN_OID_KP_TIME_STAMP_SIGNING = 256,
        XCN_OID_SERVER_GATED_CRYPTO = 257,
        XCN_OID_SGC_NETSCAPE = 258,
        XCN_OID_KP_EFS = 259,
        XCN_OID_EFS_RECOVERY = 260,
        XCN_OID_WHQL_CRYPTO = 261,
        XCN_OID_NT5_CRYPTO = 262,
        XCN_OID_OEM_WHQL_CRYPTO = 263,
        XCN_OID_EMBEDDED_NT_CRYPTO = 264,
        XCN_OID_ROOT_LIST_SIGNER = 265,
        XCN_OID_KP_QUALIFIED_SUBORDINATION = 266,
        XCN_OID_KP_KEY_RECOVERY = 267,
        XCN_OID_KP_DOCUMENT_SIGNING = 268,
        XCN_OID_KP_LIFETIME_SIGNING = 269,
        XCN_OID_KP_MOBILE_DEVICE_SOFTWARE = 270,
        XCN_OID_KP_SMART_DISPLAY = 271,
        XCN_OID_KP_CSP_SIGNATURE = 272,
        XCN_OID_DRM = 273,
        XCN_OID_DRM_INDIVIDUALIZATION = 274,
        XCN_OID_LICENSES = 275,
        XCN_OID_LICENSE_SERVER = 276,
        XCN_OID_KP_SMARTCARD_LOGON = 277,
        XCN_OID_YESNO_TRUST_ATTR = 278,
        XCN_OID_PKIX_POLICY_QUALIFIER_CPS = 279,
        XCN_OID_PKIX_POLICY_QUALIFIER_USERNOTICE = 280,
        XCN_OID_CERT_POLICIES_95_QUALIFIER1 = 281,
        XCN_OID_PKIX_ACC_DESCR = 282,
        XCN_OID_PKIX_OCSP = 283,
        XCN_OID_PKIX_CA_ISSUERS = 284,
        XCN_OID_VERISIGN_PRIVATE_6_9 = 285,
        XCN_OID_VERISIGN_ONSITE_JURISDICTION_HASH = 286,
        XCN_OID_VERISIGN_BITSTRING_6_13 = 287,
        XCN_OID_VERISIGN_ISS_STRONG_CRYPTO = 288,
        XCN_OID_NETSCAPE = 289,
        XCN_OID_NETSCAPE_CERT_EXTENSION = 290,
        XCN_OID_NETSCAPE_CERT_TYPE = 291,
        XCN_OID_NETSCAPE_BASE_URL = 292,
        XCN_OID_NETSCAPE_REVOCATION_URL = 293,
        XCN_OID_NETSCAPE_CA_REVOCATION_URL = 294,
        XCN_OID_NETSCAPE_CERT_RENEWAL_URL = 295,
        XCN_OID_NETSCAPE_CA_POLICY_URL = 296,
        XCN_OID_NETSCAPE_SSL_SERVER_NAME = 297,
        XCN_OID_NETSCAPE_COMMENT = 298,
        XCN_OID_NETSCAPE_DATA_TYPE = 299,
        XCN_OID_NETSCAPE_CERT_SEQUENCE = 300,
        XCN_OID_CT_PKI_DATA = 301,
        XCN_OID_CT_PKI_RESPONSE = 302,
        XCN_OID_PKIX_NO_SIGNATURE = 303,
        XCN_OID_CMC = 304,
        XCN_OID_CMC_STATUS_INFO = 305,
        XCN_OID_CMC_IDENTIFICATION = 306,
        XCN_OID_CMC_IDENTITY_PROOF = 307,
        XCN_OID_CMC_DATA_RETURN = 308,
        XCN_OID_CMC_TRANSACTION_ID = 309,
        XCN_OID_CMC_SENDER_NONCE = 310,
        XCN_OID_CMC_RECIPIENT_NONCE = 311,
        XCN_OID_CMC_ADD_EXTENSIONS = 312,
        XCN_OID_CMC_ENCRYPTED_POP = 313,
        XCN_OID_CMC_DECRYPTED_POP = 314,
        XCN_OID_CMC_LRA_POP_WITNESS = 315,
        XCN_OID_CMC_GET_CERT = 316,
        XCN_OID_CMC_GET_CRL = 317,
        XCN_OID_CMC_REVOKE_REQUEST = 318,
        XCN_OID_CMC_REG_INFO = 319,
        XCN_OID_CMC_RESPONSE_INFO = 320,
        XCN_OID_CMC_QUERY_PENDING = 321,
        XCN_OID_CMC_ID_POP_LINK_RANDOM = 322,
        XCN_OID_CMC_ID_POP_LINK_WITNESS = 323,
        XCN_OID_CMC_ID_CONFIRM_CERT_ACCEPTANCE = 324,
        XCN_OID_CMC_ADD_ATTRIBUTES = 325,
        XCN_OID_LOYALTY_OTHER_LOGOTYPE = 326,
        XCN_OID_BACKGROUND_OTHER_LOGOTYPE = 327,
        XCN_OID_PKIX_OCSP_BASIC_SIGNED_RESPONSE = 328,
        XCN_OID_PKCS_7_DATA = 329,
        XCN_OID_PKCS_7_SIGNED = 330,
        XCN_OID_PKCS_7_ENVELOPED = 331,
        XCN_OID_PKCS_7_SIGNEDANDENVELOPED = 332,
        XCN_OID_PKCS_7_DIGESTED = 333,
        XCN_OID_PKCS_7_ENCRYPTED = 334,
        XCN_OID_PKCS_9_CONTENT_TYPE = 335,
        XCN_OID_PKCS_9_MESSAGE_DIGEST = 336,
        XCN_OID_CERT_PROP_ID_PREFIX = 337,
        XCN_OID_CERT_KEY_IDENTIFIER_PROP_ID = 338,
        XCN_OID_CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID = 339,
        XCN_OID_CERT_SUBJECT_NAME_MD5_HASH_PROP_ID = 340,
        XCN_OID_CERT_MD5_HASH_PROP_ID = 341,
        XCN_OID_RSA_SHA256RSA = 342,
        XCN_OID_RSA_SHA384RSA = 343,
        XCN_OID_RSA_SHA512RSA = 344,
        XCN_OID_NIST_sha256 = 345,
        XCN_OID_NIST_sha384 = 346,
        XCN_OID_NIST_sha512 = 347,
        XCN_OID_RSA_MGF1 = 348,
        XCN_OID_ECC_PUBLIC_KEY = 349,
        XCN_OID_ECDSA_SHA1 = 350,
        XCN_OID_ECDSA_SPECIFIED = 351,
        XCN_OID_ANY_ENHANCED_KEY_USAGE = 352,
        XCN_OID_RSA_SSA_PSS = 353,
        XCN_OID_ATTR_SUPPORTED_ALGORITHMS = 355,
        XCN_OID_ATTR_TPM_SECURITY_ASSERTIONS = 356,
        XCN_OID_ATTR_TPM_SPECIFICATION = 357,
        XCN_OID_CERT_DISALLOWED_FILETIME_PROP_ID = 358,
        XCN_OID_CERT_SIGNATURE_HASH_PROP_ID = 359,
        XCN_OID_CERT_STRONG_KEY_OS_1 = 360,
        XCN_OID_CERT_STRONG_KEY_OS_CURRENT = 361,
        XCN_OID_CERT_STRONG_KEY_OS_PREFIX = 362,
        XCN_OID_CERT_STRONG_SIGN_OS_1 = 363,
        XCN_OID_CERT_STRONG_SIGN_OS_CURRENT = 364,
        XCN_OID_CERT_STRONG_SIGN_OS_PREFIX = 365,
        XCN_OID_DH_SINGLE_PASS_STDDH_SHA1_KDF = 366,
        XCN_OID_DH_SINGLE_PASS_STDDH_SHA256_KDF = 367,
        XCN_OID_DH_SINGLE_PASS_STDDH_SHA384_KDF = 368,
        XCN_OID_DISALLOWED_HASH = 369,
        XCN_OID_DISALLOWED_LIST = 370,
        XCN_OID_ECC_CURVE_P256 = 371,
        XCN_OID_ECC_CURVE_P384 = 372,
        XCN_OID_ECC_CURVE_P521 = 373,
        XCN_OID_ECDSA_SHA256 = 374,
        XCN_OID_ECDSA_SHA384 = 375,
        XCN_OID_ECDSA_SHA512 = 376,
        XCN_OID_ENROLL_CAXCHGCERT_HASH = 377,
        XCN_OID_ENROLL_EK_INFO = 378,
        XCN_OID_ENROLL_EKPUB_CHALLENGE = 379,
        XCN_OID_ENROLL_EKVERIFYCERT = 380,
        XCN_OID_ENROLL_EKVERIFYCREDS = 381,
        XCN_OID_ENROLL_EKVERIFYKEY = 382,
        XCN_OID_EV_RDN_COUNTRY = 383,
        XCN_OID_EV_RDN_LOCALE = 384,
        XCN_OID_EV_RDN_STATE_OR_PROVINCE = 385,
        XCN_OID_INHIBIT_ANY_POLICY = 386,
        XCN_OID_INTERNATIONALIZED_EMAIL_ADDRESS = 387,
        XCN_OID_KP_KERNEL_MODE_CODE_SIGNING = 388,
        XCN_OID_KP_KERNEL_MODE_HAL_EXTENSION_SIGNING = 389,
        XCN_OID_KP_KERNEL_MODE_TRUSTED_BOOT_SIGNING = 390,
        XCN_OID_KP_TPM_AIK_CERTIFICATE = 391,
        XCN_OID_KP_TPM_EK_CERTIFICATE = 392,
        XCN_OID_KP_TPM_PLATFORM_CERTIFICATE = 393,
        XCN_OID_NIST_AES128_CBC = 394,
        XCN_OID_NIST_AES128_WRAP = 395,
        XCN_OID_NIST_AES192_CBC = 396,
        XCN_OID_NIST_AES192_WRAP = 397,
        XCN_OID_NIST_AES256_CBC = 398,
        XCN_OID_NIST_AES256_WRAP = 399,
        XCN_OID_PKCS_12_PbeIds = 400,
        XCN_OID_PKCS_12_pbeWithSHA1And128BitRC2 = 401,
        XCN_OID_PKCS_12_pbeWithSHA1And128BitRC4 = 402,
        XCN_OID_PKCS_12_pbeWithSHA1And2KeyTripleDES = 403,
        XCN_OID_PKCS_12_pbeWithSHA1And3KeyTripleDES = 404,
        XCN_OID_PKCS_12_pbeWithSHA1And40BitRC2 = 405,
        XCN_OID_PKCS_12_pbeWithSHA1And40BitRC4 = 406,
        XCN_OID_PKCS_12_PROTECTED_PASSWORD_SECRET_BAG_TYPE_ID = 407,
        XCN_OID_PKINIT_KP_KDC = 408,
        XCN_OID_PKIX_CA_REPOSITORY = 409,
        XCN_OID_PKIX_OCSP_NONCE = 410,
        XCN_OID_PKIX_TIME_STAMPING = 411,
        XCN_OID_QC_EU_COMPLIANCE = 412,
        XCN_OID_QC_SSCD = 413,
        XCN_OID_QC_STATEMENTS_EXT = 414,
        XCN_OID_RDN_TPM_MANUFACTURER = 415,
        XCN_OID_RDN_TPM_MODEL = 416,
        XCN_OID_RDN_TPM_VERSION = 417,
        XCN_OID_REVOKED_LIST_SIGNER = 418,
        XCN_OID_RFC3161_counterSign = 419,
        XCN_OID_ROOT_PROGRAM_AUTO_UPDATE_CA_REVOCATION = 420,
        XCN_OID_ROOT_PROGRAM_AUTO_UPDATE_END_REVOCATION = 421,
        XCN_OID_ROOT_PROGRAM_FLAGS = 422,
        XCN_OID_ROOT_PROGRAM_NO_OCSP_FAILOVER_TO_CRL = 423,
        XCN_OID_RSA_PSPECIFIED = 424,
        XCN_OID_RSAES_OAEP = 425,
        XCN_OID_SUBJECT_INFO_ACCESS = 426,
        XCN_OID_TIMESTAMP_TOKEN = 427,
        XCN_OID_ENROLL_SCEP_ERROR = 428,
        XCN_OIDVerisign_MessageType = 429,
        XCN_OIDVerisign_PkiStatus = 430,
        XCN_OIDVerisign_FailInfo = 431,
        XCN_OIDVerisign_SenderNonce = 432,
        XCN_OIDVerisign_RecipientNonce = 433,
        XCN_OIDVerisign_TransactionID = 434,
        XCN_OID_ENROLL_ATTESTATION_CHALLENGE = 435,
        XCN_OID_ENROLL_ATTESTATION_STATEMENT = 436,
        XCN_OID_ENROLL_ENCRYPTION_ALGORITHM = 437,
        XCN_OID_ENROLL_KSP_NAME = 438,
    };
    enum class CERTENROLL_PROPERTYID : int32_t
    {
        XCN_PROPERTYID_NONE = 0,
        XCN_CERT_KEY_PROV_HANDLE_PROP_ID = 1,
        XCN_CERT_KEY_PROV_INFO_PROP_ID = 2,
        XCN_CERT_SHA1_HASH_PROP_ID = 3,
        XCN_CERT_MD5_HASH_PROP_ID = 4,
        XCN_CERT_HASH_PROP_ID = 3,
        XCN_CERT_KEY_CONTEXT_PROP_ID = 5,
        XCN_CERT_KEY_SPEC_PROP_ID = 6,
        XCN_CERT_IE30_RESERVED_PROP_ID = 7,
        XCN_CERT_PUBKEY_HASH_RESERVED_PROP_ID = 8,
        XCN_CERT_ENHKEY_USAGE_PROP_ID = 9,
        XCN_CERT_CTL_USAGE_PROP_ID = 9,
        XCN_CERT_NEXT_UPDATE_LOCATION_PROP_ID = 10,
        XCN_CERT_FRIENDLY_NAME_PROP_ID = 11,
        XCN_CERT_PVK_FILE_PROP_ID = 12,
        XCN_CERT_DESCRIPTION_PROP_ID = 13,
        XCN_CERT_ACCESS_STATE_PROP_ID = 14,
        XCN_CERT_SIGNATURE_HASH_PROP_ID = 15,
        XCN_CERT_SMART_CARD_DATA_PROP_ID = 16,
        XCN_CERT_EFS_PROP_ID = 17,
        XCN_CERT_FORTEZZA_DATA_PROP_ID = 18,
        XCN_CERT_ARCHIVED_PROP_ID = 19,
        XCN_CERT_KEY_IDENTIFIER_PROP_ID = 20,
        XCN_CERT_AUTO_ENROLL_PROP_ID = 21,
        XCN_CERT_PUBKEY_ALG_PARA_PROP_ID = 22,
        XCN_CERT_CROSS_CERT_DIST_POINTS_PROP_ID = 23,
        XCN_CERT_ISSUER_PUBLIC_KEY_MD5_HASH_PROP_ID = 24,
        XCN_CERT_SUBJECT_PUBLIC_KEY_MD5_HASH_PROP_ID = 25,
        XCN_CERT_ENROLLMENT_PROP_ID = 26,
        XCN_CERT_DATE_STAMP_PROP_ID = 27,
        XCN_CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID = 28,
        XCN_CERT_SUBJECT_NAME_MD5_HASH_PROP_ID = 29,
        XCN_CERT_EXTENDED_ERROR_INFO_PROP_ID = 30,
        XCN_CERT_RENEWAL_PROP_ID = 64,
        XCN_CERT_ARCHIVED_KEY_HASH_PROP_ID = 65,
        XCN_CERT_AUTO_ENROLL_RETRY_PROP_ID = 66,
        XCN_CERT_AIA_URL_RETRIEVED_PROP_ID = 67,
        XCN_CERT_AUTHORITY_INFO_ACCESS_PROP_ID = 68,
        XCN_CERT_BACKED_UP_PROP_ID = 69,
        XCN_CERT_OCSP_RESPONSE_PROP_ID = 70,
        XCN_CERT_REQUEST_ORIGINATOR_PROP_ID = 71,
        XCN_CERT_SOURCE_LOCATION_PROP_ID = 72,
        XCN_CERT_SOURCE_URL_PROP_ID = 73,
        XCN_CERT_NEW_KEY_PROP_ID = 74,
        XCN_CERT_OCSP_CACHE_PREFIX_PROP_ID = 75,
        XCN_CERT_SMART_CARD_ROOT_INFO_PROP_ID = 76,
        XCN_CERT_NO_AUTO_EXPIRE_CHECK_PROP_ID = 77,
        XCN_CERT_NCRYPT_KEY_HANDLE_PROP_ID = 78,
        XCN_CERT_HCRYPTPROV_OR_NCRYPT_KEY_HANDLE_PROP_ID = 79,
        XCN_CERT_SUBJECT_INFO_ACCESS_PROP_ID = 80,
        XCN_CERT_CA_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID = 81,
        XCN_CERT_CA_DISABLE_CRL_PROP_ID = 82,
        XCN_CERT_ROOT_PROGRAM_CERT_POLICIES_PROP_ID = 83,
        XCN_CERT_ROOT_PROGRAM_NAME_CONSTRAINTS_PROP_ID = 84,
        XCN_CERT_SUBJECT_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID = 85,
        XCN_CERT_SUBJECT_DISABLE_CRL_PROP_ID = 86,
        XCN_CERT_CEP_PROP_ID = 87,
        XCN_CERT_SIGN_HASH_CNG_ALG_PROP_ID = 89,
        XCN_CERT_SCARD_PIN_ID_PROP_ID = 90,
        XCN_CERT_SCARD_PIN_INFO_PROP_ID = 91,
        XCN_CERT_SUBJECT_PUB_KEY_BIT_LENGTH_PROP_ID = 92,
        XCN_CERT_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID = 93,
        XCN_CERT_ISSUER_PUB_KEY_BIT_LENGTH_PROP_ID = 94,
        XCN_CERT_ISSUER_CHAIN_SIGN_HASH_CNG_ALG_PROP_ID = 95,
        XCN_CERT_ISSUER_CHAIN_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID = 96,
        XCN_CERT_NO_EXPIRE_NOTIFICATION_PROP_ID = 97,
        XCN_CERT_AUTH_ROOT_SHA256_HASH_PROP_ID = 98,
        XCN_CERT_NCRYPT_KEY_HANDLE_TRANSFER_PROP_ID = 99,
        XCN_CERT_HCRYPTPROV_TRANSFER_PROP_ID = 100,
        XCN_CERT_SMART_CARD_READER_PROP_ID = 101,
        XCN_CERT_SEND_AS_TRUSTED_ISSUER_PROP_ID = 102,
        XCN_CERT_KEY_REPAIR_ATTEMPTED_PROP_ID = 103,
        XCN_CERT_DISALLOWED_FILETIME_PROP_ID = 104,
        XCN_CERT_ROOT_PROGRAM_CHAIN_POLICIES_PROP_ID = 105,
        XCN_CERT_SMART_CARD_READER_NON_REMOVABLE_PROP_ID = 106,
        XCN_CERT_SHA256_HASH_PROP_ID = 107,
        XCN_CERT_SCEP_SERVER_CERTS_PROP_ID = 108,
        XCN_CERT_SCEP_RA_SIGNATURE_CERT_PROP_ID = 109,
        XCN_CERT_SCEP_RA_ENCRYPTION_CERT_PROP_ID = 110,
        XCN_CERT_SCEP_CA_CERT_PROP_ID = 111,
        XCN_CERT_SCEP_SIGNER_CERT_PROP_ID = 112,
        XCN_CERT_SCEP_NONCE_PROP_ID = 113,
        XCN_CERT_SCEP_ENCRYPT_HASH_CNG_ALG_PROP_ID = 114,
        XCN_CERT_SCEP_FLAGS_PROP_ID = 115,
        XCN_CERT_SCEP_GUID_PROP_ID = 116,
        XCN_CERT_SERIALIZABLE_KEY_CONTEXT_PROP_ID = 117,
        XCN_CERT_ISOLATED_KEY_PROP_ID = 118,
        XCN_CERT_SERIAL_CHAIN_PROP_ID = 119,
        XCN_CERT_KEY_CLASSIFICATION_PROP_ID = 120,
        XCN_CERT_DISALLOWED_ENHKEY_USAGE_PROP_ID = 122,
        XCN_CERT_NONCOMPLIANT_ROOT_URL_PROP_ID = 123,
        XCN_CERT_PIN_SHA256_HASH_PROP_ID = 124,
        XCN_CERT_CLR_DELETE_KEY_PROP_ID = 125,
        XCN_CERT_NOT_BEFORE_FILETIME_PROP_ID = 126,
        XCN_CERT_CERT_NOT_BEFORE_ENHKEY_USAGE_PROP_ID = 127,
        XCN_CERT_FIRST_RESERVED_PROP_ID = 128,
        XCN_CERT_LAST_RESERVED_PROP_ID = 32767,
        XCN_CERT_FIRST_USER_PROP_ID = 32768,
        XCN_CERT_LAST_USER_PROP_ID = 65535,
        XCN_CERT_STORE_LOCALIZED_NAME_PROP_ID = 4096,
    };
    enum class CESSetupProperty : int32_t
    {
        ENUM_CESSETUPPROP_USE_IISAPPPOOLIDENTITY = 0,
        ENUM_CESSETUPPROP_CACONFIG = 1,
        ENUM_CESSETUPPROP_AUTHENTICATION = 2,
        ENUM_CESSETUPPROP_SSLCERTHASH = 3,
        ENUM_CESSETUPPROP_URL = 4,
        ENUM_CESSETUPPROP_RENEWALONLY = 5,
        ENUM_CESSETUPPROP_ALLOW_KEYBASED_RENEWAL = 6,
    };
    enum class CRED_FETCH : int32_t
    {
        CredFetchDefault = 0,
        CredFetchDPAPI = 1,
        CredFetchForced = 2,
    };
    enum class CRED_MARSHAL_TYPE : int32_t
    {
        CertCredential = 1,
        UsernameTargetCredential = 2,
        BinaryBlobCredential = 3,
        UsernameForPackedCredentials = 4,
        BinaryBlobForSystem = 5,
    };
    enum class CRED_PROTECTION_TYPE : int32_t
    {
        CredUnprotected = 0,
        CredUserProtection = 1,
        CredTrustedProtection = 2,
        CredForSystemProtection = 3,
    };
    enum class CRLRevocationReason : int32_t
    {
        XCN_CRL_REASON_UNSPECIFIED = 0,
        XCN_CRL_REASON_KEY_COMPROMISE = 1,
        XCN_CRL_REASON_CA_COMPROMISE = 2,
        XCN_CRL_REASON_AFFILIATION_CHANGED = 3,
        XCN_CRL_REASON_SUPERSEDED = 4,
        XCN_CRL_REASON_CESSATION_OF_OPERATION = 5,
        XCN_CRL_REASON_CERTIFICATE_HOLD = 6,
        XCN_CRL_REASON_REMOVE_FROM_CRL = 8,
        XCN_CRL_REASON_PRIVILEGE_WITHDRAWN = 9,
        XCN_CRL_REASON_AA_COMPROMISE = 10,
    };
    enum class CRYPT_XML_CHARSET : int32_t
    {
        CRYPT_XML_CHARSET_AUTO = 0,
        CRYPT_XML_CHARSET_UTF8 = 1,
        CRYPT_XML_CHARSET_UTF16LE = 2,
        CRYPT_XML_CHARSET_UTF16BE = 3,
    };
    enum class CRYPT_XML_KEYINFO_SPEC : int32_t
    {
        CRYPT_XML_KEYINFO_SPEC_NONE = 0,
        CRYPT_XML_KEYINFO_SPEC_ENCODED = 1,
        CRYPT_XML_KEYINFO_SPEC_PARAM = 2,
    };
    enum class CRYPT_XML_PROPERTY_ID : int32_t
    {
        CRYPT_XML_PROPERTY_MAX_HEAP_SIZE = 1,
        CRYPT_XML_PROPERTY_SIGNATURE_LOCATION = 2,
        CRYPT_XML_PROPERTY_MAX_SIGNATURES = 3,
        CRYPT_XML_PROPERTY_DOC_DECLARATION = 4,
        CRYPT_XML_PROPERTY_XML_OUTPUT_CHARSET = 5,
    };
    enum class CertKeyType : uint32_t
    {
        KeyTypeOther = 0x0,
        KeyTypeVirtualSmartCard = 0x1,
        KeyTypePhysicalSmartCard = 0x2,
        KeyTypePassport = 0x3,
        KeyTypePassportRemote = 0x4,
        KeyTypePassportSmartCard = 0x5,
        KeyTypeHardware = 0x6,
        KeyTypeSoftware = 0x7,
        KeyTypeSelfSigned = 0x8,
    };
    enum class CommitTemplateFlags : int32_t
    {
        CommitFlagSaveTemplateGenerateOID = 1,
        CommitFlagSaveTemplateUseCurrentOID = 2,
        CommitFlagSaveTemplateOverwrite = 3,
        CommitFlagDeleteTemplate = 4,
    };
    enum class DSAFIPSVERSION_ENUM : int32_t
    {
        DSA_FIPS186_2 = 0,
        DSA_FIPS186_3 = 1,
    };
    enum class DdqAccessLevel : int32_t
    {
        NoData = 0,
        CurrentUserData = 1,
        AllUserData = 2,
    };
    enum class DelayRetryAction : int32_t
    {
        DelayRetryUnknown = 0,
        DelayRetryNone = 1,
        DelayRetryShort = 2,
        DelayRetryLong = 3,
        DelayRetrySuccess = 4,
        DelayRetryPastSuccess = 5,
    };
    enum class ECC_CURVE_ALG_ID_ENUM : int32_t
    {
        BCRYPT_NO_CURVE_GENERATION_ALG_ID = 0,
    };
    enum class ECC_CURVE_TYPE_ENUM : int32_t
    {
        BCRYPT_ECC_PRIME_SHORT_WEIERSTRASS_CURVE = 1,
        BCRYPT_ECC_PRIME_TWISTED_EDWARDS_CURVE = 2,
        BCRYPT_ECC_PRIME_MONTGOMERY_CURVE = 3,
    };
    enum class ENUM_CATYPES : int32_t
    {
        ENUM_ENTERPRISE_ROOTCA = 0,
        ENUM_ENTERPRISE_SUBCA = 1,
        ENUM_STANDALONE_ROOTCA = 3,
        ENUM_STANDALONE_SUBCA = 4,
        ENUM_UNKNOWN_CA = 5,
    };
    enum class ENUM_PERIOD : int32_t
    {
        ENUM_PERIOD_INVALID = -1,
        ENUM_PERIOD_SECONDS = 0,
        ENUM_PERIOD_MINUTES = 1,
        ENUM_PERIOD_HOURS = 2,
        ENUM_PERIOD_DAYS = 3,
        ENUM_PERIOD_WEEKS = 4,
        ENUM_PERIOD_MONTHS = 5,
        ENUM_PERIOD_YEARS = 6,
    };
    enum class EncodingType : int32_t
    {
        XCN_CRYPT_STRING_BASE64HEADER = 0,
        XCN_CRYPT_STRING_BASE64 = 1,
        XCN_CRYPT_STRING_BINARY = 2,
        XCN_CRYPT_STRING_BASE64REQUESTHEADER = 3,
        XCN_CRYPT_STRING_HEX = 4,
        XCN_CRYPT_STRING_HEXASCII = 5,
        XCN_CRYPT_STRING_BASE64_ANY = 6,
        XCN_CRYPT_STRING_ANY = 7,
        XCN_CRYPT_STRING_HEX_ANY = 8,
        XCN_CRYPT_STRING_BASE64X509CRLHEADER = 9,
        XCN_CRYPT_STRING_HEXADDR = 10,
        XCN_CRYPT_STRING_HEXASCIIADDR = 11,
        XCN_CRYPT_STRING_HEXRAW = 12,
        XCN_CRYPT_STRING_BASE64URI = 13,
        XCN_CRYPT_STRING_ENCODEMASK = 255,
        XCN_CRYPT_STRING_CHAIN = 256,
        XCN_CRYPT_STRING_TEXT = 512,
        XCN_CRYPT_STRING_PERCENTESCAPE = 134217728,
        XCN_CRYPT_STRING_HASHDATA = 268435456,
        XCN_CRYPT_STRING_STRICT = 536870912,
        XCN_CRYPT_STRING_NOCRLF = 1073741824,
        XCN_CRYPT_STRING_NOCR = -2147483648,
    };
    enum class EnrollmentCAProperty : int32_t
    {
        CAPropCommonName = 1,
        CAPropDistinguishedName = 2,
        CAPropSanitizedName = 3,
        CAPropSanitizedShortName = 4,
        CAPropDNSName = 5,
        CAPropCertificateTypes = 6,
        CAPropCertificate = 7,
        CAPropDescription = 8,
        CAPropWebServers = 9,
        CAPropSiteName = 10,
        CAPropSecurity = 11,
        CAPropRenewalOnly = 12,
    };
    enum class EnrollmentDisplayStatus : int32_t
    {
        DisplayNo = 0,
        DisplayYes = 1,
    };
    enum class EnrollmentEnrollStatus : int32_t
    {
        Enrolled = 1,
        EnrollPended = 2,
        EnrollUIDeferredEnrollmentRequired = 4,
        EnrollError = 16,
        EnrollUnknown = 32,
        EnrollSkipped = 64,
        EnrollDenied = 256,
    };
    enum class EnrollmentPolicyFlags : int32_t
    {
        DisableGroupPolicyList = 2,
        DisableUserServerList = 4,
    };
    enum class EnrollmentPolicyServerPropertyFlags : int32_t
    {
        DefaultNone = 0,
        DefaultPolicyServer = 1,
    };
    enum class EnrollmentSelectionStatus : int32_t
    {
        SelectedNo = 0,
        SelectedYes = 1,
    };
    enum class EnrollmentTemplateProperty : int32_t
    {
        TemplatePropCommonName = 1,
        TemplatePropFriendlyName = 2,
        TemplatePropEKUs = 3,
        TemplatePropCryptoProviders = 4,
        TemplatePropMajorRevision = 5,
        TemplatePropDescription = 6,
        TemplatePropKeySpec = 7,
        TemplatePropSchemaVersion = 8,
        TemplatePropMinorRevision = 9,
        TemplatePropRASignatureCount = 10,
        TemplatePropMinimumKeySize = 11,
        TemplatePropOID = 12,
        TemplatePropSupersede = 13,
        TemplatePropRACertificatePolicies = 14,
        TemplatePropRAEKUs = 15,
        TemplatePropCertificatePolicies = 16,
        TemplatePropV1ApplicationPolicy = 17,
        TemplatePropAsymmetricAlgorithm = 18,
        TemplatePropKeySecurityDescriptor = 19,
        TemplatePropSymmetricAlgorithm = 20,
        TemplatePropSymmetricKeyLength = 21,
        TemplatePropHashAlgorithm = 22,
        TemplatePropKeyUsage = 23,
        TemplatePropEnrollmentFlags = 24,
        TemplatePropSubjectNameFlags = 25,
        TemplatePropPrivateKeyFlags = 26,
        TemplatePropGeneralFlags = 27,
        TemplatePropSecurityDescriptor = 28,
        TemplatePropExtensions = 29,
        TemplatePropValidityPeriod = 30,
        TemplatePropRenewalPeriod = 31,
    };
    enum class HASHALGORITHM_ENUM : int32_t
    {
        DSA_HASH_ALGORITHM_SHA1 = 0,
        DSA_HASH_ALGORITHM_SHA256 = 1,
        DSA_HASH_ALGORITHM_SHA512 = 2,
    };
    enum class IDENTITY_TYPE : int32_t
    {
        IDENTITIES_ALL = 0,
        IDENTITIES_ME_ONLY = 1,
    };
    enum class ImportPFXFlags : int32_t
    {
        ImportNone = 0,
        ImportMachineContext = 1,
        ImportForceOverwrite = 2,
        ImportSilent = 4,
        ImportSaveProperties = 8,
        ImportExportable = 16,
        ImportExportableEncrypted = 32,
        ImportNoUserProtected = 64,
        ImportUserProtected = 128,
        ImportUserProtectedHigh = 256,
        ImportInstallCertificate = 512,
        ImportInstallChain = 1024,
        ImportInstallChainAndRoot = 2048,
    };
    enum class InnerRequestLevel : int32_t
    {
        LevelInnermost = 0,
        LevelNext = 1,
    };
    enum class InstallResponseRestrictionFlags : int32_t
    {
        AllowNone = 0,
        AllowNoOutstandingRequest = 1,
        AllowUntrustedCertificate = 2,
        AllowUntrustedRoot = 4,
    };
    enum class KERB_CERTIFICATE_INFO_TYPE : int32_t
    {
        CertHashInfo = 1,
    };
    enum class KERB_LOGON_SUBMIT_TYPE : int32_t
    {
        KerbInteractiveLogon = 2,
        KerbSmartCardLogon = 6,
        KerbWorkstationUnlockLogon = 7,
        KerbSmartCardUnlockLogon = 8,
        KerbProxyLogon = 9,
        KerbTicketLogon = 10,
        KerbTicketUnlockLogon = 11,
        KerbS4ULogon = 12,
        KerbCertificateLogon = 13,
        KerbCertificateS4ULogon = 14,
        KerbCertificateUnlockLogon = 15,
        KerbNoElevationLogon = 83,
        KerbLuidLogon = 84,
    };
    enum class KERB_PROFILE_BUFFER_TYPE : int32_t
    {
        KerbInteractiveProfile = 2,
        KerbSmartCardProfile = 4,
        KerbTicketProfile = 6,
    };
    enum class KERB_PROTOCOL_MESSAGE_TYPE : int32_t
    {
        KerbDebugRequestMessage = 0,
        KerbQueryTicketCacheMessage = 1,
        KerbChangeMachinePasswordMessage = 2,
        KerbVerifyPacMessage = 3,
        KerbRetrieveTicketMessage = 4,
        KerbUpdateAddressesMessage = 5,
        KerbPurgeTicketCacheMessage = 6,
        KerbChangePasswordMessage = 7,
        KerbRetrieveEncodedTicketMessage = 8,
        KerbDecryptDataMessage = 9,
        KerbAddBindingCacheEntryMessage = 10,
        KerbSetPasswordMessage = 11,
        KerbSetPasswordExMessage = 12,
        KerbVerifyCredentialsMessage = 13,
        KerbQueryTicketCacheExMessage = 14,
        KerbPurgeTicketCacheExMessage = 15,
        KerbRefreshSmartcardCredentialsMessage = 16,
        KerbAddExtraCredentialsMessage = 17,
        KerbQuerySupplementalCredentialsMessage = 18,
        KerbTransferCredentialsMessage = 19,
        KerbQueryTicketCacheEx2Message = 20,
        KerbSubmitTicketMessage = 21,
        KerbAddExtraCredentialsExMessage = 22,
        KerbQueryKdcProxyCacheMessage = 23,
        KerbPurgeKdcProxyCacheMessage = 24,
        KerbQueryTicketCacheEx3Message = 25,
        KerbCleanupMachinePkinitCredsMessage = 26,
        KerbAddBindingCacheEntryExMessage = 27,
        KerbQueryBindingCacheMessage = 28,
        KerbPurgeBindingCacheMessage = 29,
        KerbPinKdcMessage = 30,
        KerbUnpinAllKdcsMessage = 31,
        KerbQueryDomainExtendedPoliciesMessage = 32,
        KerbQueryS4U2ProxyCacheMessage = 33,
        KerbRetrieveKeyTabMessage = 34,
    };
    enum class KSEC_CONTEXT_TYPE : int32_t
    {
        KSecPaged = 0,
        KSecNonPaged = 1,
    };
    enum class KeyAttestationClaimType : int32_t
    {
        XCN_NCRYPT_CLAIM_NONE = 0,
        XCN_NCRYPT_CLAIM_AUTHORITY_AND_SUBJECT = 3,
        XCN_NCRYPT_CLAIM_AUTHORITY_ONLY = 1,
        XCN_NCRYPT_CLAIM_SUBJECT_ONLY = 2,
        XCN_NCRYPT_CLAIM_UNKNOWN = 4096,
    };
    enum class KeyCredentialManagerOperationErrorStates : int32_t
    {
        KeyCredentialManagerOperationErrorStateNone = 0,
        KeyCredentialManagerOperationErrorStateDeviceJoinFailure = 1,
        KeyCredentialManagerOperationErrorStateTokenFailure = 2,
        KeyCredentialManagerOperationErrorStateCertificateFailure = 4,
        KeyCredentialManagerOperationErrorStateRemoteSessionFailure = 8,
        KeyCredentialManagerOperationErrorStatePolicyFailure = 16,
        KeyCredentialManagerOperationErrorStateHardwareFailure = 32,
        KeyCredentialManagerOperationErrorStatePinExistsFailure = 64,
    };
    enum class KeyCredentialManagerOperationType : int32_t
    {
        KeyCredentialManagerProvisioning = 0,
        KeyCredentialManagerPinChange = 1,
        KeyCredentialManagerPinReset = 2,
    };
    enum class KeyIdentifierHashAlgorithm : int32_t
    {
        SKIHashDefault = 0,
        SKIHashSha1 = 1,
        SKIHashCapiSha1 = 2,
        SKIHashSha256 = 3,
        SKIHashHPKP = 5,
    };
    enum class LSA_FOREST_TRUST_COLLISION_RECORD_TYPE : int32_t
    {
        CollisionTdo = 0,
        CollisionXref = 1,
        CollisionOther = 2,
    };
    enum class LSA_FOREST_TRUST_RECORD_TYPE : int32_t
    {
        ForestTrustTopLevelName = 0,
        ForestTrustTopLevelNameEx = 1,
        ForestTrustDomainInfo = 2,
        ForestTrustRecordTypeLast = 2,
    };
    enum class LSA_LOOKUP_DOMAIN_INFO_CLASS : int32_t
    {
        AccountDomainInformation = 5,
        DnsDomainInformation = 12,
    };
    enum class LSA_TOKEN_INFORMATION_TYPE : int32_t
    {
        LsaTokenInformationNull = 0,
        LsaTokenInformationV1 = 1,
        LsaTokenInformationV2 = 2,
        LsaTokenInformationV3 = 3,
    };
    enum class MANDATORY_LEVEL : int32_t
    {
        MandatoryLevelUntrusted = 0,
        MandatoryLevelLow = 1,
        MandatoryLevelMedium = 2,
        MandatoryLevelHigh = 3,
        MandatoryLevelSystem = 4,
        MandatoryLevelSecureProcess = 5,
        MandatoryLevelCount = 6,
    };
    enum class MSA_INFO_LEVEL : int32_t
    {
        MsaInfoLevel0 = 0,
        MsaInfoLevelMax = 1,
    };
    enum class MSA_INFO_STATE : int32_t
    {
        MsaInfoNotExist = 1,
        MsaInfoNotService = 2,
        MsaInfoCannotInstall = 3,
        MsaInfoCanInstall = 4,
        MsaInfoInstalled = 5,
    };
    enum class MSCEPSetupProperty : int32_t
    {
        ENUM_CEPSETUPPROP_USELOCALSYSTEM = 0,
        ENUM_CEPSETUPPROP_USECHALLENGE = 1,
        ENUM_CEPSETUPPROP_RANAME_CN = 2,
        ENUM_CEPSETUPPROP_RANAME_EMAIL = 3,
        ENUM_CEPSETUPPROP_RANAME_COMPANY = 4,
        ENUM_CEPSETUPPROP_RANAME_DEPT = 5,
        ENUM_CEPSETUPPROP_RANAME_CITY = 6,
        ENUM_CEPSETUPPROP_RANAME_STATE = 7,
        ENUM_CEPSETUPPROP_RANAME_COUNTRY = 8,
        ENUM_CEPSETUPPROP_SIGNINGKEYINFORMATION = 9,
        ENUM_CEPSETUPPROP_EXCHANGEKEYINFORMATION = 10,
        ENUM_CEPSETUPPROP_CAINFORMATION = 11,
        ENUM_CEPSETUPPROP_MSCEPURL = 12,
        ENUM_CEPSETUPPROP_CHALLENGEURL = 13,
    };
    enum class MSV1_0_AVID : int32_t
    {
        MsvAvEOL = 0,
        MsvAvNbComputerName = 1,
        MsvAvNbDomainName = 2,
        MsvAvDnsComputerName = 3,
        MsvAvDnsDomainName = 4,
        MsvAvDnsTreeName = 5,
        MsvAvFlags = 6,
        MsvAvTimestamp = 7,
        MsvAvRestrictions = 8,
        MsvAvTargetName = 9,
        MsvAvChannelBindings = 10,
    };
    enum class MSV1_0_CREDENTIAL_KEY_TYPE : int32_t
    {
        InvalidCredKey = 0,
        DeprecatedIUMCredKey = 1,
        DomainUserCredKey = 2,
        LocalUserCredKey = 3,
        ExternallySuppliedCredKey = 4,
    };
    enum class MSV1_0_LOGON_SUBMIT_TYPE : int32_t
    {
        MsV1_0InteractiveLogon = 2,
        MsV1_0Lm20Logon = 3,
        MsV1_0NetworkLogon = 4,
        MsV1_0SubAuthLogon = 5,
        MsV1_0WorkstationUnlockLogon = 7,
        MsV1_0S4ULogon = 12,
        MsV1_0VirtualLogon = 82,
        MsV1_0NoElevationLogon = 83,
        MsV1_0LuidLogon = 84,
    };
    enum class MSV1_0_PROFILE_BUFFER_TYPE : int32_t
    {
        MsV1_0InteractiveProfile = 2,
        MsV1_0Lm20LogonProfile = 3,
        MsV1_0SmartCardProfile = 4,
    };
    enum class MSV1_0_PROTOCOL_MESSAGE_TYPE : int32_t
    {
        MsV1_0Lm20ChallengeRequest = 0,
        MsV1_0Lm20GetChallengeResponse = 1,
        MsV1_0EnumerateUsers = 2,
        MsV1_0GetUserInfo = 3,
        MsV1_0ReLogonUsers = 4,
        MsV1_0ChangePassword = 5,
        MsV1_0ChangeCachedPassword = 6,
        MsV1_0GenericPassthrough = 7,
        MsV1_0CacheLogon = 8,
        MsV1_0SubAuth = 9,
        MsV1_0DeriveCredential = 10,
        MsV1_0CacheLookup = 11,
        MsV1_0SetProcessOption = 12,
        MsV1_0ConfigLocalAliases = 13,
        MsV1_0ClearCachedCredentials = 14,
        MsV1_0LookupToken = 15,
        MsV1_0ValidateAuth = 16,
        MsV1_0CacheLookupEx = 17,
        MsV1_0GetCredentialKey = 18,
        MsV1_0SetThreadOption = 19,
        MsV1_0DecryptDpapiMasterKey = 20,
        MsV1_0GetStrongCredentialKey = 21,
        MsV1_0TransferCred = 22,
        MsV1_0ProvisionTbal = 23,
        MsV1_0DeleteTbalSecrets = 24,
    };
    enum class MULTIPLE_TRUSTEE_OPERATION : int32_t
    {
        NO_MULTIPLE_TRUSTEE = 0,
        TRUSTEE_IS_IMPERSONATE = 1,
    };
    enum class NEGOTIATE_MESSAGES : int32_t
    {
        NegEnumPackagePrefixes = 0,
        NegGetCallerName = 1,
        NegTransferCredentials = 2,
        NegMsgReserved1 = 3,
        NegCallPackageMax = 4,
    };
    enum class NETLOGON_LOGON_INFO_CLASS : int32_t
    {
        NetlogonInteractiveInformation = 1,
        NetlogonNetworkInformation = 2,
        NetlogonServiceInformation = 3,
        NetlogonGenericInformation = 4,
        NetlogonInteractiveTransitiveInformation = 5,
        NetlogonNetworkTransitiveInformation = 6,
        NetlogonServiceTransitiveInformation = 7,
    };
    enum class OCSPRequestFlag : int32_t
    {
        OCSP_RF_REJECT_SIGNED_REQUESTS = 1,
    };
    enum class OCSPSigningFlag : int32_t
    {
        OCSP_SF_SILENT = 1,
        OCSP_SF_USE_CACERT = 2,
        OCSP_SF_ALLOW_SIGNINGCERT_AUTORENEWAL = 4,
        OCSP_SF_FORCE_SIGNINGCERT_ISSUER_ISCA = 8,
        OCSP_SF_AUTODISCOVER_SIGNINGCERT = 16,
        OCSP_SF_MANUAL_ASSIGN_SIGNINGCERT = 32,
        OCSP_SF_RESPONDER_ID_KEYHASH = 64,
        OCSP_SF_RESPONDER_ID_NAME = 128,
        OCSP_SF_ALLOW_NONCE_EXTENSION = 256,
        OCSP_SF_ALLOW_SIGNINGCERT_AUTOENROLLMENT = 512,
    };
    enum class ObjectIdGroupId : int32_t
    {
        XCN_CRYPT_ANY_GROUP_ID = 0,
        XCN_CRYPT_HASH_ALG_OID_GROUP_ID = 1,
        XCN_CRYPT_ENCRYPT_ALG_OID_GROUP_ID = 2,
        XCN_CRYPT_PUBKEY_ALG_OID_GROUP_ID = 3,
        XCN_CRYPT_SIGN_ALG_OID_GROUP_ID = 4,
        XCN_CRYPT_RDN_ATTR_OID_GROUP_ID = 5,
        XCN_CRYPT_EXT_OR_ATTR_OID_GROUP_ID = 6,
        XCN_CRYPT_ENHKEY_USAGE_OID_GROUP_ID = 7,
        XCN_CRYPT_POLICY_OID_GROUP_ID = 8,
        XCN_CRYPT_TEMPLATE_OID_GROUP_ID = 9,
        XCN_CRYPT_KDF_OID_GROUP_ID = 10,
        XCN_CRYPT_LAST_OID_GROUP_ID = 10,
        XCN_CRYPT_FIRST_ALG_OID_GROUP_ID = 1,
        XCN_CRYPT_LAST_ALG_OID_GROUP_ID = 4,
        XCN_CRYPT_GROUP_ID_MASK = 65535,
        XCN_CRYPT_OID_PREFER_CNG_ALGID_FLAG = 1073741824,
        XCN_CRYPT_OID_DISABLE_SEARCH_DS_FLAG = -2147483648,
        XCN_CRYPT_OID_INFO_OID_GROUP_BIT_LEN_MASK = 268369920,
        XCN_CRYPT_OID_INFO_OID_GROUP_BIT_LEN_SHIFT = 16,
        XCN_CRYPT_KEY_LENGTH_MASK = 268369920,
    };
    enum class ObjectIdPublicKeyFlags : int32_t
    {
        XCN_CRYPT_OID_INFO_PUBKEY_ANY = 0,
        XCN_CRYPT_OID_INFO_PUBKEY_SIGN_KEY_FLAG = -2147483648,
        XCN_CRYPT_OID_INFO_PUBKEY_ENCRYPT_KEY_FLAG = 1073741824,
    };
    enum class PFXExportOptions : int32_t
    {
        PFXExportEEOnly = 0,
        PFXExportChainNoRoot = 1,
        PFXExportChainWithRoot = 2,
    };
    enum class PKU2U_LOGON_SUBMIT_TYPE : int32_t
    {
        Pku2uCertificateS4ULogon = 14,
    };
    enum class POLICY_AUDIT_EVENT_TYPE : int32_t
    {
        AuditCategorySystem = 0,
        AuditCategoryLogon = 1,
        AuditCategoryObjectAccess = 2,
        AuditCategoryPrivilegeUse = 3,
        AuditCategoryDetailedTracking = 4,
        AuditCategoryPolicyChange = 5,
        AuditCategoryAccountManagement = 6,
        AuditCategoryDirectoryServiceAccess = 7,
        AuditCategoryAccountLogon = 8,
    };
    enum class POLICY_DOMAIN_INFORMATION_CLASS : int32_t
    {
        PolicyDomainEfsInformation = 2,
        PolicyDomainKerberosTicketInformation = 3,
    };
    enum class POLICY_INFORMATION_CLASS : int32_t
    {
        PolicyAuditLogInformation = 1,
        PolicyAuditEventsInformation = 2,
        PolicyPrimaryDomainInformation = 3,
        PolicyPdAccountInformation = 4,
        PolicyAccountDomainInformation = 5,
        PolicyLsaServerRoleInformation = 6,
        PolicyReplicaSourceInformation = 7,
        PolicyDefaultQuotaInformation = 8,
        PolicyModificationInformation = 9,
        PolicyAuditFullSetInformation = 10,
        PolicyAuditFullQueryInformation = 11,
        PolicyDnsDomainInformation = 12,
        PolicyDnsDomainInformationInt = 13,
        PolicyLocalAccountDomainInformation = 14,
        PolicyMachineAccountInformation = 15,
        PolicyLastEntry = 16,
    };
    enum class POLICY_LSA_SERVER_ROLE : int32_t
    {
        PolicyServerRoleBackup = 2,
        PolicyServerRolePrimary = 3,
    };
    enum class POLICY_NOTIFICATION_INFORMATION_CLASS : int32_t
    {
        PolicyNotifyAuditEventsInformation = 1,
        PolicyNotifyAccountDomainInformation = 2,
        PolicyNotifyServerRoleInformation = 3,
        PolicyNotifyDnsDomainInformation = 4,
        PolicyNotifyDomainEfsInformation = 5,
        PolicyNotifyDomainKerberosTicketInformation = 6,
        PolicyNotifyMachineAccountPasswordInformation = 7,
        PolicyNotifyGlobalSaclInformation = 8,
        PolicyNotifyMax = 9,
    };
    enum class PROCESS_INFORMATION_CLASS : int32_t
    {
        ProcessMemoryPriority = 0,
        ProcessMemoryExhaustionInfo = 1,
        ProcessAppMemoryInfo = 2,
        ProcessInPrivateInfo = 3,
        ProcessPowerThrottling = 4,
        ProcessReservedValue1 = 5,
        ProcessTelemetryCoverageInfo = 6,
        ProcessProtectionLevelInfo = 7,
        ProcessLeapSecondInfo = 8,
        ProcessInformationClassMax = 9,
    };
    enum class PROG_INVOKE_SETTING : int32_t
    {
        ProgressInvokeNever = 1,
        ProgressInvokeEveryObject = 2,
        ProgressInvokeOnError = 3,
        ProgressCancelOperation = 4,
        ProgressRetryOperation = 5,
        ProgressInvokePrePostError = 6,
    };
    enum class Pkcs10AllowedSignatureTypes : int32_t
    {
        AllowedKeySignature = 1,
        AllowedNullSignature = 2,
    };
    enum class PolicyQualifierType : int32_t
    {
        PolicyQualifierTypeUnknown = 0,
        PolicyQualifierTypeUrl = 1,
        PolicyQualifierTypeUserNotice = 2,
        PolicyQualifierTypeFlags = 3,
    };
    enum class PolicyServerUrlFlags : int32_t
    {
        PsfNone = 0,
        PsfLocationGroupPolicy = 1,
        PsfLocationRegistry = 2,
        PsfUseClientId = 4,
        PsfAutoEnrollmentEnabled = 16,
        PsfAllowUnTrustedCA = 32,
    };
    enum class PolicyServerUrlPropertyID : int32_t
    {
        PsPolicyID = 0,
        PsFriendlyName = 1,
    };
    enum class READER_SEL_REQUEST_MATCH_TYPE : int32_t
    {
        RSR_MATCH_TYPE_READER_AND_CONTAINER = 1,
        RSR_MATCH_TYPE_SERIAL_NUMBER = 2,
        RSR_MATCH_TYPE_ALL_CARDS = 3,
    };
    enum class RequestClientInfoClientId : int32_t
    {
        ClientIdNone = 0,
        ClientIdXEnroll2003 = 1,
        ClientIdAutoEnroll2003 = 2,
        ClientIdWizard2003 = 3,
        ClientIdCertReq2003 = 4,
        ClientIdDefaultRequest = 5,
        ClientIdAutoEnroll = 6,
        ClientIdRequestWizard = 7,
        ClientIdEOBO = 8,
        ClientIdCertReq = 9,
        ClientIdTest = 10,
        ClientIdWinRT = 11,
        ClientIdUserStart = 1000,
    };
    enum class SAFER_IDENTIFICATION_TYPES : int32_t
    {
        SaferIdentityDefault = 0,
        SaferIdentityTypeImageName = 1,
        SaferIdentityTypeImageHash = 2,
        SaferIdentityTypeUrlZone = 3,
        SaferIdentityTypeCertificate = 4,
    };
    enum class SAFER_OBJECT_INFO_CLASS : int32_t
    {
        SaferObjectLevelId = 1,
        SaferObjectScopeId = 2,
        SaferObjectFriendlyName = 3,
        SaferObjectDescription = 4,
        SaferObjectBuiltin = 5,
        SaferObjectDisallowed = 6,
        SaferObjectDisableMaxPrivilege = 7,
        SaferObjectInvertDeletedPrivileges = 8,
        SaferObjectDeletedPrivileges = 9,
        SaferObjectDefaultOwner = 10,
        SaferObjectSidsToDisable = 11,
        SaferObjectRestrictedSidsInverted = 12,
        SaferObjectRestrictedSidsAdded = 13,
        SaferObjectAllIdentificationGuids = 14,
        SaferObjectSingleIdentification = 15,
        SaferObjectExtendedError = 16,
    };
    enum class SAFER_POLICY_INFO_CLASS : int32_t
    {
        SaferPolicyLevelList = 1,
        SaferPolicyEnableTransparentEnforcement = 2,
        SaferPolicyDefaultLevel = 3,
        SaferPolicyEvaluateUserScope = 4,
        SaferPolicyScopeFlags = 5,
        SaferPolicyDefaultLevelFlags = 6,
        SaferPolicyAuthenticodeEnabled = 7,
    };
    enum class SASL_AUTHZID_STATE : int32_t
    {
        Sasl_AuthZIDForbidden = 0,
        Sasl_AuthZIDProcessed = 1,
    };
    enum class SCESVC_INFO_TYPE : int32_t
    {
        SceSvcConfigurationInfo = 0,
        SceSvcMergedPolicyInfo = 1,
        SceSvcAnalysisInfo = 2,
        SceSvcInternalUse = 3,
    };
    enum class SC_ACTION_TYPE : int32_t
    {
        SC_ACTION_NONE = 0,
        SC_ACTION_RESTART = 1,
        SC_ACTION_REBOOT = 2,
        SC_ACTION_RUN_COMMAND = 3,
        SC_ACTION_OWN_RESTART = 4,
    };
    enum class SC_ENUM_TYPE : int32_t
    {
        SC_ENUM_PROCESS_INFO = 0,
    };
    enum class SC_EVENT_TYPE : int32_t
    {
        SC_EVENT_DATABASE_CHANGE = 0,
        SC_EVENT_PROPERTY_CHANGE = 1,
        SC_EVENT_STATUS_CHANGE = 2,
    };
    enum class SC_STATUS_TYPE : int32_t
    {
        SC_STATUS_PROCESS_INFO = 0,
    };
    enum class SECPKG_ATTR_LCT_STATUS : int32_t
    {
        SecPkgAttrLastClientTokenYes = 0,
        SecPkgAttrLastClientTokenNo = 1,
        SecPkgAttrLastClientTokenMaybe = 2,
    };
    enum class SECPKG_CALL_PACKAGE_MESSAGE_TYPE : int32_t
    {
        SecPkgCallPackageMinMessage = 1024,
        SecPkgCallPackagePinDcMessage = 1024,
        SecPkgCallPackageUnpinAllDcsMessage = 1025,
        SecPkgCallPackageTransferCredMessage = 1026,
        SecPkgCallPackageMaxMessage = 1026,
    };
    enum class SECPKG_CRED_CLASS : int32_t
    {
        SecPkgCredClass_None = 0,
        SecPkgCredClass_Ephemeral = 10,
        SecPkgCredClass_PersistedGeneric = 20,
        SecPkgCredClass_PersistedSpecific = 30,
        SecPkgCredClass_Explicit = 40,
    };
    enum class SECPKG_EXTENDED_INFORMATION_CLASS : int32_t
    {
        SecpkgGssInfo = 1,
        SecpkgContextThunks = 2,
        SecpkgMutualAuthLevel = 3,
        SecpkgWowClientDll = 4,
        SecpkgExtraOids = 5,
        SecpkgMaxInfo = 6,
        SecpkgNego2Info = 7,
    };
    enum class SECPKG_NAME_TYPE : int32_t
    {
        SecNameSamCompatible = 0,
        SecNameAlternateId = 1,
        SecNameFlat = 2,
        SecNameDN = 3,
        SecNameSPN = 4,
    };
    enum class SECPKG_SESSIONINFO_TYPE : int32_t
    {
        SecSessionPrimaryCred = 0,
    };
    enum class SECURITY_IMPERSONATION_LEVEL : int32_t
    {
        SecurityAnonymous = 0,
        SecurityIdentification = 1,
        SecurityImpersonation = 2,
        SecurityDelegation = 3,
    };
    enum class SECURITY_LOGON_TYPE : int32_t
    {
        UndefinedLogonType = 0,
        Interactive = 2,
        Network = 3,
        Batch = 4,
        Service = 5,
        Proxy = 6,
        Unlock = 7,
        NetworkCleartext = 8,
        NewCredentials = 9,
        RemoteInteractive = 10,
        CachedInteractive = 11,
        CachedRemoteInteractive = 12,
        CachedUnlock = 13,
    };
    enum class SEC_APPLICATION_PROTOCOL_NEGOTIATION_EXT : int32_t
    {
        SecApplicationProtocolNegotiationExt_None = 0,
        SecApplicationProtocolNegotiationExt_NPN = 1,
        SecApplicationProtocolNegotiationExt_ALPN = 2,
    };
    enum class SEC_APPLICATION_PROTOCOL_NEGOTIATION_STATUS : int32_t
    {
        SecApplicationProtocolNegotiationStatus_None = 0,
        SecApplicationProtocolNegotiationStatus_Success = 1,
        SecApplicationProtocolNegotiationStatus_SelectedClientOnly = 2,
    };
    enum class SEC_TRAFFIC_SECRET_TYPE : int32_t
    {
        SecTrafficSecret_None = 0,
        SecTrafficSecret_Client = 1,
        SecTrafficSecret_Server = 2,
    };
    enum class SERVICE_DIRECTORY_TYPE : int32_t
    {
        ServiceDirectoryPersistentState = 0,
        ServiceDirectoryTypeMax = 1,
    };
    enum class SERVICE_REGISTRY_STATE_TYPE : int32_t
    {
        ServiceRegistryStateParameters = 0,
        ServiceRegistryStatePersistent = 1,
        MaxServiceRegistryStateType = 2,
    };
    enum class SE_ADT_PARAMETER_TYPE : int32_t
    {
        SeAdtParmTypeNone = 0,
        SeAdtParmTypeString = 1,
        SeAdtParmTypeFileSpec = 2,
        SeAdtParmTypeUlong = 3,
        SeAdtParmTypeSid = 4,
        SeAdtParmTypeLogonId = 5,
        SeAdtParmTypeNoLogonId = 6,
        SeAdtParmTypeAccessMask = 7,
        SeAdtParmTypePrivs = 8,
        SeAdtParmTypeObjectTypes = 9,
        SeAdtParmTypeHexUlong = 10,
        SeAdtParmTypePtr = 11,
        SeAdtParmTypeTime = 12,
        SeAdtParmTypeGuid = 13,
        SeAdtParmTypeLuid = 14,
        SeAdtParmTypeHexInt64 = 15,
        SeAdtParmTypeStringList = 16,
        SeAdtParmTypeSidList = 17,
        SeAdtParmTypeDuration = 18,
        SeAdtParmTypeUserAccountControl = 19,
        SeAdtParmTypeNoUac = 20,
        SeAdtParmTypeMessage = 21,
        SeAdtParmTypeDateTime = 22,
        SeAdtParmTypeSockAddr = 23,
        SeAdtParmTypeSD = 24,
        SeAdtParmTypeLogonHours = 25,
        SeAdtParmTypeLogonIdNoSid = 26,
        SeAdtParmTypeUlongNoConv = 27,
        SeAdtParmTypeSockAddrNoPort = 28,
        SeAdtParmTypeAccessReason = 29,
        SeAdtParmTypeStagingReason = 30,
        SeAdtParmTypeResourceAttribute = 31,
        SeAdtParmTypeClaims = 32,
        SeAdtParmTypeLogonIdAsSid = 33,
        SeAdtParmTypeMultiSzString = 34,
        SeAdtParmTypeLogonIdEx = 35,
    };
    enum class SE_OBJECT_TYPE : int32_t
    {
        SE_UNKNOWN_OBJECT_TYPE = 0,
        SE_FILE_OBJECT = 1,
        SE_SERVICE = 2,
        SE_PRINTER = 3,
        SE_REGISTRY_KEY = 4,
        SE_LMSHARE = 5,
        SE_KERNEL_OBJECT = 6,
        SE_WINDOW_OBJECT = 7,
        SE_DS_OBJECT = 8,
        SE_DS_OBJECT_ALL = 9,
        SE_PROVIDER_DEFINED_OBJECT = 10,
        SE_WMIGUID_OBJECT = 11,
        SE_REGISTRY_WOW64_32KEY = 12,
        SE_REGISTRY_WOW64_64KEY = 13,
    };
    enum class SID_NAME_USE : int32_t
    {
        SidTypeUser = 1,
        SidTypeGroup = 2,
        SidTypeDomain = 3,
        SidTypeAlias = 4,
        SidTypeWellKnownGroup = 5,
        SidTypeDeletedAccount = 6,
        SidTypeInvalid = 7,
        SidTypeUnknown = 8,
        SidTypeComputer = 9,
        SidTypeLabel = 10,
        SidTypeLogonSession = 11,
    };
    enum class SI_PAGE_ACTIVATED : int32_t
    {
        SI_SHOW_DEFAULT = 0,
        SI_SHOW_PERM_ACTIVATED = 1,
        SI_SHOW_AUDIT_ACTIVATED = 2,
        SI_SHOW_OWNER_ACTIVATED = 3,
        SI_SHOW_EFFECTIVE_ACTIVATED = 4,
        SI_SHOW_SHARE_ACTIVATED = 5,
        SI_SHOW_CENTRAL_POLICY_ACTIVATED = 6,
    };
    enum class SI_PAGE_TYPE : int32_t
    {
        SI_PAGE_PERM = 0,
        SI_PAGE_ADVPERM = 1,
        SI_PAGE_AUDIT = 2,
        SI_PAGE_OWNER = 3,
        SI_PAGE_EFFECTIVE = 4,
        SI_PAGE_TAKEOWNERSHIP = 5,
        SI_PAGE_SHARE = 6,
    };
    enum class SLDATATYPE : uint32_t
    {
        SL_DATA_NONE = 0x0,
        SL_DATA_SZ = 0x1,
        SL_DATA_DWORD = 0x4,
        SL_DATA_BINARY = 0x3,
        SL_DATA_MULTI_SZ = 0x7,
        SL_DATA_SUM = 0x64,
    };
    enum class SLIDTYPE : int32_t
    {
        SL_ID_APPLICATION = 0,
        SL_ID_PRODUCT_SKU = 1,
        SL_ID_LICENSE_FILE = 2,
        SL_ID_LICENSE = 3,
        SL_ID_PKEY = 4,
        SL_ID_ALL_LICENSES = 5,
        SL_ID_ALL_LICENSE_FILES = 6,
        SL_ID_STORE_TOKEN = 7,
        SL_ID_LAST = 8,
    };
    enum class SLLICENSINGSTATUS : int32_t
    {
        SL_LICENSING_STATUS_UNLICENSED = 0,
        SL_LICENSING_STATUS_LICENSED = 1,
        SL_LICENSING_STATUS_IN_GRACE_PERIOD = 2,
        SL_LICENSING_STATUS_NOTIFICATION = 3,
        SL_LICENSING_STATUS_LAST = 4,
    };
    enum class SLREFERRALTYPE : int32_t
    {
        SL_REFERRALTYPE_SKUID = 0,
        SL_REFERRALTYPE_APPID = 1,
        SL_REFERRALTYPE_OVERRIDE_SKUID = 2,
        SL_REFERRALTYPE_OVERRIDE_APPID = 3,
        SL_REFERRALTYPE_BEST_MATCH = 4,
    };
    enum class SL_ACTIVATION_TYPE : int32_t
    {
        SL_ACTIVATION_TYPE_DEFAULT = 0,
        SL_ACTIVATION_TYPE_ACTIVE_DIRECTORY = 1,
    };
    enum class SL_GENUINE_STATE : int32_t
    {
        SL_GEN_STATE_IS_GENUINE = 0,
        SL_GEN_STATE_INVALID_LICENSE = 1,
        SL_GEN_STATE_TAMPERED = 2,
        SL_GEN_STATE_OFFLINE = 3,
        SL_GEN_STATE_LAST = 4,
    };
    enum class SchGetExtensionsOptions : int32_t
    {
        SCH_EXTENSIONS_OPTIONS_NONE = 0,
        SCH_NO_RECORD_HEADER = 1,
    };
    enum class SecDelegationType : int32_t
    {
        SecFull = 0,
        SecService = 1,
        SecTree = 2,
        SecDirectory = 3,
        SecObject = 4,
    };
    enum class TOKENBINDING_EXTENSION_FORMAT : int32_t
    {
        TOKENBINDING_EXTENSION_FORMAT_UNDEFINED = 0,
    };
    enum class TOKENBINDING_KEY_PARAMETERS_TYPE : int32_t
    {
        TOKENBINDING_KEY_PARAMETERS_TYPE_RSA2048_PKCS = 0,
        TOKENBINDING_KEY_PARAMETERS_TYPE_RSA2048_PSS = 1,
        TOKENBINDING_KEY_PARAMETERS_TYPE_ECDSAP256 = 2,
        TOKENBINDING_KEY_PARAMETERS_TYPE_ANYEXISTING = 255,
    };
    enum class TOKENBINDING_TYPE : int32_t
    {
        TOKENBINDING_TYPE_PROVIDED = 0,
        TOKENBINDING_TYPE_REFERRED = 1,
    };
    enum class TOKEN_ELEVATION_TYPE : int32_t
    {
        TokenElevationTypeDefault = 1,
        TokenElevationTypeFull = 2,
        TokenElevationTypeLimited = 3,
    };
    enum class TOKEN_INFORMATION_CLASS : int32_t
    {
        TokenUser = 1,
        TokenGroups = 2,
        TokenPrivileges = 3,
        TokenOwner = 4,
        TokenPrimaryGroup = 5,
        TokenDefaultDacl = 6,
        TokenSource = 7,
        TokenType = 8,
        TokenImpersonationLevel = 9,
        TokenStatistics = 10,
        TokenRestrictedSids = 11,
        TokenSessionId = 12,
        TokenGroupsAndPrivileges = 13,
        TokenSessionReference = 14,
        TokenSandBoxInert = 15,
        TokenAuditPolicy = 16,
        TokenOrigin = 17,
        TokenElevationType = 18,
        TokenLinkedToken = 19,
        TokenElevation = 20,
        TokenHasRestrictions = 21,
        TokenAccessInformation = 22,
        TokenVirtualizationAllowed = 23,
        TokenVirtualizationEnabled = 24,
        TokenIntegrityLevel = 25,
        TokenUIAccess = 26,
        TokenMandatoryPolicy = 27,
        TokenLogonSid = 28,
        TokenIsAppContainer = 29,
        TokenCapabilities = 30,
        TokenAppContainerSid = 31,
        TokenAppContainerNumber = 32,
        TokenUserClaimAttributes = 33,
        TokenDeviceClaimAttributes = 34,
        TokenRestrictedUserClaimAttributes = 35,
        TokenRestrictedDeviceClaimAttributes = 36,
        TokenDeviceGroups = 37,
        TokenRestrictedDeviceGroups = 38,
        TokenSecurityAttributes = 39,
        TokenIsRestricted = 40,
        TokenProcessTrustLevel = 41,
        TokenPrivateNameSpace = 42,
        TokenSingletonAttributes = 43,
        TokenBnoIsolation = 44,
        TokenChildProcessFlags = 45,
        TokenIsLessPrivilegedAppContainer = 46,
        TokenIsSandboxed = 47,
        TokenOriginatingProcessTrustLevel = 48,
        MaxTokenInfoClass = 49,
    };
    enum class TOKEN_TYPE : int32_t
    {
        TokenPrimary = 1,
        TokenImpersonation = 2,
    };
    enum class TPMVSCMGR_ERROR : int32_t
    {
        TPMVSCMGR_ERROR_IMPERSONATION = 0,
        TPMVSCMGR_ERROR_PIN_COMPLEXITY = 1,
        TPMVSCMGR_ERROR_READER_COUNT_LIMIT = 2,
        TPMVSCMGR_ERROR_TERMINAL_SERVICES_SESSION = 3,
        TPMVSCMGR_ERROR_VTPMSMARTCARD_INITIALIZE = 4,
        TPMVSCMGR_ERROR_VTPMSMARTCARD_CREATE = 5,
        TPMVSCMGR_ERROR_VTPMSMARTCARD_DESTROY = 6,
        TPMVSCMGR_ERROR_VGIDSSIMULATOR_INITIALIZE = 7,
        TPMVSCMGR_ERROR_VGIDSSIMULATOR_CREATE = 8,
        TPMVSCMGR_ERROR_VGIDSSIMULATOR_DESTROY = 9,
        TPMVSCMGR_ERROR_VGIDSSIMULATOR_WRITE_PROPERTY = 10,
        TPMVSCMGR_ERROR_VGIDSSIMULATOR_READ_PROPERTY = 11,
        TPMVSCMGR_ERROR_VREADER_INITIALIZE = 12,
        TPMVSCMGR_ERROR_VREADER_CREATE = 13,
        TPMVSCMGR_ERROR_VREADER_DESTROY = 14,
        TPMVSCMGR_ERROR_GENERATE_LOCATE_READER = 15,
        TPMVSCMGR_ERROR_GENERATE_FILESYSTEM = 16,
        TPMVSCMGR_ERROR_CARD_CREATE = 17,
        TPMVSCMGR_ERROR_CARD_DESTROY = 18,
    };
    enum class TPMVSCMGR_STATUS : int32_t
    {
        TPMVSCMGR_STATUS_VTPMSMARTCARD_INITIALIZING = 0,
        TPMVSCMGR_STATUS_VTPMSMARTCARD_CREATING = 1,
        TPMVSCMGR_STATUS_VTPMSMARTCARD_DESTROYING = 2,
        TPMVSCMGR_STATUS_VGIDSSIMULATOR_INITIALIZING = 3,
        TPMVSCMGR_STATUS_VGIDSSIMULATOR_CREATING = 4,
        TPMVSCMGR_STATUS_VGIDSSIMULATOR_DESTROYING = 5,
        TPMVSCMGR_STATUS_VREADER_INITIALIZING = 6,
        TPMVSCMGR_STATUS_VREADER_CREATING = 7,
        TPMVSCMGR_STATUS_VREADER_DESTROYING = 8,
        TPMVSCMGR_STATUS_GENERATE_WAITING = 9,
        TPMVSCMGR_STATUS_GENERATE_AUTHENTICATING = 10,
        TPMVSCMGR_STATUS_GENERATE_RUNNING = 11,
        TPMVSCMGR_STATUS_CARD_CREATED = 12,
        TPMVSCMGR_STATUS_CARD_DESTROYED = 13,
    };
    enum class TPMVSC_ATTESTATION_TYPE : int32_t
    {
        TPMVSC_ATTESTATION_NONE = 0,
        TPMVSC_ATTESTATION_AIK_ONLY = 1,
        TPMVSC_ATTESTATION_AIK_AND_CERTIFICATE = 2,
    };
    enum class TRUSTED_INFORMATION_CLASS : int32_t
    {
        TrustedDomainNameInformation = 1,
        TrustedControllersInformation = 2,
        TrustedPosixOffsetInformation = 3,
        TrustedPasswordInformation = 4,
        TrustedDomainInformationBasic = 5,
        TrustedDomainInformationEx = 6,
        TrustedDomainAuthInformation = 7,
        TrustedDomainFullInformation = 8,
        TrustedDomainAuthInformationInternal = 9,
        TrustedDomainFullInformationInternal = 10,
        TrustedDomainInformationEx2Internal = 11,
        TrustedDomainFullInformation2Internal = 12,
        TrustedDomainSupportedEncryptionTypes = 13,
    };
    enum class TRUSTEE_FORM : int32_t
    {
        TRUSTEE_IS_SID = 0,
        TRUSTEE_IS_NAME = 1,
        TRUSTEE_BAD_FORM = 2,
        TRUSTEE_IS_OBJECTS_AND_SID = 3,
        TRUSTEE_IS_OBJECTS_AND_NAME = 4,
    };
    enum class TRUSTEE_TYPE : int32_t
    {
        TRUSTEE_IS_UNKNOWN = 0,
        TRUSTEE_IS_USER = 1,
        TRUSTEE_IS_GROUP = 2,
        TRUSTEE_IS_DOMAIN = 3,
        TRUSTEE_IS_ALIAS = 4,
        TRUSTEE_IS_WELL_KNOWN_GROUP = 5,
        TRUSTEE_IS_DELETED = 6,
        TRUSTEE_IS_INVALID = 7,
        TRUSTEE_IS_COMPUTER = 8,
    };
    enum class WELL_KNOWN_SID_TYPE : int32_t
    {
        WinNullSid = 0,
        WinWorldSid = 1,
        WinLocalSid = 2,
        WinCreatorOwnerSid = 3,
        WinCreatorGroupSid = 4,
        WinCreatorOwnerServerSid = 5,
        WinCreatorGroupServerSid = 6,
        WinNtAuthoritySid = 7,
        WinDialupSid = 8,
        WinNetworkSid = 9,
        WinBatchSid = 10,
        WinInteractiveSid = 11,
        WinServiceSid = 12,
        WinAnonymousSid = 13,
        WinProxySid = 14,
        WinEnterpriseControllersSid = 15,
        WinSelfSid = 16,
        WinAuthenticatedUserSid = 17,
        WinRestrictedCodeSid = 18,
        WinTerminalServerSid = 19,
        WinRemoteLogonIdSid = 20,
        WinLogonIdsSid = 21,
        WinLocalSystemSid = 22,
        WinLocalServiceSid = 23,
        WinNetworkServiceSid = 24,
        WinBuiltinDomainSid = 25,
        WinBuiltinAdministratorsSid = 26,
        WinBuiltinUsersSid = 27,
        WinBuiltinGuestsSid = 28,
        WinBuiltinPowerUsersSid = 29,
        WinBuiltinAccountOperatorsSid = 30,
        WinBuiltinSystemOperatorsSid = 31,
        WinBuiltinPrintOperatorsSid = 32,
        WinBuiltinBackupOperatorsSid = 33,
        WinBuiltinReplicatorSid = 34,
        WinBuiltinPreWindows2000CompatibleAccessSid = 35,
        WinBuiltinRemoteDesktopUsersSid = 36,
        WinBuiltinNetworkConfigurationOperatorsSid = 37,
        WinAccountAdministratorSid = 38,
        WinAccountGuestSid = 39,
        WinAccountKrbtgtSid = 40,
        WinAccountDomainAdminsSid = 41,
        WinAccountDomainUsersSid = 42,
        WinAccountDomainGuestsSid = 43,
        WinAccountComputersSid = 44,
        WinAccountControllersSid = 45,
        WinAccountCertAdminsSid = 46,
        WinAccountSchemaAdminsSid = 47,
        WinAccountEnterpriseAdminsSid = 48,
        WinAccountPolicyAdminsSid = 49,
        WinAccountRasAndIasServersSid = 50,
        WinNTLMAuthenticationSid = 51,
        WinDigestAuthenticationSid = 52,
        WinSChannelAuthenticationSid = 53,
        WinThisOrganizationSid = 54,
        WinOtherOrganizationSid = 55,
        WinBuiltinIncomingForestTrustBuildersSid = 56,
        WinBuiltinPerfMonitoringUsersSid = 57,
        WinBuiltinPerfLoggingUsersSid = 58,
        WinBuiltinAuthorizationAccessSid = 59,
        WinBuiltinTerminalServerLicenseServersSid = 60,
        WinBuiltinDCOMUsersSid = 61,
        WinBuiltinIUsersSid = 62,
        WinIUserSid = 63,
        WinBuiltinCryptoOperatorsSid = 64,
        WinUntrustedLabelSid = 65,
        WinLowLabelSid = 66,
        WinMediumLabelSid = 67,
        WinHighLabelSid = 68,
        WinSystemLabelSid = 69,
        WinWriteRestrictedCodeSid = 70,
        WinCreatorOwnerRightsSid = 71,
        WinCacheablePrincipalsGroupSid = 72,
        WinNonCacheablePrincipalsGroupSid = 73,
        WinEnterpriseReadonlyControllersSid = 74,
        WinAccountReadonlyControllersSid = 75,
        WinBuiltinEventLogReadersGroup = 76,
        WinNewEnterpriseReadonlyControllersSid = 77,
        WinBuiltinCertSvcDComAccessGroup = 78,
        WinMediumPlusLabelSid = 79,
        WinLocalLogonSid = 80,
        WinConsoleLogonSid = 81,
        WinThisOrganizationCertificateSid = 82,
        WinApplicationPackageAuthoritySid = 83,
        WinBuiltinAnyPackageSid = 84,
        WinCapabilityInternetClientSid = 85,
        WinCapabilityInternetClientServerSid = 86,
        WinCapabilityPrivateNetworkClientServerSid = 87,
        WinCapabilityPicturesLibrarySid = 88,
        WinCapabilityVideosLibrarySid = 89,
        WinCapabilityMusicLibrarySid = 90,
        WinCapabilityDocumentsLibrarySid = 91,
        WinCapabilitySharedUserCertificatesSid = 92,
        WinCapabilityEnterpriseAuthenticationSid = 93,
        WinCapabilityRemovableStorageSid = 94,
        WinBuiltinRDSRemoteAccessServersSid = 95,
        WinBuiltinRDSEndpointServersSid = 96,
        WinBuiltinRDSManagementServersSid = 97,
        WinUserModeDriversSid = 98,
        WinBuiltinHyperVAdminsSid = 99,
        WinAccountCloneableControllersSid = 100,
        WinBuiltinAccessControlAssistanceOperatorsSid = 101,
        WinBuiltinRemoteManagementUsersSid = 102,
        WinAuthenticationAuthorityAssertedSid = 103,
        WinAuthenticationServiceAssertedSid = 104,
        WinLocalAccountSid = 105,
        WinLocalAccountAndAdministratorSid = 106,
        WinAccountProtectedUsersSid = 107,
        WinCapabilityAppointmentsSid = 108,
        WinCapabilityContactsSid = 109,
        WinAccountDefaultSystemManagedSid = 110,
        WinBuiltinDefaultSystemManagedGroupSid = 111,
        WinBuiltinStorageReplicaAdminsSid = 112,
        WinAccountKeyAdminsSid = 113,
        WinAccountEnterpriseKeyAdminsSid = 114,
        WinAuthenticationKeyTrustSid = 115,
        WinAuthenticationKeyPropertyMFASid = 116,
        WinAuthenticationKeyPropertyAttestationSid = 117,
        WinAuthenticationFreshKeyAuthSid = 118,
        WinBuiltinDeviceOwnersSid = 119,
    };
    enum class WebEnrollmentFlags : int32_t
    {
        EnrollPrompt = 1,
    };
    enum class WebSecurityLevel : int32_t
    {
        LevelUnsafe = 0,
        LevelSafe = 1,
    };
    enum class X500NameFlags : int32_t
    {
        XCN_CERT_NAME_STR_NONE = 0,
        XCN_CERT_SIMPLE_NAME_STR = 1,
        XCN_CERT_OID_NAME_STR = 2,
        XCN_CERT_X500_NAME_STR = 3,
        XCN_CERT_XML_NAME_STR = 4,
        XCN_CERT_NAME_STR_SEMICOLON_FLAG = 1073741824,
        XCN_CERT_NAME_STR_NO_PLUS_FLAG = 536870912,
        XCN_CERT_NAME_STR_NO_QUOTING_FLAG = 268435456,
        XCN_CERT_NAME_STR_CRLF_FLAG = 134217728,
        XCN_CERT_NAME_STR_COMMA_FLAG = 67108864,
        XCN_CERT_NAME_STR_REVERSE_FLAG = 33554432,
        XCN_CERT_NAME_STR_FORWARD_FLAG = 16777216,
        XCN_CERT_NAME_STR_AMBIGUOUS_SEPARATOR_FLAGS = 1275068416,
        XCN_CERT_NAME_STR_DISABLE_IE4_UTF8_FLAG = 65536,
        XCN_CERT_NAME_STR_ENABLE_T61_UNICODE_FLAG = 131072,
        XCN_CERT_NAME_STR_ENABLE_UTF8_UNICODE_FLAG = 262144,
        XCN_CERT_NAME_STR_FORCE_UTF8_DIR_STR_FLAG = 524288,
        XCN_CERT_NAME_STR_DISABLE_UTF8_DIR_STR_FLAG = 1048576,
        XCN_CERT_NAME_STR_ENABLE_PUNYCODE_FLAG = 2097152,
        XCN_CERT_NAME_STR_DS_ESCAPED = 8388608,
    };
    enum class X509CertificateEnrollmentContext : int32_t
    {
        ContextNone = 0,
        ContextUser = 1,
        ContextMachine = 2,
        ContextAdministratorForceMachine = 3,
    };
    enum class X509CertificateTemplateEnrollmentFlag : int32_t
    {
        EnrollmentIncludeSymmetricAlgorithms = 1,
        EnrollmentPendAllRequests = 2,
        EnrollmentPublishToKRAContainer = 4,
        EnrollmentPublishToDS = 8,
        EnrollmentAutoEnrollmentCheckUserDSCertificate = 16,
        EnrollmentAutoEnrollment = 32,
        EnrollmentDomainAuthenticationNotRequired = 128,
        EnrollmentPreviousApprovalValidateReenrollment = 64,
        EnrollmentUserInteractionRequired = 256,
        EnrollmentAddTemplateName = 512,
        EnrollmentRemoveInvalidCertificateFromPersonalStore = 1024,
        EnrollmentAllowEnrollOnBehalfOf = 2048,
        EnrollmentAddOCSPNoCheck = 4096,
        EnrollmentReuseKeyOnFullSmartCard = 8192,
        EnrollmentNoRevocationInfoInCerts = 16384,
        EnrollmentIncludeBasicConstraintsForEECerts = 32768,
        EnrollmentPreviousApprovalKeyBasedValidateReenrollment = 65536,
        EnrollmentCertificateIssuancePoliciesFromRequest = 131072,
        EnrollmentSkipAutoRenewal = 262144,
    };
    enum class X509CertificateTemplateGeneralFlag : int32_t
    {
        GeneralMachineType = 64,
        GeneralCA = 128,
        GeneralCrossCA = 2048,
        GeneralDefault = 65536,
        GeneralModified = 131072,
        GeneralDonotPersist = 4096,
    };
    enum class X509CertificateTemplatePrivateKeyFlag : int32_t
    {
        PrivateKeyRequireArchival = 1,
        PrivateKeyExportable = 16,
        PrivateKeyRequireStrongKeyProtection = 32,
        PrivateKeyRequireAlternateSignatureAlgorithm = 64,
        PrivateKeyRequireSameKeyRenewal = 128,
        PrivateKeyUseLegacyProvider = 256,
        PrivateKeyEKTrustOnUse = 512,
        PrivateKeyEKValidateCert = 1024,
        PrivateKeyEKValidateKey = 2048,
        PrivateKeyAttestNone = 0,
        PrivateKeyAttestPreferred = 4096,
        PrivateKeyAttestRequired = 8192,
        PrivateKeyAttestMask = 12288,
        PrivateKeyAttestWithoutPolicy = 16384,
        PrivateKeyServerVersionMask = 983040,
        PrivateKeyServerVersionShift = 16,
        PrivateKeyHelloKspKey = 1048576,
        PrivateKeyHelloLogonKey = 2097152,
        PrivateKeyClientVersionMask = 251658240,
        PrivateKeyClientVersionShift = 24,
    };
    enum class X509CertificateTemplateSubjectNameFlag : int32_t
    {
        SubjectNameEnrolleeSupplies = 1,
        SubjectNameRequireDirectoryPath = -2147483648,
        SubjectNameRequireCommonName = 1073741824,
        SubjectNameRequireEmail = 536870912,
        SubjectNameRequireDNS = 268435456,
        SubjectNameAndAlternativeNameOldCertSupplies = 8,
        SubjectAlternativeNameEnrolleeSupplies = 65536,
        SubjectAlternativeNameRequireDirectoryGUID = 16777216,
        SubjectAlternativeNameRequireUPN = 33554432,
        SubjectAlternativeNameRequireEmail = 67108864,
        SubjectAlternativeNameRequireSPN = 8388608,
        SubjectAlternativeNameRequireDNS = 134217728,
        SubjectAlternativeNameRequireDomainDNS = 4194304,
    };
    enum class X509EnrollmentAuthFlags : int32_t
    {
        X509AuthNone = 0,
        X509AuthAnonymous = 1,
        X509AuthKerberos = 2,
        X509AuthUsername = 4,
        X509AuthCertificate = 8,
    };
    enum class X509EnrollmentPolicyExportFlags : int32_t
    {
        ExportTemplates = 1,
        ExportOIDs = 2,
        ExportCAs = 4,
    };
    enum class X509EnrollmentPolicyLoadOption : int32_t
    {
        LoadOptionDefault = 0,
        LoadOptionCacheOnly = 1,
        LoadOptionReload = 2,
        LoadOptionRegisterForADChanges = 4,
    };
    enum class X509HardwareKeyUsageFlags : int32_t
    {
        XCN_NCRYPT_PCP_NONE = 0,
        XCN_NCRYPT_TPM12_PROVIDER = 65536,
        XCN_NCRYPT_PCP_SIGNATURE_KEY = 1,
        XCN_NCRYPT_PCP_ENCRYPTION_KEY = 2,
        XCN_NCRYPT_PCP_GENERIC_KEY = 3,
        XCN_NCRYPT_PCP_STORAGE_KEY = 4,
        XCN_NCRYPT_PCP_IDENTITY_KEY = 8,
    };
    enum class X509KeyParametersExportType : int32_t
    {
        XCN_CRYPT_OID_USE_CURVE_NONE = 0,
        XCN_CRYPT_OID_USE_CURVE_NAME_FOR_ENCODE_FLAG = 536870912,
        XCN_CRYPT_OID_USE_CURVE_PARAMETERS_FOR_ENCODE_FLAG = 268435456,
    };
    enum class X509KeySpec : int32_t
    {
        XCN_AT_NONE = 0,
        XCN_AT_KEYEXCHANGE = 1,
        XCN_AT_SIGNATURE = 2,
    };
    enum class X509KeyUsageFlags : int32_t
    {
        XCN_CERT_NO_KEY_USAGE = 0,
        XCN_CERT_DIGITAL_SIGNATURE_KEY_USAGE = 128,
        XCN_CERT_NON_REPUDIATION_KEY_USAGE = 64,
        XCN_CERT_KEY_ENCIPHERMENT_KEY_USAGE = 32,
        XCN_CERT_DATA_ENCIPHERMENT_KEY_USAGE = 16,
        XCN_CERT_KEY_AGREEMENT_KEY_USAGE = 8,
        XCN_CERT_KEY_CERT_SIGN_KEY_USAGE = 4,
        XCN_CERT_OFFLINE_CRL_SIGN_KEY_USAGE = 2,
        XCN_CERT_CRL_SIGN_KEY_USAGE = 2,
        XCN_CERT_ENCIPHER_ONLY_KEY_USAGE = 1,
        XCN_CERT_DECIPHER_ONLY_KEY_USAGE = 32768,
    };
    enum class X509PrivateKeyExportFlags : int32_t
    {
        XCN_NCRYPT_ALLOW_EXPORT_NONE = 0,
        XCN_NCRYPT_ALLOW_EXPORT_FLAG = 1,
        XCN_NCRYPT_ALLOW_PLAINTEXT_EXPORT_FLAG = 2,
        XCN_NCRYPT_ALLOW_ARCHIVING_FLAG = 4,
        XCN_NCRYPT_ALLOW_PLAINTEXT_ARCHIVING_FLAG = 8,
    };
    enum class X509PrivateKeyProtection : int32_t
    {
        XCN_NCRYPT_UI_NO_PROTECTION_FLAG = 0,
        XCN_NCRYPT_UI_PROTECT_KEY_FLAG = 1,
        XCN_NCRYPT_UI_FORCE_HIGH_PROTECTION_FLAG = 2,
        XCN_NCRYPT_UI_FINGERPRINT_PROTECTION_FLAG = 4,
        XCN_NCRYPT_UI_APPCONTAINER_ACCESS_MEDIUM_FLAG = 8,
    };
    enum class X509PrivateKeyUsageFlags : int32_t
    {
        XCN_NCRYPT_ALLOW_USAGES_NONE = 0,
        XCN_NCRYPT_ALLOW_DECRYPT_FLAG = 1,
        XCN_NCRYPT_ALLOW_SIGNING_FLAG = 2,
        XCN_NCRYPT_ALLOW_KEY_AGREEMENT_FLAG = 4,
        XCN_NCRYPT_ALLOW_KEY_IMPORT_FLAG = 8,
        XCN_NCRYPT_ALLOW_ALL_USAGES = 16777215,
    };
    enum class X509PrivateKeyVerify : int32_t
    {
        VerifyNone = 0,
        VerifySilent = 1,
        VerifySmartCardNone = 2,
        VerifySmartCardSilent = 3,
        VerifyAllowUI = 4,
    };
    enum class X509ProviderType : int32_t
    {
        XCN_PROV_NONE = 0,
        XCN_PROV_RSA_FULL = 1,
        XCN_PROV_RSA_SIG = 2,
        XCN_PROV_DSS = 3,
        XCN_PROV_FORTEZZA = 4,
        XCN_PROV_MS_EXCHANGE = 5,
        XCN_PROV_SSL = 6,
        XCN_PROV_RSA_SCHANNEL = 12,
        XCN_PROV_DSS_DH = 13,
        XCN_PROV_EC_ECDSA_SIG = 14,
        XCN_PROV_EC_ECNRA_SIG = 15,
        XCN_PROV_EC_ECDSA_FULL = 16,
        XCN_PROV_EC_ECNRA_FULL = 17,
        XCN_PROV_DH_SCHANNEL = 18,
        XCN_PROV_SPYRUS_LYNKS = 20,
        XCN_PROV_RNG = 21,
        XCN_PROV_INTEL_SEC = 22,
        XCN_PROV_REPLACE_OWF = 23,
        XCN_PROV_RSA_AES = 24,
    };
    enum class X509RequestInheritOptions : int32_t
    {
        InheritDefault = 0,
        InheritNewDefaultKey = 1,
        InheritNewSimilarKey = 2,
        InheritPrivateKey = 3,
        InheritPublicKey = 4,
        InheritKeyMask = 15,
        InheritNone = 16,
        InheritRenewalCertificateFlag = 32,
        InheritTemplateFlag = 64,
        InheritSubjectFlag = 128,
        InheritExtensionsFlag = 256,
        InheritSubjectAltNameFlag = 512,
        InheritValidityPeriodFlag = 1024,
        InheritReserved80000000 = -2147483648,
    };
    enum class X509RequestType : int32_t
    {
        TypeAny = 0,
        TypePkcs10 = 1,
        TypePkcs7 = 2,
        TypeCmc = 3,
        TypeCertificate = 4,
    };
    enum class X509SCEPDisposition : int32_t
    {
        SCEPDispositionUnknown = -1,
        SCEPDispositionSuccess = 0,
        SCEPDispositionFailure = 2,
        SCEPDispositionPending = 3,
        SCEPDispositionPendingChallenge = 11,
    };
    enum class X509SCEPFailInfo : int32_t
    {
        SCEPFailUnknown = -1,
        SCEPFailBadAlgorithm = 0,
        SCEPFailBadMessageCheck = 1,
        SCEPFailBadRequest = 2,
        SCEPFailBadTime = 3,
        SCEPFailBadCertId = 4,
    };
    enum class X509SCEPMessageType : int32_t
    {
        SCEPMessageUnknown = -1,
        SCEPMessageCertResponse = 3,
        SCEPMessagePKCSRequest = 19,
        SCEPMessageGetCertInitial = 20,
        SCEPMessageGetCert = 21,
        SCEPMessageGetCRL = 22,
        SCEPMessageClaimChallengeAnswer = 41,
    };
    enum class X509SCEPProcessMessageFlags : int32_t
    {
        SCEPProcessDefault = 0,
        SCEPProcessSkipCertInstall = 1,
    };
    enum class __MIDL___MIDL_itf_identityprovider_0000_0003_0001 : int32_t
    {
        IDENTITY_URL_CREATE_ACCOUNT_WIZARD = 0,
        IDENTITY_URL_SIGN_IN_WIZARD = 1,
        IDENTITY_URL_CHANGE_PASSWORD_WIZARD = 2,
        IDENTITY_URL_IFEXISTS_WIZARD = 3,
        IDENTITY_URL_ACCOUNT_SETTINGS = 4,
        IDENTITY_URL_RESTORE_WIZARD = 5,
        IDENTITY_URL_CONNECT_WIZARD = 6,
    };
    enum class __MIDL___MIDL_itf_identityprovider_0000_0003_0002 : int32_t
    {
        NOT_CONNECTED = 0,
        CONNECTING = 1,
        CONNECT_COMPLETED = 2,
    };
    enum class eTlsHashAlgorithm : int32_t
    {
        TlsHashAlgorithm_None = 0,
        TlsHashAlgorithm_Md5 = 1,
        TlsHashAlgorithm_Sha1 = 2,
        TlsHashAlgorithm_Sha224 = 3,
        TlsHashAlgorithm_Sha256 = 4,
        TlsHashAlgorithm_Sha384 = 5,
        TlsHashAlgorithm_Sha512 = 6,
    };
    enum class eTlsSignatureAlgorithm : int32_t
    {
        TlsSignatureAlgorithm_Anonymous = 0,
        TlsSignatureAlgorithm_Rsa = 1,
        TlsSignatureAlgorithm_Dsa = 2,
        TlsSignatureAlgorithm_Ecdsa = 3,
    };
    enum class tag_IdentityUpdateEvent : int32_t
    {
        IDENTITY_ASSOCIATED = 1,
        IDENTITY_DISASSOCIATED = 2,
        IDENTITY_CREATED = 4,
        IDENTITY_IMPORTED = 8,
        IDENTITY_DELETED = 16,
        IDENTITY_PROPCHANGED = 32,
        IDENTITY_CONNECTED = 64,
        IDENTITY_DISCONNECTED = 128,
    };
#pragma endregion enums

#pragma region forward_declarations
    struct ACCESS_ALLOWED_ACE;
    struct ACCESS_ALLOWED_CALLBACK_ACE;
    struct ACCESS_ALLOWED_CALLBACK_OBJECT_ACE;
    struct ACCESS_ALLOWED_OBJECT_ACE;
    struct ACCESS_DENIED_ACE;
    struct ACCESS_DENIED_CALLBACK_ACE;
    struct ACCESS_DENIED_CALLBACK_OBJECT_ACE;
    struct ACCESS_DENIED_OBJECT_ACE;
    struct ACE_HEADER;
    struct ACL;
    struct ACL_REVISION_INFORMATION;
    struct ACL_SIZE_INFORMATION;
    struct ACTRL_ACCESS_INFOA;
    struct ACTRL_ACCESS_INFOW;
    struct ACTRL_CONTROL_INFOA;
    struct ACTRL_CONTROL_INFOW;
    struct ACTRL_OVERLAPPED;
    struct AUDIT_IP_ADDRESS;
    struct AUDIT_OBJECT_TYPE;
    struct AUDIT_OBJECT_TYPES;
    struct AUDIT_PARAM;
    struct AUDIT_PARAMS;
    struct AUDIT_POLICY_INFORMATION;
    struct AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA;
    struct AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS;
    struct AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA;
    struct AUTHZ_ACCESS_CHECK_RESULTS_HANDLE__;
    struct AUTHZ_ACCESS_REPLY;
    struct AUTHZ_ACCESS_REQUEST;
    struct AUTHZ_AUDIT_EVENT_HANDLE__;
    struct AUTHZ_AUDIT_EVENT_TYPE_HANDLE__;
    struct AUTHZ_AUDIT_EVENT_TYPE_LEGACY;
    struct AUTHZ_AUDIT_EVENT_TYPE_OLD;
    union AUTHZ_AUDIT_EVENT_TYPE_UNION;
    struct AUTHZ_CAP_CHANGE_SUBSCRIPTION_HANDLE__;
    struct AUTHZ_CLIENT_CONTEXT_HANDLE__;
    struct AUTHZ_INIT_INFO;
    struct AUTHZ_REGISTRATION_OBJECT_TYPE_NAME_OFFSET;
    struct AUTHZ_RESOURCE_MANAGER_HANDLE__;
    struct AUTHZ_RPC_INIT_INFO_CLIENT;
    struct AUTHZ_SECURITY_ATTRIBUTES_INFORMATION;
    struct AUTHZ_SECURITY_ATTRIBUTE_FQBN_VALUE;
    struct AUTHZ_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE;
    struct AUTHZ_SECURITY_ATTRIBUTE_V1;
    struct AUTHZ_SECURITY_EVENT_PROVIDER_HANDLE__;
    struct AUTHZ_SOURCE_SCHEMA_REGISTRATION;
    struct BCRYPT_ALGORITHM_IDENTIFIER;
    struct BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO;
    struct BCRYPT_DH_KEY_BLOB;
    struct BCRYPT_DH_PARAMETER_HEADER;
    struct BCRYPT_DSA_KEY_BLOB;
    struct BCRYPT_DSA_KEY_BLOB_V2;
    struct BCRYPT_DSA_PARAMETER_HEADER;
    struct BCRYPT_DSA_PARAMETER_HEADER_V2;
    struct BCRYPT_ECCFULLKEY_BLOB;
    struct BCRYPT_ECCKEY_BLOB;
    struct BCRYPT_ECC_CURVE_NAMES;
    struct BCRYPT_INTERFACE_VERSION;
    struct BCRYPT_KEY_BLOB;
    struct BCRYPT_KEY_DATA_BLOB_HEADER;
    struct BCRYPT_KEY_LENGTHS_STRUCT;
    struct BCRYPT_MULTI_HASH_OPERATION;
    struct BCRYPT_MULTI_OBJECT_LENGTH_STRUCT;
    struct BCRYPT_OAEP_PADDING_INFO;
    struct BCRYPT_OID;
    struct BCRYPT_OID_LIST;
    struct BCRYPT_PKCS1_PADDING_INFO;
    struct BCRYPT_PROVIDER_NAME;
    struct BCRYPT_PSS_PADDING_INFO;
    struct BCRYPT_RSAKEY_BLOB;
    struct BCryptBuffer;
    struct BCryptBufferDesc;
    struct BINARY_BLOB_CREDENTIAL_INFO;
    struct CAINFO;
    struct CATALOG_INFO;
    struct CAT_MEMBERINFO;
    struct CAT_MEMBERINFO2;
    struct CAT_NAMEVALUE;
    struct CENTRAL_ACCESS_POLICY;
    struct CENTRAL_ACCESS_POLICY_ENTRY;
    struct CERTTRANSBLOB;
    struct CERTVIEWRESTRICTION;
    struct CERT_ACCESS_DESCRIPTION;
    struct CERT_ALT_NAME_ENTRY;
    struct CERT_ALT_NAME_INFO;
    struct CERT_AUTHORITY_INFO_ACCESS;
    struct CERT_AUTHORITY_KEY_ID2_INFO;
    struct CERT_AUTHORITY_KEY_ID_INFO;
    struct CERT_BASIC_CONSTRAINTS2_INFO;
    struct CERT_BASIC_CONSTRAINTS_INFO;
    struct CERT_BIOMETRIC_DATA;
    struct CERT_BIOMETRIC_EXT_INFO;
    struct CERT_CHAIN;
    struct CERT_CHAIN_CONTEXT;
    struct CERT_CHAIN_ELEMENT;
    struct CERT_CHAIN_ENGINE_CONFIG;
    struct CERT_CHAIN_FIND_BY_ISSUER_PARA;
    struct CERT_CHAIN_PARA;
    struct CERT_CHAIN_POLICY_PARA;
    struct CERT_CHAIN_POLICY_STATUS;
    struct CERT_CONTEXT;
    struct CERT_CREATE_CONTEXT_PARA;
    struct CERT_CREDENTIAL_INFO;
    struct CERT_CRL_CONTEXT_PAIR;
    struct CERT_DH_PARAMETERS;
    struct CERT_DSS_PARAMETERS;
    struct CERT_ECC_SIGNATURE;
    struct CERT_EXTENSION;
    struct CERT_EXTENSIONS;
    struct CERT_FORTEZZA_DATA_PROP;
    struct CERT_GENERAL_SUBTREE;
    struct CERT_HASHED_URL;
    struct CERT_ID;
    struct CERT_INFO;
    struct CERT_ISSUER_SERIAL_NUMBER;
    struct CERT_KEYGEN_REQUEST_INFO;
    struct CERT_KEY_ATTRIBUTES_INFO;
    struct CERT_KEY_CONTEXT;
    struct CERT_KEY_USAGE_RESTRICTION_INFO;
    struct CERT_LDAP_STORE_OPENED_PARA;
    struct CERT_LOGOTYPE_AUDIO;
    struct CERT_LOGOTYPE_AUDIO_INFO;
    struct CERT_LOGOTYPE_DATA;
    struct CERT_LOGOTYPE_DETAILS;
    struct CERT_LOGOTYPE_EXT_INFO;
    struct CERT_LOGOTYPE_IMAGE;
    struct CERT_LOGOTYPE_IMAGE_INFO;
    struct CERT_LOGOTYPE_INFO;
    struct CERT_LOGOTYPE_REFERENCE;
    struct CERT_NAME_CONSTRAINTS_INFO;
    struct CERT_NAME_INFO;
    struct CERT_NAME_VALUE;
    struct CERT_OR_CRL_BLOB;
    struct CERT_OR_CRL_BUNDLE;
    struct CERT_OTHER_LOGOTYPE_INFO;
    struct CERT_OTHER_NAME;
    struct CERT_PAIR;
    struct CERT_PHYSICAL_STORE_INFO;
    struct CERT_POLICIES_INFO;
    struct CERT_POLICY95_QUALIFIER1;
    struct CERT_POLICY_CONSTRAINTS_INFO;
    struct CERT_POLICY_ID;
    struct CERT_POLICY_INFO;
    struct CERT_POLICY_MAPPING;
    struct CERT_POLICY_MAPPINGS_INFO;
    struct CERT_POLICY_QUALIFIER_INFO;
    struct CERT_POLICY_QUALIFIER_NOTICE_REFERENCE;
    struct CERT_POLICY_QUALIFIER_USER_NOTICE;
    struct CERT_PRIVATE_KEY_VALIDITY;
    struct CERT_PUBLIC_KEY_INFO;
    struct CERT_QC_STATEMENT;
    struct CERT_QC_STATEMENTS_EXT_INFO;
    struct CERT_RDN;
    struct CERT_RDN_ATTR;
    struct CERT_REGISTRY_STORE_CLIENT_GPT_PARA;
    struct CERT_REGISTRY_STORE_ROAMING_PARA;
    struct CERT_REQUEST_INFO;
    struct CERT_REVOCATION_CHAIN_PARA;
    struct CERT_REVOCATION_CRL_INFO;
    struct CERT_REVOCATION_INFO;
    struct CERT_REVOCATION_PARA;
    struct CERT_REVOCATION_STATUS;
    struct CERT_SELECTUI_INPUT;
    struct CERT_SELECT_CHAIN_PARA;
    struct CERT_SELECT_CRITERIA;
    struct CERT_SELECT_STRUCT_A;
    struct CERT_SELECT_STRUCT_W;
    struct CERT_SERVER_OCSP_RESPONSE_CONTEXT;
    struct CERT_SERVER_OCSP_RESPONSE_OPEN_PARA;
    struct CERT_SIGNED_CONTENT_INFO;
    struct CERT_SIMPLE_CHAIN;
    struct CERT_STORE_PROV_FIND_INFO;
    struct CERT_STORE_PROV_INFO;
    struct CERT_STRONG_SIGN_PARA;
    struct CERT_STRONG_SIGN_SERIALIZED_INFO;
    struct CERT_SUPPORTED_ALGORITHM_INFO;
    struct CERT_SYSTEM_STORE_INFO;
    struct CERT_SYSTEM_STORE_RELOCATE_PARA;
    struct CERT_TEMPLATE_EXT;
    struct CERT_TPM_SPECIFICATION_INFO;
    struct CERT_TRUST_LIST_INFO;
    struct CERT_TRUST_STATUS;
    struct CERT_USAGE_MATCH;
    struct CERT_VERIFY_CERTIFICATE_TRUST;
    struct CERT_VIEWPROPERTIES_STRUCT_A;
    struct CERT_VIEWPROPERTIES_STRUCT_W;
    struct CERT_X942_DH_PARAMETERS;
    struct CERT_X942_DH_VALIDATION_PARAMS;
    struct CLAIM_SECURITY_ATTRIBUTES_INFORMATION;
    struct CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE;
    struct CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE;
    struct CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1;
    struct CLAIM_SECURITY_ATTRIBUTE_V1;
    struct CLEAR_BLOCK;
    struct CMC_ADD_ATTRIBUTES_INFO;
    struct CMC_ADD_EXTENSIONS_INFO;
    struct CMC_DATA_INFO;
    struct CMC_PEND_INFO;
    struct CMC_RESPONSE_INFO;
    struct CMC_STATUS_INFO;
    struct CMC_TAGGED_ATTRIBUTE;
    struct CMC_TAGGED_CERT_REQUEST;
    struct CMC_TAGGED_CONTENT_INFO;
    struct CMC_TAGGED_OTHER_MSG;
    struct CMC_TAGGED_REQUEST;
    struct CMSG_CMS_RECIPIENT_INFO;
    struct CMSG_CMS_SIGNER_INFO;
    struct CMSG_CNG_CONTENT_DECRYPT_INFO;
    struct CMSG_CONTENT_ENCRYPT_INFO;
    struct CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA;
    struct CMSG_CTRL_DECRYPT_PARA;
    struct CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA;
    struct CMSG_CTRL_KEY_AGREE_DECRYPT_PARA;
    struct CMSG_CTRL_KEY_TRANS_DECRYPT_PARA;
    struct CMSG_CTRL_MAIL_LIST_DECRYPT_PARA;
    struct CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA;
    struct CMSG_ENCRYPTED_ENCODE_INFO;
    struct CMSG_ENVELOPED_ENCODE_INFO;
    struct CMSG_HASHED_ENCODE_INFO;
    struct CMSG_KEY_AGREE_ENCRYPT_INFO;
    struct CMSG_KEY_AGREE_KEY_ENCRYPT_INFO;
    struct CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO;
    struct CMSG_KEY_AGREE_RECIPIENT_INFO;
    struct CMSG_KEY_TRANS_ENCRYPT_INFO;
    struct CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO;
    struct CMSG_KEY_TRANS_RECIPIENT_INFO;
    struct CMSG_MAIL_LIST_ENCRYPT_INFO;
    struct CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO;
    struct CMSG_MAIL_LIST_RECIPIENT_INFO;
    struct CMSG_RC2_AUX_INFO;
    struct CMSG_RC4_AUX_INFO;
    struct CMSG_RECIPIENT_ENCODE_INFO;
    struct CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO;
    struct CMSG_RECIPIENT_ENCRYPTED_KEY_INFO;
    struct CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO;
    struct CMSG_SIGNED_ENCODE_INFO;
    struct CMSG_SIGNER_ENCODE_INFO;
    struct CMSG_SIGNER_INFO;
    struct CMSG_SP3_COMPATIBLE_AUX_INFO;
    struct CMSG_STREAM_INFO;
    struct CMS_DH_KEY_INFO;
    struct CMS_KEY_INFO;
    struct CPS_URLS;
    struct CREDENTIALA;
    struct CREDENTIALW;
    struct CREDENTIAL_ATTRIBUTEA;
    struct CREDENTIAL_ATTRIBUTEW;
    struct CREDENTIAL_TARGET_INFORMATIONA;
    struct CREDENTIAL_TARGET_INFORMATIONW;
    struct CREDUI_INFOA;
    struct CREDUI_INFOW;
    struct CRL_CONTEXT;
    struct CRL_DIST_POINT;
    struct CRL_DIST_POINTS_INFO;
    struct CRL_DIST_POINT_NAME;
    struct CRL_ENTRY;
    struct CRL_FIND_ISSUED_FOR_PARA;
    struct CRL_INFO;
    struct CRL_ISSUING_DIST_POINT;
    struct CRL_REVOCATION_INFO;
    struct CROSS_CERT_DIST_POINTS_INFO;
    struct CRYPTCATATTRIBUTE;
    struct CRYPTCATCDF;
    struct CRYPTCATMEMBER;
    struct CRYPTCATSTORE;
    struct CRYPTNET_URL_CACHE_FLUSH_INFO;
    struct CRYPTNET_URL_CACHE_PRE_FETCH_INFO;
    struct CRYPTNET_URL_CACHE_RESPONSE_INFO;
    struct CRYPTOAPI_BLOB;
    struct CRYPTPROTECT_PROMPTSTRUCT;
    struct CRYPTUI_CERT_MGR_STRUCT;
    struct CRYPTUI_INITDIALOG_STRUCT;
    struct CRYPTUI_VIEWCERTIFICATE_STRUCTA;
    struct CRYPTUI_VIEWCERTIFICATE_STRUCTW;
    struct CRYPTUI_WIZ_DIGITAL_SIGN_BLOB_INFO;
    struct CRYPTUI_WIZ_DIGITAL_SIGN_CERT_PVK_INFO;
    struct CRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT;
    struct CRYPTUI_WIZ_DIGITAL_SIGN_EXTENDED_INFO;
    struct CRYPTUI_WIZ_DIGITAL_SIGN_INFO;
    struct CRYPTUI_WIZ_DIGITAL_SIGN_PVK_FILE_INFO;
    struct CRYPTUI_WIZ_DIGITAL_SIGN_STORE_INFO;
    struct CRYPTUI_WIZ_EXPORT_CERTCONTEXT_INFO;
    struct CRYPTUI_WIZ_EXPORT_INFO;
    struct CRYPTUI_WIZ_IMPORT_SRC_INFO;
    struct CRYPT_3DES_KEY_STATE;
    struct CRYPT_AES_128_KEY_STATE;
    struct CRYPT_AES_256_KEY_STATE;
    struct CRYPT_ALGORITHM_IDENTIFIER;
    struct CRYPT_ASYNC_RETRIEVAL_COMPLETION;
    struct CRYPT_ATTRIBUTE;
    struct CRYPT_ATTRIBUTES;
    struct CRYPT_ATTRIBUTE_TYPE_VALUE;
    struct CRYPT_BIT_BLOB;
    struct CRYPT_BLOB_ARRAY;
    struct CRYPT_CONTENT_INFO;
    struct CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY;
    struct CRYPT_CONTEXTS;
    struct CRYPT_CONTEXT_CONFIG;
    struct CRYPT_CONTEXT_FUNCTIONS;
    struct CRYPT_CONTEXT_FUNCTION_CONFIG;
    struct CRYPT_CONTEXT_FUNCTION_PROVIDERS;
    struct CRYPT_CREDENTIALS;
    struct CRYPT_CSP_PROVIDER;
    struct CRYPT_DECODE_PARA;
    struct CRYPT_DECRYPT_MESSAGE_PARA;
    struct CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA;
    struct CRYPT_DES_KEY_STATE;
    struct CRYPT_ECC_CMS_SHARED_INFO;
    struct CRYPT_ECC_PRIVATE_KEY_INFO;
    struct CRYPT_ENCODE_PARA;
    struct CRYPT_ENCRYPTED_PRIVATE_KEY_INFO;
    struct CRYPT_ENCRYPT_MESSAGE_PARA;
    struct CRYPT_ENROLLMENT_NAME_VALUE_PAIR;
    struct CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO;
    struct CRYPT_HASH_INFO;
    struct CRYPT_HASH_MESSAGE_PARA;
    struct CRYPT_IMAGE_REF;
    struct CRYPT_IMAGE_REG;
    struct CRYPT_INTERFACE_REG;
    struct CRYPT_KEY_PROV_INFO;
    struct CRYPT_KEY_PROV_PARAM;
    struct CRYPT_KEY_SIGN_MESSAGE_PARA;
    struct CRYPT_KEY_VERIFY_MESSAGE_PARA;
    struct CRYPT_MASK_GEN_ALGORITHM;
    struct CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE;
    struct CRYPT_OBJID_TABLE;
    struct CRYPT_OID_FUNC_ENTRY;
    struct CRYPT_OID_INFO;
    struct CRYPT_PASSWORD_CREDENTIALSA;
    struct CRYPT_PASSWORD_CREDENTIALSW;
    struct CRYPT_PKCS12_PBE_PARAMS;
    struct CRYPT_PKCS8_EXPORT_PARAMS;
    struct CRYPT_PKCS8_IMPORT_PARAMS;
    struct CRYPT_PRIVATE_KEY_INFO;
    struct CRYPT_PROPERTY_REF;
    struct CRYPT_PROVIDERS;
    struct CRYPT_PROVIDER_CERT;
    struct CRYPT_PROVIDER_DATA;
    struct CRYPT_PROVIDER_DEFUSAGE;
    struct CRYPT_PROVIDER_FUNCTIONS;
    struct CRYPT_PROVIDER_PRIVDATA;
    struct CRYPT_PROVIDER_REF;
    struct CRYPT_PROVIDER_REFS;
    struct CRYPT_PROVIDER_REG;
    struct CRYPT_PROVIDER_REGDEFUSAGE;
    struct CRYPT_PROVIDER_SGNR;
    struct CRYPT_PROVIDER_SIGSTATE;
    struct CRYPT_PROVUI_DATA;
    struct CRYPT_PROVUI_FUNCS;
    struct CRYPT_PSOURCE_ALGORITHM;
    struct CRYPT_RC2_CBC_PARAMETERS;
    struct CRYPT_RC4_KEY_STATE;
    struct CRYPT_REGISTER_ACTIONID;
    struct CRYPT_RETRIEVE_AUX_INFO;
    struct CRYPT_RSAES_OAEP_PARAMETERS;
    struct CRYPT_RSA_SSA_PSS_PARAMETERS;
    struct CRYPT_SEQUENCE_OF_ANY;
    struct CRYPT_SIGN_MESSAGE_PARA;
    struct CRYPT_SMART_CARD_ROOT_INFO;
    struct CRYPT_SMIME_CAPABILITIES;
    struct CRYPT_SMIME_CAPABILITY;
    struct CRYPT_TIMESTAMP_ACCURACY;
    struct CRYPT_TIMESTAMP_CONTEXT;
    struct CRYPT_TIMESTAMP_INFO;
    struct CRYPT_TIMESTAMP_PARA;
    struct CRYPT_TIMESTAMP_REQUEST;
    struct CRYPT_TIMESTAMP_RESPONSE;
    struct CRYPT_TIME_STAMP_REQUEST_INFO;
    struct CRYPT_TRUST_REG_ENTRY;
    struct CRYPT_URL_ARRAY;
    struct CRYPT_URL_INFO;
    struct CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO;
    struct CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO;
    struct CRYPT_VERIFY_MESSAGE_PARA;
    struct CRYPT_X942_OTHER_INFO;
    struct CRYPT_XML_ALGORITHM;
    struct CRYPT_XML_ALGORITHM_INFO;
    struct CRYPT_XML_BLOB;
    struct CRYPT_XML_CRYPTOGRAPHIC_INTERFACE;
    struct CRYPT_XML_DATA_BLOB;
    struct CRYPT_XML_DATA_PROVIDER;
    struct CRYPT_XML_DOC_CTXT;
    struct CRYPT_XML_ISSUER_SERIAL;
    struct CRYPT_XML_KEYINFO_PARAM;
    struct CRYPT_XML_KEY_DSA_KEY_VALUE;
    struct CRYPT_XML_KEY_ECDSA_KEY_VALUE;
    struct CRYPT_XML_KEY_INFO;
    struct CRYPT_XML_KEY_INFO_ITEM;
    struct CRYPT_XML_KEY_RSA_KEY_VALUE;
    struct CRYPT_XML_KEY_VALUE;
    struct CRYPT_XML_OBJECT;
    struct CRYPT_XML_PROPERTY;
    struct CRYPT_XML_REFERENCE;
    struct CRYPT_XML_REFERENCES;
    struct CRYPT_XML_SIGNATURE;
    struct CRYPT_XML_SIGNED_INFO;
    struct CRYPT_XML_STATUS;
    struct CRYPT_XML_TRANSFORM_CHAIN_CONFIG;
    struct CRYPT_XML_TRANSFORM_INFO;
    struct CRYPT_XML_X509DATA;
    struct CRYPT_XML_X509DATA_ITEM;
    struct CSEDB_RSTMAPW;
    struct CTL_ANY_SUBJECT_INFO;
    struct CTL_CONTEXT;
    struct CTL_ENTRY;
    struct CTL_FIND_SUBJECT_PARA;
    struct CTL_FIND_USAGE_PARA;
    struct CTL_INFO;
    struct CTL_MODIFY_REQUEST;
    struct CTL_USAGE;
    struct CTL_USAGE_MATCH;
    struct CTL_VERIFY_USAGE_PARA;
    struct CTL_VERIFY_USAGE_STATUS;
    struct DIAGNOSTIC_DATA_EVENT_BINARY_STATS;
    struct DIAGNOSTIC_DATA_EVENT_CATEGORY_DESCRIPTION;
    struct DIAGNOSTIC_DATA_EVENT_PRODUCER_DESCRIPTION;
    struct DIAGNOSTIC_DATA_EVENT_TAG_DESCRIPTION;
    struct DIAGNOSTIC_DATA_EVENT_TAG_STATS;
    struct DIAGNOSTIC_DATA_EVENT_TRANSCRIPT_CONFIGURATION;
    struct DIAGNOSTIC_DATA_GENERAL_STATS;
    struct DIAGNOSTIC_DATA_RECORD;
    struct DIAGNOSTIC_DATA_SEARCH_CRITERIA;
    struct DIAGNOSTIC_REPORT_DATA;
    struct DIAGNOSTIC_REPORT_PARAMETER;
    struct DIAGNOSTIC_REPORT_SIGNATURE;
    struct DOMAIN_PASSWORD_INFORMATION;
    struct DSSSEED;
    struct EFFPERM_RESULT_LIST;
    struct ENCRYPTED_CREDENTIALW;
    struct ENUM_SERVICE_STATUSA;
    struct ENUM_SERVICE_STATUSW;
    struct ENUM_SERVICE_STATUS_PROCESSA;
    struct ENUM_SERVICE_STATUS_PROCESSW;
    struct EV_EXTRA_CERT_CHAIN_POLICY_PARA;
    struct EV_EXTRA_CERT_CHAIN_POLICY_STATUS;
    struct EXPLICIT_ACCESS_A;
    struct EXPLICIT_ACCESS_W;
    struct GENERIC_MAPPING;
    struct HCERTCHAINENGINE;
    struct HCRYPTASYNC;
    struct HDIAGNOSTIC_DATA_QUERY_SESSION__;
    struct HDIAGNOSTIC_EVENT_CATEGORY_DESCRIPTION__;
    struct HDIAGNOSTIC_EVENT_PRODUCER_DESCRIPTION__;
    struct HDIAGNOSTIC_EVENT_TAG_DESCRIPTION__;
    struct HDIAGNOSTIC_RECORD__;
    struct HDIAGNOSTIC_REPORT__;
    struct HMAC_Info;
    struct HTTPSPolicyCallbackData;
    struct INHERITED_FROMA;
    struct INHERITED_FROMW;
    struct INTENT_TO_SEAL_ATTRIBUTE;
    struct KDC_PROXY_CACHE_ENTRY_DATA;
    struct KERB_ADD_BINDING_CACHE_ENTRY_EX_REQUEST;
    struct KERB_ADD_BINDING_CACHE_ENTRY_REQUEST;
    struct KERB_ADD_CREDENTIALS_REQUEST;
    struct KERB_ADD_CREDENTIALS_REQUEST_EX;
    struct KERB_AUTH_DATA;
    struct KERB_BINDING_CACHE_ENTRY_DATA;
    struct KERB_CERTIFICATE_HASHINFO;
    struct KERB_CERTIFICATE_INFO;
    struct KERB_CERTIFICATE_LOGON;
    struct KERB_CERTIFICATE_S4U_LOGON;
    struct KERB_CERTIFICATE_UNLOCK_LOGON;
    struct KERB_CHANGEPASSWORD_REQUEST;
    struct KERB_CLEANUP_MACHINE_PKINIT_CREDS_REQUEST;
    struct KERB_CRYPTO_KEY;
    struct KERB_CRYPTO_KEY32;
    struct KERB_DECRYPT_REQUEST;
    struct KERB_DECRYPT_RESPONSE;
    struct KERB_EXTERNAL_NAME;
    struct KERB_EXTERNAL_TICKET;
    struct KERB_INTERACTIVE_LOGON;
    struct KERB_INTERACTIVE_PROFILE;
    struct KERB_INTERACTIVE_UNLOCK_LOGON;
    struct KERB_NET_ADDRESS;
    struct KERB_NET_ADDRESSES;
    struct KERB_PURGE_BINDING_CACHE_REQUEST;
    struct KERB_PURGE_KDC_PROXY_CACHE_REQUEST;
    struct KERB_PURGE_KDC_PROXY_CACHE_RESPONSE;
    struct KERB_PURGE_TKT_CACHE_EX_REQUEST;
    struct KERB_PURGE_TKT_CACHE_REQUEST;
    struct KERB_QUERY_BINDING_CACHE_REQUEST;
    struct KERB_QUERY_BINDING_CACHE_RESPONSE;
    struct KERB_QUERY_DOMAIN_EXTENDED_POLICIES_REQUEST;
    struct KERB_QUERY_DOMAIN_EXTENDED_POLICIES_RESPONSE;
    struct KERB_QUERY_KDC_PROXY_CACHE_REQUEST;
    struct KERB_QUERY_KDC_PROXY_CACHE_RESPONSE;
    struct KERB_QUERY_S4U2PROXY_CACHE_REQUEST;
    struct KERB_QUERY_S4U2PROXY_CACHE_RESPONSE;
    struct KERB_QUERY_TKT_CACHE_EX2_RESPONSE;
    struct KERB_QUERY_TKT_CACHE_EX3_RESPONSE;
    struct KERB_QUERY_TKT_CACHE_EX_RESPONSE;
    struct KERB_QUERY_TKT_CACHE_REQUEST;
    struct KERB_QUERY_TKT_CACHE_RESPONSE;
    struct KERB_REFRESH_SCCRED_REQUEST;
    struct KERB_RETRIEVE_KEY_TAB_REQUEST;
    struct KERB_RETRIEVE_KEY_TAB_RESPONSE;
    struct KERB_RETRIEVE_TKT_REQUEST;
    struct KERB_RETRIEVE_TKT_RESPONSE;
    struct KERB_S4U2PROXY_CACHE_ENTRY_INFO;
    struct KERB_S4U2PROXY_CRED;
    struct KERB_S4U_LOGON;
    struct KERB_SETPASSWORD_EX_REQUEST;
    struct KERB_SETPASSWORD_REQUEST;
    struct KERB_SMART_CARD_LOGON;
    struct KERB_SMART_CARD_PROFILE;
    struct KERB_SMART_CARD_UNLOCK_LOGON;
    struct KERB_SUBMIT_TKT_REQUEST;
    struct KERB_TICKET_CACHE_INFO;
    struct KERB_TICKET_CACHE_INFO_EX;
    struct KERB_TICKET_CACHE_INFO_EX2;
    struct KERB_TICKET_CACHE_INFO_EX3;
    struct KERB_TICKET_LOGON;
    struct KERB_TICKET_PROFILE;
    struct KERB_TICKET_UNLOCK_LOGON;
    struct KERB_TRANSFER_CRED_REQUEST;
    struct KEY_TYPE_SUBTYPE;
    struct KSEC_LIST_ENTRY;
    struct KeyCredentialManagerInfo;
    struct LLFILETIME;
    struct LOGON_HOURS;
    struct LSA_AUTH_INFORMATION;
    struct LSA_DISPATCH_TABLE;
    struct LSA_ENUMERATION_INFORMATION;
    struct LSA_FOREST_TRUST_BINARY_DATA;
    struct LSA_FOREST_TRUST_COLLISION_INFORMATION;
    struct LSA_FOREST_TRUST_COLLISION_RECORD;
    struct LSA_FOREST_TRUST_DOMAIN_INFO;
    struct LSA_FOREST_TRUST_INFORMATION;
    struct LSA_FOREST_TRUST_RECORD;
    struct LSA_LAST_INTER_LOGON_INFO;
    struct LSA_REFERENCED_DOMAIN_LIST;
    struct LSA_SECPKG_FUNCTION_TABLE;
    struct LSA_TOKEN_INFORMATION_NULL;
    struct LSA_TOKEN_INFORMATION_V1;
    struct LSA_TOKEN_INFORMATION_V3;
    struct LSA_TRANSLATED_NAME;
    struct LSA_TRANSLATED_SID;
    struct LSA_TRANSLATED_SID2;
    struct LSA_TRUST_INFORMATION;
    struct LUID_AND_ATTRIBUTES;
    struct LsaHandle;
    struct MSA_INFO_0;
    struct MSV1_0_AV_PAIR;
    struct MSV1_0_CHANGEPASSWORD_REQUEST;
    struct MSV1_0_CHANGEPASSWORD_RESPONSE;
    struct MSV1_0_CREDENTIAL_KEY;
    struct MSV1_0_INTERACTIVE_LOGON;
    struct MSV1_0_INTERACTIVE_PROFILE;
    struct MSV1_0_IUM_SUPPLEMENTAL_CREDENTIAL;
    struct MSV1_0_LM20_LOGON;
    struct MSV1_0_LM20_LOGON_PROFILE;
    struct MSV1_0_NTLM3_RESPONSE;
    struct MSV1_0_PASSTHROUGH_REQUEST;
    struct MSV1_0_PASSTHROUGH_RESPONSE;
    struct MSV1_0_REMOTE_SUPPLEMENTAL_CREDENTIAL;
    struct MSV1_0_S4U_LOGON;
    struct MSV1_0_SUBAUTH_LOGON;
    struct MSV1_0_SUBAUTH_REQUEST;
    struct MSV1_0_SUBAUTH_RESPONSE;
    struct MSV1_0_SUPPLEMENTAL_CREDENTIAL;
    struct MSV1_0_SUPPLEMENTAL_CREDENTIAL_V2;
    struct MSV1_0_SUPPLEMENTAL_CREDENTIAL_V3;
    struct MSV1_0_VALIDATION_INFO;
    struct MS_ADDINFO_BLOB;
    struct MS_ADDINFO_CATALOGMEMBER;
    struct MS_ADDINFO_FLAT;
    struct NCRYPT_ALLOC_PARA;
    struct NCRYPT_CIPHER_PADDING_INFO;
    struct NCRYPT_DESCRIPTOR_HANDLE__;
    struct NCRYPT_EXPORTED_ISOLATED_KEY_ENVELOPE;
    struct NCRYPT_EXPORTED_ISOLATED_KEY_HEADER;
    struct NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES;
    struct NCRYPT_KEY_ATTEST_PADDING_INFO;
    struct NCRYPT_KEY_BLOB_HEADER;
    struct NCRYPT_PLATFORM_ATTEST_PADDING_INFO;
    struct NCRYPT_PROTECT_STREAM_INFO;
    struct NCRYPT_PROTECT_STREAM_INFO_EX;
    struct NCRYPT_STREAM_HANDLE__;
    struct NCRYPT_SUPPORTED_LENGTHS;
    struct NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER;
    struct NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT;
    struct NCRYPT_UI_POLICY;
    struct NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS;
    struct NCRYPT_VSM_KEY_ATTESTATION_STATEMENT;
    struct NCryptAlgorithmName;
    struct NCryptKeyName;
    struct NCryptProviderName;
    struct NEGOTIATE_CALLER_NAME_REQUEST;
    struct NEGOTIATE_CALLER_NAME_RESPONSE;
    struct NEGOTIATE_PACKAGE_PREFIX;
    struct NEGOTIATE_PACKAGE_PREFIXES;
    struct NETCONNECTINFOSTRUCT;
    struct NETLOGON_GENERIC_INFO;
    struct NETLOGON_INTERACTIVE_INFO;
    struct NETLOGON_LOGON_IDENTITY_INFO;
    struct NETLOGON_NETWORK_INFO;
    struct NETLOGON_SERVICE_INFO;
    struct NETRESOURCEA;
    struct NETRESOURCEW;
    struct NOTIFYADD;
    struct NOTIFYCANCEL;
    struct NOTIFYINFO;
    struct OBJECTS_AND_NAME_A;
    struct OBJECTS_AND_NAME_W;
    struct OBJECTS_AND_SID;
    struct OBJECT_TYPE_LIST;
    struct OCSP_BASIC_RESPONSE_ENTRY;
    struct OCSP_BASIC_RESPONSE_INFO;
    struct OCSP_BASIC_REVOKED_INFO;
    struct OCSP_BASIC_SIGNED_RESPONSE_INFO;
    struct OCSP_CERT_ID;
    struct OCSP_REQUEST_ENTRY;
    struct OCSP_REQUEST_INFO;
    struct OCSP_RESPONSE_INFO;
    struct OCSP_SIGNATURE_INFO;
    struct OCSP_SIGNED_REQUEST_INFO;
    struct OLD_LARGE_INTEGER;
    struct OPENCARDNAMEA;
    struct OPENCARDNAMEW;
    struct OPENCARDNAME_EXA;
    struct OPENCARDNAME_EXW;
    struct OPENCARD_SEARCH_CRITERIAA;
    struct OPENCARD_SEARCH_CRITERIAW;
    struct PKCS12_PBES2_EXPORT_PARAMS;
    struct PKU2U_CERTIFICATE_S4U_LOGON;
    struct PKU2U_CERT_BLOB;
    struct PKU2U_CREDUI_CONTEXT;
    struct POLICY_ACCOUNT_DOMAIN_INFO;
    struct POLICY_AUDIT_CATEGORIES_INFO;
    struct POLICY_AUDIT_EVENTS_INFO;
    struct POLICY_AUDIT_FULL_QUERY_INFO;
    struct POLICY_AUDIT_FULL_SET_INFO;
    struct POLICY_AUDIT_LOG_INFO;
    struct POLICY_AUDIT_SID_ARRAY;
    struct POLICY_AUDIT_SUBCATEGORIES_INFO;
    struct POLICY_DEFAULT_QUOTA_INFO;
    struct POLICY_DNS_DOMAIN_INFO;
    struct POLICY_DOMAIN_EFS_INFO;
    struct POLICY_DOMAIN_KERBEROS_TICKET_INFO;
    struct POLICY_LSA_SERVER_ROLE_INFO;
    struct POLICY_MACHINE_ACCT_INFO;
    struct POLICY_MODIFICATION_INFO;
    struct POLICY_PD_ACCOUNT_INFO;
    struct POLICY_PRIMARY_DOMAIN_INFO;
    struct POLICY_REPLICA_SOURCE_INFO;
    struct PRIVILEGE_SET;
    struct PRIVKEYVER3;
    struct PROVDATA_SIP;
    struct PROV_ENUMALGS;
    struct PROV_ENUMALGS_EX;
    struct PUBKEY;
    struct PUBKEYVER3;
    struct PUBLICKEYSTRUC;
    struct PctPublicKey;
    struct QUERY_SERVICE_CONFIGA;
    struct QUERY_SERVICE_CONFIGW;
    struct QUERY_SERVICE_LOCK_STATUSA;
    struct QUERY_SERVICE_LOCK_STATUSW;
    struct QUOTA_LIMITS;
    struct READER_SEL_REQUEST;
    struct READER_SEL_RESPONSE;
    struct REMOTE_NAME_INFOA;
    struct REMOTE_NAME_INFOW;
    struct ROOT_INFO_LUID;
    struct RSAPUBKEY;
    struct SAFER_CODE_PROPERTIES_V1;
    struct SAFER_CODE_PROPERTIES_V2;
    struct SAFER_HASH_IDENTIFICATION;
    struct SAFER_HASH_IDENTIFICATION2;
    struct SAFER_IDENTIFICATION_HEADER;
    struct SAFER_LEVEL_HANDLE__;
    struct SAFER_PATHNAME_IDENTIFICATION;
    struct SAFER_URLZONE_IDENTIFICATION;
    struct SAM_REGISTER_MAPPING_ELEMENT;
    struct SAM_REGISTER_MAPPING_LIST;
    struct SAM_REGISTER_MAPPING_TABLE;
    struct SCARD_ATRMASK;
    struct SCARD_READERSTATEA;
    struct SCARD_READERSTATEW;
    struct SCESVC_ANALYSIS_INFO;
    struct SCESVC_ANALYSIS_LINE;
    struct SCESVC_CALLBACK_INFO;
    struct SCESVC_CONFIGURATION_INFO;
    struct SCESVC_CONFIGURATION_LINE;
    struct SCHANNEL_ALERT_TOKEN;
    struct SCHANNEL_ALG;
    struct SCHANNEL_CERT_HASH;
    struct SCHANNEL_CERT_HASH_STORE;
    struct SCHANNEL_CLIENT_SIGNATURE;
    struct SCHANNEL_CRED;
    struct SCHANNEL_SESSION_TOKEN;
    struct SCH_CRED;
    struct SCH_CRED_PUBLIC_CERTCHAIN;
    struct SCH_CRED_SECRET_CAPI;
    struct SCH_CRED_SECRET_PRIVKEY;
    struct SCH_EXTENSION_DATA;
    struct SC_ACTION;
    struct SC_HANDLE__;
    struct SEALING_SIGNATURE_ATTRIBUTE;
    struct SEALING_TIMESTAMP_ATTRIBUTE;
    struct SECPKG_APP_MODE_INFO;
    struct SECPKG_BYTE_VECTOR;
    struct SECPKG_CALL_INFO;
    struct SECPKG_CALL_PACKAGE_PIN_DC_REQUEST;
    struct SECPKG_CALL_PACKAGE_TRANSFER_CRED_REQUEST;
    struct SECPKG_CALL_PACKAGE_UNPIN_ALL_DCS_REQUEST;
    struct SECPKG_CLIENT_INFO;
    struct SECPKG_CONTEXT_THUNKS;
    struct SECPKG_CREDENTIAL;
    struct SECPKG_DLL_FUNCTIONS;
    struct SECPKG_EVENT_NOTIFY;
    struct SECPKG_EVENT_PACKAGE_CHANGE;
    struct SECPKG_EVENT_ROLE_CHANGE;
    struct SECPKG_EXTENDED_INFORMATION;
    struct SECPKG_EXTRA_OIDS;
    struct SECPKG_FUNCTION_TABLE;
    struct SECPKG_GSS_INFO;
    struct SECPKG_KERNEL_FUNCTIONS;
    struct SECPKG_KERNEL_FUNCTION_TABLE;
    struct SECPKG_MUTUAL_AUTH_LEVEL;
    struct SECPKG_NEGO2_INFO;
    struct SECPKG_PARAMETERS;
    struct SECPKG_POST_LOGON_USER_INFO;
    struct SECPKG_PRIMARY_CRED;
    struct SECPKG_PRIMARY_CRED_EX;
    struct SECPKG_REDIRECTED_LOGON_BUFFER;
    struct SECPKG_SERIALIZED_OID;
    struct SECPKG_SHORT_VECTOR;
    struct SECPKG_SUPPLEMENTAL_CRED;
    struct SECPKG_SUPPLEMENTAL_CRED_ARRAY;
    struct SECPKG_SUPPLIED_CREDENTIAL;
    struct SECPKG_SURROGATE_LOGON;
    struct SECPKG_SURROGATE_LOGON_ENTRY;
    struct SECPKG_TARGETINFO;
    struct SECPKG_USER_FUNCTION_TABLE;
    struct SECPKG_WOW_CLIENT_DLL;
    struct SECURITY_CAPABILITIES;
    struct SECURITY_DESCRIPTOR;
    struct SECURITY_LOGON_SESSION_DATA;
    struct SECURITY_OBJECT;
    struct SECURITY_PACKAGE_OPTIONS;
    struct SECURITY_QUALITY_OF_SERVICE;
    struct SECURITY_USER_DATA;
    struct SEC_APPLICATION_PROTOCOLS;
    struct SEC_APPLICATION_PROTOCOL_LIST;
    struct SEC_CHANNEL_BINDINGS;
    struct SEC_DTLS_MTU;
    struct SEC_FLAGS;
    struct SEC_NEGOTIATION_INFO;
    struct SEC_PRESHAREDKEY;
    struct SEC_PRESHAREDKEY_IDENTITY;
    struct SEC_SRTP_MASTER_KEY_IDENTIFIER;
    struct SEC_SRTP_PROTECTION_PROFILES;
    struct SEC_TOKEN_BINDING;
    struct SEC_TRAFFIC_SECRETS;
    struct SEC_WINNT_AUTH_IDENTITY32;
    struct SEC_WINNT_AUTH_IDENTITY_A;
    struct SEC_WINNT_AUTH_IDENTITY_EX2;
    struct SEC_WINNT_AUTH_IDENTITY_EX32;
    struct SEC_WINNT_AUTH_IDENTITY_EXA;
    struct SEC_WINNT_AUTH_IDENTITY_EXW;
    union SEC_WINNT_AUTH_IDENTITY_INFO;
    struct SEC_WINNT_AUTH_IDENTITY_W;
    struct SEND_GENERIC_TLS_EXTENSION;
    struct SERVICE_CONTROL_STATUS_REASON_PARAMSA;
    struct SERVICE_CONTROL_STATUS_REASON_PARAMSW;
    struct SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM;
    struct SERVICE_DELAYED_AUTO_START_INFO;
    struct SERVICE_DESCRIPTIONA;
    struct SERVICE_DESCRIPTIONW;
    struct SERVICE_FAILURE_ACTIONSA;
    struct SERVICE_FAILURE_ACTIONSW;
    struct SERVICE_FAILURE_ACTIONS_FLAG;
    struct SERVICE_LAUNCH_PROTECTED_INFO;
    struct SERVICE_NOTIFY_1;
    struct SERVICE_NOTIFY_2A;
    struct SERVICE_NOTIFY_2W;
    struct SERVICE_PREFERRED_NODE_INFO;
    struct SERVICE_PRESHUTDOWN_INFO;
    struct SERVICE_REQUIRED_PRIVILEGES_INFOA;
    struct SERVICE_REQUIRED_PRIVILEGES_INFOW;
    struct SERVICE_SID_INFO;
    struct SERVICE_START_REASON;
    struct SERVICE_STATUS;
    struct SERVICE_STATUS_HANDLE__;
    struct SERVICE_STATUS_PROCESS;
    struct SERVICE_TABLE_ENTRYA;
    struct SERVICE_TABLE_ENTRYW;
    struct SERVICE_TIMECHANGE_INFO;
    struct SERVICE_TRIGGER;
    struct SERVICE_TRIGGER_CUSTOM_STATE_ID;
    struct SERVICE_TRIGGER_INFO;
    struct SERVICE_TRIGGER_SPECIFIC_DATA_ITEM;
    struct SE_ADT_ACCESS_REASON;
    struct SE_ADT_CLAIMS;
    struct SE_ADT_OBJECT_TYPE;
    struct SE_ADT_PARAMETER_ARRAY;
    struct SE_ADT_PARAMETER_ARRAY_ENTRY;
    struct SE_ADT_PARAMETER_ARRAY_EX;
    struct SID;
    struct SID_AND_ATTRIBUTES;
    struct SID_AND_ATTRIBUTES_HASH;
    struct SID_IDENTIFIER_AUTHORITY;
    struct SID_INFO;
    struct SID_INFO_LIST;
    struct SIP_ADD_NEWPROVIDER;
    struct SIP_CAP_SET_V2;
    struct SIP_CAP_SET_V3;
    struct SIP_DISPATCH_INFO;
    struct SIP_INDIRECT_DATA;
    struct SIP_SUBJECTINFO;
    struct SI_ACCESS;
    struct SI_INHERIT_TYPE;
    struct SI_OBJECT_INFO;
    struct SL_ACTIVATION_INFO_HEADER;
    struct SL_AD_ACTIVATION_INFO;
    struct SL_LICENSING_STATUS;
    struct SL_NONGENUINE_UI_OPTIONS;
    struct SL_SYSTEM_POLICY_INFORMATION;
    struct SPC_FINANCIAL_CRITERIA;
    struct SPC_IMAGE;
    struct SPC_INDIRECT_DATA_CONTENT;
    struct SPC_LINK;
    struct SPC_PE_IMAGE_DATA;
    struct SPC_SERIALIZED_OBJECT;
    struct SPC_SIGINFO;
    struct SPC_SP_AGENCY_INFO;
    struct SPC_SP_OPUS_INFO;
    struct SPC_STATEMENT_TYPE;
    struct SR_SECURITY_DESCRIPTOR;
    struct SSL_CREDENTIAL_CERTIFICATE;
    struct SSL_ECCKEY_BLOB;
    struct SSL_F12_EXTRA_CERT_CHAIN_POLICY_STATUS;
    struct SSL_HPKP_HEADER_EXTRA_CERT_CHAIN_POLICY_PARA;
    struct SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_PARA;
    struct SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_STATUS;
    struct SUBSCRIBE_GENERIC_TLS_EXTENSION;
    struct SYSTEM_ALARM_ACE;
    struct SYSTEM_ALARM_CALLBACK_ACE;
    struct SYSTEM_ALARM_CALLBACK_OBJECT_ACE;
    struct SYSTEM_ALARM_OBJECT_ACE;
    struct SYSTEM_AUDIT_ACE;
    struct SYSTEM_AUDIT_CALLBACK_ACE;
    struct SYSTEM_AUDIT_CALLBACK_OBJECT_ACE;
    struct SYSTEM_AUDIT_OBJECT_ACE;
    struct SYSTEM_MANDATORY_LABEL_ACE;
    struct SYSTEM_RESOURCE_ATTRIBUTE_ACE;
    struct SYSTEM_SCOPED_POLICY_ID_ACE;
    struct SecBuffer;
    struct SecBufferDesc;
    struct SecHandle;
    struct SecPkgContext_AccessToken;
    struct SecPkgContext_ApplicationProtocol;
    struct SecPkgContext_AuthorityA;
    struct SecPkgContext_AuthorityW;
    struct SecPkgContext_AuthzID;
    struct SecPkgContext_Bindings;
    struct SecPkgContext_CertInfo;
    struct SecPkgContext_Certificates;
    struct SecPkgContext_CipherInfo;
    struct SecPkgContext_ClientCertPolicyResult;
    struct SecPkgContext_ClientSpecifiedTarget;
    struct SecPkgContext_ConnectionInfo;
    struct SecPkgContext_ConnectionInfoEx;
    struct SecPkgContext_CredInfo;
    struct SecPkgContext_CredentialNameA;
    struct SecPkgContext_CredentialNameW;
    struct SecPkgContext_DceInfo;
    struct SecPkgContext_EapKeyBlock;
    struct SecPkgContext_EapPrfInfo;
    struct SecPkgContext_EarlyStart;
    struct SecPkgContext_Flags;
    struct SecPkgContext_IssuerListInfoEx;
    struct SecPkgContext_KeyInfoA;
    struct SecPkgContext_KeyInfoW;
    struct SecPkgContext_KeyingMaterial;
    struct SecPkgContext_KeyingMaterialInfo;
    struct SecPkgContext_KeyingMaterial_Inproc;
    struct SecPkgContext_LastClientTokenStatus;
    struct SecPkgContext_Lifespan;
    struct SecPkgContext_LocalCredentialInfo;
    struct SecPkgContext_LogoffTime;
    struct SecPkgContext_MappedCredAttr;
    struct SecPkgContext_NamesA;
    struct SecPkgContext_NamesW;
    struct SecPkgContext_NativeNamesA;
    struct SecPkgContext_NativeNamesW;
    struct SecPkgContext_NegoKeys;
    struct SecPkgContext_NegoPackageInfo;
    struct SecPkgContext_NegoStatus;
    struct SecPkgContext_NegotiatedTlsExtensions;
    struct SecPkgContext_NegotiationInfoA;
    struct SecPkgContext_NegotiationInfoW;
    struct SecPkgContext_PackageInfoA;
    struct SecPkgContext_PackageInfoW;
    struct SecPkgContext_PasswordExpiry;
    struct SecPkgContext_ProtoInfoA;
    struct SecPkgContext_ProtoInfoW;
    struct SecPkgContext_RemoteCredentialInfo;
    struct SecPkgContext_SaslContext;
    struct SecPkgContext_SessionAppData;
    struct SecPkgContext_SessionInfo;
    struct SecPkgContext_SessionKey;
    struct SecPkgContext_Sizes;
    struct SecPkgContext_SrtpParameters;
    struct SecPkgContext_StreamSizes;
    struct SecPkgContext_SubjectAttributes;
    struct SecPkgContext_SupportedSignatures;
    struct SecPkgContext_Target;
    struct SecPkgContext_TargetInformation;
    struct SecPkgContext_TokenBinding;
    struct SecPkgContext_UiInfo;
    struct SecPkgContext_UserFlags;
    struct SecPkgCred_CipherStrengths;
    struct SecPkgCred_ClientCertPolicy;
    struct SecPkgCred_SupportedAlgs;
    struct SecPkgCred_SupportedProtocols;
    struct SecPkgCredentials_Cert;
    struct SecPkgCredentials_KdcProxySettingsW;
    struct SecPkgCredentials_NamesA;
    struct SecPkgCredentials_NamesW;
    struct SecPkgCredentials_SSIProviderA;
    struct SecPkgCredentials_SSIProviderW;
    struct SecPkgInfoA;
    struct SecPkgInfoW;
    struct SecurityFunctionTableA;
    struct SecurityFunctionTableW;
    struct TLS_EXTENSION_SUBSCRIPTION;
    struct TOKENBINDING_IDENTIFIER;
    struct TOKENBINDING_KEY_TYPES;
    struct TOKENBINDING_RESULT_DATA;
    struct TOKENBINDING_RESULT_LIST;
    struct TOKEN_ACCESS_INFORMATION;
    struct TOKEN_APPCONTAINER_INFORMATION;
    struct TOKEN_AUDIT_POLICY;
    struct TOKEN_CONTROL;
    struct TOKEN_DEFAULT_DACL;
    struct TOKEN_DEVICE_CLAIMS;
    struct TOKEN_ELEVATION;
    struct TOKEN_GROUPS;
    struct TOKEN_GROUPS_AND_PRIVILEGES;
    struct TOKEN_LINKED_TOKEN;
    struct TOKEN_MANDATORY_LABEL;
    struct TOKEN_MANDATORY_POLICY;
    struct TOKEN_ORIGIN;
    struct TOKEN_OWNER;
    struct TOKEN_PRIMARY_GROUP;
    struct TOKEN_PRIVILEGES;
    struct TOKEN_SOURCE;
    struct TOKEN_STATISTICS;
    struct TOKEN_USER;
    struct TOKEN_USER_CLAIMS;
    struct TRUSTED_CONTROLLERS_INFO;
    struct TRUSTED_DOMAIN_AUTH_INFORMATION;
    struct TRUSTED_DOMAIN_FULL_INFORMATION;
    struct TRUSTED_DOMAIN_FULL_INFORMATION2;
    struct TRUSTED_DOMAIN_INFORMATION_EX;
    struct TRUSTED_DOMAIN_INFORMATION_EX2;
    struct TRUSTED_DOMAIN_NAME_INFO;
    struct TRUSTED_DOMAIN_SUPPORTED_ENCRYPTION_TYPES;
    struct TRUSTED_PASSWORD_INFO;
    struct TRUSTED_POSIX_OFFSET_INFO;
    struct TRUSTEE_A;
    struct TRUSTEE_ACCESSA;
    struct TRUSTEE_ACCESSW;
    struct TRUSTEE_W;
    struct UNICODE_STRING;
    struct UNIVERSAL_NAME_INFOA;
    struct UNIVERSAL_NAME_INFOW;
    struct USERNAME_TARGET_CREDENTIAL_INFO;
    struct USER_ALL_INFORMATION;
    struct USER_SESSION_KEY;
    struct WINTRUST_BLOB_INFO;
    struct WINTRUST_CATALOG_INFO;
    struct WINTRUST_CERT_INFO;
    struct WINTRUST_DATA;
    struct WINTRUST_FILE_INFO;
    struct WINTRUST_SGNR_INFO;
    struct WINTRUST_SIGNATURE_SETTINGS;
    struct WIN_CERTIFICATE;
    struct WIN_SPUB_TRUSTED_PUBLISHER_DATA;
    struct WIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT;
    struct WIN_TRUST_ACTDATA_SUBJECT_ONLY;
    struct WIN_TRUST_SUBJECT_FILE;
    struct WIN_TRUST_SUBJECT_FILE_AND_DISPLAY;
    struct WLX_CLIENT_CREDENTIALS_INFO_V1_0;
    struct WLX_CLIENT_CREDENTIALS_INFO_V2_0;
    struct WLX_CONSOLESWITCH_CREDENTIALS_INFO_V1_0;
    struct WLX_DESKTOP;
    struct WLX_DISPATCH_VERSION_1_0;
    struct WLX_DISPATCH_VERSION_1_1;
    struct WLX_DISPATCH_VERSION_1_2;
    struct WLX_DISPATCH_VERSION_1_3;
    struct WLX_DISPATCH_VERSION_1_4;
    struct WLX_MPR_NOTIFY_INFO;
    struct WLX_NOTIFICATION_INFO;
    struct WLX_PROFILE_V1_0;
    struct WLX_PROFILE_V2_0;
    struct WLX_SC_NOTIFICATION_INFO;
    struct WLX_TERMINAL_SERVICES_DATA;
    struct X509Certificate;
    struct _FN_OBJECT_MGR_FUNCTIONS;
    struct _HMAPPER;
    struct _SC_NOTIFICATION_REGISTRATION;
    struct __NCRYPT_KEY_ACCESS_POLICY_BLOB;
    struct __NCRYPT_PCP_HMAC_AUTH_SIGNATURE_INFO;
    struct __NCRYPT_PCP_RAW_POLICYDIGEST;
    struct __NCRYPT_PCP_TPM_FW_VERSION_INFO;
    struct __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT;
    struct tagCMFLTR;
    struct tagCMOID;
    struct AsyncIAssociatedIdentityProvider;
    struct AsyncIConnectedIdentityProvider;
    struct AsyncIIdentityAdvise;
    struct AsyncIIdentityAuthentication;
    struct AsyncIIdentityProvider;
    struct AsyncIIdentityStore;
    struct AsyncIIdentityStoreEx;
    struct AzAuthorizationStore;
    struct AzBizRuleContext;
    struct AzPrincipalLocator;
    struct CAlternativeName;
    struct CAlternativeNames;
    struct CBinaryConverter;
    struct CCertAdmin;
    struct CCertConfig;
    struct CCertEncodeAltName;
    struct CCertEncodeBitString;
    struct CCertEncodeCRLDistInfo;
    struct CCertEncodeDateArray;
    struct CCertEncodeLongArray;
    struct CCertEncodeStringArray;
    struct CCertGetConfig;
    struct CCertProperties;
    struct CCertProperty;
    struct CCertPropertyArchived;
    struct CCertPropertyArchivedKeyHash;
    struct CCertPropertyAutoEnroll;
    struct CCertPropertyBackedUp;
    struct CCertPropertyDescription;
    struct CCertPropertyEnrollment;
    struct CCertPropertyEnrollmentPolicyServer;
    struct CCertPropertyFriendlyName;
    struct CCertPropertyKeyProvInfo;
    struct CCertPropertyRenewal;
    struct CCertPropertyRequestOriginator;
    struct CCertPropertySHA1Hash;
    struct CCertRequest;
    struct CCertServerExit;
    struct CCertServerPolicy;
    struct CCertSrvSetup;
    struct CCertSrvSetupKeyInformation;
    struct CCertView;
    struct CCertificateAttestationChallenge;
    struct CCertificateEnrollmentPolicyServerSetup;
    struct CCertificateEnrollmentServerSetup;
    struct CCertificatePolicies;
    struct CCertificatePolicy;
    struct CCryptAttribute;
    struct CCryptAttributes;
    struct CCspInformation;
    struct CCspInformations;
    struct CCspStatus;
    struct CEnroll;
    struct CEnroll2;
    struct CIdentityProfileHandler;
    struct CMSCEPSetup;
    struct CObjectId;
    struct CObjectIds;
    struct CPolicyQualifier;
    struct CPolicyQualifiers;
    struct CSignerCertificate;
    struct CSmimeCapabilities;
    struct CSmimeCapability;
    struct CX500DistinguishedName;
    struct CX509Attribute;
    struct CX509AttributeArchiveKey;
    struct CX509AttributeArchiveKeyHash;
    struct CX509AttributeClientId;
    struct CX509AttributeCspProvider;
    struct CX509AttributeExtensions;
    struct CX509AttributeOSVersion;
    struct CX509AttributeRenewalCertificate;
    struct CX509Attributes;
    struct CX509CertificateRequestCertificate;
    struct CX509CertificateRequestCmc;
    struct CX509CertificateRequestPkcs10;
    struct CX509CertificateRequestPkcs7;
    struct CX509CertificateRevocationList;
    struct CX509CertificateRevocationListEntries;
    struct CX509CertificateRevocationListEntry;
    struct CX509CertificateTemplateADWritable;
    struct CX509EndorsementKey;
    struct CX509Enrollment;
    struct CX509EnrollmentHelper;
    struct CX509EnrollmentPolicyActiveDirectory;
    struct CX509EnrollmentPolicyWebService;
    struct CX509EnrollmentWebClassFactory;
    struct CX509Extension;
    struct CX509ExtensionAlternativeNames;
    struct CX509ExtensionAuthorityKeyIdentifier;
    struct CX509ExtensionBasicConstraints;
    struct CX509ExtensionCertificatePolicies;
    struct CX509ExtensionEnhancedKeyUsage;
    struct CX509ExtensionKeyUsage;
    struct CX509ExtensionMSApplicationPolicies;
    struct CX509ExtensionSmimeCapabilities;
    struct CX509ExtensionSubjectKeyIdentifier;
    struct CX509ExtensionTemplate;
    struct CX509ExtensionTemplateName;
    struct CX509Extensions;
    struct CX509MachineEnrollmentFactory;
    struct CX509NameValuePair;
    struct CX509PolicyServerListManager;
    struct CX509PolicyServerUrl;
    struct CX509PrivateKey;
    struct CX509PublicKey;
    struct CX509SCEPEnrollment;
    struct CX509SCEPEnrollmentHelper;
    struct CoClassIdentityStore;
    struct IAlternativeName;
    struct IAlternativeNames;
    struct IAssociatedIdentityProvider;
    struct IAzApplication;
    struct IAzApplication2;
    struct IAzApplication3;
    struct IAzApplicationGroup;
    struct IAzApplicationGroup2;
    struct IAzApplicationGroups;
    struct IAzApplications;
    struct IAzAuthorizationStore;
    struct IAzAuthorizationStore2;
    struct IAzAuthorizationStore3;
    struct IAzBizRuleContext;
    struct IAzBizRuleInterfaces;
    struct IAzBizRuleParameters;
    struct IAzClientContext;
    struct IAzClientContext2;
    struct IAzClientContext3;
    struct IAzNameResolver;
    struct IAzObjectPicker;
    struct IAzOperation;
    struct IAzOperation2;
    struct IAzOperations;
    struct IAzPrincipalLocator;
    struct IAzRole;
    struct IAzRoleAssignment;
    struct IAzRoleAssignments;
    struct IAzRoleDefinition;
    struct IAzRoleDefinitions;
    struct IAzRoles;
    struct IAzScope;
    struct IAzScope2;
    struct IAzScopes;
    struct IAzTask;
    struct IAzTask2;
    struct IAzTasks;
    struct IBinaryConverter;
    struct IBinaryConverter2;
    struct ICEnroll;
    struct ICEnroll2;
    struct ICEnroll3;
    struct ICEnroll4;
    struct ICertAdmin;
    struct ICertAdmin2;
    struct ICertConfig;
    struct ICertConfig2;
    struct ICertEncodeAltName;
    struct ICertEncodeAltName2;
    struct ICertEncodeBitString;
    struct ICertEncodeBitString2;
    struct ICertEncodeCRLDistInfo;
    struct ICertEncodeCRLDistInfo2;
    struct ICertEncodeDateArray;
    struct ICertEncodeDateArray2;
    struct ICertEncodeLongArray;
    struct ICertEncodeLongArray2;
    struct ICertEncodeStringArray;
    struct ICertEncodeStringArray2;
    struct ICertExit;
    struct ICertExit2;
    struct ICertGetConfig;
    struct ICertManageModule;
    struct ICertPolicy;
    struct ICertPolicy2;
    struct ICertProperties;
    struct ICertProperty;
    struct ICertPropertyArchived;
    struct ICertPropertyArchivedKeyHash;
    struct ICertPropertyAutoEnroll;
    struct ICertPropertyBackedUp;
    struct ICertPropertyDescription;
    struct ICertPropertyEnrollment;
    struct ICertPropertyEnrollmentPolicyServer;
    struct ICertPropertyFriendlyName;
    struct ICertPropertyKeyProvInfo;
    struct ICertPropertyRenewal;
    struct ICertPropertyRequestOriginator;
    struct ICertPropertySHA1Hash;
    struct ICertRequest;
    struct ICertRequest2;
    struct ICertRequest3;
    struct ICertServerExit;
    struct ICertServerPolicy;
    struct ICertSrvSetup;
    struct ICertSrvSetupKeyInformation;
    struct ICertSrvSetupKeyInformationCollection;
    struct ICertView;
    struct ICertView2;
    struct ICertificateAttestationChallenge;
    struct ICertificateAttestationChallenge2;
    struct ICertificateEnrollmentPolicyServerSetup;
    struct ICertificateEnrollmentServerSetup;
    struct ICertificatePolicies;
    struct ICertificatePolicy;
    struct ICertificationAuthorities;
    struct ICertificationAuthority;
    struct IConnectedIdentityProvider;
    struct ICryptAttribute;
    struct ICryptAttributes;
    struct ICspAlgorithm;
    struct ICspAlgorithms;
    struct ICspInformation;
    struct ICspInformations;
    struct ICspStatus;
    struct ICspStatuses;
    struct IEffectivePermission;
    struct IEffectivePermission2;
    struct IEnroll;
    struct IEnroll2;
    struct IEnroll4;
    struct IEnumCERTVIEWATTRIBUTE;
    struct IEnumCERTVIEWCOLUMN;
    struct IEnumCERTVIEWEXTENSION;
    struct IEnumCERTVIEWROW;
    struct IIdentityAdvise;
    struct IIdentityAuthentication;
    struct IIdentityProvider;
    struct IIdentityStore;
    struct IIdentityStoreEx;
    struct IMSCEPSetup;
    struct INDESPolicy;
    struct IOCSPAdmin;
    struct IOCSPCAConfiguration;
    struct IOCSPCAConfigurationCollection;
    struct IOCSPProperty;
    struct IOCSPPropertyCollection;
    struct IObjectId;
    struct IObjectIds;
    struct IPolicyQualifier;
    struct IPolicyQualifiers;
    struct ISceSvcAttachmentData;
    struct ISceSvcAttachmentPersistInfo;
    struct ISecurityInformation;
    struct ISecurityInformation2;
    struct ISecurityInformation3;
    struct ISecurityInformation4;
    struct ISecurityObjectTypeInfo;
    struct ISignerCertificate;
    struct ISignerCertificates;
    struct ISmimeCapabilities;
    struct ISmimeCapability;
    struct ITpmVirtualSmartCardManager;
    struct ITpmVirtualSmartCardManager2;
    struct ITpmVirtualSmartCardManager3;
    struct ITpmVirtualSmartCardManagerStatusCallback;
    struct IX500DistinguishedName;
    struct IX509Attribute;
    struct IX509AttributeArchiveKey;
    struct IX509AttributeArchiveKeyHash;
    struct IX509AttributeClientId;
    struct IX509AttributeCspProvider;
    struct IX509AttributeExtensions;
    struct IX509AttributeOSVersion;
    struct IX509AttributeRenewalCertificate;
    struct IX509Attributes;
    struct IX509CertificateRequest;
    struct IX509CertificateRequestCertificate;
    struct IX509CertificateRequestCertificate2;
    struct IX509CertificateRequestCmc;
    struct IX509CertificateRequestCmc2;
    struct IX509CertificateRequestPkcs10;
    struct IX509CertificateRequestPkcs10V2;
    struct IX509CertificateRequestPkcs10V3;
    struct IX509CertificateRequestPkcs10V4;
    struct IX509CertificateRequestPkcs7;
    struct IX509CertificateRequestPkcs7V2;
    struct IX509CertificateRevocationList;
    struct IX509CertificateRevocationListEntries;
    struct IX509CertificateRevocationListEntry;
    struct IX509CertificateTemplate;
    struct IX509CertificateTemplateWritable;
    struct IX509CertificateTemplates;
    struct IX509EndorsementKey;
    struct IX509Enrollment;
    struct IX509Enrollment2;
    struct IX509EnrollmentHelper;
    struct IX509EnrollmentPolicyServer;
    struct IX509EnrollmentStatus;
    struct IX509EnrollmentWebClassFactory;
    struct IX509Extension;
    struct IX509ExtensionAlternativeNames;
    struct IX509ExtensionAuthorityKeyIdentifier;
    struct IX509ExtensionBasicConstraints;
    struct IX509ExtensionCertificatePolicies;
    struct IX509ExtensionEnhancedKeyUsage;
    struct IX509ExtensionKeyUsage;
    struct IX509ExtensionMSApplicationPolicies;
    struct IX509ExtensionSmimeCapabilities;
    struct IX509ExtensionSubjectKeyIdentifier;
    struct IX509ExtensionTemplate;
    struct IX509ExtensionTemplateName;
    struct IX509Extensions;
    struct IX509MachineEnrollmentFactory;
    struct IX509NameValuePair;
    struct IX509NameValuePairs;
    struct IX509PolicyServerListManager;
    struct IX509PolicyServerUrl;
    struct IX509PrivateKey;
    struct IX509PrivateKey2;
    struct IX509PublicKey;
    struct IX509SCEPEnrollment;
    struct IX509SCEPEnrollment2;
    struct IX509SCEPEnrollmentHelper;
    struct IX509SignatureInformation;
    struct OCSPAdmin;
    struct OCSPPropertyCollection;
    struct RemoteTpmVirtualSmartCardManager;
    struct TpmVirtualSmartCardManager;
#pragma endregion forward_declarations

#pragma region delegates
    using PFN_NCRYPT_ALLOC = void* __stdcall(size_t);
    using PFN_NCRYPT_FREE = void __stdcall(void*);
    using PCRYPT_DECRYPT_PRIVATE_KEY_FUNC = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER, Windows::Win32::Security::CRYPTOAPI_BLOB, uint8_t*, uint32_t*, void*);
    using PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER*, Windows::Win32::Security::CRYPTOAPI_BLOB*, uint8_t*, uint32_t*, void*);
    using PCRYPT_RESOLVE_HCRYPTPROV_FUNC = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::Security::CRYPT_PRIVATE_KEY_INFO*, size_t*, void*);
    using PFN_CRYPT_ALLOC = void* __stdcall(size_t);
    using PFN_CRYPT_FREE = void __stdcall(void*);
    using PFN_CRYPT_ENUM_OID_FUNC = Windows::Win32::SystemServices::BOOL __stdcall(uint32_t, int8_t*, int8_t*, uint32_t, uint32_t*, uint16_t**, uint8_t**, uint32_t*, void*);
    using PFN_CRYPT_ENUM_OID_INFO = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::Security::CRYPT_OID_INFO*, void*);
    using PFN_CMSG_STREAM_OUTPUT = Windows::Win32::SystemServices::BOOL __stdcall(void*, uint8_t*, uint32_t, Windows::Win32::SystemServices::BOOL);
    using PFN_CMSG_ALLOC = void* __stdcall(size_t);
    using PFN_CMSG_FREE = void __stdcall(void*);
    using PFN_CMSG_GEN_ENCRYPT_KEY = Windows::Win32::SystemServices::BOOL __stdcall(size_t*, Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER*, void*, Windows::Win32::Security::CERT_PUBLIC_KEY_INFO*, Windows::Win32::Security::PFN_CMSG_ALLOC*, size_t*, uint8_t**, uint32_t*);
    using PFN_CMSG_EXPORT_ENCRYPT_KEY = Windows::Win32::SystemServices::BOOL __stdcall(size_t, size_t, Windows::Win32::Security::CERT_PUBLIC_KEY_INFO*, uint8_t*, uint32_t*);
    using PFN_CMSG_IMPORT_ENCRYPT_KEY = Windows::Win32::SystemServices::BOOL __stdcall(size_t, uint32_t, Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER*, Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER*, uint8_t*, uint32_t, size_t*);
    using PFN_CMSG_GEN_CONTENT_ENCRYPT_KEY = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::Security::CMSG_CONTENT_ENCRYPT_INFO*, uint32_t, void*);
    using PFN_CMSG_EXPORT_KEY_TRANS = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::Security::CMSG_CONTENT_ENCRYPT_INFO*, Windows::Win32::Security::CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO*, Windows::Win32::Security::CMSG_KEY_TRANS_ENCRYPT_INFO*, uint32_t, void*);
    using PFN_CMSG_EXPORT_KEY_AGREE = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::Security::CMSG_CONTENT_ENCRYPT_INFO*, Windows::Win32::Security::CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO*, Windows::Win32::Security::CMSG_KEY_AGREE_ENCRYPT_INFO*, uint32_t, void*);
    using PFN_CMSG_EXPORT_MAIL_LIST = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::Security::CMSG_CONTENT_ENCRYPT_INFO*, Windows::Win32::Security::CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO*, Windows::Win32::Security::CMSG_MAIL_LIST_ENCRYPT_INFO*, uint32_t, void*);
    using PFN_CMSG_IMPORT_KEY_TRANS = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER*, Windows::Win32::Security::CMSG_CTRL_KEY_TRANS_DECRYPT_PARA*, uint32_t, void*, size_t*);
    using PFN_CMSG_IMPORT_KEY_AGREE = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER*, Windows::Win32::Security::CMSG_CTRL_KEY_AGREE_DECRYPT_PARA*, uint32_t, void*, size_t*);
    using PFN_CMSG_IMPORT_MAIL_LIST = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER*, Windows::Win32::Security::CMSG_CTRL_MAIL_LIST_DECRYPT_PARA*, uint32_t, void*, size_t*);
    using PFN_CMSG_CNG_IMPORT_KEY_TRANS = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::Security::CMSG_CNG_CONTENT_DECRYPT_INFO*, Windows::Win32::Security::CMSG_CTRL_KEY_TRANS_DECRYPT_PARA*, uint32_t, void*);
    using PFN_CMSG_CNG_IMPORT_KEY_AGREE = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::Security::CMSG_CNG_CONTENT_DECRYPT_INFO*, Windows::Win32::Security::CMSG_CTRL_KEY_AGREE_DECRYPT_PARA*, uint32_t, void*);
    using PFN_CMSG_CNG_IMPORT_CONTENT_ENCRYPT_KEY = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::Security::CMSG_CNG_CONTENT_DECRYPT_INFO*, uint32_t, void*);
    using PFN_CERT_DLL_OPEN_STORE_PROV_FUNC = Windows::Win32::SystemServices::BOOL __stdcall(int8_t*, uint32_t, size_t, uint32_t, void*, void*, Windows::Win32::Security::CERT_STORE_PROV_INFO*);
    using PFN_CERT_STORE_PROV_CLOSE = void __stdcall(void*, uint32_t);
    using PFN_CERT_STORE_PROV_READ_CERT = Windows::Win32::SystemServices::BOOL __stdcall(void*, Windows::Win32::Security::CERT_CONTEXT*, uint32_t, Windows::Win32::Security::CERT_CONTEXT**);
    using PFN_CERT_STORE_PROV_WRITE_CERT = Windows::Win32::SystemServices::BOOL __stdcall(void*, Windows::Win32::Security::CERT_CONTEXT*, uint32_t);
    using PFN_CERT_STORE_PROV_DELETE_CERT = Windows::Win32::SystemServices::BOOL __stdcall(void*, Windows::Win32::Security::CERT_CONTEXT*, uint32_t);
    using PFN_CERT_STORE_PROV_SET_CERT_PROPERTY = Windows::Win32::SystemServices::BOOL __stdcall(void*, Windows::Win32::Security::CERT_CONTEXT*, uint32_t, uint32_t, void*);
    using PFN_CERT_STORE_PROV_READ_CRL = Windows::Win32::SystemServices::BOOL __stdcall(void*, Windows::Win32::Security::CRL_CONTEXT*, uint32_t, Windows::Win32::Security::CRL_CONTEXT**);
    using PFN_CERT_STORE_PROV_WRITE_CRL = Windows::Win32::SystemServices::BOOL __stdcall(void*, Windows::Win32::Security::CRL_CONTEXT*, uint32_t);
    using PFN_CERT_STORE_PROV_DELETE_CRL = Windows::Win32::SystemServices::BOOL __stdcall(void*, Windows::Win32::Security::CRL_CONTEXT*, uint32_t);
    using PFN_CERT_STORE_PROV_SET_CRL_PROPERTY = Windows::Win32::SystemServices::BOOL __stdcall(void*, Windows::Win32::Security::CRL_CONTEXT*, uint32_t, uint32_t, void*);
    using PFN_CERT_STORE_PROV_READ_CTL = Windows::Win32::SystemServices::BOOL __stdcall(void*, Windows::Win32::Security::CTL_CONTEXT*, uint32_t, Windows::Win32::Security::CTL_CONTEXT**);
    using PFN_CERT_STORE_PROV_WRITE_CTL = Windows::Win32::SystemServices::BOOL __stdcall(void*, Windows::Win32::Security::CTL_CONTEXT*, uint32_t);
    using PFN_CERT_STORE_PROV_DELETE_CTL = Windows::Win32::SystemServices::BOOL __stdcall(void*, Windows::Win32::Security::CTL_CONTEXT*, uint32_t);
    using PFN_CERT_STORE_PROV_SET_CTL_PROPERTY = Windows::Win32::SystemServices::BOOL __stdcall(void*, Windows::Win32::Security::CTL_CONTEXT*, uint32_t, uint32_t, void*);
    using PFN_CERT_STORE_PROV_CONTROL = Windows::Win32::SystemServices::BOOL __stdcall(void*, uint32_t, uint32_t, void*);
    using PFN_CERT_STORE_PROV_FIND_CERT = Windows::Win32::SystemServices::BOOL __stdcall(void*, Windows::Win32::Security::CERT_STORE_PROV_FIND_INFO*, Windows::Win32::Security::CERT_CONTEXT*, uint32_t, void**, Windows::Win32::Security::CERT_CONTEXT**);
    using PFN_CERT_STORE_PROV_FREE_FIND_CERT = Windows::Win32::SystemServices::BOOL __stdcall(void*, Windows::Win32::Security::CERT_CONTEXT*, void*, uint32_t);
    using PFN_CERT_STORE_PROV_GET_CERT_PROPERTY = Windows::Win32::SystemServices::BOOL __stdcall(void*, Windows::Win32::Security::CERT_CONTEXT*, uint32_t, uint32_t, void*, uint32_t*);
    using PFN_CERT_STORE_PROV_FIND_CRL = Windows::Win32::SystemServices::BOOL __stdcall(void*, Windows::Win32::Security::CERT_STORE_PROV_FIND_INFO*, Windows::Win32::Security::CRL_CONTEXT*, uint32_t, void**, Windows::Win32::Security::CRL_CONTEXT**);
    using PFN_CERT_STORE_PROV_FREE_FIND_CRL = Windows::Win32::SystemServices::BOOL __stdcall(void*, Windows::Win32::Security::CRL_CONTEXT*, void*, uint32_t);
    using PFN_CERT_STORE_PROV_GET_CRL_PROPERTY = Windows::Win32::SystemServices::BOOL __stdcall(void*, Windows::Win32::Security::CRL_CONTEXT*, uint32_t, uint32_t, void*, uint32_t*);
    using PFN_CERT_STORE_PROV_FIND_CTL = Windows::Win32::SystemServices::BOOL __stdcall(void*, Windows::Win32::Security::CERT_STORE_PROV_FIND_INFO*, Windows::Win32::Security::CTL_CONTEXT*, uint32_t, void**, Windows::Win32::Security::CTL_CONTEXT**);
    using PFN_CERT_STORE_PROV_FREE_FIND_CTL = Windows::Win32::SystemServices::BOOL __stdcall(void*, Windows::Win32::Security::CTL_CONTEXT*, void*, uint32_t);
    using PFN_CERT_STORE_PROV_GET_CTL_PROPERTY = Windows::Win32::SystemServices::BOOL __stdcall(void*, Windows::Win32::Security::CTL_CONTEXT*, uint32_t, uint32_t, void*, uint32_t*);
    using PFN_CERT_CREATE_CONTEXT_SORT_FUNC = Windows::Win32::SystemServices::BOOL __stdcall(uint32_t, uint32_t, uint32_t, void*);
    using PFN_CERT_ENUM_SYSTEM_STORE_LOCATION = Windows::Win32::SystemServices::BOOL __stdcall(uint16_t*, uint32_t, void*, void*);
    using PFN_CERT_ENUM_SYSTEM_STORE = Windows::Win32::SystemServices::BOOL __stdcall(void*, uint32_t, Windows::Win32::Security::CERT_SYSTEM_STORE_INFO*, void*, void*);
    using PFN_CERT_ENUM_PHYSICAL_STORE = Windows::Win32::SystemServices::BOOL __stdcall(void*, uint32_t, uint16_t*, Windows::Win32::Security::CERT_PHYSICAL_STORE_INFO*, void*, void*);
    using PFN_CRYPT_EXTRACT_ENCODED_SIGNATURE_PARAMETERS_FUNC = Windows::Win32::SystemServices::BOOL __stdcall(uint32_t, Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER*, void**, uint16_t**);
    using PFN_CRYPT_SIGN_AND_ENCODE_HASH_FUNC = Windows::Win32::SystemServices::BOOL __stdcall(size_t, uint32_t, Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER*, void*, uint16_t*, uint16_t*, uint8_t*, uint32_t, uint8_t*, uint32_t*);
    using PFN_CRYPT_VERIFY_ENCODED_SIGNATURE_FUNC = Windows::Win32::SystemServices::BOOL __stdcall(uint32_t, Windows::Win32::Security::CERT_PUBLIC_KEY_INFO*, Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER*, void*, uint16_t*, uint16_t*, uint8_t*, uint32_t, uint8_t*, uint32_t);
    using PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_EX2_FUNC = Windows::Win32::SystemServices::BOOL __stdcall(size_t, uint32_t, int8_t*, uint32_t, void*, Windows::Win32::Security::CERT_PUBLIC_KEY_INFO*, uint32_t*);
    using PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_FROM_BCRYPT_HANDLE_FUNC = Windows::Win32::SystemServices::BOOL __stdcall(void*, uint32_t, int8_t*, uint32_t, void*, Windows::Win32::Security::CERT_PUBLIC_KEY_INFO*, uint32_t*);
    using PFN_IMPORT_PUBLIC_KEY_INFO_EX2_FUNC = Windows::Win32::SystemServices::BOOL __stdcall(uint32_t, Windows::Win32::Security::CERT_PUBLIC_KEY_INFO*, uint32_t, void*, void**);
    using PFN_IMPORT_PRIV_KEY_FUNC = Windows::Win32::SystemServices::BOOL __stdcall(size_t, Windows::Win32::Security::CRYPT_PRIVATE_KEY_INFO*, uint32_t, void*);
    using PFN_EXPORT_PRIV_KEY_FUNC = Windows::Win32::SystemServices::BOOL __stdcall(size_t, uint32_t, int8_t*, uint32_t, void*, Windows::Win32::Security::CRYPT_PRIVATE_KEY_INFO*, uint32_t*);
    using PFN_CRYPT_GET_SIGNER_CERTIFICATE = Windows::Win32::Security::CERT_CONTEXT* __stdcall(void*, uint32_t, Windows::Win32::Security::CERT_INFO*, void*);
    using PFN_CRYPT_ASYNC_PARAM_FREE_FUNC = void __stdcall(int8_t*, void*);
    using PFN_FREE_ENCODED_OBJECT_FUNC = void __stdcall(int8_t*, Windows::Win32::Security::CRYPT_BLOB_ARRAY*, void*);
    using PFN_CRYPT_CANCEL_RETRIEVAL = Windows::Win32::SystemServices::BOOL __stdcall(uint32_t, void*);
    using PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC = void __stdcall(void*, uint32_t, int8_t*, int8_t*, void*);
    using PFN_CANCEL_ASYNC_RETRIEVAL_FUNC = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::Security::HCRYPTASYNC);
    using PFN_CRYPT_ENUM_KEYID_PROP = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::Security::CRYPTOAPI_BLOB*, uint32_t, void*, void*, uint32_t, uint32_t*, void**, uint32_t*);
    using PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::Security::CERT_CONTEXT*, void*);
    using PFN_CERT_SERVER_OCSP_RESPONSE_UPDATE_CALLBACK = void __stdcall(Windows::Win32::Security::CERT_CHAIN_CONTEXT*, Windows::Win32::Security::CERT_SERVER_OCSP_RESPONSE_CONTEXT*, Windows::Win32::Security::CRL_CONTEXT*, Windows::Win32::Security::CRL_CONTEXT*, void*, uint32_t);
    using PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FLUSH = Windows::Win32::SystemServices::BOOL __stdcall(void*, Windows::Win32::Security::CRYPTOAPI_BLOB**, uint32_t);
    using PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_GET = Windows::Win32::SystemServices::BOOL __stdcall(void*, Windows::Win32::Security::CRYPTOAPI_BLOB*, uint32_t, Windows::Win32::Security::CRYPTOAPI_BLOB*, uint8_t**, uint32_t*, uint16_t**, Windows::Win32::Security::CRYPTOAPI_BLOB**);
    using PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_RELEASE = void __stdcall(uint32_t, void*);
    using PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_PASSWORD = void __stdcall(void*, uint16_t*);
    using PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE = void __stdcall(void*, uint8_t*);
    using PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_IDENTIFIER = void __stdcall(void*, Windows::Win32::Security::CRYPTOAPI_BLOB*);
    using PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_INITIALIZE = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::Security::PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FLUSH*, void*, uint32_t*, Windows::Win32::Security::CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE**, void**);
    using PFN_CERT_IS_WEAK_HASH = Windows::Win32::SystemServices::BOOL __stdcall(uint32_t, uint16_t*, uint32_t, Windows::Win32::Security::CERT_CHAIN_CONTEXT*, Windows::Win32::WindowsProgramming::FILETIME*, uint16_t*);
    using LPOCNCONNPROCA = size_t __stdcall(size_t, int8_t*, int8_t*, void*);
    using LPOCNCONNPROCW = size_t __stdcall(size_t, uint16_t*, uint16_t*, void*);
    using LPOCNCHKPROC = Windows::Win32::SystemServices::BOOL __stdcall(size_t, size_t, void*);
    using LPOCNDSCPROC = void __stdcall(size_t, size_t, void*);
    using SERVICE_MAIN_FUNCTIONW = void __stdcall(uint32_t, uint16_t**);
    using SERVICE_MAIN_FUNCTIONA = void __stdcall(uint32_t, int8_t**);
    using LPSERVICE_MAIN_FUNCTIONW = void __stdcall(uint32_t, uint16_t**);
    using LPSERVICE_MAIN_FUNCTIONA = void __stdcall(uint32_t, int8_t**);
    using HANDLER_FUNCTION = void __stdcall(uint32_t);
    using HANDLER_FUNCTION_EX = uint32_t __stdcall(uint32_t, uint32_t, void*, void*);
    using LPHANDLER_FUNCTION = void __stdcall(uint32_t);
    using LPHANDLER_FUNCTION_EX = uint32_t __stdcall(uint32_t, uint32_t, void*, void*);
    using PFN_SC_NOTIFY_CALLBACK = void __stdcall(void*);
    using SC_NOTIFICATION_CALLBACK = void __stdcall(uint32_t, void*);
    using PSC_NOTIFICATION_CALLBACK = void __stdcall();
    using PSAM_PASSWORD_NOTIFICATION_ROUTINE = Windows::Win32::SystemServices::NTSTATUS __stdcall(Windows::Win32::Security::UNICODE_STRING*, uint32_t, Windows::Win32::Security::UNICODE_STRING*);
    using PSAM_INIT_NOTIFICATION_ROUTINE = uint8_t __stdcall();
    using PSAM_PASSWORD_FILTER_ROUTINE = uint8_t __stdcall(Windows::Win32::Security::UNICODE_STRING*, Windows::Win32::Security::UNICODE_STRING*, Windows::Win32::Security::UNICODE_STRING*, uint8_t);
    using SEC_GET_KEY_FN = void __stdcall(void*, void*, uint32_t, void**, int32_t*);
    using ACQUIRE_CREDENTIALS_HANDLE_FN_W = int32_t __stdcall(uint16_t*, uint16_t*, uint32_t, void*, void*, Windows::Win32::Security::SEC_GET_KEY_FN*, void*, Windows::Win32::Security::SecHandle*, Windows::Win32::SystemServices::LARGE_INTEGER*);
    using ACQUIRE_CREDENTIALS_HANDLE_FN_A = int32_t __stdcall(int8_t*, int8_t*, uint32_t, void*, void*, Windows::Win32::Security::SEC_GET_KEY_FN*, void*, Windows::Win32::Security::SecHandle*, Windows::Win32::SystemServices::LARGE_INTEGER*);
    using FREE_CREDENTIALS_HANDLE_FN = int32_t __stdcall(Windows::Win32::Security::SecHandle*);
    using ADD_CREDENTIALS_FN_W = int32_t __stdcall(Windows::Win32::Security::SecHandle*, uint16_t*, uint16_t*, uint32_t, void*, Windows::Win32::Security::SEC_GET_KEY_FN*, void*, Windows::Win32::SystemServices::LARGE_INTEGER*);
    using ADD_CREDENTIALS_FN_A = int32_t __stdcall(Windows::Win32::Security::SecHandle*, int8_t*, int8_t*, uint32_t, void*, Windows::Win32::Security::SEC_GET_KEY_FN*, void*, Windows::Win32::SystemServices::LARGE_INTEGER*);
    using CHANGE_PASSWORD_FN_W = int32_t __stdcall(uint16_t*, uint16_t*, uint16_t*, uint16_t*, uint16_t*, uint8_t, uint32_t, Windows::Win32::Security::SecBufferDesc*);
    using CHANGE_PASSWORD_FN_A = int32_t __stdcall(int8_t*, int8_t*, int8_t*, int8_t*, int8_t*, uint8_t, uint32_t, Windows::Win32::Security::SecBufferDesc*);
    using INITIALIZE_SECURITY_CONTEXT_FN_W = int32_t __stdcall(Windows::Win32::Security::SecHandle*, Windows::Win32::Security::SecHandle*, uint16_t*, uint32_t, uint32_t, uint32_t, Windows::Win32::Security::SecBufferDesc*, uint32_t, Windows::Win32::Security::SecHandle*, Windows::Win32::Security::SecBufferDesc*, uint32_t*, Windows::Win32::SystemServices::LARGE_INTEGER*);
    using INITIALIZE_SECURITY_CONTEXT_FN_A = int32_t __stdcall(Windows::Win32::Security::SecHandle*, Windows::Win32::Security::SecHandle*, int8_t*, uint32_t, uint32_t, uint32_t, Windows::Win32::Security::SecBufferDesc*, uint32_t, Windows::Win32::Security::SecHandle*, Windows::Win32::Security::SecBufferDesc*, uint32_t*, Windows::Win32::SystemServices::LARGE_INTEGER*);
    using ACCEPT_SECURITY_CONTEXT_FN = int32_t __stdcall(Windows::Win32::Security::SecHandle*, Windows::Win32::Security::SecHandle*, Windows::Win32::Security::SecBufferDesc*, uint32_t, uint32_t, Windows::Win32::Security::SecHandle*, Windows::Win32::Security::SecBufferDesc*, uint32_t*, Windows::Win32::SystemServices::LARGE_INTEGER*);
    using COMPLETE_AUTH_TOKEN_FN = int32_t __stdcall(Windows::Win32::Security::SecHandle*, Windows::Win32::Security::SecBufferDesc*);
    using IMPERSONATE_SECURITY_CONTEXT_FN = int32_t __stdcall(Windows::Win32::Security::SecHandle*);
    using REVERT_SECURITY_CONTEXT_FN = int32_t __stdcall(Windows::Win32::Security::SecHandle*);
    using QUERY_SECURITY_CONTEXT_TOKEN_FN = int32_t __stdcall(Windows::Win32::Security::SecHandle*, void**);
    using DELETE_SECURITY_CONTEXT_FN = int32_t __stdcall(Windows::Win32::Security::SecHandle*);
    using APPLY_CONTROL_TOKEN_FN = int32_t __stdcall(Windows::Win32::Security::SecHandle*, Windows::Win32::Security::SecBufferDesc*);
    using QUERY_CONTEXT_ATTRIBUTES_FN_W = int32_t __stdcall(Windows::Win32::Security::SecHandle*, uint32_t, void*);
    using QUERY_CONTEXT_ATTRIBUTES_EX_FN_W = int32_t __stdcall(Windows::Win32::Security::SecHandle*, uint32_t, void*, uint32_t);
    using QUERY_CONTEXT_ATTRIBUTES_FN_A = int32_t __stdcall(Windows::Win32::Security::SecHandle*, uint32_t, void*);
    using QUERY_CONTEXT_ATTRIBUTES_EX_FN_A = int32_t __stdcall(Windows::Win32::Security::SecHandle*, uint32_t, void*, uint32_t);
    using SET_CONTEXT_ATTRIBUTES_FN_W = int32_t __stdcall(Windows::Win32::Security::SecHandle*, uint32_t, void*, uint32_t);
    using SET_CONTEXT_ATTRIBUTES_FN_A = int32_t __stdcall(Windows::Win32::Security::SecHandle*, uint32_t, void*, uint32_t);
    using QUERY_CREDENTIALS_ATTRIBUTES_FN_W = int32_t __stdcall(Windows::Win32::Security::SecHandle*, uint32_t, void*);
    using QUERY_CREDENTIALS_ATTRIBUTES_EX_FN_W = int32_t __stdcall(Windows::Win32::Security::SecHandle*, uint32_t, void*, uint32_t);
    using QUERY_CREDENTIALS_ATTRIBUTES_FN_A = int32_t __stdcall(Windows::Win32::Security::SecHandle*, uint32_t, void*);
    using QUERY_CREDENTIALS_ATTRIBUTES_EX_FN_A = int32_t __stdcall(Windows::Win32::Security::SecHandle*, uint32_t, void*, uint32_t);
    using SET_CREDENTIALS_ATTRIBUTES_FN_W = int32_t __stdcall(Windows::Win32::Security::SecHandle*, uint32_t, void*, uint32_t);
    using SET_CREDENTIALS_ATTRIBUTES_FN_A = int32_t __stdcall(Windows::Win32::Security::SecHandle*, uint32_t, void*, uint32_t);
    using FREE_CONTEXT_BUFFER_FN = int32_t __stdcall(void*);
    using MAKE_SIGNATURE_FN = int32_t __stdcall(Windows::Win32::Security::SecHandle*, uint32_t, Windows::Win32::Security::SecBufferDesc*, uint32_t);
    using VERIFY_SIGNATURE_FN = int32_t __stdcall(Windows::Win32::Security::SecHandle*, Windows::Win32::Security::SecBufferDesc*, uint32_t, uint32_t*);
    using ENCRYPT_MESSAGE_FN = int32_t __stdcall(Windows::Win32::Security::SecHandle*, uint32_t, Windows::Win32::Security::SecBufferDesc*, uint32_t);
    using DECRYPT_MESSAGE_FN = int32_t __stdcall(Windows::Win32::Security::SecHandle*, Windows::Win32::Security::SecBufferDesc*, uint32_t, uint32_t*);
    using ENUMERATE_SECURITY_PACKAGES_FN_W = int32_t __stdcall(uint32_t*, Windows::Win32::Security::SecPkgInfoW**);
    using ENUMERATE_SECURITY_PACKAGES_FN_A = int32_t __stdcall(uint32_t*, Windows::Win32::Security::SecPkgInfoA**);
    using QUERY_SECURITY_PACKAGE_INFO_FN_W = int32_t __stdcall(uint16_t*, Windows::Win32::Security::SecPkgInfoW**);
    using QUERY_SECURITY_PACKAGE_INFO_FN_A = int32_t __stdcall(int8_t*, Windows::Win32::Security::SecPkgInfoA**);
    using EXPORT_SECURITY_CONTEXT_FN = int32_t __stdcall(Windows::Win32::Security::SecHandle*, uint32_t, Windows::Win32::Security::SecBuffer*, void**);
    using IMPORT_SECURITY_CONTEXT_FN_W = int32_t __stdcall(uint16_t*, Windows::Win32::Security::SecBuffer*, void*, Windows::Win32::Security::SecHandle*);
    using IMPORT_SECURITY_CONTEXT_FN_A = int32_t __stdcall(int8_t*, Windows::Win32::Security::SecBuffer*, void*, Windows::Win32::Security::SecHandle*);
    using INIT_SECURITY_INTERFACE_A = Windows::Win32::Security::SecurityFunctionTableA* __stdcall();
    using INIT_SECURITY_INTERFACE_W = Windows::Win32::Security::SecurityFunctionTableW* __stdcall();
    using LSA_CREATE_LOGON_SESSION = Windows::Win32::SystemServices::NTSTATUS __stdcall(Windows::Win32::Kernel::LUID*);
    using LSA_DELETE_LOGON_SESSION = Windows::Win32::SystemServices::NTSTATUS __stdcall(Windows::Win32::Kernel::LUID*);
    using LSA_ADD_CREDENTIAL = Windows::Win32::SystemServices::NTSTATUS __stdcall(Windows::Win32::Kernel::LUID*, uint32_t, Windows::Win32::WindowsProgramming::STRING*, Windows::Win32::WindowsProgramming::STRING*);
    using LSA_GET_CREDENTIALS = Windows::Win32::SystemServices::NTSTATUS __stdcall(Windows::Win32::Kernel::LUID*, uint32_t, uint32_t*, uint8_t, Windows::Win32::WindowsProgramming::STRING*, uint32_t*, Windows::Win32::WindowsProgramming::STRING*);
    using LSA_DELETE_CREDENTIAL = Windows::Win32::SystemServices::NTSTATUS __stdcall(Windows::Win32::Kernel::LUID*, uint32_t, Windows::Win32::WindowsProgramming::STRING*);
    using LSA_ALLOCATE_LSA_HEAP = void* __stdcall(uint32_t);
    using LSA_FREE_LSA_HEAP = void __stdcall(void*);
    using LSA_ALLOCATE_PRIVATE_HEAP = void* __stdcall(size_t);
    using LSA_FREE_PRIVATE_HEAP = void __stdcall(void*);
    using LSA_ALLOCATE_CLIENT_BUFFER = Windows::Win32::SystemServices::NTSTATUS __stdcall(void**, uint32_t, void**);
    using LSA_FREE_CLIENT_BUFFER = Windows::Win32::SystemServices::NTSTATUS __stdcall(void**, void*);
    using LSA_COPY_TO_CLIENT_BUFFER = Windows::Win32::SystemServices::NTSTATUS __stdcall(void**, uint32_t, void*, void*);
    using LSA_COPY_FROM_CLIENT_BUFFER = Windows::Win32::SystemServices::NTSTATUS __stdcall(void**, uint32_t, void*, void*);
    using PLSA_CREATE_LOGON_SESSION = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using PLSA_DELETE_LOGON_SESSION = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using PLSA_ADD_CREDENTIAL = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using PLSA_GET_CREDENTIALS = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using PLSA_DELETE_CREDENTIAL = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using PLSA_ALLOCATE_LSA_HEAP = void* __stdcall();
    using PLSA_FREE_LSA_HEAP = void __stdcall();
    using PLSA_ALLOCATE_PRIVATE_HEAP = void* __stdcall();
    using PLSA_FREE_PRIVATE_HEAP = void __stdcall();
    using PLSA_ALLOCATE_CLIENT_BUFFER = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using PLSA_FREE_CLIENT_BUFFER = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using PLSA_COPY_TO_CLIENT_BUFFER = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using PLSA_COPY_FROM_CLIENT_BUFFER = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using LSA_AP_INITIALIZE_PACKAGE = Windows::Win32::SystemServices::NTSTATUS __stdcall(uint32_t, Windows::Win32::Security::LSA_DISPATCH_TABLE*, Windows::Win32::WindowsProgramming::STRING*, Windows::Win32::WindowsProgramming::STRING*, Windows::Win32::WindowsProgramming::STRING**);
    using LSA_AP_LOGON_USER = Windows::Win32::SystemServices::NTSTATUS __stdcall(void**, Windows::Win32::Security::SECURITY_LOGON_TYPE, void*, void*, uint32_t, void**, uint32_t*, Windows::Win32::Kernel::LUID*, int32_t*, Windows::Win32::Security::LSA_TOKEN_INFORMATION_TYPE*, void**, Windows::Win32::Security::UNICODE_STRING**, Windows::Win32::Security::UNICODE_STRING**);
    using LSA_AP_LOGON_USER_EX = Windows::Win32::SystemServices::NTSTATUS __stdcall(void**, Windows::Win32::Security::SECURITY_LOGON_TYPE, void*, void*, uint32_t, void**, uint32_t*, Windows::Win32::Kernel::LUID*, int32_t*, Windows::Win32::Security::LSA_TOKEN_INFORMATION_TYPE*, void**, Windows::Win32::Security::UNICODE_STRING**, Windows::Win32::Security::UNICODE_STRING**, Windows::Win32::Security::UNICODE_STRING**);
    using LSA_AP_CALL_PACKAGE = Windows::Win32::SystemServices::NTSTATUS __stdcall(void**, void*, void*, uint32_t, void**, uint32_t*, int32_t*);
    using LSA_AP_CALL_PACKAGE_PASSTHROUGH = Windows::Win32::SystemServices::NTSTATUS __stdcall(void**, void*, void*, uint32_t, void**, uint32_t*, int32_t*);
    using LSA_AP_LOGON_TERMINATED = void __stdcall(Windows::Win32::Kernel::LUID*);
    using LSA_AP_CALL_PACKAGE_UNTRUSTED = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using PLSA_AP_INITIALIZE_PACKAGE = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using PLSA_AP_LOGON_USER = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using PLSA_AP_LOGON_USER_EX = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using PLSA_AP_CALL_PACKAGE = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using PLSA_AP_CALL_PACKAGE_PASSTHROUGH = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using PLSA_AP_LOGON_TERMINATED = void __stdcall();
    using PLSA_AP_CALL_PACKAGE_UNTRUSTED = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using PSAM_CREDENTIAL_UPDATE_NOTIFY_ROUTINE = Windows::Win32::SystemServices::NTSTATUS __stdcall(Windows::Win32::Security::UNICODE_STRING*, void*, uint32_t, uint32_t, Windows::Win32::Security::UNICODE_STRING*, Windows::Win32::Security::UNICODE_STRING*, Windows::Win32::Security::UNICODE_STRING*, Windows::Win32::Security::UNICODE_STRING*, void**, uint32_t*);
    using PSAM_CREDENTIAL_UPDATE_REGISTER_ROUTINE = uint8_t __stdcall(Windows::Win32::Security::UNICODE_STRING*);
    using PSAM_CREDENTIAL_UPDATE_FREE_ROUTINE = void __stdcall(void*);
    using PSAM_CREDENTIAL_UPDATE_REGISTER_MAPPED_ENTRYPOINTS_ROUTINE = Windows::Win32::SystemServices::NTSTATUS __stdcall(Windows::Win32::Security::SAM_REGISTER_MAPPING_TABLE*);
    using SEC_THREAD_START = uint32_t __stdcall();
    using LSA_CALLBACK_FUNCTION = Windows::Win32::SystemServices::NTSTATUS __stdcall(size_t, size_t, Windows::Win32::Security::SecBuffer*, Windows::Win32::Security::SecBuffer*);
    using PLSA_CALLBACK_FUNCTION = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using LSA_REDIRECTED_LOGON_INIT = Windows::Win32::SystemServices::NTSTATUS __stdcall(Windows::Win32::SystemServices::HANDLE, Windows::Win32::Security::UNICODE_STRING*, uint32_t, Windows::Win32::Kernel::LUID*);
    using LSA_REDIRECTED_LOGON_CALLBACK = Windows::Win32::SystemServices::NTSTATUS __stdcall(Windows::Win32::SystemServices::HANDLE, void*, uint32_t, void**, uint32_t*);
    using LSA_REDIRECTED_LOGON_CLEANUP_CALLBACK = void __stdcall(Windows::Win32::SystemServices::HANDLE);
    using LSA_REDIRECTED_LOGON_GET_LOGON_CREDS = Windows::Win32::SystemServices::NTSTATUS __stdcall(Windows::Win32::SystemServices::HANDLE, uint8_t**, uint32_t*);
    using LSA_REDIRECTED_LOGON_GET_SUPP_CREDS = Windows::Win32::SystemServices::NTSTATUS __stdcall(Windows::Win32::SystemServices::HANDLE, Windows::Win32::Security::SECPKG_SUPPLEMENTAL_CRED_ARRAY**);
    using PLSA_REDIRECTED_LOGON_INIT = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using PLSA_REDIRECTED_LOGON_CALLBACK = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using PLSA_REDIRECTED_LOGON_GET_LOGON_CREDS = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using PLSA_REDIRECTED_LOGON_GET_SUPP_CREDS = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using PLSA_REDIRECTED_LOGON_CLEANUP_CALLBACK = void __stdcall();
    using LSA_IMPERSONATE_CLIENT = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using LSA_UNLOAD_PACKAGE = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using LSA_DUPLICATE_HANDLE = Windows::Win32::SystemServices::NTSTATUS __stdcall(Windows::Win32::SystemServices::HANDLE, intptr_t*);
    using LSA_SAVE_SUPPLEMENTAL_CREDENTIALS = Windows::Win32::SystemServices::NTSTATUS __stdcall(Windows::Win32::Kernel::LUID*, uint32_t, void*, uint8_t);
    using LSA_CREATE_THREAD = Windows::Win32::SystemServices::HANDLE __stdcall(Windows::Win32::SystemServices::SECURITY_ATTRIBUTES*, uint32_t, Windows::Win32::Security::SEC_THREAD_START*, void*, uint32_t, uint32_t*);
    using LSA_GET_CLIENT_INFO = Windows::Win32::SystemServices::NTSTATUS __stdcall(Windows::Win32::Security::SECPKG_CLIENT_INFO*);
    using LSA_REGISTER_NOTIFICATION = Windows::Win32::SystemServices::HANDLE __stdcall(Windows::Win32::Security::SEC_THREAD_START*, void*, uint32_t, uint32_t, uint32_t, uint32_t, Windows::Win32::SystemServices::HANDLE);
    using LSA_CANCEL_NOTIFICATION = Windows::Win32::SystemServices::NTSTATUS __stdcall(Windows::Win32::SystemServices::HANDLE);
    using LSA_MAP_BUFFER = Windows::Win32::SystemServices::NTSTATUS __stdcall(Windows::Win32::Security::SecBuffer*, Windows::Win32::Security::SecBuffer*);
    using LSA_CREATE_TOKEN = Windows::Win32::SystemServices::NTSTATUS __stdcall(Windows::Win32::Kernel::LUID*, Windows::Win32::Security::TOKEN_SOURCE*, Windows::Win32::Security::SECURITY_LOGON_TYPE, Windows::Win32::Security::SECURITY_IMPERSONATION_LEVEL, Windows::Win32::Security::LSA_TOKEN_INFORMATION_TYPE, void*, Windows::Win32::Security::TOKEN_GROUPS*, Windows::Win32::Security::UNICODE_STRING*, Windows::Win32::Security::UNICODE_STRING*, Windows::Win32::Security::UNICODE_STRING*, Windows::Win32::Security::UNICODE_STRING*, intptr_t*, int32_t*);
    using LSA_CREATE_TOKEN_EX = Windows::Win32::SystemServices::NTSTATUS __stdcall(Windows::Win32::Kernel::LUID*, Windows::Win32::Security::TOKEN_SOURCE*, Windows::Win32::Security::SECURITY_LOGON_TYPE, Windows::Win32::Security::SECURITY_IMPERSONATION_LEVEL, Windows::Win32::Security::LSA_TOKEN_INFORMATION_TYPE, void*, Windows::Win32::Security::TOKEN_GROUPS*, Windows::Win32::Security::UNICODE_STRING*, Windows::Win32::Security::UNICODE_STRING*, void*, Windows::Win32::Security::SECPKG_SESSIONINFO_TYPE, intptr_t*, int32_t*);
    using LSA_AUDIT_LOGON = void __stdcall(Windows::Win32::SystemServices::NTSTATUS, Windows::Win32::SystemServices::NTSTATUS, Windows::Win32::Security::UNICODE_STRING*, Windows::Win32::Security::UNICODE_STRING*, Windows::Win32::Security::UNICODE_STRING*, void*, Windows::Win32::Security::SECURITY_LOGON_TYPE, Windows::Win32::Security::TOKEN_SOURCE*, Windows::Win32::Kernel::LUID*);
    using LSA_CALL_PACKAGE = Windows::Win32::SystemServices::NTSTATUS __stdcall(Windows::Win32::Security::UNICODE_STRING*, void*, uint32_t, void**, uint32_t*, int32_t*);
    using LSA_CALL_PACKAGEEX = Windows::Win32::SystemServices::NTSTATUS __stdcall(Windows::Win32::Security::UNICODE_STRING*, void*, void*, uint32_t, void**, uint32_t*, int32_t*);
    using LSA_CALL_PACKAGE_PASSTHROUGH = Windows::Win32::SystemServices::NTSTATUS __stdcall(Windows::Win32::Security::UNICODE_STRING*, void*, void*, uint32_t, void**, uint32_t*, int32_t*);
    using LSA_GET_CALL_INFO = uint8_t __stdcall(Windows::Win32::Security::SECPKG_CALL_INFO*);
    using LSA_CREATE_SHARED_MEMORY = void* __stdcall(uint32_t, uint32_t);
    using LSA_ALLOCATE_SHARED_MEMORY = void* __stdcall(void*, uint32_t);
    using LSA_FREE_SHARED_MEMORY = void __stdcall(void*, void*);
    using LSA_DELETE_SHARED_MEMORY = uint8_t __stdcall(void*);
    using LSA_GET_APP_MODE_INFO = Windows::Win32::SystemServices::NTSTATUS __stdcall(uint32_t*, uint32_t*, uint32_t*, Windows::Win32::Security::SecBuffer*, uint8_t*);
    using LSA_SET_APP_MODE_INFO = Windows::Win32::SystemServices::NTSTATUS __stdcall(uint32_t, size_t, size_t, Windows::Win32::Security::SecBuffer*, uint8_t);
    using LSA_OPEN_SAM_USER = Windows::Win32::SystemServices::NTSTATUS __stdcall(Windows::Win32::Security::UNICODE_STRING*, Windows::Win32::Security::SECPKG_NAME_TYPE, Windows::Win32::Security::UNICODE_STRING*, uint8_t, uint32_t, void**);
    using LSA_GET_USER_CREDENTIALS = Windows::Win32::SystemServices::NTSTATUS __stdcall(void*, void**, uint32_t*, void**, uint32_t*);
    using LSA_GET_USER_AUTH_DATA = Windows::Win32::SystemServices::NTSTATUS __stdcall(void*, uint8_t**, uint32_t*);
    using LSA_CLOSE_SAM_USER = Windows::Win32::SystemServices::NTSTATUS __stdcall(void*);
    using LSA_GET_AUTH_DATA_FOR_USER = Windows::Win32::SystemServices::NTSTATUS __stdcall(Windows::Win32::Security::UNICODE_STRING*, Windows::Win32::Security::SECPKG_NAME_TYPE, Windows::Win32::Security::UNICODE_STRING*, uint8_t**, uint32_t*, Windows::Win32::Security::UNICODE_STRING*);
    using LSA_CONVERT_AUTH_DATA_TO_TOKEN = Windows::Win32::SystemServices::NTSTATUS __stdcall(void*, uint32_t, Windows::Win32::Security::SECURITY_IMPERSONATION_LEVEL, Windows::Win32::Security::TOKEN_SOURCE*, Windows::Win32::Security::SECURITY_LOGON_TYPE, Windows::Win32::Security::UNICODE_STRING*, intptr_t*, Windows::Win32::Kernel::LUID*, Windows::Win32::Security::UNICODE_STRING*, int32_t*);
    using LSA_CRACK_SINGLE_NAME = Windows::Win32::SystemServices::NTSTATUS __stdcall(uint32_t, uint8_t, Windows::Win32::Security::UNICODE_STRING*, Windows::Win32::Security::UNICODE_STRING*, uint32_t, Windows::Win32::Security::UNICODE_STRING*, Windows::Win32::Security::UNICODE_STRING*, uint32_t*);
    using LSA_AUDIT_ACCOUNT_LOGON = Windows::Win32::SystemServices::NTSTATUS __stdcall(uint32_t, uint8_t, Windows::Win32::Security::UNICODE_STRING*, Windows::Win32::Security::UNICODE_STRING*, Windows::Win32::Security::UNICODE_STRING*, Windows::Win32::SystemServices::NTSTATUS);
    using LSA_CLIENT_CALLBACK = Windows::Win32::SystemServices::NTSTATUS __stdcall(int8_t*, size_t, size_t, Windows::Win32::Security::SecBuffer*, Windows::Win32::Security::SecBuffer*);
    using LSA_REGISTER_CALLBACK = Windows::Win32::SystemServices::NTSTATUS __stdcall(uint32_t, Windows::Win32::Security::PLSA_CALLBACK_FUNCTION*);
    using LSA_GET_EXTENDED_CALL_FLAGS = Windows::Win32::SystemServices::NTSTATUS __stdcall(uint32_t*);
    using LSA_UPDATE_PRIMARY_CREDENTIALS = Windows::Win32::SystemServices::NTSTATUS __stdcall(Windows::Win32::Security::SECPKG_PRIMARY_CRED*, Windows::Win32::Security::SECPKG_SUPPLEMENTAL_CRED_ARRAY*);
    using LSA_PROTECT_MEMORY = void __stdcall(void*, uint32_t);
    using LSA_OPEN_TOKEN_BY_LOGON_ID = Windows::Win32::SystemServices::NTSTATUS __stdcall(Windows::Win32::Kernel::LUID*, Windows::Win32::SystemServices::HANDLE*);
    using LSA_EXPAND_AUTH_DATA_FOR_DOMAIN = Windows::Win32::SystemServices::NTSTATUS __stdcall(uint8_t*, uint32_t, void*, uint8_t**, uint32_t*);
    using LSA_GET_SERVICE_ACCOUNT_PASSWORD = Windows::Win32::SystemServices::NTSTATUS __stdcall(Windows::Win32::Security::UNICODE_STRING*, Windows::Win32::Security::UNICODE_STRING*, Windows::Win32::Security::CRED_FETCH, Windows::Win32::WindowsProgramming::FILETIME*, Windows::Win32::Security::UNICODE_STRING*, Windows::Win32::Security::UNICODE_STRING*, Windows::Win32::WindowsProgramming::FILETIME*);
    using LSA_AUDIT_LOGON_EX = void __stdcall(Windows::Win32::SystemServices::NTSTATUS, Windows::Win32::SystemServices::NTSTATUS, Windows::Win32::Security::UNICODE_STRING*, Windows::Win32::Security::UNICODE_STRING*, Windows::Win32::Security::UNICODE_STRING*, void*, Windows::Win32::Security::SECURITY_LOGON_TYPE, Windows::Win32::Security::SECURITY_IMPERSONATION_LEVEL, Windows::Win32::Security::TOKEN_SOURCE*, Windows::Win32::Kernel::LUID*);
    using LSA_CHECK_PROTECTED_USER_BY_TOKEN = Windows::Win32::SystemServices::NTSTATUS __stdcall(Windows::Win32::SystemServices::HANDLE, uint8_t*);
    using LSA_QUERY_CLIENT_REQUEST = Windows::Win32::SystemServices::NTSTATUS __stdcall(void**, uint32_t, void**);
    using PLSA_IMPERSONATE_CLIENT = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using PLSA_UNLOAD_PACKAGE = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using PLSA_DUPLICATE_HANDLE = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using PLSA_SAVE_SUPPLEMENTAL_CREDENTIALS = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using PLSA_CREATE_THREAD = Windows::Win32::SystemServices::HANDLE __stdcall();
    using PLSA_GET_CLIENT_INFO = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using PLSA_REGISTER_NOTIFICATION = Windows::Win32::SystemServices::HANDLE __stdcall();
    using PLSA_CANCEL_NOTIFICATION = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using PLSA_MAP_BUFFER = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using PLSA_CREATE_TOKEN = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using PLSA_AUDIT_LOGON = void __stdcall();
    using PLSA_CALL_PACKAGE = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using PLSA_CALL_PACKAGEEX = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using PLSA_GET_CALL_INFO = uint8_t __stdcall();
    using PLSA_CREATE_SHARED_MEMORY = void* __stdcall();
    using PLSA_ALLOCATE_SHARED_MEMORY = void* __stdcall();
    using PLSA_FREE_SHARED_MEMORY = void __stdcall();
    using PLSA_DELETE_SHARED_MEMORY = uint8_t __stdcall();
    using PLSA_OPEN_SAM_USER = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using PLSA_GET_USER_CREDENTIALS = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using PLSA_GET_USER_AUTH_DATA = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using PLSA_CLOSE_SAM_USER = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using PLSA_CONVERT_AUTH_DATA_TO_TOKEN = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using PLSA_CLIENT_CALLBACK = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using PLSA_REGISTER_CALLBACK = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using PLSA_UPDATE_PRIMARY_CREDENTIALS = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using PLSA_GET_AUTH_DATA_FOR_USER = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using PLSA_CRACK_SINGLE_NAME = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using PLSA_AUDIT_ACCOUNT_LOGON = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using PLSA_CALL_PACKAGE_PASSTHROUGH = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using PLSA_PROTECT_MEMORY = void __stdcall();
    using PLSA_OPEN_TOKEN_BY_LOGON_ID = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using PLSA_EXPAND_AUTH_DATA_FOR_DOMAIN = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using PLSA_CREATE_TOKEN_EX = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using PLSA_GET_EXTENDED_CALL_FLAGS = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using PLSA_GET_SERVICE_ACCOUNT_PASSWORD = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using PLSA_AUDIT_LOGON_EX = void __stdcall();
    using PLSA_CHECK_PROTECTED_USER_BY_TOKEN = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using PLSA_QUERY_CLIENT_REQUEST = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using PLSA_GET_APP_MODE_INFO = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using PLSA_SET_APP_MODE_INFO = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using CredReadFn = Windows::Win32::SystemServices::NTSTATUS __stdcall(Windows::Win32::Kernel::LUID*, uint32_t, uint16_t*, uint32_t, uint32_t, Windows::Win32::Security::ENCRYPTED_CREDENTIALW**);
    using CredReadDomainCredentialsFn = Windows::Win32::SystemServices::NTSTATUS __stdcall(Windows::Win32::Kernel::LUID*, uint32_t, Windows::Win32::Security::CREDENTIAL_TARGET_INFORMATIONW*, uint32_t, uint32_t*, Windows::Win32::Security::ENCRYPTED_CREDENTIALW***);
    using CredFreeCredentialsFn = void __stdcall(uint32_t, Windows::Win32::Security::ENCRYPTED_CREDENTIALW**);
    using CredWriteFn = Windows::Win32::SystemServices::NTSTATUS __stdcall(Windows::Win32::Kernel::LUID*, uint32_t, Windows::Win32::Security::ENCRYPTED_CREDENTIALW*, uint32_t);
    using CrediUnmarshalandDecodeStringFn = Windows::Win32::SystemServices::NTSTATUS __stdcall(uint16_t*, uint8_t**, uint32_t*, uint8_t*);
    using LSA_LOCATE_PKG_BY_ID = void* __stdcall(uint32_t);
    using PLSA_LOCATE_PKG_BY_ID = void* __stdcall();
    using SpInitializeFn = Windows::Win32::SystemServices::NTSTATUS __stdcall(size_t, Windows::Win32::Security::SECPKG_PARAMETERS*, Windows::Win32::Security::LSA_SECPKG_FUNCTION_TABLE*);
    using SpShutdownFn = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using SpGetInfoFn = Windows::Win32::SystemServices::NTSTATUS __stdcall(Windows::Win32::Security::SecPkgInfoA*);
    using SpGetExtendedInformationFn = Windows::Win32::SystemServices::NTSTATUS __stdcall(Windows::Win32::Security::SECPKG_EXTENDED_INFORMATION_CLASS, Windows::Win32::Security::SECPKG_EXTENDED_INFORMATION**);
    using SpSetExtendedInformationFn = Windows::Win32::SystemServices::NTSTATUS __stdcall(Windows::Win32::Security::SECPKG_EXTENDED_INFORMATION_CLASS, Windows::Win32::Security::SECPKG_EXTENDED_INFORMATION*);
    using LSA_AP_LOGON_USER_EX2 = Windows::Win32::SystemServices::NTSTATUS __stdcall(void**, Windows::Win32::Security::SECURITY_LOGON_TYPE, void*, void*, uint32_t, void**, uint32_t*, Windows::Win32::Kernel::LUID*, int32_t*, Windows::Win32::Security::LSA_TOKEN_INFORMATION_TYPE*, void**, Windows::Win32::Security::UNICODE_STRING**, Windows::Win32::Security::UNICODE_STRING**, Windows::Win32::Security::UNICODE_STRING**, Windows::Win32::Security::SECPKG_PRIMARY_CRED*, Windows::Win32::Security::SECPKG_SUPPLEMENTAL_CRED_ARRAY**);
    using PLSA_AP_LOGON_USER_EX2 = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using LSA_AP_LOGON_USER_EX3 = Windows::Win32::SystemServices::NTSTATUS __stdcall(void**, Windows::Win32::Security::SECURITY_LOGON_TYPE, void*, void*, uint32_t, Windows::Win32::Security::SECPKG_SURROGATE_LOGON*, void**, uint32_t*, Windows::Win32::Kernel::LUID*, int32_t*, Windows::Win32::Security::LSA_TOKEN_INFORMATION_TYPE*, void**, Windows::Win32::Security::UNICODE_STRING**, Windows::Win32::Security::UNICODE_STRING**, Windows::Win32::Security::UNICODE_STRING**, Windows::Win32::Security::SECPKG_PRIMARY_CRED*, Windows::Win32::Security::SECPKG_SUPPLEMENTAL_CRED_ARRAY**);
    using PLSA_AP_LOGON_USER_EX3 = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using LSA_AP_PRE_LOGON_USER_SURROGATE = Windows::Win32::SystemServices::NTSTATUS __stdcall(void**, Windows::Win32::Security::SECURITY_LOGON_TYPE, void*, void*, uint32_t, Windows::Win32::Security::SECPKG_SURROGATE_LOGON*, int32_t*);
    using PLSA_AP_PRE_LOGON_USER_SURROGATE = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using LSA_AP_POST_LOGON_USER_SURROGATE = Windows::Win32::SystemServices::NTSTATUS __stdcall(void**, Windows::Win32::Security::SECURITY_LOGON_TYPE, void*, void*, uint32_t, Windows::Win32::Security::SECPKG_SURROGATE_LOGON*, void*, uint32_t, Windows::Win32::Kernel::LUID*, Windows::Win32::SystemServices::NTSTATUS, Windows::Win32::SystemServices::NTSTATUS, Windows::Win32::Security::LSA_TOKEN_INFORMATION_TYPE, void*, Windows::Win32::Security::UNICODE_STRING*, Windows::Win32::Security::UNICODE_STRING*, Windows::Win32::Security::UNICODE_STRING*, Windows::Win32::Security::SECPKG_PRIMARY_CRED*, Windows::Win32::Security::SECPKG_SUPPLEMENTAL_CRED_ARRAY*);
    using PLSA_AP_POST_LOGON_USER_SURROGATE = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using SpAcceptCredentialsFn = Windows::Win32::SystemServices::NTSTATUS __stdcall(Windows::Win32::Security::SECURITY_LOGON_TYPE, Windows::Win32::Security::UNICODE_STRING*, Windows::Win32::Security::SECPKG_PRIMARY_CRED*, Windows::Win32::Security::SECPKG_SUPPLEMENTAL_CRED*);
    using SpAcquireCredentialsHandleFn = Windows::Win32::SystemServices::NTSTATUS __stdcall(Windows::Win32::Security::UNICODE_STRING*, uint32_t, Windows::Win32::Kernel::LUID*, void*, void*, void*, size_t*, Windows::Win32::SystemServices::LARGE_INTEGER*);
    using SpFreeCredentialsHandleFn = Windows::Win32::SystemServices::NTSTATUS __stdcall(size_t);
    using SpQueryCredentialsAttributesFn = Windows::Win32::SystemServices::NTSTATUS __stdcall(size_t, uint32_t, void*);
    using SpSetCredentialsAttributesFn = Windows::Win32::SystemServices::NTSTATUS __stdcall(size_t, uint32_t, void*, uint32_t);
    using SpAddCredentialsFn = Windows::Win32::SystemServices::NTSTATUS __stdcall(size_t, Windows::Win32::Security::UNICODE_STRING*, Windows::Win32::Security::UNICODE_STRING*, uint32_t, void*, void*, void*, Windows::Win32::SystemServices::LARGE_INTEGER*);
    using SpSaveCredentialsFn = Windows::Win32::SystemServices::NTSTATUS __stdcall(size_t, Windows::Win32::Security::SecBuffer*);
    using SpGetCredentialsFn = Windows::Win32::SystemServices::NTSTATUS __stdcall(size_t, Windows::Win32::Security::SecBuffer*);
    using SpDeleteCredentialsFn = Windows::Win32::SystemServices::NTSTATUS __stdcall(size_t, Windows::Win32::Security::SecBuffer*);
    using SpInitLsaModeContextFn = Windows::Win32::SystemServices::NTSTATUS __stdcall(size_t, size_t, Windows::Win32::Security::UNICODE_STRING*, uint32_t, uint32_t, Windows::Win32::Security::SecBufferDesc*, size_t*, Windows::Win32::Security::SecBufferDesc*, uint32_t*, Windows::Win32::SystemServices::LARGE_INTEGER*, uint8_t*, Windows::Win32::Security::SecBuffer*);
    using SpDeleteContextFn = Windows::Win32::SystemServices::NTSTATUS __stdcall(size_t);
    using SpApplyControlTokenFn = Windows::Win32::SystemServices::NTSTATUS __stdcall(size_t, Windows::Win32::Security::SecBufferDesc*);
    using SpAcceptLsaModeContextFn = Windows::Win32::SystemServices::NTSTATUS __stdcall(size_t, size_t, Windows::Win32::Security::SecBufferDesc*, uint32_t, uint32_t, size_t*, Windows::Win32::Security::SecBufferDesc*, uint32_t*, Windows::Win32::SystemServices::LARGE_INTEGER*, uint8_t*, Windows::Win32::Security::SecBuffer*);
    using SpGetUserInfoFn = Windows::Win32::SystemServices::NTSTATUS __stdcall(Windows::Win32::Kernel::LUID*, uint32_t, Windows::Win32::Security::SECURITY_USER_DATA**);
    using SpQueryContextAttributesFn = Windows::Win32::SystemServices::NTSTATUS __stdcall(size_t, uint32_t, void*);
    using SpSetContextAttributesFn = Windows::Win32::SystemServices::NTSTATUS __stdcall(size_t, uint32_t, void*, uint32_t);
    using SpChangeAccountPasswordFn = Windows::Win32::SystemServices::NTSTATUS __stdcall(Windows::Win32::Security::UNICODE_STRING*, Windows::Win32::Security::UNICODE_STRING*, Windows::Win32::Security::UNICODE_STRING*, Windows::Win32::Security::UNICODE_STRING*, uint8_t, Windows::Win32::Security::SecBufferDesc*);
    using SpQueryMetaDataFn = Windows::Win32::SystemServices::NTSTATUS __stdcall(size_t, Windows::Win32::Security::UNICODE_STRING*, uint32_t, uint32_t*, uint8_t**, size_t*);
    using SpExchangeMetaDataFn = Windows::Win32::SystemServices::NTSTATUS __stdcall(size_t, Windows::Win32::Security::UNICODE_STRING*, uint32_t, uint32_t, uint8_t*, size_t*);
    using SpGetCredUIContextFn = Windows::Win32::SystemServices::NTSTATUS __stdcall(size_t, ::win32::guid*, uint32_t*, uint8_t**);
    using SpUpdateCredentialsFn = Windows::Win32::SystemServices::NTSTATUS __stdcall(size_t, ::win32::guid*, uint32_t, uint8_t*);
    using SpValidateTargetInfoFn = Windows::Win32::SystemServices::NTSTATUS __stdcall(void**, void*, void*, uint32_t, Windows::Win32::Security::SECPKG_TARGETINFO*);
    using LSA_AP_POST_LOGON_USER = Windows::Win32::SystemServices::NTSTATUS __stdcall(Windows::Win32::Security::SECPKG_POST_LOGON_USER_INFO*);
    using SpGetRemoteCredGuardLogonBufferFn = Windows::Win32::SystemServices::NTSTATUS __stdcall(size_t, size_t, Windows::Win32::Security::UNICODE_STRING*, intptr_t*, Windows::Win32::Security::PLSA_REDIRECTED_LOGON_CALLBACK**, Windows::Win32::Security::PLSA_REDIRECTED_LOGON_CLEANUP_CALLBACK**, uint32_t*, void**);
    using SpGetRemoteCredGuardSupplementalCredsFn = Windows::Win32::SystemServices::NTSTATUS __stdcall(size_t, Windows::Win32::Security::UNICODE_STRING*, intptr_t*, Windows::Win32::Security::PLSA_REDIRECTED_LOGON_CALLBACK**, Windows::Win32::Security::PLSA_REDIRECTED_LOGON_CLEANUP_CALLBACK**, uint32_t*, void**);
    using SpGetTbalSupplementalCredsFn = Windows::Win32::SystemServices::NTSTATUS __stdcall(Windows::Win32::Kernel::LUID, uint32_t*, void**);
    using SpInstanceInitFn = Windows::Win32::SystemServices::NTSTATUS __stdcall(uint32_t, Windows::Win32::Security::SECPKG_DLL_FUNCTIONS*, void**);
    using SpInitUserModeContextFn = Windows::Win32::SystemServices::NTSTATUS __stdcall(size_t, Windows::Win32::Security::SecBuffer*);
    using SpMakeSignatureFn = Windows::Win32::SystemServices::NTSTATUS __stdcall(size_t, uint32_t, Windows::Win32::Security::SecBufferDesc*, uint32_t);
    using SpVerifySignatureFn = Windows::Win32::SystemServices::NTSTATUS __stdcall(size_t, Windows::Win32::Security::SecBufferDesc*, uint32_t, uint32_t*);
    using SpSealMessageFn = Windows::Win32::SystemServices::NTSTATUS __stdcall(size_t, uint32_t, Windows::Win32::Security::SecBufferDesc*, uint32_t);
    using SpUnsealMessageFn = Windows::Win32::SystemServices::NTSTATUS __stdcall(size_t, Windows::Win32::Security::SecBufferDesc*, uint32_t, uint32_t*);
    using SpGetContextTokenFn = Windows::Win32::SystemServices::NTSTATUS __stdcall(size_t, intptr_t*);
    using SpExportSecurityContextFn = Windows::Win32::SystemServices::NTSTATUS __stdcall(size_t, uint32_t, Windows::Win32::Security::SecBuffer*, intptr_t*);
    using SpImportSecurityContextFn = Windows::Win32::SystemServices::NTSTATUS __stdcall(Windows::Win32::Security::SecBuffer*, Windows::Win32::SystemServices::HANDLE, size_t*);
    using SpCompleteAuthTokenFn = Windows::Win32::SystemServices::NTSTATUS __stdcall(size_t, Windows::Win32::Security::SecBufferDesc*);
    using SpFormatCredentialsFn = Windows::Win32::SystemServices::NTSTATUS __stdcall(Windows::Win32::Security::SecBuffer*, Windows::Win32::Security::SecBuffer*);
    using SpMarshallSupplementalCredsFn = Windows::Win32::SystemServices::NTSTATUS __stdcall(uint32_t, uint8_t*, uint32_t*, void**);
    using SpLsaModeInitializeFn = Windows::Win32::SystemServices::NTSTATUS __stdcall(uint32_t, uint32_t*, Windows::Win32::Security::SECPKG_FUNCTION_TABLE**, uint32_t*);
    using SpUserModeInitializeFn = Windows::Win32::SystemServices::NTSTATUS __stdcall(uint32_t, uint32_t*, Windows::Win32::Security::SECPKG_USER_FUNCTION_TABLE**, uint32_t*);
    using KSEC_CREATE_CONTEXT_LIST = void* __stdcall(Windows::Win32::Security::KSEC_CONTEXT_TYPE);
    using KSEC_INSERT_LIST_ENTRY = void __stdcall(void*, Windows::Win32::Security::KSEC_LIST_ENTRY*);
    using KSEC_REFERENCE_LIST_ENTRY = Windows::Win32::SystemServices::NTSTATUS __stdcall(Windows::Win32::Security::KSEC_LIST_ENTRY*, uint32_t, uint8_t);
    using KSEC_DEREFERENCE_LIST_ENTRY = void __stdcall(Windows::Win32::Security::KSEC_LIST_ENTRY*, uint8_t*);
    using KSEC_SERIALIZE_WINNT_AUTH_DATA = Windows::Win32::SystemServices::NTSTATUS __stdcall(void*, uint32_t*, void**);
    using KSEC_SERIALIZE_SCHANNEL_AUTH_DATA = Windows::Win32::SystemServices::NTSTATUS __stdcall(void*, uint32_t*, void**);
    using PKSEC_CREATE_CONTEXT_LIST = void* __stdcall();
    using PKSEC_INSERT_LIST_ENTRY = void __stdcall();
    using PKSEC_REFERENCE_LIST_ENTRY = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using PKSEC_DEREFERENCE_LIST_ENTRY = void __stdcall();
    using PKSEC_SERIALIZE_WINNT_AUTH_DATA = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using PKSEC_SERIALIZE_SCHANNEL_AUTH_DATA = Windows::Win32::SystemServices::NTSTATUS __stdcall();
    using KSEC_LOCATE_PKG_BY_ID = void* __stdcall(uint32_t);
    using PKSEC_LOCATE_PKG_BY_ID = void* __stdcall();
    using KspInitPackageFn = Windows::Win32::SystemServices::NTSTATUS __stdcall(Windows::Win32::Security::SECPKG_KERNEL_FUNCTIONS*);
    using KspDeleteContextFn = Windows::Win32::SystemServices::NTSTATUS __stdcall(size_t, size_t*);
    using KspInitContextFn = Windows::Win32::SystemServices::NTSTATUS __stdcall(size_t, Windows::Win32::Security::SecBuffer*, size_t*);
    using KspMakeSignatureFn = Windows::Win32::SystemServices::NTSTATUS __stdcall(size_t, uint32_t, Windows::Win32::Security::SecBufferDesc*, uint32_t);
    using KspVerifySignatureFn = Windows::Win32::SystemServices::NTSTATUS __stdcall(size_t, Windows::Win32::Security::SecBufferDesc*, uint32_t, uint32_t*);
    using KspSealMessageFn = Windows::Win32::SystemServices::NTSTATUS __stdcall(size_t, uint32_t, Windows::Win32::Security::SecBufferDesc*, uint32_t);
    using KspUnsealMessageFn = Windows::Win32::SystemServices::NTSTATUS __stdcall(size_t, Windows::Win32::Security::SecBufferDesc*, uint32_t, uint32_t*);
    using KspGetTokenFn = Windows::Win32::SystemServices::NTSTATUS __stdcall(size_t, intptr_t*, void**);
    using KspQueryAttributesFn = Windows::Win32::SystemServices::NTSTATUS __stdcall(size_t, uint32_t, void*);
    using KspCompleteTokenFn = Windows::Win32::SystemServices::NTSTATUS __stdcall(size_t, Windows::Win32::Security::SecBufferDesc*);
    using KspMapHandleFn = Windows::Win32::SystemServices::NTSTATUS __stdcall(size_t, size_t*);
    using KspSetPagingModeFn = Windows::Win32::SystemServices::NTSTATUS __stdcall(uint8_t);
    using KspSerializeAuthDataFn = Windows::Win32::SystemServices::NTSTATUS __stdcall(void*, uint32_t*, void**);
    using SSL_EMPTY_CACHE_FN_A = Windows::Win32::SystemServices::BOOL __stdcall(int8_t*, uint32_t);
    using SSL_EMPTY_CACHE_FN_W = Windows::Win32::SystemServices::BOOL __stdcall(uint16_t*, uint32_t);
    using SSL_CRACK_CERTIFICATE_FN = Windows::Win32::SystemServices::BOOL __stdcall(uint8_t*, uint32_t, Windows::Win32::SystemServices::BOOL, Windows::Win32::Security::X509Certificate**);
    using SSL_FREE_CERTIFICATE_FN = void __stdcall(Windows::Win32::Security::X509Certificate*);
    using SslGetServerIdentityFn = int32_t __stdcall(uint8_t*, uint32_t, uint8_t**, uint32_t*, uint32_t);
    using SslGetExtensionsFn = int32_t __stdcall(uint8_t*, uint32_t, Windows::Win32::Security::SCH_EXTENSION_DATA*, uint8_t, uint32_t*, Windows::Win32::Security::SchGetExtensionsOptions);
    using PWLX_USE_CTRL_ALT_DEL = void __stdcall(Windows::Win32::SystemServices::HANDLE);
    using PWLX_SET_CONTEXT_POINTER = void __stdcall(Windows::Win32::SystemServices::HANDLE, void*);
    using PWLX_SAS_NOTIFY = void __stdcall(Windows::Win32::SystemServices::HANDLE, uint32_t);
    using PWLX_SET_TIMEOUT = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::SystemServices::HANDLE, uint32_t);
    using PWLX_ASSIGN_SHELL_PROTECTION = int32_t __stdcall(Windows::Win32::SystemServices::HANDLE, Windows::Win32::SystemServices::HANDLE, Windows::Win32::SystemServices::HANDLE, Windows::Win32::SystemServices::HANDLE);
    using PWLX_MESSAGE_BOX = int32_t __stdcall(Windows::Win32::SystemServices::HANDLE, Windows::Win32::WindowsAndMessaging::HWND, uint16_t*, uint16_t*, uint32_t);
    using PWLX_DIALOG_BOX = int32_t __stdcall(Windows::Win32::SystemServices::HANDLE, Windows::Win32::SystemServices::HANDLE, uint16_t*, Windows::Win32::WindowsAndMessaging::HWND, Windows::Win32::WindowsAndMessaging::DLGPROC*);
    using PWLX_DIALOG_BOX_INDIRECT = int32_t __stdcall(Windows::Win32::SystemServices::HANDLE, Windows::Win32::SystemServices::HANDLE, Windows::Win32::WindowsAndMessaging::DLGTEMPLATE*, Windows::Win32::WindowsAndMessaging::HWND, Windows::Win32::WindowsAndMessaging::DLGPROC*);
    using PWLX_DIALOG_BOX_PARAM = int32_t __stdcall(Windows::Win32::SystemServices::HANDLE, Windows::Win32::SystemServices::HANDLE, uint16_t*, Windows::Win32::WindowsAndMessaging::HWND, Windows::Win32::WindowsAndMessaging::DLGPROC*, Windows::Win32::WindowsAndMessaging::LPARAM);
    using PWLX_DIALOG_BOX_INDIRECT_PARAM = int32_t __stdcall(Windows::Win32::SystemServices::HANDLE, Windows::Win32::SystemServices::HANDLE, Windows::Win32::WindowsAndMessaging::DLGTEMPLATE*, Windows::Win32::WindowsAndMessaging::HWND, Windows::Win32::WindowsAndMessaging::DLGPROC*, Windows::Win32::WindowsAndMessaging::LPARAM);
    using PWLX_SWITCH_DESKTOP_TO_USER = int32_t __stdcall(Windows::Win32::SystemServices::HANDLE);
    using PWLX_SWITCH_DESKTOP_TO_WINLOGON = int32_t __stdcall(Windows::Win32::SystemServices::HANDLE);
    using PWLX_CHANGE_PASSWORD_NOTIFY = int32_t __stdcall(Windows::Win32::SystemServices::HANDLE, Windows::Win32::Security::WLX_MPR_NOTIFY_INFO*, uint32_t);
    using PWLX_GET_SOURCE_DESKTOP = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::SystemServices::HANDLE, Windows::Win32::Security::WLX_DESKTOP**);
    using PWLX_SET_RETURN_DESKTOP = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::SystemServices::HANDLE, Windows::Win32::Security::WLX_DESKTOP*);
    using PWLX_CREATE_USER_DESKTOP = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::SystemServices::HANDLE, Windows::Win32::SystemServices::HANDLE, uint32_t, uint16_t*, Windows::Win32::Security::WLX_DESKTOP**);
    using PWLX_CHANGE_PASSWORD_NOTIFY_EX = int32_t __stdcall(Windows::Win32::SystemServices::HANDLE, Windows::Win32::Security::WLX_MPR_NOTIFY_INFO*, uint32_t, uint16_t*, void*);
    using PWLX_CLOSE_USER_DESKTOP = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::SystemServices::HANDLE, Windows::Win32::Security::WLX_DESKTOP*, Windows::Win32::SystemServices::HANDLE);
    using PWLX_SET_OPTION = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::SystemServices::HANDLE, uint32_t, size_t, size_t*);
    using PWLX_GET_OPTION = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::SystemServices::HANDLE, uint32_t, size_t*);
    using PWLX_WIN31_MIGRATE = void __stdcall(Windows::Win32::SystemServices::HANDLE);
    using PWLX_QUERY_CLIENT_CREDENTIALS = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::Security::WLX_CLIENT_CREDENTIALS_INFO_V1_0*);
    using PWLX_QUERY_IC_CREDENTIALS = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::Security::WLX_CLIENT_CREDENTIALS_INFO_V1_0*);
    using PWLX_QUERY_TS_LOGON_CREDENTIALS = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::Security::WLX_CLIENT_CREDENTIALS_INFO_V2_0*);
    using PWLX_DISCONNECT = Windows::Win32::SystemServices::BOOL __stdcall();
    using PWLX_QUERY_TERMINAL_SERVICES_DATA = uint32_t __stdcall(Windows::Win32::SystemServices::HANDLE, Windows::Win32::Security::WLX_TERMINAL_SERVICES_DATA*, uint16_t*, uint16_t*);
    using PWLX_QUERY_CONSOLESWITCH_CREDENTIALS = uint32_t __stdcall(Windows::Win32::Security::WLX_CONSOLESWITCH_CREDENTIALS_INFO_V1_0*);
    using PFNMSGECALLBACK = uint32_t __stdcall(Windows::Win32::SystemServices::BOOL, uint16_t*);
    using PF_NPAddConnection = uint32_t __stdcall(Windows::Win32::Security::NETRESOURCEW*, uint16_t*, uint16_t*);
    using PF_NPAddConnection3 = uint32_t __stdcall(Windows::Win32::WindowsAndMessaging::HWND, Windows::Win32::Security::NETRESOURCEW*, uint16_t*, uint16_t*, uint32_t);
    using PF_NPAddConnection4 = uint32_t __stdcall(Windows::Win32::WindowsAndMessaging::HWND, Windows::Win32::Security::NETRESOURCEW*, void*, uint32_t, uint32_t, uint8_t*, uint32_t);
    using PF_NPCancelConnection = uint32_t __stdcall(uint16_t*, Windows::Win32::SystemServices::BOOL);
    using PF_NPGetConnection = uint32_t __stdcall(uint16_t*, uint16_t*, uint32_t*);
    using PF_NPGetConnection3 = uint32_t __stdcall(uint16_t*, uint32_t, void*, uint32_t*);
    using PF_NPGetUniversalName = uint32_t __stdcall(uint16_t*, uint32_t, void*, uint32_t*);
    using PF_NPGetConnectionPerformance = uint32_t __stdcall(uint16_t*, Windows::Win32::Security::NETCONNECTINFOSTRUCT*);
    using PF_NPOpenEnum = uint32_t __stdcall(uint32_t, uint32_t, uint32_t, Windows::Win32::Security::NETRESOURCEW*, intptr_t*);
    using PF_NPEnumResource = uint32_t __stdcall(Windows::Win32::SystemServices::HANDLE, uint32_t*, void*, uint32_t*);
    using PF_NPCloseEnum = uint32_t __stdcall(Windows::Win32::SystemServices::HANDLE);
    using PF_NPGetCaps = uint32_t __stdcall(uint32_t);
    using PF_NPGetUser = uint32_t __stdcall(uint16_t*, uint16_t*, uint32_t*);
    using PF_NPGetPersistentUseOptionsForConnection = uint32_t __stdcall(uint16_t*, uint8_t*, uint32_t, uint8_t*, uint32_t*);
    using PF_NPDeviceMode = uint32_t __stdcall(Windows::Win32::WindowsAndMessaging::HWND);
    using PF_NPSearchDialog = uint32_t __stdcall(Windows::Win32::WindowsAndMessaging::HWND, Windows::Win32::Security::NETRESOURCEW*, void*, uint32_t, uint32_t*);
    using PF_NPGetResourceParent = uint32_t __stdcall(Windows::Win32::Security::NETRESOURCEW*, void*, uint32_t*);
    using PF_NPGetResourceInformation = uint32_t __stdcall(Windows::Win32::Security::NETRESOURCEW*, void*, uint32_t*, uint16_t**);
    using PF_NPFormatNetworkName = uint32_t __stdcall(uint16_t*, uint16_t*, uint32_t*, uint32_t, uint32_t);
    using PF_NPGetPropertyText = uint32_t __stdcall(uint32_t, uint32_t, uint16_t*, uint16_t*, uint32_t, uint32_t);
    using PF_NPPropertyDialog = uint32_t __stdcall(Windows::Win32::WindowsAndMessaging::HWND, uint32_t, uint32_t, uint16_t*, uint32_t);
    using PF_NPGetDirectoryType = uint32_t __stdcall(uint16_t*, int32_t*, Windows::Win32::SystemServices::BOOL);
    using PF_NPDirectoryNotify = uint32_t __stdcall(Windows::Win32::WindowsAndMessaging::HWND, uint16_t*, uint32_t);
    using PF_NPLogonNotify = uint32_t __stdcall(Windows::Win32::Kernel::LUID*, uint16_t*, void*, uint16_t*, void*, uint16_t*, void*, uint16_t**);
    using PF_NPPasswordChangeNotify = uint32_t __stdcall(uint16_t*, void*, uint16_t*, void*, uint16_t*, void*, uint32_t);
    using PF_AddConnectNotify = uint32_t __stdcall(Windows::Win32::Security::NOTIFYINFO*, Windows::Win32::Security::NOTIFYADD*);
    using PF_CancelConnectNotify = uint32_t __stdcall(Windows::Win32::Security::NOTIFYINFO*, Windows::Win32::Security::NOTIFYCANCEL*);
    using PF_NPFMXGetPermCaps = uint32_t __stdcall(uint16_t*);
    using PF_NPFMXEditPerm = uint32_t __stdcall(uint16_t*, Windows::Win32::WindowsAndMessaging::HWND, uint32_t);
    using PF_NPFMXGetPermHelp = uint32_t __stdcall(uint16_t*, uint32_t, Windows::Win32::SystemServices::BOOL, void*, uint32_t*, uint32_t*);
    using PFN_AUTHZ_DYNAMIC_ACCESS_CHECK = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::Security::AUTHZ_CLIENT_CONTEXT_HANDLE__*, Windows::Win32::Security::ACE_HEADER*, void*, int32_t*);
    using PFN_AUTHZ_COMPUTE_DYNAMIC_GROUPS = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::Security::AUTHZ_CLIENT_CONTEXT_HANDLE__*, void*, Windows::Win32::Security::SID_AND_ATTRIBUTES**, uint32_t*, Windows::Win32::Security::SID_AND_ATTRIBUTES**, uint32_t*);
    using PFN_AUTHZ_FREE_DYNAMIC_GROUPS = void __stdcall(Windows::Win32::Security::SID_AND_ATTRIBUTES*);
    using PFN_AUTHZ_GET_CENTRAL_ACCESS_POLICY = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::Security::AUTHZ_CLIENT_CONTEXT_HANDLE__*, void*, void*, int32_t*, void**);
    using PFN_AUTHZ_FREE_CENTRAL_ACCESS_POLICY = void __stdcall(void*);
    using FN_PROGRESS = void __stdcall(uint16_t*, uint32_t, Windows::Win32::Security::PROG_INVOKE_SETTING*, void*, Windows::Win32::SystemServices::BOOL);
    using PFNREADOBJECTSECURITY = int32_t __stdcall(uint16_t*, uint32_t, void**, Windows::Win32::WindowsAndMessaging::LPARAM);
    using PFNWRITEOBJECTSECURITY = int32_t __stdcall(uint16_t*, uint32_t, void*, Windows::Win32::WindowsAndMessaging::LPARAM);
    using PFNDSCREATEISECINFO = int32_t __stdcall(uint16_t*, uint16_t*, uint32_t, Windows::Win32::Security::ISecurityInformation**, Windows::Win32::Security::PFNREADOBJECTSECURITY*, Windows::Win32::Security::PFNWRITEOBJECTSECURITY*, Windows::Win32::WindowsAndMessaging::LPARAM);
    using PFNDSCREATEISECINFOEX = int32_t __stdcall(uint16_t*, uint16_t*, uint16_t*, uint16_t*, uint16_t*, uint32_t, Windows::Win32::Security::ISecurityInformation**, Windows::Win32::Security::PFNREADOBJECTSECURITY*, Windows::Win32::Security::PFNWRITEOBJECTSECURITY*, Windows::Win32::WindowsAndMessaging::LPARAM);
    using PFNDSCREATESECPAGE = int32_t __stdcall(uint16_t*, uint16_t*, uint32_t, Windows::Win32::Controls::HPROPSHEETPAGE*, Windows::Win32::Security::PFNREADOBJECTSECURITY*, Windows::Win32::Security::PFNWRITEOBJECTSECURITY*, Windows::Win32::WindowsAndMessaging::LPARAM);
    using PFNDSEDITSECURITY = int32_t __stdcall(Windows::Win32::WindowsAndMessaging::HWND, uint16_t*, uint16_t*, uint32_t, uint16_t*, Windows::Win32::Security::PFNREADOBJECTSECURITY*, Windows::Win32::Security::PFNWRITEOBJECTSECURITY*, Windows::Win32::WindowsAndMessaging::LPARAM);
    using FNCERTSRVISSERVERONLINEW = int32_t __stdcall(uint16_t*, int32_t*);
    using FNCERTSRVBACKUPGETDYNAMICFILELISTW = int32_t __stdcall(void*, uint16_t**, uint32_t*);
    using FNCERTSRVBACKUPPREPAREW = int32_t __stdcall(uint16_t*, uint32_t, uint32_t, void**);
    using FNCERTSRVBACKUPGETDATABASENAMESW = int32_t __stdcall(void*, uint16_t**, uint32_t*);
    using FNCERTSRVBACKUPOPENFILEW = int32_t __stdcall(void*, uint16_t*, uint32_t, Windows::Win32::SystemServices::LARGE_INTEGER*);
    using FNCERTSRVBACKUPREAD = int32_t __stdcall(void*, void*, uint32_t, uint32_t*);
    using FNCERTSRVBACKUPCLOSE = int32_t __stdcall(void*);
    using FNCERTSRVBACKUPGETBACKUPLOGSW = int32_t __stdcall(void*, uint16_t**, uint32_t*);
    using FNCERTSRVBACKUPTRUNCATELOGS = int32_t __stdcall(void*);
    using FNCERTSRVBACKUPEND = int32_t __stdcall(void*);
    using FNCERTSRVBACKUPFREE = void __stdcall(void*);
    using FNCERTSRVRESTOREGETDATABASELOCATIONSW = int32_t __stdcall(void*, uint16_t**, uint32_t*);
    using FNCERTSRVRESTOREPREPAREW = int32_t __stdcall(uint16_t*, uint32_t, void**);
    using FNCERTSRVRESTOREREGISTERW = int32_t __stdcall(void*, uint16_t*, uint16_t*, Windows::Win32::Security::CSEDB_RSTMAPW*, int32_t, uint16_t*, uint32_t, uint32_t);
    using FNCERTSRVRESTOREREGISTERCOMPLETE = int32_t __stdcall(void*, int32_t);
    using FNCERTSRVRESTOREEND = int32_t __stdcall(void*);
    using FNCERTSRVSERVERCONTROLW = int32_t __stdcall(uint16_t*, uint32_t, uint32_t*, uint8_t**);
    using FNIMPORTPFXTOPROVIDER = int32_t __stdcall(Windows::Win32::WindowsAndMessaging::HWND, uint8_t*, uint32_t, Windows::Win32::Security::ImportPFXFlags, uint16_t*, uint16_t*, uint16_t*, uint16_t*, uint16_t*, uint16_t*, uint32_t*, Windows::Win32::Security::CERT_CONTEXT***);
    using FNIMPORTPFXTOPROVIDERFREEDATA = void __stdcall(uint32_t, Windows::Win32::Security::CERT_CONTEXT**);
    using PFNCryptStreamOutputCallback = int32_t __stdcall(void*, uint8_t*, size_t, Windows::Win32::SystemServices::BOOL);
    using PFNCryptStreamOutputCallbackEx = int32_t __stdcall(void*, uint8_t*, size_t, Windows::Win32::Security::NCRYPT_DESCRIPTOR_HANDLE__*, Windows::Win32::SystemServices::BOOL);
    using PFN_CRYPT_XML_WRITE_CALLBACK = int32_t __stdcall(void*, uint8_t*, uint32_t);
    using PFN_CRYPT_XML_DATA_PROVIDER_READ = int32_t __stdcall(void*, uint8_t*, uint32_t, uint32_t*);
    using PFN_CRYPT_XML_DATA_PROVIDER_CLOSE = int32_t __stdcall(void*);
    using PFN_CRYPT_XML_CREATE_TRANSFORM = int32_t __stdcall(Windows::Win32::Security::CRYPT_XML_ALGORITHM*, Windows::Win32::Security::CRYPT_XML_DATA_PROVIDER*, Windows::Win32::Security::CRYPT_XML_DATA_PROVIDER*);
    using PFN_CRYPT_XML_ENUM_ALG_INFO = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::Security::CRYPT_XML_ALGORITHM_INFO*, void*);
    using CryptXmlDllGetInterface = int32_t __stdcall(uint32_t, Windows::Win32::Security::CRYPT_XML_ALGORITHM_INFO*, Windows::Win32::Security::CRYPT_XML_CRYPTOGRAPHIC_INTERFACE*);
    using CryptXmlDllEncodeAlgorithm = int32_t __stdcall(Windows::Win32::Security::CRYPT_XML_ALGORITHM_INFO*, Windows::Win32::Security::CRYPT_XML_CHARSET, void*, Windows::Win32::Security::PFN_CRYPT_XML_WRITE_CALLBACK*);
    using CryptXmlDllCreateDigest = int32_t __stdcall(Windows::Win32::Security::CRYPT_XML_ALGORITHM*, uint32_t*, void**);
    using CryptXmlDllDigestData = int32_t __stdcall(void*, uint8_t*, uint32_t);
    using CryptXmlDllFinalizeDigest = int32_t __stdcall(void*, uint8_t*, uint32_t);
    using CryptXmlDllCloseDigest = int32_t __stdcall(void*);
    using CryptXmlDllSignData = int32_t __stdcall(Windows::Win32::Security::CRYPT_XML_ALGORITHM*, size_t, uint32_t, uint8_t*, uint32_t, uint8_t*, uint32_t, uint32_t*);
    using CryptXmlDllVerifySignature = int32_t __stdcall(Windows::Win32::Security::CRYPT_XML_ALGORITHM*, void*, uint8_t*, uint32_t, uint8_t*, uint32_t);
    using CryptXmlDllGetAlgorithmInfo = int32_t __stdcall(Windows::Win32::Security::CRYPT_XML_ALGORITHM*, Windows::Win32::Security::CRYPT_XML_ALGORITHM_INFO**);
    using CryptXmlDllEncodeKeyValue = int32_t __stdcall(size_t, Windows::Win32::Security::CRYPT_XML_CHARSET, void*, Windows::Win32::Security::PFN_CRYPT_XML_WRITE_CALLBACK*);
    using CryptXmlDllCreateKey = int32_t __stdcall(Windows::Win32::Security::CRYPT_XML_BLOB*, void**);
    using PFNCMFILTERPROC = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::Security::CERT_CONTEXT*, Windows::Win32::WindowsAndMessaging::LPARAM, uint32_t, uint32_t);
    using PFNCMHOOKPROC = uint32_t __stdcall(Windows::Win32::WindowsAndMessaging::HWND, uint32_t, Windows::Win32::WindowsAndMessaging::WPARAM, Windows::Win32::WindowsAndMessaging::LPARAM);
    using PFNTRUSTHELPER = int32_t __stdcall(Windows::Win32::Security::CERT_CONTEXT*, Windows::Win32::WindowsAndMessaging::LPARAM, Windows::Win32::SystemServices::BOOL, uint8_t*);
    using PFN_CPD_MEM_ALLOC = void* __stdcall(uint32_t);
    using PFN_CPD_MEM_FREE = void __stdcall(void*);
    using PFN_CPD_ADD_STORE = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::Security::CRYPT_PROVIDER_DATA*, void*);
    using PFN_CPD_ADD_SGNR = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::Security::CRYPT_PROVIDER_DATA*, Windows::Win32::SystemServices::BOOL, uint32_t, Windows::Win32::Security::CRYPT_PROVIDER_SGNR*);
    using PFN_CPD_ADD_CERT = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::Security::CRYPT_PROVIDER_DATA*, uint32_t, Windows::Win32::SystemServices::BOOL, uint32_t, Windows::Win32::Security::CERT_CONTEXT*);
    using PFN_CPD_ADD_PRIVDATA = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::Security::CRYPT_PROVIDER_DATA*, Windows::Win32::Security::CRYPT_PROVIDER_PRIVDATA*);
    using PFN_PROVIDER_INIT_CALL = int32_t __stdcall(Windows::Win32::Security::CRYPT_PROVIDER_DATA*);
    using PFN_PROVIDER_OBJTRUST_CALL = int32_t __stdcall(Windows::Win32::Security::CRYPT_PROVIDER_DATA*);
    using PFN_PROVIDER_SIGTRUST_CALL = int32_t __stdcall(Windows::Win32::Security::CRYPT_PROVIDER_DATA*);
    using PFN_PROVIDER_CERTTRUST_CALL = int32_t __stdcall(Windows::Win32::Security::CRYPT_PROVIDER_DATA*);
    using PFN_PROVIDER_FINALPOLICY_CALL = int32_t __stdcall(Windows::Win32::Security::CRYPT_PROVIDER_DATA*);
    using PFN_PROVIDER_TESTFINALPOLICY_CALL = int32_t __stdcall(Windows::Win32::Security::CRYPT_PROVIDER_DATA*);
    using PFN_PROVIDER_CLEANUP_CALL = int32_t __stdcall(Windows::Win32::Security::CRYPT_PROVIDER_DATA*);
    using PFN_PROVIDER_CERTCHKPOLICY_CALL = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::Security::CRYPT_PROVIDER_DATA*, uint32_t, Windows::Win32::SystemServices::BOOL, uint32_t);
    using PFN_PROVUI_CALL = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::WindowsAndMessaging::HWND, Windows::Win32::Security::CRYPT_PROVIDER_DATA*);
    using PFN_ALLOCANDFILLDEFUSAGE = Windows::Win32::SystemServices::BOOL __stdcall(int8_t*, Windows::Win32::Security::CRYPT_PROVIDER_DEFUSAGE*);
    using PFN_FREEDEFUSAGE = Windows::Win32::SystemServices::BOOL __stdcall(int8_t*, Windows::Win32::Security::CRYPT_PROVIDER_DEFUSAGE*);
    using PFNCFILTERPROC = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::Security::CERT_CONTEXT*, int32_t*, void*);
    using pCryptSIPGetSignedDataMsg = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::Security::SIP_SUBJECTINFO*, uint32_t*, uint32_t, uint32_t*, uint8_t*);
    using pCryptSIPPutSignedDataMsg = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::Security::SIP_SUBJECTINFO*, uint32_t, uint32_t*, uint32_t, uint8_t*);
    using pCryptSIPCreateIndirectData = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::Security::SIP_SUBJECTINFO*, uint32_t*, Windows::Win32::Security::SIP_INDIRECT_DATA*);
    using pCryptSIPVerifyIndirectData = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::Security::SIP_SUBJECTINFO*, Windows::Win32::Security::SIP_INDIRECT_DATA*);
    using pCryptSIPRemoveSignedDataMsg = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::Security::SIP_SUBJECTINFO*, uint32_t);
    using pfnIsFileSupported = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::SystemServices::HANDLE, ::win32::guid*);
    using pfnIsFileSupportedName = Windows::Win32::SystemServices::BOOL __stdcall(uint16_t*, ::win32::guid*);
    using pCryptSIPGetCaps = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::Security::SIP_SUBJECTINFO*, Windows::Win32::Security::SIP_CAP_SET_V3*);
    using pCryptSIPGetSealedDigest = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::Security::SIP_SUBJECTINFO*, uint8_t*, uint32_t, uint8_t*, uint32_t*);
    using PFN_CDF_PARSE_ERROR_CALLBACK = void __stdcall(uint32_t, uint32_t, uint16_t*);
    using PFSCE_QUERY_INFO = uint32_t __stdcall(void*, Windows::Win32::Security::SCESVC_INFO_TYPE, int8_t*, Windows::Win32::SystemServices::BOOL, void**, uint32_t*);
    using PFSCE_SET_INFO = uint32_t __stdcall(void*, Windows::Win32::Security::SCESVC_INFO_TYPE, int8_t*, Windows::Win32::SystemServices::BOOL, void*);
    using PFSCE_FREE_INFO = uint32_t __stdcall(void*);
    using PFSCE_LOG_INFO = uint32_t __stdcall(int32_t, uint32_t, int8_t*);
    using PF_ConfigAnalyzeService = uint32_t __stdcall(Windows::Win32::Security::SCESVC_CALLBACK_INFO*);
    using PF_UpdateService = uint32_t __stdcall(Windows::Win32::Security::SCESVC_CALLBACK_INFO*, Windows::Win32::Security::SCESVC_CONFIGURATION_INFO*);
#pragma endregion delegates

}
namespace win32::_impl_
{
#pragma region guids
    template <> inline constexpr guid guid_v<Windows::Win32::Security::AsyncIAssociatedIdentityProvider>{ 0x2834D6ED,0x297E,0x4E72,{ 0x8A,0x51,0x96,0x1E,0x86,0xF0,0x51,0x52 } }; // 2834D6ED-297E-4E72-8A51-961E86F05152
    template <> inline constexpr guid guid_v<Windows::Win32::Security::AsyncIConnectedIdentityProvider>{ 0x9CE55141,0xBCE9,0x4E15,{ 0x82,0x4D,0x43,0xD7,0x9F,0x51,0x2F,0x93 } }; // 9CE55141-BCE9-4E15-824D-43D79F512F93
    template <> inline constexpr guid guid_v<Windows::Win32::Security::AsyncIIdentityAdvise>{ 0x3AB4C8DA,0xD038,0x4830,{ 0x8D,0xD9,0x32,0x53,0xC5,0x5A,0x12,0x7F } }; // 3AB4C8DA-D038-4830-8DD9-3253C55A127F
    template <> inline constexpr guid guid_v<Windows::Win32::Security::AsyncIIdentityAuthentication>{ 0xF9A2F918,0xFECA,0x4E9C,{ 0x96,0x33,0x61,0xCB,0xF1,0x3E,0xD3,0x4D } }; // F9A2F918-FECA-4E9C-9633-61CBF13ED34D
    template <> inline constexpr guid guid_v<Windows::Win32::Security::AsyncIIdentityProvider>{ 0xC6FC9901,0xC433,0x4646,{ 0x8F,0x48,0x4E,0x46,0x87,0xAA,0xE2,0xA0 } }; // C6FC9901-C433-4646-8F48-4E4687AAE2A0
    template <> inline constexpr guid guid_v<Windows::Win32::Security::AsyncIIdentityStore>{ 0xEEFA1616,0x48DE,0x4872,{ 0xAA,0x64,0x6E,0x62,0x06,0x53,0x5A,0x51 } }; // EEFA1616-48DE-4872-AA64-6E6206535A51
    template <> inline constexpr guid guid_v<Windows::Win32::Security::AsyncIIdentityStoreEx>{ 0xFCA3AF9A,0x8A07,0x4EAE,{ 0x86,0x32,0xEC,0x3D,0xE6,0x58,0xA3,0x6A } }; // FCA3AF9A-8A07-4EAE-8632-EC3DE658A36A
    template <> inline constexpr guid guid_v<Windows::Win32::Security::AzAuthorizationStore>{ 0xB2BCFF59,0xA757,0x4B0B,{ 0xA1,0xBC,0xEA,0x69,0x98,0x1D,0xA6,0x9E } }; // B2BCFF59-A757-4B0B-A1BC-EA69981DA69E
    template <> inline constexpr guid guid_v<Windows::Win32::Security::AzBizRuleContext>{ 0x5C2DC96F,0x8D51,0x434B,{ 0xB3,0x3C,0x37,0x9B,0xCC,0xAE,0x77,0xC3 } }; // 5C2DC96F-8D51-434B-B33C-379BCCAE77C3
    template <> inline constexpr guid guid_v<Windows::Win32::Security::AzPrincipalLocator>{ 0x483AFB5D,0x70DF,0x4E16,{ 0xAB,0xDC,0xA1,0xDE,0x4D,0x01,0x5A,0x3E } }; // 483AFB5D-70DF-4E16-ABDC-A1DE4D015A3E
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CAlternativeName>{ 0x884E2013,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E2013-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CAlternativeNames>{ 0x884E2014,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E2014-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CBinaryConverter>{ 0x884E2002,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E2002-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CCertAdmin>{ 0x37EABAF0,0x7FB6,0x11D0,{ 0x88,0x17,0x00,0xA0,0xC9,0x03,0xB8,0x3C } }; // 37EABAF0-7FB6-11D0-8817-00A0C903B83C
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CCertConfig>{ 0x372FCE38,0x4324,0x11D0,{ 0x88,0x10,0x00,0xA0,0xC9,0x03,0xB8,0x3C } }; // 372FCE38-4324-11D0-8810-00A0C903B83C
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CCertEncodeAltName>{ 0x1CFC4CDA,0x1271,0x11D1,{ 0x9B,0xD4,0x00,0xC0,0x4F,0xB6,0x83,0xFA } }; // 1CFC4CDA-1271-11D1-9BD4-00C04FB683FA
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CCertEncodeBitString>{ 0x6D6B3CD8,0x1278,0x11D1,{ 0x9B,0xD4,0x00,0xC0,0x4F,0xB6,0x83,0xFA } }; // 6D6B3CD8-1278-11D1-9BD4-00C04FB683FA
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CCertEncodeCRLDistInfo>{ 0x01FA60A0,0xBBFF,0x11D0,{ 0x88,0x25,0x00,0xA0,0xC9,0x03,0xB8,0x3C } }; // 01FA60A0-BBFF-11D0-8825-00A0C903B83C
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CCertEncodeDateArray>{ 0x301F77B0,0xA470,0x11D0,{ 0x88,0x21,0x00,0xA0,0xC9,0x03,0xB8,0x3C } }; // 301F77B0-A470-11D0-8821-00A0C903B83C
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CCertEncodeLongArray>{ 0x4E0680A0,0xA0A2,0x11D0,{ 0x88,0x21,0x00,0xA0,0xC9,0x03,0xB8,0x3C } }; // 4E0680A0-A0A2-11D0-8821-00A0C903B83C
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CCertEncodeStringArray>{ 0x19A76FE0,0x7494,0x11D0,{ 0x88,0x16,0x00,0xA0,0xC9,0x03,0xB8,0x3C } }; // 19A76FE0-7494-11D0-8816-00A0C903B83C
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CCertGetConfig>{ 0xC6CC49B0,0xCE17,0x11D0,{ 0x88,0x33,0x00,0xA0,0xC9,0x03,0xB8,0x3C } }; // C6CC49B0-CE17-11D0-8833-00A0C903B83C
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CCertProperties>{ 0x884E202F,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E202F-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CCertProperty>{ 0x884E202E,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E202E-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CCertPropertyArchived>{ 0x884E2037,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E2037-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CCertPropertyArchivedKeyHash>{ 0x884E203B,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E203B-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CCertPropertyAutoEnroll>{ 0x884E2032,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E2032-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CCertPropertyBackedUp>{ 0x884E2038,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E2038-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CCertPropertyDescription>{ 0x884E2031,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E2031-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CCertPropertyEnrollment>{ 0x884E2039,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E2039-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CCertPropertyEnrollmentPolicyServer>{ 0x884E204C,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E204C-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CCertPropertyFriendlyName>{ 0x884E2030,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E2030-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CCertPropertyKeyProvInfo>{ 0x884E2036,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E2036-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CCertPropertyRenewal>{ 0x884E203A,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E203A-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CCertPropertyRequestOriginator>{ 0x884E2033,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E2033-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CCertPropertySHA1Hash>{ 0x884E2034,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E2034-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CCertRequest>{ 0x98AFF3F0,0x5524,0x11D0,{ 0x88,0x12,0x00,0xA0,0xC9,0x03,0xB8,0x3C } }; // 98AFF3F0-5524-11D0-8812-00A0C903B83C
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CCertServerExit>{ 0x4C4A5E40,0x732C,0x11D0,{ 0x88,0x16,0x00,0xA0,0xC9,0x03,0xB8,0x3C } }; // 4C4A5E40-732C-11D0-8816-00A0C903B83C
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CCertServerPolicy>{ 0xAA000926,0xFFBE,0x11CF,{ 0x88,0x00,0x00,0xA0,0xC9,0x03,0xB8,0x3C } }; // AA000926-FFBE-11CF-8800-00A0C903B83C
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CCertSrvSetup>{ 0x961F180F,0xF55C,0x413D,{ 0xA9,0xB3,0x7D,0x2A,0xF4,0xD8,0xE4,0x2F } }; // 961F180F-F55C-413D-A9B3-7D2AF4D8E42F
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CCertSrvSetupKeyInformation>{ 0x38373906,0x5433,0x4633,{ 0xB0,0xFB,0x29,0xB7,0xE7,0x82,0x62,0xE1 } }; // 38373906-5433-4633-B0FB-29B7E78262E1
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CCertView>{ 0xA12D0F7A,0x1E84,0x11D1,{ 0x9B,0xD6,0x00,0xC0,0x4F,0xB6,0x83,0xFA } }; // A12D0F7A-1E84-11D1-9BD6-00C04FB683FA
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CCertificateAttestationChallenge>{ 0x1362ADA1,0xEB60,0x456A,{ 0xB6,0xE1,0x11,0x80,0x50,0xDB,0x74,0x1B } }; // 1362ADA1-EB60-456A-B6E1-118050DB741B
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CCertificateEnrollmentPolicyServerSetup>{ 0xAFE2FA32,0x41B1,0x459D,{ 0xA5,0xDE,0x49,0xAD,0xD8,0xA7,0x21,0x82 } }; // AFE2FA32-41B1-459D-A5DE-49ADD8A72182
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CCertificateEnrollmentServerSetup>{ 0x9902F3BC,0x88AF,0x4CF8,{ 0xAE,0x62,0x71,0x40,0x53,0x15,0x52,0xB6 } }; // 9902F3BC-88AF-4CF8-AE62-7140531552B6
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CCertificatePolicies>{ 0x884E201F,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E201F-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CCertificatePolicy>{ 0x884E201E,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E201E-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CCryptAttribute>{ 0x884E202C,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E202C-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CCryptAttributes>{ 0x884E202D,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E202D-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CCspInformation>{ 0x884E2007,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E2007-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CCspInformations>{ 0x884E2008,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E2008-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CCspStatus>{ 0x884E2009,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E2009-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CEnroll>{ 0x43F8F289,0x7A20,0x11D0,{ 0x8F,0x06,0x00,0xC0,0x4F,0xC2,0x95,0xE1 } }; // 43F8F289-7A20-11D0-8F06-00C04FC295E1
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CEnroll2>{ 0x127698E4,0xE730,0x4E5C,{ 0xA2,0xB1,0x21,0x49,0x0A,0x70,0xC8,0xA1 } }; // 127698E4-E730-4E5C-A2B1-21490A70C8A1
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CIdentityProfileHandler>{ 0xECF5BF46,0xE3B6,0x449A,{ 0xB5,0x6B,0x43,0xF5,0x8F,0x86,0x78,0x14 } }; // ECF5BF46-E3B6-449A-B56B-43F58F867814
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CMSCEPSetup>{ 0xAA4F5C02,0x8E7C,0x49C4,{ 0x94,0xFA,0x67,0xA5,0xCC,0x5E,0xAD,0xB4 } }; // AA4F5C02-8E7C-49C4-94FA-67A5CC5EADB4
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CObjectId>{ 0x884E2000,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E2000-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CObjectIds>{ 0x884E2001,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E2001-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CPolicyQualifier>{ 0x884E201C,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E201C-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CPolicyQualifiers>{ 0x884E201D,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E201D-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CSignerCertificate>{ 0x884E203D,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E203D-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CSmimeCapabilities>{ 0x884E201A,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E201A-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CSmimeCapability>{ 0x884E2019,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E2019-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CX500DistinguishedName>{ 0x884E2003,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E2003-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CX509Attribute>{ 0x884E2022,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E2022-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CX509AttributeArchiveKey>{ 0x884E2027,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E2027-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CX509AttributeArchiveKeyHash>{ 0x884E2028,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E2028-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CX509AttributeClientId>{ 0x884E2025,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E2025-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CX509AttributeCspProvider>{ 0x884E202B,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E202B-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CX509AttributeExtensions>{ 0x884E2024,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E2024-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CX509AttributeOSVersion>{ 0x884E202A,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E202A-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CX509AttributeRenewalCertificate>{ 0x884E2026,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E2026-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CX509Attributes>{ 0x884E2023,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E2023-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CX509CertificateRequestCertificate>{ 0x884E2043,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E2043-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CX509CertificateRequestCmc>{ 0x884E2045,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E2045-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CX509CertificateRequestPkcs10>{ 0x884E2042,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E2042-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CX509CertificateRequestPkcs7>{ 0x884E2044,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E2044-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CX509CertificateRevocationList>{ 0x884E2060,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E2060-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CX509CertificateRevocationListEntries>{ 0x884E205F,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E205F-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CX509CertificateRevocationListEntry>{ 0x884E205E,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E205E-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CX509CertificateTemplateADWritable>{ 0x8336E323,0x2E6A,0x4A04,{ 0x93,0x7C,0x54,0x8F,0x68,0x18,0x39,0xB3 } }; // 8336E323-2E6A-4A04-937C-548F681839B3
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CX509EndorsementKey>{ 0x11A25A1D,0xB9A3,0x4EDD,{ 0xAF,0x83,0x3B,0x59,0xAD,0xBE,0xD3,0x61 } }; // 11A25A1D-B9A3-4EDD-AF83-3B59ADBED361
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CX509Enrollment>{ 0x884E2046,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E2046-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CX509EnrollmentHelper>{ 0x884E2050,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E2050-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CX509EnrollmentPolicyActiveDirectory>{ 0x91F39027,0x217F,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 91F39027-217F-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CX509EnrollmentPolicyWebService>{ 0x91F39028,0x217F,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 91F39028-217F-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CX509EnrollmentWebClassFactory>{ 0x884E2049,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E2049-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CX509Extension>{ 0x884E200D,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E200D-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CX509ExtensionAlternativeNames>{ 0x884E2015,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E2015-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CX509ExtensionAuthorityKeyIdentifier>{ 0x884E2018,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E2018-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CX509ExtensionBasicConstraints>{ 0x884E2016,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E2016-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CX509ExtensionCertificatePolicies>{ 0x884E2020,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E2020-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CX509ExtensionEnhancedKeyUsage>{ 0x884E2010,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E2010-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CX509ExtensionKeyUsage>{ 0x884E200F,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E200F-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CX509ExtensionMSApplicationPolicies>{ 0x884E2021,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E2021-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CX509ExtensionSmimeCapabilities>{ 0x884E201B,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E201B-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CX509ExtensionSubjectKeyIdentifier>{ 0x884E2017,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E2017-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CX509ExtensionTemplate>{ 0x884E2012,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E2012-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CX509ExtensionTemplateName>{ 0x884E2011,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E2011-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CX509Extensions>{ 0x884E200E,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E200E-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CX509MachineEnrollmentFactory>{ 0x884E2051,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E2051-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CX509NameValuePair>{ 0x884E203F,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E203F-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CX509PolicyServerListManager>{ 0x91F39029,0x217F,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 91F39029-217F-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CX509PolicyServerUrl>{ 0x91F3902A,0x217F,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 91F3902A-217F-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CX509PrivateKey>{ 0x884E200C,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E200C-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CX509PublicKey>{ 0x884E200B,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E200B-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CX509SCEPEnrollment>{ 0x884E2061,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E2061-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CX509SCEPEnrollmentHelper>{ 0x884E2062,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E2062-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::CoClassIdentityStore>{ 0x30D49246,0xD217,0x465F,{ 0xB0,0x0B,0xAC,0x9D,0xDD,0x65,0x2E,0xB7 } }; // 30D49246-D217-465F-B00B-AC9DDD652EB7
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IAlternativeName>{ 0x728AB313,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB313-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IAlternativeNames>{ 0x728AB314,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB314-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IAssociatedIdentityProvider>{ 0x2AF066B3,0x4CBB,0x4CBA,{ 0xA7,0x98,0x20,0x4B,0x6A,0xF6,0x8C,0xC0 } }; // 2AF066B3-4CBB-4CBA-A798-204B6AF68CC0
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IAzApplication>{ 0x987BC7C7,0xB813,0x4D27,{ 0xBE,0xDE,0x6B,0xA5,0xAE,0x86,0x7E,0x95 } }; // 987BC7C7-B813-4D27-BEDE-6BA5AE867E95
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IAzApplication2>{ 0x086A68AF,0xA249,0x437C,{ 0xB1,0x8D,0xD4,0xD8,0x6D,0x6A,0x96,0x60 } }; // 086A68AF-A249-437C-B18D-D4D86D6A9660
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IAzApplication3>{ 0x181C845E,0x7196,0x4A7D,{ 0xAC,0x2E,0x02,0x0C,0x0B,0xB7,0xA3,0x03 } }; // 181C845E-7196-4A7D-AC2E-020C0BB7A303
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IAzApplicationGroup>{ 0xF1B744CD,0x58A6,0x4E06,{ 0x9F,0xBF,0x36,0xF6,0xD7,0x79,0xE2,0x1E } }; // F1B744CD-58A6-4E06-9FBF-36F6D779E21E
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IAzApplicationGroup2>{ 0x3F0613FC,0xB71A,0x464E,{ 0xA1,0x1D,0x5B,0x88,0x1A,0x56,0xCE,0xFA } }; // 3F0613FC-B71A-464E-A11D-5B881A56CEFA
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IAzApplicationGroups>{ 0x4CE66AD5,0x9F3C,0x469D,{ 0xA9,0x11,0xB9,0x98,0x87,0xA7,0xE6,0x85 } }; // 4CE66AD5-9F3C-469D-A911-B99887A7E685
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IAzApplications>{ 0x929B11A9,0x95C5,0x4A84,{ 0xA2,0x9A,0x20,0xAD,0x42,0xC2,0xF1,0x6C } }; // 929B11A9-95C5-4A84-A29A-20AD42C2F16C
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IAzAuthorizationStore>{ 0xEDBD9CA9,0x9B82,0x4F6A,{ 0x9E,0x8B,0x98,0x30,0x1E,0x45,0x0F,0x14 } }; // EDBD9CA9-9B82-4F6A-9E8B-98301E450F14
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IAzAuthorizationStore2>{ 0xB11E5584,0xD577,0x4273,{ 0xB6,0xC5,0x09,0x73,0xE0,0xF8,0xE8,0x0D } }; // B11E5584-D577-4273-B6C5-0973E0F8E80D
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IAzAuthorizationStore3>{ 0xABC08425,0x0C86,0x4FA0,{ 0x9B,0xE3,0x71,0x89,0x95,0x6C,0x92,0x6E } }; // ABC08425-0C86-4FA0-9BE3-7189956C926E
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IAzBizRuleContext>{ 0xE192F17D,0xD59F,0x455E,{ 0xA1,0x52,0x94,0x03,0x16,0xCD,0x77,0xB2 } }; // E192F17D-D59F-455E-A152-940316CD77B2
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IAzBizRuleInterfaces>{ 0xE94128C7,0xE9DA,0x44CC,{ 0xB0,0xBD,0x53,0x03,0x6F,0x3A,0xAB,0x3D } }; // E94128C7-E9DA-44CC-B0BD-53036F3AAB3D
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IAzBizRuleParameters>{ 0xFC17685F,0xE25D,0x4DCD,{ 0xBA,0xE1,0x27,0x6E,0xC9,0x53,0x3C,0xB5 } }; // FC17685F-E25D-4DCD-BAE1-276EC9533CB5
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IAzClientContext>{ 0xEFF1F00B,0x488A,0x466D,{ 0xAF,0xD9,0xA4,0x01,0xC5,0xF9,0xEE,0xF5 } }; // EFF1F00B-488A-466D-AFD9-A401C5F9EEF5
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IAzClientContext2>{ 0x2B0C92B8,0x208A,0x488A,{ 0x8F,0x81,0xE4,0xED,0xB2,0x21,0x11,0xCD } }; // 2B0C92B8-208A-488A-8F81-E4EDB22111CD
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IAzClientContext3>{ 0x11894FDE,0x1DEB,0x4B4B,{ 0x89,0x07,0x6D,0x1C,0xDA,0x1F,0x5D,0x4F } }; // 11894FDE-1DEB-4B4B-8907-6D1CDA1F5D4F
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IAzNameResolver>{ 0x504D0F15,0x73E2,0x43DF,{ 0xA8,0x70,0xA6,0x4F,0x40,0x71,0x4F,0x53 } }; // 504D0F15-73E2-43DF-A870-A64F40714F53
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IAzObjectPicker>{ 0x63130A48,0x699A,0x42D8,{ 0xBF,0x01,0xC6,0x2A,0xC3,0xFB,0x79,0xF9 } }; // 63130A48-699A-42D8-BF01-C62AC3FB79F9
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IAzOperation>{ 0x5E56B24F,0xEA01,0x4D61,{ 0xBE,0x44,0xC4,0x9B,0x5E,0x4E,0xAF,0x74 } }; // 5E56B24F-EA01-4D61-BE44-C49B5E4EAF74
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IAzOperation2>{ 0x1F5EA01F,0x44A2,0x4184,{ 0x9C,0x48,0xA7,0x5B,0x4D,0xCC,0x8C,0xCC } }; // 1F5EA01F-44A2-4184-9C48-A75B4DCC8CCC
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IAzOperations>{ 0x90EF9C07,0x9706,0x49D9,{ 0xAF,0x80,0x04,0x38,0xA5,0xF3,0xEC,0x35 } }; // 90EF9C07-9706-49D9-AF80-0438A5F3EC35
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IAzPrincipalLocator>{ 0xE5C3507D,0xAD6A,0x4992,{ 0x9C,0x7F,0x74,0xAB,0x48,0x0B,0x44,0xCC } }; // E5C3507D-AD6A-4992-9C7F-74AB480B44CC
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IAzRole>{ 0x859E0D8D,0x62D7,0x41D8,{ 0xA0,0x34,0xC0,0xCD,0x5D,0x43,0xFD,0xFA } }; // 859E0D8D-62D7-41D8-A034-C0CD5D43FDFA
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IAzRoleAssignment>{ 0x55647D31,0x0D5A,0x4FA3,{ 0xB4,0xAC,0x2B,0x5F,0x9A,0xD5,0xAB,0x76 } }; // 55647D31-0D5A-4FA3-B4AC-2B5F9AD5AB76
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IAzRoleAssignments>{ 0x9C80B900,0xFCEB,0x4D73,{ 0xA0,0xF4,0xC8,0x3B,0x0B,0xBF,0x24,0x81 } }; // 9C80B900-FCEB-4D73-A0F4-C83B0BBF2481
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IAzRoleDefinition>{ 0xD97FCEA1,0x2599,0x44F1,{ 0x9F,0xC3,0x58,0xE9,0xFB,0xE0,0x94,0x66 } }; // D97FCEA1-2599-44F1-9FC3-58E9FBE09466
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IAzRoleDefinitions>{ 0x881F25A5,0xD755,0x4550,{ 0x95,0x7A,0xD5,0x03,0xA3,0xB3,0x40,0x01 } }; // 881F25A5-D755-4550-957A-D503A3B34001
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IAzRoles>{ 0x95E0F119,0x13B4,0x4DAE,{ 0xB6,0x5F,0x2F,0x7D,0x60,0xD8,0x22,0xE4 } }; // 95E0F119-13B4-4DAE-B65F-2F7D60D822E4
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IAzScope>{ 0x00E52487,0xE08D,0x4514,{ 0xB6,0x2E,0x87,0x7D,0x56,0x45,0xF5,0xAB } }; // 00E52487-E08D-4514-B62E-877D5645F5AB
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IAzScope2>{ 0xEE9FE8C9,0xC9F3,0x40E2,{ 0xAA,0x12,0xD1,0xD8,0x59,0x97,0x27,0xFD } }; // EE9FE8C9-C9F3-40E2-AA12-D1D8599727FD
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IAzScopes>{ 0x78E14853,0x9F5E,0x406D,{ 0x9B,0x91,0x6B,0xDB,0xA6,0x97,0x35,0x10 } }; // 78E14853-9F5E-406D-9B91-6BDBA6973510
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IAzTask>{ 0xCB94E592,0x2E0E,0x4A6C,{ 0xA3,0x36,0xB8,0x9A,0x6D,0xC1,0xE3,0x88 } }; // CB94E592-2E0E-4A6C-A336-B89A6DC1E388
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IAzTask2>{ 0x03A9A5EE,0x48C8,0x4832,{ 0x90,0x25,0xAA,0xD5,0x03,0xC4,0x65,0x26 } }; // 03A9A5EE-48C8-4832-9025-AAD503C46526
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IAzTasks>{ 0xB338CCAB,0x4C85,0x4388,{ 0x8C,0x0A,0xC5,0x85,0x92,0xBA,0xD3,0x98 } }; // B338CCAB-4C85-4388-8C0A-C58592BAD398
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IBinaryConverter>{ 0x728AB302,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB302-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IBinaryConverter2>{ 0x8D7928B4,0x4E17,0x428D,{ 0x9A,0x17,0x72,0x8D,0xF0,0x0D,0x1B,0x2B } }; // 8D7928B4-4E17-428D-9A17-728DF00D1B2B
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICEnroll>{ 0x43F8F288,0x7A20,0x11D0,{ 0x8F,0x06,0x00,0xC0,0x4F,0xC2,0x95,0xE1 } }; // 43F8F288-7A20-11D0-8F06-00C04FC295E1
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICEnroll2>{ 0x704CA730,0xC90B,0x11D1,{ 0x9B,0xEC,0x00,0xC0,0x4F,0xC2,0x95,0xE1 } }; // 704CA730-C90B-11D1-9BEC-00C04FC295E1
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICEnroll3>{ 0xC28C2D95,0xB7DE,0x11D2,{ 0xA4,0x21,0x00,0xC0,0x4F,0x79,0xFE,0x8E } }; // C28C2D95-B7DE-11D2-A421-00C04F79FE8E
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICEnroll4>{ 0xC1F1188A,0x2EB5,0x4A80,{ 0x84,0x1B,0x7E,0x72,0x9A,0x35,0x6D,0x90 } }; // C1F1188A-2EB5-4A80-841B-7E729A356D90
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICertAdmin>{ 0x34DF6950,0x7FB6,0x11D0,{ 0x88,0x17,0x00,0xA0,0xC9,0x03,0xB8,0x3C } }; // 34DF6950-7FB6-11D0-8817-00A0C903B83C
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICertAdmin2>{ 0xF7C3AC41,0xB8CE,0x4FB4,{ 0xAA,0x58,0x3D,0x1D,0xC0,0xE3,0x6B,0x39 } }; // F7C3AC41-B8CE-4FB4-AA58-3D1DC0E36B39
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICertConfig>{ 0x372FCE34,0x4324,0x11D0,{ 0x88,0x10,0x00,0xA0,0xC9,0x03,0xB8,0x3C } }; // 372FCE34-4324-11D0-8810-00A0C903B83C
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICertConfig2>{ 0x7A18EDDE,0x7E78,0x4163,{ 0x8D,0xED,0x78,0xE2,0xC9,0xCE,0xE9,0x24 } }; // 7A18EDDE-7E78-4163-8DED-78E2C9CEE924
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICertEncodeAltName>{ 0x1C9A8C70,0x1271,0x11D1,{ 0x9B,0xD4,0x00,0xC0,0x4F,0xB6,0x83,0xFA } }; // 1C9A8C70-1271-11D1-9BD4-00C04FB683FA
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICertEncodeAltName2>{ 0xF67FE177,0x5EF1,0x4535,{ 0xB4,0xCE,0x29,0xDF,0x15,0xE2,0xE0,0xC3 } }; // F67FE177-5EF1-4535-B4CE-29DF15E2E0C3
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICertEncodeBitString>{ 0x6DB525BE,0x1278,0x11D1,{ 0x9B,0xD4,0x00,0xC0,0x4F,0xB6,0x83,0xFA } }; // 6DB525BE-1278-11D1-9BD4-00C04FB683FA
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICertEncodeBitString2>{ 0xE070D6E7,0x23EF,0x4DD2,{ 0x82,0x42,0xEB,0xD9,0xC9,0x28,0xCB,0x30 } }; // E070D6E7-23EF-4DD2-8242-EBD9C928CB30
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICertEncodeCRLDistInfo>{ 0x01958640,0xBBFF,0x11D0,{ 0x88,0x25,0x00,0xA0,0xC9,0x03,0xB8,0x3C } }; // 01958640-BBFF-11D0-8825-00A0C903B83C
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICertEncodeCRLDistInfo2>{ 0xB4275D4B,0x3E30,0x446F,{ 0xAD,0x36,0x09,0xD0,0x31,0x20,0xB0,0x78 } }; // B4275D4B-3E30-446F-AD36-09D03120B078
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICertEncodeDateArray>{ 0x2F9469A0,0xA470,0x11D0,{ 0x88,0x21,0x00,0xA0,0xC9,0x03,0xB8,0x3C } }; // 2F9469A0-A470-11D0-8821-00A0C903B83C
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICertEncodeDateArray2>{ 0x99A4EDB5,0x2B8E,0x448D,{ 0xBF,0x95,0xBB,0xA8,0xD7,0x78,0x9D,0xC8 } }; // 99A4EDB5-2B8E-448D-BF95-BBA8D7789DC8
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICertEncodeLongArray>{ 0x15E2F230,0xA0A2,0x11D0,{ 0x88,0x21,0x00,0xA0,0xC9,0x03,0xB8,0x3C } }; // 15E2F230-A0A2-11D0-8821-00A0C903B83C
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICertEncodeLongArray2>{ 0x4EFDE84A,0xBD9B,0x4FC2,{ 0xA1,0x08,0xC3,0x47,0xD4,0x78,0x84,0x0F } }; // 4EFDE84A-BD9B-4FC2-A108-C347D478840F
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICertEncodeStringArray>{ 0x12A88820,0x7494,0x11D0,{ 0x88,0x16,0x00,0xA0,0xC9,0x03,0xB8,0x3C } }; // 12A88820-7494-11D0-8816-00A0C903B83C
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICertEncodeStringArray2>{ 0x9C680D93,0x9B7D,0x4E95,{ 0x90,0x18,0x4F,0xFE,0x10,0xBA,0x5A,0xDA } }; // 9C680D93-9B7D-4E95-9018-4FFE10BA5ADA
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICertExit>{ 0xE19AE1A0,0x7364,0x11D0,{ 0x88,0x16,0x00,0xA0,0xC9,0x03,0xB8,0x3C } }; // E19AE1A0-7364-11D0-8816-00A0C903B83C
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICertExit2>{ 0x0ABF484B,0xD049,0x464D,{ 0xA7,0xED,0x55,0x2E,0x75,0x29,0xB0,0xFF } }; // 0ABF484B-D049-464D-A7ED-552E7529B0FF
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICertGetConfig>{ 0xC7EA09C0,0xCE17,0x11D0,{ 0x88,0x33,0x00,0xA0,0xC9,0x03,0xB8,0x3C } }; // C7EA09C0-CE17-11D0-8833-00A0C903B83C
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICertManageModule>{ 0xE7D7AD42,0xBD3D,0x11D1,{ 0x9A,0x4D,0x00,0xC0,0x4F,0xC2,0x97,0xEB } }; // E7D7AD42-BD3D-11D1-9A4D-00C04FC297EB
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICertPolicy>{ 0x38BB5A00,0x7636,0x11D0,{ 0xB4,0x13,0x00,0xA0,0xC9,0x1B,0xBF,0x8C } }; // 38BB5A00-7636-11D0-B413-00A0C91BBF8C
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICertPolicy2>{ 0x3DB4910E,0x8001,0x4BF1,{ 0xAA,0x1B,0xF4,0x3A,0x80,0x83,0x17,0xA0 } }; // 3DB4910E-8001-4BF1-AA1B-F43A808317A0
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICertProperties>{ 0x728AB32F,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB32F-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICertProperty>{ 0x728AB32E,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB32E-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICertPropertyArchived>{ 0x728AB337,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB337-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICertPropertyArchivedKeyHash>{ 0x728AB33B,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB33B-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICertPropertyAutoEnroll>{ 0x728AB332,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB332-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICertPropertyBackedUp>{ 0x728AB338,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB338-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICertPropertyDescription>{ 0x728AB331,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB331-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICertPropertyEnrollment>{ 0x728AB339,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB339-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICertPropertyEnrollmentPolicyServer>{ 0x728AB34A,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB34A-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICertPropertyFriendlyName>{ 0x728AB330,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB330-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICertPropertyKeyProvInfo>{ 0x728AB336,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB336-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICertPropertyRenewal>{ 0x728AB33A,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB33A-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICertPropertyRequestOriginator>{ 0x728AB333,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB333-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICertPropertySHA1Hash>{ 0x728AB334,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB334-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICertRequest>{ 0x014E4840,0x5523,0x11D0,{ 0x88,0x12,0x00,0xA0,0xC9,0x03,0xB8,0x3C } }; // 014E4840-5523-11D0-8812-00A0C903B83C
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICertRequest2>{ 0xA4772988,0x4A85,0x4FA9,{ 0x82,0x4E,0xB5,0xCF,0x5C,0x16,0x40,0x5A } }; // A4772988-4A85-4FA9-824E-B5CF5C16405A
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICertRequest3>{ 0xAFC8F92B,0x33A2,0x4861,{ 0xBF,0x36,0x29,0x33,0xB7,0xCD,0x67,0xB3 } }; // AFC8F92B-33A2-4861-BF36-2933B7CD67B3
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICertServerExit>{ 0x4BA9EB90,0x732C,0x11D0,{ 0x88,0x16,0x00,0xA0,0xC9,0x03,0xB8,0x3C } }; // 4BA9EB90-732C-11D0-8816-00A0C903B83C
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICertServerPolicy>{ 0xAA000922,0xFFBE,0x11CF,{ 0x88,0x00,0x00,0xA0,0xC9,0x03,0xB8,0x3C } }; // AA000922-FFBE-11CF-8800-00A0C903B83C
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICertSrvSetup>{ 0xB760A1BB,0x4784,0x44C0,{ 0x8F,0x12,0x55,0x5F,0x07,0x80,0xFF,0x25 } }; // B760A1BB-4784-44C0-8F12-555F0780FF25
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICertSrvSetupKeyInformation>{ 0x6BA73778,0x36DA,0x4C39,{ 0x8A,0x85,0xBC,0xFA,0x7D,0x00,0x07,0x93 } }; // 6BA73778-36DA-4C39-8A85-BCFA7D000793
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICertSrvSetupKeyInformationCollection>{ 0xE65C8B00,0xE58F,0x41F9,{ 0xA9,0xEC,0xA2,0x8D,0x74,0x27,0xC8,0x44 } }; // E65C8B00-E58F-41F9-A9EC-A28D7427C844
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICertView>{ 0xC3FAC344,0x1E84,0x11D1,{ 0x9B,0xD6,0x00,0xC0,0x4F,0xB6,0x83,0xFA } }; // C3FAC344-1E84-11D1-9BD6-00C04FB683FA
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICertView2>{ 0xD594B282,0x8851,0x4B61,{ 0x9C,0x66,0x3E,0xDA,0xDF,0x84,0x88,0x63 } }; // D594B282-8851-4B61-9C66-3EDADF848863
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICertificateAttestationChallenge>{ 0x6F175A7C,0x4A3A,0x40AE,{ 0x9D,0xBA,0x59,0x2F,0xD6,0xBB,0xF9,0xB8 } }; // 6F175A7C-4A3A-40AE-9DBA-592FD6BBF9B8
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICertificateAttestationChallenge2>{ 0x4631334D,0xE266,0x47D6,{ 0xBD,0x79,0xBE,0x53,0xCB,0x2E,0x27,0x53 } }; // 4631334D-E266-47D6-BD79-BE53CB2E2753
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICertificateEnrollmentPolicyServerSetup>{ 0x859252CC,0x238C,0x4A88,{ 0xB8,0xFD,0xA3,0x7E,0x7D,0x04,0xE6,0x8B } }; // 859252CC-238C-4A88-B8FD-A37E7D04E68B
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICertificateEnrollmentServerSetup>{ 0x70027FDB,0x9DD9,0x4921,{ 0x89,0x44,0xB3,0x5C,0xB3,0x1B,0xD2,0xEC } }; // 70027FDB-9DD9-4921-8944-B35CB31BD2EC
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICertificatePolicies>{ 0x728AB31F,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB31F-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICertificatePolicy>{ 0x728AB31E,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB31E-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICertificationAuthorities>{ 0x13B79005,0x2181,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 13B79005-2181-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICertificationAuthority>{ 0x835D1F61,0x1E95,0x4BC8,{ 0xB4,0xD3,0x97,0x6C,0x42,0xB9,0x68,0xF7 } }; // 835D1F61-1E95-4BC8-B4D3-976C42B968F7
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IConnectedIdentityProvider>{ 0xB7417B54,0xE08C,0x429B,{ 0x96,0xC8,0x67,0x8D,0x13,0x69,0xEC,0xB1 } }; // B7417B54-E08C-429B-96C8-678D1369ECB1
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICryptAttribute>{ 0x728AB32C,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB32C-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICryptAttributes>{ 0x728AB32D,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB32D-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICspAlgorithm>{ 0x728AB305,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB305-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICspAlgorithms>{ 0x728AB306,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB306-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICspInformation>{ 0x728AB307,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB307-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICspInformations>{ 0x728AB308,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB308-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICspStatus>{ 0x728AB309,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB309-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ICspStatuses>{ 0x728AB30A,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB30A-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IEffectivePermission>{ 0x3853DC76,0x9F35,0x407C,{ 0x88,0xA1,0xD1,0x93,0x44,0x36,0x5F,0xBC } }; // 3853DC76-9F35-407C-88A1-D19344365FBC
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IEffectivePermission2>{ 0x941FABCA,0xDD47,0x4FCA,{ 0x90,0xBB,0xB0,0xE1,0x02,0x55,0xF2,0x0D } }; // 941FABCA-DD47-4FCA-90BB-B0E10255F20D
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IEnroll>{ 0xACAA7838,0x4585,0x11D1,{ 0xAB,0x57,0x00,0xC0,0x4F,0xC2,0x95,0xE1 } }; // ACAA7838-4585-11D1-AB57-00C04FC295E1
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IEnroll2>{ 0xC080E199,0xB7DF,0x11D2,{ 0xA4,0x21,0x00,0xC0,0x4F,0x79,0xFE,0x8E } }; // C080E199-B7DF-11D2-A421-00C04F79FE8E
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IEnroll4>{ 0xF8053FE5,0x78F4,0x448F,{ 0xA0,0xDB,0x41,0xD6,0x1B,0x73,0x44,0x6B } }; // F8053FE5-78F4-448F-A0DB-41D61B73446B
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IEnumCERTVIEWATTRIBUTE>{ 0xE77DB656,0x7653,0x11D1,{ 0x9B,0xDE,0x00,0xC0,0x4F,0xB6,0x83,0xFA } }; // E77DB656-7653-11D1-9BDE-00C04FB683FA
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IEnumCERTVIEWCOLUMN>{ 0x9C735BE2,0x57A5,0x11D1,{ 0x9B,0xDB,0x00,0xC0,0x4F,0xB6,0x83,0xFA } }; // 9C735BE2-57A5-11D1-9BDB-00C04FB683FA
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IEnumCERTVIEWEXTENSION>{ 0xE7DD1466,0x7653,0x11D1,{ 0x9B,0xDE,0x00,0xC0,0x4F,0xB6,0x83,0xFA } }; // E7DD1466-7653-11D1-9BDE-00C04FB683FA
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IEnumCERTVIEWROW>{ 0xD1157F4C,0x5AF2,0x11D1,{ 0x9B,0xDC,0x00,0xC0,0x4F,0xB6,0x83,0xFA } }; // D1157F4C-5AF2-11D1-9BDC-00C04FB683FA
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IIdentityAdvise>{ 0x4E982FED,0xD14B,0x440C,{ 0xB8,0xD6,0xBB,0x38,0x64,0x53,0xD3,0x86 } }; // 4E982FED-D14B-440C-B8D6-BB386453D386
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IIdentityAuthentication>{ 0x5E7EF254,0x979F,0x43B5,{ 0xB7,0x4E,0x06,0xE4,0xEB,0x7D,0xF0,0xF9 } }; // 5E7EF254-979F-43B5-B74E-06E4EB7DF0F9
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IIdentityProvider>{ 0x0D1B9E0C,0xE8BA,0x4F55,{ 0xA8,0x1B,0xBC,0xE9,0x34,0xB9,0x48,0xF5 } }; // 0D1B9E0C-E8BA-4F55-A81B-BCE934B948F5
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IIdentityStore>{ 0xDF586FA5,0x6F35,0x44F1,{ 0xB2,0x09,0xB3,0x8E,0x16,0x97,0x72,0xEB } }; // DF586FA5-6F35-44F1-B209-B38E169772EB
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IIdentityStoreEx>{ 0xF9F9EB98,0x8F7F,0x4E38,{ 0x95,0x77,0x69,0x80,0x11,0x4C,0xE3,0x2B } }; // F9F9EB98-8F7F-4E38-9577-6980114CE32B
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IMSCEPSetup>{ 0x4F7761BB,0x9F3B,0x4592,{ 0x9E,0xE0,0x9A,0x73,0x25,0x9C,0x31,0x3E } }; // 4F7761BB-9F3B-4592-9EE0-9A73259C313E
    template <> inline constexpr guid guid_v<Windows::Win32::Security::INDESPolicy>{ 0x13CA515D,0x431D,0x46CC,{ 0x8C,0x2E,0x1D,0xA2,0x69,0xBB,0xD6,0x25 } }; // 13CA515D-431D-46CC-8C2E-1DA269BBD625
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IOCSPAdmin>{ 0x322E830D,0x67DB,0x4FE9,{ 0x95,0x77,0x45,0x96,0xD9,0xF0,0x92,0x94 } }; // 322E830D-67DB-4FE9-9577-4596D9F09294
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IOCSPCAConfiguration>{ 0xAEC92B40,0x3D46,0x433F,{ 0x87,0xD1,0xB8,0x4D,0x5C,0x1E,0x79,0x0D } }; // AEC92B40-3D46-433F-87D1-B84D5C1E790D
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IOCSPCAConfigurationCollection>{ 0x2BEBEA0B,0x5ECE,0x4F28,{ 0xA9,0x1C,0x86,0xB4,0xBB,0x20,0xF0,0xD3 } }; // 2BEBEA0B-5ECE-4F28-A91C-86B4BB20F0D3
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IOCSPProperty>{ 0x66FB7839,0x5F04,0x4C25,{ 0xAD,0x18,0x9F,0xF1,0xA8,0x37,0x6E,0xE0 } }; // 66FB7839-5F04-4C25-AD18-9FF1A8376EE0
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IOCSPPropertyCollection>{ 0x2597C18D,0x54E6,0x4B74,{ 0x9F,0xA9,0xA6,0xBF,0xDA,0x99,0xCB,0xBE } }; // 2597C18D-54E6-4B74-9FA9-A6BFDA99CBBE
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IObjectId>{ 0x728AB300,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB300-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IObjectIds>{ 0x728AB301,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB301-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IPolicyQualifier>{ 0x728AB31C,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB31C-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IPolicyQualifiers>{ 0x728AB31D,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB31D-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ISceSvcAttachmentData>{ 0x17C35FDE,0x200D,0x11D1,{ 0xAF,0xFB,0x00,0xC0,0x4F,0xB9,0x84,0xF9 } }; // 17C35FDE-200D-11D1-AFFB-00C04FB984F9
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ISceSvcAttachmentPersistInfo>{ 0x6D90E0D0,0x200D,0x11D1,{ 0xAF,0xFB,0x00,0xC0,0x4F,0xB9,0x84,0xF9 } }; // 6D90E0D0-200D-11D1-AFFB-00C04FB984F9
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ISecurityInformation>{ 0x965FC360,0x16FF,0x11D0,{ 0x91,0xCB,0x00,0xAA,0x00,0xBB,0xB7,0x23 } }; // 965FC360-16FF-11D0-91CB-00AA00BBB723
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ISecurityInformation2>{ 0xC3CCFDB4,0x6F88,0x11D2,{ 0xA3,0xCE,0x00,0xC0,0x4F,0xB1,0x78,0x2A } }; // C3CCFDB4-6F88-11D2-A3CE-00C04FB1782A
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ISecurityInformation3>{ 0xE2CDC9CC,0x31BD,0x4F8F,{ 0x8C,0x8B,0xB6,0x41,0xAF,0x51,0x6A,0x1A } }; // E2CDC9CC-31BD-4F8F-8C8B-B641AF516A1A
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ISecurityInformation4>{ 0xEA961070,0xCD14,0x4621,{ 0xAC,0xE4,0xF6,0x3C,0x03,0xE5,0x83,0xE4 } }; // EA961070-CD14-4621-ACE4-F63C03E583E4
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ISecurityObjectTypeInfo>{ 0xFC3066EB,0x79EF,0x444B,{ 0x91,0x11,0xD1,0x8A,0x75,0xEB,0xF2,0xFA } }; // FC3066EB-79EF-444B-9111-D18A75EBF2FA
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ISignerCertificate>{ 0x728AB33D,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB33D-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ISignerCertificates>{ 0x728AB33E,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB33E-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ISmimeCapabilities>{ 0x728AB31A,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB31A-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ISmimeCapability>{ 0x728AB319,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB319-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ITpmVirtualSmartCardManager>{ 0x112B1DFF,0xD9DC,0x41F7,{ 0x86,0x9F,0xD6,0x7F,0xEE,0x7C,0xB5,0x91 } }; // 112B1DFF-D9DC-41F7-869F-D67FEE7CB591
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ITpmVirtualSmartCardManager2>{ 0xFDF8A2B9,0x02DE,0x47F4,{ 0xBC,0x26,0xAA,0x85,0xAB,0x5E,0x52,0x67 } }; // FDF8A2B9-02DE-47F4-BC26-AA85AB5E5267
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ITpmVirtualSmartCardManager3>{ 0x3C745A97,0xF375,0x4150,{ 0xBE,0x17,0x59,0x50,0xF6,0x94,0xC6,0x99 } }; // 3C745A97-F375-4150-BE17-5950F694C699
    template <> inline constexpr guid guid_v<Windows::Win32::Security::ITpmVirtualSmartCardManagerStatusCallback>{ 0x1A1BB35F,0xABB8,0x451C,{ 0xA1,0xAE,0x33,0xD9,0x8F,0x1B,0xEF,0x4A } }; // 1A1BB35F-ABB8-451C-A1AE-33D98F1BEF4A
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IX500DistinguishedName>{ 0x728AB303,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB303-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IX509Attribute>{ 0x728AB322,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB322-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IX509AttributeArchiveKey>{ 0x728AB327,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB327-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IX509AttributeArchiveKeyHash>{ 0x728AB328,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB328-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IX509AttributeClientId>{ 0x728AB325,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB325-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IX509AttributeCspProvider>{ 0x728AB32B,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB32B-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IX509AttributeExtensions>{ 0x728AB324,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB324-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IX509AttributeOSVersion>{ 0x728AB32A,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB32A-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IX509AttributeRenewalCertificate>{ 0x728AB326,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB326-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IX509Attributes>{ 0x728AB323,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB323-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IX509CertificateRequest>{ 0x728AB341,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB341-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IX509CertificateRequestCertificate>{ 0x728AB343,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB343-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IX509CertificateRequestCertificate2>{ 0x728AB35A,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB35A-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IX509CertificateRequestCmc>{ 0x728AB345,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB345-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IX509CertificateRequestCmc2>{ 0x728AB35D,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB35D-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IX509CertificateRequestPkcs10>{ 0x728AB342,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB342-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IX509CertificateRequestPkcs10V2>{ 0x728AB35B,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB35B-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IX509CertificateRequestPkcs10V3>{ 0x54EA9942,0x3D66,0x4530,{ 0xB7,0x6E,0x7C,0x91,0x70,0xD3,0xEC,0x52 } }; // 54EA9942-3D66-4530-B76E-7C9170D3EC52
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IX509CertificateRequestPkcs10V4>{ 0x728AB363,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB363-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IX509CertificateRequestPkcs7>{ 0x728AB344,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB344-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IX509CertificateRequestPkcs7V2>{ 0x728AB35C,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB35C-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IX509CertificateRevocationList>{ 0x728AB360,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB360-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IX509CertificateRevocationListEntries>{ 0x728AB35F,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB35F-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IX509CertificateRevocationListEntry>{ 0x728AB35E,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB35E-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IX509CertificateTemplate>{ 0x54244A13,0x555A,0x4E22,{ 0x89,0x6D,0x1B,0x0E,0x52,0xF7,0x64,0x06 } }; // 54244A13-555A-4E22-896D-1B0E52F76406
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IX509CertificateTemplateWritable>{ 0xF49466A7,0x395A,0x4E9E,{ 0xB6,0xE7,0x32,0xB3,0x31,0x60,0x0D,0xC0 } }; // F49466A7-395A-4E9E-B6E7-32B331600DC0
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IX509CertificateTemplates>{ 0x13B79003,0x2181,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 13B79003-2181-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IX509EndorsementKey>{ 0xB11CD855,0xF4C4,0x4FC6,{ 0xB7,0x10,0x44,0x22,0x23,0x7F,0x09,0xE9 } }; // B11CD855-F4C4-4FC6-B710-4422237F09E9
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IX509Enrollment>{ 0x728AB346,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB346-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IX509Enrollment2>{ 0x728AB350,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB350-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IX509EnrollmentHelper>{ 0x728AB351,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB351-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IX509EnrollmentPolicyServer>{ 0x13B79026,0x2181,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 13B79026-2181-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IX509EnrollmentStatus>{ 0x728AB304,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB304-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IX509EnrollmentWebClassFactory>{ 0x728AB349,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB349-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IX509Extension>{ 0x728AB30D,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB30D-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IX509ExtensionAlternativeNames>{ 0x728AB315,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB315-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IX509ExtensionAuthorityKeyIdentifier>{ 0x728AB318,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB318-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IX509ExtensionBasicConstraints>{ 0x728AB316,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB316-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IX509ExtensionCertificatePolicies>{ 0x728AB320,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB320-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IX509ExtensionEnhancedKeyUsage>{ 0x728AB310,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB310-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IX509ExtensionKeyUsage>{ 0x728AB30F,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB30F-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IX509ExtensionMSApplicationPolicies>{ 0x728AB321,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB321-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IX509ExtensionSmimeCapabilities>{ 0x728AB31B,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB31B-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IX509ExtensionSubjectKeyIdentifier>{ 0x728AB317,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB317-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IX509ExtensionTemplate>{ 0x728AB312,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB312-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IX509ExtensionTemplateName>{ 0x728AB311,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB311-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IX509Extensions>{ 0x728AB30E,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB30E-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IX509MachineEnrollmentFactory>{ 0x728AB352,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB352-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IX509NameValuePair>{ 0x728AB33F,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB33F-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IX509NameValuePairs>{ 0x728AB340,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB340-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IX509PolicyServerListManager>{ 0x884E204B,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E204B-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IX509PolicyServerUrl>{ 0x884E204A,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 884E204A-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IX509PrivateKey>{ 0x728AB30C,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB30C-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IX509PrivateKey2>{ 0x728AB362,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB362-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IX509PublicKey>{ 0x728AB30B,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB30B-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IX509SCEPEnrollment>{ 0x728AB361,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB361-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IX509SCEPEnrollment2>{ 0x728AB364,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB364-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IX509SCEPEnrollmentHelper>{ 0x728AB365,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB365-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::IX509SignatureInformation>{ 0x728AB33C,0x217D,0x11DA,{ 0xB2,0xA4,0x00,0x0E,0x7B,0xBB,0x2B,0x09 } }; // 728AB33C-217D-11DA-B2A4-000E7BBB2B09
    template <> inline constexpr guid guid_v<Windows::Win32::Security::OCSPAdmin>{ 0xD3F73511,0x92C9,0x47CB,{ 0x8F,0xF2,0x8D,0x89,0x1A,0x7C,0x4D,0xE4 } }; // D3F73511-92C9-47CB-8FF2-8D891A7C4DE4
    template <> inline constexpr guid guid_v<Windows::Win32::Security::OCSPPropertyCollection>{ 0xF935A528,0xBA8A,0x4DD9,{ 0xBA,0x79,0xF2,0x83,0x27,0x5C,0xB2,0xDE } }; // F935A528-BA8A-4DD9-BA79-F283275CB2DE
    template <> inline constexpr guid guid_v<Windows::Win32::Security::RemoteTpmVirtualSmartCardManager>{ 0x152EA2A8,0x70DC,0x4C59,{ 0x8B,0x2A,0x32,0xAA,0x3C,0xA0,0xDC,0xAC } }; // 152EA2A8-70DC-4C59-8B2A-32AA3CA0DCAC
    template <> inline constexpr guid guid_v<Windows::Win32::Security::TpmVirtualSmartCardManager>{ 0x16A18E86,0x7F6E,0x4C20,{ 0xAD,0x89,0x4F,0xFC,0x0D,0xB7,0xA9,0x6A } }; // 16A18E86-7F6E-4C20-AD89-4FFC0DB7A96A
#pragma endregion guids

}
#endif
