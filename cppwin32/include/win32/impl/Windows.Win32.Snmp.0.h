// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Snmp_0_H
#define WIN32_Windows_Win32_Snmp_0_H
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct BOOL;
    struct HANDLE;
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct HWND;
    struct LPARAM;
    struct WPARAM;
}
WIN32_EXPORT namespace win32::Windows::Win32::Snmp
{
#pragma region enums
#pragma endregion enums

#pragma region forward_declarations
    struct AsnAny;
    struct AsnObjectIdentifier;
    struct AsnOctetString;
    struct SnmpVarBind;
    struct SnmpVarBindList;
    struct smiCNTR64;
    struct smiOCTETS;
    struct smiOID;
    struct smiVALUE;
    struct smiVENDORINFO;
#pragma endregion forward_declarations

#pragma region delegates
    using PFNSNMPEXTENSIONINIT = Windows::Win32::SystemServices::BOOL __stdcall(uint32_t, Windows::Win32::SystemServices::HANDLE*, Windows::Win32::Snmp::AsnObjectIdentifier*);
    using PFNSNMPEXTENSIONINITEX = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::Snmp::AsnObjectIdentifier*);
    using PFNSNMPEXTENSIONMONITOR = Windows::Win32::SystemServices::BOOL __stdcall(void*);
    using PFNSNMPEXTENSIONQUERY = Windows::Win32::SystemServices::BOOL __stdcall(uint8_t, Windows::Win32::Snmp::SnmpVarBindList*, int32_t*, int32_t*);
    using PFNSNMPEXTENSIONQUERYEX = Windows::Win32::SystemServices::BOOL __stdcall(uint32_t, uint32_t, Windows::Win32::Snmp::SnmpVarBindList*, Windows::Win32::Snmp::AsnOctetString*, int32_t*, int32_t*);
    using PFNSNMPEXTENSIONTRAP = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::Snmp::AsnObjectIdentifier*, int32_t*, int32_t*, uint32_t*, Windows::Win32::Snmp::SnmpVarBindList*);
    using PFNSNMPEXTENSIONCLOSE = void __stdcall();
    using SNMPAPI_CALLBACK = uint32_t __stdcall(intptr_t, Windows::Win32::WindowsAndMessaging::HWND, uint32_t, Windows::Win32::WindowsAndMessaging::WPARAM, Windows::Win32::WindowsAndMessaging::LPARAM, void*);
    using PFNSNMPSTARTUPEX = uint32_t __stdcall(uint32_t*, uint32_t*, uint32_t*, uint32_t*, uint32_t*);
    using PFNSNMPCLEANUPEX = uint32_t __stdcall();
#pragma endregion delegates

}
namespace win32::_impl_
{
#pragma region guids
#pragma endregion guids

}
#endif
