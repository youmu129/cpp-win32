// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_SystemServices_0_H
#define WIN32_Windows_Win32_SystemServices_0_H
WIN32_EXPORT namespace win32::Windows::Win32::DirectDraw
{
    struct DDPIXELFORMAT;
    struct DDSURFACEDESC;
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct BLENDOBJ;
    struct BRUSHOBJ;
    struct CLIPOBJ;
    struct DDVIDEOPORTCAPS;
    struct DD_BLTDATA;
    struct DD_CALLBACKS;
    struct DD_DIRECTDRAW_GLOBAL;
    struct DD_HALINFO;
    struct DD_PALETTECALLBACKS;
    struct DD_SURFACECALLBACKS;
    struct DD_SURFACE_LOCAL;
    struct DEVINFO;
    struct DEVMODEW;
    struct DRIVEROBJ;
    struct DRVENABLEDATA;
    struct FONTOBJ;
    struct GDIINFO;
    struct GLYPHDATA;
    struct IFIMETRICS;
    struct LINEATTRS;
    struct PALOBJ;
    struct PATHOBJ;
    struct PERBANDINFO;
    struct POINTL;
    struct RECTL;
    struct SIZE;
    struct STROBJ;
    struct SURFOBJ;
    struct VIDEOMEMORY;
    struct WNDOBJ;
    struct XLATEOBJ;
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct COLORADJUSTMENT;
    struct DESIGNVECTOR;
    struct HBITMAP;
    struct TRIVERTEX;
    struct TTPOLYGONHEADER;
}
WIN32_EXPORT namespace win32::Windows::Win32::OpenGL
{
    struct PIXELFORMATDESCRIPTOR;
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct HWND;
    struct LPARAM;
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsColorSystem
{
    struct LOGCOLORSPACEW;
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
#pragma region enums
    enum class ACCESS_REASON_TYPE : int32_t
    {
        AccessReasonNone = 0,
        AccessReasonAllowedAce = 65536,
        AccessReasonDeniedAce = 131072,
        AccessReasonAllowedParentAce = 196608,
        AccessReasonDeniedParentAce = 262144,
        AccessReasonNotGrantedByCape = 327680,
        AccessReasonNotGrantedByParentCape = 393216,
        AccessReasonNotGrantedToAppContainer = 458752,
        AccessReasonMissingPrivilege = 1048576,
        AccessReasonFromPrivilege = 2097152,
        AccessReasonIntegrityLevel = 3145728,
        AccessReasonOwnership = 4194304,
        AccessReasonNullDacl = 5242880,
        AccessReasonEmptyDacl = 6291456,
        AccessReasonNoSD = 7340032,
        AccessReasonNoGrant = 8388608,
        AccessReasonTrustLabel = 9437184,
        AccessReasonFilterAce = 10485760,
    };
    enum class ACTIVATION_CONTEXT_INFO_CLASS : int32_t
    {
        ActivationContextBasicInformation = 1,
        ActivationContextDetailedInformation = 2,
        AssemblyDetailedInformationInActivationContext = 3,
        FileInformationInAssemblyOfAssemblyInActivationContext = 4,
        RunlevelInformationInActivationContext = 5,
        CompatibilityInformationInActivationContext = 6,
        ActivationContextManifestResourceName = 7,
        MaxActivationContextInfoClass = 8,
        AssemblyDetailedInformationInActivationContxt = 3,
        FileInformationInAssemblyOfAssemblyInActivationContxt = 4,
    };
    enum class ARM64_FNPDATA_CR : int32_t
    {
        PdataCrUnchained = 0,
        PdataCrUnchainedSavedLr = 1,
        PdataCrChained = 3,
    };
    enum class ARM64_FNPDATA_FLAGS : int32_t
    {
        PdataRefToFullXdata = 0,
        PdataPackedUnwindFunction = 1,
        PdataPackedUnwindFragment = 2,
    };
    enum class AR_STATE : int32_t
    {
        AR_ENABLED = 0,
        AR_DISABLED = 1,
        AR_SUPPRESSED = 2,
        AR_REMOTESESSION = 4,
        AR_MULTIMON = 8,
        AR_NOSENSOR = 16,
        AR_NOT_SUPPORTED = 32,
        AR_DOCKED = 64,
        AR_LAPTOP = 128,
    };
    enum class BACKLIGHT_OPTIMIZATION_LEVEL : int32_t
    {
        BacklightOptimizationDisable = 0,
        BacklightOptimizationDesktop = 1,
        BacklightOptimizationDynamic = 2,
        BacklightOptimizationDimmed = 3,
        BacklightOptimizationEDR = 4,
    };
    enum class BATTERY_CHARGING_SOURCE_TYPE : int32_t
    {
        BatteryChargingSourceType_AC = 1,
        BatteryChargingSourceType_USB = 2,
        BatteryChargingSourceType_Wireless = 3,
        BatteryChargingSourceType_Max = 4,
    };
    enum class BATTERY_QUERY_INFORMATION_LEVEL : int32_t
    {
        BatteryInformation = 0,
        BatteryGranularityInformation = 1,
        BatteryTemperature = 2,
        BatteryEstimatedTime = 3,
        BatteryDeviceName = 4,
        BatteryManufactureDate = 5,
        BatteryManufactureName = 6,
        BatteryUniqueID = 7,
        BatterySerialNumber = 8,
    };
    enum class BATTERY_SET_INFORMATION_LEVEL : int32_t
    {
        BatteryCriticalBias = 0,
        BatteryCharge = 1,
        BatteryDischarge = 2,
        BatteryChargingSource = 3,
        BatteryChargerId = 4,
        BatteryChargerStatus = 5,
    };
    enum class BIDI_TYPE : int32_t
    {
        BIDI_NULL = 0,
        BIDI_INT = 1,
        BIDI_FLOAT = 2,
        BIDI_BOOL = 3,
        BIDI_STRING = 4,
        BIDI_TEXT = 5,
        BIDI_ENUM = 6,
        BIDI_BLOB = 7,
    };
    enum class BIN_TYPES : int32_t
    {
        RequestSize = 0,
        RequestLocation = 1,
    };
    enum class BRIGHTNESS_INTERFACE_VERSION : int32_t
    {
        BRIGHTNESS_INTERFACE_VERSION_1 = 1,
        BRIGHTNESS_INTERFACE_VERSION_2 = 2,
        BRIGHTNESS_INTERFACE_VERSION_3 = 3,
    };
    enum class BlackScreenDiagnosticsCalloutParam : int32_t
    {
        BlackScreenDiagnosticsData = 1,
        BlackScreenDisplayRecovery = 2,
    };
    enum class CHANGER_DEVICE_PROBLEM_TYPE : int32_t
    {
        DeviceProblemNone = 0,
        DeviceProblemHardware = 1,
        DeviceProblemCHMError = 2,
        DeviceProblemDoorOpen = 3,
        DeviceProblemCalibrationError = 4,
        DeviceProblemTargetFailure = 5,
        DeviceProblemCHMMoveError = 6,
        DeviceProblemCHMZeroError = 7,
        DeviceProblemCartridgeInsertError = 8,
        DeviceProblemPositionError = 9,
        DeviceProblemSensorError = 10,
        DeviceProblemCartridgeEjectError = 11,
        DeviceProblemGripperError = 12,
        DeviceProblemDriveError = 13,
    };
    enum class CM_ERROR_CONTROL_TYPE : int32_t
    {
        IgnoreError = 0,
        NormalError = 1,
        SevereError = 2,
        CriticalError = 3,
    };
    enum class CM_SERVICE_LOAD_TYPE : int32_t
    {
        BootLoad = 0,
        SystemLoad = 1,
        AutoLoad = 2,
        DemandLoad = 3,
        DisableLoad = 4,
    };
    enum class CM_SERVICE_NODE_TYPE : int32_t
    {
        DriverType = 1,
        FileSystemType = 2,
        Win32ServiceOwnProcess = 16,
        Win32ServiceShareProcess = 32,
        AdapterType = 4,
        RecognizerType = 8,
    };
    enum class COLORSPACE_TRANSFORM_DATA_TYPE : int32_t
    {
        COLORSPACE_TRANSFORM_DATA_TYPE_FIXED_POINT = 0,
        COLORSPACE_TRANSFORM_DATA_TYPE_FLOAT = 1,
    };
    enum class COLORSPACE_TRANSFORM_STAGE_CONTROL : int32_t
    {
        ColorSpaceTransformStageControl_No_Change = 0,
        ColorSpaceTransformStageControl_Enable = 1,
        ColorSpaceTransformStageControl_Bypass = 2,
    };
    enum class COLORSPACE_TRANSFORM_TARGET_CAPS_VERSION : int32_t
    {
        COLORSPACE_TRANSFORM_VERSION_DEFAULT = 0,
        COLORSPACE_TRANSFORM_VERSION_1 = 1,
        COLORSPACE_TRANSFORM_VERSION_NOT_SUPPORTED = 0,
    };
    enum class COLORSPACE_TRANSFORM_TYPE : int32_t
    {
        COLORSPACE_TRANSFORM_TYPE_UNINITIALIZED = 0,
        COLORSPACE_TRANSFORM_TYPE_DEFAULT = 1,
        COLORSPACE_TRANSFORM_TYPE_RGB256x3x16 = 2,
        COLORSPACE_TRANSFORM_TYPE_DXGI_1 = 3,
        COLORSPACE_TRANSFORM_TYPE_MATRIX_3x4 = 4,
        COLORSPACE_TRANSFORM_TYPE_MATRIX_V2 = 5,
    };
    enum class CPU_SET_INFORMATION_TYPE : int32_t
    {
        CpuSetInformation = 0,
    };
    enum class CSVFS_DISK_CONNECTIVITY : int32_t
    {
        CsvFsDiskConnectivityNone = 0,
        CsvFsDiskConnectivityMdsNodeOnly = 1,
        CsvFsDiskConnectivitySubsetOfNodes = 2,
        CsvFsDiskConnectivityAllNodes = 3,
    };
    enum class D3DANTIALIASMODE : int32_t
    {
        D3DANTIALIAS_NONE = 0,
        D3DANTIALIAS_SORTDEPENDENT = 1,
        D3DANTIALIAS_SORTINDEPENDENT = 2,
        D3DANTIALIAS_FORCE_DWORD = 2147483647,
    };
    enum class D3DBLEND : uint32_t
    {
        D3DBLEND_ZERO = 0x1,
        D3DBLEND_ONE = 0x2,
        D3DBLEND_SRCCOLOR = 0x3,
        D3DBLEND_INVSRCCOLOR = 0x4,
        D3DBLEND_SRCALPHA = 0x5,
        D3DBLEND_INVSRCALPHA = 0x6,
        D3DBLEND_DESTALPHA = 0x7,
        D3DBLEND_INVDESTALPHA = 0x8,
        D3DBLEND_DESTCOLOR = 0x9,
        D3DBLEND_INVDESTCOLOR = 0xa,
        D3DBLEND_SRCALPHASAT = 0xb,
        D3DBLEND_BOTHSRCALPHA = 0xc,
        D3DBLEND_BOTHINVSRCALPHA = 0xd,
        D3DBLEND_FORCE_DWORD = 0x7fffffff,
    };
    enum class D3DCMPFUNC : int32_t
    {
        D3DCMP_NEVER = 1,
        D3DCMP_LESS = 2,
        D3DCMP_EQUAL = 3,
        D3DCMP_LESSEQUAL = 4,
        D3DCMP_GREATER = 5,
        D3DCMP_NOTEQUAL = 6,
        D3DCMP_GREATEREQUAL = 7,
        D3DCMP_ALWAYS = 8,
        D3DCMP_FORCE_DWORD = 2147483647,
    };
    enum class D3DCULL : uint32_t
    {
        D3DCULL_NONE = 0x1,
        D3DCULL_CW = 0x2,
        D3DCULL_CCW = 0x3,
        D3DCULL_FORCE_DWORD = 0x7fffffff,
    };
    enum class D3DFILLMODE : int32_t
    {
        D3DFILL_POINT = 1,
        D3DFILL_WIREFRAME = 2,
        D3DFILL_SOLID = 3,
        D3DFILL_FORCE_DWORD = 2147483647,
    };
    enum class D3DFOGMODE : int32_t
    {
        D3DFOG_NONE = 0,
        D3DFOG_EXP = 1,
        D3DFOG_EXP2 = 2,
        D3DFOG_LINEAR = 3,
        D3DFOG_FORCE_DWORD = 2147483647,
    };
    enum class D3DLIGHTSTATETYPE : int32_t
    {
        D3DLIGHTSTATE_MATERIAL = 1,
        D3DLIGHTSTATE_AMBIENT = 2,
        D3DLIGHTSTATE_COLORMODEL = 3,
        D3DLIGHTSTATE_FOGMODE = 4,
        D3DLIGHTSTATE_FOGSTART = 5,
        D3DLIGHTSTATE_FOGEND = 6,
        D3DLIGHTSTATE_FOGDENSITY = 7,
        D3DLIGHTSTATE_COLORVERTEX = 8,
        D3DLIGHTSTATE_FORCE_DWORD = 2147483647,
    };
    enum class D3DLIGHTTYPE : int32_t
    {
        D3DLIGHT_POINT = 1,
        D3DLIGHT_SPOT = 2,
        D3DLIGHT_DIRECTIONAL = 3,
        D3DLIGHT_PARALLELPOINT = 4,
        D3DLIGHT_FORCE_DWORD = 2147483647,
    };
    enum class D3DMATERIALCOLORSOURCE : int32_t
    {
        D3DMCS_MATERIAL = 0,
        D3DMCS_COLOR1 = 1,
        D3DMCS_COLOR2 = 2,
        D3DMCS_FORCE_DWORD = 2147483647,
    };
    enum class D3DNTHAL_DP2OPERATION : int32_t
    {
        D3DNTDP2OP_POINTS = 1,
        D3DNTDP2OP_INDEXEDLINELIST = 2,
        D3DNTDP2OP_INDEXEDTRIANGLELIST = 3,
        D3DNTDP2OP_RENDERSTATE = 8,
        D3DNTDP2OP_LINELIST = 15,
        D3DNTDP2OP_LINESTRIP = 16,
        D3DNTDP2OP_INDEXEDLINESTRIP = 17,
        D3DNTDP2OP_TRIANGLELIST = 18,
        D3DNTDP2OP_TRIANGLESTRIP = 19,
        D3DNTDP2OP_INDEXEDTRIANGLESTRIP = 20,
        D3DNTDP2OP_TRIANGLEFAN = 21,
        D3DNTDP2OP_INDEXEDTRIANGLEFAN = 22,
        D3DNTDP2OP_TRIANGLEFAN_IMM = 23,
        D3DNTDP2OP_LINELIST_IMM = 24,
        D3DNTDP2OP_TEXTURESTAGESTATE = 25,
        D3DNTDP2OP_INDEXEDTRIANGLELIST2 = 26,
        D3DNTDP2OP_INDEXEDLINELIST2 = 27,
        D3DNTDP2OP_VIEWPORTINFO = 28,
        D3DNTDP2OP_WINFO = 29,
        D3DNTDP2OP_SETPALETTE = 30,
        D3DNTDP2OP_UPDATEPALETTE = 31,
        D3DNTDP2OP_ZRANGE = 32,
        D3DNTDP2OP_SETMATERIAL = 33,
        D3DNTDP2OP_SETLIGHT = 34,
        D3DNTDP2OP_CREATELIGHT = 35,
        D3DNTDP2OP_SETTRANSFORM = 36,
        D3DNTDP2OP_TEXBLT = 38,
        D3DNTDP2OP_STATESET = 39,
        D3DNTDP2OP_SETPRIORITY = 40,
        D3DNTDP2OP_SETRENDERTARGET = 41,
        D3DNTDP2OP_CLEAR = 42,
        D3DNTDP2OP_SETTEXLOD = 43,
        D3DNTDP2OP_SETCLIPPLANE = 44,
    };
    enum class D3DOPCODE : int32_t
    {
        D3DOP_POINT = 1,
        D3DOP_LINE = 2,
        D3DOP_TRIANGLE = 3,
        D3DOP_MATRIXLOAD = 4,
        D3DOP_MATRIXMULTIPLY = 5,
        D3DOP_STATETRANSFORM = 6,
        D3DOP_STATELIGHT = 7,
        D3DOP_STATERENDER = 8,
        D3DOP_PROCESSVERTICES = 9,
        D3DOP_TEXTURELOAD = 10,
        D3DOP_EXIT = 11,
        D3DOP_BRANCHFORWARD = 12,
        D3DOP_SPAN = 13,
        D3DOP_SETSTATUS = 14,
        D3DOP_FORCE_DWORD = 2147483647,
    };
    enum class D3DPRIMITIVETYPE : int32_t
    {
        D3DPT_POINTLIST = 1,
        D3DPT_LINELIST = 2,
        D3DPT_LINESTRIP = 3,
        D3DPT_TRIANGLELIST = 4,
        D3DPT_TRIANGLESTRIP = 5,
        D3DPT_TRIANGLEFAN = 6,
        D3DPT_FORCE_DWORD = 2147483647,
    };
    enum class D3DRENDERSTATETYPE : int32_t
    {
        D3DRENDERSTATE_ANTIALIAS = 2,
        D3DRENDERSTATE_TEXTUREPERSPECTIVE = 4,
        D3DRENDERSTATE_ZENABLE = 7,
        D3DRENDERSTATE_FILLMODE = 8,
        D3DRENDERSTATE_SHADEMODE = 9,
        D3DRENDERSTATE_LINEPATTERN = 10,
        D3DRENDERSTATE_ZWRITEENABLE = 14,
        D3DRENDERSTATE_ALPHATESTENABLE = 15,
        D3DRENDERSTATE_LASTPIXEL = 16,
        D3DRENDERSTATE_SRCBLEND = 19,
        D3DRENDERSTATE_DESTBLEND = 20,
        D3DRENDERSTATE_CULLMODE = 22,
        D3DRENDERSTATE_ZFUNC = 23,
        D3DRENDERSTATE_ALPHAREF = 24,
        D3DRENDERSTATE_ALPHAFUNC = 25,
        D3DRENDERSTATE_DITHERENABLE = 26,
        D3DRENDERSTATE_ALPHABLENDENABLE = 27,
        D3DRENDERSTATE_FOGENABLE = 28,
        D3DRENDERSTATE_SPECULARENABLE = 29,
        D3DRENDERSTATE_ZVISIBLE = 30,
        D3DRENDERSTATE_STIPPLEDALPHA = 33,
        D3DRENDERSTATE_FOGCOLOR = 34,
        D3DRENDERSTATE_FOGTABLEMODE = 35,
        D3DRENDERSTATE_FOGSTART = 36,
        D3DRENDERSTATE_FOGEND = 37,
        D3DRENDERSTATE_FOGDENSITY = 38,
        D3DRENDERSTATE_EDGEANTIALIAS = 40,
        D3DRENDERSTATE_COLORKEYENABLE = 41,
        D3DRENDERSTATE_ZBIAS = 47,
        D3DRENDERSTATE_RANGEFOGENABLE = 48,
        D3DRENDERSTATE_STENCILENABLE = 52,
        D3DRENDERSTATE_STENCILFAIL = 53,
        D3DRENDERSTATE_STENCILZFAIL = 54,
        D3DRENDERSTATE_STENCILPASS = 55,
        D3DRENDERSTATE_STENCILFUNC = 56,
        D3DRENDERSTATE_STENCILREF = 57,
        D3DRENDERSTATE_STENCILMASK = 58,
        D3DRENDERSTATE_STENCILWRITEMASK = 59,
        D3DRENDERSTATE_TEXTUREFACTOR = 60,
        D3DRENDERSTATE_WRAP0 = 128,
        D3DRENDERSTATE_WRAP1 = 129,
        D3DRENDERSTATE_WRAP2 = 130,
        D3DRENDERSTATE_WRAP3 = 131,
        D3DRENDERSTATE_WRAP4 = 132,
        D3DRENDERSTATE_WRAP5 = 133,
        D3DRENDERSTATE_WRAP6 = 134,
        D3DRENDERSTATE_WRAP7 = 135,
        D3DRENDERSTATE_CLIPPING = 136,
        D3DRENDERSTATE_LIGHTING = 137,
        D3DRENDERSTATE_EXTENTS = 138,
        D3DRENDERSTATE_AMBIENT = 139,
        D3DRENDERSTATE_FOGVERTEXMODE = 140,
        D3DRENDERSTATE_COLORVERTEX = 141,
        D3DRENDERSTATE_LOCALVIEWER = 142,
        D3DRENDERSTATE_NORMALIZENORMALS = 143,
        D3DRENDERSTATE_COLORKEYBLENDENABLE = 144,
        D3DRENDERSTATE_DIFFUSEMATERIALSOURCE = 145,
        D3DRENDERSTATE_SPECULARMATERIALSOURCE = 146,
        D3DRENDERSTATE_AMBIENTMATERIALSOURCE = 147,
        D3DRENDERSTATE_EMISSIVEMATERIALSOURCE = 148,
        D3DRENDERSTATE_VERTEXBLEND = 151,
        D3DRENDERSTATE_CLIPPLANEENABLE = 152,
        D3DRENDERSTATE_TEXTUREHANDLE = 1,
        D3DRENDERSTATE_TEXTUREADDRESS = 3,
        D3DRENDERSTATE_WRAPU = 5,
        D3DRENDERSTATE_WRAPV = 6,
        D3DRENDERSTATE_MONOENABLE = 11,
        D3DRENDERSTATE_ROP2 = 12,
        D3DRENDERSTATE_PLANEMASK = 13,
        D3DRENDERSTATE_TEXTUREMAG = 17,
        D3DRENDERSTATE_TEXTUREMIN = 18,
        D3DRENDERSTATE_TEXTUREMAPBLEND = 21,
        D3DRENDERSTATE_SUBPIXEL = 31,
        D3DRENDERSTATE_SUBPIXELX = 32,
        D3DRENDERSTATE_STIPPLEENABLE = 39,
        D3DRENDERSTATE_BORDERCOLOR = 43,
        D3DRENDERSTATE_TEXTUREADDRESSU = 44,
        D3DRENDERSTATE_TEXTUREADDRESSV = 45,
        D3DRENDERSTATE_MIPMAPLODBIAS = 46,
        D3DRENDERSTATE_ANISOTROPY = 49,
        D3DRENDERSTATE_FLUSHBATCH = 50,
        D3DRENDERSTATE_TRANSLUCENTSORTINDEPENDENT = 51,
        D3DRENDERSTATE_STIPPLEPATTERN00 = 64,
        D3DRENDERSTATE_STIPPLEPATTERN01 = 65,
        D3DRENDERSTATE_STIPPLEPATTERN02 = 66,
        D3DRENDERSTATE_STIPPLEPATTERN03 = 67,
        D3DRENDERSTATE_STIPPLEPATTERN04 = 68,
        D3DRENDERSTATE_STIPPLEPATTERN05 = 69,
        D3DRENDERSTATE_STIPPLEPATTERN06 = 70,
        D3DRENDERSTATE_STIPPLEPATTERN07 = 71,
        D3DRENDERSTATE_STIPPLEPATTERN08 = 72,
        D3DRENDERSTATE_STIPPLEPATTERN09 = 73,
        D3DRENDERSTATE_STIPPLEPATTERN10 = 74,
        D3DRENDERSTATE_STIPPLEPATTERN11 = 75,
        D3DRENDERSTATE_STIPPLEPATTERN12 = 76,
        D3DRENDERSTATE_STIPPLEPATTERN13 = 77,
        D3DRENDERSTATE_STIPPLEPATTERN14 = 78,
        D3DRENDERSTATE_STIPPLEPATTERN15 = 79,
        D3DRENDERSTATE_STIPPLEPATTERN16 = 80,
        D3DRENDERSTATE_STIPPLEPATTERN17 = 81,
        D3DRENDERSTATE_STIPPLEPATTERN18 = 82,
        D3DRENDERSTATE_STIPPLEPATTERN19 = 83,
        D3DRENDERSTATE_STIPPLEPATTERN20 = 84,
        D3DRENDERSTATE_STIPPLEPATTERN21 = 85,
        D3DRENDERSTATE_STIPPLEPATTERN22 = 86,
        D3DRENDERSTATE_STIPPLEPATTERN23 = 87,
        D3DRENDERSTATE_STIPPLEPATTERN24 = 88,
        D3DRENDERSTATE_STIPPLEPATTERN25 = 89,
        D3DRENDERSTATE_STIPPLEPATTERN26 = 90,
        D3DRENDERSTATE_STIPPLEPATTERN27 = 91,
        D3DRENDERSTATE_STIPPLEPATTERN28 = 92,
        D3DRENDERSTATE_STIPPLEPATTERN29 = 93,
        D3DRENDERSTATE_STIPPLEPATTERN30 = 94,
        D3DRENDERSTATE_STIPPLEPATTERN31 = 95,
        D3DRENDERSTATE_FOGTABLESTART = 36,
        D3DRENDERSTATE_FOGTABLEEND = 37,
        D3DRENDERSTATE_FOGTABLEDENSITY = 38,
        D3DRENDERSTATE_FORCE_DWORD = 2147483647,
    };
    enum class D3DSHADEMODE : int32_t
    {
        D3DSHADE_FLAT = 1,
        D3DSHADE_GOURAUD = 2,
        D3DSHADE_PHONG = 3,
        D3DSHADE_FORCE_DWORD = 2147483647,
    };
    enum class D3DSTATEBLOCKTYPE : int32_t
    {
        D3DSBT_ALL = 1,
        D3DSBT_PIXELSTATE = 2,
        D3DSBT_VERTEXSTATE = 3,
        D3DSBT_FORCE_DWORD = -1,
    };
    enum class D3DSTENCILOP : uint32_t
    {
        D3DSTENCILOP_KEEP = 0x1,
        D3DSTENCILOP_ZERO = 0x2,
        D3DSTENCILOP_REPLACE = 0x3,
        D3DSTENCILOP_INCRSAT = 0x4,
        D3DSTENCILOP_DECRSAT = 0x5,
        D3DSTENCILOP_INVERT = 0x6,
        D3DSTENCILOP_INCR = 0x7,
        D3DSTENCILOP_DECR = 0x8,
        D3DSTENCILOP_FORCE_DWORD = 0x7fffffff,
    };
    enum class D3DTEXTUREADDRESS : int32_t
    {
        D3DTADDRESS_WRAP = 1,
        D3DTADDRESS_MIRROR = 2,
        D3DTADDRESS_CLAMP = 3,
        D3DTADDRESS_BORDER = 4,
        D3DTADDRESS_FORCE_DWORD = 2147483647,
    };
    enum class D3DTEXTUREBLEND : int32_t
    {
        D3DTBLEND_DECAL = 1,
        D3DTBLEND_MODULATE = 2,
        D3DTBLEND_DECALALPHA = 3,
        D3DTBLEND_MODULATEALPHA = 4,
        D3DTBLEND_DECALMASK = 5,
        D3DTBLEND_MODULATEMASK = 6,
        D3DTBLEND_COPY = 7,
        D3DTBLEND_ADD = 8,
        D3DTBLEND_FORCE_DWORD = 2147483647,
    };
    enum class D3DTEXTUREFILTER : int32_t
    {
        D3DFILTER_NEAREST = 1,
        D3DFILTER_LINEAR = 2,
        D3DFILTER_MIPNEAREST = 3,
        D3DFILTER_MIPLINEAR = 4,
        D3DFILTER_LINEARMIPNEAREST = 5,
        D3DFILTER_LINEARMIPLINEAR = 6,
        D3DFILTER_FORCE_DWORD = 2147483647,
    };
    enum class D3DTEXTUREMAGFILTER : int32_t
    {
        D3DTFG_POINT = 1,
        D3DTFG_LINEAR = 2,
        D3DTFG_FLATCUBIC = 3,
        D3DTFG_GAUSSIANCUBIC = 4,
        D3DTFG_ANISOTROPIC = 5,
        D3DTFG_FORCE_DWORD = 2147483647,
    };
    enum class D3DTEXTUREMINFILTER : int32_t
    {
        D3DTFN_POINT = 1,
        D3DTFN_LINEAR = 2,
        D3DTFN_ANISOTROPIC = 3,
        D3DTFN_FORCE_DWORD = 2147483647,
    };
    enum class D3DTEXTUREMIPFILTER : int32_t
    {
        D3DTFP_NONE = 1,
        D3DTFP_POINT = 2,
        D3DTFP_LINEAR = 3,
        D3DTFP_FORCE_DWORD = 2147483647,
    };
    enum class D3DTEXTUREOP : int32_t
    {
        D3DTOP_DISABLE = 1,
        D3DTOP_SELECTARG1 = 2,
        D3DTOP_SELECTARG2 = 3,
        D3DTOP_MODULATE = 4,
        D3DTOP_MODULATE2X = 5,
        D3DTOP_MODULATE4X = 6,
        D3DTOP_ADD = 7,
        D3DTOP_ADDSIGNED = 8,
        D3DTOP_ADDSIGNED2X = 9,
        D3DTOP_SUBTRACT = 10,
        D3DTOP_ADDSMOOTH = 11,
        D3DTOP_BLENDDIFFUSEALPHA = 12,
        D3DTOP_BLENDTEXTUREALPHA = 13,
        D3DTOP_BLENDFACTORALPHA = 14,
        D3DTOP_BLENDTEXTUREALPHAPM = 15,
        D3DTOP_BLENDCURRENTALPHA = 16,
        D3DTOP_PREMODULATE = 17,
        D3DTOP_MODULATEALPHA_ADDCOLOR = 18,
        D3DTOP_MODULATECOLOR_ADDALPHA = 19,
        D3DTOP_MODULATEINVALPHA_ADDCOLOR = 20,
        D3DTOP_MODULATEINVCOLOR_ADDALPHA = 21,
        D3DTOP_BUMPENVMAP = 22,
        D3DTOP_BUMPENVMAPLUMINANCE = 23,
        D3DTOP_DOTPRODUCT3 = 24,
        D3DTOP_FORCE_DWORD = 2147483647,
    };
    enum class D3DTEXTURESTAGESTATETYPE : int32_t
    {
        D3DTSS_COLOROP = 1,
        D3DTSS_COLORARG1 = 2,
        D3DTSS_COLORARG2 = 3,
        D3DTSS_ALPHAOP = 4,
        D3DTSS_ALPHAARG1 = 5,
        D3DTSS_ALPHAARG2 = 6,
        D3DTSS_BUMPENVMAT00 = 7,
        D3DTSS_BUMPENVMAT01 = 8,
        D3DTSS_BUMPENVMAT10 = 9,
        D3DTSS_BUMPENVMAT11 = 10,
        D3DTSS_TEXCOORDINDEX = 11,
        D3DTSS_ADDRESS = 12,
        D3DTSS_ADDRESSU = 13,
        D3DTSS_ADDRESSV = 14,
        D3DTSS_BORDERCOLOR = 15,
        D3DTSS_MAGFILTER = 16,
        D3DTSS_MINFILTER = 17,
        D3DTSS_MIPFILTER = 18,
        D3DTSS_MIPMAPLODBIAS = 19,
        D3DTSS_MAXMIPLEVEL = 20,
        D3DTSS_MAXANISOTROPY = 21,
        D3DTSS_BUMPENVLSCALE = 22,
        D3DTSS_BUMPENVLOFFSET = 23,
        D3DTSS_TEXTURETRANSFORMFLAGS = 24,
        D3DTSS_FORCE_DWORD = 2147483647,
    };
    enum class D3DTEXTURETRANSFORMFLAGS : int32_t
    {
        D3DTTFF_DISABLE = 0,
        D3DTTFF_COUNT1 = 1,
        D3DTTFF_COUNT2 = 2,
        D3DTTFF_COUNT3 = 3,
        D3DTTFF_COUNT4 = 4,
        D3DTTFF_PROJECTED = 256,
        D3DTTFF_FORCE_DWORD = 2147483647,
    };
    enum class D3DTRANSFORMSTATETYPE : int32_t
    {
        D3DTRANSFORMSTATE_WORLD = 1,
        D3DTRANSFORMSTATE_VIEW = 2,
        D3DTRANSFORMSTATE_PROJECTION = 3,
        D3DTRANSFORMSTATE_WORLD1 = 4,
        D3DTRANSFORMSTATE_WORLD2 = 5,
        D3DTRANSFORMSTATE_WORLD3 = 6,
        D3DTRANSFORMSTATE_TEXTURE0 = 16,
        D3DTRANSFORMSTATE_TEXTURE1 = 17,
        D3DTRANSFORMSTATE_TEXTURE2 = 18,
        D3DTRANSFORMSTATE_TEXTURE3 = 19,
        D3DTRANSFORMSTATE_TEXTURE4 = 20,
        D3DTRANSFORMSTATE_TEXTURE5 = 21,
        D3DTRANSFORMSTATE_TEXTURE6 = 22,
        D3DTRANSFORMSTATE_TEXTURE7 = 23,
        D3DTRANSFORMSTATE_FORCE_DWORD = 2147483647,
    };
    enum class D3DVERTEXBLENDFLAGS : int32_t
    {
        D3DVBLEND_DISABLE = 0,
        D3DVBLEND_1WEIGHT = 1,
        D3DVBLEND_2WEIGHTS = 2,
        D3DVBLEND_3WEIGHTS = 3,
    };
    enum class D3DVERTEXTYPE : int32_t
    {
        D3DVT_VERTEX = 1,
        D3DVT_LVERTEX = 2,
        D3DVT_TLVERTEX = 3,
        D3DVT_FORCE_DWORD = 2147483647,
    };
    enum class D3DZBUFFERTYPE : int32_t
    {
        D3DZB_FALSE = 0,
        D3DZB_TRUE = 1,
        D3DZB_USEW = 2,
        D3DZB_FORCE_DWORD = 2147483647,
    };
    enum class DETECTION_TYPE : int32_t
    {
        DetectNone = 0,
        DetectInt13 = 1,
        DetectExInt13 = 2,
    };
    enum class DEVICE_INTERNAL_STATUS_DATA_REQUEST_TYPE : int32_t
    {
        DeviceInternalStatusDataRequestTypeUndefined = 0,
        DeviceCurrentInternalStatusDataHeader = 1,
        DeviceCurrentInternalStatusData = 2,
    };
    enum class DEVICE_INTERNAL_STATUS_DATA_SET : int32_t
    {
        DeviceStatusDataSetUndefined = 0,
        DeviceStatusDataSet1 = 1,
        DeviceStatusDataSet2 = 2,
        DeviceStatusDataSet3 = 3,
        DeviceStatusDataSet4 = 4,
        DeviceStatusDataSetMax = 5,
    };
    enum class DEVICE_POWER_STATE : int32_t
    {
        PowerDeviceUnspecified = 0,
        PowerDeviceD0 = 1,
        PowerDeviceD1 = 2,
        PowerDeviceD2 = 3,
        PowerDeviceD3 = 4,
        PowerDeviceMaximum = 5,
    };
    enum class DEVPROPSTORE : int32_t
    {
        DEVPROP_STORE_SYSTEM = 0,
        DEVPROP_STORE_USER = 1,
    };
    enum class DISK_CACHE_RETENTION_PRIORITY : int32_t
    {
        EqualPriority = 0,
        KeepPrefetchedData = 1,
        KeepReadData = 2,
    };
    enum class DISPATCHERQUEUE_THREAD_APARTMENTTYPE : int32_t
    {
        DQTAT_COM_NONE = 0,
        DQTAT_COM_ASTA = 1,
        DQTAT_COM_STA = 2,
    };
    enum class DISPATCHERQUEUE_THREAD_TYPE : int32_t
    {
        DQTYPE_THREAD_DEDICATED = 1,
        DQTYPE_THREAD_CURRENT = 2,
    };
    enum class DSI_CONTROL_TRANSMISSION_MODE : int32_t
    {
        DCT_DEFAULT = 0,
        DCT_FORCE_LOW_POWER = 1,
        DCT_FORCE_HIGH_PERFORMANCE = 2,
    };
    enum class EFFECTIVE_POWER_MODE : int32_t
    {
        EffectivePowerModeBatterySaver = 0,
        EffectivePowerModeBetterBattery = 1,
        EffectivePowerModeBalanced = 2,
        EffectivePowerModeHighPerformance = 3,
        EffectivePowerModeMaxPerformance = 4,
        EffectivePowerModeGameMode = 5,
        EffectivePowerModeMixedReality = 6,
    };
    enum class ELEMENT_TYPE : int32_t
    {
        AllElements = 0,
        ChangerTransport = 1,
        ChangerSlot = 2,
        ChangerIEPort = 3,
        ChangerDrive = 4,
        ChangerDoor = 5,
        ChangerKeypad = 6,
        ChangerMaxElement = 7,
    };
    enum class ENCLAVE_SEALING_IDENTITY_POLICY : int32_t
    {
        ENCLAVE_IDENTITY_POLICY_SEAL_INVALID = 0,
        ENCLAVE_IDENTITY_POLICY_SEAL_EXACT_CODE = 1,
        ENCLAVE_IDENTITY_POLICY_SEAL_SAME_PRIMARY_CODE = 2,
        ENCLAVE_IDENTITY_POLICY_SEAL_SAME_IMAGE = 3,
        ENCLAVE_IDENTITY_POLICY_SEAL_SAME_FAMILY = 4,
        ENCLAVE_IDENTITY_POLICY_SEAL_SAME_AUTHOR = 5,
    };
    enum class ENG_DEVICE_ATTRIBUTE : int32_t
    {
        QDA_RESERVED = 0,
        QDA_ACCELERATION_LEVEL = 1,
    };
    enum class ENG_SYSTEM_ATTRIBUTE : int32_t
    {
        EngProcessorFeature = 1,
        EngNumberOfProcessors = 2,
        EngOptimumAvailableUserMemory = 3,
        EngOptimumAvailableSystemMemory = 4,
    };
    enum class ENLISTMENT_INFORMATION_CLASS : int32_t
    {
        EnlistmentBasicInformation = 0,
        EnlistmentRecoveryInformation = 1,
        EnlistmentCrmInformation = 2,
    };
    enum class EPrintPropertyType : int32_t
    {
        kPropertyTypeString = 1,
        kPropertyTypeInt32 = 2,
        kPropertyTypeInt64 = 3,
        kPropertyTypeByte = 4,
        kPropertyTypeTime = 5,
        kPropertyTypeDevMode = 6,
        kPropertyTypeSD = 7,
        kPropertyTypeNotificationReply = 8,
        kPropertyTypeNotificationOptions = 9,
        kPropertyTypeBuffer = 10,
    };
    enum class EPrintXPSJobOperation : int32_t
    {
        kJobProduction = 1,
        kJobConsumption = 2,
    };
    enum class EPrintXPSJobProgress : int32_t
    {
        kAddingDocumentSequence = 0,
        kDocumentSequenceAdded = 1,
        kAddingFixedDocument = 2,
        kFixedDocumentAdded = 3,
        kAddingFixedPage = 4,
        kFixedPageAdded = 5,
        kResourceAdded = 6,
        kFontAdded = 7,
        kImageAdded = 8,
        kXpsDocumentCommitted = 9,
    };
    enum class FILE_STORAGE_TIER_CLASS : int32_t
    {
        FileStorageTierClassUnspecified = 0,
        FileStorageTierClassCapacity = 1,
        FileStorageTierClassPerformance = 2,
        FileStorageTierClassMax = 3,
    };
    enum class HEAP_INFORMATION_CLASS : int32_t
    {
        HeapCompatibilityInformation = 0,
        HeapEnableTerminationOnCorruption = 1,
        HeapOptimizeResources = 3,
    };
    enum class HIBERFILE_BUCKET_SIZE : int32_t
    {
        HiberFileBucket1GB = 0,
        HiberFileBucket2GB = 1,
        HiberFileBucket4GB = 2,
        HiberFileBucket8GB = 3,
        HiberFileBucket16GB = 4,
        HiberFileBucket32GB = 5,
        HiberFileBucketUnlimited = 6,
        HiberFileBucketMax = 7,
    };
    enum class IMAGE_AUX_SYMBOL_TYPE : int32_t
    {
        IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF = 1,
    };
    enum class IMAGE_POLICY_ENTRY_TYPE : int32_t
    {
        ImagePolicyEntryTypeNone = 0,
        ImagePolicyEntryTypeBool = 1,
        ImagePolicyEntryTypeInt8 = 2,
        ImagePolicyEntryTypeUInt8 = 3,
        ImagePolicyEntryTypeInt16 = 4,
        ImagePolicyEntryTypeUInt16 = 5,
        ImagePolicyEntryTypeInt32 = 6,
        ImagePolicyEntryTypeUInt32 = 7,
        ImagePolicyEntryTypeInt64 = 8,
        ImagePolicyEntryTypeUInt64 = 9,
        ImagePolicyEntryTypeAnsiString = 10,
        ImagePolicyEntryTypeUnicodeString = 11,
        ImagePolicyEntryTypeOverride = 12,
        ImagePolicyEntryTypeMaximum = 13,
    };
    enum class IMAGE_POLICY_ID : int32_t
    {
        ImagePolicyIdNone = 0,
        ImagePolicyIdEtw = 1,
        ImagePolicyIdDebug = 2,
        ImagePolicyIdCrashDump = 3,
        ImagePolicyIdCrashDumpKey = 4,
        ImagePolicyIdCrashDumpKeyGuid = 5,
        ImagePolicyIdParentSd = 6,
        ImagePolicyIdParentSdRev = 7,
        ImagePolicyIdSvn = 8,
        ImagePolicyIdDeviceId = 9,
        ImagePolicyIdCapability = 10,
        ImagePolicyIdScenarioId = 11,
        ImagePolicyIdMaximum = 12,
    };
    enum class IMPORT_OBJECT_NAME_TYPE : int32_t
    {
        IMPORT_OBJECT_ORDINAL = 0,
        IMPORT_OBJECT_NAME = 1,
        IMPORT_OBJECT_NAME_NO_PREFIX = 2,
        IMPORT_OBJECT_NAME_UNDECORATE = 3,
        IMPORT_OBJECT_NAME_EXPORTAS = 4,
    };
    enum class IMPORT_OBJECT_TYPE : int32_t
    {
        IMPORT_OBJECT_CODE = 0,
        IMPORT_OBJECT_DATA = 1,
        IMPORT_OBJECT_CONST = 2,
    };
    enum class JOBOBJECTINFOCLASS : int32_t
    {
        JobObjectBasicAccountingInformation = 1,
        JobObjectBasicLimitInformation = 2,
        JobObjectBasicProcessIdList = 3,
        JobObjectBasicUIRestrictions = 4,
        JobObjectSecurityLimitInformation = 5,
        JobObjectEndOfJobTimeInformation = 6,
        JobObjectAssociateCompletionPortInformation = 7,
        JobObjectBasicAndIoAccountingInformation = 8,
        JobObjectExtendedLimitInformation = 9,
        JobObjectJobSetInformation = 10,
        JobObjectGroupInformation = 11,
        JobObjectNotificationLimitInformation = 12,
        JobObjectLimitViolationInformation = 13,
        JobObjectGroupInformationEx = 14,
        JobObjectCpuRateControlInformation = 15,
        JobObjectCompletionFilter = 16,
        JobObjectCompletionCounter = 17,
        JobObjectReserved1Information = 18,
        JobObjectReserved2Information = 19,
        JobObjectReserved3Information = 20,
        JobObjectReserved4Information = 21,
        JobObjectReserved5Information = 22,
        JobObjectReserved6Information = 23,
        JobObjectReserved7Information = 24,
        JobObjectReserved8Information = 25,
        JobObjectReserved9Information = 26,
        JobObjectReserved10Information = 27,
        JobObjectReserved11Information = 28,
        JobObjectReserved12Information = 29,
        JobObjectReserved13Information = 30,
        JobObjectReserved14Information = 31,
        JobObjectNetRateControlInformation = 32,
        JobObjectNotificationLimitInformation2 = 33,
        JobObjectLimitViolationInformation2 = 34,
        JobObjectCreateSilo = 35,
        JobObjectSiloBasicInformation = 36,
        JobObjectReserved15Information = 37,
        JobObjectReserved16Information = 38,
        JobObjectReserved17Information = 39,
        JobObjectReserved18Information = 40,
        JobObjectReserved19Information = 41,
        JobObjectReserved20Information = 42,
        JobObjectReserved21Information = 43,
        JobObjectReserved22Information = 44,
        JobObjectReserved23Information = 45,
        JobObjectReserved24Information = 46,
        JobObjectReserved25Information = 47,
        MaxJobObjectInfoClass = 48,
    };
    enum class JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS : int32_t
    {
        JOBOBJECT_IO_ATTRIBUTION_CONTROL_ENABLE = 1,
        JOBOBJECT_IO_ATTRIBUTION_CONTROL_DISABLE = 2,
        JOBOBJECT_IO_ATTRIBUTION_CONTROL_VALID_FLAGS = 3,
    };
    enum class JOBOBJECT_RATE_CONTROL_TOLERANCE : int32_t
    {
        ToleranceLow = 1,
        ToleranceMedium = 2,
        ToleranceHigh = 3,
    };
    enum class JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL : int32_t
    {
        ToleranceIntervalShort = 1,
        ToleranceIntervalMedium = 2,
        ToleranceIntervalLong = 3,
    };
    enum class JOB_OBJECT_IO_RATE_CONTROL_FLAGS : int32_t
    {
        JOB_OBJECT_IO_RATE_CONTROL_ENABLE = 1,
        JOB_OBJECT_IO_RATE_CONTROL_STANDALONE_VOLUME = 2,
        JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ALL = 4,
        JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ON_SOFT_CAP = 8,
        JOB_OBJECT_IO_RATE_CONTROL_VALID_FLAGS = 15,
    };
    enum class JOB_OBJECT_NET_RATE_CONTROL_FLAGS : int32_t
    {
        JOB_OBJECT_NET_RATE_CONTROL_ENABLE = 1,
        JOB_OBJECT_NET_RATE_CONTROL_MAX_BANDWIDTH = 2,
        JOB_OBJECT_NET_RATE_CONTROL_DSCP_TAG = 4,
        JOB_OBJECT_NET_RATE_CONTROL_VALID_FLAGS = 7,
    };
    enum class KTMOBJECT_TYPE : int32_t
    {
        KTMOBJECT_TRANSACTION = 0,
        KTMOBJECT_TRANSACTION_MANAGER = 1,
        KTMOBJECT_RESOURCE_MANAGER = 2,
        KTMOBJECT_ENLISTMENT = 3,
        KTMOBJECT_INVALID = 4,
    };
    enum class LATENCY_TIME : int32_t
    {
        LT_DONT_CARE = 0,
        LT_LOWEST_LATENCY = 1,
    };
    enum class LOGICAL_PROCESSOR_RELATIONSHIP : int32_t
    {
        RelationProcessorCore = 0,
        RelationNumaNode = 1,
        RelationCache = 2,
        RelationProcessorPackage = 3,
        RelationGroup = 4,
        RelationAll = 65535,
    };
    enum class MEMORY_RESOURCE_NOTIFICATION_TYPE : int32_t
    {
        LowMemoryResourceNotification = 0,
        HighMemoryResourceNotification = 1,
    };
    enum class MEM_EXTENDED_PARAMETER_TYPE : int32_t
    {
        MemExtendedParameterInvalidType = 0,
        MemExtendedParameterAddressRequirements = 1,
        MemExtendedParameterNumaNode = 2,
        MemExtendedParameterPartitionHandle = 3,
        MemExtendedParameterUserPhysicalHandle = 4,
        MemExtendedParameterAttributeFlags = 5,
        MemExtendedParameterMax = 6,
    };
    enum class MEM_SECTION_EXTENDED_PARAMETER_TYPE : int32_t
    {
        MemSectionExtendedParameterInvalidType = 0,
        MemSectionExtendedParameterUserPhysicalFlags = 1,
        MemSectionExtendedParameterNumaNode = 2,
        MemSectionExtendedParameterMax = 3,
    };
    enum class MONITOR_DISPLAY_STATE : int32_t
    {
        PowerMonitorOff = 0,
        PowerMonitorOn = 1,
        PowerMonitorDim = 2,
    };
    enum class OFFER_PRIORITY : int32_t
    {
        VmOfferPriorityVeryLow = 1,
        VmOfferPriorityLow = 2,
        VmOfferPriorityBelowNormal = 3,
        VmOfferPriorityNormal = 4,
    };
    enum class ORIENTATION_PREFERENCE : int32_t
    {
        ORIENTATION_PREFERENCE_NONE = 0,
        ORIENTATION_PREFERENCE_LANDSCAPE = 1,
        ORIENTATION_PREFERENCE_PORTRAIT = 2,
        ORIENTATION_PREFERENCE_LANDSCAPE_FLIPPED = 4,
        ORIENTATION_PREFERENCE_PORTRAIT_FLIPPED = 8,
    };
    enum class OS_DEPLOYEMENT_STATE_VALUES : int32_t
    {
        OS_DEPLOYMENT_STANDARD = 1,
        OS_DEPLOYMENT_COMPACT = 2,
    };
    enum class OUTPUT_COLOR_ENCODING : int32_t
    {
        OUTPUT_COLOR_ENCODING_RGB = 0,
        OUTPUT_COLOR_ENCODING_YCBCR444 = 1,
        OUTPUT_COLOR_ENCODING_YCBCR422 = 2,
        OUTPUT_COLOR_ENCODING_YCBCR420 = 3,
        OUTPUT_COLOR_ENCODING_INTENSITY = 4,
        OUTPUT_COLOR_ENCODING_FORCE_UINT32 = -1,
    };
    enum class OUTPUT_WIRE_COLOR_SPACE_TYPE : int32_t
    {
        OUTPUT_WIRE_COLOR_SPACE_G22_P709 = 0,
        OUTPUT_WIRE_COLOR_SPACE_RESERVED = 4,
        OUTPUT_WIRE_COLOR_SPACE_G2084_P2020 = 12,
        OUTPUT_WIRE_COLOR_SPACE_G22_P709_WCG = 30,
        OUTPUT_WIRE_COLOR_SPACE_G22_P2020 = 31,
        OUTPUT_WIRE_COLOR_SPACE_G2084_P2020_HDR10PLUS = 32,
        OUTPUT_WIRE_COLOR_SPACE_G2084_P2020_DVLL = 33,
    };
    enum class POWER_ACTION : int32_t
    {
        PowerActionNone = 0,
        PowerActionReserved = 1,
        PowerActionSleep = 2,
        PowerActionHibernate = 3,
        PowerActionShutdown = 4,
        PowerActionShutdownReset = 5,
        PowerActionShutdownOff = 6,
        PowerActionWarmEject = 7,
        PowerActionDisplayOff = 8,
    };
    enum class POWER_DATA_ACCESSOR : int32_t
    {
        ACCESS_AC_POWER_SETTING_INDEX = 0,
        ACCESS_DC_POWER_SETTING_INDEX = 1,
        ACCESS_FRIENDLY_NAME = 2,
        ACCESS_DESCRIPTION = 3,
        ACCESS_POSSIBLE_POWER_SETTING = 4,
        ACCESS_POSSIBLE_POWER_SETTING_FRIENDLY_NAME = 5,
        ACCESS_POSSIBLE_POWER_SETTING_DESCRIPTION = 6,
        ACCESS_DEFAULT_AC_POWER_SETTING = 7,
        ACCESS_DEFAULT_DC_POWER_SETTING = 8,
        ACCESS_POSSIBLE_VALUE_MIN = 9,
        ACCESS_POSSIBLE_VALUE_MAX = 10,
        ACCESS_POSSIBLE_VALUE_INCREMENT = 11,
        ACCESS_POSSIBLE_VALUE_UNITS = 12,
        ACCESS_ICON_RESOURCE = 13,
        ACCESS_DEFAULT_SECURITY_DESCRIPTOR = 14,
        ACCESS_ATTRIBUTES = 15,
        ACCESS_SCHEME = 16,
        ACCESS_SUBGROUP = 17,
        ACCESS_INDIVIDUAL_SETTING = 18,
        ACCESS_ACTIVE_SCHEME = 19,
        ACCESS_CREATE_SCHEME = 20,
        ACCESS_AC_POWER_SETTING_MAX = 21,
        ACCESS_DC_POWER_SETTING_MAX = 22,
        ACCESS_AC_POWER_SETTING_MIN = 23,
        ACCESS_DC_POWER_SETTING_MIN = 24,
        ACCESS_PROFILE = 25,
        ACCESS_OVERLAY_SCHEME = 26,
        ACCESS_ACTIVE_OVERLAY_SCHEME = 27,
    };
    enum class POWER_INFORMATION_LEVEL : int32_t
    {
        SystemPowerPolicyAc = 0,
        SystemPowerPolicyDc = 1,
        VerifySystemPolicyAc = 2,
        VerifySystemPolicyDc = 3,
        SystemPowerCapabilities = 4,
        SystemBatteryState = 5,
        SystemPowerStateHandler = 6,
        ProcessorStateHandler = 7,
        SystemPowerPolicyCurrent = 8,
        AdministratorPowerPolicy = 9,
        SystemReserveHiberFile = 10,
        ProcessorInformation = 11,
        SystemPowerInformation = 12,
        ProcessorStateHandler2 = 13,
        LastWakeTime = 14,
        LastSleepTime = 15,
        SystemExecutionState = 16,
        SystemPowerStateNotifyHandler = 17,
        ProcessorPowerPolicyAc = 18,
        ProcessorPowerPolicyDc = 19,
        VerifyProcessorPowerPolicyAc = 20,
        VerifyProcessorPowerPolicyDc = 21,
        ProcessorPowerPolicyCurrent = 22,
        SystemPowerStateLogging = 23,
        SystemPowerLoggingEntry = 24,
        SetPowerSettingValue = 25,
        NotifyUserPowerSetting = 26,
        PowerInformationLevelUnused0 = 27,
        SystemMonitorHiberBootPowerOff = 28,
        SystemVideoState = 29,
        TraceApplicationPowerMessage = 30,
        TraceApplicationPowerMessageEnd = 31,
        ProcessorPerfStates = 32,
        ProcessorIdleStates = 33,
        ProcessorCap = 34,
        SystemWakeSource = 35,
        SystemHiberFileInformation = 36,
        TraceServicePowerMessage = 37,
        ProcessorLoad = 38,
        PowerShutdownNotification = 39,
        MonitorCapabilities = 40,
        SessionPowerInit = 41,
        SessionDisplayState = 42,
        PowerRequestCreate = 43,
        PowerRequestAction = 44,
        GetPowerRequestList = 45,
        ProcessorInformationEx = 46,
        NotifyUserModeLegacyPowerEvent = 47,
        GroupPark = 48,
        ProcessorIdleDomains = 49,
        WakeTimerList = 50,
        SystemHiberFileSize = 51,
        ProcessorIdleStatesHv = 52,
        ProcessorPerfStatesHv = 53,
        ProcessorPerfCapHv = 54,
        ProcessorSetIdle = 55,
        LogicalProcessorIdling = 56,
        UserPresence = 57,
        PowerSettingNotificationName = 58,
        GetPowerSettingValue = 59,
        IdleResiliency = 60,
        SessionRITState = 61,
        SessionConnectNotification = 62,
        SessionPowerCleanup = 63,
        SessionLockState = 64,
        SystemHiberbootState = 65,
        PlatformInformation = 66,
        PdcInvocation = 67,
        MonitorInvocation = 68,
        FirmwareTableInformationRegistered = 69,
        SetShutdownSelectedTime = 70,
        SuspendResumeInvocation = 71,
        PlmPowerRequestCreate = 72,
        ScreenOff = 73,
        CsDeviceNotification = 74,
        PlatformRole = 75,
        LastResumePerformance = 76,
        DisplayBurst = 77,
        ExitLatencySamplingPercentage = 78,
        RegisterSpmPowerSettings = 79,
        PlatformIdleStates = 80,
        ProcessorIdleVeto = 81,
        PlatformIdleVeto = 82,
        SystemBatteryStatePrecise = 83,
        ThermalEvent = 84,
        PowerRequestActionInternal = 85,
        BatteryDeviceState = 86,
        PowerInformationInternal = 87,
        ThermalStandby = 88,
        SystemHiberFileType = 89,
        PhysicalPowerButtonPress = 90,
        QueryPotentialDripsConstraint = 91,
        EnergyTrackerCreate = 92,
        EnergyTrackerQuery = 93,
        UpdateBlackBoxRecorder = 94,
        SessionAllowExternalDmaDevices = 95,
        PowerInformationLevelMaximum = 96,
    };
    enum class POWER_MONITOR_REQUEST_REASON : int32_t
    {
        MonitorRequestReasonUnknown = 0,
        MonitorRequestReasonPowerButton = 1,
        MonitorRequestReasonRemoteConnection = 2,
        MonitorRequestReasonScMonitorpower = 3,
        MonitorRequestReasonUserInput = 4,
        MonitorRequestReasonAcDcDisplayBurst = 5,
        MonitorRequestReasonUserDisplayBurst = 6,
        MonitorRequestReasonPoSetSystemState = 7,
        MonitorRequestReasonSetThreadExecutionState = 8,
        MonitorRequestReasonFullWake = 9,
        MonitorRequestReasonSessionUnlock = 10,
        MonitorRequestReasonScreenOffRequest = 11,
        MonitorRequestReasonIdleTimeout = 12,
        MonitorRequestReasonPolicyChange = 13,
        MonitorRequestReasonSleepButton = 14,
        MonitorRequestReasonLid = 15,
        MonitorRequestReasonBatteryCountChange = 16,
        MonitorRequestReasonGracePeriod = 17,
        MonitorRequestReasonPnP = 18,
        MonitorRequestReasonDP = 19,
        MonitorRequestReasonSxTransition = 20,
        MonitorRequestReasonSystemIdle = 21,
        MonitorRequestReasonNearProximity = 22,
        MonitorRequestReasonThermalStandby = 23,
        MonitorRequestReasonResumePdc = 24,
        MonitorRequestReasonResumeS4 = 25,
        MonitorRequestReasonTerminal = 26,
        MonitorRequestReasonPdcSignal = 27,
        MonitorRequestReasonAcDcDisplayBurstSuppressed = 28,
        MonitorRequestReasonSystemStateEntered = 29,
        MonitorRequestReasonWinrt = 30,
        MonitorRequestReasonUserInputKeyboard = 31,
        MonitorRequestReasonUserInputMouse = 32,
        MonitorRequestReasonUserInputTouch = 33,
        MonitorRequestReasonUserInputPen = 34,
        MonitorRequestReasonUserInputAccelerometer = 35,
        MonitorRequestReasonUserInputHid = 36,
        MonitorRequestReasonUserInputPoUserPresent = 37,
        MonitorRequestReasonUserInputSessionSwitch = 38,
        MonitorRequestReasonUserInputInitialization = 39,
        MonitorRequestReasonPdcSignalWindowsMobilePwrNotif = 40,
        MonitorRequestReasonPdcSignalWindowsMobileShell = 41,
        MonitorRequestReasonPdcSignalHeyCortana = 42,
        MonitorRequestReasonPdcSignalHolographicShell = 43,
        MonitorRequestReasonPdcSignalFingerprint = 44,
        MonitorRequestReasonDirectedDrips = 45,
        MonitorRequestReasonDim = 46,
        MonitorRequestReasonBuiltinPanel = 47,
        MonitorRequestReasonDisplayRequiredUnDim = 48,
        MonitorRequestReasonBatteryCountChangeSuppressed = 49,
        MonitorRequestReasonResumeModernStandby = 50,
        MonitorRequestReasonMax = 51,
    };
    enum class POWER_MONITOR_REQUEST_TYPE : int32_t
    {
        MonitorRequestTypeOff = 0,
        MonitorRequestTypeOnAndPresent = 1,
        MonitorRequestTypeToggleOn = 2,
    };
    enum class POWER_PLATFORM_ROLE : int32_t
    {
        PlatformRoleUnspecified = 0,
        PlatformRoleDesktop = 1,
        PlatformRoleMobile = 2,
        PlatformRoleWorkstation = 3,
        PlatformRoleEnterpriseServer = 4,
        PlatformRoleSOHOServer = 5,
        PlatformRoleAppliancePC = 6,
        PlatformRolePerformanceServer = 7,
        PlatformRoleSlate = 8,
        PlatformRoleMaximum = 9,
    };
    enum class POWER_REQUEST_TYPE : int32_t
    {
        PowerRequestDisplayRequired = 0,
        PowerRequestSystemRequired = 1,
        PowerRequestAwayModeRequired = 2,
        PowerRequestExecutionRequired = 3,
    };
    enum class POWER_USER_PRESENCE_TYPE : int32_t
    {
        UserNotPresent = 0,
        UserPresent = 1,
        UserUnknown = 255,
    };
    enum class PRINTER_OPTION_FLAGS : int32_t
    {
        PRINTER_OPTION_NO_CACHE = 1,
        PRINTER_OPTION_CACHE = 2,
        PRINTER_OPTION_CLIENT_CHANGE = 4,
        PRINTER_OPTION_NO_CLIENT_DATA = 8,
    };
    enum class PRINT_EXECUTION_CONTEXT : int32_t
    {
        PRINT_EXECUTION_CONTEXT_APPLICATION = 0,
        PRINT_EXECUTION_CONTEXT_SPOOLER_SERVICE = 1,
        PRINT_EXECUTION_CONTEXT_SPOOLER_ISOLATION_HOST = 2,
        PRINT_EXECUTION_CONTEXT_FILTER_PIPELINE = 3,
        PRINT_EXECUTION_CONTEXT_WOW64 = 4,
    };
    enum class PROCESSOR_CACHE_TYPE : int32_t
    {
        CacheUnified = 0,
        CacheInstruction = 1,
        CacheData = 2,
        CacheTrace = 3,
    };
    enum class PROCESS_MEMORY_EXHAUSTION_TYPE : int32_t
    {
        PMETypeFailFastOnCommitFailure = 0,
        PMETypeMax = 1,
    };
    enum class PROCESS_MITIGATION_POLICY : int32_t
    {
        ProcessDEPPolicy = 0,
        ProcessASLRPolicy = 1,
        ProcessDynamicCodePolicy = 2,
        ProcessStrictHandleCheckPolicy = 3,
        ProcessSystemCallDisablePolicy = 4,
        ProcessMitigationOptionsMask = 5,
        ProcessExtensionPointDisablePolicy = 6,
        ProcessControlFlowGuardPolicy = 7,
        ProcessSignaturePolicy = 8,
        ProcessFontDisablePolicy = 9,
        ProcessImageLoadPolicy = 10,
        ProcessSystemCallFilterPolicy = 11,
        ProcessPayloadRestrictionPolicy = 12,
        ProcessChildProcessPolicy = 13,
        ProcessSideChannelIsolationPolicy = 14,
        ProcessUserShadowStackPolicy = 15,
        MaxProcessMitigationPolicy = 16,
    };
    enum class PWM_POLARITY : int32_t
    {
        PWM_ACTIVE_HIGH = 0,
        PWM_ACTIVE_LOW = 1,
    };
    enum class QUERY_FILE_LAYOUT_FILTER_TYPE : int32_t
    {
        QUERY_FILE_LAYOUT_FILTER_TYPE_NONE = 0,
        QUERY_FILE_LAYOUT_FILTER_TYPE_CLUSTERS = 1,
        QUERY_FILE_LAYOUT_FILTER_TYPE_FILEID = 2,
        QUERY_FILE_LAYOUT_FILTER_TYPE_STORAGE_RESERVE_ID = 3,
        QUERY_FILE_LAYOUT_NUM_FILTER_TYPES = 4,
    };
    enum class REFS_SMR_VOLUME_GC_ACTION : int32_t
    {
        SmrGcActionStart = 1,
        SmrGcActionStartFullSpeed = 2,
        SmrGcActionPause = 3,
        SmrGcActionStop = 4,
    };
    enum class REFS_SMR_VOLUME_GC_METHOD : int32_t
    {
        SmrGcMethodCompaction = 1,
        SmrGcMethodCompression = 2,
        SmrGcMethodRotation = 3,
    };
    enum class REFS_SMR_VOLUME_GC_STATE : int32_t
    {
        SmrGcStateInactive = 0,
        SmrGcStatePaused = 1,
        SmrGcStateActive = 2,
        SmrGcStateActiveFullSpeed = 3,
    };
    enum class RESOURCEMANAGER_INFORMATION_CLASS : int32_t
    {
        ResourceManagerBasicInformation = 0,
        ResourceManagerCompletionInformation = 1,
    };
    enum class RTL_UMS_SCHEDULER_REASON : int32_t
    {
        UmsSchedulerStartup = 0,
        UmsSchedulerThreadBlocked = 1,
        UmsSchedulerThreadYield = 2,
    };
    enum class RTL_UMS_THREAD_INFO_CLASS : int32_t
    {
        UmsThreadInvalidInfoClass = 0,
        UmsThreadUserContext = 1,
        UmsThreadPriority = 2,
        UmsThreadAffinity = 3,
        UmsThreadTeb = 4,
        UmsThreadIsSuspended = 5,
        UmsThreadIsTerminated = 6,
        UmsThreadMaxInfoClass = 7,
    };
    enum class ReplacesCorHdrNumericDefines : int32_t
    {
        COMIMAGE_FLAGS_ILONLY = 1,
        COMIMAGE_FLAGS_32BITREQUIRED = 2,
        COMIMAGE_FLAGS_IL_LIBRARY = 4,
        COMIMAGE_FLAGS_STRONGNAMESIGNED = 8,
        COMIMAGE_FLAGS_NATIVE_ENTRYPOINT = 16,
        COMIMAGE_FLAGS_TRACKDEBUGDATA = 65536,
        COMIMAGE_FLAGS_32BITPREFERRED = 131072,
        COR_VERSION_MAJOR_V2 = 2,
        COR_VERSION_MAJOR = 2,
        COR_VERSION_MINOR = 5,
        COR_DELETED_NAME_LENGTH = 8,
        COR_VTABLEGAP_NAME_LENGTH = 8,
        NATIVE_TYPE_MAX_CB = 1,
        COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE = 255,
        IMAGE_COR_MIH_METHODRVA = 1,
        IMAGE_COR_MIH_EHRVA = 2,
        IMAGE_COR_MIH_BASICBLOCK = 8,
        COR_VTABLE_32BIT = 1,
        COR_VTABLE_64BIT = 2,
        COR_VTABLE_FROM_UNMANAGED = 4,
        COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN = 8,
        COR_VTABLE_CALL_MOST_DERIVED = 16,
        IMAGE_COR_EATJ_THUNK_SIZE = 32,
        MAX_CLASS_NAME = 1024,
        MAX_PACKAGE_NAME = 1024,
    };
    enum class SCM_PD_HEALTH_STATUS : int32_t
    {
        ScmPhysicalDeviceHealth_Unknown = 0,
        ScmPhysicalDeviceHealth_Unhealthy = 1,
        ScmPhysicalDeviceHealth_Warning = 2,
        ScmPhysicalDeviceHealth_Healthy = 3,
        ScmPhysicalDeviceHealth_Max = 4,
    };
    enum class SCM_PD_MEDIA_REINITIALIZATION_STATUS : int32_t
    {
        ScmPhysicalDeviceReinit_Success = 0,
        ScmPhysicalDeviceReinit_RebootNeeded = 1,
        ScmPhysicalDeviceReinit_ColdBootNeeded = 2,
        ScmPhysicalDeviceReinit_Max = 3,
    };
    enum class SCM_PD_OPERATIONAL_STATUS : int32_t
    {
        ScmPhysicalDeviceOpStatus_Unknown = 0,
        ScmPhysicalDeviceOpStatus_Ok = 1,
        ScmPhysicalDeviceOpStatus_PredictingFailure = 2,
        ScmPhysicalDeviceOpStatus_InService = 3,
        ScmPhysicalDeviceOpStatus_HardwareError = 4,
        ScmPhysicalDeviceOpStatus_NotUsable = 5,
        ScmPhysicalDeviceOpStatus_TransientError = 6,
        ScmPhysicalDeviceOpStatus_Missing = 7,
        ScmPhysicalDeviceOpStatus_Max = 8,
    };
    enum class SCM_PD_OPERATIONAL_STATUS_REASON : int32_t
    {
        ScmPhysicalDeviceOpReason_Unknown = 0,
        ScmPhysicalDeviceOpReason_Media = 1,
        ScmPhysicalDeviceOpReason_ThresholdExceeded = 2,
        ScmPhysicalDeviceOpReason_LostData = 3,
        ScmPhysicalDeviceOpReason_EnergySource = 4,
        ScmPhysicalDeviceOpReason_Configuration = 5,
        ScmPhysicalDeviceOpReason_DeviceController = 6,
        ScmPhysicalDeviceOpReason_MediaController = 7,
        ScmPhysicalDeviceOpReason_Component = 8,
        ScmPhysicalDeviceOpReason_BackgroundOperation = 9,
        ScmPhysicalDeviceOpReason_InvalidFirmware = 10,
        ScmPhysicalDeviceOpReason_HealthCheck = 11,
        ScmPhysicalDeviceOpReason_LostDataPersistence = 12,
        ScmPhysicalDeviceOpReason_DisabledByPlatform = 13,
        ScmPhysicalDeviceOpReason_PermanentError = 14,
        ScmPhysicalDeviceOpReason_LostWritePersistence = 15,
        ScmPhysicalDeviceOpReason_FatalError = 16,
        ScmPhysicalDeviceOpReason_DataPersistenceLossImminent = 17,
        ScmPhysicalDeviceOpReason_WritePersistenceLossImminent = 18,
        ScmPhysicalDeviceOpReason_MediaRemainingSpareBlock = 19,
        ScmPhysicalDeviceOpReason_PerformanceDegradation = 20,
        ScmPhysicalDeviceOpReason_ExcessiveTemperature = 21,
        ScmPhysicalDeviceOpReason_Max = 22,
    };
    enum class SCM_PD_PROPERTY_ID : int32_t
    {
        ScmPhysicalDeviceProperty_DeviceInfo = 0,
        ScmPhysicalDeviceProperty_ManagementStatus = 1,
        ScmPhysicalDeviceProperty_FirmwareInfo = 2,
        ScmPhysicalDeviceProperty_LocationString = 3,
        ScmPhysicalDeviceProperty_DeviceSpecificInfo = 4,
        ScmPhysicalDeviceProperty_DeviceHandle = 5,
        ScmPhysicalDeviceProperty_Max = 6,
    };
    enum class SCM_PD_QUERY_TYPE : int32_t
    {
        ScmPhysicalDeviceQuery_Descriptor = 0,
        ScmPhysicalDeviceQuery_IsSupported = 1,
        ScmPhysicalDeviceQuery_Max = 2,
    };
    enum class SCM_REGION_FLAG : int32_t
    {
        ScmRegionFlagNone = 0,
        ScmRegionFlagLabel = 1,
    };
    enum class SERVERSILO_STATE : int32_t
    {
        SERVERSILO_INITING = 0,
        SERVERSILO_STARTED = 1,
        SERVERSILO_SHUTTING_DOWN = 2,
        SERVERSILO_TERMINATING = 3,
        SERVERSILO_TERMINATED = 4,
    };
    enum class SE_IMAGE_SIGNATURE_TYPE : int32_t
    {
        SeImageSignatureNone = 0,
        SeImageSignatureEmbedded = 1,
        SeImageSignatureCache = 2,
        SeImageSignatureCatalogCached = 3,
        SeImageSignatureCatalogNotCached = 4,
        SeImageSignatureCatalogHint = 5,
        SeImageSignaturePackageCatalog = 6,
    };
    enum class SE_LEARNING_MODE_DATA_TYPE : int32_t
    {
        SeLearningModeInvalidType = 0,
        SeLearningModeSettings = 1,
        SeLearningModeMax = 2,
    };
    enum class SHRINK_VOLUME_REQUEST_TYPES : int32_t
    {
        ShrinkPrepare = 1,
        ShrinkCommit = 2,
        ShrinkAbort = 3,
    };
    enum class STORAGE_ASSOCIATION_TYPE : int32_t
    {
        StorageIdAssocDevice = 0,
        StorageIdAssocPort = 1,
        StorageIdAssocTarget = 2,
    };
    enum class STORAGE_ATTRIBUTE_MGMT_ACTION : int32_t
    {
        StorAttributeMgmt_ClearAttribute = 0,
        StorAttributeMgmt_SetAttribute = 1,
        StorAttributeMgmt_ResetAttribute = 2,
    };
    enum class STORAGE_BUS_TYPE : int32_t
    {
        BusTypeUnknown = 0,
        BusTypeScsi = 1,
        BusTypeAtapi = 2,
        BusTypeAta = 3,
        BusType1394 = 4,
        BusTypeSsa = 5,
        BusTypeFibre = 6,
        BusTypeUsb = 7,
        BusTypeRAID = 8,
        BusTypeiScsi = 9,
        BusTypeSas = 10,
        BusTypeSata = 11,
        BusTypeSd = 12,
        BusTypeMmc = 13,
        BusTypeVirtual = 14,
        BusTypeFileBackedVirtual = 15,
        BusTypeSpaces = 16,
        BusTypeNvme = 17,
        BusTypeSCM = 18,
        BusTypeUfs = 19,
        BusTypeMax = 20,
        BusTypeMaxReserved = 127,
    };
    enum class STORAGE_COUNTER_TYPE : int32_t
    {
        StorageCounterTypeUnknown = 0,
        StorageCounterTypeTemperatureCelsius = 1,
        StorageCounterTypeTemperatureCelsiusMax = 2,
        StorageCounterTypeReadErrorsTotal = 3,
        StorageCounterTypeReadErrorsCorrected = 4,
        StorageCounterTypeReadErrorsUncorrected = 5,
        StorageCounterTypeWriteErrorsTotal = 6,
        StorageCounterTypeWriteErrorsCorrected = 7,
        StorageCounterTypeWriteErrorsUncorrected = 8,
        StorageCounterTypeManufactureDate = 9,
        StorageCounterTypeStartStopCycleCount = 10,
        StorageCounterTypeStartStopCycleCountMax = 11,
        StorageCounterTypeLoadUnloadCycleCount = 12,
        StorageCounterTypeLoadUnloadCycleCountMax = 13,
        StorageCounterTypeWearPercentage = 14,
        StorageCounterTypeWearPercentageWarning = 15,
        StorageCounterTypeWearPercentageMax = 16,
        StorageCounterTypePowerOnHours = 17,
        StorageCounterTypeReadLatency100NSMax = 18,
        StorageCounterTypeWriteLatency100NSMax = 19,
        StorageCounterTypeFlushLatency100NSMax = 20,
        StorageCounterTypeMax = 21,
    };
    enum class STORAGE_CRYPTO_ALGORITHM_ID : int32_t
    {
        StorageCryptoAlgorithmUnknown = 0,
        StorageCryptoAlgorithmXTSAES = 1,
        StorageCryptoAlgorithmBitlockerAESCBC = 2,
        StorageCryptoAlgorithmAESECB = 3,
        StorageCryptoAlgorithmESSIVAESCBC = 4,
        StorageCryptoAlgorithmMax = 5,
    };
    enum class STORAGE_CRYPTO_KEY_SIZE : int32_t
    {
        StorageCryptoKeySizeUnknown = 0,
        StorageCryptoKeySize128Bits = 1,
        StorageCryptoKeySize192Bits = 2,
        StorageCryptoKeySize256Bits = 3,
        StorageCryptoKeySize512Bits = 4,
    };
    enum class STORAGE_DIAGNOSTIC_LEVEL : int32_t
    {
        StorageDiagnosticLevelDefault = 0,
        StorageDiagnosticLevelMax = 1,
    };
    enum class STORAGE_DIAGNOSTIC_TARGET_TYPE : int32_t
    {
        StorageDiagnosticTargetTypeUndefined = 0,
        StorageDiagnosticTargetTypePort = 1,
        StorageDiagnosticTargetTypeMiniport = 2,
        StorageDiagnosticTargetTypeHbaFirmware = 3,
        StorageDiagnosticTargetTypeMax = 4,
    };
    enum class STORAGE_DISK_HEALTH_STATUS : int32_t
    {
        DiskHealthUnknown = 0,
        DiskHealthUnhealthy = 1,
        DiskHealthWarning = 2,
        DiskHealthHealthy = 3,
        DiskHealthMax = 4,
    };
    enum class STORAGE_DISK_OPERATIONAL_STATUS : int32_t
    {
        DiskOpStatusNone = 0,
        DiskOpStatusUnknown = 1,
        DiskOpStatusOk = 2,
        DiskOpStatusPredictingFailure = 3,
        DiskOpStatusInService = 4,
        DiskOpStatusHardwareError = 5,
        DiskOpStatusNotUsable = 6,
        DiskOpStatusTransientError = 7,
        DiskOpStatusMissing = 8,
    };
    enum class STORAGE_IDENTIFIER_CODE_SET : int32_t
    {
        StorageIdCodeSetReserved = 0,
        StorageIdCodeSetBinary = 1,
        StorageIdCodeSetAscii = 2,
        StorageIdCodeSetUtf8 = 3,
    };
    enum class STORAGE_IDENTIFIER_TYPE : int32_t
    {
        StorageIdTypeVendorSpecific = 0,
        StorageIdTypeVendorId = 1,
        StorageIdTypeEUI64 = 2,
        StorageIdTypeFCPHName = 3,
        StorageIdTypePortRelative = 4,
        StorageIdTypeTargetPortGroup = 5,
        StorageIdTypeLogicalUnitGroup = 6,
        StorageIdTypeMD5LogicalUnitIdentifier = 7,
        StorageIdTypeScsiNameString = 8,
    };
    enum class STORAGE_ID_NAA_FORMAT : int32_t
    {
        StorageIdNAAFormatIEEEExtended = 2,
        StorageIdNAAFormatIEEERegistered = 3,
        StorageIdNAAFormatIEEEERegisteredExtended = 5,
    };
    enum class STORAGE_MEDIA_TYPE : int32_t
    {
        DDS_4mm = 32,
        MiniQic = 33,
        Travan = 34,
        QIC = 35,
        MP_8mm = 36,
        AME_8mm = 37,
        AIT1_8mm = 38,
        DLT = 39,
        NCTP = 40,
        IBM_3480 = 41,
        IBM_3490E = 42,
        IBM_Magstar_3590 = 43,
        IBM_Magstar_MP = 44,
        STK_DATA_D3 = 45,
        SONY_DTF = 46,
        DV_6mm = 47,
        DMI = 48,
        SONY_D2 = 49,
        CLEANER_CARTRIDGE = 50,
        CD_ROM = 51,
        CD_R = 52,
        CD_RW = 53,
        DVD_ROM = 54,
        DVD_R = 55,
        DVD_RW = 56,
        MO_3_RW = 57,
        MO_5_WO = 58,
        MO_5_RW = 59,
        MO_5_LIMDOW = 60,
        PC_5_WO = 61,
        PC_5_RW = 62,
        PD_5_RW = 63,
        ABL_5_WO = 64,
        PINNACLE_APEX_5_RW = 65,
        SONY_12_WO = 66,
        PHILIPS_12_WO = 67,
        HITACHI_12_WO = 68,
        CYGNET_12_WO = 69,
        KODAK_14_WO = 70,
        MO_NFR_525 = 71,
        NIKON_12_RW = 72,
        IOMEGA_ZIP = 73,
        IOMEGA_JAZ = 74,
        SYQUEST_EZ135 = 75,
        SYQUEST_EZFLYER = 76,
        SYQUEST_SYJET = 77,
        AVATAR_F2 = 78,
        MP2_8mm = 79,
        DST_S = 80,
        DST_M = 81,
        DST_L = 82,
        VXATape_1 = 83,
        VXATape_2 = 84,
        STK_9840 = 85,
        LTO_Ultrium = 86,
        LTO_Accelis = 87,
        DVD_RAM = 88,
        AIT_8mm = 89,
        ADR_1 = 90,
        ADR_2 = 91,
        STK_9940 = 92,
        SAIT = 93,
        VXATape = 94,
    };
    enum class STORAGE_OPERATIONAL_STATUS_REASON : int32_t
    {
        DiskOpReasonUnknown = 0,
        DiskOpReasonScsiSenseCode = 1,
        DiskOpReasonMedia = 2,
        DiskOpReasonIo = 3,
        DiskOpReasonThresholdExceeded = 4,
        DiskOpReasonLostData = 5,
        DiskOpReasonEnergySource = 6,
        DiskOpReasonConfiguration = 7,
        DiskOpReasonDeviceController = 8,
        DiskOpReasonMediaController = 9,
        DiskOpReasonComponent = 10,
        DiskOpReasonNVDIMM_N = 11,
        DiskOpReasonBackgroundOperation = 12,
        DiskOpReasonInvalidFirmware = 13,
        DiskOpReasonHealthCheck = 14,
        DiskOpReasonLostDataPersistence = 15,
        DiskOpReasonDisabledByPlatform = 16,
        DiskOpReasonLostWritePersistence = 17,
        DiskOpReasonDataPersistenceLossImminent = 18,
        DiskOpReasonWritePersistenceLossImminent = 19,
        DiskOpReasonMax = 20,
    };
    enum class STORAGE_POWERUP_REASON_TYPE : int32_t
    {
        StoragePowerupUnknown = 0,
        StoragePowerupIO = 1,
        StoragePowerupDeviceAttention = 2,
    };
    enum class STORAGE_PROTOCOL_UFS_DATA_TYPE : int32_t
    {
        UfsDataTypeUnknown = 0,
        UfsDataTypeQueryDescriptor = 1,
        UfsDataTypeMax = 2,
    };
    enum class STORAGE_RESERVE_ID : int32_t
    {
        StorageReserveIdNone = 0,
        StorageReserveIdHard = 1,
        StorageReserveIdSoft = 2,
        StorageReserveIdUpdateScratch = 3,
        StorageReserveIdMax = 4,
    };
    enum class STORAGE_RPMB_COMMAND_TYPE : int32_t
    {
        StorRpmbProgramAuthKey = 1,
        StorRpmbQueryWriteCounter = 2,
        StorRpmbAuthenticatedWrite = 3,
        StorRpmbAuthenticatedRead = 4,
        StorRpmbReadResultRequest = 5,
        StorRpmbAuthenticatedDeviceConfigWrite = 6,
        StorRpmbAuthenticatedDeviceConfigRead = 7,
    };
    enum class STORAGE_RPMB_FRAME_TYPE : int32_t
    {
        StorageRpmbFrameTypeUnknown = 0,
        StorageRpmbFrameTypeStandard = 1,
        StorageRpmbFrameTypeMax = 2,
    };
    enum class STORAGE_SET_TYPE : int32_t
    {
        PropertyStandardSet = 0,
        PropertyExistsSet = 1,
        PropertySetMaxDefined = 2,
    };
    enum class STORAGE_TIER_CLASS : int32_t
    {
        StorageTierClassUnspecified = 0,
        StorageTierClassCapacity = 1,
        StorageTierClassPerformance = 2,
        StorageTierClassMax = 3,
    };
    enum class STORAGE_TIER_MEDIA_TYPE : int32_t
    {
        StorageTierMediaTypeUnspecified = 0,
        StorageTierMediaTypeDisk = 1,
        StorageTierMediaTypeSsd = 2,
        StorageTierMediaTypeScm = 4,
        StorageTierMediaTypeMax = 5,
    };
    enum class STORAGE_ZONED_DEVICE_TYPES : int32_t
    {
        ZonedDeviceTypeUnknown = 0,
        ZonedDeviceTypeHostManaged = 1,
        ZonedDeviceTypeHostAware = 2,
        ZonedDeviceTypeDeviceManaged = 3,
    };
    enum class STORAGE_ZONES_ATTRIBUTES : int32_t
    {
        ZonesAttributeTypeAndLengthMayDifferent = 0,
        ZonesAttributeTypeSameLengthSame = 1,
        ZonesAttributeTypeSameLastZoneLengthDifferent = 2,
        ZonesAttributeTypeMayDifferentLengthSame = 3,
    };
    enum class STORAGE_ZONE_CONDITION : int32_t
    {
        ZoneConditionConventional = 0,
        ZoneConditionEmpty = 1,
        ZoneConditionImplicitlyOpened = 2,
        ZoneConditionExplicitlyOpened = 3,
        ZoneConditionClosed = 4,
        ZoneConditionReadOnly = 13,
        ZoneConditionFull = 14,
        ZoneConditionOffline = 15,
    };
    enum class STORAGE_ZONE_TYPES : int32_t
    {
        ZoneTypeUnknown = 0,
        ZoneTypeConventional = 1,
        ZoneTypeSequentialWriteRequired = 2,
        ZoneTypeSequentialWritePreferred = 3,
        ZoneTypeMax = 4,
    };
    enum class SYSTEM_POWER_CONDITION : int32_t
    {
        PoAc = 0,
        PoDc = 1,
        PoHot = 2,
        PoConditionMaximum = 3,
    };
    enum class SYSTEM_POWER_STATE : int32_t
    {
        PowerSystemUnspecified = 0,
        PowerSystemWorking = 1,
        PowerSystemSleeping1 = 2,
        PowerSystemSleeping2 = 3,
        PowerSystemSleeping3 = 4,
        PowerSystemHibernate = 5,
        PowerSystemShutdown = 6,
        PowerSystemMaximum = 7,
    };
    enum class SharedVirtualDiskHandleState : int32_t
    {
        SharedVirtualDiskHandleStateNone = 0,
        SharedVirtualDiskHandleStateFileShared = 1,
        SharedVirtualDiskHandleStateHandleShared = 3,
    };
    enum class SharedVirtualDiskSupportType : int32_t
    {
        SharedVirtualDisksUnsupported = 0,
        SharedVirtualDisksSupported = 1,
        SharedVirtualDiskSnapshotsSupported = 3,
        SharedVirtualDiskCDPSnapshotsSupported = 7,
    };
    enum class TAPE_DRIVE_PROBLEM_TYPE : int32_t
    {
        TapeDriveProblemNone = 0,
        TapeDriveReadWriteWarning = 1,
        TapeDriveReadWriteError = 2,
        TapeDriveReadWarning = 3,
        TapeDriveWriteWarning = 4,
        TapeDriveReadError = 5,
        TapeDriveWriteError = 6,
        TapeDriveHardwareError = 7,
        TapeDriveUnsupportedMedia = 8,
        TapeDriveScsiConnectionError = 9,
        TapeDriveTimetoClean = 10,
        TapeDriveCleanDriveNow = 11,
        TapeDriveMediaLifeExpired = 12,
        TapeDriveSnappedTape = 13,
    };
    enum class TP_CALLBACK_PRIORITY : int32_t
    {
        TP_CALLBACK_PRIORITY_HIGH = 0,
        TP_CALLBACK_PRIORITY_NORMAL = 1,
        TP_CALLBACK_PRIORITY_LOW = 2,
        TP_CALLBACK_PRIORITY_INVALID = 3,
        TP_CALLBACK_PRIORITY_COUNT = 3,
    };
    enum class TRANSACTIONMANAGER_INFORMATION_CLASS : int32_t
    {
        TransactionManagerBasicInformation = 0,
        TransactionManagerLogInformation = 1,
        TransactionManagerLogPathInformation = 2,
        TransactionManagerRecoveryInformation = 4,
        TransactionManagerOnlineProbeInformation = 3,
        TransactionManagerOldestTransactionInformation = 5,
    };
    enum class TRANSACTION_INFORMATION_CLASS : int32_t
    {
        TransactionBasicInformation = 0,
        TransactionPropertiesInformation = 1,
        TransactionEnlistmentInformation = 2,
        TransactionSuperiorEnlistmentInformation = 3,
        TransactionBindInformation = 4,
        TransactionDTCPrivateInformation = 5,
    };
    enum class TRANSACTION_STATE : int32_t
    {
        TransactionStateNormal = 1,
        TransactionStateIndoubt = 2,
        TransactionStateCommittedNotify = 3,
    };
    enum class USB_CHARGER_PORT : int32_t
    {
        UsbChargerPort_Legacy = 0,
        UsbChargerPort_TypeC = 1,
        UsbChargerPort_Max = 2,
    };
    enum class USER_ACTIVITY_PRESENCE : int32_t
    {
        PowerUserPresent = 0,
        PowerUserNotPresent = 1,
        PowerUserInactive = 2,
        PowerUserMaximum = 3,
        PowerUserInvalid = 3,
    };
    enum class VDS_ASYNC_OUTPUT_TYPE : int32_t
    {
        VDS_ASYNCOUT_UNKNOWN = 0,
        VDS_ASYNCOUT_CREATEVOLUME = 1,
        VDS_ASYNCOUT_EXTENDVOLUME = 2,
        VDS_ASYNCOUT_SHRINKVOLUME = 3,
        VDS_ASYNCOUT_ADDVOLUMEPLEX = 4,
        VDS_ASYNCOUT_BREAKVOLUMEPLEX = 5,
        VDS_ASYNCOUT_REMOVEVOLUMEPLEX = 6,
        VDS_ASYNCOUT_REPAIRVOLUMEPLEX = 7,
        VDS_ASYNCOUT_RECOVERPACK = 8,
        VDS_ASYNCOUT_REPLACEDISK = 9,
        VDS_ASYNCOUT_CREATEPARTITION = 10,
        VDS_ASYNCOUT_CLEAN = 11,
        VDS_ASYNCOUT_CREATELUN = 50,
        VDS_ASYNCOUT_ADDLUNPLEX = 52,
        VDS_ASYNCOUT_REMOVELUNPLEX = 53,
        VDS_ASYNCOUT_EXTENDLUN = 54,
        VDS_ASYNCOUT_SHRINKLUN = 55,
        VDS_ASYNCOUT_RECOVERLUN = 56,
        VDS_ASYNCOUT_LOGINTOTARGET = 60,
        VDS_ASYNCOUT_LOGOUTFROMTARGET = 61,
        VDS_ASYNCOUT_CREATETARGET = 62,
        VDS_ASYNCOUT_CREATEPORTALGROUP = 63,
        VDS_ASYNCOUT_DELETETARGET = 64,
        VDS_ASYNCOUT_ADDPORTAL = 65,
        VDS_ASYNCOUT_REMOVEPORTAL = 66,
        VDS_ASYNCOUT_DELETEPORTALGROUP = 67,
        VDS_ASYNCOUT_FORMAT = 101,
        VDS_ASYNCOUT_CREATE_VDISK = 200,
        VDS_ASYNCOUT_ATTACH_VDISK = 201,
        VDS_ASYNCOUT_COMPACT_VDISK = 202,
        VDS_ASYNCOUT_MERGE_VDISK = 203,
        VDS_ASYNCOUT_EXPAND_VDISK = 204,
    };
    enum class VDS_CONTROLLER_STATUS : int32_t
    {
        VDS_CS_UNKNOWN = 0,
        VDS_CS_ONLINE = 1,
        VDS_CS_NOT_READY = 2,
        VDS_CS_OFFLINE = 4,
        VDS_CS_FAILED = 5,
        VDS_CS_REMOVED = 8,
    };
    enum class VDS_DRIVE_FLAG : int32_t
    {
        VDS_DRF_HOTSPARE = 1,
        VDS_DRF_ASSIGNED = 2,
        VDS_DRF_UNASSIGNED = 4,
        VDS_DRF_HOTSPARE_IN_USE = 8,
        VDS_DRF_HOTSPARE_STANDBY = 16,
    };
    enum class VDS_DRIVE_STATUS : int32_t
    {
        VDS_DRS_UNKNOWN = 0,
        VDS_DRS_ONLINE = 1,
        VDS_DRS_NOT_READY = 2,
        VDS_DRS_OFFLINE = 4,
        VDS_DRS_FAILED = 5,
        VDS_DRS_REMOVED = 8,
    };
    enum class VDS_FILE_SYSTEM_TYPE : int32_t
    {
        VDS_FST_UNKNOWN = 0,
        VDS_FST_RAW = 1,
        VDS_FST_FAT = 2,
        VDS_FST_FAT32 = 3,
        VDS_FST_NTFS = 4,
        VDS_FST_CDFS = 5,
        VDS_FST_UDF = 6,
        VDS_FST_EXFAT = 7,
        VDS_FST_CSVFS = 8,
        VDS_FST_REFS = 9,
    };
    enum class VDS_HBAPORT_SPEED_FLAG : int32_t
    {
        VDS_HSF_UNKNOWN = 0,
        VDS_HSF_1GBIT = 1,
        VDS_HSF_2GBIT = 2,
        VDS_HSF_10GBIT = 4,
        VDS_HSF_4GBIT = 8,
        VDS_HSF_NOT_NEGOTIATED = 32768,
    };
    enum class VDS_HBAPORT_STATUS : int32_t
    {
        VDS_HPS_UNKNOWN = 1,
        VDS_HPS_ONLINE = 2,
        VDS_HPS_OFFLINE = 3,
        VDS_HPS_BYPASSED = 4,
        VDS_HPS_DIAGNOSTICS = 5,
        VDS_HPS_LINKDOWN = 6,
        VDS_HPS_ERROR = 7,
        VDS_HPS_LOOPBACK = 8,
    };
    enum class VDS_HBAPORT_TYPE : int32_t
    {
        VDS_HPT_UNKNOWN = 1,
        VDS_HPT_OTHER = 2,
        VDS_HPT_NOTPRESENT = 3,
        VDS_HPT_NPORT = 5,
        VDS_HPT_NLPORT = 6,
        VDS_HPT_FLPORT = 7,
        VDS_HPT_FPORT = 8,
        VDS_HPT_EPORT = 9,
        VDS_HPT_GPORT = 10,
        VDS_HPT_LPORT = 20,
        VDS_HPT_PTP = 21,
    };
    enum class VDS_HEALTH : int32_t
    {
        VDS_H_UNKNOWN = 0,
        VDS_H_HEALTHY = 1,
        VDS_H_REBUILDING = 2,
        VDS_H_STALE = 3,
        VDS_H_FAILING = 4,
        VDS_H_FAILING_REDUNDANCY = 5,
        VDS_H_FAILED_REDUNDANCY = 6,
        VDS_H_FAILED_REDUNDANCY_FAILING = 7,
        VDS_H_FAILED = 8,
        VDS_H_REPLACED = 9,
        VDS_H_PENDING_FAILURE = 10,
        VDS_H_DEGRADED = 11,
    };
    enum class VDS_HWPROVIDER_TYPE : int32_t
    {
        VDS_HWT_UNKNOWN = 0,
        VDS_HWT_PCI_RAID = 1,
        VDS_HWT_FIBRE_CHANNEL = 2,
        VDS_HWT_ISCSI = 3,
        VDS_HWT_SAS = 4,
        VDS_HWT_HYBRID = 5,
    };
    enum class VDS_INTERCONNECT_ADDRESS_TYPE : int32_t
    {
        VDS_IA_UNKNOWN = 0,
        VDS_IA_FCFS = 1,
        VDS_IA_FCPH = 2,
        VDS_IA_FCPH3 = 3,
        VDS_IA_MAC = 4,
        VDS_IA_SCSI = 5,
    };
    enum class VDS_INTERCONNECT_FLAG : int32_t
    {
        VDS_ITF_PCI_RAID = 1,
        VDS_ITF_FIBRE_CHANNEL = 2,
        VDS_ITF_ISCSI = 4,
        VDS_ITF_SAS = 8,
    };
    enum class VDS_IPADDRESS_TYPE : int32_t
    {
        VDS_IPT_TEXT = 0,
        VDS_IPT_IPV4 = 1,
        VDS_IPT_IPV6 = 2,
        VDS_IPT_EMPTY = 3,
    };
    enum class VDS_ISCSI_AUTH_TYPE : int32_t
    {
        VDS_IAT_NONE = 0,
        VDS_IAT_CHAP = 1,
        VDS_IAT_MUTUAL_CHAP = 2,
    };
    enum class VDS_ISCSI_IPSEC_FLAG : int32_t
    {
        VDS_IIF_VALID = 1,
        VDS_IIF_IKE = 2,
        VDS_IIF_MAIN_MODE = 4,
        VDS_IIF_AGGRESSIVE_MODE = 8,
        VDS_IIF_PFS_ENABLE = 16,
        VDS_IIF_TRANSPORT_MODE_PREFERRED = 32,
        VDS_IIF_TUNNEL_MODE_PREFERRED = 64,
    };
    enum class VDS_ISCSI_LOGIN_FLAG : int32_t
    {
        VDS_ILF_REQUIRE_IPSEC = 1,
        VDS_ILF_MULTIPATH_ENABLED = 2,
    };
    enum class VDS_ISCSI_LOGIN_TYPE : int32_t
    {
        VDS_ILT_MANUAL = 0,
        VDS_ILT_PERSISTENT = 1,
        VDS_ILT_BOOT = 2,
    };
    enum class VDS_ISCSI_PORTAL_STATUS : int32_t
    {
        VDS_IPS_UNKNOWN = 0,
        VDS_IPS_ONLINE = 1,
        VDS_IPS_NOT_READY = 2,
        VDS_IPS_OFFLINE = 4,
        VDS_IPS_FAILED = 5,
    };
    enum class VDS_LOADBALANCE_POLICY_ENUM : int32_t
    {
        VDS_LBP_UNKNOWN = 0,
        VDS_LBP_FAILOVER = 1,
        VDS_LBP_ROUND_ROBIN = 2,
        VDS_LBP_ROUND_ROBIN_WITH_SUBSET = 3,
        VDS_LBP_DYN_LEAST_QUEUE_DEPTH = 4,
        VDS_LBP_WEIGHTED_PATHS = 5,
        VDS_LBP_LEAST_BLOCKS = 6,
        VDS_LBP_VENDOR_SPECIFIC = 7,
    };
    enum class VDS_LUN_FLAG : int32_t
    {
        VDS_LF_LBN_REMAP_ENABLED = 1,
        VDS_LF_READ_BACK_VERIFY_ENABLED = 2,
        VDS_LF_WRITE_THROUGH_CACHING_ENABLED = 4,
        VDS_LF_HARDWARE_CHECKSUM_ENABLED = 8,
        VDS_LF_READ_CACHE_ENABLED = 16,
        VDS_LF_WRITE_CACHE_ENABLED = 32,
        VDS_LF_MEDIA_SCAN_ENABLED = 64,
        VDS_LF_CONSISTENCY_CHECK_ENABLED = 128,
        VDS_LF_SNAPSHOT = 256,
    };
    enum class VDS_LUN_PLEX_FLAG : int32_t
    {
        VDS_LPF_LBN_REMAP_ENABLED = 1,
    };
    enum class VDS_LUN_PLEX_STATUS : int32_t
    {
        VDS_LPS_UNKNOWN = 0,
        VDS_LPS_ONLINE = 1,
        VDS_LPS_NOT_READY = 2,
        VDS_LPS_OFFLINE = 4,
        VDS_LPS_FAILED = 5,
    };
    enum class VDS_LUN_PLEX_TYPE : int32_t
    {
        VDS_LPT_UNKNOWN = 0,
        VDS_LPT_SIMPLE = 10,
        VDS_LPT_SPAN = 11,
        VDS_LPT_STRIPE = 12,
        VDS_LPT_PARITY = 14,
        VDS_LPT_RAID2 = 15,
        VDS_LPT_RAID3 = 16,
        VDS_LPT_RAID4 = 17,
        VDS_LPT_RAID5 = 18,
        VDS_LPT_RAID6 = 19,
        VDS_LPT_RAID03 = 21,
        VDS_LPT_RAID05 = 22,
        VDS_LPT_RAID10 = 23,
        VDS_LPT_RAID15 = 24,
        VDS_LPT_RAID30 = 25,
        VDS_LPT_RAID50 = 26,
        VDS_LPT_RAID53 = 28,
        VDS_LPT_RAID60 = 29,
    };
    enum class VDS_LUN_STATUS : int32_t
    {
        VDS_LS_UNKNOWN = 0,
        VDS_LS_ONLINE = 1,
        VDS_LS_NOT_READY = 2,
        VDS_LS_OFFLINE = 4,
        VDS_LS_FAILED = 5,
    };
    enum class VDS_LUN_TYPE : int32_t
    {
        VDS_LT_UNKNOWN = 0,
        VDS_LT_DEFAULT = 1,
        VDS_LT_FAULT_TOLERANT = 2,
        VDS_LT_NON_FAULT_TOLERANT = 3,
        VDS_LT_SIMPLE = 10,
        VDS_LT_SPAN = 11,
        VDS_LT_STRIPE = 12,
        VDS_LT_MIRROR = 13,
        VDS_LT_PARITY = 14,
        VDS_LT_RAID2 = 15,
        VDS_LT_RAID3 = 16,
        VDS_LT_RAID4 = 17,
        VDS_LT_RAID5 = 18,
        VDS_LT_RAID6 = 19,
        VDS_LT_RAID01 = 20,
        VDS_LT_RAID03 = 21,
        VDS_LT_RAID05 = 22,
        VDS_LT_RAID10 = 23,
        VDS_LT_RAID15 = 24,
        VDS_LT_RAID30 = 25,
        VDS_LT_RAID50 = 26,
        VDS_LT_RAID51 = 27,
        VDS_LT_RAID53 = 28,
        VDS_LT_RAID60 = 29,
        VDS_LT_RAID61 = 30,
    };
    enum class VDS_MAINTENANCE_OPERATION : int32_t
    {
        BlinkLight = 1,
        BeepAlarm = 2,
        SpinDown = 3,
        SpinUp = 4,
        Ping = 5,
    };
    enum class VDS_NOTIFICATION_TARGET_TYPE : int32_t
    {
        VDS_NTT_UNKNOWN = 0,
        VDS_NTT_PACK = 10,
        VDS_NTT_VOLUME = 11,
        VDS_NTT_DISK = 13,
        VDS_NTT_PARTITION = 60,
        VDS_NTT_DRIVE_LETTER = 61,
        VDS_NTT_FILE_SYSTEM = 62,
        VDS_NTT_MOUNT_POINT = 63,
        VDS_NTT_SUB_SYSTEM = 30,
        VDS_NTT_CONTROLLER = 31,
        VDS_NTT_DRIVE = 32,
        VDS_NTT_LUN = 33,
        VDS_NTT_PORT = 35,
        VDS_NTT_PORTAL = 36,
        VDS_NTT_TARGET = 37,
        VDS_NTT_PORTAL_GROUP = 38,
        VDS_NTT_SERVICE = 200,
    };
    enum class VDS_OBJECT_TYPE : int32_t
    {
        VDS_OT_UNKNOWN = 0,
        VDS_OT_PROVIDER = 1,
        VDS_OT_PACK = 10,
        VDS_OT_VOLUME = 11,
        VDS_OT_VOLUME_PLEX = 12,
        VDS_OT_DISK = 13,
        VDS_OT_SUB_SYSTEM = 30,
        VDS_OT_CONTROLLER = 31,
        VDS_OT_DRIVE = 32,
        VDS_OT_LUN = 33,
        VDS_OT_LUN_PLEX = 34,
        VDS_OT_PORT = 35,
        VDS_OT_PORTAL = 36,
        VDS_OT_TARGET = 37,
        VDS_OT_PORTAL_GROUP = 38,
        VDS_OT_STORAGE_POOL = 39,
        VDS_OT_HBAPORT = 90,
        VDS_OT_INIT_ADAPTER = 91,
        VDS_OT_INIT_PORTAL = 92,
        VDS_OT_ASYNC = 100,
        VDS_OT_ENUM = 101,
        VDS_OT_VDISK = 200,
        VDS_OT_OPEN_VDISK = 201,
    };
    enum class VDS_PATH_STATUS : int32_t
    {
        VDS_MPS_UNKNOWN = 0,
        VDS_MPS_ONLINE = 1,
        VDS_MPS_FAILED = 5,
        VDS_MPS_STANDBY = 7,
    };
    enum class VDS_PORT_STATUS : int32_t
    {
        VDS_PRS_UNKNOWN = 0,
        VDS_PRS_ONLINE = 1,
        VDS_PRS_NOT_READY = 2,
        VDS_PRS_OFFLINE = 4,
        VDS_PRS_FAILED = 5,
        VDS_PRS_REMOVED = 8,
    };
    enum class VDS_PROVIDER_FLAG : int32_t
    {
        VDS_PF_DYNAMIC = 1,
        VDS_PF_INTERNAL_HARDWARE_PROVIDER = 2,
        VDS_PF_ONE_DISK_ONLY_PER_PACK = 4,
        VDS_PF_ONE_PACK_ONLINE_ONLY = 8,
        VDS_PF_VOLUME_SPACE_MUST_BE_CONTIGUOUS = 16,
        VDS_PF_SUPPORT_DYNAMIC = -2147483648,
        VDS_PF_SUPPORT_FAULT_TOLERANT = 1073741824,
        VDS_PF_SUPPORT_DYNAMIC_1394 = 536870912,
        VDS_PF_SUPPORT_MIRROR = 32,
        VDS_PF_SUPPORT_RAID5 = 64,
    };
    enum class VDS_PROVIDER_LBSUPPORT_FLAG : int32_t
    {
        VDS_LBF_FAILOVER = 1,
        VDS_LBF_ROUND_ROBIN = 2,
        VDS_LBF_ROUND_ROBIN_WITH_SUBSET = 4,
        VDS_LBF_DYN_LEAST_QUEUE_DEPTH = 8,
        VDS_LBF_WEIGHTED_PATHS = 16,
        VDS_LBF_LEAST_BLOCKS = 32,
        VDS_LBF_VENDOR_SPECIFIC = 64,
    };
    enum class VDS_PROVIDER_TYPE : int32_t
    {
        VDS_PT_UNKNOWN = 0,
        VDS_PT_SOFTWARE = 1,
        VDS_PT_HARDWARE = 2,
        VDS_PT_VIRTUALDISK = 3,
        VDS_PT_MAX = 4,
    };
    enum class VDS_RAID_TYPE : int32_t
    {
        VDS_RT_UNKNOWN = 0,
        VDS_RT_RAID0 = 10,
        VDS_RT_RAID1 = 11,
        VDS_RT_RAID2 = 12,
        VDS_RT_RAID3 = 13,
        VDS_RT_RAID4 = 14,
        VDS_RT_RAID5 = 15,
        VDS_RT_RAID6 = 16,
        VDS_RT_RAID01 = 17,
        VDS_RT_RAID03 = 18,
        VDS_RT_RAID05 = 19,
        VDS_RT_RAID10 = 20,
        VDS_RT_RAID15 = 21,
        VDS_RT_RAID30 = 22,
        VDS_RT_RAID50 = 23,
        VDS_RT_RAID51 = 24,
        VDS_RT_RAID53 = 25,
        VDS_RT_RAID60 = 26,
        VDS_RT_RAID61 = 27,
    };
    enum class VDS_RECOVER_ACTION : int32_t
    {
        VDS_RA_UNKNOWN = 0,
        VDS_RA_REFRESH = 1,
        VDS_RA_RESTART = 2,
    };
    enum class VDS_STORAGE_BUS_TYPE : int32_t
    {
        VDSBusTypeUnknown = 0,
        VDSBusTypeScsi = 1,
        VDSBusTypeAtapi = 2,
        VDSBusTypeAta = 3,
        VDSBusType1394 = 4,
        VDSBusTypeSsa = 5,
        VDSBusTypeFibre = 6,
        VDSBusTypeUsb = 7,
        VDSBusTypeRAID = 8,
        VDSBusTypeiScsi = 9,
        VDSBusTypeSas = 10,
        VDSBusTypeSata = 11,
        VDSBusTypeSd = 12,
        VDSBusTypeMmc = 13,
        VDSBusTypeMax = 14,
        VDSBusTypeVirtual = 14,
        VDSBusTypeFileBackedVirtual = 15,
        VDSBusTypeSpaces = 16,
        VDSBusTypeNVMe = 17,
        VDSBusTypeScm = 18,
        VDSBusTypeUfs = 19,
        VDSBusTypeMaxReserved = 127,
    };
    enum class VDS_STORAGE_IDENTIFIER_CODE_SET : int32_t
    {
        VDSStorageIdCodeSetReserved = 0,
        VDSStorageIdCodeSetBinary = 1,
        VDSStorageIdCodeSetAscii = 2,
        VDSStorageIdCodeSetUtf8 = 3,
    };
    enum class VDS_STORAGE_IDENTIFIER_TYPE : int32_t
    {
        VDSStorageIdTypeVendorSpecific = 0,
        VDSStorageIdTypeVendorId = 1,
        VDSStorageIdTypeEUI64 = 2,
        VDSStorageIdTypeFCPHName = 3,
        VDSStorageIdTypePortRelative = 4,
        VDSStorageIdTypeTargetPortGroup = 5,
        VDSStorageIdTypeLogicalUnitGroup = 6,
        VDSStorageIdTypeMD5LogicalUnitIdentifier = 7,
        VDSStorageIdTypeScsiNameString = 8,
    };
    enum class VDS_STORAGE_POOL_STATUS : int32_t
    {
        VDS_SPS_UNKNOWN = 0,
        VDS_SPS_ONLINE = 1,
        VDS_SPS_NOT_READY = 2,
        VDS_SPS_OFFLINE = 4,
    };
    enum class VDS_STORAGE_POOL_TYPE : int32_t
    {
        VDS_SPT_UNKNOWN = 0,
        VDS_SPT_PRIMORDIAL = 1,
        VDS_SPT_CONCRETE = 2,
    };
    enum class VDS_SUB_SYSTEM_FLAG : int32_t
    {
        VDS_SF_LUN_MASKING_CAPABLE = 1,
        VDS_SF_LUN_PLEXING_CAPABLE = 2,
        VDS_SF_LUN_REMAPPING_CAPABLE = 4,
        VDS_SF_DRIVE_EXTENT_CAPABLE = 8,
        VDS_SF_HARDWARE_CHECKSUM_CAPABLE = 16,
        VDS_SF_RADIUS_CAPABLE = 32,
        VDS_SF_READ_BACK_VERIFY_CAPABLE = 64,
        VDS_SF_WRITE_THROUGH_CACHING_CAPABLE = 128,
        VDS_SF_SUPPORTS_FAULT_TOLERANT_LUNS = 512,
        VDS_SF_SUPPORTS_NON_FAULT_TOLERANT_LUNS = 1024,
        VDS_SF_SUPPORTS_SIMPLE_LUNS = 2048,
        VDS_SF_SUPPORTS_SPAN_LUNS = 4096,
        VDS_SF_SUPPORTS_STRIPE_LUNS = 8192,
        VDS_SF_SUPPORTS_MIRROR_LUNS = 16384,
        VDS_SF_SUPPORTS_PARITY_LUNS = 32768,
        VDS_SF_SUPPORTS_AUTH_CHAP = 65536,
        VDS_SF_SUPPORTS_AUTH_MUTUAL_CHAP = 131072,
        VDS_SF_SUPPORTS_SIMPLE_TARGET_CONFIG = 262144,
        VDS_SF_SUPPORTS_LUN_NUMBER = 524288,
        VDS_SF_SUPPORTS_MIRRORED_CACHE = 1048576,
        VDS_SF_READ_CACHING_CAPABLE = 2097152,
        VDS_SF_WRITE_CACHING_CAPABLE = 4194304,
        VDS_SF_MEDIA_SCAN_CAPABLE = 8388608,
        VDS_SF_CONSISTENCY_CHECK_CAPABLE = 16777216,
    };
    enum class VDS_SUB_SYSTEM_STATUS : int32_t
    {
        VDS_SSS_UNKNOWN = 0,
        VDS_SSS_ONLINE = 1,
        VDS_SSS_NOT_READY = 2,
        VDS_SSS_OFFLINE = 4,
        VDS_SSS_FAILED = 5,
        VDS_SSS_PARTIALLY_MANAGED = 9,
    };
    enum class VDS_SUB_SYSTEM_SUPPORTED_RAID_TYPE_FLAG : int32_t
    {
        VDS_SF_SUPPORTS_RAID2_LUNS = 1,
        VDS_SF_SUPPORTS_RAID3_LUNS = 2,
        VDS_SF_SUPPORTS_RAID4_LUNS = 4,
        VDS_SF_SUPPORTS_RAID5_LUNS = 8,
        VDS_SF_SUPPORTS_RAID6_LUNS = 16,
        VDS_SF_SUPPORTS_RAID01_LUNS = 32,
        VDS_SF_SUPPORTS_RAID03_LUNS = 64,
        VDS_SF_SUPPORTS_RAID05_LUNS = 128,
        VDS_SF_SUPPORTS_RAID10_LUNS = 256,
        VDS_SF_SUPPORTS_RAID15_LUNS = 512,
        VDS_SF_SUPPORTS_RAID30_LUNS = 1024,
        VDS_SF_SUPPORTS_RAID50_LUNS = 2048,
        VDS_SF_SUPPORTS_RAID51_LUNS = 4096,
        VDS_SF_SUPPORTS_RAID53_LUNS = 8192,
        VDS_SF_SUPPORTS_RAID60_LUNS = 16384,
        VDS_SF_SUPPORTS_RAID61_LUNS = 32768,
    };
    enum class VDS_TRANSITION_STATE : int32_t
    {
        VDS_TS_UNKNOWN = 0,
        VDS_TS_STABLE = 1,
        VDS_TS_EXTENDING = 2,
        VDS_TS_SHRINKING = 3,
        VDS_TS_RECONFIGING = 4,
        VDS_TS_RESTRIPING = 5,
    };
    enum class VDS_VERSION_SUPPORT_FLAG : int32_t
    {
        VDS_VSF_1_0 = 1,
        VDS_VSF_1_1 = 2,
        VDS_VSF_2_0 = 4,
        VDS_VSF_2_1 = 8,
        VDS_VSF_3_0 = 16,
    };
    enum class VIDEO_BANK_TYPE : int32_t
    {
        VideoNotBanked = 0,
        VideoBanked1RW = 1,
        VideoBanked1R1W = 2,
        VideoBanked2RW = 3,
        NumVideoBankTypes = 4,
    };
    enum class VIDEO_POWER_STATE : int32_t
    {
        VideoPowerUnspecified = 0,
        VideoPowerOn = 1,
        VideoPowerStandBy = 2,
        VideoPowerSuspend = 3,
        VideoPowerOff = 4,
        VideoPowerHibernate = 5,
        VideoPowerShutdown = 6,
        VideoPowerMaximum = 7,
    };
    enum class VIDEO_WIN32K_CALLBACKS_PARAMS_TYPE : int32_t
    {
        VideoPowerNotifyCallout = 1,
        VideoEnumChildPdoNotifyCallout = 3,
        VideoFindAdapterCallout = 4,
        VideoPnpNotifyCallout = 7,
        VideoDxgkDisplaySwitchCallout = 8,
        VideoDxgkFindAdapterTdrCallout = 10,
        VideoDxgkHardwareProtectionTeardown = 11,
        VideoRepaintDesktop = 12,
        VideoUpdateCursor = 13,
        VideoDisableMultiPlaneOverlay = 14,
        VideoDesktopDuplicationChange = 15,
        VideoBlackScreenDiagnostics = 16,
    };
    enum class VIRTUAL_STORAGE_BEHAVIOR_CODE : int32_t
    {
        VirtualStorageBehaviorUndefined = 0,
        VirtualStorageBehaviorCacheWriteThrough = 1,
        VirtualStorageBehaviorCacheWriteBack = 2,
    };
    enum class VSS_ALTERNATE_WRITER_STATE : int32_t
    {
        VSS_AWS_UNDEFINED = 0,
        VSS_AWS_NO_ALTERNATE_WRITER = 1,
        VSS_AWS_ALTERNATE_WRITER_EXISTS = 2,
        VSS_AWS_THIS_IS_ALTERNATE_WRITER = 3,
    };
    enum class VSS_APPLICATION_LEVEL : int32_t
    {
        VSS_APP_UNKNOWN = 0,
        VSS_APP_SYSTEM = 1,
        VSS_APP_BACK_END = 2,
        VSS_APP_FRONT_END = 3,
        VSS_APP_SYSTEM_RM = 4,
        VSS_APP_AUTO = -1,
    };
    enum class VSS_BACKUP_SCHEMA : int32_t
    {
        VSS_BS_UNDEFINED = 0,
        VSS_BS_DIFFERENTIAL = 1,
        VSS_BS_INCREMENTAL = 2,
        VSS_BS_EXCLUSIVE_INCREMENTAL_DIFFERENTIAL = 4,
        VSS_BS_LOG = 8,
        VSS_BS_COPY = 16,
        VSS_BS_TIMESTAMPED = 32,
        VSS_BS_LAST_MODIFY = 64,
        VSS_BS_LSN = 128,
        VSS_BS_WRITER_SUPPORTS_NEW_TARGET = 256,
        VSS_BS_WRITER_SUPPORTS_RESTORE_WITH_MOVE = 512,
        VSS_BS_INDEPENDENT_SYSTEM_STATE = 1024,
        VSS_BS_ROLLFORWARD_RESTORE = 4096,
        VSS_BS_RESTORE_RENAME = 8192,
        VSS_BS_AUTHORITATIVE_RESTORE = 16384,
        VSS_BS_WRITER_SUPPORTS_PARALLEL_RESTORES = 32768,
    };
    enum class VSS_BACKUP_TYPE : int32_t
    {
        VSS_BT_UNDEFINED = 0,
        VSS_BT_FULL = 1,
        VSS_BT_INCREMENTAL = 2,
        VSS_BT_DIFFERENTIAL = 3,
        VSS_BT_LOG = 4,
        VSS_BT_COPY = 5,
        VSS_BT_OTHER = 6,
    };
    enum class VSS_COMPONENT_FLAGS : int32_t
    {
        VSS_CF_BACKUP_RECOVERY = 1,
        VSS_CF_APP_ROLLBACK_RECOVERY = 2,
        VSS_CF_NOT_SYSTEM_STATE = 4,
    };
    enum class VSS_COMPONENT_TYPE : int32_t
    {
        VSS_CT_UNDEFINED = 0,
        VSS_CT_DATABASE = 1,
        VSS_CT_FILEGROUP = 2,
    };
    enum class VSS_FILE_RESTORE_STATUS : int32_t
    {
        VSS_RS_UNDEFINED = 0,
        VSS_RS_NONE = 1,
        VSS_RS_ALL = 2,
        VSS_RS_FAILED = 3,
    };
    enum class VSS_FILE_SPEC_BACKUP_TYPE : int32_t
    {
        VSS_FSBT_FULL_BACKUP_REQUIRED = 1,
        VSS_FSBT_DIFFERENTIAL_BACKUP_REQUIRED = 2,
        VSS_FSBT_INCREMENTAL_BACKUP_REQUIRED = 4,
        VSS_FSBT_LOG_BACKUP_REQUIRED = 8,
        VSS_FSBT_FULL_SNAPSHOT_REQUIRED = 256,
        VSS_FSBT_DIFFERENTIAL_SNAPSHOT_REQUIRED = 512,
        VSS_FSBT_INCREMENTAL_SNAPSHOT_REQUIRED = 1024,
        VSS_FSBT_LOG_SNAPSHOT_REQUIRED = 2048,
        VSS_FSBT_CREATED_DURING_BACKUP = 65536,
        VSS_FSBT_ALL_BACKUP_REQUIRED = 15,
        VSS_FSBT_ALL_SNAPSHOT_REQUIRED = 3840,
    };
    enum class VSS_HARDWARE_OPTIONS : int32_t
    {
        VSS_BREAKEX_FLAG_MASK_LUNS = 1,
        VSS_BREAKEX_FLAG_MAKE_READ_WRITE = 2,
        VSS_BREAKEX_FLAG_REVERT_IDENTITY_ALL = 4,
        VSS_BREAKEX_FLAG_REVERT_IDENTITY_NONE = 8,
        VSS_ONLUNSTATECHANGE_NOTIFY_READ_WRITE = 256,
        VSS_ONLUNSTATECHANGE_NOTIFY_LUN_PRE_RECOVERY = 512,
        VSS_ONLUNSTATECHANGE_NOTIFY_LUN_POST_RECOVERY = 1024,
        VSS_ONLUNSTATECHANGE_DO_MASK_LUNS = 2048,
    };
    enum class VSS_MGMT_OBJECT_TYPE : int32_t
    {
        VSS_MGMT_OBJECT_UNKNOWN = 0,
        VSS_MGMT_OBJECT_VOLUME = 1,
        VSS_MGMT_OBJECT_DIFF_VOLUME = 2,
        VSS_MGMT_OBJECT_DIFF_AREA = 3,
    };
    enum class VSS_OBJECT_TYPE : int32_t
    {
        VSS_OBJECT_UNKNOWN = 0,
        VSS_OBJECT_NONE = 1,
        VSS_OBJECT_SNAPSHOT_SET = 2,
        VSS_OBJECT_SNAPSHOT = 3,
        VSS_OBJECT_PROVIDER = 4,
        VSS_OBJECT_TYPE_COUNT = 5,
    };
    enum class VSS_PROTECTION_FAULT : int32_t
    {
        VSS_PROTECTION_FAULT_NONE = 0,
        VSS_PROTECTION_FAULT_DIFF_AREA_MISSING = 1,
        VSS_PROTECTION_FAULT_IO_FAILURE_DURING_ONLINE = 2,
        VSS_PROTECTION_FAULT_META_DATA_CORRUPTION = 3,
        VSS_PROTECTION_FAULT_MEMORY_ALLOCATION_FAILURE = 4,
        VSS_PROTECTION_FAULT_MAPPED_MEMORY_FAILURE = 5,
        VSS_PROTECTION_FAULT_COW_READ_FAILURE = 6,
        VSS_PROTECTION_FAULT_COW_WRITE_FAILURE = 7,
        VSS_PROTECTION_FAULT_DIFF_AREA_FULL = 8,
        VSS_PROTECTION_FAULT_GROW_TOO_SLOW = 9,
        VSS_PROTECTION_FAULT_GROW_FAILED = 10,
        VSS_PROTECTION_FAULT_DESTROY_ALL_SNAPSHOTS = 11,
        VSS_PROTECTION_FAULT_FILE_SYSTEM_FAILURE = 12,
        VSS_PROTECTION_FAULT_IO_FAILURE = 13,
        VSS_PROTECTION_FAULT_DIFF_AREA_REMOVED = 14,
        VSS_PROTECTION_FAULT_EXTERNAL_WRITER_TO_DIFF_AREA = 15,
        VSS_PROTECTION_FAULT_MOUNT_DURING_CLUSTER_OFFLINE = 16,
    };
    enum class VSS_PROTECTION_LEVEL : int32_t
    {
        VSS_PROTECTION_LEVEL_ORIGINAL_VOLUME = 0,
        VSS_PROTECTION_LEVEL_SNAPSHOT = 1,
    };
    enum class VSS_PROVIDER_CAPABILITIES : int32_t
    {
        VSS_PRV_CAPABILITY_LEGACY = 1,
        VSS_PRV_CAPABILITY_COMPLIANT = 2,
        VSS_PRV_CAPABILITY_LUN_REPOINT = 4,
        VSS_PRV_CAPABILITY_LUN_RESYNC = 8,
        VSS_PRV_CAPABILITY_OFFLINE_CREATION = 16,
        VSS_PRV_CAPABILITY_MULTIPLE_IMPORT = 32,
        VSS_PRV_CAPABILITY_RECYCLING = 64,
        VSS_PRV_CAPABILITY_PLEX = 128,
        VSS_PRV_CAPABILITY_DIFFERENTIAL = 256,
        VSS_PRV_CAPABILITY_CLUSTERED = 512,
    };
    enum class VSS_PROVIDER_TYPE : int32_t
    {
        VSS_PROV_UNKNOWN = 0,
        VSS_PROV_SYSTEM = 1,
        VSS_PROV_SOFTWARE = 2,
        VSS_PROV_HARDWARE = 3,
        VSS_PROV_FILESHARE = 4,
    };
    enum class VSS_RECOVERY_OPTIONS : int32_t
    {
        VSS_RECOVERY_REVERT_IDENTITY_ALL = 256,
        VSS_RECOVERY_NO_VOLUME_CHECK = 512,
    };
    enum class VSS_RESTOREMETHOD_ENUM : int32_t
    {
        VSS_RME_UNDEFINED = 0,
        VSS_RME_RESTORE_IF_NOT_THERE = 1,
        VSS_RME_RESTORE_IF_CAN_REPLACE = 2,
        VSS_RME_STOP_RESTORE_START = 3,
        VSS_RME_RESTORE_TO_ALTERNATE_LOCATION = 4,
        VSS_RME_RESTORE_AT_REBOOT = 5,
        VSS_RME_RESTORE_AT_REBOOT_IF_CANNOT_REPLACE = 6,
        VSS_RME_CUSTOM = 7,
        VSS_RME_RESTORE_STOP_START = 8,
    };
    enum class VSS_RESTORE_TARGET : int32_t
    {
        VSS_RT_UNDEFINED = 0,
        VSS_RT_ORIGINAL = 1,
        VSS_RT_ALTERNATE = 2,
        VSS_RT_DIRECTED = 3,
        VSS_RT_ORIGINAL_LOCATION = 4,
    };
    enum class VSS_RESTORE_TYPE : int32_t
    {
        VSS_RTYPE_UNDEFINED = 0,
        VSS_RTYPE_BY_COPY = 1,
        VSS_RTYPE_IMPORT = 2,
        VSS_RTYPE_OTHER = 3,
    };
    enum class VSS_ROLLFORWARD_TYPE : int32_t
    {
        VSS_RF_UNDEFINED = 0,
        VSS_RF_NONE = 1,
        VSS_RF_ALL = 2,
        VSS_RF_PARTIAL = 3,
    };
    enum class VSS_SNAPSHOT_COMPATIBILITY : int32_t
    {
        VSS_SC_DISABLE_DEFRAG = 1,
        VSS_SC_DISABLE_CONTENTINDEX = 2,
    };
    enum class VSS_SNAPSHOT_CONTEXT : int32_t
    {
        VSS_CTX_BACKUP = 0,
        VSS_CTX_FILE_SHARE_BACKUP = 16,
        VSS_CTX_NAS_ROLLBACK = 25,
        VSS_CTX_APP_ROLLBACK = 9,
        VSS_CTX_CLIENT_ACCESSIBLE = 29,
        VSS_CTX_CLIENT_ACCESSIBLE_WRITERS = 13,
        VSS_CTX_ALL = -1,
    };
    enum class VSS_SNAPSHOT_PROPERTY_ID : int32_t
    {
        VSS_SPROPID_UNKNOWN = 0,
        VSS_SPROPID_SNAPSHOT_ID = 1,
        VSS_SPROPID_SNAPSHOT_SET_ID = 2,
        VSS_SPROPID_SNAPSHOTS_COUNT = 3,
        VSS_SPROPID_SNAPSHOT_DEVICE = 4,
        VSS_SPROPID_ORIGINAL_VOLUME = 5,
        VSS_SPROPID_ORIGINATING_MACHINE = 6,
        VSS_SPROPID_SERVICE_MACHINE = 7,
        VSS_SPROPID_EXPOSED_NAME = 8,
        VSS_SPROPID_EXPOSED_PATH = 9,
        VSS_SPROPID_PROVIDER_ID = 10,
        VSS_SPROPID_SNAPSHOT_ATTRIBUTES = 11,
        VSS_SPROPID_CREATION_TIMESTAMP = 12,
        VSS_SPROPID_STATUS = 13,
    };
    enum class VSS_SNAPSHOT_STATE : int32_t
    {
        VSS_SS_UNKNOWN = 0,
        VSS_SS_PREPARING = 1,
        VSS_SS_PROCESSING_PREPARE = 2,
        VSS_SS_PREPARED = 3,
        VSS_SS_PROCESSING_PRECOMMIT = 4,
        VSS_SS_PRECOMMITTED = 5,
        VSS_SS_PROCESSING_COMMIT = 6,
        VSS_SS_COMMITTED = 7,
        VSS_SS_PROCESSING_POSTCOMMIT = 8,
        VSS_SS_PROCESSING_PREFINALCOMMIT = 9,
        VSS_SS_PREFINALCOMMITTED = 10,
        VSS_SS_PROCESSING_POSTFINALCOMMIT = 11,
        VSS_SS_CREATED = 12,
        VSS_SS_ABORTED = 13,
        VSS_SS_DELETED = 14,
        VSS_SS_POSTCOMMITTED = 15,
        VSS_SS_COUNT = 16,
    };
    enum class VSS_SOURCE_TYPE : int32_t
    {
        VSS_ST_UNDEFINED = 0,
        VSS_ST_TRANSACTEDDB = 1,
        VSS_ST_NONTRANSACTEDDB = 2,
        VSS_ST_OTHER = 3,
    };
    enum class VSS_SUBSCRIBE_MASK : int32_t
    {
        VSS_SM_POST_SNAPSHOT_FLAG = 1,
        VSS_SM_BACKUP_EVENTS_FLAG = 2,
        VSS_SM_RESTORE_EVENTS_FLAG = 4,
        VSS_SM_IO_THROTTLING_FLAG = 8,
        VSS_SM_ALL_FLAGS = -1,
    };
    enum class VSS_USAGE_TYPE : int32_t
    {
        VSS_UT_UNDEFINED = 0,
        VSS_UT_BOOTABLESYSTEMSTATE = 1,
        VSS_UT_SYSTEMSERVICE = 2,
        VSS_UT_USERDATA = 3,
        VSS_UT_OTHER = 4,
    };
    enum class VSS_VOLUME_SNAPSHOT_ATTRIBUTES : int32_t
    {
        VSS_VOLSNAP_ATTR_PERSISTENT = 1,
        VSS_VOLSNAP_ATTR_NO_AUTORECOVERY = 2,
        VSS_VOLSNAP_ATTR_CLIENT_ACCESSIBLE = 4,
        VSS_VOLSNAP_ATTR_NO_AUTO_RELEASE = 8,
        VSS_VOLSNAP_ATTR_NO_WRITERS = 16,
        VSS_VOLSNAP_ATTR_TRANSPORTABLE = 32,
        VSS_VOLSNAP_ATTR_NOT_SURFACED = 64,
        VSS_VOLSNAP_ATTR_NOT_TRANSACTED = 128,
        VSS_VOLSNAP_ATTR_HARDWARE_ASSISTED = 65536,
        VSS_VOLSNAP_ATTR_DIFFERENTIAL = 131072,
        VSS_VOLSNAP_ATTR_PLEX = 262144,
        VSS_VOLSNAP_ATTR_IMPORTED = 524288,
        VSS_VOLSNAP_ATTR_EXPOSED_LOCALLY = 1048576,
        VSS_VOLSNAP_ATTR_EXPOSED_REMOTELY = 2097152,
        VSS_VOLSNAP_ATTR_AUTORECOVER = 4194304,
        VSS_VOLSNAP_ATTR_ROLLBACK_RECOVERY = 8388608,
        VSS_VOLSNAP_ATTR_DELAYED_POSTSNAPSHOT = 16777216,
        VSS_VOLSNAP_ATTR_TXF_RECOVERY = 33554432,
        VSS_VOLSNAP_ATTR_FILE_SHARE = 67108864,
    };
    enum class VSS_WRITERRESTORE_ENUM : int32_t
    {
        VSS_WRE_UNDEFINED = 0,
        VSS_WRE_NEVER = 1,
        VSS_WRE_IF_REPLACE_FAILS = 2,
        VSS_WRE_ALWAYS = 3,
    };
    enum class VSS_WRITER_STATE : int32_t
    {
        VSS_WS_UNKNOWN = 0,
        VSS_WS_STABLE = 1,
        VSS_WS_WAITING_FOR_FREEZE = 2,
        VSS_WS_WAITING_FOR_THAW = 3,
        VSS_WS_WAITING_FOR_POST_SNAPSHOT = 4,
        VSS_WS_WAITING_FOR_BACKUP_COMPLETE = 5,
        VSS_WS_FAILED_AT_IDENTIFY = 6,
        VSS_WS_FAILED_AT_PREPARE_BACKUP = 7,
        VSS_WS_FAILED_AT_PREPARE_SNAPSHOT = 8,
        VSS_WS_FAILED_AT_FREEZE = 9,
        VSS_WS_FAILED_AT_THAW = 10,
        VSS_WS_FAILED_AT_POST_SNAPSHOT = 11,
        VSS_WS_FAILED_AT_BACKUP_COMPLETE = 12,
        VSS_WS_FAILED_AT_PRE_RESTORE = 13,
        VSS_WS_FAILED_AT_POST_RESTORE = 14,
        VSS_WS_FAILED_AT_BACKUPSHUTDOWN = 15,
        VSS_WS_COUNT = 16,
    };
    enum class WIN32_MEMORY_INFORMATION_CLASS : int32_t
    {
        MemoryRegionInfo = 0,
    };
    enum class _DEVICEDUMP_COLLECTION_TYPE : int32_t
    {
        TCCollectionBugCheck = 1,
        TCCollectionApplicationRequested = 2,
        TCCollectionDeviceRequested = 3,
    };
#pragma endregion enums

#pragma region forward_declarations
    struct ACCESS_REASONS;
    struct ACPI_REAL_TIME;
    struct ADDJOB_INFO_1A;
    struct ADDJOB_INFO_1W;
    struct ADMINISTRATOR_POWER_POLICY;
    struct ANON_OBJECT_HEADER;
    struct ANON_OBJECT_HEADER_BIGOBJ;
    struct ANON_OBJECT_HEADER_V2;
    struct APPLICATIONLAUNCH_SETTING_VALUE;
    struct APP_LOCAL_DEVICE_ID;
    struct APP_MEMORY_INFORMATION;
    struct AtlThunkData_t;
    struct BACKLIGHT_REDUCTION_GAMMA_RAMP;
    struct BANK_POSITION;
    struct BATTERY_CHARGER_STATUS;
    struct BATTERY_CHARGING_SOURCE;
    struct BATTERY_CHARGING_SOURCE_INFORMATION;
    struct BATTERY_INFORMATION;
    struct BATTERY_MANUFACTURE_DATE;
    struct BATTERY_QUERY_INFORMATION;
    struct BATTERY_REPORTING_SCALE;
    struct BATTERY_SET_INFORMATION;
    struct BATTERY_STATUS;
    struct BATTERY_USB_CHARGER_STATUS;
    struct BATTERY_WAIT_STATUS;
    struct BIDI_DATA;
    struct BIDI_REQUEST_CONTAINER;
    struct BIDI_REQUEST_DATA;
    struct BIDI_RESPONSE_CONTAINER;
    struct BIDI_RESPONSE_DATA;
    struct BINARY_CONTAINER;
    struct BIN_COUNT;
    struct BIN_RANGE;
    struct BIN_RESULTS;
    struct BOOL;
    struct BRIGHTNESS_LEVEL;
    struct BRIGHTNESS_NIT_RANGE;
    struct BRIGHTNESS_NIT_RANGES;
    struct BSTRBLOB;
    struct BULK_SECURITY_TEST_DATA;
    struct BoundaryDescriptorHandle;
    struct CACHE_DESCRIPTOR;
    struct CACHE_RELATIONSHIP;
    struct CDDDXGK_REDIRBITMAPPRESENTINFO;
    struct CFG_CALL_TARGET_INFO;
    struct CHANGER_ELEMENT;
    struct CHANGER_ELEMENT_LIST;
    struct CHANGER_ELEMENT_STATUS;
    struct CHANGER_ELEMENT_STATUS_EX;
    struct CHANGER_EXCHANGE_MEDIUM;
    struct CHANGER_INITIALIZE_ELEMENT_STATUS;
    struct CHANGER_MOVE_MEDIUM;
    struct CHANGER_PRODUCT_DATA;
    struct CHANGER_READ_ELEMENT_STATUS;
    struct CHANGER_SEND_VOLUME_TAG_INFORMATION;
    struct CHANGER_SET_ACCESS;
    struct CHANGER_SET_POSITION;
    struct CHAR_IMAGE_INFO;
    struct CHAR_INFO;
    struct CHROMATICITY_COORDINATE;
    struct CLASS_MEDIA_CHANGE_CONTEXT;
    struct CLIPDATA;
    struct CLUSTER_RANGE;
    struct CM_Power_Data_s;
    struct COLORSPACE_TRANSFORM;
    struct COLORSPACE_TRANSFORM_1DLUT_CAP;
    struct COLORSPACE_TRANSFORM_3x4;
    struct COLORSPACE_TRANSFORM_DATA_CAP;
    struct COLORSPACE_TRANSFORM_MATRIX_CAP;
    struct COLORSPACE_TRANSFORM_MATRIX_V2;
    struct COLORSPACE_TRANSFORM_SET_INPUT;
    struct COLORSPACE_TRANSFORM_TARGET_CAPS;
    struct COMMCONFIG;
    struct COMMPROP;
    struct COMMTIMEOUTS;
    struct COMSTAT;
    struct CONSOLE_CURSOR_INFO;
    struct CONSOLE_FONT_INFO;
    struct CONSOLE_FONT_INFOEX;
    struct CONSOLE_HISTORY_INFO;
    struct CONSOLE_READCONSOLE_CONTROL;
    struct CONSOLE_SCREEN_BUFFER_INFO;
    struct CONSOLE_SCREEN_BUFFER_INFOEX;
    struct CONSOLE_SELECTION_INFO;
    struct CONTAINER_ROOT_INFO_INPUT;
    struct CONTAINER_ROOT_INFO_OUTPUT;
    struct CONTAINER_VOLUME_STATE;
    struct COORD;
    struct CORE_PRINTER_DRIVERA;
    struct CORE_PRINTER_DRIVERW;
    struct CORRELATION_VECTOR;
    struct CSV_MGMT_LOCK;
    struct CSV_QUERY_FILE_REVISION_FILE_ID_128;
    struct CSV_QUERY_MDS_PATH_V2;
    struct CSV_QUERY_VOLUME_REDIRECT_STATE;
    struct CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG;
    union CY;
    struct D3DBRANCH;
    struct D3DCLIPSTATUS;
    struct D3DDEVINFO_TEXTUREMANAGER;
    struct D3DDEVINFO_TEXTURING;
    struct D3DDP_PTRSTRIDE;
    struct D3DDRAWPRIMITIVESTRIDEDDATA;
    struct D3DEXECUTEDATA;
    struct D3DFINDDEVICERESULT;
    struct D3DFINDDEVICESEARCH;
    struct D3DHVERTEX;
    struct D3DINSTRUCTION;
    struct D3DLIGHT;
    struct D3DLIGHT2;
    struct D3DLIGHT7;
    struct D3DLIGHTDATA;
    struct D3DLIGHTINGCAPS;
    struct D3DLIGHTINGELEMENT;
    struct D3DLINE;
    struct D3DLINEPATTERN;
    struct D3DLVERTEX;
    struct D3DMATERIAL;
    struct D3DMATERIAL7;
    struct D3DMATRIXLOAD;
    struct D3DMATRIXMULTIPLY;
    struct D3DNTHAL_CALLBACKS;
    struct D3DNTHAL_CALLBACKS2;
    struct D3DNTHAL_CALLBACKS3;
    struct D3DNTHAL_CLEAR2DATA;
    struct D3DNTHAL_CONTEXTCREATEDATA;
    struct D3DNTHAL_CONTEXTDESTROYALLDATA;
    struct D3DNTHAL_CONTEXTDESTROYDATA;
    struct D3DNTHAL_D3DDX6EXTENDEDCAPS;
    struct D3DNTHAL_D3DEXTENDEDCAPS;
    struct D3DNTHAL_DP2CLEAR;
    struct D3DNTHAL_DP2COMMAND;
    struct D3DNTHAL_DP2CREATELIGHT;
    struct D3DNTHAL_DP2EXT;
    struct D3DNTHAL_DP2INDEXEDLINELIST;
    struct D3DNTHAL_DP2INDEXEDLINESTRIP;
    struct D3DNTHAL_DP2INDEXEDTRIANGLEFAN;
    struct D3DNTHAL_DP2INDEXEDTRIANGLELIST;
    struct D3DNTHAL_DP2INDEXEDTRIANGLELIST2;
    struct D3DNTHAL_DP2INDEXEDTRIANGLESTRIP;
    struct D3DNTHAL_DP2LINELIST;
    struct D3DNTHAL_DP2LINESTRIP;
    struct D3DNTHAL_DP2POINTS;
    struct D3DNTHAL_DP2RENDERSTATE;
    struct D3DNTHAL_DP2SETCLIPPLANE;
    struct D3DNTHAL_DP2SETLIGHT;
    struct D3DNTHAL_DP2SETPALETTE;
    struct D3DNTHAL_DP2SETPRIORITY;
    struct D3DNTHAL_DP2SETRENDERTARGET;
    struct D3DNTHAL_DP2SETTEXLOD;
    struct D3DNTHAL_DP2SETTRANSFORM;
    struct D3DNTHAL_DP2STARTVERTEX;
    struct D3DNTHAL_DP2STATESET;
    struct D3DNTHAL_DP2TEXBLT;
    struct D3DNTHAL_DP2TEXTURESTAGESTATE;
    struct D3DNTHAL_DP2TRIANGLEFAN;
    struct D3DNTHAL_DP2TRIANGLEFAN_IMM;
    struct D3DNTHAL_DP2TRIANGLELIST;
    struct D3DNTHAL_DP2TRIANGLESTRIP;
    struct D3DNTHAL_DP2UPDATEPALETTE;
    struct D3DNTHAL_DP2VIEWPORTINFO;
    struct D3DNTHAL_DP2WINFO;
    struct D3DNTHAL_DP2ZRANGE;
    struct D3DNTHAL_DRAWPRIMITIVES2DATA;
    struct D3DNTHAL_GLOBALDRIVERDATA;
    struct D3DNTHAL_SCENECAPTUREDATA;
    struct D3DNTHAL_SETRENDERTARGETDATA;
    struct D3DNTHAL_TEXTURECREATEDATA;
    struct D3DNTHAL_TEXTUREDESTROYDATA;
    struct D3DNTHAL_TEXTUREGETSURFDATA;
    struct D3DNTHAL_TEXTURESWAPDATA;
    struct D3DNTHAL_VALIDATETEXTURESTAGESTATEDATA;
    struct D3DPICKRECORD;
    struct D3DPOINT;
    struct D3DPROCESSVERTICES;
    struct D3DRECT;
    struct D3DSPAN;
    struct D3DSTATE;
    struct D3DSTATS;
    struct D3DSTATUS;
    struct D3DTEXTURELOAD;
    struct D3DTLVERTEX;
    struct D3DTRANSFORMCAPS;
    struct D3DTRANSFORMDATA;
    struct D3DTRIANGLE;
    struct D3DVECTOR;
    struct D3DVERTEX;
    struct D3DVERTEXBUFFERDESC;
    struct D3DVIEWPORT;
    struct D3DVIEWPORT2;
    struct D3DVIEWPORT7;
    struct DATATYPES_INFO_1A;
    struct DATATYPES_INFO_1W;
    struct DCB;
    struct DDNTCORECAPS;
    struct DDVIDEOPORTNOTIFY;
    struct DDVIDEOPORTSTATUS;
    struct DD_DESTROYDDLOCALDATA;
    struct DD_DRVSETCOLORKEYDATA;
    struct DD_HALINFO_V4;
    struct DD_MORECAPS;
    struct DD_SETCLIPLISTDATA;
    struct DECIMAL;
    struct DECRYPTION_STATUS_BUFFER;
    struct DEVICEDUMP_PRIVATE_SUBSECTION;
    struct DEVICEDUMP_PUBLIC_SUBSECTION;
    struct DEVICEDUMP_RESTRICTED_SUBSECTION;
    struct DEVICEDUMP_SECTION_HEADER;
    struct DEVICEDUMP_STORAGEDEVICE_DATA;
    struct DEVICEDUMP_STORAGESTACK_PUBLIC_DUMP;
    struct DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD;
    struct DEVICEDUMP_STRUCTURE_VERSION;
    struct DEVICEDUMP_SUBSECTION_POINTER;
    struct DEVICE_DATA_SET_LBP_STATE_PARAMETERS;
    struct DEVICE_DATA_SET_LB_PROVISIONING_STATE;
    struct DEVICE_DATA_SET_LB_PROVISIONING_STATE_V2;
    struct DEVICE_DATA_SET_RANGE;
    struct DEVICE_DATA_SET_REPAIR_OUTPUT;
    struct DEVICE_DATA_SET_REPAIR_PARAMETERS;
    struct DEVICE_DATA_SET_SCRUB_EX_OUTPUT;
    struct DEVICE_DATA_SET_SCRUB_OUTPUT;
    struct DEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT;
    struct DEVICE_DSM_CONVERSION_OUTPUT;
    struct DEVICE_DSM_DEFINITION;
    struct DEVICE_DSM_FREE_SPACE_OUTPUT;
    struct DEVICE_DSM_LOST_QUERY_OUTPUT;
    struct DEVICE_DSM_LOST_QUERY_PARAMETERS;
    struct DEVICE_DSM_NOTIFICATION_PARAMETERS;
    struct DEVICE_DSM_NVCACHE_CHANGE_PRIORITY_PARAMETERS;
    struct DEVICE_DSM_OFFLOAD_READ_PARAMETERS;
    struct DEVICE_DSM_OFFLOAD_WRITE_PARAMETERS;
    struct DEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT;
    struct DEVICE_DSM_RANGE_ERROR_INFO;
    struct DEVICE_DSM_REPORT_ZONES_DATA;
    struct DEVICE_DSM_REPORT_ZONES_PARAMETERS;
    struct DEVICE_DSM_TIERING_QUERY_INPUT;
    struct DEVICE_DSM_TIERING_QUERY_OUTPUT;
    struct DEVICE_EVENT_BECOMING_READY;
    struct DEVICE_EVENT_EXTERNAL_REQUEST;
    struct DEVICE_EVENT_GENERIC_DATA;
    struct DEVICE_EVENT_MOUNT;
    struct DEVICE_EVENT_RBC_DATA;
    struct DEVICE_INTERNAL_STATUS_DATA;
    struct DEVICE_LOCATION;
    struct DEVICE_MANAGE_DATA_SET_ATTRIBUTES;
    struct DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT;
    struct DEVICE_MEDIA_INFO;
    struct DEVICE_NOTIFY_SUBSCRIBE_PARAMETERS;
    struct DEVICE_STORAGE_ADDRESS_RANGE;
    struct DEVICE_STORAGE_RANGE_ATTRIBUTES;
    struct DEVPROPCOMPKEY;
    struct DEVPROPERTY;
    struct DEVPROPKEY;
    struct DEV_BROADCAST_DEVICEINTERFACE_A;
    struct DEV_BROADCAST_DEVICEINTERFACE_W;
    struct DEV_BROADCAST_DEVNODE;
    struct DEV_BROADCAST_HANDLE;
    struct DEV_BROADCAST_HANDLE32;
    struct DEV_BROADCAST_HANDLE64;
    struct DEV_BROADCAST_HDR;
    struct DEV_BROADCAST_NET;
    struct DEV_BROADCAST_OEM;
    struct DEV_BROADCAST_PORT_A;
    struct DEV_BROADCAST_PORT_W;
    struct DEV_BROADCAST_VOLUME;
    struct DHPDEV__;
    struct DHSURF__;
    struct DISK_CONTROLLER_NUMBER;
    struct DISK_HEALTH_NOTIFICATION_DATA;
    struct DISK_HISTOGRAM;
    struct DISK_LOGGING;
    struct DISK_RECORD;
    struct DISPLAY_BRIGHTNESS;
    struct DOC_INFO_1A;
    struct DOC_INFO_1W;
    struct DOC_INFO_2A;
    struct DOC_INFO_2W;
    struct DOC_INFO_3A;
    struct DOC_INFO_3W;
    struct DPI_AWARENESS_CONTEXT__;
    struct DRH_APIBITMAPDATA;
    struct DRIVERSTATUS;
    struct DRIVER_INFO_1A;
    struct DRIVER_INFO_1W;
    struct DRIVER_INFO_2A;
    struct DRIVER_INFO_2W;
    struct DRIVER_INFO_3A;
    struct DRIVER_INFO_3W;
    struct DRIVER_INFO_4A;
    struct DRIVER_INFO_4W;
    struct DRIVER_INFO_5A;
    struct DRIVER_INFO_5W;
    struct DRIVER_INFO_6A;
    struct DRIVER_INFO_6W;
    struct DRIVER_INFO_8A;
    struct DRIVER_INFO_8W;
    struct DUPLICATE_EXTENTS_DATA_EX;
    struct DXGK_WIN32K_PARAM_DATA;
    struct DispatcherQueueOptions;
    struct EMFINFO;
    struct ENCLAVE_CREATE_INFO_SGX;
    struct ENCLAVE_CREATE_INFO_VBS;
    struct ENCLAVE_CREATE_INFO_VBS_BASIC;
    struct ENCLAVE_IDENTITY;
    struct ENCLAVE_INFORMATION;
    struct ENCLAVE_INIT_INFO_SGX;
    struct ENCLAVE_INIT_INFO_VBS;
    struct ENCLAVE_INIT_INFO_VBS_BASIC;
    struct ENCLAVE_LOAD_DATA_VBS_BASIC;
    struct ENCLAVE_VBS_BASIC_KEY_REQUEST;
    struct ENCRYPTED_DATA_INFO;
    struct ENCRYPTION_BUFFER;
    struct ENCRYPTION_KEY_CTRL_INPUT;
    struct ENG_EVENT;
    struct ENLISTMENT_BASIC_INFORMATION;
    struct ENLISTMENT_CRM_INFORMATION;
    struct ENUMUILANG;
    struct EVENTLOGRECORD;
    struct EVENTLOG_FULL_INFORMATION;
    struct EVENTSFORLOGFILE;
    struct EXCEPTION_RECORD32;
    struct EXCEPTION_REGISTRATION_RECORD;
    struct EXTENDED_ENCRYPTED_DATA_INFO;
    struct FD_LIGATURE;
    struct FILE_DESIRED_STORAGE_CLASS_INFORMATION;
    struct FILE_FS_PERSISTENT_VOLUME_INFORMATION;
    struct FILE_INITIATE_REPAIR_OUTPUT_BUFFER;
    struct FILE_LAYOUT_ENTRY;
    struct FILE_LAYOUT_INFO_ENTRY;
    struct FILE_LAYOUT_NAME_ENTRY;
    struct FILE_PREFETCH;
    struct FILE_PREFETCH_EX;
    struct FILE_PROVIDER_EXTERNAL_INFO_V0;
    struct FILE_PROVIDER_EXTERNAL_INFO_V1;
    struct FILE_REFERENCE_RANGE;
    struct FILE_REGION_INFO;
    struct FILE_REGION_INPUT;
    struct FILE_REGION_OUTPUT;
    union FILE_SEGMENT_ELEMENT;
    struct FILE_TYPE_NOTIFICATION_INPUT;
    struct FILE_ZERO_DATA_INFORMATION_EX;
    struct FLOAT128;
    struct FLOATING_SAVE_AREA;
    union FLOAT_LONG;
    struct FOCUS_EVENT_RECORD;
    struct FONT_IMAGE_INFO;
    struct FORM_INFO_1A;
    struct FORM_INFO_1W;
    struct FORM_INFO_2A;
    struct FORM_INFO_2W;
    struct FSCNTL_SCREEN_INFO;
    struct FSCTL_OFFLOAD_READ_INPUT;
    struct FSCTL_OFFLOAD_READ_OUTPUT;
    struct FSCTL_OFFLOAD_WRITE_INPUT;
    struct FSCTL_OFFLOAD_WRITE_OUTPUT;
    struct FSCTL_QUERY_FAT_BPB_BUFFER;
    struct FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX;
    struct FSVIDEO_COPY_FRAME_BUFFER;
    struct FSVIDEO_CURSOR_POSITION;
    struct FSVIDEO_MODE_INFORMATION;
    struct FSVIDEO_REVERSE_MOUSE_POINTER;
    struct FSVIDEO_SCREEN_INFORMATION;
    struct FSVIDEO_WRITE_TO_FRAME_BUFFER;
    struct GAMMA_RAMP_DXGI_1;
    struct GAMMA_RAMP_RGB;
    struct GAMMA_RAMP_RGB256x3x16;
    struct GDI_NONREMOTE;
    struct GETVERSIONINPARAMS;
    struct GET_CHANGER_PARAMETERS;
    struct GET_DEVICE_INTERNAL_STATUS_DATA_REQUEST;
    struct GET_FILTER_FILE_IDENTIFIER_INPUT;
    struct GET_FILTER_FILE_IDENTIFIER_OUTPUT;
    struct GET_MEDIA_TYPES;
    struct GLOBAL_MACHINE_POWER_POLICY;
    struct GLOBAL_POWER_POLICY;
    struct GLOBAL_USER_POWER_POLICY;
    struct GP_LOG_PAGE_DESCRIPTOR;
    struct GROUP_AFFINITY;
    struct GROUP_RELATIONSHIP;
    struct GUID_IO_DISK_CLONE_ARRIVAL_INFORMATION;
    struct HACCEL__;
    struct HANDLE;
    struct HBITMAP__;
    struct HBM__;
    struct HBRUSH__;
    struct HCOLORSPACE__;
    struct HDC__;
    struct HDESK__;
    struct HDEV__;
    struct HDRVOBJ__;
    struct HEAP_OPTIMIZE_RESOURCES_INFORMATION;
    struct HEAP_SUMMARY;
    struct HENHMETAFILE__;
    struct HFASTMUTEX__;
    struct HFONT__;
    struct HGLRC__;
    struct HHOOK__;
    struct HIBERFILE_BUCKET;
    struct HICON__;
    struct HINSTANCE;
    struct HINSTANCE__;
    struct HISTOGRAM_BUCKET;
    struct HKEY__;
    struct HKL__;
    struct HLSURF__;
    struct HMENU__;
    struct HMETAFILE__;
    struct HMONITOR__;
    struct HPALETTE__;
    struct HPEN__;
    struct HRGN__;
    struct HRSRC__;
    struct HSEMAPHORE__;
    struct HSPRITE__;
    struct HSTR__;
    struct HSURF__;
    struct HTASK__;
    struct HUMPD__;
    struct HWINEVENTHOOK__;
    struct HWINSTA__;
    struct HWND__;
    struct IDDVideoPortContainer;
    struct IDDVideoPortContainerVtbl;
    struct IDEREGS;
    struct IDirectDrawVideoPort;
    struct IDirectDrawVideoPortNotify;
    struct IDirectDrawVideoPortNotifyVtbl;
    struct IDirectDrawVideoPortVtbl;
    struct IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;
    struct IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;
    struct IMAGE_ARCHITECTURE_ENTRY;
    struct IMAGE_ARCHITECTURE_HEADER;
    struct IMAGE_ARCHIVE_MEMBER_HEADER;
    struct IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY;
    union IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA;
    struct IMAGE_ARM_RUNTIME_FUNCTION_ENTRY;
    union IMAGE_AUX_SYMBOL;
    union IMAGE_AUX_SYMBOL_EX;
    struct IMAGE_AUX_SYMBOL_TOKEN_DEF;
    struct IMAGE_BASE_RELOCATION;
    struct IMAGE_BOUND_FORWARDER_REF;
    struct IMAGE_BOUND_IMPORT_DESCRIPTOR;
    struct IMAGE_CE_RUNTIME_FUNCTION_ENTRY;
    struct IMAGE_COR20_HEADER;
    struct IMAGE_DEBUG_MISC;
    struct IMAGE_DELAYLOAD_DESCRIPTOR;
    struct IMAGE_DOS_HEADER;
    struct IMAGE_DYNAMIC_RELOCATION32;
    struct IMAGE_DYNAMIC_RELOCATION32_V2;
    struct IMAGE_DYNAMIC_RELOCATION64;
    struct IMAGE_DYNAMIC_RELOCATION64_V2;
    struct IMAGE_DYNAMIC_RELOCATION_TABLE;
    struct IMAGE_ENCLAVE_CONFIG32;
    struct IMAGE_ENCLAVE_CONFIG64;
    struct IMAGE_ENCLAVE_IMPORT;
    struct IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER;
    struct IMAGE_EXPORT_DIRECTORY;
    struct IMAGE_HOT_PATCH_BASE;
    struct IMAGE_HOT_PATCH_HASHES;
    struct IMAGE_HOT_PATCH_INFO;
    struct IMAGE_IMPORT_BY_NAME;
    struct IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION;
    struct IMAGE_IMPORT_DESCRIPTOR;
    struct IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION;
    struct IMAGE_LINENUMBER;
    struct IMAGE_LOAD_CONFIG_CODE_INTEGRITY;
    struct IMAGE_NT_HEADERS;
    struct IMAGE_OPTIONAL_HEADER;
    struct IMAGE_OS2_HEADER;
    struct IMAGE_POLICY_ENTRY;
    struct IMAGE_POLICY_METADATA;
    struct IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER;
    struct IMAGE_RELOCATION;
    struct IMAGE_RESOURCE_DATA_ENTRY;
    struct IMAGE_RESOURCE_DIRECTORY;
    struct IMAGE_RESOURCE_DIRECTORY_ENTRY;
    struct IMAGE_RESOURCE_DIRECTORY_STRING;
    struct IMAGE_RESOURCE_DIR_STRING_U;
    struct IMAGE_ROM_HEADERS;
    struct IMAGE_ROM_OPTIONAL_HEADER;
    struct IMAGE_RUNTIME_FUNCTION_ENTRY;
    struct IMAGE_SEPARATE_DEBUG_HEADER;
    struct IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION;
    struct IMAGE_SYMBOL;
    struct IMAGE_SYMBOL_EX;
    struct IMAGE_THUNK_DATA32;
    struct IMAGE_THUNK_DATA64;
    struct IMAGE_TLS_DIRECTORY32;
    struct IMAGE_TLS_DIRECTORY64;
    struct IMAGE_VXD_HEADER;
    struct IMPORT_OBJECT_HEADER;
    struct INDIRECT_DISPLAY_INFO;
    struct INPUT_RECORD;
    struct IO_COUNTERS;
    struct IO_IRP_EXT_TRACK_OFFSET_HEADER;
    struct IVssExamineWriterMetadata;
    struct JOBOBJECT_ASSOCIATE_COMPLETION_PORT;
    struct JOBOBJECT_BASIC_ACCOUNTING_INFORMATION;
    struct JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION;
    struct JOBOBJECT_BASIC_LIMIT_INFORMATION;
    struct JOBOBJECT_BASIC_PROCESS_ID_LIST;
    struct JOBOBJECT_BASIC_UI_RESTRICTIONS;
    struct JOBOBJECT_CPU_RATE_CONTROL_INFORMATION;
    struct JOBOBJECT_END_OF_JOB_TIME_INFORMATION;
    struct JOBOBJECT_EXTENDED_LIMIT_INFORMATION;
    struct JOBOBJECT_IO_ATTRIBUTION_INFORMATION;
    struct JOBOBJECT_IO_ATTRIBUTION_STATS;
    struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION;
    struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE;
    struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2;
    struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3;
    struct JOBOBJECT_JOBSET_INFORMATION;
    struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION;
    struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2;
    struct JOBOBJECT_NET_RATE_CONTROL_INFORMATION;
    struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION;
    struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2;
    struct JOBOBJECT_SECURITY_LIMIT_INFORMATION;
    struct JOB_INFO_1A;
    struct JOB_INFO_1W;
    struct JOB_INFO_2A;
    struct JOB_INFO_2W;
    struct JOB_INFO_3;
    struct JOB_INFO_4A;
    struct JOB_INFO_4W;
    struct JOB_SET_ARRAY;
    struct KEY_EVENT_RECORD;
    struct KNONVOLATILE_CONTEXT_POINTERS;
    struct KNONVOLATILE_CONTEXT_POINTERS_ARM64;
    struct KTMOBJECT_CURSOR;
    union LARGE_INTEGER;
    struct LIGATURE;
    struct LRESULT;
    struct LSTATUS;
    struct M128A;
    struct MACHINE_POWER_POLICY;
    struct MACHINE_PROCESSOR_POWER_POLICY;
    struct MAXVERSIONTESTED_INFO;
    struct MEMORYSTATUS;
    struct MEMORYSTATUSEX;
    struct MEMORY_BASIC_INFORMATION;
    struct MEMORY_BASIC_INFORMATION32;
    struct MEMORY_BASIC_INFORMATION64;
    struct MEMORY_PRIORITY_INFORMATION;
    struct MEM_ADDRESS_REQUIREMENTS;
    struct MEM_EXTENDED_PARAMETER;
    struct MENU_EVENT_RECORD;
    struct MIPI_DSI_CAPS;
    struct MIPI_DSI_PACKET;
    struct MIPI_DSI_RESET;
    struct MIPI_DSI_TRANSMISSION;
    struct MODEMDEVCAPS;
    struct MODEMSETTINGS;
    struct MONITOR_INFO_1A;
    struct MONITOR_INFO_1W;
    struct MONITOR_INFO_2A;
    struct MONITOR_INFO_2W;
    struct MOUSE_EVENT_RECORD;
    struct MOVE_FILE_RECORD_DATA;
    struct NETWORK_APP_INSTANCE_EA;
    struct NON_PAGED_DEBUG_INFO;
    struct NOTIFY_USER_POWER_SETTING;
    struct NTSTATUS;
    struct NT_TIB;
    struct NT_TIB32;
    struct NT_TIB64;
    struct NUMA_NODE_RELATIONSHIP;
    struct NV_MEMORY_RANGE;
    struct NamespaceHandle;
    struct OUTPUT_WIRE_FORMAT;
    struct OVERLAPPED;
    struct PACKEDEVENTINFO;
    struct PANEL_BRIGHTNESS_SENSOR_DATA;
    struct PANEL_GET_BACKLIGHT_REDUCTION;
    struct PANEL_GET_BRIGHTNESS;
    struct PANEL_QUERY_BRIGHTNESS_CAPS;
    struct PANEL_QUERY_BRIGHTNESS_RANGES;
    struct PANEL_SET_BACKLIGHT_OPTIMIZATION;
    struct PANEL_SET_BRIGHTNESS;
    struct PANEL_SET_BRIGHTNESS_STATE;
    struct PATHNAME_BUFFER;
    struct PEB;
    struct PEB_LDR_DATA;
    struct PERF_BIN;
    struct PERSISTENT_RESERVE_COMMAND;
    struct PHYSICAL_ELEMENT_STATUS;
    struct PHYSICAL_ELEMENT_STATUS_DESCRIPTOR;
    struct PHYSICAL_ELEMENT_STATUS_REQUEST;
    struct POINTE;
    struct POINTFIX;
    struct POINTQF;
    struct PORT_INFO_1A;
    struct PORT_INFO_1W;
    struct PORT_INFO_2A;
    struct PORT_INFO_2W;
    struct PORT_INFO_3A;
    struct PORT_INFO_3W;
    struct POWERBROADCAST_SETTING;
    struct POWER_ACTION_POLICY;
    struct POWER_IDLE_RESILIENCY;
    struct POWER_MONITOR_INVOCATION;
    struct POWER_PLATFORM_INFORMATION;
    struct POWER_POLICY;
    struct POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES;
    struct POWER_SESSION_CONNECT;
    struct POWER_SESSION_RIT_STATE;
    struct POWER_SESSION_TIMEOUTS;
    struct POWER_SESSION_WINLOGON;
    struct POWER_USER_PRESENCE;
    struct PPM_IDLESTATE_EVENT;
    struct PPM_IDLE_ACCOUNTING;
    struct PPM_IDLE_ACCOUNTING_EX;
    struct PPM_IDLE_STATE_ACCOUNTING;
    struct PPM_IDLE_STATE_ACCOUNTING_EX;
    struct PPM_IDLE_STATE_BUCKET_EX;
    struct PPM_PERFSTATE_DOMAIN_EVENT;
    struct PPM_PERFSTATE_EVENT;
    struct PPM_THERMALCHANGE_EVENT;
    struct PPM_THERMAL_POLICY_EVENT;
    struct PPM_WMI_IDLE_STATE;
    struct PPM_WMI_IDLE_STATES;
    struct PPM_WMI_IDLE_STATES_EX;
    struct PPM_WMI_LEGACY_PERFSTATE;
    struct PPM_WMI_PERF_STATE;
    struct PPM_WMI_PERF_STATES;
    struct PPM_WMI_PERF_STATES_EX;
    struct PREVENT_MEDIA_REMOVAL;
    struct PRINTER_CONNECTION_INFO_1A;
    struct PRINTER_CONNECTION_INFO_1W;
    struct PRINTER_DEFAULTSA;
    struct PRINTER_DEFAULTSW;
    struct PRINTER_ENUM_VALUESA;
    struct PRINTER_ENUM_VALUESW;
    struct PRINTER_INFO_1A;
    struct PRINTER_INFO_1W;
    struct PRINTER_INFO_2A;
    struct PRINTER_INFO_2W;
    struct PRINTER_INFO_3;
    struct PRINTER_INFO_4A;
    struct PRINTER_INFO_4W;
    struct PRINTER_INFO_5A;
    struct PRINTER_INFO_5W;
    struct PRINTER_INFO_6;
    struct PRINTER_INFO_7A;
    struct PRINTER_INFO_7W;
    struct PRINTER_INFO_8A;
    struct PRINTER_INFO_8W;
    struct PRINTER_INFO_9A;
    struct PRINTER_INFO_9W;
    struct PRINTER_NOTIFY_INFO;
    struct PRINTER_NOTIFY_INFO_DATA;
    struct PRINTER_NOTIFY_OPTIONS;
    struct PRINTER_NOTIFY_OPTIONS_TYPE;
    struct PRINTER_OPTIONSA;
    struct PRINTER_OPTIONSW;
    struct PRINTPROCESSOR_CAPS_1;
    struct PRINTPROCESSOR_CAPS_2;
    struct PRINTPROCESSOR_INFO_1A;
    struct PRINTPROCESSOR_INFO_1W;
    struct PRINT_EXECUTION_DATA;
    struct PROCESSOR_GROUP_INFO;
    struct PROCESSOR_IDLESTATE_INFO;
    struct PROCESSOR_IDLESTATE_POLICY;
    struct PROCESSOR_NUMBER;
    struct PROCESSOR_OBJECT_INFO;
    struct PROCESSOR_OBJECT_INFO_EX;
    struct PROCESSOR_PERFSTATE_POLICY;
    struct PROCESSOR_POWER_POLICY;
    struct PROCESSOR_POWER_POLICY_INFO;
    struct PROCESSOR_RELATIONSHIP;
    struct PROCESS_DYNAMIC_EH_CONTINUATION_TARGET;
    struct PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION;
    struct PROCESS_HEAP_ENTRY;
    struct PROCESS_INFORMATION;
    struct PROCESS_LEAP_SECOND_INFO;
    struct PROCESS_MEMORY_EXHAUSTION_INFO;
    struct PROCESS_MITIGATION_ASLR_POLICY;
    struct PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY;
    struct PROCESS_MITIGATION_CHILD_PROCESS_POLICY;
    struct PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY;
    struct PROCESS_MITIGATION_DEP_POLICY;
    struct PROCESS_MITIGATION_DYNAMIC_CODE_POLICY;
    struct PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY;
    struct PROCESS_MITIGATION_FONT_DISABLE_POLICY;
    struct PROCESS_MITIGATION_IMAGE_LOAD_POLICY;
    struct PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY;
    struct PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY;
    struct PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY;
    struct PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY;
    struct PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY;
    struct PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY;
    struct PROCESS_POWER_THROTTLING_STATE;
    struct PROCESS_PROTECTION_LEVEL_INFORMATION;
    struct PROVIDOR_INFO_1A;
    struct PROVIDOR_INFO_1W;
    struct PROVIDOR_INFO_2A;
    struct PROVIDOR_INFO_2W;
    struct PTP_POOL;
    struct PWM_CONTROLLER_GET_ACTUAL_PERIOD_OUTPUT;
    struct PWM_CONTROLLER_INFO;
    struct PWM_CONTROLLER_SET_DESIRED_PERIOD_INPUT;
    struct PWM_CONTROLLER_SET_DESIRED_PERIOD_OUTPUT;
    struct PWM_PIN_GET_ACTIVE_DUTY_CYCLE_PERCENTAGE_OUTPUT;
    struct PWM_PIN_GET_POLARITY_OUTPUT;
    struct PWM_PIN_IS_STARTED_OUTPUT;
    struct PWM_PIN_SET_ACTIVE_DUTY_CYCLE_PERCENTAGE_INPUT;
    struct PWM_PIN_SET_POLARITY_INPUT;
    struct PrintNamedProperty;
    struct PrintPropertiesCollection;
    struct PrintPropertyValue;
    struct QUERY_BAD_RANGES_INPUT;
    struct QUERY_BAD_RANGES_INPUT_RANGE;
    struct QUERY_BAD_RANGES_OUTPUT;
    struct QUERY_BAD_RANGES_OUTPUT_RANGE;
    struct QUERY_FILE_LAYOUT_INPUT;
    struct QUERY_FILE_LAYOUT_OUTPUT;
    struct QUOTA_LIMITS_EX;
    union RATE_QUOTA_LIMIT;
    struct READ_ELEMENT_ADDRESS_INFO;
    struct REARRANGE_FILE_DATA;
    struct REASON_CONTEXT;
    struct RECTFX;
    struct REDBOOK_DIGITAL_AUDIO_EXTRACTION_INFO;
    struct REDIRECTION_DESCRIPTOR;
    struct REDIRECTION_FUNCTION_DESCRIPTOR;
    struct REFS_SMR_VOLUME_GC_PARAMETERS;
    struct REFS_SMR_VOLUME_INFO_OUTPUT;
    struct REFS_VOLUME_DATA_BUFFER;
    struct REMOVE_ELEMENT_AND_TRUNCATE_REQUEST;
    struct REQUEST_RAW_ENCRYPTED_DATA;
    struct RESOURCEMANAGER_BASIC_INFORMATION;
    struct RESOURCEMANAGER_COMPLETION_INFORMATION;
    struct RESUME_PERFORMANCE;
    struct RETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER;
    struct RETRIEVAL_POINTER_COUNT;
    struct RPC_IMPORT_CONTEXT_P;
    struct RTL_BARRIER;
    struct RTL_CONDITION_VARIABLE;
    struct RTL_CRITICAL_SECTION;
    struct RTL_CRITICAL_SECTION_DEBUG;
    union RTL_RUN_ONCE;
    struct RTL_SRWLOCK;
    struct RTL_USER_PROCESS_PARAMETERS;
    struct RemBRUSH;
    struct RemHBITMAP;
    struct RemHENHMETAFILE;
    struct RemHGLOBAL;
    struct RemHMETAFILEPICT;
    struct RemHPALETTE;
    struct RemotableHandle;
    struct SCARD_IO_REQUEST;
    struct SCARD_T0_COMMAND;
    struct SCARD_T0_REQUEST;
    struct SCARD_T1_REQUEST;
    struct SCM_INTERLEAVED_PD_INFO;
    struct SCM_LD_INTERLEAVE_SET_INFO;
    struct SCM_LOGICAL_DEVICES;
    struct SCM_LOGICAL_DEVICE_INSTANCE;
    struct SCM_PD_DESCRIPTOR_HEADER;
    struct SCM_PD_DEVICE_HANDLE;
    struct SCM_PD_DEVICE_INFO;
    struct SCM_PD_DEVICE_SPECIFIC_INFO;
    struct SCM_PD_DEVICE_SPECIFIC_PROPERTY;
    struct SCM_PD_FIRMWARE_ACTIVATE;
    struct SCM_PD_FIRMWARE_DOWNLOAD;
    struct SCM_PD_FIRMWARE_INFO;
    struct SCM_PD_FIRMWARE_SLOT_INFO;
    struct SCM_PD_HEALTH_NOTIFICATION_DATA;
    struct SCM_PD_LOCATION_STRING;
    struct SCM_PD_MANAGEMENT_STATUS;
    struct SCM_PD_PASSTHROUGH_INPUT;
    struct SCM_PD_PASSTHROUGH_INVDIMM_INPUT;
    struct SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT;
    struct SCM_PD_PASSTHROUGH_OUTPUT;
    struct SCM_PD_PROPERTY_QUERY;
    struct SCM_PD_REINITIALIZE_MEDIA_INPUT;
    struct SCM_PD_REINITIALIZE_MEDIA_OUTPUT;
    struct SCM_PHYSICAL_DEVICES;
    struct SCM_PHYSICAL_DEVICE_INSTANCE;
    struct SCM_REGION;
    struct SCM_REGIONS;
    struct SCOPE_TABLE_AMD64;
    struct SCOPE_TABLE_ARM;
    struct SCOPE_TABLE_ARM64;
    struct SCRUB_DATA_INPUT;
    struct SCRUB_DATA_OUTPUT;
    struct SCRUB_PARITY_EXTENT;
    struct SCRUB_PARITY_EXTENT_DATA;
    struct SD_CHANGE_MACHINE_SID_INPUT;
    struct SD_CHANGE_MACHINE_SID_OUTPUT;
    struct SD_ENUM_SDS_ENTRY;
    struct SD_ENUM_SDS_INPUT;
    struct SD_ENUM_SDS_OUTPUT;
    struct SD_GLOBAL_CHANGE_INPUT;
    struct SD_GLOBAL_CHANGE_OUTPUT;
    struct SD_QUERY_STATS_INPUT;
    struct SD_QUERY_STATS_OUTPUT;
    struct SECURITY_ATTRIBUTES;
    struct SECURITY_DESCRIPTOR_RELATIVE;
    struct SECURITY_OBJECT_AI_PARAMS;
    struct SENDCMDINPARAMS;
    struct SENDCMDOUTPARAMS;
    struct SERVERSILO_BASIC_INFORMATION;
    struct SET_ACTIVE_COLOR_PROFILE_NAME;
    struct SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT;
    struct SET_PARTITION_INFORMATION_EX;
    struct SET_POWER_SETTING_VALUE;
    struct SET_PURGE_FAILURE_MODE_INPUT;
    struct SE_ACCESS_REPLY;
    struct SE_ACCESS_REQUEST;
    struct SE_IMPERSONATION_STATE;
    struct SE_SECURITY_DESCRIPTOR;
    union SE_SID;
    struct SE_TOKEN_USER;
    struct SHARED_VIRTUAL_DISK_SUPPORT;
    struct SHUFFLE_FILE_DATA;
    struct SILOOBJECT_BASIC_INFORMATION;
    struct SI_COPYFILE;
    union SLIST_HEADER;
    struct SMALL_RECT;
    struct STARTING_LCN_INPUT_BUFFER_EX;
    struct STARTUPINFOA;
    struct STARTUPINFOEXA;
    struct STARTUPINFOEXW;
    struct STARTUPINFOW;
    struct STORAGE_ALLOCATE_BC_STREAM_INPUT;
    struct STORAGE_ALLOCATE_BC_STREAM_OUTPUT;
    struct STORAGE_ATTRIBUTE_MGMT;
    struct STORAGE_BREAK_RESERVATION_REQUEST;
    struct STORAGE_BUS_RESET_REQUEST;
    struct STORAGE_COUNTER;
    struct STORAGE_COUNTERS;
    struct STORAGE_CRYPTO_CAPABILITY;
    struct STORAGE_CRYPTO_DESCRIPTOR;
    struct STORAGE_DEVICE_FAULT_DOMAIN_DESCRIPTOR;
    struct STORAGE_DEVICE_LOCATION_DESCRIPTOR;
    struct STORAGE_DEVICE_MANAGEMENT_STATUS;
    struct STORAGE_DEVICE_NUMA_PROPERTY;
    struct STORAGE_DEVICE_NUMBER;
    struct STORAGE_DEVICE_NUMBERS;
    struct STORAGE_DEVICE_NUMBER_EX;
    struct STORAGE_DEVICE_TIERING_DESCRIPTOR;
    struct STORAGE_DEVICE_UNSAFE_SHUTDOWN_COUNT;
    struct STORAGE_DIAGNOSTIC_DATA;
    struct STORAGE_DIAGNOSTIC_REQUEST;
    struct STORAGE_EVENT_NOTIFICATION;
    struct STORAGE_FAILURE_PREDICTION_CONFIG;
    struct STORAGE_GET_BC_PROPERTIES_OUTPUT;
    struct STORAGE_HOTPLUG_INFO;
    struct STORAGE_HW_ENDURANCE_DATA_DESCRIPTOR;
    struct STORAGE_HW_ENDURANCE_INFO;
    struct STORAGE_HW_FIRMWARE_DOWNLOAD_V2;
    struct STORAGE_HW_FIRMWARE_INFO;
    struct STORAGE_HW_FIRMWARE_INFO_QUERY;
    struct STORAGE_HW_FIRMWARE_SLOT_INFO;
    struct STORAGE_IDENTIFIER;
    struct STORAGE_IDLE_POWER;
    struct STORAGE_IDLE_POWERUP_REASON;
    struct STORAGE_LB_PROVISIONING_MAP_RESOURCES;
    struct STORAGE_MEDIA_SERIAL_NUMBER_DATA;
    struct STORAGE_OFFLOAD_READ_OUTPUT;
    struct STORAGE_OFFLOAD_TOKEN;
    struct STORAGE_OFFLOAD_WRITE_OUTPUT;
    struct STORAGE_OPERATIONAL_REASON;
    struct STORAGE_PREDICT_FAILURE;
    struct STORAGE_PRIORITY_HINT_SUPPORT;
    struct STORAGE_PROPERTY_SET;
    struct STORAGE_PROTOCOL_DATA_DESCRIPTOR_EXT;
    struct STORAGE_PROTOCOL_SPECIFIC_DATA_EXT;
    struct STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY;
    struct STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY;
    struct STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST;
    struct STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE;
    struct STORAGE_READ_CAPACITY;
    struct STORAGE_RPMB_DATA_FRAME;
    struct STORAGE_RPMB_DESCRIPTOR;
    struct STORAGE_TIER;
    struct STORAGE_TIER_REGION;
    struct STORAGE_ZONED_DEVICE_DESCRIPTOR;
    struct STORAGE_ZONE_DESCRIPTOR;
    struct STORAGE_ZONE_GROUP;
    struct STREAMS_ASSOCIATE_ID_INPUT_BUFFER;
    struct STREAMS_QUERY_ID_OUTPUT_BUFFER;
    struct STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER;
    struct STREAM_EXTENT_ENTRY;
    struct STREAM_INFORMATION_ENTRY;
    struct STREAM_LAYOUT_ENTRY;
    struct SUPPORTED_OS_INFO;
    struct SYSTEM_ACCESS_FILTER_ACE;
    struct SYSTEM_BATTERY_STATE;
    struct SYSTEM_CPU_SET_INFORMATION;
    struct SYSTEM_LOGICAL_PROCESSOR_INFORMATION;
    struct SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX;
    struct SYSTEM_POWER_CAPABILITIES;
    struct SYSTEM_POWER_LEVEL;
    struct SYSTEM_POWER_POLICY;
    struct SYSTEM_POWER_STATUS;
    struct SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION;
    struct SYSTEM_PROCESS_TRUST_LABEL_ACE;
    struct TAPE_CREATE_PARTITION;
    struct TAPE_ERASE;
    struct TAPE_GET_DRIVE_PARAMETERS;
    struct TAPE_GET_MEDIA_PARAMETERS;
    struct TAPE_GET_POSITION;
    struct TAPE_GET_STATISTICS;
    struct TAPE_PREPARE;
    struct TAPE_SET_DRIVE_PARAMETERS;
    struct TAPE_SET_MEDIA_PARAMETERS;
    struct TAPE_SET_POSITION;
    struct TAPE_STATISTICS;
    struct TAPE_WMI_OPERATIONS;
    struct TAPE_WRITE_MARKS;
    struct TEB;
    struct THERMAL_EVENT;
    struct THERMAL_INFORMATION;
    struct THERMAL_POLICY;
    struct THERMAL_WAIT_READ;
    struct THREAD_POWER_THROTTLING_STATE;
    struct TOKEN_BNO_ISOLATION_INFORMATION;
    struct TOKEN_SID_INFORMATION;
    struct TP_CALLBACK_ENVIRON_V3;
    struct TP_CALLBACK_INSTANCE;
    struct TP_CLEANUP_GROUP;
    struct TP_IO;
    struct TP_POOL;
    struct TP_POOL_STACK_INFORMATION;
    struct TP_TIMER;
    struct TP_WAIT;
    struct TP_WORK;
    struct TRANSACTIONMANAGER_BASIC_INFORMATION;
    struct TRANSACTIONMANAGER_LOGPATH_INFORMATION;
    struct TRANSACTIONMANAGER_LOG_INFORMATION;
    struct TRANSACTIONMANAGER_OLDEST_INFORMATION;
    struct TRANSACTIONMANAGER_RECOVERY_INFORMATION;
    struct TRANSACTION_BASIC_INFORMATION;
    struct TRANSACTION_BIND_INFORMATION;
    struct TRANSACTION_ENLISTMENTS_INFORMATION;
    struct TRANSACTION_ENLISTMENT_PAIR;
    struct TRANSACTION_LIST_ENTRY;
    struct TRANSACTION_LIST_INFORMATION;
    struct TRANSACTION_PROPERTIES_INFORMATION;
    struct TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION;
    struct TXFS_ROLLFORWARD_REDO_INFORMATION;
    struct TXFS_START_RM_INFORMATION;
    struct TimerQueueHandle;
    union ULARGE_INTEGER;
    struct UMS_CREATE_THREAD_ATTRIBUTES;
    struct UMS_SCHEDULER_STARTUP_INFO;
    struct UMS_SYSTEM_THREAD_INFORMATION;
    struct USER_POWER_POLICY;
    union USN_RECORD_UNION;
    struct VBS_BASIC_ENCLAVE_EXCEPTION_AMD64;
    struct VBS_BASIC_ENCLAVE_SYSCALL_PAGE;
    struct VBS_BASIC_ENCLAVE_THREAD_DESCRIPTOR32;
    struct VBS_BASIC_ENCLAVE_THREAD_DESCRIPTOR64;
    struct VBS_ENCLAVE_REPORT;
    struct VBS_ENCLAVE_REPORT_MODULE;
    struct VBS_ENCLAVE_REPORT_PKG_HEADER;
    struct VBS_ENCLAVE_REPORT_VARDATA_HEADER;
    struct VDS_ASYNC_OUTPUT;
    struct VDS_CONTROLLER_NOTIFICATION;
    struct VDS_CONTROLLER_PROP;
    struct VDS_DISK_NOTIFICATION;
    struct VDS_DRIVE_EXTENT;
    struct VDS_DRIVE_LETTER_NOTIFICATION;
    struct VDS_DRIVE_NOTIFICATION;
    struct VDS_DRIVE_PROP;
    struct VDS_DRIVE_PROP2;
    struct VDS_FILE_SYSTEM_NOTIFICATION;
    struct VDS_HBAPORT_PROP;
    struct VDS_HINTS;
    struct VDS_HINTS2;
    struct VDS_INTERCONNECT;
    struct VDS_IPADDRESS;
    struct VDS_ISCSI_INITIATOR_ADAPTER_PROP;
    struct VDS_ISCSI_INITIATOR_PORTAL_PROP;
    struct VDS_ISCSI_IPSEC_KEY;
    struct VDS_ISCSI_PORTALGROUP_PROP;
    struct VDS_ISCSI_PORTAL_PROP;
    struct VDS_ISCSI_SHARED_SECRET;
    struct VDS_ISCSI_TARGET_PROP;
    struct VDS_LUN_INFORMATION;
    struct VDS_LUN_NOTIFICATION;
    struct VDS_LUN_PLEX_PROP;
    struct VDS_LUN_PROP;
    struct VDS_MOUNT_POINT_NOTIFICATION;
    struct VDS_NOTIFICATION;
    struct VDS_PACK_NOTIFICATION;
    struct VDS_PARTITION_NOTIFICATION;
    struct VDS_PATH_ID;
    struct VDS_PATH_INFO;
    struct VDS_PATH_POLICY;
    struct VDS_POOL_ATTRIBUTES;
    struct VDS_POOL_CUSTOM_ATTRIBUTES;
    struct VDS_PORTAL_GROUP_NOTIFICATION;
    struct VDS_PORTAL_NOTIFICATION;
    struct VDS_PORT_NOTIFICATION;
    struct VDS_PORT_PROP;
    struct VDS_PROVIDER_PROP;
    struct VDS_SERVICE_NOTIFICATION;
    struct VDS_STORAGE_DEVICE_ID_DESCRIPTOR;
    struct VDS_STORAGE_IDENTIFIER;
    struct VDS_STORAGE_POOL_DRIVE_EXTENT;
    struct VDS_STORAGE_POOL_PROP;
    struct VDS_SUB_SYSTEM_NOTIFICATION;
    struct VDS_SUB_SYSTEM_PROP;
    struct VDS_SUB_SYSTEM_PROP2;
    struct VDS_TARGET_NOTIFICATION;
    struct VDS_VOLUME_NOTIFICATION;
    struct VDS_WWN;
    struct VGA_CHAR;
    struct VIDEO_BANK_SELECT;
    struct VIDEO_BRIGHTNESS_POLICY;
    struct VIDEO_CLUT;
    struct VIDEO_CLUTDATA;
    struct VIDEO_COLOR_CAPABILITIES;
    struct VIDEO_COLOR_LUT_DATA;
    struct VIDEO_CURSOR_ATTRIBUTES;
    struct VIDEO_CURSOR_POSITION;
    struct VIDEO_DEVICE_SESSION_STATUS;
    struct VIDEO_HARDWARE_STATE;
    struct VIDEO_HARDWARE_STATE_HEADER;
    struct VIDEO_LOAD_FONT_INFORMATION;
    struct VIDEO_LUT_RGB256WORDS;
    struct VIDEO_MEMORY;
    struct VIDEO_MEMORY_INFORMATION;
    struct VIDEO_MODE;
    struct VIDEO_MODE_INFORMATION;
    struct VIDEO_MONITOR_DESCRIPTOR;
    struct VIDEO_NUM_MODES;
    struct VIDEO_PALETTE_DATA;
    struct VIDEO_PERFORMANCE_COUNTER;
    struct VIDEO_POINTER_ATTRIBUTES;
    struct VIDEO_POINTER_CAPABILITIES;
    struct VIDEO_POINTER_POSITION;
    struct VIDEO_POWER_MANAGEMENT;
    struct VIDEO_PUBLIC_ACCESS_RANGES;
    struct VIDEO_QUERY_PERFORMANCE_COUNTER;
    struct VIDEO_REGISTER_VDM;
    struct VIDEO_SHARE_MEMORY;
    struct VIDEO_SHARE_MEMORY_INFORMATION;
    struct VIDEO_VDM;
    struct VIDEO_WIN32K_CALLBACKS;
    struct VIDEO_WIN32K_CALLBACKS_PARAMS;
    struct VIRTUALIZATION_INSTANCE_INFO_INPUT;
    struct VIRTUALIZATION_INSTANCE_INFO_INPUT_EX;
    struct VIRTUALIZATION_INSTANCE_INFO_OUTPUT;
    struct VIRTUAL_STORAGE_SET_BEHAVIOR_INPUT;
    struct VSS_DIFF_AREA_PROP;
    struct VSS_DIFF_VOLUME_PROP;
    struct VSS_MGMT_OBJECT_PROP;
    struct VSS_OBJECT_PROP;
    struct VSS_PROVIDER_PROP;
    struct VSS_SNAPSHOT_PROP;
    struct VSS_VOLUME_PROP;
    struct VSS_VOLUME_PROTECTION_INFO;
    struct VolLockBroadcast;
    struct WAKE_ALARM_INFORMATION;
    struct WIM_PROVIDER_ADD_OVERLAY_INPUT;
    struct WIM_PROVIDER_EXTERNAL_INFO;
    struct WIM_PROVIDER_OVERLAY_ENTRY;
    struct WIM_PROVIDER_REMOVE_OVERLAY_INPUT;
    struct WIM_PROVIDER_SUSPEND_OVERLAY_INPUT;
    struct WIM_PROVIDER_UPDATE_OVERLAY_INPUT;
    struct WIN32_MEMORY_RANGE_ENTRY;
    struct WIN32_MEMORY_REGION_INFORMATION;
    struct WIN32_STREAM_ID;
    struct WINDOW_BUFFER_SIZE_RECORD;
    struct WOF_EXTERNAL_FILE_ID;
    struct WOF_EXTERNAL_INFO;
    struct WOF_VERSION_INFO;
    struct WOW64_ARCHITECTURE_INFORMATION;
    struct WOW64_DESCRIPTOR_TABLE_ENTRY;
    struct WRITE_USN_REASON_INPUT;
    struct XFORMOBJ;
    struct XSAVE_AREA;
    struct XSAVE_AREA_HEADER;
    struct XSAVE_CET_U_FORMAT;
    struct XSAVE_FORMAT;
    struct XSTATE_CONFIGURATION;
    struct XSTATE_CONTEXT;
    struct XSTATE_FEATURE;
    struct _D3DDeviceDesc;
    struct _D3DDeviceDesc7;
    struct _D3DExecuteBufferDesc;
    struct _D3DNTDeviceDesc_V3;
    struct _D3DNTHALDeviceDesc_V1;
    struct _D3DNTHALDeviceDesc_V2;
    struct _D3DPrimCaps;
    struct _DD_DESTROYDRIVERDATA;
    struct _DD_GETVPORTAUTOFLIPSURFACEDATA;
    struct _DD_SETMODEDATA;
    struct _DEV_BROADCAST_HEADER;
    struct _DEV_BROADCAST_USERDEFINED;
    union __MIDL___MIDL_itf_vsmgmt_0000_0000_0001;
    union __MIDL___MIDL_itf_vss_0000_0000_0001;
    struct remoteMETAFILEPICT;
    struct uCLSSPEC;
    struct userBITMAP;
    struct userCLIPFORMAT;
    struct userHBITMAP;
    struct userHENHMETAFILE;
    struct userHGLOBAL;
    struct userHMETAFILE;
    struct userHMETAFILEPICT;
    struct userHPALETTE;
    struct IEnumVdsObject;
    struct IServiceProvider;
    struct IVdsAdmin;
    struct IVdsAdviseSink;
    struct IVdsAsync;
    struct IVdsController;
    struct IVdsControllerControllerPort;
    struct IVdsControllerPort;
    struct IVdsDrive;
    struct IVdsDrive2;
    struct IVdsHwProvider;
    struct IVdsHwProviderPrivate;
    struct IVdsHwProviderPrivateMpio;
    struct IVdsHwProviderStoragePools;
    struct IVdsHwProviderType;
    struct IVdsHwProviderType2;
    struct IVdsIscsiPortal;
    struct IVdsIscsiPortalGroup;
    struct IVdsIscsiTarget;
    struct IVdsLun;
    struct IVdsLun2;
    struct IVdsLunControllerPorts;
    struct IVdsLunIscsi;
    struct IVdsLunMpio;
    struct IVdsLunNaming;
    struct IVdsLunNumber;
    struct IVdsLunPlex;
    struct IVdsMaintenance;
    struct IVdsProvider;
    struct IVdsProviderPrivate;
    struct IVdsProviderSupport;
    struct IVdsStoragePool;
    struct IVdsSubSystem;
    struct IVdsSubSystem2;
    struct IVdsSubSystemInterconnect;
    struct IVdsSubSystemIscsi;
    struct IVdsSubSystemNaming;
    struct IVssAdmin;
    struct IVssAdminEx;
    struct IVssAsync;
    struct IVssComponent;
    struct IVssComponentEx;
    struct IVssComponentEx2;
    struct IVssCreateExpressWriterMetadata;
    struct IVssCreateWriterMetadata;
    struct IVssCreateWriterMetadataEx;
    struct IVssDifferentialSoftwareSnapshotMgmt;
    struct IVssDifferentialSoftwareSnapshotMgmt2;
    struct IVssDifferentialSoftwareSnapshotMgmt3;
    struct IVssEnumMgmtObject;
    struct IVssEnumObject;
    struct IVssExpressWriter;
    struct IVssFileShareSnapshotProvider;
    struct IVssHardwareSnapshotProvider;
    struct IVssHardwareSnapshotProviderEx;
    struct IVssProviderCreateSnapshotSet;
    struct IVssProviderNotifications;
    struct IVssSnapshotMgmt;
    struct IVssSnapshotMgmt2;
    struct IVssSoftwareSnapshotProvider;
    struct IVssWMDependency;
    struct IVssWMFiledesc;
    struct IVssWriterComponents;
    struct IVssWriterImpl;
    struct VSSCoordinator;
    struct VssSnapshotMgmt;
#pragma endregion forward_declarations

#pragma region delegates
    using ENCLAVE_TARGET_FUNCTION = void* __stdcall(void*);
    using PENCLAVE_TARGET_FUNCTION = void* __stdcall();
    using LPENCLAVE_TARGET_FUNCTION = void* __stdcall();
    using PIMAGE_TLS_CALLBACK = void __stdcall(void*, uint32_t, void*);
    using RTL_UMS_SCHEDULER_ENTRY_POINT = void __stdcall(Windows::Win32::SystemServices::RTL_UMS_SCHEDULER_REASON, size_t, void*);
    using PRTL_UMS_SCHEDULER_ENTRY_POINT = void __stdcall();
    using PAPCFUNC = void __stdcall(size_t);
    using WAITORTIMERCALLBACKFUNC = void __stdcall(void*, uint8_t);
    using WORKERCALLBACKFUNC = void __stdcall(void*);
    using APC_CALLBACK_FUNCTION = void __stdcall(uint32_t, void*, void*);
    using WAITORTIMERCALLBACK = void __stdcall();
    using PFLS_CALLBACK_FUNCTION = void __stdcall(void*);
    using PSECURE_MEMORY_CACHE_CALLBACK = uint8_t __stdcall(void*, size_t);
    using PTP_SIMPLE_CALLBACK = void __stdcall(Windows::Win32::SystemServices::TP_CALLBACK_INSTANCE*, void*);
    using PTP_CLEANUP_GROUP_CANCEL_CALLBACK = void __stdcall(void*, void*);
    using PTP_WORK_CALLBACK = void __stdcall(Windows::Win32::SystemServices::TP_CALLBACK_INSTANCE*, void*, Windows::Win32::SystemServices::TP_WORK*);
    using PTP_TIMER_CALLBACK = void __stdcall(Windows::Win32::SystemServices::TP_CALLBACK_INSTANCE*, void*, Windows::Win32::SystemServices::TP_TIMER*);
    using PTP_WAIT_CALLBACK = void __stdcall(Windows::Win32::SystemServices::TP_CALLBACK_INSTANCE*, void*, Windows::Win32::SystemServices::TP_WAIT*, uint32_t);
    using FARPROC = int32_t __stdcall();
    using NEARPROC = int32_t __stdcall();
    using PROC = int32_t __stdcall();
    using PINIT_ONCE_FN = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::SystemServices::RTL_RUN_ONCE*, void*, void**);
    using PTIMERAPCROUTINE = void __stdcall(void*, uint32_t, uint32_t);
    using PTP_WIN32_IO_CALLBACK = void __stdcall(Windows::Win32::SystemServices::TP_CALLBACK_INSTANCE*, void*, void*, uint32_t, size_t, Windows::Win32::SystemServices::TP_IO*);
    using PTHREAD_START_ROUTINE = uint32_t __stdcall(void*);
    using LPTHREAD_START_ROUTINE = uint32_t __stdcall();
    using PENCLAVE_ROUTINE = void* __stdcall(void*);
    using LPENCLAVE_ROUTINE = void* __stdcall();
    using BAD_MEMORY_CALLBACK_ROUTINE = void __stdcall();
    using PBAD_MEMORY_CALLBACK_ROUTINE = void __stdcall();
    using ENUMRESLANGPROCA = Windows::Win32::SystemServices::BOOL __stdcall(intptr_t, int8_t*, int8_t*, uint16_t, intptr_t);
    using ENUMRESLANGPROCW = Windows::Win32::SystemServices::BOOL __stdcall(intptr_t, uint16_t*, uint16_t*, uint16_t, intptr_t);
    using PGET_MODULE_HANDLE_EXA = Windows::Win32::SystemServices::BOOL __stdcall(uint32_t, int8_t*, intptr_t*);
    using PGET_MODULE_HANDLE_EXW = Windows::Win32::SystemServices::BOOL __stdcall(uint32_t, uint16_t*, intptr_t*);
    using PHANDLER_ROUTINE = Windows::Win32::SystemServices::BOOL __stdcall(uint32_t);
    using TIMECALLBACK = void __stdcall(uint32_t, uint32_t, size_t, size_t, size_t);
    using LPTIMECALLBACK = void __stdcall();
    using PM_OPEN_PROC = uint32_t __stdcall(uint16_t*);
    using PM_QUERY_PROC = uint32_t __stdcall(uint32_t*, void**, uint32_t*, uint32_t*);
    using PIO_IRP_EXT_PROCESS_TRACKED_OFFSET_CALLBACK = void __stdcall(Windows::Win32::SystemServices::IO_IRP_EXT_TRACK_OFFSET_HEADER*, Windows::Win32::SystemServices::IO_IRP_EXT_TRACK_OFFSET_HEADER*, int64_t);
    using LPDDENUMVIDEOCALLBACK = int32_t __stdcall(Windows::Win32::DisplayDevices::DDVIDEOPORTCAPS*, void*);
    using PDD_SETCOLORKEY = uint32_t __stdcall(Windows::Win32::SystemServices::DD_DRVSETCOLORKEYDATA*);
    using PDD_DESTROYDRIVER = uint32_t __stdcall(Windows::Win32::SystemServices::_DD_DESTROYDRIVERDATA*);
    using PDD_SETMODE = uint32_t __stdcall(Windows::Win32::SystemServices::_DD_SETMODEDATA*);
    using PDD_ALPHABLT = uint32_t __stdcall(Windows::Win32::DisplayDevices::DD_BLTDATA*);
    using PDD_SURFCB_SETCLIPLIST = uint32_t __stdcall(Windows::Win32::SystemServices::DD_SETCLIPLISTDATA*);
    using PDD_VPORTCB_GETAUTOFLIPSURF = uint32_t __stdcall(Windows::Win32::SystemServices::_DD_GETVPORTAUTOFLIPSURFACEDATA*);
    using LPD3DVALIDATECALLBACK = int32_t __stdcall(void*, uint32_t);
    using LPD3DENUMTEXTUREFORMATSCALLBACK = int32_t __stdcall(Windows::Win32::DirectDraw::DDSURFACEDESC*, void*);
    using LPD3DENUMPIXELFORMATSCALLBACK = int32_t __stdcall(Windows::Win32::DirectDraw::DDPIXELFORMAT*, void*);
    using LPD3DENUMDEVICESCALLBACK = int32_t __stdcall(::win32::guid*, int8_t*, int8_t*, Windows::Win32::SystemServices::_D3DDeviceDesc*, Windows::Win32::SystemServices::_D3DDeviceDesc*, void*);
    using LPD3DENUMDEVICESCALLBACK7 = int32_t __stdcall(int8_t*, int8_t*, Windows::Win32::SystemServices::_D3DDeviceDesc7*, void*);
    using LPD3DNTHAL_CONTEXTCREATECB = uint32_t __stdcall(Windows::Win32::SystemServices::D3DNTHAL_CONTEXTCREATEDATA*);
    using LPD3DNTHAL_CONTEXTDESTROYCB = uint32_t __stdcall(Windows::Win32::SystemServices::D3DNTHAL_CONTEXTDESTROYDATA*);
    using LPD3DNTHAL_CONTEXTDESTROYALLCB = uint32_t __stdcall(Windows::Win32::SystemServices::D3DNTHAL_CONTEXTDESTROYALLDATA*);
    using LPD3DNTHAL_SCENECAPTURECB = uint32_t __stdcall(Windows::Win32::SystemServices::D3DNTHAL_SCENECAPTUREDATA*);
    using LPD3DNTHAL_TEXTURECREATECB = uint32_t __stdcall(Windows::Win32::SystemServices::D3DNTHAL_TEXTURECREATEDATA*);
    using LPD3DNTHAL_TEXTUREDESTROYCB = uint32_t __stdcall(Windows::Win32::SystemServices::D3DNTHAL_TEXTUREDESTROYDATA*);
    using LPD3DNTHAL_TEXTURESWAPCB = uint32_t __stdcall(Windows::Win32::SystemServices::D3DNTHAL_TEXTURESWAPDATA*);
    using LPD3DNTHAL_TEXTUREGETSURFCB = uint32_t __stdcall(Windows::Win32::SystemServices::D3DNTHAL_TEXTUREGETSURFDATA*);
    using LPD3DNTHAL_SETRENDERTARGETCB = uint32_t __stdcall(Windows::Win32::SystemServices::D3DNTHAL_SETRENDERTARGETDATA*);
    using LPD3DNTHAL_CLEAR2CB = uint32_t __stdcall(Windows::Win32::SystemServices::D3DNTHAL_CLEAR2DATA*);
    using LPD3DNTHAL_VALIDATETEXTURESTAGESTATECB = uint32_t __stdcall(Windows::Win32::SystemServices::D3DNTHAL_VALIDATETEXTURESTAGESTATEDATA*);
    using LPD3DNTHAL_DRAWPRIMITIVES2CB = uint32_t __stdcall(Windows::Win32::SystemServices::D3DNTHAL_DRAWPRIMITIVES2DATA*);
    using PFND3DNTPARSEUNKNOWNCOMMAND = int32_t __stdcall(void*, void**);
    using PFN = intptr_t __stdcall();
    using FREEOBJPROC = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::DisplayDevices::DRIVEROBJ*);
    using WNDOBJCHANGEPROC = void __stdcall(Windows::Win32::DisplayDevices::WNDOBJ*, uint32_t);
    using SORTCOMP = int32_t __stdcall(void*, void*);
    using PFN_DrvEnableDriver = Windows::Win32::SystemServices::BOOL __stdcall(uint32_t, uint32_t, Windows::Win32::DisplayDevices::DRVENABLEDATA*);
    using PFN_DrvEnablePDEV = Windows::Win32::SystemServices::DHPDEV__* __stdcall(Windows::Win32::DisplayDevices::DEVMODEW*, uint16_t*, uint32_t, Windows::Win32::SystemServices::HSURF__**, uint32_t, Windows::Win32::DisplayDevices::GDIINFO*, uint32_t, Windows::Win32::DisplayDevices::DEVINFO*, Windows::Win32::SystemServices::HDEV__*, uint16_t*, Windows::Win32::SystemServices::HANDLE);
    using PFN_DrvCompletePDEV = void __stdcall(Windows::Win32::SystemServices::DHPDEV__*, Windows::Win32::SystemServices::HDEV__*);
    using PFN_DrvResetDevice = uint32_t __stdcall(Windows::Win32::SystemServices::DHPDEV__*, void*);
    using PFN_DrvDisablePDEV = void __stdcall(Windows::Win32::SystemServices::DHPDEV__*);
    using PFN_DrvSynchronize = void __stdcall(Windows::Win32::SystemServices::DHPDEV__*, Windows::Win32::DisplayDevices::RECTL*);
    using PFN_DrvEnableSurface = Windows::Win32::SystemServices::HSURF__* __stdcall(Windows::Win32::SystemServices::DHPDEV__*);
    using PFN_DrvDisableDriver = void __stdcall();
    using PFN_DrvDisableSurface = void __stdcall(Windows::Win32::SystemServices::DHPDEV__*);
    using PFN_DrvAssertMode = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::SystemServices::DHPDEV__*, Windows::Win32::SystemServices::BOOL);
    using PFN_DrvTextOut = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::DisplayDevices::SURFOBJ*, Windows::Win32::DisplayDevices::STROBJ*, Windows::Win32::DisplayDevices::FONTOBJ*, Windows::Win32::DisplayDevices::CLIPOBJ*, Windows::Win32::DisplayDevices::RECTL*, Windows::Win32::DisplayDevices::RECTL*, Windows::Win32::DisplayDevices::BRUSHOBJ*, Windows::Win32::DisplayDevices::BRUSHOBJ*, Windows::Win32::DisplayDevices::POINTL*, uint32_t);
    using PFN_DrvStretchBlt = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::DisplayDevices::SURFOBJ*, Windows::Win32::DisplayDevices::SURFOBJ*, Windows::Win32::DisplayDevices::SURFOBJ*, Windows::Win32::DisplayDevices::CLIPOBJ*, Windows::Win32::DisplayDevices::XLATEOBJ*, Windows::Win32::Gdi::COLORADJUSTMENT*, Windows::Win32::DisplayDevices::POINTL*, Windows::Win32::DisplayDevices::RECTL*, Windows::Win32::DisplayDevices::RECTL*, Windows::Win32::DisplayDevices::POINTL*, uint32_t);
    using PFN_DrvStretchBltROP = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::DisplayDevices::SURFOBJ*, Windows::Win32::DisplayDevices::SURFOBJ*, Windows::Win32::DisplayDevices::SURFOBJ*, Windows::Win32::DisplayDevices::CLIPOBJ*, Windows::Win32::DisplayDevices::XLATEOBJ*, Windows::Win32::Gdi::COLORADJUSTMENT*, Windows::Win32::DisplayDevices::POINTL*, Windows::Win32::DisplayDevices::RECTL*, Windows::Win32::DisplayDevices::RECTL*, Windows::Win32::DisplayDevices::POINTL*, uint32_t, Windows::Win32::DisplayDevices::BRUSHOBJ*, uint32_t);
    using PFN_DrvTransparentBlt = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::DisplayDevices::SURFOBJ*, Windows::Win32::DisplayDevices::SURFOBJ*, Windows::Win32::DisplayDevices::CLIPOBJ*, Windows::Win32::DisplayDevices::XLATEOBJ*, Windows::Win32::DisplayDevices::RECTL*, Windows::Win32::DisplayDevices::RECTL*, uint32_t, uint32_t);
    using PFN_DrvPlgBlt = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::DisplayDevices::SURFOBJ*, Windows::Win32::DisplayDevices::SURFOBJ*, Windows::Win32::DisplayDevices::SURFOBJ*, Windows::Win32::DisplayDevices::CLIPOBJ*, Windows::Win32::DisplayDevices::XLATEOBJ*, Windows::Win32::Gdi::COLORADJUSTMENT*, Windows::Win32::DisplayDevices::POINTL*, Windows::Win32::SystemServices::POINTFIX*, Windows::Win32::DisplayDevices::RECTL*, Windows::Win32::DisplayDevices::POINTL*, uint32_t);
    using PFN_DrvBitBlt = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::DisplayDevices::SURFOBJ*, Windows::Win32::DisplayDevices::SURFOBJ*, Windows::Win32::DisplayDevices::SURFOBJ*, Windows::Win32::DisplayDevices::CLIPOBJ*, Windows::Win32::DisplayDevices::XLATEOBJ*, Windows::Win32::DisplayDevices::RECTL*, Windows::Win32::DisplayDevices::POINTL*, Windows::Win32::DisplayDevices::POINTL*, Windows::Win32::DisplayDevices::BRUSHOBJ*, Windows::Win32::DisplayDevices::POINTL*, uint32_t);
    using PFN_DrvRealizeBrush = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::DisplayDevices::BRUSHOBJ*, Windows::Win32::DisplayDevices::SURFOBJ*, Windows::Win32::DisplayDevices::SURFOBJ*, Windows::Win32::DisplayDevices::SURFOBJ*, Windows::Win32::DisplayDevices::XLATEOBJ*, uint32_t);
    using PFN_DrvCopyBits = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::DisplayDevices::SURFOBJ*, Windows::Win32::DisplayDevices::SURFOBJ*, Windows::Win32::DisplayDevices::CLIPOBJ*, Windows::Win32::DisplayDevices::XLATEOBJ*, Windows::Win32::DisplayDevices::RECTL*, Windows::Win32::DisplayDevices::POINTL*);
    using PFN_DrvDitherColor = uint32_t __stdcall(Windows::Win32::SystemServices::DHPDEV__*, uint32_t, uint32_t, uint32_t*);
    using PFN_DrvCreateDeviceBitmap = Windows::Win32::Gdi::HBITMAP __stdcall(Windows::Win32::SystemServices::DHPDEV__*, Windows::Win32::DisplayDevices::SIZE, uint32_t);
    using PFN_DrvDeleteDeviceBitmap = void __stdcall(Windows::Win32::SystemServices::DHSURF__*);
    using PFN_DrvSetPalette = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::SystemServices::DHPDEV__*, Windows::Win32::DisplayDevices::PALOBJ*, uint32_t, uint32_t, uint32_t);
    using PFN_DrvEscape = uint32_t __stdcall(Windows::Win32::DisplayDevices::SURFOBJ*, uint32_t, uint32_t, void*, uint32_t, void*);
    using PFN_DrvDrawEscape = uint32_t __stdcall(Windows::Win32::DisplayDevices::SURFOBJ*, uint32_t, Windows::Win32::DisplayDevices::CLIPOBJ*, Windows::Win32::DisplayDevices::RECTL*, uint32_t, void*);
    using PFN_DrvQueryFont = Windows::Win32::DisplayDevices::IFIMETRICS* __stdcall(Windows::Win32::SystemServices::DHPDEV__*, size_t, uint32_t, size_t*);
    using PFN_DrvQueryFontTree = void* __stdcall(Windows::Win32::SystemServices::DHPDEV__*, size_t, uint32_t, uint32_t, size_t*);
    using PFN_DrvQueryFontData = int32_t __stdcall(Windows::Win32::SystemServices::DHPDEV__*, Windows::Win32::DisplayDevices::FONTOBJ*, uint32_t, uint32_t, Windows::Win32::DisplayDevices::GLYPHDATA*, void*, uint32_t);
    using PFN_DrvFree = void __stdcall(void*, size_t);
    using PFN_DrvDestroyFont = void __stdcall(Windows::Win32::DisplayDevices::FONTOBJ*);
    using PFN_DrvQueryFontCaps = int32_t __stdcall(uint32_t, uint32_t*);
    using PFN_DrvLoadFontFile = size_t __stdcall(uint32_t, size_t*, void**, uint32_t*, Windows::Win32::Gdi::DESIGNVECTOR*, uint32_t, uint32_t);
    using PFN_DrvUnloadFontFile = Windows::Win32::SystemServices::BOOL __stdcall(size_t);
    using PFN_DrvSetPointerShape = uint32_t __stdcall(Windows::Win32::DisplayDevices::SURFOBJ*, Windows::Win32::DisplayDevices::SURFOBJ*, Windows::Win32::DisplayDevices::SURFOBJ*, Windows::Win32::DisplayDevices::XLATEOBJ*, int32_t, int32_t, int32_t, int32_t, Windows::Win32::DisplayDevices::RECTL*, uint32_t);
    using PFN_DrvMovePointer = void __stdcall(Windows::Win32::DisplayDevices::SURFOBJ*, int32_t, int32_t, Windows::Win32::DisplayDevices::RECTL*);
    using PFN_DrvSendPage = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::DisplayDevices::SURFOBJ*);
    using PFN_DrvStartPage = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::DisplayDevices::SURFOBJ*);
    using PFN_DrvStartDoc = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::DisplayDevices::SURFOBJ*, uint16_t*, uint32_t);
    using PFN_DrvEndDoc = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::DisplayDevices::SURFOBJ*, uint32_t);
    using PFN_DrvQuerySpoolType = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::SystemServices::DHPDEV__*, uint16_t*);
    using PFN_DrvLineTo = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::DisplayDevices::SURFOBJ*, Windows::Win32::DisplayDevices::CLIPOBJ*, Windows::Win32::DisplayDevices::BRUSHOBJ*, int32_t, int32_t, int32_t, int32_t, Windows::Win32::DisplayDevices::RECTL*, uint32_t);
    using PFN_DrvStrokePath = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::DisplayDevices::SURFOBJ*, Windows::Win32::DisplayDevices::PATHOBJ*, Windows::Win32::DisplayDevices::CLIPOBJ*, Windows::Win32::SystemServices::XFORMOBJ*, Windows::Win32::DisplayDevices::BRUSHOBJ*, Windows::Win32::DisplayDevices::POINTL*, Windows::Win32::DisplayDevices::LINEATTRS*, uint32_t);
    using PFN_DrvFillPath = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::DisplayDevices::SURFOBJ*, Windows::Win32::DisplayDevices::PATHOBJ*, Windows::Win32::DisplayDevices::CLIPOBJ*, Windows::Win32::DisplayDevices::BRUSHOBJ*, Windows::Win32::DisplayDevices::POINTL*, uint32_t, uint32_t);
    using PFN_DrvStrokeAndFillPath = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::DisplayDevices::SURFOBJ*, Windows::Win32::DisplayDevices::PATHOBJ*, Windows::Win32::DisplayDevices::CLIPOBJ*, Windows::Win32::SystemServices::XFORMOBJ*, Windows::Win32::DisplayDevices::BRUSHOBJ*, Windows::Win32::DisplayDevices::LINEATTRS*, Windows::Win32::DisplayDevices::BRUSHOBJ*, Windows::Win32::DisplayDevices::POINTL*, uint32_t, uint32_t);
    using PFN_DrvPaint = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::DisplayDevices::SURFOBJ*, Windows::Win32::DisplayDevices::CLIPOBJ*, Windows::Win32::DisplayDevices::BRUSHOBJ*, Windows::Win32::DisplayDevices::POINTL*, uint32_t);
    using PFN_DrvGetGlyphMode = uint32_t __stdcall(Windows::Win32::SystemServices::DHPDEV__*, Windows::Win32::DisplayDevices::FONTOBJ*);
    using PFN_DrvResetPDEV = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::SystemServices::DHPDEV__*, Windows::Win32::SystemServices::DHPDEV__*);
    using PFN_DrvSaveScreenBits = size_t __stdcall(Windows::Win32::DisplayDevices::SURFOBJ*, uint32_t, size_t, Windows::Win32::DisplayDevices::RECTL*);
    using PFN_DrvGetModes = uint32_t __stdcall(Windows::Win32::SystemServices::HANDLE, uint32_t, Windows::Win32::DisplayDevices::DEVMODEW*);
    using PFN_DrvQueryTrueTypeTable = int32_t __stdcall(size_t, uint32_t, uint32_t, int32_t, uint32_t, uint8_t*, uint8_t**, uint32_t*);
    using PFN_DrvQueryTrueTypeSection = int32_t __stdcall(uint32_t, uint32_t, uint32_t, Windows::Win32::SystemServices::HANDLE*, int32_t*);
    using PFN_DrvQueryTrueTypeOutline = int32_t __stdcall(Windows::Win32::SystemServices::DHPDEV__*, Windows::Win32::DisplayDevices::FONTOBJ*, uint32_t, Windows::Win32::SystemServices::BOOL, Windows::Win32::DisplayDevices::GLYPHDATA*, uint32_t, Windows::Win32::Gdi::TTPOLYGONHEADER*);
    using PFN_DrvGetTrueTypeFile = void* __stdcall(size_t, uint32_t*);
    using PFN_DrvQueryFontFile = int32_t __stdcall(size_t, uint32_t, uint32_t, uint32_t*);
    using PFN_DrvQueryAdvanceWidths = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::SystemServices::DHPDEV__*, Windows::Win32::DisplayDevices::FONTOBJ*, uint32_t, uint32_t*, void*, uint32_t);
    using PFN_DrvFontManagement = uint32_t __stdcall(Windows::Win32::DisplayDevices::SURFOBJ*, Windows::Win32::DisplayDevices::FONTOBJ*, uint32_t, uint32_t, void*, uint32_t, void*);
    using PFN_DrvSetPixelFormat = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::DisplayDevices::SURFOBJ*, int32_t, Windows::Win32::WindowsAndMessaging::HWND);
    using PFN_DrvDescribePixelFormat = int32_t __stdcall(Windows::Win32::SystemServices::DHPDEV__*, int32_t, uint32_t, Windows::Win32::OpenGL::PIXELFORMATDESCRIPTOR*);
    using PFN_DrvSwapBuffers = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::DisplayDevices::SURFOBJ*, Windows::Win32::DisplayDevices::WNDOBJ*);
    using PFN_DrvStartBanding = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::DisplayDevices::SURFOBJ*, Windows::Win32::DisplayDevices::POINTL*);
    using PFN_DrvNextBand = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::DisplayDevices::SURFOBJ*, Windows::Win32::DisplayDevices::POINTL*);
    using PFN_DrvQueryPerBandInfo = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::DisplayDevices::SURFOBJ*, Windows::Win32::DisplayDevices::PERBANDINFO*);
    using PFN_DrvEnableDirectDraw = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::SystemServices::DHPDEV__*, Windows::Win32::DisplayDevices::DD_CALLBACKS*, Windows::Win32::DisplayDevices::DD_SURFACECALLBACKS*, Windows::Win32::DisplayDevices::DD_PALETTECALLBACKS*);
    using PFN_DrvDisableDirectDraw = void __stdcall(Windows::Win32::SystemServices::DHPDEV__*);
    using PFN_DrvGetDirectDrawInfo = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::SystemServices::DHPDEV__*, Windows::Win32::DisplayDevices::DD_HALINFO*, uint32_t*, Windows::Win32::DisplayDevices::VIDEOMEMORY*, uint32_t*, uint32_t*);
    using PFN_DrvIcmCreateColorTransform = Windows::Win32::SystemServices::HANDLE __stdcall(Windows::Win32::SystemServices::DHPDEV__*, Windows::Win32::WindowsColorSystem::LOGCOLORSPACEW*, void*, uint32_t, void*, uint32_t, void*, uint32_t, uint32_t);
    using PFN_DrvIcmDeleteColorTransform = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::SystemServices::DHPDEV__*, Windows::Win32::SystemServices::HANDLE);
    using PFN_DrvIcmCheckBitmapBits = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::SystemServices::DHPDEV__*, Windows::Win32::SystemServices::HANDLE, Windows::Win32::DisplayDevices::SURFOBJ*, uint8_t*);
    using PFN_DrvIcmSetDeviceGammaRamp = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::SystemServices::DHPDEV__*, uint32_t, void*);
    using PFN_DrvAlphaBlend = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::DisplayDevices::SURFOBJ*, Windows::Win32::DisplayDevices::SURFOBJ*, Windows::Win32::DisplayDevices::CLIPOBJ*, Windows::Win32::DisplayDevices::XLATEOBJ*, Windows::Win32::DisplayDevices::RECTL*, Windows::Win32::DisplayDevices::RECTL*, Windows::Win32::DisplayDevices::BLENDOBJ*);
    using PFN_DrvGradientFill = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::DisplayDevices::SURFOBJ*, Windows::Win32::DisplayDevices::CLIPOBJ*, Windows::Win32::DisplayDevices::XLATEOBJ*, Windows::Win32::Gdi::TRIVERTEX*, uint32_t, void*, uint32_t, Windows::Win32::DisplayDevices::RECTL*, Windows::Win32::DisplayDevices::POINTL*, uint32_t);
    using PFN_DrvQueryDeviceSupport = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::DisplayDevices::SURFOBJ*, Windows::Win32::DisplayDevices::XLATEOBJ*, Windows::Win32::SystemServices::XFORMOBJ*, uint32_t, uint32_t, void*, uint32_t, void*);
    using PFN_DrvDeriveSurface = Windows::Win32::Gdi::HBITMAP __stdcall(Windows::Win32::DisplayDevices::DD_DIRECTDRAW_GLOBAL*, Windows::Win32::DisplayDevices::DD_SURFACE_LOCAL*);
    using PFN_DrvSynchronizeSurface = void __stdcall(Windows::Win32::DisplayDevices::SURFOBJ*, Windows::Win32::DisplayDevices::RECTL*, uint32_t);
    using PFN_DrvNotify = void __stdcall(Windows::Win32::DisplayDevices::SURFOBJ*, uint32_t, void*);
    using PFN_DrvRenderHint = int32_t __stdcall(Windows::Win32::SystemServices::DHPDEV__*, uint32_t, size_t, void*);
    using PFN_EngCreateRectRgn = Windows::Win32::SystemServices::HANDLE __stdcall(int32_t, int32_t, int32_t, int32_t);
    using PFN_EngDeleteRgn = void __stdcall(Windows::Win32::SystemServices::HANDLE);
    using PFN_EngCombineRgn = int32_t __stdcall(Windows::Win32::SystemServices::HANDLE, Windows::Win32::SystemServices::HANDLE, Windows::Win32::SystemServices::HANDLE, int32_t);
    using PFN_EngCopyRgn = int32_t __stdcall(Windows::Win32::SystemServices::HANDLE, Windows::Win32::SystemServices::HANDLE);
    using PFN_EngIntersectRgn = int32_t __stdcall(Windows::Win32::SystemServices::HANDLE, Windows::Win32::SystemServices::HANDLE, Windows::Win32::SystemServices::HANDLE);
    using PFN_EngSubtractRgn = int32_t __stdcall(Windows::Win32::SystemServices::HANDLE, Windows::Win32::SystemServices::HANDLE, Windows::Win32::SystemServices::HANDLE);
    using PFN_EngUnionRgn = int32_t __stdcall(Windows::Win32::SystemServices::HANDLE, Windows::Win32::SystemServices::HANDLE, Windows::Win32::SystemServices::HANDLE);
    using PFN_EngXorRgn = int32_t __stdcall(Windows::Win32::SystemServices::HANDLE, Windows::Win32::SystemServices::HANDLE, Windows::Win32::SystemServices::HANDLE);
    using PFN_DrvCreateDeviceBitmapEx = Windows::Win32::Gdi::HBITMAP __stdcall(Windows::Win32::SystemServices::DHPDEV__*, Windows::Win32::DisplayDevices::SIZE, uint32_t, uint32_t, Windows::Win32::SystemServices::DHSURF__*, uint32_t, uint32_t, Windows::Win32::SystemServices::HANDLE*);
    using PFN_DrvDeleteDeviceBitmapEx = void __stdcall(Windows::Win32::SystemServices::DHSURF__*);
    using PFN_DrvAssociateSharedSurface = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::DisplayDevices::SURFOBJ*, Windows::Win32::SystemServices::HANDLE, Windows::Win32::SystemServices::HANDLE, Windows::Win32::DisplayDevices::SIZE);
    using PFN_DrvSynchronizeRedirectionBitmaps = Windows::Win32::SystemServices::NTSTATUS __stdcall(Windows::Win32::SystemServices::DHPDEV__*, uint64_t*);
    using PFN_DrvAccumulateD3DDirtyRect = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::DisplayDevices::SURFOBJ*, Windows::Win32::SystemServices::CDDDXGK_REDIRBITMAPPRESENTINFO*);
    using PFN_DrvStartDxInterop = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::DisplayDevices::SURFOBJ*, Windows::Win32::SystemServices::BOOL, void*);
    using PFN_DrvEndDxInterop = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::DisplayDevices::SURFOBJ*, Windows::Win32::SystemServices::BOOL, int32_t*, void*);
    using PFN_DrvLockDisplayArea = void __stdcall(Windows::Win32::SystemServices::DHPDEV__*, Windows::Win32::DisplayDevices::RECTL*);
    using PFN_DrvUnlockDisplayArea = void __stdcall(Windows::Win32::SystemServices::DHPDEV__*, Windows::Win32::DisplayDevices::RECTL*);
    using PFN_DrvSurfaceComplete = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::SystemServices::DHPDEV__*, Windows::Win32::SystemServices::HANDLE);
    using VBS_BASIC_ENCLAVE_BASIC_CALL_RETURN_FROM_ENCLAVE = void __stdcall(size_t);
    using VBS_BASIC_ENCLAVE_BASIC_CALL_RETURN_FROM_EXCEPTION = int32_t __stdcall(void*);
    using VBS_BASIC_ENCLAVE_BASIC_CALL_TERMINATE_THREAD = int32_t __stdcall(Windows::Win32::SystemServices::VBS_BASIC_ENCLAVE_THREAD_DESCRIPTOR32*);
    using VBS_BASIC_ENCLAVE_BASIC_CALL_INTERRUPT_THREAD = int32_t __stdcall(Windows::Win32::SystemServices::VBS_BASIC_ENCLAVE_THREAD_DESCRIPTOR32*);
    using VBS_BASIC_ENCLAVE_BASIC_CALL_COMMIT_PAGES = int32_t __stdcall(void*, size_t, void*, uint32_t);
    using VBS_BASIC_ENCLAVE_BASIC_CALL_DECOMMIT_PAGES = int32_t __stdcall(void*, size_t);
    using VBS_BASIC_ENCLAVE_BASIC_CALL_PROTECT_PAGES = int32_t __stdcall(void*, size_t, uint32_t);
    using VBS_BASIC_ENCLAVE_BASIC_CALL_CREATE_THREAD = int32_t __stdcall(Windows::Win32::SystemServices::VBS_BASIC_ENCLAVE_THREAD_DESCRIPTOR32*);
    using VBS_BASIC_ENCLAVE_BASIC_CALL_GET_ENCLAVE_INFORMATION = int32_t __stdcall(Windows::Win32::SystemServices::ENCLAVE_INFORMATION*);
    using VBS_BASIC_ENCLAVE_BASIC_CALL_GENERATE_KEY = int32_t __stdcall(Windows::Win32::SystemServices::ENCLAVE_VBS_BASIC_KEY_REQUEST*, uint32_t, uint8_t*);
    using VBS_BASIC_ENCLAVE_BASIC_CALL_GENERATE_REPORT = int32_t __stdcall(uint8_t*, void*, uint32_t, uint32_t*);
    using VBS_BASIC_ENCLAVE_BASIC_CALL_VERIFY_REPORT = int32_t __stdcall(void*, uint32_t);
    using VBS_BASIC_ENCLAVE_BASIC_CALL_GENERATE_RANDOM_DATA = int32_t __stdcall(uint8_t*, uint32_t, uint64_t*);
    using EFFECTIVE_POWER_MODE_CALLBACK = void __stdcall(Windows::Win32::SystemServices::EFFECTIVE_POWER_MODE, void*);
    using PWRSCHEMESENUMPROC_V1 = uint8_t __stdcall(uint32_t, uint32_t, int8_t*, uint32_t, int8_t*, Windows::Win32::SystemServices::POWER_POLICY*, Windows::Win32::WindowsAndMessaging::LPARAM);
    using PWRSCHEMESENUMPROC_V2 = uint8_t __stdcall(uint32_t, uint32_t, uint16_t*, uint32_t, uint16_t*, Windows::Win32::SystemServices::POWER_POLICY*, Windows::Win32::WindowsAndMessaging::LPARAM);
    using PWRSCHEMESENUMPROC = uint8_t __stdcall();
    using DEVICE_NOTIFY_CALLBACK_ROUTINE = uint32_t __stdcall(void*, uint32_t, void*);
    using PDEVICE_NOTIFY_CALLBACK_ROUTINE = uint32_t __stdcall();
    using PVIDEO_WIN32K_CALLOUT = void __stdcall(void*);
    using PFIBER_START_ROUTINE = void __stdcall(void*);
#pragma endregion delegates

}
namespace win32::_impl_
{
#pragma region guids
    template <> inline constexpr guid guid_v<Windows::Win32::SystemServices::IEnumVdsObject>{ 0x118610B7,0x8D94,0x4030,{ 0xB5,0xB8,0x50,0x08,0x89,0x78,0x8E,0x4E } }; // 118610B7-8D94-4030-B5B8-500889788E4E
    template <> inline constexpr guid guid_v<Windows::Win32::SystemServices::IServiceProvider>{ 0x6D5140C1,0x7436,0x11CE,{ 0x80,0x34,0x00,0xAA,0x00,0x60,0x09,0xFA } }; // 6D5140C1-7436-11CE-8034-00AA006009FA
    template <> inline constexpr guid guid_v<Windows::Win32::SystemServices::IVdsAdmin>{ 0xD188E97D,0x85AA,0x4D33,{ 0xAB,0xC6,0x26,0x29,0x9A,0x10,0xFF,0xC1 } }; // D188E97D-85AA-4D33-ABC6-26299A10FFC1
    template <> inline constexpr guid guid_v<Windows::Win32::SystemServices::IVdsAdviseSink>{ 0x8326CD1D,0xCF59,0x4936,{ 0xB7,0x86,0x5E,0xFC,0x08,0x79,0x8E,0x25 } }; // 8326CD1D-CF59-4936-B786-5EFC08798E25
    template <> inline constexpr guid guid_v<Windows::Win32::SystemServices::IVdsAsync>{ 0xD5D23B6D,0x5A55,0x4492,{ 0x98,0x89,0x39,0x7A,0x3C,0x2D,0x2D,0xBC } }; // D5D23B6D-5A55-4492-9889-397A3C2D2DBC
    template <> inline constexpr guid guid_v<Windows::Win32::SystemServices::IVdsController>{ 0xCB53D96E,0xDFFB,0x474A,{ 0xA0,0x78,0x79,0x0D,0x1E,0x2B,0xC0,0x82 } }; // CB53D96E-DFFB-474A-A078-790D1E2BC082
    template <> inline constexpr guid guid_v<Windows::Win32::SystemServices::IVdsControllerControllerPort>{ 0xCA5D735F,0x6BAE,0x42C0,{ 0xB3,0x0E,0xF2,0x66,0x60,0x45,0xCE,0x71 } }; // CA5D735F-6BAE-42C0-B30E-F2666045CE71
    template <> inline constexpr guid guid_v<Windows::Win32::SystemServices::IVdsControllerPort>{ 0x18691D0D,0x4E7F,0x43E8,{ 0x92,0xE4,0xCF,0x44,0xBE,0xEE,0xD1,0x1C } }; // 18691D0D-4E7F-43E8-92E4-CF44BEEED11C
    template <> inline constexpr guid guid_v<Windows::Win32::SystemServices::IVdsDrive>{ 0xFF24EFA4,0xAADE,0x4B6B,{ 0x89,0x8B,0xEA,0xA6,0xA2,0x08,0x87,0xC7 } }; // FF24EFA4-AADE-4B6B-898B-EAA6A20887C7
    template <> inline constexpr guid guid_v<Windows::Win32::SystemServices::IVdsDrive2>{ 0x60B5A730,0xADDF,0x4436,{ 0x8C,0xA7,0x57,0x69,0xE2,0xD1,0xFF,0xA4 } }; // 60B5A730-ADDF-4436-8CA7-5769E2D1FFA4
    template <> inline constexpr guid guid_v<Windows::Win32::SystemServices::IVdsHwProvider>{ 0xD99BDAAE,0xB13A,0x4178,{ 0x9F,0xDB,0xE2,0x7F,0x16,0xB4,0x60,0x3E } }; // D99BDAAE-B13A-4178-9FDB-E27F16B4603E
    template <> inline constexpr guid guid_v<Windows::Win32::SystemServices::IVdsHwProviderPrivate>{ 0x98F17BF3,0x9F33,0x4F12,{ 0x87,0x14,0x8B,0x40,0x75,0x09,0x2C,0x2E } }; // 98F17BF3-9F33-4F12-8714-8B4075092C2E
    template <> inline constexpr guid guid_v<Windows::Win32::SystemServices::IVdsHwProviderPrivateMpio>{ 0x310A7715,0xAC2B,0x4C6F,{ 0x98,0x27,0x3D,0x74,0x2F,0x35,0x16,0x76 } }; // 310A7715-AC2B-4C6F-9827-3D742F351676
    template <> inline constexpr guid guid_v<Windows::Win32::SystemServices::IVdsHwProviderStoragePools>{ 0xD5B5937A,0xF188,0x4C79,{ 0xB8,0x6C,0x11,0xC9,0x20,0xAD,0x11,0xB8 } }; // D5B5937A-F188-4C79-B86C-11C920AD11B8
    template <> inline constexpr guid guid_v<Windows::Win32::SystemServices::IVdsHwProviderType>{ 0x3E0F5166,0x542D,0x4FC6,{ 0x94,0x7A,0x01,0x21,0x74,0x24,0x0B,0x7E } }; // 3E0F5166-542D-4FC6-947A-012174240B7E
    template <> inline constexpr guid guid_v<Windows::Win32::SystemServices::IVdsHwProviderType2>{ 0x8190236F,0xC4D0,0x4E81,{ 0x80,0x11,0xD6,0x95,0x12,0xFC,0xC9,0x84 } }; // 8190236F-C4D0-4E81-8011-D69512FCC984
    template <> inline constexpr guid guid_v<Windows::Win32::SystemServices::IVdsIscsiPortal>{ 0x7FA1499D,0xEC85,0x4A8A,{ 0xA4,0x7B,0xFF,0x69,0x20,0x1F,0xCD,0x34 } }; // 7FA1499D-EC85-4A8A-A47B-FF69201FCD34
    template <> inline constexpr guid guid_v<Windows::Win32::SystemServices::IVdsIscsiPortalGroup>{ 0xFEF5F89D,0xA3DD,0x4B36,{ 0xBF,0x28,0xE7,0xDD,0xE0,0x45,0xC5,0x93 } }; // FEF5F89D-A3DD-4B36-BF28-E7DDE045C593
    template <> inline constexpr guid guid_v<Windows::Win32::SystemServices::IVdsIscsiTarget>{ 0xAA8F5055,0x83E5,0x4BCC,{ 0xAA,0x73,0x19,0x85,0x1A,0x36,0xA8,0x49 } }; // AA8F5055-83E5-4BCC-AA73-19851A36A849
    template <> inline constexpr guid guid_v<Windows::Win32::SystemServices::IVdsLun>{ 0x3540A9C7,0xE60F,0x4111,{ 0xA8,0x40,0x8B,0xBA,0x6C,0x2C,0x83,0xD8 } }; // 3540A9C7-E60F-4111-A840-8BBA6C2C83D8
    template <> inline constexpr guid guid_v<Windows::Win32::SystemServices::IVdsLun2>{ 0xE5B3A735,0x9EFB,0x499A,{ 0x80,0x71,0x43,0x94,0xD9,0xEE,0x6F,0xCB } }; // E5B3A735-9EFB-499A-8071-4394D9EE6FCB
    template <> inline constexpr guid guid_v<Windows::Win32::SystemServices::IVdsLunControllerPorts>{ 0x451FE266,0xDA6D,0x406A,{ 0xBB,0x60,0x82,0xE5,0x34,0xF8,0x5A,0xEB } }; // 451FE266-DA6D-406A-BB60-82E534F85AEB
    template <> inline constexpr guid guid_v<Windows::Win32::SystemServices::IVdsLunIscsi>{ 0x0D7C1E64,0xB59B,0x45AE,{ 0xB8,0x6A,0x2C,0x2C,0xC6,0xA4,0x20,0x67 } }; // 0D7C1E64-B59B-45AE-B86A-2C2CC6A42067
    template <> inline constexpr guid guid_v<Windows::Win32::SystemServices::IVdsLunMpio>{ 0x7C5FBAE3,0x333A,0x48A1,{ 0xA9,0x82,0x33,0xC1,0x57,0x88,0xCD,0xE3 } }; // 7C5FBAE3-333A-48A1-A982-33C15788CDE3
    template <> inline constexpr guid guid_v<Windows::Win32::SystemServices::IVdsLunNaming>{ 0x907504CB,0x6B4E,0x4D88,{ 0xA3,0x4D,0x17,0xBA,0x66,0x1F,0xBB,0x06 } }; // 907504CB-6B4E-4D88-A34D-17BA661FBB06
    template <> inline constexpr guid guid_v<Windows::Win32::SystemServices::IVdsLunNumber>{ 0xD3F95E46,0x54B3,0x41F9,{ 0xB6,0x78,0x0F,0x18,0x71,0x44,0x3A,0x08 } }; // D3F95E46-54B3-41F9-B678-0F1871443A08
    template <> inline constexpr guid guid_v<Windows::Win32::SystemServices::IVdsLunPlex>{ 0x0EE1A790,0x5D2E,0x4ABB,{ 0x8C,0x99,0xC4,0x81,0xE8,0xBE,0x21,0x38 } }; // 0EE1A790-5D2E-4ABB-8C99-C481E8BE2138
    template <> inline constexpr guid guid_v<Windows::Win32::SystemServices::IVdsMaintenance>{ 0xDAEBEEF3,0x8523,0x47ED,{ 0xA2,0xB9,0x05,0xCE,0xCC,0xE2,0xA1,0xAE } }; // DAEBEEF3-8523-47ED-A2B9-05CECCE2A1AE
    template <> inline constexpr guid guid_v<Windows::Win32::SystemServices::IVdsProvider>{ 0x10C5E575,0x7984,0x4E81,{ 0xA5,0x6B,0x43,0x1F,0x5F,0x92,0xAE,0x42 } }; // 10C5E575-7984-4E81-A56B-431F5F92AE42
    template <> inline constexpr guid guid_v<Windows::Win32::SystemServices::IVdsProviderPrivate>{ 0x11F3CD41,0xB7E8,0x48FF,{ 0x94,0x72,0x9D,0xFF,0x01,0x8A,0xA2,0x92 } }; // 11F3CD41-B7E8-48FF-9472-9DFF018AA292
    template <> inline constexpr guid guid_v<Windows::Win32::SystemServices::IVdsProviderSupport>{ 0x1732BE13,0xE8F9,0x4A03,{ 0xBF,0xBC,0x5F,0x61,0x6A,0xA6,0x6C,0xE1 } }; // 1732BE13-E8F9-4A03-BFBC-5F616AA66CE1
    template <> inline constexpr guid guid_v<Windows::Win32::SystemServices::IVdsStoragePool>{ 0x932CA8CF,0x0EB3,0x4BA8,{ 0x96,0x20,0x22,0x66,0x5D,0x7F,0x84,0x50 } }; // 932CA8CF-0EB3-4BA8-9620-22665D7F8450
    template <> inline constexpr guid guid_v<Windows::Win32::SystemServices::IVdsSubSystem>{ 0x6FCEE2D3,0x6D90,0x4F91,{ 0x80,0xE2,0xA5,0xC7,0xCA,0xAC,0xA9,0xD8 } }; // 6FCEE2D3-6D90-4F91-80E2-A5C7CAACA9D8
    template <> inline constexpr guid guid_v<Windows::Win32::SystemServices::IVdsSubSystem2>{ 0xBE666735,0x7800,0x4A77,{ 0x9D,0x9C,0x40,0xF8,0x5B,0x87,0xE2,0x92 } }; // BE666735-7800-4A77-9D9C-40F85B87E292
    template <> inline constexpr guid guid_v<Windows::Win32::SystemServices::IVdsSubSystemInterconnect>{ 0x9E6FA560,0xC141,0x477B,{ 0x83,0xBA,0x0B,0x6C,0x38,0xF7,0xFE,0xBF } }; // 9E6FA560-C141-477B-83BA-0B6C38F7FEBF
    template <> inline constexpr guid guid_v<Windows::Win32::SystemServices::IVdsSubSystemIscsi>{ 0x0027346F,0x40D0,0x4B45,{ 0x8C,0xEC,0x59,0x06,0xDC,0x03,0x80,0xC8 } }; // 0027346F-40D0-4B45-8CEC-5906DC0380C8
    template <> inline constexpr guid guid_v<Windows::Win32::SystemServices::IVdsSubSystemNaming>{ 0x0D70FAA3,0x9CD4,0x4900,{ 0xAA,0x20,0x69,0x81,0xB6,0xAA,0xFC,0x75 } }; // 0D70FAA3-9CD4-4900-AA20-6981B6AAFC75
    template <> inline constexpr guid guid_v<Windows::Win32::SystemServices::IVssAdmin>{ 0x77ED5996,0x2F63,0x11D3,{ 0x8A,0x39,0x00,0xC0,0x4F,0x72,0xD8,0xE3 } }; // 77ED5996-2F63-11D3-8A39-00C04F72D8E3
    template <> inline constexpr guid guid_v<Windows::Win32::SystemServices::IVssAdminEx>{ 0x7858A9F8,0xB1FA,0x41A6,{ 0x96,0x4F,0xB9,0xB3,0x6B,0x8C,0xD8,0xD8 } }; // 7858A9F8-B1FA-41A6-964F-B9B36B8CD8D8
    template <> inline constexpr guid guid_v<Windows::Win32::SystemServices::IVssAsync>{ 0x507C37B4,0xCF5B,0x4E95,{ 0xB0,0xAF,0x14,0xEB,0x97,0x67,0x46,0x7E } }; // 507C37B4-CF5B-4E95-B0AF-14EB9767467E
    template <> inline constexpr guid guid_v<Windows::Win32::SystemServices::IVssComponent>{ 0xD2C72C96,0xC121,0x4518,{ 0xB6,0x27,0xE5,0xA9,0x3D,0x01,0x0E,0xAD } }; // D2C72C96-C121-4518-B627-E5A93D010EAD
    template <> inline constexpr guid guid_v<Windows::Win32::SystemServices::IVssComponentEx>{ 0x156C8B5E,0xF131,0x4BD7,{ 0x9C,0x97,0xD1,0x92,0x3B,0xE7,0xE1,0xFA } }; // 156C8B5E-F131-4BD7-9C97-D1923BE7E1FA
    template <> inline constexpr guid guid_v<Windows::Win32::SystemServices::IVssComponentEx2>{ 0x3B5BE0F2,0x07A9,0x4E4B,{ 0xBD,0xD3,0xCF,0xDC,0x8E,0x2C,0x0D,0x2D } }; // 3B5BE0F2-07A9-4E4B-BDD3-CFDC8E2C0D2D
    template <> inline constexpr guid guid_v<Windows::Win32::SystemServices::IVssCreateExpressWriterMetadata>{ 0x9C772E77,0xB26E,0x427F,{ 0x92,0xDD,0xC9,0x96,0xF4,0x1E,0xA5,0xE3 } }; // 9C772E77-B26E-427F-92DD-C996F41EA5E3
    template <> inline constexpr guid guid_v<Windows::Win32::SystemServices::IVssCreateWriterMetadataEx>{ 0x9F21981D,0xD469,0x4349,{ 0xB8,0x07,0x39,0xE6,0x4E,0x46,0x74,0xE1 } }; // 9F21981D-D469-4349-B807-39E64E4674E1
    template <> inline constexpr guid guid_v<Windows::Win32::SystemServices::IVssDifferentialSoftwareSnapshotMgmt>{ 0x214A0F28,0xB737,0x4026,{ 0xB8,0x47,0x4F,0x9E,0x37,0xD7,0x95,0x29 } }; // 214A0F28-B737-4026-B847-4F9E37D79529
    template <> inline constexpr guid guid_v<Windows::Win32::SystemServices::IVssDifferentialSoftwareSnapshotMgmt2>{ 0x949D7353,0x675F,0x4275,{ 0x89,0x69,0xF0,0x44,0xC6,0x27,0x78,0x15 } }; // 949D7353-675F-4275-8969-F044C6277815
    template <> inline constexpr guid guid_v<Windows::Win32::SystemServices::IVssDifferentialSoftwareSnapshotMgmt3>{ 0x383F7E71,0xA4C5,0x401F,{ 0xB2,0x7F,0xF8,0x26,0x28,0x9F,0x84,0x58 } }; // 383F7E71-A4C5-401F-B27F-F826289F8458
    template <> inline constexpr guid guid_v<Windows::Win32::SystemServices::IVssEnumMgmtObject>{ 0x01954E6B,0x9254,0x4E6E,{ 0x80,0x8C,0xC9,0xE0,0x5D,0x00,0x76,0x96 } }; // 01954E6B-9254-4E6E-808C-C9E05D007696
    template <> inline constexpr guid guid_v<Windows::Win32::SystemServices::IVssEnumObject>{ 0xAE1C7110,0x2F60,0x11D3,{ 0x8A,0x39,0x00,0xC0,0x4F,0x72,0xD8,0xE3 } }; // AE1C7110-2F60-11D3-8A39-00C04F72D8E3
    template <> inline constexpr guid guid_v<Windows::Win32::SystemServices::IVssExpressWriter>{ 0xE33AFFDC,0x59C7,0x47B1,{ 0x97,0xD5,0x42,0x66,0x59,0x8F,0x62,0x35 } }; // E33AFFDC-59C7-47B1-97D5-4266598F6235
    template <> inline constexpr guid guid_v<Windows::Win32::SystemServices::IVssFileShareSnapshotProvider>{ 0xC8636060,0x7C2E,0x11DF,{ 0x8C,0x4A,0x08,0x00,0x20,0x0C,0x9A,0x66 } }; // C8636060-7C2E-11DF-8C4A-0800200C9A66
    template <> inline constexpr guid guid_v<Windows::Win32::SystemServices::IVssHardwareSnapshotProvider>{ 0x9593A157,0x44E9,0x4344,{ 0xBB,0xEB,0x44,0xFB,0xF9,0xB0,0x6B,0x10 } }; // 9593A157-44E9-4344-BBEB-44FBF9B06B10
    template <> inline constexpr guid guid_v<Windows::Win32::SystemServices::IVssHardwareSnapshotProviderEx>{ 0x7F5BA925,0xCDB1,0x4D11,{ 0xA7,0x1F,0x33,0x9E,0xB7,0xE7,0x09,0xFD } }; // 7F5BA925-CDB1-4D11-A71F-339EB7E709FD
    template <> inline constexpr guid guid_v<Windows::Win32::SystemServices::IVssProviderCreateSnapshotSet>{ 0x5F894E5B,0x1E39,0x4778,{ 0x8E,0x23,0x9A,0xBA,0xD9,0xF0,0xE0,0x8C } }; // 5F894E5B-1E39-4778-8E23-9ABAD9F0E08C
    template <> inline constexpr guid guid_v<Windows::Win32::SystemServices::IVssProviderNotifications>{ 0xE561901F,0x03A5,0x4AFE,{ 0x86,0xD0,0x72,0xBA,0xEE,0xCE,0x70,0x04 } }; // E561901F-03A5-4AFE-86D0-72BAEECE7004
    template <> inline constexpr guid guid_v<Windows::Win32::SystemServices::IVssSnapshotMgmt>{ 0xFA7DF749,0x66E7,0x4986,{ 0xA2,0x7F,0xE2,0xF0,0x4A,0xE5,0x37,0x72 } }; // FA7DF749-66E7-4986-A27F-E2F04AE53772
    template <> inline constexpr guid guid_v<Windows::Win32::SystemServices::IVssSnapshotMgmt2>{ 0x0F61EC39,0xFE82,0x45F2,{ 0xA3,0xF0,0x76,0x8B,0x5D,0x42,0x71,0x02 } }; // 0F61EC39-FE82-45F2-A3F0-768B5D427102
    template <> inline constexpr guid guid_v<Windows::Win32::SystemServices::IVssSoftwareSnapshotProvider>{ 0x609E123E,0x2C5A,0x44D3,{ 0x8F,0x01,0x0B,0x1D,0x9A,0x47,0xD1,0xFF } }; // 609E123E-2C5A-44D3-8F01-0B1D9A47D1FF
    template <> inline constexpr guid guid_v<Windows::Win32::SystemServices::VSSCoordinator>{ 0xE579AB5F,0x1CC4,0x44B4,{ 0xBE,0xD9,0xDE,0x09,0x91,0xFF,0x06,0x23 } }; // E579AB5F-1CC4-44B4-BED9-DE0991FF0623
    template <> inline constexpr guid guid_v<Windows::Win32::SystemServices::VssSnapshotMgmt>{ 0x0B5A2C52,0x3EB9,0x470A,{ 0x96,0xE2,0x6C,0x6D,0x45,0x70,0xE4,0x0F } }; // 0B5A2C52-3EB9-470A-96E2-6C6D4570E40F
#pragma endregion guids

}
#endif
