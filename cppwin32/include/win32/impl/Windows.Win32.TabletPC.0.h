// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_TabletPC_0_H
#define WIN32_Windows_Win32_TabletPC_0_H
WIN32_EXPORT namespace win32::Windows::Win32::TabletPC
{
#pragma region enums
    enum class ALT_BREAKS : int32_t
    {
        ALT_BREAKS_SAME = 0,
        ALT_BREAKS_UNIQUE = 1,
        ALT_BREAKS_FULL = 2,
    };
    enum class AppearanceConstants : int32_t
    {
        rtfFlat = 0,
        rtfThreeD = 1,
    };
    enum class BorderStyleConstants : int32_t
    {
        rtfNoBorder = 0,
        rtfFixedSingle = 1,
    };
    enum class CONFIDENCE_LEVEL : int32_t
    {
        CFL_STRONG = 0,
        CFL_INTERMEDIATE = 1,
        CFL_POOR = 2,
    };
    enum class CorrectionMode : int32_t
    {
        CorrectionMode_NotVisible = 0,
        CorrectionMode_PreInsertion = 1,
        CorrectionMode_PostInsertionCollapsed = 2,
        CorrectionMode_PostInsertionExpanded = 3,
    };
    enum class CorrectionPosition : int32_t
    {
        CorrectionPosition_Auto = 0,
        CorrectionPosition_Bottom = 1,
        CorrectionPosition_Top = 2,
    };
    enum class DISPID_Ink : int32_t
    {
        DISPID_IStrokes = 1,
        DISPID_IExtendedProperties = 2,
        DISPID_IGetBoundingBox = 3,
        DISPID_IDeleteStrokes = 4,
        DISPID_IDeleteStroke = 5,
        DISPID_IExtractStrokes = 6,
        DISPID_IExtractWithRectangle = 7,
        DISPID_IDirty = 8,
        DISPID_ICustomStrokes = 9,
        DISPID_IClone = 10,
        DISPID_IHitTestCircle = 11,
        DISPID_IHitTestWithRectangle = 12,
        DISPID_IHitTestWithLasso = 13,
        DISPID_INearestPoint = 14,
        DISPID_ICreateStrokes = 15,
        DISPID_ICreateStroke = 16,
        DISPID_IAddStrokesAtRectangle = 17,
        DISPID_IClip = 18,
        DISPID_ISave = 19,
        DISPID_ILoad = 20,
        DISPID_ICreateStrokeFromPoints = 21,
        DISPID_IClipboardCopyWithRectangle = 22,
        DISPID_IClipboardCopy = 23,
        DISPID_ICanPaste = 24,
        DISPID_IClipboardPaste = 25,
    };
    enum class DISPID_InkCollector : int32_t
    {
        DISPID_ICEnabled = 1,
        DISPID_ICHwnd = 2,
        DISPID_ICPaint = 3,
        DISPID_ICText = 4,
        DISPID_ICDefaultDrawingAttributes = 5,
        DISPID_ICRenderer = 6,
        DISPID_ICInk = 7,
        DISPID_ICAutoRedraw = 8,
        DISPID_ICCollectingInk = 9,
        DISPID_ICSetEventInterest = 10,
        DISPID_ICGetEventInterest = 11,
        DISPID_IOEditingMode = 12,
        DISPID_IOSelection = 13,
        DISPID_IOAttachMode = 14,
        DISPID_IOHitTestSelection = 15,
        DISPID_IODraw = 16,
        DISPID_IPPicture = 17,
        DISPID_IPSizeMode = 18,
        DISPID_IPBackColor = 19,
        DISPID_ICCursors = 20,
        DISPID_ICMarginX = 21,
        DISPID_ICMarginY = 22,
        DISPID_ICSetWindowInputRectangle = 23,
        DISPID_ICGetWindowInputRectangle = 24,
        DISPID_ICTablet = 25,
        DISPID_ICSetAllTabletsMode = 26,
        DISPID_ICSetSingleTabletIntegratedMode = 27,
        DISPID_ICCollectionMode = 28,
        DISPID_ICSetGestureStatus = 29,
        DISPID_ICGetGestureStatus = 30,
        DISPID_ICDynamicRendering = 31,
        DISPID_ICDesiredPacketDescription = 32,
        DISPID_IOEraserMode = 33,
        DISPID_IOEraserWidth = 34,
        DISPID_ICMouseIcon = 35,
        DISPID_ICMousePointer = 36,
        DISPID_IPInkEnabled = 37,
        DISPID_ICSupportHighContrastInk = 38,
        DISPID_IOSupportHighContrastSelectionUI = 39,
    };
    enum class DISPID_InkCollectorEvent : int32_t
    {
        DISPID_ICEStroke = 1,
        DISPID_ICECursorDown = 2,
        DISPID_ICENewPackets = 3,
        DISPID_ICENewInAirPackets = 4,
        DISPID_ICECursorButtonDown = 5,
        DISPID_ICECursorButtonUp = 6,
        DISPID_ICECursorInRange = 7,
        DISPID_ICECursorOutOfRange = 8,
        DISPID_ICESystemGesture = 9,
        DISPID_ICEGesture = 10,
        DISPID_ICETabletAdded = 11,
        DISPID_ICETabletRemoved = 12,
        DISPID_IOEPainting = 13,
        DISPID_IOEPainted = 14,
        DISPID_IOESelectionChanging = 15,
        DISPID_IOESelectionChanged = 16,
        DISPID_IOESelectionMoving = 17,
        DISPID_IOESelectionMoved = 18,
        DISPID_IOESelectionResizing = 19,
        DISPID_IOESelectionResized = 20,
        DISPID_IOEStrokesDeleting = 21,
        DISPID_IOEStrokesDeleted = 22,
        DISPID_IPEChangeUICues = 23,
        DISPID_IPEClick = 24,
        DISPID_IPEDblClick = 25,
        DISPID_IPEInvalidated = 26,
        DISPID_IPEMouseDown = 27,
        DISPID_IPEMouseEnter = 28,
        DISPID_IPEMouseHover = 29,
        DISPID_IPEMouseLeave = 30,
        DISPID_IPEMouseMove = 31,
        DISPID_IPEMouseUp = 32,
        DISPID_IPEMouseWheel = 33,
        DISPID_IPESizeModeChanged = 34,
        DISPID_IPEStyleChanged = 35,
        DISPID_IPESystemColorsChanged = 36,
        DISPID_IPEKeyDown = 37,
        DISPID_IPEKeyPress = 38,
        DISPID_IPEKeyUp = 39,
        DISPID_IPEResize = 40,
        DISPID_IPESizeChanged = 41,
    };
    enum class DISPID_InkCursor : int32_t
    {
        DISPID_ICsrName = 0,
        DISPID_ICsrId = 1,
        DISPID_ICsrDrawingAttributes = 2,
        DISPID_ICsrButtons = 3,
        DISPID_ICsrInverted = 4,
        DISPID_ICsrTablet = 5,
    };
    enum class DISPID_InkCursorButton : int32_t
    {
        DISPID_ICBName = 0,
        DISPID_ICBId = 1,
        DISPID_ICBState = 2,
    };
    enum class DISPID_InkCursorButtons : int32_t
    {
        DISPID_ICBs_NewEnum = -4,
        DISPID_ICBsItem = 0,
        DISPID_ICBsCount = 1,
    };
    enum class DISPID_InkCursors : int32_t
    {
        DISPID_ICs_NewEnum = -4,
        DISPID_ICsItem = 0,
        DISPID_ICsCount = 1,
    };
    enum class DISPID_InkCustomStrokes : int32_t
    {
        DISPID_ICSs_NewEnum = -4,
        DISPID_ICSsItem = 0,
        DISPID_ICSsCount = 1,
        DISPID_ICSsAdd = 2,
        DISPID_ICSsRemove = 3,
        DISPID_ICSsClear = 4,
    };
    enum class DISPID_InkDivider : int32_t
    {
        DISPID_IInkDivider_Strokes = 1,
        DISPID_IInkDivider_RecognizerContext = 2,
        DISPID_IInkDivider_LineHeight = 3,
        DISPID_IInkDivider_Divide = 4,
    };
    enum class DISPID_InkDivisionResult : int32_t
    {
        DISPID_IInkDivisionResult_Strokes = 1,
        DISPID_IInkDivisionResult_ResultByType = 2,
    };
    enum class DISPID_InkDivisionUnit : int32_t
    {
        DISPID_IInkDivisionUnit_Strokes = 1,
        DISPID_IInkDivisionUnit_DivisionType = 2,
        DISPID_IInkDivisionUnit_RecognizedString = 3,
        DISPID_IInkDivisionUnit_RotationTransform = 4,
    };
    enum class DISPID_InkDivisionUnits : int32_t
    {
        DISPID_IInkDivisionUnits_NewEnum = -4,
        DISPID_IInkDivisionUnits_Item = 0,
        DISPID_IInkDivisionUnits_Count = 1,
    };
    enum class DISPID_InkDrawingAttributes : int32_t
    {
        DISPID_DAHeight = 1,
        DISPID_DAColor = 2,
        DISPID_DAWidth = 3,
        DISPID_DAFitToCurve = 4,
        DISPID_DAIgnorePressure = 5,
        DISPID_DAAntiAliased = 6,
        DISPID_DATransparency = 7,
        DISPID_DARasterOperation = 8,
        DISPID_DAPenTip = 9,
        DISPID_DAClone = 10,
        DISPID_DAExtendedProperties = 11,
    };
    enum class DISPID_InkEdit : int32_t
    {
        DISPID_Text = 0,
        DISPID_TextRTF = 1,
        DISPID_Hwnd = 2,
        DISPID_DisableNoScroll = 3,
        DISPID_Locked = 4,
        DISPID_Enabled = 5,
        DISPID_MaxLength = 6,
        DISPID_MultiLine = 7,
        DISPID_ScrollBars = 8,
        DISPID_RTSelStart = 9,
        DISPID_RTSelLength = 10,
        DISPID_RTSelText = 11,
        DISPID_SelAlignment = 12,
        DISPID_SelBold = 13,
        DISPID_SelCharOffset = 14,
        DISPID_SelColor = 15,
        DISPID_SelFontName = 16,
        DISPID_SelFontSize = 17,
        DISPID_SelItalic = 18,
        DISPID_SelRTF = 19,
        DISPID_SelUnderline = 20,
        DISPID_DragIcon = 21,
        DISPID_Status = 22,
        DISPID_UseMouseForInput = 23,
        DISPID_InkMode = 24,
        DISPID_InkInsertMode = 25,
        DISPID_RecoTimeout = 26,
        DISPID_DrawAttr = 27,
        DISPID_Recognizer = 28,
        DISPID_Factoid = 29,
        DISPID_SelInk = 30,
        DISPID_SelInksDisplayMode = 31,
        DISPID_Recognize = 32,
        DISPID_GetGestStatus = 33,
        DISPID_SetGestStatus = 34,
        DISPID_Refresh = 35,
    };
    enum class DISPID_InkEditEvents : int32_t
    {
        DISPID_IeeChange = 1,
        DISPID_IeeSelChange = 2,
        DISPID_IeeKeyDown = 3,
        DISPID_IeeKeyUp = 4,
        DISPID_IeeMouseUp = 5,
        DISPID_IeeMouseDown = 6,
        DISPID_IeeKeyPress = 7,
        DISPID_IeeDblClick = 8,
        DISPID_IeeClick = 9,
        DISPID_IeeMouseMove = 10,
        DISPID_IeeCursorDown = 21,
        DISPID_IeeStroke = 22,
        DISPID_IeeGesture = 23,
        DISPID_IeeRecognitionResult = 24,
    };
    enum class DISPID_InkEvent : int32_t
    {
        DISPID_IEInkAdded = 1,
        DISPID_IEInkDeleted = 2,
    };
    enum class DISPID_InkExtendedProperties : int32_t
    {
        DISPID_IEPs_NewEnum = -4,
        DISPID_IEPsItem = 0,
        DISPID_IEPsCount = 1,
        DISPID_IEPsAdd = 2,
        DISPID_IEPsRemove = 3,
        DISPID_IEPsClear = 4,
        DISPID_IEPsDoesPropertyExist = 5,
    };
    enum class DISPID_InkExtendedProperty : int32_t
    {
        DISPID_IEPGuid = 1,
        DISPID_IEPData = 2,
    };
    enum class DISPID_InkGesture : int32_t
    {
        DISPID_IGId = 0,
        DISPID_IGGetHotPoint = 1,
        DISPID_IGConfidence = 2,
    };
    enum class DISPID_InkRecoAlternate : int32_t
    {
        DISPID_InkRecoAlternate_String = 1,
        DISPID_InkRecoAlternate_LineNumber = 2,
        DISPID_InkRecoAlternate_Baseline = 3,
        DISPID_InkRecoAlternate_Midline = 4,
        DISPID_InkRecoAlternate_Ascender = 5,
        DISPID_InkRecoAlternate_Descender = 6,
        DISPID_InkRecoAlternate_Confidence = 7,
        DISPID_InkRecoAlternate_Strokes = 8,
        DISPID_InkRecoAlternate_GetStrokesFromStrokeRanges = 9,
        DISPID_InkRecoAlternate_GetStrokesFromTextRange = 10,
        DISPID_InkRecoAlternate_GetTextRangeFromStrokes = 11,
        DISPID_InkRecoAlternate_GetPropertyValue = 12,
        DISPID_InkRecoAlternate_LineAlternates = 13,
        DISPID_InkRecoAlternate_ConfidenceAlternates = 14,
        DISPID_InkRecoAlternate_AlternatesWithConstantPropertyValues = 15,
    };
    enum class DISPID_InkRecoContext : int32_t
    {
        DISPID_IRecoCtx_Strokes = 1,
        DISPID_IRecoCtx_CharacterAutoCompletionMode = 2,
        DISPID_IRecoCtx_Factoid = 3,
        DISPID_IRecoCtx_WordList = 4,
        DISPID_IRecoCtx_Recognizer = 5,
        DISPID_IRecoCtx_Guide = 6,
        DISPID_IRecoCtx_Flags = 7,
        DISPID_IRecoCtx_PrefixText = 8,
        DISPID_IRecoCtx_SuffixText = 9,
        DISPID_IRecoCtx_StopRecognition = 10,
        DISPID_IRecoCtx_Clone = 11,
        DISPID_IRecoCtx_Recognize = 12,
        DISPID_IRecoCtx_StopBackgroundRecognition = 13,
        DISPID_IRecoCtx_EndInkInput = 14,
        DISPID_IRecoCtx_BackgroundRecognize = 15,
        DISPID_IRecoCtx_BackgroundRecognizeWithAlternates = 16,
        DISPID_IRecoCtx_IsStringSupported = 17,
    };
    enum class DISPID_InkRecoContext2 : int32_t
    {
        DISPID_IRecoCtx2_EnabledUnicodeRanges = 0,
    };
    enum class DISPID_InkRecognitionAlternates : int32_t
    {
        DISPID_InkRecognitionAlternates_NewEnum = -4,
        DISPID_InkRecognitionAlternates_Item = 0,
        DISPID_InkRecognitionAlternates_Count = 1,
        DISPID_InkRecognitionAlternates_Strokes = 2,
    };
    enum class DISPID_InkRecognitionEvent : int32_t
    {
        DISPID_IRERecognitionWithAlternates = 1,
        DISPID_IRERecognition = 2,
    };
    enum class DISPID_InkRecognitionResult : int32_t
    {
        DISPID_InkRecognitionResult_TopString = 1,
        DISPID_InkRecognitionResult_TopAlternate = 2,
        DISPID_InkRecognitionResult_Strokes = 3,
        DISPID_InkRecognitionResult_TopConfidence = 4,
        DISPID_InkRecognitionResult_AlternatesFromSelection = 5,
        DISPID_InkRecognitionResult_ModifyTopAlternate = 6,
        DISPID_InkRecognitionResult_SetResultOnStrokes = 7,
    };
    enum class DISPID_InkRecognizer : int32_t
    {
        DISPID_RecoClsid = 1,
        DISPID_RecoName = 2,
        DISPID_RecoVendor = 3,
        DISPID_RecoCapabilities = 4,
        DISPID_RecoLanguageID = 5,
        DISPID_RecoPreferredPacketDescription = 6,
        DISPID_RecoCreateRecognizerContext = 7,
        DISPID_RecoSupportedProperties = 8,
    };
    enum class DISPID_InkRecognizer2 : int32_t
    {
        DISPID_RecoId = 0,
        DISPID_RecoUnicodeRanges = 1,
    };
    enum class DISPID_InkRecognizerGuide : int32_t
    {
        DISPID_IRGWritingBox = 1,
        DISPID_IRGDrawnBox = 2,
        DISPID_IRGRows = 3,
        DISPID_IRGColumns = 4,
        DISPID_IRGMidline = 5,
        DISPID_IRGGuideData = 6,
    };
    enum class DISPID_InkRecognizers : int32_t
    {
        DISPID_IRecos_NewEnum = -4,
        DISPID_IRecosItem = 0,
        DISPID_IRecosCount = 1,
        DISPID_IRecosGetDefaultRecognizer = 2,
    };
    enum class DISPID_InkRectangle : int32_t
    {
        DISPID_IRTop = 1,
        DISPID_IRLeft = 2,
        DISPID_IRBottom = 3,
        DISPID_IRRight = 4,
        DISPID_IRGetRectangle = 5,
        DISPID_IRSetRectangle = 6,
        DISPID_IRData = 7,
    };
    enum class DISPID_InkRenderer : int32_t
    {
        DISPID_IRGetViewTransform = 1,
        DISPID_IRSetViewTransform = 2,
        DISPID_IRGetObjectTransform = 3,
        DISPID_IRSetObjectTransform = 4,
        DISPID_IRDraw = 5,
        DISPID_IRDrawStroke = 6,
        DISPID_IRPixelToInkSpace = 7,
        DISPID_IRInkSpaceToPixel = 8,
        DISPID_IRPixelToInkSpaceFromPoints = 9,
        DISPID_IRInkSpaceToPixelFromPoints = 10,
        DISPID_IRMeasure = 11,
        DISPID_IRMeasureStroke = 12,
        DISPID_IRMove = 13,
        DISPID_IRRotate = 14,
        DISPID_IRScale = 15,
    };
    enum class DISPID_InkStrokeDisp : int32_t
    {
        DISPID_ISDInkIndex = 1,
        DISPID_ISDID = 2,
        DISPID_ISDGetBoundingBox = 3,
        DISPID_ISDDrawingAttributes = 4,
        DISPID_ISDFindIntersections = 5,
        DISPID_ISDGetRectangleIntersections = 6,
        DISPID_ISDClip = 7,
        DISPID_ISDHitTestCircle = 8,
        DISPID_ISDNearestPoint = 9,
        DISPID_ISDSplit = 10,
        DISPID_ISDExtendedProperties = 11,
        DISPID_ISDInk = 12,
        DISPID_ISDBezierPoints = 13,
        DISPID_ISDPolylineCusps = 14,
        DISPID_ISDBezierCusps = 15,
        DISPID_ISDSelfIntersections = 16,
        DISPID_ISDPacketCount = 17,
        DISPID_ISDPacketSize = 18,
        DISPID_ISDPacketDescription = 19,
        DISPID_ISDDeleted = 20,
        DISPID_ISDGetPacketDescriptionPropertyMetrics = 21,
        DISPID_ISDGetPoints = 22,
        DISPID_ISDSetPoints = 23,
        DISPID_ISDGetPacketData = 24,
        DISPID_ISDGetPacketValuesByProperty = 25,
        DISPID_ISDSetPacketValuesByProperty = 26,
        DISPID_ISDGetFlattenedBezierPoints = 27,
        DISPID_ISDScaleToRectangle = 28,
        DISPID_ISDTransform = 29,
        DISPID_ISDMove = 30,
        DISPID_ISDRotate = 31,
        DISPID_ISDShear = 32,
        DISPID_ISDScale = 33,
    };
    enum class DISPID_InkStrokes : int32_t
    {
        DISPID_ISs_NewEnum = -4,
        DISPID_ISsItem = 0,
        DISPID_ISsCount = 1,
        DISPID_ISsValid = 2,
        DISPID_ISsInk = 3,
        DISPID_ISsAdd = 4,
        DISPID_ISsAddStrokes = 5,
        DISPID_ISsRemove = 6,
        DISPID_ISsRemoveStrokes = 7,
        DISPID_ISsToString = 8,
        DISPID_ISsModifyDrawingAttributes = 9,
        DISPID_ISsGetBoundingBox = 10,
        DISPID_ISsScaleToRectangle = 11,
        DISPID_ISsTransform = 12,
        DISPID_ISsMove = 13,
        DISPID_ISsRotate = 14,
        DISPID_ISsShear = 15,
        DISPID_ISsScale = 16,
        DISPID_ISsClip = 17,
        DISPID_ISsRecognitionResult = 18,
        DISPID_ISsRemoveRecognitionResult = 19,
    };
    enum class DISPID_InkTablet : int32_t
    {
        DISPID_ITName = 0,
        DISPID_ITPlugAndPlayId = 1,
        DISPID_ITPropertyMetrics = 2,
        DISPID_ITIsPacketPropertySupported = 3,
        DISPID_ITMaximumInputRectangle = 4,
        DISPID_ITHardwareCapabilities = 5,
    };
    enum class DISPID_InkTablet2 : int32_t
    {
        DISPID_IT2DeviceKind = 0,
    };
    enum class DISPID_InkTablet3 : int32_t
    {
        DISPID_IT3IsMultiTouch = 0,
        DISPID_IT3MaximumCursors = 1,
    };
    enum class DISPID_InkTablets : int32_t
    {
        DISPID_ITs_NewEnum = -4,
        DISPID_ITsItem = 0,
        DISPID_ITsDefaultTablet = 1,
        DISPID_ITsCount = 2,
        DISPID_ITsIsPacketPropertySupported = 3,
    };
    enum class DISPID_InkTransform : int32_t
    {
        DISPID_ITReset = 1,
        DISPID_ITTranslate = 2,
        DISPID_ITRotate = 3,
        DISPID_ITReflect = 4,
        DISPID_ITShear = 5,
        DISPID_ITScale = 6,
        DISPID_ITeM11 = 7,
        DISPID_ITeM12 = 8,
        DISPID_ITeM21 = 9,
        DISPID_ITeM22 = 10,
        DISPID_ITeDx = 11,
        DISPID_ITeDy = 12,
        DISPID_ITGetTransform = 13,
        DISPID_ITSetTransform = 14,
        DISPID_ITData = 15,
    };
    enum class DISPID_InkWordList : int32_t
    {
        DISPID_InkWordList_AddWord = 0,
        DISPID_InkWordList_RemoveWord = 1,
        DISPID_InkWordList_Merge = 2,
    };
    enum class DISPID_InkWordList2 : int32_t
    {
        DISPID_InkWordList2_AddWords = 3,
    };
    enum class DISPID_MathInputControlEvents : int32_t
    {
        DISPID_MICInsert = 0,
        DISPID_MICClose = 1,
        DISPID_MICPaint = 2,
        DISPID_MICClear = 3,
    };
    enum class DISPID_PenInputPanel : int32_t
    {
        DISPID_PIPAttachedEditWindow = 0,
        DISPID_PIPFactoid = 1,
        DISPID_PIPCurrentPanel = 2,
        DISPID_PIPDefaultPanel = 3,
        DISPID_PIPVisible = 4,
        DISPID_PIPTop = 5,
        DISPID_PIPLeft = 6,
        DISPID_PIPWidth = 7,
        DISPID_PIPHeight = 8,
        DISPID_PIPMoveTo = 9,
        DISPID_PIPCommitPendingInput = 10,
        DISPID_PIPRefresh = 11,
        DISPID_PIPBusy = 12,
        DISPID_PIPVerticalOffset = 13,
        DISPID_PIPHorizontalOffset = 14,
        DISPID_PIPEnableTsf = 15,
        DISPID_PIPAutoShow = 16,
    };
    enum class DISPID_PenInputPanelEvents : int32_t
    {
        DISPID_PIPEVisibleChanged = 0,
        DISPID_PIPEPanelChanged = 1,
        DISPID_PIPEInputFailed = 2,
        DISPID_PIPEPanelMoving = 3,
    };
    enum class DISPID_StrokeEvent : int32_t
    {
        DISPID_SEStrokesAdded = 1,
        DISPID_SEStrokesRemoved = 2,
    };
    enum class EventMask : int32_t
    {
        EventMask_InPlaceStateChanging = 1,
        EventMask_InPlaceStateChanged = 2,
        EventMask_InPlaceSizeChanging = 4,
        EventMask_InPlaceSizeChanged = 8,
        EventMask_InputAreaChanging = 16,
        EventMask_InputAreaChanged = 32,
        EventMask_CorrectionModeChanging = 64,
        EventMask_CorrectionModeChanged = 128,
        EventMask_InPlaceVisibilityChanging = 256,
        EventMask_InPlaceVisibilityChanged = 512,
        EventMask_TextInserting = 1024,
        EventMask_TextInserted = 2048,
        EventMask_All = 4095,
    };
    enum class FLICKACTION_COMMANDCODE : int32_t
    {
        FLICKACTION_COMMANDCODE_NULL = 0,
        FLICKACTION_COMMANDCODE_SCROLL = 1,
        FLICKACTION_COMMANDCODE_APPCOMMAND = 2,
        FLICKACTION_COMMANDCODE_CUSTOMKEY = 3,
        FLICKACTION_COMMANDCODE_KEYMODIFIER = 4,
    };
    enum class FLICKDIRECTION : int32_t
    {
        FLICKDIRECTION_MIN = 0,
        FLICKDIRECTION_RIGHT = 0,
        FLICKDIRECTION_UPRIGHT = 1,
        FLICKDIRECTION_UP = 2,
        FLICKDIRECTION_UPLEFT = 3,
        FLICKDIRECTION_LEFT = 4,
        FLICKDIRECTION_DOWNLEFT = 5,
        FLICKDIRECTION_DOWN = 6,
        FLICKDIRECTION_DOWNRIGHT = 7,
        FLICKDIRECTION_INVALID = 8,
    };
    enum class FLICKMODE : int32_t
    {
        FLICKMODE_MIN = 0,
        FLICKMODE_OFF = 0,
        FLICKMODE_ON = 1,
        FLICKMODE_LEARNING = 2,
        FLICKMODE_MAX = 2,
        FLICKMODE_DEFAULT = 1,
    };
    enum class InPlaceDirection : int32_t
    {
        InPlaceDirection_Auto = 0,
        InPlaceDirection_Bottom = 1,
        InPlaceDirection_Top = 2,
    };
    enum class InPlaceState : int32_t
    {
        InPlaceState_Auto = 0,
        InPlaceState_HoverTarget = 1,
        InPlaceState_Expanded = 2,
    };
    enum class InkApplicationGesture : int32_t
    {
        IAG_AllGestures = 0,
        IAG_NoGesture = 61440,
        IAG_Scratchout = 61441,
        IAG_Triangle = 61442,
        IAG_Square = 61443,
        IAG_Star = 61444,
        IAG_Check = 61445,
        IAG_Curlicue = 61456,
        IAG_DoubleCurlicue = 61457,
        IAG_Circle = 61472,
        IAG_DoubleCircle = 61473,
        IAG_SemiCircleLeft = 61480,
        IAG_SemiCircleRight = 61481,
        IAG_ChevronUp = 61488,
        IAG_ChevronDown = 61489,
        IAG_ChevronLeft = 61490,
        IAG_ChevronRight = 61491,
        IAG_ArrowUp = 61496,
        IAG_ArrowDown = 61497,
        IAG_ArrowLeft = 61498,
        IAG_ArrowRight = 61499,
        IAG_Up = 61528,
        IAG_Down = 61529,
        IAG_Left = 61530,
        IAG_Right = 61531,
        IAG_UpDown = 61536,
        IAG_DownUp = 61537,
        IAG_LeftRight = 61538,
        IAG_RightLeft = 61539,
        IAG_UpLeftLong = 61540,
        IAG_UpRightLong = 61541,
        IAG_DownLeftLong = 61542,
        IAG_DownRightLong = 61543,
        IAG_UpLeft = 61544,
        IAG_UpRight = 61545,
        IAG_DownLeft = 61546,
        IAG_DownRight = 61547,
        IAG_LeftUp = 61548,
        IAG_LeftDown = 61549,
        IAG_RightUp = 61550,
        IAG_RightDown = 61551,
        IAG_Exclamation = 61604,
        IAG_Tap = 61680,
        IAG_DoubleTap = 61681,
    };
    enum class InkBoundingBoxMode : int32_t
    {
        IBBM_Default = 0,
        IBBM_NoCurveFit = 1,
        IBBM_CurveFit = 2,
        IBBM_PointsOnly = 3,
        IBBM_Union = 4,
    };
    enum class InkClipboardFormats : int32_t
    {
        ICF_None = 0,
        ICF_InkSerializedFormat = 1,
        ICF_SketchInk = 2,
        ICF_TextInk = 6,
        ICF_EnhancedMetafile = 8,
        ICF_Metafile = 32,
        ICF_Bitmap = 64,
        ICF_PasteMask = 7,
        ICF_CopyMask = 127,
        ICF_Default = 127,
    };
    enum class InkClipboardModes : int32_t
    {
        ICB_Copy = 0,
        ICB_Cut = 1,
        ICB_ExtractOnly = 48,
        ICB_DelayedCopy = 32,
        ICB_Default = 0,
    };
    enum class InkCollectionMode : int32_t
    {
        ICM_InkOnly = 0,
        ICM_GestureOnly = 1,
        ICM_InkAndGesture = 2,
    };
    enum class InkCollectorEventInterest : int32_t
    {
        ICEI_DefaultEvents = -1,
        ICEI_CursorDown = 0,
        ICEI_Stroke = 1,
        ICEI_NewPackets = 2,
        ICEI_NewInAirPackets = 3,
        ICEI_CursorButtonDown = 4,
        ICEI_CursorButtonUp = 5,
        ICEI_CursorInRange = 6,
        ICEI_CursorOutOfRange = 7,
        ICEI_SystemGesture = 8,
        ICEI_TabletAdded = 9,
        ICEI_TabletRemoved = 10,
        ICEI_MouseDown = 11,
        ICEI_MouseMove = 12,
        ICEI_MouseUp = 13,
        ICEI_MouseWheel = 14,
        ICEI_DblClick = 15,
        ICEI_AllEvents = 16,
    };
    enum class InkCursorButtonState : int32_t
    {
        ICBS_Unavailable = 0,
        ICBS_Up = 1,
        ICBS_Down = 2,
    };
    enum class InkDisplayMode : int32_t
    {
        IDM_Ink = 0,
        IDM_Text = 1,
    };
    enum class InkDivisionType : int32_t
    {
        IDT_Segment = 0,
        IDT_Line = 1,
        IDT_Paragraph = 2,
        IDT_Drawing = 3,
    };
    enum class InkEditStatus : int32_t
    {
        IES_Idle = 0,
        IES_Collecting = 1,
        IES_Recognizing = 2,
    };
    enum class InkExtractFlags : int32_t
    {
        IEF_CopyFromOriginal = 0,
        IEF_RemoveFromOriginal = 1,
        IEF_Default = 1,
    };
    enum class InkInsertMode : int32_t
    {
        IEM_InsertText = 0,
        IEM_InsertInk = 1,
    };
    enum class InkMode : int32_t
    {
        IEM_Disabled = 0,
        IEM_Ink = 1,
        IEM_InkAndGesture = 2,
    };
    enum class InkMouseButton : int32_t
    {
        IMF_Left = 1,
        IMF_Right = 2,
        IMF_Middle = 4,
    };
    enum class InkMousePointer : int32_t
    {
        IMP_Default = 0,
        IMP_Arrow = 1,
        IMP_Crosshair = 2,
        IMP_Ibeam = 3,
        IMP_SizeNESW = 4,
        IMP_SizeNS = 5,
        IMP_SizeNWSE = 6,
        IMP_SizeWE = 7,
        IMP_UpArrow = 8,
        IMP_Hourglass = 9,
        IMP_NoDrop = 10,
        IMP_ArrowHourglass = 11,
        IMP_ArrowQuestion = 12,
        IMP_SizeAll = 13,
        IMP_Hand = 14,
        IMP_Custom = 99,
    };
    enum class InkOverlayAttachMode : int32_t
    {
        IOAM_Behind = 0,
        IOAM_InFront = 1,
    };
    enum class InkOverlayEditingMode : int32_t
    {
        IOEM_Ink = 0,
        IOEM_Delete = 1,
        IOEM_Select = 2,
    };
    enum class InkOverlayEraserMode : int32_t
    {
        IOERM_StrokeErase = 0,
        IOERM_PointErase = 1,
    };
    enum class InkPenTip : int32_t
    {
        IPT_Ball = 0,
        IPT_Rectangle = 1,
    };
    enum class InkPersistenceCompressionMode : int32_t
    {
        IPCM_Default = 0,
        IPCM_MaximumCompression = 1,
        IPCM_NoCompression = 2,
    };
    enum class InkPersistenceFormat : int32_t
    {
        IPF_InkSerializedFormat = 0,
        IPF_Base64InkSerializedFormat = 1,
        IPF_GIF = 2,
        IPF_Base64GIF = 3,
    };
    enum class InkPictureSizeMode : int32_t
    {
        IPSM_AutoSize = 0,
        IPSM_CenterImage = 1,
        IPSM_Normal = 2,
        IPSM_StretchImage = 3,
    };
    enum class InkRasterOperation : int32_t
    {
        IRO_Black = 1,
        IRO_NotMergePen = 2,
        IRO_MaskNotPen = 3,
        IRO_NotCopyPen = 4,
        IRO_MaskPenNot = 5,
        IRO_Not = 6,
        IRO_XOrPen = 7,
        IRO_NotMaskPen = 8,
        IRO_MaskPen = 9,
        IRO_NotXOrPen = 10,
        IRO_NoOperation = 11,
        IRO_MergeNotPen = 12,
        IRO_CopyPen = 13,
        IRO_MergePenNot = 14,
        IRO_MergePen = 15,
        IRO_White = 16,
    };
    enum class InkRecognitionAlternatesSelection : int32_t
    {
        IRAS_Start = 0,
        IRAS_DefaultCount = 10,
        IRAS_All = -1,
    };
    enum class InkRecognitionConfidence : int32_t
    {
        IRC_Strong = 0,
        IRC_Intermediate = 1,
        IRC_Poor = 2,
    };
    enum class InkRecognitionModes : int32_t
    {
        IRM_None = 0,
        IRM_WordModeOnly = 1,
        IRM_Coerce = 2,
        IRM_TopInkBreaksOnly = 4,
        IRM_PrefixOk = 8,
        IRM_LineMode = 16,
        IRM_DisablePersonalization = 32,
        IRM_AutoSpace = 64,
        IRM_Max = 128,
    };
    enum class InkRecognitionStatus : int32_t
    {
        IRS_NoError = 0,
        IRS_Interrupted = 1,
        IRS_ProcessFailed = 2,
        IRS_InkAddedFailed = 4,
        IRS_SetAutoCompletionModeFailed = 8,
        IRS_SetStrokesFailed = 16,
        IRS_SetGuideFailed = 32,
        IRS_SetFlagsFailed = 64,
        IRS_SetFactoidFailed = 128,
        IRS_SetPrefixSuffixFailed = 256,
        IRS_SetWordListFailed = 512,
    };
    enum class InkRecognizerCapabilities : int32_t
    {
        IRC_DontCare = 1,
        IRC_Object = 2,
        IRC_FreeInput = 4,
        IRC_LinedInput = 8,
        IRC_BoxedInput = 16,
        IRC_CharacterAutoCompletionInput = 32,
        IRC_RightAndDown = 64,
        IRC_LeftAndDown = 128,
        IRC_DownAndLeft = 256,
        IRC_DownAndRight = 512,
        IRC_ArbitraryAngle = 1024,
        IRC_Lattice = 2048,
        IRC_AdviseInkChange = 4096,
        IRC_StrokeReorder = 8192,
        IRC_Personalizable = 16384,
        IRC_PrefersArbitraryAngle = 32768,
        IRC_PrefersParagraphBreaking = 65536,
        IRC_PrefersSegmentation = 131072,
        IRC_Cursive = 262144,
        IRC_TextPrediction = 524288,
        IRC_Alpha = 1048576,
        IRC_Beta = 2097152,
    };
    enum class InkRecognizerCharacterAutoCompletionMode : int32_t
    {
        IRCACM_Full = 0,
        IRCACM_Prefix = 1,
        IRCACM_Random = 2,
    };
    enum class InkSelectionConstants : int32_t
    {
        ISC_FirstElement = 0,
        ISC_AllElements = -1,
    };
    enum class InkShiftKeyModifierFlags : int32_t
    {
        IKM_Shift = 1,
        IKM_Control = 2,
        IKM_Alt = 4,
    };
    enum class InkSystemGesture : int32_t
    {
        ISG_Tap = 16,
        ISG_DoubleTap = 17,
        ISG_RightTap = 18,
        ISG_Drag = 19,
        ISG_RightDrag = 20,
        ISG_HoldEnter = 21,
        ISG_HoldLeave = 22,
        ISG_HoverEnter = 23,
        ISG_HoverLeave = 24,
        ISG_Flick = 31,
    };
    enum class InteractionMode : int32_t
    {
        InteractionMode_InPlace = 0,
        InteractionMode_Floating = 1,
        InteractionMode_DockedTop = 2,
        InteractionMode_DockedBottom = 3,
    };
    enum class KEYMODIFIER : int32_t
    {
        KEYMODIFIER_CONTROL = 1,
        KEYMODIFIER_MENU = 2,
        KEYMODIFIER_SHIFT = 4,
        KEYMODIFIER_WIN = 8,
        KEYMODIFIER_ALTGR = 16,
        KEYMODIFIER_EXT = 32,
    };
    enum class LINE_METRICS : int32_t
    {
        LM_BASELINE = 0,
        LM_MIDLINE = 1,
        LM_ASCENDER = 2,
        LM_DESCENDER = 3,
    };
    enum class MICUIELEMENT : int32_t
    {
        MICUIELEMENT_BUTTON_WRITE = 1,
        MICUIELEMENT_BUTTON_ERASE = 2,
        MICUIELEMENT_BUTTON_CORRECT = 4,
        MICUIELEMENT_BUTTON_CLEAR = 8,
        MICUIELEMENT_BUTTON_UNDO = 16,
        MICUIELEMENT_BUTTON_REDO = 32,
        MICUIELEMENT_BUTTON_INSERT = 64,
        MICUIELEMENT_BUTTON_CANCEL = 128,
        MICUIELEMENT_INKPANEL_BACKGROUND = 256,
        MICUIELEMENT_RESULTPANEL_BACKGROUND = 512,
    };
    enum class MICUIELEMENTSTATE : int32_t
    {
        MICUIELEMENTSTATE_NORMAL = 1,
        MICUIELEMENTSTATE_HOT = 2,
        MICUIELEMENTSTATE_PRESSED = 3,
        MICUIELEMENTSTATE_DISABLED = 4,
    };
    enum class MouseButton : int32_t
    {
        NO_BUTTON = 0,
        LEFT_BUTTON = 1,
        RIGHT_BUTTON = 2,
        MIDDLE_BUTTON = 4,
    };
    enum class PROPERTY_UNITS : int32_t
    {
        PROPERTY_UNITS_DEFAULT = 0,
        PROPERTY_UNITS_INCHES = 1,
        PROPERTY_UNITS_CENTIMETERS = 2,
        PROPERTY_UNITS_DEGREES = 3,
        PROPERTY_UNITS_RADIANS = 4,
        PROPERTY_UNITS_SECONDS = 5,
        PROPERTY_UNITS_POUNDS = 6,
        PROPERTY_UNITS_GRAMS = 7,
        PROPERTY_UNITS_SILINEAR = 8,
        PROPERTY_UNITS_SIROTATION = 9,
        PROPERTY_UNITS_ENGLINEAR = 10,
        PROPERTY_UNITS_ENGROTATION = 11,
        PROPERTY_UNITS_SLUGS = 12,
        PROPERTY_UNITS_KELVIN = 13,
        PROPERTY_UNITS_FAHRENHEIT = 14,
        PROPERTY_UNITS_AMPERE = 15,
        PROPERTY_UNITS_CANDELA = 16,
    };
    enum class PanelInputArea : int32_t
    {
        PanelInputArea_Auto = 0,
        PanelInputArea_Keyboard = 1,
        PanelInputArea_WritingPad = 2,
        PanelInputArea_CharacterPad = 3,
    };
    enum class PanelType : int32_t
    {
        PT_Default = 0,
        PT_Inactive = 1,
        PT_Handwriting = 2,
        PT_Keyboard = 3,
    };
    enum class RealTimeStylusDataInterest : int32_t
    {
        RTSDI_AllData = -1,
        RTSDI_None = 0,
        RTSDI_Error = 1,
        RTSDI_RealTimeStylusEnabled = 2,
        RTSDI_RealTimeStylusDisabled = 4,
        RTSDI_StylusNew = 8,
        RTSDI_StylusInRange = 16,
        RTSDI_InAirPackets = 32,
        RTSDI_StylusOutOfRange = 64,
        RTSDI_StylusDown = 128,
        RTSDI_Packets = 256,
        RTSDI_StylusUp = 512,
        RTSDI_StylusButtonUp = 1024,
        RTSDI_StylusButtonDown = 2048,
        RTSDI_SystemEvents = 4096,
        RTSDI_TabletAdded = 8192,
        RTSDI_TabletRemoved = 16384,
        RTSDI_CustomStylusDataAdded = 32768,
        RTSDI_UpdateMapping = 65536,
        RTSDI_DefaultEvents = 37766,
    };
    enum class RealTimeStylusLockType : int32_t
    {
        RTSLT_ObjLock = 1,
        RTSLT_SyncEventLock = 2,
        RTSLT_AsyncEventLock = 4,
        RTSLT_ExcludeCallback = 8,
        RTSLT_SyncObjLock = 11,
        RTSLT_AsyncObjLock = 13,
    };
    enum class SCROLLDIRECTION : int32_t
    {
        SCROLLDIRECTION_UP = 0,
        SCROLLDIRECTION_DOWN = 1,
    };
    enum class ScrollBarsConstants : int32_t
    {
        rtfNone = 0,
        rtfHorizontal = 1,
        rtfVertical = 2,
        rtfBoth = 3,
    };
    enum class SelAlignmentConstants : int32_t
    {
        rtfLeft = 0,
        rtfRight = 1,
        rtfCenter = 2,
    };
    enum class SelectionHitResult : int32_t
    {
        SHR_None = 0,
        SHR_NW = 1,
        SHR_SE = 2,
        SHR_NE = 3,
        SHR_SW = 4,
        SHR_E = 5,
        SHR_W = 6,
        SHR_N = 7,
        SHR_S = 8,
        SHR_Selection = 9,
    };
    enum class StylusQueue : int32_t
    {
        SyncStylusQueue = 1,
        AsyncStylusQueueImmediate = 2,
        AsyncStylusQueue = 3,
    };
    enum class TabletDeviceKind : int32_t
    {
        TDK_Mouse = 0,
        TDK_Pen = 1,
        TDK_Touch = 2,
    };
    enum class TabletHardwareCapabilities : int32_t
    {
        THWC_Integrated = 1,
        THWC_CursorMustTouch = 2,
        THWC_HardProximity = 4,
        THWC_CursorsHavePhysicalIds = 8,
    };
    enum class TabletPropertyMetricUnit : int32_t
    {
        TPMU_Default = 0,
        TPMU_Inches = 1,
        TPMU_Centimeters = 2,
        TPMU_Degrees = 3,
        TPMU_Radians = 4,
        TPMU_Seconds = 5,
        TPMU_Pounds = 6,
        TPMU_Grams = 7,
    };
    enum class VisualState : int32_t
    {
        InPlace = 0,
        Floating = 1,
        DockedTop = 2,
        DockedBottom = 3,
        Closed = 4,
    };
    enum class enumGetCandidateFlags : int32_t
    {
        TCF_ALLOW_RECOGNITION = 1,
        TCF_FORCE_RECOGNITION = 2,
    };
    enum class enumINKMETRIC_FLAGS : int32_t
    {
        IMF_FONT_SELECTED_IN_HDC = 1,
        IMF_ITALIC = 2,
        IMF_BOLD = 4,
    };
    enum class enumRECO_TYPE : int32_t
    {
        RECO_TYPE_WSTRING = 0,
        RECO_TYPE_WCHAR = 1,
    };
#pragma endregion enums

#pragma region forward_declarations
    struct CHARACTER_RANGE;
    struct DYNAMIC_RENDERER_CACHED_DATA;
    struct FLICK_DATA;
    struct FLICK_POINT;
    struct GESTURE_DATA;
    struct HRECOALT__;
    struct HRECOCONTEXT__;
    struct HRECOGNIZER__;
    struct HRECOLATTICE__;
    struct HRECOWORDLIST__;
    struct IEC_GESTUREINFO;
    struct IEC_RECOGNITIONRESULTINFO;
    struct IEC_STROKEINFO;
    struct INKMETRIC;
    struct InkRecoGuide;
    struct LATTICE_METRICS;
    struct LINE_SEGMENT;
    struct PACKET_DESCRIPTION;
    struct PACKET_PROPERTY;
    struct PROPERTY_METRICS;
    struct RECO_ATTRS;
    struct RECO_GUIDE;
    struct RECO_LATTICE;
    struct RECO_LATTICE_COLUMN;
    struct RECO_LATTICE_ELEMENT;
    struct RECO_LATTICE_PROPERTIES;
    struct RECO_LATTICE_PROPERTY;
    struct RECO_RANGE;
    struct STROKE_RANGE;
    struct SYSTEM_EVENT_DATA;
    struct StylusInfo;
    struct DynamicRenderer;
    struct GestureRecognizer;
    struct HandwrittenTextInsertion;
    struct IDynamicRenderer;
    struct IGestureRecognizer;
    struct IHandwrittenTextInsertion;
    struct IInk;
    struct IInkCollector;
    struct IInkCursor;
    struct IInkCursorButton;
    struct IInkCursorButtons;
    struct IInkCursors;
    struct IInkCustomStrokes;
    struct IInkDisp;
    struct IInkDivider;
    struct IInkDivisionResult;
    struct IInkDivisionUnit;
    struct IInkDivisionUnits;
    struct IInkDrawingAttributes;
    struct IInkEdit;
    struct IInkExtendedProperties;
    struct IInkExtendedProperty;
    struct IInkGesture;
    struct IInkLineInfo;
    struct IInkOverlay;
    struct IInkPicture;
    struct IInkRecognitionAlternate;
    struct IInkRecognitionAlternates;
    struct IInkRecognitionResult;
    struct IInkRecognizer;
    struct IInkRecognizer2;
    struct IInkRecognizerContext;
    struct IInkRecognizerContext2;
    struct IInkRecognizerGuide;
    struct IInkRecognizers;
    struct IInkRectangle;
    struct IInkRenderer;
    struct IInkStrokeDisp;
    struct IInkStrokes;
    struct IInkTablet;
    struct IInkTablet2;
    struct IInkTablet3;
    struct IInkTablets;
    struct IInkTransform;
    struct IInkWordList;
    struct IInkWordList2;
    struct IInputPanelWindowHandle;
    struct IMathInputControl;
    struct IPenInputPanel;
    struct IRealTimeStylus;
    struct IRealTimeStylus2;
    struct IRealTimeStylus3;
    struct IRealTimeStylusSynchronization;
    struct ISketchInk;
    struct IStrokeBuilder;
    struct IStylusAsyncPlugin;
    struct IStylusPlugin;
    struct IStylusSyncPlugin;
    struct ITextInputPanel;
    struct ITextInputPanelEventSink;
    struct ITextInputPanelRunInfo;
    struct ITipAutoCompleteClient;
    struct ITipAutoCompleteProvider;
    struct Ink;
    struct InkCollector;
    struct InkDisp;
    struct InkDivider;
    struct InkDrawingAttributes;
    struct InkEdit;
    struct InkOverlay;
    struct InkPicture;
    struct InkRecognizerContext;
    struct InkRecognizerGuide;
    struct InkRecognizers;
    struct InkRectangle;
    struct InkRenderer;
    struct InkStrokes;
    struct InkTablets;
    struct InkTransform;
    struct InkWordList;
    struct MathInputControl;
    struct PenInputPanel;
    struct PenInputPanel_Internal;
    struct RealTimeStylus;
    struct SketchInk;
    struct StrokeBuilder;
    struct TextInputPanel;
    struct TipAutoCompleteClient;
    struct _IInkCollectorEvents;
    struct _IInkEditEvents;
    struct _IInkEvents;
    struct _IInkOverlayEvents;
    struct _IInkPictureEvents;
    struct _IInkRecognitionEvents;
    struct _IInkStrokesEvents;
    struct _IMathInputControlEvents;
    struct _IPenInputPanelEvents;
#pragma endregion forward_declarations

#pragma region delegates
    using PfnRecoCallback = int32_t __stdcall(uint32_t, uint8_t*, Windows::Win32::TabletPC::HRECOCONTEXT__*);
#pragma endregion delegates

}
namespace win32::_impl_
{
#pragma region guids
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::DynamicRenderer>{ 0xECD32AEA,0x746F,0x4DCB,{ 0xBF,0x68,0x08,0x27,0x57,0xFA,0xFF,0x18 } }; // ECD32AEA-746F-4DCB-BF68-082757FAFF18
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::GestureRecognizer>{ 0xEA30C654,0xC62C,0x441F,{ 0xAC,0x00,0x95,0xF9,0xA1,0x96,0x78,0x2C } }; // EA30C654-C62C-441F-AC00-95F9A196782C
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::HandwrittenTextInsertion>{ 0x9F074EE2,0xE6E9,0x4D8A,{ 0xA0,0x47,0xEB,0x5B,0x5C,0x3C,0x55,0xDA } }; // 9F074EE2-E6E9-4D8A-A047-EB5B5C3C55DA
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::IDynamicRenderer>{ 0xA079468E,0x7165,0x46F9,{ 0xB7,0xAF,0x98,0xAD,0x01,0xA9,0x30,0x09 } }; // A079468E-7165-46F9-B7AF-98AD01A93009
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::IGestureRecognizer>{ 0xAE9EF86B,0x7054,0x45E3,{ 0xAE,0x22,0x31,0x74,0xDC,0x88,0x11,0xB7 } }; // AE9EF86B-7054-45E3-AE22-3174DC8811B7
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::IHandwrittenTextInsertion>{ 0x56FDEA97,0xECD6,0x43E7,{ 0xAA,0x3A,0x81,0x6B,0xE7,0x78,0x58,0x60 } }; // 56FDEA97-ECD6-43E7-AA3A-816BE7785860
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::IInk>{ 0x03F8E511,0x43A1,0x11D3,{ 0x8B,0xB6,0x00,0x80,0xC7,0xD6,0xBA,0xD5 } }; // 03F8E511-43A1-11D3-8BB6-0080C7D6BAD5
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::IInkCollector>{ 0xF0F060B5,0x8B1F,0x4A7C,{ 0x89,0xEC,0x88,0x06,0x92,0x58,0x8A,0x4F } }; // F0F060B5-8B1F-4A7C-89EC-880692588A4F
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::IInkCursor>{ 0xAD30C630,0x40C5,0x4350,{ 0x84,0x05,0x9C,0x71,0x01,0x2F,0xC5,0x58 } }; // AD30C630-40C5-4350-8405-9C71012FC558
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::IInkCursorButton>{ 0x85EF9417,0x1D59,0x49B2,{ 0xA1,0x3C,0x70,0x2C,0x85,0x43,0x08,0x94 } }; // 85EF9417-1D59-49B2-A13C-702C85430894
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::IInkCursorButtons>{ 0x3671CC40,0xB624,0x4671,{ 0x9F,0xA0,0xDB,0x11,0x9D,0x95,0x2D,0x54 } }; // 3671CC40-B624-4671-9FA0-DB119D952D54
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::IInkCursors>{ 0xA248C1AC,0xC698,0x4E06,{ 0x9E,0x5C,0xD5,0x7F,0x77,0xC7,0xE6,0x47 } }; // A248C1AC-C698-4E06-9E5C-D57F77C7E647
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::IInkCustomStrokes>{ 0x7E23A88F,0xC30E,0x420F,{ 0x9B,0xDB,0x28,0x90,0x25,0x43,0xF0,0xC1 } }; // 7E23A88F-C30E-420F-9BDB-28902543F0C1
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::IInkDisp>{ 0x9D398FA0,0xC4E2,0x4FCD,{ 0x99,0x73,0x97,0x5C,0xAA,0xF4,0x7E,0xA6 } }; // 9D398FA0-C4E2-4FCD-9973-975CAAF47EA6
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::IInkDivider>{ 0x5DE00405,0xF9A4,0x4651,{ 0xB0,0xC5,0xC3,0x17,0xDE,0xFD,0x58,0xB9 } }; // 5DE00405-F9A4-4651-B0C5-C317DEFD58B9
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::IInkDivisionResult>{ 0x2DBEC0A7,0x74C7,0x4B38,{ 0x81,0xEB,0xAA,0x8E,0xF0,0xC2,0x49,0x00 } }; // 2DBEC0A7-74C7-4B38-81EB-AA8EF0C24900
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::IInkDivisionUnit>{ 0x85AEE342,0x48B0,0x4244,{ 0x9D,0xD5,0x1E,0xD4,0x35,0x41,0x0F,0xAB } }; // 85AEE342-48B0-4244-9DD5-1ED435410FAB
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::IInkDivisionUnits>{ 0x1BB5DDC2,0x31CC,0x4135,{ 0xAB,0x82,0x2C,0x66,0xC9,0xF0,0x0C,0x41 } }; // 1BB5DDC2-31CC-4135-AB82-2C66C9F00C41
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::IInkDrawingAttributes>{ 0xBF519B75,0x0A15,0x4623,{ 0xAD,0xC9,0xC0,0x0D,0x43,0x6A,0x80,0x92 } }; // BF519B75-0A15-4623-ADC9-C00D436A8092
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::IInkEdit>{ 0xF2127A19,0xFBFB,0x4AED,{ 0x84,0x64,0x3F,0x36,0xD7,0x8C,0xFE,0xFB } }; // F2127A19-FBFB-4AED-8464-3F36D78CFEFB
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::IInkExtendedProperties>{ 0x89F2A8BE,0x95A9,0x4530,{ 0x8B,0x8F,0x88,0xE9,0x71,0xE3,0xE2,0x5F } }; // 89F2A8BE-95A9-4530-8B8F-88E971E3E25F
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::IInkExtendedProperty>{ 0xDB489209,0xB7C3,0x411D,{ 0x90,0xF6,0x15,0x48,0xCF,0xFF,0x27,0x1E } }; // DB489209-B7C3-411D-90F6-1548CFFF271E
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::IInkGesture>{ 0x3BDC0A97,0x04E5,0x4E26,{ 0xB8,0x13,0x18,0xF0,0x52,0xD4,0x1D,0xEF } }; // 3BDC0A97-04E5-4E26-B813-18F052D41DEF
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::IInkLineInfo>{ 0x9C1C5AD6,0xF22F,0x4DE4,{ 0xB4,0x53,0xA2,0xCC,0x48,0x2E,0x7C,0x33 } }; // 9C1C5AD6-F22F-4DE4-B453-A2CC482E7C33
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::IInkOverlay>{ 0xB82A463B,0xC1C5,0x45A3,{ 0x99,0x7C,0xDE,0xAB,0x56,0x51,0xB6,0x7A } }; // B82A463B-C1C5-45A3-997C-DEAB5651B67A
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::IInkPicture>{ 0xE85662E0,0x379A,0x40D7,{ 0x9B,0x5C,0x75,0x7D,0x23,0x3F,0x99,0x23 } }; // E85662E0-379A-40D7-9B5C-757D233F9923
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::IInkRecognitionAlternate>{ 0xB7E660AD,0x77E4,0x429B,{ 0xAD,0xDA,0x87,0x37,0x80,0xD1,0xFC,0x4A } }; // B7E660AD-77E4-429B-ADDA-873780D1FC4A
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::IInkRecognitionAlternates>{ 0x286A167F,0x9F19,0x4C61,{ 0x9D,0x53,0x4F,0x07,0xBE,0x62,0x2B,0x84 } }; // 286A167F-9F19-4C61-9D53-4F07BE622B84
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::IInkRecognitionResult>{ 0x3BC129A8,0x86CD,0x45AD,{ 0xBD,0xE8,0xE0,0xD3,0x2D,0x61,0xC1,0x6D } }; // 3BC129A8-86CD-45AD-BDE8-E0D32D61C16D
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::IInkRecognizer>{ 0x782BF7CF,0x034B,0x4396,{ 0x8A,0x32,0x3A,0x18,0x33,0xCF,0x6B,0x56 } }; // 782BF7CF-034B-4396-8A32-3A1833CF6B56
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::IInkRecognizer2>{ 0x6110118A,0x3A75,0x4AD6,{ 0xB2,0xAA,0x04,0xB2,0xB7,0x2B,0xBE,0x65 } }; // 6110118A-3A75-4AD6-B2AA-04B2B72BBE65
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::IInkRecognizerContext>{ 0xC68F52F9,0x32A3,0x4625,{ 0x90,0x6C,0x44,0xFC,0x23,0xB4,0x09,0x58 } }; // C68F52F9-32A3-4625-906C-44FC23B40958
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::IInkRecognizerContext2>{ 0xD6F0E32F,0x73D8,0x408E,{ 0x8E,0x9F,0x5F,0xEA,0x59,0x2C,0x36,0x3F } }; // D6F0E32F-73D8-408E-8E9F-5FEA592C363F
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::IInkRecognizerGuide>{ 0xD934BE07,0x7B84,0x4208,{ 0x91,0x36,0x83,0xC2,0x09,0x94,0xE9,0x05 } }; // D934BE07-7B84-4208-9136-83C20994E905
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::IInkRecognizers>{ 0x9CCC4F12,0xB0B7,0x4A8B,{ 0xBF,0x58,0x4A,0xEC,0xA4,0xE8,0xCE,0xFD } }; // 9CCC4F12-B0B7-4A8B-BF58-4AECA4E8CEFD
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::IInkRectangle>{ 0x9794FF82,0x6071,0x4717,{ 0x8A,0x8B,0x6A,0xC7,0xC6,0x4A,0x68,0x6E } }; // 9794FF82-6071-4717-8A8B-6AC7C64A686E
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::IInkRenderer>{ 0xE6257A9C,0xB511,0x4F4C,{ 0xA8,0xB0,0xA7,0xDB,0xC9,0x50,0x6B,0x83 } }; // E6257A9C-B511-4F4C-A8B0-A7DBC9506B83
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::IInkStrokeDisp>{ 0x43242FEA,0x91D1,0x4A72,{ 0x96,0x3E,0xFB,0xB9,0x18,0x29,0xCF,0xA2 } }; // 43242FEA-91D1-4A72-963E-FBB91829CFA2
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::IInkStrokes>{ 0xF1F4C9D8,0x590A,0x4963,{ 0xB3,0xAE,0x19,0x35,0x67,0x1B,0xB6,0xF3 } }; // F1F4C9D8-590A-4963-B3AE-1935671BB6F3
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::IInkTablet>{ 0x2DE25EAA,0x6EF8,0x42D5,{ 0xAE,0xE9,0x18,0x5B,0xC8,0x1B,0x91,0x2D } }; // 2DE25EAA-6EF8-42D5-AEE9-185BC81B912D
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::IInkTablet2>{ 0x90C91AD2,0xFA36,0x49D6,{ 0x95,0x16,0xCE,0x8D,0x57,0x0F,0x6F,0x85 } }; // 90C91AD2-FA36-49D6-9516-CE8D570F6F85
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::IInkTablet3>{ 0x7E313997,0x1327,0x41DD,{ 0x8C,0xA9,0x79,0xF2,0x4B,0xE1,0x72,0x50 } }; // 7E313997-1327-41DD-8CA9-79F24BE17250
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::IInkTablets>{ 0x112086D9,0x7779,0x4535,{ 0xA6,0x99,0x86,0x2B,0x43,0xAC,0x18,0x63 } }; // 112086D9-7779-4535-A699-862B43AC1863
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::IInkTransform>{ 0x615F1D43,0x8703,0x4565,{ 0x88,0xE2,0x82,0x01,0xD2,0xEC,0xD7,0xB7 } }; // 615F1D43-8703-4565-88E2-8201D2ECD7B7
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::IInkWordList>{ 0x76BA3491,0xCB2F,0x406B,{ 0x99,0x61,0x0E,0x0C,0x4C,0xDA,0xAE,0xF2 } }; // 76BA3491-CB2F-406B-9961-0E0C4CDAAEF2
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::IInkWordList2>{ 0x14542586,0x11BF,0x4F5F,{ 0xB6,0xE7,0x49,0xD0,0x74,0x4A,0xAB,0x6E } }; // 14542586-11BF-4F5F-B6E7-49D0744AAB6E
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::IInputPanelWindowHandle>{ 0x4AF81847,0xFDC4,0x4FC3,{ 0xAD,0x0B,0x42,0x24,0x79,0xC1,0xB9,0x35 } }; // 4AF81847-FDC4-4FC3-AD0B-422479C1B935
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::IMathInputControl>{ 0xEBA615AA,0xFAC6,0x4738,{ 0xBA,0x5F,0xFF,0x09,0xE9,0xFE,0x47,0x3E } }; // EBA615AA-FAC6-4738-BA5F-FF09E9FE473E
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::IPenInputPanel>{ 0xFA7A4083,0x5747,0x4040,{ 0xA1,0x82,0x0B,0x0E,0x9F,0xD4,0xFA,0xC7 } }; // FA7A4083-5747-4040-A182-0B0E9FD4FAC7
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::IRealTimeStylus>{ 0xA8BB5D22,0x3144,0x4A7B,{ 0x93,0xCD,0xF3,0x4A,0x16,0xBE,0x51,0x3A } }; // A8BB5D22-3144-4A7B-93CD-F34A16BE513A
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::IRealTimeStylus2>{ 0xB5F2A6CD,0x3179,0x4A3E,{ 0xB9,0xC4,0xBB,0x58,0x65,0x96,0x2B,0xE2 } }; // B5F2A6CD-3179-4A3E-B9C4-BB5865962BE2
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::IRealTimeStylus3>{ 0xD70230A3,0x6986,0x4051,{ 0xB5,0x7A,0x1C,0xF6,0x9F,0x4D,0x9D,0xB5 } }; // D70230A3-6986-4051-B57A-1CF69F4D9DB5
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::IRealTimeStylusSynchronization>{ 0xAA87EAB8,0xAB4A,0x4CEA,{ 0xB5,0xCB,0x46,0xD8,0x4C,0x6A,0x25,0x09 } }; // AA87EAB8-AB4A-4CEA-B5CB-46D84C6A2509
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::ISketchInk>{ 0xB4563688,0x98EB,0x4646,{ 0xB2,0x79,0x44,0xDA,0x14,0xD4,0x57,0x48 } }; // B4563688-98EB-4646-B279-44DA14D45748
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::IStrokeBuilder>{ 0xA5FD4E2D,0xC44B,0x4092,{ 0x91,0x77,0x26,0x09,0x05,0xEB,0x67,0x2B } }; // A5FD4E2D-C44B-4092-9177-260905EB672B
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::IStylusAsyncPlugin>{ 0xA7CCA85A,0x31BC,0x4CD2,{ 0xAA,0xDC,0x32,0x89,0xA3,0xAF,0x11,0xC8 } }; // A7CCA85A-31BC-4CD2-AADC-3289A3AF11C8
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::IStylusPlugin>{ 0xA81436D8,0x4757,0x4FD1,{ 0xA1,0x85,0x13,0x3F,0x97,0xC6,0xC5,0x45 } }; // A81436D8-4757-4FD1-A185-133F97C6C545
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::IStylusSyncPlugin>{ 0xA157B174,0x482F,0x4D71,{ 0xA3,0xF6,0x3A,0x41,0xDD,0xD1,0x1B,0xE9 } }; // A157B174-482F-4D71-A3F6-3A41DDD11BE9
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::ITextInputPanel>{ 0x6B6A65A5,0x6AF3,0x46C2,{ 0xB6,0xEA,0x56,0xCD,0x1F,0x80,0xDF,0x71 } }; // 6B6A65A5-6AF3-46C2-B6EA-56CD1F80DF71
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::ITextInputPanelEventSink>{ 0x27560408,0x8E64,0x4FE1,{ 0x80,0x4E,0x42,0x12,0x01,0x58,0x4B,0x31 } }; // 27560408-8E64-4FE1-804E-421201584B31
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::ITextInputPanelRunInfo>{ 0x9F424568,0x1920,0x48CC,{ 0x98,0x11,0xA9,0x93,0xCB,0xF5,0xAD,0xBA } }; // 9F424568-1920-48CC-9811-A993CBF5ADBA
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::ITipAutoCompleteClient>{ 0x5E078E03,0x8265,0x4BBE,{ 0x94,0x87,0xD2,0x42,0xED,0xBE,0xF9,0x10 } }; // 5E078E03-8265-4BBE-9487-D242EDBEF910
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::ITipAutoCompleteProvider>{ 0x7C6CF46D,0x8404,0x46B9,{ 0xAD,0x33,0xF5,0xB6,0x03,0x6D,0x40,0x07 } }; // 7C6CF46D-8404-46B9-AD33-F5B6036D4007
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::Ink>{ 0x13DE4A42,0x8D21,0x4C8E,{ 0xBF,0x9C,0x8F,0x69,0xCB,0x06,0x8F,0xCA } }; // 13DE4A42-8D21-4C8E-BF9C-8F69CB068FCA
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::InkCollector>{ 0x43FB1553,0xAD74,0x4EE8,{ 0x88,0xE4,0x3E,0x6D,0xAA,0xC9,0x15,0xDB } }; // 43FB1553-AD74-4EE8-88E4-3E6DAAC915DB
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::InkDisp>{ 0x937C1A34,0x151D,0x4610,{ 0x9C,0xA6,0xA8,0xCC,0x9B,0xDB,0x5D,0x83 } }; // 937C1A34-151D-4610-9CA6-A8CC9BDB5D83
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::InkDivider>{ 0x8854F6A0,0x4683,0x4AE7,{ 0x91,0x91,0x75,0x2F,0xE6,0x46,0x12,0xC3 } }; // 8854F6A0-4683-4AE7-9191-752FE64612C3
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::InkDrawingAttributes>{ 0xD8BF32A2,0x05A5,0x44C3,{ 0xB3,0xAA,0x5E,0x80,0xAC,0x7D,0x25,0x76 } }; // D8BF32A2-05A5-44C3-B3AA-5E80AC7D2576
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::InkEdit>{ 0xE5CA59F5,0x57C4,0x4DD8,{ 0x9B,0xD6,0x1D,0xEE,0xED,0xD2,0x7A,0xF4 } }; // E5CA59F5-57C4-4DD8-9BD6-1DEEEDD27AF4
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::InkOverlay>{ 0x65D00646,0xCDE3,0x4A88,{ 0x91,0x63,0x67,0x69,0xF0,0xF1,0xA9,0x7D } }; // 65D00646-CDE3-4A88-9163-6769F0F1A97D
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::InkPicture>{ 0x04A1E553,0xFE36,0x4FDE,{ 0x86,0x5E,0x34,0x41,0x94,0xE6,0x94,0x24 } }; // 04A1E553-FE36-4FDE-865E-344194E69424
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::InkRecognizerContext>{ 0xAAC46A37,0x9229,0x4FC0,{ 0x8C,0xCE,0x44,0x97,0x56,0x9B,0xF4,0xD1 } }; // AAC46A37-9229-4FC0-8CCE-4497569BF4D1
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::InkRecognizerGuide>{ 0x8770D941,0xA63A,0x4671,{ 0xA3,0x75,0x28,0x55,0xA1,0x8E,0xBA,0x73 } }; // 8770D941-A63A-4671-A375-2855A18EBA73
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::InkRecognizers>{ 0x9FD4E808,0xF6E6,0x4E65,{ 0x98,0xD3,0xAA,0x39,0x05,0x4C,0x12,0x55 } }; // 9FD4E808-F6E6-4E65-98D3-AA39054C1255
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::InkRectangle>{ 0x43B07326,0xAAE0,0x4B62,{ 0xA8,0x3D,0x5F,0xD7,0x68,0xB7,0x35,0x3C } }; // 43B07326-AAE0-4B62-A83D-5FD768B7353C
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::InkRenderer>{ 0x9C1CC6E4,0xD7EB,0x4EEB,{ 0x90,0x91,0x15,0xA7,0xC8,0x79,0x1E,0xD9 } }; // 9C1CC6E4-D7EB-4EEB-9091-15A7C8791ED9
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::InkStrokes>{ 0x48F491BC,0x240E,0x4860,{ 0xB0,0x79,0xA1,0xE9,0x4D,0x3D,0x2C,0x86 } }; // 48F491BC-240E-4860-B079-A1E94D3D2C86
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::InkTablets>{ 0x6E4FCB12,0x510A,0x4D40,{ 0x93,0x04,0x1D,0xA1,0x0A,0xE9,0x14,0x7C } }; // 6E4FCB12-510A-4D40-9304-1DA10AE9147C
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::InkTransform>{ 0xE3D5D93C,0x1663,0x4A78,{ 0xA1,0xA7,0x22,0x37,0x5D,0xFE,0xBA,0xEE } }; // E3D5D93C-1663-4A78-A1A7-22375DFEBAEE
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::InkWordList>{ 0x9DE85094,0xF71F,0x44F1,{ 0x84,0x71,0x15,0xA2,0xFA,0x76,0xFC,0xF3 } }; // 9DE85094-F71F-44F1-8471-15A2FA76FCF3
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::MathInputControl>{ 0xC561816C,0x14D8,0x4090,{ 0x83,0x0C,0x98,0xD9,0x94,0xB2,0x1C,0x7B } }; // C561816C-14D8-4090-830C-98D994B21C7B
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::PenInputPanel>{ 0xF744E496,0x1B5A,0x489E,{ 0x81,0xDC,0xFB,0xD7,0xAC,0x62,0x98,0xA8 } }; // F744E496-1B5A-489E-81DC-FBD7AC6298A8
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::PenInputPanel_Internal>{ 0x802B1FB9,0x056B,0x4720,{ 0xB0,0xCC,0x80,0xD2,0x3B,0x71,0x17,0x1E } }; // 802B1FB9-056B-4720-B0CC-80D23B71171E
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::RealTimeStylus>{ 0xE26B366D,0xF998,0x43CE,{ 0x83,0x6F,0xCB,0x6D,0x90,0x44,0x32,0xB0 } }; // E26B366D-F998-43CE-836F-CB6D904432B0
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::SketchInk>{ 0xF0291081,0xE87C,0x4E07,{ 0x97,0xDA,0xA0,0xA0,0x37,0x61,0xE5,0x86 } }; // F0291081-E87C-4E07-97DA-A0A03761E586
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::StrokeBuilder>{ 0xE810CEE7,0x6E51,0x4CB0,{ 0xAA,0x3A,0x0B,0x98,0x5B,0x70,0xDA,0xF7 } }; // E810CEE7-6E51-4CB0-AA3A-0B985B70DAF7
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::TextInputPanel>{ 0xF9B189D7,0x228B,0x4F2B,{ 0x86,0x50,0xB9,0x7F,0x59,0xE0,0x2C,0x8C } }; // F9B189D7-228B-4F2B-8650-B97F59E02C8C
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::TipAutoCompleteClient>{ 0x807C1E6C,0x1D00,0x453F,{ 0xB9,0x20,0xB6,0x1B,0xB7,0xCD,0xD9,0x97 } }; // 807C1E6C-1D00-453F-B920-B61BB7CDD997
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::_IInkCollectorEvents>{ 0x11A583F2,0x712D,0x4FEA,{ 0xAB,0xCF,0xAB,0x4A,0xF3,0x8E,0xA0,0x6B } }; // 11A583F2-712D-4FEA-ABCF-AB4AF38EA06B
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::_IInkEditEvents>{ 0xE3B0B797,0xA72E,0x46DB,{ 0xA0,0xD7,0x6C,0x9E,0xBA,0x8E,0x9B,0xBC } }; // E3B0B797-A72E-46DB-A0D7-6C9EBA8E9BBC
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::_IInkEvents>{ 0x427B1865,0xCA3F,0x479A,{ 0x83,0xA9,0x0F,0x42,0x0F,0x2A,0x00,0x73 } }; // 427B1865-CA3F-479A-83A9-0F420F2A0073
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::_IInkOverlayEvents>{ 0x31179B69,0xE563,0x489E,{ 0xB1,0x6F,0x71,0x2F,0x1E,0x8A,0x06,0x51 } }; // 31179B69-E563-489E-B16F-712F1E8A0651
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::_IInkPictureEvents>{ 0x60FF4FEE,0x22FF,0x4484,{ 0xAC,0xC1,0xD3,0x08,0xD9,0xCD,0x7E,0xA3 } }; // 60FF4FEE-22FF-4484-ACC1-D308D9CD7EA3
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::_IInkRecognitionEvents>{ 0x17BCE92F,0x2E21,0x47FD,{ 0x9D,0x33,0x3C,0x6A,0xFB,0xFD,0x8C,0x59 } }; // 17BCE92F-2E21-47FD-9D33-3C6AFBFD8C59
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::_IInkStrokesEvents>{ 0xF33053EC,0x5D25,0x430A,{ 0x92,0x8F,0x76,0xA6,0x49,0x1D,0xDE,0x15 } }; // F33053EC-5D25-430A-928F-76A6491DDE15
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::_IMathInputControlEvents>{ 0x683336B5,0xA47D,0x4358,{ 0x96,0xF9,0x87,0x5A,0x47,0x2A,0xE7,0x0A } }; // 683336B5-A47D-4358-96F9-875A472AE70A
    template <> inline constexpr guid guid_v<Windows::Win32::TabletPC::_IPenInputPanelEvents>{ 0xB7E489DA,0x3719,0x439F,{ 0x84,0x8F,0xE7,0xAC,0xBD,0x82,0x0F,0x17 } }; // B7E489DA-3719-439F-848F-E7ACBD820F17
#pragma endregion guids

}
#endif
