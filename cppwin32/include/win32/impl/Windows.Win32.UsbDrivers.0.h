// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_UsbDrivers_0_H
#define WIN32_Windows_Win32_UsbDrivers_0_H
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
#pragma region enums
    enum class USBD_ENDPOINT_OFFLOAD_MODE : int32_t
    {
        UsbdEndpointOffloadModeNotSupported = 0,
        UsbdEndpointOffloadSoftwareAssisted = 1,
        UsbdEndpointOffloadHardwareAssisted = 2,
    };
    enum class USBD_PIPE_TYPE : int32_t
    {
        UsbdPipeTypeControl = 0,
        UsbdPipeTypeIsochronous = 1,
        UsbdPipeTypeBulk = 2,
        UsbdPipeTypeInterrupt = 3,
    };
    enum class USB_CONTROLLER_FLAVOR : int32_t
    {
        USB_HcGeneric = 0,
        OHCI_Generic = 100,
        OHCI_Hydra = 101,
        OHCI_NEC = 102,
        UHCI_Generic = 200,
        UHCI_Piix4 = 201,
        UHCI_Piix3 = 202,
        UHCI_Ich2 = 203,
        UHCI_Reserved204 = 204,
        UHCI_Ich1 = 205,
        UHCI_Ich3m = 206,
        UHCI_Ich4 = 207,
        UHCI_Ich5 = 208,
        UHCI_Ich6 = 209,
        UHCI_Intel = 249,
        UHCI_VIA = 250,
        UHCI_VIA_x01 = 251,
        UHCI_VIA_x02 = 252,
        UHCI_VIA_x03 = 253,
        UHCI_VIA_x04 = 254,
        UHCI_VIA_x0E_FIFO = 264,
        EHCI_Generic = 1000,
        EHCI_NEC = 2000,
        EHCI_Lucent = 3000,
        EHCI_NVIDIA_Tegra2 = 4000,
        EHCI_NVIDIA_Tegra3 = 4001,
        EHCI_Intel_Medfield = 5001,
    };
    enum class USB_DEVICE_SPEED : int32_t
    {
        UsbLowSpeed = 0,
        UsbFullSpeed = 1,
        UsbHighSpeed = 2,
        UsbSuperSpeed = 3,
    };
    enum class USB_DEVICE_TYPE : int32_t
    {
        Usb11Device = 0,
        Usb20Device = 1,
    };
    enum class USB_USER_ERROR_CODE : int32_t
    {
        UsbUserSuccess = 0,
        UsbUserNotSupported = 1,
        UsbUserInvalidRequestCode = 2,
        UsbUserFeatureDisabled = 3,
        UsbUserInvalidHeaderParameter = 4,
        UsbUserInvalidParameter = 5,
        UsbUserMiniportError = 6,
        UsbUserBufferTooSmall = 7,
        UsbUserErrorNotMapped = 8,
        UsbUserDeviceNotStarted = 9,
        UsbUserNoDeviceConnected = 10,
    };
    enum class WDMUSB_POWER_STATE : int32_t
    {
        WdmUsbPowerNotMapped = 0,
        WdmUsbPowerSystemUnspecified = 100,
        WdmUsbPowerSystemWorking = 101,
        WdmUsbPowerSystemSleeping1 = 102,
        WdmUsbPowerSystemSleeping2 = 103,
        WdmUsbPowerSystemSleeping3 = 104,
        WdmUsbPowerSystemHibernate = 105,
        WdmUsbPowerSystemShutdown = 106,
        WdmUsbPowerDeviceUnspecified = 200,
        WdmUsbPowerDeviceD0 = 201,
        WdmUsbPowerDeviceD1 = 202,
        WdmUsbPowerDeviceD2 = 203,
        WdmUsbPowerDeviceD3 = 204,
    };
#pragma endregion enums

#pragma region forward_declarations
    union BM_REQUEST_TYPE;
    struct OS_STRING;
    struct PACKET_PARAMETERS;
    struct RAW_RESET_PORT_PARAMETERS;
    struct RAW_ROOTPORT_FEATURE;
    struct RAW_ROOTPORT_PARAMETERS;
    struct URB;
    struct USBD_DEVICE_INFORMATION;
    struct USBD_ENDPOINT_OFFLOAD_INFORMATION;
    struct USBD_INTERFACE_INFORMATION;
    struct USBD_ISO_PACKET_DESCRIPTOR;
    struct USBD_PIPE_INFORMATION;
    struct USBD_STREAM_INFORMATION;
    struct USBD_VERSION_INFORMATION;
    struct USBUSER_BANDWIDTH_INFO_REQUEST;
    struct USBUSER_BUS_STATISTICS_0_REQUEST;
    struct USBUSER_CLOSE_RAW_DEVICE;
    struct USBUSER_CONTROLLER_INFO_0;
    struct USBUSER_CONTROLLER_UNICODE_NAME;
    struct USBUSER_GET_DRIVER_VERSION;
    struct USBUSER_GET_USB2HW_VERSION;
    struct USBUSER_OPEN_RAW_DEVICE;
    struct USBUSER_PASS_THRU_REQUEST;
    struct USBUSER_POWER_INFO_REQUEST;
    struct USBUSER_RAW_RESET_ROOT_PORT;
    struct USBUSER_REFRESH_HCT_REG;
    struct USBUSER_REQUEST_HEADER;
    struct USBUSER_ROOTPORT_FEATURE_REQUEST;
    struct USBUSER_ROOTPORT_PARAMETERS;
    struct USBUSER_SEND_ONE_PACKET;
    struct USBUSER_SEND_RAW_COMMAND;
    union USB_20_PORT_CHANGE;
    union USB_20_PORT_STATUS;
    struct USB_30_HUB_DESCRIPTOR;
    union USB_30_PORT_CHANGE;
    union USB_30_PORT_STATUS;
    struct USB_BANDWIDTH_INFO;
    struct USB_BOS_DESCRIPTOR;
    struct USB_BUS_STATISTICS_0;
    struct USB_CLOSE_RAW_DEVICE_PARAMETERS;
    struct USB_COMMON_DESCRIPTOR;
    struct USB_CONFIGURATION_DESCRIPTOR;
    struct USB_CONFIGURATION_POWER_DESCRIPTOR;
    struct USB_CONTROLLER_INFO_0;
    struct USB_DEFAULT_PIPE_SETUP_PACKET;
    struct USB_DEVICE_CAPABILITY_BILLBOARD_DESCRIPTOR;
    struct USB_DEVICE_CAPABILITY_CONTAINER_ID_DESCRIPTOR;
    struct USB_DEVICE_CAPABILITY_DESCRIPTOR;
    struct USB_DEVICE_CAPABILITY_FIRMWARE_STATUS_DESCRIPTOR;
    struct USB_DEVICE_CAPABILITY_PD_CONSUMER_PORT_DESCRIPTOR;
    struct USB_DEVICE_CAPABILITY_PLATFORM_DESCRIPTOR;
    struct USB_DEVICE_CAPABILITY_POWER_DELIVERY_DESCRIPTOR;
    union USB_DEVICE_CAPABILITY_SUPERSPEEDPLUS_SPEED;
    struct USB_DEVICE_CAPABILITY_SUPERSPEEDPLUS_USB_DESCRIPTOR;
    struct USB_DEVICE_CAPABILITY_SUPERSPEED_USB_DESCRIPTOR;
    struct USB_DEVICE_CAPABILITY_USB20_EXTENSION_DESCRIPTOR;
    struct USB_DEVICE_DESCRIPTOR;
    struct USB_DEVICE_QUALIFIER_DESCRIPTOR;
    union USB_DEVICE_STATUS;
    struct USB_DRIVER_VERSION_PARAMETERS;
    struct USB_ENDPOINT_DESCRIPTOR;
    union USB_ENDPOINT_STATUS;
    struct USB_FRAME_NUMBER_AND_QPC_FOR_TIME_SYNC_INFORMATION;
    union USB_FUNCTION_SUSPEND_OPTIONS;
    union USB_HIGH_SPEED_MAXPACKET;
    union USB_HUB_30_PORT_REMOTE_WAKE_MASK;
    union USB_HUB_CHANGE;
    struct USB_HUB_DESCRIPTOR;
    union USB_HUB_STATUS;
    union USB_HUB_STATUS_AND_CHANGE;
    struct USB_IDLE_CALLBACK_INFO;
    struct USB_INTERFACE_ASSOCIATION_DESCRIPTOR;
    struct USB_INTERFACE_DESCRIPTOR;
    struct USB_INTERFACE_POWER_DESCRIPTOR;
    union USB_INTERFACE_STATUS;
    struct USB_OPEN_RAW_DEVICE_PARAMETERS;
    struct USB_PASS_THRU_PARAMETERS;
    union USB_PORT_CHANGE;
    union USB_PORT_EXT_STATUS;
    union USB_PORT_EXT_STATUS_AND_CHANGE;
    union USB_PORT_STATUS;
    union USB_PORT_STATUS_AND_CHANGE;
    struct USB_POWER_INFO;
    struct USB_SEND_RAW_COMMAND_PARAMETERS;
    struct USB_START_TRACKING_FOR_TIME_SYNC_INFORMATION;
    struct USB_STOP_TRACKING_FOR_TIME_SYNC_INFORMATION;
    struct USB_STRING_DESCRIPTOR;
    struct USB_SUPERSPEEDPLUS_ISOCH_ENDPOINT_COMPANION_DESCRIPTOR;
    struct USB_SUPERSPEED_ENDPOINT_COMPANION_DESCRIPTOR;
    struct USB_UNICODE_NAME;
    struct USB_USB2HW_VERSION_PARAMETERS;
    struct WINUSB_PIPE_INFORMATION;
    struct WINUSB_PIPE_INFORMATION_EX;
    struct WINUSB_SETUP_PACKET;
    struct _URB_BULK_OR_INTERRUPT_TRANSFER;
    struct _URB_CONTROL_DESCRIPTOR_REQUEST;
    struct _URB_CONTROL_FEATURE_REQUEST;
    struct _URB_CONTROL_GET_CONFIGURATION_REQUEST;
    struct _URB_CONTROL_GET_INTERFACE_REQUEST;
    struct _URB_CONTROL_GET_STATUS_REQUEST;
    struct _URB_CONTROL_TRANSFER;
    struct _URB_CONTROL_TRANSFER_EX;
    struct _URB_CONTROL_VENDOR_OR_CLASS_REQUEST;
    struct _URB_FRAME_LENGTH_CONTROL;
    struct _URB_GET_CURRENT_FRAME_NUMBER;
    struct _URB_GET_FRAME_LENGTH;
    struct _URB_GET_ISOCH_PIPE_TRANSFER_PATH_DELAYS;
    struct _URB_HCD_AREA;
    struct _URB_HEADER;
    struct _URB_ISOCH_TRANSFER;
    struct _URB_OPEN_STATIC_STREAMS;
    struct _URB_OS_FEATURE_DESCRIPTOR_REQUEST;
    struct _URB_PIPE_REQUEST;
    struct _URB_SELECT_CONFIGURATION;
    struct _URB_SELECT_INTERFACE;
    struct _URB_SET_FRAME_LENGTH;
#pragma endregion forward_declarations

#pragma region delegates
    using USB_IDLE_CALLBACK = void __stdcall(void*);
#pragma endregion delegates

}
namespace win32::_impl_
{
#pragma region guids
#pragma endregion guids

}
#endif
