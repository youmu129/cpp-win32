// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_WinSock_0_H
#define WIN32_Windows_Win32_WinSock_0_H
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct QOS;
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct BOOL;
    struct HANDLE;
    struct OVERLAPPED;
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct HWND;
    struct LPARAM;
    struct WPARAM;
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
#pragma region enums
    enum class AAL_TYPE : int32_t
    {
        AALTYPE_5 = 5,
        AALTYPE_USER = 16,
    };
    enum class CONTROL_CHANNEL_TRIGGER_STATUS : int32_t
    {
        CONTROL_CHANNEL_TRIGGER_STATUS_INVALID = 0,
        CONTROL_CHANNEL_TRIGGER_STATUS_SOFTWARE_SLOT_ALLOCATED = 1,
        CONTROL_CHANNEL_TRIGGER_STATUS_HARDWARE_SLOT_ALLOCATED = 2,
        CONTROL_CHANNEL_TRIGGER_STATUS_POLICY_ERROR = 3,
        CONTROL_CHANNEL_TRIGGER_STATUS_SYSTEM_ERROR = 4,
        CONTROL_CHANNEL_TRIGGER_STATUS_TRANSPORT_DISCONNECTED = 5,
        CONTROL_CHANNEL_TRIGGER_STATUS_SERVICE_UNAVAILABLE = 6,
    };
    enum class IPPROTO : int32_t
    {
        IPPROTO_HOPOPTS = 0,
        IPPROTO_ICMP = 1,
        IPPROTO_IGMP = 2,
        IPPROTO_GGP = 3,
        IPPROTO_IPV4 = 4,
        IPPROTO_ST = 5,
        IPPROTO_TCP = 6,
        IPPROTO_CBT = 7,
        IPPROTO_EGP = 8,
        IPPROTO_IGP = 9,
        IPPROTO_PUP = 12,
        IPPROTO_UDP = 17,
        IPPROTO_IDP = 22,
        IPPROTO_RDP = 27,
        IPPROTO_IPV6 = 41,
        IPPROTO_ROUTING = 43,
        IPPROTO_FRAGMENT = 44,
        IPPROTO_ESP = 50,
        IPPROTO_AH = 51,
        IPPROTO_ICMPV6 = 58,
        IPPROTO_NONE = 59,
        IPPROTO_DSTOPTS = 60,
        IPPROTO_ND = 77,
        IPPROTO_ICLFXBM = 78,
        IPPROTO_PIM = 103,
        IPPROTO_PGM = 113,
        IPPROTO_L2TP = 115,
        IPPROTO_SCTP = 132,
        IPPROTO_RAW = 255,
        IPPROTO_MAX = 256,
        IPPROTO_RESERVED_RAW = 257,
        IPPROTO_RESERVED_IPSEC = 258,
        IPPROTO_RESERVED_IPSECOFFLOAD = 259,
        IPPROTO_RESERVED_WNV = 260,
        IPPROTO_RESERVED_MAX = 261,
    };
    enum class MULTICAST_MODE_TYPE : int32_t
    {
        MCAST_INCLUDE = 0,
        MCAST_EXCLUDE = 1,
    };
    enum class NAPI_PROVIDER_LEVEL : int32_t
    {
        ProviderLevel_None = 0,
        ProviderLevel_Secondary = 1,
        ProviderLevel_Primary = 2,
    };
    enum class NAPI_PROVIDER_TYPE : int32_t
    {
        ProviderType_Application = 1,
        ProviderType_Service = 2,
    };
    enum class NLA_BLOB_DATA_TYPE : int32_t
    {
        NLA_RAW_DATA = 0,
        NLA_INTERFACE = 1,
        NLA_802_1X_LOCATION = 2,
        NLA_CONNECTIVITY = 3,
        NLA_ICS = 4,
    };
    enum class NLA_CONNECTIVITY_TYPE : int32_t
    {
        NLA_NETWORK_AD_HOC = 0,
        NLA_NETWORK_MANAGED = 1,
        NLA_NETWORK_UNMANAGED = 2,
        NLA_NETWORK_UNKNOWN = 3,
    };
    enum class NLA_INTERNET : int32_t
    {
        NLA_INTERNET_UNKNOWN = 0,
        NLA_INTERNET_NO = 1,
        NLA_INTERNET_YES = 2,
    };
    enum class NL_BANDWIDTH_FLAG : int32_t
    {
        NlbwDisabled = 0,
        NlbwEnabled = 1,
        NlbwUnchanged = -1,
    };
    enum class NL_INTERFACE_NETWORK_CATEGORY_STATE : int32_t
    {
        NlincCategoryUnknown = 0,
        NlincPublic = 1,
        NlincPrivate = 2,
        NlincDomainAuthenticated = 3,
        NlincCategoryStateMax = 4,
    };
    enum class NL_NETWORK_CATEGORY : int32_t
    {
        NetworkCategoryPublic = 0,
        NetworkCategoryPrivate = 1,
        NetworkCategoryDomainAuthenticated = 2,
        NetworkCategoryUnchanged = -1,
        NetworkCategoryUnknown = -1,
    };
    enum class PMTUD_STATE : int32_t
    {
        IP_PMTUDISC_NOT_SET = 0,
        IP_PMTUDISC_DO = 1,
        IP_PMTUDISC_DONT = 2,
        IP_PMTUDISC_PROBE = 3,
        IP_PMTUDISC_MAX = 4,
    };
    enum class Q2931_IE_TYPE : int32_t
    {
        IE_AALParameters = 0,
        IE_TrafficDescriptor = 1,
        IE_BroadbandBearerCapability = 2,
        IE_BHLI = 3,
        IE_BLLI = 4,
        IE_CalledPartyNumber = 5,
        IE_CalledPartySubaddress = 6,
        IE_CallingPartyNumber = 7,
        IE_CallingPartySubaddress = 8,
        IE_Cause = 9,
        IE_QOSClass = 10,
        IE_TransitNetworkSelection = 11,
    };
    enum class RCVALL_VALUE : int32_t
    {
        RCVALL_OFF = 0,
        RCVALL_ON = 1,
        RCVALL_SOCKETLEVELONLY = 2,
        RCVALL_IPLEVEL = 3,
    };
    enum class RIO_NOTIFICATION_COMPLETION_TYPE : int32_t
    {
        RIO_EVENT_COMPLETION = 1,
        RIO_IOCP_COMPLETION = 2,
    };
    enum class SOCKET_SECURITY_PROTOCOL : int32_t
    {
        SOCKET_SECURITY_PROTOCOL_DEFAULT = 0,
        SOCKET_SECURITY_PROTOCOL_IPSEC = 1,
        SOCKET_SECURITY_PROTOCOL_IPSEC2 = 2,
        SOCKET_SECURITY_PROTOCOL_INVALID = 3,
    };
    enum class SOCKET_USAGE_TYPE : int32_t
    {
        SYSTEM_CRITICAL_SOCKET = 1,
    };
    enum class TCPSTATE : int32_t
    {
        TCPSTATE_CLOSED = 0,
        TCPSTATE_LISTEN = 1,
        TCPSTATE_SYN_SENT = 2,
        TCPSTATE_SYN_RCVD = 3,
        TCPSTATE_ESTABLISHED = 4,
        TCPSTATE_FIN_WAIT_1 = 5,
        TCPSTATE_FIN_WAIT_2 = 6,
        TCPSTATE_CLOSE_WAIT = 7,
        TCPSTATE_CLOSING = 8,
        TCPSTATE_LAST_ACK = 9,
        TCPSTATE_TIME_WAIT = 10,
        TCPSTATE_MAX = 11,
    };
    enum class TCP_ICW_LEVEL : int32_t
    {
        TCP_ICW_LEVEL_DEFAULT = 0,
        TCP_ICW_LEVEL_HIGH = 1,
        TCP_ICW_LEVEL_VERY_HIGH = 2,
        TCP_ICW_LEVEL_AGGRESSIVE = 3,
        TCP_ICW_LEVEL_EXPERIMENTAL = 4,
        TCP_ICW_LEVEL_COMPAT = 254,
        TCP_ICW_LEVEL_MAX = 255,
    };
    enum class WSACOMPLETIONTYPE : int32_t
    {
        NSP_NOTIFY_IMMEDIATELY = 0,
        NSP_NOTIFY_HWND = 1,
        NSP_NOTIFY_EVENT = 2,
        NSP_NOTIFY_PORT = 3,
        NSP_NOTIFY_APC = 4,
    };
    enum class WSAECOMPARATOR : int32_t
    {
        COMP_EQUAL = 0,
        COMP_NOTLESS = 1,
    };
    enum class WSAESETSERVICEOP : int32_t
    {
        RNRSERVICE_REGISTER = 0,
        RNRSERVICE_DEREGISTER = 1,
        RNRSERVICE_DELETE = 2,
    };
    enum class WSA_COMPATIBILITY_BEHAVIOR_ID : int32_t
    {
        WsaBehaviorAll = 0,
        WsaBehaviorReceiveBuffering = 1,
        WsaBehaviorAutoTuning = 2,
    };
    enum class WSC_PROVIDER_INFO_TYPE : int32_t
    {
        ProviderInfoLspCategories = 0,
        ProviderInfoAudit = 1,
    };
    enum class eWINDOW_ADVANCE_METHOD : int32_t
    {
        E_WINDOW_ADVANCE_BY_TIME = 1,
        E_WINDOW_USE_AS_DATA_CACHE = 2,
    };
#pragma endregion enums

#pragma region forward_declarations
    struct AAL5_PARAMETERS;
    struct AALUSER_PARAMETERS;
    struct AAL_PARAMETERS_IE;
    struct ADDRINFOA;
    struct AFPROTOCOLS;
    struct ASSOCIATE_NAMERES_CONTEXT_INPUT;
    struct ATM_ADDRESS;
    struct ATM_BHLI;
    struct ATM_BLLI;
    struct ATM_BLLI_IE;
    struct ATM_BROADBAND_BEARER_CAPABILITY_IE;
    struct ATM_CALLING_PARTY_NUMBER_IE;
    struct ATM_CAUSE_IE;
    struct ATM_CONNECTION_ID;
    struct ATM_PVC_PARAMS;
    struct ATM_QOS_CLASS_IE;
    struct ATM_TD;
    struct ATM_TRAFFIC_DESCRIPTOR_IE;
    struct ATM_TRANSIT_NETWORK_SELECTION_IE;
    struct BLOB;
    struct CSADDR_INFO;
    struct HWSAEVENT;
    struct INET_PORT_RANGE;
    struct INET_PORT_RESERVATION_INFORMATION;
    struct INET_PORT_RESERVATION_INSTANCE;
    struct INET_PORT_RESERVATION_TOKEN;
    struct INTERFACE_INFO;
    struct INTERFACE_INFO_EX;
    struct IPX_ADDRESS_DATA;
    struct IPX_NETNUM_DATA;
    struct IPX_SPXCONNSTATUS_DATA;
    struct LM_IRPARMS;
    struct NAPI_DOMAIN_DESCRIPTION_BLOB;
    struct NAPI_PROVIDER_INSTALLATION_BLOB;
    struct NETRESOURCE2A;
    struct NETRESOURCE2W;
    struct NLA_BLOB;
    struct NL_PATH_BANDWIDTH_ROD;
    struct NSPV2_ROUTINE;
    struct NSP_ROUTINE;
    struct NS_INFOA;
    struct NS_INFOW;
    struct NS_SERVICE_INFOA;
    struct NS_SERVICE_INFOW;
    struct PROTOCOL_INFOA;
    struct PROTOCOL_INFOW;
    struct Q2931_IE;
    struct RCVALL_IF;
    struct REAL_TIME_NOTIFICATION_SETTING_INPUT;
    struct REAL_TIME_NOTIFICATION_SETTING_INPUT_EX;
    struct REAL_TIME_NOTIFICATION_SETTING_OUTPUT;
    struct RIORESULT;
    struct RIO_BUF;
    struct RIO_BUFFERID_t;
    struct RIO_CMSG_BUFFER;
    struct RIO_CQ_t;
    struct RIO_EXTENSION_FUNCTION_TABLE;
    struct RIO_NOTIFICATION_COMPLETION;
    struct RIO_RQ_t;
    struct RM_FEC_INFO;
    struct RM_RECEIVER_STATS;
    struct RM_SENDER_STATS;
    struct RM_SEND_WINDOW;
    struct RSS_SCALABILITY_INFO;
    struct SCOPE_ID;
    struct SERVICE_ADDRESS;
    struct SERVICE_ADDRESSES;
    struct SERVICE_ASYNC_INFO;
    struct SERVICE_INFOA;
    struct SERVICE_INFOW;
    struct SERVICE_TYPE_INFO;
    struct SERVICE_TYPE_INFO_ABSA;
    struct SERVICE_TYPE_INFO_ABSW;
    struct SERVICE_TYPE_VALUE;
    struct SERVICE_TYPE_VALUE_ABSA;
    struct SERVICE_TYPE_VALUE_ABSW;
    struct SOCKADDR;
    struct SOCKADDR_IRDA;
    struct SOCKET_ADDRESS;
    struct SOCKET_PEER_TARGET_NAME;
    struct SOCKET_PROCESSOR_AFFINITY;
    struct SOCKET_SECURITY_QUERY_INFO;
    struct SOCKET_SECURITY_QUERY_INFO_IPSEC2;
    struct SOCKET_SECURITY_QUERY_TEMPLATE;
    struct SOCKET_SECURITY_QUERY_TEMPLATE_IPSEC2;
    struct SOCKET_SECURITY_SETTINGS;
    struct SOCKET_SECURITY_SETTINGS_IPSEC;
    struct TCP_ACK_FREQUENCY_PARAMETERS;
    struct TCP_ICW_PARAMETERS;
    struct TCP_INFO_v0;
    struct TCP_INFO_v1;
    struct TCP_INITIAL_RTO_PARAMETERS;
    struct TRANSMIT_FILE_BUFFERS;
    struct TRANSMIT_PACKETS_ELEMENT;
    struct TRANSPORT_SETTING_ID;
    struct WCE_DEVICELIST;
    struct WCE_IRDA_DEVICE_INFO;
    struct WINDOWS_DEVICELIST;
    struct WINDOWS_IAS_QUERY;
    struct WINDOWS_IAS_SET;
    struct WINDOWS_IRDA_DEVICE_INFO;
    struct WSABUF;
    struct WSACOMPLETION;
    struct WSAData;
    struct WSAMSG;
    struct WSANAMESPACE_INFOA;
    struct WSANAMESPACE_INFOEXA;
    struct WSANAMESPACE_INFOEXW;
    struct WSANAMESPACE_INFOW;
    struct WSANETWORKEVENTS;
    struct WSANSCLASSINFOA;
    struct WSANSCLASSINFOW;
    struct WSAPOLLDATA;
    struct WSAPOLLFD;
    struct WSAPROTOCOLCHAIN;
    struct WSAPROTOCOL_INFOA;
    struct WSAPROTOCOL_INFOW;
    struct WSAQUERYSET2A;
    struct WSAQUERYSET2W;
    struct WSAQUERYSETA;
    struct WSAQUERYSETW;
    struct WSASENDMSG;
    struct WSASERVICECLASSINFOA;
    struct WSASERVICECLASSINFOW;
    struct WSATHREADID;
    struct WSAVERSION;
    struct WSA_COMPATIBILITY_MODE;
    struct WSC_PROVIDER_AUDIT_INFO;
    struct WSPData;
    struct WSPPROC_TABLE;
    struct WSPUPCALLTABLE;
    struct addrinfoW;
    struct addrinfoex2A;
    struct addrinfoex2W;
    struct addrinfoex3;
    struct addrinfoex4;
    struct addrinfoexA;
    struct addrinfoexW;
    struct cmsghdr;
    struct fd_set;
    struct group_filter;
    struct group_req;
    struct group_source_req;
    struct hostent;
    struct icmp_error_info;
    struct in6_addr;
    struct in6_pktinfo;
    struct in6_pktinfo_ex;
    struct in_addr;
    struct in_pktinfo;
    struct in_pktinfo_ex;
    struct in_recverr;
    struct ip_mreq;
    struct ip_mreq_source;
    struct ip_msfilter;
    struct ipv6_mreq;
    struct linger;
    struct netent;
    struct protoent;
    struct servent;
    struct sockaddr_atm;
    struct sockaddr_dl;
    union sockaddr_gen;
    struct sockaddr_in;
    struct sockaddr_in6_old;
    struct sockaddr_in6_w2ksp1;
    struct sockaddr_storage_xp;
    struct sockproto;
    struct tcp_keepalive;
    struct timeval;
#pragma endregion forward_declarations

#pragma region delegates
    using LPCONDITIONPROC = int32_t __stdcall(Windows::Win32::WinSock::WSABUF*, Windows::Win32::WinSock::WSABUF*, Windows::Win32::QualityOfService::QOS*, Windows::Win32::QualityOfService::QOS*, Windows::Win32::WinSock::WSABUF*, Windows::Win32::WinSock::WSABUF*, uint32_t*, size_t);
    using LPWSAOVERLAPPED_COMPLETION_ROUTINE = void __stdcall(uint32_t, uint32_t, Windows::Win32::SystemServices::OVERLAPPED*, uint32_t);
    using LPFN_TRANSMITFILE = Windows::Win32::SystemServices::BOOL __stdcall(size_t, Windows::Win32::SystemServices::HANDLE, uint32_t, uint32_t, Windows::Win32::SystemServices::OVERLAPPED*, Windows::Win32::WinSock::TRANSMIT_FILE_BUFFERS*, uint32_t);
    using LPFN_ACCEPTEX = Windows::Win32::SystemServices::BOOL __stdcall(size_t, size_t, void*, uint32_t, uint32_t, uint32_t, uint32_t*, Windows::Win32::SystemServices::OVERLAPPED*);
    using LPFN_GETACCEPTEXSOCKADDRS = void __stdcall(void*, uint32_t, uint32_t, uint32_t, Windows::Win32::WinSock::SOCKADDR**, int32_t*, Windows::Win32::WinSock::SOCKADDR**, int32_t*);
    using LPFN_TRANSMITPACKETS = Windows::Win32::SystemServices::BOOL __stdcall(size_t, Windows::Win32::WinSock::TRANSMIT_PACKETS_ELEMENT*, uint32_t, uint32_t, Windows::Win32::SystemServices::OVERLAPPED*, uint32_t);
    using LPFN_CONNECTEX = Windows::Win32::SystemServices::BOOL __stdcall(size_t, Windows::Win32::WinSock::SOCKADDR*, int32_t, void*, uint32_t, uint32_t*, Windows::Win32::SystemServices::OVERLAPPED*);
    using LPFN_DISCONNECTEX = Windows::Win32::SystemServices::BOOL __stdcall(size_t, Windows::Win32::SystemServices::OVERLAPPED*, uint32_t, uint32_t);
    using LPFN_WSARECVMSG = int32_t __stdcall(size_t, Windows::Win32::WinSock::WSAMSG*, uint32_t*, Windows::Win32::SystemServices::OVERLAPPED*, Windows::Win32::WinSock::LPWSAOVERLAPPED_COMPLETION_ROUTINE*);
    using LPFN_WSASENDMSG = int32_t __stdcall(size_t, Windows::Win32::WinSock::WSAMSG*, uint32_t, uint32_t*, Windows::Win32::SystemServices::OVERLAPPED*, Windows::Win32::WinSock::LPWSAOVERLAPPED_COMPLETION_ROUTINE*);
    using LPFN_WSAPOLL = int32_t __stdcall(Windows::Win32::WinSock::WSAPOLLFD*, uint32_t, int32_t);
    using LPFN_RIORECEIVE = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::WinSock::RIO_RQ_t*, Windows::Win32::WinSock::RIO_BUF*, uint32_t, uint32_t, void*);
    using LPFN_RIORECEIVEEX = int32_t __stdcall(Windows::Win32::WinSock::RIO_RQ_t*, Windows::Win32::WinSock::RIO_BUF*, uint32_t, Windows::Win32::WinSock::RIO_BUF*, Windows::Win32::WinSock::RIO_BUF*, Windows::Win32::WinSock::RIO_BUF*, Windows::Win32::WinSock::RIO_BUF*, uint32_t, void*);
    using LPFN_RIOSEND = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::WinSock::RIO_RQ_t*, Windows::Win32::WinSock::RIO_BUF*, uint32_t, uint32_t, void*);
    using LPFN_RIOSENDEX = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::WinSock::RIO_RQ_t*, Windows::Win32::WinSock::RIO_BUF*, uint32_t, Windows::Win32::WinSock::RIO_BUF*, Windows::Win32::WinSock::RIO_BUF*, Windows::Win32::WinSock::RIO_BUF*, Windows::Win32::WinSock::RIO_BUF*, uint32_t, void*);
    using LPFN_RIOCLOSECOMPLETIONQUEUE = void __stdcall(Windows::Win32::WinSock::RIO_CQ_t*);
    using LPFN_RIOCREATECOMPLETIONQUEUE = Windows::Win32::WinSock::RIO_CQ_t* __stdcall(uint32_t, Windows::Win32::WinSock::RIO_NOTIFICATION_COMPLETION*);
    using LPFN_RIOCREATEREQUESTQUEUE = Windows::Win32::WinSock::RIO_RQ_t* __stdcall(size_t, uint32_t, uint32_t, uint32_t, uint32_t, Windows::Win32::WinSock::RIO_CQ_t*, Windows::Win32::WinSock::RIO_CQ_t*, void*);
    using LPFN_RIODEQUEUECOMPLETION = uint32_t __stdcall(Windows::Win32::WinSock::RIO_CQ_t*, Windows::Win32::WinSock::RIORESULT*, uint32_t);
    using LPFN_RIODEREGISTERBUFFER = void __stdcall(Windows::Win32::WinSock::RIO_BUFFERID_t*);
    using LPFN_RIONOTIFY = int32_t __stdcall(Windows::Win32::WinSock::RIO_CQ_t*);
    using LPFN_RIOREGISTERBUFFER = Windows::Win32::WinSock::RIO_BUFFERID_t* __stdcall(int8_t*, uint32_t);
    using LPFN_RIORESIZECOMPLETIONQUEUE = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::WinSock::RIO_CQ_t*, uint32_t);
    using LPFN_RIORESIZEREQUESTQUEUE = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::WinSock::RIO_RQ_t*, uint32_t, uint32_t);
    using LPBLOCKINGCALLBACK = Windows::Win32::SystemServices::BOOL __stdcall(size_t);
    using LPWSAUSERAPC = void __stdcall(size_t);
    using LPWSPACCEPT = size_t __stdcall(size_t, Windows::Win32::WinSock::SOCKADDR*, int32_t*, Windows::Win32::WinSock::LPCONDITIONPROC*, size_t, int32_t*);
    using LPWSPADDRESSTOSTRING = int32_t __stdcall(Windows::Win32::WinSock::SOCKADDR*, uint32_t, Windows::Win32::WinSock::WSAPROTOCOL_INFOW*, uint16_t*, uint32_t*, int32_t*);
    using LPWSPASYNCSELECT = int32_t __stdcall(size_t, Windows::Win32::WindowsAndMessaging::HWND, uint32_t, int32_t, int32_t*);
    using LPWSPBIND = int32_t __stdcall(size_t, Windows::Win32::WinSock::SOCKADDR*, int32_t, int32_t*);
    using LPWSPCANCELBLOCKINGCALL = int32_t __stdcall(int32_t*);
    using LPWSPCLEANUP = int32_t __stdcall(int32_t*);
    using LPWSPCLOSESOCKET = int32_t __stdcall(size_t, int32_t*);
    using LPWSPCONNECT = int32_t __stdcall(size_t, Windows::Win32::WinSock::SOCKADDR*, int32_t, Windows::Win32::WinSock::WSABUF*, Windows::Win32::WinSock::WSABUF*, Windows::Win32::QualityOfService::QOS*, Windows::Win32::QualityOfService::QOS*, int32_t*);
    using LPWSPDUPLICATESOCKET = int32_t __stdcall(size_t, uint32_t, Windows::Win32::WinSock::WSAPROTOCOL_INFOW*, int32_t*);
    using LPWSPENUMNETWORKEVENTS = int32_t __stdcall(size_t, Windows::Win32::SystemServices::HANDLE, Windows::Win32::WinSock::WSANETWORKEVENTS*, int32_t*);
    using LPWSPEVENTSELECT = int32_t __stdcall(size_t, Windows::Win32::SystemServices::HANDLE, int32_t, int32_t*);
    using LPWSPGETOVERLAPPEDRESULT = Windows::Win32::SystemServices::BOOL __stdcall(size_t, Windows::Win32::SystemServices::OVERLAPPED*, uint32_t*, Windows::Win32::SystemServices::BOOL, uint32_t*, int32_t*);
    using LPWSPGETPEERNAME = int32_t __stdcall(size_t, Windows::Win32::WinSock::SOCKADDR*, int32_t*, int32_t*);
    using LPWSPGETSOCKNAME = int32_t __stdcall(size_t, Windows::Win32::WinSock::SOCKADDR*, int32_t*, int32_t*);
    using LPWSPGETSOCKOPT = int32_t __stdcall(size_t, int32_t, int32_t, int8_t*, int32_t*, int32_t*);
    using LPWSPGETQOSBYNAME = Windows::Win32::SystemServices::BOOL __stdcall(size_t, Windows::Win32::WinSock::WSABUF*, Windows::Win32::QualityOfService::QOS*, int32_t*);
    using LPWSPIOCTL = int32_t __stdcall(size_t, uint32_t, void*, uint32_t, void*, uint32_t, uint32_t*, Windows::Win32::SystemServices::OVERLAPPED*, Windows::Win32::WinSock::LPWSAOVERLAPPED_COMPLETION_ROUTINE*, Windows::Win32::WinSock::WSATHREADID*, int32_t*);
    using LPWSPJOINLEAF = size_t __stdcall(size_t, Windows::Win32::WinSock::SOCKADDR*, int32_t, Windows::Win32::WinSock::WSABUF*, Windows::Win32::WinSock::WSABUF*, Windows::Win32::QualityOfService::QOS*, Windows::Win32::QualityOfService::QOS*, uint32_t, int32_t*);
    using LPWSPLISTEN = int32_t __stdcall(size_t, int32_t, int32_t*);
    using LPWSPRECV = int32_t __stdcall(size_t, Windows::Win32::WinSock::WSABUF*, uint32_t, uint32_t*, uint32_t*, Windows::Win32::SystemServices::OVERLAPPED*, Windows::Win32::WinSock::LPWSAOVERLAPPED_COMPLETION_ROUTINE*, Windows::Win32::WinSock::WSATHREADID*, int32_t*);
    using LPWSPRECVDISCONNECT = int32_t __stdcall(size_t, Windows::Win32::WinSock::WSABUF*, int32_t*);
    using LPWSPRECVFROM = int32_t __stdcall(size_t, Windows::Win32::WinSock::WSABUF*, uint32_t, uint32_t*, uint32_t*, Windows::Win32::WinSock::SOCKADDR*, int32_t*, Windows::Win32::SystemServices::OVERLAPPED*, Windows::Win32::WinSock::LPWSAOVERLAPPED_COMPLETION_ROUTINE*, Windows::Win32::WinSock::WSATHREADID*, int32_t*);
    using LPWSPSELECT = int32_t __stdcall(int32_t, Windows::Win32::WinSock::fd_set*, Windows::Win32::WinSock::fd_set*, Windows::Win32::WinSock::fd_set*, Windows::Win32::WinSock::timeval*, int32_t*);
    using LPWSPSEND = int32_t __stdcall(size_t, Windows::Win32::WinSock::WSABUF*, uint32_t, uint32_t*, uint32_t, Windows::Win32::SystemServices::OVERLAPPED*, Windows::Win32::WinSock::LPWSAOVERLAPPED_COMPLETION_ROUTINE*, Windows::Win32::WinSock::WSATHREADID*, int32_t*);
    using LPWSPSENDDISCONNECT = int32_t __stdcall(size_t, Windows::Win32::WinSock::WSABUF*, int32_t*);
    using LPWSPSENDTO = int32_t __stdcall(size_t, Windows::Win32::WinSock::WSABUF*, uint32_t, uint32_t*, uint32_t, Windows::Win32::WinSock::SOCKADDR*, int32_t, Windows::Win32::SystemServices::OVERLAPPED*, Windows::Win32::WinSock::LPWSAOVERLAPPED_COMPLETION_ROUTINE*, Windows::Win32::WinSock::WSATHREADID*, int32_t*);
    using LPWSPSETSOCKOPT = int32_t __stdcall(size_t, int32_t, int32_t, int8_t*, int32_t, int32_t*);
    using LPWSPSHUTDOWN = int32_t __stdcall(size_t, int32_t, int32_t*);
    using LPWSPSOCKET = size_t __stdcall(int32_t, int32_t, int32_t, Windows::Win32::WinSock::WSAPROTOCOL_INFOW*, uint32_t, uint32_t, int32_t*);
    using LPWSPSTRINGTOADDRESS = int32_t __stdcall(uint16_t*, int32_t, Windows::Win32::WinSock::WSAPROTOCOL_INFOW*, Windows::Win32::WinSock::SOCKADDR*, int32_t*, int32_t*);
    using LPWPUCLOSEEVENT = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::SystemServices::HANDLE, int32_t*);
    using LPWPUCLOSESOCKETHANDLE = int32_t __stdcall(size_t, int32_t*);
    using LPWPUCREATEEVENT = Windows::Win32::SystemServices::HANDLE __stdcall(int32_t*);
    using LPWPUCREATESOCKETHANDLE = size_t __stdcall(uint32_t, size_t, int32_t*);
    using LPWPUFDISSET = int32_t __stdcall(size_t, Windows::Win32::WinSock::fd_set*);
    using LPWPUGETPROVIDERPATH = int32_t __stdcall(::win32::guid*, uint16_t*, int32_t*, int32_t*);
    using LPWPUMODIFYIFSHANDLE = size_t __stdcall(uint32_t, size_t, int32_t*);
    using LPWPUPOSTMESSAGE = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::WindowsAndMessaging::HWND, uint32_t, Windows::Win32::WindowsAndMessaging::WPARAM, Windows::Win32::WindowsAndMessaging::LPARAM);
    using LPWPUQUERYBLOCKINGCALLBACK = int32_t __stdcall(uint32_t, Windows::Win32::WinSock::LPBLOCKINGCALLBACK**, size_t*, int32_t*);
    using LPWPUQUERYSOCKETHANDLECONTEXT = int32_t __stdcall(size_t, size_t*, int32_t*);
    using LPWPUQUEUEAPC = int32_t __stdcall(Windows::Win32::WinSock::WSATHREADID*, Windows::Win32::WinSock::LPWSAUSERAPC*, size_t, int32_t*);
    using LPWPURESETEVENT = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::SystemServices::HANDLE, int32_t*);
    using LPWPUSETEVENT = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::SystemServices::HANDLE, int32_t*);
    using LPWPUOPENCURRENTTHREAD = int32_t __stdcall(Windows::Win32::WinSock::WSATHREADID*, int32_t*);
    using LPWPUCLOSETHREAD = int32_t __stdcall(Windows::Win32::WinSock::WSATHREADID*, int32_t*);
    using LPWPUCOMPLETEOVERLAPPEDREQUEST = int32_t __stdcall(size_t, Windows::Win32::SystemServices::OVERLAPPED*, uint32_t, uint32_t, int32_t*);
    using LPWSPSTARTUP = int32_t __stdcall(uint16_t, Windows::Win32::WinSock::WSPData*, Windows::Win32::WinSock::WSAPROTOCOL_INFOW*, Windows::Win32::WinSock::WSPUPCALLTABLE, Windows::Win32::WinSock::WSPPROC_TABLE*);
    using LPWSCENUMPROTOCOLS = int32_t __stdcall(int32_t*, Windows::Win32::WinSock::WSAPROTOCOL_INFOW*, uint32_t*, int32_t*);
    using LPWSCDEINSTALLPROVIDER = int32_t __stdcall(::win32::guid*, int32_t*);
    using LPWSCINSTALLPROVIDER = int32_t __stdcall(::win32::guid*, uint16_t*, Windows::Win32::WinSock::WSAPROTOCOL_INFOW*, uint32_t, int32_t*);
    using LPWSCGETPROVIDERPATH = int32_t __stdcall(::win32::guid*, uint16_t*, int32_t*, int32_t*);
    using LPWSCUPDATEPROVIDER = int32_t __stdcall(::win32::guid*, uint16_t*, Windows::Win32::WinSock::WSAPROTOCOL_INFOW*, uint32_t, int32_t*);
    using LPWSCINSTALLNAMESPACE = int32_t __stdcall(uint16_t*, uint16_t*, uint32_t, uint32_t, ::win32::guid*);
    using LPWSCUNINSTALLNAMESPACE = int32_t __stdcall(::win32::guid*);
    using LPWSCENABLENSPROVIDER = int32_t __stdcall(::win32::guid*, Windows::Win32::SystemServices::BOOL);
    using LPNSPCLEANUP = int32_t __stdcall(::win32::guid*);
    using LPNSPLOOKUPSERVICEBEGIN = int32_t __stdcall(::win32::guid*, Windows::Win32::WinSock::WSAQUERYSETW*, Windows::Win32::WinSock::WSASERVICECLASSINFOW*, uint32_t, intptr_t*);
    using LPNSPLOOKUPSERVICENEXT = int32_t __stdcall(Windows::Win32::SystemServices::HANDLE, uint32_t, uint32_t*, Windows::Win32::WinSock::WSAQUERYSETW*);
    using LPNSPIOCTL = int32_t __stdcall(Windows::Win32::SystemServices::HANDLE, uint32_t, void*, uint32_t, void*, uint32_t, uint32_t*, Windows::Win32::WinSock::WSACOMPLETION*, Windows::Win32::WinSock::WSATHREADID*);
    using LPNSPLOOKUPSERVICEEND = int32_t __stdcall(Windows::Win32::SystemServices::HANDLE);
    using LPNSPSETSERVICE = int32_t __stdcall(::win32::guid*, Windows::Win32::WinSock::WSASERVICECLASSINFOW*, Windows::Win32::WinSock::WSAQUERYSETW*, Windows::Win32::WinSock::WSAESETSERVICEOP, uint32_t);
    using LPNSPINSTALLSERVICECLASS = int32_t __stdcall(::win32::guid*, Windows::Win32::WinSock::WSASERVICECLASSINFOW*);
    using LPNSPREMOVESERVICECLASS = int32_t __stdcall(::win32::guid*, ::win32::guid*);
    using LPNSPGETSERVICECLASSINFO = int32_t __stdcall(::win32::guid*, uint32_t*, Windows::Win32::WinSock::WSASERVICECLASSINFOW*);
    using LPNSPSTARTUP = int32_t __stdcall(::win32::guid*, Windows::Win32::WinSock::NSP_ROUTINE*);
    using LPNSPV2STARTUP = int32_t __stdcall(::win32::guid*, void**);
    using LPNSPV2CLEANUP = int32_t __stdcall(::win32::guid*, void*);
    using LPNSPV2LOOKUPSERVICEBEGIN = int32_t __stdcall(::win32::guid*, Windows::Win32::WinSock::WSAQUERYSET2W*, uint32_t, void*, intptr_t*);
    using LPNSPV2LOOKUPSERVICENEXTEX = void __stdcall(Windows::Win32::SystemServices::HANDLE, Windows::Win32::SystemServices::HANDLE, uint32_t, uint32_t*, Windows::Win32::WinSock::WSAQUERYSET2W*);
    using LPNSPV2LOOKUPSERVICEEND = int32_t __stdcall(Windows::Win32::SystemServices::HANDLE);
    using LPNSPV2SETSERVICEEX = void __stdcall(Windows::Win32::SystemServices::HANDLE, ::win32::guid*, Windows::Win32::WinSock::WSAQUERYSET2W*, Windows::Win32::WinSock::WSAESETSERVICEOP, uint32_t, void*);
    using LPNSPV2CLIENTSESSIONRUNDOWN = void __stdcall(::win32::guid*, void*);
    using LPFN_NSPAPI = uint32_t __stdcall();
    using LPSERVICE_CALLBACK_PROC = void __stdcall(Windows::Win32::WindowsAndMessaging::LPARAM, Windows::Win32::SystemServices::HANDLE);
    using LPLOOKUPSERVICE_COMPLETION_ROUTINE = void __stdcall(uint32_t, uint32_t, Windows::Win32::SystemServices::OVERLAPPED*);
    using LPWSCWRITEPROVIDERORDER = int32_t __stdcall(uint32_t*, uint32_t);
    using LPWSCWRITENAMESPACEORDER = int32_t __stdcall(::win32::guid*, uint32_t);
#pragma endregion delegates

}
namespace win32::_impl_
{
#pragma region guids
#pragma endregion guids

}
#endif
