// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_WindowsClustering_0_H
#define WIN32_Windows_Win32_WindowsClustering_0_H
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SC_HANDLE__;
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct BOOL;
    struct HANDLE;
    struct SECURITY_ATTRIBUTES;
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct FILETIME;
    struct HKEY;
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
#pragma region enums
    enum class CLCTL_CODES : int32_t
    {
        CLCTL_UNKNOWN = 0,
        CLCTL_GET_CHARACTERISTICS = 5,
        CLCTL_GET_FLAGS = 9,
        CLCTL_GET_CLASS_INFO = 13,
        CLCTL_GET_REQUIRED_DEPENDENCIES = 17,
        CLCTL_GET_ARB_TIMEOUT = 21,
        CLCTL_GET_FAILURE_INFO = 25,
        CLCTL_GET_NAME = 41,
        CLCTL_GET_RESOURCE_TYPE = 45,
        CLCTL_GET_NODE = 49,
        CLCTL_GET_NETWORK = 53,
        CLCTL_GET_ID = 57,
        CLCTL_GET_FQDN = 61,
        CLCTL_GET_CLUSTER_SERVICE_ACCOUNT_NAME = 65,
        CLCTL_CHECK_VOTER_EVICT = 69,
        CLCTL_CHECK_VOTER_DOWN = 73,
        CLCTL_SHUTDOWN = 77,
        CLCTL_ENUM_COMMON_PROPERTIES = 81,
        CLCTL_GET_RO_COMMON_PROPERTIES = 85,
        CLCTL_GET_COMMON_PROPERTIES = 89,
        CLCTL_SET_COMMON_PROPERTIES = 4194398,
        CLCTL_VALIDATE_COMMON_PROPERTIES = 97,
        CLCTL_GET_COMMON_PROPERTY_FMTS = 101,
        CLCTL_GET_COMMON_RESOURCE_PROPERTY_FMTS = 105,
        CLCTL_ENUM_PRIVATE_PROPERTIES = 121,
        CLCTL_GET_RO_PRIVATE_PROPERTIES = 125,
        CLCTL_GET_PRIVATE_PROPERTIES = 129,
        CLCTL_SET_PRIVATE_PROPERTIES = 4194438,
        CLCTL_VALIDATE_PRIVATE_PROPERTIES = 137,
        CLCTL_GET_PRIVATE_PROPERTY_FMTS = 141,
        CLCTL_GET_PRIVATE_RESOURCE_PROPERTY_FMTS = 145,
        CLCTL_ADD_REGISTRY_CHECKPOINT = 4194466,
        CLCTL_DELETE_REGISTRY_CHECKPOINT = 4194470,
        CLCTL_GET_REGISTRY_CHECKPOINTS = 169,
        CLCTL_ADD_CRYPTO_CHECKPOINT = 4194478,
        CLCTL_DELETE_CRYPTO_CHECKPOINT = 4194482,
        CLCTL_GET_CRYPTO_CHECKPOINTS = 181,
        CLCTL_RESOURCE_UPGRADE_DLL = 4194490,
        CLCTL_ADD_REGISTRY_CHECKPOINT_64BIT = 4194494,
        CLCTL_ADD_REGISTRY_CHECKPOINT_32BIT = 4194498,
        CLCTL_GET_LOADBAL_PROCESS_LIST = 201,
        CLCTL_SET_ACCOUNT_ACCESS = 4194546,
        CLCTL_GET_NETWORK_NAME = 361,
        CLCTL_NETNAME_GET_VIRTUAL_SERVER_TOKEN = 365,
        CLCTL_NETNAME_REGISTER_DNS_RECORDS = 370,
        CLCTL_GET_DNS_NAME = 373,
        CLCTL_NETNAME_SET_PWD_INFO = 378,
        CLCTL_NETNAME_DELETE_CO = 382,
        CLCTL_NETNAME_VALIDATE_VCO = 385,
        CLCTL_NETNAME_RESET_VCO = 389,
        CLCTL_NETNAME_REPAIR_VCO = 397,
        CLCTL_STORAGE_GET_DISK_INFO = 401,
        CLCTL_STORAGE_GET_AVAILABLE_DISKS = 405,
        CLCTL_STORAGE_IS_PATH_VALID = 409,
        CLCTL_STORAGE_SYNC_CLUSDISK_DB = 4194718,
        CLCTL_STORAGE_GET_DISK_NUMBER_INFO = 417,
        CLCTL_QUERY_DELETE = 441,
        CLCTL_IPADDRESS_RENEW_LEASE = 4194750,
        CLCTL_IPADDRESS_RELEASE_LEASE = 4194754,
        CLCTL_QUERY_MAINTENANCE_MODE = 481,
        CLCTL_SET_MAINTENANCE_MODE = 4194790,
        CLCTL_STORAGE_SET_DRIVELETTER = 4194794,
        CLCTL_STORAGE_GET_DRIVELETTERS = 493,
        CLCTL_STORAGE_GET_DISK_INFO_EX = 497,
        CLCTL_STORAGE_GET_AVAILABLE_DISKS_EX = 501,
        CLCTL_STORAGE_GET_DISK_INFO_EX2 = 505,
        CLCTL_STORAGE_GET_CLUSPORT_DISK_COUNT = 509,
        CLCTL_STORAGE_REMAP_DRIVELETTER = 513,
        CLCTL_STORAGE_GET_DISKID = 517,
        CLCTL_STORAGE_IS_CLUSTERABLE = 521,
        CLCTL_STORAGE_REMOVE_VM_OWNERSHIP = 4194830,
        CLCTL_STORAGE_GET_MOUNTPOINTS = 529,
        CLCTL_STORAGE_GET_DIRTY = 537,
        CLCTL_STORAGE_GET_SHARED_VOLUME_INFO = 549,
        CLCTL_STORAGE_IS_CSV_FILE = 553,
        CLCTL_STORAGE_GET_RESOURCEID = 557,
        CLCTL_VALIDATE_PATH = 561,
        CLCTL_VALIDATE_NETNAME = 565,
        CLCTL_VALIDATE_DIRECTORY = 569,
        CLCTL_BATCH_BLOCK_KEY = 574,
        CLCTL_BATCH_UNBLOCK_KEY = 577,
        CLCTL_FILESERVER_SHARE_ADD = 4194886,
        CLCTL_FILESERVER_SHARE_DEL = 4194890,
        CLCTL_FILESERVER_SHARE_MODIFY = 4194894,
        CLCTL_FILESERVER_SHARE_REPORT = 593,
        CLCTL_NETNAME_GET_OU_FOR_VCO = 4194926,
        CLCTL_ENABLE_SHARED_VOLUME_DIRECTIO = 4194954,
        CLCTL_DISABLE_SHARED_VOLUME_DIRECTIO = 4194958,
        CLCTL_GET_SHARED_VOLUME_ID = 657,
        CLCTL_SET_CSV_MAINTENANCE_MODE = 4194966,
        CLCTL_SET_SHARED_VOLUME_BACKUP_MODE = 4194970,
        CLCTL_STORAGE_GET_SHARED_VOLUME_PARTITION_NAMES = 669,
        CLCTL_STORAGE_GET_SHARED_VOLUME_STATES = 4194978,
        CLCTL_STORAGE_IS_SHARED_VOLUME = 677,
        CLCTL_GET_CLUSDB_TIMESTAMP = 681,
        CLCTL_RW_MODIFY_NOOP = 4194990,
        CLCTL_IS_QUORUM_BLOCKED = 689,
        CLCTL_POOL_GET_DRIVE_INFO = 693,
        CLCTL_GET_GUM_LOCK_OWNER = 697,
        CLCTL_GET_STUCK_NODES = 701,
        CLCTL_INJECT_GEM_FAULT = 705,
        CLCTL_INTRODUCE_GEM_REPAIR_DELAY = 709,
        CLCTL_SEND_DUMMY_GEM_MESSAGES = 713,
        CLCTL_BLOCK_GEM_SEND_RECV = 717,
        CLCTL_GET_GEMID_VECTOR = 721,
        CLCTL_ADD_CRYPTO_CHECKPOINT_EX = 4195030,
        CLCTL_GROUP_GET_LAST_MOVE_TIME = 729,
        CLCTL_SET_STORAGE_CONFIGURATION = 4195042,
        CLCTL_GET_STORAGE_CONFIGURATION = 741,
        CLCTL_GET_STORAGE_CONFIG_ATTRIBUTES = 745,
        CLCTL_REMOVE_NODE = 4195054,
        CLCTL_IS_FEATURE_INSTALLED = 753,
        CLCTL_IS_S2D_FEATURE_SUPPORTED = 757,
        CLCTL_STORAGE_GET_PHYSICAL_DISK_INFO = 761,
        CLCTL_STORAGE_GET_CLUSBFLT_PATHS = 765,
        CLCTL_STORAGE_GET_CLUSBFLT_PATHINFO = 769,
        CLCTL_CLEAR_NODE_CONNECTION_INFO = 4195078,
        CLCTL_SET_DNS_DOMAIN = 4195082,
        CTCTL_GET_ROUTESTATUS_BASIC = 781,
        CTCTL_GET_ROUTESTATUS_EXTENDED = 785,
        CTCTL_GET_FAULT_DOMAIN_STATE = 789,
        CLCTL_NETNAME_SET_PWD_INFOEX = 794,
        CLCTL_STORAGE_GET_AVAILABLE_DISKS_EX2_INT = 8161,
        CLCTL_CLOUD_WITNESS_RESOURCE_TYPE_VALIDATE_CREDENTIALS = 8417,
        CLCTL_CLOUD_WITNESS_RESOURCE_UPDATE_TOKEN = 4202726,
        CLCTL_RESOURCE_PREPARE_UPGRADE = 4202730,
        CLCTL_RESOURCE_UPGRADE_COMPLETED = 4202734,
        CLCTL_CLOUD_WITNESS_RESOURCE_TYPE_VALIDATE_CREDENTIALS_WITH_KEY = 8433,
        CLCTL_CLOUD_WITNESS_RESOURCE_UPDATE_KEY = 4202742,
        CLCTL_REPLICATION_GET_LOG_INFO = 8517,
        CLCTL_REPLICATION_GET_ELIGIBLE_LOGDISKS = 8521,
        CLCTL_REPLICATION_GET_ELIGIBLE_TARGET_DATADISKS = 8525,
        CLCTL_REPLICATION_GET_ELIGIBLE_SOURCE_DATADISKS = 8529,
        CLCTL_REPLICATION_GET_REPLICATED_DISKS = 8533,
        CLCTL_REPLICATION_GET_REPLICA_VOLUMES = 8537,
        CLCTL_REPLICATION_GET_LOG_VOLUME = 8541,
        CLCTL_REPLICATION_GET_RESOURCE_GROUP = 8545,
        CLCTL_REPLICATION_GET_REPLICATED_PARTITION_INFO = 8549,
        CLCTL_GET_STATE_CHANGE_TIME = 11613,
        CLCTL_SET_CLUSTER_S2D_ENABLED = 4205922,
        CLCTL_SET_CLUSTER_S2D_CACHE_METADATA_RESERVE_BYTES = 4205934,
        CLCTL_GROUPSET_GET_GROUPS = 11633,
        CLCTL_GROUPSET_GET_PROVIDER_GROUPS = 11637,
        CLCTL_GROUPSET_GET_PROVIDER_GROUPSETS = 11641,
        CLCTL_GROUP_GET_PROVIDER_GROUPS = 11645,
        CLCTL_GROUP_GET_PROVIDER_GROUPSETS = 11649,
        CLCTL_GROUP_SET_CCF_FROM_MASTER = 4205958,
        CLCTL_GET_INFRASTRUCTURE_SOFS_BUFFER = 11657,
        CLCTL_SET_INFRASTRUCTURE_SOFS_BUFFER = 4205966,
        CLCTL_NOTIFY_INFRASTRUCTURE_SOFS_CHANGED = 4205970,
        CLCTL_SCALEOUT_COMMAND = 4205974,
        CLCTL_SCALEOUT_CONTROL = 4205978,
        CLCTL_SCALEOUT_GET_CLUSTERS = 4205981,
        CLCTL_RELOAD_AUTOLOGGER_CONFIG = 11730,
        CLCTL_STORAGE_RENAME_SHARED_VOLUME = 11734,
        CLCTL_STORAGE_RENAME_SHARED_VOLUME_GUID = 11738,
        CLCTL_ENUM_AFFINITY_RULE_NAMES = 11741,
        CLCTL_DELETE = 5242886,
        CLCTL_INSTALL_NODE = 5242890,
        CLCTL_EVICT_NODE = 5242894,
        CLCTL_ADD_DEPENDENCY = 5242898,
        CLCTL_REMOVE_DEPENDENCY = 5242902,
        CLCTL_ADD_OWNER = 5242906,
        CLCTL_REMOVE_OWNER = 5242910,
        CLCTL_SET_NAME = 5242918,
        CLCTL_CLUSTER_NAME_CHANGED = 5242922,
        CLCTL_CLUSTER_VERSION_CHANGED = 5242926,
        CLCTL_FIXUP_ON_UPGRADE = 5242930,
        CLCTL_STARTING_PHASE1 = 5242934,
        CLCTL_STARTING_PHASE2 = 5242938,
        CLCTL_HOLD_IO = 5242942,
        CLCTL_RESUME_IO = 5242946,
        CLCTL_FORCE_QUORUM = 5242950,
        CLCTL_INITIALIZE = 5242954,
        CLCTL_STATE_CHANGE_REASON = 5242958,
        CLCTL_PROVIDER_STATE_CHANGE = 5242962,
        CLCTL_LEAVING_GROUP = 5242966,
        CLCTL_JOINING_GROUP = 5242970,
        CLCTL_FSWITNESS_GET_EPOCH_INFO = 1048669,
        CLCTL_FSWITNESS_SET_EPOCH_INFO = 5242978,
        CLCTL_FSWITNESS_RELEASE_LOCK = 5242982,
        CLCTL_NETNAME_CREDS_NOTIFYCAM = 5242986,
        CLCTL_NOTIFY_QUORUM_STATUS = 5243006,
        CLCTL_NOTIFY_MONITOR_SHUTTING_DOWN = 1048705,
        CLCTL_UNDELETE = 5243014,
        CLCTL_GET_OPERATION_CONTEXT = 1057001,
        CLCTL_NOTIFY_OWNER_CHANGE = 5251362,
        CLCTL_VALIDATE_CHANGE_GROUP = 1057061,
        CLCTL_CHECK_DRAIN_VETO = 1057069,
        CLCTL_NOTIFY_DRAIN_COMPLETE = 1057073,
    };
    enum class CLUADMEX_OBJECT_TYPE : int32_t
    {
        CLUADMEX_OT_NONE = 0,
        CLUADMEX_OT_CLUSTER = 1,
        CLUADMEX_OT_NODE = 2,
        CLUADMEX_OT_GROUP = 3,
        CLUADMEX_OT_RESOURCE = 4,
        CLUADMEX_OT_RESOURCETYPE = 5,
        CLUADMEX_OT_NETWORK = 6,
        CLUADMEX_OT_NETINTERFACE = 7,
    };
    enum class CLUSCTL_AFFINITYRULE_CODES : int32_t
    {
        CLUSCTL_AFFINITYRULE_GET_COMMON_PROPERTIES = 150995033,
        CLUSCTL_AFFINITYRULE_GET_RO_COMMON_PROPERTIES = 150995029,
        CLUSCTL_AFFINITYRULE_SET_COMMON_PROPERTIES = 155189342,
        CLUSCTL_AFFINITYRULE_GET_ID = 150995001,
        CLUSCTL_AFFINITYRULE_GET_GROUPNAMES = 151006577,
    };
    enum class CLUSCTL_CLUSTER_CODES : int32_t
    {
        CLUSCTL_CLUSTER_UNKNOWN = 117440512,
        CLUSCTL_CLUSTER_GET_FQDN = 117440573,
        CLUSCTL_CLUSTER_SET_STORAGE_CONFIGURATION = 121635554,
        CLUSCTL_CLUSTER_GET_STORAGE_CONFIGURATION = 117441253,
        CLUSCTL_CLUSTER_GET_STORAGE_CONFIG_ATTRIBUTES = 117441257,
        CLUSCTL_CLUSTER_ENUM_COMMON_PROPERTIES = 117440593,
        CLUSCTL_CLUSTER_GET_RO_COMMON_PROPERTIES = 117440597,
        CLUSCTL_CLUSTER_GET_COMMON_PROPERTIES = 117440601,
        CLUSCTL_CLUSTER_SET_COMMON_PROPERTIES = 121634910,
        CLUSCTL_CLUSTER_VALIDATE_COMMON_PROPERTIES = 117440609,
        CLUSCTL_CLUSTER_ENUM_PRIVATE_PROPERTIES = 117440633,
        CLUSCTL_CLUSTER_GET_RO_PRIVATE_PROPERTIES = 117440637,
        CLUSCTL_CLUSTER_GET_PRIVATE_PROPERTIES = 117440641,
        CLUSCTL_CLUSTER_SET_PRIVATE_PROPERTIES = 121634950,
        CLUSCTL_CLUSTER_VALIDATE_PRIVATE_PROPERTIES = 117440649,
        CLUSCTL_CLUSTER_GET_COMMON_PROPERTY_FMTS = 117440613,
        CLUSCTL_CLUSTER_GET_PRIVATE_PROPERTY_FMTS = 117440653,
        CLUSCTL_CLUSTER_CHECK_VOTER_EVICT = 117440581,
        CLUSCTL_CLUSTER_CHECK_VOTER_DOWN = 117440585,
        CLUSCTL_CLUSTER_SHUTDOWN = 117440589,
        CLUSCTL_CLUSTER_BATCH_BLOCK_KEY = 117441086,
        CLUSCTL_CLUSTER_BATCH_UNBLOCK_KEY = 117441089,
        CLUSCTL_CLUSTER_GET_SHARED_VOLUME_ID = 117441169,
        CLUSCTL_CLUSTER_GET_CLUSDB_TIMESTAMP = 117441193,
        CLUSCTL_CLUSTER_GET_GUM_LOCK_OWNER = 117441209,
        CLUSCTL_CLUSTER_REMOVE_NODE = 121635566,
        CLUSCTL_CLUSTER_SET_ACCOUNT_ACCESS = 121635058,
        CLUSCTL_CLUSTER_CLEAR_NODE_CONNECTION_INFO = 121635590,
        CLUSCTL_CLUSTER_SET_DNS_DOMAIN = 121635594,
        CLUSCTL_CLUSTER_SET_CLUSTER_S2D_ENABLED = 121646434,
        CLUSCTL_CLUSTER_SET_CLUSTER_S2D_CACHE_METADATA_RESERVE_BYTES = 121646446,
        CLUSCTL_CLUSTER_STORAGE_RENAME_SHARED_VOLUME = 117452246,
        CLUSCTL_CLUSTER_STORAGE_RENAME_SHARED_VOLUME_GUID = 117452250,
        CLUSCTL_CLUSTER_RELOAD_AUTOLOGGER_CONFIG = 117452242,
        CLUSCTL_CLUSTER_ENUM_AFFINITY_RULE_NAMES = 117452253,
    };
    enum class CLUSCTL_GROUPSET_CODES : int32_t
    {
        CLUSCTL_GROUPSET_GET_COMMON_PROPERTIES = 134217817,
        CLUSCTL_GROUPSET_GET_RO_COMMON_PROPERTIES = 134217813,
        CLUSCTL_GROUPSET_SET_COMMON_PROPERTIES = 138412126,
        CLUSCTL_GROUPSET_GET_GROUPS = 134229361,
        CLUSCTL_GROUPSET_GET_PROVIDER_GROUPS = 134229365,
        CLUSCTL_GROUPSET_GET_PROVIDER_GROUPSETS = 134229369,
        CLUSCTL_GROUP_GET_PROVIDER_GROUPS = 134229373,
        CLUSCTL_GROUP_GET_PROVIDER_GROUPSETS = 134229377,
        CLUSCTL_GROUPSET_GET_ID = 134217785,
    };
    enum class CLUSCTL_GROUP_CODES : int32_t
    {
        CLUSCTL_GROUP_UNKNOWN = 50331648,
        CLUSCTL_GROUP_GET_CHARACTERISTICS = 50331653,
        CLUSCTL_GROUP_GET_FLAGS = 50331657,
        CLUSCTL_GROUP_GET_NAME = 50331689,
        CLUSCTL_GROUP_GET_ID = 50331705,
        CLUSCTL_GROUP_ENUM_COMMON_PROPERTIES = 50331729,
        CLUSCTL_GROUP_GET_RO_COMMON_PROPERTIES = 50331733,
        CLUSCTL_GROUP_GET_COMMON_PROPERTIES = 50331737,
        CLUSCTL_GROUP_SET_COMMON_PROPERTIES = 54526046,
        CLUSCTL_GROUP_VALIDATE_COMMON_PROPERTIES = 50331745,
        CLUSCTL_GROUP_ENUM_PRIVATE_PROPERTIES = 50331769,
        CLUSCTL_GROUP_GET_RO_PRIVATE_PROPERTIES = 50331773,
        CLUSCTL_GROUP_GET_PRIVATE_PROPERTIES = 50331777,
        CLUSCTL_GROUP_SET_PRIVATE_PROPERTIES = 54526086,
        CLUSCTL_GROUP_VALIDATE_PRIVATE_PROPERTIES = 50331785,
        CLUSCTL_GROUP_QUERY_DELETE = 50332089,
        CLUSCTL_GROUP_GET_COMMON_PROPERTY_FMTS = 50331749,
        CLUSCTL_GROUP_GET_PRIVATE_PROPERTY_FMTS = 50331789,
        CLUSCTL_GROUP_GET_FAILURE_INFO = 50331673,
        CLUSCTL_GROUP_GET_LAST_MOVE_TIME = 50332377,
        CLUSCTL_GROUP_SET_CCF_FROM_MASTER = 54537606,
    };
    enum class CLUSCTL_NETINTERFACE_CODES : int32_t
    {
        CLUSCTL_NETINTERFACE_UNKNOWN = 100663296,
        CLUSCTL_NETINTERFACE_GET_CHARACTERISTICS = 100663301,
        CLUSCTL_NETINTERFACE_GET_FLAGS = 100663305,
        CLUSCTL_NETINTERFACE_GET_NAME = 100663337,
        CLUSCTL_NETINTERFACE_GET_ID = 100663353,
        CLUSCTL_NETINTERFACE_GET_NODE = 100663345,
        CLUSCTL_NETINTERFACE_GET_NETWORK = 100663349,
        CLUSCTL_NETINTERFACE_ENUM_COMMON_PROPERTIES = 100663377,
        CLUSCTL_NETINTERFACE_GET_RO_COMMON_PROPERTIES = 100663381,
        CLUSCTL_NETINTERFACE_GET_COMMON_PROPERTIES = 100663385,
        CLUSCTL_NETINTERFACE_SET_COMMON_PROPERTIES = 104857694,
        CLUSCTL_NETINTERFACE_VALIDATE_COMMON_PROPERTIES = 100663393,
        CLUSCTL_NETINTERFACE_ENUM_PRIVATE_PROPERTIES = 100663417,
        CLUSCTL_NETINTERFACE_GET_RO_PRIVATE_PROPERTIES = 100663421,
        CLUSCTL_NETINTERFACE_GET_PRIVATE_PROPERTIES = 100663425,
        CLUSCTL_NETINTERFACE_SET_PRIVATE_PROPERTIES = 104857734,
        CLUSCTL_NETINTERFACE_VALIDATE_PRIVATE_PROPERTIES = 100663433,
        CLUSCTL_NETINTERFACE_GET_COMMON_PROPERTY_FMTS = 100663397,
        CLUSCTL_NETINTERFACE_GET_PRIVATE_PROPERTY_FMTS = 100663437,
    };
    enum class CLUSCTL_NETWORK_CODES : int32_t
    {
        CLUSCTL_NETWORK_UNKNOWN = 83886080,
        CLUSCTL_NETWORK_GET_CHARACTERISTICS = 83886085,
        CLUSCTL_NETWORK_GET_FLAGS = 83886089,
        CLUSCTL_NETWORK_GET_NAME = 83886121,
        CLUSCTL_NETWORK_GET_ID = 83886137,
        CLUSCTL_NETWORK_ENUM_COMMON_PROPERTIES = 83886161,
        CLUSCTL_NETWORK_GET_RO_COMMON_PROPERTIES = 83886165,
        CLUSCTL_NETWORK_GET_COMMON_PROPERTIES = 83886169,
        CLUSCTL_NETWORK_SET_COMMON_PROPERTIES = 88080478,
        CLUSCTL_NETWORK_VALIDATE_COMMON_PROPERTIES = 83886177,
        CLUSCTL_NETWORK_ENUM_PRIVATE_PROPERTIES = 83886201,
        CLUSCTL_NETWORK_GET_RO_PRIVATE_PROPERTIES = 83886205,
        CLUSCTL_NETWORK_GET_PRIVATE_PROPERTIES = 83886209,
        CLUSCTL_NETWORK_SET_PRIVATE_PROPERTIES = 88080518,
        CLUSCTL_NETWORK_VALIDATE_PRIVATE_PROPERTIES = 83886217,
        CLUSCTL_NETWORK_GET_COMMON_PROPERTY_FMTS = 83886181,
        CLUSCTL_NETWORK_GET_PRIVATE_PROPERTY_FMTS = 83886221,
    };
    enum class CLUSCTL_NODE_CODES : int32_t
    {
        CLUSCTL_NODE_UNKNOWN = 67108864,
        CLUSCTL_NODE_GET_CHARACTERISTICS = 67108869,
        CLUSCTL_NODE_GET_FLAGS = 67108873,
        CLUSCTL_NODE_GET_NAME = 67108905,
        CLUSCTL_NODE_GET_ID = 67108921,
        CLUSCTL_NODE_ENUM_COMMON_PROPERTIES = 67108945,
        CLUSCTL_NODE_GET_RO_COMMON_PROPERTIES = 67108949,
        CLUSCTL_NODE_GET_COMMON_PROPERTIES = 67108953,
        CLUSCTL_NODE_SET_COMMON_PROPERTIES = 71303262,
        CLUSCTL_NODE_VALIDATE_COMMON_PROPERTIES = 67108961,
        CLUSCTL_NODE_ENUM_PRIVATE_PROPERTIES = 67108985,
        CLUSCTL_NODE_GET_RO_PRIVATE_PROPERTIES = 67108989,
        CLUSCTL_NODE_GET_PRIVATE_PROPERTIES = 67108993,
        CLUSCTL_NODE_SET_PRIVATE_PROPERTIES = 71303302,
        CLUSCTL_NODE_VALIDATE_PRIVATE_PROPERTIES = 67109001,
        CLUSCTL_NODE_GET_COMMON_PROPERTY_FMTS = 67108965,
        CLUSCTL_NODE_GET_PRIVATE_PROPERTY_FMTS = 67109005,
        CLUSCTL_NODE_GET_CLUSTER_SERVICE_ACCOUNT_NAME = 67108929,
        CLUSCTL_NODE_GET_STUCK_NODES = 67109565,
        CLUSCTL_NODE_INJECT_GEM_FAULT = 67109569,
        CLUSCTL_NODE_INTRODUCE_GEM_REPAIR_DELAY = 67109573,
        CLUSCTL_NODE_SEND_DUMMY_GEM_MESSAGES = 67109577,
        CLUSCTL_NODE_BLOCK_GEM_SEND_RECV = 67109581,
        CLUSCTL_NODE_GET_GEMID_VECTOR = 67109585,
    };
    enum class CLUSCTL_RESOURCE_CODES : int32_t
    {
        CLUSCTL_RESOURCE_UNKNOWN = 16777216,
        CLUSCTL_RESOURCE_GET_CHARACTERISTICS = 16777221,
        CLUSCTL_RESOURCE_GET_FLAGS = 16777225,
        CLUSCTL_RESOURCE_GET_CLASS_INFO = 16777229,
        CLUSCTL_RESOURCE_GET_REQUIRED_DEPENDENCIES = 16777233,
        CLUSCTL_RESOURCE_GET_NAME = 16777257,
        CLUSCTL_RESOURCE_GET_ID = 16777273,
        CLUSCTL_RESOURCE_GET_RESOURCE_TYPE = 16777261,
        CLUSCTL_RESOURCE_ENUM_COMMON_PROPERTIES = 16777297,
        CLUSCTL_RESOURCE_GET_RO_COMMON_PROPERTIES = 16777301,
        CLUSCTL_RESOURCE_GET_COMMON_PROPERTIES = 16777305,
        CLUSCTL_RESOURCE_SET_COMMON_PROPERTIES = 20971614,
        CLUSCTL_RESOURCE_VALIDATE_COMMON_PROPERTIES = 16777313,
        CLUSCTL_RESOURCE_GET_COMMON_PROPERTY_FMTS = 16777317,
        CLUSCTL_RESOURCE_ENUM_PRIVATE_PROPERTIES = 16777337,
        CLUSCTL_RESOURCE_GET_RO_PRIVATE_PROPERTIES = 16777341,
        CLUSCTL_RESOURCE_GET_PRIVATE_PROPERTIES = 16777345,
        CLUSCTL_RESOURCE_SET_PRIVATE_PROPERTIES = 20971654,
        CLUSCTL_RESOURCE_VALIDATE_PRIVATE_PROPERTIES = 16777353,
        CLUSCTL_RESOURCE_GET_PRIVATE_PROPERTY_FMTS = 16777357,
        CLUSCTL_RESOURCE_ADD_REGISTRY_CHECKPOINT = 20971682,
        CLUSCTL_RESOURCE_DELETE_REGISTRY_CHECKPOINT = 20971686,
        CLUSCTL_RESOURCE_GET_REGISTRY_CHECKPOINTS = 16777385,
        CLUSCTL_RESOURCE_ADD_CRYPTO_CHECKPOINT = 20971694,
        CLUSCTL_RESOURCE_DELETE_CRYPTO_CHECKPOINT = 20971698,
        CLUSCTL_RESOURCE_ADD_CRYPTO_CHECKPOINT_EX = 20972246,
        CLUSCTL_RESOURCE_GET_CRYPTO_CHECKPOINTS = 16777397,
        CLUSCTL_RESOURCE_GET_LOADBAL_PROCESS_LIST = 16777417,
        CLUSCTL_RESOURCE_GET_NETWORK_NAME = 16777577,
        CLUSCTL_RESOURCE_NETNAME_GET_VIRTUAL_SERVER_TOKEN = 16777581,
        CLUSCTL_RESOURCE_NETNAME_SET_PWD_INFO = 16777594,
        CLUSCTL_RESOURCE_NETNAME_SET_PWD_INFOEX = 16778010,
        CLUSCTL_RESOURCE_NETNAME_DELETE_CO = 16777598,
        CLUSCTL_RESOURCE_NETNAME_VALIDATE_VCO = 16777601,
        CLUSCTL_RESOURCE_NETNAME_RESET_VCO = 16777605,
        CLUSCTL_RESOURCE_NETNAME_REPAIR_VCO = 16777613,
        CLUSCTL_RESOURCE_NETNAME_REGISTER_DNS_RECORDS = 16777586,
        CLUSCTL_RESOURCE_GET_DNS_NAME = 16777589,
        CLUSCTL_RESOURCE_STORAGE_GET_DISK_INFO = 16777617,
        CLUSCTL_RESOURCE_STORAGE_GET_DISK_NUMBER_INFO = 16777633,
        CLUSCTL_RESOURCE_STORAGE_IS_PATH_VALID = 16777625,
        CLUSCTL_RESOURCE_QUERY_DELETE = 16777657,
        CLUSCTL_RESOURCE_UPGRADE_DLL = 20971706,
        CLUSCTL_RESOURCE_IPADDRESS_RENEW_LEASE = 20971966,
        CLUSCTL_RESOURCE_IPADDRESS_RELEASE_LEASE = 20971970,
        CLUSCTL_RESOURCE_ADD_REGISTRY_CHECKPOINT_64BIT = 20971710,
        CLUSCTL_RESOURCE_ADD_REGISTRY_CHECKPOINT_32BIT = 20971714,
        CLUSCTL_RESOURCE_QUERY_MAINTENANCE_MODE = 16777697,
        CLUSCTL_RESOURCE_SET_MAINTENANCE_MODE = 20972006,
        CLUSCTL_RESOURCE_STORAGE_SET_DRIVELETTER = 20972010,
        CLUSCTL_RESOURCE_STORAGE_GET_DISK_INFO_EX = 16777713,
        CLUSCTL_RESOURCE_STORAGE_GET_DISK_INFO_EX2 = 16777721,
        CLUSCTL_RESOURCE_STORAGE_GET_MOUNTPOINTS = 16777745,
        CLUSCTL_RESOURCE_STORAGE_GET_DIRTY = 16777753,
        CLUSCTL_RESOURCE_STORAGE_GET_SHARED_VOLUME_INFO = 16777765,
        CLUSCTL_RESOURCE_SET_CSV_MAINTENANCE_MODE = 20972182,
        CLUSCTL_RESOURCE_ENABLE_SHARED_VOLUME_DIRECTIO = 20972170,
        CLUSCTL_RESOURCE_DISABLE_SHARED_VOLUME_DIRECTIO = 20972174,
        CLUSCTL_RESOURCE_SET_SHARED_VOLUME_BACKUP_MODE = 20972186,
        CLUSCTL_RESOURCE_STORAGE_GET_SHARED_VOLUME_PARTITION_NAMES = 16777885,
        CLUSCTL_RESOURCE_GET_FAILURE_INFO = 16777241,
        CLUSCTL_RESOURCE_STORAGE_GET_DISKID = 16777733,
        CLUSCTL_RESOURCE_STORAGE_GET_SHARED_VOLUME_STATES = 20972194,
        CLUSCTL_RESOURCE_STORAGE_IS_SHARED_VOLUME = 16777893,
        CLUSCTL_RESOURCE_IS_QUORUM_BLOCKED = 16777905,
        CLUSCTL_RESOURCE_POOL_GET_DRIVE_INFO = 16777909,
        CLUSCTL_RESOURCE_RLUA_GET_VIRTUAL_SERVER_TOKEN = 16777581,
        CLUSCTL_RESOURCE_RLUA_SET_PWD_INFO = 16777594,
        CLUSCTL_RESOURCE_RLUA_SET_PWD_INFOEX = 16778010,
        CLUSCTL_RESOURCE_DELETE = 22020102,
        CLUSCTL_RESOURCE_UNDELETE = 22020230,
        CLUSCTL_RESOURCE_INSTALL_NODE = 22020106,
        CLUSCTL_RESOURCE_EVICT_NODE = 22020110,
        CLUSCTL_RESOURCE_ADD_DEPENDENCY = 22020114,
        CLUSCTL_RESOURCE_REMOVE_DEPENDENCY = 22020118,
        CLUSCTL_RESOURCE_ADD_OWNER = 22020122,
        CLUSCTL_RESOURCE_REMOVE_OWNER = 22020126,
        CLUSCTL_RESOURCE_SET_NAME = 22020134,
        CLUSCTL_RESOURCE_CLUSTER_NAME_CHANGED = 22020138,
        CLUSCTL_RESOURCE_CLUSTER_VERSION_CHANGED = 22020142,
        CLUSCTL_RESOURCE_FORCE_QUORUM = 22020166,
        CLUSCTL_RESOURCE_INITIALIZE = 22020170,
        CLUSCTL_RESOURCE_STATE_CHANGE_REASON = 22020174,
        CLUSCTL_RESOURCE_PROVIDER_STATE_CHANGE = 22020178,
        CLUSCTL_RESOURCE_LEAVING_GROUP = 22020182,
        CLUSCTL_RESOURCE_JOINING_GROUP = 22020186,
        CLUSCTL_RESOURCE_FSWITNESS_GET_EPOCH_INFO = 17825885,
        CLUSCTL_RESOURCE_FSWITNESS_SET_EPOCH_INFO = 22020194,
        CLUSCTL_RESOURCE_FSWITNESS_RELEASE_LOCK = 22020198,
        CLUSCTL_RESOURCE_NETNAME_CREDS_NOTIFYCAM = 22020202,
        CLUSCTL_RESOURCE_GET_OPERATION_CONTEXT = 17834217,
        CLUSCTL_RESOURCE_RW_MODIFY_NOOP = 20972206,
        CLUSCTL_RESOURCE_NOTIFY_QUORUM_STATUS = 22020222,
        CLUSCTL_RESOURCE_NOTIFY_OWNER_CHANGE = 22028578,
        CLUSCTL_RESOURCE_VALIDATE_CHANGE_GROUP = 17834277,
        CLUSCTL_RESOURCE_STORAGE_RENAME_SHARED_VOLUME = 16788950,
        CLUSCTL_RESOURCE_STORAGE_RENAME_SHARED_VOLUME_GUID = 16788954,
        CLUSCTL_CLOUD_WITNESS_RESOURCE_UPDATE_TOKEN = 20979942,
        CLUSCTL_CLOUD_WITNESS_RESOURCE_UPDATE_KEY = 20979958,
        CLUSCTL_RESOURCE_PREPARE_UPGRADE = 20979946,
        CLUSCTL_RESOURCE_UPGRADE_COMPLETED = 20979950,
        CLUSCTL_RESOURCE_GET_STATE_CHANGE_TIME = 16788829,
        CLUSCTL_RESOURCE_GET_INFRASTRUCTURE_SOFS_BUFFER = 16788873,
        CLUSCTL_RESOURCE_SET_INFRASTRUCTURE_SOFS_BUFFER = 20983182,
        CLUSCTL_RESOURCE_SCALEOUT_COMMAND = 20983190,
        CLUSCTL_RESOURCE_SCALEOUT_CONTROL = 20983194,
        CLUSCTL_RESOURCE_SCALEOUT_GET_CLUSTERS = 20983197,
        CLUSCTL_RESOURCE_CHECK_DRAIN_VETO = 17834285,
        CLUSCTL_RESOURCE_NOTIFY_DRAIN_COMPLETE = 17834289,
    };
    enum class CLUSCTL_RESOURCE_TYPE_CODES : int32_t
    {
        CLUSCTL_RESOURCE_TYPE_UNKNOWN = 33554432,
        CLUSCTL_RESOURCE_TYPE_GET_CHARACTERISTICS = 33554437,
        CLUSCTL_RESOURCE_TYPE_GET_FLAGS = 33554441,
        CLUSCTL_RESOURCE_TYPE_GET_CLASS_INFO = 33554445,
        CLUSCTL_RESOURCE_TYPE_GET_REQUIRED_DEPENDENCIES = 33554449,
        CLUSCTL_RESOURCE_TYPE_GET_ARB_TIMEOUT = 33554453,
        CLUSCTL_RESOURCE_TYPE_ENUM_COMMON_PROPERTIES = 33554513,
        CLUSCTL_RESOURCE_TYPE_GET_RO_COMMON_PROPERTIES = 33554517,
        CLUSCTL_RESOURCE_TYPE_GET_COMMON_PROPERTIES = 33554521,
        CLUSCTL_RESOURCE_TYPE_VALIDATE_COMMON_PROPERTIES = 33554529,
        CLUSCTL_RESOURCE_TYPE_SET_COMMON_PROPERTIES = 37748830,
        CLUSCTL_RESOURCE_TYPE_GET_COMMON_PROPERTY_FMTS = 33554533,
        CLUSCTL_RESOURCE_TYPE_GET_COMMON_RESOURCE_PROPERTY_FMTS = 33554537,
        CLUSCTL_RESOURCE_TYPE_ENUM_PRIVATE_PROPERTIES = 33554553,
        CLUSCTL_RESOURCE_TYPE_GET_RO_PRIVATE_PROPERTIES = 33554557,
        CLUSCTL_RESOURCE_TYPE_GET_PRIVATE_PROPERTIES = 33554561,
        CLUSCTL_RESOURCE_TYPE_SET_PRIVATE_PROPERTIES = 37748870,
        CLUSCTL_RESOURCE_TYPE_VALIDATE_PRIVATE_PROPERTIES = 33554569,
        CLUSCTL_RESOURCE_TYPE_GET_PRIVATE_PROPERTY_FMTS = 33554573,
        CLUSCTL_RESOURCE_TYPE_GET_PRIVATE_RESOURCE_PROPERTY_FMTS = 33554577,
        CLUSCTL_RESOURCE_TYPE_GET_REGISTRY_CHECKPOINTS = 33554601,
        CLUSCTL_RESOURCE_TYPE_GET_CRYPTO_CHECKPOINTS = 33554613,
        CLUSCTL_RESOURCE_TYPE_STORAGE_GET_AVAILABLE_DISKS = 33554837,
        CLUSCTL_RESOURCE_TYPE_STORAGE_SYNC_CLUSDISK_DB = 37749150,
        CLUSCTL_RESOURCE_TYPE_NETNAME_VALIDATE_NETNAME = 33554997,
        CLUSCTL_RESOURCE_TYPE_NETNAME_GET_OU_FOR_VCO = 37749358,
        CLUSCTL_RESOURCE_TYPE_GEN_APP_VALIDATE_PATH = 33554993,
        CLUSCTL_RESOURCE_TYPE_GEN_APP_VALIDATE_DIRECTORY = 33555001,
        CLUSCTL_RESOURCE_TYPE_GEN_SCRIPT_VALIDATE_PATH = 33554993,
        CLUSCTL_RESOURCE_TYPE_QUERY_DELETE = 33554873,
        CLUSCTL_RESOURCE_TYPE_STORAGE_GET_DRIVELETTERS = 33554925,
        CLUSCTL_RESOURCE_TYPE_STORAGE_GET_AVAILABLE_DISKS_EX = 33554933,
        CLUSCTL_RESOURCE_TYPE_STORAGE_REMAP_DRIVELETTER = 33554945,
        CLUSCTL_RESOURCE_TYPE_STORAGE_GET_DISKID = 33554949,
        CLUSCTL_RESOURCE_TYPE_STORAGE_GET_RESOURCEID = 33554989,
        CLUSCTL_RESOURCE_TYPE_STORAGE_IS_CLUSTERABLE = 33554953,
        CLUSCTL_RESOURCE_TYPE_STORAGE_REMOVE_VM_OWNERSHIP = 37749262,
        CLUSCTL_RESOURCE_TYPE_STORAGE_IS_CSV_FILE = 16777769,
        CLUSCTL_RESOURCE_TYPE_WITNESS_VALIDATE_PATH = 33554993,
        CLUSCTL_RESOURCE_TYPE_INSTALL_NODE = 38797322,
        CLUSCTL_RESOURCE_TYPE_EVICT_NODE = 38797326,
        CLUSCTL_RESOURCE_TYPE_CLUSTER_VERSION_CHANGED = 38797358,
        CLUSCTL_RESOURCE_TYPE_FIXUP_ON_UPGRADE = 38797362,
        CLUSCTL_RESOURCE_TYPE_STARTING_PHASE1 = 38797366,
        CLUSCTL_RESOURCE_TYPE_STARTING_PHASE2 = 38797370,
        CLUSCTL_RESOURCE_TYPE_HOLD_IO = 38797374,
        CLUSCTL_RESOURCE_TYPE_RESUME_IO = 38797378,
        CLUSCTL_RESOURCE_TYPE_STORAGE_GET_AVAILABLE_DISKS_EX2_INT = 33562593,
        CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_ELIGIBLE_LOGDISKS = 33562953,
        CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_ELIGIBLE_TARGET_DATADISKS = 33562957,
        CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_ELIGIBLE_SOURCE_DATADISKS = 33562961,
        CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_REPLICATED_DISKS = 33562965,
        CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_REPLICA_VOLUMES = 33562969,
        CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_LOG_VOLUME = 33562973,
        CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_RESOURCE_GROUP = 33562977,
        CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_REPLICATED_PARTITION_INFO = 33562981,
        CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_LOG_INFO = 33562949,
        CLUSCTL_CLOUD_WITNESS_RESOURCE_TYPE_VALIDATE_CREDENTIALS = 33562849,
        CLUSCTL_CLOUD_WITNESS_RESOURCE_TYPE_VALIDATE_CREDENTIALS_WITH_KEY = 33562865,
        CLUSCTL_RESOURCE_TYPE_PREPARE_UPGRADE = 37757162,
        CLUSCTL_RESOURCE_TYPE_UPGRADE_COMPLETED = 37757166,
        CLUSCTL_RESOURCE_TYPE_NOTIFY_MONITOR_SHUTTING_DOWN = 34603137,
        CLUSCTL_RESOURCE_TYPE_CHECK_DRAIN_VETO = 34611501,
        CLUSCTL_RESOURCE_TYPE_NOTIFY_DRAIN_COMPLETE = 34611505,
    };
    enum class CLUSGROUP_TYPE : int32_t
    {
        ClusGroupTypeCoreCluster = 1,
        ClusGroupTypeAvailableStorage = 2,
        ClusGroupTypeTemporary = 3,
        ClusGroupTypeSharedVolume = 4,
        ClusGroupTypeStoragePool = 5,
        ClusGroupTypeFileServer = 100,
        ClusGroupTypePrintServer = 101,
        ClusGroupTypeDhcpServer = 102,
        ClusGroupTypeDtc = 103,
        ClusGroupTypeMsmq = 104,
        ClusGroupTypeWins = 105,
        ClusGroupTypeStandAloneDfs = 106,
        ClusGroupTypeGenericApplication = 107,
        ClusGroupTypeGenericService = 108,
        ClusGroupTypeGenericScript = 109,
        ClusGroupTypeIScsiNameService = 110,
        ClusGroupTypeVirtualMachine = 111,
        ClusGroupTypeTsSessionBroker = 112,
        ClusGroupTypeIScsiTarget = 113,
        ClusGroupTypeScaleoutFileServer = 114,
        ClusGroupTypeVMReplicaBroker = 115,
        ClusGroupTypeTaskScheduler = 116,
        ClusGroupTypeClusterUpdateAgent = 117,
        ClusGroupTypeScaleoutCluster = 118,
        ClusGroupTypeStorageReplica = 119,
        ClusGroupTypeVMReplicaCoordinator = 120,
        ClusGroupTypeCrossClusterOrchestrator = 121,
        ClusGroupTypeInfrastructureFileServer = 122,
        ClusGroupTypeUnknown = 9999,
    };
    enum class CLUSPROP_IPADDR_ENABLENETBIOS : int32_t
    {
        CLUSPROP_IPADDR_ENABLENETBIOS_DISABLED = 0,
        CLUSPROP_IPADDR_ENABLENETBIOS_ENABLED = 1,
        CLUSPROP_IPADDR_ENABLENETBIOS_TRACK_NIC = 2,
    };
    enum class CLUSPROP_PIFLAGS : int32_t
    {
        CLUSPROP_PIFLAG_STICKY = 1,
        CLUSPROP_PIFLAG_REMOVABLE = 2,
        CLUSPROP_PIFLAG_USABLE = 4,
        CLUSPROP_PIFLAG_DEFAULT_QUORUM = 8,
        CLUSPROP_PIFLAG_USABLE_FOR_CSV = 16,
        CLUSPROP_PIFLAG_ENCRYPTION_ENABLED = 32,
        CLUSPROP_PIFLAG_RAW = 64,
        CLUSPROP_PIFLAG_UNKNOWN = -2147483648,
    };
    enum class CLUSTERSET_OBJECT_TYPE : int32_t
    {
        CLUSTERSET_OBJECT_TYPE_NONE = 0,
        CLUSTERSET_OBJECT_TYPE_MEMBER = 1,
        CLUSTERSET_OBJECT_TYPE_WORKLOAD = 2,
        CLUSTERSET_OBJECT_TYPE_DATABASE = 3,
    };
    enum class CLUSTER_CHANGE : int32_t
    {
        CLUSTER_CHANGE_NODE_STATE = 1,
        CLUSTER_CHANGE_NODE_DELETED = 2,
        CLUSTER_CHANGE_NODE_ADDED = 4,
        CLUSTER_CHANGE_NODE_PROPERTY = 8,
        CLUSTER_CHANGE_REGISTRY_NAME = 16,
        CLUSTER_CHANGE_REGISTRY_ATTRIBUTES = 32,
        CLUSTER_CHANGE_REGISTRY_VALUE = 64,
        CLUSTER_CHANGE_REGISTRY_SUBTREE = 128,
        CLUSTER_CHANGE_RESOURCE_STATE = 256,
        CLUSTER_CHANGE_RESOURCE_DELETED = 512,
        CLUSTER_CHANGE_RESOURCE_ADDED = 1024,
        CLUSTER_CHANGE_RESOURCE_PROPERTY = 2048,
        CLUSTER_CHANGE_GROUP_STATE = 4096,
        CLUSTER_CHANGE_GROUP_DELETED = 8192,
        CLUSTER_CHANGE_GROUP_ADDED = 16384,
        CLUSTER_CHANGE_GROUP_PROPERTY = 32768,
        CLUSTER_CHANGE_RESOURCE_TYPE_DELETED = 65536,
        CLUSTER_CHANGE_RESOURCE_TYPE_ADDED = 131072,
        CLUSTER_CHANGE_RESOURCE_TYPE_PROPERTY = 262144,
        CLUSTER_CHANGE_CLUSTER_RECONNECT = 524288,
        CLUSTER_CHANGE_NETWORK_STATE = 1048576,
        CLUSTER_CHANGE_NETWORK_DELETED = 2097152,
        CLUSTER_CHANGE_NETWORK_ADDED = 4194304,
        CLUSTER_CHANGE_NETWORK_PROPERTY = 8388608,
        CLUSTER_CHANGE_NETINTERFACE_STATE = 16777216,
        CLUSTER_CHANGE_NETINTERFACE_DELETED = 33554432,
        CLUSTER_CHANGE_NETINTERFACE_ADDED = 67108864,
        CLUSTER_CHANGE_NETINTERFACE_PROPERTY = 134217728,
        CLUSTER_CHANGE_QUORUM_STATE = 268435456,
        CLUSTER_CHANGE_CLUSTER_STATE = 536870912,
        CLUSTER_CHANGE_CLUSTER_PROPERTY = 1073741824,
        CLUSTER_CHANGE_HANDLE_CLOSE = -2147483648,
        CLUSTER_CHANGE_ALL = -1,
    };
    enum class CLUSTER_CHANGE_CLUSTER_V2 : int32_t
    {
        CLUSTER_CHANGE_CLUSTER_RECONNECT_V2 = 1,
        CLUSTER_CHANGE_CLUSTER_STATE_V2 = 2,
        CLUSTER_CHANGE_CLUSTER_GROUP_ADDED_V2 = 4,
        CLUSTER_CHANGE_CLUSTER_HANDLE_CLOSE_V2 = 8,
        CLUSTER_CHANGE_CLUSTER_NETWORK_ADDED_V2 = 16,
        CLUSTER_CHANGE_CLUSTER_NODE_ADDED_V2 = 32,
        CLUSTER_CHANGE_CLUSTER_RESOURCE_TYPE_ADDED_V2 = 64,
        CLUSTER_CHANGE_CLUSTER_COMMON_PROPERTY_V2 = 128,
        CLUSTER_CHANGE_CLUSTER_PRIVATE_PROPERTY_V2 = 256,
        CLUSTER_CHANGE_CLUSTER_LOST_NOTIFICATIONS_V2 = 512,
        CLUSTER_CHANGE_CLUSTER_RENAME_V2 = 1024,
        CLUSTER_CHANGE_CLUSTER_MEMBERSHIP_V2 = 2048,
        CLUSTER_CHANGE_CLUSTER_UPGRADED_V2 = 4096,
        CLUSTER_CHANGE_CLUSTER_ALL_V2 = 8191,
    };
    enum class CLUSTER_CHANGE_GROUPSET_V2 : int32_t
    {
        CLUSTER_CHANGE_GROUPSET_DELETED_v2 = 1,
        CLUSTER_CHANGE_GROUPSET_COMMON_PROPERTY_V2 = 2,
        CLUSTER_CHANGE_GROUPSET_PRIVATE_PROPERTY_V2 = 4,
        CLUSTER_CHANGE_GROUPSET_STATE_V2 = 8,
        CLUSTER_CHANGE_GROUPSET_GROUP_ADDED = 16,
        CLUSTER_CHANGE_GROUPSET_GROUP_REMOVED = 32,
        CLUSTER_CHANGE_GROUPSET_DEPENDENCIES_V2 = 64,
        CLUSTER_CHANGE_GROUPSET_DEPENDENTS_V2 = 128,
        CLUSTER_CHANGE_GROUPSET_HANDLE_CLOSE_v2 = 256,
        CLUSTER_CHANGE_GROUPSET_ALL_V2 = 511,
    };
    enum class CLUSTER_CHANGE_GROUP_V2 : int32_t
    {
        CLUSTER_CHANGE_GROUP_DELETED_V2 = 1,
        CLUSTER_CHANGE_GROUP_COMMON_PROPERTY_V2 = 2,
        CLUSTER_CHANGE_GROUP_PRIVATE_PROPERTY_V2 = 4,
        CLUSTER_CHANGE_GROUP_STATE_V2 = 8,
        CLUSTER_CHANGE_GROUP_OWNER_NODE_V2 = 16,
        CLUSTER_CHANGE_GROUP_PREFERRED_OWNERS_V2 = 32,
        CLUSTER_CHANGE_GROUP_RESOURCE_ADDED_V2 = 64,
        CLUSTER_CHANGE_GROUP_RESOURCE_GAINED_V2 = 128,
        CLUSTER_CHANGE_GROUP_RESOURCE_LOST_V2 = 256,
        CLUSTER_CHANGE_GROUP_HANDLE_CLOSE_V2 = 512,
        CLUSTER_CHANGE_GROUP_ALL_V2 = 1023,
    };
    enum class CLUSTER_CHANGE_NETINTERFACE_V2 : int32_t
    {
        CLUSTER_CHANGE_NETINTERFACE_DELETED_V2 = 1,
        CLUSTER_CHANGE_NETINTERFACE_COMMON_PROPERTY_V2 = 2,
        CLUSTER_CHANGE_NETINTERFACE_PRIVATE_PROPERTY_V2 = 4,
        CLUSTER_CHANGE_NETINTERFACE_STATE_V2 = 8,
        CLUSTER_CHANGE_NETINTERFACE_HANDLE_CLOSE_V2 = 16,
        CLUSTER_CHANGE_NETINTERFACE_ALL_V2 = 31,
    };
    enum class CLUSTER_CHANGE_NETWORK_V2 : int32_t
    {
        CLUSTER_CHANGE_NETWORK_DELETED_V2 = 1,
        CLUSTER_CHANGE_NETWORK_COMMON_PROPERTY_V2 = 2,
        CLUSTER_CHANGE_NETWORK_PRIVATE_PROPERTY_V2 = 4,
        CLUSTER_CHANGE_NETWORK_STATE_V2 = 8,
        CLUSTER_CHANGE_NETWORK_HANDLE_CLOSE_V2 = 16,
        CLUSTER_CHANGE_NETWORK_ALL_V2 = 31,
    };
    enum class CLUSTER_CHANGE_NODE_UPGRADE_PHASE_V2 : int32_t
    {
        CLUSTER_CHANGE_UPGRADE_NODE_PREPARE = 1,
        CLUSTER_CHANGE_UPGRADE_NODE_COMMIT = 2,
        CLUSTER_CHANGE_UPGRADE_NODE_POSTCOMMIT = 4,
        CLUSTER_CHANGE_UPGRADE_ALL = 7,
    };
    enum class CLUSTER_CHANGE_NODE_V2 : int32_t
    {
        CLUSTER_CHANGE_NODE_NETINTERFACE_ADDED_V2 = 1,
        CLUSTER_CHANGE_NODE_DELETED_V2 = 2,
        CLUSTER_CHANGE_NODE_COMMON_PROPERTY_V2 = 4,
        CLUSTER_CHANGE_NODE_PRIVATE_PROPERTY_V2 = 8,
        CLUSTER_CHANGE_NODE_STATE_V2 = 16,
        CLUSTER_CHANGE_NODE_GROUP_GAINED_V2 = 32,
        CLUSTER_CHANGE_NODE_GROUP_LOST_V2 = 64,
        CLUSTER_CHANGE_NODE_HANDLE_CLOSE_V2 = 128,
        CLUSTER_CHANGE_NODE_ALL_V2 = 255,
    };
    enum class CLUSTER_CHANGE_QUORUM_V2 : int32_t
    {
        CLUSTER_CHANGE_QUORUM_STATE_V2 = 1,
        CLUSTER_CHANGE_QUORUM_ALL_V2 = 1,
    };
    enum class CLUSTER_CHANGE_REGISTRY_V2 : int32_t
    {
        CLUSTER_CHANGE_REGISTRY_ATTRIBUTES_V2 = 1,
        CLUSTER_CHANGE_REGISTRY_NAME_V2 = 2,
        CLUSTER_CHANGE_REGISTRY_SUBTREE_V2 = 4,
        CLUSTER_CHANGE_REGISTRY_VALUE_V2 = 8,
        CLUSTER_CHANGE_REGISTRY_HANDLE_CLOSE_V2 = 16,
        CLUSTER_CHANGE_REGISTRY_ALL_V2 = 31,
    };
    enum class CLUSTER_CHANGE_RESOURCE_TYPE_V2 : int32_t
    {
        CLUSTER_CHANGE_RESOURCE_TYPE_DELETED_V2 = 1,
        CLUSTER_CHANGE_RESOURCE_TYPE_COMMON_PROPERTY_V2 = 2,
        CLUSTER_CHANGE_RESOURCE_TYPE_PRIVATE_PROPERTY_V2 = 4,
        CLUSTER_CHANGE_RESOURCE_TYPE_POSSIBLE_OWNERS_V2 = 8,
        CLUSTER_CHANGE_RESOURCE_TYPE_DLL_UPGRADED_V2 = 16,
        CLUSTER_RESOURCE_TYPE_SPECIFIC_V2 = 32,
        CLUSTER_CHANGE_RESOURCE_TYPE_ALL_V2 = 63,
    };
    enum class CLUSTER_CHANGE_RESOURCE_V2 : int32_t
    {
        CLUSTER_CHANGE_RESOURCE_COMMON_PROPERTY_V2 = 1,
        CLUSTER_CHANGE_RESOURCE_PRIVATE_PROPERTY_V2 = 2,
        CLUSTER_CHANGE_RESOURCE_STATE_V2 = 4,
        CLUSTER_CHANGE_RESOURCE_OWNER_GROUP_V2 = 8,
        CLUSTER_CHANGE_RESOURCE_DEPENDENCIES_V2 = 16,
        CLUSTER_CHANGE_RESOURCE_DEPENDENTS_V2 = 32,
        CLUSTER_CHANGE_RESOURCE_POSSIBLE_OWNERS_V2 = 64,
        CLUSTER_CHANGE_RESOURCE_DELETED_V2 = 128,
        CLUSTER_CHANGE_RESOURCE_DLL_UPGRADED_V2 = 256,
        CLUSTER_CHANGE_RESOURCE_HANDLE_CLOSE_V2 = 512,
        CLUSTER_CHANGE_RESOURCE_TERMINAL_STATE_V2 = 1024,
        CLUSTER_CHANGE_RESOURCE_ALL_V2 = 2047,
    };
    enum class CLUSTER_CHANGE_SHARED_VOLUME_V2 : int32_t
    {
        CLUSTER_CHANGE_SHARED_VOLUME_STATE_V2 = 1,
        CLUSTER_CHANGE_SHARED_VOLUME_ADDED_V2 = 2,
        CLUSTER_CHANGE_SHARED_VOLUME_REMOVED_V2 = 4,
        CLUSTER_CHANGE_SHARED_VOLUME_ALL_V2 = 7,
    };
    enum class CLUSTER_CHANGE_SPACEPORT_V2 : int32_t
    {
        CLUSTER_CHANGE_SPACEPORT_CUSTOM_PNP_V2 = 1,
    };
    enum class CLUSTER_CLOUD_TYPE : int32_t
    {
        CLUSTER_CLOUD_TYPE_NONE = 0,
        CLUSTER_CLOUD_TYPE_AZURE = 1,
        CLUSTER_CLOUD_TYPE_MIXED = 128,
        CLUSTER_CLOUD_TYPE_UNKNOWN = -1,
    };
    enum class CLUSTER_CONTROL_OBJECT : int32_t
    {
        CLUS_OBJECT_INVALID = 0,
        CLUS_OBJECT_RESOURCE = 1,
        CLUS_OBJECT_RESOURCE_TYPE = 2,
        CLUS_OBJECT_GROUP = 3,
        CLUS_OBJECT_NODE = 4,
        CLUS_OBJECT_NETWORK = 5,
        CLUS_OBJECT_NETINTERFACE = 6,
        CLUS_OBJECT_CLUSTER = 7,
        CLUS_OBJECT_GROUPSET = 8,
        CLUS_OBJECT_AFFINITYRULE = 9,
        CLUS_OBJECT_USER = 128,
    };
    enum class CLUSTER_CSV_VOLUME_FAULT_STATE : int32_t
    {
        VolumeStateNoFaults = 0,
        VolumeStateNoDirectIO = 1,
        VolumeStateNoAccess = 2,
        VolumeStateInMaintenance = 4,
        VolumeStateDismounted = 8,
    };
    enum class CLUSTER_ENUM : int32_t
    {
        CLUSTER_ENUM_NODE = 1,
        CLUSTER_ENUM_RESTYPE = 2,
        CLUSTER_ENUM_RESOURCE = 4,
        CLUSTER_ENUM_GROUP = 8,
        CLUSTER_ENUM_NETWORK = 16,
        CLUSTER_ENUM_NETINTERFACE = 32,
        CLUSTER_ENUM_SHARED_VOLUME_GROUP = 536870912,
        CLUSTER_ENUM_SHARED_VOLUME_RESOURCE = 1073741824,
        CLUSTER_ENUM_INTERNAL_NETWORK = -2147483648,
        CLUSTER_ENUM_ALL = 63,
    };
    enum class CLUSTER_GROUP_AUTOFAILBACK_TYPE : int32_t
    {
        ClusterGroupPreventFailback = 0,
        ClusterGroupAllowFailback = 1,
        ClusterGroupFailbackTypeCount = 2,
    };
    enum class CLUSTER_GROUP_ENUM : int32_t
    {
        CLUSTER_GROUP_ENUM_CONTAINS = 1,
        CLUSTER_GROUP_ENUM_NODES = 2,
        CLUSTER_GROUP_ENUM_ALL = 3,
    };
    enum class CLUSTER_GROUP_PRIORITY : int32_t
    {
        PriorityDisabled = 0,
        PriorityLow = 1000,
        PriorityMedium = 2000,
        PriorityHigh = 3000,
    };
    enum class CLUSTER_GROUP_STATE : int32_t
    {
        ClusterGroupStateUnknown = -1,
        ClusterGroupOnline = 0,
        ClusterGroupOffline = 1,
        ClusterGroupFailed = 2,
        ClusterGroupPartialOnline = 3,
        ClusterGroupPending = 4,
    };
    enum class CLUSTER_MGMT_POINT_RESTYPE : int32_t
    {
        CLUSTER_MGMT_POINT_RESTYPE_AUTO = 0,
        CLUSTER_MGMT_POINT_RESTYPE_SNN = 1,
        CLUSTER_MGMT_POINT_RESTYPE_DNN = 2,
    };
    enum class CLUSTER_MGMT_POINT_TYPE : int32_t
    {
        CLUSTER_MGMT_POINT_TYPE_NONE = 0,
        CLUSTER_MGMT_POINT_TYPE_CNO = 1,
        CLUSTER_MGMT_POINT_TYPE_DNS_ONLY = 2,
        CLUSTER_MGMT_POINT_TYPE_CNO_ONLY = 3,
    };
    enum class CLUSTER_NETINTERFACE_STATE : int32_t
    {
        ClusterNetInterfaceStateUnknown = -1,
        ClusterNetInterfaceUnavailable = 0,
        ClusterNetInterfaceFailed = 1,
        ClusterNetInterfaceUnreachable = 2,
        ClusterNetInterfaceUp = 3,
    };
    enum class CLUSTER_NETWORK_ENUM : int32_t
    {
        CLUSTER_NETWORK_ENUM_NETINTERFACES = 1,
        CLUSTER_NETWORK_ENUM_ALL = 1,
    };
    enum class CLUSTER_NETWORK_ROLE : int32_t
    {
        ClusterNetworkRoleNone = 0,
        ClusterNetworkRoleInternalUse = 1,
        ClusterNetworkRoleClientAccess = 2,
        ClusterNetworkRoleInternalAndClient = 3,
    };
    enum class CLUSTER_NETWORK_STATE : int32_t
    {
        ClusterNetworkStateUnknown = -1,
        ClusterNetworkUnavailable = 0,
        ClusterNetworkDown = 1,
        ClusterNetworkPartitioned = 2,
        ClusterNetworkUp = 3,
    };
    enum class CLUSTER_NODE_DRAIN_STATUS : int32_t
    {
        NodeDrainStatusNotInitiated = 0,
        NodeDrainStatusInProgress = 1,
        NodeDrainStatusCompleted = 2,
        NodeDrainStatusFailed = 3,
        ClusterNodeDrainStatusCount = 4,
    };
    enum class CLUSTER_NODE_ENUM : int32_t
    {
        CLUSTER_NODE_ENUM_NETINTERFACES = 1,
        CLUSTER_NODE_ENUM_GROUPS = 2,
        CLUSTER_NODE_ENUM_PREFERRED_GROUPS = 4,
        CLUSTER_NODE_ENUM_ALL = 3,
    };
    enum class CLUSTER_NODE_RESUME_FAILBACK_TYPE : int32_t
    {
        DoNotFailbackGroups = 0,
        FailbackGroupsImmediately = 1,
        FailbackGroupsPerPolicy = 2,
        ClusterNodeResumeFailbackTypeCount = 3,
    };
    enum class CLUSTER_NODE_STATE : int32_t
    {
        ClusterNodeStateUnknown = -1,
        ClusterNodeUp = 0,
        ClusterNodeDown = 1,
        ClusterNodePaused = 2,
        ClusterNodeJoining = 3,
    };
    enum class CLUSTER_NODE_STATUS : int32_t
    {
        NodeStatusNormal = 0,
        NodeStatusIsolated = 1,
        NodeStatusQuarantined = 2,
        NodeStatusDrainInProgress = 4,
        NodeStatusDrainCompleted = 8,
        NodeStatusDrainFailed = 16,
        NodeStatusAvoidPlacement = 32,
        NodeStatusMax = 51,
    };
    enum class CLUSTER_NOTIFICATIONS_VERSION : int32_t
    {
        CLUSTER_NOTIFICATIONS_V1 = 1,
        CLUSTER_NOTIFICATIONS_V2 = 2,
    };
    enum class CLUSTER_OBJECT_TYPE : int32_t
    {
        CLUSTER_OBJECT_TYPE_NONE = 0,
        CLUSTER_OBJECT_TYPE_CLUSTER = 1,
        CLUSTER_OBJECT_TYPE_GROUP = 2,
        CLUSTER_OBJECT_TYPE_RESOURCE = 3,
        CLUSTER_OBJECT_TYPE_RESOURCE_TYPE = 4,
        CLUSTER_OBJECT_TYPE_NETWORK_INTERFACE = 5,
        CLUSTER_OBJECT_TYPE_NETWORK = 6,
        CLUSTER_OBJECT_TYPE_NODE = 7,
        CLUSTER_OBJECT_TYPE_REGISTRY = 8,
        CLUSTER_OBJECT_TYPE_QUORUM = 9,
        CLUSTER_OBJECT_TYPE_SHARED_VOLUME = 10,
        CLUSTER_OBJECT_TYPE_GROUPSET = 13,
        CLUSTER_OBJECT_TYPE_AFFINITYRULE = 16,
    };
    enum class CLUSTER_PROPERTY_FORMAT : int32_t
    {
        CLUSPROP_FORMAT_UNKNOWN = 0,
        CLUSPROP_FORMAT_BINARY = 1,
        CLUSPROP_FORMAT_DWORD = 2,
        CLUSPROP_FORMAT_SZ = 3,
        CLUSPROP_FORMAT_EXPAND_SZ = 4,
        CLUSPROP_FORMAT_MULTI_SZ = 5,
        CLUSPROP_FORMAT_ULARGE_INTEGER = 6,
        CLUSPROP_FORMAT_LONG = 7,
        CLUSPROP_FORMAT_EXPANDED_SZ = 8,
        CLUSPROP_FORMAT_SECURITY_DESCRIPTOR = 9,
        CLUSPROP_FORMAT_LARGE_INTEGER = 10,
        CLUSPROP_FORMAT_WORD = 11,
        CLUSPROP_FORMAT_FILETIME = 12,
        CLUSPROP_FORMAT_VALUE_LIST = 13,
        CLUSPROP_FORMAT_PROPERTY_LIST = 14,
        CLUSPROP_FORMAT_USER = 32768,
    };
    enum class CLUSTER_PROPERTY_SYNTAX : uint32_t
    {
        CLUSPROP_SYNTAX_ENDMARK = 0x0,
        CLUSPROP_SYNTAX_NAME = 0x40003,
        CLUSPROP_SYNTAX_RESCLASS = 0x20002,
        CLUSPROP_SYNTAX_LIST_VALUE_SZ = 0x10003,
        CLUSPROP_SYNTAX_LIST_VALUE_EXPAND_SZ = 0x10004,
        CLUSPROP_SYNTAX_LIST_VALUE_DWORD = 0x10002,
        CLUSPROP_SYNTAX_LIST_VALUE_BINARY = 0x10001,
        CLUSPROP_SYNTAX_LIST_VALUE_MULTI_SZ = 0x10005,
        CLUSPROP_SYNTAX_LIST_VALUE_LONG = 0x10007,
        CLUSPROP_SYNTAX_LIST_VALUE_EXPANDED_SZ = 0x10008,
        CLUSPROP_SYNTAX_LIST_VALUE_SECURITY_DESCRIPTOR = 0x10009,
        CLUSPROP_SYNTAX_LIST_VALUE_LARGE_INTEGER = 0x1000a,
        CLUSPROP_SYNTAX_LIST_VALUE_ULARGE_INTEGER = 0x10006,
        CLUSPROP_SYNTAX_LIST_VALUE_WORD = 0x1000b,
        CLUSPROP_SYNTAX_LIST_VALUE_PROPERTY_LIST = 0x1000e,
        CLUSPROP_SYNTAX_LIST_VALUE_FILETIME = 0x1000c,
        CLUSPROP_SYNTAX_DISK_SIGNATURE = 0x50002,
        CLUSPROP_SYNTAX_SCSI_ADDRESS = 0x60002,
        CLUSPROP_SYNTAX_DISK_NUMBER = 0x70002,
        CLUSPROP_SYNTAX_PARTITION_INFO = 0x80001,
        CLUSPROP_SYNTAX_FTSET_INFO = 0x90001,
        CLUSPROP_SYNTAX_DISK_SERIALNUMBER = 0xa0003,
        CLUSPROP_SYNTAX_DISK_GUID = 0xb0003,
        CLUSPROP_SYNTAX_DISK_SIZE = 0xc0006,
        CLUSPROP_SYNTAX_PARTITION_INFO_EX = 0xd0001,
        CLUSPROP_SYNTAX_PARTITION_INFO_EX2 = 0xe0001,
        CLUSPROP_SYNTAX_STORAGE_DEVICE_ID_DESCRIPTOR = 0xf0001,
    };
    enum class CLUSTER_PROPERTY_TYPE : int32_t
    {
        CLUSPROP_TYPE_UNKNOWN = -1,
        CLUSPROP_TYPE_ENDMARK = 0,
        CLUSPROP_TYPE_LIST_VALUE = 1,
        CLUSPROP_TYPE_RESCLASS = 2,
        CLUSPROP_TYPE_RESERVED1 = 3,
        CLUSPROP_TYPE_NAME = 4,
        CLUSPROP_TYPE_SIGNATURE = 5,
        CLUSPROP_TYPE_SCSI_ADDRESS = 6,
        CLUSPROP_TYPE_DISK_NUMBER = 7,
        CLUSPROP_TYPE_PARTITION_INFO = 8,
        CLUSPROP_TYPE_FTSET_INFO = 9,
        CLUSPROP_TYPE_DISK_SERIALNUMBER = 10,
        CLUSPROP_TYPE_DISK_GUID = 11,
        CLUSPROP_TYPE_DISK_SIZE = 12,
        CLUSPROP_TYPE_PARTITION_INFO_EX = 13,
        CLUSPROP_TYPE_PARTITION_INFO_EX2 = 14,
        CLUSPROP_TYPE_STORAGE_DEVICE_ID_DESCRIPTOR = 15,
        CLUSPROP_TYPE_USER = 32768,
    };
    enum class CLUSTER_QUORUM_TYPE : int32_t
    {
        OperationalQuorum = 0,
        ModifyQuorum = 1,
    };
    enum class CLUSTER_QUORUM_VALUE : int32_t
    {
        CLUSTER_QUORUM_MAINTAINED = 0,
        CLUSTER_QUORUM_LOST = 1,
    };
    enum class CLUSTER_REG_COMMAND : int32_t
    {
        CLUSREG_COMMAND_NONE = 0,
        CLUSREG_SET_VALUE = 1,
        CLUSREG_CREATE_KEY = 2,
        CLUSREG_DELETE_KEY = 3,
        CLUSREG_DELETE_VALUE = 4,
        CLUSREG_SET_KEY_SECURITY = 5,
        CLUSREG_VALUE_DELETED = 6,
        CLUSREG_READ_KEY = 7,
        CLUSREG_READ_VALUE = 8,
        CLUSREG_READ_ERROR = 9,
        CLUSREG_CONTROL_COMMAND = 10,
        CLUSREG_CONDITION_EXISTS = 11,
        CLUSREG_CONDITION_NOT_EXISTS = 12,
        CLUSREG_CONDITION_IS_EQUAL = 13,
        CLUSREG_CONDITION_IS_NOT_EQUAL = 14,
        CLUSREG_CONDITION_IS_GREATER_THAN = 15,
        CLUSREG_CONDITION_IS_LESS_THAN = 16,
        CLUSREG_CONDITION_KEY_EXISTS = 17,
        CLUSREG_CONDITION_KEY_NOT_EXISTS = 18,
        CLUSREG_LAST_COMMAND = 19,
    };
    enum class CLUSTER_RESOURCE_APPLICATION_STATE : int32_t
    {
        ClusterResourceApplicationStateUnknown = 1,
        ClusterResourceApplicationOSHeartBeat = 2,
        ClusterResourceApplicationReady = 3,
    };
    enum class CLUSTER_RESOURCE_CLASS : int32_t
    {
        CLUS_RESCLASS_UNKNOWN = 0,
        CLUS_RESCLASS_STORAGE = 1,
        CLUS_RESCLASS_NETWORK = 2,
        CLUS_RESCLASS_USER = 32768,
    };
    enum class CLUSTER_RESOURCE_CREATE_FLAGS : int32_t
    {
        CLUSTER_RESOURCE_DEFAULT_MONITOR = 0,
        CLUSTER_RESOURCE_SEPARATE_MONITOR = 1,
        CLUSTER_RESOURCE_VALID_FLAGS = 1,
    };
    enum class CLUSTER_RESOURCE_EMBEDDED_FAILURE_ACTION : int32_t
    {
        ClusterResourceEmbeddedFailureActionNone = 0,
        ClusterResourceEmbeddedFailureActionLogOnly = 1,
        ClusterResourceEmbeddedFailureActionRecover = 2,
    };
    enum class CLUSTER_RESOURCE_ENUM : int32_t
    {
        CLUSTER_RESOURCE_ENUM_DEPENDS = 1,
        CLUSTER_RESOURCE_ENUM_PROVIDES = 2,
        CLUSTER_RESOURCE_ENUM_NODES = 4,
        CLUSTER_RESOURCE_ENUM_ALL = 7,
    };
    enum class CLUSTER_RESOURCE_RESTART_ACTION : int32_t
    {
        ClusterResourceDontRestart = 0,
        ClusterResourceRestartNoNotify = 1,
        ClusterResourceRestartNotify = 2,
        ClusterResourceRestartActionCount = 3,
    };
    enum class CLUSTER_RESOURCE_STATE : int32_t
    {
        ClusterResourceStateUnknown = -1,
        ClusterResourceInherited = 0,
        ClusterResourceInitializing = 1,
        ClusterResourceOnline = 2,
        ClusterResourceOffline = 3,
        ClusterResourceFailed = 4,
        ClusterResourcePending = 128,
        ClusterResourceOnlinePending = 129,
        ClusterResourceOfflinePending = 130,
    };
    enum class CLUSTER_RESOURCE_STATE_CHANGE_REASON : int32_t
    {
        eResourceStateChangeReasonUnknown = 0,
        eResourceStateChangeReasonMove = 1,
        eResourceStateChangeReasonFailover = 2,
        eResourceStateChangeReasonFailedMove = 3,
        eResourceStateChangeReasonShutdown = 4,
        eResourceStateChangeReasonRundown = 5,
    };
    enum class CLUSTER_RESOURCE_TYPE_ENUM : int32_t
    {
        CLUSTER_RESOURCE_TYPE_ENUM_NODES = 1,
        CLUSTER_RESOURCE_TYPE_ENUM_RESOURCES = 2,
        CLUSTER_RESOURCE_TYPE_ENUM_ALL = 3,
    };
    enum class CLUSTER_ROLE : int32_t
    {
        ClusterRoleDHCP = 0,
        ClusterRoleDTC = 1,
        ClusterRoleFileServer = 2,
        ClusterRoleGenericApplication = 3,
        ClusterRoleGenericScript = 4,
        ClusterRoleGenericService = 5,
        ClusterRoleISCSINameServer = 6,
        ClusterRoleMSMQ = 7,
        ClusterRoleNFS = 8,
        ClusterRolePrintServer = 9,
        ClusterRoleStandAloneNamespaceServer = 10,
        ClusterRoleVolumeShadowCopyServiceTask = 11,
        ClusterRoleWINS = 12,
        ClusterRoleTaskScheduler = 13,
        ClusterRoleNetworkFileSystem = 14,
        ClusterRoleDFSReplicatedFolder = 15,
        ClusterRoleDistributedFileSystem = 16,
        ClusterRoleDistributedNetworkName = 17,
        ClusterRoleFileShare = 18,
        ClusterRoleFileShareWitness = 19,
        ClusterRoleHardDisk = 20,
        ClusterRoleIPAddress = 21,
        ClusterRoleIPV6Address = 22,
        ClusterRoleIPV6TunnelAddress = 23,
        ClusterRoleISCSITargetServer = 24,
        ClusterRoleNetworkName = 25,
        ClusterRolePhysicalDisk = 26,
        ClusterRoleSODAFileServer = 27,
        ClusterRoleStoragePool = 28,
        ClusterRoleVirtualMachine = 29,
        ClusterRoleVirtualMachineConfiguration = 30,
        ClusterRoleVirtualMachineReplicaBroker = 31,
    };
    enum class CLUSTER_ROLE_STATE : int32_t
    {
        ClusterRoleUnknown = -1,
        ClusterRoleClustered = 0,
        ClusterRoleUnclustered = 1,
    };
    enum class CLUSTER_SETUP_PHASE : int32_t
    {
        ClusterSetupPhaseInitialize = 1,
        ClusterSetupPhaseValidateNodeState = 100,
        ClusterSetupPhaseValidateNetft = 102,
        ClusterSetupPhaseValidateClusDisk = 103,
        ClusterSetupPhaseConfigureClusSvc = 104,
        ClusterSetupPhaseStartingClusSvc = 105,
        ClusterSetupPhaseQueryClusterNameAccount = 106,
        ClusterSetupPhaseValidateClusterNameAccount = 107,
        ClusterSetupPhaseCreateClusterAccount = 108,
        ClusterSetupPhaseConfigureClusterAccount = 109,
        ClusterSetupPhaseFormingCluster = 200,
        ClusterSetupPhaseAddClusterProperties = 201,
        ClusterSetupPhaseCreateResourceTypes = 202,
        ClusterSetupPhaseCreateGroups = 203,
        ClusterSetupPhaseCreateIPAddressResources = 204,
        ClusterSetupPhaseCreateNetworkName = 205,
        ClusterSetupPhaseClusterGroupOnline = 206,
        ClusterSetupPhaseGettingCurrentMembership = 300,
        ClusterSetupPhaseAddNodeToCluster = 301,
        ClusterSetupPhaseNodeUp = 302,
        ClusterSetupPhaseMoveGroup = 400,
        ClusterSetupPhaseDeleteGroup = 401,
        ClusterSetupPhaseCleanupCOs = 402,
        ClusterSetupPhaseOfflineGroup = 403,
        ClusterSetupPhaseEvictNode = 404,
        ClusterSetupPhaseCleanupNode = 405,
        ClusterSetupPhaseCoreGroupCleanup = 406,
        ClusterSetupPhaseFailureCleanup = 999,
    };
    enum class CLUSTER_SETUP_PHASE_SEVERITY : int32_t
    {
        ClusterSetupPhaseInformational = 1,
        ClusterSetupPhaseWarning = 2,
        ClusterSetupPhaseFatal = 3,
    };
    enum class CLUSTER_SETUP_PHASE_TYPE : int32_t
    {
        ClusterSetupPhaseStart = 1,
        ClusterSetupPhaseContinue = 2,
        ClusterSetupPhaseEnd = 3,
        ClusterSetupPhaseReport = 4,
    };
    enum class CLUSTER_SHARED_VOLUME_BACKUP_STATE : int32_t
    {
        VolumeBackupNone = 0,
        VolumeBackupInProgress = 1,
    };
    enum class CLUSTER_SHARED_VOLUME_RENAME_INPUT_TYPE : int32_t
    {
        ClusterSharedVolumeRenameInputTypeNone = 0,
        ClusterSharedVolumeRenameInputTypeVolumeOffset = 1,
        ClusterSharedVolumeRenameInputTypeVolumeId = 2,
        ClusterSharedVolumeRenameInputTypeVolumeName = 3,
        ClusterSharedVolumeRenameInputTypeVolumeGuid = 4,
    };
    enum class CLUSTER_SHARED_VOLUME_SNAPSHOT_STATE : int32_t
    {
        ClusterSharedVolumeSnapshotStateUnknown = 0,
        ClusterSharedVolumePrepareForHWSnapshot = 1,
        ClusterSharedVolumeHWSnapshotCompleted = 2,
        ClusterSharedVolumePrepareForFreeze = 3,
    };
    enum class CLUSTER_SHARED_VOLUME_STATE : int32_t
    {
        SharedVolumeStateUnavailable = 0,
        SharedVolumeStatePaused = 1,
        SharedVolumeStateActive = 2,
        SharedVolumeStateActiveRedirected = 3,
        SharedVolumeStateActiveVolumeRedirected = 4,
    };
    enum class CLUSTER_STORAGENODE_STATE : int32_t
    {
        ClusterStorageNodeStateUnknown = 0,
        ClusterStorageNodeUp = 1,
        ClusterStorageNodeDown = 2,
        ClusterStorageNodePaused = 3,
        ClusterStorageNodeStarting = 4,
        ClusterStorageNodeStopping = 5,
    };
    enum class CLUSTER_UPGRADE_PHASE : int32_t
    {
        ClusterUpgradePhaseInitialize = 1,
        ClusterUpgradePhaseValidatingUpgrade = 2,
        ClusterUpgradePhaseUpgradingComponents = 3,
        ClusterUpgradePhaseInstallingNewComponents = 4,
        ClusterUpgradePhaseUpgradeComplete = 5,
    };
    enum class CLUS_AFFINITY_RULE_TYPE : int32_t
    {
        CLUS_AFFINITY_RULE_NONE = 0,
        CLUS_AFFINITY_RULE_SAME_FAULT_DOMAIN = 1,
        CLUS_AFFINITY_RULE_SAME_NODE = 2,
        CLUS_AFFINITY_RULE_DIFFERENT_FAULT_DOMAIN = 3,
        CLUS_AFFINITY_RULE_DIFFERENT_NODE = 4,
        CLUS_AFFINITY_RULE_MIN = 0,
        CLUS_AFFINITY_RULE_MAX = 4,
    };
    enum class CLUS_CHARACTERISTICS : int32_t
    {
        CLUS_CHAR_UNKNOWN = 0,
        CLUS_CHAR_QUORUM = 1,
        CLUS_CHAR_DELETE_REQUIRES_ALL_NODES = 2,
        CLUS_CHAR_LOCAL_QUORUM = 4,
        CLUS_CHAR_LOCAL_QUORUM_DEBUG = 8,
        CLUS_CHAR_REQUIRES_STATE_CHANGE_REASON = 16,
        CLUS_CHAR_BROADCAST_DELETE = 32,
        CLUS_CHAR_SINGLE_CLUSTER_INSTANCE = 64,
        CLUS_CHAR_SINGLE_GROUP_INSTANCE = 128,
        CLUS_CHAR_COEXIST_IN_SHARED_VOLUME_GROUP = 256,
        CLUS_CHAR_PLACEMENT_DATA = 512,
        CLUS_CHAR_MONITOR_DETACH = 1024,
        CLUS_CHAR_MONITOR_REATTACH = 2048,
        CLUS_CHAR_OPERATION_CONTEXT = 4096,
        CLUS_CHAR_CLONES = 8192,
        CLUS_CHAR_NOT_PREEMPTABLE = 16384,
        CLUS_CHAR_NOTIFY_NEW_OWNER = 32768,
        CLUS_CHAR_SUPPORTS_UNMONITORED_STATE = 65536,
        CLUS_CHAR_INFRASTRUCTURE = 131072,
        CLUS_CHAR_VETO_DRAIN = 262144,
    };
    enum class CLUS_FLAGS : int32_t
    {
        CLUS_FLAG_CORE = 1,
    };
    enum class CLUS_GROUP_START_SETTING : int32_t
    {
        CLUS_GROUP_START_ALWAYS = 0,
        CLUS_GROUP_DO_NOT_START = 1,
        CLUS_GROUP_START_ALLOWED = 2,
    };
    enum class CLUS_RESSUBCLASS : int32_t
    {
        CLUS_RESSUBCLASS_SHARED = -2147483648,
    };
    enum class CLUS_RESSUBCLASS_NETWORK : int32_t
    {
        CLUS_RESSUBCLASS_NETWORK_INTERNET_PROTOCOL = -2147483648,
    };
    enum class CLUS_RESSUBCLASS_STORAGE : int32_t
    {
        CLUS_RESSUBCLASS_STORAGE_SHARED_BUS = -2147483648,
        CLUS_RESSUBCLASS_STORAGE_DISK = 1073741824,
        CLUS_RESSUBCLASS_STORAGE_REPLICATION = 268435456,
    };
    enum class FAILURE_TYPE : int32_t
    {
        FAILURE_TYPE_GENERAL = 0,
        FAILURE_TYPE_EMBEDDED = 1,
        FAILURE_TYPE_NETWORK_LOSS = 2,
    };
    enum class FILESHARE_CHANGE_ENUM : int32_t
    {
        FILESHARE_CHANGE_NONE = 0,
        FILESHARE_CHANGE_ADD = 1,
        FILESHARE_CHANGE_DEL = 2,
        FILESHARE_CHANGE_MODIFY = 3,
    };
    enum class GRP_PLACEMENT_OPTIONS : int32_t
    {
        GRP_PLACEMENT_OPTIONS_MIN_VALUE = 0,
        GRP_PLACEMENT_OPTIONS_DEFAULT = 0,
        GRP_PLACEMENT_OPTIONS_DISABLE_AUTOBALANCING = 1,
        GRP_PLACEMENT_OPTIONS_ALL = 1,
    };
    enum class LOG_LEVEL : int32_t
    {
        LOG_INFORMATION = 0,
        LOG_WARNING = 1,
        LOG_ERROR = 2,
        LOG_SEVERE = 3,
    };
    enum class MAINTENANCE_MODE_TYPE_ENUM : int32_t
    {
        MaintenanceModeTypeDisableIsAliveCheck = 1,
        MaintenanceModeTypeOfflineResource = 2,
        MaintenanceModeTypeUnclusterResource = 3,
    };
    enum class NODE_CLUSTER_STATE : int32_t
    {
        ClusterStateNotInstalled = 0,
        ClusterStateNotConfigured = 1,
        ClusterStateNotRunning = 3,
        ClusterStateRunning = 19,
    };
    enum class PLACEMENT_OPTIONS : int32_t
    {
        PLACEMENT_OPTIONS_MIN_VALUE = 0,
        PLACEMENT_OPTIONS_DEFAULT_PLACEMENT_OPTIONS = 0,
        PLACEMENT_OPTIONS_DISABLE_CSV_VM_DEPENDENCY = 1,
        PLACEMENT_OPTIONS_CONSIDER_OFFLINE_VMS = 2,
        PLACEMENT_OPTIONS_DONT_USE_MEMORY = 4,
        PLACEMENT_OPTIONS_DONT_USE_CPU = 8,
        PLACEMENT_OPTIONS_DONT_USE_LOCAL_TEMP_DISK = 16,
        PLACEMENT_OPTIONS_DONT_RESUME_VMS_WITH_EXISTING_TEMP_DISK = 32,
        PLACEMENT_OPTIONS_SAVE_VMS_WITH_LOCAL_DISK_ON_DRAIN_OVERWRITE = 64,
        PLACEMENT_OPTIONS_DONT_RESUME_AVAILABILTY_SET_VMS_WITH_EXISTING_TEMP_DISK = 128,
        PLACEMENT_OPTIONS_SAVE_AVAILABILTY_SET_VMS_WITH_LOCAL_DISK_ON_DRAIN_OVERWRITE = 256,
        PLACEMENT_OPTIONS_AVAILABILITY_SET_DOMAIN_AFFINITY = 512,
        PLACEMENT_OPTIONS_ALL = 1023,
    };
    enum class RESDLL_CONTEXT_OPERATION_TYPE : int32_t
    {
        ResdllContextOperationTypeFailback = 0,
        ResdllContextOperationTypeDrain = 1,
        ResdllContextOperationTypeDrainFailure = 2,
        ResdllContextOperationTypeEmbeddedFailure = 3,
        ResdllContextOperationTypePreemption = 4,
        ResdllContextOperationTypeNetworkDisconnect = 5,
        ResdllContextOperationTypeNetworkDisconnectMoveRetry = 6,
    };
    enum class RESOURCE_EXIT_STATE : int32_t
    {
        ResourceExitStateContinue = 0,
        ResourceExitStateTerminate = 1,
        ResourceExitStateMax = 2,
    };
    enum class RESOURCE_MONITOR_STATE : int32_t
    {
        RmonInitializing = 0,
        RmonIdle = 1,
        RmonStartingResource = 2,
        RmonInitializingResource = 3,
        RmonOnlineResource = 4,
        RmonOfflineResource = 5,
        RmonShutdownResource = 6,
        RmonDeletingResource = 7,
        RmonIsAlivePoll = 8,
        RmonLooksAlivePoll = 9,
        RmonArbitrateResource = 10,
        RmonReleaseResource = 11,
        RmonResourceControl = 12,
        RmonResourceTypeControl = 13,
        RmonTerminateResource = 14,
        RmonDeadlocked = 15,
    };
    enum class SR_DISK_REPLICATION_ELIGIBLE : int32_t
    {
        SrDiskReplicationEligibleNone = 0,
        SrDiskReplicationEligibleYes = 1,
        SrDiskReplicationEligibleOffline = 2,
        SrDiskReplicationEligibleNotGpt = 3,
        SrDiskReplicationEligiblePartitionLayoutMismatch = 4,
        SrDiskReplicationEligibleInsufficientFreeSpace = 5,
        SrDiskReplicationEligibleNotInSameSite = 6,
        SrDiskReplicationEligibleInSameSite = 7,
        SrDiskReplicationEligibleFileSystemNotSupported = 8,
        SrDiskReplicationEligibleAlreadyInReplication = 9,
        SrDiskReplicationEligibleSameAsSpecifiedDisk = 10,
        SrDiskReplicationEligibleOther = 9999,
    };
    enum class SR_REPLICATED_DISK_TYPE : int32_t
    {
        SrReplicatedDiskTypeNone = 0,
        SrReplicatedDiskTypeSource = 1,
        SrReplicatedDiskTypeLogSource = 2,
        SrReplicatedDiskTypeDestination = 3,
        SrReplicatedDiskTypeLogDestination = 4,
        SrReplicatedDiskTypeNotInParthership = 5,
        SrReplicatedDiskTypeLogNotInParthership = 6,
        SrReplicatedDiskTypeOther = 7,
    };
    enum class VM_RESDLL_CONTEXT : int32_t
    {
        VmResdllContextTurnOff = 0,
        VmResdllContextSave = 1,
        VmResdllContextShutdown = 2,
        VmResdllContextShutdownForce = 3,
        VmResdllContextLiveMigration = 4,
    };
#pragma endregion enums

#pragma region forward_declarations
    struct CLRES_CALLBACK_FUNCTION_TABLE;
    struct CLRES_FUNCTION_TABLE;
    struct CLRES_V1_FUNCTIONS;
    struct CLRES_V2_FUNCTIONS;
    struct CLRES_V3_FUNCTIONS;
    struct CLRES_V4_FUNCTIONS;
    struct CLUSCTL_GROUP_GET_LAST_MOVE_TIME_OUTPUT;
    struct CLUSCTL_RESOURCE_STATE_CHANGE_REASON_STRUCT;
    struct CLUSCTL_RESOURCE_TYPE_STORAGE_GET_AVAILABLE_DISKS_EX2_INPUT;
    struct CLUSPROP_BINARY;
    union CLUSPROP_BUFFER_HELPER;
    struct CLUSPROP_DWORD;
    struct CLUSPROP_FILETIME;
    struct CLUSPROP_FTSET_INFO;
    struct CLUSPROP_LARGE_INTEGER;
    struct CLUSPROP_LIST;
    struct CLUSPROP_LONG;
    struct CLUSPROP_PARTITION_INFO;
    struct CLUSPROP_PARTITION_INFO_EX;
    struct CLUSPROP_PARTITION_INFO_EX2;
    union CLUSPROP_REQUIRED_DEPENDENCY;
    struct CLUSPROP_RESOURCE_CLASS;
    struct CLUSPROP_RESOURCE_CLASS_INFO;
    struct CLUSPROP_SCSI_ADDRESS;
    struct CLUSPROP_SECURITY_DESCRIPTOR;
    union CLUSPROP_SYNTAX;
    struct CLUSPROP_SZ;
    struct CLUSPROP_ULARGE_INTEGER;
    struct CLUSPROP_VALUE;
    struct CLUSPROP_WORD;
    struct CLUSTERVERSIONINFO;
    struct CLUSTERVERSIONINFO_NT4;
    struct CLUSTER_AVAILABILITY_SET_CONFIG;
    struct CLUSTER_BATCH_COMMAND;
    struct CLUSTER_CREATE_GROUP_INFO;
    struct CLUSTER_ENUM_ITEM;
    struct CLUSTER_GROUP_ENUM_ITEM;
    struct CLUSTER_HEALTH_FAULT;
    struct CLUSTER_HEALTH_FAULT_ARRAY;
    struct CLUSTER_IP_ENTRY;
    struct CLUSTER_MEMBERSHIP_INFO;
    struct CLUSTER_READ_BATCH_COMMAND;
    struct CLUSTER_RESOURCE_ENUM_ITEM;
    struct CLUSTER_SET_PASSWORD_STATUS;
    struct CLUSTER_SHARED_VOLUME_RENAME_GUID_INPUT;
    struct CLUSTER_SHARED_VOLUME_RENAME_INPUT;
    struct CLUSTER_SHARED_VOLUME_RENAME_INPUT_GUID_NAME;
    struct CLUSTER_SHARED_VOLUME_RENAME_INPUT_NAME;
    struct CLUSTER_SHARED_VOLUME_RENAME_INPUT_VOLUME;
    struct CLUSTER_SHARED_VOLUME_STATE_INFO;
    struct CLUSTER_SHARED_VOLUME_STATE_INFO_EX;
    struct CLUSTER_VALIDATE_CSV_FILENAME;
    struct CLUSTER_VALIDATE_DIRECTORY;
    struct CLUSTER_VALIDATE_NETNAME;
    struct CLUSTER_VALIDATE_PATH;
    struct CLUS_CHKDSK_INFO;
    struct CLUS_CREATE_INFRASTRUCTURE_FILESERVER_INPUT;
    struct CLUS_CREATE_INFRASTRUCTURE_FILESERVER_OUTPUT;
    struct CLUS_CSV_MAINTENANCE_MODE_INFO;
    struct CLUS_CSV_VOLUME_INFO;
    struct CLUS_CSV_VOLUME_NAME;
    struct CLUS_DISK_NUMBER_INFO;
    struct CLUS_DNN_LEADER_STATUS;
    struct CLUS_DNN_SODAFS_CLONE_STATUS;
    struct CLUS_FORCE_QUORUM_INFO;
    struct CLUS_FTSET_INFO;
    struct CLUS_MAINTENANCE_MODE_INFO;
    struct CLUS_MAINTENANCE_MODE_INFOEX;
    struct CLUS_NETNAME_IP_INFO_ENTRY;
    struct CLUS_NETNAME_IP_INFO_FOR_MULTICHANNEL;
    struct CLUS_NETNAME_PWD_INFO;
    struct CLUS_NETNAME_PWD_INFOEX;
    struct CLUS_NETNAME_VS_TOKEN_INFO;
    struct CLUS_PARTITION_INFO;
    struct CLUS_PARTITION_INFO_EX;
    struct CLUS_PARTITION_INFO_EX2;
    struct CLUS_PROVIDER_STATE_CHANGE_INFO;
    struct CLUS_RESOURCE_CLASS_INFO;
    struct CLUS_SCSI_ADDRESS;
    struct CLUS_SET_MAINTENANCE_MODE_INPUT;
    struct CLUS_SHARED_VOLUME_BACKUP_MODE;
    struct CLUS_STARTING_PARAMS;
    struct CLUS_STORAGE_GET_AVAILABLE_DRIVELETTERS;
    struct CLUS_STORAGE_REMAP_DRIVELETTER;
    struct CLUS_STORAGE_SET_DRIVELETTER;
    struct CLUS_WORKER;
    struct CREATE_CLUSTER_CONFIG;
    struct CREATE_CLUSTER_NAME_ACCOUNT;
    struct FILESHARE_CHANGE;
    struct FILESHARE_CHANGE_LIST;
    struct GET_OPERATION_CONTEXT_PARAMS;
    struct GROUP_FAILURE_INFO;
    struct GROUP_FAILURE_INFO_BUFFER;
    struct MONITOR_STATE;
    struct NOTIFY_FILTER_AND_TYPE;
    struct NodeUtilizationInfoElement;
    struct POST_UPGRADE_VERSION_INFO;
    struct PaxosTagCStruct;
    struct RESOURCE_FAILURE_INFO;
    struct RESOURCE_FAILURE_INFO_BUFFER;
    struct RESOURCE_STATUS;
    struct RESOURCE_STATUS_EX;
    struct RESOURCE_TERMINAL_FAILURE_INFO_BUFFER;
    struct RESUTIL_FILETIME_DATA;
    struct RESUTIL_LARGEINT_DATA;
    struct RESUTIL_PROPERTY_ITEM;
    struct RESUTIL_ULARGEINT_DATA;
    struct ResourceUtilizationInfoElement;
    struct SR_RESOURCE_TYPE_DISK_INFO;
    struct SR_RESOURCE_TYPE_ELIGIBLE_DISKS_RESULT;
    struct SR_RESOURCE_TYPE_QUERY_ELIGIBLE_LOGDISKS;
    struct SR_RESOURCE_TYPE_QUERY_ELIGIBLE_SOURCE_DATADISKS;
    struct SR_RESOURCE_TYPE_QUERY_ELIGIBLE_TARGET_DATADISKS;
    struct SR_RESOURCE_TYPE_REPLICATED_DISK;
    struct SR_RESOURCE_TYPE_REPLICATED_DISKS_RESULT;
    struct SR_RESOURCE_TYPE_REPLICATED_PARTITION_ARRAY;
    struct SR_RESOURCE_TYPE_REPLICATED_PARTITION_INFO;
    struct WitnessTagHelper;
    struct WitnessTagUpdateHelper;
    struct _HCHANGE;
    struct _HCLUSCRYPTPROVIDER;
    struct _HCLUSENUM;
    struct _HCLUSENUMEX;
    struct _HCLUSTER;
    struct _HGROUP;
    struct _HGROUPENUM;
    struct _HGROUPENUMEX;
    struct _HGROUPSET;
    struct _HGROUPSETENUM;
    struct _HNETINTERFACE;
    struct _HNETINTERFACEENUM;
    struct _HNETWORK;
    struct _HNETWORKENUM;
    struct _HNODE;
    struct _HNODEENUM;
    struct _HNODEENUMEX;
    struct _HREGBATCH;
    struct _HREGBATCHNOTIFICATION;
    struct _HREGBATCHPORT;
    struct _HREGREADBATCH;
    struct _HREGREADBATCHREPLY;
    struct _HRESENUM;
    struct _HRESENUMEX;
    struct _HRESOURCE;
    struct _HRESTYPEENUM;
    struct ClusApplication;
    struct ClusCryptoKeys;
    struct ClusDisk;
    struct ClusDisks;
    struct ClusNetInterface;
    struct ClusNetInterfaces;
    struct ClusNetwork;
    struct ClusNetworkNetInterfaces;
    struct ClusNetworks;
    struct ClusNode;
    struct ClusNodeNetInterfaces;
    struct ClusNodes;
    struct ClusPartition;
    struct ClusPartitionEx;
    struct ClusPartitions;
    struct ClusProperties;
    struct ClusProperty;
    struct ClusPropertyValue;
    struct ClusPropertyValueData;
    struct ClusPropertyValues;
    struct ClusRefObject;
    struct ClusRegistryKeys;
    struct ClusResDependencies;
    struct ClusResDependents;
    struct ClusResGroup;
    struct ClusResGroupPreferredOwnerNodes;
    struct ClusResGroupResources;
    struct ClusResGroups;
    struct ClusResPossibleOwnerNodes;
    struct ClusResType;
    struct ClusResTypePossibleOwnerNodes;
    struct ClusResTypeResources;
    struct ClusResTypes;
    struct ClusResource;
    struct ClusResources;
    struct ClusScsiAddress;
    struct ClusVersion;
    struct Cluster;
    struct ClusterNames;
    struct DomainNames;
    struct IGetClusterDataInfo;
    struct IGetClusterGroupInfo;
    struct IGetClusterNetInterfaceInfo;
    struct IGetClusterNetworkInfo;
    struct IGetClusterNodeInfo;
    struct IGetClusterObjectInfo;
    struct IGetClusterResourceInfo;
    struct IGetClusterUIInfo;
    struct ISClusApplication;
    struct ISClusCryptoKeys;
    struct ISClusDisk;
    struct ISClusDisks;
    struct ISClusNetInterface;
    struct ISClusNetInterfaces;
    struct ISClusNetwork;
    struct ISClusNetworkNetInterfaces;
    struct ISClusNetworks;
    struct ISClusNode;
    struct ISClusNodeNetInterfaces;
    struct ISClusNodes;
    struct ISClusPartition;
    struct ISClusPartitionEx;
    struct ISClusPartitions;
    struct ISClusProperties;
    struct ISClusProperty;
    struct ISClusPropertyValue;
    struct ISClusPropertyValueData;
    struct ISClusPropertyValues;
    struct ISClusRefObject;
    struct ISClusRegistryKeys;
    struct ISClusResDependencies;
    struct ISClusResDependents;
    struct ISClusResGroup;
    struct ISClusResGroupPreferredOwnerNodes;
    struct ISClusResGroupResources;
    struct ISClusResGroups;
    struct ISClusResPossibleOwnerNodes;
    struct ISClusResType;
    struct ISClusResTypePossibleOwnerNodes;
    struct ISClusResTypeResources;
    struct ISClusResTypes;
    struct ISClusResource;
    struct ISClusResources;
    struct ISClusScsiAddress;
    struct ISClusVersion;
    struct ISCluster;
    struct ISClusterNames;
    struct ISDomainNames;
    struct IWCContextMenuCallback;
    struct IWCPropertySheetCallback;
    struct IWCWizard97Callback;
    struct IWCWizardCallback;
    struct IWEExtendContextMenu;
    struct IWEExtendPropertySheet;
    struct IWEExtendWizard;
    struct IWEExtendWizard97;
    struct IWEInvokeCommand;
#pragma endregion forward_declarations

#pragma region delegates
    using PCLUSAPI_GET_NODE_CLUSTER_STATE = uint32_t __stdcall(uint16_t*, uint32_t*);
    using PCLUSAPI_OPEN_CLUSTER = Windows::Win32::WindowsClustering::_HCLUSTER* __stdcall(uint16_t*);
    using PCLUSAPI_OPEN_CLUSTER_EX = Windows::Win32::WindowsClustering::_HCLUSTER* __stdcall(uint16_t*, uint32_t, uint32_t*);
    using PCLUSAPI_CLOSE_CLUSTER = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::WindowsClustering::_HCLUSTER*);
    using PCLUSAPI_SetClusterName = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HCLUSTER*, uint16_t*);
    using PCLUSAPI_GET_CLUSTER_INFORMATION = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HCLUSTER*, uint16_t*, uint32_t*, Windows::Win32::WindowsClustering::CLUSTERVERSIONINFO*);
    using PCLUSAPI_GET_CLUSTER_QUORUM_RESOURCE = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HCLUSTER*, uint16_t*, uint32_t*, uint16_t*, uint32_t*, uint32_t*);
    using PCLUSAPI_SET_CLUSTER_QUORUM_RESOURCE = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HRESOURCE*, uint16_t*, uint32_t);
    using PCLUSAPI_BACKUP_CLUSTER_DATABASE = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HCLUSTER*, uint16_t*);
    using PCLUSAPI_RESTORE_CLUSTER_DATABASE = uint32_t __stdcall(uint16_t*, Windows::Win32::SystemServices::BOOL, uint16_t*);
    using PCLUSAPI_SET_CLUSTER_NETWORK_PRIORITY_ORDER = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HCLUSTER*, uint32_t, Windows::Win32::WindowsClustering::_HNETWORK**);
    using PCLUSAPI_SET_CLUSTER_SERVICE_ACCOUNT_PASSWORD = uint32_t __stdcall(uint16_t*, uint16_t*, uint32_t, Windows::Win32::WindowsClustering::CLUSTER_SET_PASSWORD_STATUS*, uint32_t*);
    using PCLUSAPI_CLUSTER_CONTROL = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HCLUSTER*, Windows::Win32::WindowsClustering::_HNODE*, uint32_t, void*, uint32_t, void*, uint32_t, uint32_t*);
    using PCLUSTER_UPGRADE_PROGRESS_CALLBACK = Windows::Win32::SystemServices::BOOL __stdcall(void*, Windows::Win32::WindowsClustering::CLUSTER_UPGRADE_PHASE);
    using PCLUSAPI_CLUSTER_UPGRADE = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HCLUSTER*, Windows::Win32::SystemServices::BOOL, Windows::Win32::WindowsClustering::PCLUSTER_UPGRADE_PROGRESS_CALLBACK*, void*);
    using PCLUSAPI_CREATE_CLUSTER_NOTIFY_PORT_V2 = Windows::Win32::WindowsClustering::_HCHANGE* __stdcall(Windows::Win32::WindowsClustering::_HCHANGE*, Windows::Win32::WindowsClustering::_HCLUSTER*, Windows::Win32::WindowsClustering::NOTIFY_FILTER_AND_TYPE*, uint32_t, size_t);
    using PCLUSAPI_REGISTER_CLUSTER_NOTIFY_V2 = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HCHANGE*, Windows::Win32::WindowsClustering::NOTIFY_FILTER_AND_TYPE, Windows::Win32::SystemServices::HANDLE, size_t);
    using PCLUSAPI_GET_NOTIFY_EVENT_HANDLE_V2 = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HCHANGE*, intptr_t*);
    using PCLUSAPI_GET_CLUSTER_NOTIFY_V2 = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HCHANGE*, size_t*, Windows::Win32::WindowsClustering::NOTIFY_FILTER_AND_TYPE*, uint8_t*, uint32_t*, uint16_t*, uint32_t*, uint16_t*, uint32_t*, uint16_t*, uint32_t*, uint16_t*, uint32_t*, uint32_t);
    using PCLUSAPI_CREATE_CLUSTER_NOTIFY_PORT = Windows::Win32::WindowsClustering::_HCHANGE* __stdcall(Windows::Win32::WindowsClustering::_HCHANGE*, Windows::Win32::WindowsClustering::_HCLUSTER*, uint32_t, size_t);
    using PCLUSAPI_REGISTER_CLUSTER_NOTIFY = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HCHANGE*, uint32_t, Windows::Win32::SystemServices::HANDLE, size_t);
    using PCLUSAPI_GET_CLUSTER_NOTIFY = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HCHANGE*, size_t*, uint32_t*, uint16_t*, uint32_t*, uint32_t);
    using PCLUSAPI_CLOSE_CLUSTER_NOTIFY_PORT = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::WindowsClustering::_HCHANGE*);
    using PCLUSAPI_CLUSTER_OPEN_ENUM = Windows::Win32::WindowsClustering::_HCLUSENUM* __stdcall(Windows::Win32::WindowsClustering::_HCLUSTER*, uint32_t);
    using PCLUSAPI_CLUSTER_GET_ENUM_COUNT = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HCLUSENUM*);
    using PCLUSAPI_CLUSTER_ENUM = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HCLUSENUM*, uint32_t, uint32_t*, uint16_t*, uint32_t*);
    using PCLUSAPI_CLUSTER_CLOSE_ENUM = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HCLUSENUM*);
    using PCLUSAPI_CLUSTER_OPEN_ENUM_EX = Windows::Win32::WindowsClustering::_HCLUSENUMEX* __stdcall(Windows::Win32::WindowsClustering::_HCLUSTER*, uint32_t, void*);
    using PCLUSAPI_CLUSTER_GET_ENUM_COUNT_EX = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HCLUSENUMEX*);
    using PCLUSAPI_CLUSTER_ENUM_EX = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HCLUSENUMEX*, uint32_t, Windows::Win32::WindowsClustering::CLUSTER_ENUM_ITEM*, uint32_t*);
    using PCLUSAPI_CLUSTER_CLOSE_ENUM_EX = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HCLUSENUMEX*);
    using PCLUSAPI_CREATE_CLUSTER_GROUP_GROUPSET = Windows::Win32::WindowsClustering::_HGROUPSET* __stdcall(Windows::Win32::WindowsClustering::_HCLUSTER*, uint16_t*);
    using PCLUSAPI_OPEN_CLUSTER_GROUP_GROUPSET = Windows::Win32::WindowsClustering::_HGROUPSET* __stdcall(Windows::Win32::WindowsClustering::_HCLUSTER*, uint16_t*);
    using PCLUSAPI_CLOSE_CLUSTER_GROUP_GROUPSET = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::WindowsClustering::_HGROUPSET*);
    using PCLUSAPI_DELETE_CLUSTER_GROUP_GROUPSET = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HGROUPSET*);
    using PCLUSAPI_CLUSTER_ADD_GROUP_TO_GROUP_GROUPSET = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HGROUPSET*, Windows::Win32::WindowsClustering::_HGROUP*);
    using PCLUSAPI_CLUSTER_REMOVE_GROUP_FROM_GROUP_GROUPSET = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HGROUPSET*, Windows::Win32::WindowsClustering::_HGROUP*);
    using PCLUSAPI_CLUSTER_GROUP_GROUPSET_CONTROL = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HGROUPSET*, Windows::Win32::WindowsClustering::_HNODE*, uint32_t, void*, uint32_t, void*, uint32_t, uint32_t*);
    using PCLUSAPI_ADD_CLUSTER_GROUP_DEPENDENCY = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HGROUP*, Windows::Win32::WindowsClustering::_HGROUP*);
    using PCLUSAPI_SET_GROUP_DEPENDENCY_EXPRESSION = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HGROUP*, uint16_t*);
    using PCLUSAPI_REMOVE_CLUSTER_GROUP_DEPENDENCY = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HGROUP*, Windows::Win32::WindowsClustering::_HGROUP*);
    using PCLUSAPI_ADD_CLUSTER_GROUP_GROUPSET_DEPENDENCY = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HGROUPSET*, Windows::Win32::WindowsClustering::_HGROUPSET*);
    using PCLUSAPI_SET_CLUSTER_GROUP_GROUPSET_DEPENDENCY_EXPRESSION = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HGROUPSET*, uint16_t*);
    using PCLUSAPI_REMOVE_CLUSTER_GROUP_GROUPSET_DEPENDENCY = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HGROUPSET*, Windows::Win32::WindowsClustering::_HGROUPSET*);
    using PCLUSAPI_ADD_CLUSTER_GROUP_TO_GROUP_GROUPSET_DEPENDENCY = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HGROUP*, Windows::Win32::WindowsClustering::_HGROUPSET*);
    using PCLUSAPI_REMOVE_CLUSTER_GROUP_TO_GROUP_GROUPSET_DEPENDENCY = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HGROUP*, Windows::Win32::WindowsClustering::_HGROUPSET*);
    using PCLUSAPI_GET_CLUSTER_FROM_GROUP_GROUPSET = Windows::Win32::WindowsClustering::_HCLUSTER* __stdcall(Windows::Win32::WindowsClustering::_HGROUPSET*);
    using PCLUSAPI_ADD_CROSS_CLUSTER_GROUPSET_DEPENDENCY = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HGROUPSET*, uint16_t*, uint16_t*);
    using PCLUSAPI_REMOVE_CROSS_CLUSTER_GROUPSET_DEPENDENCY = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HGROUPSET*, uint16_t*, uint16_t*);
    using PCLUSAPI_CREATE_CLUSTER_AVAILABILITY_SET = Windows::Win32::WindowsClustering::_HGROUPSET* __stdcall(Windows::Win32::WindowsClustering::_HCLUSTER*, uint16_t*, Windows::Win32::WindowsClustering::CLUSTER_AVAILABILITY_SET_CONFIG*);
    using PCLUSAPI_CLUSTER_CREATE_AFFINITY_RULE = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HCLUSTER*, uint16_t*, Windows::Win32::WindowsClustering::CLUS_AFFINITY_RULE_TYPE);
    using PCLUSAPI_CLUSTER_REMOVE_AFFINITY_RULE = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HCLUSTER*, uint16_t*);
    using PCLUSAPI_CLUSTER_ADD_GROUP_TO_AFFINITY_RULE = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HCLUSTER*, uint16_t*, Windows::Win32::WindowsClustering::_HGROUP*);
    using PCLUSAPI_CLUSTER_REMOVE_GROUP_FROM_AFFINITY_RULE = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HCLUSTER*, uint16_t*, Windows::Win32::WindowsClustering::_HGROUP*);
    using PCLUSAPI_CLUSTER_AFFINITY_RULE_CONTROL = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HCLUSTER*, uint16_t*, Windows::Win32::WindowsClustering::_HNODE*, uint32_t, void*, uint32_t, void*, uint32_t, uint32_t*);
    using PCLUSAPI_OPEN_CLUSTER_NODE = Windows::Win32::WindowsClustering::_HNODE* __stdcall(Windows::Win32::WindowsClustering::_HCLUSTER*, uint16_t*);
    using PCLUSAPI_OPEN_CLUSTER_NODE_EX = Windows::Win32::WindowsClustering::_HNODE* __stdcall(Windows::Win32::WindowsClustering::_HCLUSTER*, uint16_t*, uint32_t, uint32_t*);
    using PCLUSAPI_OPEN_NODE_BY_ID = Windows::Win32::WindowsClustering::_HNODE* __stdcall(Windows::Win32::WindowsClustering::_HCLUSTER*, uint32_t);
    using PCLUSAPI_CLOSE_CLUSTER_NODE = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::WindowsClustering::_HNODE*);
    using PCLUSAPI_GET_CLUSTER_NODE_STATE = Windows::Win32::WindowsClustering::CLUSTER_NODE_STATE __stdcall(Windows::Win32::WindowsClustering::_HNODE*);
    using PCLUSAPI_GET_CLUSTER_NODE_ID = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HNODE*, uint16_t*, uint32_t*);
    using PCLUSAPI_GET_CLUSTER_FROM_NODE = Windows::Win32::WindowsClustering::_HCLUSTER* __stdcall(Windows::Win32::WindowsClustering::_HNODE*);
    using PCLUSAPI_PAUSE_CLUSTER_NODE = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HNODE*);
    using PCLUSAPI_RESUME_CLUSTER_NODE = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HNODE*);
    using PCLUSAPI_EVICT_CLUSTER_NODE = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HNODE*);
    using PCLUSAPI_CLUSTER_NODE_OPEN_ENUM = Windows::Win32::WindowsClustering::_HNODEENUM* __stdcall(Windows::Win32::WindowsClustering::_HNODE*, uint32_t);
    using PCLUSAPI_CLUSTER_NODE_OPEN_ENUM_EX = Windows::Win32::WindowsClustering::_HNODEENUMEX* __stdcall(Windows::Win32::WindowsClustering::_HNODE*, uint32_t, void*);
    using PCLUSAPI_CLUSTER_NODE_GET_ENUM_COUNT_EX = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HNODEENUMEX*);
    using PCLUSAPI_CLUSTER_NODE_ENUM_EX = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HNODEENUMEX*, uint32_t, Windows::Win32::WindowsClustering::CLUSTER_ENUM_ITEM*, uint32_t*);
    using PCLUSAPI_CLUSTER_NODE_CLOSE_ENUM_EX = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HNODEENUMEX*);
    using PCLUSAPI_CLUSTER_NODE_GET_ENUM_COUNT = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HNODEENUM*);
    using PCLUSAPI_CLUSTER_NODE_CLOSE_ENUM = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HNODEENUM*);
    using PCLUSAPI_CLUSTER_NODE_ENUM = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HNODEENUM*, uint32_t, uint32_t*, uint16_t*, uint32_t*);
    using PCLUSAPI_EVICT_CLUSTER_NODE_EX = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HNODE*, uint32_t, int32_t*);
    using PCLUSAPI_GET_CLUSTER_RESOURCE_TYPE_KEY = Windows::Win32::WindowsProgramming::HKEY __stdcall(Windows::Win32::WindowsClustering::_HCLUSTER*, uint16_t*, uint32_t);
    using PCLUSAPI_CREATE_CLUSTER_GROUP = Windows::Win32::WindowsClustering::_HGROUP* __stdcall(Windows::Win32::WindowsClustering::_HCLUSTER*, uint16_t*);
    using PCLUSAPI_OPEN_CLUSTER_GROUP = Windows::Win32::WindowsClustering::_HGROUP* __stdcall(Windows::Win32::WindowsClustering::_HCLUSTER*, uint16_t*);
    using PCLUSAPI_OPEN_CLUSTER_GROUP_EX = Windows::Win32::WindowsClustering::_HGROUP* __stdcall(Windows::Win32::WindowsClustering::_HCLUSTER*, uint16_t*, uint32_t, uint32_t*);
    using PCLUSAPI_PAUSE_CLUSTER_NODE_EX = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HNODE*, Windows::Win32::SystemServices::BOOL, uint32_t, Windows::Win32::WindowsClustering::_HNODE*);
    using PCLUSAPI_RESUME_CLUSTER_NODE_EX = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HNODE*, Windows::Win32::WindowsClustering::CLUSTER_NODE_RESUME_FAILBACK_TYPE, uint32_t);
    using PCLUSAPI_CREATE_CLUSTER_GROUPEX = Windows::Win32::WindowsClustering::_HGROUP* __stdcall(Windows::Win32::WindowsClustering::_HCLUSTER*, uint16_t*, Windows::Win32::WindowsClustering::CLUSTER_CREATE_GROUP_INFO*);
    using PCLUSAPI_CLUSTER_GROUP_OPEN_ENUM_EX = Windows::Win32::WindowsClustering::_HGROUPENUMEX* __stdcall(Windows::Win32::WindowsClustering::_HCLUSTER*, uint16_t*, uint32_t, uint16_t*, uint32_t, uint32_t);
    using PCLUSAPI_CLUSTER_GROUP_GET_ENUM_COUNT_EX = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HGROUPENUMEX*);
    using PCLUSAPI_CLUSTER_GROUP_ENUM_EX = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HGROUPENUMEX*, uint32_t, Windows::Win32::WindowsClustering::CLUSTER_GROUP_ENUM_ITEM*, uint32_t*);
    using PCLUSAPI_CLUSTER_GROUP_CLOSE_ENUM_EX = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HGROUPENUMEX*);
    using PCLUSAPI_CLUSTER_RESOURCE_OPEN_ENUM_EX = Windows::Win32::WindowsClustering::_HRESENUMEX* __stdcall(Windows::Win32::WindowsClustering::_HCLUSTER*, uint16_t*, uint32_t, uint16_t*, uint32_t, uint32_t);
    using PCLUSAPI_CLUSTER_RESOURCE_GET_ENUM_COUNT_EX = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HRESENUMEX*);
    using PCLUSAPI_CLUSTER_RESOURCE_ENUM_EX = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HRESENUMEX*, uint32_t, Windows::Win32::WindowsClustering::CLUSTER_RESOURCE_ENUM_ITEM*, uint32_t*);
    using PCLUSAPI_CLUSTER_RESOURCE_CLOSE_ENUM_EX = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HRESENUMEX*);
    using PCLUSAPI_RESTART_CLUSTER_RESOURCE = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HRESOURCE*, uint32_t);
    using PCLUSAPI_CLOSE_CLUSTER_GROUP = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::WindowsClustering::_HGROUP*);
    using PCLUSAPI_GET_CLUSTER_FROM_GROUP = Windows::Win32::WindowsClustering::_HCLUSTER* __stdcall(Windows::Win32::WindowsClustering::_HGROUP*);
    using PCLUSAPI_GET_CLUSTER_GROUP_STATE = Windows::Win32::WindowsClustering::CLUSTER_GROUP_STATE __stdcall(Windows::Win32::WindowsClustering::_HGROUP*, uint16_t*, uint32_t*);
    using PCLUSAPI_SET_CLUSTER_GROUP_NAME = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HGROUP*, uint16_t*);
    using PCLUSAPI_SET_CLUSTER_GROUP_NODE_LIST = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HGROUP*, uint32_t, Windows::Win32::WindowsClustering::_HNODE**);
    using PCLUSAPI_ONLINE_CLUSTER_GROUP = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HGROUP*, Windows::Win32::WindowsClustering::_HNODE*);
    using PCLUSAPI_MOVE_CLUSTER_GROUP = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HGROUP*, Windows::Win32::WindowsClustering::_HNODE*);
    using PCLUSAPI_OFFLINE_CLUSTER_GROUP = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HGROUP*);
    using PCLUSAPI_DELETE_CLUSTER_GROUP = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HGROUP*);
    using PCLUSAPI_DESTROY_CLUSTER_GROUP = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HGROUP*);
    using PCLUSAPI_CLUSTER_GROUP_OPEN_ENUM = Windows::Win32::WindowsClustering::_HGROUPENUM* __stdcall(Windows::Win32::WindowsClustering::_HGROUP*, uint32_t);
    using PCLUSAPI_CLUSTER_GROUP_GET_ENUM_COUNT = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HGROUPENUM*);
    using PCLUSAPI_CLUSTER_GROUP_ENUM = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HGROUPENUM*, uint32_t, uint32_t*, uint16_t*, uint32_t*);
    using PCLUSAPI_CLUSTER_GROUP_CLOSE_ENUM = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HGROUPENUM*);
    using PCLUSAPI_CREATE_CLUSTER_RESOURCE = Windows::Win32::WindowsClustering::_HRESOURCE* __stdcall(Windows::Win32::WindowsClustering::_HGROUP*, uint16_t*, uint16_t*, uint32_t);
    using PCLUSAPI_OPEN_CLUSTER_RESOURCE = Windows::Win32::WindowsClustering::_HRESOURCE* __stdcall(Windows::Win32::WindowsClustering::_HCLUSTER*, uint16_t*);
    using PCLUSAPI_OPEN_CLUSTER_RESOURCE_EX = Windows::Win32::WindowsClustering::_HRESOURCE* __stdcall(Windows::Win32::WindowsClustering::_HCLUSTER*, uint16_t*, uint32_t, uint32_t*);
    using PCLUSAPI_CLOSE_CLUSTER_RESOURCE = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::WindowsClustering::_HRESOURCE*);
    using PCLUSAPI_GET_CLUSTER_FROM_RESOURCE = Windows::Win32::WindowsClustering::_HCLUSTER* __stdcall(Windows::Win32::WindowsClustering::_HRESOURCE*);
    using PCLUSAPI_DELETE_CLUSTER_RESOURCE = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HRESOURCE*);
    using PCLUSAPI_GET_CLUSTER_RESOURCE_STATE = Windows::Win32::WindowsClustering::CLUSTER_RESOURCE_STATE __stdcall(Windows::Win32::WindowsClustering::_HRESOURCE*, uint16_t*, uint32_t*, uint16_t*, uint32_t*);
    using PCLUSAPI_SET_CLUSTER_RESOURCE_NAME = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HRESOURCE*, uint16_t*);
    using PCLUSAPI_FAIL_CLUSTER_RESOURCE = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HRESOURCE*);
    using PCLUSAPI_ONLINE_CLUSTER_RESOURCE = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HRESOURCE*);
    using PCLUSAPI_OFFLINE_CLUSTER_RESOURCE = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HRESOURCE*);
    using PCLUSAPI_CHANGE_CLUSTER_RESOURCE_GROUP = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HRESOURCE*, Windows::Win32::WindowsClustering::_HGROUP*);
    using PCLUSAPI_CHANGE_CLUSTER_RESOURCE_GROUP_EX = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HRESOURCE*, Windows::Win32::WindowsClustering::_HGROUP*, uint64_t);
    using PCLUSAPI_ADD_CLUSTER_RESOURCE_NODE = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HRESOURCE*, Windows::Win32::WindowsClustering::_HNODE*);
    using PCLUSAPI_REMOVE_CLUSTER_RESOURCE_NODE = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HRESOURCE*, Windows::Win32::WindowsClustering::_HNODE*);
    using PCLUSAPI_ADD_CLUSTER_RESOURCE_DEPENDENCY = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HRESOURCE*, Windows::Win32::WindowsClustering::_HRESOURCE*);
    using PCLUSAPI_REMOVE_CLUSTER_RESOURCE_DEPENDENCY = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HRESOURCE*, Windows::Win32::WindowsClustering::_HRESOURCE*);
    using PCLUSAPI_SET_CLUSTER_RESOURCE_DEPENDENCY_EXPRESSION = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HRESOURCE*, uint16_t*);
    using PCLUSAPI_GET_CLUSTER_RESOURCE_DEPENDENCY_EXPRESSION = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HRESOURCE*, uint16_t*, uint32_t*);
    using PCLUSAPI_ADD_RESOURCE_TO_CLUSTER_SHARED_VOLUMES = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HRESOURCE*);
    using PCLUSAPI_REMOVE_RESOURCE_FROM_CLUSTER_SHARED_VOLUMES = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HRESOURCE*);
    using PCLUSAPI_IS_FILE_ON_CLUSTER_SHARED_VOLUME = uint32_t __stdcall(uint16_t*, int32_t*);
    using PCLUSAPI_SHARED_VOLUME_SET_SNAPSHOT_STATE = uint32_t __stdcall(::win32::guid, uint16_t*, Windows::Win32::WindowsClustering::CLUSTER_SHARED_VOLUME_SNAPSHOT_STATE);
    using PCLUSAPI_CAN_RESOURCE_BE_DEPENDENT = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::WindowsClustering::_HRESOURCE*, Windows::Win32::WindowsClustering::_HRESOURCE*);
    using PCLUSAPI_CLUSTER_RESOURCE_CONTROL = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HRESOURCE*, Windows::Win32::WindowsClustering::_HNODE*, uint32_t, void*, uint32_t, void*, uint32_t, uint32_t*);
    using PCLUSAPI_CLUSTER_RESOURCE_TYPE_CONTROL = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HCLUSTER*, uint16_t*, Windows::Win32::WindowsClustering::_HNODE*, uint32_t, void*, uint32_t, void*, uint32_t, uint32_t*);
    using PCLUSAPI_CLUSTER_GROUP_CONTROL = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HGROUP*, Windows::Win32::WindowsClustering::_HNODE*, uint32_t, void*, uint32_t, void*, uint32_t, uint32_t*);
    using PCLUSAPI_CLUSTER_NODE_CONTROL = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HNODE*, Windows::Win32::WindowsClustering::_HNODE*, uint32_t, void*, uint32_t, void*, uint32_t, uint32_t*);
    using PCLUSAPI_GET_CLUSTER_RESOURCE_NETWORK_NAME = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::WindowsClustering::_HRESOURCE*, uint16_t*, uint32_t*);
    using PCLUSAPI_CLUSTER_RESOURCE_OPEN_ENUM = Windows::Win32::WindowsClustering::_HRESENUM* __stdcall(Windows::Win32::WindowsClustering::_HRESOURCE*, uint32_t);
    using PCLUSAPI_CLUSTER_RESOURCE_GET_ENUM_COUNT = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HRESENUM*);
    using PCLUSAPI_CLUSTER_RESOURCE_ENUM = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HRESENUM*, uint32_t, uint32_t*, uint16_t*, uint32_t*);
    using PCLUSAPI_CLUSTER_RESOURCE_CLOSE_ENUM = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HRESENUM*);
    using PCLUSAPI_CREATE_CLUSTER_RESOURCE_TYPE = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HCLUSTER*, uint16_t*, uint16_t*, uint16_t*, uint32_t, uint32_t);
    using PCLUSAPI_DELETE_CLUSTER_RESOURCE_TYPE = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HCLUSTER*, uint16_t*);
    using PCLUSAPI_CLUSTER_RESOURCE_TYPE_OPEN_ENUM = Windows::Win32::WindowsClustering::_HRESTYPEENUM* __stdcall(Windows::Win32::WindowsClustering::_HCLUSTER*, uint16_t*, uint32_t);
    using PCLUSAPI_CLUSTER_RESOURCE_TYPE_GET_ENUM_COUNT = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HRESTYPEENUM*);
    using PCLUSAPI_CLUSTER_RESOURCE_TYPE_ENUM = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HRESTYPEENUM*, uint32_t, uint32_t*, uint16_t*, uint32_t*);
    using PCLUSAPI_CLUSTER_RESOURCE_TYPE_CLOSE_ENUM = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HRESTYPEENUM*);
    using PCLUSAPI_OPEN_CLUSTER_NETWORK = Windows::Win32::WindowsClustering::_HNETWORK* __stdcall(Windows::Win32::WindowsClustering::_HCLUSTER*, uint16_t*);
    using PCLUSAPI_OPEN_CLUSTER_NETWORK_EX = Windows::Win32::WindowsClustering::_HNETWORK* __stdcall(Windows::Win32::WindowsClustering::_HCLUSTER*, uint16_t*, uint32_t, uint32_t*);
    using PCLUSAPI_CLOSE_CLUSTER_NETWORK = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::WindowsClustering::_HNETWORK*);
    using PCLUSAPI_GET_CLUSTER_FROM_NETWORK = Windows::Win32::WindowsClustering::_HCLUSTER* __stdcall(Windows::Win32::WindowsClustering::_HNETWORK*);
    using PCLUSAPI_CLUSTER_NETWORK_OPEN_ENUM = Windows::Win32::WindowsClustering::_HNETWORKENUM* __stdcall(Windows::Win32::WindowsClustering::_HNETWORK*, uint32_t);
    using PCLUSAPI_CLUSTER_NETWORK_GET_ENUM_COUNT = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HNETWORKENUM*);
    using PCLUSAPI_CLUSTER_NETWORK_ENUM = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HNETWORKENUM*, uint32_t, uint32_t*, uint16_t*, uint32_t*);
    using PCLUSAPI_CLUSTER_NETWORK_CLOSE_ENUM = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HNETWORKENUM*);
    using PCLUSAPI_GET_CLUSTER_NETWORK_STATE = Windows::Win32::WindowsClustering::CLUSTER_NETWORK_STATE __stdcall(Windows::Win32::WindowsClustering::_HNETWORK*);
    using PCLUSAPI_SET_CLUSTER_NETWORK_NAME = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HNETWORK*, uint16_t*);
    using PCLUSAPI_GET_CLUSTER_NETWORK_ID = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HNETWORK*, uint16_t*, uint32_t*);
    using PCLUSAPI_CLUSTER_NETWORK_CONTROL = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HNETWORK*, Windows::Win32::WindowsClustering::_HNODE*, uint32_t, void*, uint32_t, void*, uint32_t, uint32_t*);
    using PCLUSAPI_OPEN_CLUSTER_NET_INTERFACE = Windows::Win32::WindowsClustering::_HNETINTERFACE* __stdcall(Windows::Win32::WindowsClustering::_HCLUSTER*, uint16_t*);
    using PCLUSAPI_OPEN_CLUSTER_NETINTERFACE_EX = Windows::Win32::WindowsClustering::_HNETINTERFACE* __stdcall(Windows::Win32::WindowsClustering::_HCLUSTER*, uint16_t*, uint32_t, uint32_t*);
    using PCLUSAPI_GET_CLUSTER_NET_INTERFACE = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HCLUSTER*, uint16_t*, uint16_t*, uint16_t*, uint32_t*);
    using PCLUSAPI_CLOSE_CLUSTER_NET_INTERFACE = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::WindowsClustering::_HNETINTERFACE*);
    using PCLUSAPI_GET_CLUSTER_FROM_NET_INTERFACE = Windows::Win32::WindowsClustering::_HCLUSTER* __stdcall(Windows::Win32::WindowsClustering::_HNETINTERFACE*);
    using PCLUSAPI_GET_CLUSTER_NET_INTERFACE_STATE = Windows::Win32::WindowsClustering::CLUSTER_NETINTERFACE_STATE __stdcall(Windows::Win32::WindowsClustering::_HNETINTERFACE*);
    using PCLUSAPI_CLUSTER_NET_INTERFACE_CONTROL = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HNETINTERFACE*, Windows::Win32::WindowsClustering::_HNODE*, uint32_t, void*, uint32_t, void*, uint32_t, uint32_t*);
    using PCLUSAPI_GET_CLUSTER_KEY = Windows::Win32::WindowsProgramming::HKEY __stdcall(Windows::Win32::WindowsClustering::_HCLUSTER*, uint32_t);
    using PCLUSAPI_GET_CLUSTER_GROUP_KEY = Windows::Win32::WindowsProgramming::HKEY __stdcall(Windows::Win32::WindowsClustering::_HGROUP*, uint32_t);
    using PCLUSAPI_GET_CLUSTER_RESOURCE_KEY = Windows::Win32::WindowsProgramming::HKEY __stdcall(Windows::Win32::WindowsClustering::_HRESOURCE*, uint32_t);
    using PCLUSAPI_GET_CLUSTER_NODE_KEY = Windows::Win32::WindowsProgramming::HKEY __stdcall(Windows::Win32::WindowsClustering::_HNODE*, uint32_t);
    using PCLUSAPI_GET_CLUSTER_NETWORK_KEY = Windows::Win32::WindowsProgramming::HKEY __stdcall(Windows::Win32::WindowsClustering::_HNETWORK*, uint32_t);
    using PCLUSAPI_GET_CLUSTER_NET_INTERFACE_KEY = Windows::Win32::WindowsProgramming::HKEY __stdcall(Windows::Win32::WindowsClustering::_HNETINTERFACE*, uint32_t);
    using PCLUSAPI_CLUSTER_REG_CREATE_KEY = int32_t __stdcall(Windows::Win32::WindowsProgramming::HKEY, uint16_t*, uint32_t, uint32_t, Windows::Win32::SystemServices::SECURITY_ATTRIBUTES*, Windows::Win32::WindowsProgramming::HKEY*, uint32_t*);
    using PCLUSAPI_CLUSTER_REG_OPEN_KEY = int32_t __stdcall(Windows::Win32::WindowsProgramming::HKEY, uint16_t*, uint32_t, Windows::Win32::WindowsProgramming::HKEY*);
    using PCLUSAPI_CLUSTER_REG_DELETE_KEY = int32_t __stdcall(Windows::Win32::WindowsProgramming::HKEY, uint16_t*);
    using PCLUSAPI_CLUSTER_REG_CLOSE_KEY = int32_t __stdcall(Windows::Win32::WindowsProgramming::HKEY);
    using PCLUSAPI_CLUSTER_REG_ENUM_KEY = int32_t __stdcall(Windows::Win32::WindowsProgramming::HKEY, uint32_t, uint16_t*, uint32_t*, Windows::Win32::WindowsProgramming::FILETIME*);
    using PCLUSAPI_CLUSTER_REG_SET_VALUE = uint32_t __stdcall(Windows::Win32::WindowsProgramming::HKEY, uint16_t*, uint32_t, uint8_t*, uint32_t);
    using PCLUSAPI_CLUSTER_REG_DELETE_VALUE = uint32_t __stdcall(Windows::Win32::WindowsProgramming::HKEY, uint16_t*);
    using PCLUSAPI_CLUSTER_REG_QUERY_VALUE = int32_t __stdcall(Windows::Win32::WindowsProgramming::HKEY, uint16_t*, uint32_t*, uint8_t*, uint32_t*);
    using PCLUSAPI_CLUSTER_REG_ENUM_VALUE = uint32_t __stdcall(Windows::Win32::WindowsProgramming::HKEY, uint32_t, uint16_t*, uint32_t*, uint32_t*, uint8_t*, uint32_t*);
    using PCLUSAPI_CLUSTER_REG_QUERY_INFO_KEY = int32_t __stdcall(Windows::Win32::WindowsProgramming::HKEY, uint32_t*, uint32_t*, uint32_t*, uint32_t*, uint32_t*, uint32_t*, Windows::Win32::WindowsProgramming::FILETIME*);
    using PCLUSAPI_CLUSTER_REG_GET_KEY_SECURITY = int32_t __stdcall(Windows::Win32::WindowsProgramming::HKEY, uint32_t, void*, uint32_t*);
    using PCLUSAPI_CLUSTER_REG_SET_KEY_SECURITY = int32_t __stdcall(Windows::Win32::WindowsProgramming::HKEY, uint32_t, void*);
    using PCLUSAPI_CLUSTER_REG_SYNC_DATABASE = int32_t __stdcall(Windows::Win32::WindowsClustering::_HCLUSTER*, uint32_t);
    using PCLUSAPI_CLUSTER_REG_CREATE_BATCH = int32_t __stdcall(Windows::Win32::WindowsProgramming::HKEY, Windows::Win32::WindowsClustering::_HREGBATCH**);
    using PCLUSTER_REG_BATCH_ADD_COMMAND = int32_t __stdcall(Windows::Win32::WindowsClustering::_HREGBATCH*, Windows::Win32::WindowsClustering::CLUSTER_REG_COMMAND, uint16_t*, uint32_t, void*, uint32_t);
    using PCLUSTER_REG_CLOSE_BATCH = int32_t __stdcall(Windows::Win32::WindowsClustering::_HREGBATCH*, Windows::Win32::SystemServices::BOOL, int32_t*);
    using PCLUSTER_REG_BATCH_READ_COMMAND = int32_t __stdcall(Windows::Win32::WindowsClustering::_HREGBATCHNOTIFICATION*, Windows::Win32::WindowsClustering::CLUSTER_BATCH_COMMAND*);
    using PCLUSTER_REG_BATCH_CLOSE_NOTIFICATION = int32_t __stdcall(Windows::Win32::WindowsClustering::_HREGBATCHNOTIFICATION*);
    using PCLUSTER_REG_CREATE_BATCH_NOTIFY_PORT = int32_t __stdcall(Windows::Win32::WindowsProgramming::HKEY, Windows::Win32::WindowsClustering::_HREGBATCHPORT**);
    using PCLUSTER_REG_CLOSE_BATCH_NOTIFY_PORT = int32_t __stdcall(Windows::Win32::WindowsClustering::_HREGBATCHPORT*);
    using PCLUSTER_REG_GET_BATCH_NOTIFICATION = int32_t __stdcall(Windows::Win32::WindowsClustering::_HREGBATCHPORT*, Windows::Win32::WindowsClustering::_HREGBATCHNOTIFICATION**);
    using PCLUSTER_REG_CREATE_READ_BATCH = int32_t __stdcall(Windows::Win32::WindowsProgramming::HKEY, Windows::Win32::WindowsClustering::_HREGREADBATCH**);
    using PCLUSTER_REG_READ_BATCH_ADD_COMMAND = int32_t __stdcall(Windows::Win32::WindowsClustering::_HREGREADBATCH*, uint16_t*, uint16_t*);
    using PCLUSTER_REG_CLOSE_READ_BATCH = int32_t __stdcall(Windows::Win32::WindowsClustering::_HREGREADBATCH*, Windows::Win32::WindowsClustering::_HREGREADBATCHREPLY**);
    using PCLUSTER_REG_CLOSE_READ_BATCH_EX = int32_t __stdcall(Windows::Win32::WindowsClustering::_HREGREADBATCH*, uint32_t, Windows::Win32::WindowsClustering::_HREGREADBATCHREPLY**);
    using PCLUSTER_REG_READ_BATCH_REPLY_NEXT_COMMAND = int32_t __stdcall(Windows::Win32::WindowsClustering::_HREGREADBATCHREPLY*, Windows::Win32::WindowsClustering::CLUSTER_READ_BATCH_COMMAND*);
    using PCLUSTER_REG_CLOSE_READ_BATCH_REPLY = int32_t __stdcall(Windows::Win32::WindowsClustering::_HREGREADBATCHREPLY*);
    using PCLUSTER_SET_ACCOUNT_ACCESS = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HCLUSTER*, uint16_t*, uint32_t, uint32_t);
    using PCLUSTER_SETUP_PROGRESS_CALLBACK = Windows::Win32::SystemServices::BOOL __stdcall(void*, Windows::Win32::WindowsClustering::CLUSTER_SETUP_PHASE, Windows::Win32::WindowsClustering::CLUSTER_SETUP_PHASE_TYPE, Windows::Win32::WindowsClustering::CLUSTER_SETUP_PHASE_SEVERITY, uint32_t, uint16_t*, uint32_t);
    using PCLUSAPI_CREATE_CLUSTER = Windows::Win32::WindowsClustering::_HCLUSTER* __stdcall(Windows::Win32::WindowsClustering::CREATE_CLUSTER_CONFIG*, Windows::Win32::WindowsClustering::PCLUSTER_SETUP_PROGRESS_CALLBACK*, void*);
    using PCLUSAPI_CREATE_CLUSTER_CNOLESS = Windows::Win32::WindowsClustering::_HCLUSTER* __stdcall(Windows::Win32::WindowsClustering::CREATE_CLUSTER_CONFIG*, Windows::Win32::WindowsClustering::PCLUSTER_SETUP_PROGRESS_CALLBACK*, void*);
    using PCLUSAPI_CREATE_CLUSTER_NAME_ACCOUNT = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HCLUSTER*, Windows::Win32::WindowsClustering::CREATE_CLUSTER_NAME_ACCOUNT*, Windows::Win32::WindowsClustering::PCLUSTER_SETUP_PROGRESS_CALLBACK*, void*);
    using PCLUSAPI_REMOVE_CLUSTER_NAME_ACCOUNT = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HCLUSTER*);
    using PCLUSAPI_ADD_CLUSTER_NODE = Windows::Win32::WindowsClustering::_HNODE* __stdcall(Windows::Win32::WindowsClustering::_HCLUSTER*, uint16_t*, Windows::Win32::WindowsClustering::PCLUSTER_SETUP_PROGRESS_CALLBACK*, void*);
    using PCLUSAPI_DESTROY_CLUSTER = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HCLUSTER*, Windows::Win32::WindowsClustering::PCLUSTER_SETUP_PROGRESS_CALLBACK*, void*, Windows::Win32::SystemServices::BOOL);
    using PSET_RESOURCE_STATUS_ROUTINE_EX = uint32_t __stdcall(intptr_t, Windows::Win32::WindowsClustering::RESOURCE_STATUS_EX*);
    using PSET_RESOURCE_STATUS_ROUTINE = uint32_t __stdcall(intptr_t, Windows::Win32::WindowsClustering::RESOURCE_STATUS*);
    using PQUORUM_RESOURCE_LOST = void __stdcall(intptr_t);
    using PLOG_EVENT_ROUTINE = void __stdcall(intptr_t, Windows::Win32::WindowsClustering::LOG_LEVEL, uint16_t*);
    using POPEN_ROUTINE = void* __stdcall(uint16_t*, Windows::Win32::WindowsProgramming::HKEY, intptr_t);
    using PCLOSE_ROUTINE = void __stdcall(void*);
    using PONLINE_ROUTINE = uint32_t __stdcall(void*, intptr_t*);
    using POFFLINE_ROUTINE = uint32_t __stdcall(void*);
    using PTERMINATE_ROUTINE = void __stdcall(void*);
    using PIS_ALIVE_ROUTINE = Windows::Win32::SystemServices::BOOL __stdcall(void*);
    using PLOOKS_ALIVE_ROUTINE = Windows::Win32::SystemServices::BOOL __stdcall(void*);
    using PARBITRATE_ROUTINE = uint32_t __stdcall(void*, Windows::Win32::WindowsClustering::PQUORUM_RESOURCE_LOST*);
    using PRELEASE_ROUTINE = uint32_t __stdcall(void*);
    using PRESOURCE_CONTROL_ROUTINE = uint32_t __stdcall(void*, uint32_t, void*, uint32_t, void*, uint32_t, uint32_t*);
    using PRESOURCE_TYPE_CONTROL_ROUTINE = uint32_t __stdcall(uint16_t*, uint32_t, void*, uint32_t, void*, uint32_t, uint32_t*);
    using POPEN_V2_ROUTINE = void* __stdcall(uint16_t*, Windows::Win32::WindowsProgramming::HKEY, intptr_t, uint32_t);
    using PONLINE_V2_ROUTINE = uint32_t __stdcall(void*, intptr_t*, uint32_t, uint8_t*, uint32_t, uint32_t);
    using POFFLINE_V2_ROUTINE = uint32_t __stdcall(void*, uint16_t*, uint32_t, uint8_t*, uint32_t, uint32_t);
    using PCANCEL_ROUTINE = uint32_t __stdcall(void*, uint32_t);
    using PBEGIN_RESCALL_ROUTINE = uint32_t __stdcall(void*, uint32_t, void*, uint32_t, void*, uint32_t, uint32_t*, int64_t, int32_t*);
    using PBEGIN_RESTYPECALL_ROUTINE = uint32_t __stdcall(uint16_t*, uint32_t, void*, uint32_t, void*, uint32_t, uint32_t*, int64_t, int32_t*);
    using PBEGIN_RESCALL_AS_USER_ROUTINE = uint32_t __stdcall(void*, Windows::Win32::SystemServices::HANDLE, uint32_t, void*, uint32_t, void*, uint32_t, uint32_t*, int64_t, int32_t*);
    using PBEGIN_RESTYPECALL_AS_USER_ROUTINE = uint32_t __stdcall(uint16_t*, Windows::Win32::SystemServices::HANDLE, uint32_t, void*, uint32_t, void*, uint32_t, uint32_t*, int64_t, int32_t*);
    using PSTARTUP_ROUTINE = uint32_t __stdcall(uint16_t*, uint32_t, uint32_t, Windows::Win32::WindowsClustering::PSET_RESOURCE_STATUS_ROUTINE*, Windows::Win32::WindowsClustering::PLOG_EVENT_ROUTINE*, Windows::Win32::WindowsClustering::CLRES_FUNCTION_TABLE**);
    using PSET_RESOURCE_LOCKED_MODE_ROUTINE = uint32_t __stdcall(intptr_t, Windows::Win32::SystemServices::BOOL, uint32_t);
    using PSIGNAL_FAILURE_ROUTINE = uint32_t __stdcall(intptr_t, Windows::Win32::WindowsClustering::FAILURE_TYPE, uint32_t);
    using PSET_RESOURCE_INMEMORY_NODELOCAL_PROPERTIES_ROUTINE = uint32_t __stdcall(intptr_t, uint8_t*, uint32_t);
    using PEND_CONTROL_CALL = uint32_t __stdcall(int64_t, uint32_t);
    using PEND_TYPE_CONTROL_CALL = uint32_t __stdcall(int64_t, uint32_t);
    using PEXTEND_RES_CONTROL_CALL = uint32_t __stdcall(int64_t, uint32_t);
    using PEXTEND_RES_TYPE_CONTROL_CALL = uint32_t __stdcall(int64_t, uint32_t);
    using PRAISE_RES_TYPE_NOTIFICATION = uint32_t __stdcall(uint16_t*, uint8_t*, uint32_t);
    using PCHANGE_RESOURCE_PROCESS_FOR_DUMPS = uint32_t __stdcall(intptr_t, uint16_t*, uint32_t, Windows::Win32::SystemServices::BOOL);
    using PCHANGE_RES_TYPE_PROCESS_FOR_DUMPS = uint32_t __stdcall(uint16_t*, uint16_t*, uint32_t, Windows::Win32::SystemServices::BOOL);
    using PSET_INTERNAL_STATE = uint32_t __stdcall(intptr_t, Windows::Win32::WindowsClustering::CLUSTER_RESOURCE_APPLICATION_STATE, Windows::Win32::SystemServices::BOOL);
    using PSET_RESOURCE_LOCKED_MODE_EX_ROUTINE = uint32_t __stdcall(intptr_t, Windows::Win32::SystemServices::BOOL, uint32_t, uint32_t);
    using PSTARTUP_EX_ROUTINE = uint32_t __stdcall(uint16_t*, uint32_t, uint32_t, Windows::Win32::WindowsClustering::CLRES_CALLBACK_FUNCTION_TABLE*, Windows::Win32::WindowsClustering::CLRES_FUNCTION_TABLE**);
    using PRESUTIL_START_RESOURCE_SERVICE = uint32_t __stdcall(uint16_t*, Windows::Win32::Security::SC_HANDLE__**);
    using PRESUTIL_VERIFY_RESOURCE_SERVICE = uint32_t __stdcall(uint16_t*);
    using PRESUTIL_STOP_RESOURCE_SERVICE = uint32_t __stdcall(uint16_t*);
    using PRESUTIL_VERIFY_SERVICE = uint32_t __stdcall(Windows::Win32::Security::SC_HANDLE__*);
    using PRESUTIL_STOP_SERVICE = uint32_t __stdcall(Windows::Win32::Security::SC_HANDLE__*);
    using PRESUTIL_CREATE_DIRECTORY_TREE = uint32_t __stdcall(uint16_t*);
    using PRESUTIL_IS_PATH_VALID = Windows::Win32::SystemServices::BOOL __stdcall(uint16_t*);
    using PRESUTIL_ENUM_PROPERTIES = uint32_t __stdcall(Windows::Win32::WindowsClustering::RESUTIL_PROPERTY_ITEM*, uint16_t*, uint32_t, uint32_t*, uint32_t*);
    using PRESUTIL_ENUM_PRIVATE_PROPERTIES = uint32_t __stdcall(Windows::Win32::WindowsProgramming::HKEY, uint16_t*, uint32_t, uint32_t*, uint32_t*);
    using PRESUTIL_GET_PROPERTIES = uint32_t __stdcall(Windows::Win32::WindowsProgramming::HKEY, Windows::Win32::WindowsClustering::RESUTIL_PROPERTY_ITEM*, void*, uint32_t, uint32_t*, uint32_t*);
    using PRESUTIL_GET_ALL_PROPERTIES = uint32_t __stdcall(Windows::Win32::WindowsProgramming::HKEY, Windows::Win32::WindowsClustering::RESUTIL_PROPERTY_ITEM*, void*, uint32_t, uint32_t*, uint32_t*);
    using PRESUTIL_GET_PRIVATE_PROPERTIES = uint32_t __stdcall(Windows::Win32::WindowsProgramming::HKEY, void*, uint32_t, uint32_t*, uint32_t*);
    using PRESUTIL_GET_PROPERTY_SIZE = uint32_t __stdcall(Windows::Win32::WindowsProgramming::HKEY, Windows::Win32::WindowsClustering::RESUTIL_PROPERTY_ITEM*, uint32_t*, uint32_t*);
    using PRESUTIL_GET_PROPERTY = uint32_t __stdcall(Windows::Win32::WindowsProgramming::HKEY, Windows::Win32::WindowsClustering::RESUTIL_PROPERTY_ITEM*, void**, uint32_t*);
    using PRESUTIL_VERIFY_PROPERTY_TABLE = uint32_t __stdcall(Windows::Win32::WindowsClustering::RESUTIL_PROPERTY_ITEM*, void*, Windows::Win32::SystemServices::BOOL, void*, uint32_t, uint8_t*);
    using PRESUTIL_SET_PROPERTY_TABLE = uint32_t __stdcall(Windows::Win32::WindowsProgramming::HKEY, Windows::Win32::WindowsClustering::RESUTIL_PROPERTY_ITEM*, void*, Windows::Win32::SystemServices::BOOL, void*, uint32_t, uint8_t*);
    using PRESUTIL_SET_PROPERTY_TABLE_EX = uint32_t __stdcall(Windows::Win32::WindowsProgramming::HKEY, Windows::Win32::WindowsClustering::RESUTIL_PROPERTY_ITEM*, void*, Windows::Win32::SystemServices::BOOL, void*, uint32_t, Windows::Win32::SystemServices::BOOL, uint8_t*);
    using PRESUTIL_SET_PROPERTY_PARAMETER_BLOCK = uint32_t __stdcall(Windows::Win32::WindowsProgramming::HKEY, Windows::Win32::WindowsClustering::RESUTIL_PROPERTY_ITEM*, void*, uint8_t*, void*, uint32_t, uint8_t*);
    using PRESUTIL_SET_PROPERTY_PARAMETER_BLOCK_EX = uint32_t __stdcall(Windows::Win32::WindowsProgramming::HKEY, Windows::Win32::WindowsClustering::RESUTIL_PROPERTY_ITEM*, void*, uint8_t*, void*, uint32_t, Windows::Win32::SystemServices::BOOL, uint8_t*);
    using PRESUTIL_SET_UNKNOWN_PROPERTIES = uint32_t __stdcall(Windows::Win32::WindowsProgramming::HKEY, Windows::Win32::WindowsClustering::RESUTIL_PROPERTY_ITEM*, void*, uint32_t);
    using PRESUTIL_GET_PROPERTIES_TO_PARAMETER_BLOCK = uint32_t __stdcall(Windows::Win32::WindowsProgramming::HKEY, Windows::Win32::WindowsClustering::RESUTIL_PROPERTY_ITEM*, uint8_t*, Windows::Win32::SystemServices::BOOL, uint16_t**);
    using PRESUTIL_PROPERTY_LIST_FROM_PARAMETER_BLOCK = uint32_t __stdcall(Windows::Win32::WindowsClustering::RESUTIL_PROPERTY_ITEM*, void*, uint32_t*, uint8_t*, uint32_t*, uint32_t*);
    using PRESUTIL_DUP_PARAMETER_BLOCK = uint32_t __stdcall(uint8_t*, uint8_t*, Windows::Win32::WindowsClustering::RESUTIL_PROPERTY_ITEM*);
    using PRESUTIL_FREE_PARAMETER_BLOCK = void __stdcall(uint8_t*, uint8_t*, Windows::Win32::WindowsClustering::RESUTIL_PROPERTY_ITEM*);
    using PRESUTIL_ADD_UNKNOWN_PROPERTIES = uint32_t __stdcall(Windows::Win32::WindowsProgramming::HKEY, Windows::Win32::WindowsClustering::RESUTIL_PROPERTY_ITEM*, void*, uint32_t, uint32_t*, uint32_t*);
    using PRESUTIL_SET_PRIVATE_PROPERTY_LIST = uint32_t __stdcall(Windows::Win32::WindowsProgramming::HKEY, void*, uint32_t);
    using PRESUTIL_VERIFY_PRIVATE_PROPERTY_LIST = uint32_t __stdcall(void*, uint32_t);
    using PRESUTIL_DUP_STRING = uint16_t* __stdcall(uint16_t*);
    using PRESUTIL_GET_BINARY_VALUE = uint32_t __stdcall(Windows::Win32::WindowsProgramming::HKEY, uint16_t*, uint8_t**, uint32_t*);
    using PRESUTIL_GET_SZ_VALUE = uint16_t* __stdcall(Windows::Win32::WindowsProgramming::HKEY, uint16_t*);
    using PRESUTIL_GET_EXPAND_SZ_VALUE = uint16_t* __stdcall(Windows::Win32::WindowsProgramming::HKEY, uint16_t*, Windows::Win32::SystemServices::BOOL);
    using PRESUTIL_GET_DWORD_VALUE = uint32_t __stdcall(Windows::Win32::WindowsProgramming::HKEY, uint16_t*, uint32_t*, uint32_t);
    using PRESUTIL_GET_QWORD_VALUE = uint32_t __stdcall(Windows::Win32::WindowsProgramming::HKEY, uint16_t*, uint64_t*, uint64_t);
    using PRESUTIL_SET_BINARY_VALUE = uint32_t __stdcall(Windows::Win32::WindowsProgramming::HKEY, uint16_t*, uint8_t*, uint32_t, uint8_t**, uint32_t*);
    using PRESUTIL_SET_SZ_VALUE = uint32_t __stdcall(Windows::Win32::WindowsProgramming::HKEY, uint16_t*, uint16_t*, uint16_t**);
    using PRESUTIL_SET_EXPAND_SZ_VALUE = uint32_t __stdcall(Windows::Win32::WindowsProgramming::HKEY, uint16_t*, uint16_t*, uint16_t**);
    using PRESUTIL_SET_MULTI_SZ_VALUE = uint32_t __stdcall(Windows::Win32::WindowsProgramming::HKEY, uint16_t*, uint16_t*, uint32_t, uint16_t**, uint32_t*);
    using PRESUTIL_SET_DWORD_VALUE = uint32_t __stdcall(Windows::Win32::WindowsProgramming::HKEY, uint16_t*, uint32_t, uint32_t*);
    using PRESUTIL_SET_QWORD_VALUE = uint32_t __stdcall(Windows::Win32::WindowsProgramming::HKEY, uint16_t*, uint64_t, uint64_t*);
    using PRESUTIL_GET_BINARY_PROPERTY = uint32_t __stdcall(uint8_t**, uint32_t*, Windows::Win32::WindowsClustering::CLUSPROP_BINARY*, uint8_t*, uint32_t, uint8_t**, uint32_t*);
    using PRESUTIL_GET_SZ_PROPERTY = uint32_t __stdcall(uint16_t**, Windows::Win32::WindowsClustering::CLUSPROP_SZ*, uint16_t*, uint8_t**, uint32_t*);
    using PRESUTIL_GET_MULTI_SZ_PROPERTY = uint32_t __stdcall(uint16_t**, uint32_t*, Windows::Win32::WindowsClustering::CLUSPROP_SZ*, uint16_t*, uint32_t, uint8_t**, uint32_t*);
    using PRESUTIL_GET_DWORD_PROPERTY = uint32_t __stdcall(uint32_t*, Windows::Win32::WindowsClustering::CLUSPROP_DWORD*, uint32_t, uint32_t, uint32_t, uint8_t**, uint32_t*);
    using PRESUTIL_GET_LONG_PROPERTY = uint32_t __stdcall(int32_t*, Windows::Win32::WindowsClustering::CLUSPROP_LONG*, int32_t, int32_t, int32_t, uint8_t**, uint32_t*);
    using PRESUTIL_GET_FILETIME_PROPERTY = uint32_t __stdcall(Windows::Win32::WindowsProgramming::FILETIME*, Windows::Win32::WindowsClustering::CLUSPROP_FILETIME*, Windows::Win32::WindowsProgramming::FILETIME, Windows::Win32::WindowsProgramming::FILETIME, Windows::Win32::WindowsProgramming::FILETIME, uint8_t**, uint32_t*);
    using PRESUTIL_GET_ENVIRONMENT_WITH_NET_NAME = void* __stdcall(Windows::Win32::WindowsClustering::_HRESOURCE*);
    using PRESUTIL_FREE_ENVIRONMENT = uint32_t __stdcall(void*);
    using PRESUTIL_EXPAND_ENVIRONMENT_STRINGS = uint16_t* __stdcall(uint16_t*);
    using PRESUTIL_SET_RESOURCE_SERVICE_ENVIRONMENT = uint32_t __stdcall(uint16_t*, Windows::Win32::WindowsClustering::_HRESOURCE*, Windows::Win32::WindowsClustering::PLOG_EVENT_ROUTINE*, intptr_t);
    using PRESUTIL_REMOVE_RESOURCE_SERVICE_ENVIRONMENT = uint32_t __stdcall(uint16_t*, Windows::Win32::WindowsClustering::PLOG_EVENT_ROUTINE*, intptr_t);
    using PRESUTIL_SET_RESOURCE_SERVICE_START_PARAMETERS = uint32_t __stdcall(uint16_t*, Windows::Win32::Security::SC_HANDLE__*, Windows::Win32::Security::SC_HANDLE__**, Windows::Win32::WindowsClustering::PLOG_EVENT_ROUTINE*, intptr_t);
    using PRESUTIL_FIND_SZ_PROPERTY = uint32_t __stdcall(void*, uint32_t, uint16_t*, uint16_t**);
    using PRESUTIL_FIND_EXPAND_SZ_PROPERTY = uint32_t __stdcall(void*, uint32_t, uint16_t*, uint16_t**);
    using PRESUTIL_FIND_EXPANDED_SZ_PROPERTY = uint32_t __stdcall(void*, uint32_t, uint16_t*, uint16_t**);
    using PRESUTIL_FIND_DWORD_PROPERTY = uint32_t __stdcall(void*, uint32_t, uint16_t*, uint32_t*);
    using PRESUTIL_FIND_BINARY_PROPERTY = uint32_t __stdcall(void*, uint32_t, uint16_t*, uint8_t**, uint32_t*);
    using PRESUTIL_FIND_MULTI_SZ_PROPERTY = uint32_t __stdcall(void*, uint32_t, uint16_t*, uint16_t**, uint32_t*);
    using PRESUTIL_FIND_LONG_PROPERTY = uint32_t __stdcall(void*, uint32_t, uint16_t*, int32_t*);
    using PRESUTIL_FIND_ULARGEINTEGER_PROPERTY = uint32_t __stdcall(void*, uint32_t, uint16_t*, uint64_t*);
    using PRESUTIL_FIND_FILETIME_PROPERTY = uint32_t __stdcall(void*, uint32_t, uint16_t*, Windows::Win32::WindowsProgramming::FILETIME*);
    using PWORKER_START_ROUTINE = uint32_t __stdcall(Windows::Win32::WindowsClustering::CLUS_WORKER*, void*);
    using PCLUSAPI_CLUS_WORKER_CREATE = uint32_t __stdcall(Windows::Win32::WindowsClustering::CLUS_WORKER*, Windows::Win32::WindowsClustering::PWORKER_START_ROUTINE*, void*);
    using PCLUSAPIClusWorkerCheckTerminate = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::WindowsClustering::CLUS_WORKER*);
    using PCLUSAPI_CLUS_WORKER_TERMINATE = void __stdcall(Windows::Win32::WindowsClustering::CLUS_WORKER*);
    using LPRESOURCE_CALLBACK = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HRESOURCE*, Windows::Win32::WindowsClustering::_HRESOURCE*, void*);
    using LPRESOURCE_CALLBACK_EX = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HCLUSTER*, Windows::Win32::WindowsClustering::_HRESOURCE*, Windows::Win32::WindowsClustering::_HRESOURCE*, void*);
    using LPGROUP_CALLBACK_EX = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HCLUSTER*, Windows::Win32::WindowsClustering::_HGROUP*, Windows::Win32::WindowsClustering::_HGROUP*, void*);
    using LPNODE_CALLBACK = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HCLUSTER*, Windows::Win32::WindowsClustering::_HNODE*, Windows::Win32::WindowsClustering::CLUSTER_NODE_STATE, void*);
    using PRESUTIL_RESOURCES_EQUAL = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::WindowsClustering::_HRESOURCE*, Windows::Win32::WindowsClustering::_HRESOURCE*);
    using PRESUTIL_RESOURCE_TYPES_EQUAL = Windows::Win32::SystemServices::BOOL __stdcall(uint16_t*, Windows::Win32::WindowsClustering::_HRESOURCE*);
    using PRESUTIL_IS_RESOURCE_CLASS_EQUAL = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::WindowsClustering::CLUS_RESOURCE_CLASS_INFO*, Windows::Win32::WindowsClustering::_HRESOURCE*);
    using PRESUTIL_ENUM_RESOURCES = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HRESOURCE*, uint16_t*, Windows::Win32::WindowsClustering::LPRESOURCE_CALLBACK*, void*);
    using PRESUTIL_ENUM_RESOURCES_EX = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HCLUSTER*, Windows::Win32::WindowsClustering::_HRESOURCE*, uint16_t*, Windows::Win32::WindowsClustering::LPRESOURCE_CALLBACK_EX*, void*);
    using PRESUTIL_GET_RESOURCE_DEPENDENCY = Windows::Win32::WindowsClustering::_HRESOURCE* __stdcall(Windows::Win32::SystemServices::HANDLE, uint16_t*);
    using PRESUTIL_GET_RESOURCE_DEPENDENCY_BY_NAME = Windows::Win32::WindowsClustering::_HRESOURCE* __stdcall(Windows::Win32::WindowsClustering::_HCLUSTER*, Windows::Win32::SystemServices::HANDLE, uint16_t*, Windows::Win32::SystemServices::BOOL);
    using PRESUTIL_GET_RESOURCE_DEPENDENCY_BY_CLASS = Windows::Win32::WindowsClustering::_HRESOURCE* __stdcall(Windows::Win32::WindowsClustering::_HCLUSTER*, Windows::Win32::SystemServices::HANDLE, Windows::Win32::WindowsClustering::CLUS_RESOURCE_CLASS_INFO*, Windows::Win32::SystemServices::BOOL);
    using PRESUTIL_GET_RESOURCE_NAME_DEPENDENCY = Windows::Win32::WindowsClustering::_HRESOURCE* __stdcall(uint16_t*, uint16_t*);
    using PRESUTIL_GET_RESOURCE_DEPENDENTIP_ADDRESS_PROPS = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HRESOURCE*, uint16_t*, uint32_t*, uint16_t*, uint32_t*, uint16_t*, uint32_t*);
    using PRESUTIL_FIND_DEPENDENT_DISK_RESOURCE_DRIVE_LETTER = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HCLUSTER*, Windows::Win32::WindowsClustering::_HRESOURCE*, uint16_t*, uint32_t*);
    using PRESUTIL_TERMINATE_SERVICE_PROCESS_FROM_RES_DLL = uint32_t __stdcall(uint32_t, Windows::Win32::SystemServices::BOOL, uint32_t*, Windows::Win32::WindowsClustering::PLOG_EVENT_ROUTINE*, intptr_t);
    using PRESUTIL_GET_PROPERTY_FORMATS = uint32_t __stdcall(Windows::Win32::WindowsClustering::RESUTIL_PROPERTY_ITEM*, void*, uint32_t, uint32_t*, uint32_t*);
    using PRESUTIL_GET_CORE_CLUSTER_RESOURCES = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HCLUSTER*, Windows::Win32::WindowsClustering::_HRESOURCE**, Windows::Win32::WindowsClustering::_HRESOURCE**, Windows::Win32::WindowsClustering::_HRESOURCE**);
    using PRESUTIL_GET_RESOURCE_NAME = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HRESOURCE*, uint16_t*, uint32_t*);
    using PCLUSTER_IS_PATH_ON_SHARED_VOLUME = Windows::Win32::SystemServices::BOOL __stdcall(uint16_t*);
    using PCLUSTER_GET_VOLUME_PATH_NAME = Windows::Win32::SystemServices::BOOL __stdcall(uint16_t*, uint16_t*, uint32_t);
    using PCLUSTER_GET_VOLUME_NAME_FOR_VOLUME_MOUNT_POINT = Windows::Win32::SystemServices::BOOL __stdcall(uint16_t*, uint16_t*, uint32_t);
    using PCLUSTER_PREPARE_SHARED_VOLUME_FOR_BACKUP = uint32_t __stdcall(uint16_t*, uint16_t*, uint32_t*, uint16_t*, uint32_t*);
    using PCLUSTER_CLEAR_BACKUP_STATE_FOR_SHARED_VOLUME = uint32_t __stdcall(uint16_t*);
    using PRESUTIL_SET_RESOURCE_SERVICE_START_PARAMETERS_EX = uint32_t __stdcall(uint16_t*, Windows::Win32::Security::SC_HANDLE__*, Windows::Win32::Security::SC_HANDLE__**, uint32_t, Windows::Win32::WindowsClustering::PLOG_EVENT_ROUTINE*, intptr_t);
    using PRESUTIL_ENUM_RESOURCES_EX2 = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HCLUSTER*, Windows::Win32::WindowsClustering::_HRESOURCE*, uint16_t*, Windows::Win32::WindowsClustering::LPRESOURCE_CALLBACK_EX*, void*, uint32_t);
    using PRESUTIL_GET_RESOURCE_DEPENDENCY_EX = Windows::Win32::WindowsClustering::_HRESOURCE* __stdcall(Windows::Win32::SystemServices::HANDLE, uint16_t*, uint32_t);
    using PRESUTIL_GET_RESOURCE_DEPENDENCY_BY_NAME_EX = Windows::Win32::WindowsClustering::_HRESOURCE* __stdcall(Windows::Win32::WindowsClustering::_HCLUSTER*, Windows::Win32::SystemServices::HANDLE, uint16_t*, Windows::Win32::SystemServices::BOOL, uint32_t);
    using PRESUTIL_GET_RESOURCE_DEPENDENCY_BY_CLASS_EX = Windows::Win32::WindowsClustering::_HRESOURCE* __stdcall(Windows::Win32::WindowsClustering::_HCLUSTER*, Windows::Win32::SystemServices::HANDLE, Windows::Win32::WindowsClustering::CLUS_RESOURCE_CLASS_INFO*, Windows::Win32::SystemServices::BOOL, uint32_t);
    using PRESUTIL_GET_RESOURCE_NAME_DEPENDENCY_EX = Windows::Win32::WindowsClustering::_HRESOURCE* __stdcall(uint16_t*, uint16_t*, uint32_t);
    using PRESUTIL_GET_CORE_CLUSTER_RESOURCES_EX = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HCLUSTER*, Windows::Win32::WindowsClustering::_HRESOURCE**, Windows::Win32::WindowsClustering::_HRESOURCE**, Windows::Win32::WindowsClustering::_HRESOURCE**, uint32_t);
    using POPEN_CLUSTER_CRYPT_PROVIDER = Windows::Win32::WindowsClustering::_HCLUSCRYPTPROVIDER* __stdcall(uint16_t*, int8_t*, uint32_t, uint32_t);
    using POPEN_CLUSTER_CRYPT_PROVIDEREX = Windows::Win32::WindowsClustering::_HCLUSCRYPTPROVIDER* __stdcall(uint16_t*, uint16_t*, int8_t*, uint32_t, uint32_t);
    using PCLOSE_CLUSTER_CRYPT_PROVIDER = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HCLUSCRYPTPROVIDER*);
    using PCLUSTER_ENCRYPT = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HCLUSCRYPTPROVIDER*, uint8_t*, uint32_t, uint8_t**, uint32_t*);
    using PCLUSTER_DECRYPT = uint32_t __stdcall(Windows::Win32::WindowsClustering::_HCLUSCRYPTPROVIDER*, uint8_t*, uint32_t, uint8_t**, uint32_t*);
    using PFREE_CLUSTER_CRYPT = uint32_t __stdcall(void*);
    using PREGISTER_APPINSTANCE = uint32_t __stdcall(Windows::Win32::SystemServices::HANDLE, ::win32::guid*, Windows::Win32::SystemServices::BOOL);
    using PREGISTER_APPINSTANCE_VERSION = uint32_t __stdcall(::win32::guid*, uint64_t, uint64_t);
    using PQUERY_APPINSTANCE_VERSION = uint32_t __stdcall(::win32::guid*, uint64_t*, uint64_t*, int32_t*);
    using PRESET_ALL_APPINSTANCE_VERSIONS = uint32_t __stdcall();
    using SET_APP_INSTANCE_CSV_FLAGS = uint32_t __stdcall(Windows::Win32::SystemServices::HANDLE, uint32_t, uint32_t);
#pragma endregion delegates

}
namespace win32::_impl_
{
#pragma region guids
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ClusApplication>{ 0xF2E606E5,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E606E5-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ClusCryptoKeys>{ 0xF2E6072B,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E6072B-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ClusDisk>{ 0xF2E60723,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E60723-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ClusDisks>{ 0xF2E60725,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E60725-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ClusNetInterface>{ 0xF2E606ED,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E606ED-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ClusNetInterfaces>{ 0xF2E606EF,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E606EF-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ClusNetwork>{ 0xF2E606F1,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E606F1-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ClusNetworkNetInterfaces>{ 0xF2E606F5,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E606F5-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ClusNetworks>{ 0xF2E606F3,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E606F3-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ClusNode>{ 0xF2E606F7,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E606F7-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ClusNodeNetInterfaces>{ 0xF2E606FB,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E606FB-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ClusNodes>{ 0xF2E606F9,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E606F9-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ClusPartition>{ 0xF2E6071F,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E6071F-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ClusPartitionEx>{ 0x53D51D26,0xB51B,0x4A79,{ 0xB2,0xC3,0x50,0x48,0xD9,0x3A,0x98,0xFC } }; // 53D51D26-B51B-4A79-B2C3-5048D93A98FC
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ClusPartitions>{ 0xF2E60721,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E60721-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ClusProperties>{ 0xF2E606FF,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E606FF-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ClusProperty>{ 0xF2E606FD,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E606FD-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ClusPropertyValue>{ 0xF2E60719,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E60719-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ClusPropertyValueData>{ 0xF2E6071D,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E6071D-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ClusPropertyValues>{ 0xF2E6071B,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E6071B-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ClusRefObject>{ 0xF2E60701,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E60701-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ClusRegistryKeys>{ 0xF2E60729,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E60729-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ClusResDependencies>{ 0xF2E60703,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E60703-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ClusResDependents>{ 0xF2E6072D,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E6072D-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ClusResGroup>{ 0xF2E60705,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E60705-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ClusResGroupPreferredOwnerNodes>{ 0xF2E606E7,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E606E7-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ClusResGroupResources>{ 0xF2E606E9,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E606E9-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ClusResGroups>{ 0xF2E60707,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E60707-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ClusResPossibleOwnerNodes>{ 0xF2E6070D,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E6070D-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ClusResType>{ 0xF2E6070F,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E6070F-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ClusResTypePossibleOwnerNodes>{ 0xF2E60717,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E60717-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ClusResTypeResources>{ 0xF2E60713,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E60713-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ClusResTypes>{ 0xF2E60711,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E60711-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ClusResource>{ 0xF2E60709,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E60709-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ClusResources>{ 0xF2E6070B,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E6070B-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ClusScsiAddress>{ 0xF2E60727,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E60727-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ClusVersion>{ 0xF2E60715,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E60715-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::Cluster>{ 0xF2E606E3,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E606E3-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ClusterNames>{ 0xF2E606EB,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E606EB-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::DomainNames>{ 0xF2E606E1,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E606E1-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::IGetClusterDataInfo>{ 0x97DEDE51,0xFC6B,0x11CF,{ 0xB5,0xF5,0x00,0xA0,0xC9,0x0A,0xB5,0x05 } }; // 97DEDE51-FC6B-11CF-B5F5-00A0C90AB505
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::IGetClusterGroupInfo>{ 0x97DEDE54,0xFC6B,0x11CF,{ 0xB5,0xF5,0x00,0xA0,0xC9,0x0A,0xB5,0x05 } }; // 97DEDE54-FC6B-11CF-B5F5-00A0C90AB505
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::IGetClusterNetInterfaceInfo>{ 0x97DEDE57,0xFC6B,0x11CF,{ 0xB5,0xF5,0x00,0xA0,0xC9,0x0A,0xB5,0x05 } }; // 97DEDE57-FC6B-11CF-B5F5-00A0C90AB505
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::IGetClusterNetworkInfo>{ 0x97DEDE56,0xFC6B,0x11CF,{ 0xB5,0xF5,0x00,0xA0,0xC9,0x0A,0xB5,0x05 } }; // 97DEDE56-FC6B-11CF-B5F5-00A0C90AB505
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::IGetClusterNodeInfo>{ 0x97DEDE53,0xFC6B,0x11CF,{ 0xB5,0xF5,0x00,0xA0,0xC9,0x0A,0xB5,0x05 } }; // 97DEDE53-FC6B-11CF-B5F5-00A0C90AB505
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::IGetClusterObjectInfo>{ 0x97DEDE52,0xFC6B,0x11CF,{ 0xB5,0xF5,0x00,0xA0,0xC9,0x0A,0xB5,0x05 } }; // 97DEDE52-FC6B-11CF-B5F5-00A0C90AB505
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::IGetClusterResourceInfo>{ 0x97DEDE55,0xFC6B,0x11CF,{ 0xB5,0xF5,0x00,0xA0,0xC9,0x0A,0xB5,0x05 } }; // 97DEDE55-FC6B-11CF-B5F5-00A0C90AB505
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::IGetClusterUIInfo>{ 0x97DEDE50,0xFC6B,0x11CF,{ 0xB5,0xF5,0x00,0xA0,0xC9,0x0A,0xB5,0x05 } }; // 97DEDE50-FC6B-11CF-B5F5-00A0C90AB505
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ISClusApplication>{ 0xF2E606E6,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E606E6-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ISClusCryptoKeys>{ 0xF2E6072C,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E6072C-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ISClusDisk>{ 0xF2E60724,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E60724-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ISClusDisks>{ 0xF2E60726,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E60726-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ISClusNetInterface>{ 0xF2E606EE,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E606EE-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ISClusNetInterfaces>{ 0xF2E606F0,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E606F0-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ISClusNetwork>{ 0xF2E606F2,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E606F2-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ISClusNetworkNetInterfaces>{ 0xF2E606F6,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E606F6-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ISClusNetworks>{ 0xF2E606F4,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E606F4-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ISClusNode>{ 0xF2E606F8,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E606F8-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ISClusNodeNetInterfaces>{ 0xF2E606FC,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E606FC-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ISClusNodes>{ 0xF2E606FA,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E606FA-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ISClusPartition>{ 0xF2E60720,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E60720-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ISClusPartitionEx>{ 0x8802D4FE,0xB32E,0x4AD1,{ 0x9D,0xBD,0x64,0xF1,0x8E,0x11,0x66,0xCE } }; // 8802D4FE-B32E-4AD1-9DBD-64F18E1166CE
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ISClusPartitions>{ 0xF2E60722,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E60722-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ISClusProperties>{ 0xF2E60700,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E60700-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ISClusProperty>{ 0xF2E606FE,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E606FE-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ISClusPropertyValue>{ 0xF2E6071A,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E6071A-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ISClusPropertyValueData>{ 0xF2E6071E,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E6071E-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ISClusPropertyValues>{ 0xF2E6071C,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E6071C-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ISClusRefObject>{ 0xF2E60702,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E60702-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ISClusRegistryKeys>{ 0xF2E6072A,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E6072A-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ISClusResDependencies>{ 0xF2E60704,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E60704-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ISClusResDependents>{ 0xF2E6072E,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E6072E-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ISClusResGroup>{ 0xF2E60706,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E60706-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ISClusResGroupPreferredOwnerNodes>{ 0xF2E606E8,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E606E8-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ISClusResGroupResources>{ 0xF2E606EA,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E606EA-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ISClusResGroups>{ 0xF2E60708,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E60708-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ISClusResPossibleOwnerNodes>{ 0xF2E6070E,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E6070E-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ISClusResType>{ 0xF2E60710,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E60710-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ISClusResTypePossibleOwnerNodes>{ 0xF2E60718,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E60718-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ISClusResTypeResources>{ 0xF2E60714,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E60714-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ISClusResTypes>{ 0xF2E60712,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E60712-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ISClusResource>{ 0xF2E6070A,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E6070A-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ISClusResources>{ 0xF2E6070C,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E6070C-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ISClusScsiAddress>{ 0xF2E60728,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E60728-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ISClusVersion>{ 0xF2E60716,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E60716-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ISCluster>{ 0xF2E606E4,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E606E4-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ISClusterNames>{ 0xF2E606EC,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E606EC-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::ISDomainNames>{ 0xF2E606E2,0x2631,0x11D1,{ 0x89,0xF1,0x00,0xA0,0xC9,0x0D,0x06,0x1E } }; // F2E606E2-2631-11D1-89F1-00A0C90D061E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::IWCContextMenuCallback>{ 0x97DEDE64,0xFC6B,0x11CF,{ 0xB5,0xF5,0x00,0xA0,0xC9,0x0A,0xB5,0x05 } }; // 97DEDE64-FC6B-11CF-B5F5-00A0C90AB505
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::IWCPropertySheetCallback>{ 0x97DEDE60,0xFC6B,0x11CF,{ 0xB5,0xF5,0x00,0xA0,0xC9,0x0A,0xB5,0x05 } }; // 97DEDE60-FC6B-11CF-B5F5-00A0C90AB505
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::IWCWizard97Callback>{ 0x97DEDE67,0xFC6B,0x11CF,{ 0xB5,0xF5,0x00,0xA0,0xC9,0x0A,0xB5,0x05 } }; // 97DEDE67-FC6B-11CF-B5F5-00A0C90AB505
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::IWCWizardCallback>{ 0x97DEDE62,0xFC6B,0x11CF,{ 0xB5,0xF5,0x00,0xA0,0xC9,0x0A,0xB5,0x05 } }; // 97DEDE62-FC6B-11CF-B5F5-00A0C90AB505
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::IWEExtendContextMenu>{ 0x97DEDE65,0xFC6B,0x11CF,{ 0xB5,0xF5,0x00,0xA0,0xC9,0x0A,0xB5,0x05 } }; // 97DEDE65-FC6B-11CF-B5F5-00A0C90AB505
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::IWEExtendPropertySheet>{ 0x97DEDE61,0xFC6B,0x11CF,{ 0xB5,0xF5,0x00,0xA0,0xC9,0x0A,0xB5,0x05 } }; // 97DEDE61-FC6B-11CF-B5F5-00A0C90AB505
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::IWEExtendWizard>{ 0x97DEDE63,0xFC6B,0x11CF,{ 0xB5,0xF5,0x00,0xA0,0xC9,0x0A,0xB5,0x05 } }; // 97DEDE63-FC6B-11CF-B5F5-00A0C90AB505
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::IWEExtendWizard97>{ 0x97DEDE68,0xFC6B,0x11CF,{ 0xB5,0xF5,0x00,0xA0,0xC9,0x0A,0xB5,0x05 } }; // 97DEDE68-FC6B-11CF-B5F5-00A0C90AB505
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsClustering::IWEInvokeCommand>{ 0x97DEDE66,0xFC6B,0x11CF,{ 0xB5,0xF5,0x00,0xA0,0xC9,0x0A,0xB5,0x05 } }; // 97DEDE66-FC6B-11CF-B5F5-00A0C90AB505
#pragma endregion guids

}
#endif
