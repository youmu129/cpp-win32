// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_WindowsFiltering_0_H
#define WIN32_Windows_Win32_WindowsFiltering_0_H
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
#pragma region enums
    enum class ARP_HARDWARE_TYPE : int32_t
    {
        ARP_HW_ENET = 1,
        ARP_HW_802 = 6,
    };
    enum class ARP_OPCODE : int32_t
    {
        ARP_REQUEST = 1,
        ARP_RESPONSE = 2,
    };
    enum class DL_ADDRESS_TYPE : int32_t
    {
        DlUnicast = 0,
        DlMulticast = 1,
        DlBroadcast = 2,
    };
    enum class FALLBACK_INDEX : int32_t
    {
        FallbackIndexTcpFastopen = 0,
        FallbackIndexMax = 1,
    };
    enum class FWPM_APPC_NETWORK_CAPABILITY_TYPE : int32_t
    {
        FWPM_APPC_NETWORK_CAPABILITY_INTERNET_CLIENT = 0,
        FWPM_APPC_NETWORK_CAPABILITY_INTERNET_CLIENT_SERVER = 1,
        FWPM_APPC_NETWORK_CAPABILITY_INTERNET_PRIVATE_NETWORK = 2,
    };
    enum class FWPM_CHANGE_TYPE : int32_t
    {
        FWPM_CHANGE_ADD = 1,
        FWPM_CHANGE_DELETE = 2,
        FWPM_CHANGE_TYPE_MAX = 3,
    };
    enum class FWPM_CONNECTION_EVENT_TYPE : int32_t
    {
        FWPM_CONNECTION_EVENT_ADD = 0,
        FWPM_CONNECTION_EVENT_DELETE = 1,
        FWPM_CONNECTION_EVENT_MAX = 2,
    };
    enum class FWPM_ENGINE_OPTION : int32_t
    {
        FWPM_ENGINE_COLLECT_NET_EVENTS = 0,
        FWPM_ENGINE_NET_EVENT_MATCH_ANY_KEYWORDS = 1,
        FWPM_ENGINE_NAME_CACHE = 2,
        FWPM_ENGINE_MONITOR_IPSEC_CONNECTIONS = 3,
        FWPM_ENGINE_PACKET_QUEUING = 4,
        FWPM_ENGINE_TXN_WATCHDOG_TIMEOUT_IN_MSEC = 5,
        FWPM_ENGINE_OPTION_MAX = 6,
    };
    enum class FWPM_FIELD_TYPE : int32_t
    {
        FWPM_FIELD_RAW_DATA = 0,
        FWPM_FIELD_IP_ADDRESS = 1,
        FWPM_FIELD_FLAGS = 2,
        FWPM_FIELD_TYPE_MAX = 3,
    };
    enum class FWPM_NET_EVENT_TYPE : int32_t
    {
        FWPM_NET_EVENT_TYPE_IKEEXT_MM_FAILURE = 0,
        FWPM_NET_EVENT_TYPE_IKEEXT_QM_FAILURE = 1,
        FWPM_NET_EVENT_TYPE_IKEEXT_EM_FAILURE = 2,
        FWPM_NET_EVENT_TYPE_CLASSIFY_DROP = 3,
        FWPM_NET_EVENT_TYPE_IPSEC_KERNEL_DROP = 4,
        FWPM_NET_EVENT_TYPE_IPSEC_DOSP_DROP = 5,
        FWPM_NET_EVENT_TYPE_CLASSIFY_ALLOW = 6,
        FWPM_NET_EVENT_TYPE_CAPABILITY_DROP = 7,
        FWPM_NET_EVENT_TYPE_CAPABILITY_ALLOW = 8,
        FWPM_NET_EVENT_TYPE_CLASSIFY_DROP_MAC = 9,
        FWPM_NET_EVENT_TYPE_LPM_PACKET_ARRIVAL = 10,
        FWPM_NET_EVENT_TYPE_MAX = 11,
    };
    enum class FWPM_PROVIDER_CONTEXT_TYPE : int32_t
    {
        FWPM_IPSEC_KEYING_CONTEXT = 0,
        FWPM_IPSEC_IKE_QM_TRANSPORT_CONTEXT = 1,
        FWPM_IPSEC_IKE_QM_TUNNEL_CONTEXT = 2,
        FWPM_IPSEC_AUTHIP_QM_TRANSPORT_CONTEXT = 3,
        FWPM_IPSEC_AUTHIP_QM_TUNNEL_CONTEXT = 4,
        FWPM_IPSEC_IKE_MM_CONTEXT = 5,
        FWPM_IPSEC_AUTHIP_MM_CONTEXT = 6,
        FWPM_CLASSIFY_OPTIONS_CONTEXT = 7,
        FWPM_GENERAL_CONTEXT = 8,
        FWPM_IPSEC_IKEV2_QM_TUNNEL_CONTEXT = 9,
        FWPM_IPSEC_IKEV2_MM_CONTEXT = 10,
        FWPM_IPSEC_DOSP_CONTEXT = 11,
        FWPM_IPSEC_IKEV2_QM_TRANSPORT_CONTEXT = 12,
        FWPM_PROVIDER_CONTEXT_TYPE_MAX = 13,
    };
    enum class FWPM_SERVICE_STATE : int32_t
    {
        FWPM_SERVICE_STOPPED = 0,
        FWPM_SERVICE_START_PENDING = 1,
        FWPM_SERVICE_STOP_PENDING = 2,
        FWPM_SERVICE_RUNNING = 3,
        FWPM_SERVICE_STATE_MAX = 4,
    };
    enum class FWPM_SYSTEM_PORT_TYPE : int32_t
    {
        FWPM_SYSTEM_PORT_RPC_EPMAP = 0,
        FWPM_SYSTEM_PORT_TEREDO = 1,
        FWPM_SYSTEM_PORT_IPHTTPS_IN = 2,
        FWPM_SYSTEM_PORT_IPHTTPS_OUT = 3,
        FWPM_SYSTEM_PORT_TYPE_MAX = 4,
    };
    enum class FWPM_VSWITCH_EVENT_TYPE : int32_t
    {
        FWPM_VSWITCH_EVENT_FILTER_ADD_TO_INCOMPLETE_LAYER = 0,
        FWPM_VSWITCH_EVENT_FILTER_ENGINE_NOT_IN_REQUIRED_POSITION = 1,
        FWPM_VSWITCH_EVENT_ENABLED_FOR_INSPECTION = 2,
        FWPM_VSWITCH_EVENT_DISABLED_FOR_INSPECTION = 3,
        FWPM_VSWITCH_EVENT_FILTER_ENGINE_REORDER = 4,
        FWPM_VSWITCH_EVENT_MAX = 5,
    };
    enum class FWP_AF : int32_t
    {
        FWP_AF_INET = 0,
        FWP_AF_INET6 = 1,
        FWP_AF_ETHER = 2,
        FWP_AF_NONE = 3,
    };
    enum class FWP_CLASSIFY_OPTION_TYPE : int32_t
    {
        FWP_CLASSIFY_OPTION_MULTICAST_STATE = 0,
        FWP_CLASSIFY_OPTION_LOOSE_SOURCE_MAPPING = 1,
        FWP_CLASSIFY_OPTION_UNICAST_LIFETIME = 2,
        FWP_CLASSIFY_OPTION_MCAST_BCAST_LIFETIME = 3,
        FWP_CLASSIFY_OPTION_SECURE_SOCKET_SECURITY_FLAGS = 4,
        FWP_CLASSIFY_OPTION_SECURE_SOCKET_AUTHIP_MM_POLICY_KEY = 5,
        FWP_CLASSIFY_OPTION_SECURE_SOCKET_AUTHIP_QM_POLICY_KEY = 6,
        FWP_CLASSIFY_OPTION_LOCAL_ONLY_MAPPING = 7,
        FWP_CLASSIFY_OPTION_MAX = 8,
    };
    enum class FWP_DATA_TYPE : int32_t
    {
        FWP_EMPTY = 0,
        FWP_UINT8 = 1,
        FWP_UINT16 = 2,
        FWP_UINT32 = 3,
        FWP_UINT64 = 4,
        FWP_INT8 = 5,
        FWP_INT16 = 6,
        FWP_INT32 = 7,
        FWP_INT64 = 8,
        FWP_FLOAT = 9,
        FWP_DOUBLE = 10,
        FWP_BYTE_ARRAY16_TYPE = 11,
        FWP_BYTE_BLOB_TYPE = 12,
        FWP_SID = 13,
        FWP_SECURITY_DESCRIPTOR_TYPE = 14,
        FWP_TOKEN_INFORMATION_TYPE = 15,
        FWP_TOKEN_ACCESS_INFORMATION_TYPE = 16,
        FWP_UNICODE_STRING_TYPE = 17,
        FWP_BYTE_ARRAY6_TYPE = 18,
        FWP_BITMAP_INDEX_TYPE = 19,
        FWP_BITMAP_ARRAY64_TYPE = 20,
        FWP_SINGLE_DATA_TYPE_MAX = 255,
        FWP_V4_ADDR_MASK = 256,
        FWP_V6_ADDR_MASK = 257,
        FWP_RANGE_TYPE = 258,
        FWP_DATA_TYPE_MAX = 259,
    };
    enum class FWP_DIRECTION : int32_t
    {
        FWP_DIRECTION_OUTBOUND = 0,
        FWP_DIRECTION_INBOUND = 1,
        FWP_DIRECTION_MAX = 2,
    };
    enum class FWP_ETHER_ENCAP_METHOD : int32_t
    {
        FWP_ETHER_ENCAP_METHOD_ETHER_V2 = 0,
        FWP_ETHER_ENCAP_METHOD_SNAP = 1,
        FWP_ETHER_ENCAP_METHOD_SNAP_W_OUI_ZERO = 3,
    };
    enum class FWP_FILTER_ENUM_TYPE : int32_t
    {
        FWP_FILTER_ENUM_FULLY_CONTAINED = 0,
        FWP_FILTER_ENUM_OVERLAPPING = 1,
        FWP_FILTER_ENUM_TYPE_MAX = 2,
    };
    enum class FWP_IP_VERSION : int32_t
    {
        FWP_IP_VERSION_V4 = 0,
        FWP_IP_VERSION_V6 = 1,
        FWP_IP_VERSION_NONE = 2,
        FWP_IP_VERSION_MAX = 3,
    };
    enum class FWP_MATCH_TYPE : int32_t
    {
        FWP_MATCH_EQUAL = 0,
        FWP_MATCH_GREATER = 1,
        FWP_MATCH_LESS = 2,
        FWP_MATCH_GREATER_OR_EQUAL = 3,
        FWP_MATCH_LESS_OR_EQUAL = 4,
        FWP_MATCH_RANGE = 5,
        FWP_MATCH_FLAGS_ALL_SET = 6,
        FWP_MATCH_FLAGS_ANY_SET = 7,
        FWP_MATCH_FLAGS_NONE_SET = 8,
        FWP_MATCH_EQUAL_CASE_INSENSITIVE = 9,
        FWP_MATCH_NOT_EQUAL = 10,
        FWP_MATCH_PREFIX = 11,
        FWP_MATCH_NOT_PREFIX = 12,
        FWP_MATCH_TYPE_MAX = 13,
    };
    enum class FWP_VSWITCH_NETWORK_TYPE : int32_t
    {
        FWP_VSWITCH_NETWORK_TYPE_UNKNOWN = 0,
        FWP_VSWITCH_NETWORK_TYPE_PRIVATE = 1,
        FWP_VSWITCH_NETWORK_TYPE_INTERNAL = 2,
        FWP_VSWITCH_NETWORK_TYPE_EXTERNAL = 3,
    };
    enum class ICMP4_TIME_EXCEED_CODE : int32_t
    {
        ICMP4_TIME_EXCEED_TRANSIT = 0,
        ICMP4_TIME_EXCEED_REASSEMBLY = 1,
    };
    enum class ICMP4_UNREACH_CODE : int32_t
    {
        ICMP4_UNREACH_NET = 0,
        ICMP4_UNREACH_HOST = 1,
        ICMP4_UNREACH_PROTOCOL = 2,
        ICMP4_UNREACH_PORT = 3,
        ICMP4_UNREACH_FRAG_NEEDED = 4,
        ICMP4_UNREACH_SOURCEROUTE_FAILED = 5,
        ICMP4_UNREACH_NET_UNKNOWN = 6,
        ICMP4_UNREACH_HOST_UNKNOWN = 7,
        ICMP4_UNREACH_ISOLATED = 8,
        ICMP4_UNREACH_NET_ADMIN = 9,
        ICMP4_UNREACH_HOST_ADMIN = 10,
        ICMP4_UNREACH_NET_TOS = 11,
        ICMP4_UNREACH_HOST_TOS = 12,
        ICMP4_UNREACH_ADMIN = 13,
    };
    enum class IGMP_MAX_RESP_CODE_TYPE : int32_t
    {
        IGMP_MAX_RESP_CODE_TYPE_NORMAL = 0,
        IGMP_MAX_RESP_CODE_TYPE_FLOAT = 1,
    };
    enum class IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE : int32_t
    {
        IKEEXT_IMPERSONATION_NONE = 0,
        IKEEXT_IMPERSONATION_SOCKET_PRINCIPAL = 1,
        IKEEXT_IMPERSONATION_MAX = 2,
    };
    enum class IKEEXT_AUTHENTICATION_METHOD_TYPE : int32_t
    {
        IKEEXT_PRESHARED_KEY = 0,
        IKEEXT_CERTIFICATE = 1,
        IKEEXT_KERBEROS = 2,
        IKEEXT_ANONYMOUS = 3,
        IKEEXT_SSL = 4,
        IKEEXT_NTLM_V2 = 5,
        IKEEXT_IPV6_CGA = 6,
        IKEEXT_CERTIFICATE_ECDSA_P256 = 7,
        IKEEXT_CERTIFICATE_ECDSA_P384 = 8,
        IKEEXT_SSL_ECDSA_P256 = 9,
        IKEEXT_SSL_ECDSA_P384 = 10,
        IKEEXT_EAP = 11,
        IKEEXT_RESERVED = 12,
        IKEEXT_AUTHENTICATION_METHOD_TYPE_MAX = 13,
    };
    enum class IKEEXT_CERT_CONFIG_TYPE : int32_t
    {
        IKEEXT_CERT_CONFIG_EXPLICIT_TRUST_LIST = 0,
        IKEEXT_CERT_CONFIG_ENTERPRISE_STORE = 1,
        IKEEXT_CERT_CONFIG_TRUSTED_ROOT_STORE = 2,
        IKEEXT_CERT_CONFIG_UNSPECIFIED = 3,
        IKEEXT_CERT_CONFIG_TYPE_MAX = 4,
    };
    enum class IKEEXT_CERT_CRITERIA_NAME_TYPE : int32_t
    {
        IKEEXT_CERT_CRITERIA_DNS = 0,
        IKEEXT_CERT_CRITERIA_UPN = 1,
        IKEEXT_CERT_CRITERIA_RFC822 = 2,
        IKEEXT_CERT_CRITERIA_CN = 3,
        IKEEXT_CERT_CRITERIA_OU = 4,
        IKEEXT_CERT_CRITERIA_O = 5,
        IKEEXT_CERT_CRITERIA_DC = 6,
        IKEEXT_CERT_CRITERIA_NAME_TYPE_MAX = 7,
    };
    enum class IKEEXT_CIPHER_TYPE : int32_t
    {
        IKEEXT_CIPHER_DES = 0,
        IKEEXT_CIPHER_3DES = 1,
        IKEEXT_CIPHER_AES_128 = 2,
        IKEEXT_CIPHER_AES_192 = 3,
        IKEEXT_CIPHER_AES_256 = 4,
        IKEEXT_CIPHER_AES_GCM_128_16ICV = 5,
        IKEEXT_CIPHER_AES_GCM_256_16ICV = 6,
        IKEEXT_CIPHER_TYPE_MAX = 7,
    };
    enum class IKEEXT_DH_GROUP : int32_t
    {
        IKEEXT_DH_GROUP_NONE = 0,
        IKEEXT_DH_GROUP_1 = 1,
        IKEEXT_DH_GROUP_2 = 2,
        IKEEXT_DH_GROUP_14 = 3,
        IKEEXT_DH_GROUP_2048 = 3,
        IKEEXT_DH_ECP_256 = 4,
        IKEEXT_DH_ECP_384 = 5,
        IKEEXT_DH_GROUP_24 = 6,
        IKEEXT_DH_GROUP_MAX = 7,
    };
    enum class IKEEXT_EM_SA_STATE : int32_t
    {
        IKEEXT_EM_SA_STATE_NONE = 0,
        IKEEXT_EM_SA_STATE_SENT_ATTS = 1,
        IKEEXT_EM_SA_STATE_SSPI_SENT = 2,
        IKEEXT_EM_SA_STATE_AUTH_COMPLETE = 3,
        IKEEXT_EM_SA_STATE_FINAL = 4,
        IKEEXT_EM_SA_STATE_COMPLETE = 5,
        IKEEXT_EM_SA_STATE_MAX = 6,
    };
    enum class IKEEXT_INTEGRITY_TYPE : int32_t
    {
        IKEEXT_INTEGRITY_MD5 = 0,
        IKEEXT_INTEGRITY_SHA1 = 1,
        IKEEXT_INTEGRITY_SHA_256 = 2,
        IKEEXT_INTEGRITY_SHA_384 = 3,
        IKEEXT_INTEGRITY_TYPE_MAX = 4,
    };
    enum class IKEEXT_KEY_MODULE_TYPE : int32_t
    {
        IKEEXT_KEY_MODULE_IKE = 0,
        IKEEXT_KEY_MODULE_AUTHIP = 1,
        IKEEXT_KEY_MODULE_IKEV2 = 2,
        IKEEXT_KEY_MODULE_MAX = 3,
    };
    enum class IKEEXT_MM_SA_STATE : int32_t
    {
        IKEEXT_MM_SA_STATE_NONE = 0,
        IKEEXT_MM_SA_STATE_SA_SENT = 1,
        IKEEXT_MM_SA_STATE_SSPI_SENT = 2,
        IKEEXT_MM_SA_STATE_FINAL = 3,
        IKEEXT_MM_SA_STATE_FINAL_SENT = 4,
        IKEEXT_MM_SA_STATE_COMPLETE = 5,
        IKEEXT_MM_SA_STATE_MAX = 6,
    };
    enum class IKEEXT_QM_SA_STATE : int32_t
    {
        IKEEXT_QM_SA_STATE_NONE = 0,
        IKEEXT_QM_SA_STATE_INITIAL = 1,
        IKEEXT_QM_SA_STATE_FINAL = 2,
        IKEEXT_QM_SA_STATE_COMPLETE = 3,
        IKEEXT_QM_SA_STATE_MAX = 4,
    };
    enum class IKEEXT_SA_ROLE : int32_t
    {
        IKEEXT_SA_ROLE_INITIATOR = 0,
        IKEEXT_SA_ROLE_RESPONDER = 1,
        IKEEXT_SA_ROLE_MAX = 2,
    };
    enum class IPSEC_AUTH_TYPE : int32_t
    {
        IPSEC_AUTH_MD5 = 0,
        IPSEC_AUTH_SHA_1 = 1,
        IPSEC_AUTH_SHA_256 = 2,
        IPSEC_AUTH_AES_128 = 3,
        IPSEC_AUTH_AES_192 = 4,
        IPSEC_AUTH_AES_256 = 5,
        IPSEC_AUTH_MAX = 6,
    };
    enum class IPSEC_CIPHER_TYPE : int32_t
    {
        IPSEC_CIPHER_TYPE_DES = 1,
        IPSEC_CIPHER_TYPE_3DES = 2,
        IPSEC_CIPHER_TYPE_AES_128 = 3,
        IPSEC_CIPHER_TYPE_AES_192 = 4,
        IPSEC_CIPHER_TYPE_AES_256 = 5,
        IPSEC_CIPHER_TYPE_MAX = 6,
    };
    enum class IPSEC_FAILURE_POINT : int32_t
    {
        IPSEC_FAILURE_NONE = 0,
        IPSEC_FAILURE_ME = 1,
        IPSEC_FAILURE_PEER = 2,
        IPSEC_FAILURE_POINT_MAX = 3,
    };
    enum class IPSEC_PFS_GROUP : int32_t
    {
        IPSEC_PFS_NONE = 0,
        IPSEC_PFS_1 = 1,
        IPSEC_PFS_2 = 2,
        IPSEC_PFS_2048 = 3,
        IPSEC_PFS_14 = 3,
        IPSEC_PFS_ECP_256 = 4,
        IPSEC_PFS_ECP_384 = 5,
        IPSEC_PFS_MM = 6,
        IPSEC_PFS_24 = 7,
        IPSEC_PFS_MAX = 8,
    };
    enum class IPSEC_SA_CONTEXT_EVENT_TYPE0 : int32_t
    {
        IPSEC_SA_CONTEXT_EVENT_ADD = 1,
        IPSEC_SA_CONTEXT_EVENT_DELETE = 2,
        IPSEC_SA_CONTEXT_EVENT_MAX = 3,
    };
    enum class IPSEC_TOKEN_MODE : int32_t
    {
        IPSEC_TOKEN_MODE_MAIN = 0,
        IPSEC_TOKEN_MODE_EXTENDED = 1,
        IPSEC_TOKEN_MODE_MAX = 2,
    };
    enum class IPSEC_TOKEN_PRINCIPAL : int32_t
    {
        IPSEC_TOKEN_PRINCIPAL_LOCAL = 0,
        IPSEC_TOKEN_PRINCIPAL_PEER = 1,
        IPSEC_TOKEN_PRINCIPAL_MAX = 2,
    };
    enum class IPSEC_TOKEN_TYPE : int32_t
    {
        IPSEC_TOKEN_TYPE_MACHINE = 0,
        IPSEC_TOKEN_TYPE_IMPERSONATION = 1,
        IPSEC_TOKEN_TYPE_MAX = 2,
    };
    enum class IPSEC_TRAFFIC_TYPE : int32_t
    {
        IPSEC_TRAFFIC_TYPE_TRANSPORT = 0,
        IPSEC_TRAFFIC_TYPE_TUNNEL = 1,
        IPSEC_TRAFFIC_TYPE_MAX = 2,
    };
    enum class IPSEC_TRANSFORM_TYPE : int32_t
    {
        IPSEC_TRANSFORM_AH = 1,
        IPSEC_TRANSFORM_ESP_AUTH = 2,
        IPSEC_TRANSFORM_ESP_CIPHER = 3,
        IPSEC_TRANSFORM_ESP_AUTH_AND_CIPHER = 4,
        IPSEC_TRANSFORM_ESP_AUTH_FW = 5,
        IPSEC_TRANSFORM_TYPE_MAX = 6,
    };
    enum class IPV4_OPTION_TYPE : int32_t
    {
        IP_OPT_EOL = 0,
        IP_OPT_NOP = 1,
        IP_OPT_SECURITY = 130,
        IP_OPT_LSRR = 131,
        IP_OPT_TS = 68,
        IP_OPT_RR = 7,
        IP_OPT_SSRR = 137,
        IP_OPT_SID = 136,
        IP_OPT_ROUTER_ALERT = 148,
        IP_OPT_MULTIDEST = 149,
    };
    enum class IPV6_OPTION_TYPE : int32_t
    {
        IP6OPT_PAD1 = 0,
        IP6OPT_PADN = 1,
        IP6OPT_TUNNEL_LIMIT = 4,
        IP6OPT_ROUTER_ALERT = 5,
        IP6OPT_JUMBO = 194,
        IP6OPT_NSAP_ADDR = 195,
    };
    enum class IP_OPTION_TIMESTAMP_FLAGS : int32_t
    {
        IP_OPTION_TIMESTAMP_ONLY = 0,
        IP_OPTION_TIMESTAMP_ADDRESS = 1,
        IP_OPTION_TIMESTAMP_SPECIFIC_ADDRESS = 3,
    };
    enum class MLD_MAX_RESP_CODE_TYPE : int32_t
    {
        MLD_MAX_RESP_CODE_TYPE_NORMAL = 0,
        MLD_MAX_RESP_CODE_TYPE_FLOAT = 1,
    };
    enum class ND_OPTION_TYPE : int32_t
    {
        ND_OPT_SOURCE_LINKADDR = 1,
        ND_OPT_TARGET_LINKADDR = 2,
        ND_OPT_PREFIX_INFORMATION = 3,
        ND_OPT_REDIRECTED_HEADER = 4,
        ND_OPT_MTU = 5,
        ND_OPT_NBMA_SHORTCUT_LIMIT = 6,
        ND_OPT_ADVERTISEMENT_INTERVAL = 7,
        ND_OPT_HOME_AGENT_INFORMATION = 8,
        ND_OPT_SOURCE_ADDR_LIST = 9,
        ND_OPT_TARGET_ADDR_LIST = 10,
        ND_OPT_ROUTE_INFO = 24,
        ND_OPT_RDNSS = 25,
        ND_OPT_DNSSL = 31,
    };
    enum class NPI_MODULEID_TYPE : int32_t
    {
        MIT_GUID = 1,
        MIT_IF_LUID = 2,
    };
    enum class TUNNEL_SUB_TYPE : int32_t
    {
        TUNNEL_SUB_TYPE_NONE = 0,
        TUNNEL_SUB_TYPE_CP = 1,
        TUNNEL_SUB_TYPE_IPTLS = 2,
        TUNNEL_SUB_TYPE_HA = 3,
    };
#pragma endregion enums

#pragma region forward_declarations
    struct ARP_HEADER;
    union DL_EI48;
    union DL_EI64;
    union DL_EUI48;
    union DL_EUI64;
    union DL_OUI;
    struct DL_TEREDO_ADDRESS;
    struct DL_TEREDO_ADDRESS_PRV;
    struct DL_TUNNEL_ADDRESS;
    struct ETHERNET_HEADER;
    struct FWPM_ACTION0;
    struct FWPM_CALLOUT0;
    struct FWPM_CALLOUT_CHANGE0;
    struct FWPM_CALLOUT_ENUM_TEMPLATE0;
    struct FWPM_CALLOUT_SUBSCRIPTION0;
    struct FWPM_CLASSIFY_OPTION0;
    struct FWPM_CLASSIFY_OPTIONS0;
    struct FWPM_CONNECTION0;
    struct FWPM_CONNECTION_ENUM_TEMPLATE0;
    struct FWPM_CONNECTION_SUBSCRIPTION0;
    struct FWPM_DISPLAY_DATA0;
    struct FWPM_FIELD0;
    struct FWPM_FILTER0;
    struct FWPM_FILTER_CHANGE0;
    struct FWPM_FILTER_CONDITION0;
    struct FWPM_FILTER_ENUM_TEMPLATE0;
    struct FWPM_FILTER_SUBSCRIPTION0;
    struct FWPM_LAYER0;
    struct FWPM_LAYER_ENUM_TEMPLATE0;
    struct FWPM_LAYER_STATISTICS0;
    struct FWPM_NET_EVENT0;
    struct FWPM_NET_EVENT1;
    struct FWPM_NET_EVENT2;
    struct FWPM_NET_EVENT3;
    struct FWPM_NET_EVENT4_;
    struct FWPM_NET_EVENT5_;
    struct FWPM_NET_EVENT_CAPABILITY_ALLOW0;
    struct FWPM_NET_EVENT_CAPABILITY_DROP0;
    struct FWPM_NET_EVENT_CLASSIFY_ALLOW0;
    struct FWPM_NET_EVENT_CLASSIFY_DROP0;
    struct FWPM_NET_EVENT_CLASSIFY_DROP1;
    struct FWPM_NET_EVENT_CLASSIFY_DROP2;
    struct FWPM_NET_EVENT_CLASSIFY_DROP_MAC0;
    struct FWPM_NET_EVENT_ENUM_TEMPLATE0;
    struct FWPM_NET_EVENT_HEADER0;
    struct FWPM_NET_EVENT_HEADER1;
    struct FWPM_NET_EVENT_HEADER2;
    struct FWPM_NET_EVENT_HEADER3;
    struct FWPM_NET_EVENT_IKEEXT_EM_FAILURE0;
    struct FWPM_NET_EVENT_IKEEXT_EM_FAILURE1;
    struct FWPM_NET_EVENT_IKEEXT_MM_FAILURE0;
    struct FWPM_NET_EVENT_IKEEXT_MM_FAILURE1;
    struct FWPM_NET_EVENT_IKEEXT_MM_FAILURE2_;
    struct FWPM_NET_EVENT_IKEEXT_QM_FAILURE0;
    struct FWPM_NET_EVENT_IKEEXT_QM_FAILURE1_;
    struct FWPM_NET_EVENT_IPSEC_DOSP_DROP0;
    struct FWPM_NET_EVENT_IPSEC_KERNEL_DROP0;
    struct FWPM_NET_EVENT_LPM_PACKET_ARRIVAL0_;
    struct FWPM_NET_EVENT_SUBSCRIPTION0;
    struct FWPM_PROVIDER0;
    struct FWPM_PROVIDER_CHANGE0;
    struct FWPM_PROVIDER_CONTEXT0;
    struct FWPM_PROVIDER_CONTEXT1;
    struct FWPM_PROVIDER_CONTEXT2;
    struct FWPM_PROVIDER_CONTEXT3_;
    struct FWPM_PROVIDER_CONTEXT_CHANGE0;
    struct FWPM_PROVIDER_CONTEXT_ENUM_TEMPLATE0;
    struct FWPM_PROVIDER_CONTEXT_SUBSCRIPTION0;
    struct FWPM_PROVIDER_ENUM_TEMPLATE0;
    struct FWPM_PROVIDER_SUBSCRIPTION0;
    struct FWPM_SESSION0;
    struct FWPM_SESSION_ENUM_TEMPLATE0;
    struct FWPM_STATISTICS0;
    struct FWPM_SUBLAYER0;
    struct FWPM_SUBLAYER_CHANGE0;
    struct FWPM_SUBLAYER_ENUM_TEMPLATE0;
    struct FWPM_SUBLAYER_SUBSCRIPTION0;
    struct FWPM_SYSTEM_PORTS0;
    struct FWPM_SYSTEM_PORTS_BY_TYPE0;
    struct FWPM_VSWITCH_EVENT0;
    struct FWPM_VSWITCH_EVENT_SUBSCRIPTION0;
    struct FWP_BITMAP_ARRAY64_;
    struct FWP_BYTE_ARRAY16;
    struct FWP_BYTE_ARRAY6;
    struct FWP_BYTE_BLOB;
    struct FWP_CONDITION_VALUE0;
    struct FWP_RANGE0;
    struct FWP_TOKEN_INFORMATION;
    struct FWP_V4_ADDR_AND_MASK;
    struct FWP_V6_ADDR_AND_MASK;
    struct FWP_VALUE0;
    struct ICMPV4_ADDRESS_MASK_MESSAGE;
    struct ICMPV4_ROUTER_ADVERT_ENTRY;
    struct ICMPV4_ROUTER_ADVERT_HEADER;
    struct ICMPV4_ROUTER_SOLICIT;
    struct ICMPV4_TIMESTAMP_MESSAGE;
    struct ICMP_HEADER;
    struct ICMP_MESSAGE;
    struct IGMPV3_QUERY_HEADER;
    struct IGMPV3_REPORT_HEADER;
    struct IGMPV3_REPORT_RECORD_HEADER;
    struct IGMP_HEADER;
    struct IKEEXT_AUTHENTICATION_METHOD0;
    struct IKEEXT_AUTHENTICATION_METHOD1;
    struct IKEEXT_AUTHENTICATION_METHOD2;
    struct IKEEXT_CERTIFICATE_AUTHENTICATION0;
    struct IKEEXT_CERTIFICATE_AUTHENTICATION1;
    struct IKEEXT_CERTIFICATE_AUTHENTICATION2;
    struct IKEEXT_CERTIFICATE_CREDENTIAL0;
    struct IKEEXT_CERTIFICATE_CREDENTIAL1;
    struct IKEEXT_CERTIFICATE_CRITERIA0;
    struct IKEEXT_CERT_EKUS0;
    struct IKEEXT_CERT_NAME0;
    struct IKEEXT_CERT_ROOT_CONFIG0;
    struct IKEEXT_CIPHER_ALGORITHM0;
    struct IKEEXT_COMMON_STATISTICS0;
    struct IKEEXT_COMMON_STATISTICS1;
    struct IKEEXT_COOKIE_PAIR0;
    struct IKEEXT_CREDENTIAL0;
    struct IKEEXT_CREDENTIAL1;
    struct IKEEXT_CREDENTIAL2;
    struct IKEEXT_CREDENTIALS0;
    struct IKEEXT_CREDENTIALS1;
    struct IKEEXT_CREDENTIALS2;
    struct IKEEXT_CREDENTIAL_PAIR0;
    struct IKEEXT_CREDENTIAL_PAIR1;
    struct IKEEXT_CREDENTIAL_PAIR2;
    struct IKEEXT_EAP_AUTHENTICATION0;
    struct IKEEXT_EM_POLICY0;
    struct IKEEXT_EM_POLICY1;
    struct IKEEXT_EM_POLICY2;
    struct IKEEXT_INTEGRITY_ALGORITHM0;
    struct IKEEXT_IPV6_CGA_AUTHENTICATION0;
    struct IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS0;
    struct IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS1;
    struct IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS0;
    struct IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS1;
    struct IKEEXT_KERBEROS_AUTHENTICATION0;
    struct IKEEXT_KERBEROS_AUTHENTICATION1;
    struct IKEEXT_KEYMODULE_STATISTICS0;
    struct IKEEXT_KEYMODULE_STATISTICS1;
    struct IKEEXT_NAME_CREDENTIAL0;
    struct IKEEXT_NTLM_V2_AUTHENTICATION0;
    struct IKEEXT_POLICY0;
    struct IKEEXT_POLICY1;
    struct IKEEXT_POLICY2;
    struct IKEEXT_PRESHARED_KEY_AUTHENTICATION0;
    struct IKEEXT_PRESHARED_KEY_AUTHENTICATION1;
    struct IKEEXT_PROPOSAL0;
    struct IKEEXT_RESERVED_AUTHENTICATION0;
    struct IKEEXT_SA_DETAILS0;
    struct IKEEXT_SA_DETAILS1;
    struct IKEEXT_SA_DETAILS2;
    struct IKEEXT_SA_ENUM_TEMPLATE0;
    struct IKEEXT_STATISTICS0;
    struct IKEEXT_STATISTICS1;
    struct IKEEXT_TRAFFIC0;
    struct IPSEC_ADDRESS_INFO0;
    struct IPSEC_AGGREGATE_DROP_PACKET_STATISTICS0;
    struct IPSEC_AGGREGATE_DROP_PACKET_STATISTICS1;
    struct IPSEC_AGGREGATE_SA_STATISTICS0;
    struct IPSEC_AH_DROP_PACKET_STATISTICS0;
    struct IPSEC_AUTH_AND_CIPHER_TRANSFORM0;
    struct IPSEC_AUTH_TRANSFORM0;
    struct IPSEC_AUTH_TRANSFORM_ID0;
    struct IPSEC_CIPHER_TRANSFORM0;
    struct IPSEC_CIPHER_TRANSFORM_ID0;
    struct IPSEC_DOSP_OPTIONS0;
    struct IPSEC_DOSP_STATE0;
    struct IPSEC_DOSP_STATE_ENUM_TEMPLATE0;
    struct IPSEC_DOSP_STATISTICS0;
    struct IPSEC_ESP_DROP_PACKET_STATISTICS0;
    struct IPSEC_GETSPI0;
    struct IPSEC_GETSPI1;
    struct IPSEC_ID0;
    struct IPSEC_KEYING_POLICY0;
    struct IPSEC_KEYING_POLICY1;
    struct IPSEC_KEYMODULE_STATE0;
    struct IPSEC_KEY_MANAGER0;
    struct IPSEC_KEY_MANAGER_CALLBACKS0;
    struct IPSEC_PROPOSAL0;
    struct IPSEC_SA0;
    struct IPSEC_SA_AUTH_AND_CIPHER_INFORMATION0;
    struct IPSEC_SA_AUTH_INFORMATION0;
    struct IPSEC_SA_BUNDLE0;
    struct IPSEC_SA_BUNDLE1;
    struct IPSEC_SA_CIPHER_INFORMATION0;
    struct IPSEC_SA_CONTEXT0;
    struct IPSEC_SA_CONTEXT1;
    struct IPSEC_SA_CONTEXT_CHANGE0;
    struct IPSEC_SA_CONTEXT_ENUM_TEMPLATE0;
    struct IPSEC_SA_CONTEXT_SUBSCRIPTION0;
    struct IPSEC_SA_DETAILS0;
    struct IPSEC_SA_DETAILS1;
    struct IPSEC_SA_ENUM_TEMPLATE0;
    struct IPSEC_SA_IDLE_TIMEOUT0;
    struct IPSEC_SA_LIFETIME0;
    struct IPSEC_SA_TRANSFORM0;
    struct IPSEC_STATISTICS0;
    struct IPSEC_STATISTICS1;
    struct IPSEC_TOKEN0;
    struct IPSEC_TRAFFIC0;
    struct IPSEC_TRAFFIC1;
    struct IPSEC_TRAFFIC_SELECTOR0_;
    struct IPSEC_TRAFFIC_SELECTOR_POLICY0_;
    struct IPSEC_TRAFFIC_STATISTICS0;
    struct IPSEC_TRAFFIC_STATISTICS1;
    struct IPSEC_TRANSPORT_POLICY0;
    struct IPSEC_TRANSPORT_POLICY1;
    struct IPSEC_TRANSPORT_POLICY2;
    struct IPSEC_TUNNEL_ENDPOINT0;
    struct IPSEC_TUNNEL_ENDPOINTS0;
    struct IPSEC_TUNNEL_ENDPOINTS1;
    struct IPSEC_TUNNEL_ENDPOINTS2;
    struct IPSEC_TUNNEL_POLICY0;
    struct IPSEC_TUNNEL_POLICY1;
    struct IPSEC_TUNNEL_POLICY2;
    struct IPSEC_TUNNEL_POLICY3_;
    struct IPSEC_V4_UDP_ENCAPSULATION0;
    struct IPSEC_VIRTUAL_IF_TUNNEL_INFO0;
    struct IPTLS_METADATA;
    struct IPV4_HEADER;
    struct IPV4_OPTION_HEADER;
    struct IPV4_ROUTING_HEADER;
    struct IPV4_TIMESTAMP_OPTION;
    struct IPV6_EXTENSION_HEADER;
    struct IPV6_FRAGMENT_HEADER;
    struct IPV6_HEADER;
    union IPV6_NEIGHBOR_ADVERTISEMENT_FLAGS;
    struct IPV6_OPTION_HEADER;
    struct IPV6_OPTION_JUMBOGRAM;
    struct IPV6_OPTION_ROUTER_ALERT;
    union IPV6_ROUTER_ADVERTISEMENT_FLAGS;
    struct IPV6_ROUTING_HEADER;
    struct MLDV2_QUERY_HEADER;
    struct MLDV2_REPORT_HEADER;
    struct MLDV2_REPORT_RECORD_HEADER;
    struct MLD_HEADER;
    struct NPI_MODULEID;
    struct SNAP_HEADER;
    struct VLAN_TAG;
    struct nd_neighbor_advert;
    struct nd_neighbor_solicit;
    struct nd_opt_dnssl;
    struct nd_opt_hdr;
    struct nd_opt_mtu;
    struct nd_opt_prefix_info;
    struct nd_opt_rd_hdr;
    struct nd_opt_rdnss;
    struct nd_opt_route_info;
    struct nd_redirect;
    struct nd_router_advert;
    struct nd_router_solicit;
    struct tcp_hdr;
    struct tcp_opt_fastopen;
    struct tcp_opt_mss;
    struct tcp_opt_sack;
    struct tcp_opt_sack_permitted;
    struct tcp_opt_ts;
    struct tcp_opt_unknown;
    struct tcp_opt_ws;
#pragma endregion forward_declarations

#pragma region delegates
    using FWPM_PROVIDER_CHANGE_CALLBACK0 = void __stdcall(void*, Windows::Win32::WindowsFiltering::FWPM_PROVIDER_CHANGE0*);
    using FWPM_PROVIDER_CONTEXT_CHANGE_CALLBACK0 = void __stdcall(void*, Windows::Win32::WindowsFiltering::FWPM_PROVIDER_CONTEXT_CHANGE0*);
    using FWPM_SUBLAYER_CHANGE_CALLBACK0 = void __stdcall(void*, Windows::Win32::WindowsFiltering::FWPM_SUBLAYER_CHANGE0*);
    using FWPM_CALLOUT_CHANGE_CALLBACK0 = void __stdcall(void*, Windows::Win32::WindowsFiltering::FWPM_CALLOUT_CHANGE0*);
    using FWPM_FILTER_CHANGE_CALLBACK0 = void __stdcall(void*, Windows::Win32::WindowsFiltering::FWPM_FILTER_CHANGE0*);
    using IPSEC_SA_CONTEXT_CALLBACK0 = void __stdcall(void*, Windows::Win32::WindowsFiltering::IPSEC_SA_CONTEXT_CHANGE0*);
    using IPSEC_KEY_MANAGER_KEY_DICTATION_CHECK0 = void __stdcall(Windows::Win32::WindowsFiltering::IKEEXT_TRAFFIC0*, int32_t*, uint32_t*);
    using IPSEC_KEY_MANAGER_DICTATE_KEY0 = uint32_t __stdcall(Windows::Win32::WindowsFiltering::IPSEC_SA_DETAILS1*, Windows::Win32::WindowsFiltering::IPSEC_SA_DETAILS1*, int32_t*);
    using IPSEC_KEY_MANAGER_NOTIFY_KEY0 = void __stdcall(Windows::Win32::WindowsFiltering::IPSEC_SA_DETAILS1*, Windows::Win32::WindowsFiltering::IPSEC_SA_DETAILS1*);
    using FWPM_NET_EVENT_CALLBACK0 = void __stdcall(void*, Windows::Win32::WindowsFiltering::FWPM_NET_EVENT1*);
    using FWPM_NET_EVENT_CALLBACK1 = void __stdcall(void*, Windows::Win32::WindowsFiltering::FWPM_NET_EVENT2*);
    using FWPM_NET_EVENT_CALLBACK2 = void __stdcall(void*, Windows::Win32::WindowsFiltering::FWPM_NET_EVENT3*);
    using FWPM_NET_EVENT_CALLBACK3 = void __stdcall(void*, Windows::Win32::WindowsFiltering::FWPM_NET_EVENT4_*);
    using FWPM_NET_EVENT_CALLBACK4 = void __stdcall(void*, Windows::Win32::WindowsFiltering::FWPM_NET_EVENT5_*);
    using FWPM_SYSTEM_PORTS_CALLBACK0 = void __stdcall(void*, Windows::Win32::WindowsFiltering::FWPM_SYSTEM_PORTS0*);
    using FWPM_CONNECTION_CALLBACK0 = void __stdcall(void*, Windows::Win32::WindowsFiltering::FWPM_CONNECTION_EVENT_TYPE, Windows::Win32::WindowsFiltering::FWPM_CONNECTION0*);
    using FWPM_VSWITCH_EVENT_CALLBACK0 = uint32_t __stdcall(void*, Windows::Win32::WindowsFiltering::FWPM_VSWITCH_EVENT0*);
#pragma endregion delegates

}
namespace win32::_impl_
{
#pragma region guids
#pragma endregion guids

}
#endif
