// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_WindowsProgramming_0_H
#define WIN32_Windows_Win32_WindowsProgramming_0_H
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct CONTEXT;
    struct DEBUG_EVENT;
    struct LDT_ENTRY;
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectDraw
{
    struct DDGAMMARAMP;
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DDHAL_DESTROYDDLOCALDATA;
    struct DDHAL_WAITFORVERTICALBLANKDATA;
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct GENERIC_MAPPING;
    struct PRIVILEGE_SET;
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct BOOL;
    struct HANDLE;
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct HWND;
    struct LPARAM;
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
#pragma region enums
    enum class BrowserNavConstants : int32_t
    {
        navOpenInNewWindow = 1,
        navNoHistory = 2,
        navNoReadFromCache = 4,
        navNoWriteToCache = 8,
        navAllowAutosearch = 16,
        navBrowserBar = 32,
        navHyperlink = 64,
        navEnforceRestricted = 128,
        navNewWindowsManaged = 256,
        navUntrustedForDownload = 512,
        navTrustedForActiveX = 1024,
        navOpenInNewTab = 2048,
        navOpenInBackgroundTab = 4096,
        navKeepWordWheelText = 8192,
        navVirtualTab = 16384,
        navBlockRedirectsXDomain = 32768,
        navOpenNewForegroundTab = 65536,
        navTravelLogScreenshot = 131072,
        navDeferUnload = 262144,
        navSpeculative = 524288,
        navSuggestNewWindow = 1048576,
        navSuggestNewTab = 2097152,
        navReserved1 = 4194304,
        navHomepageNavigate = 8388608,
        navRefresh = 16777216,
        navHostNavigation = 33554432,
        navReserved2 = 67108864,
        navReserved3 = 134217728,
        navReserved4 = 268435456,
        navReserved5 = 536870912,
        navReserved6 = 1073741824,
        navReserved7 = -2147483648,
    };
    enum class COMPUTER_NAME_FORMAT : int32_t
    {
        ComputerNameNetBIOS = 0,
        ComputerNameDnsHostname = 1,
        ComputerNameDnsDomain = 2,
        ComputerNameDnsFullyQualified = 3,
        ComputerNamePhysicalNetBIOS = 4,
        ComputerNamePhysicalDnsHostname = 5,
        ComputerNamePhysicalDnsDomain = 6,
        ComputerNamePhysicalDnsFullyQualified = 7,
        ComputerNameMax = 8,
    };
    enum class CameraUIControlCaptureMode : int32_t
    {
        PhotoOrVideo = 0,
        Photo = 1,
        Video = 2,
    };
    enum class CameraUIControlLinearSelectionMode : int32_t
    {
        Single = 0,
        Multiple = 1,
    };
    enum class CameraUIControlMode : int32_t
    {
        Browse = 0,
        Linear = 1,
    };
    enum class CameraUIControlPhotoFormat : int32_t
    {
        Jpeg = 0,
        Png = 1,
        JpegXR = 2,
    };
    enum class CameraUIControlVideoFormat : int32_t
    {
        Mp4 = 0,
        Wmv = 1,
    };
    enum class CameraUIControlViewType : int32_t
    {
        SingleItem = 0,
        ItemList = 1,
    };
    enum class CommandStateChangeConstants : int32_t
    {
        CSC_UPDATECOMMANDS = -1,
        CSC_NAVIGATEFORWARD = 1,
        CSC_NAVIGATEBACK = 2,
    };
    enum class DECISION_LOCATION : int32_t
    {
        DECISION_LOCATION_REFRESH_GLOBAL_DATA = 0,
        DECISION_LOCATION_PARAMETER_VALIDATION = 1,
        DECISION_LOCATION_AUDIT = 2,
        DECISION_LOCATION_FAILED_CONVERT_GUID = 3,
        DECISION_LOCATION_ENTERPRISE_DEFINED_CLASS_ID = 4,
        DECISION_LOCATION_GLOBAL_BUILT_IN_LIST = 5,
        DECISION_LOCATION_PROVIDER_BUILT_IN_LIST = 6,
        DECISION_LOCATION_ENFORCE_STATE_LIST = 7,
        DECISION_LOCATION_NOT_FOUND = 8,
        DECISION_LOCATION_UNKNOWN = 9,
    };
    enum class DEP_SYSTEM_POLICY_TYPE : int32_t
    {
        DEPPolicyAlwaysOff = 0,
        DEPPolicyAlwaysOn = 1,
        DEPPolicyOptIn = 2,
        DEPPolicyOptOut = 3,
        DEPTotalPolicyCount = 4,
    };
    enum class DEVPROP_OPERATOR : int32_t
    {
        DEVPROP_OPERATOR_MODIFIER_NOT = 65536,
        DEVPROP_OPERATOR_MODIFIER_IGNORE_CASE = 131072,
        DEVPROP_OPERATOR_NONE = 0,
        DEVPROP_OPERATOR_EXISTS = 1,
        DEVPROP_OPERATOR_NOT_EXISTS = 65537,
        DEVPROP_OPERATOR_EQUALS = 2,
        DEVPROP_OPERATOR_NOT_EQUALS = 65538,
        DEVPROP_OPERATOR_GREATER_THAN = 3,
        DEVPROP_OPERATOR_LESS_THAN = 4,
        DEVPROP_OPERATOR_GREATER_THAN_EQUALS = 5,
        DEVPROP_OPERATOR_LESS_THAN_EQUALS = 6,
        DEVPROP_OPERATOR_EQUALS_IGNORE_CASE = 131074,
        DEVPROP_OPERATOR_NOT_EQUALS_IGNORE_CASE = 196610,
        DEVPROP_OPERATOR_BITWISE_AND = 7,
        DEVPROP_OPERATOR_BITWISE_OR = 8,
        DEVPROP_OPERATOR_BEGINS_WITH = 9,
        DEVPROP_OPERATOR_ENDS_WITH = 10,
        DEVPROP_OPERATOR_CONTAINS = 11,
        DEVPROP_OPERATOR_BEGINS_WITH_IGNORE_CASE = 131081,
        DEVPROP_OPERATOR_ENDS_WITH_IGNORE_CASE = 131082,
        DEVPROP_OPERATOR_CONTAINS_IGNORE_CASE = 131083,
        DEVPROP_OPERATOR_LIST_CONTAINS = 4096,
        DEVPROP_OPERATOR_LIST_ELEMENT_BEGINS_WITH = 8192,
        DEVPROP_OPERATOR_LIST_ELEMENT_ENDS_WITH = 12288,
        DEVPROP_OPERATOR_LIST_ELEMENT_CONTAINS = 16384,
        DEVPROP_OPERATOR_LIST_CONTAINS_IGNORE_CASE = 135168,
        DEVPROP_OPERATOR_LIST_ELEMENT_BEGINS_WITH_IGNORE_CASE = 139264,
        DEVPROP_OPERATOR_LIST_ELEMENT_ENDS_WITH_IGNORE_CASE = 143360,
        DEVPROP_OPERATOR_LIST_ELEMENT_CONTAINS_IGNORE_CASE = 147456,
        DEVPROP_OPERATOR_AND_OPEN = 1048576,
        DEVPROP_OPERATOR_AND_CLOSE = 2097152,
        DEVPROP_OPERATOR_OR_OPEN = 3145728,
        DEVPROP_OPERATOR_OR_CLOSE = 4194304,
        DEVPROP_OPERATOR_NOT_OPEN = 5242880,
        DEVPROP_OPERATOR_NOT_CLOSE = 6291456,
        DEVPROP_OPERATOR_ARRAY_CONTAINS = 268435456,
        DEVPROP_OPERATOR_MASK_EVAL = 4095,
        DEVPROP_OPERATOR_MASK_LIST = 61440,
        DEVPROP_OPERATOR_MASK_MODIFIER = 983040,
        DEVPROP_OPERATOR_MASK_NOT_LOGICAL = -267386881,
        DEVPROP_OPERATOR_MASK_LOGICAL = 267386880,
        DEVPROP_OPERATOR_MASK_ARRAY = -268435456,
    };
    enum class DEV_OBJECT_TYPE : int32_t
    {
        DevObjectTypeUnknown = 0,
        DevObjectTypeDeviceInterface = 1,
        DevObjectTypeDeviceContainer = 2,
        DevObjectTypeDevice = 3,
        DevObjectTypeDeviceInterfaceClass = 4,
        DevObjectTypeAEP = 5,
        DevObjectTypeAEPContainer = 6,
        DevObjectTypeDeviceInstallerClass = 7,
        DevObjectTypeDeviceInterfaceDisplay = 8,
        DevObjectTypeDeviceContainerDisplay = 9,
        DevObjectTypeAEPService = 10,
        DevObjectTypeDevicePanel = 11,
    };
    enum class DEV_QUERY_FLAGS : int32_t
    {
        DevQueryFlagNone = 0,
        DevQueryFlagUpdateResults = 1,
        DevQueryFlagAllProperties = 2,
        DevQueryFlagLocalize = 4,
        DevQueryFlagAsyncClose = 8,
    };
    enum class DEV_QUERY_RESULT_ACTION : int32_t
    {
        DevQueryResultStateChange = 0,
        DevQueryResultAdd = 1,
        DevQueryResultUpdate = 2,
        DevQueryResultRemove = 3,
    };
    enum class DEV_QUERY_STATE : int32_t
    {
        DevQueryStateInitialized = 0,
        DevQueryStateEnumCompleted = 1,
        DevQueryStateAborted = 2,
        DevQueryStateClosed = 3,
    };
    enum class DOMNodeType : int32_t
    {
        NODE_INVALID = 0,
        NODE_ELEMENT = 1,
        NODE_ATTRIBUTE = 2,
        NODE_TEXT = 3,
        NODE_CDATA_SECTION = 4,
        NODE_ENTITY_REFERENCE = 5,
        NODE_ENTITY = 6,
        NODE_PROCESSING_INSTRUCTION = 7,
        NODE_COMMENT = 8,
        NODE_DOCUMENT = 9,
        NODE_DOCUMENT_TYPE = 10,
        NODE_DOCUMENT_FRAGMENT = 11,
        NODE_NOTATION = 12,
    };
    enum class DUPLICATE_HANDLE_OPTIONS : int32_t
    {
        DUPLICATE_CLOSE_SOURCE = 1,
        DUPLICATE_SAME_ACCESS = 2,
    };
    enum class DtdProcessing : int32_t
    {
        DtdProcessing_Prohibit = 0,
        DtdProcessing_Parse = 1,
        _DtdProcessing_Last = 1,
    };
    enum class EXTENDED_NAME_FORMAT : int32_t
    {
        NameUnknown = 0,
        NameFullyQualifiedDN = 1,
        NameSamCompatible = 2,
        NameDisplay = 3,
        NameUniqueId = 6,
        NameCanonical = 7,
        NameUserPrincipal = 8,
        NameCanonicalEx = 9,
        NameServicePrincipal = 10,
        NameDnsDomain = 12,
        NameGivenName = 13,
        NameSurname = 14,
    };
    enum class FCIERROR : int32_t
    {
        FCIERR_NONE = 0,
        FCIERR_OPEN_SRC = 1,
        FCIERR_READ_SRC = 2,
        FCIERR_ALLOC_FAIL = 3,
        FCIERR_TEMP_FILE = 4,
        FCIERR_BAD_COMPR_TYPE = 5,
        FCIERR_CAB_FILE = 6,
        FCIERR_USER_ABORT = 7,
        FCIERR_MCI_FAIL = 8,
        FCIERR_CAB_FORMAT_LIMIT = 9,
    };
    enum class FDIDECRYPTTYPE : int32_t
    {
        fdidtNEW_CABINET = 0,
        fdidtNEW_FOLDER = 1,
        fdidtDECRYPT = 2,
    };
    enum class FDIERROR : int32_t
    {
        FDIERROR_NONE = 0,
        FDIERROR_CABINET_NOT_FOUND = 1,
        FDIERROR_NOT_A_CABINET = 2,
        FDIERROR_UNKNOWN_CABINET_VERSION = 3,
        FDIERROR_CORRUPT_CABINET = 4,
        FDIERROR_ALLOC_FAIL = 5,
        FDIERROR_BAD_COMPR_TYPE = 6,
        FDIERROR_MDI_FAIL = 7,
        FDIERROR_TARGET_FILE = 8,
        FDIERROR_RESERVE_MISMATCH = 9,
        FDIERROR_WRONG_CABINET = 10,
        FDIERROR_USER_ABORT = 11,
        FDIERROR_EOF = 12,
    };
    enum class FDINOTIFICATIONTYPE : int32_t
    {
        fdintCABINET_INFO = 0,
        fdintPARTIAL_FILE = 1,
        fdintCOPY_FILE = 2,
        fdintCLOSE_FILE_INFO = 3,
        fdintNEXT_CABINET = 4,
        fdintENUMERATE = 5,
    };
    enum class FEATURE_CHANGE_TIME : int32_t
    {
        FEATURE_CHANGE_TIME_READ = 0,
        FEATURE_CHANGE_TIME_MODULE_RELOAD = 1,
        FEATURE_CHANGE_TIME_SESSION = 2,
        FEATURE_CHANGE_TIME_REBOOT = 3,
    };
    enum class FEATURE_ENABLED_STATE : int32_t
    {
        FEATURE_ENABLED_STATE_DEFAULT = 0,
        FEATURE_ENABLED_STATE_DISABLED = 1,
        FEATURE_ENABLED_STATE_ENABLED = 2,
    };
    enum class FH_BACKUP_STATUS : int32_t
    {
        FH_STATUS_DISABLED = 0,
        FH_STATUS_DISABLED_BY_GP = 1,
        FH_STATUS_ENABLED = 2,
        FH_STATUS_REHYDRATING = 3,
        MAX_BACKUP_STATUS = 4,
    };
    enum class FH_DEVICE_VALIDATION_RESULT : int32_t
    {
        FH_ACCESS_DENIED = 0,
        FH_INVALID_DRIVE_TYPE = 1,
        FH_READ_ONLY_PERMISSION = 2,
        FH_CURRENT_DEFAULT = 3,
        FH_NAMESPACE_EXISTS = 4,
        FH_TARGET_PART_OF_LIBRARY = 5,
        FH_VALID_TARGET = 6,
        MAX_VALIDATION_RESULT = 7,
    };
    enum class FH_LOCAL_POLICY_TYPE : int32_t
    {
        FH_FREQUENCY = 0,
        FH_RETENTION_TYPE = 1,
        FH_RETENTION_AGE = 2,
        MAX_LOCAL_POLICY = 3,
    };
    enum class FH_PROTECTED_ITEM_CATEGORY : int32_t
    {
        FH_FOLDER = 0,
        FH_LIBRARY = 1,
        MAX_PROTECTED_ITEM_CATEGORY = 2,
    };
    enum class FH_RETENTION_TYPES : int32_t
    {
        FH_RETENTION_DISABLED = 0,
        FH_RETENTION_UNLIMITED = 1,
        FH_RETENTION_AGE_BASED = 2,
        MAX_RETENTION_TYPE = 3,
    };
    enum class FH_TARGET_DRIVE_TYPES : int32_t
    {
        FH_DRIVE_UNKNOWN = 0,
        FH_DRIVE_REMOVABLE = 2,
        FH_DRIVE_FIXED = 3,
        FH_DRIVE_REMOTE = 4,
    };
    enum class FH_TARGET_PROPERTY_TYPE : int32_t
    {
        FH_TARGET_NAME = 0,
        FH_TARGET_URL = 1,
        FH_TARGET_DRIVE_TYPE = 2,
        MAX_TARGET_PROPERTY = 3,
    };
    enum class FILE_INFORMATION_CLASS : int32_t
    {
        FileDirectoryInformation = 1,
    };
    enum class FIRMWARE_TYPE : int32_t
    {
        FirmwareTypeUnknown = 0,
        FirmwareTypeBios = 1,
        FirmwareTypeUefi = 2,
        FirmwareTypeMax = 3,
    };
    enum class FhBackupStopReason : int32_t
    {
        BackupInvalidStopReason = 0,
        BackupLimitUserBusyMachineOnAC = 1,
        BackupLimitUserIdleMachineOnDC = 2,
        BackupLimitUserBusyMachineOnDC = 3,
        BackupCancelled = 4,
    };
    enum class HANDLE_FLAG_OPTIONS : int32_t
    {
        HANDLE_FLAG_INHERIT = 1,
        HANDLE_FLAG_PROTECT_FROM_CLOSE = 2,
    };
    enum class KEY_SET_INFORMATION_CLASS : int32_t
    {
        KeyWriteTimeInformation = 0,
        KeyWow64FlagsInformation = 1,
        KeyControlFlagsInformation = 2,
        KeySetVirtualizationInformation = 3,
        KeySetDebugInformation = 4,
        KeySetHandleTagsInformation = 5,
        MaxKeySetInfoClass = 6,
    };
    enum class NewProcessCauseConstants : int32_t
    {
        ProtectedModeRedirect = 1,
    };
    enum class OBJECT_INFORMATION_CLASS : int32_t
    {
        ObjectBasicInformation = 0,
        ObjectTypeInformation = 2,
    };
    enum class PROCESSINFOCLASS : int32_t
    {
        ProcessBasicInformation = 0,
        ProcessDebugPort = 7,
        ProcessWow64Information = 26,
        ProcessImageFileName = 27,
        ProcessBreakOnTermination = 29,
    };
    enum class PROCESS_CREATION_FLAGS : uint32_t
    {
        DEBUG_PROCESS = 0x1,
        DEBUG_ONLY_THIS_PROCESS = 0x2,
        CREATE_SUSPENDED = 0x4,
        DETACHED_PROCESS = 0x8,
        CREATE_NEW_CONSOLE = 0x10,
        NORMAL_PRIORITY_CLASS = 0x20,
        IDLE_PRIORITY_CLASS = 0x40,
        HIGH_PRIORITY_CLASS = 0x80,
        REALTIME_PRIORITY_CLASS = 0x100,
        CREATE_NEW_PROCESS_GROUP = 0x200,
        CREATE_UNICODE_ENVIRONMENT = 0x400,
        CREATE_SEPARATE_WOW_VDM = 0x800,
        CREATE_SHARED_WOW_VDM = 0x1000,
        CREATE_FORCEDOS = 0x2000,
        BELOW_NORMAL_PRIORITY_CLASS = 0x4000,
        ABOVE_NORMAL_PRIORITY_CLASS = 0x8000,
        INHERIT_PARENT_AFFINITY = 0x10000,
        INHERIT_CALLER_PRIORITY = 0x20000,
        CREATE_PROTECTED_PROCESS = 0x40000,
        EXTENDED_STARTUPINFO_PRESENT = 0x80000,
        PROCESS_MODE_BACKGROUND_BEGIN = 0x100000,
        PROCESS_MODE_BACKGROUND_END = 0x200000,
        CREATE_SECURE_PROCESS = 0x400000,
        CREATE_BREAKAWAY_FROM_JOB = 0x1000000,
        CREATE_PRESERVE_CODE_AUTHZ_LEVEL = 0x2000000,
        CREATE_DEFAULT_ERROR_MODE = 0x4000000,
        CREATE_NO_WINDOW = 0x8000000,
        PROFILE_USER = 0x10000000,
        PROFILE_KERNEL = 0x20000000,
        PROFILE_SERVER = 0x40000000,
        CREATE_IGNORE_SYSTEM_DEFAULT = 0x80000000,
    };
    enum class PROC_THREAD_ATTRIBUTE_NUM : int32_t
    {
        ProcThreadAttributeParentProcess = 0,
        ProcThreadAttributeHandleList = 2,
        ProcThreadAttributeGroupAffinity = 3,
        ProcThreadAttributePreferredNode = 4,
        ProcThreadAttributeIdealProcessor = 5,
        ProcThreadAttributeUmsThread = 6,
        ProcThreadAttributeMitigationPolicy = 7,
        ProcThreadAttributeSecurityCapabilities = 9,
        ProcThreadAttributeProtectionLevel = 11,
        ProcThreadAttributeJobList = 13,
        ProcThreadAttributeChildProcessPolicy = 14,
        ProcThreadAttributeAllApplicationPackagesPolicy = 15,
        ProcThreadAttributeWin32kFilter = 16,
        ProcThreadAttributeSafeOpenPromptOriginClaim = 17,
        ProcThreadAttributeDesktopAppPolicy = 18,
        ProcThreadAttributePseudoConsole = 22,
    };
    enum class ProcessAccessRights : uint32_t
    {
        Terminate = 0x1,
        CreateThread = 0x2,
        SetSessionid = 0x4,
        VmOperation = 0x8,
        VmRead = 0x10,
        VmWrite = 0x20,
        DupHandle = 0x40,
        CreateProcess = 0x80,
        SetQuota = 0x100,
        SetInformation = 0x200,
        QueryInformation = 0x400,
        SuspendResume = 0x800,
        QueryLimitedInformation = 0x1000,
        SetLimitedInformation = 0x2000,
        AllAccess = 0x1fffff,
        Delete = 0x10000,
        ReadControl = 0x20000,
        WriteDac = 0x40000,
        WriteOwner = 0x80000,
        Synchronize = 0x100000,
        StandardRightsRequired = 0xf0000,
    };
    enum class RefreshConstants : int32_t
    {
        REFRESH_NORMAL = 0,
        REFRESH_IFEXPIRED = 1,
        REFRESH_COMPLETELY = 3,
    };
    enum class SECURITY_PRODUCT_TYPE : int32_t
    {
        SECURITY_PRODUCT_TYPE_ANTIVIRUS = 0,
        SECURITY_PRODUCT_TYPE_FIREWALL = 1,
        SECURITY_PRODUCT_TYPE_ANTISPYWARE = 2,
    };
    enum class STD_HANDLE_TYPE : uint32_t
    {
        STD_INPUT_HANDLE = 0xfffffff6,
        STD_OUTPUT_HANDLE = 0xfffffff5,
        STD_ERROR_HANDLE = 0xfffffff4,
    };
    enum class SYSTEM_INFORMATION_CLASS : int32_t
    {
        SystemBasicInformation = 0,
        SystemPerformanceInformation = 2,
        SystemTimeOfDayInformation = 3,
        SystemProcessInformation = 5,
        SystemProcessorPerformanceInformation = 8,
        SystemInterruptInformation = 23,
        SystemExceptionInformation = 33,
        SystemRegistryQuotaInformation = 37,
        SystemLookasideInformation = 45,
        SystemCodeIntegrityInformation = 103,
        SystemPolicyInformation = 134,
    };
    enum class SecureLockIconConstants : int32_t
    {
        secureLockIconUnsecure = 0,
        secureLockIconMixed = 1,
        secureLockIconSecureUnknownBits = 2,
        secureLockIconSecure40Bit = 3,
        secureLockIconSecure56Bit = 4,
        secureLockIconSecureFortezza = 5,
        secureLockIconSecure128Bit = 6,
    };
    enum class TDI_TL_IO_CONTROL_TYPE : int32_t
    {
        EndpointIoControlType = 0,
        SetSockOptIoControlType = 1,
        GetSockOptIoControlType = 2,
        SocketIoControlType = 3,
    };
    enum class THREADINFOCLASS : int32_t
    {
        ThreadIsIoPending = 16,
    };
    enum class THREAD_INFORMATION_CLASS : int32_t
    {
        ThreadMemoryPriority = 0,
        ThreadAbsoluteCpuPriority = 1,
        ThreadDynamicCodePolicy = 2,
        ThreadPowerThrottling = 3,
        ThreadInformationClassMax = 4,
    };
    enum class UpdateAssessmentStatus : int32_t
    {
        UpdateAssessmentStatus_Latest = 0,
        UpdateAssessmentStatus_NotLatestSoftRestriction = 1,
        UpdateAssessmentStatus_NotLatestHardRestriction = 2,
        UpdateAssessmentStatus_NotLatestEndOfSupport = 3,
        UpdateAssessmentStatus_NotLatestServicingTrain = 4,
        UpdateAssessmentStatus_NotLatestDeferredFeature = 5,
        UpdateAssessmentStatus_NotLatestDeferredQuality = 6,
        UpdateAssessmentStatus_NotLatestPausedFeature = 7,
        UpdateAssessmentStatus_NotLatestPausedQuality = 8,
        UpdateAssessmentStatus_NotLatestManaged = 9,
        UpdateAssessmentStatus_NotLatestUnknown = 10,
        UpdateAssessmentStatus_NotLatestTargetedVersion = 11,
    };
    enum class UpdateImpactLevel : int32_t
    {
        UpdateImpactLevel_None = 0,
        UpdateImpactLevel_Low = 1,
        UpdateImpactLevel_Medium = 2,
        UpdateImpactLevel_High = 3,
    };
    enum class VALUENAME : int32_t
    {
        VALUENAME_UNKNOWN = 0,
        VALUENAME_ENTERPRISE_DEFINED_CLASS_ID = 1,
        VALUENAME_BUILT_IN_LIST = 2,
    };
    enum class VER_FLAGS : uint32_t
    {
        VER_MINORVERSION = 0x1,
        VER_MAJORVERSION = 0x2,
        VER_BUILDNUMBER = 0x4,
        VER_PLATFORMID = 0x8,
        VER_SERVICEPACKMINOR = 0x10,
        VER_SERVICEPACKMAJOR = 0x20,
        VER_SUITENAME = 0x40,
        VER_PRODUCT_TYPE = 0x80,
    };
    enum class WINSTATIONINFOCLASS : int32_t
    {
        WinStationInformation = 8,
    };
    enum class WLDP_HOST : int32_t
    {
        WLDP_HOST_RUNDLL32 = 0,
        WLDP_HOST_SVCHOST = 1,
        WLDP_HOST_MAX = 2,
    };
    enum class WLDP_HOST_ID : int32_t
    {
        WLDP_HOST_ID_UNKNOWN = 0,
        WLDP_HOST_ID_GLOBAL = 1,
        WLDP_HOST_ID_VBA = 2,
        WLDP_HOST_ID_WSH = 3,
        WLDP_HOST_ID_POWERSHELL = 4,
        WLDP_HOST_ID_IE = 5,
        WLDP_HOST_ID_MSI = 6,
        WLDP_HOST_ID_ALL = 7,
        WLDP_HOST_ID_MAX = 8,
    };
    enum class WLDP_KEY : int32_t
    {
        KEY_UNKNOWN = 0,
        KEY_OVERRIDE = 1,
        KEY_ALL_KEYS = 2,
    };
    enum class WLDP_WINDOWS_LOCKDOWN_MODE : int32_t
    {
        WLDP_WINDOWS_LOCKDOWN_MODE_UNLOCKED = 0,
        WLDP_WINDOWS_LOCKDOWN_MODE_TRIAL = 1,
        WLDP_WINDOWS_LOCKDOWN_MODE_LOCKED = 2,
        WLDP_WINDOWS_LOCKDOWN_MODE_MAX = 3,
    };
    enum class WLDP_WINDOWS_LOCKDOWN_RESTRICTION : int32_t
    {
        WLDP_WINDOWS_LOCKDOWN_RESTRICTION_NONE = 0,
        WLDP_WINDOWS_LOCKDOWN_RESTRICTION_NOUNLOCK = 1,
        WLDP_WINDOWS_LOCKDOWN_RESTRICTION_NOUNLOCK_PERMANENT = 2,
        WLDP_WINDOWS_LOCKDOWN_RESTRICTION_MAX = 3,
    };
    enum class WSC_SECURITY_PRODUCT_STATE : int32_t
    {
        WSC_SECURITY_PRODUCT_STATE_ON = 0,
        WSC_SECURITY_PRODUCT_STATE_OFF = 1,
        WSC_SECURITY_PRODUCT_STATE_SNOOZED = 2,
        WSC_SECURITY_PRODUCT_STATE_EXPIRED = 3,
    };
    enum class WSC_SECURITY_PRODUCT_SUBSTATUS : int32_t
    {
        WSC_SECURITY_PRODUCT_SUBSTATUS_NOT_SET = 0,
        WSC_SECURITY_PRODUCT_SUBSTATUS_NO_ACTION = 1,
        WSC_SECURITY_PRODUCT_SUBSTATUS_ACTION_RECOMMENDED = 2,
        WSC_SECURITY_PRODUCT_SUBSTATUS_ACTION_NEEDED = 3,
    };
    enum class WSC_SECURITY_PROVIDER : int32_t
    {
        WSC_SECURITY_PROVIDER_FIREWALL = 1,
        WSC_SECURITY_PROVIDER_AUTOUPDATE_SETTINGS = 2,
        WSC_SECURITY_PROVIDER_ANTIVIRUS = 4,
        WSC_SECURITY_PROVIDER_ANTISPYWARE = 8,
        WSC_SECURITY_PROVIDER_INTERNET_SETTINGS = 16,
        WSC_SECURITY_PROVIDER_USER_ACCOUNT_CONTROL = 32,
        WSC_SECURITY_PROVIDER_SERVICE = 64,
        WSC_SECURITY_PROVIDER_NONE = 0,
        WSC_SECURITY_PROVIDER_ALL = 127,
    };
    enum class WSC_SECURITY_PROVIDER_HEALTH : int32_t
    {
        WSC_SECURITY_PROVIDER_HEALTH_GOOD = 0,
        WSC_SECURITY_PROVIDER_HEALTH_NOTMONITORED = 1,
        WSC_SECURITY_PROVIDER_HEALTH_POOR = 2,
        WSC_SECURITY_PROVIDER_HEALTH_SNOOZE = 3,
    };
    enum class WSC_SECURITY_SIGNATURE_STATUS : int32_t
    {
        WSC_SECURITY_PRODUCT_OUT_OF_DATE = 0,
        WSC_SECURITY_PRODUCT_UP_TO_DATE = 1,
    };
    enum class XMLEMEM_TYPE : int32_t
    {
        XMLELEMTYPE_ELEMENT = 0,
        XMLELEMTYPE_TEXT = 1,
        XMLELEMTYPE_COMMENT = 2,
        XMLELEMTYPE_DOCUMENT = 3,
        XMLELEMTYPE_DTD = 4,
        XMLELEMTYPE_PI = 5,
        XMLELEMTYPE_OTHER = 6,
    };
    enum class XmlConformanceLevel : int32_t
    {
        XmlConformanceLevel_Auto = 0,
        XmlConformanceLevel_Fragment = 1,
        XmlConformanceLevel_Document = 2,
        _XmlConformanceLevel_Last = 2,
    };
    enum class XmlError : int32_t
    {
        MX_E_MX = -1072894464,
        MX_E_INPUTEND = -1072894463,
        MX_E_ENCODING = -1072894462,
        MX_E_ENCODINGSWITCH = -1072894461,
        MX_E_ENCODINGSIGNATURE = -1072894460,
        WC_E_WC = -1072894432,
        WC_E_WHITESPACE = -1072894431,
        WC_E_SEMICOLON = -1072894430,
        WC_E_GREATERTHAN = -1072894429,
        WC_E_QUOTE = -1072894428,
        WC_E_EQUAL = -1072894427,
        WC_E_LESSTHAN = -1072894426,
        WC_E_HEXDIGIT = -1072894425,
        WC_E_DIGIT = -1072894424,
        WC_E_LEFTBRACKET = -1072894423,
        WC_E_LEFTPAREN = -1072894422,
        WC_E_XMLCHARACTER = -1072894421,
        WC_E_NAMECHARACTER = -1072894420,
        WC_E_SYNTAX = -1072894419,
        WC_E_CDSECT = -1072894418,
        WC_E_COMMENT = -1072894417,
        WC_E_CONDSECT = -1072894416,
        WC_E_DECLATTLIST = -1072894415,
        WC_E_DECLDOCTYPE = -1072894414,
        WC_E_DECLELEMENT = -1072894413,
        WC_E_DECLENTITY = -1072894412,
        WC_E_DECLNOTATION = -1072894411,
        WC_E_NDATA = -1072894410,
        WC_E_PUBLIC = -1072894409,
        WC_E_SYSTEM = -1072894408,
        WC_E_NAME = -1072894407,
        WC_E_ROOTELEMENT = -1072894406,
        WC_E_ELEMENTMATCH = -1072894405,
        WC_E_UNIQUEATTRIBUTE = -1072894404,
        WC_E_TEXTXMLDECL = -1072894403,
        WC_E_LEADINGXML = -1072894402,
        WC_E_TEXTDECL = -1072894401,
        WC_E_XMLDECL = -1072894400,
        WC_E_ENCNAME = -1072894399,
        WC_E_PUBLICID = -1072894398,
        WC_E_PESINTERNALSUBSET = -1072894397,
        WC_E_PESBETWEENDECLS = -1072894396,
        WC_E_NORECURSION = -1072894395,
        WC_E_ENTITYCONTENT = -1072894394,
        WC_E_UNDECLAREDENTITY = -1072894393,
        WC_E_PARSEDENTITY = -1072894392,
        WC_E_NOEXTERNALENTITYREF = -1072894391,
        WC_E_PI = -1072894390,
        WC_E_SYSTEMID = -1072894389,
        WC_E_QUESTIONMARK = -1072894388,
        WC_E_CDSECTEND = -1072894387,
        WC_E_MOREDATA = -1072894386,
        WC_E_DTDPROHIBITED = -1072894385,
        WC_E_INVALIDXMLSPACE = -1072894384,
        NC_E_NC = -1072894368,
        NC_E_QNAMECHARACTER = -1072894367,
        NC_E_QNAMECOLON = -1072894366,
        NC_E_NAMECOLON = -1072894365,
        NC_E_DECLAREDPREFIX = -1072894364,
        NC_E_UNDECLAREDPREFIX = -1072894363,
        NC_E_EMPTYURI = -1072894362,
        NC_E_XMLPREFIXRESERVED = -1072894361,
        NC_E_XMLNSPREFIXRESERVED = -1072894360,
        NC_E_XMLURIRESERVED = -1072894359,
        NC_E_XMLNSURIRESERVED = -1072894358,
        SC_E_SC = -1072894336,
        SC_E_MAXELEMENTDEPTH = -1072894335,
        SC_E_MAXENTITYEXPANSION = -1072894334,
        WR_E_WR = -1072894208,
        WR_E_NONWHITESPACE = -1072894207,
        WR_E_NSPREFIXDECLARED = -1072894206,
        WR_E_NSPREFIXWITHEMPTYNSURI = -1072894205,
        WR_E_DUPLICATEATTRIBUTE = -1072894204,
        WR_E_XMLNSPREFIXDECLARATION = -1072894203,
        WR_E_XMLPREFIXDECLARATION = -1072894202,
        WR_E_XMLURIDECLARATION = -1072894201,
        WR_E_XMLNSURIDECLARATION = -1072894200,
        WR_E_NAMESPACEUNDECLARED = -1072894199,
        WR_E_INVALIDXMLSPACE = -1072894198,
        WR_E_INVALIDACTION = -1072894197,
        WR_E_INVALIDSURROGATEPAIR = -1072894196,
        XML_E_INVALID_DECIMAL = -1072898019,
        XML_E_INVALID_HEXIDECIMAL = -1072898018,
        XML_E_INVALID_UNICODE = -1072898017,
        XML_E_INVALIDENCODING = -1072897938,
    };
    enum class XmlNodeType : int32_t
    {
        XmlNodeType_None = 0,
        XmlNodeType_Element = 1,
        XmlNodeType_Attribute = 2,
        XmlNodeType_Text = 3,
        XmlNodeType_CDATA = 4,
        XmlNodeType_ProcessingInstruction = 7,
        XmlNodeType_Comment = 8,
        XmlNodeType_DocumentType = 10,
        XmlNodeType_Whitespace = 13,
        XmlNodeType_EndElement = 15,
        XmlNodeType_XmlDeclaration = 17,
        _XmlNodeType_Last = 17,
    };
    enum class XmlReadState : int32_t
    {
        XmlReadState_Initial = 0,
        XmlReadState_Interactive = 1,
        XmlReadState_Error = 2,
        XmlReadState_EndOfFile = 3,
        XmlReadState_Closed = 4,
    };
    enum class XmlReaderProperty : int32_t
    {
        XmlReaderProperty_MultiLanguage = 0,
        XmlReaderProperty_ConformanceLevel = 1,
        XmlReaderProperty_RandomAccess = 2,
        XmlReaderProperty_XmlResolver = 3,
        XmlReaderProperty_DtdProcessing = 4,
        XmlReaderProperty_ReadState = 5,
        XmlReaderProperty_MaxElementDepth = 6,
        XmlReaderProperty_MaxEntityExpansion = 7,
        _XmlReaderProperty_Last = 7,
    };
    enum class XmlStandalone : int32_t
    {
        XmlStandalone_Omit = 0,
        XmlStandalone_Yes = 1,
        XmlStandalone_No = 2,
        _XmlStandalone_Last = 2,
    };
    enum class XmlWriterProperty : int32_t
    {
        XmlWriterProperty_MultiLanguage = 0,
        XmlWriterProperty_Indent = 1,
        XmlWriterProperty_ByteOrderMark = 2,
        XmlWriterProperty_OmitXmlDeclaration = 3,
        XmlWriterProperty_ConformanceLevel = 4,
        XmlWriterProperty_CompactEmptyElement = 5,
        _XmlWriterProperty_Last = 5,
    };
    enum class _GlobalFilter : int32_t
    {
        GF_FRAGMENTS = 2,
        GF_STRONGHOST = 8,
        GF_FRAGCACHE = 9,
    };
    enum class _PfAddresType : int32_t
    {
        PF_IPV4 = 0,
        PF_IPV6 = 1,
    };
    enum class _PfForwardAction : int32_t
    {
        PF_ACTION_FORWARD = 0,
        PF_ACTION_DROP = 1,
    };
    enum class _PfFrameType : int32_t
    {
        PFFT_FILTER = 1,
        PFFT_FRAG = 2,
        PFFT_SPOOF = 3,
    };
    enum class eAvrfResourceTypes : int32_t
    {
        AvrfResourceHeapAllocation = 0,
        AvrfResourceHandleTrace = 1,
        AvrfResourceMax = 2,
    };
    enum class eHANDLE_TRACE_OPERATIONS : int32_t
    {
        OperationDbUnused = 0,
        OperationDbOPEN = 1,
        OperationDbCLOSE = 2,
        OperationDbBADREF = 3,
    };
    enum class eHeapAllocationState : int32_t
    {
        HeapFullPageHeap = 1073741824,
        HeapMetadata = -2147483648,
        HeapStateMask = -65536,
    };
    enum class eHeapEnumerationLevel : int32_t
    {
        HeapEnumerationEverything = 0,
        HeapEnumerationStop = -1,
    };
    enum class eUserAllocationState : int32_t
    {
        AllocationStateUnknown = 0,
        AllocationStateBusy = 1,
        AllocationStateFree = 2,
    };
#pragma endregion enums

#pragma region forward_declarations
    struct ACCESSRECTLIST;
    struct ACTCTX_SECTION_KEYED_DATA_2600;
    struct ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;
    struct ACTIVATION_CONTEXT_BASIC_INFORMATION;
    struct ATTACHLIST;
    struct AVRF_BACKTRACE_INFORMATION;
    struct AVRF_HANDLE_OPERATION;
    struct AVRF_HEAP_ALLOCATION;
    struct CCAB;
    struct CLIENT_ID;
    struct DATETIME;
    struct DBLNODE;
    struct DCICMD;
    struct DCICREATEINPUT;
    struct DCIENUMINPUT;
    struct DCIOFFSCREEN;
    struct DCIOVERLAY;
    struct DCISURFACEINFO;
    struct DD32BITDRIVERDATA;
    struct DDHALDDRAWFNS;
    struct DDHALINFO;
    struct DDHALMODEINFO;
    struct DDHAL_ADDATTACHEDSURFACEDATA;
    struct DDHAL_BEGINMOCOMPFRAMEDATA;
    struct DDHAL_BLTDATA;
    struct DDHAL_CALLBACKS;
    struct DDHAL_CANCREATESURFACEDATA;
    struct DDHAL_CANCREATEVPORTDATA;
    struct DDHAL_COLORCONTROLDATA;
    struct DDHAL_CREATEMOCOMPDATA;
    struct DDHAL_CREATEPALETTEDATA;
    struct DDHAL_CREATESURFACEDATA;
    struct DDHAL_CREATESURFACEEXDATA;
    struct DDHAL_CREATEVPORTDATA;
    struct DDHAL_DDCALLBACKS;
    struct DDHAL_DDCOLORCONTROLCALLBACKS;
    struct DDHAL_DDEXEBUFCALLBACKS;
    struct DDHAL_DDKERNELCALLBACKS;
    struct DDHAL_DDMISCELLANEOUS2CALLBACKS;
    struct DDHAL_DDMISCELLANEOUSCALLBACKS;
    struct DDHAL_DDMOTIONCOMPCALLBACKS;
    struct DDHAL_DDPALETTECALLBACKS;
    struct DDHAL_DDSURFACECALLBACKS;
    struct DDHAL_DDVIDEOPORTCALLBACKS;
    struct DDHAL_DESTROYDRIVERDATA;
    struct DDHAL_DESTROYMOCOMPDATA;
    struct DDHAL_DESTROYPALETTEDATA;
    struct DDHAL_DESTROYSURFACEDATA;
    struct DDHAL_DESTROYVPORTDATA;
    struct DDHAL_DRVSETCOLORKEYDATA;
    struct DDHAL_ENDMOCOMPFRAMEDATA;
    struct DDHAL_FLIPDATA;
    struct DDHAL_FLIPTOGDISURFACEDATA;
    struct DDHAL_FLIPVPORTDATA;
    struct DDHAL_GETAVAILDRIVERMEMORYDATA;
    struct DDHAL_GETBLTSTATUSDATA;
    struct DDHAL_GETDRIVERINFODATA;
    struct DDHAL_GETDRIVERSTATEDATA;
    struct DDHAL_GETFLIPSTATUSDATA;
    struct DDHAL_GETHEAPALIGNMENTDATA;
    struct DDHAL_GETINTERNALMOCOMPDATA;
    struct DDHAL_GETMOCOMPCOMPBUFFDATA;
    struct DDHAL_GETMOCOMPFORMATSDATA;
    struct DDHAL_GETMOCOMPGUIDSDATA;
    struct DDHAL_GETSCANLINEDATA;
    struct DDHAL_GETVPORTBANDWIDTHDATA;
    struct DDHAL_GETVPORTCONNECTDATA;
    struct DDHAL_GETVPORTFIELDDATA;
    struct DDHAL_GETVPORTFLIPSTATUSDATA;
    struct DDHAL_GETVPORTINPUTFORMATDATA;
    struct DDHAL_GETVPORTLINEDATA;
    struct DDHAL_GETVPORTOUTPUTFORMATDATA;
    struct DDHAL_GETVPORTSIGNALDATA;
    struct DDHAL_LOCKDATA;
    struct DDHAL_QUERYMOCOMPSTATUSDATA;
    struct DDHAL_RENDERMOCOMPDATA;
    struct DDHAL_SETCLIPLISTDATA;
    struct DDHAL_SETCOLORKEYDATA;
    struct DDHAL_SETENTRIESDATA;
    struct DDHAL_SETEXCLUSIVEMODEDATA;
    struct DDHAL_SETMODEDATA;
    struct DDHAL_SETOVERLAYPOSITIONDATA;
    struct DDHAL_SETPALETTEDATA;
    struct DDHAL_SYNCSURFACEDATA;
    struct DDHAL_SYNCVIDEOPORTDATA;
    struct DDHAL_UNLOCKDATA;
    struct DDHAL_UPDATENONLOCALHEAPDATA;
    struct DDHAL_UPDATEOVERLAYDATA;
    struct DDHAL_UPDATEVPORTDATA;
    struct DDHAL_VPORTCOLORDATA;
    struct DDHAL_WAITFORVPORTSYNCDATA;
    struct DDMCBUFFERINFO;
    struct DDMCCOMPBUFFERINFO;
    struct DDMONITORINFO;
    struct DDMORESURFACECAPS;
    struct DDNONLOCALVIDMEMCAPS;
    struct DDRAWI_DDMOTIONCOMP_INT;
    struct DDRAWI_DDMOTIONCOMP_LCL;
    struct DDRAWI_DDRAWCLIPPER_GBL;
    struct DDRAWI_DDRAWCLIPPER_INT;
    struct DDRAWI_DDRAWCLIPPER_LCL;
    struct DDRAWI_DDRAWPALETTE_GBL;
    struct DDRAWI_DDRAWPALETTE_INT;
    struct DDRAWI_DDRAWPALETTE_LCL;
    struct DDRAWI_DDRAWSURFACE_GBL;
    struct DDRAWI_DDRAWSURFACE_GBL_MORE;
    struct DDRAWI_DDRAWSURFACE_INT;
    struct DDRAWI_DDRAWSURFACE_LCL;
    struct DDRAWI_DDRAWSURFACE_MORE;
    struct DDRAWI_DDVIDEOPORT_INT;
    struct DDRAWI_DDVIDEOPORT_LCL;
    struct DDRAWI_DIRECTDRAW_GBL;
    struct DDRAWI_DIRECTDRAW_INT;
    struct DDRAWI_DIRECTDRAW_LCL;
    struct DDSTEREOMODE;
    struct DDVERSIONDATA;
    struct DEVPROP_FILTER_EXPRESSION;
    struct DEV_OBJECT;
    struct DEV_QUERY_PARAMETER;
    struct DEV_QUERY_RESULT_ACTION_DATA;
    struct DYNAMIC_TIME_ZONE_INFORMATION;
    struct ERF;
    struct EventLogHandle;
    struct EventSourceHandle;
    struct FDICABINETINFO;
    struct FDIDECRYPT;
    struct FDINOTIFICATION;
    struct FDISPILLFILE;
    struct FEATURE_ERROR;
    struct FEATURE_STATE_CHANGE_SUBSCRIPTION__;
    struct FH_OVERLAPPED;
    struct FH_SERVICE_PIPE_HANDLE__;
    struct FILETIME;
    struct FILE_CASE_SENSITIVE_INFO;
    struct FILE_DISPOSITION_INFO_EX;
    struct FIO_CONTEXT;
    struct GLOBALENTRY;
    struct HDEVQUERY__;
    struct HEAPALIAS;
    struct HEAPALIASINFO;
    struct HKEY;
    struct HWINWATCH__;
    struct HW_PROFILE_INFOA;
    struct HW_PROFILE_INFOW;
    struct HeapHandle;
    struct IDirectDraw2Vtbl;
    struct IDirectDraw4Vtbl;
    struct IDirectDraw7Vtbl;
    struct IDirectDrawClipperVtbl;
    struct IDirectDrawColorControlVtbl;
    struct IDirectDrawGammaControlVtbl;
    struct IDirectDrawKernelVtbl;
    struct IDirectDrawPaletteVtbl;
    struct IDirectDrawSurface2Vtbl;
    struct IDirectDrawSurface3Vtbl;
    struct IDirectDrawSurface4Vtbl;
    struct IDirectDrawSurface7Vtbl;
    struct IDirectDrawSurfaceKernelVtbl;
    struct IDirectDrawSurfaceVtbl;
    struct IDirectDrawVtbl;
    struct IMAGE_NOTE;
    struct IMEPROA;
    struct IMEPROW;
    struct IMESTRUCT;
    struct IO_STATUS_BLOCK;
    struct IUNKNOWN_LIST;
    struct IsolatedAppLauncherTelemetryParameters;
    struct JAVA_TRUST;
    struct JIT_DEBUG_INFO;
    struct KEY_VALUE_ENTRY;
    struct LDR_DATA_TABLE_ENTRY;
    struct MODULEENTRY;
    struct NAME_CACHE_CONTEXT;
    struct NETLOGON_INFO_1;
    struct NETLOGON_INFO_2;
    struct NETLOGON_INFO_3;
    struct NETLOGON_INFO_4;
    struct OBJECT_ATTRIBUTES;
    struct OSUpdateAssessment;
    struct OSVERSIONINFOA;
    struct OSVERSIONINFOEXA;
    struct OSVERSIONINFOEXW;
    struct OSVERSIONINFOW;
    struct PERUSERSECTIONA;
    struct PERUSERSECTIONW;
    struct PF_FILTER_DESCRIPTOR;
    struct PF_FILTER_STATS;
    struct PF_INTERFACE_STATS;
    struct PF_LATEBIND_INFO;
    struct PROCESS_BASIC_INFORMATION;
    struct PROCESS_LIST;
    struct PUBLIC_OBJECT_BASIC_INFORMATION;
    struct SEGMENT_NOTE;
    struct STRENTRYA;
    struct STRENTRYW;
    struct STRING;
    struct STRINGEXSTRUCT;
    struct STRTABLEA;
    struct STRTABLEW;
    struct SYSTEMTIME;
    struct SYSTEM_BASIC_INFORMATION;
    struct SYSTEM_CODEINTEGRITY_INFORMATION;
    struct SYSTEM_EXCEPTION_INFORMATION;
    struct SYSTEM_INFO;
    struct SYSTEM_INTERRUPT_INFORMATION;
    struct SYSTEM_LOOKASIDE_INFORMATION;
    struct SYSTEM_PERFORMANCE_INFORMATION;
    struct SYSTEM_POLICY_INFORMATION;
    struct SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION;
    struct SYSTEM_PROCESS_INFORMATION;
    struct SYSTEM_REGISTRY_QUOTA_INFORMATION;
    struct SYSTEM_THREAD_INFORMATION;
    struct SYSTEM_TIMEOFDAY_INFORMATION;
    struct TDIEntityID;
    struct TDIObjectID;
    struct TDI_TL_IO_CONTROL_ENDPOINT;
    struct TEMP_BP_NOTE;
    struct TIME_ZONE_INFORMATION;
    struct UNDETERMINESTRUCT;
    struct UpdateAssessment;
    struct VALENTA;
    struct VALENTW;
    struct VDMCONTEXT_WITHOUT_XSAVE;
    struct VDM_SEGINFO;
    struct VIDMEM;
    struct VIDMEMINFO;
    struct VMEML;
    struct VMEMR;
    struct WINSTATIONINFORMATIONW;
    struct WLDP_HOST_INFORMATION;
    struct XML_ERROR;
    struct _CabInfoA;
    struct _CabInfoW;
    struct _D3DHAL_CALLBACKS;
    struct _D3DHAL_GLOBALDRIVERDATA;
    struct _PROC_THREAD_ATTRIBUTE_LIST;
    struct __PUBLIC_OBJECT_TYPE_INFORMATION;
    struct _pfLogFrame;
    struct provider_info;
    struct pvalueA;
    struct pvalueW;
    struct tcp_request_query_information_ex_w2k;
    struct tcp_request_query_information_ex_xp;
    struct tcp_request_set_information_ex;
    struct val_context;
    struct CScriptErrorList;
    struct CameraUIControl;
    struct DOMDocument;
    struct DOMFreeThreadedDocument;
    struct DShellNameSpaceEvents;
    struct DShellWindowsEvents;
    struct DWebBrowserEvents;
    struct DWebBrowserEvents2;
    struct EditionUpgradeBroker;
    struct EditionUpgradeHelper;
    struct FhConfigMgr;
    struct FhReassociation;
    struct ICameraUIControl;
    struct ICameraUIControlEventCallback;
    struct IClipServiceNotificationHelper;
    struct IContainerActivationHelper;
    struct IEditionUpgradeBroker;
    struct IEditionUpgradeHelper;
    struct IFhConfigMgr;
    struct IFhReassociation;
    struct IFhScopeIterator;
    struct IFhTarget;
    struct IIsolatedAppLauncher;
    struct IScriptErrorList;
    struct IShellFavoritesNameSpace;
    struct IShellNameSpace;
    struct IShellUIHelper;
    struct IShellUIHelper2;
    struct IShellUIHelper3;
    struct IShellUIHelper4;
    struct IShellUIHelper5;
    struct IShellUIHelper6;
    struct IShellUIHelper7;
    struct IShellUIHelper8;
    struct IShellUIHelper9;
    struct IWSCDefaultProduct;
    struct IWSCProductList;
    struct IWaaSAssessor;
    struct IWebBrowser;
    struct IWebBrowser2;
    struct IWebBrowserApp;
    struct IWindowsLockModeHelper;
    struct IWscProduct;
    struct IWscProduct2;
    struct IWscProduct3;
    struct IXMLAttribute;
    struct IXMLDOMAttribute;
    struct IXMLDOMCDATASection;
    struct IXMLDOMCharacterData;
    struct IXMLDOMComment;
    struct IXMLDOMDocument;
    struct IXMLDOMDocumentFragment;
    struct IXMLDOMDocumentType;
    struct IXMLDOMElement;
    struct IXMLDOMEntity;
    struct IXMLDOMEntityReference;
    struct IXMLDOMImplementation;
    struct IXMLDOMNamedNodeMap;
    struct IXMLDOMNode;
    struct IXMLDOMNodeList;
    struct IXMLDOMNotation;
    struct IXMLDOMParseError;
    struct IXMLDOMProcessingInstruction;
    struct IXMLDOMText;
    struct IXMLDSOControl;
    struct IXMLDocument;
    struct IXMLDocument2;
    struct IXMLElement;
    struct IXMLElement2;
    struct IXMLElementCollection;
    struct IXMLError;
    struct IXMLHttpRequest;
    struct IXTLRuntime;
    struct IXmlReader;
    struct IXmlResolver;
    struct IXmlWriter;
    struct IXmlWriterLite;
    struct InternetExplorer;
    struct InternetExplorerMedium;
    struct IsolatedAppLauncher;
    struct ShellBrowserWindow;
    struct ShellNameSpace;
    struct ShellUIHelper;
    struct ShellWindows;
    struct WSCDefaultProduct;
    struct WSCProductList;
    struct WaaSAssessor;
    struct WebBrowser;
    struct WebBrowser_V1;
    struct XMLDOMDocumentEvents;
    struct XMLDSOControl;
    struct XMLDocument;
    struct XMLHTTPRequest;
#pragma endregion forward_declarations

#pragma region delegates
    using LPFIBER_START_ROUTINE = void __stdcall();
    using PFIBER_CALLOUT_ROUTINE = void* __stdcall(void*);
    using PUMS_SCHEDULER_ENTRY_POINT = void __stdcall();
    using PGET_SYSTEM_WOW64_DIRECTORY_A = uint32_t __stdcall(int8_t*, uint32_t);
    using PGET_SYSTEM_WOW64_DIRECTORY_W = uint32_t __stdcall(uint16_t*, uint32_t);
    using PQUERYACTCTXW_FUNC = Windows::Win32::SystemServices::BOOL __stdcall(uint32_t, Windows::Win32::SystemServices::HANDLE, void*, uint32_t, void*, size_t, size_t*);
    using APPLICATION_RECOVERY_CALLBACK = uint32_t __stdcall(void*);
    using QUERYHANDLER = uint32_t __stdcall(void*, Windows::Win32::WindowsProgramming::val_context*, uint32_t, void*, uint32_t*, uint32_t);
    using PQUERYHANDLER = uint32_t __stdcall();
    using PPS_POST_PROCESS_INIT_ROUTINE = void __stdcall();
    using PIO_APC_ROUTINE = void __stdcall(void*, Windows::Win32::WindowsProgramming::IO_STATUS_BLOCK*, uint32_t);
    using PWINSTATIONQUERYINFORMATIONW = uint8_t __stdcall(Windows::Win32::SystemServices::HANDLE, uint32_t, Windows::Win32::WindowsProgramming::WINSTATIONINFOCLASS, void*, uint32_t, uint32_t*);
    using AVRF_RESOURCE_ENUMERATE_CALLBACK = uint32_t __stdcall(void*, void*, uint32_t*);
    using AVRF_HEAPALLOCATION_ENUMERATE_CALLBACK = uint32_t __stdcall(Windows::Win32::WindowsProgramming::AVRF_HEAP_ALLOCATION*, void*, uint32_t*);
    using AVRF_HANDLEOPERATION_ENUMERATE_CALLBACK = uint32_t __stdcall(Windows::Win32::WindowsProgramming::AVRF_HANDLE_OPERATION*, void*, uint32_t*);
    using PFNFCIALLOC = void* __stdcall(uint32_t);
    using PFNFCIFREE = void __stdcall(void*);
    using PFNFCIOPEN = intptr_t __stdcall(int8_t*, int32_t, int32_t, int32_t*, void*);
    using PFNFCIREAD = uint32_t __stdcall(intptr_t, void*, uint32_t, int32_t*, void*);
    using PFNFCIWRITE = uint32_t __stdcall(intptr_t, void*, uint32_t, int32_t*, void*);
    using PFNFCICLOSE = int32_t __stdcall(intptr_t, int32_t*, void*);
    using PFNFCISEEK = int32_t __stdcall(intptr_t, int32_t, int32_t, int32_t*, void*);
    using PFNFCIDELETE = int32_t __stdcall(int8_t*, int32_t*, void*);
    using PFNFCIGETNEXTCABINET = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::WindowsProgramming::CCAB*, uint32_t, void*);
    using PFNFCIFILEPLACED = int32_t __stdcall(Windows::Win32::WindowsProgramming::CCAB*, int8_t*, int32_t, Windows::Win32::SystemServices::BOOL, void*);
    using PFNFCIGETOPENINFO = intptr_t __stdcall(int8_t*, uint16_t*, uint16_t*, uint16_t*, int32_t*, void*);
    using PFNFCISTATUS = int32_t __stdcall(uint32_t, uint32_t, uint32_t, void*);
    using PFNFCIGETTEMPFILE = Windows::Win32::SystemServices::BOOL __stdcall(int8_t*, int32_t, void*);
    using PFNALLOC = void* __stdcall(uint32_t);
    using PFNFREE = void __stdcall(void*);
    using PFNOPEN = intptr_t __stdcall(int8_t*, int32_t, int32_t);
    using PFNREAD = uint32_t __stdcall(intptr_t, void*, uint32_t);
    using PFNWRITE = uint32_t __stdcall(intptr_t, void*, uint32_t);
    using PFNCLOSE = int32_t __stdcall(intptr_t);
    using PFNSEEK = int32_t __stdcall(intptr_t, int32_t, int32_t);
    using PFNFDIDECRYPT = int32_t __stdcall(Windows::Win32::WindowsProgramming::FDIDECRYPT*);
    using PFNFDINOTIFY = intptr_t __stdcall(Windows::Win32::WindowsProgramming::FDINOTIFICATIONTYPE, Windows::Win32::WindowsProgramming::FDINOTIFICATION*);
    using DEBUGEVENTPROC = uint32_t __stdcall(Windows::Win32::Debug::DEBUG_EVENT*, void*);
    using PROCESSENUMPROC = Windows::Win32::SystemServices::BOOL __stdcall(uint32_t, uint32_t, Windows::Win32::WindowsAndMessaging::LPARAM);
    using TASKENUMPROC = Windows::Win32::SystemServices::BOOL __stdcall(uint32_t, uint16_t, uint16_t, Windows::Win32::WindowsAndMessaging::LPARAM);
    using TASKENUMPROCEX = Windows::Win32::SystemServices::BOOL __stdcall(uint32_t, uint16_t, uint16_t, int8_t*, int8_t*, Windows::Win32::WindowsAndMessaging::LPARAM);
    using VDMPROCESSEXCEPTIONPROC = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::Debug::DEBUG_EVENT*);
    using VDMGETTHREADSELECTORENTRYPROC = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::SystemServices::HANDLE, Windows::Win32::SystemServices::HANDLE, uint32_t, Windows::Win32::Debug::LDT_ENTRY*);
    using VDMGETPOINTERPROC = uint32_t __stdcall(Windows::Win32::SystemServices::HANDLE, Windows::Win32::SystemServices::HANDLE, uint16_t, uint32_t, Windows::Win32::SystemServices::BOOL);
    using VDMGETCONTEXTPROC = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::SystemServices::HANDLE, Windows::Win32::SystemServices::HANDLE, Windows::Win32::Debug::CONTEXT*);
    using VDMSETCONTEXTPROC = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::SystemServices::HANDLE, Windows::Win32::SystemServices::HANDLE, Windows::Win32::Debug::CONTEXT*);
    using VDMKILLWOWPROC = Windows::Win32::SystemServices::BOOL __stdcall();
    using VDMDETECTWOWPROC = Windows::Win32::SystemServices::BOOL __stdcall();
    using VDMBREAKTHREADPROC = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::SystemServices::HANDLE);
    using VDMGETSELECTORMODULEPROC = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::SystemServices::HANDLE, Windows::Win32::SystemServices::HANDLE, uint16_t, uint32_t*, int8_t*, uint32_t, int8_t*, uint32_t);
    using VDMGETMODULESELECTORPROC = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::SystemServices::HANDLE, Windows::Win32::SystemServices::HANDLE, uint32_t, int8_t*, uint16_t*);
    using VDMMODULEFIRSTPROC = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::SystemServices::HANDLE, Windows::Win32::SystemServices::HANDLE, Windows::Win32::WindowsProgramming::MODULEENTRY*, Windows::Win32::WindowsProgramming::DEBUGEVENTPROC*, void*);
    using VDMMODULENEXTPROC = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::SystemServices::HANDLE, Windows::Win32::SystemServices::HANDLE, Windows::Win32::WindowsProgramming::MODULEENTRY*, Windows::Win32::WindowsProgramming::DEBUGEVENTPROC*, void*);
    using VDMGLOBALFIRSTPROC = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::SystemServices::HANDLE, Windows::Win32::SystemServices::HANDLE, Windows::Win32::WindowsProgramming::GLOBALENTRY*, uint16_t, Windows::Win32::WindowsProgramming::DEBUGEVENTPROC*, void*);
    using VDMGLOBALNEXTPROC = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::SystemServices::HANDLE, Windows::Win32::SystemServices::HANDLE, Windows::Win32::WindowsProgramming::GLOBALENTRY*, uint16_t, Windows::Win32::WindowsProgramming::DEBUGEVENTPROC*, void*);
    using VDMENUMPROCESSWOWPROC = int32_t __stdcall(Windows::Win32::WindowsProgramming::PROCESSENUMPROC*, Windows::Win32::WindowsAndMessaging::LPARAM);
    using VDMENUMTASKWOWPROC = int32_t __stdcall(uint32_t, Windows::Win32::WindowsProgramming::TASKENUMPROC*, Windows::Win32::WindowsAndMessaging::LPARAM);
    using VDMENUMTASKWOWEXPROC = int32_t __stdcall(uint32_t, Windows::Win32::WindowsProgramming::TASKENUMPROCEX*, Windows::Win32::WindowsAndMessaging::LPARAM);
    using VDMTERMINATETASKINWOWPROC = Windows::Win32::SystemServices::BOOL __stdcall(uint32_t, uint16_t);
    using VDMSTARTTASKINWOWPROC = Windows::Win32::SystemServices::BOOL __stdcall(uint32_t, int8_t*, uint16_t);
    using VDMGETDBGFLAGSPROC = uint32_t __stdcall(Windows::Win32::SystemServices::HANDLE);
    using VDMSETDBGFLAGSPROC = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::SystemServices::HANDLE, uint32_t);
    using VDMISMODULELOADEDPROC = Windows::Win32::SystemServices::BOOL __stdcall(int8_t*);
    using VDMGETSEGMENTINFOPROC = Windows::Win32::SystemServices::BOOL __stdcall(uint16_t, uint32_t, Windows::Win32::SystemServices::BOOL, Windows::Win32::WindowsProgramming::VDM_SEGINFO);
    using VDMGETSYMBOLPROC = Windows::Win32::SystemServices::BOOL __stdcall(int8_t*, uint16_t, uint32_t, Windows::Win32::SystemServices::BOOL, Windows::Win32::SystemServices::BOOL, int8_t*, uint32_t*);
    using VDMGETADDREXPRESSIONPROC = Windows::Win32::SystemServices::BOOL __stdcall(int8_t*, int8_t*, uint16_t*, uint32_t*, uint16_t*);
    using FEATURE_STATE_CHANGE_CALLBACK = void __stdcall(void*);
    using PFEATURE_STATE_CHANGE_CALLBACK = void __stdcall();
    using ENUM_CALLBACK = void __stdcall(Windows::Win32::WindowsProgramming::DCISURFACEINFO*, void*);
    using WINWATCHNOTIFYPROC = void __stdcall(Windows::Win32::WindowsProgramming::HWINWATCH__*, Windows::Win32::WindowsAndMessaging::HWND, uint32_t, Windows::Win32::WindowsAndMessaging::LPARAM);
    using LPDD32BITDRIVERINIT = uint32_t __stdcall(uint32_t);
    using LPDDHEL_INIT = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_GBL*, Windows::Win32::SystemServices::BOOL);
    using LPDDHAL_SETCOLORKEY = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_DRVSETCOLORKEYDATA*);
    using LPDDHAL_CANCREATESURFACE = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_CANCREATESURFACEDATA*);
    using LPDDHAL_WAITFORVERTICALBLANK = uint32_t __stdcall(Windows::Win32::DisplayDevices::DDHAL_WAITFORVERTICALBLANKDATA*);
    using LPDDHAL_CREATESURFACE = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_CREATESURFACEDATA*);
    using LPDDHAL_DESTROYDRIVER = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_DESTROYDRIVERDATA*);
    using LPDDHAL_SETMODE = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_SETMODEDATA*);
    using LPDDHAL_CREATEPALETTE = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_CREATEPALETTEDATA*);
    using LPDDHAL_GETSCANLINE = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_GETSCANLINEDATA*);
    using LPDDHAL_SETEXCLUSIVEMODE = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_SETEXCLUSIVEMODEDATA*);
    using LPDDHAL_FLIPTOGDISURFACE = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_FLIPTOGDISURFACEDATA*);
    using LPDDHAL_GETDRIVERINFO = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_GETDRIVERINFODATA*);
    using LPDDHALPALCB_DESTROYPALETTE = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_DESTROYPALETTEDATA*);
    using LPDDHALPALCB_SETENTRIES = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_SETENTRIESDATA*);
    using LPDDHALSURFCB_LOCK = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_LOCKDATA*);
    using LPDDHALSURFCB_UNLOCK = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_UNLOCKDATA*);
    using LPDDHALSURFCB_BLT = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_BLTDATA*);
    using LPDDHALSURFCB_UPDATEOVERLAY = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_UPDATEOVERLAYDATA*);
    using LPDDHALSURFCB_SETOVERLAYPOSITION = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_SETOVERLAYPOSITIONDATA*);
    using LPDDHALSURFCB_SETPALETTE = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_SETPALETTEDATA*);
    using LPDDHALSURFCB_FLIP = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_FLIPDATA*);
    using LPDDHALSURFCB_DESTROYSURFACE = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_DESTROYSURFACEDATA*);
    using LPDDHALSURFCB_SETCLIPLIST = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_SETCLIPLISTDATA*);
    using LPDDHALSURFCB_ADDATTACHEDSURFACE = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_ADDATTACHEDSURFACEDATA*);
    using LPDDHALSURFCB_SETCOLORKEY = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_SETCOLORKEYDATA*);
    using LPDDHALSURFCB_GETBLTSTATUS = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_GETBLTSTATUSDATA*);
    using LPDDHALSURFCB_GETFLIPSTATUS = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_GETFLIPSTATUSDATA*);
    using LPDDHAL_GETAVAILDRIVERMEMORY = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_GETAVAILDRIVERMEMORYDATA*);
    using LPDDHAL_UPDATENONLOCALHEAP = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_UPDATENONLOCALHEAPDATA*);
    using LPDDHAL_GETHEAPALIGNMENT = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_GETHEAPALIGNMENTDATA*);
    using LPDDHAL_CREATESURFACEEX = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_CREATESURFACEEXDATA*);
    using LPDDHAL_GETDRIVERSTATE = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_GETDRIVERSTATEDATA*);
    using LPDDHAL_DESTROYDDLOCAL = uint32_t __stdcall(Windows::Win32::DisplayDevices::DDHAL_DESTROYDDLOCALDATA*);
    using LPDDHALEXEBUFCB_CANCREATEEXEBUF = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_CANCREATESURFACEDATA*);
    using LPDDHALEXEBUFCB_CREATEEXEBUF = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_CREATESURFACEDATA*);
    using LPDDHALEXEBUFCB_DESTROYEXEBUF = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_DESTROYSURFACEDATA*);
    using LPDDHALEXEBUFCB_LOCKEXEBUF = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_LOCKDATA*);
    using LPDDHALEXEBUFCB_UNLOCKEXEBUF = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_UNLOCKDATA*);
    using LPDDHALVPORTCB_CANCREATEVIDEOPORT = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_CANCREATEVPORTDATA*);
    using LPDDHALVPORTCB_CREATEVIDEOPORT = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_CREATEVPORTDATA*);
    using LPDDHALVPORTCB_FLIP = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_FLIPVPORTDATA*);
    using LPDDHALVPORTCB_GETBANDWIDTH = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_GETVPORTBANDWIDTHDATA*);
    using LPDDHALVPORTCB_GETINPUTFORMATS = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_GETVPORTINPUTFORMATDATA*);
    using LPDDHALVPORTCB_GETOUTPUTFORMATS = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_GETVPORTOUTPUTFORMATDATA*);
    using LPDDHALVPORTCB_GETFIELD = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_GETVPORTFIELDDATA*);
    using LPDDHALVPORTCB_GETLINE = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_GETVPORTLINEDATA*);
    using LPDDHALVPORTCB_GETVPORTCONNECT = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_GETVPORTCONNECTDATA*);
    using LPDDHALVPORTCB_DESTROYVPORT = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_DESTROYVPORTDATA*);
    using LPDDHALVPORTCB_GETFLIPSTATUS = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_GETVPORTFLIPSTATUSDATA*);
    using LPDDHALVPORTCB_UPDATE = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_UPDATEVPORTDATA*);
    using LPDDHALVPORTCB_WAITFORSYNC = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_WAITFORVPORTSYNCDATA*);
    using LPDDHALVPORTCB_GETSIGNALSTATUS = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_GETVPORTSIGNALDATA*);
    using LPDDHALVPORTCB_COLORCONTROL = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_VPORTCOLORDATA*);
    using LPDDHALCOLORCB_COLORCONTROL = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_COLORCONTROLDATA*);
    using LPDDHALKERNELCB_SYNCSURFACE = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_SYNCSURFACEDATA*);
    using LPDDHALKERNELCB_SYNCVIDEOPORT = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_SYNCVIDEOPORTDATA*);
    using LPDDGAMMACALIBRATORPROC = int32_t __stdcall(Windows::Win32::DirectDraw::DDGAMMARAMP*, uint8_t*);
    using LPDDHALMOCOMPCB_GETGUIDS = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_GETMOCOMPGUIDSDATA*);
    using LPDDHALMOCOMPCB_GETFORMATS = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_GETMOCOMPFORMATSDATA*);
    using LPDDHALMOCOMPCB_CREATE = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_CREATEMOCOMPDATA*);
    using LPDDHALMOCOMPCB_GETCOMPBUFFINFO = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_GETMOCOMPCOMPBUFFDATA*);
    using LPDDHALMOCOMPCB_GETINTERNALINFO = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_GETINTERNALMOCOMPDATA*);
    using LPDDHALMOCOMPCB_BEGINFRAME = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_BEGINMOCOMPFRAMEDATA*);
    using LPDDHALMOCOMPCB_ENDFRAME = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_ENDMOCOMPFRAMEDATA*);
    using LPDDHALMOCOMPCB_RENDER = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_RENDERMOCOMPDATA*);
    using LPDDHALMOCOMPCB_QUERYSTATUS = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_QUERYMOCOMPSTATUSDATA*);
    using LPDDHALMOCOMPCB_DESTROY = uint32_t __stdcall(Windows::Win32::WindowsProgramming::DDHAL_DESTROYMOCOMPDATA*);
    using LPDDHAL_SETINFO = Windows::Win32::SystemServices::BOOL __stdcall(Windows::Win32::WindowsProgramming::DDHALINFO*, Windows::Win32::SystemServices::BOOL);
    using LPDDHAL_VIDMEMALLOC = size_t __stdcall(Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_GBL*, int32_t, uint32_t, uint32_t);
    using LPDDHAL_VIDMEMFREE = void __stdcall(Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_GBL*, int32_t, size_t);
    using PFNCHECKCONNECTIONWIZARD = uint32_t __stdcall(uint32_t, uint32_t*);
    using PFNSETSHELLNEXT = uint32_t __stdcall(int8_t*);
    using REGINSTALLA = int32_t __stdcall(intptr_t, int8_t*, Windows::Win32::WindowsProgramming::STRTABLEA*);
    using PFN_IO_COMPLETION = void __stdcall(Windows::Win32::WindowsProgramming::FIO_CONTEXT*, Windows::Win32::WindowsProgramming::FH_OVERLAPPED*, uint32_t, uint32_t);
    using FCACHE_CREATE_CALLBACK = Windows::Win32::SystemServices::HANDLE __stdcall(int8_t*, void*, uint32_t*, uint32_t*);
    using FCACHE_RICHCREATE_CALLBACK = Windows::Win32::SystemServices::HANDLE __stdcall(int8_t*, void*, uint32_t*, uint32_t*, int32_t*, int32_t*, int32_t*, int32_t*);
    using CACHE_KEY_COMPARE = int32_t __stdcall(uint32_t, uint8_t*, uint32_t, uint8_t*);
    using CACHE_KEY_HASH = uint32_t __stdcall(uint8_t*, uint32_t);
    using CACHE_READ_CALLBACK = Windows::Win32::SystemServices::BOOL __stdcall(uint32_t, uint8_t*, void*);
    using CACHE_DESTROY_CALLBACK = void __stdcall(uint32_t, uint8_t*);
    using CACHE_ACCESS_CHECK = Windows::Win32::SystemServices::BOOL __stdcall(void*, Windows::Win32::SystemServices::HANDLE, uint32_t, Windows::Win32::Security::GENERIC_MAPPING*, Windows::Win32::Security::PRIVILEGE_SET*, uint32_t*, uint32_t*, int32_t*);
    using PWLDP_SETDYNAMICCODETRUST_API = int32_t __stdcall(Windows::Win32::SystemServices::HANDLE);
    using PWLDP_ISDYNAMICCODEPOLICYENABLED_API = int32_t __stdcall(int32_t*);
    using PWLDP_QUERYDYNAMICODETRUST_API = int32_t __stdcall(Windows::Win32::SystemServices::HANDLE, void*, uint32_t);
    using PWLDP_QUERYWINDOWSLOCKDOWNMODE_API = int32_t __stdcall(Windows::Win32::WindowsProgramming::WLDP_WINDOWS_LOCKDOWN_MODE*);
    using PWLDP_QUERYWINDOWSLOCKDOWNRESTRICTION_API = int32_t __stdcall(Windows::Win32::WindowsProgramming::WLDP_WINDOWS_LOCKDOWN_RESTRICTION*);
    using PWLDP_SETWINDOWSLOCKDOWNRESTRICTION_API = int32_t __stdcall(Windows::Win32::WindowsProgramming::WLDP_WINDOWS_LOCKDOWN_RESTRICTION);
    using PWLDP_WLDPISAPPAPPROVEDBYPOLICY_API = int32_t __stdcall(uint16_t*, uint64_t);
    using PDEV_QUERY_RESULT_CALLBACK = void __stdcall(Windows::Win32::WindowsProgramming::HDEVQUERY__*, void*, Windows::Win32::WindowsProgramming::DEV_QUERY_RESULT_ACTION_DATA*);
#pragma endregion delegates

}
namespace win32::_impl_
{
#pragma region guids
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::CScriptErrorList>{ 0xEFD01300,0x160F,0x11D2,{ 0xBB,0x2E,0x00,0x80,0x5F,0xF7,0xEF,0xCA } }; // EFD01300-160F-11D2-BB2E-00805FF7EFCA
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::CameraUIControl>{ 0x16D5A2BE,0xB1C5,0x47B3,{ 0x8E,0xAE,0xCC,0xBC,0xF4,0x52,0xC7,0xE8 } }; // 16D5A2BE-B1C5-47B3-8EAE-CCBCF452C7E8
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::DOMDocument>{ 0x2933BF90,0x7B36,0x11D2,{ 0xB2,0x0E,0x00,0xC0,0x4F,0x98,0x3E,0x60 } }; // 2933BF90-7B36-11D2-B20E-00C04F983E60
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::DOMFreeThreadedDocument>{ 0x2933BF91,0x7B36,0x11D2,{ 0xB2,0x0E,0x00,0xC0,0x4F,0x98,0x3E,0x60 } }; // 2933BF91-7B36-11D2-B20E-00C04F983E60
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::DShellNameSpaceEvents>{ 0x55136806,0xB2DE,0x11D1,{ 0xB9,0xF2,0x00,0xA0,0xC9,0x8B,0xC5,0x47 } }; // 55136806-B2DE-11D1-B9F2-00A0C98BC547
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::DShellWindowsEvents>{ 0xFE4106E0,0x399A,0x11D0,{ 0xA4,0x8C,0x00,0xA0,0xC9,0x0A,0x8F,0x39 } }; // FE4106E0-399A-11D0-A48C-00A0C90A8F39
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::DWebBrowserEvents>{ 0xEAB22AC2,0x30C1,0x11CF,{ 0xA7,0xEB,0x00,0x00,0xC0,0x5B,0xAE,0x0B } }; // EAB22AC2-30C1-11CF-A7EB-0000C05BAE0B
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::DWebBrowserEvents2>{ 0x34A715A0,0x6587,0x11D0,{ 0x92,0x4A,0x00,0x20,0xAF,0xC7,0xAC,0x4D } }; // 34A715A0-6587-11D0-924A-0020AFC7AC4D
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::EditionUpgradeBroker>{ 0xC4270827,0x4F39,0x45DF,{ 0x92,0x88,0x12,0xFF,0x6B,0x85,0xA9,0x21 } }; // C4270827-4F39-45DF-9288-12FF6B85A921
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::EditionUpgradeHelper>{ 0x01776DF3,0xB9AF,0x4E50,{ 0x9B,0x1C,0x56,0xE9,0x31,0x16,0xD7,0x04 } }; // 01776DF3-B9AF-4E50-9B1C-56E93116D704
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::FhConfigMgr>{ 0xED43BB3C,0x09E9,0x498A,{ 0x9D,0xF6,0x21,0x77,0x24,0x4C,0x6D,0xB4 } }; // ED43BB3C-09E9-498A-9DF6-2177244C6DB4
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::FhReassociation>{ 0x4D728E35,0x16FA,0x4320,{ 0x9E,0x8B,0xBF,0xD7,0x10,0x0A,0x88,0x46 } }; // 4D728E35-16FA-4320-9E8B-BFD7100A8846
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::ICameraUIControl>{ 0xB8733ADF,0x3D68,0x4B8F,{ 0xBB,0x08,0xE2,0x8A,0x0B,0xED,0x03,0x76 } }; // B8733ADF-3D68-4B8F-BB08-E28A0BED0376
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::ICameraUIControlEventCallback>{ 0x1BFA0C2C,0xFBCD,0x4776,{ 0xBD,0xA4,0x88,0xBF,0x97,0x4E,0x74,0xF4 } }; // 1BFA0C2C-FBCD-4776-BDA4-88BF974E74F4
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IClipServiceNotificationHelper>{ 0xC39948F0,0x6142,0x44FD,{ 0x98,0xCA,0xE1,0x68,0x1A,0x8D,0x68,0xB5 } }; // C39948F0-6142-44FD-98CA-E1681A8D68B5
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IContainerActivationHelper>{ 0xB524F93F,0x80D5,0x4EC7,{ 0xAE,0x9E,0xD6,0x6E,0x93,0xAD,0xE1,0xFA } }; // B524F93F-80D5-4EC7-AE9E-D66E93ADE1FA
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IEditionUpgradeBroker>{ 0xFF19CBCF,0x9455,0x4937,{ 0xB8,0x72,0x6B,0x79,0x29,0xA4,0x60,0xAF } }; // FF19CBCF-9455-4937-B872-6B7929A460AF
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IEditionUpgradeHelper>{ 0xD3E9E342,0x5DEB,0x43B6,{ 0x84,0x9E,0x69,0x13,0xB8,0x5D,0x50,0x3A } }; // D3E9E342-5DEB-43B6-849E-6913B85D503A
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IFhConfigMgr>{ 0x6A5FEA5B,0xBF8F,0x4EE5,{ 0xB8,0xC3,0x44,0xD8,0xA0,0xD7,0x33,0x1C } }; // 6A5FEA5B-BF8F-4EE5-B8C3-44D8A0D7331C
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IFhReassociation>{ 0x6544A28A,0xF68D,0x47AC,{ 0x91,0xEF,0x16,0xB2,0xB3,0x6A,0xA3,0xEE } }; // 6544A28A-F68D-47AC-91EF-16B2B36AA3EE
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IFhScopeIterator>{ 0x3197ABCE,0x532A,0x44C6,{ 0x86,0x15,0xF3,0x66,0x65,0x66,0xA7,0x20 } }; // 3197ABCE-532A-44C6-8615-F3666566A720
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IFhTarget>{ 0xD87965FD,0x2BAD,0x4657,{ 0xBD,0x3B,0x95,0x67,0xEB,0x30,0x0C,0xED } }; // D87965FD-2BAD-4657-BD3B-9567EB300CED
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IIsolatedAppLauncher>{ 0xF686878F,0x7B42,0x4CC4,{ 0x96,0xFB,0xF4,0xF3,0xB6,0xE3,0xD2,0x4D } }; // F686878F-7B42-4CC4-96FB-F4F3B6E3D24D
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IScriptErrorList>{ 0xF3470F24,0x15FD,0x11D2,{ 0xBB,0x2E,0x00,0x80,0x5F,0xF7,0xEF,0xCA } }; // F3470F24-15FD-11D2-BB2E-00805FF7EFCA
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IShellFavoritesNameSpace>{ 0x55136804,0xB2DE,0x11D1,{ 0xB9,0xF2,0x00,0xA0,0xC9,0x8B,0xC5,0x47 } }; // 55136804-B2DE-11D1-B9F2-00A0C98BC547
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IShellNameSpace>{ 0xE572D3C9,0x37BE,0x4AE2,{ 0x82,0x5D,0xD5,0x21,0x76,0x3E,0x31,0x08 } }; // E572D3C9-37BE-4AE2-825D-D521763E3108
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IShellUIHelper>{ 0x729FE2F8,0x1EA8,0x11D1,{ 0x8F,0x85,0x00,0xC0,0x4F,0xC2,0xFB,0xE1 } }; // 729FE2F8-1EA8-11D1-8F85-00C04FC2FBE1
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IShellUIHelper2>{ 0xA7FE6EDA,0x1932,0x4281,{ 0xB8,0x81,0x87,0xB3,0x1B,0x8B,0xC5,0x2C } }; // A7FE6EDA-1932-4281-B881-87B31B8BC52C
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IShellUIHelper3>{ 0x528DF2EC,0xD419,0x40BC,{ 0x9B,0x6D,0xDC,0xDB,0xF9,0xC1,0xB2,0x5D } }; // 528DF2EC-D419-40BC-9B6D-DCDBF9C1B25D
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IShellUIHelper4>{ 0xB36E6A53,0x8073,0x499E,{ 0x82,0x4C,0xD7,0x76,0x33,0x0A,0x33,0x3E } }; // B36E6A53-8073-499E-824C-D776330A333E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IShellUIHelper5>{ 0xA2A08B09,0x103D,0x4D3F,{ 0xB9,0x1C,0xEA,0x45,0x5C,0xA8,0x2E,0xFA } }; // A2A08B09-103D-4D3F-B91C-EA455CA82EFA
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IShellUIHelper6>{ 0x987A573E,0x46EE,0x4E89,{ 0x96,0xAB,0xDD,0xF7,0xF8,0xFD,0xC9,0x8C } }; // 987A573E-46EE-4E89-96AB-DDF7F8FDC98C
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IShellUIHelper7>{ 0x60E567C8,0x9573,0x4AB2,{ 0xA2,0x64,0x63,0x7C,0x6C,0x16,0x1C,0xB1 } }; // 60E567C8-9573-4AB2-A264-637C6C161CB1
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IShellUIHelper8>{ 0x66DEBCF2,0x05B0,0x4F07,{ 0xB4,0x9B,0xB9,0x62,0x41,0xA6,0x5D,0xB2 } }; // 66DEBCF2-05B0-4F07-B49B-B96241A65DB2
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IShellUIHelper9>{ 0x6CDF73B0,0x7F2F,0x451F,{ 0xBC,0x0F,0x63,0xE0,0xF3,0x28,0x4E,0x54 } }; // 6CDF73B0-7F2F-451F-BC0F-63E0F3284E54
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IWSCDefaultProduct>{ 0x0476D69C,0xF21A,0x11E5,{ 0x9C,0xE9,0x5E,0x55,0x17,0x50,0x7C,0x66 } }; // 0476D69C-F21A-11E5-9CE9-5E5517507C66
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IWSCProductList>{ 0x722A338C,0x6E8E,0x4E72,{ 0xAC,0x27,0x14,0x17,0xFB,0x0C,0x81,0xC2 } }; // 722A338C-6E8E-4E72-AC27-1417FB0C81C2
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IWaaSAssessor>{ 0x2347BBEF,0x1A3B,0x45A4,{ 0x90,0x2D,0x3E,0x09,0xC2,0x69,0xB4,0x5E } }; // 2347BBEF-1A3B-45A4-902D-3E09C269B45E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IWebBrowser>{ 0xEAB22AC1,0x30C1,0x11CF,{ 0xA7,0xEB,0x00,0x00,0xC0,0x5B,0xAE,0x0B } }; // EAB22AC1-30C1-11CF-A7EB-0000C05BAE0B
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IWebBrowser2>{ 0xD30C1661,0xCDAF,0x11D0,{ 0x8A,0x3E,0x00,0xC0,0x4F,0xC9,0xE2,0x6E } }; // D30C1661-CDAF-11D0-8A3E-00C04FC9E26E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IWebBrowserApp>{ 0x0002DF05,0x0000,0x0000,{ 0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46 } }; // 0002DF05-0000-0000-C000-000000000046
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IWindowsLockModeHelper>{ 0xF342D19E,0xCC22,0x4648,{ 0xBB,0x5D,0x03,0xCC,0xF7,0x5B,0x47,0xC5 } }; // F342D19E-CC22-4648-BB5D-03CCF75B47C5
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IWscProduct>{ 0x8C38232E,0x3A45,0x4A27,{ 0x92,0xB0,0x1A,0x16,0xA9,0x75,0xF6,0x69 } }; // 8C38232E-3A45-4A27-92B0-1A16A975F669
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IWscProduct2>{ 0xF896CA54,0xFE09,0x4403,{ 0x86,0xD4,0x23,0xCB,0x48,0x8D,0x81,0xD8 } }; // F896CA54-FE09-4403-86D4-23CB488D81D8
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IWscProduct3>{ 0x55536524,0xD1D1,0x4726,{ 0x8C,0x7C,0x04,0x99,0x6A,0x19,0x04,0xE7 } }; // 55536524-D1D1-4726-8C7C-04996A1904E7
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IXMLAttribute>{ 0xD4D4A0FC,0x3B73,0x11D1,{ 0xB2,0xB4,0x00,0xC0,0x4F,0xB9,0x25,0x96 } }; // D4D4A0FC-3B73-11D1-B2B4-00C04FB92596
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IXMLDOMAttribute>{ 0x2933BF85,0x7B36,0x11D2,{ 0xB2,0x0E,0x00,0xC0,0x4F,0x98,0x3E,0x60 } }; // 2933BF85-7B36-11D2-B20E-00C04F983E60
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IXMLDOMCDATASection>{ 0x2933BF8A,0x7B36,0x11D2,{ 0xB2,0x0E,0x00,0xC0,0x4F,0x98,0x3E,0x60 } }; // 2933BF8A-7B36-11D2-B20E-00C04F983E60
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IXMLDOMCharacterData>{ 0x2933BF84,0x7B36,0x11D2,{ 0xB2,0x0E,0x00,0xC0,0x4F,0x98,0x3E,0x60 } }; // 2933BF84-7B36-11D2-B20E-00C04F983E60
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IXMLDOMComment>{ 0x2933BF88,0x7B36,0x11D2,{ 0xB2,0x0E,0x00,0xC0,0x4F,0x98,0x3E,0x60 } }; // 2933BF88-7B36-11D2-B20E-00C04F983E60
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IXMLDOMDocument>{ 0x2933BF81,0x7B36,0x11D2,{ 0xB2,0x0E,0x00,0xC0,0x4F,0x98,0x3E,0x60 } }; // 2933BF81-7B36-11D2-B20E-00C04F983E60
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IXMLDOMDocumentFragment>{ 0x3EFAA413,0x272F,0x11D2,{ 0x83,0x6F,0x00,0x00,0xF8,0x7A,0x77,0x82 } }; // 3EFAA413-272F-11D2-836F-0000F87A7782
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IXMLDOMDocumentType>{ 0x2933BF8B,0x7B36,0x11D2,{ 0xB2,0x0E,0x00,0xC0,0x4F,0x98,0x3E,0x60 } }; // 2933BF8B-7B36-11D2-B20E-00C04F983E60
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IXMLDOMElement>{ 0x2933BF86,0x7B36,0x11D2,{ 0xB2,0x0E,0x00,0xC0,0x4F,0x98,0x3E,0x60 } }; // 2933BF86-7B36-11D2-B20E-00C04F983E60
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IXMLDOMEntity>{ 0x2933BF8D,0x7B36,0x11D2,{ 0xB2,0x0E,0x00,0xC0,0x4F,0x98,0x3E,0x60 } }; // 2933BF8D-7B36-11D2-B20E-00C04F983E60
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IXMLDOMEntityReference>{ 0x2933BF8E,0x7B36,0x11D2,{ 0xB2,0x0E,0x00,0xC0,0x4F,0x98,0x3E,0x60 } }; // 2933BF8E-7B36-11D2-B20E-00C04F983E60
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IXMLDOMImplementation>{ 0x2933BF8F,0x7B36,0x11D2,{ 0xB2,0x0E,0x00,0xC0,0x4F,0x98,0x3E,0x60 } }; // 2933BF8F-7B36-11D2-B20E-00C04F983E60
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IXMLDOMNamedNodeMap>{ 0x2933BF83,0x7B36,0x11D2,{ 0xB2,0x0E,0x00,0xC0,0x4F,0x98,0x3E,0x60 } }; // 2933BF83-7B36-11D2-B20E-00C04F983E60
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IXMLDOMNode>{ 0x2933BF80,0x7B36,0x11D2,{ 0xB2,0x0E,0x00,0xC0,0x4F,0x98,0x3E,0x60 } }; // 2933BF80-7B36-11D2-B20E-00C04F983E60
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IXMLDOMNodeList>{ 0x2933BF82,0x7B36,0x11D2,{ 0xB2,0x0E,0x00,0xC0,0x4F,0x98,0x3E,0x60 } }; // 2933BF82-7B36-11D2-B20E-00C04F983E60
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IXMLDOMNotation>{ 0x2933BF8C,0x7B36,0x11D2,{ 0xB2,0x0E,0x00,0xC0,0x4F,0x98,0x3E,0x60 } }; // 2933BF8C-7B36-11D2-B20E-00C04F983E60
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IXMLDOMParseError>{ 0x3EFAA426,0x272F,0x11D2,{ 0x83,0x6F,0x00,0x00,0xF8,0x7A,0x77,0x82 } }; // 3EFAA426-272F-11D2-836F-0000F87A7782
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IXMLDOMProcessingInstruction>{ 0x2933BF89,0x7B36,0x11D2,{ 0xB2,0x0E,0x00,0xC0,0x4F,0x98,0x3E,0x60 } }; // 2933BF89-7B36-11D2-B20E-00C04F983E60
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IXMLDOMText>{ 0x2933BF87,0x7B36,0x11D2,{ 0xB2,0x0E,0x00,0xC0,0x4F,0x98,0x3E,0x60 } }; // 2933BF87-7B36-11D2-B20E-00C04F983E60
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IXMLDSOControl>{ 0x310AFA62,0x0575,0x11D2,{ 0x9C,0xA9,0x00,0x60,0xB0,0xEC,0x3D,0x39 } }; // 310AFA62-0575-11D2-9CA9-0060B0EC3D39
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IXMLDocument>{ 0xF52E2B61,0x18A1,0x11D1,{ 0xB1,0x05,0x00,0x80,0x5F,0x49,0x91,0x6B } }; // F52E2B61-18A1-11D1-B105-00805F49916B
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IXMLDocument2>{ 0x2B8DE2FE,0x8D2D,0x11D1,{ 0xB2,0xFC,0x00,0xC0,0x4F,0xD9,0x15,0xA9 } }; // 2B8DE2FE-8D2D-11D1-B2FC-00C04FD915A9
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IXMLElement>{ 0x3F7F31AC,0xE15F,0x11D0,{ 0x9C,0x25,0x00,0xC0,0x4F,0xC9,0x9C,0x8E } }; // 3F7F31AC-E15F-11D0-9C25-00C04FC99C8E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IXMLElement2>{ 0x2B8DE2FF,0x8D2D,0x11D1,{ 0xB2,0xFC,0x00,0xC0,0x4F,0xD9,0x15,0xA9 } }; // 2B8DE2FF-8D2D-11D1-B2FC-00C04FD915A9
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IXMLElementCollection>{ 0x65725580,0x9B5D,0x11D0,{ 0x9B,0xFE,0x00,0xC0,0x4F,0xC9,0x9C,0x8E } }; // 65725580-9B5D-11D0-9BFE-00C04FC99C8E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IXMLError>{ 0x948C5AD3,0xC58D,0x11D0,{ 0x9C,0x0B,0x00,0xC0,0x4F,0xC9,0x9C,0x8E } }; // 948C5AD3-C58D-11D0-9C0B-00C04FC99C8E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IXMLHttpRequest>{ 0xED8C108D,0x4349,0x11D2,{ 0x91,0xA4,0x00,0xC0,0x4F,0x79,0x69,0xE8 } }; // ED8C108D-4349-11D2-91A4-00C04F7969E8
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IXTLRuntime>{ 0x3EFAA425,0x272F,0x11D2,{ 0x83,0x6F,0x00,0x00,0xF8,0x7A,0x77,0x82 } }; // 3EFAA425-272F-11D2-836F-0000F87A7782
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IXmlReader>{ 0x7279FC81,0x709D,0x4095,{ 0xB6,0x3D,0x69,0xFE,0x4B,0x0D,0x90,0x30 } }; // 7279FC81-709D-4095-B63D-69FE4B0D9030
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IXmlResolver>{ 0x7279FC82,0x709D,0x4095,{ 0xB6,0x3D,0x69,0xFE,0x4B,0x0D,0x90,0x30 } }; // 7279FC82-709D-4095-B63D-69FE4B0D9030
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IXmlWriter>{ 0x7279FC88,0x709D,0x4095,{ 0xB6,0x3D,0x69,0xFE,0x4B,0x0D,0x90,0x30 } }; // 7279FC88-709D-4095-B63D-69FE4B0D9030
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IXmlWriterLite>{ 0x862494C6,0x1310,0x4AAD,{ 0xB3,0xCD,0x2D,0xBE,0xEB,0xF6,0x70,0xD3 } }; // 862494C6-1310-4AAD-B3CD-2DBEEBF670D3
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::InternetExplorer>{ 0x0002DF01,0x0000,0x0000,{ 0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46 } }; // 0002DF01-0000-0000-C000-000000000046
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::InternetExplorerMedium>{ 0xD5E8041D,0x920F,0x45E9,{ 0xB8,0xFB,0xB1,0xDE,0xB8,0x2C,0x6E,0x5E } }; // D5E8041D-920F-45E9-B8FB-B1DEB82C6E5E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::IsolatedAppLauncher>{ 0xBC812430,0xE75E,0x4FD1,{ 0x96,0x41,0x1F,0x9F,0x1E,0x2D,0x9A,0x1F } }; // BC812430-E75E-4FD1-9641-1F9F1E2D9A1F
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::ShellBrowserWindow>{ 0xC08AFD90,0xF2A1,0x11D1,{ 0x84,0x55,0x00,0xA0,0xC9,0x1F,0x38,0x80 } }; // C08AFD90-F2A1-11D1-8455-00A0C91F3880
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::ShellNameSpace>{ 0x55136805,0xB2DE,0x11D1,{ 0xB9,0xF2,0x00,0xA0,0xC9,0x8B,0xC5,0x47 } }; // 55136805-B2DE-11D1-B9F2-00A0C98BC547
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::ShellUIHelper>{ 0x64AB4BB7,0x111E,0x11D1,{ 0x8F,0x79,0x00,0xC0,0x4F,0xC2,0xFB,0xE1 } }; // 64AB4BB7-111E-11D1-8F79-00C04FC2FBE1
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::ShellWindows>{ 0x9BA05972,0xF6A8,0x11CF,{ 0xA4,0x42,0x00,0xA0,0xC9,0x0A,0x8F,0x39 } }; // 9BA05972-F6A8-11CF-A442-00A0C90A8F39
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::WSCDefaultProduct>{ 0x2981A36E,0xF22D,0x11E5,{ 0x9C,0xE9,0x5E,0x55,0x17,0x50,0x7C,0x66 } }; // 2981A36E-F22D-11E5-9CE9-5E5517507C66
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::WSCProductList>{ 0x17072F7B,0x9ABE,0x4A74,{ 0xA2,0x61,0x1E,0xB7,0x6B,0x55,0x10,0x7A } }; // 17072F7B-9ABE-4A74-A261-1EB76B55107A
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::WaaSAssessor>{ 0x098EF871,0xFA9F,0x46AF,{ 0x89,0x58,0xC0,0x83,0x51,0x5D,0x7C,0x9C } }; // 098EF871-FA9F-46AF-8958-C083515D7C9C
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::WebBrowser>{ 0x8856F961,0x340A,0x11D0,{ 0xA9,0x6B,0x00,0xC0,0x4F,0xD7,0x05,0xA2 } }; // 8856F961-340A-11D0-A96B-00C04FD705A2
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::WebBrowser_V1>{ 0xEAB22AC3,0x30C1,0x11CF,{ 0xA7,0xEB,0x00,0x00,0xC0,0x5B,0xAE,0x0B } }; // EAB22AC3-30C1-11CF-A7EB-0000C05BAE0B
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::XMLDOMDocumentEvents>{ 0x3EFAA427,0x272F,0x11D2,{ 0x83,0x6F,0x00,0x00,0xF8,0x7A,0x77,0x82 } }; // 3EFAA427-272F-11D2-836F-0000F87A7782
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::XMLDSOControl>{ 0x550DDA30,0x0541,0x11D2,{ 0x9C,0xA9,0x00,0x60,0xB0,0xEC,0x3D,0x39 } }; // 550DDA30-0541-11D2-9CA9-0060B0EC3D39
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::XMLDocument>{ 0xCFC399AF,0xD876,0x11D0,{ 0x9C,0x10,0x00,0xC0,0x4F,0xC9,0x9C,0x8E } }; // CFC399AF-D876-11D0-9C10-00C04FC99C8E
    template <> inline constexpr guid guid_v<Windows::Win32::WindowsProgramming::XMLHTTPRequest>{ 0xED8C108E,0x4349,0x11D2,{ 0x91,0xA4,0x00,0xC0,0x4F,0x79,0x69,0xE8 } }; // ED8C108E-4349-11D2-91A4-00C04F7969E8
#pragma endregion guids

}
#endif
