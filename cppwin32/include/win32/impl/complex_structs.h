// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_complex_structs_H
#define WIN32_complex_structs_H
#include "win32/impl/Windows.Win32.ActiveDirectory.0.h"
#include "win32/impl/Windows.Win32.AllJoyn.0.h"
#include "win32/impl/Windows.Win32.Antimalware.0.h"
#include "win32/impl/Windows.Win32.ApplicationInstallationAndServicing.0.h"
#include "win32/impl/Windows.Win32.AppxPackaging.0.h"
#include "win32/impl/Windows.Win32.Audio.0.h"
#include "win32/impl/Windows.Win32.Automation.0.h"
#include "win32/impl/Windows.Win32.BackgroundIntelligentTransferService.0.h"
#include "win32/impl/Windows.Win32.Bluetooth.0.h"
#include "win32/impl/Windows.Win32.CloudFilters.0.h"
#include "win32/impl/Windows.Win32.Com.0.h"
#include "win32/impl/Windows.Win32.ComponentServices.0.h"
#include "win32/impl/Windows.Win32.Compression.0.h"
#include "win32/impl/Windows.Win32.Controls.0.h"
#include "win32/impl/Windows.Win32.CoreAudio.0.h"
#include "win32/impl/Windows.Win32.DataExchange.0.h"
#include "win32/impl/Windows.Win32.Debug.0.h"
#include "win32/impl/Windows.Win32.DeviceAndDriverInstallation.0.h"
#include "win32/impl/Windows.Win32.Dhcp.0.h"
#include "win32/impl/Windows.Win32.Direct2D.0.h"
#include "win32/impl/Windows.Win32.Direct3D10.0.h"
#include "win32/impl/Windows.Win32.Direct3D11.0.h"
#include "win32/impl/Windows.Win32.Direct3D12.0.h"
#include "win32/impl/Windows.Win32.Direct3D9.0.h"
#include "win32/impl/Windows.Win32.DirectDraw.0.h"
#include "win32/impl/Windows.Win32.DirectML.0.h"
#include "win32/impl/Windows.Win32.DirectShow.0.h"
#include "win32/impl/Windows.Win32.DirectWrite.0.h"
#include "win32/impl/Windows.Win32.DisplayDevices.0.h"
#include "win32/impl/Windows.Win32.DistributedFileSystem.0.h"
#include "win32/impl/Windows.Win32.Dns.0.h"
#include "win32/impl/Windows.Win32.Dwm.0.h"
#include "win32/impl/Windows.Win32.Dxgi.0.h"
#include "win32/impl/Windows.Win32.Etw.0.h"
#include "win32/impl/Windows.Win32.ExtensibleAuthenticationProtocol.0.h"
#include "win32/impl/Windows.Win32.Fax.0.h"
#include "win32/impl/Windows.Win32.FileSystem.0.h"
#include "win32/impl/Windows.Win32.GamingDeviceInfo.0.h"
#include "win32/impl/Windows.Win32.Gdi.0.h"
#include "win32/impl/Windows.Win32.HardwareCounterProfiling.0.h"
#include "win32/impl/Windows.Win32.Hid.0.h"
#include "win32/impl/Windows.Win32.HtmlHelp.0.h"
#include "win32/impl/Windows.Win32.Http.0.h"
#include "win32/impl/Windows.Win32.IScsiDisc.0.h"
#include "win32/impl/Windows.Win32.IndexServer.0.h"
#include "win32/impl/Windows.Win32.InstallableFileSystems.0.h"
#include "win32/impl/Windows.Win32.InteractionContext.0.h"
#include "win32/impl/Windows.Win32.Intl.0.h"
#include "win32/impl/Windows.Win32.IpHelper.0.h"
#include "win32/impl/Windows.Win32.Kernel.0.h"
#include "win32/impl/Windows.Win32.KeyboardAndMouseInput.0.h"
#include "win32/impl/Windows.Win32.Ldap.0.h"
#include "win32/impl/Windows.Win32.MachineLearning.0.h"
#include "win32/impl/Windows.Win32.Mapi.0.h"
#include "win32/impl/Windows.Win32.MediaFoundation.0.h"
#include "win32/impl/Windows.Win32.MenusAndResources.0.h"
#include "win32/impl/Windows.Win32.Mib.0.h"
#include "win32/impl/Windows.Win32.Mmc.0.h"
#include "win32/impl/Windows.Win32.MobileBroadband.0.h"
#include "win32/impl/Windows.Win32.Multicast.0.h"
#include "win32/impl/Windows.Win32.Multimedia.0.h"
#include "win32/impl/Windows.Win32.NativeWiFi.0.h"
#include "win32/impl/Windows.Win32.NetManagement.0.h"
#include "win32/impl/Windows.Win32.NetShell.0.h"
#include "win32/impl/Windows.Win32.NetworkDiagnosticsFramework.0.h"
#include "win32/impl/Windows.Win32.NetworkDrivers.0.h"
#include "win32/impl/Windows.Win32.NetworkListManager.0.h"
#include "win32/impl/Windows.Win32.NetworkPolicyServer.0.h"
#include "win32/impl/Windows.Win32.OpenGL.0.h"
#include "win32/impl/Windows.Win32.OtherDeviceTechnologies.0.h"
#include "win32/impl/Windows.Win32.P2P.0.h"
#include "win32/impl/Windows.Win32.PasswordManagement.0.h"
#include "win32/impl/Windows.Win32.Perf.0.h"
#include "win32/impl/Windows.Win32.PointerInput.0.h"
#include "win32/impl/Windows.Win32.Policy.0.h"
#include "win32/impl/Windows.Win32.ProcessSnapshotting.0.h"
#include "win32/impl/Windows.Win32.ProcessStatus.0.h"
#include "win32/impl/Windows.Win32.ProjectedFileSystem.0.h"
#include "win32/impl/Windows.Win32.QualityOfService.0.h"
#include "win32/impl/Windows.Win32.RemoteDesktopServices.0.h"
#include "win32/impl/Windows.Win32.RemoteDifferentialCompression.0.h"
#include "win32/impl/Windows.Win32.RestartManager.0.h"
#include "win32/impl/Windows.Win32.RightsManagement.0.h"
#include "win32/impl/Windows.Win32.RoutingAndRemoteAccessService.0.h"
#include "win32/impl/Windows.Win32.Rpc.0.h"
#include "win32/impl/Windows.Win32.Search.0.h"
#include "win32/impl/Windows.Win32.Security.0.h"
#include "win32/impl/Windows.Win32.Shell.0.h"
#include "win32/impl/Windows.Win32.Snmp.0.h"
#include "win32/impl/Windows.Win32.StreamingMedia.0.h"
#include "win32/impl/Windows.Win32.StructuredStorage.0.h"
#include "win32/impl/Windows.Win32.SystemServices.0.h"
#include "win32/impl/Windows.Win32.TabletPC.0.h"
#include "win32/impl/Windows.Win32.Tapi.0.h"
#include "win32/impl/Windows.Win32.TaskScheduler.0.h"
#include "win32/impl/Windows.Win32.TextServices.0.h"
#include "win32/impl/Windows.Win32.UsbDrivers.0.h"
#include "win32/impl/Windows.Win32.VirtualStorage.0.h"
#include "win32/impl/Windows.Win32.WebDav.0.h"
#include "win32/impl/Windows.Win32.WebSock.0.h"
#include "win32/impl/Windows.Win32.WinInet.0.h"
#include "win32/impl/Windows.Win32.WinRT.0.h"
#include "win32/impl/Windows.Win32.WinSock.0.h"
#include "win32/impl/Windows.Win32.WindowsAccessibility.0.h"
#include "win32/impl/Windows.Win32.WindowsAddressBook.0.h"
#include "win32/impl/Windows.Win32.WindowsAndMessaging.0.h"
#include "win32/impl/Windows.Win32.WindowsBiometricFramework.0.h"
#include "win32/impl/Windows.Win32.WindowsClustering.0.h"
#include "win32/impl/Windows.Win32.WindowsColorSystem.0.h"
#include "win32/impl/Windows.Win32.WindowsConnectionManager.0.h"
#include "win32/impl/Windows.Win32.WindowsDeploymentServices.0.h"
#include "win32/impl/Windows.Win32.WindowsDesktopSharing.0.h"
#include "win32/impl/Windows.Win32.WindowsErrorReporting.0.h"
#include "win32/impl/Windows.Win32.WindowsFiltering.0.h"
#include "win32/impl/Windows.Win32.WindowsFirewall.0.h"
#include "win32/impl/Windows.Win32.WindowsImagingComponent.0.h"
#include "win32/impl/Windows.Win32.WindowsMediaDeviceManager.0.h"
#include "win32/impl/Windows.Win32.WindowsMediaFormat.0.h"
#include "win32/impl/Windows.Win32.WindowsNetworkVirtualization.0.h"
#include "win32/impl/Windows.Win32.WindowsProgramming.0.h"
#include "win32/impl/Windows.Win32.WindowsPropertiesSystem.0.h"
#include "win32/impl/Windows.Win32.WindowsRemoteManagement.0.h"
#include "win32/impl/Windows.Win32.WindowsRibbon.0.h"
#include "win32/impl/Windows.Win32.WindowsServerBackup.0.h"
#include "win32/impl/Windows.Win32.WindowsStationsAndDesktops.0.h"
#include "win32/impl/Windows.Win32.WindowsSync.0.h"
#include "win32/impl/Windows.Win32.WindowsWebServices.0.h"
#include "win32/impl/Windows.Win32.Wmi.0.h"
#include "win32/impl/Windows.Win32.XAudio2.0.h"
#include "win32/impl/Windows.Win32.XInput.0.h"
#include "win32/impl/Windows.Win32.XamlDiagnostics.0.h"
#include "win32/impl/Windows.Win32.XmlHttpExtendedRequest.0.h"
#include "win32/impl/Windows.Win32.Xps.0.h"
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct NDR_SCONTEXT_1
    {
        void* pad[2];
        void* userContext;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::GamingDeviceInfo
{
    struct GAMING_DEVICE_MODEL_INFORMATION
    {
        Windows::Win32::GamingDeviceInfo::GAMING_DEVICE_VENDOR_ID vendorId;
        Windows::Win32::GamingDeviceInfo::GAMING_DEVICE_DEVICE_ID deviceId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectManipulation
{
    struct IDirectManipulationSnapPointsInertiaBehavior
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectManipulation
{
    struct IDirectManipulationContent2
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectManipulation
{
    struct IDirectManipulationViewport3
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectManipulation
{
    struct IDirectManipulationPrimaryContent2
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectManipulation
{
    struct IDirectManipulationParametricMotionBehavior
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectManipulation
{
    struct IDirectManipulationParametricMotionCurve
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectManipulation
{
    struct IDirectManipulationParametricRestPointList
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectManipulation
{
    struct IDirectManipulationParametricRestPointBehavior
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectManipulation
{
    struct IDirectManipulationCompositorPartner
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectManipulation
{
    struct IDirectManipulationManagerPartner
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectManipulation
{
    struct IDirectManipulationViewportPartner
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct XFORM
    {
        float eM11;
        float eM12;
        float eM21;
        float eM22;
        float eDx;
        float eDy;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct BITMAP
    {
        int32_t bmType;
        int32_t bmWidth;
        int32_t bmHeight;
        int32_t bmWidthBytes;
        uint16_t bmPlanes;
        uint16_t bmBitsPixel;
        void* bmBits;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct RGBTRIPLE
    {
        uint8_t rgbtBlue;
        uint8_t rgbtGreen;
        uint8_t rgbtRed;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct RGBQUAD
    {
        uint8_t rgbBlue;
        uint8_t rgbGreen;
        uint8_t rgbRed;
        uint8_t rgbReserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct BITMAPCOREHEADER
    {
        uint32_t bcSize;
        uint16_t bcWidth;
        uint16_t bcHeight;
        uint16_t bcPlanes;
        uint16_t bcBitCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsColorSystem
{
    struct CIEXYZ
    {
        int32_t ciexyzX;
        int32_t ciexyzY;
        int32_t ciexyzZ;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsColorSystem
{
    struct CIEXYZTRIPLE
    {
        Windows::Win32::WindowsColorSystem::CIEXYZ ciexyzRed;
        Windows::Win32::WindowsColorSystem::CIEXYZ ciexyzGreen;
        Windows::Win32::WindowsColorSystem::CIEXYZ ciexyzBlue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct BITMAPV4HEADER
    {
        uint32_t bV4Size;
        int32_t bV4Width;
        int32_t bV4Height;
        uint16_t bV4Planes;
        uint16_t bV4BitCount;
        uint32_t bV4V4Compression;
        uint32_t bV4SizeImage;
        int32_t bV4XPelsPerMeter;
        int32_t bV4YPelsPerMeter;
        uint32_t bV4ClrUsed;
        uint32_t bV4ClrImportant;
        uint32_t bV4RedMask;
        uint32_t bV4GreenMask;
        uint32_t bV4BlueMask;
        uint32_t bV4AlphaMask;
        uint32_t bV4CSType;
        Windows::Win32::WindowsColorSystem::CIEXYZTRIPLE bV4Endpoints;
        uint32_t bV4GammaRed;
        uint32_t bV4GammaGreen;
        uint32_t bV4GammaBlue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct BITMAPV5HEADER
    {
        uint32_t bV5Size;
        int32_t bV5Width;
        int32_t bV5Height;
        uint16_t bV5Planes;
        uint16_t bV5BitCount;
        uint32_t bV5Compression;
        uint32_t bV5SizeImage;
        int32_t bV5XPelsPerMeter;
        int32_t bV5YPelsPerMeter;
        uint32_t bV5ClrUsed;
        uint32_t bV5ClrImportant;
        uint32_t bV5RedMask;
        uint32_t bV5GreenMask;
        uint32_t bV5BlueMask;
        uint32_t bV5AlphaMask;
        uint32_t bV5CSType;
        Windows::Win32::WindowsColorSystem::CIEXYZTRIPLE bV5Endpoints;
        uint32_t bV5GammaRed;
        uint32_t bV5GammaGreen;
        uint32_t bV5GammaBlue;
        uint32_t bV5Intent;
        uint32_t bV5ProfileData;
        uint32_t bV5ProfileSize;
        uint32_t bV5Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct BITMAPINFOHEADER
    {
        uint32_t biSize;
        int32_t biWidth;
        int32_t biHeight;
        uint16_t biPlanes;
        uint16_t biBitCount;
        uint32_t biCompression;
        uint32_t biSizeImage;
        int32_t biXPelsPerMeter;
        int32_t biYPelsPerMeter;
        uint32_t biClrUsed;
        uint32_t biClrImportant;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct BITMAPINFO
    {
        Windows::Win32::DirectShow::BITMAPINFOHEADER bmiHeader;
        Windows::Win32::Gdi::RGBQUAD bmiColors[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct BITMAPCOREINFO
    {
        Windows::Win32::Gdi::BITMAPCOREHEADER bmciHeader;
        Windows::Win32::Gdi::RGBTRIPLE bmciColors[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct BITMAPFILEHEADER
    {
        uint16_t bfType;
        uint32_t bfSize;
        uint16_t bfReserved1;
        uint16_t bfReserved2;
        uint32_t bfOffBits;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct HANDLETABLE
    {
        intptr_t objectHandle[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct METARECORD
    {
        uint32_t rdSize;
        uint16_t rdFunction;
        uint16_t rdParm[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct METAHEADER
    {
        uint16_t mtType;
        uint16_t mtHeaderSize;
        uint16_t mtVersion;
        uint32_t mtSize;
        uint16_t mtNoObjects;
        uint32_t mtMaxRecord;
        uint16_t mtNoParameters;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct ENHMETARECORD
    {
        uint32_t iType;
        uint32_t nSize;
        uint32_t dParm[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct RECTL
    {
        int32_t left;
        int32_t top;
        int32_t right;
        int32_t bottom;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct SIZE
    {
        int32_t cx;
        int32_t cy;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct ENHMETAHEADER
    {
        uint32_t iType;
        uint32_t nSize;
        Windows::Win32::DisplayDevices::RECTL rclBounds;
        Windows::Win32::DisplayDevices::RECTL rclFrame;
        uint32_t dSignature;
        uint32_t nVersion;
        uint32_t nBytes;
        uint32_t nRecords;
        uint16_t nHandles;
        uint16_t sReserved;
        uint32_t nDescription;
        uint32_t offDescription;
        uint32_t nPalEntries;
        Windows::Win32::DisplayDevices::SIZE szlDevice;
        Windows::Win32::DisplayDevices::SIZE szlMillimeters;
        uint32_t cbPixelFormat;
        uint32_t offPixelFormat;
        uint32_t bOpenGL;
        Windows::Win32::DisplayDevices::SIZE szlMicrometers;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct TEXTMETRICA
    {
        int32_t tmHeight;
        int32_t tmAscent;
        int32_t tmDescent;
        int32_t tmInternalLeading;
        int32_t tmExternalLeading;
        int32_t tmAveCharWidth;
        int32_t tmMaxCharWidth;
        int32_t tmWeight;
        int32_t tmOverhang;
        int32_t tmDigitizedAspectX;
        int32_t tmDigitizedAspectY;
        uint8_t tmFirstChar;
        uint8_t tmLastChar;
        uint8_t tmDefaultChar;
        uint8_t tmBreakChar;
        uint8_t tmItalic;
        uint8_t tmUnderlined;
        uint8_t tmStruckOut;
        uint8_t tmPitchAndFamily;
        uint8_t tmCharSet;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct TEXTMETRICW
    {
        int32_t tmHeight;
        int32_t tmAscent;
        int32_t tmDescent;
        int32_t tmInternalLeading;
        int32_t tmExternalLeading;
        int32_t tmAveCharWidth;
        int32_t tmMaxCharWidth;
        int32_t tmWeight;
        int32_t tmOverhang;
        int32_t tmDigitizedAspectX;
        int32_t tmDigitizedAspectY;
        uint16_t tmFirstChar;
        uint16_t tmLastChar;
        uint16_t tmDefaultChar;
        uint16_t tmBreakChar;
        uint8_t tmItalic;
        uint8_t tmUnderlined;
        uint8_t tmStruckOut;
        uint8_t tmPitchAndFamily;
        uint8_t tmCharSet;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct NEWTEXTMETRICA
    {
        int32_t tmHeight;
        int32_t tmAscent;
        int32_t tmDescent;
        int32_t tmInternalLeading;
        int32_t tmExternalLeading;
        int32_t tmAveCharWidth;
        int32_t tmMaxCharWidth;
        int32_t tmWeight;
        int32_t tmOverhang;
        int32_t tmDigitizedAspectX;
        int32_t tmDigitizedAspectY;
        uint8_t tmFirstChar;
        uint8_t tmLastChar;
        uint8_t tmDefaultChar;
        uint8_t tmBreakChar;
        uint8_t tmItalic;
        uint8_t tmUnderlined;
        uint8_t tmStruckOut;
        uint8_t tmPitchAndFamily;
        uint8_t tmCharSet;
        uint32_t ntmFlags;
        uint32_t ntmSizeEM;
        uint32_t ntmCellHeight;
        uint32_t ntmAvgWidth;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct NEWTEXTMETRICW
    {
        int32_t tmHeight;
        int32_t tmAscent;
        int32_t tmDescent;
        int32_t tmInternalLeading;
        int32_t tmExternalLeading;
        int32_t tmAveCharWidth;
        int32_t tmMaxCharWidth;
        int32_t tmWeight;
        int32_t tmOverhang;
        int32_t tmDigitizedAspectX;
        int32_t tmDigitizedAspectY;
        uint16_t tmFirstChar;
        uint16_t tmLastChar;
        uint16_t tmDefaultChar;
        uint16_t tmBreakChar;
        uint8_t tmItalic;
        uint8_t tmUnderlined;
        uint8_t tmStruckOut;
        uint8_t tmPitchAndFamily;
        uint8_t tmCharSet;
        uint32_t ntmFlags;
        uint32_t ntmSizeEM;
        uint32_t ntmCellHeight;
        uint32_t ntmAvgWidth;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct FONTSIGNATURE
    {
        uint32_t fsUsb[4];
        uint32_t fsCsb[2];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct NEWTEXTMETRICEXA
    {
        Windows::Win32::Gdi::NEWTEXTMETRICA ntmTm;
        Windows::Win32::Intl::FONTSIGNATURE ntmFontSig;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct NEWTEXTMETRICEXW
    {
        Windows::Win32::Gdi::NEWTEXTMETRICW ntmTm;
        Windows::Win32::Intl::FONTSIGNATURE ntmFontSig;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct PELARRAY
    {
        int32_t paXCount;
        int32_t paYCount;
        int32_t paXExt;
        int32_t paYExt;
        uint8_t paRGBs;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct LOGBRUSH
    {
        uint32_t lbStyle;
        uint32_t lbColor;
        size_t lbHatch;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct LOGBRUSH32
    {
        uint32_t lbStyle;
        uint32_t lbColor;
        uint32_t lbHatch;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct POINT
    {
        int32_t x;
        int32_t y;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct LOGPEN
    {
        uint32_t lopnStyle;
        Windows::Win32::DisplayDevices::POINT lopnWidth;
        uint32_t lopnColor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EXTLOGPEN
    {
        uint32_t elpPenStyle;
        uint32_t elpWidth;
        uint32_t elpBrushStyle;
        uint32_t elpColor;
        size_t elpHatch;
        uint32_t elpNumEntries;
        uint32_t elpStyleEntry[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EXTLOGPEN32
    {
        uint32_t elpPenStyle;
        uint32_t elpWidth;
        uint32_t elpBrushStyle;
        uint32_t elpColor;
        uint32_t elpHatch;
        uint32_t elpNumEntries;
        uint32_t elpStyleEntry[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct PALETTEENTRY
    {
        uint8_t peRed;
        uint8_t peGreen;
        uint8_t peBlue;
        uint8_t peFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct LOGPALETTE
    {
        uint16_t palVersion;
        uint16_t palNumEntries;
        Windows::Win32::Direct2D::PALETTEENTRY palPalEntry[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct LOGFONTA
    {
        int32_t lfHeight;
        int32_t lfWidth;
        int32_t lfEscapement;
        int32_t lfOrientation;
        int32_t lfWeight;
        uint8_t lfItalic;
        uint8_t lfUnderline;
        uint8_t lfStrikeOut;
        uint8_t lfCharSet;
        uint8_t lfOutPrecision;
        uint8_t lfClipPrecision;
        uint8_t lfQuality;
        uint8_t lfPitchAndFamily;
        int8_t lfFaceName[32];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct ENUMLOGFONTA
    {
        Windows::Win32::Shell::LOGFONTA elfLogFont;
        uint8_t elfFullName[64];
        uint8_t elfStyle[32];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct LOGFONTW
    {
        int32_t lfHeight;
        int32_t lfWidth;
        int32_t lfEscapement;
        int32_t lfOrientation;
        int32_t lfWeight;
        uint8_t lfItalic;
        uint8_t lfUnderline;
        uint8_t lfStrikeOut;
        uint8_t lfCharSet;
        uint8_t lfOutPrecision;
        uint8_t lfClipPrecision;
        uint8_t lfQuality;
        uint8_t lfPitchAndFamily;
        uint16_t lfFaceName[32];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct ENUMLOGFONTW
    {
        Windows::Win32::Shell::LOGFONTW elfLogFont;
        uint16_t elfFullName[64];
        uint16_t elfStyle[32];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct ENUMLOGFONTEXA
    {
        Windows::Win32::Shell::LOGFONTA elfLogFont;
        uint8_t elfFullName[64];
        uint8_t elfStyle[32];
        uint8_t elfScript[32];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct ENUMLOGFONTEXW
    {
        Windows::Win32::Shell::LOGFONTW elfLogFont;
        uint16_t elfFullName[64];
        uint16_t elfStyle[32];
        uint16_t elfScript[32];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct PANOSE
    {
        uint8_t bFamilyType;
        uint8_t bSerifStyle;
        uint8_t bWeight;
        uint8_t bProportion;
        uint8_t bContrast;
        uint8_t bStrokeVariation;
        uint8_t bArmStyle;
        uint8_t bLetterform;
        uint8_t bMidline;
        uint8_t bXHeight;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EXTLOGFONTA
    {
        Windows::Win32::Shell::LOGFONTA elfLogFont;
        uint8_t elfFullName[64];
        uint8_t elfStyle[32];
        uint32_t elfVersion;
        uint32_t elfStyleSize;
        uint32_t elfMatch;
        uint32_t elfReserved;
        uint8_t elfVendorId[4];
        uint32_t elfCulture;
        Windows::Win32::Gdi::PANOSE elfPanose;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EXTLOGFONTW
    {
        Windows::Win32::Shell::LOGFONTW elfLogFont;
        uint16_t elfFullName[64];
        uint16_t elfStyle[32];
        uint32_t elfVersion;
        uint32_t elfStyleSize;
        uint32_t elfMatch;
        uint32_t elfReserved;
        uint8_t elfVendorId[4];
        uint32_t elfCulture;
        Windows::Win32::Gdi::PANOSE elfPanose;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct DISPLAY_DEVICEA
    {
        uint32_t cb;
        int8_t DeviceName[32];
        int8_t DeviceString[128];
        uint32_t StateFlags;
        int8_t DeviceID[128];
        int8_t DeviceKey[128];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct DISPLAY_DEVICEW
    {
        uint32_t cb;
        uint16_t DeviceName[32];
        uint16_t DeviceString[128];
        uint32_t StateFlags;
        uint16_t DeviceID[128];
        uint16_t DeviceKey[128];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Kernel
{
    struct LUID
    {
        uint32_t LowPart;
        int32_t HighPart;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DISPLAYCONFIG_DEVICE_INFO_HEADER
    {
        Windows::Win32::DisplayDevices::DISPLAYCONFIG_DEVICE_INFO_TYPE type;
        uint32_t size;
        Windows::Win32::Kernel::LUID adapterId;
        uint32_t id;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t _bitfield;
            };
            _Anonymous_e__Struct Anonymous;
            uint32_t value;
        };
        Windows::Win32::DisplayDevices::DISPLAYCONFIG_DEVICE_INFO_HEADER header;
        _Anonymous_e__Union Anonymous;
        Windows::Win32::Gdi::DISPLAYCONFIG_COLOR_ENCODING colorEncoding;
        uint32_t bitsPerColorChannel;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t _bitfield;
            };
            _Anonymous_e__Struct Anonymous;
            uint32_t value;
        };
        Windows::Win32::DisplayDevices::DISPLAYCONFIG_DEVICE_INFO_HEADER header;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct DISPLAYCONFIG_SDR_WHITE_LEVEL
    {
        Windows::Win32::DisplayDevices::DISPLAYCONFIG_DEVICE_INFO_HEADER header;
        uint32_t SDRWhiteLevel;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct RECT
    {
        int32_t left;
        int32_t top;
        int32_t right;
        int32_t bottom;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct RGNDATAHEADER
    {
        uint32_t dwSize;
        uint32_t iType;
        uint32_t nCount;
        uint32_t nRgnSize;
        Windows::Win32::DisplayDevices::RECT rcBound;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct RGNDATA
    {
        Windows::Win32::Gdi::RGNDATAHEADER rdh;
        int8_t Buffer[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct ABC
    {
        int32_t abcA;
        uint32_t abcB;
        int32_t abcC;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct ABCFLOAT
    {
        float abcfA;
        float abcfB;
        float abcfC;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct OUTLINETEXTMETRICA
    {
        uint32_t otmSize;
        Windows::Win32::Gdi::TEXTMETRICA otmTextMetrics;
        uint8_t otmFiller;
        Windows::Win32::Gdi::PANOSE otmPanoseNumber;
        uint32_t otmfsSelection;
        uint32_t otmfsType;
        int32_t otmsCharSlopeRise;
        int32_t otmsCharSlopeRun;
        int32_t otmItalicAngle;
        uint32_t otmEMSquare;
        int32_t otmAscent;
        int32_t otmDescent;
        uint32_t otmLineGap;
        uint32_t otmsCapEmHeight;
        uint32_t otmsXHeight;
        Windows::Win32::DisplayDevices::RECT otmrcFontBox;
        int32_t otmMacAscent;
        int32_t otmMacDescent;
        uint32_t otmMacLineGap;
        uint32_t otmusMinimumPPEM;
        Windows::Win32::DisplayDevices::POINT otmptSubscriptSize;
        Windows::Win32::DisplayDevices::POINT otmptSubscriptOffset;
        Windows::Win32::DisplayDevices::POINT otmptSuperscriptSize;
        Windows::Win32::DisplayDevices::POINT otmptSuperscriptOffset;
        uint32_t otmsStrikeoutSize;
        int32_t otmsStrikeoutPosition;
        int32_t otmsUnderscoreSize;
        int32_t otmsUnderscorePosition;
        int8_t* otmpFamilyName;
        int8_t* otmpFaceName;
        int8_t* otmpStyleName;
        int8_t* otmpFullName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct OUTLINETEXTMETRICW
    {
        uint32_t otmSize;
        Windows::Win32::Gdi::TEXTMETRICW otmTextMetrics;
        uint8_t otmFiller;
        Windows::Win32::Gdi::PANOSE otmPanoseNumber;
        uint32_t otmfsSelection;
        uint32_t otmfsType;
        int32_t otmsCharSlopeRise;
        int32_t otmsCharSlopeRun;
        int32_t otmItalicAngle;
        uint32_t otmEMSquare;
        int32_t otmAscent;
        int32_t otmDescent;
        uint32_t otmLineGap;
        uint32_t otmsCapEmHeight;
        uint32_t otmsXHeight;
        Windows::Win32::DisplayDevices::RECT otmrcFontBox;
        int32_t otmMacAscent;
        int32_t otmMacDescent;
        uint32_t otmMacLineGap;
        uint32_t otmusMinimumPPEM;
        Windows::Win32::DisplayDevices::POINT otmptSubscriptSize;
        Windows::Win32::DisplayDevices::POINT otmptSubscriptOffset;
        Windows::Win32::DisplayDevices::POINT otmptSuperscriptSize;
        Windows::Win32::DisplayDevices::POINT otmptSuperscriptOffset;
        uint32_t otmsStrikeoutSize;
        int32_t otmsStrikeoutPosition;
        int32_t otmsUnderscoreSize;
        int32_t otmsUnderscorePosition;
        int8_t* otmpFamilyName;
        int8_t* otmpFaceName;
        int8_t* otmpStyleName;
        int8_t* otmpFullName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct POLYTEXTA
    {
        int32_t x;
        int32_t y;
        uint32_t n;
        int8_t* lpstr;
        uint32_t uiFlags;
        Windows::Win32::DisplayDevices::RECT rcl;
        int32_t* pdx;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct POLYTEXTW
    {
        int32_t x;
        int32_t y;
        uint32_t n;
        uint16_t* lpstr;
        uint32_t uiFlags;
        Windows::Win32::DisplayDevices::RECT rcl;
        int32_t* pdx;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct FIXED
    {
        uint16_t fract;
        int16_t value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct MAT2
    {
        Windows::Win32::Gdi::FIXED eM11;
        Windows::Win32::Gdi::FIXED eM12;
        Windows::Win32::Gdi::FIXED eM21;
        Windows::Win32::Gdi::FIXED eM22;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct GLYPHMETRICS
    {
        uint32_t gmBlackBoxX;
        uint32_t gmBlackBoxY;
        Windows::Win32::DisplayDevices::POINT gmptGlyphOrigin;
        int16_t gmCellIncX;
        int16_t gmCellIncY;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct POINTFX
    {
        Windows::Win32::Gdi::FIXED x;
        Windows::Win32::Gdi::FIXED y;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct TTPOLYCURVE
    {
        uint16_t wType;
        uint16_t cpfx;
        Windows::Win32::Gdi::POINTFX apfx[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct TTPOLYGONHEADER
    {
        uint32_t cb;
        uint32_t dwType;
        Windows::Win32::Gdi::POINTFX pfxStart;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct GCP_RESULTSA
    {
        uint32_t lStructSize;
        int8_t* lpOutString;
        uint32_t* lpOrder;
        int32_t* lpDx;
        int32_t* lpCaretPos;
        int8_t* lpClass;
        uint16_t* lpGlyphs;
        uint32_t nGlyphs;
        int32_t nMaxFit;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct GCP_RESULTSW
    {
        uint32_t lStructSize;
        uint16_t* lpOutString;
        uint32_t* lpOrder;
        int32_t* lpDx;
        int32_t* lpCaretPos;
        int8_t* lpClass;
        uint16_t* lpGlyphs;
        uint32_t nGlyphs;
        int32_t nMaxFit;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct RASTERIZER_STATUS
    {
        int16_t nSize;
        int16_t wFlags;
        int16_t nLanguageID;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct WCRANGE
    {
        uint16_t wcLow;
        uint16_t cGlyphs;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct GLYPHSET
    {
        uint32_t cbThis;
        uint32_t flAccel;
        uint32_t cGlyphsSupported;
        uint32_t cRanges;
        Windows::Win32::Gdi::WCRANGE ranges[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct DESIGNVECTOR
    {
        uint32_t dvReserved;
        uint32_t dvNumAxes;
        int32_t dvValues[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct AXISINFOA
    {
        int32_t axMinValue;
        int32_t axMaxValue;
        uint8_t axAxisName[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct AXISINFOW
    {
        int32_t axMinValue;
        int32_t axMaxValue;
        uint16_t axAxisName[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct AXESLISTA
    {
        uint32_t axlReserved;
        uint32_t axlNumAxes;
        Windows::Win32::Gdi::AXISINFOA axlAxisInfo[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct AXESLISTW
    {
        uint32_t axlReserved;
        uint32_t axlNumAxes;
        Windows::Win32::Gdi::AXISINFOW axlAxisInfo[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct ENUMLOGFONTEXDVA
    {
        Windows::Win32::Gdi::ENUMLOGFONTEXA elfEnumLogfontEx;
        Windows::Win32::Gdi::DESIGNVECTOR elfDesignVector;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct ENUMLOGFONTEXDVW
    {
        Windows::Win32::Gdi::ENUMLOGFONTEXW elfEnumLogfontEx;
        Windows::Win32::Gdi::DESIGNVECTOR elfDesignVector;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct ENUMTEXTMETRICA
    {
        Windows::Win32::Gdi::NEWTEXTMETRICEXA etmNewTextMetricEx;
        Windows::Win32::Gdi::AXESLISTA etmAxesList;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct ENUMTEXTMETRICW
    {
        Windows::Win32::Gdi::NEWTEXTMETRICEXW etmNewTextMetricEx;
        Windows::Win32::Gdi::AXESLISTW etmAxesList;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct TRIVERTEX
    {
        int32_t x;
        int32_t y;
        uint16_t Red;
        uint16_t Green;
        uint16_t Blue;
        uint16_t Alpha;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct GRADIENT_TRIANGLE
    {
        uint32_t Vertex1;
        uint32_t Vertex2;
        uint32_t Vertex3;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct GRADIENT_RECT
    {
        uint32_t UpperLeft;
        uint32_t LowerRight;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct BLENDFUNCTION
    {
        uint8_t BlendOp;
        uint8_t BlendFlags;
        uint8_t SourceConstantAlpha;
        uint8_t AlphaFormat;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct HANDLE
    {
        intptr_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct DIBSECTION
    {
        Windows::Win32::Gdi::BITMAP dsBm;
        Windows::Win32::DirectShow::BITMAPINFOHEADER dsBmih;
        uint32_t dsBitfields[3];
        Windows::Win32::SystemServices::HANDLE dshSection;
        uint32_t dsOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct COLORADJUSTMENT
    {
        uint16_t caSize;
        uint16_t caFlags;
        uint16_t caIlluminantIndex;
        uint16_t caRedGamma;
        uint16_t caGreenGamma;
        uint16_t caBlueGamma;
        uint16_t caReferenceBlack;
        uint16_t caReferenceWhite;
        int16_t caContrast;
        int16_t caBrightness;
        int16_t caColorfulness;
        int16_t caRedGreenTint;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct KERNINGPAIR
    {
        uint16_t wFirst;
        uint16_t wSecond;
        int32_t iKernAmount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMR
    {
        uint32_t iType;
        uint32_t nSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct POINTL
    {
        int32_t x;
        int32_t y;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMRTEXT
    {
        Windows::Win32::DisplayDevices::POINTL ptlReference;
        uint32_t nChars;
        uint32_t offString;
        uint32_t fOptions;
        Windows::Win32::DisplayDevices::RECTL rcl;
        uint32_t offDx;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct ABORTPATH
    {
        Windows::Win32::Gdi::EMR emr;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMRSELECTCLIPPATH
    {
        Windows::Win32::Gdi::EMR emr;
        uint32_t iMode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMRSETMITERLIMIT
    {
        Windows::Win32::Gdi::EMR emr;
        float eMiterLimit;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMRRESTOREDC
    {
        Windows::Win32::Gdi::EMR emr;
        int32_t iRelative;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMRSETARCDIRECTION
    {
        Windows::Win32::Gdi::EMR emr;
        uint32_t iArcDirection;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMRSETMAPPERFLAGS
    {
        Windows::Win32::Gdi::EMR emr;
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMRSETTEXTCOLOR
    {
        Windows::Win32::Gdi::EMR emr;
        uint32_t crColor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMRSELECTOBJECT
    {
        Windows::Win32::Gdi::EMR emr;
        uint32_t ihObject;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMRSELECTPALETTE
    {
        Windows::Win32::Gdi::EMR emr;
        uint32_t ihPal;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMRRESIZEPALETTE
    {
        Windows::Win32::Gdi::EMR emr;
        uint32_t ihPal;
        uint32_t cEntries;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMRSETPALETTEENTRIES
    {
        Windows::Win32::Gdi::EMR emr;
        uint32_t ihPal;
        uint32_t iStart;
        uint32_t cEntries;
        Windows::Win32::Direct2D::PALETTEENTRY aPalEntries[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMRSETCOLORADJUSTMENT
    {
        Windows::Win32::Gdi::EMR emr;
        Windows::Win32::Gdi::COLORADJUSTMENT ColorAdjustment;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMRGDICOMMENT
    {
        Windows::Win32::Gdi::EMR emr;
        uint32_t cbData;
        uint8_t Data[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMREOF
    {
        Windows::Win32::Gdi::EMR emr;
        uint32_t nPalEntries;
        uint32_t offPalEntries;
        uint32_t nSizeLast;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMRLINETO
    {
        Windows::Win32::Gdi::EMR emr;
        Windows::Win32::DisplayDevices::POINTL ptl;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMROFFSETCLIPRGN
    {
        Windows::Win32::Gdi::EMR emr;
        Windows::Win32::DisplayDevices::POINTL ptlOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMRFILLPATH
    {
        Windows::Win32::Gdi::EMR emr;
        Windows::Win32::DisplayDevices::RECTL rclBounds;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMREXCLUDECLIPRECT
    {
        Windows::Win32::Gdi::EMR emr;
        Windows::Win32::DisplayDevices::RECTL rclClip;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMRSETVIEWPORTORGEX
    {
        Windows::Win32::Gdi::EMR emr;
        Windows::Win32::DisplayDevices::POINTL ptlOrigin;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMRSETVIEWPORTEXTEX
    {
        Windows::Win32::Gdi::EMR emr;
        Windows::Win32::DisplayDevices::SIZE szlExtent;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMRSCALEVIEWPORTEXTEX
    {
        Windows::Win32::Gdi::EMR emr;
        int32_t xNum;
        int32_t xDenom;
        int32_t yNum;
        int32_t yDenom;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMRSETWORLDTRANSFORM
    {
        Windows::Win32::Gdi::EMR emr;
        Windows::Win32::Gdi::XFORM xform;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMRMODIFYWORLDTRANSFORM
    {
        Windows::Win32::Gdi::EMR emr;
        Windows::Win32::Gdi::XFORM xform;
        uint32_t iMode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMRSETPIXELV
    {
        Windows::Win32::Gdi::EMR emr;
        Windows::Win32::DisplayDevices::POINTL ptlPixel;
        uint32_t crColor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMREXTFLOODFILL
    {
        Windows::Win32::Gdi::EMR emr;
        Windows::Win32::DisplayDevices::POINTL ptlStart;
        uint32_t crColor;
        uint32_t iMode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMRELLIPSE
    {
        Windows::Win32::Gdi::EMR emr;
        Windows::Win32::DisplayDevices::RECTL rclBox;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMRROUNDRECT
    {
        Windows::Win32::Gdi::EMR emr;
        Windows::Win32::DisplayDevices::RECTL rclBox;
        Windows::Win32::DisplayDevices::SIZE szlCorner;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMRARC
    {
        Windows::Win32::Gdi::EMR emr;
        Windows::Win32::DisplayDevices::RECTL rclBox;
        Windows::Win32::DisplayDevices::POINTL ptlStart;
        Windows::Win32::DisplayDevices::POINTL ptlEnd;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMRANGLEARC
    {
        Windows::Win32::Gdi::EMR emr;
        Windows::Win32::DisplayDevices::POINTL ptlCenter;
        uint32_t nRadius;
        float eStartAngle;
        float eSweepAngle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMRPOLYLINE
    {
        Windows::Win32::Gdi::EMR emr;
        Windows::Win32::DisplayDevices::RECTL rclBounds;
        uint32_t cptl;
        Windows::Win32::DisplayDevices::POINTL aptl[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct POINTS
    {
        int16_t x;
        int16_t y;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMRPOLYLINE16
    {
        Windows::Win32::Gdi::EMR emr;
        Windows::Win32::DisplayDevices::RECTL rclBounds;
        uint32_t cpts;
        Windows::Win32::DisplayDevices::POINTS apts[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMRPOLYDRAW
    {
        Windows::Win32::Gdi::EMR emr;
        Windows::Win32::DisplayDevices::RECTL rclBounds;
        uint32_t cptl;
        Windows::Win32::DisplayDevices::POINTL aptl[1];
        uint8_t abTypes[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMRPOLYDRAW16
    {
        Windows::Win32::Gdi::EMR emr;
        Windows::Win32::DisplayDevices::RECTL rclBounds;
        uint32_t cpts;
        Windows::Win32::DisplayDevices::POINTS apts[1];
        uint8_t abTypes[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMRPOLYPOLYLINE
    {
        Windows::Win32::Gdi::EMR emr;
        Windows::Win32::DisplayDevices::RECTL rclBounds;
        uint32_t nPolys;
        uint32_t cptl;
        uint32_t aPolyCounts[1];
        Windows::Win32::DisplayDevices::POINTL aptl[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMRPOLYPOLYLINE16
    {
        Windows::Win32::Gdi::EMR emr;
        Windows::Win32::DisplayDevices::RECTL rclBounds;
        uint32_t nPolys;
        uint32_t cpts;
        uint32_t aPolyCounts[1];
        Windows::Win32::DisplayDevices::POINTS apts[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMRINVERTRGN
    {
        Windows::Win32::Gdi::EMR emr;
        Windows::Win32::DisplayDevices::RECTL rclBounds;
        uint32_t cbRgnData;
        uint8_t RgnData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMRFILLRGN
    {
        Windows::Win32::Gdi::EMR emr;
        Windows::Win32::DisplayDevices::RECTL rclBounds;
        uint32_t cbRgnData;
        uint32_t ihBrush;
        uint8_t RgnData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMRFRAMERGN
    {
        Windows::Win32::Gdi::EMR emr;
        Windows::Win32::DisplayDevices::RECTL rclBounds;
        uint32_t cbRgnData;
        uint32_t ihBrush;
        Windows::Win32::DisplayDevices::SIZE szlStroke;
        uint8_t RgnData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMREXTSELECTCLIPRGN
    {
        Windows::Win32::Gdi::EMR emr;
        uint32_t cbRgnData;
        uint32_t iMode;
        uint8_t RgnData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMREXTTEXTOUTA
    {
        Windows::Win32::Gdi::EMR emr;
        Windows::Win32::DisplayDevices::RECTL rclBounds;
        uint32_t iGraphicsMode;
        float exScale;
        float eyScale;
        Windows::Win32::Gdi::EMRTEXT emrtext;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMRPOLYTEXTOUTA
    {
        Windows::Win32::Gdi::EMR emr;
        Windows::Win32::DisplayDevices::RECTL rclBounds;
        uint32_t iGraphicsMode;
        float exScale;
        float eyScale;
        int32_t cStrings;
        Windows::Win32::Gdi::EMRTEXT aemrtext[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMRBITBLT
    {
        Windows::Win32::Gdi::EMR emr;
        Windows::Win32::DisplayDevices::RECTL rclBounds;
        int32_t xDest;
        int32_t yDest;
        int32_t cxDest;
        int32_t cyDest;
        uint32_t dwRop;
        int32_t xSrc;
        int32_t ySrc;
        Windows::Win32::Gdi::XFORM xformSrc;
        uint32_t crBkColorSrc;
        uint32_t iUsageSrc;
        uint32_t offBmiSrc;
        uint32_t cbBmiSrc;
        uint32_t offBitsSrc;
        uint32_t cbBitsSrc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMRSTRETCHBLT
    {
        Windows::Win32::Gdi::EMR emr;
        Windows::Win32::DisplayDevices::RECTL rclBounds;
        int32_t xDest;
        int32_t yDest;
        int32_t cxDest;
        int32_t cyDest;
        uint32_t dwRop;
        int32_t xSrc;
        int32_t ySrc;
        Windows::Win32::Gdi::XFORM xformSrc;
        uint32_t crBkColorSrc;
        uint32_t iUsageSrc;
        uint32_t offBmiSrc;
        uint32_t cbBmiSrc;
        uint32_t offBitsSrc;
        uint32_t cbBitsSrc;
        int32_t cxSrc;
        int32_t cySrc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMRMASKBLT
    {
        Windows::Win32::Gdi::EMR emr;
        Windows::Win32::DisplayDevices::RECTL rclBounds;
        int32_t xDest;
        int32_t yDest;
        int32_t cxDest;
        int32_t cyDest;
        uint32_t dwRop;
        int32_t xSrc;
        int32_t ySrc;
        Windows::Win32::Gdi::XFORM xformSrc;
        uint32_t crBkColorSrc;
        uint32_t iUsageSrc;
        uint32_t offBmiSrc;
        uint32_t cbBmiSrc;
        uint32_t offBitsSrc;
        uint32_t cbBitsSrc;
        int32_t xMask;
        int32_t yMask;
        uint32_t iUsageMask;
        uint32_t offBmiMask;
        uint32_t cbBmiMask;
        uint32_t offBitsMask;
        uint32_t cbBitsMask;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMRPLGBLT
    {
        Windows::Win32::Gdi::EMR emr;
        Windows::Win32::DisplayDevices::RECTL rclBounds;
        Windows::Win32::DisplayDevices::POINTL aptlDest[3];
        int32_t xSrc;
        int32_t ySrc;
        int32_t cxSrc;
        int32_t cySrc;
        Windows::Win32::Gdi::XFORM xformSrc;
        uint32_t crBkColorSrc;
        uint32_t iUsageSrc;
        uint32_t offBmiSrc;
        uint32_t cbBmiSrc;
        uint32_t offBitsSrc;
        uint32_t cbBitsSrc;
        int32_t xMask;
        int32_t yMask;
        uint32_t iUsageMask;
        uint32_t offBmiMask;
        uint32_t cbBmiMask;
        uint32_t offBitsMask;
        uint32_t cbBitsMask;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMRSETDIBITSTODEVICE
    {
        Windows::Win32::Gdi::EMR emr;
        Windows::Win32::DisplayDevices::RECTL rclBounds;
        int32_t xDest;
        int32_t yDest;
        int32_t xSrc;
        int32_t ySrc;
        int32_t cxSrc;
        int32_t cySrc;
        uint32_t offBmiSrc;
        uint32_t cbBmiSrc;
        uint32_t offBitsSrc;
        uint32_t cbBitsSrc;
        uint32_t iUsageSrc;
        uint32_t iStartScan;
        uint32_t cScans;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMRSTRETCHDIBITS
    {
        Windows::Win32::Gdi::EMR emr;
        Windows::Win32::DisplayDevices::RECTL rclBounds;
        int32_t xDest;
        int32_t yDest;
        int32_t xSrc;
        int32_t ySrc;
        int32_t cxSrc;
        int32_t cySrc;
        uint32_t offBmiSrc;
        uint32_t cbBmiSrc;
        uint32_t offBitsSrc;
        uint32_t cbBitsSrc;
        uint32_t iUsageSrc;
        uint32_t dwRop;
        int32_t cxDest;
        int32_t cyDest;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMREXTCREATEFONTINDIRECTW
    {
        Windows::Win32::Gdi::EMR emr;
        uint32_t ihFont;
        Windows::Win32::Gdi::EXTLOGFONTW elfw;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMRCREATEPALETTE
    {
        Windows::Win32::Gdi::EMR emr;
        uint32_t ihPal;
        Windows::Win32::Gdi::LOGPALETTE lgpl;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMRCREATEPEN
    {
        Windows::Win32::Gdi::EMR emr;
        uint32_t ihPen;
        Windows::Win32::Gdi::LOGPEN lopn;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMREXTCREATEPEN
    {
        Windows::Win32::Gdi::EMR emr;
        uint32_t ihPen;
        uint32_t offBmi;
        uint32_t cbBmi;
        uint32_t offBits;
        uint32_t cbBits;
        Windows::Win32::Gdi::EXTLOGPEN32 elp;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMRCREATEBRUSHINDIRECT
    {
        Windows::Win32::Gdi::EMR emr;
        uint32_t ihBrush;
        Windows::Win32::Gdi::LOGBRUSH32 lb;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMRCREATEMONOBRUSH
    {
        Windows::Win32::Gdi::EMR emr;
        uint32_t ihBrush;
        uint32_t iUsage;
        uint32_t offBmi;
        uint32_t cbBmi;
        uint32_t offBits;
        uint32_t cbBits;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMRCREATEDIBPATTERNBRUSHPT
    {
        Windows::Win32::Gdi::EMR emr;
        uint32_t ihBrush;
        uint32_t iUsage;
        uint32_t offBmi;
        uint32_t cbBmi;
        uint32_t offBits;
        uint32_t cbBits;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMRFORMAT
    {
        uint32_t dSignature;
        uint32_t nVersion;
        uint32_t cbData;
        uint32_t offData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMRGLSRECORD
    {
        Windows::Win32::Gdi::EMR emr;
        uint32_t cbData;
        uint8_t Data[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMRGLSBOUNDEDRECORD
    {
        Windows::Win32::Gdi::EMR emr;
        Windows::Win32::DisplayDevices::RECTL rclBounds;
        uint32_t cbData;
        uint8_t Data[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OpenGL
{
    struct PIXELFORMATDESCRIPTOR
    {
        uint16_t nSize;
        uint16_t nVersion;
        uint32_t dwFlags;
        uint8_t iPixelType;
        uint8_t cColorBits;
        uint8_t cRedBits;
        uint8_t cRedShift;
        uint8_t cGreenBits;
        uint8_t cGreenShift;
        uint8_t cBlueBits;
        uint8_t cBlueShift;
        uint8_t cAlphaBits;
        uint8_t cAlphaShift;
        uint8_t cAccumBits;
        uint8_t cAccumRedBits;
        uint8_t cAccumGreenBits;
        uint8_t cAccumBlueBits;
        uint8_t cAccumAlphaBits;
        uint8_t cDepthBits;
        uint8_t cStencilBits;
        uint8_t cAuxBuffers;
        uint8_t iLayerType;
        uint8_t bReserved;
        uint32_t dwLayerMask;
        uint32_t dwVisibleMask;
        uint32_t dwDamageMask;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMRPIXELFORMAT
    {
        Windows::Win32::Gdi::EMR emr;
        Windows::Win32::OpenGL::PIXELFORMATDESCRIPTOR pfd;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsColorSystem
{
    struct LOGCOLORSPACEA
    {
        uint32_t lcsSignature;
        uint32_t lcsVersion;
        uint32_t lcsSize;
        int32_t lcsCSType;
        int32_t lcsIntent;
        Windows::Win32::WindowsColorSystem::CIEXYZTRIPLE lcsEndpoints;
        uint32_t lcsGammaRed;
        uint32_t lcsGammaGreen;
        uint32_t lcsGammaBlue;
        int8_t lcsFilename[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMRCREATECOLORSPACE
    {
        Windows::Win32::Gdi::EMR emr;
        uint32_t ihCS;
        Windows::Win32::WindowsColorSystem::LOGCOLORSPACEA lcs;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMRSETCOLORSPACE
    {
        Windows::Win32::Gdi::EMR emr;
        uint32_t ihCS;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMREXTESCAPE
    {
        Windows::Win32::Gdi::EMR emr;
        int32_t iEscape;
        int32_t cbEscData;
        uint8_t EscData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMRNAMEDESCAPE
    {
        Windows::Win32::Gdi::EMR emr;
        int32_t iEscape;
        int32_t cbDriver;
        int32_t cbEscData;
        uint8_t EscData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMRSETICMPROFILE
    {
        Windows::Win32::Gdi::EMR emr;
        uint32_t dwFlags;
        uint32_t cbName;
        uint32_t cbData;
        uint8_t Data[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsColorSystem
{
    struct LOGCOLORSPACEW
    {
        uint32_t lcsSignature;
        uint32_t lcsVersion;
        uint32_t lcsSize;
        int32_t lcsCSType;
        int32_t lcsIntent;
        Windows::Win32::WindowsColorSystem::CIEXYZTRIPLE lcsEndpoints;
        uint32_t lcsGammaRed;
        uint32_t lcsGammaGreen;
        uint32_t lcsGammaBlue;
        uint16_t lcsFilename[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMRCREATECOLORSPACEW
    {
        Windows::Win32::Gdi::EMR emr;
        uint32_t ihCS;
        Windows::Win32::WindowsColorSystem::LOGCOLORSPACEW lcs;
        uint32_t dwFlags;
        uint32_t cbData;
        uint8_t Data[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct COLORMATCHTOTARGET
    {
        Windows::Win32::Gdi::EMR emr;
        uint32_t dwAction;
        uint32_t dwFlags;
        uint32_t cbName;
        uint32_t cbData;
        uint8_t Data[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct COLORCORRECTPALETTE
    {
        Windows::Win32::Gdi::EMR emr;
        uint32_t ihPalette;
        uint32_t nFirstEntry;
        uint32_t nPalEntries;
        uint32_t nReserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMRALPHABLEND
    {
        Windows::Win32::Gdi::EMR emr;
        Windows::Win32::DisplayDevices::RECTL rclBounds;
        int32_t xDest;
        int32_t yDest;
        int32_t cxDest;
        int32_t cyDest;
        uint32_t dwRop;
        int32_t xSrc;
        int32_t ySrc;
        Windows::Win32::Gdi::XFORM xformSrc;
        uint32_t crBkColorSrc;
        uint32_t iUsageSrc;
        uint32_t offBmiSrc;
        uint32_t cbBmiSrc;
        uint32_t offBitsSrc;
        uint32_t cbBitsSrc;
        int32_t cxSrc;
        int32_t cySrc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMRGRADIENTFILL
    {
        Windows::Win32::Gdi::EMR emr;
        Windows::Win32::DisplayDevices::RECTL rclBounds;
        uint32_t nVer;
        uint32_t nTri;
        uint32_t ulMode;
        Windows::Win32::Gdi::TRIVERTEX Ver[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct EMRTRANSPARENTBLT
    {
        Windows::Win32::Gdi::EMR emr;
        Windows::Win32::DisplayDevices::RECTL rclBounds;
        int32_t xDest;
        int32_t yDest;
        int32_t cxDest;
        int32_t cyDest;
        uint32_t dwRop;
        int32_t xSrc;
        int32_t ySrc;
        Windows::Win32::Gdi::XFORM xformSrc;
        uint32_t crBkColorSrc;
        uint32_t iUsageSrc;
        uint32_t offBmiSrc;
        uint32_t cbBmiSrc;
        uint32_t offBitsSrc;
        uint32_t cbBitsSrc;
        int32_t cxSrc;
        int32_t cySrc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct HDC
    {
        intptr_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct WGLSWAP
    {
        Windows::Win32::Gdi::HDC hdc;
        uint32_t uiFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct TTLOADINFO
    {
        uint16_t usStructSize;
        uint16_t usRefStrSize;
        uint16_t* pusRefStr;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct TTEMBEDINFO
    {
        uint16_t usStructSize;
        uint16_t usRootStrSize;
        uint16_t* pusRootStr;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct TTVALIDATIONTESTSPARAMS
    {
        uint32_t ulStructSize;
        int32_t lTestFromSize;
        int32_t lTestToSize;
        uint32_t ulCharSet;
        uint16_t usReserved1;
        uint16_t usCharCodeCount;
        uint16_t* pusCharCodeSet;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct TTVALIDATIONTESTSPARAMSEX
    {
        uint32_t ulStructSize;
        int32_t lTestFromSize;
        int32_t lTestToSize;
        uint32_t ulCharSet;
        uint16_t usReserved1;
        uint16_t usCharCodeCount;
        uint32_t* pulCharCodeSet;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct tagMxdcEscapeHeader
    {
        uint32_t cbInput;
        uint32_t cbOutput;
        uint32_t opCode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct tagMxdcGetFileNameData
    {
        uint32_t cbOutput;
        uint16_t wszData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct tagMxdcS0PageData
    {
        uint32_t dwSize;
        uint8_t bData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct tagMxdcXpsS0PageResource
    {
        uint32_t dwSize;
        uint32_t dwResourceType;
        uint8_t szUri[260];
        uint32_t dwDataSize;
        uint8_t bData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct tagMxdcPrintTicketPassthrough
    {
        uint32_t dwDataSize;
        uint8_t bData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct tagMxdcPrintTicketEscape
    {
        Windows::Win32::Gdi::tagMxdcEscapeHeader mxdcEscape;
        Windows::Win32::Gdi::tagMxdcPrintTicketPassthrough printTicketData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct tagMxdcS0PagePassthroughEscape
    {
        Windows::Win32::Gdi::tagMxdcEscapeHeader mxdcEscape;
        Windows::Win32::Gdi::tagMxdcS0PageData xpsS0PageData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct tagMxdcS0PageResourceEscape
    {
        Windows::Win32::Gdi::tagMxdcEscapeHeader mxdcEscape;
        Windows::Win32::Gdi::tagMxdcXpsS0PageResource xpsS0PageResourcePassthrough;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Xps
{
    struct DRAWPATRECT
    {
        Windows::Win32::DisplayDevices::POINT ptPosition;
        Windows::Win32::DisplayDevices::POINT ptSize;
        uint16_t wStyle;
        uint16_t wPattern;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Xps
{
    struct PSINJECTDATA
    {
        uint32_t DataBytes;
        uint16_t InjectionPoint;
        uint16_t PageNumber;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct BOOL
    {
        int32_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Xps
{
    struct PSFEATURE_OUTPUT
    {
        Windows::Win32::SystemServices::BOOL bPageIndependent;
        Windows::Win32::SystemServices::BOOL bSetPageDevice;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Xps
{
    struct PSFEATURE_CUSTPAPER
    {
        int32_t lOrientation;
        int32_t lWidth;
        int32_t lHeight;
        int32_t lWidthOffset;
        int32_t lHeightOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Xps
{
    struct DEVMODEA
    {
        union _Anonymous1_e__Union
        {
            struct _Anonymous1_e__Struct
            {
                int16_t dmOrientation;
                int16_t dmPaperSize;
                int16_t dmPaperLength;
                int16_t dmPaperWidth;
                int16_t dmScale;
                int16_t dmCopies;
                int16_t dmDefaultSource;
                int16_t dmPrintQuality;
            };
            struct _Anonymous2_e__Struct
            {
                Windows::Win32::DisplayDevices::POINTL dmPosition;
                uint32_t dmDisplayOrientation;
                uint32_t dmDisplayFixedOutput;
            };
            _Anonymous1_e__Struct Anonymous1;
            _Anonymous2_e__Struct Anonymous2;
        };
        union _Anonymous2_e__Union
        {
            uint32_t dmDisplayFlags;
            uint32_t dmNup;
        };
        uint8_t dmDeviceName[32];
        uint16_t dmSpecVersion;
        uint16_t dmDriverVersion;
        uint16_t dmSize;
        uint16_t dmDriverExtra;
        uint32_t dmFields;
        _Anonymous1_e__Union Anonymous1;
        int16_t dmColor;
        int16_t dmDuplex;
        int16_t dmYResolution;
        int16_t dmTTOption;
        int16_t dmCollate;
        uint8_t dmFormName[32];
        uint16_t dmLogPixels;
        uint32_t dmBitsPerPel;
        uint32_t dmPelsWidth;
        uint32_t dmPelsHeight;
        _Anonymous2_e__Union Anonymous2;
        uint32_t dmDisplayFrequency;
        uint32_t dmICMMethod;
        uint32_t dmICMIntent;
        uint32_t dmMediaType;
        uint32_t dmDitherType;
        uint32_t dmReserved1;
        uint32_t dmReserved2;
        uint32_t dmPanningWidth;
        uint32_t dmPanningHeight;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Xps
{
    struct DOCINFOA
    {
        int32_t cbSize;
        int8_t* lpszDocName;
        int8_t* lpszOutput;
        int8_t* lpszDatatype;
        uint32_t fwType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Xps
{
    struct DOCINFOW
    {
        int32_t cbSize;
        uint16_t* lpszDocName;
        uint16_t* lpszOutput;
        uint16_t* lpszDatatype;
        uint32_t fwType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct CHARSETINFO
    {
        uint32_t ciCharset;
        uint32_t ciACP;
        Windows::Win32::Intl::FONTSIGNATURE fs;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct LOCALESIGNATURE
    {
        uint32_t lsUsb[4];
        uint32_t lsCsbDefault[2];
        uint32_t lsCsbSupported[2];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DataExchange
{
    struct METAFILEPICT
    {
        int32_t mm;
        int32_t xExt;
        int32_t yExt;
        intptr_t hMF;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DEVMODEW
    {
        union _Anonymous1_e__Union
        {
            struct _Anonymous1_e__Struct
            {
                int16_t dmOrientation;
                int16_t dmPaperSize;
                int16_t dmPaperLength;
                int16_t dmPaperWidth;
                int16_t dmScale;
                int16_t dmCopies;
                int16_t dmDefaultSource;
                int16_t dmPrintQuality;
            };
            struct _Anonymous2_e__Struct
            {
                Windows::Win32::DisplayDevices::POINTL dmPosition;
                uint32_t dmDisplayOrientation;
                uint32_t dmDisplayFixedOutput;
            };
            _Anonymous1_e__Struct Anonymous1;
            _Anonymous2_e__Struct Anonymous2;
        };
        union _Anonymous2_e__Union
        {
            uint32_t dmDisplayFlags;
            uint32_t dmNup;
        };
        uint16_t dmDeviceName[32];
        uint16_t dmSpecVersion;
        uint16_t dmDriverVersion;
        uint16_t dmSize;
        uint16_t dmDriverExtra;
        uint32_t dmFields;
        _Anonymous1_e__Union Anonymous1;
        int16_t dmColor;
        int16_t dmDuplex;
        int16_t dmYResolution;
        int16_t dmTTOption;
        int16_t dmCollate;
        uint16_t dmFormName[32];
        uint16_t dmLogPixels;
        uint32_t dmBitsPerPel;
        uint32_t dmPelsWidth;
        uint32_t dmPelsHeight;
        _Anonymous2_e__Union Anonymous2;
        uint32_t dmDisplayFrequency;
        uint32_t dmICMMethod;
        uint32_t dmICMIntent;
        uint32_t dmMediaType;
        uint32_t dmDitherType;
        uint32_t dmReserved1;
        uint32_t dmReserved2;
        uint32_t dmPanningWidth;
        uint32_t dmPanningHeight;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DISPLAYCONFIG_RATIONAL
    {
        uint32_t Numerator;
        uint32_t Denominator;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DISPLAYCONFIG_2DREGION
    {
        uint32_t cx;
        uint32_t cy;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DISPLAYCONFIG_VIDEO_SIGNAL_INFO
    {
        union _Anonymous_e__Union
        {
            struct _AdditionalSignalInfo_e__Struct
            {
                uint32_t _bitfield;
            };
            _AdditionalSignalInfo_e__Struct AdditionalSignalInfo;
            uint32_t videoStandard;
        };
        uint64_t pixelRate;
        Windows::Win32::DisplayDevices::DISPLAYCONFIG_RATIONAL hSyncFreq;
        Windows::Win32::DisplayDevices::DISPLAYCONFIG_RATIONAL vSyncFreq;
        Windows::Win32::DisplayDevices::DISPLAYCONFIG_2DREGION activeSize;
        Windows::Win32::DisplayDevices::DISPLAYCONFIG_2DREGION totalSize;
        _Anonymous_e__Union Anonymous;
        Windows::Win32::DisplayDevices::DISPLAYCONFIG_SCANLINE_ORDERING scanLineOrdering;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DISPLAYCONFIG_SOURCE_MODE
    {
        uint32_t width;
        uint32_t height;
        Windows::Win32::DisplayDevices::DISPLAYCONFIG_PIXELFORMAT pixelFormat;
        Windows::Win32::DisplayDevices::POINTL position;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DISPLAYCONFIG_TARGET_MODE
    {
        Windows::Win32::DisplayDevices::DISPLAYCONFIG_VIDEO_SIGNAL_INFO targetVideoSignalInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DISPLAYCONFIG_DESKTOP_IMAGE_INFO
    {
        Windows::Win32::DisplayDevices::POINTL PathSourceSize;
        Windows::Win32::DisplayDevices::RECTL DesktopImageRegion;
        Windows::Win32::DisplayDevices::RECTL DesktopImageClip;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DISPLAYCONFIG_MODE_INFO
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::DisplayDevices::DISPLAYCONFIG_TARGET_MODE targetMode;
            Windows::Win32::DisplayDevices::DISPLAYCONFIG_SOURCE_MODE sourceMode;
            Windows::Win32::DisplayDevices::DISPLAYCONFIG_DESKTOP_IMAGE_INFO desktopImageInfo;
        };
        Windows::Win32::DisplayDevices::DISPLAYCONFIG_MODE_INFO_TYPE infoType;
        uint32_t id;
        Windows::Win32::Kernel::LUID adapterId;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DISPLAYCONFIG_PATH_SOURCE_INFO
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t _bitfield;
            };
            uint32_t modeInfoIdx;
            _Anonymous_e__Struct Anonymous;
        };
        Windows::Win32::Kernel::LUID adapterId;
        uint32_t id;
        _Anonymous_e__Union Anonymous;
        uint32_t statusFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DISPLAYCONFIG_PATH_TARGET_INFO
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t _bitfield;
            };
            uint32_t modeInfoIdx;
            _Anonymous_e__Struct Anonymous;
        };
        Windows::Win32::Kernel::LUID adapterId;
        uint32_t id;
        _Anonymous_e__Union Anonymous;
        Windows::Win32::DisplayDevices::DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY outputTechnology;
        Windows::Win32::DisplayDevices::DISPLAYCONFIG_ROTATION rotation;
        Windows::Win32::DisplayDevices::DISPLAYCONFIG_SCALING scaling;
        Windows::Win32::DisplayDevices::DISPLAYCONFIG_RATIONAL refreshRate;
        Windows::Win32::DisplayDevices::DISPLAYCONFIG_SCANLINE_ORDERING scanLineOrdering;
        Windows::Win32::SystemServices::BOOL targetAvailable;
        uint32_t statusFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DISPLAYCONFIG_PATH_INFO
    {
        Windows::Win32::DisplayDevices::DISPLAYCONFIG_PATH_SOURCE_INFO sourceInfo;
        Windows::Win32::DisplayDevices::DISPLAYCONFIG_PATH_TARGET_INFO targetInfo;
        uint32_t flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DISPLAYCONFIG_SOURCE_DEVICE_NAME
    {
        Windows::Win32::DisplayDevices::DISPLAYCONFIG_DEVICE_INFO_HEADER header;
        uint16_t viewGdiDeviceName[32];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t _bitfield;
            };
            _Anonymous_e__Struct Anonymous;
            uint32_t value;
        };
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DISPLAYCONFIG_TARGET_DEVICE_NAME
    {
        Windows::Win32::DisplayDevices::DISPLAYCONFIG_DEVICE_INFO_HEADER header;
        Windows::Win32::DisplayDevices::DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS flags;
        Windows::Win32::DisplayDevices::DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY outputTechnology;
        uint16_t edidManufactureId;
        uint16_t edidProductCodeId;
        uint32_t connectorInstance;
        uint16_t monitorFriendlyDeviceName[64];
        uint16_t monitorDevicePath[128];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DISPLAYCONFIG_TARGET_PREFERRED_MODE
    {
        Windows::Win32::DisplayDevices::DISPLAYCONFIG_DEVICE_INFO_HEADER header;
        uint32_t width;
        uint32_t height;
        Windows::Win32::DisplayDevices::DISPLAYCONFIG_TARGET_MODE targetMode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DISPLAYCONFIG_ADAPTER_NAME
    {
        Windows::Win32::DisplayDevices::DISPLAYCONFIG_DEVICE_INFO_HEADER header;
        uint16_t adapterDevicePath[128];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DISPLAYCONFIG_TARGET_BASE_TYPE
    {
        Windows::Win32::DisplayDevices::DISPLAYCONFIG_DEVICE_INFO_HEADER header;
        Windows::Win32::DisplayDevices::DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY baseOutputTechnology;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DISPLAYCONFIG_SET_TARGET_PERSISTENCE
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t _bitfield;
            };
            _Anonymous_e__Struct Anonymous;
            uint32_t value;
        };
        Windows::Win32::DisplayDevices::DISPLAYCONFIG_DEVICE_INFO_HEADER header;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t _bitfield;
            };
            _Anonymous_e__Struct Anonymous;
            uint32_t value;
        };
        Windows::Win32::DisplayDevices::DISPLAYCONFIG_DEVICE_INFO_HEADER header;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OpenGL
{
    struct POINTFLOAT
    {
        float x;
        float y;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OpenGL
{
    struct GLYPHMETRICSFLOAT
    {
        float gmfBlackBoxX;
        float gmfBlackBoxY;
        Windows::Win32::OpenGL::POINTFLOAT gmfptGlyphOrigin;
        float gmfCellIncX;
        float gmfCellIncY;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OpenGL
{
    struct LAYERPLANEDESCRIPTOR
    {
        uint16_t nSize;
        uint16_t nVersion;
        uint32_t dwFlags;
        uint8_t iPixelType;
        uint8_t cColorBits;
        uint8_t cRedBits;
        uint8_t cRedShift;
        uint8_t cGreenBits;
        uint8_t cGreenShift;
        uint8_t cBlueBits;
        uint8_t cBlueShift;
        uint8_t cAlphaBits;
        uint8_t cAlphaShift;
        uint8_t cAccumBits;
        uint8_t cAccumRedBits;
        uint8_t cAccumGreenBits;
        uint8_t cAccumBlueBits;
        uint8_t cAccumAlphaBits;
        uint8_t cDepthBits;
        uint8_t cStencilBits;
        uint8_t cAuxBuffers;
        uint8_t iLayerPlane;
        uint8_t bReserved;
        uint32_t crTransparent;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_BUFFER_TENSOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DATA_TYPE DataType;
        Windows::Win32::DirectML::DML_TENSOR_FLAGS Flags;
        uint32_t DimensionCount;
        uint32_t* Sizes;
        uint32_t* Strides;
        uint64_t TotalTensorSizeInBytes;
        uint32_t GuaranteedBaseOffsetAlignment;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_TENSOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_TYPE Type;
        void* Desc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_SCALE_BIAS
    {
        float Scale;
        float Bias;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_SIZE_2D
    {
        uint32_t Width;
        uint32_t Height;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_OPERATOR_TYPE Type;
        void* Desc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ELEMENT_WISE_IDENTITY_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
        Windows::Win32::DirectML::DML_SCALE_BIAS* ScaleBias;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ELEMENT_WISE_ABS_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
        Windows::Win32::DirectML::DML_SCALE_BIAS* ScaleBias;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ELEMENT_WISE_ACOS_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
        Windows::Win32::DirectML::DML_SCALE_BIAS* ScaleBias;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ELEMENT_WISE_ADD_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* ATensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* BTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ELEMENT_WISE_ADD1_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* ATensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* BTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
        Windows::Win32::DirectML::DML_OPERATOR_DESC* FusedActivation;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ELEMENT_WISE_ASIN_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
        Windows::Win32::DirectML::DML_SCALE_BIAS* ScaleBias;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ELEMENT_WISE_ATAN_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
        Windows::Win32::DirectML::DML_SCALE_BIAS* ScaleBias;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ELEMENT_WISE_CEIL_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
        Windows::Win32::DirectML::DML_SCALE_BIAS* ScaleBias;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ELEMENT_WISE_CLIP_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
        Windows::Win32::DirectML::DML_SCALE_BIAS* ScaleBias;
        float Min;
        float Max;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ELEMENT_WISE_COS_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
        Windows::Win32::DirectML::DML_SCALE_BIAS* ScaleBias;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ELEMENT_WISE_DIVIDE_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* ATensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* BTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ELEMENT_WISE_EXP_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
        Windows::Win32::DirectML::DML_SCALE_BIAS* ScaleBias;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ELEMENT_WISE_FLOOR_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
        Windows::Win32::DirectML::DML_SCALE_BIAS* ScaleBias;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ELEMENT_WISE_LOG_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
        Windows::Win32::DirectML::DML_SCALE_BIAS* ScaleBias;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ELEMENT_WISE_LOGICAL_AND_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* ATensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* BTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ELEMENT_WISE_LOGICAL_EQUALS_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* ATensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* BTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ELEMENT_WISE_LOGICAL_GREATER_THAN_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* ATensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* BTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ELEMENT_WISE_LOGICAL_LESS_THAN_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* ATensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* BTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ELEMENT_WISE_LOGICAL_NOT_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ELEMENT_WISE_LOGICAL_OR_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* ATensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* BTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ELEMENT_WISE_LOGICAL_XOR_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* ATensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* BTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ELEMENT_WISE_MAX_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* ATensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* BTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ELEMENT_WISE_MEAN_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* ATensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* BTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ELEMENT_WISE_MIN_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* ATensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* BTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ELEMENT_WISE_MULTIPLY_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* ATensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* BTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ELEMENT_WISE_POW_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* ExponentTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
        Windows::Win32::DirectML::DML_SCALE_BIAS* ScaleBias;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ELEMENT_WISE_CONSTANT_POW_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
        Windows::Win32::DirectML::DML_SCALE_BIAS* ScaleBias;
        float Exponent;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ELEMENT_WISE_RECIP_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
        Windows::Win32::DirectML::DML_SCALE_BIAS* ScaleBias;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ELEMENT_WISE_SIN_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
        Windows::Win32::DirectML::DML_SCALE_BIAS* ScaleBias;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ELEMENT_WISE_SQRT_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
        Windows::Win32::DirectML::DML_SCALE_BIAS* ScaleBias;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ELEMENT_WISE_SUBTRACT_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* ATensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* BTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ELEMENT_WISE_TAN_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
        Windows::Win32::DirectML::DML_SCALE_BIAS* ScaleBias;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ELEMENT_WISE_THRESHOLD_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
        Windows::Win32::DirectML::DML_SCALE_BIAS* ScaleBias;
        float Min;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ELEMENT_WISE_QUANTIZE_LINEAR_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* ScaleTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* ZeroPointTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ELEMENT_WISE_DEQUANTIZE_LINEAR_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* ScaleTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* ZeroPointTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ACTIVATION_ELU_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
        float Alpha;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ACTIVATION_HARDMAX_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ACTIVATION_HARD_SIGMOID_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
        float Alpha;
        float Beta;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ACTIVATION_IDENTITY_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ACTIVATION_LEAKY_RELU_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
        float Alpha;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ACTIVATION_LINEAR_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
        float Alpha;
        float Beta;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ACTIVATION_LOG_SOFTMAX_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ACTIVATION_PARAMETERIZED_RELU_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* SlopeTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ACTIVATION_PARAMETRIC_SOFTPLUS_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
        float Alpha;
        float Beta;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ACTIVATION_RELU_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ACTIVATION_SCALED_ELU_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
        float Alpha;
        float Gamma;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ACTIVATION_SCALED_TANH_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
        float Alpha;
        float Beta;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ACTIVATION_SIGMOID_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ACTIVATION_SOFTMAX_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ACTIVATION_SOFTPLUS_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
        float Steepness;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ACTIVATION_SOFTSIGN_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ACTIVATION_TANH_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ACTIVATION_THRESHOLDED_RELU_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
        float Alpha;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_CONVOLUTION_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* FilterTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* BiasTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
        Windows::Win32::DirectML::DML_CONVOLUTION_MODE Mode;
        Windows::Win32::DirectML::DML_CONVOLUTION_DIRECTION Direction;
        uint32_t DimensionCount;
        uint32_t* Strides;
        uint32_t* Dilations;
        uint32_t* StartPadding;
        uint32_t* EndPadding;
        uint32_t* OutputPadding;
        uint32_t GroupCount;
        Windows::Win32::DirectML::DML_OPERATOR_DESC* FusedActivation;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_GEMM_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* ATensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* BTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* CTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
        Windows::Win32::DirectML::DML_MATRIX_TRANSFORM TransA;
        Windows::Win32::DirectML::DML_MATRIX_TRANSFORM TransB;
        float Alpha;
        float Beta;
        Windows::Win32::DirectML::DML_OPERATOR_DESC* FusedActivation;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_REDUCE_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_REDUCE_FUNCTION Function;
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
        uint32_t AxisCount;
        uint32_t* Axes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_AVERAGE_POOLING_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
        uint32_t DimensionCount;
        uint32_t* Strides;
        uint32_t* WindowSize;
        uint32_t* StartPadding;
        uint32_t* EndPadding;
        Windows::Win32::SystemServices::BOOL IncludePadding;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_LP_POOLING_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
        uint32_t DimensionCount;
        uint32_t* Strides;
        uint32_t* WindowSize;
        uint32_t* StartPadding;
        uint32_t* EndPadding;
        uint32_t P;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_MAX_POOLING_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
        uint32_t DimensionCount;
        uint32_t* Strides;
        uint32_t* WindowSize;
        uint32_t* StartPadding;
        uint32_t* EndPadding;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_MAX_POOLING1_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputIndicesTensor;
        uint32_t DimensionCount;
        uint32_t* Strides;
        uint32_t* WindowSize;
        uint32_t* StartPadding;
        uint32_t* EndPadding;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ROI_POOLING_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* ROITensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
        float SpatialScale;
        Windows::Win32::DirectML::DML_SIZE_2D PooledSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_SLICE_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
        uint32_t DimensionCount;
        uint32_t* Offsets;
        uint32_t* Sizes;
        uint32_t* Strides;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_CAST_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_SPLIT_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        uint32_t OutputCount;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensors;
        uint32_t Axis;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_JOIN_OPERATOR_DESC
    {
        uint32_t InputCount;
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensors;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
        uint32_t Axis;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_PADDING_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
        Windows::Win32::DirectML::DML_PADDING_MODE PaddingMode;
        float PaddingValue;
        uint32_t DimensionCount;
        uint32_t* StartPadding;
        uint32_t* EndPadding;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_VALUE_SCALE_2D_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
        float Scale;
        uint32_t ChannelCount;
        float* Bias;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_UPSAMPLE_2D_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
        Windows::Win32::DirectML::DML_SIZE_2D ScaleSize;
        Windows::Win32::DirectML::DML_INTERPOLATION_MODE InterpolationMode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_GATHER_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* IndicesTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
        uint32_t Axis;
        uint32_t IndexDimensions;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_SPACE_TO_DEPTH_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
        uint32_t BlockSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_DEPTH_TO_SPACE_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
        uint32_t BlockSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_TILE_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
        uint32_t RepeatsCount;
        uint32_t* Repeats;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_TOP_K_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputValueTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputIndexTensor;
        uint32_t Axis;
        uint32_t K;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_BATCH_NORMALIZATION_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* MeanTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* VarianceTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* ScaleTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* BiasTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
        Windows::Win32::SystemServices::BOOL Spatial;
        float Epsilon;
        Windows::Win32::DirectML::DML_OPERATOR_DESC* FusedActivation;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_MEAN_VARIANCE_NORMALIZATION_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* ScaleTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* BiasTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
        Windows::Win32::SystemServices::BOOL CrossChannel;
        Windows::Win32::SystemServices::BOOL NormalizeVariance;
        float Epsilon;
        Windows::Win32::DirectML::DML_OPERATOR_DESC* FusedActivation;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_LOCAL_RESPONSE_NORMALIZATION_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
        Windows::Win32::SystemServices::BOOL CrossChannel;
        uint32_t LocalSize;
        float Alpha;
        float Beta;
        float Bias;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_LP_NORMALIZATION_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
        uint32_t Axis;
        float Epsilon;
        uint32_t P;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_RNN_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* WeightTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* RecurrenceTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* BiasTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* HiddenInitTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* SequenceLengthsTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputSequenceTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputSingleTensor;
        uint32_t ActivationDescCount;
        Windows::Win32::DirectML::DML_OPERATOR_DESC* ActivationDescs;
        Windows::Win32::DirectML::DML_RECURRENT_NETWORK_DIRECTION Direction;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_LSTM_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* WeightTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* RecurrenceTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* BiasTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* HiddenInitTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* CellMemInitTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* SequenceLengthsTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* PeepholeTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputSequenceTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputSingleTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputCellSingleTensor;
        uint32_t ActivationDescCount;
        Windows::Win32::DirectML::DML_OPERATOR_DESC* ActivationDescs;
        Windows::Win32::DirectML::DML_RECURRENT_NETWORK_DIRECTION Direction;
        float ClipThreshold;
        Windows::Win32::SystemServices::BOOL UseClipThreshold;
        Windows::Win32::SystemServices::BOOL CoupleInputForget;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_GRU_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* WeightTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* RecurrenceTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* BiasTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* HiddenInitTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* SequenceLengthsTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputSequenceTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputSingleTensor;
        uint32_t ActivationDescCount;
        Windows::Win32::DirectML::DML_OPERATOR_DESC* ActivationDescs;
        Windows::Win32::DirectML::DML_RECURRENT_NETWORK_DIRECTION Direction;
        Windows::Win32::SystemServices::BOOL LinearBeforeReset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ELEMENT_WISE_SIGN_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ELEMENT_WISE_IS_NAN_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ELEMENT_WISE_ERF_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
        Windows::Win32::DirectML::DML_SCALE_BIAS* ScaleBias;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ELEMENT_WISE_SINH_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
        Windows::Win32::DirectML::DML_SCALE_BIAS* ScaleBias;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ELEMENT_WISE_COSH_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
        Windows::Win32::DirectML::DML_SCALE_BIAS* ScaleBias;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ELEMENT_WISE_TANH_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
        Windows::Win32::DirectML::DML_SCALE_BIAS* ScaleBias;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ELEMENT_WISE_ASINH_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
        Windows::Win32::DirectML::DML_SCALE_BIAS* ScaleBias;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ELEMENT_WISE_ACOSH_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
        Windows::Win32::DirectML::DML_SCALE_BIAS* ScaleBias;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ELEMENT_WISE_ATANH_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
        Windows::Win32::DirectML::DML_SCALE_BIAS* ScaleBias;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ELEMENT_WISE_IF_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* ConditionTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* ATensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* BTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ACTIVATION_SHRINK_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
        float Bias;
        float Threshold;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_MAX_UNPOOLING_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* IndicesTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_DIAGONAL_MATRIX_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
        int32_t Offset;
        float Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_SCATTER_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* IndicesTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* UpdatesTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
        uint32_t Axis;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_ONE_HOT_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* IndicesTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* ValuesTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
        uint32_t Axis;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_RESAMPLE_OPERATOR_DESC
    {
        Windows::Win32::DirectML::DML_TENSOR_DESC* InputTensor;
        Windows::Win32::DirectML::DML_TENSOR_DESC* OutputTensor;
        Windows::Win32::DirectML::DML_INTERPOLATION_MODE InterpolationMode;
        uint32_t ScaleCount;
        float* Scales;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_FEATURE_QUERY_TENSOR_DATA_TYPE_SUPPORT
    {
        Windows::Win32::DirectML::DML_TENSOR_DATA_TYPE DataType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_FEATURE_DATA_TENSOR_DATA_TYPE_SUPPORT
    {
        Windows::Win32::SystemServices::BOOL IsSupported;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_FEATURE_QUERY_FEATURE_LEVELS
    {
        uint32_t RequestedFeatureLevelCount;
        Windows::Win32::DirectML::DML_FEATURE_LEVEL* RequestedFeatureLevels;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_FEATURE_DATA_FEATURE_LEVELS
    {
        Windows::Win32::DirectML::DML_FEATURE_LEVEL MaxSupportedFeatureLevel;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_CPU_DESCRIPTOR_HANDLE
    {
        size_t ptr;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_GPU_DESCRIPTOR_HANDLE
    {
        uint64_t ptr;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_BINDING_TABLE_DESC
    {
        Windows::Win32::DirectML::IDMLDispatchable* Dispatchable;
        Windows::Win32::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE CPUDescriptorHandle;
        Windows::Win32::Direct3D12::D3D12_GPU_DESCRIPTOR_HANDLE GPUDescriptorHandle;
        uint32_t SizeInDescriptors;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_BINDING_PROPERTIES
    {
        uint32_t RequiredDescriptorCount;
        uint64_t TemporaryResourceSize;
        uint64_t PersistentResourceSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_BINDING_DESC
    {
        Windows::Win32::DirectML::DML_BINDING_TYPE Type;
        void* Desc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_BUFFER_BINDING
    {
        Windows::Win32::Direct3D12::ID3D12Resource* Buffer;
        uint64_t Offset;
        uint64_t SizeInBytes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectML
{
    struct DML_BUFFER_ARRAY_BINDING
    {
        uint32_t BindingCount;
        Windows::Win32::DirectML::DML_BUFFER_BINDING* Bindings;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinRT
{
    struct EventRegistrationToken
    {
        int64_t value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct IFunctionInstanceQuery2
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct IFunctionInstanceCollectionQuery2
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct IFunctionInstanceCollectionQueryCollection
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct IFunctionDiscoveryProviderRefresh
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSD_DATETIME
    {
        Windows::Win32::SystemServices::BOOL isPositive;
        uint32_t year;
        uint8_t month;
        uint8_t day;
        uint8_t hour;
        uint8_t minute;
        uint8_t second;
        uint32_t millisecond;
        Windows::Win32::SystemServices::BOOL TZIsLocal;
        Windows::Win32::SystemServices::BOOL TZIsPositive;
        uint8_t TZHour;
        uint8_t TZMinute;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSD_DURATION
    {
        Windows::Win32::SystemServices::BOOL isPositive;
        uint32_t year;
        uint32_t month;
        uint32_t day;
        uint32_t hour;
        uint32_t minute;
        uint32_t second;
        uint32_t millisecond;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSD_CONFIG_PARAM
    {
        Windows::Win32::OtherDeviceTechnologies::WSD_CONFIG_PARAM_TYPE configParamType;
        void* pConfigData;
        uint32_t dwConfigDataSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSD_SECURITY_CERT_VALIDATION_V1
    {
        Windows::Win32::Security::CERT_CONTEXT** certMatchArray;
        uint32_t dwCertMatchArrayCount;
        void* hCertMatchStore;
        void* hCertIssuerStore;
        uint32_t dwCertCheckOptions;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSD_SECURITY_CERT_VALIDATION
    {
        Windows::Win32::Security::CERT_CONTEXT** certMatchArray;
        uint32_t dwCertMatchArrayCount;
        void* hCertMatchStore;
        void* hCertIssuerStore;
        uint32_t dwCertCheckOptions;
        uint16_t* pszCNGHashAlgId;
        uint8_t* pbCertHash;
        uint32_t dwCertHashSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSD_SECURITY_SIGNATURE_VALIDATION
    {
        Windows::Win32::Security::CERT_CONTEXT** signingCertArray;
        uint32_t dwSigningCertArrayCount;
        void* hSigningCertStore;
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSD_CONFIG_ADDRESSES
    {
        Windows::Win32::OtherDeviceTechnologies::IWSDAddress** addresses;
        uint32_t dwAddressCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSDUdpRetransmitParams
    {
        uint32_t ulSendDelay;
        uint32_t ulRepeat;
        uint32_t ulRepeatMinDelay;
        uint32_t ulRepeatMaxDelay;
        uint32_t ulRepeatUpperDelay;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct SOCKADDR_STORAGE
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSD_OPERATION
    {
        Windows::Win32::OtherDeviceTechnologies::WSDXML_TYPE* RequestType;
        Windows::Win32::OtherDeviceTechnologies::WSDXML_TYPE* ResponseType;
        Windows::Win32::OtherDeviceTechnologies::WSD_STUB_FUNCTION* RequestStubFunction;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSD_HANDLER_CONTEXT
    {
        Windows::Win32::OtherDeviceTechnologies::PWSD_SOAP_MESSAGE_HANDLER* Handler;
        void* PVoid;
        Windows::Win32::Com::IUnknown* Unknown;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct HRESULT
    {
        int32_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSD_SYNCHRONOUS_RESPONSE_CONTEXT
    {
        int32_t hr;
        Windows::Win32::SystemServices::HANDLE eventHandle;
        Windows::Win32::OtherDeviceTechnologies::IWSDMessageParameters* messageParameters;
        void* results;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSD_PORT_TYPE
    {
        uint32_t EncodedName;
        uint32_t OperationCount;
        Windows::Win32::OtherDeviceTechnologies::WSD_OPERATION* Operations;
        Windows::Win32::OtherDeviceTechnologies::WSD_PROTOCOL_TYPE ProtocolType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSD_RELATIONSHIP_METADATA
    {
        uint16_t* Type;
        Windows::Win32::OtherDeviceTechnologies::WSD_HOST_METADATA* Data;
        Windows::Win32::OtherDeviceTechnologies::WSDXML_ELEMENT* Any;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSD_SERVICE_METADATA_LIST
    {
        Windows::Win32::OtherDeviceTechnologies::WSD_SERVICE_METADATA_LIST* Next;
        Windows::Win32::OtherDeviceTechnologies::WSD_SERVICE_METADATA* Element;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSD_HOST_METADATA
    {
        Windows::Win32::OtherDeviceTechnologies::WSD_SERVICE_METADATA* Host;
        Windows::Win32::OtherDeviceTechnologies::WSD_SERVICE_METADATA_LIST* Hosted;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSD_ENDPOINT_REFERENCE_LIST
    {
        Windows::Win32::OtherDeviceTechnologies::WSD_ENDPOINT_REFERENCE_LIST* Next;
        Windows::Win32::OtherDeviceTechnologies::WSD_ENDPOINT_REFERENCE* Element;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSD_SERVICE_METADATA
    {
        Windows::Win32::OtherDeviceTechnologies::WSD_ENDPOINT_REFERENCE_LIST* EndpointReference;
        Windows::Win32::OtherDeviceTechnologies::WSD_NAME_LIST* Types;
        uint16_t* ServiceId;
        Windows::Win32::OtherDeviceTechnologies::WSDXML_ELEMENT* Any;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSD_THIS_DEVICE_METADATA
    {
        Windows::Win32::OtherDeviceTechnologies::WSD_LOCALIZED_STRING_LIST* FriendlyName;
        uint16_t* FirmwareVersion;
        uint16_t* SerialNumber;
        Windows::Win32::OtherDeviceTechnologies::WSDXML_ELEMENT* Any;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSD_THIS_MODEL_METADATA
    {
        Windows::Win32::OtherDeviceTechnologies::WSD_LOCALIZED_STRING_LIST* Manufacturer;
        uint16_t* ManufacturerUrl;
        Windows::Win32::OtherDeviceTechnologies::WSD_LOCALIZED_STRING_LIST* ModelName;
        uint16_t* ModelNumber;
        uint16_t* ModelUrl;
        uint16_t* PresentationUrl;
        Windows::Win32::OtherDeviceTechnologies::WSDXML_ELEMENT* Any;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSD_LOCALIZED_STRING_LIST
    {
        Windows::Win32::OtherDeviceTechnologies::WSD_LOCALIZED_STRING_LIST* Next;
        Windows::Win32::OtherDeviceTechnologies::WSD_LOCALIZED_STRING* Element;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSD_SOAP_FAULT_REASON
    {
        Windows::Win32::OtherDeviceTechnologies::WSD_LOCALIZED_STRING_LIST* Text;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSD_SOAP_FAULT_SUBCODE
    {
        Windows::Win32::OtherDeviceTechnologies::WSDXML_NAME* Value;
        Windows::Win32::OtherDeviceTechnologies::WSD_SOAP_FAULT_SUBCODE* Subcode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSD_SOAP_FAULT_CODE
    {
        Windows::Win32::OtherDeviceTechnologies::WSDXML_NAME* Value;
        Windows::Win32::OtherDeviceTechnologies::WSD_SOAP_FAULT_SUBCODE* Subcode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSD_SOAP_FAULT
    {
        Windows::Win32::OtherDeviceTechnologies::WSD_SOAP_FAULT_CODE* Code;
        Windows::Win32::OtherDeviceTechnologies::WSD_SOAP_FAULT_REASON* Reason;
        uint16_t* Node;
        uint16_t* Role;
        Windows::Win32::OtherDeviceTechnologies::WSDXML_ELEMENT* Detail;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSD_APP_SEQUENCE
    {
        uint64_t InstanceId;
        uint16_t* SequenceId;
        uint64_t MessageNumber;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSD_HEADER_RELATESTO
    {
        Windows::Win32::OtherDeviceTechnologies::WSDXML_NAME* RelationshipType;
        uint16_t* MessageID;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSD_SOAP_HEADER
    {
        uint16_t* To;
        uint16_t* Action;
        uint16_t* MessageID;
        Windows::Win32::OtherDeviceTechnologies::WSD_HEADER_RELATESTO RelatesTo;
        Windows::Win32::OtherDeviceTechnologies::WSD_ENDPOINT_REFERENCE* ReplyTo;
        Windows::Win32::OtherDeviceTechnologies::WSD_ENDPOINT_REFERENCE* From;
        Windows::Win32::OtherDeviceTechnologies::WSD_ENDPOINT_REFERENCE* FaultTo;
        Windows::Win32::OtherDeviceTechnologies::WSD_APP_SEQUENCE* AppSequence;
        Windows::Win32::OtherDeviceTechnologies::WSDXML_ELEMENT* AnyHeaders;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSD_SOAP_MESSAGE
    {
        Windows::Win32::OtherDeviceTechnologies::WSD_SOAP_HEADER Header;
        void* Body;
        Windows::Win32::OtherDeviceTechnologies::WSDXML_TYPE* BodyType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSD_RESOLVE_MATCHES
    {
        Windows::Win32::OtherDeviceTechnologies::WSD_RESOLVE_MATCH* ResolveMatch;
        Windows::Win32::OtherDeviceTechnologies::WSDXML_ELEMENT* Any;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSD_RESOLVE_MATCH
    {
        Windows::Win32::OtherDeviceTechnologies::WSD_ENDPOINT_REFERENCE* EndpointReference;
        Windows::Win32::OtherDeviceTechnologies::WSD_NAME_LIST* Types;
        Windows::Win32::OtherDeviceTechnologies::WSD_SCOPES* Scopes;
        Windows::Win32::OtherDeviceTechnologies::WSD_URI_LIST* XAddrs;
        uint64_t MetadataVersion;
        Windows::Win32::OtherDeviceTechnologies::WSDXML_ELEMENT* Any;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSD_RESOLVE
    {
        Windows::Win32::OtherDeviceTechnologies::WSD_ENDPOINT_REFERENCE* EndpointReference;
        Windows::Win32::OtherDeviceTechnologies::WSDXML_ELEMENT* Any;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSD_PROBE_MATCH
    {
        Windows::Win32::OtherDeviceTechnologies::WSD_ENDPOINT_REFERENCE* EndpointReference;
        Windows::Win32::OtherDeviceTechnologies::WSD_NAME_LIST* Types;
        Windows::Win32::OtherDeviceTechnologies::WSD_SCOPES* Scopes;
        Windows::Win32::OtherDeviceTechnologies::WSD_URI_LIST* XAddrs;
        uint64_t MetadataVersion;
        Windows::Win32::OtherDeviceTechnologies::WSDXML_ELEMENT* Any;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSD_PROBE_MATCH_LIST
    {
        Windows::Win32::OtherDeviceTechnologies::WSD_PROBE_MATCH_LIST* Next;
        Windows::Win32::OtherDeviceTechnologies::WSD_PROBE_MATCH* Element;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSD_PROBE_MATCHES
    {
        Windows::Win32::OtherDeviceTechnologies::WSD_PROBE_MATCH_LIST* ProbeMatch;
        Windows::Win32::OtherDeviceTechnologies::WSDXML_ELEMENT* Any;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSD_PROBE
    {
        Windows::Win32::OtherDeviceTechnologies::WSD_NAME_LIST* Types;
        Windows::Win32::OtherDeviceTechnologies::WSD_SCOPES* Scopes;
        Windows::Win32::OtherDeviceTechnologies::WSDXML_ELEMENT* Any;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSD_BYE
    {
        Windows::Win32::OtherDeviceTechnologies::WSD_ENDPOINT_REFERENCE* EndpointReference;
        Windows::Win32::OtherDeviceTechnologies::WSDXML_ELEMENT* Any;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSD_SCOPES
    {
        uint16_t* MatchBy;
        Windows::Win32::OtherDeviceTechnologies::WSD_URI_LIST* Scopes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSD_NAME_LIST
    {
        Windows::Win32::OtherDeviceTechnologies::WSD_NAME_LIST* Next;
        Windows::Win32::OtherDeviceTechnologies::WSDXML_NAME* Element;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSD_HELLO
    {
        Windows::Win32::OtherDeviceTechnologies::WSD_ENDPOINT_REFERENCE* EndpointReference;
        Windows::Win32::OtherDeviceTechnologies::WSD_NAME_LIST* Types;
        Windows::Win32::OtherDeviceTechnologies::WSD_SCOPES* Scopes;
        Windows::Win32::OtherDeviceTechnologies::WSD_URI_LIST* XAddrs;
        uint64_t MetadataVersion;
        Windows::Win32::OtherDeviceTechnologies::WSDXML_ELEMENT* Any;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSD_REFERENCE_PARAMETERS
    {
        Windows::Win32::OtherDeviceTechnologies::WSDXML_ELEMENT* Any;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSD_REFERENCE_PROPERTIES
    {
        Windows::Win32::OtherDeviceTechnologies::WSDXML_ELEMENT* Any;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSD_ENDPOINT_REFERENCE
    {
        uint16_t* Address;
        Windows::Win32::OtherDeviceTechnologies::WSD_REFERENCE_PROPERTIES ReferenceProperties;
        Windows::Win32::OtherDeviceTechnologies::WSD_REFERENCE_PARAMETERS ReferenceParameters;
        Windows::Win32::OtherDeviceTechnologies::WSDXML_NAME* PortType;
        Windows::Win32::OtherDeviceTechnologies::WSDXML_NAME* ServiceName;
        Windows::Win32::OtherDeviceTechnologies::WSDXML_ELEMENT* Any;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSD_METADATA_SECTION
    {
        uint16_t* Dialect;
        uint16_t* Identifier;
        void* Data;
        Windows::Win32::OtherDeviceTechnologies::WSD_ENDPOINT_REFERENCE* MetadataReference;
        uint16_t* Location;
        Windows::Win32::OtherDeviceTechnologies::WSDXML_ELEMENT* Any;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSD_METADATA_SECTION_LIST
    {
        Windows::Win32::OtherDeviceTechnologies::WSD_METADATA_SECTION_LIST* Next;
        Windows::Win32::OtherDeviceTechnologies::WSD_METADATA_SECTION* Element;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSD_URI_LIST
    {
        Windows::Win32::OtherDeviceTechnologies::WSD_URI_LIST* Next;
        uint16_t* Element;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSD_EVENTING_FILTER_ACTION
    {
        Windows::Win32::OtherDeviceTechnologies::WSD_URI_LIST* Actions;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSD_EVENTING_FILTER
    {
        uint16_t* Dialect;
        Windows::Win32::OtherDeviceTechnologies::WSD_EVENTING_FILTER_ACTION* FilterAction;
        void* Data;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSD_EVENTING_EXPIRES
    {
        Windows::Win32::OtherDeviceTechnologies::WSD_DURATION* Duration;
        Windows::Win32::OtherDeviceTechnologies::WSD_DATETIME* DateTime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSD_EVENTING_DELIVERY_MODE_PUSH
    {
        Windows::Win32::OtherDeviceTechnologies::WSD_ENDPOINT_REFERENCE* NotifyTo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSD_EVENTING_DELIVERY_MODE
    {
        uint16_t* Mode;
        Windows::Win32::OtherDeviceTechnologies::WSD_EVENTING_DELIVERY_MODE_PUSH* Push;
        void* Data;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSD_LOCALIZED_STRING
    {
        uint16_t* lang;
        uint16_t* String;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct RESPONSEBODY_GetMetadata
    {
        Windows::Win32::OtherDeviceTechnologies::WSD_METADATA_SECTION_LIST* Metadata;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct REQUESTBODY_Subscribe
    {
        Windows::Win32::OtherDeviceTechnologies::WSD_ENDPOINT_REFERENCE* EndTo;
        Windows::Win32::OtherDeviceTechnologies::WSD_EVENTING_DELIVERY_MODE* Delivery;
        Windows::Win32::OtherDeviceTechnologies::WSD_EVENTING_EXPIRES* Expires;
        Windows::Win32::OtherDeviceTechnologies::WSD_EVENTING_FILTER* Filter;
        Windows::Win32::OtherDeviceTechnologies::WSDXML_ELEMENT* Any;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct RESPONSEBODY_Subscribe
    {
        Windows::Win32::OtherDeviceTechnologies::WSD_ENDPOINT_REFERENCE* SubscriptionManager;
        Windows::Win32::OtherDeviceTechnologies::WSD_EVENTING_EXPIRES* expires;
        Windows::Win32::OtherDeviceTechnologies::WSDXML_ELEMENT* any;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct REQUESTBODY_Renew
    {
        Windows::Win32::OtherDeviceTechnologies::WSD_EVENTING_EXPIRES* Expires;
        Windows::Win32::OtherDeviceTechnologies::WSDXML_ELEMENT* Any;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct RESPONSEBODY_Renew
    {
        Windows::Win32::OtherDeviceTechnologies::WSD_EVENTING_EXPIRES* expires;
        Windows::Win32::OtherDeviceTechnologies::WSDXML_ELEMENT* any;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct REQUESTBODY_GetStatus
    {
        Windows::Win32::OtherDeviceTechnologies::WSDXML_ELEMENT* Any;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct RESPONSEBODY_GetStatus
    {
        Windows::Win32::OtherDeviceTechnologies::WSD_EVENTING_EXPIRES* expires;
        Windows::Win32::OtherDeviceTechnologies::WSDXML_ELEMENT* any;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct REQUESTBODY_Unsubscribe
    {
        Windows::Win32::OtherDeviceTechnologies::WSDXML_ELEMENT* any;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct RESPONSEBODY_SubscriptionEnd
    {
        Windows::Win32::OtherDeviceTechnologies::WSD_ENDPOINT_REFERENCE* SubscriptionManager;
        uint16_t* Status;
        Windows::Win32::OtherDeviceTechnologies::WSD_LOCALIZED_STRING* Reason;
        Windows::Win32::OtherDeviceTechnologies::WSDXML_ELEMENT* Any;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSD_UNKNOWN_LOOKUP
    {
        Windows::Win32::OtherDeviceTechnologies::WSDXML_ELEMENT* Any;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSD_EVENT
    {
        int32_t Hr;
        uint32_t EventType;
        uint16_t* DispatchTag;
        Windows::Win32::OtherDeviceTechnologies::WSD_HANDLER_CONTEXT HandlerContext;
        Windows::Win32::OtherDeviceTechnologies::WSD_SOAP_MESSAGE* Soap;
        Windows::Win32::OtherDeviceTechnologies::WSD_OPERATION* Operation;
        Windows::Win32::OtherDeviceTechnologies::IWSDMessageParameters* MessageParameters;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSDXML_NAMESPACE
    {
        uint16_t* Uri;
        uint16_t* PreferredPrefix;
        Windows::Win32::OtherDeviceTechnologies::WSDXML_NAME* Names;
        uint16_t NamesCount;
        uint16_t Encoding;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSDXML_NAME
    {
        Windows::Win32::OtherDeviceTechnologies::WSDXML_NAMESPACE* Space;
        uint16_t* LocalName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSDXML_TYPE
    {
        uint16_t* Uri;
        uint8_t* Table;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSDXML_PREFIX_MAPPING
    {
        uint32_t Refs;
        Windows::Win32::OtherDeviceTechnologies::WSDXML_PREFIX_MAPPING* Next;
        Windows::Win32::OtherDeviceTechnologies::WSDXML_NAMESPACE* Space;
        uint16_t* Prefix;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSDXML_ATTRIBUTE
    {
        Windows::Win32::OtherDeviceTechnologies::WSDXML_ELEMENT* Element;
        Windows::Win32::OtherDeviceTechnologies::WSDXML_ATTRIBUTE* Next;
        Windows::Win32::OtherDeviceTechnologies::WSDXML_NAME* Name;
        uint16_t* Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSDXML_NODE
    {
        int32_t Type;
        Windows::Win32::OtherDeviceTechnologies::WSDXML_ELEMENT* Parent;
        Windows::Win32::OtherDeviceTechnologies::WSDXML_NODE* Next;
        static constexpr int32_t ElementType = 0;
        static constexpr int32_t TextType = 1;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSDXML_ELEMENT
    {
        Windows::Win32::OtherDeviceTechnologies::WSDXML_NODE Node;
        Windows::Win32::OtherDeviceTechnologies::WSDXML_NAME* Name;
        Windows::Win32::OtherDeviceTechnologies::WSDXML_ATTRIBUTE* FirstAttribute;
        Windows::Win32::OtherDeviceTechnologies::WSDXML_NODE* FirstChild;
        Windows::Win32::OtherDeviceTechnologies::WSDXML_PREFIX_MAPPING* PrefixMappings;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSDXML_TEXT
    {
        Windows::Win32::OtherDeviceTechnologies::WSDXML_NODE Node;
        uint16_t* Text;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OtherDeviceTechnologies
{
    struct WSDXML_ELEMENT_LIST
    {
        Windows::Win32::OtherDeviceTechnologies::WSDXML_ELEMENT_LIST* Next;
        Windows::Win32::OtherDeviceTechnologies::WSDXML_ELEMENT* Element;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetworkDiagnosticsFramework
{
    struct OCTET_STRING
    {
        uint32_t dwLength;
        uint8_t* lpValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct FILETIME
    {
        uint32_t dwLowDateTime;
        uint32_t dwHighDateTime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetworkDiagnosticsFramework
{
    struct LIFE_TIME
    {
        Windows::Win32::WindowsProgramming::FILETIME startTime;
        Windows::Win32::WindowsProgramming::FILETIME endTime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetworkDiagnosticsFramework
{
    struct DIAG_SOCKADDR
    {
        uint16_t family;
        int8_t data[126];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetworkDiagnosticsFramework
{
    struct HELPER_ATTRIBUTE
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::SystemServices::BOOL Boolean;
            int8_t Char;
            uint8_t Byte;
            int16_t Short;
            uint16_t Word;
            int32_t Int;
            uint32_t DWord;
            int64_t Int64;
            uint64_t UInt64;
            uint16_t* PWStr;
            ::win32::guid Guid;
            Windows::Win32::NetworkDiagnosticsFramework::LIFE_TIME LifeTime;
            Windows::Win32::NetworkDiagnosticsFramework::DIAG_SOCKADDR Address;
            Windows::Win32::NetworkDiagnosticsFramework::OCTET_STRING OctetString;
        };
        uint16_t* pwszName;
        Windows::Win32::NetworkDiagnosticsFramework::ATTRIBUTE_TYPE type;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetworkDiagnosticsFramework
{
    struct ShellCommandInfo
    {
        uint16_t* pwszOperation;
        uint16_t* pwszFile;
        uint16_t* pwszParameters;
        uint16_t* pwszDirectory;
        uint32_t nShowCmd;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetworkDiagnosticsFramework
{
    struct UiInfo
    {
        union _Anonymous_e__Union
        {
            uint16_t* pwzNull;
            Windows::Win32::NetworkDiagnosticsFramework::ShellCommandInfo ShellInfo;
            uint16_t* pwzHelpUrl;
            uint16_t* pwzDui;
        };
        Windows::Win32::NetworkDiagnosticsFramework::UI_INFO_TYPE type;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetworkDiagnosticsFramework
{
    struct RepairInfo
    {
        ::win32::guid guid;
        uint16_t* pwszClassName;
        uint16_t* pwszDescription;
        uint32_t sidType;
        int32_t cost;
        uint32_t flags;
        Windows::Win32::NetworkDiagnosticsFramework::REPAIR_SCOPE scope;
        Windows::Win32::NetworkDiagnosticsFramework::REPAIR_RISK risk;
        Windows::Win32::NetworkDiagnosticsFramework::UiInfo UiInfo;
        int32_t rootCauseIndex;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetworkDiagnosticsFramework
{
    struct RepairInfoEx
    {
        Windows::Win32::NetworkDiagnosticsFramework::RepairInfo repair;
        uint16_t repairRank;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetworkDiagnosticsFramework
{
    struct RootCauseInfo
    {
        uint16_t* pwszDescription;
        ::win32::guid rootCauseID;
        uint32_t rootCauseFlags;
        ::win32::guid networkInterfaceID;
        Windows::Win32::NetworkDiagnosticsFramework::RepairInfoEx* pRepairs;
        uint16_t repairCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetworkDiagnosticsFramework
{
    struct HYPOTHESIS
    {
        uint16_t* pwszClassName;
        uint16_t* pwszDescription;
        uint32_t celt;
        Windows::Win32::NetworkDiagnosticsFramework::HELPER_ATTRIBUTE* rgAttributes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetworkDiagnosticsFramework
{
    struct HelperAttributeInfo
    {
        uint16_t* pwszName;
        Windows::Win32::NetworkDiagnosticsFramework::ATTRIBUTE_TYPE type;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetworkDiagnosticsFramework
{
    struct DiagnosticsInfo
    {
        int32_t cost;
        uint32_t flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetworkDiagnosticsFramework
{
    struct HypothesisResult
    {
        Windows::Win32::NetworkDiagnosticsFramework::HYPOTHESIS hypothesis;
        Windows::Win32::NetworkDiagnosticsFramework::DIAGNOSIS_STATUS pathStatus;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetBios
{
    struct NCB
    {
        uint8_t ncb_command;
        uint8_t ncb_retcode;
        uint8_t ncb_lsn;
        uint8_t ncb_num;
        uint8_t* ncb_buffer;
        uint16_t ncb_length;
        uint8_t ncb_callname[16];
        uint8_t ncb_name[16];
        uint8_t ncb_rto;
        uint8_t ncb_sto;
        intptr_t ncb_post;
        uint8_t ncb_lana_num;
        uint8_t ncb_cmd_cplt;
        uint8_t ncb_reserve[10];
        Windows::Win32::SystemServices::HANDLE ncb_event;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetBios
{
    struct ADAPTER_STATUS
    {
        uint8_t adapter_address[6];
        uint8_t rev_major;
        uint8_t reserved0;
        uint8_t adapter_type;
        uint8_t rev_minor;
        uint16_t duration;
        uint16_t frmr_recv;
        uint16_t frmr_xmit;
        uint16_t iframe_recv_err;
        uint16_t xmit_aborts;
        uint32_t xmit_success;
        uint32_t recv_success;
        uint16_t iframe_xmit_err;
        uint16_t recv_buff_unavail;
        uint16_t t1_timeouts;
        uint16_t ti_timeouts;
        uint32_t reserved1;
        uint16_t free_ncbs;
        uint16_t max_cfg_ncbs;
        uint16_t max_ncbs;
        uint16_t xmit_buf_unavail;
        uint16_t max_dgram_size;
        uint16_t pending_sess;
        uint16_t max_cfg_sess;
        uint16_t max_sess;
        uint16_t max_sess_pkt_size;
        uint16_t name_count;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetBios
{
    struct NAME_BUFFER
    {
        uint8_t name[16];
        uint8_t name_num;
        uint8_t name_flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetBios
{
    struct SESSION_HEADER
    {
        uint8_t sess_name;
        uint8_t num_sess;
        uint8_t rcv_dg_outstanding;
        uint8_t rcv_any_outstanding;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetBios
{
    struct SESSION_BUFFER
    {
        uint8_t lsn;
        uint8_t state;
        uint8_t local_name[16];
        uint8_t remote_name[16];
        uint8_t rcvs_outstanding;
        uint8_t sends_outstanding;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetBios
{
    struct LANA_ENUM
    {
        uint8_t length;
        uint8_t lana[255];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetBios
{
    struct FIND_NAME_HEADER
    {
        uint16_t node_count;
        uint8_t reserved;
        uint8_t unique_group;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetBios
{
    struct FIND_NAME_BUFFER
    {
        uint8_t length;
        uint8_t access_control;
        uint8_t frame_control;
        uint8_t destination_addr[6];
        uint8_t source_addr[6];
        uint8_t routing_info[18];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetBios
{
    struct ACTION_HEADER
    {
        uint32_t transport_id;
        uint16_t action_code;
        uint16_t reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct USER_INFO_0
    {
        uint16_t* usri0_name;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct USER_INFO_1
    {
        uint16_t* usri1_name;
        uint16_t* usri1_password;
        uint32_t usri1_password_age;
        uint32_t usri1_priv;
        uint16_t* usri1_home_dir;
        uint16_t* usri1_comment;
        uint32_t usri1_flags;
        uint16_t* usri1_script_path;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct USER_INFO_2
    {
        uint16_t* usri2_name;
        uint16_t* usri2_password;
        uint32_t usri2_password_age;
        uint32_t usri2_priv;
        uint16_t* usri2_home_dir;
        uint16_t* usri2_comment;
        uint32_t usri2_flags;
        uint16_t* usri2_script_path;
        uint32_t usri2_auth_flags;
        uint16_t* usri2_full_name;
        uint16_t* usri2_usr_comment;
        uint16_t* usri2_parms;
        uint16_t* usri2_workstations;
        uint32_t usri2_last_logon;
        uint32_t usri2_last_logoff;
        uint32_t usri2_acct_expires;
        uint32_t usri2_max_storage;
        uint32_t usri2_units_per_week;
        uint8_t* usri2_logon_hours;
        uint32_t usri2_bad_pw_count;
        uint32_t usri2_num_logons;
        uint16_t* usri2_logon_server;
        uint32_t usri2_country_code;
        uint32_t usri2_code_page;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct USER_INFO_3
    {
        uint16_t* usri3_name;
        uint16_t* usri3_password;
        uint32_t usri3_password_age;
        uint32_t usri3_priv;
        uint16_t* usri3_home_dir;
        uint16_t* usri3_comment;
        uint32_t usri3_flags;
        uint16_t* usri3_script_path;
        uint32_t usri3_auth_flags;
        uint16_t* usri3_full_name;
        uint16_t* usri3_usr_comment;
        uint16_t* usri3_parms;
        uint16_t* usri3_workstations;
        uint32_t usri3_last_logon;
        uint32_t usri3_last_logoff;
        uint32_t usri3_acct_expires;
        uint32_t usri3_max_storage;
        uint32_t usri3_units_per_week;
        uint8_t* usri3_logon_hours;
        uint32_t usri3_bad_pw_count;
        uint32_t usri3_num_logons;
        uint16_t* usri3_logon_server;
        uint32_t usri3_country_code;
        uint32_t usri3_code_page;
        uint32_t usri3_user_id;
        uint32_t usri3_primary_group_id;
        uint16_t* usri3_profile;
        uint16_t* usri3_home_dir_drive;
        uint32_t usri3_password_expired;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct USER_INFO_4
    {
        uint16_t* usri4_name;
        uint16_t* usri4_password;
        uint32_t usri4_password_age;
        uint32_t usri4_priv;
        uint16_t* usri4_home_dir;
        uint16_t* usri4_comment;
        uint32_t usri4_flags;
        uint16_t* usri4_script_path;
        uint32_t usri4_auth_flags;
        uint16_t* usri4_full_name;
        uint16_t* usri4_usr_comment;
        uint16_t* usri4_parms;
        uint16_t* usri4_workstations;
        uint32_t usri4_last_logon;
        uint32_t usri4_last_logoff;
        uint32_t usri4_acct_expires;
        uint32_t usri4_max_storage;
        uint32_t usri4_units_per_week;
        uint8_t* usri4_logon_hours;
        uint32_t usri4_bad_pw_count;
        uint32_t usri4_num_logons;
        uint16_t* usri4_logon_server;
        uint32_t usri4_country_code;
        uint32_t usri4_code_page;
        void* usri4_user_sid;
        uint32_t usri4_primary_group_id;
        uint16_t* usri4_profile;
        uint16_t* usri4_home_dir_drive;
        uint32_t usri4_password_expired;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct USER_INFO_10
    {
        uint16_t* usri10_name;
        uint16_t* usri10_comment;
        uint16_t* usri10_usr_comment;
        uint16_t* usri10_full_name;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct USER_INFO_11
    {
        uint16_t* usri11_name;
        uint16_t* usri11_comment;
        uint16_t* usri11_usr_comment;
        uint16_t* usri11_full_name;
        uint32_t usri11_priv;
        uint32_t usri11_auth_flags;
        uint32_t usri11_password_age;
        uint16_t* usri11_home_dir;
        uint16_t* usri11_parms;
        uint32_t usri11_last_logon;
        uint32_t usri11_last_logoff;
        uint32_t usri11_bad_pw_count;
        uint32_t usri11_num_logons;
        uint16_t* usri11_logon_server;
        uint32_t usri11_country_code;
        uint16_t* usri11_workstations;
        uint32_t usri11_max_storage;
        uint32_t usri11_units_per_week;
        uint8_t* usri11_logon_hours;
        uint32_t usri11_code_page;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct USER_INFO_20
    {
        uint16_t* usri20_name;
        uint16_t* usri20_full_name;
        uint16_t* usri20_comment;
        uint32_t usri20_flags;
        uint32_t usri20_user_id;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct USER_INFO_21
    {
        uint8_t usri21_password[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct USER_INFO_22
    {
        uint16_t* usri22_name;
        uint8_t usri22_password[16];
        uint32_t usri22_password_age;
        uint32_t usri22_priv;
        uint16_t* usri22_home_dir;
        uint16_t* usri22_comment;
        uint32_t usri22_flags;
        uint16_t* usri22_script_path;
        uint32_t usri22_auth_flags;
        uint16_t* usri22_full_name;
        uint16_t* usri22_usr_comment;
        uint16_t* usri22_parms;
        uint16_t* usri22_workstations;
        uint32_t usri22_last_logon;
        uint32_t usri22_last_logoff;
        uint32_t usri22_acct_expires;
        uint32_t usri22_max_storage;
        uint32_t usri22_units_per_week;
        uint8_t* usri22_logon_hours;
        uint32_t usri22_bad_pw_count;
        uint32_t usri22_num_logons;
        uint16_t* usri22_logon_server;
        uint32_t usri22_country_code;
        uint32_t usri22_code_page;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct USER_INFO_23
    {
        uint16_t* usri23_name;
        uint16_t* usri23_full_name;
        uint16_t* usri23_comment;
        uint32_t usri23_flags;
        void* usri23_user_sid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct USER_INFO_24
    {
        Windows::Win32::SystemServices::BOOL usri24_internet_identity;
        uint32_t usri24_flags;
        uint16_t* usri24_internet_provider_name;
        uint16_t* usri24_internet_principal_name;
        void* usri24_user_sid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct USER_INFO_1003
    {
        uint16_t* usri1003_password;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct USER_INFO_1005
    {
        uint32_t usri1005_priv;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct USER_INFO_1006
    {
        uint16_t* usri1006_home_dir;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct USER_INFO_1007
    {
        uint16_t* usri1007_comment;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct USER_INFO_1008
    {
        uint32_t usri1008_flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct USER_INFO_1009
    {
        uint16_t* usri1009_script_path;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct USER_INFO_1010
    {
        uint32_t usri1010_auth_flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct USER_INFO_1011
    {
        uint16_t* usri1011_full_name;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct USER_INFO_1012
    {
        uint16_t* usri1012_usr_comment;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct USER_INFO_1013
    {
        uint16_t* usri1013_parms;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct USER_INFO_1014
    {
        uint16_t* usri1014_workstations;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct USER_INFO_1017
    {
        uint32_t usri1017_acct_expires;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct USER_INFO_1018
    {
        uint32_t usri1018_max_storage;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct USER_INFO_1020
    {
        uint32_t usri1020_units_per_week;
        uint8_t* usri1020_logon_hours;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct USER_INFO_1023
    {
        uint16_t* usri1023_logon_server;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct USER_INFO_1024
    {
        uint32_t usri1024_country_code;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct USER_INFO_1025
    {
        uint32_t usri1025_code_page;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct USER_INFO_1051
    {
        uint32_t usri1051_primary_group_id;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct USER_INFO_1052
    {
        uint16_t* usri1052_profile;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct USER_INFO_1053
    {
        uint16_t* usri1053_home_dir_drive;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct USER_MODALS_INFO_0
    {
        uint32_t usrmod0_min_passwd_len;
        uint32_t usrmod0_max_passwd_age;
        uint32_t usrmod0_min_passwd_age;
        uint32_t usrmod0_force_logoff;
        uint32_t usrmod0_password_hist_len;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct USER_MODALS_INFO_1
    {
        uint32_t usrmod1_role;
        uint16_t* usrmod1_primary;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct USER_MODALS_INFO_2
    {
        uint16_t* usrmod2_domain_name;
        void* usrmod2_domain_id;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct USER_MODALS_INFO_3
    {
        uint32_t usrmod3_lockout_duration;
        uint32_t usrmod3_lockout_observation_window;
        uint32_t usrmod3_lockout_threshold;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct USER_MODALS_INFO_1001
    {
        uint32_t usrmod1001_min_passwd_len;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct USER_MODALS_INFO_1002
    {
        uint32_t usrmod1002_max_passwd_age;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct USER_MODALS_INFO_1003
    {
        uint32_t usrmod1003_min_passwd_age;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct USER_MODALS_INFO_1004
    {
        uint32_t usrmod1004_force_logoff;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct USER_MODALS_INFO_1005
    {
        uint32_t usrmod1005_password_hist_len;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct USER_MODALS_INFO_1006
    {
        uint32_t usrmod1006_role;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct USER_MODALS_INFO_1007
    {
        uint16_t* usrmod1007_primary;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct GROUP_INFO_0
    {
        uint16_t* grpi0_name;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct GROUP_INFO_1
    {
        uint16_t* grpi1_name;
        uint16_t* grpi1_comment;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct GROUP_INFO_2
    {
        uint16_t* grpi2_name;
        uint16_t* grpi2_comment;
        uint32_t grpi2_group_id;
        uint32_t grpi2_attributes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct GROUP_INFO_3
    {
        uint16_t* grpi3_name;
        uint16_t* grpi3_comment;
        void* grpi3_group_sid;
        uint32_t grpi3_attributes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct GROUP_INFO_1002
    {
        uint16_t* grpi1002_comment;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct GROUP_INFO_1005
    {
        uint32_t grpi1005_attributes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct GROUP_USERS_INFO_0
    {
        uint16_t* grui0_name;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct GROUP_USERS_INFO_1
    {
        uint16_t* grui1_name;
        uint32_t grui1_attributes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct LOCALGROUP_INFO_0
    {
        uint16_t* lgrpi0_name;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct LOCALGROUP_INFO_1
    {
        uint16_t* lgrpi1_name;
        uint16_t* lgrpi1_comment;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct LOCALGROUP_INFO_1002
    {
        uint16_t* lgrpi1002_comment;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct LOCALGROUP_MEMBERS_INFO_0
    {
        void* lgrmi0_sid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct LOCALGROUP_MEMBERS_INFO_1
    {
        void* lgrmi1_sid;
        Windows::Win32::Security::SID_NAME_USE lgrmi1_sidusage;
        uint16_t* lgrmi1_name;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct LOCALGROUP_MEMBERS_INFO_2
    {
        void* lgrmi2_sid;
        Windows::Win32::Security::SID_NAME_USE lgrmi2_sidusage;
        uint16_t* lgrmi2_domainandname;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct LOCALGROUP_MEMBERS_INFO_3
    {
        uint16_t* lgrmi3_domainandname;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct LOCALGROUP_USERS_INFO_0
    {
        uint16_t* lgrui0_name;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct NET_DISPLAY_USER
    {
        uint16_t* usri1_name;
        uint16_t* usri1_comment;
        uint32_t usri1_flags;
        uint16_t* usri1_full_name;
        uint32_t usri1_user_id;
        uint32_t usri1_next_index;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct NET_DISPLAY_MACHINE
    {
        uint16_t* usri2_name;
        uint16_t* usri2_comment;
        uint32_t usri2_flags;
        uint32_t usri2_user_id;
        uint32_t usri2_next_index;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct NET_DISPLAY_GROUP
    {
        uint16_t* grpi3_name;
        uint16_t* grpi3_comment;
        uint32_t grpi3_group_id;
        uint32_t grpi3_attributes;
        uint32_t grpi3_next_index;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct ACCESS_INFO_0
    {
        uint16_t* acc0_resource_name;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct ACCESS_INFO_1
    {
        uint16_t* acc1_resource_name;
        uint32_t acc1_attr;
        uint32_t acc1_count;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct ACCESS_INFO_1002
    {
        uint32_t acc1002_attr;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct ACCESS_LIST
    {
        uint16_t* acl_ugname;
        uint32_t acl_access;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct NET_VALIDATE_PASSWORD_HASH
    {
        uint32_t Length;
        uint8_t* Hash;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct NET_VALIDATE_PERSISTED_FIELDS
    {
        uint32_t PresentFields;
        Windows::Win32::WindowsProgramming::FILETIME PasswordLastSet;
        Windows::Win32::WindowsProgramming::FILETIME BadPasswordTime;
        Windows::Win32::WindowsProgramming::FILETIME LockoutTime;
        uint32_t BadPasswordCount;
        uint32_t PasswordHistoryLength;
        Windows::Win32::NetManagement::NET_VALIDATE_PASSWORD_HASH* PasswordHistory;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct NET_VALIDATE_OUTPUT_ARG
    {
        Windows::Win32::NetManagement::NET_VALIDATE_PERSISTED_FIELDS ChangedPersistedFields;
        uint32_t ValidationStatus;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct NET_VALIDATE_AUTHENTICATION_INPUT_ARG
    {
        Windows::Win32::NetManagement::NET_VALIDATE_PERSISTED_FIELDS InputPersistedFields;
        uint8_t PasswordMatched;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct NET_VALIDATE_PASSWORD_CHANGE_INPUT_ARG
    {
        Windows::Win32::NetManagement::NET_VALIDATE_PERSISTED_FIELDS InputPersistedFields;
        uint16_t* ClearPassword;
        uint16_t* UserAccountName;
        Windows::Win32::NetManagement::NET_VALIDATE_PASSWORD_HASH HashedPassword;
        uint8_t PasswordMatch;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct NET_VALIDATE_PASSWORD_RESET_INPUT_ARG
    {
        Windows::Win32::NetManagement::NET_VALIDATE_PERSISTED_FIELDS InputPersistedFields;
        uint16_t* ClearPassword;
        uint16_t* UserAccountName;
        Windows::Win32::NetManagement::NET_VALIDATE_PASSWORD_HASH HashedPassword;
        uint8_t PasswordMustChangeAtNextLogon;
        uint8_t ClearLockout;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct DSREG_USER_INFO
    {
        uint16_t* pszUserEmail;
        uint16_t* pszUserKeyId;
        uint16_t* pszUserKeyName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct DSREG_JOIN_INFO
    {
        Windows::Win32::NetManagement::DSREG_JOIN_TYPE joinType;
        Windows::Win32::Security::CERT_CONTEXT* pJoinCertificate;
        uint16_t* pszDeviceId;
        uint16_t* pszIdpDomain;
        uint16_t* pszTenantId;
        uint16_t* pszJoinUserEmail;
        uint16_t* pszTenantDisplayName;
        uint16_t* pszMdmEnrollmentUrl;
        uint16_t* pszMdmTermsOfUseUrl;
        uint16_t* pszMdmComplianceUrl;
        uint16_t* pszUserSettingSyncUrl;
        Windows::Win32::NetManagement::DSREG_USER_INFO* pUserInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct NETSETUP_PROVISIONING_PARAMS
    {
        uint32_t dwVersion;
        uint16_t* lpDomain;
        uint16_t* lpHostName;
        uint16_t* lpMachineAccountOU;
        uint16_t* lpDcName;
        uint32_t dwProvisionOptions;
        uint16_t** aCertTemplateNames;
        uint32_t cCertTemplateNames;
        uint16_t** aMachinePolicyNames;
        uint32_t cMachinePolicyNames;
        uint16_t** aMachinePolicyPaths;
        uint32_t cMachinePolicyPaths;
        uint16_t* lpNetbiosName;
        uint16_t* lpSiteName;
        uint16_t* lpPrimaryDNSDomain;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct STD_ALERT
    {
        uint32_t alrt_timestamp;
        uint16_t alrt_eventname[17];
        uint16_t alrt_servicename[81];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct ADMIN_OTHER_INFO
    {
        uint32_t alrtad_errcode;
        uint32_t alrtad_numstrings;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct ERRLOG_OTHER_INFO
    {
        uint32_t alrter_errcode;
        uint32_t alrter_offset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct PRINT_OTHER_INFO
    {
        uint32_t alrtpr_jobid;
        uint32_t alrtpr_status;
        uint32_t alrtpr_submitted;
        uint32_t alrtpr_size;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct USER_OTHER_INFO
    {
        uint32_t alrtus_errcode;
        uint32_t alrtus_numstrings;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct HLOG
    {
        uint32_t time;
        uint32_t last_flags;
        uint32_t offset;
        uint32_t rec_offset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct AUDIT_ENTRY
    {
        uint32_t ae_len;
        uint32_t ae_reserved;
        uint32_t ae_time;
        uint32_t ae_type;
        uint32_t ae_data_offset;
        uint32_t ae_data_size;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct AE_SRVSTATUS
    {
        uint32_t ae_sv_status;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct AE_SESSLOGON
    {
        uint32_t ae_so_compname;
        uint32_t ae_so_username;
        uint32_t ae_so_privilege;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct AE_SESSLOGOFF
    {
        uint32_t ae_sf_compname;
        uint32_t ae_sf_username;
        uint32_t ae_sf_reason;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct AE_SESSPWERR
    {
        uint32_t ae_sp_compname;
        uint32_t ae_sp_username;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct AE_CONNSTART
    {
        uint32_t ae_ct_compname;
        uint32_t ae_ct_username;
        uint32_t ae_ct_netname;
        uint32_t ae_ct_connid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct AE_CONNSTOP
    {
        uint32_t ae_cp_compname;
        uint32_t ae_cp_username;
        uint32_t ae_cp_netname;
        uint32_t ae_cp_connid;
        uint32_t ae_cp_reason;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct AE_CONNREJ
    {
        uint32_t ae_cr_compname;
        uint32_t ae_cr_username;
        uint32_t ae_cr_netname;
        uint32_t ae_cr_reason;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct AE_RESACCESS
    {
        uint32_t ae_ra_compname;
        uint32_t ae_ra_username;
        uint32_t ae_ra_resname;
        uint32_t ae_ra_operation;
        uint32_t ae_ra_returncode;
        uint32_t ae_ra_restype;
        uint32_t ae_ra_fileid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct AE_RESACCESSREJ
    {
        uint32_t ae_rr_compname;
        uint32_t ae_rr_username;
        uint32_t ae_rr_resname;
        uint32_t ae_rr_operation;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct AE_CLOSEFILE
    {
        uint32_t ae_cf_compname;
        uint32_t ae_cf_username;
        uint32_t ae_cf_resname;
        uint32_t ae_cf_fileid;
        uint32_t ae_cf_duration;
        uint32_t ae_cf_reason;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct AE_SERVICESTAT
    {
        uint32_t ae_ss_compname;
        uint32_t ae_ss_username;
        uint32_t ae_ss_svcname;
        uint32_t ae_ss_status;
        uint32_t ae_ss_code;
        uint32_t ae_ss_text;
        uint32_t ae_ss_returnval;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct AE_ACLMOD
    {
        uint32_t ae_am_compname;
        uint32_t ae_am_username;
        uint32_t ae_am_resname;
        uint32_t ae_am_action;
        uint32_t ae_am_datalen;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct AE_UASMOD
    {
        uint32_t ae_um_compname;
        uint32_t ae_um_username;
        uint32_t ae_um_resname;
        uint32_t ae_um_rectype;
        uint32_t ae_um_action;
        uint32_t ae_um_datalen;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct AE_NETLOGON
    {
        uint32_t ae_no_compname;
        uint32_t ae_no_username;
        uint32_t ae_no_privilege;
        uint32_t ae_no_authflags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct AE_NETLOGOFF
    {
        uint32_t ae_nf_compname;
        uint32_t ae_nf_username;
        uint32_t ae_nf_reserved1;
        uint32_t ae_nf_reserved2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct AE_ACCLIM
    {
        uint32_t ae_al_compname;
        uint32_t ae_al_username;
        uint32_t ae_al_resname;
        uint32_t ae_al_limit;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct AE_LOCKOUT
    {
        uint32_t ae_lk_compname;
        uint32_t ae_lk_username;
        uint32_t ae_lk_action;
        uint32_t ae_lk_bad_pw_count;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct AE_GENERIC
    {
        uint32_t ae_ge_msgfile;
        uint32_t ae_ge_msgnum;
        uint32_t ae_ge_params;
        uint32_t ae_ge_param1;
        uint32_t ae_ge_param2;
        uint32_t ae_ge_param3;
        uint32_t ae_ge_param4;
        uint32_t ae_ge_param5;
        uint32_t ae_ge_param6;
        uint32_t ae_ge_param7;
        uint32_t ae_ge_param8;
        uint32_t ae_ge_param9;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct CONFIG_INFO_0
    {
        uint16_t* cfgi0_key;
        uint16_t* cfgi0_data;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct ERROR_LOG
    {
        uint32_t el_len;
        uint32_t el_reserved;
        uint32_t el_time;
        uint32_t el_error;
        uint16_t* el_name;
        uint16_t* el_text;
        uint8_t* el_data;
        uint32_t el_data_size;
        uint32_t el_nstrings;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct MSG_INFO_0
    {
        uint16_t* msgi0_name;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct MSG_INFO_1
    {
        uint16_t* msgi1_name;
        uint32_t msgi1_forward_flag;
        uint16_t* msgi1_forward;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct TIME_OF_DAY_INFO
    {
        uint32_t tod_elapsedt;
        uint32_t tod_msecs;
        uint32_t tod_hours;
        uint32_t tod_mins;
        uint32_t tod_secs;
        uint32_t tod_hunds;
        int32_t tod_timezone;
        uint32_t tod_tinterval;
        uint32_t tod_day;
        uint32_t tod_month;
        uint32_t tod_year;
        uint32_t tod_weekday;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct AT_INFO
    {
        size_t JobTime;
        uint32_t DaysOfMonth;
        uint8_t DaysOfWeek;
        uint8_t Flags;
        uint16_t* Command;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct AT_ENUM
    {
        uint32_t JobId;
        size_t JobTime;
        uint32_t DaysOfMonth;
        uint8_t DaysOfWeek;
        uint8_t Flags;
        uint16_t* Command;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_100
    {
        uint32_t sv100_platform_id;
        uint16_t* sv100_name;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_101
    {
        uint32_t sv101_platform_id;
        uint16_t* sv101_name;
        uint32_t sv101_version_major;
        uint32_t sv101_version_minor;
        uint32_t sv101_type;
        uint16_t* sv101_comment;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_102
    {
        uint32_t sv102_platform_id;
        uint16_t* sv102_name;
        uint32_t sv102_version_major;
        uint32_t sv102_version_minor;
        uint32_t sv102_type;
        uint16_t* sv102_comment;
        uint32_t sv102_users;
        int32_t sv102_disc;
        Windows::Win32::SystemServices::BOOL sv102_hidden;
        uint32_t sv102_announce;
        uint32_t sv102_anndelta;
        uint32_t sv102_licenses;
        uint16_t* sv102_userpath;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_103
    {
        uint32_t sv103_platform_id;
        uint16_t* sv103_name;
        uint32_t sv103_version_major;
        uint32_t sv103_version_minor;
        uint32_t sv103_type;
        uint16_t* sv103_comment;
        uint32_t sv103_users;
        int32_t sv103_disc;
        Windows::Win32::SystemServices::BOOL sv103_hidden;
        uint32_t sv103_announce;
        uint32_t sv103_anndelta;
        uint32_t sv103_licenses;
        uint16_t* sv103_userpath;
        uint32_t sv103_capabilities;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_402
    {
        uint32_t sv402_ulist_mtime;
        uint32_t sv402_glist_mtime;
        uint32_t sv402_alist_mtime;
        uint16_t* sv402_alerts;
        uint32_t sv402_security;
        uint32_t sv402_numadmin;
        uint32_t sv402_lanmask;
        uint16_t* sv402_guestacct;
        uint32_t sv402_chdevs;
        uint32_t sv402_chdevq;
        uint32_t sv402_chdevjobs;
        uint32_t sv402_connections;
        uint32_t sv402_shares;
        uint32_t sv402_openfiles;
        uint32_t sv402_sessopens;
        uint32_t sv402_sessvcs;
        uint32_t sv402_sessreqs;
        uint32_t sv402_opensearch;
        uint32_t sv402_activelocks;
        uint32_t sv402_numreqbuf;
        uint32_t sv402_sizreqbuf;
        uint32_t sv402_numbigbuf;
        uint32_t sv402_numfiletasks;
        uint32_t sv402_alertsched;
        uint32_t sv402_erroralert;
        uint32_t sv402_logonalert;
        uint32_t sv402_accessalert;
        uint32_t sv402_diskalert;
        uint32_t sv402_netioalert;
        uint32_t sv402_maxauditsz;
        uint16_t* sv402_srvheuristics;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_403
    {
        uint32_t sv403_ulist_mtime;
        uint32_t sv403_glist_mtime;
        uint32_t sv403_alist_mtime;
        uint16_t* sv403_alerts;
        uint32_t sv403_security;
        uint32_t sv403_numadmin;
        uint32_t sv403_lanmask;
        uint16_t* sv403_guestacct;
        uint32_t sv403_chdevs;
        uint32_t sv403_chdevq;
        uint32_t sv403_chdevjobs;
        uint32_t sv403_connections;
        uint32_t sv403_shares;
        uint32_t sv403_openfiles;
        uint32_t sv403_sessopens;
        uint32_t sv403_sessvcs;
        uint32_t sv403_sessreqs;
        uint32_t sv403_opensearch;
        uint32_t sv403_activelocks;
        uint32_t sv403_numreqbuf;
        uint32_t sv403_sizreqbuf;
        uint32_t sv403_numbigbuf;
        uint32_t sv403_numfiletasks;
        uint32_t sv403_alertsched;
        uint32_t sv403_erroralert;
        uint32_t sv403_logonalert;
        uint32_t sv403_accessalert;
        uint32_t sv403_diskalert;
        uint32_t sv403_netioalert;
        uint32_t sv403_maxauditsz;
        uint16_t* sv403_srvheuristics;
        uint32_t sv403_auditedevents;
        uint32_t sv403_autoprofile;
        uint16_t* sv403_autopath;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_502
    {
        uint32_t sv502_sessopens;
        uint32_t sv502_sessvcs;
        uint32_t sv502_opensearch;
        uint32_t sv502_sizreqbuf;
        uint32_t sv502_initworkitems;
        uint32_t sv502_maxworkitems;
        uint32_t sv502_rawworkitems;
        uint32_t sv502_irpstacksize;
        uint32_t sv502_maxrawbuflen;
        uint32_t sv502_sessusers;
        uint32_t sv502_sessconns;
        uint32_t sv502_maxpagedmemoryusage;
        uint32_t sv502_maxnonpagedmemoryusage;
        Windows::Win32::SystemServices::BOOL sv502_enablesoftcompat;
        Windows::Win32::SystemServices::BOOL sv502_enableforcedlogoff;
        Windows::Win32::SystemServices::BOOL sv502_timesource;
        Windows::Win32::SystemServices::BOOL sv502_acceptdownlevelapis;
        Windows::Win32::SystemServices::BOOL sv502_lmannounce;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_503
    {
        uint32_t sv503_sessopens;
        uint32_t sv503_sessvcs;
        uint32_t sv503_opensearch;
        uint32_t sv503_sizreqbuf;
        uint32_t sv503_initworkitems;
        uint32_t sv503_maxworkitems;
        uint32_t sv503_rawworkitems;
        uint32_t sv503_irpstacksize;
        uint32_t sv503_maxrawbuflen;
        uint32_t sv503_sessusers;
        uint32_t sv503_sessconns;
        uint32_t sv503_maxpagedmemoryusage;
        uint32_t sv503_maxnonpagedmemoryusage;
        Windows::Win32::SystemServices::BOOL sv503_enablesoftcompat;
        Windows::Win32::SystemServices::BOOL sv503_enableforcedlogoff;
        Windows::Win32::SystemServices::BOOL sv503_timesource;
        Windows::Win32::SystemServices::BOOL sv503_acceptdownlevelapis;
        Windows::Win32::SystemServices::BOOL sv503_lmannounce;
        uint16_t* sv503_domain;
        uint32_t sv503_maxcopyreadlen;
        uint32_t sv503_maxcopywritelen;
        uint32_t sv503_minkeepsearch;
        uint32_t sv503_maxkeepsearch;
        uint32_t sv503_minkeepcomplsearch;
        uint32_t sv503_maxkeepcomplsearch;
        uint32_t sv503_threadcountadd;
        uint32_t sv503_numblockthreads;
        uint32_t sv503_scavtimeout;
        uint32_t sv503_minrcvqueue;
        uint32_t sv503_minfreeworkitems;
        uint32_t sv503_xactmemsize;
        uint32_t sv503_threadpriority;
        uint32_t sv503_maxmpxct;
        uint32_t sv503_oplockbreakwait;
        uint32_t sv503_oplockbreakresponsewait;
        Windows::Win32::SystemServices::BOOL sv503_enableoplocks;
        Windows::Win32::SystemServices::BOOL sv503_enableoplockforceclose;
        Windows::Win32::SystemServices::BOOL sv503_enablefcbopens;
        Windows::Win32::SystemServices::BOOL sv503_enableraw;
        Windows::Win32::SystemServices::BOOL sv503_enablesharednetdrives;
        uint32_t sv503_minfreeconnections;
        uint32_t sv503_maxfreeconnections;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_599
    {
        uint32_t sv599_sessopens;
        uint32_t sv599_sessvcs;
        uint32_t sv599_opensearch;
        uint32_t sv599_sizreqbuf;
        uint32_t sv599_initworkitems;
        uint32_t sv599_maxworkitems;
        uint32_t sv599_rawworkitems;
        uint32_t sv599_irpstacksize;
        uint32_t sv599_maxrawbuflen;
        uint32_t sv599_sessusers;
        uint32_t sv599_sessconns;
        uint32_t sv599_maxpagedmemoryusage;
        uint32_t sv599_maxnonpagedmemoryusage;
        Windows::Win32::SystemServices::BOOL sv599_enablesoftcompat;
        Windows::Win32::SystemServices::BOOL sv599_enableforcedlogoff;
        Windows::Win32::SystemServices::BOOL sv599_timesource;
        Windows::Win32::SystemServices::BOOL sv599_acceptdownlevelapis;
        Windows::Win32::SystemServices::BOOL sv599_lmannounce;
        uint16_t* sv599_domain;
        uint32_t sv599_maxcopyreadlen;
        uint32_t sv599_maxcopywritelen;
        uint32_t sv599_minkeepsearch;
        uint32_t sv599_maxkeepsearch;
        uint32_t sv599_minkeepcomplsearch;
        uint32_t sv599_maxkeepcomplsearch;
        uint32_t sv599_threadcountadd;
        uint32_t sv599_numblockthreads;
        uint32_t sv599_scavtimeout;
        uint32_t sv599_minrcvqueue;
        uint32_t sv599_minfreeworkitems;
        uint32_t sv599_xactmemsize;
        uint32_t sv599_threadpriority;
        uint32_t sv599_maxmpxct;
        uint32_t sv599_oplockbreakwait;
        uint32_t sv599_oplockbreakresponsewait;
        Windows::Win32::SystemServices::BOOL sv599_enableoplocks;
        Windows::Win32::SystemServices::BOOL sv599_enableoplockforceclose;
        Windows::Win32::SystemServices::BOOL sv599_enablefcbopens;
        Windows::Win32::SystemServices::BOOL sv599_enableraw;
        Windows::Win32::SystemServices::BOOL sv599_enablesharednetdrives;
        uint32_t sv599_minfreeconnections;
        uint32_t sv599_maxfreeconnections;
        uint32_t sv599_initsesstable;
        uint32_t sv599_initconntable;
        uint32_t sv599_initfiletable;
        uint32_t sv599_initsearchtable;
        uint32_t sv599_alertschedule;
        uint32_t sv599_errorthreshold;
        uint32_t sv599_networkerrorthreshold;
        uint32_t sv599_diskspacethreshold;
        uint32_t sv599_reserved;
        uint32_t sv599_maxlinkdelay;
        uint32_t sv599_minlinkthroughput;
        uint32_t sv599_linkinfovalidtime;
        uint32_t sv599_scavqosinfoupdatetime;
        uint32_t sv599_maxworkitemidletime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_598
    {
        uint32_t sv598_maxrawworkitems;
        uint32_t sv598_maxthreadsperqueue;
        uint32_t sv598_producttype;
        uint32_t sv598_serversize;
        uint32_t sv598_connectionlessautodisc;
        uint32_t sv598_sharingviolationretries;
        uint32_t sv598_sharingviolationdelay;
        uint32_t sv598_maxglobalopensearch;
        uint32_t sv598_removeduplicatesearches;
        uint32_t sv598_lockviolationoffset;
        uint32_t sv598_lockviolationdelay;
        uint32_t sv598_mdlreadswitchover;
        uint32_t sv598_cachedopenlimit;
        uint32_t sv598_otherqueueaffinity;
        Windows::Win32::SystemServices::BOOL sv598_restrictnullsessaccess;
        Windows::Win32::SystemServices::BOOL sv598_enablewfw311directipx;
        uint32_t sv598_queuesamplesecs;
        uint32_t sv598_balancecount;
        uint32_t sv598_preferredaffinity;
        uint32_t sv598_maxfreerfcbs;
        uint32_t sv598_maxfreemfcbs;
        uint32_t sv598_maxfreelfcbs;
        uint32_t sv598_maxfreepagedpoolchunks;
        uint32_t sv598_minpagedpoolchunksize;
        uint32_t sv598_maxpagedpoolchunksize;
        Windows::Win32::SystemServices::BOOL sv598_sendsfrompreferredprocessor;
        uint32_t sv598_cacheddirectorylimit;
        uint32_t sv598_maxcopylength;
        Windows::Win32::SystemServices::BOOL sv598_enablecompression;
        Windows::Win32::SystemServices::BOOL sv598_autosharewks;
        Windows::Win32::SystemServices::BOOL sv598_autoshareserver;
        Windows::Win32::SystemServices::BOOL sv598_enablesecuritysignature;
        Windows::Win32::SystemServices::BOOL sv598_requiresecuritysignature;
        uint32_t sv598_minclientbuffersize;
        ::win32::guid sv598_serverguid;
        uint32_t sv598_ConnectionNoSessionsTimeout;
        uint32_t sv598_IdleThreadTimeOut;
        Windows::Win32::SystemServices::BOOL sv598_enableW9xsecuritysignature;
        Windows::Win32::SystemServices::BOOL sv598_enforcekerberosreauthentication;
        Windows::Win32::SystemServices::BOOL sv598_disabledos;
        uint32_t sv598_lowdiskspaceminimum;
        Windows::Win32::SystemServices::BOOL sv598_disablestrictnamechecking;
        Windows::Win32::SystemServices::BOOL sv598_enableauthenticateusersharing;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1005
    {
        uint16_t* sv1005_comment;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1107
    {
        uint32_t sv1107_users;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1010
    {
        int32_t sv1010_disc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1016
    {
        Windows::Win32::SystemServices::BOOL sv1016_hidden;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1017
    {
        uint32_t sv1017_announce;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1018
    {
        uint32_t sv1018_anndelta;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1501
    {
        uint32_t sv1501_sessopens;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1502
    {
        uint32_t sv1502_sessvcs;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1503
    {
        uint32_t sv1503_opensearch;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1506
    {
        uint32_t sv1506_maxworkitems;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1509
    {
        uint32_t sv1509_maxrawbuflen;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1510
    {
        uint32_t sv1510_sessusers;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1511
    {
        uint32_t sv1511_sessconns;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1512
    {
        uint32_t sv1512_maxnonpagedmemoryusage;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1513
    {
        uint32_t sv1513_maxpagedmemoryusage;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1514
    {
        Windows::Win32::SystemServices::BOOL sv1514_enablesoftcompat;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1515
    {
        Windows::Win32::SystemServices::BOOL sv1515_enableforcedlogoff;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1516
    {
        Windows::Win32::SystemServices::BOOL sv1516_timesource;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1518
    {
        Windows::Win32::SystemServices::BOOL sv1518_lmannounce;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1520
    {
        uint32_t sv1520_maxcopyreadlen;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1521
    {
        uint32_t sv1521_maxcopywritelen;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1522
    {
        uint32_t sv1522_minkeepsearch;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1523
    {
        uint32_t sv1523_maxkeepsearch;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1524
    {
        uint32_t sv1524_minkeepcomplsearch;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1525
    {
        uint32_t sv1525_maxkeepcomplsearch;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1528
    {
        uint32_t sv1528_scavtimeout;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1529
    {
        uint32_t sv1529_minrcvqueue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1530
    {
        uint32_t sv1530_minfreeworkitems;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1533
    {
        uint32_t sv1533_maxmpxct;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1534
    {
        uint32_t sv1534_oplockbreakwait;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1535
    {
        uint32_t sv1535_oplockbreakresponsewait;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1536
    {
        Windows::Win32::SystemServices::BOOL sv1536_enableoplocks;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1537
    {
        Windows::Win32::SystemServices::BOOL sv1537_enableoplockforceclose;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1538
    {
        Windows::Win32::SystemServices::BOOL sv1538_enablefcbopens;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1539
    {
        Windows::Win32::SystemServices::BOOL sv1539_enableraw;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1540
    {
        Windows::Win32::SystemServices::BOOL sv1540_enablesharednetdrives;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1541
    {
        Windows::Win32::SystemServices::BOOL sv1541_minfreeconnections;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1542
    {
        Windows::Win32::SystemServices::BOOL sv1542_maxfreeconnections;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1543
    {
        uint32_t sv1543_initsesstable;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1544
    {
        uint32_t sv1544_initconntable;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1545
    {
        uint32_t sv1545_initfiletable;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1546
    {
        uint32_t sv1546_initsearchtable;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1547
    {
        uint32_t sv1547_alertschedule;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1548
    {
        uint32_t sv1548_errorthreshold;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1549
    {
        uint32_t sv1549_networkerrorthreshold;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1550
    {
        uint32_t sv1550_diskspacethreshold;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1552
    {
        uint32_t sv1552_maxlinkdelay;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1553
    {
        uint32_t sv1553_minlinkthroughput;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1554
    {
        uint32_t sv1554_linkinfovalidtime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1555
    {
        uint32_t sv1555_scavqosinfoupdatetime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1556
    {
        uint32_t sv1556_maxworkitemidletime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1557
    {
        uint32_t sv1557_maxrawworkitems;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1560
    {
        uint32_t sv1560_producttype;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1561
    {
        uint32_t sv1561_serversize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1562
    {
        uint32_t sv1562_connectionlessautodisc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1563
    {
        uint32_t sv1563_sharingviolationretries;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1564
    {
        uint32_t sv1564_sharingviolationdelay;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1565
    {
        uint32_t sv1565_maxglobalopensearch;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1566
    {
        Windows::Win32::SystemServices::BOOL sv1566_removeduplicatesearches;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1567
    {
        uint32_t sv1567_lockviolationretries;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1568
    {
        uint32_t sv1568_lockviolationoffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1569
    {
        uint32_t sv1569_lockviolationdelay;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1570
    {
        uint32_t sv1570_mdlreadswitchover;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1571
    {
        uint32_t sv1571_cachedopenlimit;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1572
    {
        uint32_t sv1572_criticalthreads;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1573
    {
        uint32_t sv1573_restrictnullsessaccess;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1574
    {
        uint32_t sv1574_enablewfw311directipx;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1575
    {
        uint32_t sv1575_otherqueueaffinity;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1576
    {
        uint32_t sv1576_queuesamplesecs;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1577
    {
        uint32_t sv1577_balancecount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1578
    {
        uint32_t sv1578_preferredaffinity;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1579
    {
        uint32_t sv1579_maxfreerfcbs;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1580
    {
        uint32_t sv1580_maxfreemfcbs;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1581
    {
        uint32_t sv1581_maxfreemlcbs;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1582
    {
        uint32_t sv1582_maxfreepagedpoolchunks;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1583
    {
        uint32_t sv1583_minpagedpoolchunksize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1584
    {
        uint32_t sv1584_maxpagedpoolchunksize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1585
    {
        Windows::Win32::SystemServices::BOOL sv1585_sendsfrompreferredprocessor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1586
    {
        uint32_t sv1586_maxthreadsperqueue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1587
    {
        uint32_t sv1587_cacheddirectorylimit;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1588
    {
        uint32_t sv1588_maxcopylength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1590
    {
        uint32_t sv1590_enablecompression;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1591
    {
        uint32_t sv1591_autosharewks;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1592
    {
        uint32_t sv1592_autosharewks;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1593
    {
        uint32_t sv1593_enablesecuritysignature;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1594
    {
        uint32_t sv1594_requiresecuritysignature;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1595
    {
        uint32_t sv1595_minclientbuffersize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1596
    {
        uint32_t sv1596_ConnectionNoSessionsTimeout;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1597
    {
        uint32_t sv1597_IdleThreadTimeOut;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1598
    {
        uint32_t sv1598_enableW9xsecuritysignature;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1599
    {
        uint8_t sv1598_enforcekerberosreauthentication;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1600
    {
        uint8_t sv1598_disabledos;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1601
    {
        uint32_t sv1598_lowdiskspaceminimum;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_INFO_1602
    {
        Windows::Win32::SystemServices::BOOL sv_1598_disablestrictnamechecking;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_TRANSPORT_INFO_0
    {
        uint32_t svti0_numberofvcs;
        uint16_t* svti0_transportname;
        uint8_t* svti0_transportaddress;
        uint32_t svti0_transportaddresslength;
        uint16_t* svti0_networkaddress;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_TRANSPORT_INFO_1
    {
        uint32_t svti1_numberofvcs;
        uint16_t* svti1_transportname;
        uint8_t* svti1_transportaddress;
        uint32_t svti1_transportaddresslength;
        uint16_t* svti1_networkaddress;
        uint16_t* svti1_domain;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_TRANSPORT_INFO_2
    {
        uint32_t svti2_numberofvcs;
        uint16_t* svti2_transportname;
        uint8_t* svti2_transportaddress;
        uint32_t svti2_transportaddresslength;
        uint16_t* svti2_networkaddress;
        uint16_t* svti2_domain;
        uint32_t svti2_flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVER_TRANSPORT_INFO_3
    {
        uint32_t svti3_numberofvcs;
        uint16_t* svti3_transportname;
        uint8_t* svti3_transportaddress;
        uint32_t svti3_transportaddresslength;
        uint16_t* svti3_networkaddress;
        uint16_t* svti3_domain;
        uint32_t svti3_flags;
        uint32_t svti3_passwordlength;
        uint8_t svti3_password[256];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVICE_INFO_0
    {
        uint16_t* svci0_name;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVICE_INFO_1
    {
        uint16_t* svci1_name;
        uint32_t svci1_status;
        uint32_t svci1_code;
        uint32_t svci1_pid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct SERVICE_INFO_2
    {
        uint16_t* svci2_name;
        uint32_t svci2_status;
        uint32_t svci2_code;
        uint32_t svci2_pid;
        uint16_t* svci2_text;
        uint32_t svci2_specific_error;
        uint16_t* svci2_display_name;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct USE_INFO_0
    {
        uint16_t* ui0_local;
        uint16_t* ui0_remote;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct USE_INFO_1
    {
        uint16_t* ui1_local;
        uint16_t* ui1_remote;
        uint16_t* ui1_password;
        uint32_t ui1_status;
        uint32_t ui1_asg_type;
        uint32_t ui1_refcount;
        uint32_t ui1_usecount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct USE_INFO_2
    {
        uint16_t* ui2_local;
        uint16_t* ui2_remote;
        uint16_t* ui2_password;
        uint32_t ui2_status;
        uint32_t ui2_asg_type;
        uint32_t ui2_refcount;
        uint32_t ui2_usecount;
        uint16_t* ui2_username;
        uint16_t* ui2_domainname;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct USE_INFO_3
    {
        Windows::Win32::NetManagement::USE_INFO_2 ui3_ui2;
        uint32_t ui3_flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct USE_INFO_4
    {
        Windows::Win32::NetManagement::USE_INFO_3 ui4_ui3;
        uint32_t ui4_auth_identity_length;
        uint8_t* ui4_auth_identity;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct USE_INFO_5
    {
        Windows::Win32::NetManagement::USE_INFO_3 ui4_ui3;
        uint32_t ui4_auth_identity_length;
        uint8_t* ui4_auth_identity;
        uint32_t ui5_security_descriptor_length;
        uint8_t* ui5_security_descriptor;
        uint32_t ui5_use_options_length;
        uint8_t* ui5_use_options;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct USE_OPTION_GENERIC
    {
        uint32_t Tag;
        uint16_t Length;
        uint16_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct USE_OPTION_DEFERRED_CONNECTION_PARAMETERS
    {
        uint32_t Tag;
        uint16_t Length;
        uint16_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct TRANSPORT_INFO
    {
        Windows::Win32::NetManagement::TRANSPORT_TYPE Type;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct USE_OPTION_TRANSPORT_PARAMETERS
    {
        uint32_t Tag;
        uint16_t Length;
        uint16_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct WKSTA_INFO_100
    {
        uint32_t wki100_platform_id;
        uint16_t* wki100_computername;
        uint16_t* wki100_langroup;
        uint32_t wki100_ver_major;
        uint32_t wki100_ver_minor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct WKSTA_INFO_101
    {
        uint32_t wki101_platform_id;
        uint16_t* wki101_computername;
        uint16_t* wki101_langroup;
        uint32_t wki101_ver_major;
        uint32_t wki101_ver_minor;
        uint16_t* wki101_lanroot;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct WKSTA_INFO_102
    {
        uint32_t wki102_platform_id;
        uint16_t* wki102_computername;
        uint16_t* wki102_langroup;
        uint32_t wki102_ver_major;
        uint32_t wki102_ver_minor;
        uint16_t* wki102_lanroot;
        uint32_t wki102_logged_on_users;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct WKSTA_INFO_302
    {
        uint32_t wki302_char_wait;
        uint32_t wki302_collection_time;
        uint32_t wki302_maximum_collection_count;
        uint32_t wki302_keep_conn;
        uint32_t wki302_keep_search;
        uint32_t wki302_max_cmds;
        uint32_t wki302_num_work_buf;
        uint32_t wki302_siz_work_buf;
        uint32_t wki302_max_wrk_cache;
        uint32_t wki302_sess_timeout;
        uint32_t wki302_siz_error;
        uint32_t wki302_num_alerts;
        uint32_t wki302_num_services;
        uint32_t wki302_errlog_sz;
        uint32_t wki302_print_buf_time;
        uint32_t wki302_num_char_buf;
        uint32_t wki302_siz_char_buf;
        uint16_t* wki302_wrk_heuristics;
        uint32_t wki302_mailslots;
        uint32_t wki302_num_dgram_buf;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct WKSTA_INFO_402
    {
        uint32_t wki402_char_wait;
        uint32_t wki402_collection_time;
        uint32_t wki402_maximum_collection_count;
        uint32_t wki402_keep_conn;
        uint32_t wki402_keep_search;
        uint32_t wki402_max_cmds;
        uint32_t wki402_num_work_buf;
        uint32_t wki402_siz_work_buf;
        uint32_t wki402_max_wrk_cache;
        uint32_t wki402_sess_timeout;
        uint32_t wki402_siz_error;
        uint32_t wki402_num_alerts;
        uint32_t wki402_num_services;
        uint32_t wki402_errlog_sz;
        uint32_t wki402_print_buf_time;
        uint32_t wki402_num_char_buf;
        uint32_t wki402_siz_char_buf;
        uint16_t* wki402_wrk_heuristics;
        uint32_t wki402_mailslots;
        uint32_t wki402_num_dgram_buf;
        uint32_t wki402_max_threads;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct WKSTA_INFO_502
    {
        uint32_t wki502_char_wait;
        uint32_t wki502_collection_time;
        uint32_t wki502_maximum_collection_count;
        uint32_t wki502_keep_conn;
        uint32_t wki502_max_cmds;
        uint32_t wki502_sess_timeout;
        uint32_t wki502_siz_char_buf;
        uint32_t wki502_max_threads;
        uint32_t wki502_lock_quota;
        uint32_t wki502_lock_increment;
        uint32_t wki502_lock_maximum;
        uint32_t wki502_pipe_increment;
        uint32_t wki502_pipe_maximum;
        uint32_t wki502_cache_file_timeout;
        uint32_t wki502_dormant_file_limit;
        uint32_t wki502_read_ahead_throughput;
        uint32_t wki502_num_mailslot_buffers;
        uint32_t wki502_num_srv_announce_buffers;
        uint32_t wki502_max_illegal_datagram_events;
        uint32_t wki502_illegal_datagram_event_reset_frequency;
        Windows::Win32::SystemServices::BOOL wki502_log_election_packets;
        Windows::Win32::SystemServices::BOOL wki502_use_opportunistic_locking;
        Windows::Win32::SystemServices::BOOL wki502_use_unlock_behind;
        Windows::Win32::SystemServices::BOOL wki502_use_close_behind;
        Windows::Win32::SystemServices::BOOL wki502_buf_named_pipes;
        Windows::Win32::SystemServices::BOOL wki502_use_lock_read_unlock;
        Windows::Win32::SystemServices::BOOL wki502_utilize_nt_caching;
        Windows::Win32::SystemServices::BOOL wki502_use_raw_read;
        Windows::Win32::SystemServices::BOOL wki502_use_raw_write;
        Windows::Win32::SystemServices::BOOL wki502_use_write_raw_data;
        Windows::Win32::SystemServices::BOOL wki502_use_encryption;
        Windows::Win32::SystemServices::BOOL wki502_buf_files_deny_write;
        Windows::Win32::SystemServices::BOOL wki502_buf_read_only_files;
        Windows::Win32::SystemServices::BOOL wki502_force_core_create_mode;
        Windows::Win32::SystemServices::BOOL wki502_use_512_byte_max_transfer;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct WKSTA_INFO_1010
    {
        uint32_t wki1010_char_wait;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct WKSTA_INFO_1011
    {
        uint32_t wki1011_collection_time;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct WKSTA_INFO_1012
    {
        uint32_t wki1012_maximum_collection_count;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct WKSTA_INFO_1027
    {
        uint32_t wki1027_errlog_sz;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct WKSTA_INFO_1028
    {
        uint32_t wki1028_print_buf_time;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct WKSTA_INFO_1032
    {
        uint32_t wki1032_wrk_heuristics;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct WKSTA_INFO_1013
    {
        uint32_t wki1013_keep_conn;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct WKSTA_INFO_1018
    {
        uint32_t wki1018_sess_timeout;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct WKSTA_INFO_1023
    {
        uint32_t wki1023_siz_char_buf;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct WKSTA_INFO_1033
    {
        uint32_t wki1033_max_threads;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct WKSTA_INFO_1041
    {
        uint32_t wki1041_lock_quota;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct WKSTA_INFO_1042
    {
        uint32_t wki1042_lock_increment;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct WKSTA_INFO_1043
    {
        uint32_t wki1043_lock_maximum;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct WKSTA_INFO_1044
    {
        uint32_t wki1044_pipe_increment;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct WKSTA_INFO_1045
    {
        uint32_t wki1045_pipe_maximum;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct WKSTA_INFO_1046
    {
        uint32_t wki1046_dormant_file_limit;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct WKSTA_INFO_1047
    {
        uint32_t wki1047_cache_file_timeout;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct WKSTA_INFO_1048
    {
        Windows::Win32::SystemServices::BOOL wki1048_use_opportunistic_locking;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct WKSTA_INFO_1049
    {
        Windows::Win32::SystemServices::BOOL wki1049_use_unlock_behind;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct WKSTA_INFO_1050
    {
        Windows::Win32::SystemServices::BOOL wki1050_use_close_behind;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct WKSTA_INFO_1051
    {
        Windows::Win32::SystemServices::BOOL wki1051_buf_named_pipes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct WKSTA_INFO_1052
    {
        Windows::Win32::SystemServices::BOOL wki1052_use_lock_read_unlock;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct WKSTA_INFO_1053
    {
        Windows::Win32::SystemServices::BOOL wki1053_utilize_nt_caching;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct WKSTA_INFO_1054
    {
        Windows::Win32::SystemServices::BOOL wki1054_use_raw_read;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct WKSTA_INFO_1055
    {
        Windows::Win32::SystemServices::BOOL wki1055_use_raw_write;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct WKSTA_INFO_1056
    {
        Windows::Win32::SystemServices::BOOL wki1056_use_write_raw_data;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct WKSTA_INFO_1057
    {
        Windows::Win32::SystemServices::BOOL wki1057_use_encryption;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct WKSTA_INFO_1058
    {
        Windows::Win32::SystemServices::BOOL wki1058_buf_files_deny_write;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct WKSTA_INFO_1059
    {
        Windows::Win32::SystemServices::BOOL wki1059_buf_read_only_files;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct WKSTA_INFO_1060
    {
        Windows::Win32::SystemServices::BOOL wki1060_force_core_create_mode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct WKSTA_INFO_1061
    {
        Windows::Win32::SystemServices::BOOL wki1061_use_512_byte_max_transfer;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct WKSTA_INFO_1062
    {
        uint32_t wki1062_read_ahead_throughput;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct WKSTA_USER_INFO_0
    {
        uint16_t* wkui0_username;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct WKSTA_USER_INFO_1
    {
        uint16_t* wkui1_username;
        uint16_t* wkui1_logon_domain;
        uint16_t* wkui1_oth_domains;
        uint16_t* wkui1_logon_server;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct WKSTA_USER_INFO_1101
    {
        uint16_t* wkui1101_oth_domains;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetManagement
{
    struct WKSTA_TRANSPORT_INFO_0
    {
        uint32_t wkti0_quality_of_service;
        uint32_t wkti0_number_of_vcs;
        uint16_t* wkti0_transport_name;
        uint16_t* wkti0_transport_address;
        Windows::Win32::SystemServices::BOOL wkti0_wan_ish;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct NETLOGON_INFO_1
    {
        uint32_t netlog1_flags;
        uint32_t netlog1_pdc_connection_status;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct NETLOGON_INFO_2
    {
        uint32_t netlog2_flags;
        uint32_t netlog2_pdc_connection_status;
        uint16_t* netlog2_trusted_dc_name;
        uint32_t netlog2_tc_connection_status;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct NETLOGON_INFO_3
    {
        uint32_t netlog3_flags;
        uint32_t netlog3_logon_attempts;
        uint32_t netlog3_reserved1;
        uint32_t netlog3_reserved2;
        uint32_t netlog3_reserved3;
        uint32_t netlog3_reserved4;
        uint32_t netlog3_reserved5;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct NETLOGON_INFO_4
    {
        uint16_t* netlog4_trusted_dc_name;
        uint16_t* netlog4_trusted_domain_name;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct MSA_INFO_0
    {
        Windows::Win32::Security::MSA_INFO_STATE State;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetShell
{
    struct TOKEN_VALUE
    {
        uint16_t* pwszToken;
        uint32_t dwValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetShell
{
    struct NS_HELPER_ATTRIBUTES
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t dwVersion;
                uint32_t dwReserved;
            };
            _Anonymous_e__Struct Anonymous;
            uint64_t _ullAlign;
        };
        _Anonymous_e__Union Anonymous;
        ::win32::guid guidHelper;
        Windows::Win32::NetShell::PNS_HELPER_START_FN* pfnStart;
        Windows::Win32::NetShell::PNS_HELPER_STOP_FN* pfnStop;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetShell
{
    struct CMD_ENTRY
    {
        uint16_t* pwszCmdToken;
        Windows::Win32::NetShell::PFN_HANDLE_CMD* pfnCmdHandler;
        uint32_t dwShortCmdHelpToken;
        uint32_t dwCmdHlpToken;
        uint32_t dwFlags;
        Windows::Win32::NetShell::PNS_OSVERSIONCHECK* pOsVersionCheck;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetShell
{
    struct CMD_GROUP_ENTRY
    {
        uint16_t* pwszCmdGroupToken;
        uint32_t dwShortCmdHelpToken;
        uint32_t ulCmdGroupSize;
        uint32_t dwFlags;
        Windows::Win32::NetShell::CMD_ENTRY* pCmdGroup;
        Windows::Win32::NetShell::PNS_OSVERSIONCHECK* pOsVersionCheck;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetShell
{
    struct NS_CONTEXT_ATTRIBUTES
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t dwVersion;
                uint32_t dwReserved;
            };
            _Anonymous_e__Struct Anonymous;
            uint64_t _ullAlign;
        };
        _Anonymous_e__Union Anonymous;
        uint16_t* pwszContext;
        ::win32::guid guidHelper;
        uint32_t dwFlags;
        uint32_t ulPriority;
        uint32_t ulNumTopCmds;
        Windows::Win32::NetShell::CMD_ENTRY* pTopCmds;
        uint32_t ulNumGroups;
        Windows::Win32::NetShell::CMD_GROUP_ENTRY* pCmdGroups;
        Windows::Win32::NetShell::PNS_CONTEXT_COMMIT_FN* pfnCommitFn;
        Windows::Win32::NetShell::PNS_CONTEXT_DUMP_FN* pfnDumpFn;
        Windows::Win32::NetShell::PNS_CONTEXT_CONNECT_FN* pfnConnectFn;
        void* pReserved;
        Windows::Win32::NetShell::PNS_OSVERSIONCHECK* pfnOsVersionCheck;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetShell
{
    struct TAG_TYPE
    {
        uint16_t* pwszTag;
        uint32_t dwRequired;
        Windows::Win32::SystemServices::BOOL bPresent;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetworkListManager
{
    struct NLM_USAGE_DATA
    {
        uint32_t UsageInMegabytes;
        Windows::Win32::WindowsProgramming::FILETIME LastSyncTime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetworkListManager
{
    struct NLM_DATAPLAN_STATUS
    {
        ::win32::guid InterfaceGuid;
        Windows::Win32::NetworkListManager::NLM_USAGE_DATA UsageData;
        uint32_t DataLimitInMegabytes;
        uint32_t InboundBandwidthInKbps;
        uint32_t OutboundBandwidthInKbps;
        Windows::Win32::WindowsProgramming::FILETIME NextBillingCycle;
        uint32_t MaxTransferSizeInMegabytes;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetworkListManager
{
    struct NLM_SOCKADDR
    {
        uint8_t data[128];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetworkListManager
{
    struct NLM_SIMULATED_PROFILE_INFO
    {
        uint16_t ProfileName[256];
        Windows::Win32::NetworkListManager::NLM_CONNECTION_COST cost;
        uint32_t UsageInMegabytes;
        uint32_t DataLimitInMegabytes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetworkListManager
{
    struct NET_INTERFACE_CONTEXT
    {
        uint32_t InterfaceIndex;
        uint16_t* ConfigurationName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetworkListManager
{
    struct NET_INTERFACE_CONTEXT_TABLE
    {
        Windows::Win32::SystemServices::HANDLE InterfaceContextHandle;
        uint32_t NumberOfEntries;
        Windows::Win32::NetworkListManager::NET_INTERFACE_CONTEXT* InterfaceContextArray;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetworkPolicyServer
{
    struct RADIUS_ATTRIBUTE
    {
        union _Anonymous_e__Union
        {
            uint32_t dwValue;
            uint8_t* lpValue;
        };
        uint32_t dwAttrType;
        Windows::Win32::NetworkPolicyServer::RADIUS_DATA_TYPE fDataType;
        uint32_t cbDataLength;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetworkPolicyServer
{
    struct RADIUS_VSA_FORMAT
    {
        uint8_t VendorId[4];
        uint8_t VendorType;
        uint8_t VendorLength;
        uint8_t AttributeSpecific[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetworkPolicyServer
{
    struct RADIUS_ATTRIBUTE_ARRAY
    {
        uint32_t cbSize;
        intptr_t Add;
        intptr_t AttributeAt;
        intptr_t GetSize;
        intptr_t InsertAt;
        intptr_t RemoveAt;
        intptr_t SetAt;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetworkPolicyServer
{
    struct RADIUS_EXTENSION_CONTROL_BLOCK
    {
        uint32_t cbSize;
        uint32_t dwVersion;
        Windows::Win32::NetworkPolicyServer::RADIUS_EXTENSION_POINT repPoint;
        Windows::Win32::NetworkPolicyServer::RADIUS_CODE rcRequestType;
        Windows::Win32::NetworkPolicyServer::RADIUS_CODE rcResponseType;
        intptr_t GetRequest;
        intptr_t GetResponse;
        intptr_t SetResponseType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct HICON
    {
        intptr_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct CQFORM
    {
        uint32_t cbStruct;
        uint32_t dwFlags;
        ::win32::guid clsid;
        Windows::Win32::Gdi::HICON hIcon;
        uint16_t* pszTitle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct HINSTANCE
    {
        intptr_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct LPARAM
    {
        intptr_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct CQPAGE
    {
        uint32_t cbStruct;
        uint32_t dwFlags;
        Windows::Win32::ActiveDirectory::LPCQPAGEPROC* pPageProc;
        Windows::Win32::SystemServices::HINSTANCE hInstance;
        int32_t idPageName;
        int32_t idPageTemplate;
        Windows::Win32::WindowsAndMessaging::DLGPROC* pDlgProc;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct OPENQUERYWINDOW
    {
        union _Anonymous_e__Union
        {
            void* pFormParameters;
            Windows::Win32::Automation::IPropertyBag* ppbFormParameters;
        };
        uint32_t cbStruct;
        uint32_t dwFlags;
        ::win32::guid clsidHandler;
        void* pHandlerParameters;
        ::win32::guid clsidDefaultForm;
        Windows::Win32::ActiveDirectory::IPersistQuery* pPersistQuery;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct ADS_OCTET_STRING
    {
        uint32_t dwLength;
        uint8_t* lpValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct ADS_NT_SECURITY_DESCRIPTOR
    {
        uint32_t dwLength;
        uint8_t* lpValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct ADS_PROV_SPECIFIC
    {
        uint32_t dwLength;
        uint8_t* lpValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct ADS_CASEIGNORE_LIST
    {
        Windows::Win32::ActiveDirectory::ADS_CASEIGNORE_LIST* Next;
        uint16_t* String;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct ADS_OCTET_LIST
    {
        Windows::Win32::ActiveDirectory::ADS_OCTET_LIST* Next;
        uint32_t Length;
        uint8_t* Data;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct ADS_PATH
    {
        uint32_t Type;
        uint16_t* VolumeName;
        uint16_t* Path;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct ADS_POSTALADDRESS
    {
        uint16_t* PostalAddress[6];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct ADS_TIMESTAMP
    {
        uint32_t WholeSeconds;
        uint32_t EventID;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct ADS_BACKLINK
    {
        uint32_t RemoteID;
        uint16_t* ObjectName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct ADS_TYPEDNAME
    {
        uint16_t* ObjectName;
        uint32_t Level;
        uint32_t Interval;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct ADS_HOLD
    {
        uint16_t* ObjectName;
        uint32_t Amount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct ADS_NETADDRESS
    {
        uint32_t AddressType;
        uint32_t AddressLength;
        uint8_t* Address;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct ADS_REPLICAPOINTER
    {
        uint16_t* ServerName;
        uint32_t ReplicaType;
        uint32_t ReplicaNumber;
        uint32_t Count;
        Windows::Win32::ActiveDirectory::ADS_NETADDRESS* ReplicaAddressHints;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct ADS_FAXNUMBER
    {
        uint16_t* TelephoneNumber;
        uint32_t NumberOfBits;
        uint8_t* Parameters;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct ADS_EMAIL
    {
        uint16_t* Address;
        uint32_t Type;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct ADS_DN_WITH_BINARY
    {
        uint32_t dwLength;
        uint8_t* lpBinaryValue;
        uint16_t* pszDNString;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct ADS_DN_WITH_STRING
    {
        uint16_t* pszStringValue;
        uint16_t* pszDNString;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct SYSTEMTIME
    {
        uint16_t wYear;
        uint16_t wMonth;
        uint16_t wDayOfWeek;
        uint16_t wDay;
        uint16_t wHour;
        uint16_t wMinute;
        uint16_t wSecond;
        uint16_t wMilliseconds;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    union LARGE_INTEGER
    {
        struct _Anonymous_e__Struct
        {
            uint32_t LowPart;
            int32_t HighPart;
        };
        struct _u_e__Struct
        {
            uint32_t LowPart;
            int32_t HighPart;
        };
        _Anonymous_e__Struct Anonymous;
        _u_e__Struct u;
        int64_t QuadPart;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct ADSVALUE
    {
        union _Anonymous_e__Union
        {
            uint16_t* DNString;
            uint16_t* CaseExactString;
            uint16_t* CaseIgnoreString;
            uint16_t* PrintableString;
            uint16_t* NumericString;
            uint32_t Boolean;
            uint32_t Integer;
            Windows::Win32::ActiveDirectory::ADS_OCTET_STRING OctetString;
            Windows::Win32::WindowsProgramming::SYSTEMTIME UTCTime;
            Windows::Win32::SystemServices::LARGE_INTEGER LargeInteger;
            uint16_t* ClassName;
            Windows::Win32::ActiveDirectory::ADS_PROV_SPECIFIC ProviderSpecific;
            Windows::Win32::ActiveDirectory::ADS_CASEIGNORE_LIST* pCaseIgnoreList;
            Windows::Win32::ActiveDirectory::ADS_OCTET_LIST* pOctetList;
            Windows::Win32::ActiveDirectory::ADS_PATH* pPath;
            Windows::Win32::ActiveDirectory::ADS_POSTALADDRESS* pPostalAddress;
            Windows::Win32::ActiveDirectory::ADS_TIMESTAMP Timestamp;
            Windows::Win32::ActiveDirectory::ADS_BACKLINK BackLink;
            Windows::Win32::ActiveDirectory::ADS_TYPEDNAME* pTypedName;
            Windows::Win32::ActiveDirectory::ADS_HOLD Hold;
            Windows::Win32::ActiveDirectory::ADS_NETADDRESS* pNetAddress;
            Windows::Win32::ActiveDirectory::ADS_REPLICAPOINTER* pReplicaPointer;
            Windows::Win32::ActiveDirectory::ADS_FAXNUMBER* pFaxNumber;
            Windows::Win32::ActiveDirectory::ADS_EMAIL Email;
            Windows::Win32::ActiveDirectory::ADS_NT_SECURITY_DESCRIPTOR SecurityDescriptor;
            Windows::Win32::ActiveDirectory::ADS_DN_WITH_BINARY* pDNWithBinary;
            Windows::Win32::ActiveDirectory::ADS_DN_WITH_STRING* pDNWithString;
        };
        Windows::Win32::ActiveDirectory::ADSTYPEENUM dwType;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct ADS_ATTR_INFO
    {
        uint16_t* pszAttrName;
        uint32_t dwControlCode;
        Windows::Win32::ActiveDirectory::ADSTYPEENUM dwADsType;
        Windows::Win32::ActiveDirectory::ADSVALUE* pADsValues;
        uint32_t dwNumValues;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct ADS_OBJECT_INFO
    {
        uint16_t* pszRDN;
        uint16_t* pszObjectDN;
        uint16_t* pszParentDN;
        uint16_t* pszSchemaDN;
        uint16_t* pszClassName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct ads_searchpref_info
    {
        Windows::Win32::ActiveDirectory::ADS_SEARCHPREF_ENUM dwSearchPref;
        Windows::Win32::ActiveDirectory::ADSVALUE vValue;
        Windows::Win32::ActiveDirectory::ADS_STATUSENUM dwStatus;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct ads_search_column
    {
        uint16_t* pszAttrName;
        Windows::Win32::ActiveDirectory::ADSTYPEENUM dwADsType;
        Windows::Win32::ActiveDirectory::ADSVALUE* pADsValues;
        uint32_t dwNumValues;
        Windows::Win32::SystemServices::HANDLE hReserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct ADS_ATTR_DEF
    {
        uint16_t* pszAttrName;
        Windows::Win32::ActiveDirectory::ADSTYPEENUM dwADsType;
        uint32_t dwMinRange;
        uint32_t dwMaxRange;
        Windows::Win32::SystemServices::BOOL fMultiValued;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct ADS_CLASS_DEF
    {
        uint16_t* pszClassName;
        uint32_t dwMandatoryAttrs;
        uint16_t** ppszMandatoryAttrs;
        uint32_t optionalAttrs;
        uint16_t*** ppszOptionalAttrs;
        uint32_t dwNamingAttrs;
        uint16_t*** ppszNamingAttrs;
        uint32_t dwSuperClasses;
        uint16_t*** ppszSuperClasses;
        Windows::Win32::SystemServices::BOOL fIsContainer;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct ADS_SORTKEY
    {
        uint16_t* pszAttrType;
        uint16_t* pszReserved;
        uint8_t fReverseorder;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct ADS_VLV
    {
        uint32_t dwBeforeCount;
        uint32_t dwAfterCount;
        uint32_t dwOffset;
        uint32_t dwContentCount;
        uint16_t* pszTarget;
        uint32_t dwContextIDLength;
        uint8_t* lpContextID;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DSOBJECT
    {
        uint32_t dwFlags;
        uint32_t dwProviderFlags;
        uint32_t offsetName;
        uint32_t offsetClass;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DSOBJECTNAMES
    {
        ::win32::guid clsidNamespace;
        uint32_t cItems;
        Windows::Win32::ActiveDirectory::DSOBJECT aObjects[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DSDISPLAYSPECOPTIONS
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        uint32_t offsetAttribPrefix;
        uint32_t offsetUserName;
        uint32_t offsetPassword;
        uint32_t offsetServer;
        uint32_t offsetServerConfigPath;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DSPROPERTYPAGEINFO
    {
        uint32_t offsetString;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DOMAINDESC
    {
        uint16_t* pszName;
        uint16_t* pszPath;
        uint16_t* pszNCName;
        uint16_t* pszTrustParent;
        uint16_t* pszObjectClass;
        uint32_t ulFlags;
        Windows::Win32::SystemServices::BOOL fDownLevel;
        Windows::Win32::ActiveDirectory::DOMAINDESC* pdChildList;
        Windows::Win32::ActiveDirectory::DOMAINDESC* pdNextSibling;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DOMAIN_TREE
    {
        uint32_t dsSize;
        uint32_t dwCount;
        Windows::Win32::ActiveDirectory::DOMAINDESC aDomains[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DSCLASSCREATIONINFO
    {
        uint32_t dwFlags;
        ::win32::guid clsidWizardDialog;
        ::win32::guid clsidWizardPrimaryPage;
        uint32_t cWizardExtensions;
        ::win32::guid aWizardExtensions[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct HWND
    {
        intptr_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DSBROWSEINFOW
    {
        uint32_t cbStruct;
        Windows::Win32::WindowsAndMessaging::HWND hwndOwner;
        uint16_t* pszCaption;
        uint16_t* pszTitle;
        uint16_t* pszRoot;
        uint16_t* pszPath;
        uint32_t cchPath;
        uint32_t dwFlags;
        Windows::Win32::ActiveDirectory::BFFCALLBACK* pfnCallback;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
        uint32_t dwReturnFormat;
        uint16_t* pUserName;
        uint16_t* pPassword;
        uint16_t* pszObjectClass;
        uint32_t cchObjectClass;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DSBROWSEINFOA
    {
        uint32_t cbStruct;
        Windows::Win32::WindowsAndMessaging::HWND hwndOwner;
        int8_t* pszCaption;
        int8_t* pszTitle;
        uint16_t* pszRoot;
        uint16_t* pszPath;
        uint32_t cchPath;
        uint32_t dwFlags;
        Windows::Win32::ActiveDirectory::BFFCALLBACK* pfnCallback;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
        uint32_t dwReturnFormat;
        uint16_t* pUserName;
        uint16_t* pPassword;
        uint16_t* pszObjectClass;
        uint32_t cchObjectClass;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DSBITEMW
    {
        uint32_t cbStruct;
        uint16_t* pszADsPath;
        uint16_t* pszClass;
        uint32_t dwMask;
        uint32_t dwState;
        uint32_t dwStateMask;
        uint16_t szDisplayName[64];
        uint16_t szIconLocation[260];
        int32_t iIconResID;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DSBITEMA
    {
        uint32_t cbStruct;
        uint16_t* pszADsPath;
        uint16_t* pszClass;
        uint32_t dwMask;
        uint32_t dwState;
        uint32_t dwStateMask;
        int8_t szDisplayName[64];
        int8_t szIconLocation[260];
        int32_t iIconResID;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DSOP_UPLEVEL_FILTER_FLAGS
    {
        uint32_t flBothModes;
        uint32_t flMixedModeOnly;
        uint32_t flNativeModeOnly;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DSOP_FILTER_FLAGS
    {
        Windows::Win32::ActiveDirectory::DSOP_UPLEVEL_FILTER_FLAGS Uplevel;
        uint32_t flDownlevel;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DSOP_SCOPE_INIT_INFO
    {
        uint32_t cbSize;
        uint32_t flType;
        uint32_t flScope;
        Windows::Win32::ActiveDirectory::DSOP_FILTER_FLAGS FilterFlags;
        uint16_t* pwzDcName;
        uint16_t* pwzADsPath;
        int32_t hr;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DSOP_INIT_INFO
    {
        uint32_t cbSize;
        uint16_t* pwzTargetComputer;
        uint32_t cDsScopeInfos;
        Windows::Win32::ActiveDirectory::DSOP_SCOPE_INIT_INFO* aDsScopeInfos;
        uint32_t flOptions;
        uint32_t cAttributesToFetch;
        uint16_t** apwzAttributeNames;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DS_SELECTION
    {
        uint16_t* pwzName;
        uint16_t* pwzADsPath;
        uint16_t* pwzClass;
        uint16_t* pwzUPN;
        Windows::Win32::Automation::VARIANT* pvarFetchedAttributes;
        uint32_t flScopeType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DS_SELECTION_LIST
    {
        uint32_t cItems;
        uint32_t cFetchedAttributes;
        Windows::Win32::ActiveDirectory::DS_SELECTION aDsSelection[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DSQUERYINITPARAMS
    {
        uint32_t cbStruct;
        uint32_t dwFlags;
        uint16_t* pDefaultScope;
        uint16_t* pDefaultSaveLocation;
        uint16_t* pUserName;
        uint16_t* pPassword;
        uint16_t* pServer;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DSCOLUMN
    {
        uint32_t dwFlags;
        int32_t fmt;
        int32_t cx;
        int32_t idsName;
        int32_t offsetProperty;
        uint32_t dwReserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DSQUERYPARAMS
    {
        uint32_t cbStruct;
        uint32_t dwFlags;
        Windows::Win32::SystemServices::HINSTANCE hInstance;
        int32_t offsetQuery;
        int32_t iColumns;
        uint32_t dwReserved;
        Windows::Win32::ActiveDirectory::DSCOLUMN aColumns[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DSQUERYCLASSLIST
    {
        uint32_t cbStruct;
        int32_t cClasses;
        uint32_t offsetClass[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DSA_NEWOBJ_DISPINFO
    {
        uint32_t dwSize;
        Windows::Win32::Gdi::HICON hObjClassIcon;
        uint16_t* lpszWizTitle;
        uint16_t* lpszContDisplayName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct ADSPROPINITPARAMS
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        int32_t hr;
        Windows::Win32::ActiveDirectory::IDirectoryObject* pDsObj;
        uint16_t* pwzCN;
        Windows::Win32::ActiveDirectory::ADS_ATTR_INFO* pWritableAttrs;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct ADSPROPERROR
    {
        Windows::Win32::WindowsAndMessaging::HWND hwndPage;
        uint16_t* pszPageTitle;
        uint16_t* pszObjPath;
        uint16_t* pszObjClass;
        int32_t hr;
        uint16_t* pszError;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct SCHEDULE_HEADER
    {
        uint32_t Type;
        uint32_t Offset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct SCHEDULE
    {
        uint32_t Size;
        uint32_t Bandwidth;
        uint32_t NumberOfSchedules;
        Windows::Win32::ActiveDirectory::SCHEDULE_HEADER Schedules[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DS_NAME_RESULT_ITEMA
    {
        uint32_t status;
        int8_t* pDomain;
        int8_t* pName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DS_NAME_RESULTA
    {
        uint32_t cItems;
        Windows::Win32::ActiveDirectory::DS_NAME_RESULT_ITEMA* rItems;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DS_NAME_RESULT_ITEMW
    {
        uint32_t status;
        uint16_t* pDomain;
        uint16_t* pName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DS_NAME_RESULTW
    {
        uint32_t cItems;
        Windows::Win32::ActiveDirectory::DS_NAME_RESULT_ITEMW* rItems;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DS_REPSYNCALL_SYNCA
    {
        int8_t* pszSrcId;
        int8_t* pszDstId;
        int8_t* pszNC;
        ::win32::guid* pguidSrc;
        ::win32::guid* pguidDst;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DS_REPSYNCALL_SYNCW
    {
        uint16_t* pszSrcId;
        uint16_t* pszDstId;
        uint16_t* pszNC;
        ::win32::guid* pguidSrc;
        ::win32::guid* pguidDst;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DS_REPSYNCALL_ERRINFOA
    {
        int8_t* pszSvrId;
        Windows::Win32::ActiveDirectory::DS_REPSYNCALL_ERROR error;
        uint32_t dwWin32Err;
        int8_t* pszSrcId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DS_REPSYNCALL_ERRINFOW
    {
        uint16_t* pszSvrId;
        Windows::Win32::ActiveDirectory::DS_REPSYNCALL_ERROR error;
        uint32_t dwWin32Err;
        uint16_t* pszSrcId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DS_REPSYNCALL_UPDATEA
    {
        Windows::Win32::ActiveDirectory::DS_REPSYNCALL_EVENT event;
        Windows::Win32::ActiveDirectory::DS_REPSYNCALL_ERRINFOA* pErrInfo;
        Windows::Win32::ActiveDirectory::DS_REPSYNCALL_SYNCA* pSync;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DS_REPSYNCALL_UPDATEW
    {
        Windows::Win32::ActiveDirectory::DS_REPSYNCALL_EVENT event;
        Windows::Win32::ActiveDirectory::DS_REPSYNCALL_ERRINFOW* pErrInfo;
        Windows::Win32::ActiveDirectory::DS_REPSYNCALL_SYNCW* pSync;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DS_SITE_COST_INFO
    {
        uint32_t errorCode;
        uint32_t cost;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DS_SCHEMA_GUID_MAPA
    {
        ::win32::guid guid;
        uint32_t guidType;
        int8_t* pName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DS_SCHEMA_GUID_MAPW
    {
        ::win32::guid guid;
        uint32_t guidType;
        uint16_t* pName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DS_DOMAIN_CONTROLLER_INFO_1A
    {
        int8_t* NetbiosName;
        int8_t* DnsHostName;
        int8_t* SiteName;
        int8_t* ComputerObjectName;
        int8_t* ServerObjectName;
        Windows::Win32::SystemServices::BOOL fIsPdc;
        Windows::Win32::SystemServices::BOOL fDsEnabled;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DS_DOMAIN_CONTROLLER_INFO_1W
    {
        uint16_t* NetbiosName;
        uint16_t* DnsHostName;
        uint16_t* SiteName;
        uint16_t* ComputerObjectName;
        uint16_t* ServerObjectName;
        Windows::Win32::SystemServices::BOOL fIsPdc;
        Windows::Win32::SystemServices::BOOL fDsEnabled;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DS_DOMAIN_CONTROLLER_INFO_2A
    {
        int8_t* NetbiosName;
        int8_t* DnsHostName;
        int8_t* SiteName;
        int8_t* SiteObjectName;
        int8_t* ComputerObjectName;
        int8_t* ServerObjectName;
        int8_t* NtdsDsaObjectName;
        Windows::Win32::SystemServices::BOOL fIsPdc;
        Windows::Win32::SystemServices::BOOL fDsEnabled;
        Windows::Win32::SystemServices::BOOL fIsGc;
        ::win32::guid SiteObjectGuid;
        ::win32::guid ComputerObjectGuid;
        ::win32::guid ServerObjectGuid;
        ::win32::guid NtdsDsaObjectGuid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DS_DOMAIN_CONTROLLER_INFO_2W
    {
        uint16_t* NetbiosName;
        uint16_t* DnsHostName;
        uint16_t* SiteName;
        uint16_t* SiteObjectName;
        uint16_t* ComputerObjectName;
        uint16_t* ServerObjectName;
        uint16_t* NtdsDsaObjectName;
        Windows::Win32::SystemServices::BOOL fIsPdc;
        Windows::Win32::SystemServices::BOOL fDsEnabled;
        Windows::Win32::SystemServices::BOOL fIsGc;
        ::win32::guid SiteObjectGuid;
        ::win32::guid ComputerObjectGuid;
        ::win32::guid ServerObjectGuid;
        ::win32::guid NtdsDsaObjectGuid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DS_DOMAIN_CONTROLLER_INFO_3A
    {
        int8_t* NetbiosName;
        int8_t* DnsHostName;
        int8_t* SiteName;
        int8_t* SiteObjectName;
        int8_t* ComputerObjectName;
        int8_t* ServerObjectName;
        int8_t* NtdsDsaObjectName;
        Windows::Win32::SystemServices::BOOL fIsPdc;
        Windows::Win32::SystemServices::BOOL fDsEnabled;
        Windows::Win32::SystemServices::BOOL fIsGc;
        Windows::Win32::SystemServices::BOOL fIsRodc;
        ::win32::guid SiteObjectGuid;
        ::win32::guid ComputerObjectGuid;
        ::win32::guid ServerObjectGuid;
        ::win32::guid NtdsDsaObjectGuid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DS_DOMAIN_CONTROLLER_INFO_3W
    {
        uint16_t* NetbiosName;
        uint16_t* DnsHostName;
        uint16_t* SiteName;
        uint16_t* SiteObjectName;
        uint16_t* ComputerObjectName;
        uint16_t* ServerObjectName;
        uint16_t* NtdsDsaObjectName;
        Windows::Win32::SystemServices::BOOL fIsPdc;
        Windows::Win32::SystemServices::BOOL fDsEnabled;
        Windows::Win32::SystemServices::BOOL fIsGc;
        Windows::Win32::SystemServices::BOOL fIsRodc;
        ::win32::guid SiteObjectGuid;
        ::win32::guid ComputerObjectGuid;
        ::win32::guid ServerObjectGuid;
        ::win32::guid NtdsDsaObjectGuid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DS_REPL_NEIGHBORW
    {
        uint16_t* pszNamingContext;
        uint16_t* pszSourceDsaDN;
        uint16_t* pszSourceDsaAddress;
        uint16_t* pszAsyncIntersiteTransportDN;
        uint32_t dwReplicaFlags;
        uint32_t dwReserved;
        ::win32::guid uuidNamingContextObjGuid;
        ::win32::guid uuidSourceDsaObjGuid;
        ::win32::guid uuidSourceDsaInvocationID;
        ::win32::guid uuidAsyncIntersiteTransportObjGuid;
        int64_t usnLastObjChangeSynced;
        int64_t usnAttributeFilter;
        Windows::Win32::WindowsProgramming::FILETIME ftimeLastSyncSuccess;
        Windows::Win32::WindowsProgramming::FILETIME ftimeLastSyncAttempt;
        uint32_t dwLastSyncResult;
        uint32_t cNumConsecutiveSyncFailures;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DS_REPL_NEIGHBORW_BLOB
    {
        uint32_t oszNamingContext;
        uint32_t oszSourceDsaDN;
        uint32_t oszSourceDsaAddress;
        uint32_t oszAsyncIntersiteTransportDN;
        uint32_t dwReplicaFlags;
        uint32_t dwReserved;
        ::win32::guid uuidNamingContextObjGuid;
        ::win32::guid uuidSourceDsaObjGuid;
        ::win32::guid uuidSourceDsaInvocationID;
        ::win32::guid uuidAsyncIntersiteTransportObjGuid;
        int64_t usnLastObjChangeSynced;
        int64_t usnAttributeFilter;
        Windows::Win32::WindowsProgramming::FILETIME ftimeLastSyncSuccess;
        Windows::Win32::WindowsProgramming::FILETIME ftimeLastSyncAttempt;
        uint32_t dwLastSyncResult;
        uint32_t cNumConsecutiveSyncFailures;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DS_REPL_NEIGHBORSW
    {
        uint32_t cNumNeighbors;
        uint32_t dwReserved;
        Windows::Win32::ActiveDirectory::DS_REPL_NEIGHBORW rgNeighbor[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DS_REPL_CURSOR
    {
        ::win32::guid uuidSourceDsaInvocationID;
        int64_t usnAttributeFilter;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DS_REPL_CURSOR_2
    {
        ::win32::guid uuidSourceDsaInvocationID;
        int64_t usnAttributeFilter;
        Windows::Win32::WindowsProgramming::FILETIME ftimeLastSyncSuccess;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DS_REPL_CURSOR_3W
    {
        ::win32::guid uuidSourceDsaInvocationID;
        int64_t usnAttributeFilter;
        Windows::Win32::WindowsProgramming::FILETIME ftimeLastSyncSuccess;
        uint16_t* pszSourceDsaDN;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DS_REPL_CURSOR_BLOB
    {
        ::win32::guid uuidSourceDsaInvocationID;
        int64_t usnAttributeFilter;
        Windows::Win32::WindowsProgramming::FILETIME ftimeLastSyncSuccess;
        uint32_t oszSourceDsaDN;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DS_REPL_CURSORS
    {
        uint32_t cNumCursors;
        uint32_t dwReserved;
        Windows::Win32::ActiveDirectory::DS_REPL_CURSOR rgCursor[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DS_REPL_CURSORS_2
    {
        uint32_t cNumCursors;
        uint32_t dwEnumerationContext;
        Windows::Win32::ActiveDirectory::DS_REPL_CURSOR_2 rgCursor[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DS_REPL_CURSORS_3W
    {
        uint32_t cNumCursors;
        uint32_t dwEnumerationContext;
        Windows::Win32::ActiveDirectory::DS_REPL_CURSOR_3W rgCursor[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DS_REPL_ATTR_META_DATA
    {
        uint16_t* pszAttributeName;
        uint32_t dwVersion;
        Windows::Win32::WindowsProgramming::FILETIME ftimeLastOriginatingChange;
        ::win32::guid uuidLastOriginatingDsaInvocationID;
        int64_t usnOriginatingChange;
        int64_t usnLocalChange;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DS_REPL_ATTR_META_DATA_2
    {
        uint16_t* pszAttributeName;
        uint32_t dwVersion;
        Windows::Win32::WindowsProgramming::FILETIME ftimeLastOriginatingChange;
        ::win32::guid uuidLastOriginatingDsaInvocationID;
        int64_t usnOriginatingChange;
        int64_t usnLocalChange;
        uint16_t* pszLastOriginatingDsaDN;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DS_REPL_ATTR_META_DATA_BLOB
    {
        uint32_t oszAttributeName;
        uint32_t dwVersion;
        Windows::Win32::WindowsProgramming::FILETIME ftimeLastOriginatingChange;
        ::win32::guid uuidLastOriginatingDsaInvocationID;
        int64_t usnOriginatingChange;
        int64_t usnLocalChange;
        uint32_t oszLastOriginatingDsaDN;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DS_REPL_OBJ_META_DATA
    {
        uint32_t cNumEntries;
        uint32_t dwReserved;
        Windows::Win32::ActiveDirectory::DS_REPL_ATTR_META_DATA rgMetaData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DS_REPL_OBJ_META_DATA_2
    {
        uint32_t cNumEntries;
        uint32_t dwReserved;
        Windows::Win32::ActiveDirectory::DS_REPL_ATTR_META_DATA_2 rgMetaData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DS_REPL_KCC_DSA_FAILUREW
    {
        uint16_t* pszDsaDN;
        ::win32::guid uuidDsaObjGuid;
        Windows::Win32::WindowsProgramming::FILETIME ftimeFirstFailure;
        uint32_t cNumFailures;
        uint32_t dwLastResult;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DS_REPL_KCC_DSA_FAILUREW_BLOB
    {
        uint32_t oszDsaDN;
        ::win32::guid uuidDsaObjGuid;
        Windows::Win32::WindowsProgramming::FILETIME ftimeFirstFailure;
        uint32_t cNumFailures;
        uint32_t dwLastResult;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DS_REPL_KCC_DSA_FAILURESW
    {
        uint32_t cNumEntries;
        uint32_t dwReserved;
        Windows::Win32::ActiveDirectory::DS_REPL_KCC_DSA_FAILUREW rgDsaFailure[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DS_REPL_OPW
    {
        Windows::Win32::WindowsProgramming::FILETIME ftimeEnqueued;
        uint32_t ulSerialNumber;
        uint32_t ulPriority;
        Windows::Win32::ActiveDirectory::DS_REPL_OP_TYPE OpType;
        uint32_t ulOptions;
        uint16_t* pszNamingContext;
        uint16_t* pszDsaDN;
        uint16_t* pszDsaAddress;
        ::win32::guid uuidNamingContextObjGuid;
        ::win32::guid uuidDsaObjGuid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DS_REPL_OPW_BLOB
    {
        Windows::Win32::WindowsProgramming::FILETIME ftimeEnqueued;
        uint32_t ulSerialNumber;
        uint32_t ulPriority;
        Windows::Win32::ActiveDirectory::DS_REPL_OP_TYPE OpType;
        uint32_t ulOptions;
        uint32_t oszNamingContext;
        uint32_t oszDsaDN;
        uint32_t oszDsaAddress;
        ::win32::guid uuidNamingContextObjGuid;
        ::win32::guid uuidDsaObjGuid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DS_REPL_PENDING_OPSW
    {
        Windows::Win32::WindowsProgramming::FILETIME ftimeCurrentOpStarted;
        uint32_t cNumPendingOps;
        Windows::Win32::ActiveDirectory::DS_REPL_OPW rgPendingOp[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DS_REPL_VALUE_META_DATA
    {
        uint16_t* pszAttributeName;
        uint16_t* pszObjectDn;
        uint32_t cbData;
        uint8_t* pbData;
        Windows::Win32::WindowsProgramming::FILETIME ftimeDeleted;
        Windows::Win32::WindowsProgramming::FILETIME ftimeCreated;
        uint32_t dwVersion;
        Windows::Win32::WindowsProgramming::FILETIME ftimeLastOriginatingChange;
        ::win32::guid uuidLastOriginatingDsaInvocationID;
        int64_t usnOriginatingChange;
        int64_t usnLocalChange;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DS_REPL_VALUE_META_DATA_2
    {
        uint16_t* pszAttributeName;
        uint16_t* pszObjectDn;
        uint32_t cbData;
        uint8_t* pbData;
        Windows::Win32::WindowsProgramming::FILETIME ftimeDeleted;
        Windows::Win32::WindowsProgramming::FILETIME ftimeCreated;
        uint32_t dwVersion;
        Windows::Win32::WindowsProgramming::FILETIME ftimeLastOriginatingChange;
        ::win32::guid uuidLastOriginatingDsaInvocationID;
        int64_t usnOriginatingChange;
        int64_t usnLocalChange;
        uint16_t* pszLastOriginatingDsaDN;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DS_REPL_VALUE_META_DATA_EXT
    {
        uint16_t* pszAttributeName;
        uint16_t* pszObjectDn;
        uint32_t cbData;
        uint8_t* pbData;
        Windows::Win32::WindowsProgramming::FILETIME ftimeDeleted;
        Windows::Win32::WindowsProgramming::FILETIME ftimeCreated;
        uint32_t dwVersion;
        Windows::Win32::WindowsProgramming::FILETIME ftimeLastOriginatingChange;
        ::win32::guid uuidLastOriginatingDsaInvocationID;
        int64_t usnOriginatingChange;
        int64_t usnLocalChange;
        uint16_t* pszLastOriginatingDsaDN;
        uint32_t dwUserIdentifier;
        uint32_t dwPriorLinkState;
        uint32_t dwCurrentLinkState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DS_REPL_VALUE_META_DATA_BLOB
    {
        uint32_t oszAttributeName;
        uint32_t oszObjectDn;
        uint32_t cbData;
        uint32_t obData;
        Windows::Win32::WindowsProgramming::FILETIME ftimeDeleted;
        Windows::Win32::WindowsProgramming::FILETIME ftimeCreated;
        uint32_t dwVersion;
        Windows::Win32::WindowsProgramming::FILETIME ftimeLastOriginatingChange;
        ::win32::guid uuidLastOriginatingDsaInvocationID;
        int64_t usnOriginatingChange;
        int64_t usnLocalChange;
        uint32_t oszLastOriginatingDsaDN;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DS_REPL_VALUE_META_DATA_BLOB_EXT
    {
        uint32_t oszAttributeName;
        uint32_t oszObjectDn;
        uint32_t cbData;
        uint32_t obData;
        Windows::Win32::WindowsProgramming::FILETIME ftimeDeleted;
        Windows::Win32::WindowsProgramming::FILETIME ftimeCreated;
        uint32_t dwVersion;
        Windows::Win32::WindowsProgramming::FILETIME ftimeLastOriginatingChange;
        ::win32::guid uuidLastOriginatingDsaInvocationID;
        int64_t usnOriginatingChange;
        int64_t usnLocalChange;
        uint32_t oszLastOriginatingDsaDN;
        uint32_t dwUserIdentifier;
        uint32_t dwPriorLinkState;
        uint32_t dwCurrentLinkState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DS_REPL_ATTR_VALUE_META_DATA
    {
        uint32_t cNumEntries;
        uint32_t dwEnumerationContext;
        Windows::Win32::ActiveDirectory::DS_REPL_VALUE_META_DATA rgMetaData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DS_REPL_ATTR_VALUE_META_DATA_2
    {
        uint32_t cNumEntries;
        uint32_t dwEnumerationContext;
        Windows::Win32::ActiveDirectory::DS_REPL_VALUE_META_DATA_2 rgMetaData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DS_REPL_ATTR_VALUE_META_DATA_EXT
    {
        uint32_t cNumEntries;
        uint32_t dwEnumerationContext;
        Windows::Win32::ActiveDirectory::DS_REPL_VALUE_META_DATA_EXT rgMetaData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DS_REPL_QUEUE_STATISTICSW
    {
        Windows::Win32::WindowsProgramming::FILETIME ftimeCurrentOpStarted;
        uint32_t cNumPendingOps;
        Windows::Win32::WindowsProgramming::FILETIME ftimeOldestSync;
        Windows::Win32::WindowsProgramming::FILETIME ftimeOldestAdd;
        Windows::Win32::WindowsProgramming::FILETIME ftimeOldestMod;
        Windows::Win32::WindowsProgramming::FILETIME ftimeOldestDel;
        Windows::Win32::WindowsProgramming::FILETIME ftimeOldestUpdRefs;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DSROLE_PRIMARY_DOMAIN_INFO_BASIC
    {
        Windows::Win32::ActiveDirectory::DSROLE_MACHINE_ROLE MachineRole;
        uint32_t Flags;
        uint16_t* DomainNameFlat;
        uint16_t* DomainNameDns;
        uint16_t* DomainForestName;
        ::win32::guid DomainGuid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DSROLE_UPGRADE_STATUS_INFO
    {
        uint32_t OperationState;
        Windows::Win32::ActiveDirectory::DSROLE_SERVER_STATE PreviousServerState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DSROLE_OPERATION_STATE_INFO
    {
        Windows::Win32::ActiveDirectory::DSROLE_OPERATION_STATE OperationState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DOMAIN_CONTROLLER_INFOA
    {
        int8_t* DomainControllerName;
        int8_t* DomainControllerAddress;
        uint32_t DomainControllerAddressType;
        ::win32::guid DomainGuid;
        int8_t* DomainName;
        int8_t* DnsForestName;
        uint32_t Flags;
        int8_t* DcSiteName;
        int8_t* ClientSiteName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DOMAIN_CONTROLLER_INFOW
    {
        uint16_t* DomainControllerName;
        uint16_t* DomainControllerAddress;
        uint32_t DomainControllerAddressType;
        ::win32::guid DomainGuid;
        uint16_t* DomainName;
        uint16_t* DnsForestName;
        uint32_t Flags;
        uint16_t* DcSiteName;
        uint16_t* ClientSiteName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DS_DOMAIN_TRUSTSW
    {
        uint16_t* NetbiosDomainName;
        uint16_t* DnsDomainName;
        uint32_t Flags;
        uint32_t ParentIndex;
        uint32_t TrustType;
        uint32_t TrustAttributes;
        void* DomainSid;
        ::win32::guid DomainGuid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct DS_DOMAIN_TRUSTSA
    {
        int8_t* NetbiosDomainName;
        int8_t* DnsDomainName;
        uint32_t Flags;
        uint32_t ParentIndex;
        uint32_t TrustType;
        uint32_t TrustAttributes;
        void* DomainSid;
        ::win32::guid DomainGuid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_SSID
    {
        uint32_t uSSIDLength;
        uint8_t ucSSID[32];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_AUTH_CIPHER_PAIR
    {
        Windows::Win32::NativeWiFi::DOT11_AUTH_ALGORITHM AuthAlgoId;
        Windows::Win32::NativeWiFi::DOT11_CIPHER_ALGORITHM CipherAlgoId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_OI
    {
        uint16_t OILength;
        uint8_t OI[5];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_ACCESSNETWORKOPTIONS
    {
        uint8_t AccessNetworkType;
        uint8_t Internet;
        uint8_t ASRA;
        uint8_t ESR;
        uint8_t UESA;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_VENUEINFO
    {
        uint8_t VenueGroup;
        uint8_t VenueType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_STATISTICS_VALUE
    {
        uint32_t Oid;
        uint32_t DataLength;
        uint8_t Data[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_STATISTICS_VALUE_EX
    {
        uint32_t Oid;
        uint32_t DataLength;
        uint32_t Length;
        uint8_t Data[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_VAR_DATA_DESC
    {
        uint16_t Length;
        uint16_t MaximumLength;
        size_t Offset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_OBJECT_HEADER
    {
        uint8_t Type;
        uint8_t Revision;
        uint16_t Size;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_STATISTICS_INFO
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint32_t SupportedStatistics;
        uint64_t ifInDiscards;
        uint64_t ifInErrors;
        uint64_t ifHCInOctets;
        uint64_t ifHCInUcastPkts;
        uint64_t ifHCInMulticastPkts;
        uint64_t ifHCInBroadcastPkts;
        uint64_t ifHCOutOctets;
        uint64_t ifHCOutUcastPkts;
        uint64_t ifHCOutMulticastPkts;
        uint64_t ifHCOutBroadcastPkts;
        uint64_t ifOutErrors;
        uint64_t ifOutDiscards;
        uint64_t ifHCInUcastOctets;
        uint64_t ifHCInMulticastOctets;
        uint64_t ifHCInBroadcastOctets;
        uint64_t ifHCOutUcastOctets;
        uint64_t ifHCOutMulticastOctets;
        uint64_t ifHCOutBroadcastOctets;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_INTERRUPT_MODERATION_PARAMETERS
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint32_t Flags;
        Windows::Win32::NativeWiFi::NDIS_INTERRUPT_MODERATION InterruptModeration;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_TIMEOUT_DPC_REQUEST_CAPABILITIES
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint32_t Flags;
        uint32_t TimeoutArrayLength;
        uint32_t TimeoutArray[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_PCI_DEVICE_CUSTOM_PROPERTIES
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint32_t DeviceType;
        uint32_t CurrentSpeedAndMode;
        uint32_t CurrentPayloadSize;
        uint32_t MaxPayloadSize;
        uint32_t MaxReadRequestSize;
        uint32_t CurrentLinkSpeed;
        uint32_t CurrentLinkWidth;
        uint32_t MaxLinkSpeed;
        uint32_t MaxLinkWidth;
        uint32_t PciExpressVersion;
        uint32_t InterruptType;
        uint32_t MaxInterruptMessages;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_802_11_STATUS_INDICATION
    {
        Windows::Win32::NativeWiFi::NDIS_802_11_STATUS_TYPE StatusType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_802_11_AUTHENTICATION_REQUEST
    {
        uint32_t Length;
        uint8_t Bssid[6];
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct PMKID_CANDIDATE
    {
        uint8_t BSSID[6];
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_802_11_PMKID_CANDIDATE_LIST
    {
        uint32_t Version;
        uint32_t NumCandidates;
        Windows::Win32::NativeWiFi::PMKID_CANDIDATE CandidateList[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_802_11_NETWORK_TYPE_LIST
    {
        uint32_t NumberOfItems;
        Windows::Win32::NativeWiFi::NDIS_802_11_NETWORK_TYPE NetworkType[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_802_11_CONFIGURATION_FH
    {
        uint32_t Length;
        uint32_t HopPattern;
        uint32_t HopSet;
        uint32_t DwellTime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_802_11_CONFIGURATION
    {
        uint32_t Length;
        uint32_t BeaconPeriod;
        uint32_t ATIMWindow;
        uint32_t DSConfig;
        Windows::Win32::NativeWiFi::NDIS_802_11_CONFIGURATION_FH FHConfig;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_802_11_STATISTICS
    {
        uint32_t Length;
        Windows::Win32::SystemServices::LARGE_INTEGER TransmittedFragmentCount;
        Windows::Win32::SystemServices::LARGE_INTEGER MulticastTransmittedFrameCount;
        Windows::Win32::SystemServices::LARGE_INTEGER FailedCount;
        Windows::Win32::SystemServices::LARGE_INTEGER RetryCount;
        Windows::Win32::SystemServices::LARGE_INTEGER MultipleRetryCount;
        Windows::Win32::SystemServices::LARGE_INTEGER RTSSuccessCount;
        Windows::Win32::SystemServices::LARGE_INTEGER RTSFailureCount;
        Windows::Win32::SystemServices::LARGE_INTEGER ACKFailureCount;
        Windows::Win32::SystemServices::LARGE_INTEGER FrameDuplicateCount;
        Windows::Win32::SystemServices::LARGE_INTEGER ReceivedFragmentCount;
        Windows::Win32::SystemServices::LARGE_INTEGER MulticastReceivedFrameCount;
        Windows::Win32::SystemServices::LARGE_INTEGER FCSErrorCount;
        Windows::Win32::SystemServices::LARGE_INTEGER TKIPLocalMICFailures;
        Windows::Win32::SystemServices::LARGE_INTEGER TKIPICVErrorCount;
        Windows::Win32::SystemServices::LARGE_INTEGER TKIPCounterMeasuresInvoked;
        Windows::Win32::SystemServices::LARGE_INTEGER TKIPReplays;
        Windows::Win32::SystemServices::LARGE_INTEGER CCMPFormatErrors;
        Windows::Win32::SystemServices::LARGE_INTEGER CCMPReplays;
        Windows::Win32::SystemServices::LARGE_INTEGER CCMPDecryptErrors;
        Windows::Win32::SystemServices::LARGE_INTEGER FourWayHandshakeFailures;
        Windows::Win32::SystemServices::LARGE_INTEGER WEPUndecryptableCount;
        Windows::Win32::SystemServices::LARGE_INTEGER WEPICVErrorCount;
        Windows::Win32::SystemServices::LARGE_INTEGER DecryptSuccessCount;
        Windows::Win32::SystemServices::LARGE_INTEGER DecryptFailureCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_802_11_KEY
    {
        uint32_t Length;
        uint32_t KeyIndex;
        uint32_t KeyLength;
        uint8_t BSSID[6];
        uint64_t KeyRSC;
        uint8_t KeyMaterial[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_802_11_REMOVE_KEY
    {
        uint32_t Length;
        uint32_t KeyIndex;
        uint8_t BSSID[6];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_802_11_WEP
    {
        uint32_t Length;
        uint32_t KeyIndex;
        uint32_t KeyLength;
        uint8_t KeyMaterial[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_802_11_SSID
    {
        uint32_t SsidLength;
        uint8_t Ssid[32];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_WLAN_BSSID
    {
        uint32_t Length;
        uint8_t MacAddress[6];
        uint8_t Reserved[2];
        Windows::Win32::NativeWiFi::NDIS_802_11_SSID Ssid;
        uint32_t Privacy;
        int32_t Rssi;
        Windows::Win32::NativeWiFi::NDIS_802_11_NETWORK_TYPE NetworkTypeInUse;
        Windows::Win32::NativeWiFi::NDIS_802_11_CONFIGURATION Configuration;
        Windows::Win32::NativeWiFi::NDIS_802_11_NETWORK_INFRASTRUCTURE InfrastructureMode;
        uint8_t SupportedRates[8];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_802_11_BSSID_LIST
    {
        uint32_t NumberOfItems;
        Windows::Win32::NativeWiFi::NDIS_WLAN_BSSID Bssid[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_WLAN_BSSID_EX
    {
        uint32_t Length;
        uint8_t MacAddress[6];
        uint8_t Reserved[2];
        Windows::Win32::NativeWiFi::NDIS_802_11_SSID Ssid;
        uint32_t Privacy;
        int32_t Rssi;
        Windows::Win32::NativeWiFi::NDIS_802_11_NETWORK_TYPE NetworkTypeInUse;
        Windows::Win32::NativeWiFi::NDIS_802_11_CONFIGURATION Configuration;
        Windows::Win32::NativeWiFi::NDIS_802_11_NETWORK_INFRASTRUCTURE InfrastructureMode;
        uint8_t SupportedRates[16];
        uint32_t IELength;
        uint8_t IEs[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_802_11_BSSID_LIST_EX
    {
        uint32_t NumberOfItems;
        Windows::Win32::NativeWiFi::NDIS_WLAN_BSSID_EX Bssid[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_802_11_FIXED_IEs
    {
        uint8_t Timestamp[8];
        uint16_t BeaconInterval;
        uint16_t Capabilities;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_802_11_VARIABLE_IEs
    {
        uint8_t ElementID;
        uint8_t Length;
        uint8_t data[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_802_11_AI_REQFI
    {
        uint16_t Capabilities;
        uint16_t ListenInterval;
        uint8_t CurrentAPAddress[6];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_802_11_AI_RESFI
    {
        uint16_t Capabilities;
        uint16_t StatusCode;
        uint16_t AssociationId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_802_11_ASSOCIATION_INFORMATION
    {
        uint32_t Length;
        uint16_t AvailableRequestFixedIEs;
        Windows::Win32::NativeWiFi::NDIS_802_11_AI_REQFI RequestFixedIEs;
        uint32_t RequestIELength;
        uint32_t OffsetRequestIEs;
        uint16_t AvailableResponseFixedIEs;
        Windows::Win32::NativeWiFi::NDIS_802_11_AI_RESFI ResponseFixedIEs;
        uint32_t ResponseIELength;
        uint32_t OffsetResponseIEs;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_802_11_AUTHENTICATION_EVENT
    {
        Windows::Win32::NativeWiFi::NDIS_802_11_STATUS_INDICATION Status;
        Windows::Win32::NativeWiFi::NDIS_802_11_AUTHENTICATION_REQUEST Request[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_802_11_TEST
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::NativeWiFi::NDIS_802_11_AUTHENTICATION_EVENT AuthenticationEvent;
            int32_t RssiTrigger;
        };
        uint32_t Length;
        uint32_t Type;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct BSSID_INFO
    {
        uint8_t BSSID[6];
        uint8_t PMKID[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_802_11_PMKID
    {
        uint32_t Length;
        uint32_t BSSIDInfoCount;
        Windows::Win32::NativeWiFi::BSSID_INFO BSSIDInfo[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_802_11_AUTHENTICATION_ENCRYPTION
    {
        Windows::Win32::NativeWiFi::NDIS_802_11_AUTHENTICATION_MODE AuthModeSupported;
        Windows::Win32::NativeWiFi::NDIS_802_11_WEP_STATUS EncryptStatusSupported;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_802_11_CAPABILITY
    {
        uint32_t Length;
        uint32_t Version;
        uint32_t NoOfPMKIDs;
        uint32_t NoOfAuthEncryptPairsSupported;
        Windows::Win32::NativeWiFi::NDIS_802_11_AUTHENTICATION_ENCRYPTION AuthenticationEncryptionSupported[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_802_11_NON_BCAST_SSID_LIST
    {
        uint32_t NumberOfItems;
        Windows::Win32::NativeWiFi::NDIS_802_11_SSID Non_Bcast_Ssid[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_CO_DEVICE_PROFILE
    {
        Windows::Win32::NativeWiFi::NDIS_VAR_DATA_DESC DeviceDescription;
        Windows::Win32::NativeWiFi::NDIS_VAR_DATA_DESC DevSpecificInfo;
        uint32_t ulTAPISupplementaryPassThru;
        uint32_t ulAddressModes;
        uint32_t ulNumAddresses;
        uint32_t ulBearerModes;
        uint32_t ulMaxTxRate;
        uint32_t ulMinTxRate;
        uint32_t ulMaxRxRate;
        uint32_t ulMinRxRate;
        uint32_t ulMediaModes;
        uint32_t ulGenerateToneModes;
        uint32_t ulGenerateToneMaxNumFreq;
        uint32_t ulGenerateDigitModes;
        uint32_t ulMonitorToneMaxNumFreq;
        uint32_t ulMonitorToneMaxNumEntries;
        uint32_t ulMonitorDigitModes;
        uint32_t ulGatherDigitsMinTimeout;
        uint32_t ulGatherDigitsMaxTimeout;
        uint32_t ulDevCapFlags;
        uint32_t ulMaxNumActiveCalls;
        uint32_t ulAnswerMode;
        uint32_t ulUUIAcceptSize;
        uint32_t ulUUIAnswerSize;
        uint32_t ulUUIMakeCallSize;
        uint32_t ulUUIDropSize;
        uint32_t ulUUISendUserUserInfoSize;
        uint32_t ulUUICallInfoSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct OFFLOAD_ALGO_INFO
    {
        uint32_t algoIdentifier;
        uint32_t algoKeylen;
        uint32_t algoRounds;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct OFFLOAD_SECURITY_ASSOCIATION
    {
        Windows::Win32::NativeWiFi::OFFLOAD_OPERATION_E Operation;
        uint32_t SPI;
        Windows::Win32::NativeWiFi::OFFLOAD_ALGO_INFO IntegrityAlgo;
        Windows::Win32::NativeWiFi::OFFLOAD_ALGO_INFO ConfAlgo;
        Windows::Win32::NativeWiFi::OFFLOAD_ALGO_INFO Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct OFFLOAD_IPSEC_ADD_SA
    {
        uint32_t SrcAddr;
        uint32_t SrcMask;
        uint32_t DestAddr;
        uint32_t DestMask;
        uint32_t Protocol;
        uint16_t SrcPort;
        uint16_t DestPort;
        uint32_t SrcTunnelAddr;
        uint32_t DestTunnelAddr;
        uint16_t Flags;
        int16_t NumSAs;
        Windows::Win32::NativeWiFi::OFFLOAD_SECURITY_ASSOCIATION SecAssoc[3];
        Windows::Win32::SystemServices::HANDLE OffloadHandle;
        uint32_t KeyLen;
        uint8_t KeyMat[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct OFFLOAD_IPSEC_DELETE_SA
    {
        Windows::Win32::SystemServices::HANDLE OffloadHandle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct OFFLOAD_IPSEC_UDPESP_ENCAPTYPE_ENTRY
    {
        Windows::Win32::NativeWiFi::UDP_ENCAP_TYPE UdpEncapType;
        uint16_t DstEncapPort;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct OFFLOAD_IPSEC_ADD_UDPESP_SA
    {
        uint32_t SrcAddr;
        uint32_t SrcMask;
        uint32_t DstAddr;
        uint32_t DstMask;
        uint32_t Protocol;
        uint16_t SrcPort;
        uint16_t DstPort;
        uint32_t SrcTunnelAddr;
        uint32_t DstTunnelAddr;
        uint16_t Flags;
        int16_t NumSAs;
        Windows::Win32::NativeWiFi::OFFLOAD_SECURITY_ASSOCIATION SecAssoc[3];
        Windows::Win32::SystemServices::HANDLE OffloadHandle;
        Windows::Win32::NativeWiFi::OFFLOAD_IPSEC_UDPESP_ENCAPTYPE_ENTRY EncapTypeEntry;
        Windows::Win32::SystemServices::HANDLE EncapTypeEntryOffldHandle;
        uint32_t KeyLen;
        uint8_t KeyMat[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct OFFLOAD_IPSEC_DELETE_UDPESP_SA
    {
        Windows::Win32::SystemServices::HANDLE OffloadHandle;
        Windows::Win32::SystemServices::HANDLE EncapTypeEntryOffldHandle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct TRANSPORT_HEADER_OFFSET
    {
        uint16_t ProtocolType;
        uint16_t HeaderOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NETWORK_ADDRESS
    {
        uint16_t AddressLength;
        uint16_t AddressType;
        uint8_t Address[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NETWORK_ADDRESS_LIST
    {
        int32_t AddressCount;
        uint16_t AddressType;
        Windows::Win32::NativeWiFi::NETWORK_ADDRESS Address[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NETWORK_ADDRESS_IP
    {
        uint16_t sin_port;
        uint32_t in_addr;
        uint8_t sin_zero[8];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NETWORK_ADDRESS_IP6
    {
        uint16_t sin6_port;
        uint32_t sin6_flowinfo;
        uint16_t sin6_addr[8];
        uint32_t sin6_scope_id;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NETWORK_ADDRESS_IPX
    {
        uint32_t NetworkAddress;
        uint8_t NodeAddress[6];
        uint16_t Socket;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct GEN_GET_TIME_CAPS
    {
        uint32_t Flags;
        uint32_t ClockPrecision;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct GEN_GET_NETCARD_TIME
    {
        uint64_t ReadTime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_PM_PACKET_PATTERN
    {
        uint32_t Priority;
        uint32_t Reserved;
        uint32_t MaskSize;
        uint32_t PatternOffset;
        uint32_t PatternSize;
        uint32_t PatternFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_PM_WAKE_UP_CAPABILITIES
    {
        Windows::Win32::NativeWiFi::NDIS_DEVICE_POWER_STATE MinMagicPacketWakeUp;
        Windows::Win32::NativeWiFi::NDIS_DEVICE_POWER_STATE MinPatternWakeUp;
        Windows::Win32::NativeWiFi::NDIS_DEVICE_POWER_STATE MinLinkChangeWakeUp;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_PNP_CAPABILITIES
    {
        uint32_t Flags;
        Windows::Win32::NativeWiFi::NDIS_PM_WAKE_UP_CAPABILITIES WakeUpCapabilities;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_WAN_PROTOCOL_CAPS
    {
        uint32_t Flags;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_CO_LINK_SPEED
    {
        uint32_t Outbound;
        uint32_t Inbound;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_LINK_SPEED
    {
        uint64_t XmitLinkSpeed;
        uint64_t RcvLinkSpeed;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_GUID
    {
        union _Anonymous_e__Union
        {
            uint32_t Oid;
            int32_t Status;
        };
        ::win32::guid Guid;
        _Anonymous_e__Union Anonymous;
        uint32_t Size;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_IRDA_PACKET_INFO
    {
        uint32_t ExtraBOFs;
        uint32_t MinTurnAroundTime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_LINK_STATE
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        Windows::Win32::NetworkDrivers::NET_IF_MEDIA_CONNECT_STATE MediaConnectState;
        Windows::Win32::NetworkDrivers::NET_IF_MEDIA_DUPLEX_STATE MediaDuplexState;
        uint64_t XmitLinkSpeed;
        uint64_t RcvLinkSpeed;
        Windows::Win32::NativeWiFi::NDIS_SUPPORTED_PAUSE_FUNCTIONS PauseFunctions;
        uint32_t AutoNegotiationFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_LINK_PARAMETERS
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        Windows::Win32::NetworkDrivers::NET_IF_MEDIA_DUPLEX_STATE MediaDuplexState;
        uint64_t XmitLinkSpeed;
        uint64_t RcvLinkSpeed;
        Windows::Win32::NativeWiFi::NDIS_SUPPORTED_PAUSE_FUNCTIONS PauseFunctions;
        uint32_t AutoNegotiationFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_OPER_STATE
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        Windows::Win32::NetworkDrivers::NET_IF_OPER_STATUS OperationalStatus;
        uint32_t OperationalStatusFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_IP_OPER_STATUS
    {
        uint32_t AddressFamily;
        Windows::Win32::NetworkDrivers::NET_IF_OPER_STATUS OperationalStatus;
        uint32_t OperationalStatusFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_IP_OPER_STATUS_INFO
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint32_t Flags;
        uint32_t NumberofAddressFamiliesReturned;
        Windows::Win32::NativeWiFi::NDIS_IP_OPER_STATUS IpOperationalStatus[32];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_IP_OPER_STATE
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint32_t Flags;
        Windows::Win32::NativeWiFi::NDIS_IP_OPER_STATUS IpOperationalStatus;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_OFFLOAD_PARAMETERS
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint8_t IPv4Checksum;
        uint8_t TCPIPv4Checksum;
        uint8_t UDPIPv4Checksum;
        uint8_t TCPIPv6Checksum;
        uint8_t UDPIPv6Checksum;
        uint8_t LsoV1;
        uint8_t IPsecV1;
        uint8_t LsoV2IPv4;
        uint8_t LsoV2IPv6;
        uint8_t TcpConnectionIPv4;
        uint8_t TcpConnectionIPv6;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_TCP_LARGE_SEND_OFFLOAD_V1
    {
        struct _IPv4_e__Struct
        {
            uint32_t Encapsulation;
            uint32_t MaxOffLoadSize;
            uint32_t MinSegmentCount;
            uint32_t _bitfield;
        };
        _IPv4_e__Struct IPv4;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_TCP_IP_CHECKSUM_OFFLOAD
    {
        struct _IPv4Transmit_e__Struct
        {
            uint32_t Encapsulation;
            uint32_t _bitfield;
        };
        struct _IPv4Receive_e__Struct
        {
            uint32_t Encapsulation;
            uint32_t _bitfield;
        };
        struct _IPv6Transmit_e__Struct
        {
            uint32_t Encapsulation;
            uint32_t _bitfield;
        };
        struct _IPv6Receive_e__Struct
        {
            uint32_t Encapsulation;
            uint32_t _bitfield;
        };
        _IPv4Transmit_e__Struct IPv4Transmit;
        _IPv4Receive_e__Struct IPv4Receive;
        _IPv6Transmit_e__Struct IPv6Transmit;
        _IPv6Receive_e__Struct IPv6Receive;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_IPSEC_OFFLOAD_V1
    {
        struct _Supported_e__Struct
        {
            uint32_t Encapsulation;
            uint32_t AhEspCombined;
            uint32_t TransportTunnelCombined;
            uint32_t IPv4Options;
            uint32_t Flags;
        };
        struct _IPv4AH_e__Struct
        {
            uint32_t _bitfield;
        };
        struct _IPv4ESP_e__Struct
        {
            uint32_t _bitfield;
        };
        _Supported_e__Struct Supported;
        _IPv4AH_e__Struct IPv4AH;
        _IPv4ESP_e__Struct IPv4ESP;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_TCP_LARGE_SEND_OFFLOAD_V2
    {
        struct _IPv4_e__Struct
        {
            uint32_t Encapsulation;
            uint32_t MaxOffLoadSize;
            uint32_t MinSegmentCount;
        };
        struct _IPv6_e__Struct
        {
            uint32_t Encapsulation;
            uint32_t MaxOffLoadSize;
            uint32_t MinSegmentCount;
            uint32_t _bitfield;
        };
        _IPv4_e__Struct IPv4;
        _IPv6_e__Struct IPv6;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_OFFLOAD
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        Windows::Win32::NativeWiFi::NDIS_TCP_IP_CHECKSUM_OFFLOAD Checksum;
        Windows::Win32::NativeWiFi::NDIS_TCP_LARGE_SEND_OFFLOAD_V1 LsoV1;
        Windows::Win32::NativeWiFi::NDIS_IPSEC_OFFLOAD_V1 IPsecV1;
        Windows::Win32::NativeWiFi::NDIS_TCP_LARGE_SEND_OFFLOAD_V2 LsoV2;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V1
    {
        struct _IPv4_e__Struct
        {
            uint32_t Encapsulation;
            uint32_t MaxOffLoadSize;
            uint32_t MinSegmentCount;
            uint32_t TcpOptions;
            uint32_t IpOptions;
        };
        _IPv4_e__Struct IPv4;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_WMI_TCP_IP_CHECKSUM_OFFLOAD
    {
        struct _IPv4Transmit_e__Struct
        {
            uint32_t Encapsulation;
            uint32_t IpOptionsSupported;
            uint32_t TcpOptionsSupported;
            uint32_t TcpChecksum;
            uint32_t UdpChecksum;
            uint32_t IpChecksum;
        };
        struct _IPv4Receive_e__Struct
        {
            uint32_t Encapsulation;
            uint32_t IpOptionsSupported;
            uint32_t TcpOptionsSupported;
            uint32_t TcpChecksum;
            uint32_t UdpChecksum;
            uint32_t IpChecksum;
        };
        struct _IPv6Transmit_e__Struct
        {
            uint32_t Encapsulation;
            uint32_t IpExtensionHeadersSupported;
            uint32_t TcpOptionsSupported;
            uint32_t TcpChecksum;
            uint32_t UdpChecksum;
        };
        struct _IPv6Receive_e__Struct
        {
            uint32_t Encapsulation;
            uint32_t IpExtensionHeadersSupported;
            uint32_t TcpOptionsSupported;
            uint32_t TcpChecksum;
            uint32_t UdpChecksum;
        };
        _IPv4Transmit_e__Struct IPv4Transmit;
        _IPv4Receive_e__Struct IPv4Receive;
        _IPv6Transmit_e__Struct IPv6Transmit;
        _IPv6Receive_e__Struct IPv6Receive;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_WMI_IPSEC_OFFLOAD_V1
    {
        struct _Supported_e__Struct
        {
            uint32_t Encapsulation;
            uint32_t AhEspCombined;
            uint32_t TransportTunnelCombined;
            uint32_t IPv4Options;
            uint32_t Flags;
        };
        struct _IPv4AH_e__Struct
        {
            uint32_t Md5;
            uint32_t Sha_1;
            uint32_t Transport;
            uint32_t Tunnel;
            uint32_t Send;
            uint32_t Receive;
        };
        struct _IPv4ESP_e__Struct
        {
            uint32_t Des;
            uint32_t Reserved;
            uint32_t TripleDes;
            uint32_t NullEsp;
            uint32_t Transport;
            uint32_t Tunnel;
            uint32_t Send;
            uint32_t Receive;
        };
        _Supported_e__Struct Supported;
        _IPv4AH_e__Struct IPv4AH;
        _IPv4ESP_e__Struct IPv4ESP;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V2
    {
        struct _IPv4_e__Struct
        {
            uint32_t Encapsulation;
            uint32_t MaxOffLoadSize;
            uint32_t MinSegmentCount;
        };
        struct _IPv6_e__Struct
        {
            uint32_t Encapsulation;
            uint32_t MaxOffLoadSize;
            uint32_t MinSegmentCount;
            uint32_t IpExtensionHeadersSupported;
            uint32_t TcpOptionsSupported;
        };
        _IPv4_e__Struct IPv4;
        _IPv6_e__Struct IPv6;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_WMI_OFFLOAD
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        Windows::Win32::NativeWiFi::NDIS_WMI_TCP_IP_CHECKSUM_OFFLOAD Checksum;
        Windows::Win32::NativeWiFi::NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V1 LsoV1;
        Windows::Win32::NativeWiFi::NDIS_WMI_IPSEC_OFFLOAD_V1 IPsecV1;
        Windows::Win32::NativeWiFi::NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V2 LsoV2;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_TCP_CONNECTION_OFFLOAD
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint32_t Encapsulation;
        uint32_t _bitfield;
        uint32_t TcpConnectionOffloadCapacity;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_WMI_TCP_CONNECTION_OFFLOAD
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint32_t Encapsulation;
        uint32_t SupportIPv4;
        uint32_t SupportIPv6;
        uint32_t SupportIPv6ExtensionHeaders;
        uint32_t SupportSack;
        uint32_t TcpConnectionOffloadCapacity;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_PORT_AUTHENTICATION_PARAMETERS
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        Windows::Win32::NativeWiFi::NDIS_PORT_CONTROL_STATE SendControlState;
        Windows::Win32::NativeWiFi::NDIS_PORT_CONTROL_STATE RcvControlState;
        Windows::Win32::NativeWiFi::NDIS_PORT_AUTHORIZATION_STATE SendAuthorizationState;
        Windows::Win32::NativeWiFi::NDIS_PORT_AUTHORIZATION_STATE RcvAuthorizationState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    union NET_LUID_LH
    {
        struct _Info_e__Struct
        {
            uint64_t _bitfield;
        };
        uint64_t Value;
        _Info_e__Struct Info;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_WMI_METHOD_HEADER
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint32_t PortNumber;
        Windows::Win32::IpHelper::NET_LUID_LH NetLuid;
        uint64_t RequestId;
        uint32_t Timeout;
        uint8_t Padding[4];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_WMI_SET_HEADER
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint32_t PortNumber;
        Windows::Win32::IpHelper::NET_LUID_LH NetLuid;
        uint64_t RequestId;
        uint32_t Timeout;
        uint8_t Padding[4];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_WMI_EVENT_HEADER
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint32_t IfIndex;
        Windows::Win32::IpHelper::NET_LUID_LH NetLuid;
        uint64_t RequestId;
        uint32_t PortNumber;
        uint32_t DeviceNameLength;
        uint32_t DeviceNameOffset;
        uint8_t Padding[4];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_WMI_ENUM_ADAPTER
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint32_t IfIndex;
        Windows::Win32::IpHelper::NET_LUID_LH NetLuid;
        uint16_t DeviceNameLength;
        int8_t DeviceName[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_WMI_OUTPUT_INFO
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint32_t Flags;
        uint8_t SupportedRevision;
        uint32_t DataOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_RECEIVE_SCALE_CAPABILITIES
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint32_t CapabilitiesFlags;
        uint32_t NumberOfInterruptMessages;
        uint32_t NumberOfReceiveQueues;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_RECEIVE_SCALE_PARAMETERS
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint16_t Flags;
        uint16_t BaseCpuNumber;
        uint32_t HashInformation;
        uint16_t IndirectionTableSize;
        uint32_t IndirectionTableOffset;
        uint16_t HashSecretKeySize;
        uint32_t HashSecretKeyOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_RECEIVE_HASH_PARAMETERS
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint32_t Flags;
        uint32_t HashInformation;
        uint16_t HashSecretKeySize;
        uint32_t HashSecretKeyOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_PORT_STATE
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        Windows::Win32::NetworkDrivers::NET_IF_MEDIA_CONNECT_STATE MediaConnectState;
        uint64_t XmitLinkSpeed;
        uint64_t RcvLinkSpeed;
        Windows::Win32::NetworkDrivers::NET_IF_DIRECTION_TYPE Direction;
        Windows::Win32::NativeWiFi::NDIS_PORT_CONTROL_STATE SendControlState;
        Windows::Win32::NativeWiFi::NDIS_PORT_CONTROL_STATE RcvControlState;
        Windows::Win32::NativeWiFi::NDIS_PORT_AUTHORIZATION_STATE SendAuthorizationState;
        Windows::Win32::NativeWiFi::NDIS_PORT_AUTHORIZATION_STATE RcvAuthorizationState;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_PORT_CHARACTERISTICS
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint32_t PortNumber;
        uint32_t Flags;
        Windows::Win32::NativeWiFi::NDIS_PORT_TYPE Type;
        Windows::Win32::NetworkDrivers::NET_IF_MEDIA_CONNECT_STATE MediaConnectState;
        uint64_t XmitLinkSpeed;
        uint64_t RcvLinkSpeed;
        Windows::Win32::NetworkDrivers::NET_IF_DIRECTION_TYPE Direction;
        Windows::Win32::NativeWiFi::NDIS_PORT_CONTROL_STATE SendControlState;
        Windows::Win32::NativeWiFi::NDIS_PORT_CONTROL_STATE RcvControlState;
        Windows::Win32::NativeWiFi::NDIS_PORT_AUTHORIZATION_STATE SendAuthorizationState;
        Windows::Win32::NativeWiFi::NDIS_PORT_AUTHORIZATION_STATE RcvAuthorizationState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_PORT
    {
        Windows::Win32::NativeWiFi::NDIS_PORT* Next;
        void* NdisReserved;
        void* MiniportReserved;
        void* ProtocolReserved;
        Windows::Win32::NativeWiFi::NDIS_PORT_CHARACTERISTICS PortCharacteristics;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_PORT_ARRAY
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint32_t NumberOfPorts;
        uint32_t OffsetFirstPort;
        uint32_t ElementSize;
        Windows::Win32::NativeWiFi::NDIS_PORT_CHARACTERISTICS Ports[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_TIMESTAMP_CAPABILITY_FLAGS
    {
        uint8_t PtpV2OverUdpIPv4EventMsgReceiveHw;
        uint8_t PtpV2OverUdpIPv4AllMsgReceiveHw;
        uint8_t PtpV2OverUdpIPv4EventMsgTransmitHw;
        uint8_t PtpV2OverUdpIPv4AllMsgTransmitHw;
        uint8_t PtpV2OverUdpIPv6EventMsgReceiveHw;
        uint8_t PtpV2OverUdpIPv6AllMsgReceiveHw;
        uint8_t PtpV2OverUdpIPv6EventMsgTransmitHw;
        uint8_t PtpV2OverUdpIPv6AllMsgTransmitHw;
        uint8_t AllReceiveHw;
        uint8_t AllTransmitHw;
        uint8_t TaggedTransmitHw;
        uint8_t AllReceiveSw;
        uint8_t AllTransmitSw;
        uint8_t TaggedTransmitSw;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_TIMESTAMP_CAPABILITIES
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint64_t HardwareClockFrequencyHz;
        uint8_t CrossTimestamp;
        uint64_t Reserved1;
        uint64_t Reserved2;
        Windows::Win32::NativeWiFi::NDIS_TIMESTAMP_CAPABILITY_FLAGS TimestampFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct NDIS_HARDWARE_CROSSTIMESTAMP
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint32_t Flags;
        uint64_t SystemTimestamp1;
        uint64_t HardwareClockTimestamp;
        uint64_t SystemTimestamp2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_BSSID_LIST
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint32_t uNumOfEntries;
        uint32_t uTotalNumOfEntries;
        uint8_t BSSIDs[6];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_RATE_SET
    {
        uint32_t uRateSetLength;
        uint8_t ucRateSet[126];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_WFD_SESSION_INFO
    {
        uint16_t uSessionInfoLength;
        uint8_t ucSessionInfo[144];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_OFFLOAD_CAPABILITY
    {
        uint32_t uReserved;
        uint32_t uFlags;
        uint32_t uSupportedWEPAlgorithms;
        uint32_t uNumOfReplayWindows;
        uint32_t uMaxWEPKeyMappingLength;
        uint32_t uSupportedAuthAlgorithms;
        uint32_t uMaxAuthKeyMappingLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_CURRENT_OFFLOAD_CAPABILITY
    {
        uint32_t uReserved;
        uint32_t uFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_IV48_COUNTER
    {
        uint32_t uIV32Counter;
        uint16_t usIV16Counter;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_WEP_OFFLOAD
    {
        uint32_t uReserved;
        Windows::Win32::SystemServices::HANDLE hOffloadContext;
        Windows::Win32::SystemServices::HANDLE hOffload;
        Windows::Win32::NativeWiFi::DOT11_OFFLOAD_TYPE dot11OffloadType;
        uint32_t dwAlgorithm;
        uint8_t bRowIsOutbound;
        uint8_t bUseDefault;
        uint32_t uFlags;
        uint8_t ucMacAddress[6];
        uint32_t uNumOfRWsOnPeer;
        uint32_t uNumOfRWsOnMe;
        Windows::Win32::NativeWiFi::DOT11_IV48_COUNTER dot11IV48Counters[16];
        uint16_t usDot11RWBitMaps[16];
        uint16_t usKeyLength;
        uint8_t ucKey[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_WEP_UPLOAD
    {
        uint32_t uReserved;
        Windows::Win32::NativeWiFi::DOT11_OFFLOAD_TYPE dot11OffloadType;
        Windows::Win32::SystemServices::HANDLE hOffload;
        uint32_t uNumOfRWsUsed;
        Windows::Win32::NativeWiFi::DOT11_IV48_COUNTER dot11IV48Counters[16];
        uint16_t usDot11RWBitMaps[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_DEFAULT_WEP_OFFLOAD
    {
        uint32_t uReserved;
        Windows::Win32::SystemServices::HANDLE hOffloadContext;
        Windows::Win32::SystemServices::HANDLE hOffload;
        uint32_t dwIndex;
        Windows::Win32::NativeWiFi::DOT11_OFFLOAD_TYPE dot11OffloadType;
        uint32_t dwAlgorithm;
        uint32_t uFlags;
        Windows::Win32::NativeWiFi::DOT11_KEY_DIRECTION dot11KeyDirection;
        uint8_t ucMacAddress[6];
        uint32_t uNumOfRWsOnMe;
        Windows::Win32::NativeWiFi::DOT11_IV48_COUNTER dot11IV48Counters[16];
        uint16_t usDot11RWBitMaps[16];
        uint16_t usKeyLength;
        uint8_t ucKey[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_DEFAULT_WEP_UPLOAD
    {
        uint32_t uReserved;
        Windows::Win32::NativeWiFi::DOT11_OFFLOAD_TYPE dot11OffloadType;
        Windows::Win32::SystemServices::HANDLE hOffload;
        uint32_t uNumOfRWsUsed;
        Windows::Win32::NativeWiFi::DOT11_IV48_COUNTER dot11IV48Counters[16];
        uint16_t usDot11RWBitMaps[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_OPERATION_MODE_CAPABILITY
    {
        uint32_t uReserved;
        uint32_t uMajorVersion;
        uint32_t uMinorVersion;
        uint32_t uNumOfTXBuffers;
        uint32_t uNumOfRXBuffers;
        uint32_t uOpModeCapability;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_CURRENT_OPERATION_MODE
    {
        uint32_t uReserved;
        uint32_t uCurrentOpMode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_SCAN_REQUEST
    {
        Windows::Win32::NativeWiFi::DOT11_BSS_TYPE dot11BSSType;
        uint8_t dot11BSSID[6];
        Windows::Win32::NativeWiFi::DOT11_SSID dot11SSID;
        Windows::Win32::NativeWiFi::DOT11_SCAN_TYPE dot11ScanType;
        uint8_t bRestrictedScan;
        uint8_t bUseRequestIE;
        uint32_t uRequestIDsOffset;
        uint32_t uNumOfRequestIDs;
        uint32_t uPhyTypesOffset;
        uint32_t uNumOfPhyTypes;
        uint32_t uIEsOffset;
        uint32_t uIEsLength;
        uint8_t ucBuffer[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_PHY_TYPE_INFO
    {
        Windows::Win32::NativeWiFi::DOT11_PHY_TYPE dot11PhyType;
        uint8_t bUseParameters;
        uint32_t uProbeDelay;
        uint32_t uMinChannelTime;
        uint32_t uMaxChannelTime;
        Windows::Win32::NativeWiFi::CH_DESCRIPTION_TYPE ChDescriptionType;
        uint32_t uChannelListSize;
        uint8_t ucChannelListBuffer[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_SCAN_REQUEST_V2
    {
        Windows::Win32::NativeWiFi::DOT11_BSS_TYPE dot11BSSType;
        uint8_t dot11BSSID[6];
        Windows::Win32::NativeWiFi::DOT11_SCAN_TYPE dot11ScanType;
        uint8_t bRestrictedScan;
        uint32_t udot11SSIDsOffset;
        uint32_t uNumOfdot11SSIDs;
        uint8_t bUseRequestIE;
        uint32_t uRequestIDsOffset;
        uint32_t uNumOfRequestIDs;
        uint32_t uPhyTypeInfosOffset;
        uint32_t uNumOfPhyTypeInfos;
        uint32_t uIEsOffset;
        uint32_t uIEsLength;
        uint8_t ucBuffer[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_PHY_TYPE_LIST
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint32_t uNumOfEntries;
        uint32_t uTotalNumOfEntries;
        Windows::Win32::NativeWiFi::DOT11_PHY_TYPE dot11PhyType[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_BSS_DESCRIPTION
    {
        uint32_t uReserved;
        uint8_t dot11BSSID[6];
        Windows::Win32::NativeWiFi::DOT11_BSS_TYPE dot11BSSType;
        uint16_t usBeaconPeriod;
        uint64_t ullTimestamp;
        uint16_t usCapabilityInformation;
        uint32_t uBufferLength;
        uint8_t ucBuffer[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_JOIN_REQUEST
    {
        uint32_t uJoinFailureTimeout;
        Windows::Win32::NativeWiFi::DOT11_RATE_SET OperationalRateSet;
        uint32_t uChCenterFrequency;
        Windows::Win32::NativeWiFi::DOT11_BSS_DESCRIPTION dot11BSSDescription;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_START_REQUEST
    {
        uint32_t uStartFailureTimeout;
        Windows::Win32::NativeWiFi::DOT11_RATE_SET OperationalRateSet;
        uint32_t uChCenterFrequency;
        Windows::Win32::NativeWiFi::DOT11_BSS_DESCRIPTION dot11BSSDescription;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_UPDATE_IE
    {
        Windows::Win32::NativeWiFi::DOT11_UPDATE_IE_OP dot11UpdateIEOp;
        uint32_t uBufferLength;
        uint8_t ucBuffer[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_RESET_REQUEST
    {
        Windows::Win32::NativeWiFi::DOT11_RESET_TYPE dot11ResetType;
        uint8_t dot11MacAddress[6];
        uint8_t bSetDefaultMIB;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_OPTIONAL_CAPABILITY
    {
        uint32_t uReserved;
        uint8_t bDot11PCF;
        uint8_t bDot11PCFMPDUTransferToPC;
        uint8_t bStrictlyOrderedServiceClass;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_CURRENT_OPTIONAL_CAPABILITY
    {
        uint32_t uReserved;
        uint8_t bDot11CFPollable;
        uint8_t bDot11PCF;
        uint8_t bDot11PCFMPDUTransferToPC;
        uint8_t bStrictlyOrderedServiceClass;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_POWER_MGMT_MODE
    {
        Windows::Win32::NativeWiFi::DOT11_POWER_MODE dot11PowerMode;
        uint32_t uPowerSaveLevel;
        uint16_t usListenInterval;
        uint16_t usAID;
        uint8_t bReceiveDTIMs;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_COUNTERS_ENTRY
    {
        uint32_t uTransmittedFragmentCount;
        uint32_t uMulticastTransmittedFrameCount;
        uint32_t uFailedCount;
        uint32_t uRetryCount;
        uint32_t uMultipleRetryCount;
        uint32_t uFrameDuplicateCount;
        uint32_t uRTSSuccessCount;
        uint32_t uRTSFailureCount;
        uint32_t uACKFailureCount;
        uint32_t uReceivedFragmentCount;
        uint32_t uMulticastReceivedFrameCount;
        uint32_t uFCSErrorCount;
        uint32_t uTransmittedFrameCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_SUPPORTED_PHY_TYPES
    {
        uint32_t uNumOfEntries;
        uint32_t uTotalNumOfEntries;
        Windows::Win32::NativeWiFi::DOT11_PHY_TYPE dot11PHYType[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_SUPPORTED_POWER_LEVELS
    {
        uint32_t uNumOfSupportedPowerLevels;
        uint32_t uTxPowerLevelValues[8];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_REG_DOMAIN_VALUE
    {
        uint32_t uRegDomainsSupportIndex;
        uint32_t uRegDomainsSupportValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_REG_DOMAINS_SUPPORT_VALUE
    {
        uint32_t uNumOfEntries;
        uint32_t uTotalNumOfEntries;
        Windows::Win32::NativeWiFi::DOT11_REG_DOMAIN_VALUE dot11RegDomainValue[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_SUPPORTED_ANTENNA
    {
        uint32_t uAntennaListIndex;
        uint8_t bSupportedAntenna;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_SUPPORTED_ANTENNA_LIST
    {
        uint32_t uNumOfEntries;
        uint32_t uTotalNumOfEntries;
        Windows::Win32::NativeWiFi::DOT11_SUPPORTED_ANTENNA dot11SupportedAntenna[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_DIVERSITY_SELECTION_RX
    {
        uint32_t uAntennaListIndex;
        uint8_t bDiversitySelectionRX;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_DIVERSITY_SELECTION_RX_LIST
    {
        uint32_t uNumOfEntries;
        uint32_t uTotalNumOfEntries;
        Windows::Win32::NativeWiFi::DOT11_DIVERSITY_SELECTION_RX dot11DiversitySelectionRx[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_SUPPORTED_DATA_RATES_VALUE
    {
        uint8_t ucSupportedTxDataRatesValue[8];
        uint8_t ucSupportedRxDataRatesValue[8];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_SUPPORTED_DATA_RATES_VALUE_V2
    {
        uint8_t ucSupportedTxDataRatesValue[255];
        uint8_t ucSupportedRxDataRatesValue[255];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_MULTI_DOMAIN_CAPABILITY_ENTRY
    {
        uint32_t uMultiDomainCapabilityIndex;
        uint32_t uFirstChannelNumber;
        uint32_t uNumberOfChannels;
        int32_t lMaximumTransmitPowerLevel;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_MD_CAPABILITY_ENTRY_LIST
    {
        uint32_t uNumOfEntries;
        uint32_t uTotalNumOfEntries;
        Windows::Win32::NativeWiFi::DOT11_MULTI_DOMAIN_CAPABILITY_ENTRY dot11MDCapabilityEntry[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_HOPPING_PATTERN_ENTRY
    {
        uint32_t uHoppingPatternIndex;
        uint32_t uRandomTableFieldNumber;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_HOPPING_PATTERN_ENTRY_LIST
    {
        uint32_t uNumOfEntries;
        uint32_t uTotalNumOfEntries;
        Windows::Win32::NativeWiFi::DOT11_HOPPING_PATTERN_ENTRY dot11HoppingPatternEntry[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_WPA_TSC
    {
        uint32_t uReserved;
        Windows::Win32::NativeWiFi::DOT11_OFFLOAD_TYPE dot11OffloadType;
        Windows::Win32::SystemServices::HANDLE hOffload;
        Windows::Win32::NativeWiFi::DOT11_IV48_COUNTER dot11IV48Counter;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_RSSI_RANGE
    {
        Windows::Win32::NativeWiFi::DOT11_PHY_TYPE dot11PhyType;
        uint32_t uRSSIMin;
        uint32_t uRSSIMax;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_NIC_SPECIFIC_EXTENSION
    {
        uint32_t uBufferLength;
        uint32_t uTotalBufferLength;
        uint8_t ucBuffer[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_AP_JOIN_REQUEST
    {
        uint32_t uJoinFailureTimeout;
        Windows::Win32::NativeWiFi::DOT11_RATE_SET OperationalRateSet;
        uint32_t uChCenterFrequency;
        Windows::Win32::NativeWiFi::DOT11_BSS_DESCRIPTION dot11BSSDescription;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_RECV_SENSITIVITY
    {
        uint8_t ucDataRate;
        int32_t lRSSIMin;
        int32_t lRSSIMax;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_RECV_SENSITIVITY_LIST
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::NativeWiFi::DOT11_PHY_TYPE dot11PhyType;
            uint32_t uPhyId;
        };
        _Anonymous_e__Union Anonymous;
        uint32_t uNumOfEntries;
        uint32_t uTotalNumOfEntries;
        Windows::Win32::NativeWiFi::DOT11_RECV_SENSITIVITY dot11RecvSensitivity[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_WME_AC_PARAMETERS
    {
        uint8_t ucAccessCategoryIndex;
        uint8_t ucAIFSN;
        uint8_t ucECWmin;
        uint8_t ucECWmax;
        uint16_t usTXOPLimit;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct _DOT11_WME_AC_PARAMTERS_LIST
    {
        uint32_t uNumOfEntries;
        uint32_t uTotalNumOfEntries;
        Windows::Win32::NativeWiFi::DOT11_WME_AC_PARAMETERS dot11WMEACParameters[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_WME_UPDATE_IE
    {
        uint32_t uParamElemMinBeaconIntervals;
        uint32_t uWMEInfoElemOffset;
        uint32_t uWMEInfoElemLength;
        uint32_t uWMEParamElemOffset;
        uint32_t uWMEParamElemLength;
        uint8_t ucBuffer[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_QOS_TX_DURATION
    {
        uint32_t uNominalMSDUSize;
        uint32_t uMinPHYRate;
        uint32_t uDuration;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_QOS_TX_MEDIUM_TIME
    {
        uint8_t dot11PeerAddress[6];
        uint8_t ucQoSPriority;
        uint32_t uMediumTimeAdmited;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_SUPPORTED_OFDM_FREQUENCY
    {
        uint32_t uCenterFrequency;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_SUPPORTED_OFDM_FREQUENCY_LIST
    {
        uint32_t uNumOfEntries;
        uint32_t uTotalNumOfEntries;
        Windows::Win32::NativeWiFi::DOT11_SUPPORTED_OFDM_FREQUENCY dot11SupportedOFDMFrequency[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_SUPPORTED_DSSS_CHANNEL
    {
        uint32_t uChannel;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_SUPPORTED_DSSS_CHANNEL_LIST
    {
        uint32_t uNumOfEntries;
        uint32_t uTotalNumOfEntries;
        Windows::Win32::NativeWiFi::DOT11_SUPPORTED_DSSS_CHANNEL dot11SupportedDSSSChannel[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_BYTE_ARRAY
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint32_t uNumOfBytes;
        uint32_t uTotalNumOfBytes;
        uint8_t ucBuffer[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    union DOT11_BSS_ENTRY_PHY_SPECIFIC_INFO
    {
        struct _FHSS_e__Struct
        {
            uint32_t uHopPattern;
            uint32_t uHopSet;
            uint32_t uDwellTime;
        };
        uint32_t uChCenterFrequency;
        _FHSS_e__Struct FHSS;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_BSS_ENTRY
    {
        uint32_t uPhyId;
        Windows::Win32::NativeWiFi::DOT11_BSS_ENTRY_PHY_SPECIFIC_INFO PhySpecificInfo;
        uint8_t dot11BSSID[6];
        Windows::Win32::NativeWiFi::DOT11_BSS_TYPE dot11BSSType;
        int32_t lRSSI;
        uint32_t uLinkQuality;
        uint8_t bInRegDomain;
        uint16_t usBeaconPeriod;
        uint64_t ullTimestamp;
        uint64_t ullHostTimestamp;
        uint16_t usCapabilityInformation;
        uint32_t uBufferLength;
        uint8_t ucBuffer[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_SSID_LIST
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint32_t uNumOfEntries;
        uint32_t uTotalNumOfEntries;
        Windows::Win32::NativeWiFi::DOT11_SSID SSIDs[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_MAC_ADDRESS_LIST
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint32_t uNumOfEntries;
        uint32_t uTotalNumOfEntries;
        uint8_t MacAddrs[6];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_PMKID_ENTRY
    {
        uint8_t BSSID[6];
        uint8_t PMKID[16];
        uint32_t uFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_PMKID_LIST
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint32_t uNumOfEntries;
        uint32_t uTotalNumOfEntries;
        Windows::Win32::NativeWiFi::DOT11_PMKID_ENTRY PMKIDs[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_PHY_FRAME_STATISTICS
    {
        uint64_t ullTransmittedFrameCount;
        uint64_t ullMulticastTransmittedFrameCount;
        uint64_t ullFailedCount;
        uint64_t ullRetryCount;
        uint64_t ullMultipleRetryCount;
        uint64_t ullMaxTXLifetimeExceededCount;
        uint64_t ullTransmittedFragmentCount;
        uint64_t ullRTSSuccessCount;
        uint64_t ullRTSFailureCount;
        uint64_t ullACKFailureCount;
        uint64_t ullReceivedFrameCount;
        uint64_t ullMulticastReceivedFrameCount;
        uint64_t ullPromiscuousReceivedFrameCount;
        uint64_t ullMaxRXLifetimeExceededCount;
        uint64_t ullFrameDuplicateCount;
        uint64_t ullReceivedFragmentCount;
        uint64_t ullPromiscuousReceivedFragmentCount;
        uint64_t ullFCSErrorCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_MAC_FRAME_STATISTICS
    {
        uint64_t ullTransmittedFrameCount;
        uint64_t ullReceivedFrameCount;
        uint64_t ullTransmittedFailureFrameCount;
        uint64_t ullReceivedFailureFrameCount;
        uint64_t ullWEPExcludedCount;
        uint64_t ullTKIPLocalMICFailures;
        uint64_t ullTKIPReplays;
        uint64_t ullTKIPICVErrorCount;
        uint64_t ullCCMPReplays;
        uint64_t ullCCMPDecryptErrors;
        uint64_t ullWEPUndecryptableCount;
        uint64_t ullWEPICVErrorCount;
        uint64_t ullDecryptSuccessCount;
        uint64_t ullDecryptFailureCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_STATISTICS
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint64_t ullFourWayHandshakeFailures;
        uint64_t ullTKIPCounterMeasuresInvoked;
        uint64_t ullReserved;
        Windows::Win32::NativeWiFi::DOT11_MAC_FRAME_STATISTICS MacUcastCounters;
        Windows::Win32::NativeWiFi::DOT11_MAC_FRAME_STATISTICS MacMcastCounters;
        Windows::Win32::NativeWiFi::DOT11_PHY_FRAME_STATISTICS PhyCounters[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_PRIVACY_EXEMPTION
    {
        uint16_t usEtherType;
        uint16_t usExemptionActionType;
        uint16_t usExemptionPacketType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_PRIVACY_EXEMPTION_LIST
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint32_t uNumOfEntries;
        uint32_t uTotalNumOfEntries;
        Windows::Win32::NativeWiFi::DOT11_PRIVACY_EXEMPTION PrivacyExemptionEntries[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_AUTH_ALGORITHM_LIST
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint32_t uNumOfEntries;
        uint32_t uTotalNumOfEntries;
        Windows::Win32::NativeWiFi::DOT11_AUTH_ALGORITHM AlgorithmIds[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_AUTH_CIPHER_PAIR_LIST
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint32_t uNumOfEntries;
        uint32_t uTotalNumOfEntries;
        Windows::Win32::NativeWiFi::DOT11_AUTH_CIPHER_PAIR AuthCipherPairs[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_CIPHER_ALGORITHM_LIST
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint32_t uNumOfEntries;
        uint32_t uTotalNumOfEntries;
        Windows::Win32::NativeWiFi::DOT11_CIPHER_ALGORITHM AlgorithmIds[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_CIPHER_DEFAULT_KEY_VALUE
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint32_t uKeyIndex;
        Windows::Win32::NativeWiFi::DOT11_CIPHER_ALGORITHM AlgorithmId;
        uint8_t MacAddr[6];
        uint8_t bDelete;
        uint8_t bStatic;
        uint16_t usKeyLength;
        uint8_t ucKey[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_KEY_ALGO_TKIP_MIC
    {
        uint8_t ucIV48Counter[6];
        uint32_t ulTKIPKeyLength;
        uint32_t ulMICKeyLength;
        uint8_t ucTKIPMICKeys[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_KEY_ALGO_CCMP
    {
        uint8_t ucIV48Counter[6];
        uint32_t ulCCMPKeyLength;
        uint8_t ucCCMPKey[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_KEY_ALGO_GCMP
    {
        uint8_t ucIV48Counter[6];
        uint32_t ulGCMPKeyLength;
        uint8_t ucGCMPKey[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_KEY_ALGO_GCMP_256
    {
        uint8_t ucIV48Counter[6];
        uint32_t ulGCMP256KeyLength;
        uint8_t ucGCMP256Key[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_KEY_ALGO_BIP
    {
        uint8_t ucIPN[6];
        uint32_t ulBIPKeyLength;
        uint8_t ucBIPKey[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_KEY_ALGO_BIP_GMAC_256
    {
        uint8_t ucIPN[6];
        uint32_t ulBIPGmac256KeyLength;
        uint8_t ucBIPGmac256Key[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_CIPHER_KEY_MAPPING_KEY_VALUE
    {
        uint8_t PeerMacAddr[6];
        Windows::Win32::NativeWiFi::DOT11_CIPHER_ALGORITHM AlgorithmId;
        Windows::Win32::NativeWiFi::DOT11_DIRECTION Direction;
        uint8_t bDelete;
        uint8_t bStatic;
        uint16_t usKeyLength;
        uint8_t ucKey[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_ASSOCIATION_INFO_EX
    {
        uint8_t PeerMacAddress[6];
        uint8_t BSSID[6];
        uint16_t usCapabilityInformation;
        uint16_t usListenInterval;
        uint8_t ucPeerSupportedRates[255];
        uint16_t usAssociationID;
        Windows::Win32::NativeWiFi::DOT11_ASSOCIATION_STATE dot11AssociationState;
        Windows::Win32::NativeWiFi::DOT11_POWER_MODE dot11PowerMode;
        Windows::Win32::SystemServices::LARGE_INTEGER liAssociationUpTime;
        uint64_t ullNumOfTxPacketSuccesses;
        uint64_t ullNumOfTxPacketFailures;
        uint64_t ullNumOfRxPacketSuccesses;
        uint64_t ullNumOfRxPacketFailures;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_ASSOCIATION_INFO_LIST
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint32_t uNumOfEntries;
        uint32_t uTotalNumOfEntries;
        Windows::Win32::NativeWiFi::DOT11_ASSOCIATION_INFO_EX dot11AssocInfo[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_PHY_ID_LIST
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint32_t uNumOfEntries;
        uint32_t uTotalNumOfEntries;
        uint32_t dot11PhyId[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_EXTSTA_CAPABILITY
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint32_t uScanSSIDListSize;
        uint32_t uDesiredBSSIDListSize;
        uint32_t uDesiredSSIDListSize;
        uint32_t uExcludedMacAddressListSize;
        uint32_t uPrivacyExemptionListSize;
        uint32_t uKeyMappingTableSize;
        uint32_t uDefaultKeyTableSize;
        uint32_t uWEPKeyValueMaxLength;
        uint32_t uPMKIDCacheSize;
        uint32_t uMaxNumPerSTADefaultKeyTables;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_DATA_RATE_MAPPING_ENTRY
    {
        uint8_t ucDataRateIndex;
        uint8_t ucDataRateFlag;
        uint16_t usDataRateValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_DATA_RATE_MAPPING_TABLE
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint32_t uDataRateMappingLength;
        Windows::Win32::NativeWiFi::DOT11_DATA_RATE_MAPPING_ENTRY DataRateMappingEntries[126];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_COUNTRY_OR_REGION_STRING_LIST
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint32_t uNumOfEntries;
        uint32_t uTotalNumOfEntries;
        uint8_t CountryOrRegionStrings[3];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_PORT_STATE_NOTIFICATION
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint8_t PeerMac[6];
        uint8_t bOpen;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_IBSS_PARAMS
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint8_t bJoinOnly;
        uint32_t uIEsOffset;
        uint32_t uIEsLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_QOS_PARAMS
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint8_t ucEnabledQoSProtocolFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_ASSOCIATION_PARAMS
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint8_t BSSID[6];
        uint32_t uAssocRequestIEsOffset;
        uint32_t uAssocRequestIEsLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_FRAGMENT_DESCRIPTOR
    {
        uint32_t uOffset;
        uint32_t uLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_PER_MSDU_COUNTERS
    {
        uint32_t uTransmittedFragmentCount;
        uint32_t uRetryCount;
        uint32_t uRTSSuccessCount;
        uint32_t uRTSFailureCount;
        uint32_t uACKFailureCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_HRDSSS_PHY_ATTRIBUTES
    {
        uint8_t bShortPreambleOptionImplemented;
        uint8_t bPBCCOptionImplemented;
        uint8_t bChannelAgilityPresent;
        uint32_t uHRCCAModeSupported;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_OFDM_PHY_ATTRIBUTES
    {
        uint32_t uFrequencyBandsSupported;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_ERP_PHY_ATTRIBUTES
    {
        Windows::Win32::NativeWiFi::DOT11_HRDSSS_PHY_ATTRIBUTES HRDSSSAttributes;
        uint8_t bERPPBCCOptionImplemented;
        uint8_t bDSSSOFDMOptionImplemented;
        uint8_t bShortSlotTimeOptionImplemented;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_PHY_ATTRIBUTES
    {
        union _PhySpecificAttributes_e__Union
        {
            Windows::Win32::NativeWiFi::DOT11_HRDSSS_PHY_ATTRIBUTES HRDSSSAttributes;
            Windows::Win32::NativeWiFi::DOT11_OFDM_PHY_ATTRIBUTES OFDMAttributes;
            Windows::Win32::NativeWiFi::DOT11_ERP_PHY_ATTRIBUTES ERPAttributes;
        };
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        Windows::Win32::NativeWiFi::DOT11_PHY_TYPE PhyType;
        uint8_t bHardwarePhyState;
        uint8_t bSoftwarePhyState;
        uint8_t bCFPollable;
        uint32_t uMPDUMaxLength;
        Windows::Win32::NativeWiFi::DOT11_TEMP_TYPE TempType;
        Windows::Win32::NativeWiFi::DOT11_DIVERSITY_SUPPORT DiversitySupport;
        _PhySpecificAttributes_e__Union PhySpecificAttributes;
        uint32_t uNumberSupportedPowerLevels;
        uint32_t TxPowerLevels[8];
        uint32_t uNumDataRateMappingEntries;
        Windows::Win32::NativeWiFi::DOT11_DATA_RATE_MAPPING_ENTRY DataRateMappingEntries[126];
        Windows::Win32::NativeWiFi::DOT11_SUPPORTED_DATA_RATES_VALUE_V2 SupportedDataRatesValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_EXTSTA_ATTRIBUTES
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint32_t uScanSSIDListSize;
        uint32_t uDesiredBSSIDListSize;
        uint32_t uDesiredSSIDListSize;
        uint32_t uExcludedMacAddressListSize;
        uint32_t uPrivacyExemptionListSize;
        uint32_t uKeyMappingTableSize;
        uint32_t uDefaultKeyTableSize;
        uint32_t uWEPKeyValueMaxLength;
        uint32_t uPMKIDCacheSize;
        uint32_t uMaxNumPerSTADefaultKeyTables;
        uint8_t bStrictlyOrderedServiceClassImplemented;
        uint8_t ucSupportedQoSProtocolFlags;
        uint8_t bSafeModeImplemented;
        uint32_t uNumSupportedCountryOrRegionStrings;
        uint8_t* pSupportedCountryOrRegionStrings;
        uint32_t uInfraNumSupportedUcastAlgoPairs;
        Windows::Win32::NativeWiFi::DOT11_AUTH_CIPHER_PAIR* pInfraSupportedUcastAlgoPairs;
        uint32_t uInfraNumSupportedMcastAlgoPairs;
        Windows::Win32::NativeWiFi::DOT11_AUTH_CIPHER_PAIR* pInfraSupportedMcastAlgoPairs;
        uint32_t uAdhocNumSupportedUcastAlgoPairs;
        Windows::Win32::NativeWiFi::DOT11_AUTH_CIPHER_PAIR* pAdhocSupportedUcastAlgoPairs;
        uint32_t uAdhocNumSupportedMcastAlgoPairs;
        Windows::Win32::NativeWiFi::DOT11_AUTH_CIPHER_PAIR* pAdhocSupportedMcastAlgoPairs;
        uint8_t bAutoPowerSaveMode;
        uint32_t uMaxNetworkOffloadListSize;
        uint8_t bMFPCapable;
        uint32_t uInfraNumSupportedMcastMgmtAlgoPairs;
        Windows::Win32::NativeWiFi::DOT11_AUTH_CIPHER_PAIR* pInfraSupportedMcastMgmtAlgoPairs;
        uint8_t bNeighborReportSupported;
        uint8_t bAPChannelReportSupported;
        uint8_t bActionFramesSupported;
        uint8_t bANQPQueryOffloadSupported;
        uint8_t bHESSIDConnectionSupported;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_RECV_EXTENSION_INFO
    {
        uint32_t uVersion;
        void* pvReserved;
        Windows::Win32::NativeWiFi::DOT11_PHY_TYPE dot11PhyType;
        uint32_t uChCenterFrequency;
        int32_t lRSSI;
        int32_t lRSSIMin;
        int32_t lRSSIMax;
        uint32_t uRSSI;
        uint8_t ucPriority;
        uint8_t ucDataRate;
        uint8_t ucPeerMacAddress[6];
        uint32_t dwExtendedStatus;
        Windows::Win32::SystemServices::HANDLE hWEPOffloadContext;
        Windows::Win32::SystemServices::HANDLE hAuthOffloadContext;
        uint16_t usWEPAppliedMask;
        uint16_t usWPAMSDUPriority;
        Windows::Win32::NativeWiFi::DOT11_IV48_COUNTER dot11LowestIV48Counter;
        uint16_t usDot11LeftRWBitMap;
        Windows::Win32::NativeWiFi::DOT11_IV48_COUNTER dot11HighestIV48Counter;
        uint16_t usDot11RightRWBitMap;
        uint16_t usNumberOfMPDUsReceived;
        uint16_t usNumberOfFragments;
        void* pNdisPackets[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_RECV_EXTENSION_INFO_V2
    {
        uint32_t uVersion;
        void* pvReserved;
        Windows::Win32::NativeWiFi::DOT11_PHY_TYPE dot11PhyType;
        uint32_t uChCenterFrequency;
        int32_t lRSSI;
        uint32_t uRSSI;
        uint8_t ucPriority;
        uint8_t ucDataRate;
        uint8_t ucPeerMacAddress[6];
        uint32_t dwExtendedStatus;
        Windows::Win32::SystemServices::HANDLE hWEPOffloadContext;
        Windows::Win32::SystemServices::HANDLE hAuthOffloadContext;
        uint16_t usWEPAppliedMask;
        uint16_t usWPAMSDUPriority;
        Windows::Win32::NativeWiFi::DOT11_IV48_COUNTER dot11LowestIV48Counter;
        uint16_t usDot11LeftRWBitMap;
        Windows::Win32::NativeWiFi::DOT11_IV48_COUNTER dot11HighestIV48Counter;
        uint16_t usDot11RightRWBitMap;
        uint16_t usNumberOfMPDUsReceived;
        uint16_t usNumberOfFragments;
        void* pNdisPackets[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_STATUS_INDICATION
    {
        uint32_t uStatusType;
        int32_t ndisStatus;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_MPDU_MAX_LENGTH_INDICATION
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint32_t uPhyId;
        uint32_t uMPDUMaxLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_ASSOCIATION_START_PARAMETERS
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint8_t MacAddr[6];
        Windows::Win32::NativeWiFi::DOT11_SSID SSID;
        uint32_t uIHVDataOffset;
        uint32_t uIHVDataSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_ENCAP_ENTRY
    {
        uint16_t usEtherType;
        uint16_t usEncapType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_ASSOCIATION_COMPLETION_PARAMETERS
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint8_t MacAddr[6];
        uint32_t uStatus;
        uint8_t bReAssocReq;
        uint8_t bReAssocResp;
        uint32_t uAssocReqOffset;
        uint32_t uAssocReqSize;
        uint32_t uAssocRespOffset;
        uint32_t uAssocRespSize;
        uint32_t uBeaconOffset;
        uint32_t uBeaconSize;
        uint32_t uIHVDataOffset;
        uint32_t uIHVDataSize;
        Windows::Win32::NativeWiFi::DOT11_AUTH_ALGORITHM AuthAlgo;
        Windows::Win32::NativeWiFi::DOT11_CIPHER_ALGORITHM UnicastCipher;
        Windows::Win32::NativeWiFi::DOT11_CIPHER_ALGORITHM MulticastCipher;
        uint32_t uActivePhyListOffset;
        uint32_t uActivePhyListSize;
        uint8_t bFourAddressSupported;
        uint8_t bPortAuthorized;
        uint8_t ucActiveQoSProtocol;
        Windows::Win32::NativeWiFi::DOT11_DS_INFO DSInfo;
        uint32_t uEncapTableOffset;
        uint32_t uEncapTableSize;
        Windows::Win32::NativeWiFi::DOT11_CIPHER_ALGORITHM MulticastMgmtCipher;
        uint32_t uAssocComebackTime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_CONNECTION_START_PARAMETERS
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        Windows::Win32::NativeWiFi::DOT11_BSS_TYPE BSSType;
        uint8_t AdhocBSSID[6];
        Windows::Win32::NativeWiFi::DOT11_SSID AdhocSSID;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_CONNECTION_COMPLETION_PARAMETERS
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint32_t uStatus;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_ROAMING_START_PARAMETERS
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint8_t AdhocBSSID[6];
        Windows::Win32::NativeWiFi::DOT11_SSID AdhocSSID;
        uint32_t uRoamingReason;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_ROAMING_COMPLETION_PARAMETERS
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint32_t uStatus;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_DISASSOCIATION_PARAMETERS
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint8_t MacAddr[6];
        uint32_t uReason;
        uint32_t uIHVDataOffset;
        uint32_t uIHVDataSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_TKIPMIC_FAILURE_PARAMETERS
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint8_t bDefaultKeyFailure;
        uint32_t uKeyIndex;
        uint8_t PeerMac[6];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_PMKID_CANDIDATE_LIST_PARAMETERS
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint32_t uCandidateListSize;
        uint32_t uCandidateListOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_BSSID_CANDIDATE
    {
        uint8_t BSSID[6];
        uint32_t uFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_PHY_STATE_PARAMETERS
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint32_t uPhyId;
        uint8_t bHardwarePhyState;
        uint8_t bSoftwarePhyState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_LINK_QUALITY_ENTRY
    {
        uint8_t PeerMacAddr[6];
        uint8_t ucLinkQuality;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_LINK_QUALITY_PARAMETERS
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint32_t uLinkQualityListSize;
        uint32_t uLinkQualityListOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_EXTSTA_SEND_CONTEXT
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint16_t usExemptionActionType;
        uint32_t uPhyId;
        uint32_t uDelayedSleepValue;
        void* pvMediaSpecificInfo;
        uint32_t uSendFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_EXTSTA_RECV_CONTEXT
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint32_t uReceiveFlags;
        uint32_t uPhyId;
        uint32_t uChCenterFrequency;
        uint16_t usNumberOfMPDUsReceived;
        int32_t lRSSI;
        uint8_t ucDataRate;
        uint32_t uSizeMediaSpecificInfo;
        void* pvMediaSpecificInfo;
        uint64_t ullTimestamp;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_EXTAP_ATTRIBUTES
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint32_t uScanSSIDListSize;
        uint32_t uDesiredSSIDListSize;
        uint32_t uPrivacyExemptionListSize;
        uint32_t uAssociationTableSize;
        uint32_t uDefaultKeyTableSize;
        uint32_t uWEPKeyValueMaxLength;
        uint8_t bStrictlyOrderedServiceClassImplemented;
        uint32_t uNumSupportedCountryOrRegionStrings;
        uint8_t* pSupportedCountryOrRegionStrings;
        uint32_t uInfraNumSupportedUcastAlgoPairs;
        Windows::Win32::NativeWiFi::DOT11_AUTH_CIPHER_PAIR* pInfraSupportedUcastAlgoPairs;
        uint32_t uInfraNumSupportedMcastAlgoPairs;
        Windows::Win32::NativeWiFi::DOT11_AUTH_CIPHER_PAIR* pInfraSupportedMcastAlgoPairs;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_INCOMING_ASSOC_STARTED_PARAMETERS
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint8_t PeerMacAddr[6];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_INCOMING_ASSOC_REQUEST_RECEIVED_PARAMETERS
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint8_t PeerMacAddr[6];
        uint8_t bReAssocReq;
        uint32_t uAssocReqOffset;
        uint32_t uAssocReqSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_INCOMING_ASSOC_COMPLETION_PARAMETERS
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint8_t PeerMacAddr[6];
        uint32_t uStatus;
        uint8_t ucErrorSource;
        uint8_t bReAssocReq;
        uint8_t bReAssocResp;
        uint32_t uAssocReqOffset;
        uint32_t uAssocReqSize;
        uint32_t uAssocRespOffset;
        uint32_t uAssocRespSize;
        Windows::Win32::NativeWiFi::DOT11_AUTH_ALGORITHM AuthAlgo;
        Windows::Win32::NativeWiFi::DOT11_CIPHER_ALGORITHM UnicastCipher;
        Windows::Win32::NativeWiFi::DOT11_CIPHER_ALGORITHM MulticastCipher;
        uint32_t uActivePhyListOffset;
        uint32_t uActivePhyListSize;
        uint32_t uBeaconOffset;
        uint32_t uBeaconSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_STOP_AP_PARAMETERS
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint32_t ulReason;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_PHY_FREQUENCY_ADOPTED_PARAMETERS
    {
        union _Anonymous_e__Union
        {
            uint32_t ulChannel;
            uint32_t ulFrequency;
        };
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint32_t ulPhyId;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_CAN_SUSTAIN_AP_PARAMETERS
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint32_t ulReason;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_AVAILABLE_CHANNEL_LIST
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint32_t uNumOfEntries;
        uint32_t uTotalNumOfEntries;
        uint32_t uChannelNumber[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_AVAILABLE_FREQUENCY_LIST
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint32_t uNumOfEntries;
        uint32_t uTotalNumOfEntries;
        uint32_t uFrequencyValue[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_DISASSOCIATE_PEER_REQUEST
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint8_t PeerMacAddr[6];
        uint16_t usReason;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_INCOMING_ASSOC_DECISION
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint8_t PeerMacAddr[6];
        uint8_t bAccept;
        uint16_t usReasonCode;
        uint32_t uAssocResponseIEsOffset;
        uint32_t uAssocResponseIEsLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_INCOMING_ASSOC_DECISION_V2
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint8_t PeerMacAddr[6];
        uint8_t bAccept;
        uint16_t usReasonCode;
        uint32_t uAssocResponseIEsOffset;
        uint32_t uAssocResponseIEsLength;
        uint8_t WFDStatus;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_ADDITIONAL_IE
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint32_t uBeaconIEsOffset;
        uint32_t uBeaconIEsLength;
        uint32_t uResponseIEsOffset;
        uint32_t uResponseIEsLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_PEER_STATISTICS
    {
        uint64_t ullDecryptSuccessCount;
        uint64_t ullDecryptFailureCount;
        uint64_t ullTxPacketSuccessCount;
        uint64_t ullTxPacketFailureCount;
        uint64_t ullRxPacketSuccessCount;
        uint64_t ullRxPacketFailureCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_PEER_INFO
    {
        uint8_t MacAddress[6];
        uint16_t usCapabilityInformation;
        Windows::Win32::NativeWiFi::DOT11_AUTH_ALGORITHM AuthAlgo;
        Windows::Win32::NativeWiFi::DOT11_CIPHER_ALGORITHM UnicastCipherAlgo;
        Windows::Win32::NativeWiFi::DOT11_CIPHER_ALGORITHM MulticastCipherAlgo;
        uint8_t bWpsEnabled;
        uint16_t usListenInterval;
        uint8_t ucSupportedRates[255];
        uint16_t usAssociationID;
        Windows::Win32::NativeWiFi::DOT11_ASSOCIATION_STATE AssociationState;
        Windows::Win32::NativeWiFi::DOT11_POWER_MODE PowerMode;
        Windows::Win32::SystemServices::LARGE_INTEGER liAssociationUpTime;
        Windows::Win32::NativeWiFi::DOT11_PEER_STATISTICS Statistics;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_PEER_INFO_LIST
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint32_t uNumOfEntries;
        uint32_t uTotalNumOfEntries;
        Windows::Win32::NativeWiFi::DOT11_PEER_INFO PeerInfo[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_VWIFI_COMBINATION
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint32_t uNumInfrastructure;
        uint32_t uNumAdhoc;
        uint32_t uNumSoftAP;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_VWIFI_COMBINATION_V2
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint32_t uNumInfrastructure;
        uint32_t uNumAdhoc;
        uint32_t uNumSoftAP;
        uint32_t uNumVirtualStation;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_VWIFI_COMBINATION_V3
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint32_t uNumInfrastructure;
        uint32_t uNumAdhoc;
        uint32_t uNumSoftAP;
        uint32_t uNumVirtualStation;
        uint32_t uNumWFDGroup;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_VWIFI_ATTRIBUTES
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint32_t uTotalNumOfEntries;
        Windows::Win32::NativeWiFi::DOT11_VWIFI_COMBINATION Combinations[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_MAC_PARAMETERS
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint32_t uOpmodeMask;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_MAC_INFO
    {
        uint32_t uReserved;
        uint32_t uNdisPortNumber;
        uint8_t MacAddr[6];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_WFD_ATTRIBUTES
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint32_t uNumConcurrentGORole;
        uint32_t uNumConcurrentClientRole;
        uint32_t WPSVersionsSupported;
        uint8_t bServiceDiscoverySupported;
        uint8_t bClientDiscoverabilitySupported;
        uint8_t bInfrastructureManagementSupported;
        uint32_t uMaxSecondaryDeviceTypeListSize;
        uint8_t DeviceAddress[6];
        uint32_t uInterfaceAddressListCount;
        uint8_t* pInterfaceAddressList;
        uint32_t uNumSupportedCountryOrRegionStrings;
        uint8_t* pSupportedCountryOrRegionStrings;
        uint32_t uDiscoveryFilterListSize;
        uint32_t uGORoleClientTableSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_WFD_DEVICE_TYPE
    {
        uint16_t CategoryID;
        uint16_t SubCategoryID;
        uint8_t OUI[4];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_WPS_DEVICE_NAME
    {
        uint32_t uDeviceNameLength;
        uint8_t ucDeviceName[32];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_WFD_CONFIGURATION_TIMEOUT
    {
        uint8_t GOTimeout;
        uint8_t ClientTimeout;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_WFD_GROUP_ID
    {
        uint8_t DeviceAddress[6];
        Windows::Win32::NativeWiFi::DOT11_SSID SSID;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_WFD_GO_INTENT
    {
        uint8_t _bitfield;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_WFD_CHANNEL
    {
        uint8_t CountryRegionString[3];
        uint8_t OperatingClass;
        uint8_t ChannelNumber;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct WFDSVC_CONNECTION_CAPABILITY
    {
        uint8_t bNew;
        uint8_t bClient;
        uint8_t bGO;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_WFD_SERVICE_HASH_LIST
    {
        uint16_t ServiceHashCount;
        uint8_t ServiceHash[6];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_WFD_ADVERTISEMENT_ID
    {
        uint32_t AdvertisementID;
        uint8_t ServiceAddress[6];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_WFD_SESSION_ID
    {
        uint32_t SessionID;
        uint8_t SessionAddress[6];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_WFD_ADVERTISED_SERVICE_DESCRIPTOR
    {
        uint32_t AdvertisementID;
        uint16_t ConfigMethods;
        uint8_t ServiceNameLength;
        uint8_t ServiceName[255];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_WFD_ADVERTISED_SERVICE_LIST
    {
        uint16_t ServiceCount;
        Windows::Win32::NativeWiFi::DOT11_WFD_ADVERTISED_SERVICE_DESCRIPTOR AdvertisedService[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_WFD_DISCOVER_COMPLETE_PARAMETERS
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        int32_t Status;
        uint32_t uNumOfEntries;
        uint32_t uTotalNumOfEntries;
        uint32_t uListOffset;
        uint32_t uListLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_GO_NEGOTIATION_REQUEST_SEND_COMPLETE_PARAMETERS
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint8_t PeerDeviceAddress[6];
        uint8_t DialogToken;
        int32_t Status;
        uint32_t uIEsOffset;
        uint32_t uIEsLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_RECEIVED_GO_NEGOTIATION_REQUEST_PARAMETERS
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint8_t PeerDeviceAddress[6];
        uint8_t DialogToken;
        void* RequestContext;
        uint32_t uIEsOffset;
        uint32_t uIEsLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_GO_NEGOTIATION_RESPONSE_SEND_COMPLETE_PARAMETERS
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint8_t PeerDeviceAddress[6];
        uint8_t DialogToken;
        int32_t Status;
        uint32_t uIEsOffset;
        uint32_t uIEsLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_RECEIVED_GO_NEGOTIATION_RESPONSE_PARAMETERS
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint8_t PeerDeviceAddress[6];
        uint8_t DialogToken;
        void* ResponseContext;
        uint32_t uIEsOffset;
        uint32_t uIEsLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_GO_NEGOTIATION_CONFIRMATION_SEND_COMPLETE_PARAMETERS
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint8_t PeerDeviceAddress[6];
        uint8_t DialogToken;
        int32_t Status;
        uint32_t uIEsOffset;
        uint32_t uIEsLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_RECEIVED_GO_NEGOTIATION_CONFIRMATION_PARAMETERS
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint8_t PeerDeviceAddress[6];
        uint8_t DialogToken;
        uint32_t uIEsOffset;
        uint32_t uIEsLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_INVITATION_REQUEST_SEND_COMPLETE_PARAMETERS
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint8_t PeerDeviceAddress[6];
        uint8_t ReceiverAddress[6];
        uint8_t DialogToken;
        int32_t Status;
        uint32_t uIEsOffset;
        uint32_t uIEsLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_RECEIVED_INVITATION_REQUEST_PARAMETERS
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint8_t TransmitterDeviceAddress[6];
        uint8_t BSSID[6];
        uint8_t DialogToken;
        void* RequestContext;
        uint32_t uIEsOffset;
        uint32_t uIEsLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_INVITATION_RESPONSE_SEND_COMPLETE_PARAMETERS
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint8_t ReceiverDeviceAddress[6];
        uint8_t DialogToken;
        int32_t Status;
        uint32_t uIEsOffset;
        uint32_t uIEsLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_RECEIVED_INVITATION_RESPONSE_PARAMETERS
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint8_t TransmitterDeviceAddress[6];
        uint8_t BSSID[6];
        uint8_t DialogToken;
        uint32_t uIEsOffset;
        uint32_t uIEsLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_PROVISION_DISCOVERY_REQUEST_SEND_COMPLETE_PARAMETERS
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint8_t PeerDeviceAddress[6];
        uint8_t ReceiverAddress[6];
        uint8_t DialogToken;
        int32_t Status;
        uint32_t uIEsOffset;
        uint32_t uIEsLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_RECEIVED_PROVISION_DISCOVERY_REQUEST_PARAMETERS
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint8_t TransmitterDeviceAddress[6];
        uint8_t BSSID[6];
        uint8_t DialogToken;
        void* RequestContext;
        uint32_t uIEsOffset;
        uint32_t uIEsLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_PROVISION_DISCOVERY_RESPONSE_SEND_COMPLETE_PARAMETERS
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint8_t ReceiverDeviceAddress[6];
        uint8_t DialogToken;
        int32_t Status;
        uint32_t uIEsOffset;
        uint32_t uIEsLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_RECEIVED_PROVISION_DISCOVERY_RESPONSE_PARAMETERS
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint8_t TransmitterDeviceAddress[6];
        uint8_t BSSID[6];
        uint8_t DialogToken;
        uint32_t uIEsOffset;
        uint32_t uIEsLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_ANQP_QUERY_COMPLETE_PARAMETERS
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        Windows::Win32::NativeWiFi::DOT11_ANQP_QUERY_RESULT Status;
        Windows::Win32::SystemServices::HANDLE hContext;
        uint32_t uResponseLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_WFD_DEVICE_CAPABILITY_CONFIG
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint8_t bServiceDiscoveryEnabled;
        uint8_t bClientDiscoverabilityEnabled;
        uint8_t bConcurrentOperationSupported;
        uint8_t bInfrastructureManagementEnabled;
        uint8_t bDeviceLimitReached;
        uint8_t bInvitationProcedureEnabled;
        uint32_t WPSVersionsEnabled;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_WFD_GROUP_OWNER_CAPABILITY_CONFIG
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint8_t bPersistentGroupEnabled;
        uint8_t bIntraBSSDistributionSupported;
        uint8_t bCrossConnectionSupported;
        uint8_t bPersistentReconnectSupported;
        uint8_t bGroupFormationEnabled;
        uint32_t uMaximumGroupLimit;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_WFD_GROUP_OWNER_CAPABILITY_CONFIG_V2
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint8_t bPersistentGroupEnabled;
        uint8_t bIntraBSSDistributionSupported;
        uint8_t bCrossConnectionSupported;
        uint8_t bPersistentReconnectSupported;
        uint8_t bGroupFormationEnabled;
        uint32_t uMaximumGroupLimit;
        uint8_t bEapolKeyIpAddressAllocationSupported;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_WFD_DEVICE_INFO
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint8_t DeviceAddress[6];
        uint16_t ConfigMethods;
        Windows::Win32::NativeWiFi::DOT11_WFD_DEVICE_TYPE PrimaryDeviceType;
        Windows::Win32::NativeWiFi::DOT11_WPS_DEVICE_NAME DeviceName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_WFD_SECONDARY_DEVICE_TYPE_LIST
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint32_t uNumOfEntries;
        uint32_t uTotalNumOfEntries;
        Windows::Win32::NativeWiFi::DOT11_WFD_DEVICE_TYPE SecondaryDeviceTypes[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_WFD_DISCOVER_DEVICE_FILTER
    {
        uint8_t DeviceID[6];
        uint8_t ucBitmask;
        Windows::Win32::NativeWiFi::DOT11_SSID GroupSSID;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_WFD_DISCOVER_REQUEST
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        Windows::Win32::NativeWiFi::DOT11_WFD_DISCOVER_TYPE DiscoverType;
        Windows::Win32::NativeWiFi::DOT11_WFD_SCAN_TYPE ScanType;
        uint32_t uDiscoverTimeout;
        uint32_t uDeviceFilterListOffset;
        uint32_t uNumDeviceFilters;
        uint32_t uIEsOffset;
        uint32_t uIEsLength;
        uint8_t bForceScanLegacyNetworks;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_WFD_DEVICE_ENTRY
    {
        uint32_t uPhyId;
        Windows::Win32::NativeWiFi::DOT11_BSS_ENTRY_PHY_SPECIFIC_INFO PhySpecificInfo;
        uint8_t dot11BSSID[6];
        Windows::Win32::NativeWiFi::DOT11_BSS_TYPE dot11BSSType;
        uint8_t TransmitterAddress[6];
        int32_t lRSSI;
        uint32_t uLinkQuality;
        uint16_t usBeaconPeriod;
        uint64_t ullTimestamp;
        uint64_t ullBeaconHostTimestamp;
        uint64_t ullProbeResponseHostTimestamp;
        uint16_t usCapabilityInformation;
        uint32_t uBeaconIEsOffset;
        uint32_t uBeaconIEsLength;
        uint32_t uProbeResponseIEsOffset;
        uint32_t uProbeResponseIEsLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_WFD_ADDITIONAL_IE
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint32_t uBeaconIEsOffset;
        uint32_t uBeaconIEsLength;
        uint32_t uProbeResponseIEsOffset;
        uint32_t uProbeResponseIEsLength;
        uint32_t uDefaultRequestIEsOffset;
        uint32_t uDefaultRequestIEsLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_SEND_GO_NEGOTIATION_REQUEST_PARAMETERS
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint8_t PeerDeviceAddress[6];
        uint8_t DialogToken;
        uint32_t uSendTimeout;
        Windows::Win32::NativeWiFi::DOT11_WFD_GO_INTENT GroupOwnerIntent;
        Windows::Win32::NativeWiFi::DOT11_WFD_CONFIGURATION_TIMEOUT MinimumConfigTimeout;
        uint8_t IntendedInterfaceAddress[6];
        uint8_t GroupCapability;
        uint32_t uIEsOffset;
        uint32_t uIEsLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_SEND_GO_NEGOTIATION_RESPONSE_PARAMETERS
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint8_t PeerDeviceAddress[6];
        uint8_t DialogToken;
        void* RequestContext;
        uint32_t uSendTimeout;
        uint8_t Status;
        Windows::Win32::NativeWiFi::DOT11_WFD_GO_INTENT GroupOwnerIntent;
        Windows::Win32::NativeWiFi::DOT11_WFD_CONFIGURATION_TIMEOUT MinimumConfigTimeout;
        uint8_t IntendedInterfaceAddress[6];
        uint8_t GroupCapability;
        Windows::Win32::NativeWiFi::DOT11_WFD_GROUP_ID GroupID;
        uint8_t bUseGroupID;
        uint32_t uIEsOffset;
        uint32_t uIEsLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_SEND_GO_NEGOTIATION_CONFIRMATION_PARAMETERS
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint8_t PeerDeviceAddress[6];
        uint8_t DialogToken;
        void* ResponseContext;
        uint32_t uSendTimeout;
        uint8_t Status;
        uint8_t GroupCapability;
        Windows::Win32::NativeWiFi::DOT11_WFD_GROUP_ID GroupID;
        uint8_t bUseGroupID;
        uint32_t uIEsOffset;
        uint32_t uIEsLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_WFD_INVITATION_FLAGS
    {
        uint8_t _bitfield;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_SEND_INVITATION_REQUEST_PARAMETERS
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint8_t DialogToken;
        uint8_t PeerDeviceAddress[6];
        uint32_t uSendTimeout;
        Windows::Win32::NativeWiFi::DOT11_WFD_CONFIGURATION_TIMEOUT MinimumConfigTimeout;
        Windows::Win32::NativeWiFi::DOT11_WFD_INVITATION_FLAGS InvitationFlags;
        uint8_t GroupBSSID[6];
        uint8_t bUseGroupBSSID;
        Windows::Win32::NativeWiFi::DOT11_WFD_CHANNEL OperatingChannel;
        uint8_t bUseSpecifiedOperatingChannel;
        Windows::Win32::NativeWiFi::DOT11_WFD_GROUP_ID GroupID;
        uint8_t bLocalGO;
        uint32_t uIEsOffset;
        uint32_t uIEsLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_SEND_INVITATION_RESPONSE_PARAMETERS
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint8_t ReceiverDeviceAddress[6];
        uint8_t DialogToken;
        void* RequestContext;
        uint32_t uSendTimeout;
        uint8_t Status;
        Windows::Win32::NativeWiFi::DOT11_WFD_CONFIGURATION_TIMEOUT MinimumConfigTimeout;
        uint8_t GroupBSSID[6];
        uint8_t bUseGroupBSSID;
        Windows::Win32::NativeWiFi::DOT11_WFD_CHANNEL OperatingChannel;
        uint8_t bUseSpecifiedOperatingChannel;
        uint32_t uIEsOffset;
        uint32_t uIEsLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_SEND_PROVISION_DISCOVERY_REQUEST_PARAMETERS
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint8_t DialogToken;
        uint8_t PeerDeviceAddress[6];
        uint32_t uSendTimeout;
        uint8_t GroupCapability;
        Windows::Win32::NativeWiFi::DOT11_WFD_GROUP_ID GroupID;
        uint8_t bUseGroupID;
        uint32_t uIEsOffset;
        uint32_t uIEsLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_SEND_PROVISION_DISCOVERY_RESPONSE_PARAMETERS
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint8_t ReceiverDeviceAddress[6];
        uint8_t DialogToken;
        void* RequestContext;
        uint32_t uSendTimeout;
        uint32_t uIEsOffset;
        uint32_t uIEsLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_WFD_DEVICE_LISTEN_CHANNEL
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint8_t ChannelNumber;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_WFD_GROUP_START_PARAMETERS
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        Windows::Win32::NativeWiFi::DOT11_WFD_CHANNEL AdvertisedOperatingChannel;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_WFD_GROUP_JOIN_PARAMETERS
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        Windows::Win32::NativeWiFi::DOT11_WFD_CHANNEL GOOperatingChannel;
        uint32_t GOConfigTime;
        uint8_t bInGroupFormation;
        uint8_t bWaitForWPSReady;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_POWER_MGMT_AUTO_MODE_ENABLED_INFO
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint8_t bEnabled;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_POWER_MGMT_MODE_STATUS_INFO
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        Windows::Win32::NativeWiFi::DOT11_POWER_MODE PowerSaveMode;
        uint32_t uPowerSaveLevel;
        Windows::Win32::NativeWiFi::DOT11_POWER_MODE_REASON Reason;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_CHANNEL_HINT
    {
        Windows::Win32::NativeWiFi::DOT11_PHY_TYPE Dot11PhyType;
        uint32_t uChannelNumber;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_OFFLOAD_NETWORK
    {
        Windows::Win32::NativeWiFi::DOT11_SSID Ssid;
        Windows::Win32::NativeWiFi::DOT11_CIPHER_ALGORITHM UnicastCipher;
        Windows::Win32::NativeWiFi::DOT11_AUTH_ALGORITHM AuthAlgo;
        Windows::Win32::NativeWiFi::DOT11_CHANNEL_HINT Dot11ChannelHints[4];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_OFFLOAD_NETWORK_LIST_INFO
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        uint32_t ulFlags;
        uint32_t FastScanPeriod;
        uint32_t FastScanIterations;
        uint32_t SlowScanPeriod;
        uint32_t uNumOfEntries;
        Windows::Win32::NativeWiFi::DOT11_OFFLOAD_NETWORK offloadNetworkList[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_OFFLOAD_NETWORK_STATUS_PARAMETERS
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        int32_t Status;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_MANUFACTURING_TEST
    {
        Windows::Win32::NativeWiFi::DOT11_MANUFACTURING_TEST_TYPE dot11ManufacturingTestType;
        uint32_t uBufferLength;
        uint8_t ucBuffer[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_MANUFACTURING_SELF_TEST_SET_PARAMS
    {
        Windows::Win32::NativeWiFi::DOT11_MANUFACTURING_SELF_TEST_TYPE SelfTestType;
        uint32_t uTestID;
        uint32_t uPinBitMask;
        void* pvContext;
        uint32_t uBufferLength;
        uint8_t ucBufferIn[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_MANUFACTURING_SELF_TEST_QUERY_RESULTS
    {
        Windows::Win32::NativeWiFi::DOT11_MANUFACTURING_SELF_TEST_TYPE SelfTestType;
        uint32_t uTestID;
        uint8_t bResult;
        uint32_t uPinFailedBitMask;
        void* pvContext;
        uint32_t uBytesWrittenOut;
        uint8_t ucBufferOut[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_MANUFACTURING_FUNCTIONAL_TEST_RX
    {
        uint8_t bEnabled;
        Windows::Win32::NativeWiFi::DOT11_BAND Dot11Band;
        uint32_t uChannel;
        int32_t PowerLevel;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_MANUFACTURING_FUNCTIONAL_TEST_TX
    {
        uint8_t bEnable;
        uint8_t bOpenLoop;
        Windows::Win32::NativeWiFi::DOT11_BAND Dot11Band;
        uint32_t uChannel;
        uint32_t uSetPowerLevel;
        int32_t ADCPowerLevel;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_MANUFACTURING_FUNCTIONAL_TEST_QUERY_ADC
    {
        Windows::Win32::NativeWiFi::DOT11_BAND Dot11Band;
        uint32_t uChannel;
        int32_t ADCPowerLevel;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_MANUFACTURING_TEST_SET_DATA
    {
        uint32_t uKey;
        uint32_t uOffset;
        uint32_t uBufferLength;
        uint8_t ucBufferIn[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_MANUFACTURING_TEST_QUERY_DATA
    {
        uint32_t uKey;
        uint32_t uOffset;
        uint32_t uBufferLength;
        uint32_t uBytesRead;
        uint8_t ucBufferOut[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_MANUFACTURING_TEST_SLEEP
    {
        uint32_t uSleepTime;
        void* pvContext;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_MANUFACTURING_CALLBACK_PARAMETERS
    {
        Windows::Win32::NativeWiFi::NDIS_OBJECT_HEADER Header;
        Windows::Win32::NativeWiFi::DOT11_MANUFACTURING_CALLBACK_TYPE dot11ManufacturingCallbackType;
        uint32_t uStatus;
        void* pvContext;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct WLAN_PROFILE_INFO
    {
        uint16_t strProfileName[256];
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_NETWORK
    {
        Windows::Win32::NativeWiFi::DOT11_SSID dot11Ssid;
        Windows::Win32::NativeWiFi::DOT11_BSS_TYPE dot11BssType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct WLAN_RAW_DATA
    {
        uint32_t dwDataSize;
        uint8_t DataBlob[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct WLAN_RAW_DATA_LIST
    {
        struct _Anonymous_e__Struct
        {
            uint32_t dwDataOffset;
            uint32_t dwDataSize;
        };
        uint32_t dwTotalSize;
        uint32_t dwNumberOfItems;
        _Anonymous_e__Struct DataList[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct WLAN_RATE_SET
    {
        uint32_t uRateSetLength;
        uint16_t usRateSet[126];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct WLAN_AVAILABLE_NETWORK
    {
        uint16_t strProfileName[256];
        Windows::Win32::NativeWiFi::DOT11_SSID dot11Ssid;
        Windows::Win32::NativeWiFi::DOT11_BSS_TYPE dot11BssType;
        uint32_t uNumberOfBssids;
        Windows::Win32::SystemServices::BOOL bNetworkConnectable;
        uint32_t wlanNotConnectableReason;
        uint32_t uNumberOfPhyTypes;
        Windows::Win32::NativeWiFi::DOT11_PHY_TYPE dot11PhyTypes[8];
        Windows::Win32::SystemServices::BOOL bMorePhyTypes;
        uint32_t wlanSignalQuality;
        Windows::Win32::SystemServices::BOOL bSecurityEnabled;
        Windows::Win32::NativeWiFi::DOT11_AUTH_ALGORITHM dot11DefaultAuthAlgorithm;
        Windows::Win32::NativeWiFi::DOT11_CIPHER_ALGORITHM dot11DefaultCipherAlgorithm;
        uint32_t dwFlags;
        uint32_t dwReserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct WLAN_AVAILABLE_NETWORK_V2
    {
        uint16_t strProfileName[256];
        Windows::Win32::NativeWiFi::DOT11_SSID dot11Ssid;
        Windows::Win32::NativeWiFi::DOT11_BSS_TYPE dot11BssType;
        uint32_t uNumberOfBssids;
        Windows::Win32::SystemServices::BOOL bNetworkConnectable;
        uint32_t wlanNotConnectableReason;
        uint32_t uNumberOfPhyTypes;
        Windows::Win32::NativeWiFi::DOT11_PHY_TYPE dot11PhyTypes[8];
        Windows::Win32::SystemServices::BOOL bMorePhyTypes;
        uint32_t wlanSignalQuality;
        Windows::Win32::SystemServices::BOOL bSecurityEnabled;
        Windows::Win32::NativeWiFi::DOT11_AUTH_ALGORITHM dot11DefaultAuthAlgorithm;
        Windows::Win32::NativeWiFi::DOT11_CIPHER_ALGORITHM dot11DefaultCipherAlgorithm;
        uint32_t dwFlags;
        Windows::Win32::NativeWiFi::DOT11_ACCESSNETWORKOPTIONS AccessNetworkOptions;
        uint8_t dot11HESSID[6];
        Windows::Win32::NativeWiFi::DOT11_VENUEINFO VenueInfo;
        uint32_t dwReserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct WLAN_BSS_ENTRY
    {
        Windows::Win32::NativeWiFi::DOT11_SSID dot11Ssid;
        uint32_t uPhyId;
        uint8_t dot11Bssid[6];
        Windows::Win32::NativeWiFi::DOT11_BSS_TYPE dot11BssType;
        Windows::Win32::NativeWiFi::DOT11_PHY_TYPE dot11BssPhyType;
        int32_t lRssi;
        uint32_t uLinkQuality;
        uint8_t bInRegDomain;
        uint16_t usBeaconPeriod;
        uint64_t ullTimestamp;
        uint64_t ullHostTimestamp;
        uint16_t usCapabilityInformation;
        uint32_t ulChCenterFrequency;
        Windows::Win32::NativeWiFi::WLAN_RATE_SET wlanRateSet;
        uint32_t ulIeOffset;
        uint32_t ulIeSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct WLAN_BSS_LIST
    {
        uint32_t dwTotalSize;
        uint32_t dwNumberOfItems;
        Windows::Win32::NativeWiFi::WLAN_BSS_ENTRY wlanBssEntries[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct WLAN_INTERFACE_INFO
    {
        ::win32::guid InterfaceGuid;
        uint16_t strInterfaceDescription[256];
        Windows::Win32::NativeWiFi::WLAN_INTERFACE_STATE isState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct WLAN_ASSOCIATION_ATTRIBUTES
    {
        Windows::Win32::NativeWiFi::DOT11_SSID dot11Ssid;
        Windows::Win32::NativeWiFi::DOT11_BSS_TYPE dot11BssType;
        uint8_t dot11Bssid[6];
        Windows::Win32::NativeWiFi::DOT11_PHY_TYPE dot11PhyType;
        uint32_t uDot11PhyIndex;
        uint32_t wlanSignalQuality;
        uint32_t ulRxRate;
        uint32_t ulTxRate;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct WLAN_SECURITY_ATTRIBUTES
    {
        Windows::Win32::SystemServices::BOOL bSecurityEnabled;
        Windows::Win32::SystemServices::BOOL bOneXEnabled;
        Windows::Win32::NativeWiFi::DOT11_AUTH_ALGORITHM dot11AuthAlgorithm;
        Windows::Win32::NativeWiFi::DOT11_CIPHER_ALGORITHM dot11CipherAlgorithm;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct WLAN_CONNECTION_ATTRIBUTES
    {
        Windows::Win32::NativeWiFi::WLAN_INTERFACE_STATE isState;
        Windows::Win32::NativeWiFi::WLAN_CONNECTION_MODE wlanConnectionMode;
        uint16_t strProfileName[256];
        Windows::Win32::NativeWiFi::WLAN_ASSOCIATION_ATTRIBUTES wlanAssociationAttributes;
        Windows::Win32::NativeWiFi::WLAN_SECURITY_ATTRIBUTES wlanSecurityAttributes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct WLAN_PHY_RADIO_STATE
    {
        uint32_t dwPhyIndex;
        Windows::Win32::NativeWiFi::DOT11_RADIO_STATE dot11SoftwareRadioState;
        Windows::Win32::NativeWiFi::DOT11_RADIO_STATE dot11HardwareRadioState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct WLAN_RADIO_STATE
    {
        uint32_t dwNumberOfPhys;
        Windows::Win32::NativeWiFi::WLAN_PHY_RADIO_STATE PhyRadioState[64];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct WLAN_INTERFACE_CAPABILITY
    {
        Windows::Win32::NativeWiFi::WLAN_INTERFACE_TYPE interfaceType;
        Windows::Win32::SystemServices::BOOL bDot11DSupported;
        uint32_t dwMaxDesiredSsidListSize;
        uint32_t dwMaxDesiredBssidListSize;
        uint32_t dwNumberOfSupportedPhys;
        Windows::Win32::NativeWiFi::DOT11_PHY_TYPE dot11PhyTypes[64];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct WLAN_AUTH_CIPHER_PAIR_LIST
    {
        uint32_t dwNumberOfItems;
        Windows::Win32::NativeWiFi::DOT11_AUTH_CIPHER_PAIR pAuthCipherPairList[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct WLAN_COUNTRY_OR_REGION_STRING_LIST
    {
        uint32_t dwNumberOfItems;
        uint8_t pCountryOrRegionStringList[3];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct WLAN_PROFILE_INFO_LIST
    {
        uint32_t dwNumberOfItems;
        uint32_t dwIndex;
        Windows::Win32::NativeWiFi::WLAN_PROFILE_INFO ProfileInfo[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct WLAN_AVAILABLE_NETWORK_LIST
    {
        uint32_t dwNumberOfItems;
        uint32_t dwIndex;
        Windows::Win32::NativeWiFi::WLAN_AVAILABLE_NETWORK Network[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct WLAN_AVAILABLE_NETWORK_LIST_V2
    {
        uint32_t dwNumberOfItems;
        uint32_t dwIndex;
        Windows::Win32::NativeWiFi::WLAN_AVAILABLE_NETWORK_V2 Network[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct WLAN_INTERFACE_INFO_LIST
    {
        uint32_t dwNumberOfItems;
        uint32_t dwIndex;
        Windows::Win32::NativeWiFi::WLAN_INTERFACE_INFO InterfaceInfo[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct DOT11_NETWORK_LIST
    {
        uint32_t dwNumberOfItems;
        uint32_t dwIndex;
        Windows::Win32::NativeWiFi::DOT11_NETWORK Network[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct WLAN_CONNECTION_PARAMETERS
    {
        Windows::Win32::NativeWiFi::WLAN_CONNECTION_MODE wlanConnectionMode;
        uint16_t* strProfile;
        Windows::Win32::NativeWiFi::DOT11_SSID* pDot11Ssid;
        Windows::Win32::NativeWiFi::DOT11_BSSID_LIST* pDesiredBssidList;
        Windows::Win32::NativeWiFi::DOT11_BSS_TYPE dot11BssType;
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct WLAN_CONNECTION_PARAMETERS_V2
    {
        Windows::Win32::NativeWiFi::WLAN_CONNECTION_MODE wlanConnectionMode;
        uint16_t* strProfile;
        Windows::Win32::NativeWiFi::DOT11_SSID* pDot11Ssid;
        uint8_t* pDot11Hessid;
        Windows::Win32::NativeWiFi::DOT11_BSSID_LIST* pDesiredBssidList;
        Windows::Win32::NativeWiFi::DOT11_BSS_TYPE dot11BssType;
        uint32_t dwFlags;
        Windows::Win32::NativeWiFi::DOT11_ACCESSNETWORKOPTIONS* pDot11AccessNetworkOptions;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct WLAN_MSM_NOTIFICATION_DATA
    {
        Windows::Win32::NativeWiFi::WLAN_CONNECTION_MODE wlanConnectionMode;
        uint16_t strProfileName[256];
        Windows::Win32::NativeWiFi::DOT11_SSID dot11Ssid;
        Windows::Win32::NativeWiFi::DOT11_BSS_TYPE dot11BssType;
        uint8_t dot11MacAddr[6];
        Windows::Win32::SystemServices::BOOL bSecurityEnabled;
        Windows::Win32::SystemServices::BOOL bFirstPeer;
        Windows::Win32::SystemServices::BOOL bLastPeer;
        uint32_t wlanReasonCode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct WLAN_CONNECTION_NOTIFICATION_DATA
    {
        Windows::Win32::NativeWiFi::WLAN_CONNECTION_MODE wlanConnectionMode;
        uint16_t strProfileName[256];
        Windows::Win32::NativeWiFi::DOT11_SSID dot11Ssid;
        Windows::Win32::NativeWiFi::DOT11_BSS_TYPE dot11BssType;
        Windows::Win32::SystemServices::BOOL bSecurityEnabled;
        uint32_t wlanReasonCode;
        uint32_t dwFlags;
        uint16_t strProfileXml[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct WLAN_DEVICE_SERVICE_NOTIFICATION_DATA
    {
        ::win32::guid DeviceService;
        uint32_t dwOpCode;
        uint32_t dwDataSize;
        uint8_t DataBlob[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct WLAN_PHY_FRAME_STATISTICS
    {
        uint64_t ullTransmittedFrameCount;
        uint64_t ullMulticastTransmittedFrameCount;
        uint64_t ullFailedCount;
        uint64_t ullRetryCount;
        uint64_t ullMultipleRetryCount;
        uint64_t ullMaxTXLifetimeExceededCount;
        uint64_t ullTransmittedFragmentCount;
        uint64_t ullRTSSuccessCount;
        uint64_t ullRTSFailureCount;
        uint64_t ullACKFailureCount;
        uint64_t ullReceivedFrameCount;
        uint64_t ullMulticastReceivedFrameCount;
        uint64_t ullPromiscuousReceivedFrameCount;
        uint64_t ullMaxRXLifetimeExceededCount;
        uint64_t ullFrameDuplicateCount;
        uint64_t ullReceivedFragmentCount;
        uint64_t ullPromiscuousReceivedFragmentCount;
        uint64_t ullFCSErrorCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct WLAN_MAC_FRAME_STATISTICS
    {
        uint64_t ullTransmittedFrameCount;
        uint64_t ullReceivedFrameCount;
        uint64_t ullWEPExcludedCount;
        uint64_t ullTKIPLocalMICFailures;
        uint64_t ullTKIPReplays;
        uint64_t ullTKIPICVErrorCount;
        uint64_t ullCCMPReplays;
        uint64_t ullCCMPDecryptErrors;
        uint64_t ullWEPUndecryptableCount;
        uint64_t ullWEPICVErrorCount;
        uint64_t ullDecryptSuccessCount;
        uint64_t ullDecryptFailureCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct WLAN_STATISTICS
    {
        uint64_t ullFourWayHandshakeFailures;
        uint64_t ullTKIPCounterMeasuresInvoked;
        uint64_t ullReserved;
        Windows::Win32::NativeWiFi::WLAN_MAC_FRAME_STATISTICS MacUcastCounters;
        Windows::Win32::NativeWiFi::WLAN_MAC_FRAME_STATISTICS MacMcastCounters;
        uint32_t dwNumberOfPhys;
        Windows::Win32::NativeWiFi::WLAN_PHY_FRAME_STATISTICS PhyCounters[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct WLAN_DEVICE_SERVICE_GUID_LIST
    {
        uint32_t dwNumberOfItems;
        uint32_t dwIndex;
        ::win32::guid DeviceService[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct WFD_GROUP_ID
    {
        uint8_t DeviceAddress[6];
        Windows::Win32::NativeWiFi::DOT11_SSID GroupSSID;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct WLAN_HOSTED_NETWORK_PEER_STATE
    {
        uint8_t PeerMacAddress[6];
        Windows::Win32::NativeWiFi::WLAN_HOSTED_NETWORK_PEER_AUTH_STATE PeerAuthState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct WLAN_HOSTED_NETWORK_RADIO_STATE
    {
        Windows::Win32::NativeWiFi::DOT11_RADIO_STATE dot11SoftwareRadioState;
        Windows::Win32::NativeWiFi::DOT11_RADIO_STATE dot11HardwareRadioState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct WLAN_HOSTED_NETWORK_STATE_CHANGE
    {
        Windows::Win32::NativeWiFi::WLAN_HOSTED_NETWORK_STATE OldState;
        Windows::Win32::NativeWiFi::WLAN_HOSTED_NETWORK_STATE NewState;
        Windows::Win32::NativeWiFi::WLAN_HOSTED_NETWORK_REASON StateChangeReason;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct WLAN_HOSTED_NETWORK_DATA_PEER_STATE_CHANGE
    {
        Windows::Win32::NativeWiFi::WLAN_HOSTED_NETWORK_PEER_STATE OldState;
        Windows::Win32::NativeWiFi::WLAN_HOSTED_NETWORK_PEER_STATE NewState;
        Windows::Win32::NativeWiFi::WLAN_HOSTED_NETWORK_REASON PeerStateChangeReason;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct WLAN_HOSTED_NETWORK_CONNECTION_SETTINGS
    {
        Windows::Win32::NativeWiFi::DOT11_SSID hostedNetworkSSID;
        uint32_t dwMaxNumberOfPeers;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct WLAN_HOSTED_NETWORK_SECURITY_SETTINGS
    {
        Windows::Win32::NativeWiFi::DOT11_AUTH_ALGORITHM dot11AuthAlgo;
        Windows::Win32::NativeWiFi::DOT11_CIPHER_ALGORITHM dot11CipherAlgo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct WLAN_HOSTED_NETWORK_STATUS
    {
        Windows::Win32::NativeWiFi::WLAN_HOSTED_NETWORK_STATE HostedNetworkState;
        ::win32::guid IPDeviceID;
        uint8_t wlanHostedNetworkBSSID[6];
        Windows::Win32::NativeWiFi::DOT11_PHY_TYPE dot11PhyType;
        uint32_t ulChannelFrequency;
        uint32_t dwNumberOfPeers;
        Windows::Win32::NativeWiFi::WLAN_HOSTED_NETWORK_PEER_STATE PeerList[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct ONEX_VARIABLE_BLOB
    {
        uint32_t dwSize;
        uint32_t dwOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct ONEX_AUTH_PARAMS
    {
        Windows::Win32::SystemServices::BOOL fUpdatePending;
        Windows::Win32::NativeWiFi::ONEX_VARIABLE_BLOB oneXConnProfile;
        Windows::Win32::NativeWiFi::ONEX_AUTH_IDENTITY authIdentity;
        uint32_t dwQuarantineState;
        uint32_t _bitfield;
        uint32_t dwSessionId;
        Windows::Win32::SystemServices::HANDLE hUserToken;
        Windows::Win32::NativeWiFi::ONEX_VARIABLE_BLOB OneXUserProfile;
        Windows::Win32::NativeWiFi::ONEX_VARIABLE_BLOB Identity;
        Windows::Win32::NativeWiFi::ONEX_VARIABLE_BLOB UserName;
        Windows::Win32::NativeWiFi::ONEX_VARIABLE_BLOB Domain;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ExtensibleAuthenticationProtocol
{
    struct EAP_TYPE
    {
        uint8_t type;
        uint32_t dwVendorId;
        uint32_t dwVendorType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ExtensibleAuthenticationProtocol
{
    struct EAP_METHOD_TYPE
    {
        Windows::Win32::ExtensibleAuthenticationProtocol::EAP_TYPE eapType;
        uint32_t dwAuthorId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct ONEX_EAP_ERROR
    {
        uint32_t dwWinError;
        Windows::Win32::ExtensibleAuthenticationProtocol::EAP_METHOD_TYPE type;
        uint32_t dwReasonCode;
        ::win32::guid rootCauseGuid;
        ::win32::guid repairGuid;
        ::win32::guid helpLinkGuid;
        uint32_t _bitfield;
        Windows::Win32::NativeWiFi::ONEX_VARIABLE_BLOB RootCauseString;
        Windows::Win32::NativeWiFi::ONEX_VARIABLE_BLOB RepairString;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct ONEX_STATUS
    {
        Windows::Win32::NativeWiFi::ONEX_AUTH_STATUS authStatus;
        uint32_t dwReason;
        uint32_t dwError;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct ONEX_RESULT_UPDATE_DATA
    {
        Windows::Win32::NativeWiFi::ONEX_STATUS oneXStatus;
        Windows::Win32::NativeWiFi::ONEX_EAP_METHOD_BACKEND_SUPPORT BackendSupport;
        Windows::Win32::SystemServices::BOOL fBackendEngaged;
        uint32_t _bitfield;
        Windows::Win32::NativeWiFi::ONEX_VARIABLE_BLOB authParams;
        Windows::Win32::NativeWiFi::ONEX_VARIABLE_BLOB eapError;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NativeWiFi
{
    struct ONEX_USER_INFO
    {
        Windows::Win32::NativeWiFi::ONEX_AUTH_IDENTITY authIdentity;
        uint32_t _bitfield;
        Windows::Win32::NativeWiFi::ONEX_VARIABLE_BLOB UserName;
        Windows::Win32::NativeWiFi::ONEX_VARIABLE_BLOB DomainName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetworkDrivers
{
    struct L2_NOTIFICATION_DATA
    {
        uint32_t NotificationSource;
        uint32_t NotificationCode;
        ::win32::guid InterfaceGuid;
        uint32_t dwDataSize;
        void* pData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DICONSTANTFORCE
    {
        int32_t lMagnitude;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DIRAMPFORCE
    {
        int32_t lStart;
        int32_t lEnd;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DIPERIODIC
    {
        uint32_t dwMagnitude;
        int32_t lOffset;
        uint32_t dwPhase;
        uint32_t dwPeriod;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DICONDITION
    {
        int32_t lOffset;
        int32_t lPositiveCoefficient;
        int32_t lNegativeCoefficient;
        uint32_t dwPositiveSaturation;
        uint32_t dwNegativeSaturation;
        int32_t lDeadBand;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DICUSTOMFORCE
    {
        uint32_t cChannels;
        uint32_t dwSamplePeriod;
        uint32_t cSamples;
        int32_t* rglForceData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DIENVELOPE
    {
        uint32_t dwSize;
        uint32_t dwAttackLevel;
        uint32_t dwAttackTime;
        uint32_t dwFadeLevel;
        uint32_t dwFadeTime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DIEFFECT_DX5
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        uint32_t dwDuration;
        uint32_t dwSamplePeriod;
        uint32_t dwGain;
        uint32_t dwTriggerButton;
        uint32_t dwTriggerRepeatInterval;
        uint32_t cAxes;
        uint32_t* rgdwAxes;
        int32_t* rglDirection;
        Windows::Win32::Hid::DIENVELOPE* lpEnvelope;
        uint32_t cbTypeSpecificParams;
        void* lpvTypeSpecificParams;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DIEFFECT
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        uint32_t dwDuration;
        uint32_t dwSamplePeriod;
        uint32_t dwGain;
        uint32_t dwTriggerButton;
        uint32_t dwTriggerRepeatInterval;
        uint32_t cAxes;
        uint32_t* rgdwAxes;
        int32_t* rglDirection;
        Windows::Win32::Hid::DIENVELOPE* lpEnvelope;
        uint32_t cbTypeSpecificParams;
        void* lpvTypeSpecificParams;
        uint32_t dwStartDelay;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DIFILEEFFECT
    {
        uint32_t dwSize;
        ::win32::guid GuidEffect;
        Windows::Win32::Hid::DIEFFECT* lpDiEffect;
        int8_t szFriendlyName[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DIEFFESCAPE
    {
        uint32_t dwSize;
        uint32_t dwCommand;
        void* lpvInBuffer;
        uint32_t cbInBuffer;
        void* lpvOutBuffer;
        uint32_t cbOutBuffer;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DIDEVCAPS_DX3
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        uint32_t dwDevType;
        uint32_t dwAxes;
        uint32_t dwButtons;
        uint32_t dwPOVs;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DIDEVCAPS
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        uint32_t dwDevType;
        uint32_t dwAxes;
        uint32_t dwButtons;
        uint32_t dwPOVs;
        uint32_t dwFFSamplePeriod;
        uint32_t dwFFMinTimeResolution;
        uint32_t dwFirmwareRevision;
        uint32_t dwHardwareRevision;
        uint32_t dwFFDriverVersion;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DIOBJECTDATAFORMAT
    {
        ::win32::guid* pguid;
        uint32_t dwOfs;
        uint32_t dwType;
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DIDATAFORMAT
    {
        uint32_t dwSize;
        uint32_t dwObjSize;
        uint32_t dwFlags;
        uint32_t dwDataSize;
        uint32_t dwNumObjs;
        Windows::Win32::Hid::DIOBJECTDATAFORMAT* rgodf;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DIACTIONA
    {
        union _Anonymous_e__Union
        {
            int8_t* lptszActionName;
            uint32_t uResIdString;
        };
        size_t uAppData;
        uint32_t dwSemantic;
        uint32_t dwFlags;
        _Anonymous_e__Union Anonymous;
        ::win32::guid guidInstance;
        uint32_t dwObjID;
        uint32_t dwHow;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DIACTIONW
    {
        union _Anonymous_e__Union
        {
            uint16_t* lptszActionName;
            uint32_t uResIdString;
        };
        size_t uAppData;
        uint32_t dwSemantic;
        uint32_t dwFlags;
        _Anonymous_e__Union Anonymous;
        ::win32::guid guidInstance;
        uint32_t dwObjID;
        uint32_t dwHow;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DIACTIONFORMATA
    {
        uint32_t dwSize;
        uint32_t dwActionSize;
        uint32_t dwDataSize;
        uint32_t dwNumActions;
        Windows::Win32::Hid::DIACTIONA* rgoAction;
        ::win32::guid guidActionMap;
        uint32_t dwGenre;
        uint32_t dwBufferSize;
        int32_t lAxisMin;
        int32_t lAxisMax;
        Windows::Win32::SystemServices::HINSTANCE hInstString;
        Windows::Win32::WindowsProgramming::FILETIME ftTimeStamp;
        uint32_t dwCRC;
        int8_t tszActionMap[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DIACTIONFORMATW
    {
        uint32_t dwSize;
        uint32_t dwActionSize;
        uint32_t dwDataSize;
        uint32_t dwNumActions;
        Windows::Win32::Hid::DIACTIONW* rgoAction;
        ::win32::guid guidActionMap;
        uint32_t dwGenre;
        uint32_t dwBufferSize;
        int32_t lAxisMin;
        int32_t lAxisMax;
        Windows::Win32::SystemServices::HINSTANCE hInstString;
        Windows::Win32::WindowsProgramming::FILETIME ftTimeStamp;
        uint32_t dwCRC;
        uint16_t tszActionMap[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DICOLORSET
    {
        uint32_t dwSize;
        uint32_t cTextFore;
        uint32_t cTextHighlight;
        uint32_t cCalloutLine;
        uint32_t cCalloutHighlight;
        uint32_t cBorder;
        uint32_t cControlFill;
        uint32_t cHighlightFill;
        uint32_t cAreaFill;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DICONFIGUREDEVICESPARAMSA
    {
        uint32_t dwSize;
        uint32_t dwcUsers;
        int8_t* lptszUserNames;
        uint32_t dwcFormats;
        Windows::Win32::Hid::DIACTIONFORMATA* lprgFormats;
        Windows::Win32::WindowsAndMessaging::HWND hwnd;
        Windows::Win32::Hid::DICOLORSET dics;
        Windows::Win32::Com::IUnknown* lpUnkDDSTarget;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DICONFIGUREDEVICESPARAMSW
    {
        uint32_t dwSize;
        uint32_t dwcUsers;
        uint16_t* lptszUserNames;
        uint32_t dwcFormats;
        Windows::Win32::Hid::DIACTIONFORMATW* lprgFormats;
        Windows::Win32::WindowsAndMessaging::HWND hwnd;
        Windows::Win32::Hid::DICOLORSET dics;
        Windows::Win32::Com::IUnknown* lpUnkDDSTarget;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DIDEVICEIMAGEINFOA
    {
        int8_t tszImagePath[260];
        uint32_t dwFlags;
        uint32_t dwViewID;
        Windows::Win32::DisplayDevices::RECT rcOverlay;
        uint32_t dwObjID;
        uint32_t dwcValidPts;
        Windows::Win32::DisplayDevices::POINT rgptCalloutLine[5];
        Windows::Win32::DisplayDevices::RECT rcCalloutRect;
        uint32_t dwTextAlign;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DIDEVICEIMAGEINFOW
    {
        uint16_t tszImagePath[260];
        uint32_t dwFlags;
        uint32_t dwViewID;
        Windows::Win32::DisplayDevices::RECT rcOverlay;
        uint32_t dwObjID;
        uint32_t dwcValidPts;
        Windows::Win32::DisplayDevices::POINT rgptCalloutLine[5];
        Windows::Win32::DisplayDevices::RECT rcCalloutRect;
        uint32_t dwTextAlign;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DIDEVICEIMAGEINFOHEADERA
    {
        uint32_t dwSize;
        uint32_t dwSizeImageInfo;
        uint32_t dwcViews;
        uint32_t dwcButtons;
        uint32_t dwcAxes;
        uint32_t dwcPOVs;
        uint32_t dwBufferSize;
        uint32_t dwBufferUsed;
        Windows::Win32::Hid::DIDEVICEIMAGEINFOA* lprgImageInfoArray;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DIDEVICEIMAGEINFOHEADERW
    {
        uint32_t dwSize;
        uint32_t dwSizeImageInfo;
        uint32_t dwcViews;
        uint32_t dwcButtons;
        uint32_t dwcAxes;
        uint32_t dwcPOVs;
        uint32_t dwBufferSize;
        uint32_t dwBufferUsed;
        Windows::Win32::Hid::DIDEVICEIMAGEINFOW* lprgImageInfoArray;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DIDEVICEOBJECTINSTANCE_DX3A
    {
        uint32_t dwSize;
        ::win32::guid guidType;
        uint32_t dwOfs;
        uint32_t dwType;
        uint32_t dwFlags;
        int8_t tszName[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DIDEVICEOBJECTINSTANCE_DX3W
    {
        uint32_t dwSize;
        ::win32::guid guidType;
        uint32_t dwOfs;
        uint32_t dwType;
        uint32_t dwFlags;
        uint16_t tszName[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DIDEVICEOBJECTINSTANCEA
    {
        uint32_t dwSize;
        ::win32::guid guidType;
        uint32_t dwOfs;
        uint32_t dwType;
        uint32_t dwFlags;
        int8_t tszName[260];
        uint32_t dwFFMaxForce;
        uint32_t dwFFForceResolution;
        uint16_t wCollectionNumber;
        uint16_t wDesignatorIndex;
        uint16_t wUsagePage;
        uint16_t wUsage;
        uint32_t dwDimension;
        uint16_t wExponent;
        uint16_t wReportId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DIDEVICEOBJECTINSTANCEW
    {
        uint32_t dwSize;
        ::win32::guid guidType;
        uint32_t dwOfs;
        uint32_t dwType;
        uint32_t dwFlags;
        uint16_t tszName[260];
        uint32_t dwFFMaxForce;
        uint32_t dwFFForceResolution;
        uint16_t wCollectionNumber;
        uint16_t wDesignatorIndex;
        uint16_t wUsagePage;
        uint16_t wUsage;
        uint32_t dwDimension;
        uint16_t wExponent;
        uint16_t wReportId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DIPROPHEADER
    {
        uint32_t dwSize;
        uint32_t dwHeaderSize;
        uint32_t dwObj;
        uint32_t dwHow;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DIPROPDWORD
    {
        Windows::Win32::Hid::DIPROPHEADER diph;
        uint32_t dwData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DIPROPPOINTER
    {
        Windows::Win32::Hid::DIPROPHEADER diph;
        size_t uData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DIPROPRANGE
    {
        Windows::Win32::Hid::DIPROPHEADER diph;
        int32_t lMin;
        int32_t lMax;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DIPROPCAL
    {
        Windows::Win32::Hid::DIPROPHEADER diph;
        int32_t lMin;
        int32_t lCenter;
        int32_t lMax;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DIPROPCALPOV
    {
        Windows::Win32::Hid::DIPROPHEADER diph;
        int32_t lMin[5];
        int32_t lMax[5];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DIPROPGUIDANDPATH
    {
        Windows::Win32::Hid::DIPROPHEADER diph;
        ::win32::guid guidClass;
        uint16_t wszPath[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DIPROPSTRING
    {
        Windows::Win32::Hid::DIPROPHEADER diph;
        uint16_t wsz[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct CPOINT
    {
        int32_t lP;
        uint32_t dwLog;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DIPROPCPOINTS
    {
        Windows::Win32::Hid::DIPROPHEADER diph;
        uint32_t dwCPointsNum;
        Windows::Win32::Hid::CPOINT cp[8];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DIDEVICEOBJECTDATA_DX3
    {
        uint32_t dwOfs;
        uint32_t dwData;
        uint32_t dwTimeStamp;
        uint32_t dwSequence;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DIDEVICEOBJECTDATA
    {
        uint32_t dwOfs;
        uint32_t dwData;
        uint32_t dwTimeStamp;
        uint32_t dwSequence;
        size_t uAppData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DIDEVICEINSTANCE_DX3A
    {
        uint32_t dwSize;
        ::win32::guid guidInstance;
        ::win32::guid guidProduct;
        uint32_t dwDevType;
        int8_t tszInstanceName[260];
        int8_t tszProductName[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DIDEVICEINSTANCE_DX3W
    {
        uint32_t dwSize;
        ::win32::guid guidInstance;
        ::win32::guid guidProduct;
        uint32_t dwDevType;
        uint16_t tszInstanceName[260];
        uint16_t tszProductName[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DIDEVICEINSTANCEA
    {
        uint32_t dwSize;
        ::win32::guid guidInstance;
        ::win32::guid guidProduct;
        uint32_t dwDevType;
        int8_t tszInstanceName[260];
        int8_t tszProductName[260];
        ::win32::guid guidFFDriver;
        uint16_t wUsagePage;
        uint16_t wUsage;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DIDEVICEINSTANCEW
    {
        uint32_t dwSize;
        ::win32::guid guidInstance;
        ::win32::guid guidProduct;
        uint32_t dwDevType;
        uint16_t tszInstanceName[260];
        uint16_t tszProductName[260];
        ::win32::guid guidFFDriver;
        uint16_t wUsagePage;
        uint16_t wUsage;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DIEFFECTINFOA
    {
        uint32_t dwSize;
        ::win32::guid guid;
        uint32_t dwEffType;
        uint32_t dwStaticParams;
        uint32_t dwDynamicParams;
        int8_t tszName[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DIEFFECTINFOW
    {
        uint32_t dwSize;
        ::win32::guid guid;
        uint32_t dwEffType;
        uint32_t dwStaticParams;
        uint32_t dwDynamicParams;
        uint16_t tszName[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DIMOUSESTATE
    {
        int32_t lX;
        int32_t lY;
        int32_t lZ;
        uint8_t rgbButtons[4];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DIMOUSESTATE2
    {
        int32_t lX;
        int32_t lY;
        int32_t lZ;
        uint8_t rgbButtons[8];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DIJOYSTATE
    {
        int32_t lX;
        int32_t lY;
        int32_t lZ;
        int32_t lRx;
        int32_t lRy;
        int32_t lRz;
        int32_t rglSlider[2];
        uint32_t rgdwPOV[4];
        uint8_t rgbButtons[32];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DIJOYSTATE2
    {
        int32_t lX;
        int32_t lY;
        int32_t lZ;
        int32_t lRx;
        int32_t lRy;
        int32_t lRz;
        int32_t rglSlider[2];
        uint32_t rgdwPOV[4];
        uint8_t rgbButtons[128];
        int32_t lVX;
        int32_t lVY;
        int32_t lVZ;
        int32_t lVRx;
        int32_t lVRy;
        int32_t lVRz;
        int32_t rglVSlider[2];
        int32_t lAX;
        int32_t lAY;
        int32_t lAZ;
        int32_t lARx;
        int32_t lARy;
        int32_t lARz;
        int32_t rglASlider[2];
        int32_t lFX;
        int32_t lFY;
        int32_t lFZ;
        int32_t lFRx;
        int32_t lFRy;
        int32_t lFRz;
        int32_t rglFSlider[2];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DIOBJECTATTRIBUTES
    {
        uint32_t dwFlags;
        uint16_t wUsagePage;
        uint16_t wUsage;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DIFFOBJECTATTRIBUTES
    {
        uint32_t dwFFMaxForce;
        uint32_t dwFFForceResolution;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DIOBJECTCALIBRATION
    {
        int32_t lMin;
        int32_t lCenter;
        int32_t lMax;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DIPOVCALIBRATION
    {
        int32_t lMin[5];
        int32_t lMax[5];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DIEFFECTATTRIBUTES
    {
        uint32_t dwEffectId;
        uint32_t dwEffType;
        uint32_t dwStaticParams;
        uint32_t dwDynamicParams;
        uint32_t dwCoords;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DIFFDEVICEATTRIBUTES
    {
        uint32_t dwFlags;
        uint32_t dwFFSamplePeriod;
        uint32_t dwFFMinTimeResolution;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DIDRIVERVERSIONS
    {
        uint32_t dwSize;
        uint32_t dwFirmwareRevision;
        uint32_t dwHardwareRevision;
        uint32_t dwFFDriverVersion;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DIDEVICESTATE
    {
        uint32_t dwSize;
        uint32_t dwState;
        uint32_t dwLoad;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DIHIDFFINITINFO
    {
        uint32_t dwSize;
        uint16_t* pwszDeviceInterface;
        ::win32::guid GuidInstance;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct joyreghwsettings_tag
    {
        uint32_t dwFlags;
        uint32_t dwNumButtons;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DIJOYTYPEINFO_DX5
    {
        uint32_t dwSize;
        Windows::Win32::Multimedia::joyreghwsettings_tag hws;
        ::win32::guid clsidConfig;
        uint16_t wszDisplayName[256];
        uint16_t wszCallout[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DIJOYTYPEINFO_DX6
    {
        uint32_t dwSize;
        Windows::Win32::Multimedia::joyreghwsettings_tag hws;
        ::win32::guid clsidConfig;
        uint16_t wszDisplayName[256];
        uint16_t wszCallout[260];
        uint16_t wszHardwareId[256];
        uint32_t dwFlags1;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DIJOYTYPEINFO
    {
        uint32_t dwSize;
        Windows::Win32::Multimedia::joyreghwsettings_tag hws;
        ::win32::guid clsidConfig;
        uint16_t wszDisplayName[256];
        uint16_t wszCallout[260];
        uint16_t wszHardwareId[256];
        uint32_t dwFlags1;
        uint32_t dwFlags2;
        uint16_t wszMapFile[256];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct joypos_tag
    {
        uint32_t dwX;
        uint32_t dwY;
        uint32_t dwZ;
        uint32_t dwR;
        uint32_t dwU;
        uint32_t dwV;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct joyrange_tag
    {
        Windows::Win32::Multimedia::joypos_tag jpMin;
        Windows::Win32::Multimedia::joypos_tag jpMax;
        Windows::Win32::Multimedia::joypos_tag jpCenter;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct JOYREGHWVALUES
    {
        Windows::Win32::Multimedia::joyrange_tag jrvHardware;
        uint32_t dwPOVValues[4];
        uint32_t dwCalFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct joyreghwconfig_tag
    {
        Windows::Win32::Multimedia::joyreghwsettings_tag hws;
        uint32_t dwUsageSettings;
        Windows::Win32::Hid::JOYREGHWVALUES hwv;
        uint32_t dwType;
        uint32_t dwReserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DIJOYCONFIG_DX5
    {
        uint32_t dwSize;
        ::win32::guid guidInstance;
        Windows::Win32::Multimedia::joyreghwconfig_tag hwc;
        uint32_t dwGain;
        uint16_t wszType[256];
        uint16_t wszCallout[256];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DIJOYCONFIG
    {
        uint32_t dwSize;
        ::win32::guid guidInstance;
        Windows::Win32::Multimedia::joyreghwconfig_tag hwc;
        uint32_t dwGain;
        uint16_t wszType[256];
        uint16_t wszCallout[256];
        ::win32::guid guidGameport;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct joyreguservalues_tag
    {
        uint32_t dwTimeOut;
        Windows::Win32::Multimedia::joyrange_tag jrvRanges;
        Windows::Win32::Multimedia::joypos_tag jpDeadZone;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct DIJOYUSERVALUES
    {
        uint32_t dwSize;
        Windows::Win32::Multimedia::joyreguservalues_tag ruv;
        uint16_t wszGlobalDriver[256];
        uint16_t wszGameportEmulator[256];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct KEYBOARD_INPUT_DATA
    {
        uint16_t UnitId;
        uint16_t MakeCode;
        uint16_t Flags;
        uint16_t Reserved;
        uint32_t ExtraInformation;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct KEYBOARD_TYPEMATIC_PARAMETERS
    {
        uint16_t UnitId;
        uint16_t Rate;
        uint16_t Delay;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct KEYBOARD_ID
    {
        uint8_t Type;
        uint8_t Subtype;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct KEYBOARD_ATTRIBUTES
    {
        Windows::Win32::Hid::KEYBOARD_ID KeyboardIdentifier;
        uint16_t KeyboardMode;
        uint16_t NumberOfFunctionKeys;
        uint16_t NumberOfIndicators;
        uint16_t NumberOfKeysTotal;
        uint32_t InputDataQueueLength;
        Windows::Win32::Hid::KEYBOARD_TYPEMATIC_PARAMETERS KeyRepeatMinimum;
        Windows::Win32::Hid::KEYBOARD_TYPEMATIC_PARAMETERS KeyRepeatMaximum;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct KEYBOARD_EXTENDED_ATTRIBUTES
    {
        uint8_t Version;
        uint8_t FormFactor;
        uint8_t KeyType;
        uint8_t PhysicalLayout;
        uint8_t VendorSpecificPhysicalLayout;
        uint8_t IETFLanguageTagIndex;
        uint8_t ImplementedInputAssistControls;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct KEYBOARD_INDICATOR_PARAMETERS
    {
        uint16_t UnitId;
        uint16_t LedFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct INDICATOR_LIST
    {
        uint16_t MakeCode;
        uint16_t IndicatorFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct KEYBOARD_INDICATOR_TRANSLATION
    {
        uint16_t NumberOfIndicatorKeys;
        Windows::Win32::Hid::INDICATOR_LIST IndicatorList[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct KEYBOARD_UNIT_ID_PARAMETER
    {
        uint16_t UnitId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct KEYBOARD_IME_STATUS
    {
        uint16_t UnitId;
        uint32_t ImeOpen;
        uint32_t ImeConvMode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct MOUSE_INPUT_DATA
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint16_t ButtonFlags;
                uint16_t ButtonData;
            };
            uint32_t Buttons;
            _Anonymous_e__Struct Anonymous;
        };
        uint16_t UnitId;
        uint16_t Flags;
        _Anonymous_e__Union Anonymous;
        uint32_t RawButtons;
        int32_t LastX;
        int32_t LastY;
        uint32_t ExtraInformation;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct MOUSE_ATTRIBUTES
    {
        uint16_t MouseIdentifier;
        uint16_t NumberOfButtons;
        uint16_t SampleRate;
        uint32_t InputDataQueueLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct MOUSE_UNIT_ID_PARAMETER
    {
        uint16_t UnitId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct USAGE_AND_PAGE
    {
        uint16_t Usage;
        uint16_t UsagePage;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct HIDP_BUTTON_CAPS
    {
        union _Anonymous_e__Union
        {
            struct _Range_e__Struct
            {
                uint16_t UsageMin;
                uint16_t UsageMax;
                uint16_t StringMin;
                uint16_t StringMax;
                uint16_t DesignatorMin;
                uint16_t DesignatorMax;
                uint16_t DataIndexMin;
                uint16_t DataIndexMax;
            };
            struct _NotRange_e__Struct
            {
                uint16_t Usage;
                uint16_t Reserved1;
                uint16_t StringIndex;
                uint16_t Reserved2;
                uint16_t DesignatorIndex;
                uint16_t Reserved3;
                uint16_t DataIndex;
                uint16_t Reserved4;
            };
            _Range_e__Struct Range;
            _NotRange_e__Struct NotRange;
        };
        uint16_t UsagePage;
        uint8_t ReportID;
        uint8_t IsAlias;
        uint16_t BitField;
        uint16_t LinkCollection;
        uint16_t LinkUsage;
        uint16_t LinkUsagePage;
        uint8_t IsRange;
        uint8_t IsStringRange;
        uint8_t IsDesignatorRange;
        uint8_t IsAbsolute;
        uint32_t Reserved[10];
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct HIDP_VALUE_CAPS
    {
        union _Anonymous_e__Union
        {
            struct _Range_e__Struct
            {
                uint16_t UsageMin;
                uint16_t UsageMax;
                uint16_t StringMin;
                uint16_t StringMax;
                uint16_t DesignatorMin;
                uint16_t DesignatorMax;
                uint16_t DataIndexMin;
                uint16_t DataIndexMax;
            };
            struct _NotRange_e__Struct
            {
                uint16_t Usage;
                uint16_t Reserved1;
                uint16_t StringIndex;
                uint16_t Reserved2;
                uint16_t DesignatorIndex;
                uint16_t Reserved3;
                uint16_t DataIndex;
                uint16_t Reserved4;
            };
            _Range_e__Struct Range;
            _NotRange_e__Struct NotRange;
        };
        uint16_t UsagePage;
        uint8_t ReportID;
        uint8_t IsAlias;
        uint16_t BitField;
        uint16_t LinkCollection;
        uint16_t LinkUsage;
        uint16_t LinkUsagePage;
        uint8_t IsRange;
        uint8_t IsStringRange;
        uint8_t IsDesignatorRange;
        uint8_t IsAbsolute;
        uint8_t HasNull;
        uint8_t Reserved;
        uint16_t BitSize;
        uint16_t ReportCount;
        uint16_t Reserved2[5];
        uint32_t UnitsExp;
        uint32_t Units;
        int32_t LogicalMin;
        int32_t LogicalMax;
        int32_t PhysicalMin;
        int32_t PhysicalMax;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct HIDP_LINK_COLLECTION_NODE
    {
        uint16_t LinkUsage;
        uint16_t LinkUsagePage;
        uint16_t Parent;
        uint16_t NumberOfChildren;
        uint16_t NextSibling;
        uint16_t FirstChild;
        uint32_t _bitfield;
        void* UserContext;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct _HIDP_PREPARSED_DATA
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct HIDP_CAPS
    {
        uint16_t Usage;
        uint16_t UsagePage;
        uint16_t InputReportByteLength;
        uint16_t OutputReportByteLength;
        uint16_t FeatureReportByteLength;
        uint16_t Reserved[17];
        uint16_t NumberLinkCollectionNodes;
        uint16_t NumberInputButtonCaps;
        uint16_t NumberInputValueCaps;
        uint16_t NumberInputDataIndices;
        uint16_t NumberOutputButtonCaps;
        uint16_t NumberOutputValueCaps;
        uint16_t NumberOutputDataIndices;
        uint16_t NumberFeatureButtonCaps;
        uint16_t NumberFeatureValueCaps;
        uint16_t NumberFeatureDataIndices;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct HIDP_DATA
    {
        union _Anonymous_e__Union
        {
            uint32_t RawValue;
            uint8_t On;
        };
        uint16_t DataIndex;
        uint16_t Reserved;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct HIDP_UNKNOWN_TOKEN
    {
        uint8_t Token;
        uint8_t Reserved[3];
        uint32_t BitField;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct HIDP_EXTENDED_ATTRIBUTES
    {
        uint8_t NumGlobalUnknowns;
        uint8_t Reserved[3];
        Windows::Win32::Hid::HIDP_UNKNOWN_TOKEN* GlobalUnknowns;
        uint32_t Data[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct HIDP_KEYBOARD_MODIFIER_STATE
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t _bitfield;
            };
            _Anonymous_e__Struct Anonymous;
            uint32_t ul;
        };
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct HIDD_CONFIGURATION
    {
        void* cookie;
        uint32_t size;
        uint32_t RingBufferSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Hid
{
    struct HIDD_ATTRIBUTES
    {
        uint32_t Size;
        uint16_t VendorID;
        uint16_t ProductID;
        uint16_t VersionNumber;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMHDR
    {
        Windows::Win32::WindowsAndMessaging::HWND hwndFrom;
        size_t idFrom;
        uint32_t code;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::HtmlHelp
{
    struct HHN_NOTIFY
    {
        Windows::Win32::Controls::NMHDR hdr;
        int8_t* pszUrl;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::HtmlHelp
{
    struct HH_POPUP
    {
        int32_t cbStruct;
        Windows::Win32::SystemServices::HINSTANCE hinst;
        uint32_t idString;
        int8_t* pszText;
        Windows::Win32::DisplayDevices::POINT pt;
        uint32_t clrForeground;
        uint32_t clrBackground;
        Windows::Win32::DisplayDevices::RECT rcMargins;
        int8_t* pszFont;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::HtmlHelp
{
    struct HH_AKLINK
    {
        int32_t cbStruct;
        Windows::Win32::SystemServices::BOOL fReserved;
        int8_t* pszKeywords;
        int8_t* pszUrl;
        int8_t* pszMsgText;
        int8_t* pszMsgTitle;
        int8_t* pszWindow;
        Windows::Win32::SystemServices::BOOL fIndexOnFail;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::HtmlHelp
{
    struct HH_ENUM_IT
    {
        int32_t cbStruct;
        int32_t iType;
        int8_t* pszCatName;
        int8_t* pszITName;
        int8_t* pszITDescription;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::HtmlHelp
{
    struct HH_ENUM_CAT
    {
        int32_t cbStruct;
        int8_t* pszCatName;
        int8_t* pszCatDescription;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::HtmlHelp
{
    struct HH_SET_INFOTYPE
    {
        int32_t cbStruct;
        int8_t* pszCatName;
        int8_t* pszInfoTypeName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::HtmlHelp
{
    struct HH_FTS_QUERY
    {
        int32_t cbStruct;
        Windows::Win32::SystemServices::BOOL fUniCodeStrings;
        int8_t* pszSearchQuery;
        int32_t iProximity;
        Windows::Win32::SystemServices::BOOL fStemmedSearch;
        Windows::Win32::SystemServices::BOOL fTitleOnly;
        Windows::Win32::SystemServices::BOOL fExecute;
        int8_t* pszWindow;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::HtmlHelp
{
    struct HH_WINTYPE
    {
        int32_t cbStruct;
        Windows::Win32::SystemServices::BOOL fUniCodeStrings;
        int8_t* pszType;
        uint32_t fsValidMembers;
        uint32_t fsWinProperties;
        int8_t* pszCaption;
        uint32_t dwStyles;
        uint32_t dwExStyles;
        Windows::Win32::DisplayDevices::RECT rcWindowPos;
        int32_t nShowState;
        Windows::Win32::WindowsAndMessaging::HWND hwndHelp;
        Windows::Win32::WindowsAndMessaging::HWND hwndCaller;
        uint32_t* paInfoTypes;
        Windows::Win32::WindowsAndMessaging::HWND hwndToolBar;
        Windows::Win32::WindowsAndMessaging::HWND hwndNavigation;
        Windows::Win32::WindowsAndMessaging::HWND hwndHTML;
        int32_t iNavWidth;
        Windows::Win32::DisplayDevices::RECT rcHTML;
        int8_t* pszToc;
        int8_t* pszIndex;
        int8_t* pszFile;
        int8_t* pszHome;
        uint32_t fsToolBarFlags;
        Windows::Win32::SystemServices::BOOL fNotExpanded;
        int32_t curNavType;
        int32_t tabpos;
        int32_t idNotify;
        uint8_t tabOrder[20];
        int32_t cHistory;
        int8_t* pszJump1;
        int8_t* pszJump2;
        int8_t* pszUrlJump1;
        int8_t* pszUrlJump2;
        Windows::Win32::DisplayDevices::RECT rcMinSize;
        int32_t cbInfoTypes;
        int8_t* pszCustomTabs;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::HtmlHelp
{
    struct HHNTRACK
    {
        Windows::Win32::Controls::NMHDR hdr;
        int8_t* pszCurUrl;
        int32_t idAction;
        Windows::Win32::HtmlHelp::HH_WINTYPE* phhWinType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    union CY
    {
        struct _Anonymous_e__Struct
        {
            uint32_t Lo;
            int32_t Hi;
        };
        _Anonymous_e__Struct Anonymous;
        int64_t int64;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Automation
{
    struct BSTR
    {
        intptr_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DECIMAL
    {
        union _Anonymous1_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint8_t scale;
                uint8_t sign;
            };
            _Anonymous_e__Struct Anonymous;
            uint16_t signscale;
        };
        union _Anonymous2_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t Lo32;
                uint32_t Mid32;
            };
            _Anonymous_e__Struct Anonymous;
            uint64_t Lo64;
        };
        uint16_t wReserved;
        _Anonymous1_e__Union Anonymous1;
        uint32_t Hi32;
        _Anonymous2_e__Union Anonymous2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Automation
{
    struct VARIANT
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                union _Anonymous_e__Union
                {
                    struct _Anonymous_e__Struct
                    {
                        void* pvRecord;
                        Windows::Win32::Automation::IRecordInfo* pRecInfo;
                    };
                    int64_t llVal;
                    int32_t lVal;
                    uint8_t bVal;
                    int16_t iVal;
                    float fltVal;
                    double dblVal;
                    int16_t boolVal;
                    int16_t __OBSOLETE__VARIANT_BOOL;
                    int32_t scode;
                    Windows::Win32::SystemServices::CY cyVal;
                    double date;
                    Windows::Win32::Automation::BSTR bstrVal;
                    Windows::Win32::Com::IUnknown* punkVal;
                    Windows::Win32::Automation::IDispatch* pdispVal;
                    Windows::Win32::Automation::SAFEARRAY* parray;
                    uint8_t* pbVal;
                    int16_t* piVal;
                    int32_t* plVal;
                    int64_t* pllVal;
                    float* pfltVal;
                    double* pdblVal;
                    int16_t* pboolVal;
                    int16_t* __OBSOLETE__VARIANT_PBOOL;
                    int32_t* pscode;
                    Windows::Win32::SystemServices::CY* pcyVal;
                    double* pdate;
                    Windows::Win32::Automation::BSTR* pbstrVal;
                    Windows::Win32::Com::IUnknown** ppunkVal;
                    Windows::Win32::Automation::IDispatch** ppdispVal;
                    Windows::Win32::Automation::SAFEARRAY** pparray;
                    Windows::Win32::Automation::VARIANT* pvarVal;
                    void* byref;
                    int8_t cVal;
                    uint16_t uiVal;
                    uint32_t ulVal;
                    uint64_t ullVal;
                    int32_t intVal;
                    uint32_t uintVal;
                    Windows::Win32::SystemServices::DECIMAL* pdecVal;
                    int8_t* pcVal;
                    uint16_t* puiVal;
                    uint32_t* pulVal;
                    uint64_t* pullVal;
                    int32_t* pintVal;
                    uint32_t* puintVal;
                    _Anonymous_e__Struct Anonymous;
                };
                uint16_t vt;
                uint16_t wReserved1;
                uint16_t wReserved2;
                uint16_t wReserved3;
                _Anonymous_e__Union Anonymous;
            };
            _Anonymous_e__Struct Anonymous;
            Windows::Win32::SystemServices::DECIMAL decVal;
        };
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::HtmlHelp
{
    struct HH_GLOBAL_PROPERTY
    {
        Windows::Win32::HtmlHelp::HH_GPROPID id;
        Windows::Win32::Automation::VARIANT var;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::HtmlHelp
{
    struct CProperty
    {
        union _Anonymous_e__Union
        {
            uint16_t* lpszwData;
            void* lpvData;
            uint32_t dwValue;
        };
        uint32_t dwPropID;
        uint32_t cbData;
        uint32_t dwType;
        _Anonymous_e__Union Anonymous;
        Windows::Win32::SystemServices::BOOL fPersist;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::HtmlHelp
{
    struct IITGroup
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::HtmlHelp
{
    struct IITQuery
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::HtmlHelp
{
    struct IITStopWordList
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::HtmlHelp
{
    struct ROWSTATUS
    {
        int32_t lRowFirst;
        int32_t cRows;
        int32_t cProperties;
        int32_t cRowsTotal;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::HtmlHelp
{
    struct COLUMNSTATUS
    {
        int32_t cPropCount;
        int32_t cPropsLoaded;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_PROPERTY_FLAGS
    {
        uint32_t _bitfield;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_STATE_INFO
    {
        Windows::Win32::Http::HTTP_PROPERTY_FLAGS Flags;
        Windows::Win32::Http::HTTP_ENABLED_STATE State;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_QOS_SETTING_INFO
    {
        Windows::Win32::Http::HTTP_QOS_SETTING_TYPE QosType;
        void* QosSetting;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_CONNECTION_LIMIT_INFO
    {
        Windows::Win32::Http::HTTP_PROPERTY_FLAGS Flags;
        uint32_t MaxConnections;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_BANDWIDTH_LIMIT_INFO
    {
        Windows::Win32::Http::HTTP_PROPERTY_FLAGS Flags;
        uint32_t MaxBandwidth;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_FLOWRATE_INFO
    {
        Windows::Win32::Http::HTTP_PROPERTY_FLAGS Flags;
        uint32_t MaxBandwidth;
        uint32_t MaxPeakBandwidth;
        uint32_t BurstSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_SERVICE_CONFIG_TIMEOUT_SET
    {
        Windows::Win32::Http::HTTP_SERVICE_CONFIG_TIMEOUT_KEY KeyDesc;
        uint16_t ParamDesc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_TIMEOUT_LIMIT_INFO
    {
        Windows::Win32::Http::HTTP_PROPERTY_FLAGS Flags;
        uint16_t EntityBody;
        uint16_t DrainEntityBody;
        uint16_t RequestQueue;
        uint16_t IdleConnection;
        uint16_t HeaderWait;
        uint32_t MinSendRate;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_SERVICE_CONFIG_SETTING_SET
    {
        Windows::Win32::Http::HTTP_SERVICE_CONFIG_SETTING_KEY KeyDesc;
        uint32_t ParamDesc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_LISTEN_ENDPOINT_INFO
    {
        Windows::Win32::Http::HTTP_PROPERTY_FLAGS Flags;
        uint8_t EnableSharing;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_SERVER_AUTHENTICATION_DIGEST_PARAMS
    {
        uint16_t DomainNameLength;
        uint16_t* DomainName;
        uint16_t RealmLength;
        uint16_t* Realm;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_SERVER_AUTHENTICATION_BASIC_PARAMS
    {
        uint16_t RealmLength;
        uint16_t* Realm;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_SERVER_AUTHENTICATION_INFO
    {
        Windows::Win32::Http::HTTP_PROPERTY_FLAGS Flags;
        uint32_t AuthSchemes;
        uint8_t ReceiveMutualAuth;
        uint8_t ReceiveContextHandle;
        uint8_t DisableNTLMCredentialCaching;
        uint8_t ExFlags;
        Windows::Win32::Http::HTTP_SERVER_AUTHENTICATION_DIGEST_PARAMS DigestParams;
        Windows::Win32::Http::HTTP_SERVER_AUTHENTICATION_BASIC_PARAMS BasicParams;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_SERVICE_BINDING_BASE
    {
        Windows::Win32::Http::HTTP_SERVICE_BINDING_TYPE Type;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_SERVICE_BINDING_A
    {
        Windows::Win32::Http::HTTP_SERVICE_BINDING_BASE Base;
        int8_t* Buffer;
        uint32_t BufferSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_SERVICE_BINDING_W
    {
        Windows::Win32::Http::HTTP_SERVICE_BINDING_BASE Base;
        uint16_t* Buffer;
        uint32_t BufferSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_CHANNEL_BIND_INFO
    {
        Windows::Win32::Http::HTTP_AUTHENTICATION_HARDENING_LEVELS Hardening;
        uint32_t Flags;
        Windows::Win32::Http::HTTP_SERVICE_BINDING_BASE** ServiceNames;
        uint32_t NumberOfServiceNames;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_REQUEST_CHANNEL_BIND_STATUS
    {
        Windows::Win32::Http::HTTP_SERVICE_BINDING_BASE* ServiceName;
        uint8_t* ChannelToken;
        uint32_t ChannelTokenSize;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_REQUEST_TOKEN_BINDING_INFO
    {
        uint8_t* TokenBinding;
        uint32_t TokenBindingSize;
        uint8_t* EKM;
        uint32_t EKMSize;
        uint8_t KeyType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_LOGGING_INFO
    {
        Windows::Win32::Http::HTTP_PROPERTY_FLAGS Flags;
        uint32_t LoggingFlags;
        uint16_t* SoftwareName;
        uint16_t SoftwareNameLength;
        uint16_t DirectoryNameLength;
        uint16_t* DirectoryName;
        Windows::Win32::Http::HTTP_LOGGING_TYPE Format;
        uint32_t Fields;
        void* pExtFields;
        uint16_t NumOfExtFields;
        uint16_t MaxRecordSize;
        Windows::Win32::Http::HTTP_LOGGING_ROLLOVER_TYPE RolloverType;
        uint32_t RolloverSize;
        void* pSecurityDescriptor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_BINDING_INFO
    {
        Windows::Win32::Http::HTTP_PROPERTY_FLAGS Flags;
        Windows::Win32::SystemServices::HANDLE RequestQueueHandle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_PROTECTION_LEVEL_INFO
    {
        Windows::Win32::Http::HTTP_PROPERTY_FLAGS Flags;
        Windows::Win32::Http::HTTP_PROTECTION_LEVEL_TYPE Level;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    union ULARGE_INTEGER
    {
        struct _Anonymous_e__Struct
        {
            uint32_t LowPart;
            uint32_t HighPart;
        };
        struct _u_e__Struct
        {
            uint32_t LowPart;
            uint32_t HighPart;
        };
        _Anonymous_e__Struct Anonymous;
        _u_e__Struct u;
        uint64_t QuadPart;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_BYTE_RANGE
    {
        Windows::Win32::SystemServices::ULARGE_INTEGER StartingOffset;
        Windows::Win32::SystemServices::ULARGE_INTEGER Length;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_VERSION
    {
        uint16_t MajorVersion;
        uint16_t MinorVersion;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_KNOWN_HEADER
    {
        uint16_t RawValueLength;
        int8_t* pRawValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_UNKNOWN_HEADER
    {
        uint16_t NameLength;
        uint16_t RawValueLength;
        int8_t* pName;
        int8_t* pRawValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_LOG_DATA
    {
        Windows::Win32::Http::HTTP_LOG_DATA_TYPE Type;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_LOG_FIELDS_DATA
    {
        Windows::Win32::Http::HTTP_LOG_DATA Base;
        uint16_t UserNameLength;
        uint16_t UriStemLength;
        uint16_t ClientIpLength;
        uint16_t ServerNameLength;
        uint16_t ServiceNameLength;
        uint16_t ServerIpLength;
        uint16_t MethodLength;
        uint16_t UriQueryLength;
        uint16_t HostLength;
        uint16_t UserAgentLength;
        uint16_t CookieLength;
        uint16_t ReferrerLength;
        uint16_t* UserName;
        uint16_t* UriStem;
        int8_t* ClientIp;
        int8_t* ServerName;
        int8_t* ServiceName;
        int8_t* ServerIp;
        int8_t* Method;
        int8_t* UriQuery;
        int8_t* Host;
        int8_t* UserAgent;
        int8_t* Cookie;
        int8_t* Referrer;
        uint16_t ServerPort;
        uint16_t ProtocolStatus;
        uint32_t Win32Status;
        Windows::Win32::Http::HTTP_VERB MethodNum;
        uint16_t SubStatus;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_DATA_CHUNK
    {
        union _Anonymous_e__Union
        {
            struct _FromMemory_e__Struct
            {
                void* pBuffer;
                uint32_t BufferLength;
            };
            struct _FromFileHandle_e__Struct
            {
                Windows::Win32::Http::HTTP_BYTE_RANGE ByteRange;
                Windows::Win32::SystemServices::HANDLE FileHandle;
            };
            struct _FromFragmentCache_e__Struct
            {
                uint16_t FragmentNameLength;
                uint16_t* pFragmentName;
            };
            struct _FromFragmentCacheEx_e__Struct
            {
                Windows::Win32::Http::HTTP_BYTE_RANGE ByteRange;
                uint16_t* pFragmentName;
            };
            _FromMemory_e__Struct FromMemory;
            _FromFileHandle_e__Struct FromFileHandle;
            _FromFragmentCache_e__Struct FromFragmentCache;
            _FromFragmentCacheEx_e__Struct FromFragmentCacheEx;
        };
        Windows::Win32::Http::HTTP_DATA_CHUNK_TYPE DataChunkType;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_REQUEST_HEADERS
    {
        uint16_t UnknownHeaderCount;
        Windows::Win32::Http::HTTP_UNKNOWN_HEADER* pUnknownHeaders;
        uint16_t TrailerCount;
        Windows::Win32::Http::HTTP_UNKNOWN_HEADER* pTrailers;
        Windows::Win32::Http::HTTP_KNOWN_HEADER KnownHeaders[41];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_RESPONSE_HEADERS
    {
        uint16_t UnknownHeaderCount;
        Windows::Win32::Http::HTTP_UNKNOWN_HEADER* pUnknownHeaders;
        uint16_t TrailerCount;
        Windows::Win32::Http::HTTP_UNKNOWN_HEADER* pTrailers;
        Windows::Win32::Http::HTTP_KNOWN_HEADER KnownHeaders[30];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_DELEGATE_REQUEST_PROPERTY_INFO
    {
        Windows::Win32::Http::HTTP_DELEGATE_REQUEST_PROPERTY_ID ProperyId;
        uint32_t PropertyInfoLength;
        void* PropertyInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_TRANSPORT_ADDRESS
    {
        Windows::Win32::WinSock::SOCKADDR* pRemoteAddress;
        Windows::Win32::WinSock::SOCKADDR* pLocalAddress;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_COOKED_URL
    {
        uint16_t FullUrlLength;
        uint16_t HostLength;
        uint16_t AbsPathLength;
        uint16_t QueryStringLength;
        uint16_t* pFullUrl;
        uint16_t* pHost;
        uint16_t* pAbsPath;
        uint16_t* pQueryString;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_SSL_CLIENT_CERT_INFO
    {
        uint32_t CertFlags;
        uint32_t CertEncodedSize;
        uint8_t* pCertEncoded;
        Windows::Win32::SystemServices::HANDLE Token;
        uint8_t CertDeniedByMapper;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_SSL_INFO
    {
        uint16_t ServerCertKeySize;
        uint16_t ConnectionKeySize;
        uint32_t ServerCertIssuerSize;
        uint32_t ServerCertSubjectSize;
        int8_t* pServerCertIssuer;
        int8_t* pServerCertSubject;
        Windows::Win32::Http::HTTP_SSL_CLIENT_CERT_INFO* pClientCertInfo;
        uint32_t SslClientCertNegotiated;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_SSL_PROTOCOL_INFO
    {
        uint32_t Protocol;
        uint32_t CipherType;
        uint32_t CipherStrength;
        uint32_t HashType;
        uint32_t HashStrength;
        uint32_t KeyExchangeType;
        uint32_t KeyExchangeStrength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_REQUEST_SIZING_INFO
    {
        uint64_t Flags;
        uint32_t RequestIndex;
        uint32_t RequestSizingCount;
        uint64_t RequestSizing[5];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_REQUEST_TIMING_INFO
    {
        uint32_t RequestTimingCount;
        uint64_t RequestTiming[30];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_REQUEST_INFO
    {
        Windows::Win32::Http::HTTP_REQUEST_INFO_TYPE InfoType;
        uint32_t InfoLength;
        void* pInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_REQUEST_AUTH_INFO
    {
        Windows::Win32::Http::HTTP_AUTH_STATUS AuthStatus;
        int32_t SecStatus;
        uint32_t Flags;
        Windows::Win32::Http::HTTP_REQUEST_AUTH_TYPE AuthType;
        Windows::Win32::SystemServices::HANDLE AccessToken;
        uint32_t ContextAttributes;
        uint32_t PackedContextLength;
        uint32_t PackedContextType;
        void* PackedContext;
        uint32_t MutualAuthDataLength;
        int8_t* pMutualAuthData;
        uint16_t PackageNameLength;
        uint16_t* pPackageName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_REQUEST_V1
    {
        uint32_t Flags;
        uint64_t ConnectionId;
        uint64_t RequestId;
        uint64_t UrlContext;
        Windows::Win32::Http::HTTP_VERSION Version;
        Windows::Win32::Http::HTTP_VERB Verb;
        uint16_t UnknownVerbLength;
        uint16_t RawUrlLength;
        int8_t* pUnknownVerb;
        int8_t* pRawUrl;
        Windows::Win32::Http::HTTP_COOKED_URL CookedUrl;
        Windows::Win32::Http::HTTP_TRANSPORT_ADDRESS Address;
        Windows::Win32::Http::HTTP_REQUEST_HEADERS Headers;
        uint64_t BytesReceived;
        uint16_t EntityChunkCount;
        Windows::Win32::Http::HTTP_DATA_CHUNK* pEntityChunks;
        uint64_t RawConnectionId;
        Windows::Win32::Http::HTTP_SSL_INFO* pSslInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_REQUEST_V2
    {
        Windows::Win32::Http::HTTP_REQUEST_V1 __AnonymousBase_http_L1816_C35;
        uint16_t RequestInfoCount;
        Windows::Win32::Http::HTTP_REQUEST_INFO* pRequestInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_RESPONSE_V1
    {
        uint32_t Flags;
        Windows::Win32::Http::HTTP_VERSION Version;
        uint16_t StatusCode;
        uint16_t ReasonLength;
        int8_t* pReason;
        Windows::Win32::Http::HTTP_RESPONSE_HEADERS Headers;
        uint16_t EntityChunkCount;
        Windows::Win32::Http::HTTP_DATA_CHUNK* pEntityChunks;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_RESPONSE_INFO
    {
        Windows::Win32::Http::HTTP_RESPONSE_INFO_TYPE Type;
        uint32_t Length;
        void* pInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_MULTIPLE_KNOWN_HEADERS
    {
        Windows::Win32::Http::HTTP_HEADER_ID HeaderId;
        uint32_t Flags;
        uint16_t KnownHeaderCount;
        Windows::Win32::Http::HTTP_KNOWN_HEADER* KnownHeaders;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_RESPONSE_V2
    {
        Windows::Win32::Http::HTTP_RESPONSE_V1 __AnonymousBase_http_L2003_C36;
        uint16_t ResponseInfoCount;
        Windows::Win32::Http::HTTP_RESPONSE_INFO* pResponseInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTPAPI_VERSION
    {
        uint16_t HttpApiMajorVersion;
        uint16_t HttpApiMinorVersion;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_CACHE_POLICY
    {
        Windows::Win32::Http::HTTP_CACHE_POLICY_TYPE Policy;
        uint32_t SecondsToLive;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_SERVICE_CONFIG_SSL_KEY
    {
        Windows::Win32::WinSock::SOCKADDR* pIpPort;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetworkDrivers
{
    struct SOCKADDR_STORAGE_LH
    {
        uint16_t ss_family;
        int8_t __ss_pad1[6];
        int64_t __ss_align;
        int8_t __ss_pad2[112];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_SERVICE_CONFIG_SSL_KEY_EX
    {
        Windows::Win32::NetworkDrivers::SOCKADDR_STORAGE_LH IpPort;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_SERVICE_CONFIG_SSL_SNI_KEY
    {
        Windows::Win32::NetworkDrivers::SOCKADDR_STORAGE_LH IpPort;
        uint16_t* Host;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_SERVICE_CONFIG_SSL_CCS_KEY
    {
        Windows::Win32::NetworkDrivers::SOCKADDR_STORAGE_LH LocalAddress;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_SERVICE_CONFIG_SSL_PARAM
    {
        uint32_t SslHashLength;
        void* pSslHash;
        ::win32::guid AppId;
        uint16_t* pSslCertStoreName;
        uint32_t DefaultCertCheckMode;
        uint32_t DefaultRevocationFreshnessTime;
        uint32_t DefaultRevocationUrlRetrievalTimeout;
        uint16_t* pDefaultSslCtlIdentifier;
        uint16_t* pDefaultSslCtlStoreName;
        uint32_t DefaultFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP2_WINDOW_SIZE_PARAM
    {
        uint32_t Http2ReceiveWindowSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP2_SETTINGS_LIMITS_PARAM
    {
        uint32_t Http2MaxSettingsPerFrame;
        uint32_t Http2MaxSettingsPerMinute;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_PERFORMANCE_PARAM
    {
        uint64_t SendBufferingFlags;
        uint8_t EnableAggressiveICW;
        uint32_t MaxBufferedSendBytes;
        uint32_t MaxConcurrentClientStreams;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_SERVICE_CONFIG_SSL_PARAM_EX
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::Http::HTTP2_WINDOW_SIZE_PARAM Http2WindowSizeParam;
            Windows::Win32::Http::HTTP2_SETTINGS_LIMITS_PARAM Http2SettingsLimitsParam;
            Windows::Win32::Http::HTTP_PERFORMANCE_PARAM HttpPerformanceParam;
        };
        Windows::Win32::Http::HTTP_SSL_SERVICE_CONFIG_EX_PARAM_TYPE ParamType;
        uint64_t Flags;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_SERVICE_CONFIG_SSL_SET
    {
        Windows::Win32::Http::HTTP_SERVICE_CONFIG_SSL_KEY KeyDesc;
        Windows::Win32::Http::HTTP_SERVICE_CONFIG_SSL_PARAM ParamDesc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_SERVICE_CONFIG_SSL_SNI_SET
    {
        Windows::Win32::Http::HTTP_SERVICE_CONFIG_SSL_SNI_KEY KeyDesc;
        Windows::Win32::Http::HTTP_SERVICE_CONFIG_SSL_PARAM ParamDesc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_SERVICE_CONFIG_SSL_CCS_SET
    {
        Windows::Win32::Http::HTTP_SERVICE_CONFIG_SSL_CCS_KEY KeyDesc;
        Windows::Win32::Http::HTTP_SERVICE_CONFIG_SSL_PARAM ParamDesc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_SERVICE_CONFIG_SSL_SET_EX
    {
        Windows::Win32::Http::HTTP_SERVICE_CONFIG_SSL_KEY_EX KeyDesc;
        Windows::Win32::Http::HTTP_SERVICE_CONFIG_SSL_PARAM_EX ParamDesc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_SERVICE_CONFIG_SSL_SNI_SET_EX
    {
        Windows::Win32::Http::HTTP_SERVICE_CONFIG_SSL_SNI_KEY KeyDesc;
        Windows::Win32::Http::HTTP_SERVICE_CONFIG_SSL_PARAM_EX ParamDesc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_SERVICE_CONFIG_SSL_CCS_SET_EX
    {
        Windows::Win32::Http::HTTP_SERVICE_CONFIG_SSL_CCS_KEY KeyDesc;
        Windows::Win32::Http::HTTP_SERVICE_CONFIG_SSL_PARAM_EX ParamDesc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_SERVICE_CONFIG_SSL_QUERY
    {
        Windows::Win32::Http::HTTP_SERVICE_CONFIG_QUERY_TYPE QueryDesc;
        Windows::Win32::Http::HTTP_SERVICE_CONFIG_SSL_KEY KeyDesc;
        uint32_t dwToken;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_SERVICE_CONFIG_SSL_SNI_QUERY
    {
        Windows::Win32::Http::HTTP_SERVICE_CONFIG_QUERY_TYPE QueryDesc;
        Windows::Win32::Http::HTTP_SERVICE_CONFIG_SSL_SNI_KEY KeyDesc;
        uint32_t dwToken;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_SERVICE_CONFIG_SSL_CCS_QUERY
    {
        Windows::Win32::Http::HTTP_SERVICE_CONFIG_QUERY_TYPE QueryDesc;
        Windows::Win32::Http::HTTP_SERVICE_CONFIG_SSL_CCS_KEY KeyDesc;
        uint32_t dwToken;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_SERVICE_CONFIG_SSL_QUERY_EX
    {
        Windows::Win32::Http::HTTP_SERVICE_CONFIG_QUERY_TYPE QueryDesc;
        Windows::Win32::Http::HTTP_SERVICE_CONFIG_SSL_KEY_EX KeyDesc;
        uint32_t dwToken;
        Windows::Win32::Http::HTTP_SSL_SERVICE_CONFIG_EX_PARAM_TYPE ParamType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_SERVICE_CONFIG_SSL_SNI_QUERY_EX
    {
        Windows::Win32::Http::HTTP_SERVICE_CONFIG_QUERY_TYPE QueryDesc;
        Windows::Win32::Http::HTTP_SERVICE_CONFIG_SSL_SNI_KEY KeyDesc;
        uint32_t dwToken;
        Windows::Win32::Http::HTTP_SSL_SERVICE_CONFIG_EX_PARAM_TYPE ParamType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_SERVICE_CONFIG_SSL_CCS_QUERY_EX
    {
        Windows::Win32::Http::HTTP_SERVICE_CONFIG_QUERY_TYPE QueryDesc;
        Windows::Win32::Http::HTTP_SERVICE_CONFIG_SSL_CCS_KEY KeyDesc;
        uint32_t dwToken;
        Windows::Win32::Http::HTTP_SSL_SERVICE_CONFIG_EX_PARAM_TYPE ParamType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_SERVICE_CONFIG_IP_LISTEN_PARAM
    {
        uint16_t AddrLength;
        Windows::Win32::WinSock::SOCKADDR* pAddress;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_SERVICE_CONFIG_IP_LISTEN_QUERY
    {
        uint32_t AddrCount;
        Windows::Win32::NetworkDrivers::SOCKADDR_STORAGE_LH AddrList[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_SERVICE_CONFIG_URLACL_KEY
    {
        uint16_t* pUrlPrefix;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_SERVICE_CONFIG_URLACL_PARAM
    {
        uint16_t* pStringSecurityDescriptor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_SERVICE_CONFIG_URLACL_SET
    {
        Windows::Win32::Http::HTTP_SERVICE_CONFIG_URLACL_KEY KeyDesc;
        Windows::Win32::Http::HTTP_SERVICE_CONFIG_URLACL_PARAM ParamDesc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_SERVICE_CONFIG_URLACL_QUERY
    {
        Windows::Win32::Http::HTTP_SERVICE_CONFIG_QUERY_TYPE QueryDesc;
        Windows::Win32::Http::HTTP_SERVICE_CONFIG_URLACL_KEY KeyDesc;
        uint32_t dwToken;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_SERVICE_CONFIG_CACHE_SET
    {
        Windows::Win32::Http::HTTP_SERVICE_CONFIG_CACHE_KEY KeyDesc;
        uint32_t ParamDesc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_QUERY_REQUEST_QUALIFIER_TCP
    {
        uint64_t Freshness;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_QUERY_REQUEST_QUALIFIER_QUIC
    {
        uint64_t Freshness;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct HTTP_REQUEST_PROPERTY_SNI
    {
        uint16_t Hostname[256];
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct WINHTTP_ASYNC_RESULT
    {
        size_t dwResult;
        uint32_t dwError;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct URL_COMPONENTS
    {
        uint32_t dwStructSize;
        uint16_t* lpszScheme;
        uint32_t dwSchemeLength;
        Windows::Win32::WinInet::INTERNET_SCHEME nScheme;
        uint16_t* lpszHostName;
        uint32_t dwHostNameLength;
        uint16_t nPort;
        uint16_t* lpszUserName;
        uint32_t dwUserNameLength;
        uint16_t* lpszPassword;
        uint32_t dwPasswordLength;
        uint16_t* lpszUrlPath;
        uint32_t dwUrlPathLength;
        uint16_t* lpszExtraInfo;
        uint32_t dwExtraInfoLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct WINHTTP_PROXY_INFO
    {
        uint32_t dwAccessType;
        uint16_t* lpszProxy;
        uint16_t* lpszProxyBypass;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct WINHTTP_AUTOPROXY_OPTIONS
    {
        uint32_t dwFlags;
        uint32_t dwAutoDetectFlags;
        uint16_t* lpszAutoConfigUrl;
        void* lpvReserved;
        uint32_t dwReserved;
        Windows::Win32::SystemServices::BOOL fAutoLogonIfChallenged;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct WINHTTP_PROXY_RESULT_ENTRY
    {
        Windows::Win32::SystemServices::BOOL fProxy;
        Windows::Win32::SystemServices::BOOL fBypass;
        Windows::Win32::WinInet::INTERNET_SCHEME ProxyScheme;
        uint16_t* pwszProxy;
        uint16_t ProxyPort;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct WINHTTP_PROXY_RESULT
    {
        uint32_t cEntries;
        Windows::Win32::Http::WINHTTP_PROXY_RESULT_ENTRY* pEntries;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct WINHTTP_PROXY_RESULT_EX
    {
        uint32_t cEntries;
        Windows::Win32::Http::WINHTTP_PROXY_RESULT_ENTRY* pEntries;
        Windows::Win32::SystemServices::HANDLE hProxyDetectionHandle;
        uint32_t dwProxyInterfaceAffinity;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct _WinHttpProxyNetworkKey
    {
        uint8_t pbBuffer[128];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct WINHTTP_PROXY_SETTINGS
    {
        uint32_t dwStructSize;
        uint32_t dwFlags;
        uint32_t dwCurrentSettingsVersion;
        uint16_t* pwszConnectionName;
        uint16_t* pwszProxy;
        uint16_t* pwszProxyBypass;
        uint16_t* pwszAutoconfigUrl;
        uint16_t* pwszAutoconfigSecondaryUrl;
        uint32_t dwAutoDiscoveryFlags;
        uint16_t* pwszLastKnownGoodAutoConfigUrl;
        uint32_t dwAutoconfigReloadDelayMins;
        Windows::Win32::WindowsProgramming::FILETIME ftLastKnownDetectTime;
        uint32_t dwDetectedInterfaceIpCount;
        uint32_t* pdwDetectedInterfaceIp;
        uint32_t cNetworkKeys;
        Windows::Win32::Http::_WinHttpProxyNetworkKey* pNetworkKeys;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct WINHTTP_CERTIFICATE_INFO
    {
        Windows::Win32::WindowsProgramming::FILETIME ftExpiry;
        Windows::Win32::WindowsProgramming::FILETIME ftStart;
        uint16_t* lpszSubjectInfo;
        uint16_t* lpszIssuerInfo;
        uint16_t* lpszProtocolName;
        uint16_t* lpszSignatureAlgName;
        uint16_t* lpszEncryptionAlgName;
        uint32_t dwKeySize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct WINHTTP_CONNECTION_INFO
    {
        uint32_t cbSize;
        Windows::Win32::NetworkDrivers::SOCKADDR_STORAGE_LH LocalAddress;
        Windows::Win32::NetworkDrivers::SOCKADDR_STORAGE_LH RemoteAddress;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct WINHTTP_REQUEST_TIMES
    {
        uint32_t cTimes;
        uint64_t rgullTimes[64];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct WINHTTP_REQUEST_STATS
    {
        uint64_t ullFlags;
        uint32_t ulIndex;
        uint32_t cStats;
        uint64_t rgullStats[32];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct WINHTTP_EXTENDED_HEADER
    {
        union _Anonymous1_e__Union
        {
            uint16_t* pwszName;
            int8_t* pszName;
        };
        union _Anonymous2_e__Union
        {
            uint16_t* pwszValue;
            int8_t* pszValue;
        };
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct WINHTTP_CREDS
    {
        int8_t* lpszUserName;
        int8_t* lpszPassword;
        int8_t* lpszRealm;
        uint32_t dwAuthScheme;
        int8_t* lpszHostName;
        uint32_t dwPort;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct WINHTTP_CREDS_EX
    {
        int8_t* lpszUserName;
        int8_t* lpszPassword;
        int8_t* lpszRealm;
        uint32_t dwAuthScheme;
        int8_t* lpszHostName;
        uint32_t dwPort;
        int8_t* lpszUrl;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct WINHTTP_CURRENT_USER_IE_PROXY_CONFIG
    {
        Windows::Win32::SystemServices::BOOL fAutoDetect;
        uint16_t* lpszAutoConfigUrl;
        uint16_t* lpszProxy;
        uint16_t* lpszProxyBypass;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct WINHTTP_WEB_SOCKET_ASYNC_RESULT
    {
        Windows::Win32::Http::WINHTTP_ASYNC_RESULT AsyncResult;
        Windows::Win32::Http::WINHTTP_WEB_SOCKET_OPERATION Operation;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Http
{
    struct WINHTTP_WEB_SOCKET_STATUS
    {
        uint32_t dwBytesTransferred;
        Windows::Win32::Http::WINHTTP_WEB_SOCKET_BUFFER_TYPE eBufferType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct HTTP_VERSION_INFO
    {
        uint32_t dwMajorVersion;
        uint32_t dwMinorVersion;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct PNRP_CLOUD_ID
    {
        int32_t AddressFamily;
        Windows::Win32::P2P::PNRP_SCOPE Scope;
        uint32_t ScopeId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct SOCKET_ADDRESS
    {
        Windows::Win32::WinSock::SOCKADDR* lpSockaddr;
        int32_t iSockaddrLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct PNRPINFO_V1
    {
        uint32_t dwSize;
        uint16_t* lpwszIdentity;
        uint32_t nMaxResolve;
        uint32_t dwTimeout;
        uint32_t dwLifetime;
        Windows::Win32::P2P::PNRP_RESOLVE_CRITERIA enResolveCriteria;
        uint32_t dwFlags;
        Windows::Win32::WinSock::SOCKET_ADDRESS saHint;
        Windows::Win32::P2P::PNRP_REGISTERED_ID_STATE enNameState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct BLOB
    {
        uint32_t cbSize;
        uint8_t* pBlobData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct PNRPINFO_V2
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::WinSock::BLOB blobPayload;
            uint16_t* pwszPayload;
        };
        uint32_t dwSize;
        uint16_t* lpwszIdentity;
        uint32_t nMaxResolve;
        uint32_t dwTimeout;
        uint32_t dwLifetime;
        Windows::Win32::P2P::PNRP_RESOLVE_CRITERIA enResolveCriteria;
        uint32_t dwFlags;
        Windows::Win32::WinSock::SOCKET_ADDRESS saHint;
        Windows::Win32::P2P::PNRP_REGISTERED_ID_STATE enNameState;
        Windows::Win32::P2P::PNRP_EXTENDED_PAYLOAD_TYPE enExtendedPayloadType;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct PNRPCLOUDINFO
    {
        uint32_t dwSize;
        Windows::Win32::P2P::PNRP_CLOUD_ID Cloud;
        Windows::Win32::P2P::PNRP_CLOUD_STATE enCloudState;
        Windows::Win32::P2P::PNRP_CLOUD_FLAGS enCloudFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct PEER_VERSION_DATA
    {
        uint16_t wVersion;
        uint16_t wHighestVersion;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct PEER_DATA
    {
        uint32_t cbData;
        uint8_t* pbData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct PEER_RECORD
    {
        uint32_t dwSize;
        ::win32::guid type;
        ::win32::guid id;
        uint32_t dwVersion;
        uint32_t dwFlags;
        uint16_t* pwzCreatorId;
        uint16_t* pwzModifiedById;
        uint16_t* pwzAttributes;
        Windows::Win32::WindowsProgramming::FILETIME ftCreation;
        Windows::Win32::WindowsProgramming::FILETIME ftExpiration;
        Windows::Win32::WindowsProgramming::FILETIME ftLastModified;
        Windows::Win32::P2P::PEER_DATA securityData;
        Windows::Win32::P2P::PEER_DATA data;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct in6_addr
    {
        union _u_e__Union
        {
            uint8_t Byte[16];
            uint16_t Word[8];
        };
        _u_e__Union u;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct SCOPE_ID
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t _bitfield;
            };
            _Anonymous_e__Struct Anonymous;
            uint32_t Value;
        };
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetworkDrivers
{
    struct SOCKADDR_IN6_LH
    {
        union _Anonymous_e__Union
        {
            uint32_t sin6_scope_id;
            Windows::Win32::WinSock::SCOPE_ID sin6_scope_struct;
        };
        uint16_t sin6_family;
        uint16_t sin6_port;
        uint32_t sin6_flowinfo;
        Windows::Win32::WinSock::in6_addr sin6_addr;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct PEER_ADDRESS
    {
        uint32_t dwSize;
        Windows::Win32::NetworkDrivers::SOCKADDR_IN6_LH sin6;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct PEER_CONNECTION_INFO
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        uint64_t ullConnectionId;
        uint64_t ullNodeId;
        uint16_t* pwzPeerId;
        Windows::Win32::P2P::PEER_ADDRESS address;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct PEER_EVENT_INCOMING_DATA
    {
        uint32_t dwSize;
        uint64_t ullConnectionId;
        ::win32::guid type;
        Windows::Win32::P2P::PEER_DATA data;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct PEER_EVENT_RECORD_CHANGE_DATA
    {
        uint32_t dwSize;
        Windows::Win32::P2P::PEER_RECORD_CHANGE_TYPE changeType;
        ::win32::guid recordId;
        ::win32::guid recordType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct PEER_EVENT_CONNECTION_CHANGE_DATA
    {
        uint32_t dwSize;
        Windows::Win32::P2P::PEER_CONNECTION_STATUS status;
        uint64_t ullConnectionId;
        uint64_t ullNodeId;
        uint64_t ullNextConnectionId;
        int32_t hrConnectionFailedReason;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct PEER_EVENT_SYNCHRONIZED_DATA
    {
        uint32_t dwSize;
        ::win32::guid recordType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct PEER_GRAPH_PROPERTIES
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        uint32_t dwScope;
        uint32_t dwMaxRecordSize;
        uint16_t* pwzGraphId;
        uint16_t* pwzCreatorId;
        uint16_t* pwzFriendlyName;
        uint16_t* pwzComment;
        uint32_t ulPresenceLifetime;
        uint32_t cPresenceMax;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct PEER_NODE_INFO
    {
        uint32_t dwSize;
        uint64_t ullNodeId;
        uint16_t* pwzPeerId;
        uint32_t cAddresses;
        Windows::Win32::P2P::PEER_ADDRESS* pAddresses;
        uint16_t* pwzAttributes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct PEER_EVENT_NODE_CHANGE_DATA
    {
        uint32_t dwSize;
        Windows::Win32::P2P::PEER_NODE_CHANGE_TYPE changeType;
        uint64_t ullNodeId;
        uint16_t* pwzPeerId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct PEER_GRAPH_EVENT_REGISTRATION
    {
        Windows::Win32::P2P::PEER_GRAPH_EVENT_TYPE eventType;
        ::win32::guid* pType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct PEER_GRAPH_EVENT_DATA
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::P2P::PEER_GRAPH_STATUS_FLAGS dwStatus;
            Windows::Win32::P2P::PEER_EVENT_INCOMING_DATA incomingData;
            Windows::Win32::P2P::PEER_EVENT_RECORD_CHANGE_DATA recordChangeData;
            Windows::Win32::P2P::PEER_EVENT_CONNECTION_CHANGE_DATA connectionChangeData;
            Windows::Win32::P2P::PEER_EVENT_NODE_CHANGE_DATA nodeChangeData;
            Windows::Win32::P2P::PEER_EVENT_SYNCHRONIZED_DATA synchronizedData;
        };
        Windows::Win32::P2P::PEER_GRAPH_EVENT_TYPE eventType;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct PEER_SECURITY_INTERFACE
    {
        uint32_t dwSize;
        uint16_t* pwzSspFilename;
        uint16_t* pwzPackageName;
        uint32_t cbSecurityInfo;
        uint8_t* pbSecurityInfo;
        void* pvContext;
        Windows::Win32::P2P::PFNPEER_VALIDATE_RECORD* pfnValidateRecord;
        Windows::Win32::P2P::PFNPEER_SECURE_RECORD* pfnSecureRecord;
        Windows::Win32::P2P::PFNPEER_FREE_SECURITY_DATA* pfnFreeSecurityData;
        Windows::Win32::P2P::PFNPEER_ON_PASSWORD_AUTH_FAILED* pfnAuthFailed;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct PEER_CREDENTIAL_INFO
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        uint16_t* pwzFriendlyName;
        Windows::Win32::Security::CERT_PUBLIC_KEY_INFO* pPublicKey;
        uint16_t* pwzIssuerPeerName;
        uint16_t* pwzIssuerFriendlyName;
        Windows::Win32::WindowsProgramming::FILETIME ftValidityStart;
        Windows::Win32::WindowsProgramming::FILETIME ftValidityEnd;
        uint32_t cRoles;
        ::win32::guid* pRoles;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct PEER_MEMBER
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        uint16_t* pwzIdentity;
        uint16_t* pwzAttributes;
        uint64_t ullNodeId;
        uint32_t cAddresses;
        Windows::Win32::P2P::PEER_ADDRESS* pAddresses;
        Windows::Win32::P2P::PEER_CREDENTIAL_INFO* pCredentialInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct PEER_INVITATION_INFO
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        uint16_t* pwzCloudName;
        uint32_t dwScope;
        uint32_t dwCloudFlags;
        uint16_t* pwzGroupPeerName;
        uint16_t* pwzIssuerPeerName;
        uint16_t* pwzSubjectPeerName;
        uint16_t* pwzGroupFriendlyName;
        uint16_t* pwzIssuerFriendlyName;
        uint16_t* pwzSubjectFriendlyName;
        Windows::Win32::WindowsProgramming::FILETIME ftValidityStart;
        Windows::Win32::WindowsProgramming::FILETIME ftValidityEnd;
        uint32_t cRoles;
        ::win32::guid* pRoles;
        uint32_t cClassifiers;
        uint16_t** ppwzClassifiers;
        Windows::Win32::Security::CERT_PUBLIC_KEY_INFO* pSubjectPublicKey;
        Windows::Win32::P2P::PEER_GROUP_AUTHENTICATION_SCHEME authScheme;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct PEER_GROUP_PROPERTIES
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        uint16_t* pwzCloud;
        uint16_t* pwzClassifier;
        uint16_t* pwzGroupPeerName;
        uint16_t* pwzCreatorPeerName;
        uint16_t* pwzFriendlyName;
        uint16_t* pwzComment;
        uint32_t ulMemberDataLifetime;
        uint32_t ulPresenceLifetime;
        uint32_t dwAuthenticationSchemes;
        uint16_t* pwzGroupPassword;
        ::win32::guid groupPasswordRole;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct PEER_EVENT_MEMBER_CHANGE_DATA
    {
        uint32_t dwSize;
        Windows::Win32::P2P::PEER_MEMBER_CHANGE_TYPE changeType;
        uint16_t* pwzIdentity;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct PEER_GROUP_EVENT_REGISTRATION
    {
        Windows::Win32::P2P::PEER_GROUP_EVENT_TYPE eventType;
        ::win32::guid* pType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct PEER_GROUP_EVENT_DATA
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::P2P::PEER_GROUP_STATUS dwStatus;
            Windows::Win32::P2P::PEER_EVENT_INCOMING_DATA incomingData;
            Windows::Win32::P2P::PEER_EVENT_RECORD_CHANGE_DATA recordChangeData;
            Windows::Win32::P2P::PEER_EVENT_CONNECTION_CHANGE_DATA connectionChangeData;
            Windows::Win32::P2P::PEER_EVENT_MEMBER_CHANGE_DATA memberChangeData;
            int32_t hrConnectionFailedReason;
        };
        Windows::Win32::P2P::PEER_GROUP_EVENT_TYPE eventType;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct PEER_NAME_PAIR
    {
        uint32_t dwSize;
        uint16_t* pwzPeerName;
        uint16_t* pwzFriendlyName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct PEER_APPLICATION
    {
        ::win32::guid id;
        Windows::Win32::P2P::PEER_DATA data;
        uint16_t* pwzDescription;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct PEER_OBJECT
    {
        ::win32::guid id;
        Windows::Win32::P2P::PEER_DATA data;
        uint32_t dwPublicationScope;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct PEER_CONTACT
    {
        uint16_t* pwzPeerName;
        uint16_t* pwzNickName;
        uint16_t* pwzDisplayName;
        uint16_t* pwzEmailAddress;
        Windows::Win32::SystemServices::BOOL fWatch;
        Windows::Win32::P2P::PEER_WATCH_PERMISSION WatcherPermissions;
        Windows::Win32::P2P::PEER_DATA credentials;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct PEER_ENDPOINT
    {
        Windows::Win32::P2P::PEER_ADDRESS address;
        uint16_t* pwzEndpointName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct PEER_PEOPLE_NEAR_ME
    {
        uint16_t* pwzNickName;
        Windows::Win32::P2P::PEER_ENDPOINT endpoint;
        ::win32::guid id;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct PEER_INVITATION
    {
        ::win32::guid applicationId;
        Windows::Win32::P2P::PEER_DATA applicationData;
        uint16_t* pwzMessage;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct PEER_INVITATION_RESPONSE
    {
        Windows::Win32::P2P::PEER_INVITATION_RESPONSE_TYPE action;
        uint16_t* pwzMessage;
        int32_t hrExtendedInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct PEER_APP_LAUNCH_INFO
    {
        Windows::Win32::P2P::PEER_CONTACT* pContact;
        Windows::Win32::P2P::PEER_ENDPOINT* pEndpoint;
        Windows::Win32::P2P::PEER_INVITATION* pInvitation;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct PEER_APPLICATION_REGISTRATION_INFO
    {
        Windows::Win32::P2P::PEER_APPLICATION application;
        uint16_t* pwzApplicationToLaunch;
        uint16_t* pwzApplicationArguments;
        uint32_t dwPublicationScope;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct PEER_PRESENCE_INFO
    {
        Windows::Win32::P2P::PEER_PRESENCE_STATUS status;
        uint16_t* pwzDescriptiveText;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct PEER_COLLAB_EVENT_REGISTRATION
    {
        Windows::Win32::P2P::PEER_COLLAB_EVENT_TYPE eventType;
        ::win32::guid* pInstance;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct PEER_EVENT_WATCHLIST_CHANGED_DATA
    {
        Windows::Win32::P2P::PEER_CONTACT* pContact;
        Windows::Win32::P2P::PEER_CHANGE_TYPE changeType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct PEER_EVENT_PRESENCE_CHANGED_DATA
    {
        Windows::Win32::P2P::PEER_CONTACT* pContact;
        Windows::Win32::P2P::PEER_ENDPOINT* pEndpoint;
        Windows::Win32::P2P::PEER_CHANGE_TYPE changeType;
        Windows::Win32::P2P::PEER_PRESENCE_INFO* pPresenceInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct PEER_EVENT_APPLICATION_CHANGED_DATA
    {
        Windows::Win32::P2P::PEER_CONTACT* pContact;
        Windows::Win32::P2P::PEER_ENDPOINT* pEndpoint;
        Windows::Win32::P2P::PEER_CHANGE_TYPE changeType;
        Windows::Win32::P2P::PEER_APPLICATION* pApplication;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct PEER_EVENT_OBJECT_CHANGED_DATA
    {
        Windows::Win32::P2P::PEER_CONTACT* pContact;
        Windows::Win32::P2P::PEER_ENDPOINT* pEndpoint;
        Windows::Win32::P2P::PEER_CHANGE_TYPE changeType;
        Windows::Win32::P2P::PEER_OBJECT* pObject;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct PEER_EVENT_ENDPOINT_CHANGED_DATA
    {
        Windows::Win32::P2P::PEER_CONTACT* pContact;
        Windows::Win32::P2P::PEER_ENDPOINT* pEndpoint;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct PEER_EVENT_PEOPLE_NEAR_ME_CHANGED_DATA
    {
        Windows::Win32::P2P::PEER_CHANGE_TYPE changeType;
        Windows::Win32::P2P::PEER_PEOPLE_NEAR_ME* pPeopleNearMe;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct PEER_EVENT_REQUEST_STATUS_CHANGED_DATA
    {
        Windows::Win32::P2P::PEER_ENDPOINT* pEndpoint;
        int32_t hrChange;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct PEER_COLLAB_EVENT_DATA
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::P2P::PEER_EVENT_WATCHLIST_CHANGED_DATA watchListChangedData;
            Windows::Win32::P2P::PEER_EVENT_PRESENCE_CHANGED_DATA presenceChangedData;
            Windows::Win32::P2P::PEER_EVENT_APPLICATION_CHANGED_DATA applicationChangedData;
            Windows::Win32::P2P::PEER_EVENT_OBJECT_CHANGED_DATA objectChangedData;
            Windows::Win32::P2P::PEER_EVENT_ENDPOINT_CHANGED_DATA endpointChangedData;
            Windows::Win32::P2P::PEER_EVENT_PEOPLE_NEAR_ME_CHANGED_DATA peopleNearMeChangedData;
            Windows::Win32::P2P::PEER_EVENT_REQUEST_STATUS_CHANGED_DATA requestStatusChangedData;
        };
        Windows::Win32::P2P::PEER_COLLAB_EVENT_TYPE eventType;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct PEER_PNRP_ENDPOINT_INFO
    {
        uint16_t* pwzPeerName;
        uint32_t cAddresses;
        Windows::Win32::WinSock::SOCKADDR** ppAddresses;
        uint16_t* pwzComment;
        Windows::Win32::P2P::PEER_DATA payload;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct PEER_PNRP_CLOUD_INFO
    {
        uint16_t* pwzCloudName;
        Windows::Win32::P2P::PNRP_SCOPE dwScope;
        uint32_t dwScopeId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct PEER_PNRP_REGISTRATION_INFO
    {
        uint16_t* pwzCloudName;
        uint16_t* pwzPublishingIdentity;
        uint32_t cAddresses;
        Windows::Win32::WinSock::SOCKADDR** ppAddresses;
        uint16_t wPort;
        uint16_t* pwzComment;
        Windows::Win32::P2P::PEER_DATA payload;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct DRT_DATA
    {
        uint32_t cb;
        uint8_t* pb;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct DRT_REGISTRATION
    {
        Windows::Win32::P2P::DRT_DATA key;
        Windows::Win32::P2P::DRT_DATA appData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct DRT_SECURITY_PROVIDER
    {
        void* pvContext;
        int32_t********* Attach;
        intptr_t Detach;
        int32_t********* RegisterKey;
        int32_t********* UnregisterKey;
        int32_t********* ValidateAndUnpackPayload;
        int32_t********* SecureAndPackPayload;
        intptr_t FreeData;
        int32_t********* EncryptData;
        int32_t********* DecryptData;
        int32_t********* GetSerializedCredential;
        int32_t********* ValidateRemoteCredential;
        int32_t********* SignData;
        int32_t********* VerifyData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct DRT_BOOTSTRAP_PROVIDER
    {
        void* pvContext;
        int32_t********* Attach;
        intptr_t Detach;
        int32_t********* InitResolve;
        int32_t********* IssueResolve;
        intptr_t EndResolve;
        int32_t********* Register;
        intptr_t Unregister;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct DRT_SETTINGS
    {
        uint32_t dwSize;
        uint32_t cbKey;
        uint8_t bProtocolMajorVersion;
        uint8_t bProtocolMinorVersion;
        uint32_t ulMaxRoutingAddresses;
        uint16_t* pwzDrtInstancePrefix;
        void* hTransport;
        Windows::Win32::P2P::DRT_SECURITY_PROVIDER* pSecurityProvider;
        Windows::Win32::P2P::DRT_BOOTSTRAP_PROVIDER* pBootstrapProvider;
        Windows::Win32::P2P::DRT_SECURITY_MODE eSecurityMode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct DRT_SEARCH_INFO
    {
        uint32_t dwSize;
        Windows::Win32::SystemServices::BOOL fIterative;
        Windows::Win32::SystemServices::BOOL fAllowCurrentInstanceMatch;
        Windows::Win32::SystemServices::BOOL fAnyMatchInRange;
        uint32_t cMaxEndpoints;
        Windows::Win32::P2P::DRT_DATA* pMaximumKey;
        Windows::Win32::P2P::DRT_DATA* pMinimumKey;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct DRT_ADDRESS
    {
        Windows::Win32::NetworkDrivers::SOCKADDR_STORAGE_LH socketAddress;
        uint32_t flags;
        int32_t nearness;
        uint32_t latency;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct DRT_ADDRESS_LIST
    {
        uint32_t AddressCount;
        Windows::Win32::P2P::DRT_ADDRESS AddressList[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct DRT_SEARCH_RESULT
    {
        uint32_t dwSize;
        Windows::Win32::P2P::DRT_MATCH_TYPE type;
        void* pvContext;
        Windows::Win32::P2P::DRT_REGISTRATION registration;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct DRT_EVENT_DATA
    {
        union _Anonymous_e__Union
        {
            struct _leafsetKeyChange_e__Struct
            {
                Windows::Win32::P2P::DRT_LEAFSET_KEY_CHANGE_TYPE change;
                Windows::Win32::P2P::DRT_DATA localKey;
                Windows::Win32::P2P::DRT_DATA remoteKey;
            };
            struct _registrationStateChange_e__Struct
            {
                Windows::Win32::P2P::DRT_REGISTRATION_STATE state;
                Windows::Win32::P2P::DRT_DATA localKey;
            };
            struct _statusChange_e__Struct
            {
                struct _bootstrapAddresses_e__Struct
                {
                    uint32_t cntAddress;
                    Windows::Win32::NetworkDrivers::SOCKADDR_STORAGE_LH* pAddresses;
                };
                Windows::Win32::P2P::DRT_STATUS status;
                _bootstrapAddresses_e__Struct bootstrapAddresses;
            };
            _leafsetKeyChange_e__Struct leafsetKeyChange;
            _registrationStateChange_e__Struct registrationStateChange;
            _statusChange_e__Struct statusChange;
        };
        Windows::Win32::P2P::DRT_EVENT_TYPE type;
        int32_t hr;
        void* pvContext;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct PEERDIST_PUBLICATION_OPTIONS
    {
        uint32_t dwVersion;
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct PEERDIST_CONTENT_TAG
    {
        uint8_t Data[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct PEERDIST_RETRIEVAL_OPTIONS
    {
        uint32_t cbSize;
        uint32_t dwContentInfoMinVersion;
        uint32_t dwContentInfoMaxVersion;
        uint32_t dwReserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct PEERDIST_STATUS_INFO
    {
        uint32_t cbSize;
        Windows::Win32::P2P::PEERDIST_STATUS status;
        uint32_t dwMinVer;
        uint32_t dwMaxVer;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::P2P
{
    struct PEERDIST_CLIENT_BASIC_INFO
    {
        Windows::Win32::SystemServices::BOOL fFlashCrowd;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectWrite
{
    struct DWRITE_FONT_METRICS
    {
        uint16_t designUnitsPerEm;
        uint16_t ascent;
        uint16_t descent;
        int16_t lineGap;
        uint16_t capHeight;
        uint16_t xHeight;
        int16_t underlinePosition;
        uint16_t underlineThickness;
        int16_t strikethroughPosition;
        uint16_t strikethroughThickness;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectWrite
{
    struct DWRITE_GLYPH_METRICS
    {
        int32_t leftSideBearing;
        uint32_t advanceWidth;
        int32_t rightSideBearing;
        int32_t topSideBearing;
        uint32_t advanceHeight;
        int32_t bottomSideBearing;
        int32_t verticalOriginY;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectWrite
{
    struct DWRITE_GLYPH_OFFSET
    {
        float advanceOffset;
        float ascenderOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectWrite
{
    struct DWRITE_MATRIX
    {
        float m11;
        float m12;
        float m21;
        float m22;
        float dx;
        float dy;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectWrite
{
    struct DWRITE_TEXT_RANGE
    {
        uint32_t startPosition;
        uint32_t length;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectWrite
{
    struct DWRITE_FONT_FEATURE
    {
        Windows::Win32::DirectWrite::DWRITE_FONT_FEATURE_TAG nameTag;
        uint32_t parameter;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectWrite
{
    struct DWRITE_TYPOGRAPHIC_FEATURES
    {
        Windows::Win32::DirectWrite::DWRITE_FONT_FEATURE* features;
        uint32_t featureCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectWrite
{
    struct DWRITE_TRIMMING
    {
        Windows::Win32::DirectWrite::DWRITE_TRIMMING_GRANULARITY granularity;
        uint32_t delimiter;
        uint32_t delimiterCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectWrite
{
    struct DWRITE_SCRIPT_ANALYSIS
    {
        uint16_t script;
        Windows::Win32::DirectWrite::DWRITE_SCRIPT_SHAPES shapes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectWrite
{
    struct DWRITE_LINE_BREAKPOINT
    {
        uint8_t _bitfield;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectWrite
{
    struct DWRITE_SHAPING_TEXT_PROPERTIES
    {
        uint16_t _bitfield;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectWrite
{
    struct DWRITE_SHAPING_GLYPH_PROPERTIES
    {
        uint16_t _bitfield;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectWrite
{
    struct DWRITE_GLYPH_RUN
    {
        Windows::Win32::DirectWrite::IDWriteFontFace* fontFace;
        float fontEmSize;
        uint32_t glyphCount;
        uint16_t* glyphIndices;
        float* glyphAdvances;
        Windows::Win32::DirectWrite::DWRITE_GLYPH_OFFSET* glyphOffsets;
        Windows::Win32::SystemServices::BOOL isSideways;
        uint32_t bidiLevel;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectWrite
{
    struct DWRITE_GLYPH_RUN_DESCRIPTION
    {
        uint16_t* localeName;
        uint16_t* string;
        uint32_t stringLength;
        uint16_t* clusterMap;
        uint32_t textPosition;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectWrite
{
    struct DWRITE_UNDERLINE
    {
        float width;
        float thickness;
        float offset;
        float runHeight;
        Windows::Win32::DirectWrite::DWRITE_READING_DIRECTION readingDirection;
        Windows::Win32::DirectWrite::DWRITE_FLOW_DIRECTION flowDirection;
        uint16_t* localeName;
        Windows::Win32::DirectWrite::DWRITE_MEASURING_MODE measuringMode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectWrite
{
    struct DWRITE_STRIKETHROUGH
    {
        float width;
        float thickness;
        float offset;
        Windows::Win32::DirectWrite::DWRITE_READING_DIRECTION readingDirection;
        Windows::Win32::DirectWrite::DWRITE_FLOW_DIRECTION flowDirection;
        uint16_t* localeName;
        Windows::Win32::DirectWrite::DWRITE_MEASURING_MODE measuringMode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectWrite
{
    struct DWRITE_LINE_METRICS
    {
        uint32_t length;
        uint32_t trailingWhitespaceLength;
        uint32_t newlineLength;
        float height;
        float baseline;
        Windows::Win32::SystemServices::BOOL isTrimmed;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectWrite
{
    struct DWRITE_CLUSTER_METRICS
    {
        float width;
        uint16_t length;
        uint16_t _bitfield;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectWrite
{
    struct DWRITE_TEXT_METRICS
    {
        float left;
        float top;
        float width;
        float widthIncludingTrailingWhitespace;
        float height;
        float layoutWidth;
        float layoutHeight;
        uint32_t maxBidiReorderingDepth;
        uint32_t lineCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectWrite
{
    struct DWRITE_INLINE_OBJECT_METRICS
    {
        float width;
        float height;
        float baseline;
        Windows::Win32::SystemServices::BOOL supportsSideways;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectWrite
{
    struct DWRITE_OVERHANG_METRICS
    {
        float left;
        float top;
        float right;
        float bottom;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectWrite
{
    struct DWRITE_HIT_TEST_METRICS
    {
        uint32_t textPosition;
        uint32_t length;
        float left;
        float top;
        float width;
        float height;
        uint32_t bidiLevel;
        Windows::Win32::SystemServices::BOOL isText;
        Windows::Win32::SystemServices::BOOL isTrimmed;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectWrite
{
    struct DWRITE_FONT_METRICS1
    {
        Windows::Win32::DirectWrite::DWRITE_FONT_METRICS __AnonymousBase_DWrite_1_L627_C38;
        int16_t glyphBoxLeft;
        int16_t glyphBoxTop;
        int16_t glyphBoxRight;
        int16_t glyphBoxBottom;
        int16_t subscriptPositionX;
        int16_t subscriptPositionY;
        int16_t subscriptSizeX;
        int16_t subscriptSizeY;
        int16_t superscriptPositionX;
        int16_t superscriptPositionY;
        int16_t superscriptSizeX;
        int16_t superscriptSizeY;
        Windows::Win32::SystemServices::BOOL hasTypographicMetrics;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectWrite
{
    struct DWRITE_CARET_METRICS
    {
        int16_t slopeRise;
        int16_t slopeRun;
        int16_t offset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectWrite
{
    union DWRITE_PANOSE
    {
        struct _text_e__Struct
        {
            uint8_t familyKind;
            uint8_t serifStyle;
            uint8_t weight;
            uint8_t proportion;
            uint8_t contrast;
            uint8_t strokeVariation;
            uint8_t armStyle;
            uint8_t letterform;
            uint8_t midline;
            uint8_t xHeight;
        };
        struct _script_e__Struct
        {
            uint8_t familyKind;
            uint8_t toolKind;
            uint8_t weight;
            uint8_t spacing;
            uint8_t aspectRatio;
            uint8_t contrast;
            uint8_t scriptTopology;
            uint8_t scriptForm;
            uint8_t finials;
            uint8_t xAscent;
        };
        struct _decorative_e__Struct
        {
            uint8_t familyKind;
            uint8_t decorativeClass;
            uint8_t weight;
            uint8_t aspect;
            uint8_t contrast;
            uint8_t serifVariant;
            uint8_t fill;
            uint8_t lining;
            uint8_t decorativeTopology;
            uint8_t characterRange;
        };
        struct _symbol_e__Struct
        {
            uint8_t familyKind;
            uint8_t symbolKind;
            uint8_t weight;
            uint8_t spacing;
            uint8_t aspectRatioAndContrast;
            uint8_t aspectRatio94;
            uint8_t aspectRatio119;
            uint8_t aspectRatio157;
            uint8_t aspectRatio163;
            uint8_t aspectRatio211;
        };
        uint8_t values[10];
        uint8_t familyKind;
        _text_e__Struct text;
        _script_e__Struct script;
        _decorative_e__Struct decorative;
        _symbol_e__Struct symbol;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectWrite
{
    struct DWRITE_UNICODE_RANGE
    {
        uint32_t first;
        uint32_t last;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectWrite
{
    struct DWRITE_SCRIPT_PROPERTIES
    {
        uint32_t isoScriptCode;
        uint32_t isoScriptNumber;
        uint32_t clusterLookahead;
        uint32_t justificationCharacter;
        uint32_t _bitfield;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectWrite
{
    struct DWRITE_JUSTIFICATION_OPPORTUNITY
    {
        float expansionMinimum;
        float expansionMaximum;
        float compressionMaximum;
        uint32_t _bitfield;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectWrite
{
    struct DWRITE_TEXT_METRICS1
    {
        Windows::Win32::DirectWrite::DWRITE_TEXT_METRICS Base;
        float heightIncludingTrailingWhitespace;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dxgi
{
    struct DXGI_RGBA
    {
        float r;
        float g;
        float b;
        float a;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectWrite
{
    struct DWRITE_COLOR_GLYPH_RUN
    {
        Windows::Win32::DirectWrite::DWRITE_GLYPH_RUN glyphRun;
        Windows::Win32::DirectWrite::DWRITE_GLYPH_RUN_DESCRIPTION* glyphRunDescription;
        float baselineOriginX;
        float baselineOriginY;
        Windows::Win32::Dxgi::DXGI_RGBA runColor;
        uint16_t paletteIndex;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectWrite
{
    struct DWRITE_FONT_PROPERTY
    {
        Windows::Win32::DirectWrite::DWRITE_FONT_PROPERTY_ID propertyId;
        uint16_t* propertyValue;
        uint16_t* localeName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectWrite
{
    struct DWRITE_LINE_METRICS1
    {
        Windows::Win32::DirectWrite::DWRITE_LINE_METRICS Base;
        float leadingBefore;
        float leadingAfter;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectWrite
{
    struct DWRITE_LINE_SPACING
    {
        Windows::Win32::DirectWrite::DWRITE_LINE_SPACING_METHOD method;
        float height;
        float baseline;
        float leadingBefore;
        Windows::Win32::DirectWrite::DWRITE_FONT_LINE_GAP_USAGE fontLineGapUsage;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectWrite
{
    struct DWRITE_COLOR_GLYPH_RUN1
    {
        Windows::Win32::DirectWrite::DWRITE_COLOR_GLYPH_RUN Base;
        Windows::Win32::DirectWrite::DWRITE_GLYPH_IMAGE_FORMATS glyphImageFormat;
        Windows::Win32::DirectWrite::DWRITE_MEASURING_MODE measuringMode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D_SIZE_U
    {
        uint32_t width;
        uint32_t height;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectWrite
{
    struct DWRITE_GLYPH_IMAGE_DATA
    {
        void* imageData;
        uint32_t imageDataSize;
        uint32_t uniqueDataId;
        uint32_t pixelsPerEm;
        Windows::Win32::Direct2D::D2D_SIZE_U pixelSize;
        Windows::Win32::DisplayDevices::POINT horizontalLeftOrigin;
        Windows::Win32::DisplayDevices::POINT horizontalRightOrigin;
        Windows::Win32::DisplayDevices::POINT verticalTopOrigin;
        Windows::Win32::DisplayDevices::POINT verticalBottomOrigin;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectWrite
{
    struct DWRITE_FILE_FRAGMENT
    {
        uint64_t fileOffset;
        uint64_t fragmentSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectWrite
{
    struct DWRITE_FONT_AXIS_VALUE
    {
        Windows::Win32::DirectWrite::DWRITE_FONT_AXIS_TAG axisTag;
        float value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectWrite
{
    struct DWRITE_FONT_AXIS_RANGE
    {
        Windows::Win32::DirectWrite::DWRITE_FONT_AXIS_TAG axisTag;
        float minValue;
        float maxValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct OPENFILENAME_NT4A
    {
        uint32_t lStructSize;
        Windows::Win32::WindowsAndMessaging::HWND hwndOwner;
        Windows::Win32::SystemServices::HINSTANCE hInstance;
        int8_t* lpstrFilter;
        int8_t* lpstrCustomFilter;
        uint32_t nMaxCustFilter;
        uint32_t nFilterIndex;
        int8_t* lpstrFile;
        uint32_t nMaxFile;
        int8_t* lpstrFileTitle;
        uint32_t nMaxFileTitle;
        int8_t* lpstrInitialDir;
        int8_t* lpstrTitle;
        uint32_t Flags;
        uint16_t nFileOffset;
        uint16_t nFileExtension;
        int8_t* lpstrDefExt;
        Windows::Win32::WindowsAndMessaging::LPARAM lCustData;
        Windows::Win32::WindowsAndMessaging::LPOFNHOOKPROC* lpfnHook;
        int8_t* lpTemplateName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct OPENFILENAME_NT4W
    {
        uint32_t lStructSize;
        Windows::Win32::WindowsAndMessaging::HWND hwndOwner;
        Windows::Win32::SystemServices::HINSTANCE hInstance;
        uint16_t* lpstrFilter;
        uint16_t* lpstrCustomFilter;
        uint32_t nMaxCustFilter;
        uint32_t nFilterIndex;
        uint16_t* lpstrFile;
        uint32_t nMaxFile;
        uint16_t* lpstrFileTitle;
        uint32_t nMaxFileTitle;
        uint16_t* lpstrInitialDir;
        uint16_t* lpstrTitle;
        uint32_t Flags;
        uint16_t nFileOffset;
        uint16_t nFileExtension;
        uint16_t* lpstrDefExt;
        Windows::Win32::WindowsAndMessaging::LPARAM lCustData;
        Windows::Win32::WindowsAndMessaging::LPOFNHOOKPROC* lpfnHook;
        uint16_t* lpTemplateName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct OPENFILENAMEA
    {
        uint32_t lStructSize;
        Windows::Win32::WindowsAndMessaging::HWND hwndOwner;
        Windows::Win32::SystemServices::HINSTANCE hInstance;
        int8_t* lpstrFilter;
        int8_t* lpstrCustomFilter;
        uint32_t nMaxCustFilter;
        uint32_t nFilterIndex;
        int8_t* lpstrFile;
        uint32_t nMaxFile;
        int8_t* lpstrFileTitle;
        uint32_t nMaxFileTitle;
        int8_t* lpstrInitialDir;
        int8_t* lpstrTitle;
        uint32_t Flags;
        uint16_t nFileOffset;
        uint16_t nFileExtension;
        int8_t* lpstrDefExt;
        Windows::Win32::WindowsAndMessaging::LPARAM lCustData;
        Windows::Win32::WindowsAndMessaging::LPOFNHOOKPROC* lpfnHook;
        int8_t* lpTemplateName;
        void* pvReserved;
        uint32_t dwReserved;
        uint32_t FlagsEx;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct OPENFILENAMEW
    {
        uint32_t lStructSize;
        Windows::Win32::WindowsAndMessaging::HWND hwndOwner;
        Windows::Win32::SystemServices::HINSTANCE hInstance;
        uint16_t* lpstrFilter;
        uint16_t* lpstrCustomFilter;
        uint32_t nMaxCustFilter;
        uint32_t nFilterIndex;
        uint16_t* lpstrFile;
        uint32_t nMaxFile;
        uint16_t* lpstrFileTitle;
        uint32_t nMaxFileTitle;
        uint16_t* lpstrInitialDir;
        uint16_t* lpstrTitle;
        uint32_t Flags;
        uint16_t nFileOffset;
        uint16_t nFileExtension;
        uint16_t* lpstrDefExt;
        Windows::Win32::WindowsAndMessaging::LPARAM lCustData;
        Windows::Win32::WindowsAndMessaging::LPOFNHOOKPROC* lpfnHook;
        uint16_t* lpTemplateName;
        void* pvReserved;
        uint32_t dwReserved;
        uint32_t FlagsEx;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct OFNOTIFYA
    {
        Windows::Win32::Controls::NMHDR hdr;
        Windows::Win32::WindowsAndMessaging::OPENFILENAMEA* lpOFN;
        int8_t* pszFile;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct OFNOTIFYW
    {
        Windows::Win32::Controls::NMHDR hdr;
        Windows::Win32::WindowsAndMessaging::OPENFILENAMEW* lpOFN;
        uint16_t* pszFile;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct OFNOTIFYEXA
    {
        Windows::Win32::Controls::NMHDR hdr;
        Windows::Win32::WindowsAndMessaging::OPENFILENAMEA* lpOFN;
        void* psf;
        void* pidl;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct OFNOTIFYEXW
    {
        Windows::Win32::Controls::NMHDR hdr;
        Windows::Win32::WindowsAndMessaging::OPENFILENAMEW* lpOFN;
        void* psf;
        void* pidl;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct CHOOSECOLORA
    {
        uint32_t lStructSize;
        Windows::Win32::WindowsAndMessaging::HWND hwndOwner;
        Windows::Win32::WindowsAndMessaging::HWND hInstance;
        uint32_t rgbResult;
        uint32_t* lpCustColors;
        uint32_t Flags;
        Windows::Win32::WindowsAndMessaging::LPARAM lCustData;
        Windows::Win32::WindowsAndMessaging::LPCCHOOKPROC* lpfnHook;
        int8_t* lpTemplateName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct CHOOSECOLORW
    {
        uint32_t lStructSize;
        Windows::Win32::WindowsAndMessaging::HWND hwndOwner;
        Windows::Win32::WindowsAndMessaging::HWND hInstance;
        uint32_t rgbResult;
        uint32_t* lpCustColors;
        uint32_t Flags;
        Windows::Win32::WindowsAndMessaging::LPARAM lCustData;
        Windows::Win32::WindowsAndMessaging::LPCCHOOKPROC* lpfnHook;
        uint16_t* lpTemplateName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct FINDREPLACEA
    {
        uint32_t lStructSize;
        Windows::Win32::WindowsAndMessaging::HWND hwndOwner;
        Windows::Win32::SystemServices::HINSTANCE hInstance;
        uint32_t Flags;
        int8_t* lpstrFindWhat;
        int8_t* lpstrReplaceWith;
        uint16_t wFindWhatLen;
        uint16_t wReplaceWithLen;
        Windows::Win32::WindowsAndMessaging::LPARAM lCustData;
        Windows::Win32::WindowsAndMessaging::LPFRHOOKPROC* lpfnHook;
        int8_t* lpTemplateName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct FINDREPLACEW
    {
        uint32_t lStructSize;
        Windows::Win32::WindowsAndMessaging::HWND hwndOwner;
        Windows::Win32::SystemServices::HINSTANCE hInstance;
        uint32_t Flags;
        uint16_t* lpstrFindWhat;
        uint16_t* lpstrReplaceWith;
        uint16_t wFindWhatLen;
        uint16_t wReplaceWithLen;
        Windows::Win32::WindowsAndMessaging::LPARAM lCustData;
        Windows::Win32::WindowsAndMessaging::LPFRHOOKPROC* lpfnHook;
        uint16_t* lpTemplateName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct CHOOSEFONTA
    {
        uint32_t lStructSize;
        Windows::Win32::WindowsAndMessaging::HWND hwndOwner;
        Windows::Win32::Gdi::HDC hDC;
        Windows::Win32::Shell::LOGFONTA* lpLogFont;
        int32_t iPointSize;
        uint32_t Flags;
        uint32_t rgbColors;
        Windows::Win32::WindowsAndMessaging::LPARAM lCustData;
        Windows::Win32::WindowsAndMessaging::LPCFHOOKPROC* lpfnHook;
        int8_t* lpTemplateName;
        Windows::Win32::SystemServices::HINSTANCE hInstance;
        int8_t* lpszStyle;
        uint16_t nFontType;
        uint16_t ___MISSING_ALIGNMENT__;
        int32_t nSizeMin;
        int32_t nSizeMax;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct CHOOSEFONTW
    {
        uint32_t lStructSize;
        Windows::Win32::WindowsAndMessaging::HWND hwndOwner;
        Windows::Win32::Gdi::HDC hDC;
        Windows::Win32::Shell::LOGFONTW* lpLogFont;
        int32_t iPointSize;
        uint32_t Flags;
        uint32_t rgbColors;
        Windows::Win32::WindowsAndMessaging::LPARAM lCustData;
        Windows::Win32::WindowsAndMessaging::LPCFHOOKPROC* lpfnHook;
        uint16_t* lpTemplateName;
        Windows::Win32::SystemServices::HINSTANCE hInstance;
        uint16_t* lpszStyle;
        uint16_t nFontType;
        uint16_t ___MISSING_ALIGNMENT__;
        int32_t nSizeMin;
        int32_t nSizeMax;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct PRINTDLGA
    {
        uint32_t lStructSize;
        Windows::Win32::WindowsAndMessaging::HWND hwndOwner;
        intptr_t hDevMode;
        intptr_t hDevNames;
        Windows::Win32::Gdi::HDC hDC;
        uint32_t Flags;
        uint16_t nFromPage;
        uint16_t nToPage;
        uint16_t nMinPage;
        uint16_t nMaxPage;
        uint16_t nCopies;
        Windows::Win32::SystemServices::HINSTANCE hInstance;
        Windows::Win32::WindowsAndMessaging::LPARAM lCustData;
        Windows::Win32::WindowsAndMessaging::LPPRINTHOOKPROC* lpfnPrintHook;
        Windows::Win32::WindowsAndMessaging::LPSETUPHOOKPROC* lpfnSetupHook;
        int8_t* lpPrintTemplateName;
        int8_t* lpSetupTemplateName;
        intptr_t hPrintTemplate;
        intptr_t hSetupTemplate;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct PRINTDLGW
    {
        uint32_t lStructSize;
        Windows::Win32::WindowsAndMessaging::HWND hwndOwner;
        intptr_t hDevMode;
        intptr_t hDevNames;
        Windows::Win32::Gdi::HDC hDC;
        uint32_t Flags;
        uint16_t nFromPage;
        uint16_t nToPage;
        uint16_t nMinPage;
        uint16_t nMaxPage;
        uint16_t nCopies;
        Windows::Win32::SystemServices::HINSTANCE hInstance;
        Windows::Win32::WindowsAndMessaging::LPARAM lCustData;
        Windows::Win32::WindowsAndMessaging::LPPRINTHOOKPROC* lpfnPrintHook;
        Windows::Win32::WindowsAndMessaging::LPSETUPHOOKPROC* lpfnSetupHook;
        uint16_t* lpPrintTemplateName;
        uint16_t* lpSetupTemplateName;
        intptr_t hPrintTemplate;
        intptr_t hSetupTemplate;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct PRINTPAGERANGE
    {
        uint32_t nFromPage;
        uint32_t nToPage;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct PRINTDLGEXA
    {
        uint32_t lStructSize;
        Windows::Win32::WindowsAndMessaging::HWND hwndOwner;
        intptr_t hDevMode;
        intptr_t hDevNames;
        Windows::Win32::Gdi::HDC hDC;
        uint32_t Flags;
        uint32_t Flags2;
        uint32_t ExclusionFlags;
        uint32_t nPageRanges;
        uint32_t nMaxPageRanges;
        Windows::Win32::WindowsAndMessaging::PRINTPAGERANGE* lpPageRanges;
        uint32_t nMinPage;
        uint32_t nMaxPage;
        uint32_t nCopies;
        Windows::Win32::SystemServices::HINSTANCE hInstance;
        int8_t* lpPrintTemplateName;
        Windows::Win32::Com::IUnknown* lpCallback;
        uint32_t nPropertyPages;
        Windows::Win32::Controls::HPROPSHEETPAGE* lphPropertyPages;
        uint32_t nStartPage;
        uint32_t dwResultAction;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct PRINTDLGEXW
    {
        uint32_t lStructSize;
        Windows::Win32::WindowsAndMessaging::HWND hwndOwner;
        intptr_t hDevMode;
        intptr_t hDevNames;
        Windows::Win32::Gdi::HDC hDC;
        uint32_t Flags;
        uint32_t Flags2;
        uint32_t ExclusionFlags;
        uint32_t nPageRanges;
        uint32_t nMaxPageRanges;
        Windows::Win32::WindowsAndMessaging::PRINTPAGERANGE* lpPageRanges;
        uint32_t nMinPage;
        uint32_t nMaxPage;
        uint32_t nCopies;
        Windows::Win32::SystemServices::HINSTANCE hInstance;
        uint16_t* lpPrintTemplateName;
        Windows::Win32::Com::IUnknown* lpCallback;
        uint32_t nPropertyPages;
        Windows::Win32::Controls::HPROPSHEETPAGE* lphPropertyPages;
        uint32_t nStartPage;
        uint32_t dwResultAction;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct DEVNAMES
    {
        uint16_t wDriverOffset;
        uint16_t wDeviceOffset;
        uint16_t wOutputOffset;
        uint16_t wDefault;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct PAGESETUPDLGA
    {
        uint32_t lStructSize;
        Windows::Win32::WindowsAndMessaging::HWND hwndOwner;
        intptr_t hDevMode;
        intptr_t hDevNames;
        uint32_t Flags;
        Windows::Win32::DisplayDevices::POINT ptPaperSize;
        Windows::Win32::DisplayDevices::RECT rtMinMargin;
        Windows::Win32::DisplayDevices::RECT rtMargin;
        Windows::Win32::SystemServices::HINSTANCE hInstance;
        Windows::Win32::WindowsAndMessaging::LPARAM lCustData;
        Windows::Win32::WindowsAndMessaging::LPPAGESETUPHOOK* lpfnPageSetupHook;
        Windows::Win32::WindowsAndMessaging::LPPAGEPAINTHOOK* lpfnPagePaintHook;
        int8_t* lpPageSetupTemplateName;
        intptr_t hPageSetupTemplate;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct PAGESETUPDLGW
    {
        uint32_t lStructSize;
        Windows::Win32::WindowsAndMessaging::HWND hwndOwner;
        intptr_t hDevMode;
        intptr_t hDevNames;
        uint32_t Flags;
        Windows::Win32::DisplayDevices::POINT ptPaperSize;
        Windows::Win32::DisplayDevices::RECT rtMinMargin;
        Windows::Win32::DisplayDevices::RECT rtMargin;
        Windows::Win32::SystemServices::HINSTANCE hInstance;
        Windows::Win32::WindowsAndMessaging::LPARAM lCustData;
        Windows::Win32::WindowsAndMessaging::LPPAGESETUPHOOK* lpfnPageSetupHook;
        Windows::Win32::WindowsAndMessaging::LPPAGEPAINTHOOK* lpfnPagePaintHook;
        uint16_t* lpPageSetupTemplateName;
        intptr_t hPageSetupTemplate;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::AllJoyn
{
    struct _alljoyn_msgarg_handle
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::AllJoyn
{
    struct _alljoyn_aboutdata_handle
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::AllJoyn
{
    struct _alljoyn_aboutdatalistener_handle
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::AllJoyn
{
    struct alljoyn_aboutdatalistener_callbacks
    {
        Windows::Win32::AllJoyn::alljoyn_aboutdatalistener_getaboutdata_ptr* about_datalistener_getaboutdata;
        Windows::Win32::AllJoyn::alljoyn_aboutdatalistener_getannouncedaboutdata_ptr* about_datalistener_getannouncedaboutdata;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::AllJoyn
{
    struct _alljoyn_permissionconfigurator_handle
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::AllJoyn
{
    struct alljoyn_certificateid
    {
        uint8_t* serial;
        size_t serialLen;
        int8_t* issuerPublicKey;
        uint8_t* issuerAki;
        size_t issuerAkiLen;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::AllJoyn
{
    struct alljoyn_certificateidarray
    {
        size_t count;
        Windows::Win32::AllJoyn::alljoyn_certificateid* ids;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::AllJoyn
{
    struct alljoyn_manifestarray
    {
        size_t count;
        int8_t** xmls;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::AllJoyn
{
    struct _alljoyn_applicationstatelistener_handle
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::AllJoyn
{
    struct alljoyn_applicationstatelistener_callbacks
    {
        Windows::Win32::AllJoyn::alljoyn_applicationstatelistener_state_ptr* state;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::AllJoyn
{
    struct _alljoyn_keystore_handle
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::AllJoyn
{
    struct _alljoyn_keystorelistener_handle
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::AllJoyn
{
    struct alljoyn_keystorelistener_callbacks
    {
        Windows::Win32::AllJoyn::alljoyn_keystorelistener_loadrequest_ptr* load_request;
        Windows::Win32::AllJoyn::alljoyn_keystorelistener_storerequest_ptr* store_request;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::AllJoyn
{
    struct alljoyn_keystorelistener_with_synchronization_callbacks
    {
        Windows::Win32::AllJoyn::alljoyn_keystorelistener_loadrequest_ptr* load_request;
        Windows::Win32::AllJoyn::alljoyn_keystorelistener_storerequest_ptr* store_request;
        Windows::Win32::AllJoyn::alljoyn_keystorelistener_acquireexclusivelock_ptr* acquire_exclusive_lock;
        Windows::Win32::AllJoyn::alljoyn_keystorelistener_releaseexclusivelock_ptr* release_exclusive_lock;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::AllJoyn
{
    struct _alljoyn_sessionopts_handle
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::AllJoyn
{
    struct _alljoyn_message_handle
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::AllJoyn
{
    struct _alljoyn_busattachment_handle
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::AllJoyn
{
    struct _alljoyn_authlistener_handle
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::AllJoyn
{
    struct _alljoyn_credentials_handle
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::AllJoyn
{
    struct alljoyn_authlistener_callbacks
    {
        Windows::Win32::AllJoyn::alljoyn_authlistener_requestcredentials_ptr* request_credentials;
        Windows::Win32::AllJoyn::alljoyn_authlistener_verifycredentials_ptr* verify_credentials;
        Windows::Win32::AllJoyn::alljoyn_authlistener_securityviolation_ptr* security_violation;
        Windows::Win32::AllJoyn::alljoyn_authlistener_authenticationcomplete_ptr* authentication_complete;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::AllJoyn
{
    struct alljoyn_authlistenerasync_callbacks
    {
        Windows::Win32::AllJoyn::alljoyn_authlistener_requestcredentialsasync_ptr* request_credentials;
        Windows::Win32::AllJoyn::alljoyn_authlistener_verifycredentialsasync_ptr* verify_credentials;
        Windows::Win32::AllJoyn::alljoyn_authlistener_securityviolation_ptr* security_violation;
        Windows::Win32::AllJoyn::alljoyn_authlistener_authenticationcomplete_ptr* authentication_complete;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::AllJoyn
{
    struct _alljoyn_buslistener_handle
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::AllJoyn
{
    struct alljoyn_buslistener_callbacks
    {
        Windows::Win32::AllJoyn::alljoyn_buslistener_listener_registered_ptr* listener_registered;
        Windows::Win32::AllJoyn::alljoyn_buslistener_listener_unregistered_ptr* listener_unregistered;
        Windows::Win32::AllJoyn::alljoyn_buslistener_found_advertised_name_ptr* found_advertised_name;
        Windows::Win32::AllJoyn::alljoyn_buslistener_lost_advertised_name_ptr* lost_advertised_name;
        Windows::Win32::AllJoyn::alljoyn_buslistener_name_owner_changed_ptr* name_owner_changed;
        Windows::Win32::AllJoyn::alljoyn_buslistener_bus_stopping_ptr* bus_stopping;
        Windows::Win32::AllJoyn::alljoyn_buslistener_bus_disconnected_ptr* bus_disconnected;
        Windows::Win32::AllJoyn::alljoyn_buslistener_bus_prop_changed_ptr* property_changed;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::AllJoyn
{
    struct _alljoyn_interfacedescription_handle
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::AllJoyn
{
    struct alljoyn_interfacedescription_member
    {
        Windows::Win32::AllJoyn::_alljoyn_interfacedescription_handle* iface;
        Windows::Win32::AllJoyn::alljoyn_messagetype memberType;
        int8_t* name;
        int8_t* signature;
        int8_t* returnSignature;
        int8_t* argNames;
        void* internal_member;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::AllJoyn
{
    struct alljoyn_interfacedescription_property
    {
        int8_t* name;
        int8_t* signature;
        uint8_t access;
        void* internal_property;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::AllJoyn
{
    struct _alljoyn_busobject_handle
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::AllJoyn
{
    struct alljoyn_busobject_callbacks
    {
        Windows::Win32::AllJoyn::alljoyn_busobject_prop_get_ptr* property_get;
        Windows::Win32::AllJoyn::alljoyn_busobject_prop_set_ptr* property_set;
        Windows::Win32::AllJoyn::alljoyn_busobject_object_registration_ptr* object_registered;
        Windows::Win32::AllJoyn::alljoyn_busobject_object_registration_ptr* object_unregistered;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::AllJoyn
{
    struct alljoyn_busobject_methodentry
    {
        Windows::Win32::AllJoyn::alljoyn_interfacedescription_member* member;
        Windows::Win32::AllJoyn::alljoyn_messagereceiver_methodhandler_ptr* method_handler;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::AllJoyn
{
    struct _alljoyn_proxybusobject_handle
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::AllJoyn
{
    struct _alljoyn_permissionconfigurationlistener_handle
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::AllJoyn
{
    struct alljoyn_permissionconfigurationlistener_callbacks
    {
        Windows::Win32::AllJoyn::alljoyn_permissionconfigurationlistener_factoryreset_ptr* factory_reset;
        Windows::Win32::AllJoyn::alljoyn_permissionconfigurationlistener_policychanged_ptr* policy_changed;
        Windows::Win32::AllJoyn::alljoyn_permissionconfigurationlistener_startmanagement_ptr* start_management;
        Windows::Win32::AllJoyn::alljoyn_permissionconfigurationlistener_endmanagement_ptr* end_management;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::AllJoyn
{
    struct _alljoyn_sessionlistener_handle
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::AllJoyn
{
    struct alljoyn_sessionlistener_callbacks
    {
        Windows::Win32::AllJoyn::alljoyn_sessionlistener_sessionlost_ptr* session_lost;
        Windows::Win32::AllJoyn::alljoyn_sessionlistener_sessionmemberadded_ptr* session_member_added;
        Windows::Win32::AllJoyn::alljoyn_sessionlistener_sessionmemberremoved_ptr* session_member_removed;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::AllJoyn
{
    struct _alljoyn_sessionportlistener_handle
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::AllJoyn
{
    struct alljoyn_sessionportlistener_callbacks
    {
        Windows::Win32::AllJoyn::alljoyn_sessionportlistener_acceptsessionjoiner_ptr* accept_session_joiner;
        Windows::Win32::AllJoyn::alljoyn_sessionportlistener_sessionjoined_ptr* session_joined;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::AllJoyn
{
    struct _alljoyn_aboutlistener_handle
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::AllJoyn
{
    struct alljoyn_aboutlistener_callback
    {
        Windows::Win32::AllJoyn::alljoyn_about_announced_ptr* about_listener_announced;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::AllJoyn
{
    struct _alljoyn_aboutobj_handle
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::AllJoyn
{
    struct _alljoyn_aboutobjectdescription_handle
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::AllJoyn
{
    struct _alljoyn_aboutproxy_handle
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::AllJoyn
{
    struct _alljoyn_pinglistener_handle
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::AllJoyn
{
    struct alljoyn_pinglistener_callback
    {
        Windows::Win32::AllJoyn::alljoyn_autopinger_destination_found_ptr* destination_found;
        Windows::Win32::AllJoyn::alljoyn_autopinger_destination_lost_ptr* destination_lost;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::AllJoyn
{
    struct _alljoyn_autopinger_handle
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::AllJoyn
{
    struct _alljoyn_proxybusobject_ref_handle
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::AllJoyn
{
    struct _alljoyn_observerlistener_handle
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::AllJoyn
{
    struct alljoyn_observerlistener_callback
    {
        Windows::Win32::AllJoyn::alljoyn_observer_object_discovered_ptr* object_discovered;
        Windows::Win32::AllJoyn::alljoyn_observer_object_lost_ptr* object_lost;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::AllJoyn
{
    struct _alljoyn_observer_handle
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::AllJoyn
{
    struct _alljoyn_securityapplicationproxy_handle
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Antimalware
{
    struct AMSI_UAC_REQUEST_EXE_INFO
    {
        uint32_t ulLength;
        uint16_t* lpwszApplicationName;
        uint16_t* lpwszCommandLine;
        uint16_t* lpwszDLLParameter;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Antimalware
{
    struct AMSI_UAC_REQUEST_COM_INFO
    {
        uint32_t ulLength;
        uint16_t* lpwszServerBinary;
        uint16_t* lpwszRequestor;
        ::win32::guid Clsid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Antimalware
{
    struct AMSI_UAC_REQUEST_MSI_INFO
    {
        uint32_t ulLength;
        Windows::Win32::Antimalware::AMSI_UAC_MSI_ACTION MsiAction;
        uint16_t* lpwszProductName;
        uint16_t* lpwszVersion;
        uint16_t* lpwszLanguage;
        uint16_t* lpwszManufacturer;
        uint16_t* lpwszPackagePath;
        uint16_t* lpwszPackageSource;
        uint32_t ulUpdates;
        uint16_t** ppwszUpdates;
        uint16_t** ppwszUpdateSources;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Antimalware
{
    struct AMSI_UAC_REQUEST_AX_INFO
    {
        uint32_t ulLength;
        uint16_t* lpwszLocalInstallPath;
        uint16_t* lpwszSourceURL;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Antimalware
{
    struct AMSI_UAC_REQUEST_PACKAGED_APP_INFO
    {
        uint32_t ulLength;
        uint16_t* lpwszApplicationName;
        uint16_t* lpwszCommandLine;
        uint16_t* lpPackageFamilyName;
        uint16_t* lpApplicationId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Antimalware
{
    struct AMSI_UAC_REQUEST_CONTEXT
    {
        union _RequestType_e__Union
        {
            Windows::Win32::Antimalware::AMSI_UAC_REQUEST_EXE_INFO ExeInfo;
            Windows::Win32::Antimalware::AMSI_UAC_REQUEST_COM_INFO ComInfo;
            Windows::Win32::Antimalware::AMSI_UAC_REQUEST_MSI_INFO MsiInfo;
            Windows::Win32::Antimalware::AMSI_UAC_REQUEST_AX_INFO ActiveXInfo;
            Windows::Win32::Antimalware::AMSI_UAC_REQUEST_PACKAGED_APP_INFO PackagedAppInfo;
        };
        uint32_t ulLength;
        uint32_t ulRequestorProcessId;
        Windows::Win32::Antimalware::AMSI_UAC_TRUST_STATE UACTrustState;
        Windows::Win32::Antimalware::AMSI_UAC_REQUEST_TYPE Type;
        _RequestType_e__Union RequestType;
        Windows::Win32::SystemServices::BOOL bAutoElevateRequest;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Antimalware
{
    struct HAMSICONTEXT__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Antimalware
{
    struct HAMSISESSION__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFirewall
{
    struct NETCON_PROPERTIES
    {
        ::win32::guid guidId;
        uint16_t* pszwName;
        uint16_t* pszwDeviceName;
        Windows::Win32::WindowsFirewall::NETCON_STATUS Status;
        Windows::Win32::WindowsFirewall::NETCON_MEDIATYPE MediaType;
        uint32_t dwCharacter;
        ::win32::guid clsidThisObject;
        ::win32::guid clsidUiObject;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFirewall
{
    struct INET_FIREWALL_AC_CAPABILITIES
    {
        uint32_t count;
        Windows::Win32::Security::SID_AND_ATTRIBUTES* capabilities;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFirewall
{
    struct INET_FIREWALL_AC_BINARIES
    {
        uint32_t count;
        uint16_t** binaries;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFirewall
{
    struct INET_FIREWALL_AC_CHANGE
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::WindowsFirewall::INET_FIREWALL_AC_CAPABILITIES capabilities;
            Windows::Win32::WindowsFirewall::INET_FIREWALL_AC_BINARIES binaries;
        };
        Windows::Win32::WindowsFirewall::INET_FIREWALL_AC_CHANGE_TYPE changeType;
        Windows::Win32::WindowsFirewall::INET_FIREWALL_AC_CREATION_TYPE createType;
        Windows::Win32::Security::SID* appContainerSid;
        Windows::Win32::Security::SID* userSid;
        uint16_t* displayName;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFirewall
{
    struct INET_FIREWALL_APP_CONTAINER
    {
        Windows::Win32::Security::SID* appContainerSid;
        Windows::Win32::Security::SID* userSid;
        uint16_t* appContainerName;
        uint16_t* displayName;
        uint16_t* description;
        Windows::Win32::WindowsFirewall::INET_FIREWALL_AC_CAPABILITIES capabilities;
        Windows::Win32::WindowsFirewall::INET_FIREWALL_AC_BINARIES binaries;
        uint16_t* workingDirectory;
        uint16_t* packageFullName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct IP4_ARRAY
    {
        uint32_t AddrCount;
        uint32_t AddrArray[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    union IP6_ADDRESS
    {
        uint32_t IP6Dword[4];
        uint16_t IP6Word[8];
        uint8_t IP6Byte[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_ADDR
    {
        union _Data_e__Union
        {
            uint32_t DnsAddrUserDword[8];
        };
        int8_t MaxSa[32];
        _Data_e__Union Data;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_ADDR_ARRAY
    {
        uint32_t MaxCount;
        uint32_t AddrCount;
        uint32_t Tag;
        uint16_t Family;
        uint16_t WordReserved;
        uint32_t Flags;
        uint32_t MatchFlag;
        uint32_t Reserved1;
        uint32_t Reserved2;
        Windows::Win32::Dns::DNS_ADDR AddrArray[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_HEADER
    {
        uint16_t Xid;
        uint8_t _bitfield1;
        uint8_t _bitfield2;
        uint16_t QuestionCount;
        uint16_t AnswerCount;
        uint16_t NameServerCount;
        uint16_t AdditionalCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_HEADER_EXT
    {
        uint16_t _bitfield;
        uint8_t chRcode;
        uint8_t chVersion;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_WIRE_QUESTION
    {
        uint16_t QuestionType;
        uint16_t QuestionClass;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_WIRE_RECORD
    {
        uint16_t RecordType;
        uint16_t RecordClass;
        uint32_t TimeToLive;
        uint16_t DataLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_A_DATA
    {
        uint32_t IpAddress;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_PTR_DATAW
    {
        uint16_t* pNameHost;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_PTR_DATAA
    {
        int8_t* pNameHost;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_SOA_DATAW
    {
        uint16_t* pNamePrimaryServer;
        uint16_t* pNameAdministrator;
        uint32_t dwSerialNo;
        uint32_t dwRefresh;
        uint32_t dwRetry;
        uint32_t dwExpire;
        uint32_t dwDefaultTtl;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_SOA_DATAA
    {
        int8_t* pNamePrimaryServer;
        int8_t* pNameAdministrator;
        uint32_t dwSerialNo;
        uint32_t dwRefresh;
        uint32_t dwRetry;
        uint32_t dwExpire;
        uint32_t dwDefaultTtl;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_MINFO_DATAW
    {
        uint16_t* pNameMailbox;
        uint16_t* pNameErrorsMailbox;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_MINFO_DATAA
    {
        int8_t* pNameMailbox;
        int8_t* pNameErrorsMailbox;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_MX_DATAW
    {
        uint16_t* pNameExchange;
        uint16_t wPreference;
        uint16_t Pad;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_MX_DATAA
    {
        int8_t* pNameExchange;
        uint16_t wPreference;
        uint16_t Pad;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_TXT_DATAW
    {
        uint32_t dwStringCount;
        uint16_t* pStringArray[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_TXT_DATAA
    {
        uint32_t dwStringCount;
        int8_t* pStringArray[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_NULL_DATA
    {
        uint32_t dwByteCount;
        uint8_t Data[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_WKS_DATA
    {
        uint32_t IpAddress;
        uint8_t chProtocol;
        uint8_t BitMask[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_AAAA_DATA
    {
        Windows::Win32::Dns::IP6_ADDRESS Ip6Address;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_SIG_DATAW
    {
        uint16_t wTypeCovered;
        uint8_t chAlgorithm;
        uint8_t chLabelCount;
        uint32_t dwOriginalTtl;
        uint32_t dwExpiration;
        uint32_t dwTimeSigned;
        uint16_t wKeyTag;
        uint16_t wSignatureLength;
        uint16_t* pNameSigner;
        uint8_t Signature[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_SIG_DATAA
    {
        uint16_t wTypeCovered;
        uint8_t chAlgorithm;
        uint8_t chLabelCount;
        uint32_t dwOriginalTtl;
        uint32_t dwExpiration;
        uint32_t dwTimeSigned;
        uint16_t wKeyTag;
        uint16_t wSignatureLength;
        int8_t* pNameSigner;
        uint8_t Signature[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_KEY_DATA
    {
        uint16_t wFlags;
        uint8_t chProtocol;
        uint8_t chAlgorithm;
        uint16_t wKeyLength;
        uint16_t wPad;
        uint8_t Key[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_DHCID_DATA
    {
        uint32_t dwByteCount;
        uint8_t DHCID[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_NSEC_DATAW
    {
        uint16_t* pNextDomainName;
        uint16_t wTypeBitMapsLength;
        uint16_t wPad;
        uint8_t TypeBitMaps[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_NSEC_DATAA
    {
        int8_t* pNextDomainName;
        uint16_t wTypeBitMapsLength;
        uint16_t wPad;
        uint8_t TypeBitMaps[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_NSEC3_DATA
    {
        uint8_t chAlgorithm;
        uint8_t bFlags;
        uint16_t wIterations;
        uint8_t bSaltLength;
        uint8_t bHashLength;
        uint16_t wTypeBitMapsLength;
        uint8_t chData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_NSEC3PARAM_DATA
    {
        uint8_t chAlgorithm;
        uint8_t bFlags;
        uint16_t wIterations;
        uint8_t bSaltLength;
        uint8_t bPad[3];
        uint8_t pbSalt[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_TLSA_DATA
    {
        uint8_t bCertUsage;
        uint8_t bSelector;
        uint8_t bMatchingType;
        uint16_t bCertificateAssociationDataLength;
        uint8_t bPad[3];
        uint8_t bCertificateAssociationData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_DS_DATA
    {
        uint16_t wKeyTag;
        uint8_t chAlgorithm;
        uint8_t chDigestType;
        uint16_t wDigestLength;
        uint16_t wPad;
        uint8_t Digest[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_OPT_DATA
    {
        uint16_t wDataLength;
        uint16_t wPad;
        uint8_t Data[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_LOC_DATA
    {
        uint16_t wVersion;
        uint16_t wSize;
        uint16_t wHorPrec;
        uint16_t wVerPrec;
        uint32_t dwLatitude;
        uint32_t dwLongitude;
        uint32_t dwAltitude;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_NXT_DATAW
    {
        uint16_t* pNameNext;
        uint16_t wNumTypes;
        uint16_t wTypes[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_NXT_DATAA
    {
        int8_t* pNameNext;
        uint16_t wNumTypes;
        uint16_t wTypes[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_SRV_DATAW
    {
        uint16_t* pNameTarget;
        uint16_t wPriority;
        uint16_t wWeight;
        uint16_t wPort;
        uint16_t Pad;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_SRV_DATAA
    {
        int8_t* pNameTarget;
        uint16_t wPriority;
        uint16_t wWeight;
        uint16_t wPort;
        uint16_t Pad;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_NAPTR_DATAW
    {
        uint16_t wOrder;
        uint16_t wPreference;
        uint16_t* pFlags;
        uint16_t* pService;
        uint16_t* pRegularExpression;
        uint16_t* pReplacement;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_NAPTR_DATAA
    {
        uint16_t wOrder;
        uint16_t wPreference;
        int8_t* pFlags;
        int8_t* pService;
        int8_t* pRegularExpression;
        int8_t* pReplacement;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_ATMA_DATA
    {
        uint8_t AddressType;
        uint8_t Address[20];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_TKEY_DATAW
    {
        uint16_t* pNameAlgorithm;
        uint8_t* pAlgorithmPacket;
        uint8_t* pKey;
        uint8_t* pOtherData;
        uint32_t dwCreateTime;
        uint32_t dwExpireTime;
        uint16_t wMode;
        uint16_t wError;
        uint16_t wKeyLength;
        uint16_t wOtherLength;
        uint8_t cAlgNameLength;
        Windows::Win32::SystemServices::BOOL bPacketPointers;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_TKEY_DATAA
    {
        int8_t* pNameAlgorithm;
        uint8_t* pAlgorithmPacket;
        uint8_t* pKey;
        uint8_t* pOtherData;
        uint32_t dwCreateTime;
        uint32_t dwExpireTime;
        uint16_t wMode;
        uint16_t wError;
        uint16_t wKeyLength;
        uint16_t wOtherLength;
        uint8_t cAlgNameLength;
        Windows::Win32::SystemServices::BOOL bPacketPointers;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_TSIG_DATAW
    {
        uint16_t* pNameAlgorithm;
        uint8_t* pAlgorithmPacket;
        uint8_t* pSignature;
        uint8_t* pOtherData;
        int64_t i64CreateTime;
        uint16_t wFudgeTime;
        uint16_t wOriginalXid;
        uint16_t wError;
        uint16_t wSigLength;
        uint16_t wOtherLength;
        uint8_t cAlgNameLength;
        Windows::Win32::SystemServices::BOOL bPacketPointers;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_TSIG_DATAA
    {
        int8_t* pNameAlgorithm;
        uint8_t* pAlgorithmPacket;
        uint8_t* pSignature;
        uint8_t* pOtherData;
        int64_t i64CreateTime;
        uint16_t wFudgeTime;
        uint16_t wOriginalXid;
        uint16_t wError;
        uint16_t wSigLength;
        uint16_t wOtherLength;
        uint8_t cAlgNameLength;
        Windows::Win32::SystemServices::BOOL bPacketPointers;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_UNKNOWN_DATA
    {
        uint32_t dwByteCount;
        uint8_t bData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_WINS_DATA
    {
        uint32_t dwMappingFlag;
        uint32_t dwLookupTimeout;
        uint32_t dwCacheTimeout;
        uint32_t cWinsServerCount;
        uint32_t WinsServers[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_WINSR_DATAW
    {
        uint32_t dwMappingFlag;
        uint32_t dwLookupTimeout;
        uint32_t dwCacheTimeout;
        uint16_t* pNameResultDomain;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_WINSR_DATAA
    {
        uint32_t dwMappingFlag;
        uint32_t dwLookupTimeout;
        uint32_t dwCacheTimeout;
        int8_t* pNameResultDomain;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_RECORD_FLAGS
    {
        uint32_t _bitfield;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_RECORDW
    {
        union _Flags_e__Union
        {
            uint32_t DW;
            Windows::Win32::Dns::DNS_RECORD_FLAGS S;
        };
        union _Data_e__Union
        {
            Windows::Win32::Dns::DNS_A_DATA A;
            Windows::Win32::Dns::DNS_SOA_DATAW SOA;
            Windows::Win32::Dns::DNS_SOA_DATAW Soa;
            Windows::Win32::Dns::DNS_PTR_DATAW PTR;
            Windows::Win32::Dns::DNS_PTR_DATAW Ptr;
            Windows::Win32::Dns::DNS_PTR_DATAW NS;
            Windows::Win32::Dns::DNS_PTR_DATAW Ns;
            Windows::Win32::Dns::DNS_PTR_DATAW CNAME;
            Windows::Win32::Dns::DNS_PTR_DATAW Cname;
            Windows::Win32::Dns::DNS_PTR_DATAW DNAME;
            Windows::Win32::Dns::DNS_PTR_DATAW Dname;
            Windows::Win32::Dns::DNS_PTR_DATAW MB;
            Windows::Win32::Dns::DNS_PTR_DATAW Mb;
            Windows::Win32::Dns::DNS_PTR_DATAW MD;
            Windows::Win32::Dns::DNS_PTR_DATAW Md;
            Windows::Win32::Dns::DNS_PTR_DATAW MF;
            Windows::Win32::Dns::DNS_PTR_DATAW Mf;
            Windows::Win32::Dns::DNS_PTR_DATAW MG;
            Windows::Win32::Dns::DNS_PTR_DATAW Mg;
            Windows::Win32::Dns::DNS_PTR_DATAW MR;
            Windows::Win32::Dns::DNS_PTR_DATAW Mr;
            Windows::Win32::Dns::DNS_MINFO_DATAW MINFO;
            Windows::Win32::Dns::DNS_MINFO_DATAW Minfo;
            Windows::Win32::Dns::DNS_MINFO_DATAW RP;
            Windows::Win32::Dns::DNS_MINFO_DATAW Rp;
            Windows::Win32::Dns::DNS_MX_DATAW MX;
            Windows::Win32::Dns::DNS_MX_DATAW Mx;
            Windows::Win32::Dns::DNS_MX_DATAW AFSDB;
            Windows::Win32::Dns::DNS_MX_DATAW Afsdb;
            Windows::Win32::Dns::DNS_MX_DATAW RT;
            Windows::Win32::Dns::DNS_MX_DATAW Rt;
            Windows::Win32::Dns::DNS_TXT_DATAW HINFO;
            Windows::Win32::Dns::DNS_TXT_DATAW Hinfo;
            Windows::Win32::Dns::DNS_TXT_DATAW ISDN;
            Windows::Win32::Dns::DNS_TXT_DATAW Isdn;
            Windows::Win32::Dns::DNS_TXT_DATAW TXT;
            Windows::Win32::Dns::DNS_TXT_DATAW Txt;
            Windows::Win32::Dns::DNS_TXT_DATAW X25;
            Windows::Win32::Dns::DNS_NULL_DATA Null;
            Windows::Win32::Dns::DNS_WKS_DATA WKS;
            Windows::Win32::Dns::DNS_WKS_DATA Wks;
            Windows::Win32::Dns::DNS_AAAA_DATA AAAA;
            Windows::Win32::Dns::DNS_KEY_DATA KEY;
            Windows::Win32::Dns::DNS_KEY_DATA Key;
            Windows::Win32::Dns::DNS_SIG_DATAW SIG;
            Windows::Win32::Dns::DNS_SIG_DATAW Sig;
            Windows::Win32::Dns::DNS_ATMA_DATA ATMA;
            Windows::Win32::Dns::DNS_ATMA_DATA Atma;
            Windows::Win32::Dns::DNS_NXT_DATAW NXT;
            Windows::Win32::Dns::DNS_NXT_DATAW Nxt;
            Windows::Win32::Dns::DNS_SRV_DATAW SRV;
            Windows::Win32::Dns::DNS_SRV_DATAW Srv;
            Windows::Win32::Dns::DNS_NAPTR_DATAW NAPTR;
            Windows::Win32::Dns::DNS_NAPTR_DATAW Naptr;
            Windows::Win32::Dns::DNS_OPT_DATA OPT;
            Windows::Win32::Dns::DNS_OPT_DATA Opt;
            Windows::Win32::Dns::DNS_DS_DATA DS;
            Windows::Win32::Dns::DNS_DS_DATA Ds;
            Windows::Win32::Dns::DNS_SIG_DATAW RRSIG;
            Windows::Win32::Dns::DNS_SIG_DATAW Rrsig;
            Windows::Win32::Dns::DNS_NSEC_DATAW NSEC;
            Windows::Win32::Dns::DNS_NSEC_DATAW Nsec;
            Windows::Win32::Dns::DNS_KEY_DATA DNSKEY;
            Windows::Win32::Dns::DNS_KEY_DATA Dnskey;
            Windows::Win32::Dns::DNS_TKEY_DATAW TKEY;
            Windows::Win32::Dns::DNS_TKEY_DATAW Tkey;
            Windows::Win32::Dns::DNS_TSIG_DATAW TSIG;
            Windows::Win32::Dns::DNS_TSIG_DATAW Tsig;
            Windows::Win32::Dns::DNS_WINS_DATA WINS;
            Windows::Win32::Dns::DNS_WINS_DATA Wins;
            Windows::Win32::Dns::DNS_WINSR_DATAW WINSR;
            Windows::Win32::Dns::DNS_WINSR_DATAW WinsR;
            Windows::Win32::Dns::DNS_WINSR_DATAW NBSTAT;
            Windows::Win32::Dns::DNS_WINSR_DATAW Nbstat;
            Windows::Win32::Dns::DNS_DHCID_DATA DHCID;
            Windows::Win32::Dns::DNS_NSEC3_DATA NSEC3;
            Windows::Win32::Dns::DNS_NSEC3_DATA Nsec3;
            Windows::Win32::Dns::DNS_NSEC3PARAM_DATA NSEC3PARAM;
            Windows::Win32::Dns::DNS_NSEC3PARAM_DATA Nsec3Param;
            Windows::Win32::Dns::DNS_TLSA_DATA TLSA;
            Windows::Win32::Dns::DNS_TLSA_DATA Tlsa;
            Windows::Win32::Dns::DNS_UNKNOWN_DATA UNKNOWN;
            Windows::Win32::Dns::DNS_UNKNOWN_DATA Unknown;
            uint8_t* pDataPtr;
        };
        Windows::Win32::Dns::DNS_RECORDW* pNext;
        uint16_t* pName;
        uint16_t wType;
        uint16_t wDataLength;
        _Flags_e__Union Flags;
        uint32_t dwTtl;
        uint32_t dwReserved;
        _Data_e__Union Data;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct _DnsRecordOptW
    {
        union _Flags_e__Union
        {
            uint32_t DW;
            Windows::Win32::Dns::DNS_RECORD_FLAGS S;
        };
        union _Data_e__Union
        {
            Windows::Win32::Dns::DNS_OPT_DATA OPT;
            Windows::Win32::Dns::DNS_OPT_DATA Opt;
        };
        Windows::Win32::Dns::DNS_RECORDW* pNext;
        uint16_t* pName;
        uint16_t wType;
        uint16_t wDataLength;
        _Flags_e__Union Flags;
        Windows::Win32::Dns::DNS_HEADER_EXT ExtHeader;
        uint16_t wPayloadSize;
        uint16_t wReserved;
        _Data_e__Union Data;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_RECORDA
    {
        union _Flags_e__Union
        {
            uint32_t DW;
            Windows::Win32::Dns::DNS_RECORD_FLAGS S;
        };
        union _Data_e__Union
        {
            Windows::Win32::Dns::DNS_A_DATA A;
            Windows::Win32::Dns::DNS_SOA_DATAA SOA;
            Windows::Win32::Dns::DNS_SOA_DATAA Soa;
            Windows::Win32::Dns::DNS_PTR_DATAA PTR;
            Windows::Win32::Dns::DNS_PTR_DATAA Ptr;
            Windows::Win32::Dns::DNS_PTR_DATAA NS;
            Windows::Win32::Dns::DNS_PTR_DATAA Ns;
            Windows::Win32::Dns::DNS_PTR_DATAA CNAME;
            Windows::Win32::Dns::DNS_PTR_DATAA Cname;
            Windows::Win32::Dns::DNS_PTR_DATAA DNAME;
            Windows::Win32::Dns::DNS_PTR_DATAA Dname;
            Windows::Win32::Dns::DNS_PTR_DATAA MB;
            Windows::Win32::Dns::DNS_PTR_DATAA Mb;
            Windows::Win32::Dns::DNS_PTR_DATAA MD;
            Windows::Win32::Dns::DNS_PTR_DATAA Md;
            Windows::Win32::Dns::DNS_PTR_DATAA MF;
            Windows::Win32::Dns::DNS_PTR_DATAA Mf;
            Windows::Win32::Dns::DNS_PTR_DATAA MG;
            Windows::Win32::Dns::DNS_PTR_DATAA Mg;
            Windows::Win32::Dns::DNS_PTR_DATAA MR;
            Windows::Win32::Dns::DNS_PTR_DATAA Mr;
            Windows::Win32::Dns::DNS_MINFO_DATAA MINFO;
            Windows::Win32::Dns::DNS_MINFO_DATAA Minfo;
            Windows::Win32::Dns::DNS_MINFO_DATAA RP;
            Windows::Win32::Dns::DNS_MINFO_DATAA Rp;
            Windows::Win32::Dns::DNS_MX_DATAA MX;
            Windows::Win32::Dns::DNS_MX_DATAA Mx;
            Windows::Win32::Dns::DNS_MX_DATAA AFSDB;
            Windows::Win32::Dns::DNS_MX_DATAA Afsdb;
            Windows::Win32::Dns::DNS_MX_DATAA RT;
            Windows::Win32::Dns::DNS_MX_DATAA Rt;
            Windows::Win32::Dns::DNS_TXT_DATAA HINFO;
            Windows::Win32::Dns::DNS_TXT_DATAA Hinfo;
            Windows::Win32::Dns::DNS_TXT_DATAA ISDN;
            Windows::Win32::Dns::DNS_TXT_DATAA Isdn;
            Windows::Win32::Dns::DNS_TXT_DATAA TXT;
            Windows::Win32::Dns::DNS_TXT_DATAA Txt;
            Windows::Win32::Dns::DNS_TXT_DATAA X25;
            Windows::Win32::Dns::DNS_NULL_DATA Null;
            Windows::Win32::Dns::DNS_WKS_DATA WKS;
            Windows::Win32::Dns::DNS_WKS_DATA Wks;
            Windows::Win32::Dns::DNS_AAAA_DATA AAAA;
            Windows::Win32::Dns::DNS_KEY_DATA KEY;
            Windows::Win32::Dns::DNS_KEY_DATA Key;
            Windows::Win32::Dns::DNS_SIG_DATAA SIG;
            Windows::Win32::Dns::DNS_SIG_DATAA Sig;
            Windows::Win32::Dns::DNS_ATMA_DATA ATMA;
            Windows::Win32::Dns::DNS_ATMA_DATA Atma;
            Windows::Win32::Dns::DNS_NXT_DATAA NXT;
            Windows::Win32::Dns::DNS_NXT_DATAA Nxt;
            Windows::Win32::Dns::DNS_SRV_DATAA SRV;
            Windows::Win32::Dns::DNS_SRV_DATAA Srv;
            Windows::Win32::Dns::DNS_NAPTR_DATAA NAPTR;
            Windows::Win32::Dns::DNS_NAPTR_DATAA Naptr;
            Windows::Win32::Dns::DNS_OPT_DATA OPT;
            Windows::Win32::Dns::DNS_OPT_DATA Opt;
            Windows::Win32::Dns::DNS_DS_DATA DS;
            Windows::Win32::Dns::DNS_DS_DATA Ds;
            Windows::Win32::Dns::DNS_SIG_DATAA RRSIG;
            Windows::Win32::Dns::DNS_SIG_DATAA Rrsig;
            Windows::Win32::Dns::DNS_NSEC_DATAA NSEC;
            Windows::Win32::Dns::DNS_NSEC_DATAA Nsec;
            Windows::Win32::Dns::DNS_KEY_DATA DNSKEY;
            Windows::Win32::Dns::DNS_KEY_DATA Dnskey;
            Windows::Win32::Dns::DNS_TKEY_DATAA TKEY;
            Windows::Win32::Dns::DNS_TKEY_DATAA Tkey;
            Windows::Win32::Dns::DNS_TSIG_DATAA TSIG;
            Windows::Win32::Dns::DNS_TSIG_DATAA Tsig;
            Windows::Win32::Dns::DNS_WINS_DATA WINS;
            Windows::Win32::Dns::DNS_WINS_DATA Wins;
            Windows::Win32::Dns::DNS_WINSR_DATAA WINSR;
            Windows::Win32::Dns::DNS_WINSR_DATAA WinsR;
            Windows::Win32::Dns::DNS_WINSR_DATAA NBSTAT;
            Windows::Win32::Dns::DNS_WINSR_DATAA Nbstat;
            Windows::Win32::Dns::DNS_DHCID_DATA DHCID;
            Windows::Win32::Dns::DNS_NSEC3_DATA NSEC3;
            Windows::Win32::Dns::DNS_NSEC3_DATA Nsec3;
            Windows::Win32::Dns::DNS_NSEC3PARAM_DATA NSEC3PARAM;
            Windows::Win32::Dns::DNS_NSEC3PARAM_DATA Nsec3Param;
            Windows::Win32::Dns::DNS_TLSA_DATA TLSA;
            Windows::Win32::Dns::DNS_TLSA_DATA Tlsa;
            Windows::Win32::Dns::DNS_UNKNOWN_DATA UNKNOWN;
            Windows::Win32::Dns::DNS_UNKNOWN_DATA Unknown;
            uint8_t* pDataPtr;
        };
        Windows::Win32::Dns::DNS_RECORDA* pNext;
        int8_t* pName;
        uint16_t wType;
        uint16_t wDataLength;
        _Flags_e__Union Flags;
        uint32_t dwTtl;
        uint32_t dwReserved;
        _Data_e__Union Data;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct _DnsRecordOptA
    {
        union _Flags_e__Union
        {
            uint32_t DW;
            Windows::Win32::Dns::DNS_RECORD_FLAGS S;
        };
        union _Data_e__Union
        {
            Windows::Win32::Dns::DNS_OPT_DATA OPT;
            Windows::Win32::Dns::DNS_OPT_DATA Opt;
        };
        Windows::Win32::Dns::DNS_RECORDA* pNext;
        int8_t* pName;
        uint16_t wType;
        uint16_t wDataLength;
        _Flags_e__Union Flags;
        Windows::Win32::Dns::DNS_HEADER_EXT ExtHeader;
        uint16_t wPayloadSize;
        uint16_t wReserved;
        _Data_e__Union Data;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_RRSET
    {
        Windows::Win32::Dns::DNS_RECORDA* pFirstRR;
        Windows::Win32::Dns::DNS_RECORDA* pLastRR;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_PROXY_INFORMATION
    {
        uint32_t version;
        Windows::Win32::Dns::DNS_PROXY_INFORMATION_TYPE proxyInformationType;
        uint16_t* proxyName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_QUERY_RESULT
    {
        uint32_t Version;
        int32_t QueryStatus;
        uint64_t QueryOptions;
        Windows::Win32::Dns::DNS_RECORDA* pQueryRecords;
        void* Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_QUERY_REQUEST
    {
        uint32_t Version;
        uint16_t* QueryName;
        uint16_t QueryType;
        uint64_t QueryOptions;
        Windows::Win32::Dns::DNS_ADDR_ARRAY* pDnsServerList;
        uint32_t InterfaceIndex;
        Windows::Win32::Dns::PDNS_QUERY_COMPLETION_ROUTINE* pQueryCompletionCallback;
        void* pQueryContext;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_QUERY_CANCEL
    {
        int8_t Reserved[32];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_MESSAGE_BUFFER
    {
        Windows::Win32::Dns::DNS_HEADER MessageHead;
        int8_t MessageBody[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_CONNECTION_PROXY_INFO
    {
        union _Anonymous_e__Union
        {
            struct _DNS_CONNECTION_PROXY_INFO_CONFIG
            {
                uint16_t* pwszServer;
                uint16_t* pwszUsername;
                uint16_t* pwszPassword;
                uint16_t* pwszException;
                uint16_t* pwszExtraInfo;
                uint16_t Port;
            };
            struct _DNS_CONNECTION_PROXY_INFO_SCRIPT
            {
                uint16_t* pwszScript;
                uint16_t* pwszUsername;
                uint16_t* pwszPassword;
            };
            _DNS_CONNECTION_PROXY_INFO_CONFIG Config;
            _DNS_CONNECTION_PROXY_INFO_SCRIPT Script;
        };
        uint32_t Version;
        uint16_t* pwszFriendlyName;
        uint32_t Flags;
        Windows::Win32::Dns::DNS_CONNECTION_PROXY_INFO_SWITCH Switch;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_CONNECTION_PROXY_INFO_EX
    {
        Windows::Win32::Dns::DNS_CONNECTION_PROXY_INFO ProxyInfo;
        uint32_t dwInterfaceIndex;
        uint16_t* pwszConnectionName;
        Windows::Win32::SystemServices::BOOL fDirectConfiguration;
        Windows::Win32::SystemServices::HANDLE hConnection;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_CONNECTION_PROXY_ELEMENT
    {
        Windows::Win32::Dns::DNS_CONNECTION_PROXY_TYPE Type;
        Windows::Win32::Dns::DNS_CONNECTION_PROXY_INFO Info;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_CONNECTION_PROXY_LIST
    {
        uint32_t cProxies;
        Windows::Win32::Dns::DNS_CONNECTION_PROXY_ELEMENT* pProxies;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_CONNECTION_NAME
    {
        uint16_t wszName[65];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_CONNECTION_NAME_LIST
    {
        uint32_t cNames;
        Windows::Win32::Dns::DNS_CONNECTION_NAME* pNames;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_CONNECTION_IFINDEX_ENTRY
    {
        uint16_t* pwszConnectionName;
        uint32_t dwIfIndex;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_CONNECTION_IFINDEX_LIST
    {
        Windows::Win32::Dns::DNS_CONNECTION_IFINDEX_ENTRY* pConnectionIfIndexEntries;
        uint32_t nEntries;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_CONNECTION_POLICY_ENTRY
    {
        uint16_t* pwszHost;
        uint16_t* pwszAppId;
        uint32_t cbAppSid;
        uint8_t* pbAppSid;
        uint32_t nConnections;
        uint16_t** ppwszConnections;
        uint32_t dwPolicyEntryFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_CONNECTION_POLICY_ENTRY_LIST
    {
        Windows::Win32::Dns::DNS_CONNECTION_POLICY_ENTRY* pPolicyEntries;
        uint32_t nEntries;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_SERVICE_INSTANCE
    {
        uint16_t* pszInstanceName;
        uint16_t* pszHostName;
        uint32_t* ip4Address;
        Windows::Win32::Dns::IP6_ADDRESS* ip6Address;
        uint16_t wPort;
        uint16_t wPriority;
        uint16_t wWeight;
        uint32_t dwPropertyCount;
        uint16_t** keys;
        uint16_t** values;
        uint32_t dwInterfaceIndex;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_SERVICE_CANCEL
    {
        void* reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_SERVICE_BROWSE_REQUEST
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::Dns::PDNS_SERVICE_BROWSE_CALLBACK* pBrowseCallback;
            Windows::Win32::Dns::DNS_QUERY_COMPLETION_ROUTINE** pBrowseCallbackV2;
        };
        uint32_t Version;
        uint32_t InterfaceIndex;
        uint16_t* QueryName;
        _Anonymous_e__Union Anonymous;
        void* pQueryContext;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_SERVICE_RESOLVE_REQUEST
    {
        uint32_t Version;
        uint32_t InterfaceIndex;
        uint16_t* QueryName;
        Windows::Win32::Dns::PDNS_SERVICE_RESOLVE_COMPLETE* pResolveCompletionCallback;
        void* pQueryContext;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DNS_SERVICE_REGISTER_REQUEST
    {
        uint32_t Version;
        uint32_t InterfaceIndex;
        Windows::Win32::Dns::DNS_SERVICE_INSTANCE* pServiceInstance;
        Windows::Win32::Dns::PDNS_SERVICE_REGISTER_COMPLETE* pRegisterCompletionCallback;
        void* pQueryContext;
        Windows::Win32::SystemServices::HANDLE hCredentials;
        Windows::Win32::SystemServices::BOOL unicastEnabled;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct MDNS_QUERY_HANDLE
    {
        uint16_t nameBuf[256];
        uint16_t wType;
        void* pSubscription;
        void* pWnfCallbackParams;
        uint32_t stateNameData[2];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct MDNS_QUERY_REQUEST
    {
        uint32_t Version;
        uint32_t ulRefCount;
        uint16_t* Query;
        uint16_t QueryType;
        uint64_t QueryOptions;
        uint32_t InterfaceIndex;
        Windows::Win32::Dns::PMDNS_QUERY_CALLBACK* pQueryCallback;
        void* pQueryContext;
        Windows::Win32::SystemServices::BOOL fAnswerReceived;
        uint32_t ulResendCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::InstallableFileSystems
{
    struct FILTER_FULL_INFORMATION
    {
        uint32_t NextEntryOffset;
        uint32_t FrameID;
        uint32_t NumberOfInstances;
        uint16_t FilterNameLength;
        uint16_t FilterNameBuffer[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::InstallableFileSystems
{
    struct FILTER_AGGREGATE_BASIC_INFORMATION
    {
        union _Type_e__Union
        {
            struct _MiniFilter_e__Struct
            {
                uint32_t FrameID;
                uint32_t NumberOfInstances;
                uint16_t FilterNameLength;
                uint16_t FilterNameBufferOffset;
                uint16_t FilterAltitudeLength;
                uint16_t FilterAltitudeBufferOffset;
            };
            struct _LegacyFilter_e__Struct
            {
                uint16_t FilterNameLength;
                uint16_t FilterNameBufferOffset;
            };
            _MiniFilter_e__Struct MiniFilter;
            _LegacyFilter_e__Struct LegacyFilter;
        };
        uint32_t NextEntryOffset;
        uint32_t Flags;
        _Type_e__Union Type;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::InstallableFileSystems
{
    struct FILTER_AGGREGATE_STANDARD_INFORMATION
    {
        union _Type_e__Union
        {
            struct _MiniFilter_e__Struct
            {
                uint32_t Flags;
                uint32_t FrameID;
                uint32_t NumberOfInstances;
                uint16_t FilterNameLength;
                uint16_t FilterNameBufferOffset;
                uint16_t FilterAltitudeLength;
                uint16_t FilterAltitudeBufferOffset;
            };
            struct _LegacyFilter_e__Struct
            {
                uint32_t Flags;
                uint16_t FilterNameLength;
                uint16_t FilterNameBufferOffset;
                uint16_t FilterAltitudeLength;
                uint16_t FilterAltitudeBufferOffset;
            };
            _MiniFilter_e__Struct MiniFilter;
            _LegacyFilter_e__Struct LegacyFilter;
        };
        uint32_t NextEntryOffset;
        uint32_t Flags;
        _Type_e__Union Type;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::InstallableFileSystems
{
    struct FILTER_VOLUME_BASIC_INFORMATION
    {
        uint16_t FilterVolumeNameLength;
        uint16_t FilterVolumeName[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::InstallableFileSystems
{
    struct FILTER_VOLUME_STANDARD_INFORMATION
    {
        uint32_t NextEntryOffset;
        uint32_t Flags;
        uint32_t FrameID;
        Windows::Win32::InstallableFileSystems::FLT_FILESYSTEM_TYPE FileSystemType;
        uint16_t FilterVolumeNameLength;
        uint16_t FilterVolumeName[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::InstallableFileSystems
{
    struct INSTANCE_BASIC_INFORMATION
    {
        uint32_t NextEntryOffset;
        uint16_t InstanceNameLength;
        uint16_t InstanceNameBufferOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::InstallableFileSystems
{
    struct INSTANCE_PARTIAL_INFORMATION
    {
        uint32_t NextEntryOffset;
        uint16_t InstanceNameLength;
        uint16_t InstanceNameBufferOffset;
        uint16_t AltitudeLength;
        uint16_t AltitudeBufferOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::InstallableFileSystems
{
    struct INSTANCE_FULL_INFORMATION
    {
        uint32_t NextEntryOffset;
        uint16_t InstanceNameLength;
        uint16_t InstanceNameBufferOffset;
        uint16_t AltitudeLength;
        uint16_t AltitudeBufferOffset;
        uint16_t VolumeNameLength;
        uint16_t VolumeNameBufferOffset;
        uint16_t FilterNameLength;
        uint16_t FilterNameBufferOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::InstallableFileSystems
{
    struct INSTANCE_AGGREGATE_STANDARD_INFORMATION
    {
        union _Type_e__Union
        {
            struct _MiniFilter_e__Struct
            {
                uint32_t Flags;
                uint32_t FrameID;
                Windows::Win32::InstallableFileSystems::FLT_FILESYSTEM_TYPE VolumeFileSystemType;
                uint16_t InstanceNameLength;
                uint16_t InstanceNameBufferOffset;
                uint16_t AltitudeLength;
                uint16_t AltitudeBufferOffset;
                uint16_t VolumeNameLength;
                uint16_t VolumeNameBufferOffset;
                uint16_t FilterNameLength;
                uint16_t FilterNameBufferOffset;
                uint32_t SupportedFeatures;
            };
            struct _LegacyFilter_e__Struct
            {
                uint32_t Flags;
                uint16_t AltitudeLength;
                uint16_t AltitudeBufferOffset;
                uint16_t VolumeNameLength;
                uint16_t VolumeNameBufferOffset;
                uint16_t FilterNameLength;
                uint16_t FilterNameBufferOffset;
                uint32_t SupportedFeatures;
            };
            _MiniFilter_e__Struct MiniFilter;
            _LegacyFilter_e__Struct LegacyFilter;
        };
        uint32_t NextEntryOffset;
        uint32_t Flags;
        _Type_e__Union Type;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::InstallableFileSystems
{
    struct FILTER_MESSAGE_HEADER
    {
        uint32_t ReplyLength;
        uint64_t MessageId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct NTSTATUS
    {
        int32_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::InstallableFileSystems
{
    struct FILTER_REPLY_HEADER
    {
        Windows::Win32::SystemServices::NTSTATUS Status;
        uint64_t MessageId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::PasswordManagement
{
    struct CYPHER_BLOCK
    {
        int8_t data[8];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::PasswordManagement
{
    struct LM_OWF_PASSWORD
    {
        Windows::Win32::PasswordManagement::CYPHER_BLOCK data[2];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::PasswordManagement
{
    struct SAMPR_ENCRYPTED_USER_PASSWORD
    {
        uint8_t Buffer[516];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::PasswordManagement
{
    struct ENCRYPTED_LM_OWF_PASSWORD
    {
        Windows::Win32::PasswordManagement::CYPHER_BLOCK data[2];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::AppxPackaging
{
    struct APPX_PACKAGE_SETTINGS
    {
        Windows::Win32::SystemServices::BOOL forceZip32;
        Windows::Win32::Com::IUri* hashMethod;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::AppxPackaging
{
    struct APPX_PACKAGE_WRITER_PAYLOAD_STREAM
    {
        Windows::Win32::StructuredStorage::IStream* inputStream;
        uint16_t* fileName;
        uint16_t* contentType;
        Windows::Win32::AppxPackaging::APPX_COMPRESSION_OPTION compressionOption;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::AppxPackaging
{
    struct APPX_ENCRYPTED_PACKAGE_SETTINGS
    {
        uint32_t keyLength;
        uint16_t* encryptionAlgorithm;
        Windows::Win32::SystemServices::BOOL useDiffusion;
        Windows::Win32::Com::IUri* blockMapHashAlgorithm;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::AppxPackaging
{
    struct APPX_ENCRYPTED_PACKAGE_SETTINGS2
    {
        uint32_t keyLength;
        uint16_t* encryptionAlgorithm;
        Windows::Win32::Com::IUri* blockMapHashAlgorithm;
        uint32_t options;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::AppxPackaging
{
    struct APPX_KEY_INFO
    {
        uint32_t keyLength;
        uint32_t keyIdLength;
        uint8_t* key;
        uint8_t* keyId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::AppxPackaging
{
    struct APPX_ENCRYPTED_EXEMPTIONS
    {
        uint32_t count;
        uint16_t** plainTextFiles;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::AppxPackaging
{
    struct PACKAGE_VERSION
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint16_t Revision;
                uint16_t Build;
                uint16_t Minor;
                uint16_t Major;
            };
            uint64_t Version;
            _Anonymous_e__Struct Anonymous;
        };
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::AppxPackaging
{
    struct PACKAGE_ID
    {
        uint32_t reserved;
        uint32_t processorArchitecture;
        Windows::Win32::AppxPackaging::PACKAGE_VERSION version;
        uint16_t* name;
        uint16_t* publisher;
        uint16_t* resourceId;
        uint16_t* publisherId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::AppxPackaging
{
    struct _PACKAGE_INFO_REFERENCE
    {
        void* reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::AppxPackaging
{
    struct PACKAGE_INFO
    {
        uint32_t reserved;
        uint32_t flags;
        uint16_t* path;
        uint16_t* packageFullName;
        uint16_t* packageFamilyName;
        Windows::Win32::AppxPackaging::PACKAGE_ID packageId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct UNCOMPRESSEDAUDIOFORMAT
    {
        ::win32::guid guidFormatType;
        uint32_t dwSamplesPerFrame;
        uint32_t dwBytesPerSampleContainer;
        uint32_t dwValidBitsPerSample;
        float fFramesPerSecond;
        uint32_t dwChannelMask;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct APO_CONNECTION_DESCRIPTOR
    {
        Windows::Win32::Audio::APO_CONNECTION_BUFFER_TYPE Type;
        size_t pBuffer;
        uint32_t u32MaxFrameCount;
        Windows::Win32::Audio::IAudioMediaType* pFormat;
        uint32_t u32Signature;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct APO_REG_PROPERTIES
    {
        ::win32::guid clsid;
        Windows::Win32::Audio::APO_FLAG Flags;
        uint16_t szFriendlyName[256];
        uint16_t szCopyrightInfo[256];
        uint32_t u32MajorVersion;
        uint32_t u32MinorVersion;
        uint32_t u32MinInputConnections;
        uint32_t u32MaxInputConnections;
        uint32_t u32MinOutputConnections;
        uint32_t u32MaxOutputConnections;
        uint32_t u32MaxInstances;
        uint32_t u32NumAPOInterfaces;
        ::win32::guid iidAPOInterfaceList[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct APOInitBaseStruct
    {
        uint32_t cbSize;
        ::win32::guid clsid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct APOInitSystemEffects
    {
        Windows::Win32::Audio::APOInitBaseStruct APOInit;
        Windows::Win32::Audio::IPropertyStore* pAPOEndpointProperties;
        Windows::Win32::Audio::IPropertyStore* pAPOSystemEffectsProperties;
        void* pReserved;
        Windows::Win32::CoreAudio::IMMDeviceCollection* pDeviceCollection;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct APOInitSystemEffects2
    {
        Windows::Win32::Audio::APOInitBaseStruct APOInit;
        Windows::Win32::Audio::IPropertyStore* pAPOEndpointProperties;
        Windows::Win32::Audio::IPropertyStore* pAPOSystemEffectsProperties;
        void* pReserved;
        Windows::Win32::CoreAudio::IMMDeviceCollection* pDeviceCollection;
        uint32_t nSoftwareIoDeviceInCollection;
        uint32_t nSoftwareIoConnectorIndex;
        ::win32::guid AudioProcessingMode;
        Windows::Win32::SystemServices::BOOL InitializeForDiscoveryOnly;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct AudioFXExtensionParams
    {
        Windows::Win32::WindowsAndMessaging::LPARAM AddPageParam;
        uint16_t* pwstrEndpointID;
        Windows::Win32::Audio::IPropertyStore* pFxProperties;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct DLSID
    {
        uint32_t ulData1;
        uint16_t usData2;
        uint16_t usData3;
        uint8_t abData4[8];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct DLSVERSION
    {
        uint32_t dwVersionMS;
        uint32_t dwVersionLS;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct CONNECTION
    {
        uint16_t usSource;
        uint16_t usControl;
        uint16_t usDestination;
        uint16_t usTransform;
        int32_t lScale;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct CONNECTIONLIST
    {
        uint32_t cbSize;
        uint32_t cConnections;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct RGNRANGE
    {
        uint16_t usLow;
        uint16_t usHigh;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct MIDILOCALE
    {
        uint32_t ulBank;
        uint32_t ulInstrument;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct RGNHEADER
    {
        Windows::Win32::Audio::RGNRANGE RangeKey;
        Windows::Win32::Audio::RGNRANGE RangeVelocity;
        uint16_t fusOptions;
        uint16_t usKeyGroup;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct INSTHEADER
    {
        uint32_t cRegions;
        Windows::Win32::Audio::MIDILOCALE Locale;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct DLSHEADER
    {
        uint32_t cInstruments;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct WAVELINK
    {
        uint16_t fusOptions;
        uint16_t usPhaseGroup;
        uint32_t ulChannel;
        uint32_t ulTableIndex;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct POOLCUE
    {
        uint32_t ulOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct POOLTABLE
    {
        uint32_t cbSize;
        uint32_t cCues;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct _rwsmp
    {
        uint32_t cbSize;
        uint16_t usUnityNote;
        int16_t sFineTune;
        int32_t lAttenuation;
        uint32_t fulOptions;
        uint32_t cSampleLoops;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct _rloop
    {
        uint32_t cbSize;
        uint32_t ulType;
        uint32_t ulStart;
        uint32_t ulLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct DMUS_DOWNLOADINFO
    {
        uint32_t dwDLType;
        uint32_t dwDLId;
        uint32_t dwNumOffsetTableEntries;
        uint32_t cbSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct DMUS_OFFSETTABLE
    {
        uint32_t ulOffsetTable[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct DMUS_INSTRUMENT
    {
        uint32_t ulPatch;
        uint32_t ulFirstRegionIdx;
        uint32_t ulGlobalArtIdx;
        uint32_t ulFirstExtCkIdx;
        uint32_t ulCopyrightIdx;
        uint32_t ulFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct DMUS_REGION
    {
        Windows::Win32::Audio::RGNRANGE RangeKey;
        Windows::Win32::Audio::RGNRANGE RangeVelocity;
        uint16_t fusOptions;
        uint16_t usKeyGroup;
        uint32_t ulRegionArtIdx;
        uint32_t ulNextRegionIdx;
        uint32_t ulFirstExtCkIdx;
        Windows::Win32::Audio::WAVELINK WaveLink;
        Windows::Win32::Audio::_rwsmp WSMP;
        Windows::Win32::Audio::_rloop WLOOP[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct DMUS_LFOPARAMS
    {
        int32_t pcFrequency;
        int32_t tcDelay;
        int32_t gcVolumeScale;
        int32_t pcPitchScale;
        int32_t gcMWToVolume;
        int32_t pcMWToPitch;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct DMUS_VEGPARAMS
    {
        int32_t tcAttack;
        int32_t tcDecay;
        int32_t ptSustain;
        int32_t tcRelease;
        int32_t tcVel2Attack;
        int32_t tcKey2Decay;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct DMUS_PEGPARAMS
    {
        int32_t tcAttack;
        int32_t tcDecay;
        int32_t ptSustain;
        int32_t tcRelease;
        int32_t tcVel2Attack;
        int32_t tcKey2Decay;
        int32_t pcRange;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct DMUS_MSCPARAMS
    {
        int32_t ptDefaultPan;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct DMUS_ARTICPARAMS
    {
        Windows::Win32::Audio::DMUS_LFOPARAMS LFO;
        Windows::Win32::Audio::DMUS_VEGPARAMS VolEG;
        Windows::Win32::Audio::DMUS_PEGPARAMS PitchEG;
        Windows::Win32::Audio::DMUS_MSCPARAMS Misc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct DMUS_ARTICULATION
    {
        uint32_t ulArt1Idx;
        uint32_t ulFirstExtCkIdx;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct DMUS_ARTICULATION2
    {
        uint32_t ulArtIdx;
        uint32_t ulFirstExtCkIdx;
        uint32_t ulNextArtIdx;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct DMUS_EXTENSIONCHUNK
    {
        uint32_t cbSize;
        uint32_t ulNextExtCkIdx;
        uint32_t ExtCkID;
        uint8_t byExtCk[4];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct DMUS_COPYRIGHT
    {
        uint32_t cbSize;
        uint8_t byCopyright[4];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct DMUS_WAVEDATA
    {
        uint32_t cbSize;
        uint8_t byData[4];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct WAVEFORMATEX
    {
        uint16_t wFormatTag;
        uint16_t nChannels;
        uint32_t nSamplesPerSec;
        uint32_t nAvgBytesPerSec;
        uint16_t nBlockAlign;
        uint16_t wBitsPerSample;
        uint16_t cbSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct DMUS_WAVE
    {
        uint32_t ulFirstExtCkIdx;
        uint32_t ulCopyrightIdx;
        uint32_t ulWaveDataIdx;
        Windows::Win32::Multimedia::WAVEFORMATEX WaveformatEx;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct DMUS_NOTERANGE
    {
        uint32_t dwLowNote;
        uint32_t dwHighNote;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct DMUS_WAVEARTDL
    {
        uint32_t ulDownloadIdIdx;
        uint32_t ulBus;
        uint32_t ulBuffers;
        uint32_t ulMasterDLId;
        uint16_t usOptions;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct DMUS_WAVEDL
    {
        uint32_t cbWaveData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct DSCAPS
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        uint32_t dwMinSecondarySampleRate;
        uint32_t dwMaxSecondarySampleRate;
        uint32_t dwPrimaryBuffers;
        uint32_t dwMaxHwMixingAllBuffers;
        uint32_t dwMaxHwMixingStaticBuffers;
        uint32_t dwMaxHwMixingStreamingBuffers;
        uint32_t dwFreeHwMixingAllBuffers;
        uint32_t dwFreeHwMixingStaticBuffers;
        uint32_t dwFreeHwMixingStreamingBuffers;
        uint32_t dwMaxHw3DAllBuffers;
        uint32_t dwMaxHw3DStaticBuffers;
        uint32_t dwMaxHw3DStreamingBuffers;
        uint32_t dwFreeHw3DAllBuffers;
        uint32_t dwFreeHw3DStaticBuffers;
        uint32_t dwFreeHw3DStreamingBuffers;
        uint32_t dwTotalHwMemBytes;
        uint32_t dwFreeHwMemBytes;
        uint32_t dwMaxContigFreeHwMemBytes;
        uint32_t dwUnlockTransferRateHwBuffers;
        uint32_t dwPlayCpuOverheadSwBuffers;
        uint32_t dwReserved1;
        uint32_t dwReserved2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct DSBCAPS
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        uint32_t dwBufferBytes;
        uint32_t dwUnlockTransferRate;
        uint32_t dwPlayCpuOverhead;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct DSEFFECTDESC
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        ::win32::guid guidDSFXClass;
        size_t dwReserved1;
        size_t dwReserved2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct DSCEFFECTDESC
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        ::win32::guid guidDSCFXClass;
        ::win32::guid guidDSCFXInstance;
        uint32_t dwReserved1;
        uint32_t dwReserved2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct DSBUFFERDESC
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        uint32_t dwBufferBytes;
        uint32_t dwReserved;
        Windows::Win32::Multimedia::WAVEFORMATEX* lpwfxFormat;
        ::win32::guid guid3DAlgorithm;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct DSBUFFERDESC1
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        uint32_t dwBufferBytes;
        uint32_t dwReserved;
        Windows::Win32::Multimedia::WAVEFORMATEX* lpwfxFormat;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DVECTOR
    {
        union _Anonymous1_e__Union
        {
            float x;
            float dvX;
        };
        union _Anonymous2_e__Union
        {
            float y;
            float dvY;
        };
        union _Anonymous3_e__Union
        {
            float z;
            float dvZ;
        };
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
        _Anonymous3_e__Union Anonymous3;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct DS3DBUFFER
    {
        uint32_t dwSize;
        Windows::Win32::SystemServices::D3DVECTOR vPosition;
        Windows::Win32::SystemServices::D3DVECTOR vVelocity;
        uint32_t dwInsideConeAngle;
        uint32_t dwOutsideConeAngle;
        Windows::Win32::SystemServices::D3DVECTOR vConeOrientation;
        int32_t lConeOutsideVolume;
        float flMinDistance;
        float flMaxDistance;
        uint32_t dwMode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct DS3DLISTENER
    {
        uint32_t dwSize;
        Windows::Win32::SystemServices::D3DVECTOR vPosition;
        Windows::Win32::SystemServices::D3DVECTOR vVelocity;
        Windows::Win32::SystemServices::D3DVECTOR vOrientFront;
        Windows::Win32::SystemServices::D3DVECTOR vOrientTop;
        float flDistanceFactor;
        float flRolloffFactor;
        float flDopplerFactor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct DSCCAPS
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        uint32_t dwFormats;
        uint32_t dwChannels;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct DSCBUFFERDESC1
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        uint32_t dwBufferBytes;
        uint32_t dwReserved;
        Windows::Win32::Multimedia::WAVEFORMATEX* lpwfxFormat;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct DSCBUFFERDESC
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        uint32_t dwBufferBytes;
        uint32_t dwReserved;
        Windows::Win32::Multimedia::WAVEFORMATEX* lpwfxFormat;
        uint32_t dwFXCount;
        Windows::Win32::Audio::DSCEFFECTDESC* lpDSCFXDesc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct DSCBCAPS
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        uint32_t dwBufferBytes;
        uint32_t dwReserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct DSBPOSITIONNOTIFY
    {
        uint32_t dwOffset;
        Windows::Win32::SystemServices::HANDLE hEventNotify;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct DSFXGargle
    {
        uint32_t dwRateHz;
        uint32_t dwWaveShape;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct DSFXChorus
    {
        float fWetDryMix;
        float fDepth;
        float fFeedback;
        float fFrequency;
        int32_t lWaveform;
        float fDelay;
        int32_t lPhase;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct DSFXFlanger
    {
        float fWetDryMix;
        float fDepth;
        float fFeedback;
        float fFrequency;
        int32_t lWaveform;
        float fDelay;
        int32_t lPhase;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct DSFXEcho
    {
        float fWetDryMix;
        float fFeedback;
        float fLeftDelay;
        float fRightDelay;
        int32_t lPanDelay;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct DSFXDistortion
    {
        float fGain;
        float fEdge;
        float fPostEQCenterFrequency;
        float fPostEQBandwidth;
        float fPreLowpassCutoff;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct DSFXCompressor
    {
        float fGain;
        float fAttack;
        float fRelease;
        float fThreshold;
        float fRatio;
        float fPredelay;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct DSFXParamEq
    {
        float fCenter;
        float fBandwidth;
        float fGain;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct DSFXI3DL2Reverb
    {
        int32_t lRoom;
        int32_t lRoomHF;
        float flRoomRolloffFactor;
        float flDecayTime;
        float flDecayHFRatio;
        int32_t lReflections;
        float flReflectionsDelay;
        int32_t lReverb;
        float flReverbDelay;
        float flDiffusion;
        float flDensity;
        float flHFReference;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct DSFXWavesReverb
    {
        float fInGain;
        float fReverbMix;
        float fReverbTime;
        float fHighFreqRTRatio;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct DSCFXAec
    {
        Windows::Win32::SystemServices::BOOL fEnable;
        Windows::Win32::SystemServices::BOOL fNoiseFill;
        uint32_t dwMode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct DSCFXNoiseSuppress
    {
        Windows::Win32::SystemServices::BOOL fEnable;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct DMUS_EVENTHEADER
    {
        uint32_t cbEvent;
        uint32_t dwChannelGroup;
        int64_t rtDelta;
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct DMUS_BUFFERDESC
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        ::win32::guid guidBufferFormat;
        uint32_t cbBuffer;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct DMUS_PORTCAPS
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        ::win32::guid guidPort;
        uint32_t dwClass;
        uint32_t dwType;
        uint32_t dwMemorySize;
        uint32_t dwMaxChannelGroups;
        uint32_t dwMaxVoices;
        uint32_t dwMaxAudioChannels;
        uint32_t dwEffectFlags;
        uint16_t wszDescription[128];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct _DMUS_PORTPARAMS
    {
        uint32_t dwSize;
        uint32_t dwValidParams;
        uint32_t dwVoices;
        uint32_t dwChannelGroups;
        uint32_t dwAudioChannels;
        uint32_t dwSampleRate;
        uint32_t dwEffectFlags;
        Windows::Win32::SystemServices::BOOL fShare;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct DMUS_PORTPARAMS8
    {
        uint32_t dwSize;
        uint32_t dwValidParams;
        uint32_t dwVoices;
        uint32_t dwChannelGroups;
        uint32_t dwAudioChannels;
        uint32_t dwSampleRate;
        uint32_t dwEffectFlags;
        Windows::Win32::SystemServices::BOOL fShare;
        uint32_t dwFeatures;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct DMUS_SYNTHSTATS
    {
        uint32_t dwSize;
        uint32_t dwValidStats;
        uint32_t dwVoices;
        uint32_t dwTotalCPU;
        uint32_t dwCPUPerVoice;
        uint32_t dwLostNotes;
        uint32_t dwFreeMemory;
        int32_t lPeakVolume;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct DMUS_SYNTHSTATS8
    {
        uint32_t dwSize;
        uint32_t dwValidStats;
        uint32_t dwVoices;
        uint32_t dwTotalCPU;
        uint32_t dwCPUPerVoice;
        uint32_t dwLostNotes;
        uint32_t dwFreeMemory;
        int32_t lPeakVolume;
        uint32_t dwSynthMemUse;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct DMUS_WAVES_REVERB_PARAMS
    {
        float fInGain;
        float fReverbMix;
        float fReverbTime;
        float fHighFreqRTRatio;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct DMUS_CLOCKINFO7
    {
        uint32_t dwSize;
        Windows::Win32::Audio::DMUS_CLOCKTYPE ctType;
        ::win32::guid guidClock;
        uint16_t wszDescription[128];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct DMUS_CLOCKINFO8
    {
        uint32_t dwSize;
        Windows::Win32::Audio::DMUS_CLOCKTYPE ctType;
        ::win32::guid guidClock;
        uint16_t wszDescription[128];
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct DMUS_VOICE_STATE
    {
        Windows::Win32::SystemServices::BOOL bExists;
        uint64_t spPosition;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSIDENTIFIER
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                ::win32::guid Set;
                uint32_t Id;
                uint32_t Flags;
            };
            _Anonymous_e__Struct Anonymous;
            int64_t Alignment;
        };
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSP_PIN
    {
        union _Anonymous_e__Union
        {
            uint32_t Reserved;
            uint32_t Flags;
        };
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        uint32_t PinId;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct KSP_PINMODE
    {
        Windows::Win32::CoreAudio::KSP_PIN PinProperty;
        ::win32::guid AudioProcessingMode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct COAUTHIDENTITY
    {
        uint16_t* User;
        uint32_t UserLength;
        uint16_t* Domain;
        uint32_t DomainLength;
        uint16_t* Password;
        uint32_t PasswordLength;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct COAUTHINFO
    {
        uint32_t dwAuthnSvc;
        uint32_t dwAuthzSvc;
        uint16_t* pwszServerPrincName;
        uint32_t dwAuthnLevel;
        uint32_t dwImpersonationLevel;
        Windows::Win32::Com::COAUTHIDENTITY* pAuthIdentityData;
        uint32_t dwCapabilities;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct BYTE_BLOB
    {
        uint32_t clSize;
        uint8_t abData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct WORD_BLOB
    {
        uint32_t clSize;
        uint16_t asData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct DWORD_BLOB
    {
        uint32_t clSize;
        uint32_t alData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct FLAGGED_BYTE_BLOB
    {
        uint32_t fFlags;
        uint32_t clSize;
        uint8_t abData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct FLAGGED_WORD_BLOB
    {
        uint32_t fFlags;
        uint32_t clSize;
        uint16_t asData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct BYTE_SIZEDARR
    {
        uint32_t clSize;
        uint8_t* pData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct SHORT_SIZEDARR
    {
        uint32_t clSize;
        uint16_t* pData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct LONG_SIZEDARR
    {
        uint32_t clSize;
        uint32_t* pData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct HYPER_SIZEDARR
    {
        uint32_t clSize;
        int64_t* pData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct IEnumContextProps
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct IContext
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct IObjContext
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct COSERVERINFO
    {
        uint32_t dwReserved1;
        uint16_t* pwszName;
        Windows::Win32::Com::COAUTHINFO* pAuthInfo;
        uint32_t dwReserved2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct MULTI_QI
    {
        ::win32::guid* pIID;
        Windows::Win32::Com::IUnknown* pItf;
        int32_t hr;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct RPCOLEMESSAGE
    {
        void* reserved1;
        uint32_t dataRepresentation;
        void* Buffer;
        uint32_t cbBuffer;
        uint32_t iMethod;
        void* reserved2[5];
        uint32_t rpcFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct SChannelHookCallInfo
    {
        ::win32::guid iid;
        uint32_t cbSize;
        ::win32::guid uCausality;
        uint32_t dwServerPid;
        uint32_t iMethod;
        void* pObject;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct SOLE_AUTHENTICATION_SERVICE
    {
        uint32_t dwAuthnSvc;
        uint32_t dwAuthzSvc;
        uint16_t* pPrincipalName;
        int32_t hr;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct SOLE_AUTHENTICATION_INFO
    {
        uint32_t dwAuthnSvc;
        uint32_t dwAuthzSvc;
        void* pAuthInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct SOLE_AUTHENTICATION_LIST
    {
        uint32_t cAuthInfo;
        Windows::Win32::Com::SOLE_AUTHENTICATION_INFO* aAuthInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct CO_MTA_USAGE_COOKIE__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct CO_DEVICE_CATALOG_COOKIE__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct BIND_OPTS
    {
        uint32_t cbStruct;
        uint32_t grfFlags;
        uint32_t grfMode;
        uint32_t dwTickCountDeadline;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct BIND_OPTS2
    {
        Windows::Win32::Com::BIND_OPTS __AnonymousBase_objidl_L8451_C36;
        uint32_t dwTrackFlags;
        uint32_t dwClassContext;
        uint32_t locale;
        Windows::Win32::Com::COSERVERINFO* pServerInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct BIND_OPTS3
    {
        Windows::Win32::Com::BIND_OPTS2 __AnonymousBase_objidl_L8475_C36;
        Windows::Win32::WindowsAndMessaging::HWND hwnd;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct DVTARGETDEVICE
    {
        uint32_t tdSize;
        uint16_t tdDriverNameOffset;
        uint16_t tdDeviceNameOffset;
        uint16_t tdPortNameOffset;
        uint16_t tdExtDevmodeOffset;
        uint8_t tdData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct FORMATETC
    {
        uint16_t cfFormat;
        Windows::Win32::Com::DVTARGETDEVICE* ptd;
        uint32_t dwAspect;
        int32_t lindex;
        uint32_t tymed;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct STATDATA
    {
        Windows::Win32::Com::FORMATETC formatetc;
        uint32_t advf;
        Windows::Win32::Com::IAdviseSink* pAdvSink;
        uint32_t dwConnection;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct RemSTGMEDIUM
    {
        uint32_t tymed;
        uint32_t dwHandleType;
        uint32_t pData;
        uint32_t pUnkForRelease;
        uint32_t cbData;
        uint8_t data[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct HBITMAP
    {
        intptr_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct STGMEDIUM
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::Gdi::HBITMAP hBitmap;
            void* hMetaFilePict;
            intptr_t hEnhMetaFile;
            intptr_t hGlobal;
            uint16_t* lpszFileName;
            Windows::Win32::StructuredStorage::IStream* pstm;
            Windows::Win32::StructuredStorage::IStorage* pstg;
        };
        uint32_t tymed;
        _Anonymous_e__Union Anonymous;
        Windows::Win32::Com::IUnknown* pUnkForRelease;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct GDI_OBJECT
    {
        union _u_e__Struct
        {
            Windows::Win32::SystemServices::userHBITMAP* hBitmap;
            Windows::Win32::SystemServices::userHPALETTE* hPalette;
            Windows::Win32::SystemServices::userHGLOBAL* hGeneric;
        };
        uint32_t ObjectType;
        _u_e__Struct u;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct userSTGMEDIUM
    {
        struct _STGMEDIUM_UNION
        {
            union _u_e__Struct
            {
                Windows::Win32::SystemServices::userHMETAFILEPICT* hMetaFilePict;
                Windows::Win32::SystemServices::userHENHMETAFILE* hHEnhMetaFile;
                Windows::Win32::Com::GDI_OBJECT* hGdiHandle;
                Windows::Win32::SystemServices::userHGLOBAL* hGlobal;
                uint16_t* lpszFileName;
                Windows::Win32::Com::BYTE_BLOB* pstm;
                Windows::Win32::Com::BYTE_BLOB* pstg;
            };
            uint32_t tymed;
            _u_e__Struct u;
        };
        Windows::Win32::Com::IUnknown* pUnkForRelease;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct userFLAG_STGMEDIUM
    {
        int32_t ContextFlags;
        int32_t fPassOwnership;
        Windows::Win32::Com::userSTGMEDIUM Stgmed;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct FLAG_STGMEDIUM
    {
        int32_t ContextFlags;
        int32_t fPassOwnership;
        Windows::Win32::Com::STGMEDIUM Stgmed;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct INTERFACEINFO
    {
        Windows::Win32::Com::IUnknown* pUnk;
        ::win32::guid iid;
        uint16_t wMethod;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct OBJECTDESCRIPTOR
    {
        uint32_t cbSize;
        ::win32::guid clsid;
        uint32_t dwDrawAspect;
        Windows::Win32::DisplayDevices::SIZE sizel;
        Windows::Win32::DisplayDevices::POINTL pointl;
        uint32_t dwStatus;
        uint32_t dwFullUserTypeName;
        uint32_t dwSrcOfCopy;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MenusAndResources
{
    struct HACCEL
    {
        intptr_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct OIFI
    {
        uint32_t cb;
        Windows::Win32::SystemServices::BOOL fMDIApp;
        Windows::Win32::WindowsAndMessaging::HWND hwndFrame;
        Windows::Win32::MenusAndResources::HACCEL haccel;
        uint32_t cAccelEntries;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct OleMenuGroupWidths
    {
        int32_t width[6];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct OLEVERB
    {
        int32_t lVerb;
        uint16_t* lpszVerbName;
        uint32_t fuFlags;
        uint32_t grfAttribs;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SECURITY_ATTRIBUTES
    {
        uint32_t nLength;
        void* lpSecurityDescriptor;
        Windows::Win32::SystemServices::BOOL bInheritHandle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct BINDINFO
    {
        uint32_t cbSize;
        uint16_t* szExtraInfo;
        Windows::Win32::Com::STGMEDIUM stgmedData;
        uint32_t grfBindInfoF;
        uint32_t dwBindVerb;
        uint16_t* szCustomVerb;
        uint32_t cbstgmedData;
        uint32_t dwOptions;
        uint32_t dwOptionsFlags;
        uint32_t dwCodePage;
        Windows::Win32::SystemServices::SECURITY_ATTRIBUTES securityAttributes;
        ::win32::guid iid;
        Windows::Win32::Com::IUnknown* pUnk;
        uint32_t dwReserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct REMSECURITY_ATTRIBUTES
    {
        uint32_t nLength;
        uint32_t lpSecurityDescriptor;
        Windows::Win32::SystemServices::BOOL bInheritHandle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct RemBINDINFO
    {
        uint32_t cbSize;
        uint16_t* szExtraInfo;
        uint32_t grfBindInfoF;
        uint32_t dwBindVerb;
        uint16_t* szCustomVerb;
        uint32_t cbstgmedData;
        uint32_t dwOptions;
        uint32_t dwOptionsFlags;
        uint32_t dwCodePage;
        Windows::Win32::Com::REMSECURITY_ATTRIBUTES securityAttributes;
        ::win32::guid iid;
        Windows::Win32::Com::IUnknown* pUnk;
        uint32_t dwReserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct RemFORMATETC
    {
        uint32_t cfFormat;
        uint32_t ptd;
        uint32_t dwAspect;
        int32_t lindex;
        uint32_t tymed;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct AUTHENTICATEINFO
    {
        uint32_t dwFlags;
        uint32_t dwReserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct PROTOCOLDATA
    {
        uint32_t grfFlags;
        uint32_t dwState;
        void* pData;
        uint32_t cbData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct StartParam
    {
        ::win32::guid iid;
        Windows::Win32::Com::IBindCtx* pIBindCtx;
        Windows::Win32::Com::IUnknown* pItf;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct ZONEATTRIBUTES
    {
        uint32_t cbSize;
        uint16_t szDisplayName[260];
        uint16_t szDescription[200];
        uint16_t szIconPath[260];
        uint32_t dwTemplateMinLevel;
        uint32_t dwTemplateRecommended;
        uint32_t dwTemplateCurrentLevel;
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct CODEBASEHOLD
    {
        uint32_t cbSize;
        uint16_t* szDistUnit;
        uint16_t* szCodeBase;
        uint32_t dwVersionMS;
        uint32_t dwVersionLS;
        uint32_t dwStyle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct PROTOCOLFILTERDATA
    {
        uint32_t cbSize;
        Windows::Win32::Com::IInternetProtocolSink* pProtocolSink;
        Windows::Win32::Com::IInternetProtocol* pProtocol;
        Windows::Win32::Com::IUnknown* pUnk;
        uint32_t dwFilterFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct DATAINFO
    {
        uint32_t ulTotalSize;
        uint32_t ulavrPacketSize;
        uint32_t ulConnectSpeed;
        uint32_t ulProcessorSpeed;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct HIT_LOGGING_INFO
    {
        uint32_t dwStructSize;
        int8_t* lpszLoggedUrlName;
        Windows::Win32::WindowsProgramming::SYSTEMTIME StartTime;
        Windows::Win32::WindowsProgramming::SYSTEMTIME EndTime;
        int8_t* lpszExtendedInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct CONFIRMSAFETY
    {
        ::win32::guid clsid;
        Windows::Win32::Com::IUnknown* pUnk;
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct PROTOCOL_ARGUMENT
    {
        uint16_t* szMethod;
        uint16_t* szTargetUrl;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct OLESTREAMVTBL
    {
        intptr_t Get;
        intptr_t Put;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct OLESTREAM
    {
        Windows::Win32::Com::OLESTREAMVTBL* lpstbl;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct CONNECTDATA
    {
        Windows::Win32::Com::IUnknown* pUnk;
        uint32_t dwCookie;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct LICINFO
    {
        int32_t cbLicInfo;
        Windows::Win32::SystemServices::BOOL fRuntimeKeyAvail;
        Windows::Win32::SystemServices::BOOL fLicVerified;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct CONTROLINFO
    {
        uint32_t cb;
        Windows::Win32::MenusAndResources::HACCEL hAccel;
        uint16_t cAccel;
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct POINTF
    {
        float x;
        float y;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct PROPPAGEINFO
    {
        uint32_t cb;
        uint16_t* pszTitle;
        Windows::Win32::DisplayDevices::SIZE size;
        uint16_t* pszDocString;
        uint16_t* pszHelpFile;
        uint32_t dwHelpContext;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct CAUUID
    {
        uint32_t cElems;
        ::win32::guid* pElems;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct ExtentInfo
    {
        uint32_t cb;
        uint32_t dwExtentMode;
        Windows::Win32::DisplayDevices::SIZE sizelProposed;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct AspectInfo
    {
        uint32_t cb;
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct CALPOLESTR
    {
        uint32_t cElems;
        uint16_t** pElems;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct CADWORD
    {
        uint32_t cElems;
        uint32_t* pElems;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct PROPBAG2
    {
        uint32_t dwType;
        uint16_t vt;
        uint16_t cfType;
        uint32_t dwHint;
        uint16_t* pstrName;
        ::win32::guid clsid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct HPALETTE
    {
        intptr_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct QACONTAINER
    {
        uint32_t cbSize;
        Windows::Win32::Com::IOleClientSite* pClientSite;
        Windows::Win32::Com::IAdviseSinkEx* pAdviseSink;
        Windows::Win32::Com::IPropertyNotifySink* pPropertyNotifySink;
        Windows::Win32::Com::IUnknown* pUnkEventSink;
        uint32_t dwAmbientFlags;
        uint32_t colorFore;
        uint32_t colorBack;
        Windows::Win32::Com::IFont* pFont;
        Windows::Win32::Com::IOleUndoManager* pUndoMgr;
        uint32_t dwAppearance;
        int32_t lcid;
        Windows::Win32::Gdi::HPALETTE hpal;
        Windows::Win32::Com::IBindHost* pBindHost;
        Windows::Win32::Com::IOleControlSite* pOleControlSite;
        Windows::Win32::SystemServices::IServiceProvider* pServiceProvider;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct QACONTROL
    {
        uint32_t cbSize;
        uint32_t dwMiscStatus;
        uint32_t dwViewStatus;
        uint32_t dwEventCookie;
        uint32_t dwPropNotifyCookie;
        uint32_t dwPointerActivationPolicy;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct OCPFIPARAMS
    {
        uint32_t cbStructSize;
        Windows::Win32::WindowsAndMessaging::HWND hWndOwner;
        int32_t x;
        int32_t y;
        uint16_t* lpszCaption;
        uint32_t cObjects;
        Windows::Win32::Com::IUnknown** lplpUnk;
        uint32_t cPages;
        ::win32::guid* lpPages;
        uint32_t lcid;
        int32_t dispidInitialProperty;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct FONTDESC
    {
        uint32_t cbSizeofstruct;
        uint16_t* lpstrName;
        Windows::Win32::SystemServices::CY cySize;
        int16_t sWeight;
        int16_t sCharset;
        Windows::Win32::SystemServices::BOOL fItalic;
        Windows::Win32::SystemServices::BOOL fUnderline;
        Windows::Win32::SystemServices::BOOL fStrikethrough;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct PICTDESC
    {
        union _Anonymous_e__Union
        {
            struct _bmp_e__Struct
            {
                Windows::Win32::Gdi::HBITMAP hbitmap;
                Windows::Win32::Gdi::HPALETTE hpal;
            };
            struct _wmf_e__Struct
            {
                intptr_t hmeta;
                int32_t xExt;
                int32_t yExt;
            };
            struct _icon_e__Struct
            {
                Windows::Win32::Gdi::HICON hicon;
            };
            struct _emf_e__Struct
            {
                intptr_t hemf;
            };
            _bmp_e__Struct bmp;
            _wmf_e__Struct wmf;
            _icon_e__Struct icon;
            _emf_e__Struct emf;
        };
        uint32_t cbSizeofstruct;
        uint32_t picType;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct PAGERANGE
    {
        int32_t nFromPage;
        int32_t nToPage;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct PAGESET
    {
        uint32_t cbStruct;
        Windows::Win32::SystemServices::BOOL fOddPages;
        Windows::Win32::SystemServices::BOOL fEvenPages;
        uint32_t cPageRange;
        Windows::Win32::Com::PAGERANGE rgPages[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct OLECMD
    {
        uint32_t cmdID;
        uint32_t cmdf;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct OLECMDTEXT
    {
        uint32_t cmdtextf;
        uint32_t cwActual;
        uint32_t cwBuf;
        uint16_t rgwz[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct OLEUIINSERTOBJECTW
    {
        uint32_t cbStruct;
        uint32_t dwFlags;
        Windows::Win32::WindowsAndMessaging::HWND hWndOwner;
        uint16_t* lpszCaption;
        Windows::Win32::Com::LPFNOLEUIHOOK* lpfnHook;
        Windows::Win32::WindowsAndMessaging::LPARAM lCustData;
        Windows::Win32::SystemServices::HINSTANCE hInstance;
        uint16_t* lpszTemplate;
        intptr_t hResource;
        ::win32::guid clsid;
        uint16_t* lpszFile;
        uint32_t cchFile;
        uint32_t cClsidExclude;
        ::win32::guid* lpClsidExclude;
        ::win32::guid iid;
        uint32_t oleRender;
        Windows::Win32::Com::FORMATETC* lpFormatEtc;
        Windows::Win32::Com::IOleClientSite* lpIOleClientSite;
        Windows::Win32::StructuredStorage::IStorage* lpIStorage;
        void** ppvObj;
        int32_t sc;
        intptr_t hMetaPict;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct OLEUIINSERTOBJECTA
    {
        uint32_t cbStruct;
        uint32_t dwFlags;
        Windows::Win32::WindowsAndMessaging::HWND hWndOwner;
        int8_t* lpszCaption;
        Windows::Win32::Com::LPFNOLEUIHOOK* lpfnHook;
        Windows::Win32::WindowsAndMessaging::LPARAM lCustData;
        Windows::Win32::SystemServices::HINSTANCE hInstance;
        int8_t* lpszTemplate;
        intptr_t hResource;
        ::win32::guid clsid;
        int8_t* lpszFile;
        uint32_t cchFile;
        uint32_t cClsidExclude;
        ::win32::guid* lpClsidExclude;
        ::win32::guid iid;
        uint32_t oleRender;
        Windows::Win32::Com::FORMATETC* lpFormatEtc;
        Windows::Win32::Com::IOleClientSite* lpIOleClientSite;
        Windows::Win32::StructuredStorage::IStorage* lpIStorage;
        void** ppvObj;
        int32_t sc;
        intptr_t hMetaPict;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct OLEUIPASTEENTRYW
    {
        Windows::Win32::Com::FORMATETC fmtetc;
        uint16_t* lpstrFormatName;
        uint16_t* lpstrResultText;
        uint32_t dwFlags;
        uint32_t dwScratchSpace;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct OLEUIPASTEENTRYA
    {
        Windows::Win32::Com::FORMATETC fmtetc;
        int8_t* lpstrFormatName;
        int8_t* lpstrResultText;
        uint32_t dwFlags;
        uint32_t dwScratchSpace;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct OLEUIPASTESPECIALW
    {
        uint32_t cbStruct;
        uint32_t dwFlags;
        Windows::Win32::WindowsAndMessaging::HWND hWndOwner;
        uint16_t* lpszCaption;
        Windows::Win32::Com::LPFNOLEUIHOOK* lpfnHook;
        Windows::Win32::WindowsAndMessaging::LPARAM lCustData;
        Windows::Win32::SystemServices::HINSTANCE hInstance;
        uint16_t* lpszTemplate;
        intptr_t hResource;
        Windows::Win32::Com::IDataObject* lpSrcDataObj;
        Windows::Win32::Com::OLEUIPASTEENTRYW* arrPasteEntries;
        int32_t cPasteEntries;
        uint32_t* arrLinkTypes;
        int32_t cLinkTypes;
        uint32_t cClsidExclude;
        ::win32::guid* lpClsidExclude;
        int32_t nSelectedIndex;
        Windows::Win32::SystemServices::BOOL fLink;
        intptr_t hMetaPict;
        Windows::Win32::DisplayDevices::SIZE sizel;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct OLEUIPASTESPECIALA
    {
        uint32_t cbStruct;
        uint32_t dwFlags;
        Windows::Win32::WindowsAndMessaging::HWND hWndOwner;
        int8_t* lpszCaption;
        Windows::Win32::Com::LPFNOLEUIHOOK* lpfnHook;
        Windows::Win32::WindowsAndMessaging::LPARAM lCustData;
        Windows::Win32::SystemServices::HINSTANCE hInstance;
        int8_t* lpszTemplate;
        intptr_t hResource;
        Windows::Win32::Com::IDataObject* lpSrcDataObj;
        Windows::Win32::Com::OLEUIPASTEENTRYA* arrPasteEntries;
        int32_t cPasteEntries;
        uint32_t* arrLinkTypes;
        int32_t cLinkTypes;
        uint32_t cClsidExclude;
        ::win32::guid* lpClsidExclude;
        int32_t nSelectedIndex;
        Windows::Win32::SystemServices::BOOL fLink;
        intptr_t hMetaPict;
        Windows::Win32::DisplayDevices::SIZE sizel;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct OLEUIEDITLINKSW
    {
        uint32_t cbStruct;
        uint32_t dwFlags;
        Windows::Win32::WindowsAndMessaging::HWND hWndOwner;
        uint16_t* lpszCaption;
        Windows::Win32::Com::LPFNOLEUIHOOK* lpfnHook;
        Windows::Win32::WindowsAndMessaging::LPARAM lCustData;
        Windows::Win32::SystemServices::HINSTANCE hInstance;
        uint16_t* lpszTemplate;
        intptr_t hResource;
        Windows::Win32::Com::IOleUILinkContainerW* lpOleUILinkContainer;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct OLEUIEDITLINKSA
    {
        uint32_t cbStruct;
        uint32_t dwFlags;
        Windows::Win32::WindowsAndMessaging::HWND hWndOwner;
        int8_t* lpszCaption;
        Windows::Win32::Com::LPFNOLEUIHOOK* lpfnHook;
        Windows::Win32::WindowsAndMessaging::LPARAM lCustData;
        Windows::Win32::SystemServices::HINSTANCE hInstance;
        int8_t* lpszTemplate;
        intptr_t hResource;
        Windows::Win32::Com::IOleUILinkContainerA* lpOleUILinkContainer;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct OLEUICHANGEICONW
    {
        uint32_t cbStruct;
        uint32_t dwFlags;
        Windows::Win32::WindowsAndMessaging::HWND hWndOwner;
        uint16_t* lpszCaption;
        Windows::Win32::Com::LPFNOLEUIHOOK* lpfnHook;
        Windows::Win32::WindowsAndMessaging::LPARAM lCustData;
        Windows::Win32::SystemServices::HINSTANCE hInstance;
        uint16_t* lpszTemplate;
        intptr_t hResource;
        intptr_t hMetaPict;
        ::win32::guid clsid;
        uint16_t szIconExe[260];
        int32_t cchIconExe;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct OLEUICHANGEICONA
    {
        uint32_t cbStruct;
        uint32_t dwFlags;
        Windows::Win32::WindowsAndMessaging::HWND hWndOwner;
        int8_t* lpszCaption;
        Windows::Win32::Com::LPFNOLEUIHOOK* lpfnHook;
        Windows::Win32::WindowsAndMessaging::LPARAM lCustData;
        Windows::Win32::SystemServices::HINSTANCE hInstance;
        int8_t* lpszTemplate;
        intptr_t hResource;
        intptr_t hMetaPict;
        ::win32::guid clsid;
        int8_t szIconExe[260];
        int32_t cchIconExe;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct OLEUICONVERTW
    {
        uint32_t cbStruct;
        uint32_t dwFlags;
        Windows::Win32::WindowsAndMessaging::HWND hWndOwner;
        uint16_t* lpszCaption;
        Windows::Win32::Com::LPFNOLEUIHOOK* lpfnHook;
        Windows::Win32::WindowsAndMessaging::LPARAM lCustData;
        Windows::Win32::SystemServices::HINSTANCE hInstance;
        uint16_t* lpszTemplate;
        intptr_t hResource;
        ::win32::guid clsid;
        ::win32::guid clsidConvertDefault;
        ::win32::guid clsidActivateDefault;
        ::win32::guid clsidNew;
        uint32_t dvAspect;
        uint16_t wFormat;
        Windows::Win32::SystemServices::BOOL fIsLinkedObject;
        intptr_t hMetaPict;
        uint16_t* lpszUserType;
        Windows::Win32::SystemServices::BOOL fObjectsIconChanged;
        uint16_t* lpszDefLabel;
        uint32_t cClsidExclude;
        ::win32::guid* lpClsidExclude;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct OLEUICONVERTA
    {
        uint32_t cbStruct;
        uint32_t dwFlags;
        Windows::Win32::WindowsAndMessaging::HWND hWndOwner;
        int8_t* lpszCaption;
        Windows::Win32::Com::LPFNOLEUIHOOK* lpfnHook;
        Windows::Win32::WindowsAndMessaging::LPARAM lCustData;
        Windows::Win32::SystemServices::HINSTANCE hInstance;
        int8_t* lpszTemplate;
        intptr_t hResource;
        ::win32::guid clsid;
        ::win32::guid clsidConvertDefault;
        ::win32::guid clsidActivateDefault;
        ::win32::guid clsidNew;
        uint32_t dvAspect;
        uint16_t wFormat;
        Windows::Win32::SystemServices::BOOL fIsLinkedObject;
        intptr_t hMetaPict;
        int8_t* lpszUserType;
        Windows::Win32::SystemServices::BOOL fObjectsIconChanged;
        int8_t* lpszDefLabel;
        uint32_t cClsidExclude;
        ::win32::guid* lpClsidExclude;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct OLEUIBUSYW
    {
        uint32_t cbStruct;
        uint32_t dwFlags;
        Windows::Win32::WindowsAndMessaging::HWND hWndOwner;
        uint16_t* lpszCaption;
        Windows::Win32::Com::LPFNOLEUIHOOK* lpfnHook;
        Windows::Win32::WindowsAndMessaging::LPARAM lCustData;
        Windows::Win32::SystemServices::HINSTANCE hInstance;
        uint16_t* lpszTemplate;
        intptr_t hResource;
        intptr_t hTask;
        Windows::Win32::WindowsAndMessaging::HWND* lphWndDialog;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct OLEUIBUSYA
    {
        uint32_t cbStruct;
        uint32_t dwFlags;
        Windows::Win32::WindowsAndMessaging::HWND hWndOwner;
        int8_t* lpszCaption;
        Windows::Win32::Com::LPFNOLEUIHOOK* lpfnHook;
        Windows::Win32::WindowsAndMessaging::LPARAM lCustData;
        Windows::Win32::SystemServices::HINSTANCE hInstance;
        int8_t* lpszTemplate;
        intptr_t hResource;
        intptr_t hTask;
        Windows::Win32::WindowsAndMessaging::HWND* lphWndDialog;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct OLEUICHANGESOURCEW
    {
        uint32_t cbStruct;
        uint32_t dwFlags;
        Windows::Win32::WindowsAndMessaging::HWND hWndOwner;
        uint16_t* lpszCaption;
        Windows::Win32::Com::LPFNOLEUIHOOK* lpfnHook;
        Windows::Win32::WindowsAndMessaging::LPARAM lCustData;
        Windows::Win32::SystemServices::HINSTANCE hInstance;
        uint16_t* lpszTemplate;
        intptr_t hResource;
        Windows::Win32::WindowsAndMessaging::OPENFILENAMEW* lpOFN;
        uint32_t dwReserved1[4];
        Windows::Win32::Com::IOleUILinkContainerW* lpOleUILinkContainer;
        uint32_t dwLink;
        uint16_t* lpszDisplayName;
        uint32_t nFileLength;
        uint16_t* lpszFrom;
        uint16_t* lpszTo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct OLEUICHANGESOURCEA
    {
        uint32_t cbStruct;
        uint32_t dwFlags;
        Windows::Win32::WindowsAndMessaging::HWND hWndOwner;
        int8_t* lpszCaption;
        Windows::Win32::Com::LPFNOLEUIHOOK* lpfnHook;
        Windows::Win32::WindowsAndMessaging::LPARAM lCustData;
        Windows::Win32::SystemServices::HINSTANCE hInstance;
        int8_t* lpszTemplate;
        intptr_t hResource;
        Windows::Win32::WindowsAndMessaging::OPENFILENAMEA* lpOFN;
        uint32_t dwReserved1[4];
        Windows::Win32::Com::IOleUILinkContainerA* lpOleUILinkContainer;
        uint32_t dwLink;
        int8_t* lpszDisplayName;
        uint32_t nFileLength;
        int8_t* lpszFrom;
        int8_t* lpszTo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct OLEUIGNRLPROPSW
    {
        uint32_t cbStruct;
        uint32_t dwFlags;
        uint32_t dwReserved1[2];
        Windows::Win32::Com::LPFNOLEUIHOOK* lpfnHook;
        Windows::Win32::WindowsAndMessaging::LPARAM lCustData;
        uint32_t dwReserved2[3];
        Windows::Win32::Com::OLEUIOBJECTPROPSW* lpOP;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct OLEUIGNRLPROPSA
    {
        uint32_t cbStruct;
        uint32_t dwFlags;
        uint32_t dwReserved1[2];
        Windows::Win32::Com::LPFNOLEUIHOOK* lpfnHook;
        Windows::Win32::WindowsAndMessaging::LPARAM lCustData;
        uint32_t dwReserved2[3];
        Windows::Win32::Com::OLEUIOBJECTPROPSA* lpOP;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct OLEUIVIEWPROPSW
    {
        uint32_t cbStruct;
        uint32_t dwFlags;
        uint32_t dwReserved1[2];
        Windows::Win32::Com::LPFNOLEUIHOOK* lpfnHook;
        Windows::Win32::WindowsAndMessaging::LPARAM lCustData;
        uint32_t dwReserved2[3];
        Windows::Win32::Com::OLEUIOBJECTPROPSW* lpOP;
        int32_t nScaleMin;
        int32_t nScaleMax;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct OLEUIVIEWPROPSA
    {
        uint32_t cbStruct;
        uint32_t dwFlags;
        uint32_t dwReserved1[2];
        Windows::Win32::Com::LPFNOLEUIHOOK* lpfnHook;
        Windows::Win32::WindowsAndMessaging::LPARAM lCustData;
        uint32_t dwReserved2[3];
        Windows::Win32::Com::OLEUIOBJECTPROPSA* lpOP;
        int32_t nScaleMin;
        int32_t nScaleMax;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct OLEUILINKPROPSW
    {
        uint32_t cbStruct;
        uint32_t dwFlags;
        uint32_t dwReserved1[2];
        Windows::Win32::Com::LPFNOLEUIHOOK* lpfnHook;
        Windows::Win32::WindowsAndMessaging::LPARAM lCustData;
        uint32_t dwReserved2[3];
        Windows::Win32::Com::OLEUIOBJECTPROPSW* lpOP;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct OLEUILINKPROPSA
    {
        uint32_t cbStruct;
        uint32_t dwFlags;
        uint32_t dwReserved1[2];
        Windows::Win32::Com::LPFNOLEUIHOOK* lpfnHook;
        Windows::Win32::WindowsAndMessaging::LPARAM lCustData;
        uint32_t dwReserved2[3];
        Windows::Win32::Com::OLEUIOBJECTPROPSA* lpOP;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct OLEUIOBJECTPROPSW
    {
        uint32_t cbStruct;
        uint32_t dwFlags;
        Windows::Win32::Controls::PROPSHEETHEADERW_V2* lpPS;
        uint32_t dwObject;
        Windows::Win32::Com::IOleUIObjInfoW* lpObjInfo;
        uint32_t dwLink;
        Windows::Win32::Com::IOleUILinkInfoW* lpLinkInfo;
        Windows::Win32::Com::OLEUIGNRLPROPSW* lpGP;
        Windows::Win32::Com::OLEUIVIEWPROPSW* lpVP;
        Windows::Win32::Com::OLEUILINKPROPSW* lpLP;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct OLEUIOBJECTPROPSA
    {
        uint32_t cbStruct;
        uint32_t dwFlags;
        Windows::Win32::Controls::PROPSHEETHEADERA_V2* lpPS;
        uint32_t dwObject;
        Windows::Win32::Com::IOleUIObjInfoA* lpObjInfo;
        uint32_t dwLink;
        Windows::Win32::Com::IOleUILinkInfoA* lpLinkInfo;
        Windows::Win32::Com::OLEUIGNRLPROPSA* lpGP;
        Windows::Win32::Com::OLEUIVIEWPROPSA* lpVP;
        Windows::Win32::Com::OLEUILINKPROPSA* lpLP;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct CALLFRAMEINFO
    {
        uint32_t iMethod;
        Windows::Win32::SystemServices::BOOL fHasInValues;
        Windows::Win32::SystemServices::BOOL fHasInOutValues;
        Windows::Win32::SystemServices::BOOL fHasOutValues;
        Windows::Win32::SystemServices::BOOL fDerivesFromIDispatch;
        int32_t cInInterfacesMax;
        int32_t cInOutInterfacesMax;
        int32_t cOutInterfacesMax;
        int32_t cTopLevelInInterfaces;
        ::win32::guid iid;
        uint32_t cMethod;
        uint32_t cParams;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct CALLFRAMEPARAMINFO
    {
        uint8_t fIn;
        uint8_t fOut;
        uint32_t stackOffset;
        uint32_t cbParam;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct CALLFRAME_MARSHALCONTEXT
    {
        uint8_t fIn;
        uint32_t dwDestContext;
        void* pvDestContext;
        Windows::Win32::Com::IUnknown* punkReserved;
        ::win32::guid guidTransferSyntax;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct CATEGORYINFO
    {
        ::win32::guid catid;
        uint32_t lcid;
        uint16_t szDescription[128];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct ComCallData
    {
        uint32_t dwDispid;
        uint32_t dwReserved;
        void* pUserDefined;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinRT
{
    struct ServerInformation
    {
        uint32_t dwServerPid;
        uint32_t dwServerTid;
        uint64_t ui64ServerAddress;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct STATSTG
    {
        uint16_t* pwcsName;
        uint32_t type;
        Windows::Win32::SystemServices::ULARGE_INTEGER cbSize;
        Windows::Win32::WindowsProgramming::FILETIME mtime;
        Windows::Win32::WindowsProgramming::FILETIME ctime;
        Windows::Win32::WindowsProgramming::FILETIME atime;
        uint32_t grfMode;
        uint32_t grfLocksSupported;
        ::win32::guid clsid;
        uint32_t grfStateBits;
        uint32_t reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct RemSNB
    {
        uint32_t ulCntStr;
        uint32_t ulCntChar;
        uint16_t rgString[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct StorageLayout
    {
        uint32_t LayoutType;
        uint16_t* pwcsElementName;
        Windows::Win32::SystemServices::LARGE_INTEGER cOffset;
        Windows::Win32::SystemServices::LARGE_INTEGER cBytes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct SOFTDISTINFO
    {
        uint32_t cbSize;
        uint32_t dwFlags;
        uint32_t dwAdState;
        uint16_t* szTitle;
        uint16_t* szAbstract;
        uint16_t* szHREF;
        uint32_t dwInstalledVersionMS;
        uint32_t dwInstalledVersionLS;
        uint32_t dwUpdateVersionMS;
        uint32_t dwUpdateVersionLS;
        uint32_t dwAdvertisedVersionMS;
        uint32_t dwAdvertisedVersionLS;
        uint32_t dwReserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct _HCLUSTER
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct _HNODE
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct _HRESOURCE
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct _HGROUP
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct _HNETWORK
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct _HNETINTERFACE
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct _HCHANGE
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct _HCLUSENUM
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct _HGROUPENUM
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct _HRESENUM
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct _HNETWORKENUM
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct _HNODEENUM
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct _HNETINTERFACEENUM
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct _HRESTYPEENUM
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct _HREGBATCH
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct _HREGBATCHPORT
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct _HREGBATCHNOTIFICATION
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct _HREGREADBATCH
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct _HREGREADBATCHREPLY
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct _HNODEENUMEX
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct _HCLUSENUMEX
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct _HGROUPENUMEX
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct _HRESENUMEX
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct _HGROUPSET
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct _HGROUPSETENUM
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUSTERVERSIONINFO_NT4
    {
        uint32_t dwVersionInfoSize;
        uint16_t MajorVersion;
        uint16_t MinorVersion;
        uint16_t BuildNumber;
        uint16_t szVendorId[64];
        uint16_t szCSDVersion[64];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUSTERVERSIONINFO
    {
        uint32_t dwVersionInfoSize;
        uint16_t MajorVersion;
        uint16_t MinorVersion;
        uint16_t BuildNumber;
        uint16_t szVendorId[64];
        uint16_t szCSDVersion[64];
        uint32_t dwClusterHighestVersion;
        uint32_t dwClusterLowestVersion;
        uint32_t dwFlags;
        uint32_t dwReserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUS_STARTING_PARAMS
    {
        uint32_t dwSize;
        Windows::Win32::SystemServices::BOOL bForm;
        Windows::Win32::SystemServices::BOOL bFirst;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUSCTL_RESOURCE_STATE_CHANGE_REASON_STRUCT
    {
        uint32_t dwSize;
        uint32_t dwVersion;
        Windows::Win32::WindowsClustering::CLUSTER_RESOURCE_STATE_CHANGE_REASON eReason;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUSTER_BATCH_COMMAND
    {
        Windows::Win32::WindowsClustering::CLUSTER_REG_COMMAND Command;
        uint32_t dwOptions;
        uint16_t* wzName;
        uint8_t* lpData;
        uint32_t cbData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUSTER_READ_BATCH_COMMAND
    {
        Windows::Win32::WindowsClustering::CLUSTER_REG_COMMAND Command;
        uint32_t dwOptions;
        uint16_t* wzSubkeyName;
        uint16_t* wzValueName;
        uint8_t* lpData;
        uint32_t cbData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUSTER_ENUM_ITEM
    {
        uint32_t dwVersion;
        uint32_t dwType;
        uint32_t cbId;
        uint16_t* lpszId;
        uint32_t cbName;
        uint16_t* lpszName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUSTER_CREATE_GROUP_INFO
    {
        uint32_t dwVersion;
        Windows::Win32::WindowsClustering::CLUSGROUP_TYPE groupType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUSTER_VALIDATE_PATH
    {
        uint16_t szPath;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUSTER_VALIDATE_DIRECTORY
    {
        uint16_t szPath;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUSTER_VALIDATE_NETNAME
    {
        uint16_t szNetworkName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUSTER_VALIDATE_CSV_FILENAME
    {
        uint16_t szFileName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUSTER_SET_PASSWORD_STATUS
    {
        uint32_t NodeId;
        uint8_t SetAttempted;
        uint32_t ReturnStatus;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUSTER_IP_ENTRY
    {
        uint16_t* lpszIpAddress;
        uint32_t dwPrefixLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CREATE_CLUSTER_CONFIG
    {
        uint32_t dwVersion;
        uint16_t* lpszClusterName;
        uint32_t cNodes;
        uint16_t** ppszNodeNames;
        uint32_t cIpEntries;
        Windows::Win32::WindowsClustering::CLUSTER_IP_ENTRY* pIpEntries;
        uint8_t fEmptyCluster;
        Windows::Win32::WindowsClustering::CLUSTER_MGMT_POINT_TYPE managementPointType;
        Windows::Win32::WindowsClustering::CLUSTER_MGMT_POINT_RESTYPE managementPointResType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CREATE_CLUSTER_NAME_ACCOUNT
    {
        uint32_t dwVersion;
        uint16_t* lpszClusterName;
        uint32_t dwFlags;
        uint16_t* pszUserName;
        uint16_t* pszPassword;
        uint16_t* pszDomain;
        Windows::Win32::WindowsClustering::CLUSTER_MGMT_POINT_TYPE managementPointType;
        Windows::Win32::WindowsClustering::CLUSTER_MGMT_POINT_RESTYPE managementPointResType;
        uint8_t bUpgradeVCOs;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct NOTIFY_FILTER_AND_TYPE
    {
        uint32_t dwObjectType;
        int64_t FilterFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUSTER_MEMBERSHIP_INFO
    {
        Windows::Win32::SystemServices::BOOL HasQuorum;
        uint32_t UpnodesSize;
        uint8_t Upnodes[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUSTER_AVAILABILITY_SET_CONFIG
    {
        uint32_t dwVersion;
        uint32_t dwUpdateDomains;
        uint32_t dwFaultDomains;
        Windows::Win32::SystemServices::BOOL bReserveSpareNode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUSTER_GROUP_ENUM_ITEM
    {
        uint32_t dwVersion;
        uint32_t cbId;
        uint16_t* lpszId;
        uint32_t cbName;
        uint16_t* lpszName;
        Windows::Win32::WindowsClustering::CLUSTER_GROUP_STATE state;
        uint32_t cbOwnerNode;
        uint16_t* lpszOwnerNode;
        uint32_t dwFlags;
        uint32_t cbProperties;
        void* pProperties;
        uint32_t cbRoProperties;
        void* pRoProperties;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUSTER_RESOURCE_ENUM_ITEM
    {
        uint32_t dwVersion;
        uint32_t cbId;
        uint16_t* lpszId;
        uint32_t cbName;
        uint16_t* lpszName;
        uint32_t cbOwnerGroupName;
        uint16_t* lpszOwnerGroupName;
        uint32_t cbOwnerGroupId;
        uint16_t* lpszOwnerGroupId;
        uint32_t cbProperties;
        void* pProperties;
        uint32_t cbRoProperties;
        void* pRoProperties;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct GROUP_FAILURE_INFO
    {
        uint32_t dwFailoverAttemptsRemaining;
        uint32_t dwFailoverPeriodRemaining;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct GROUP_FAILURE_INFO_BUFFER
    {
        uint32_t dwVersion;
        Windows::Win32::WindowsClustering::GROUP_FAILURE_INFO Info;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct RESOURCE_FAILURE_INFO
    {
        uint32_t dwRestartAttemptsRemaining;
        uint32_t dwRestartPeriodRemaining;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct RESOURCE_FAILURE_INFO_BUFFER
    {
        uint32_t dwVersion;
        Windows::Win32::WindowsClustering::RESOURCE_FAILURE_INFO Info;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct RESOURCE_TERMINAL_FAILURE_INFO_BUFFER
    {
        Windows::Win32::SystemServices::BOOL isTerminalFailure;
        uint32_t restartPeriodRemaining;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    union CLUSPROP_SYNTAX
    {
        struct _Anonymous_e__Struct
        {
            uint16_t wFormat;
            uint16_t wType;
        };
        uint32_t dw;
        _Anonymous_e__Struct Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUSPROP_VALUE
    {
        Windows::Win32::WindowsClustering::CLUSPROP_SYNTAX Syntax;
        uint32_t cbLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUSPROP_BINARY
    {
        Windows::Win32::WindowsClustering::CLUSPROP_VALUE __AnonymousBase_clusapi_L5092_C41;
        uint8_t rgb;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUSPROP_WORD
    {
        Windows::Win32::WindowsClustering::CLUSPROP_VALUE __AnonymousBase_clusapi_L5102_C39;
        uint16_t w;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUSPROP_DWORD
    {
        Windows::Win32::WindowsClustering::CLUSPROP_VALUE __AnonymousBase_clusapi_L5112_C40;
        uint32_t dw;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUSPROP_LONG
    {
        Windows::Win32::WindowsClustering::CLUSPROP_VALUE __AnonymousBase_clusapi_L5122_C39;
        int32_t l;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUSPROP_SZ
    {
        Windows::Win32::WindowsClustering::CLUSPROP_VALUE __AnonymousBase_clusapi_L5132_C37;
        uint16_t sz;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUSPROP_ULARGE_INTEGER
    {
        Windows::Win32::WindowsClustering::CLUSPROP_VALUE __AnonymousBase_clusapi_L5149_C14;
        Windows::Win32::SystemServices::ULARGE_INTEGER li;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUSPROP_LARGE_INTEGER
    {
        Windows::Win32::WindowsClustering::CLUSPROP_VALUE __AnonymousBase_clusapi_L5162_C14;
        Windows::Win32::SystemServices::LARGE_INTEGER li;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SECURITY_DESCRIPTOR_RELATIVE
    {
        uint8_t Revision;
        uint8_t Sbz1;
        uint16_t Control;
        uint32_t Owner;
        uint32_t Group;
        uint32_t Sacl;
        uint32_t Dacl;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUSPROP_SECURITY_DESCRIPTOR
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::SystemServices::SECURITY_DESCRIPTOR_RELATIVE sd;
            uint8_t rgbSecurityDescriptor;
        };
        Windows::Win32::WindowsClustering::CLUSPROP_VALUE __AnonymousBase_clusapi_L5174_C54;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUSPROP_FILETIME
    {
        Windows::Win32::WindowsClustering::CLUSPROP_VALUE __AnonymousBase_clusapi_L5188_C14;
        Windows::Win32::WindowsProgramming::FILETIME ft;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUS_RESOURCE_CLASS_INFO
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                union _Anonymous_e__Union
                {
                    uint32_t dw;
                    Windows::Win32::WindowsClustering::CLUSTER_RESOURCE_CLASS rc;
                };
                _Anonymous_e__Union Anonymous;
                uint32_t SubClass;
            };
            _Anonymous_e__Struct Anonymous;
            Windows::Win32::SystemServices::ULARGE_INTEGER li;
        };
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUSPROP_RESOURCE_CLASS
    {
        Windows::Win32::WindowsClustering::CLUSPROP_VALUE __AnonymousBase_clusapi_L5213_C14;
        Windows::Win32::WindowsClustering::CLUSTER_RESOURCE_CLASS rc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUSPROP_RESOURCE_CLASS_INFO
    {
        Windows::Win32::WindowsClustering::CLUSPROP_VALUE __AnonymousBase_clusapi_L5224_C14;
        Windows::Win32::WindowsClustering::CLUS_RESOURCE_CLASS_INFO __AnonymousBase_clusapi_L5225_C14;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    union CLUSPROP_REQUIRED_DEPENDENCY
    {
        Windows::Win32::WindowsClustering::CLUSPROP_VALUE Value;
        Windows::Win32::WindowsClustering::CLUSPROP_RESOURCE_CLASS ResClass;
        Windows::Win32::WindowsClustering::CLUSPROP_SZ ResTypeName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUS_FORCE_QUORUM_INFO
    {
        uint32_t dwSize;
        uint32_t dwNodeBitMask;
        uint32_t dwMaxNumberofNodes;
        uint16_t multiszNodeList[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUS_PARTITION_INFO
    {
        uint32_t dwFlags;
        uint16_t szDeviceName[260];
        uint16_t szVolumeLabel[260];
        uint32_t dwSerialNumber;
        uint32_t rgdwMaximumComponentLength;
        uint32_t dwFileSystemFlags;
        uint16_t szFileSystem[32];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUS_PARTITION_INFO_EX
    {
        uint32_t dwFlags;
        uint16_t szDeviceName[260];
        uint16_t szVolumeLabel[260];
        uint32_t dwSerialNumber;
        uint32_t rgdwMaximumComponentLength;
        uint32_t dwFileSystemFlags;
        uint16_t szFileSystem[32];
        Windows::Win32::SystemServices::ULARGE_INTEGER TotalSizeInBytes;
        Windows::Win32::SystemServices::ULARGE_INTEGER FreeSizeInBytes;
        uint32_t DeviceNumber;
        uint32_t PartitionNumber;
        ::win32::guid VolumeGuid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUS_PARTITION_INFO_EX2
    {
        ::win32::guid GptPartitionId;
        uint16_t szPartitionName[260];
        uint32_t EncryptionFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUS_CSV_VOLUME_INFO
    {
        Windows::Win32::SystemServices::ULARGE_INTEGER VolumeOffset;
        uint32_t PartitionNumber;
        Windows::Win32::WindowsClustering::CLUSTER_CSV_VOLUME_FAULT_STATE FaultState;
        Windows::Win32::WindowsClustering::CLUSTER_SHARED_VOLUME_BACKUP_STATE BackupState;
        uint16_t szVolumeFriendlyName[260];
        uint16_t szVolumeName[50];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUS_CSV_VOLUME_NAME
    {
        Windows::Win32::SystemServices::LARGE_INTEGER VolumeOffset;
        uint16_t szVolumeName[260];
        uint16_t szRootPath[263];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUSTER_SHARED_VOLUME_STATE_INFO
    {
        uint16_t szVolumeName[260];
        uint16_t szNodeName[260];
        Windows::Win32::WindowsClustering::CLUSTER_SHARED_VOLUME_STATE VolumeState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUSTER_SHARED_VOLUME_STATE_INFO_EX
    {
        uint16_t szVolumeName[260];
        uint16_t szNodeName[260];
        Windows::Win32::WindowsClustering::CLUSTER_SHARED_VOLUME_STATE VolumeState;
        uint16_t szVolumeFriendlyName[260];
        uint64_t RedirectedIOReason;
        uint64_t VolumeRedirectedIOReason;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUSTER_SHARED_VOLUME_RENAME_INPUT_VOLUME
    {
        union _Anonymous_e__Union
        {
            uint64_t VolumeOffset;
            uint16_t VolumeId[260];
            uint16_t VolumeName[260];
            uint16_t VolumeGuid[50];
        };
        Windows::Win32::WindowsClustering::CLUSTER_SHARED_VOLUME_RENAME_INPUT_TYPE InputType;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUSTER_SHARED_VOLUME_RENAME_INPUT_NAME
    {
        uint16_t NewVolumeName[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUSTER_SHARED_VOLUME_RENAME_INPUT_GUID_NAME
    {
        uint16_t NewVolumeName[260];
        uint16_t NewVolumeGuid[50];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUSTER_SHARED_VOLUME_RENAME_INPUT
    {
        Windows::Win32::WindowsClustering::CLUSTER_SHARED_VOLUME_RENAME_INPUT_VOLUME __AnonymousBase_clusapi_L5427_C14;
        Windows::Win32::WindowsClustering::CLUSTER_SHARED_VOLUME_RENAME_INPUT_NAME __AnonymousBase_clusapi_L5428_C14;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUSTER_SHARED_VOLUME_RENAME_GUID_INPUT
    {
        Windows::Win32::WindowsClustering::CLUSTER_SHARED_VOLUME_RENAME_INPUT_VOLUME __AnonymousBase_clusapi_L5438_C14;
        Windows::Win32::WindowsClustering::CLUSTER_SHARED_VOLUME_RENAME_INPUT_GUID_NAME __AnonymousBase_clusapi_L5439_C14;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUS_CHKDSK_INFO
    {
        uint32_t PartitionNumber;
        uint32_t ChkdskState;
        uint32_t FileIdCount;
        uint64_t FileIdList[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUS_DISK_NUMBER_INFO
    {
        uint32_t DiskNumber;
        uint32_t BytesPerSector;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUS_SHARED_VOLUME_BACKUP_MODE
    {
        Windows::Win32::WindowsClustering::CLUSTER_SHARED_VOLUME_BACKUP_STATE BackupState;
        uint32_t DelayTimerInSecs;
        uint16_t VolumeName[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUSPROP_PARTITION_INFO
    {
        Windows::Win32::WindowsClustering::CLUSPROP_VALUE __AnonymousBase_clusapi_L5470_C14;
        Windows::Win32::WindowsClustering::CLUS_PARTITION_INFO __AnonymousBase_clusapi_L5471_C14;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUSPROP_PARTITION_INFO_EX
    {
        Windows::Win32::WindowsClustering::CLUSPROP_VALUE __AnonymousBase_clusapi_L5482_C14;
        Windows::Win32::WindowsClustering::CLUS_PARTITION_INFO_EX __AnonymousBase_clusapi_L5483_C14;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUSPROP_PARTITION_INFO_EX2
    {
        Windows::Win32::WindowsClustering::CLUSPROP_PARTITION_INFO_EX __AnonymousBase_clusapi_L5496_C14;
        Windows::Win32::WindowsClustering::CLUS_PARTITION_INFO_EX2 __AnonymousBase_clusapi_L5497_C14;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUS_FTSET_INFO
    {
        uint32_t dwRootSignature;
        uint32_t dwFtType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUSPROP_FTSET_INFO
    {
        Windows::Win32::WindowsClustering::CLUSPROP_VALUE __AnonymousBase_clusapi_L5518_C14;
        Windows::Win32::WindowsClustering::CLUS_FTSET_INFO __AnonymousBase_clusapi_L5519_C14;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUS_SCSI_ADDRESS
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint8_t PortNumber;
                uint8_t PathId;
                uint8_t TargetId;
                uint8_t Lun;
            };
            _Anonymous_e__Struct Anonymous;
            uint32_t dw;
        };
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUSPROP_SCSI_ADDRESS
    {
        Windows::Win32::WindowsClustering::CLUSPROP_VALUE __AnonymousBase_clusapi_L5546_C14;
        Windows::Win32::WindowsClustering::CLUS_SCSI_ADDRESS __AnonymousBase_clusapi_L5547_C14;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUS_NETNAME_VS_TOKEN_INFO
    {
        uint32_t ProcessID;
        uint32_t DesiredAccess;
        Windows::Win32::SystemServices::BOOL InheritHandle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUS_NETNAME_PWD_INFO
    {
        uint32_t Flags;
        uint16_t Password[16];
        uint16_t CreatingDC[258];
        uint16_t ObjectGuid[64];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUS_NETNAME_PWD_INFOEX
    {
        uint32_t Flags;
        uint16_t Password[128];
        uint16_t CreatingDC[258];
        uint16_t ObjectGuid[64];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUS_DNN_LEADER_STATUS
    {
        Windows::Win32::SystemServices::BOOL IsOnline;
        Windows::Win32::SystemServices::BOOL IsFileServerPresent;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUS_DNN_SODAFS_CLONE_STATUS
    {
        uint32_t NodeId;
        Windows::Win32::WindowsClustering::CLUSTER_RESOURCE_STATE Status;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUS_NETNAME_IP_INFO_ENTRY
    {
        uint32_t NodeId;
        uint32_t AddressSize;
        uint8_t Address[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUS_NETNAME_IP_INFO_FOR_MULTICHANNEL
    {
        uint16_t szName[64];
        uint32_t NumEntries;
        Windows::Win32::WindowsClustering::CLUS_NETNAME_IP_INFO_ENTRY IpInfo[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUS_MAINTENANCE_MODE_INFO
    {
        Windows::Win32::SystemServices::BOOL InMaintenance;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUS_CSV_MAINTENANCE_MODE_INFO
    {
        Windows::Win32::SystemServices::BOOL InMaintenance;
        uint16_t VolumeName[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUS_MAINTENANCE_MODE_INFOEX
    {
        Windows::Win32::SystemServices::BOOL InMaintenance;
        Windows::Win32::WindowsClustering::MAINTENANCE_MODE_TYPE_ENUM MaintainenceModeType;
        Windows::Win32::WindowsClustering::CLUSTER_RESOURCE_STATE InternalState;
        uint32_t Signature;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUS_SET_MAINTENANCE_MODE_INPUT
    {
        Windows::Win32::SystemServices::BOOL InMaintenance;
        uint32_t ExtraParameterSize;
        uint8_t ExtraParameter[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUS_STORAGE_SET_DRIVELETTER
    {
        uint32_t PartitionNumber;
        uint32_t DriveLetterMask;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUS_STORAGE_GET_AVAILABLE_DRIVELETTERS
    {
        uint32_t AvailDrivelettersMask;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUS_STORAGE_REMAP_DRIVELETTER
    {
        uint32_t CurrentDriveLetterMask;
        uint32_t TargetDriveLetterMask;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUS_PROVIDER_STATE_CHANGE_INFO
    {
        uint32_t dwSize;
        Windows::Win32::WindowsClustering::CLUSTER_RESOURCE_STATE resourceState;
        uint16_t szProviderId[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUS_CREATE_INFRASTRUCTURE_FILESERVER_INPUT
    {
        uint16_t FileServerName[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUS_CREATE_INFRASTRUCTURE_FILESERVER_OUTPUT
    {
        uint16_t FileServerName[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUSPROP_LIST
    {
        uint32_t nPropertyCount;
        Windows::Win32::WindowsClustering::CLUSPROP_SZ PropertyName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct FILESHARE_CHANGE
    {
        Windows::Win32::WindowsClustering::FILESHARE_CHANGE_ENUM Change;
        uint16_t ShareName[84];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct FILESHARE_CHANGE_LIST
    {
        uint32_t NumEntries;
        Windows::Win32::WindowsClustering::FILESHARE_CHANGE ChangeEntry[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUSCTL_GROUP_GET_LAST_MOVE_TIME_OUTPUT
    {
        uint64_t GetTickCount64;
        Windows::Win32::WindowsProgramming::SYSTEMTIME GetSystemTime;
        uint32_t NodeId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    union CLUSPROP_BUFFER_HELPER
    {
        uint8_t* pb;
        uint16_t* pw;
        uint32_t* pdw;
        int32_t* pl;
        uint16_t* psz;
        Windows::Win32::WindowsClustering::CLUSPROP_LIST* pList;
        Windows::Win32::WindowsClustering::CLUSPROP_SYNTAX* pSyntax;
        Windows::Win32::WindowsClustering::CLUSPROP_SZ* pName;
        Windows::Win32::WindowsClustering::CLUSPROP_VALUE* pValue;
        Windows::Win32::WindowsClustering::CLUSPROP_BINARY* pBinaryValue;
        Windows::Win32::WindowsClustering::CLUSPROP_WORD* pWordValue;
        Windows::Win32::WindowsClustering::CLUSPROP_DWORD* pDwordValue;
        Windows::Win32::WindowsClustering::CLUSPROP_LONG* pLongValue;
        Windows::Win32::WindowsClustering::CLUSPROP_ULARGE_INTEGER* pULargeIntegerValue;
        Windows::Win32::WindowsClustering::CLUSPROP_LARGE_INTEGER* pLargeIntegerValue;
        Windows::Win32::WindowsClustering::CLUSPROP_SZ* pStringValue;
        Windows::Win32::WindowsClustering::CLUSPROP_SZ* pMultiSzValue;
        Windows::Win32::WindowsClustering::CLUSPROP_SECURITY_DESCRIPTOR* pSecurityDescriptor;
        Windows::Win32::WindowsClustering::CLUSPROP_RESOURCE_CLASS* pResourceClassValue;
        Windows::Win32::WindowsClustering::CLUSPROP_RESOURCE_CLASS_INFO* pResourceClassInfoValue;
        Windows::Win32::WindowsClustering::CLUSPROP_DWORD* pDiskSignatureValue;
        Windows::Win32::WindowsClustering::CLUSPROP_SCSI_ADDRESS* pScsiAddressValue;
        Windows::Win32::WindowsClustering::CLUSPROP_DWORD* pDiskNumberValue;
        Windows::Win32::WindowsClustering::CLUSPROP_PARTITION_INFO* pPartitionInfoValue;
        Windows::Win32::WindowsClustering::CLUSPROP_REQUIRED_DEPENDENCY* pRequiredDependencyValue;
        Windows::Win32::WindowsClustering::CLUSPROP_PARTITION_INFO_EX* pPartitionInfoValueEx;
        Windows::Win32::WindowsClustering::CLUSPROP_PARTITION_INFO_EX2* pPartitionInfoValueEx2;
        Windows::Win32::WindowsClustering::CLUSPROP_FILETIME* pFileTimeValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct SR_RESOURCE_TYPE_REPLICATED_PARTITION_INFO
    {
        uint64_t PartitionOffset;
        uint32_t Capabilities;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct SR_RESOURCE_TYPE_REPLICATED_PARTITION_ARRAY
    {
        uint32_t Count;
        Windows::Win32::WindowsClustering::SR_RESOURCE_TYPE_REPLICATED_PARTITION_INFO PartitionArray[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct SR_RESOURCE_TYPE_QUERY_ELIGIBLE_LOGDISKS
    {
        ::win32::guid DataDiskGuid;
        uint8_t IncludeOfflineDisks;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct SR_RESOURCE_TYPE_QUERY_ELIGIBLE_TARGET_DATADISKS
    {
        ::win32::guid SourceDataDiskGuid;
        ::win32::guid TargetReplicationGroupGuid;
        uint8_t SkipConnectivityCheck;
        uint8_t IncludeOfflineDisks;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct SR_RESOURCE_TYPE_QUERY_ELIGIBLE_SOURCE_DATADISKS
    {
        ::win32::guid DataDiskGuid;
        uint8_t IncludeAvailableStoargeDisks;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct SR_RESOURCE_TYPE_DISK_INFO
    {
        Windows::Win32::WindowsClustering::SR_DISK_REPLICATION_ELIGIBLE Reason;
        ::win32::guid DiskGuid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct SR_RESOURCE_TYPE_ELIGIBLE_DISKS_RESULT
    {
        uint16_t Count;
        Windows::Win32::WindowsClustering::SR_RESOURCE_TYPE_DISK_INFO DiskInfo[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct SR_RESOURCE_TYPE_REPLICATED_DISK
    {
        Windows::Win32::WindowsClustering::SR_REPLICATED_DISK_TYPE Type;
        ::win32::guid ClusterDiskResourceGuid;
        ::win32::guid ReplicationGroupId;
        uint16_t ReplicationGroupName[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct SR_RESOURCE_TYPE_REPLICATED_DISKS_RESULT
    {
        uint16_t Count;
        Windows::Win32::WindowsClustering::SR_RESOURCE_TYPE_REPLICATED_DISK ReplicatedDisks[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUSCTL_RESOURCE_TYPE_STORAGE_GET_AVAILABLE_DISKS_EX2_INPUT
    {
        uint32_t dwFlags;
        ::win32::guid guidPoolFilter;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct RESOURCE_STATUS
    {
        Windows::Win32::WindowsClustering::CLUSTER_RESOURCE_STATE ResourceState;
        uint32_t CheckPoint;
        uint32_t WaitHint;
        Windows::Win32::SystemServices::HANDLE EventHandle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct NodeUtilizationInfoElement
    {
        uint64_t Id;
        uint64_t AvailableMemory;
        uint64_t AvailableMemoryAfterReclamation;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct ResourceUtilizationInfoElement
    {
        uint64_t PhysicalNumaId;
        uint64_t CurrentMemory;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct GET_OPERATION_CONTEXT_PARAMS
    {
        uint32_t Size;
        uint32_t Version;
        Windows::Win32::WindowsClustering::RESDLL_CONTEXT_OPERATION_TYPE Type;
        uint32_t Priority;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct RESOURCE_STATUS_EX
    {
        Windows::Win32::WindowsClustering::CLUSTER_RESOURCE_STATE ResourceState;
        uint32_t CheckPoint;
        Windows::Win32::SystemServices::HANDLE EventHandle;
        uint32_t ApplicationSpecificErrorCode;
        uint32_t Flags;
        uint32_t WaitHint;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLRES_V1_FUNCTIONS
    {
        Windows::Win32::WindowsClustering::POPEN_ROUTINE* Open;
        Windows::Win32::WindowsClustering::PCLOSE_ROUTINE* Close;
        Windows::Win32::WindowsClustering::PONLINE_ROUTINE* Online;
        Windows::Win32::WindowsClustering::POFFLINE_ROUTINE* Offline;
        Windows::Win32::WindowsClustering::PTERMINATE_ROUTINE* Terminate;
        Windows::Win32::WindowsClustering::PLOOKS_ALIVE_ROUTINE* LooksAlive;
        Windows::Win32::WindowsClustering::PIS_ALIVE_ROUTINE* IsAlive;
        Windows::Win32::WindowsClustering::PARBITRATE_ROUTINE* Arbitrate;
        Windows::Win32::WindowsClustering::PRELEASE_ROUTINE* Release;
        Windows::Win32::WindowsClustering::PRESOURCE_CONTROL_ROUTINE* ResourceControl;
        Windows::Win32::WindowsClustering::PRESOURCE_TYPE_CONTROL_ROUTINE* ResourceTypeControl;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLRES_V2_FUNCTIONS
    {
        Windows::Win32::WindowsClustering::POPEN_V2_ROUTINE* Open;
        Windows::Win32::WindowsClustering::PCLOSE_ROUTINE* Close;
        Windows::Win32::WindowsClustering::PONLINE_V2_ROUTINE* Online;
        Windows::Win32::WindowsClustering::POFFLINE_V2_ROUTINE* Offline;
        Windows::Win32::WindowsClustering::PTERMINATE_ROUTINE* Terminate;
        Windows::Win32::WindowsClustering::PLOOKS_ALIVE_ROUTINE* LooksAlive;
        Windows::Win32::WindowsClustering::PIS_ALIVE_ROUTINE* IsAlive;
        Windows::Win32::WindowsClustering::PARBITRATE_ROUTINE* Arbitrate;
        Windows::Win32::WindowsClustering::PRELEASE_ROUTINE* Release;
        Windows::Win32::WindowsClustering::PRESOURCE_CONTROL_ROUTINE* ResourceControl;
        Windows::Win32::WindowsClustering::PRESOURCE_TYPE_CONTROL_ROUTINE* ResourceTypeControl;
        Windows::Win32::WindowsClustering::PCANCEL_ROUTINE* Cancel;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLRES_V3_FUNCTIONS
    {
        Windows::Win32::WindowsClustering::POPEN_V2_ROUTINE* Open;
        Windows::Win32::WindowsClustering::PCLOSE_ROUTINE* Close;
        Windows::Win32::WindowsClustering::PONLINE_V2_ROUTINE* Online;
        Windows::Win32::WindowsClustering::POFFLINE_V2_ROUTINE* Offline;
        Windows::Win32::WindowsClustering::PTERMINATE_ROUTINE* Terminate;
        Windows::Win32::WindowsClustering::PLOOKS_ALIVE_ROUTINE* LooksAlive;
        Windows::Win32::WindowsClustering::PIS_ALIVE_ROUTINE* IsAlive;
        Windows::Win32::WindowsClustering::PARBITRATE_ROUTINE* Arbitrate;
        Windows::Win32::WindowsClustering::PRELEASE_ROUTINE* Release;
        Windows::Win32::WindowsClustering::PBEGIN_RESCALL_ROUTINE* BeginResourceControl;
        Windows::Win32::WindowsClustering::PBEGIN_RESTYPECALL_ROUTINE* BeginResourceTypeControl;
        Windows::Win32::WindowsClustering::PCANCEL_ROUTINE* Cancel;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLRES_V4_FUNCTIONS
    {
        Windows::Win32::WindowsClustering::POPEN_V2_ROUTINE* Open;
        Windows::Win32::WindowsClustering::PCLOSE_ROUTINE* Close;
        Windows::Win32::WindowsClustering::PONLINE_V2_ROUTINE* Online;
        Windows::Win32::WindowsClustering::POFFLINE_V2_ROUTINE* Offline;
        Windows::Win32::WindowsClustering::PTERMINATE_ROUTINE* Terminate;
        Windows::Win32::WindowsClustering::PLOOKS_ALIVE_ROUTINE* LooksAlive;
        Windows::Win32::WindowsClustering::PIS_ALIVE_ROUTINE* IsAlive;
        Windows::Win32::WindowsClustering::PARBITRATE_ROUTINE* Arbitrate;
        Windows::Win32::WindowsClustering::PRELEASE_ROUTINE* Release;
        Windows::Win32::WindowsClustering::PBEGIN_RESCALL_ROUTINE* BeginResourceControl;
        Windows::Win32::WindowsClustering::PBEGIN_RESTYPECALL_ROUTINE* BeginResourceTypeControl;
        Windows::Win32::WindowsClustering::PCANCEL_ROUTINE* Cancel;
        Windows::Win32::WindowsClustering::PBEGIN_RESCALL_AS_USER_ROUTINE* BeginResourceControlAsUser;
        Windows::Win32::WindowsClustering::PBEGIN_RESTYPECALL_AS_USER_ROUTINE* BeginResourceTypeControlAsUser;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLRES_FUNCTION_TABLE
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::WindowsClustering::CLRES_V1_FUNCTIONS V1Functions;
            Windows::Win32::WindowsClustering::CLRES_V2_FUNCTIONS V2Functions;
            Windows::Win32::WindowsClustering::CLRES_V3_FUNCTIONS V3Functions;
            Windows::Win32::WindowsClustering::CLRES_V4_FUNCTIONS V4Functions;
        };
        uint32_t TableSize;
        uint32_t Version;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct RESUTIL_LARGEINT_DATA
    {
        Windows::Win32::SystemServices::LARGE_INTEGER Default;
        Windows::Win32::SystemServices::LARGE_INTEGER Minimum;
        Windows::Win32::SystemServices::LARGE_INTEGER Maximum;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct RESUTIL_ULARGEINT_DATA
    {
        Windows::Win32::SystemServices::ULARGE_INTEGER Default;
        Windows::Win32::SystemServices::ULARGE_INTEGER Minimum;
        Windows::Win32::SystemServices::ULARGE_INTEGER Maximum;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct RESUTIL_FILETIME_DATA
    {
        Windows::Win32::WindowsProgramming::FILETIME Default;
        Windows::Win32::WindowsProgramming::FILETIME Minimum;
        Windows::Win32::WindowsProgramming::FILETIME Maximum;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct RESUTIL_PROPERTY_ITEM
    {
        union _Anonymous_e__Union
        {
            size_t DefaultPtr;
            uint32_t Default;
            void* lpDefault;
            Windows::Win32::WindowsClustering::RESUTIL_LARGEINT_DATA* LargeIntData;
            Windows::Win32::WindowsClustering::RESUTIL_ULARGEINT_DATA* ULargeIntData;
            Windows::Win32::WindowsClustering::RESUTIL_FILETIME_DATA* FileTimeData;
        };
        uint16_t* Name;
        uint16_t* KeyName;
        uint32_t Format;
        _Anonymous_e__Union Anonymous;
        uint32_t Minimum;
        uint32_t Maximum;
        uint32_t Flags;
        uint32_t Offset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLRES_CALLBACK_FUNCTION_TABLE
    {
        Windows::Win32::WindowsClustering::PLOG_EVENT_ROUTINE* LogEvent;
        Windows::Win32::WindowsClustering::PSET_RESOURCE_STATUS_ROUTINE_EX* SetResourceStatusEx;
        Windows::Win32::WindowsClustering::PSET_RESOURCE_LOCKED_MODE_ROUTINE* SetResourceLockedMode;
        Windows::Win32::WindowsClustering::PSIGNAL_FAILURE_ROUTINE* SignalFailure;
        Windows::Win32::WindowsClustering::PSET_RESOURCE_INMEMORY_NODELOCAL_PROPERTIES_ROUTINE* SetResourceInMemoryNodeLocalProperties;
        Windows::Win32::WindowsClustering::PEND_CONTROL_CALL* EndControlCall;
        Windows::Win32::WindowsClustering::PEND_TYPE_CONTROL_CALL* EndTypeControlCall;
        Windows::Win32::WindowsClustering::PEXTEND_RES_CONTROL_CALL* ExtendControlCall;
        Windows::Win32::WindowsClustering::PEXTEND_RES_TYPE_CONTROL_CALL* ExtendTypeControlCall;
        Windows::Win32::WindowsClustering::PRAISE_RES_TYPE_NOTIFICATION* RaiseResTypeNotification;
        Windows::Win32::WindowsClustering::PCHANGE_RESOURCE_PROCESS_FOR_DUMPS* ChangeResourceProcessForDumps;
        Windows::Win32::WindowsClustering::PCHANGE_RES_TYPE_PROCESS_FOR_DUMPS* ChangeResTypeProcessForDumps;
        Windows::Win32::WindowsClustering::PSET_INTERNAL_STATE* SetInternalState;
        Windows::Win32::WindowsClustering::PSET_RESOURCE_LOCKED_MODE_EX_ROUTINE* SetResourceLockedModeEx;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct MONITOR_STATE
    {
        Windows::Win32::SystemServices::LARGE_INTEGER LastUpdate;
        Windows::Win32::WindowsClustering::RESOURCE_MONITOR_STATE State;
        Windows::Win32::SystemServices::HANDLE ActiveResource;
        Windows::Win32::SystemServices::BOOL ResmonStop;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct POST_UPGRADE_VERSION_INFO
    {
        uint32_t newMajorVersion;
        uint32_t newUpgradeVersion;
        uint32_t oldMajorVersion;
        uint32_t oldUpgradeVersion;
        uint32_t reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUSTER_HEALTH_FAULT
    {
        uint16_t* Id;
        uint32_t ErrorType;
        uint32_t ErrorCode;
        uint16_t* Description;
        uint16_t* Provider;
        uint32_t Flags;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUSTER_HEALTH_FAULT_ARRAY
    {
        uint32_t numFaults;
        Windows::Win32::WindowsClustering::CLUSTER_HEALTH_FAULT* faults;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct CLUS_WORKER
    {
        Windows::Win32::SystemServices::HANDLE hThread;
        Windows::Win32::SystemServices::BOOL Terminate;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct _HCLUSCRYPTPROVIDER
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct PaxosTagCStruct
    {
        uint64_t __padding__PaxosTagVtable;
        uint64_t __padding__NextEpochVtable;
        uint64_t __padding__NextEpoch_DateTimeVtable;
        uint64_t NextEpoch_DateTime_ticks;
        int32_t NextEpoch_Value;
        uint32_t __padding__BoundryNextEpoch;
        uint64_t __padding__EpochVtable;
        uint64_t __padding__Epoch_DateTimeVtable;
        uint64_t Epoch_DateTime_ticks;
        int32_t Epoch_Value;
        uint32_t __padding__BoundryEpoch;
        int32_t Sequence;
        uint32_t __padding__BoundrySequence;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct WitnessTagUpdateHelper
    {
        int32_t Version;
        Windows::Win32::WindowsClustering::PaxosTagCStruct paxosToSet;
        Windows::Win32::WindowsClustering::PaxosTagCStruct paxosToValidate;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsClustering
{
    struct WitnessTagHelper
    {
        int32_t Version;
        Windows::Win32::WindowsClustering::PaxosTagCStruct paxosToValidate;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Automation
{
    struct SAFEARRAYBOUND
    {
        uint32_t cElements;
        int32_t lLbound;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Automation
{
    struct _wireSAFEARR_BSTR
    {
        uint32_t Size;
        Windows::Win32::Com::FLAGGED_WORD_BLOB** aBstr;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Automation
{
    struct _wireSAFEARR_UNKNOWN
    {
        uint32_t Size;
        Windows::Win32::Com::IUnknown** apUnknown;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Automation
{
    struct _wireSAFEARR_DISPATCH
    {
        uint32_t Size;
        Windows::Win32::Automation::IDispatch** apDispatch;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Automation
{
    struct _wireSAFEARR_VARIANT
    {
        uint32_t Size;
        Windows::Win32::Automation::_wireVARIANT** aVariant;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Automation
{
    struct _wireSAFEARR_BRECORD
    {
        uint32_t Size;
        Windows::Win32::Automation::_wireBRECORD** aRecord;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Automation
{
    struct _wireSAFEARR_HAVEIID
    {
        uint32_t Size;
        Windows::Win32::Com::IUnknown** apUnknown;
        ::win32::guid iid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Automation
{
    struct _wireSAFEARRAY_UNION
    {
        union _u_e__Struct
        {
            Windows::Win32::Automation::_wireSAFEARR_BSTR BstrStr;
            Windows::Win32::Automation::_wireSAFEARR_UNKNOWN UnknownStr;
            Windows::Win32::Automation::_wireSAFEARR_DISPATCH DispatchStr;
            Windows::Win32::Automation::_wireSAFEARR_VARIANT VariantStr;
            Windows::Win32::Automation::_wireSAFEARR_BRECORD RecordStr;
            Windows::Win32::Automation::_wireSAFEARR_HAVEIID HaveIidStr;
            Windows::Win32::Com::BYTE_SIZEDARR ByteStr;
            Windows::Win32::Com::SHORT_SIZEDARR WordStr;
            Windows::Win32::Com::LONG_SIZEDARR LongStr;
            Windows::Win32::Com::HYPER_SIZEDARR HyperStr;
        };
        uint32_t sfType;
        _u_e__Struct u;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Automation
{
    struct _wireSAFEARRAY
    {
        uint16_t cDims;
        uint16_t fFeatures;
        uint32_t cbElements;
        uint32_t cLocks;
        Windows::Win32::Automation::_wireSAFEARRAY_UNION uArrayStructs;
        Windows::Win32::Automation::SAFEARRAYBOUND rgsabound[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Automation
{
    struct SAFEARRAY
    {
        uint16_t cDims;
        uint16_t fFeatures;
        uint32_t cbElements;
        uint32_t cLocks;
        void* pvData;
        Windows::Win32::Automation::SAFEARRAYBOUND rgsabound[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Automation
{
    struct _wireBRECORD
    {
        uint32_t fFlags;
        uint32_t clSize;
        Windows::Win32::Automation::IRecordInfo* pRecInfo;
        uint8_t* pRecord;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Automation
{
    struct _wireVARIANT
    {
        union _Anonymous_e__Union
        {
            int64_t llVal;
            int32_t lVal;
            uint8_t bVal;
            int16_t iVal;
            float fltVal;
            double dblVal;
            int16_t boolVal;
            int32_t scode;
            Windows::Win32::SystemServices::CY cyVal;
            double date;
            Windows::Win32::Com::FLAGGED_WORD_BLOB* bstrVal;
            Windows::Win32::Com::IUnknown* punkVal;
            Windows::Win32::Automation::IDispatch* pdispVal;
            Windows::Win32::Automation::_wireSAFEARRAY** parray;
            Windows::Win32::Automation::_wireBRECORD* brecVal;
            uint8_t* pbVal;
            int16_t* piVal;
            int32_t* plVal;
            int64_t* pllVal;
            float* pfltVal;
            double* pdblVal;
            int16_t* pboolVal;
            int32_t* pscode;
            Windows::Win32::SystemServices::CY* pcyVal;
            double* pdate;
            Windows::Win32::Com::FLAGGED_WORD_BLOB** pbstrVal;
            Windows::Win32::Com::IUnknown** ppunkVal;
            Windows::Win32::Automation::IDispatch** ppdispVal;
            Windows::Win32::Automation::_wireSAFEARRAY*** pparray;
            Windows::Win32::Automation::_wireVARIANT** pvarVal;
            int8_t cVal;
            uint16_t uiVal;
            uint32_t ulVal;
            uint64_t ullVal;
            int32_t intVal;
            uint32_t uintVal;
            Windows::Win32::SystemServices::DECIMAL decVal;
            Windows::Win32::SystemServices::DECIMAL* pdecVal;
            int8_t* pcVal;
            uint16_t* puiVal;
            uint32_t* pulVal;
            uint64_t* pullVal;
            int32_t* pintVal;
            uint32_t* puintVal;
        };
        uint32_t clSize;
        uint32_t rpcReserved;
        uint16_t vt;
        uint16_t wReserved1;
        uint16_t wReserved2;
        uint16_t wReserved3;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Automation
{
    struct TYPEDESC
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::Automation::TYPEDESC* lptdesc;
            Windows::Win32::Automation::ARRAYDESC* lpadesc;
            uint32_t hreftype;
        };
        _Anonymous_e__Union Anonymous;
        uint16_t vt;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Automation
{
    struct ARRAYDESC
    {
        Windows::Win32::Automation::TYPEDESC tdescElem;
        uint16_t cDims;
        Windows::Win32::Automation::SAFEARRAYBOUND rgbounds[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Automation
{
    struct PARAMDESCEX
    {
        uint32_t cBytes;
        Windows::Win32::Automation::VARIANT varDefaultValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Automation
{
    struct PARAMDESC
    {
        Windows::Win32::Automation::PARAMDESCEX* pparamdescex;
        uint16_t wParamFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Automation
{
    struct IDLDESC
    {
        size_t dwReserved;
        uint16_t wIDLFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Automation
{
    struct ELEMDESC
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::Automation::IDLDESC idldesc;
            Windows::Win32::Automation::PARAMDESC paramdesc;
        };
        Windows::Win32::Automation::TYPEDESC tdesc;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Automation
{
    struct TYPEATTR
    {
        ::win32::guid guid;
        uint32_t lcid;
        uint32_t dwReserved;
        int32_t memidConstructor;
        int32_t memidDestructor;
        uint16_t* lpstrSchema;
        uint32_t cbSizeInstance;
        Windows::Win32::Automation::TYPEKIND typekind;
        uint16_t cFuncs;
        uint16_t cVars;
        uint16_t cImplTypes;
        uint16_t cbSizeVft;
        uint16_t cbAlignment;
        uint16_t wTypeFlags;
        uint16_t wMajorVerNum;
        uint16_t wMinorVerNum;
        Windows::Win32::Automation::TYPEDESC tdescAlias;
        Windows::Win32::Automation::IDLDESC idldescType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Automation
{
    struct DISPPARAMS
    {
        Windows::Win32::Automation::VARIANT* rgvarg;
        int32_t* rgdispidNamedArgs;
        uint32_t cArgs;
        uint32_t cNamedArgs;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Automation
{
    struct EXCEPINFO
    {
        uint16_t wCode;
        uint16_t wReserved;
        Windows::Win32::Automation::BSTR bstrSource;
        Windows::Win32::Automation::BSTR bstrDescription;
        Windows::Win32::Automation::BSTR bstrHelpFile;
        uint32_t dwHelpContext;
        void* pvReserved;
        int32_t********** pfnDeferredFillIn;
        int32_t scode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Automation
{
    struct FUNCDESC
    {
        int32_t memid;
        int32_t* lprgscode;
        Windows::Win32::Automation::ELEMDESC* lprgelemdescParam;
        Windows::Win32::Automation::FUNCKIND funckind;
        Windows::Win32::Automation::INVOKEKIND invkind;
        Windows::Win32::Automation::CALLCONV callconv;
        int16_t cParams;
        int16_t cParamsOpt;
        int16_t oVft;
        int16_t cScodes;
        Windows::Win32::Automation::ELEMDESC elemdescFunc;
        uint16_t wFuncFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Automation
{
    struct VARDESC
    {
        union _Anonymous_e__Union
        {
            uint32_t oInst;
            Windows::Win32::Automation::VARIANT* lpvarValue;
        };
        int32_t memid;
        uint16_t* lpstrSchema;
        _Anonymous_e__Union Anonymous;
        Windows::Win32::Automation::ELEMDESC elemdescVar;
        uint16_t wVarFlags;
        Windows::Win32::Automation::VARKIND varkind;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Automation
{
    struct CLEANLOCALSTORAGE
    {
        Windows::Win32::Com::IUnknown* pInterface;
        void* pStorage;
        uint32_t flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Automation
{
    struct CUSTDATAITEM
    {
        ::win32::guid guid;
        Windows::Win32::Automation::VARIANT varValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Automation
{
    struct CUSTDATA
    {
        uint32_t cCustData;
        Windows::Win32::Automation::CUSTDATAITEM* prgCustData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Automation
{
    union BINDPTR
    {
        Windows::Win32::Automation::FUNCDESC* lpfuncdesc;
        Windows::Win32::Automation::VARDESC* lpvardesc;
        Windows::Win32::Automation::ITypeComp* lptcomp;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Automation
{
    struct TLIBATTR
    {
        ::win32::guid guid;
        uint32_t lcid;
        Windows::Win32::Automation::SYSKIND syskind;
        uint16_t wMajorVerNum;
        uint16_t wMinorVerNum;
        uint16_t wLibFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Automation
{
    struct NUMPARSE
    {
        int32_t cDig;
        uint32_t dwInFlags;
        uint32_t dwOutFlags;
        int32_t cchUsed;
        int32_t nBaseShift;
        int32_t nPwr10;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Automation
{
    struct UDATE
    {
        Windows::Win32::WindowsProgramming::SYSTEMTIME st;
        uint16_t wDayOfYear;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Automation
{
    struct PARAMDATA
    {
        uint16_t* szName;
        uint16_t vt;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Automation
{
    struct METHODDATA
    {
        uint16_t* szName;
        Windows::Win32::Automation::PARAMDATA* ppdata;
        int32_t dispid;
        uint32_t iMeth;
        Windows::Win32::Automation::CALLCONV cc;
        uint32_t cArgs;
        uint16_t wFlags;
        uint16_t vtReturn;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Automation
{
    struct INTERFACEDATA
    {
        Windows::Win32::Automation::METHODDATA* pmethdata;
        uint32_t cMembers;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Automation
{
    struct WIA_RAW_HEADER
    {
        uint32_t Tag;
        uint32_t Version;
        uint32_t HeaderSize;
        uint32_t XRes;
        uint32_t YRes;
        uint32_t XExtent;
        uint32_t YExtent;
        uint32_t BytesPerLine;
        uint32_t BitsPerPixel;
        uint32_t ChannelsPerPixel;
        uint32_t DataType;
        uint8_t BitsPerChannel[8];
        uint32_t Compression;
        uint32_t PhotometricInterp;
        uint32_t LineOrder;
        uint32_t RawDataOffset;
        uint32_t RawDataSize;
        uint32_t PaletteOffset;
        uint32_t PaletteSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Automation
{
    struct WIA_BARCODE_INFO
    {
        uint32_t Size;
        uint32_t Type;
        uint32_t Page;
        uint32_t Confidence;
        uint32_t XOffset;
        uint32_t YOffset;
        uint32_t Rotation;
        uint32_t Length;
        uint16_t Text[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Automation
{
    struct WIA_BARCODES
    {
        uint32_t Tag;
        uint32_t Version;
        uint32_t Size;
        uint32_t Count;
        Windows::Win32::Automation::WIA_BARCODE_INFO Barcodes[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Automation
{
    struct WIA_PATCH_CODE_INFO
    {
        uint32_t Type;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Automation
{
    struct WIA_PATCH_CODES
    {
        uint32_t Tag;
        uint32_t Version;
        uint32_t Size;
        uint32_t Count;
        Windows::Win32::Automation::WIA_PATCH_CODE_INFO PatchCodes[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Automation
{
    struct WIA_MICR_INFO
    {
        uint32_t Size;
        uint32_t Page;
        uint32_t Length;
        uint16_t Text[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Automation
{
    struct WIA_MICR
    {
        uint32_t Tag;
        uint32_t Version;
        uint32_t Size;
        uint16_t Placeholder;
        uint16_t Reserved;
        uint32_t Count;
        Windows::Win32::Automation::WIA_MICR_INFO Micr[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Wia
{
    struct WIA_DITHER_PATTERN_DATA
    {
        int32_t lSize;
        Windows::Win32::Automation::BSTR bstrPatternName;
        int32_t lPatternWidth;
        int32_t lPatternLength;
        int32_t cbPattern;
        uint8_t* pbPattern;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Wia
{
    struct WIA_PROPID_TO_NAME
    {
        uint32_t propid;
        uint16_t* pszName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Wia
{
    struct WIA_FORMAT_INFO
    {
        ::win32::guid guidFormatID;
        int32_t lTymed;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Wia
{
    struct WIA_DATA_CALLBACK_HEADER
    {
        int32_t lSize;
        ::win32::guid guidFormatID;
        int32_t lBufferSize;
        int32_t lPageCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Wia
{
    struct WIA_DATA_TRANSFER_INFO
    {
        uint32_t ulSize;
        uint32_t ulSection;
        uint32_t ulBufferSize;
        Windows::Win32::SystemServices::BOOL bDoubleBuffer;
        uint32_t ulReserved1;
        uint32_t ulReserved2;
        uint32_t ulReserved3;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Wia
{
    struct WIA_EXTENDED_TRANSFER_INFO
    {
        uint32_t ulSize;
        uint32_t ulMinBufferSize;
        uint32_t ulOptimalBufferSize;
        uint32_t ulMaxBufferSize;
        uint32_t ulNumBuffers;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Wia
{
    struct WIA_DEV_CAP
    {
        ::win32::guid guid;
        uint32_t ulFlags;
        Windows::Win32::Automation::BSTR bstrName;
        Windows::Win32::Automation::BSTR bstrDescription;
        Windows::Win32::Automation::BSTR bstrIcon;
        Windows::Win32::Automation::BSTR bstrCommandline;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ActiveDirectory
{
    struct GetDcContextHandle
    {
        intptr_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Compression
{
    struct COMPRESSOR_HANDLE
    {
        intptr_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct HIMAGELIST
    {
        intptr_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct HPROPSHEETPAGE
    {
        intptr_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dns
{
    struct DnsContextHandle
    {
        intptr_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct TDH_HANDLE
    {
        intptr_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct FindChangeNotifcationHandle
    {
        intptr_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct FindFileHandle
    {
        intptr_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct FindFileNameHandle
    {
        intptr_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct FindStreamHandle
    {
        intptr_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct FindVolumeHandle
    {
        intptr_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct FindVolumeMointPointHandle
    {
        intptr_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct HBRUSH
    {
        intptr_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct HCOLORSPACE
    {
        intptr_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct HCURSOR
    {
        intptr_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct HdcMetdataEnhFileHandle
    {
        intptr_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct HdcMetdataFileHandle
    {
        intptr_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct HFONT
    {
        intptr_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct HPEN
    {
        intptr_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct HRGN
    {
        intptr_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::InstallableFileSystems
{
    struct FilterFindHandle
    {
        intptr_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::InstallableFileSystems
{
    struct FilterInstanceFindHandle
    {
        intptr_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::InstallableFileSystems
{
    struct FilterVolumeFindHandle
    {
        intptr_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::InstallableFileSystems
{
    struct FilterVolumeInstanceFindHandle
    {
        intptr_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::InstallableFileSystems
{
    struct HFILTER
    {
        intptr_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::InstallableFileSystems
{
    struct HFILTER_INSTANCE
    {
        intptr_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct IcmpHandle
    {
        intptr_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MenusAndResources
{
    struct HMENU
    {
        intptr_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Perf
{
    struct PerfProviderHandle
    {
        intptr_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Perf
{
    struct PerfQueryHandle
    {
        intptr_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Policy
{
    struct CriticalPolicySectionHandle
    {
        intptr_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct HwtsVirtualChannelHandle
    {
        intptr_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct HCERTCHAINENGINE
    {
        intptr_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct HCRYPTASYNC
    {
        intptr_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct LsaHandle
    {
        intptr_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct ShFindChangeNotifcationHandle
    {
        intptr_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct BoundaryDescriptorHandle
    {
        intptr_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct LRESULT
    {
        int32_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct LSTATUS
    {
        int32_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct NamespaceHandle
    {
        intptr_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PTP_POOL
    {
        intptr_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct TimerQueueHandle
    {
        intptr_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct WPARAM
    {
        size_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsNetworking
{
    struct NetEnumHandle
    {
        intptr_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct EventLogHandle
    {
        intptr_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct EventSourceHandle
    {
        intptr_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct HeapHandle
    {
        intptr_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct HKEY
    {
        intptr_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsStationsAndDesktops
{
    struct HDESK
    {
        intptr_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct HWSAEVENT
    {
        intptr_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct FLOAT128
    {
        int64_t LowPart;
        int64_t HighPart;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct M128A
    {
        uint64_t Low;
        int64_t High;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct XSAVE_FORMAT
    {
        uint16_t ControlWord;
        uint16_t StatusWord;
        uint8_t TagWord;
        uint8_t Reserved1;
        uint16_t ErrorOpcode;
        uint32_t ErrorOffset;
        uint16_t ErrorSelector;
        uint16_t Reserved2;
        uint32_t DataOffset;
        uint16_t DataSelector;
        uint16_t Reserved3;
        uint32_t MxCsr;
        uint32_t MxCsr_Mask;
        Windows::Win32::SystemServices::M128A FloatRegisters[8];
        Windows::Win32::SystemServices::M128A XmmRegisters[8];
        uint8_t Reserved4[224];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct XSAVE_CET_U_FORMAT
    {
        uint64_t Ia32CetUMsr;
        uint64_t Ia32Pl3SspMsr;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct XSAVE_AREA_HEADER
    {
        uint64_t Mask;
        uint64_t CompactionMask;
        uint64_t Reserved2[6];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct XSAVE_AREA
    {
        Windows::Win32::SystemServices::XSAVE_FORMAT LegacyState;
        Windows::Win32::SystemServices::XSAVE_AREA_HEADER Header;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct XSTATE_CONTEXT
    {
        uint64_t Mask;
        uint32_t Length;
        uint32_t Reserved1;
        Windows::Win32::SystemServices::XSAVE_AREA* Area;
        uint32_t Reserved2;
        void* Buffer;
        uint32_t Reserved3;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SCOPE_TABLE_AMD64
    {
        struct _Anonymous_e__Struct
        {
            uint32_t BeginAddress;
            uint32_t EndAddress;
            uint32_t HandlerAddress;
            uint32_t JumpTarget;
        };
        uint32_t Count;
        _Anonymous_e__Struct ScopeRecord[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SCOPE_TABLE_ARM
    {
        struct _Anonymous_e__Struct
        {
            uint32_t BeginAddress;
            uint32_t EndAddress;
            uint32_t HandlerAddress;
            uint32_t JumpTarget;
        };
        uint32_t Count;
        _Anonymous_e__Struct ScopeRecord[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SCOPE_TABLE_ARM64
    {
        struct _Anonymous_e__Struct
        {
            uint32_t BeginAddress;
            uint32_t EndAddress;
            uint32_t HandlerAddress;
            uint32_t JumpTarget;
        };
        uint32_t Count;
        _Anonymous_e__Struct ScopeRecord[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct KNONVOLATILE_CONTEXT_POINTERS_ARM64
    {
        uint64_t* X19;
        uint64_t* X20;
        uint64_t* X21;
        uint64_t* X22;
        uint64_t* X23;
        uint64_t* X24;
        uint64_t* X25;
        uint64_t* X26;
        uint64_t* X27;
        uint64_t* X28;
        uint64_t* Fp;
        uint64_t* Lr;
        uint64_t* D8;
        uint64_t* D9;
        uint64_t* D10;
        uint64_t* D11;
        uint64_t* D12;
        uint64_t* D13;
        uint64_t* D14;
        uint64_t* D15;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct FLOATING_SAVE_AREA
    {
        uint32_t ControlWord;
        uint32_t StatusWord;
        uint32_t TagWord;
        uint32_t ErrorOffset;
        uint32_t ErrorSelector;
        uint32_t DataOffset;
        uint32_t DataSelector;
        uint8_t RegisterArea[80];
        uint32_t Spare0;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct KNONVOLATILE_CONTEXT_POINTERS
    {
        uint32_t Dummy;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct WOW64_LDT_ENTRY
    {
        union _HighWord_e__Union
        {
            struct _Bytes_e__Struct
            {
                uint8_t BaseMid;
                uint8_t Flags1;
                uint8_t Flags2;
                uint8_t BaseHi;
            };
            struct _Bits_e__Struct
            {
                uint32_t _bitfield;
            };
            _Bytes_e__Struct Bytes;
            _Bits_e__Struct Bits;
        };
        uint16_t LimitLow;
        uint16_t BaseLow;
        _HighWord_e__Union HighWord;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct WOW64_DESCRIPTOR_TABLE_ENTRY
    {
        uint32_t Selector;
        Windows::Win32::Debug::WOW64_LDT_ENTRY Descriptor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct EXCEPTION_RECORD32
    {
        uint32_t ExceptionCode;
        uint32_t ExceptionFlags;
        uint32_t ExceptionRecord;
        uint32_t ExceptionAddress;
        uint32_t NumberParameters;
        uint32_t ExceptionInformation[15];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SID_IDENTIFIER_AUTHORITY
    {
        uint8_t Value[6];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SID
    {
        uint8_t Revision;
        uint8_t SubAuthorityCount;
        Windows::Win32::Security::SID_IDENTIFIER_AUTHORITY IdentifierAuthority;
        uint32_t SubAuthority[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    union SE_SID
    {
        Windows::Win32::Security::SID Sid;
        uint8_t Buffer[68];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct ACE_HEADER
    {
        uint8_t AceType;
        uint8_t AceFlags;
        uint16_t AceSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SYSTEM_PROCESS_TRUST_LABEL_ACE
    {
        Windows::Win32::Security::ACE_HEADER Header;
        uint32_t Mask;
        uint32_t SidStart;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SYSTEM_ACCESS_FILTER_ACE
    {
        Windows::Win32::Security::ACE_HEADER Header;
        uint32_t Mask;
        uint32_t SidStart;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SECURITY_OBJECT_AI_PARAMS
    {
        uint32_t Size;
        uint32_t ConstraintMask;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct ACCESS_REASONS
    {
        uint32_t Data[32];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SE_SECURITY_DESCRIPTOR
    {
        uint32_t Size;
        uint32_t Flags;
        void* SecurityDescriptor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SE_ACCESS_REQUEST
    {
        uint32_t Size;
        Windows::Win32::SystemServices::SE_SECURITY_DESCRIPTOR* SeSecurityDescriptor;
        uint32_t DesiredAccess;
        uint32_t PreviouslyGrantedAccess;
        void* PrincipalSelfSid;
        Windows::Win32::Security::GENERIC_MAPPING* GenericMapping;
        uint32_t ObjectTypeListCount;
        Windows::Win32::Security::OBJECT_TYPE_LIST* ObjectTypeList;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SE_ACCESS_REPLY
    {
        uint32_t Size;
        uint32_t ResultListCount;
        uint32_t* GrantedAccess;
        uint32_t* AccessStatus;
        Windows::Win32::SystemServices::ACCESS_REASONS* AccessReason;
        Windows::Win32::Security::PRIVILEGE_SET** Privileges;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SID_AND_ATTRIBUTES
    {
        void* Sid;
        uint32_t Attributes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct TOKEN_USER
    {
        Windows::Win32::Security::SID_AND_ATTRIBUTES User;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SE_TOKEN_USER
    {
        union _Anonymous1_e__Union
        {
            Windows::Win32::Security::TOKEN_USER TokenUser;
            Windows::Win32::Security::SID_AND_ATTRIBUTES User;
        };
        union _Anonymous2_e__Union
        {
            Windows::Win32::Security::SID Sid;
            uint8_t Buffer[68];
        };
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct TOKEN_SID_INFORMATION
    {
        void* Sid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct TOKEN_BNO_ISOLATION_INFORMATION
    {
        uint16_t* IsolationPrefix;
        uint8_t IsolationEnabled;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SE_IMPERSONATION_STATE
    {
        void* Token;
        uint8_t CopyOnOpen;
        uint8_t EffectiveOnly;
        Windows::Win32::Security::SECURITY_IMPERSONATION_LEVEL Level;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct JOB_SET_ARRAY
    {
        Windows::Win32::SystemServices::HANDLE JobHandle;
        uint32_t MemberLevel;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct EXCEPTION_REGISTRATION_RECORD
    {
        Windows::Win32::SystemServices::EXCEPTION_REGISTRATION_RECORD* Next;
        Windows::Win32::Kernel::EXCEPTION_ROUTINE* Handler;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct NT_TIB
    {
        union _Anonymous_e__Union
        {
            void* FiberData;
            uint32_t Version;
        };
        Windows::Win32::SystemServices::EXCEPTION_REGISTRATION_RECORD* ExceptionList;
        void* StackBase;
        void* StackLimit;
        void* SubSystemTib;
        _Anonymous_e__Union Anonymous;
        void* ArbitraryUserPointer;
        Windows::Win32::SystemServices::NT_TIB* Self;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct NT_TIB32
    {
        union _Anonymous_e__Union
        {
            uint32_t FiberData;
            uint32_t Version;
        };
        uint32_t ExceptionList;
        uint32_t StackBase;
        uint32_t StackLimit;
        uint32_t SubSystemTib;
        _Anonymous_e__Union Anonymous;
        uint32_t ArbitraryUserPointer;
        uint32_t Self;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct NT_TIB64
    {
        union _Anonymous_e__Union
        {
            uint64_t FiberData;
            uint32_t Version;
        };
        uint64_t ExceptionList;
        uint64_t StackBase;
        uint64_t StackLimit;
        uint64_t SubSystemTib;
        _Anonymous_e__Union Anonymous;
        uint64_t ArbitraryUserPointer;
        uint64_t Self;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct UMS_CREATE_THREAD_ATTRIBUTES
    {
        uint32_t UmsVersion;
        void* UmsContext;
        void* UmsCompletionList;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct WOW64_ARCHITECTURE_INFORMATION
    {
        uint32_t _bitfield;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PROCESS_DYNAMIC_EH_CONTINUATION_TARGET
    {
        size_t TargetAddress;
        size_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION
    {
        uint16_t NumberOfTargets;
        uint16_t Reserved;
        uint32_t Reserved2;
        Windows::Win32::SystemServices::PROCESS_DYNAMIC_EH_CONTINUATION_TARGET* Targets;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    union RATE_QUOTA_LIMIT
    {
        struct _Anonymous_e__Struct
        {
            uint32_t _bitfield;
        };
        uint32_t RateData;
        _Anonymous_e__Struct Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct QUOTA_LIMITS_EX
    {
        size_t PagedPoolLimit;
        size_t NonPagedPoolLimit;
        size_t MinimumWorkingSetSize;
        size_t MaximumWorkingSetSize;
        size_t PagefileLimit;
        Windows::Win32::SystemServices::LARGE_INTEGER TimeLimit;
        size_t WorkingSetLimit;
        size_t Reserved2;
        size_t Reserved3;
        size_t Reserved4;
        uint32_t Flags;
        Windows::Win32::SystemServices::RATE_QUOTA_LIMIT CpuRateLimit;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IO_COUNTERS
    {
        uint64_t ReadOperationCount;
        uint64_t WriteOperationCount;
        uint64_t OtherOperationCount;
        uint64_t ReadTransferCount;
        uint64_t WriteTransferCount;
        uint64_t OtherTransferCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PROCESS_MITIGATION_ASLR_POLICY
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t _bitfield;
            };
            uint32_t Flags;
            _Anonymous_e__Struct Anonymous;
        };
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PROCESS_MITIGATION_DEP_POLICY
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t _bitfield;
            };
            uint32_t Flags;
            _Anonymous_e__Struct Anonymous;
        };
        _Anonymous_e__Union Anonymous;
        uint8_t Permanent;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t _bitfield;
            };
            uint32_t Flags;
            _Anonymous_e__Struct Anonymous;
        };
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t _bitfield;
            };
            uint32_t Flags;
            _Anonymous_e__Struct Anonymous;
        };
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t _bitfield;
            };
            uint32_t Flags;
            _Anonymous_e__Struct Anonymous;
        };
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PROCESS_MITIGATION_DYNAMIC_CODE_POLICY
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t _bitfield;
            };
            uint32_t Flags;
            _Anonymous_e__Struct Anonymous;
        };
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t _bitfield;
            };
            uint32_t Flags;
            _Anonymous_e__Struct Anonymous;
        };
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t _bitfield;
            };
            uint32_t Flags;
            _Anonymous_e__Struct Anonymous;
        };
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PROCESS_MITIGATION_FONT_DISABLE_POLICY
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t _bitfield;
            };
            uint32_t Flags;
            _Anonymous_e__Struct Anonymous;
        };
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PROCESS_MITIGATION_IMAGE_LOAD_POLICY
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t _bitfield;
            };
            uint32_t Flags;
            _Anonymous_e__Struct Anonymous;
        };
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t _bitfield;
            };
            uint32_t Flags;
            _Anonymous_e__Struct Anonymous;
        };
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t _bitfield;
            };
            uint32_t Flags;
            _Anonymous_e__Struct Anonymous;
        };
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PROCESS_MITIGATION_CHILD_PROCESS_POLICY
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t _bitfield;
            };
            uint32_t Flags;
            _Anonymous_e__Struct Anonymous;
        };
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t _bitfield;
            };
            uint32_t Flags;
            _Anonymous_e__Struct Anonymous;
        };
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t _bitfield;
            };
            uint32_t Flags;
            _Anonymous_e__Struct Anonymous;
        };
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct JOBOBJECT_BASIC_ACCOUNTING_INFORMATION
    {
        Windows::Win32::SystemServices::LARGE_INTEGER TotalUserTime;
        Windows::Win32::SystemServices::LARGE_INTEGER TotalKernelTime;
        Windows::Win32::SystemServices::LARGE_INTEGER ThisPeriodTotalUserTime;
        Windows::Win32::SystemServices::LARGE_INTEGER ThisPeriodTotalKernelTime;
        uint32_t TotalPageFaultCount;
        uint32_t TotalProcesses;
        uint32_t ActiveProcesses;
        uint32_t TotalTerminatedProcesses;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct JOBOBJECT_BASIC_LIMIT_INFORMATION
    {
        Windows::Win32::SystemServices::LARGE_INTEGER PerProcessUserTimeLimit;
        Windows::Win32::SystemServices::LARGE_INTEGER PerJobUserTimeLimit;
        uint32_t LimitFlags;
        size_t MinimumWorkingSetSize;
        size_t MaximumWorkingSetSize;
        uint32_t ActiveProcessLimit;
        size_t Affinity;
        uint32_t PriorityClass;
        uint32_t SchedulingClass;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct JOBOBJECT_EXTENDED_LIMIT_INFORMATION
    {
        Windows::Win32::SystemServices::JOBOBJECT_BASIC_LIMIT_INFORMATION BasicLimitInformation;
        Windows::Win32::SystemServices::IO_COUNTERS IoInfo;
        size_t ProcessMemoryLimit;
        size_t JobMemoryLimit;
        size_t PeakProcessMemoryUsed;
        size_t PeakJobMemoryUsed;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct JOBOBJECT_BASIC_PROCESS_ID_LIST
    {
        uint32_t NumberOfAssignedProcesses;
        uint32_t NumberOfProcessIdsInList;
        size_t ProcessIdList[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct JOBOBJECT_BASIC_UI_RESTRICTIONS
    {
        uint32_t UIRestrictionsClass;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct JOBOBJECT_SECURITY_LIMIT_INFORMATION
    {
        uint32_t SecurityLimitFlags;
        Windows::Win32::SystemServices::HANDLE JobToken;
        Windows::Win32::Security::TOKEN_GROUPS* SidsToDisable;
        Windows::Win32::Security::TOKEN_PRIVILEGES* PrivilegesToDelete;
        Windows::Win32::Security::TOKEN_GROUPS* RestrictedSids;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct JOBOBJECT_END_OF_JOB_TIME_INFORMATION
    {
        uint32_t EndOfJobTimeAction;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct JOBOBJECT_ASSOCIATE_COMPLETION_PORT
    {
        void* CompletionKey;
        Windows::Win32::SystemServices::HANDLE CompletionPort;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION
    {
        Windows::Win32::SystemServices::JOBOBJECT_BASIC_ACCOUNTING_INFORMATION BasicInfo;
        Windows::Win32::SystemServices::IO_COUNTERS IoInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct JOBOBJECT_JOBSET_INFORMATION
    {
        uint32_t MemberLevel;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION
    {
        uint64_t IoReadBytesLimit;
        uint64_t IoWriteBytesLimit;
        Windows::Win32::SystemServices::LARGE_INTEGER PerJobUserTimeLimit;
        uint64_t JobMemoryLimit;
        Windows::Win32::SystemServices::JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
        Windows::Win32::SystemServices::JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL RateControlToleranceInterval;
        uint32_t LimitFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2
    {
        union _Anonymous1_e__Union
        {
            uint64_t JobHighMemoryLimit;
            uint64_t JobMemoryLimit;
        };
        union _Anonymous2_e__Union
        {
            Windows::Win32::SystemServices::JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
            Windows::Win32::SystemServices::JOBOBJECT_RATE_CONTROL_TOLERANCE CpuRateControlTolerance;
        };
        union _Anonymous3_e__Union
        {
            Windows::Win32::SystemServices::JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL RateControlToleranceInterval;
            Windows::Win32::SystemServices::JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL CpuRateControlToleranceInterval;
        };
        uint64_t IoReadBytesLimit;
        uint64_t IoWriteBytesLimit;
        Windows::Win32::SystemServices::LARGE_INTEGER PerJobUserTimeLimit;
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
        _Anonymous3_e__Union Anonymous3;
        uint32_t LimitFlags;
        Windows::Win32::SystemServices::JOBOBJECT_RATE_CONTROL_TOLERANCE IoRateControlTolerance;
        uint64_t JobLowMemoryLimit;
        Windows::Win32::SystemServices::JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL IoRateControlToleranceInterval;
        Windows::Win32::SystemServices::JOBOBJECT_RATE_CONTROL_TOLERANCE NetRateControlTolerance;
        Windows::Win32::SystemServices::JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL NetRateControlToleranceInterval;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION
    {
        uint32_t LimitFlags;
        uint32_t ViolationLimitFlags;
        uint64_t IoReadBytes;
        uint64_t IoReadBytesLimit;
        uint64_t IoWriteBytes;
        uint64_t IoWriteBytesLimit;
        Windows::Win32::SystemServices::LARGE_INTEGER PerJobUserTime;
        Windows::Win32::SystemServices::LARGE_INTEGER PerJobUserTimeLimit;
        uint64_t JobMemory;
        uint64_t JobMemoryLimit;
        Windows::Win32::SystemServices::JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
        Windows::Win32::SystemServices::JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlToleranceLimit;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2
    {
        union _Anonymous1_e__Union
        {
            uint64_t JobHighMemoryLimit;
            uint64_t JobMemoryLimit;
        };
        union _Anonymous2_e__Union
        {
            Windows::Win32::SystemServices::JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
            Windows::Win32::SystemServices::JOBOBJECT_RATE_CONTROL_TOLERANCE CpuRateControlTolerance;
        };
        union _Anonymous3_e__Union
        {
            Windows::Win32::SystemServices::JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlToleranceLimit;
            Windows::Win32::SystemServices::JOBOBJECT_RATE_CONTROL_TOLERANCE CpuRateControlToleranceLimit;
        };
        uint32_t LimitFlags;
        uint32_t ViolationLimitFlags;
        uint64_t IoReadBytes;
        uint64_t IoReadBytesLimit;
        uint64_t IoWriteBytes;
        uint64_t IoWriteBytesLimit;
        Windows::Win32::SystemServices::LARGE_INTEGER PerJobUserTime;
        Windows::Win32::SystemServices::LARGE_INTEGER PerJobUserTimeLimit;
        uint64_t JobMemory;
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
        _Anonymous3_e__Union Anonymous3;
        uint64_t JobLowMemoryLimit;
        Windows::Win32::SystemServices::JOBOBJECT_RATE_CONTROL_TOLERANCE IoRateControlTolerance;
        Windows::Win32::SystemServices::JOBOBJECT_RATE_CONTROL_TOLERANCE IoRateControlToleranceLimit;
        Windows::Win32::SystemServices::JOBOBJECT_RATE_CONTROL_TOLERANCE NetRateControlTolerance;
        Windows::Win32::SystemServices::JOBOBJECT_RATE_CONTROL_TOLERANCE NetRateControlToleranceLimit;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct JOBOBJECT_CPU_RATE_CONTROL_INFORMATION
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint16_t MinRate;
                uint16_t MaxRate;
            };
            uint32_t CpuRate;
            uint32_t Weight;
            _Anonymous_e__Struct Anonymous;
        };
        uint32_t ControlFlags;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct JOBOBJECT_NET_RATE_CONTROL_INFORMATION
    {
        uint64_t MaxBandwidth;
        Windows::Win32::SystemServices::JOB_OBJECT_NET_RATE_CONTROL_FLAGS ControlFlags;
        uint8_t DscpTag;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE
    {
        int64_t MaxIops;
        int64_t MaxBandwidth;
        int64_t ReservationIops;
        uint16_t* VolumeName;
        uint32_t BaseIoSize;
        Windows::Win32::SystemServices::JOB_OBJECT_IO_RATE_CONTROL_FLAGS ControlFlags;
        uint16_t VolumeNameLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2
    {
        int64_t MaxIops;
        int64_t MaxBandwidth;
        int64_t ReservationIops;
        uint16_t* VolumeName;
        uint32_t BaseIoSize;
        Windows::Win32::SystemServices::JOB_OBJECT_IO_RATE_CONTROL_FLAGS ControlFlags;
        uint16_t VolumeNameLength;
        int64_t CriticalReservationIops;
        int64_t ReservationBandwidth;
        int64_t CriticalReservationBandwidth;
        int64_t MaxTimePercent;
        int64_t ReservationTimePercent;
        int64_t CriticalReservationTimePercent;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3
    {
        int64_t MaxIops;
        int64_t MaxBandwidth;
        int64_t ReservationIops;
        uint16_t* VolumeName;
        uint32_t BaseIoSize;
        Windows::Win32::SystemServices::JOB_OBJECT_IO_RATE_CONTROL_FLAGS ControlFlags;
        uint16_t VolumeNameLength;
        int64_t CriticalReservationIops;
        int64_t ReservationBandwidth;
        int64_t CriticalReservationBandwidth;
        int64_t MaxTimePercent;
        int64_t ReservationTimePercent;
        int64_t CriticalReservationTimePercent;
        int64_t SoftMaxIops;
        int64_t SoftMaxBandwidth;
        int64_t SoftMaxTimePercent;
        int64_t LimitExcessNotifyIops;
        int64_t LimitExcessNotifyBandwidth;
        int64_t LimitExcessNotifyTimePercent;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct JOBOBJECT_IO_ATTRIBUTION_STATS
    {
        size_t IoCount;
        uint64_t TotalNonOverlappedQueueTime;
        uint64_t TotalNonOverlappedServiceTime;
        uint64_t TotalSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct JOBOBJECT_IO_ATTRIBUTION_INFORMATION
    {
        uint32_t ControlFlags;
        Windows::Win32::SystemServices::JOBOBJECT_IO_ATTRIBUTION_STATS ReadStats;
        Windows::Win32::SystemServices::JOBOBJECT_IO_ATTRIBUTION_STATS WriteStats;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SILOOBJECT_BASIC_INFORMATION
    {
        uint32_t SiloId;
        uint32_t SiloParentId;
        uint32_t NumberOfProcesses;
        uint8_t IsInServerSilo;
        uint8_t Reserved[3];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SERVERSILO_BASIC_INFORMATION
    {
        uint32_t ServiceSessionId;
        Windows::Win32::SystemServices::SERVERSILO_STATE State;
        uint32_t ExitStatus;
        uint8_t IsDownlevelContainer;
        void* ApiSetSchema;
        void* HostApiSetSchema;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct CACHE_DESCRIPTOR
    {
        uint8_t Level;
        uint8_t Associativity;
        uint16_t LineSize;
        uint32_t Size;
        Windows::Win32::SystemServices::PROCESSOR_CACHE_TYPE Type;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SYSTEM_LOGICAL_PROCESSOR_INFORMATION
    {
        union _Anonymous_e__Union
        {
            struct _ProcessorCore_e__Struct
            {
                uint8_t Flags;
            };
            struct _NumaNode_e__Struct
            {
                uint32_t NodeNumber;
            };
            _ProcessorCore_e__Struct ProcessorCore;
            _NumaNode_e__Struct NumaNode;
            Windows::Win32::SystemServices::CACHE_DESCRIPTOR Cache;
            uint64_t Reserved[2];
        };
        size_t ProcessorMask;
        Windows::Win32::SystemServices::LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct GROUP_AFFINITY
    {
        size_t Mask;
        uint16_t Group;
        uint16_t Reserved[3];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PROCESSOR_RELATIONSHIP
    {
        uint8_t Flags;
        uint8_t EfficiencyClass;
        uint8_t Reserved[20];
        uint16_t GroupCount;
        Windows::Win32::SystemServices::GROUP_AFFINITY GroupMask[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct NUMA_NODE_RELATIONSHIP
    {
        uint32_t NodeNumber;
        uint8_t Reserved[20];
        Windows::Win32::SystemServices::GROUP_AFFINITY GroupMask;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct CACHE_RELATIONSHIP
    {
        uint8_t Level;
        uint8_t Associativity;
        uint16_t LineSize;
        uint32_t CacheSize;
        Windows::Win32::SystemServices::PROCESSOR_CACHE_TYPE Type;
        uint8_t Reserved[20];
        Windows::Win32::SystemServices::GROUP_AFFINITY GroupMask;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PROCESSOR_GROUP_INFO
    {
        uint8_t MaximumProcessorCount;
        uint8_t ActiveProcessorCount;
        uint8_t Reserved[38];
        size_t ActiveProcessorMask;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct GROUP_RELATIONSHIP
    {
        uint16_t MaximumGroupCount;
        uint16_t ActiveGroupCount;
        uint8_t Reserved[20];
        Windows::Win32::SystemServices::PROCESSOR_GROUP_INFO GroupInfo[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::SystemServices::PROCESSOR_RELATIONSHIP Processor;
            Windows::Win32::SystemServices::NUMA_NODE_RELATIONSHIP NumaNode;
            Windows::Win32::SystemServices::CACHE_RELATIONSHIP Cache;
            Windows::Win32::SystemServices::GROUP_RELATIONSHIP Group;
        };
        Windows::Win32::SystemServices::LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
        uint32_t Size;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SYSTEM_CPU_SET_INFORMATION
    {
        union _Anonymous_e__Union
        {
            struct _CpuSet_e__Struct
            {
                union _Anonymous1_e__Union
                {
                    struct _Anonymous_e__Struct
                    {
                        uint8_t _bitfield;
                    };
                    uint8_t AllFlags;
                    _Anonymous_e__Struct Anonymous;
                };
                union _Anonymous2_e__Union
                {
                    uint32_t Reserved;
                    uint8_t SchedulingClass;
                };
                uint32_t Id;
                uint16_t Group;
                uint8_t LogicalProcessorIndex;
                uint8_t CoreIndex;
                uint8_t LastLevelCacheIndex;
                uint8_t NumaNodeIndex;
                uint8_t EfficiencyClass;
                _Anonymous1_e__Union Anonymous1;
                _Anonymous2_e__Union Anonymous2;
                uint64_t AllocationTag;
            };
            _CpuSet_e__Struct CpuSet;
        };
        uint32_t Size;
        Windows::Win32::SystemServices::CPU_SET_INFORMATION_TYPE Type;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION
    {
        uint64_t CycleTime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct XSTATE_FEATURE
    {
        uint32_t Offset;
        uint32_t Size;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct XSTATE_CONFIGURATION
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t _bitfield;
            };
            uint32_t ControlFlags;
            _Anonymous_e__Struct Anonymous;
        };
        uint64_t EnabledFeatures;
        uint64_t EnabledVolatileFeatures;
        uint32_t Size;
        _Anonymous_e__Union Anonymous;
        Windows::Win32::SystemServices::XSTATE_FEATURE Features[64];
        uint64_t EnabledSupervisorFeatures;
        uint64_t AlignedFeatures;
        uint32_t AllFeatureSize;
        uint32_t AllFeatures[64];
        uint64_t EnabledUserVisibleSupervisorFeatures;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct MEMORY_BASIC_INFORMATION
    {
        void* BaseAddress;
        void* AllocationBase;
        uint32_t AllocationProtect;
        size_t RegionSize;
        uint32_t State;
        uint32_t Protect;
        uint32_t Type;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct MEMORY_BASIC_INFORMATION32
    {
        uint32_t BaseAddress;
        uint32_t AllocationBase;
        uint32_t AllocationProtect;
        uint32_t RegionSize;
        uint32_t State;
        uint32_t Protect;
        uint32_t Type;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct MEMORY_BASIC_INFORMATION64
    {
        uint64_t BaseAddress;
        uint64_t AllocationBase;
        uint32_t AllocationProtect;
        uint32_t __alignment1;
        uint64_t RegionSize;
        uint32_t State;
        uint32_t Protect;
        uint32_t Type;
        uint32_t __alignment2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct CFG_CALL_TARGET_INFO
    {
        size_t Offset;
        size_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct MEM_ADDRESS_REQUIREMENTS
    {
        void* LowestStartingAddress;
        void* HighestEndingAddress;
        size_t Alignment;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct MEM_EXTENDED_PARAMETER
    {
        struct _Anonymous1_e__Struct
        {
            uint64_t _bitfield;
        };
        union _Anonymous2_e__Union
        {
            uint64_t ULong64;
            void* Pointer;
            size_t Size;
            Windows::Win32::SystemServices::HANDLE Handle;
            uint32_t ULong;
        };
        _Anonymous1_e__Struct Anonymous1;
        _Anonymous2_e__Union Anonymous2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct ENCLAVE_CREATE_INFO_SGX
    {
        uint8_t Secs[4096];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct ENCLAVE_INIT_INFO_SGX
    {
        uint8_t SigStruct[1808];
        uint8_t Reserved1[240];
        uint8_t EInitToken[304];
        uint8_t Reserved2[1744];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct ENCLAVE_CREATE_INFO_VBS
    {
        uint32_t Flags;
        uint8_t OwnerID[32];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct ENCLAVE_CREATE_INFO_VBS_BASIC
    {
        uint32_t Flags;
        uint8_t OwnerID[32];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct ENCLAVE_LOAD_DATA_VBS_BASIC
    {
        uint32_t PageType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct ENCLAVE_INIT_INFO_VBS_BASIC
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::SystemServices::HANDLE SignatureInfoHandle;
            uint64_t Unused;
        };
        uint8_t FamilyId[16];
        uint8_t ImageId[16];
        uint64_t EnclaveSize;
        uint32_t EnclaveSvn;
        uint32_t Reserved;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct ENCLAVE_INIT_INFO_VBS
    {
        uint32_t Length;
        uint32_t ThreadCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    union FILE_SEGMENT_ELEMENT
    {
        void* Buffer;
        uint64_t Alignment;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SCRUB_DATA_INPUT
    {
        uint32_t Size;
        uint32_t Flags;
        uint32_t MaximumIos;
        uint32_t ObjectId[4];
        uint32_t Reserved[25];
        uint8_t ResumeContext[816];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SCRUB_PARITY_EXTENT
    {
        int64_t Offset;
        uint64_t Length;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SCRUB_PARITY_EXTENT_DATA
    {
        uint16_t Size;
        uint16_t Flags;
        uint16_t NumberOfParityExtents;
        uint16_t MaximumNumberOfParityExtents;
        Windows::Win32::SystemServices::SCRUB_PARITY_EXTENT ParityExtents[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SCRUB_DATA_OUTPUT
    {
        uint32_t Size;
        uint32_t Flags;
        uint32_t Status;
        uint64_t ErrorFileOffset;
        uint64_t ErrorLength;
        uint64_t NumberOfBytesRepaired;
        uint64_t NumberOfBytesFailed;
        uint64_t InternalFileReference;
        uint16_t ResumeContextLength;
        uint16_t ParityExtentDataOffset;
        uint32_t Reserved[9];
        uint64_t NumberOfMetadataBytesProcessed;
        uint64_t NumberOfDataBytesProcessed;
        uint64_t TotalNumberOfMetadataBytesInUse;
        uint64_t TotalNumberOfDataBytesInUse;
        uint8_t ResumeContext[816];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SHARED_VIRTUAL_DISK_SUPPORT
    {
        Windows::Win32::SystemServices::SharedVirtualDiskSupportType SharedVirtualDiskSupport;
        Windows::Win32::SystemServices::SharedVirtualDiskHandleState HandleState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct REARRANGE_FILE_DATA
    {
        uint64_t SourceStartingOffset;
        uint64_t TargetOffset;
        Windows::Win32::SystemServices::HANDLE SourceFileHandle;
        uint32_t Length;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SHUFFLE_FILE_DATA
    {
        int64_t StartingOffset;
        int64_t Length;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct NETWORK_APP_INSTANCE_EA
    {
        ::win32::guid AppInstanceID;
        uint32_t CsvFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct CM_Power_Data_s
    {
        uint32_t PD_Size;
        Windows::Win32::SystemServices::DEVICE_POWER_STATE PD_MostRecentPowerState;
        uint32_t PD_Capabilities;
        uint32_t PD_D1Latency;
        uint32_t PD_D2Latency;
        uint32_t PD_D3Latency;
        Windows::Win32::SystemServices::DEVICE_POWER_STATE PD_PowerStateMapping[7];
        Windows::Win32::SystemServices::SYSTEM_POWER_STATE PD_DeepestSystemWake;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct POWER_USER_PRESENCE
    {
        Windows::Win32::SystemServices::POWER_USER_PRESENCE_TYPE UserPresence;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct POWER_SESSION_CONNECT
    {
        uint8_t Connected;
        uint8_t Console;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct POWER_SESSION_TIMEOUTS
    {
        uint32_t InputTimeout;
        uint32_t DisplayTimeout;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct POWER_SESSION_RIT_STATE
    {
        uint8_t Active;
        uint32_t LastInputTime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct POWER_SESSION_WINLOGON
    {
        uint32_t SessionId;
        uint8_t Console;
        uint8_t Locked;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES
    {
        uint8_t IsAllowed;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct POWER_IDLE_RESILIENCY
    {
        uint32_t CoalescingTimeout;
        uint32_t IdleResiliencyPeriod;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct POWER_MONITOR_INVOCATION
    {
        uint8_t Console;
        Windows::Win32::SystemServices::POWER_MONITOR_REQUEST_REASON RequestReason;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct RESUME_PERFORMANCE
    {
        uint32_t PostTimeMs;
        uint64_t TotalResumeTimeMs;
        uint64_t ResumeCompleteTimestamp;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SET_POWER_SETTING_VALUE
    {
        uint32_t Version;
        ::win32::guid Guid;
        Windows::Win32::SystemServices::SYSTEM_POWER_CONDITION PowerCondition;
        uint32_t DataLength;
        uint8_t Data[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct NOTIFY_USER_POWER_SETTING
    {
        ::win32::guid Guid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct APPLICATIONLAUNCH_SETTING_VALUE
    {
        Windows::Win32::SystemServices::LARGE_INTEGER ActivationTime;
        uint32_t Flags;
        uint32_t ButtonInstanceID;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct POWER_PLATFORM_INFORMATION
    {
        uint8_t AoAc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct BATTERY_REPORTING_SCALE
    {
        uint32_t Granularity;
        uint32_t Capacity;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PPM_WMI_LEGACY_PERFSTATE
    {
        uint32_t Frequency;
        uint32_t Flags;
        uint32_t PercentFrequency;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PPM_WMI_IDLE_STATE
    {
        uint32_t Latency;
        uint32_t Power;
        uint32_t TimeCheck;
        uint8_t PromotePercent;
        uint8_t DemotePercent;
        uint8_t StateType;
        uint8_t Reserved;
        uint32_t StateFlags;
        uint32_t Context;
        uint32_t IdleHandler;
        uint32_t Reserved1;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PPM_WMI_IDLE_STATES
    {
        uint32_t Type;
        uint32_t Count;
        uint32_t TargetState;
        uint32_t OldState;
        uint64_t TargetProcessors;
        Windows::Win32::SystemServices::PPM_WMI_IDLE_STATE State[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PPM_WMI_IDLE_STATES_EX
    {
        uint32_t Type;
        uint32_t Count;
        uint32_t TargetState;
        uint32_t OldState;
        void* TargetProcessors;
        Windows::Win32::SystemServices::PPM_WMI_IDLE_STATE State[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PPM_WMI_PERF_STATE
    {
        uint32_t Frequency;
        uint32_t Power;
        uint8_t PercentFrequency;
        uint8_t IncreaseLevel;
        uint8_t DecreaseLevel;
        uint8_t Type;
        uint32_t IncreaseTime;
        uint32_t DecreaseTime;
        uint64_t Control;
        uint64_t Status;
        uint32_t HitCount;
        uint32_t Reserved1;
        uint64_t Reserved2;
        uint64_t Reserved3;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PPM_WMI_PERF_STATES
    {
        uint32_t Count;
        uint32_t MaxFrequency;
        uint32_t CurrentState;
        uint32_t MaxPerfState;
        uint32_t MinPerfState;
        uint32_t LowestPerfState;
        uint32_t ThermalConstraint;
        uint8_t BusyAdjThreshold;
        uint8_t PolicyType;
        uint8_t Type;
        uint8_t Reserved;
        uint32_t TimerInterval;
        uint64_t TargetProcessors;
        uint32_t PStateHandler;
        uint32_t PStateContext;
        uint32_t TStateHandler;
        uint32_t TStateContext;
        uint32_t FeedbackHandler;
        uint32_t Reserved1;
        uint64_t Reserved2;
        Windows::Win32::SystemServices::PPM_WMI_PERF_STATE State[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PPM_WMI_PERF_STATES_EX
    {
        uint32_t Count;
        uint32_t MaxFrequency;
        uint32_t CurrentState;
        uint32_t MaxPerfState;
        uint32_t MinPerfState;
        uint32_t LowestPerfState;
        uint32_t ThermalConstraint;
        uint8_t BusyAdjThreshold;
        uint8_t PolicyType;
        uint8_t Type;
        uint8_t Reserved;
        uint32_t TimerInterval;
        void* TargetProcessors;
        uint32_t PStateHandler;
        uint32_t PStateContext;
        uint32_t TStateHandler;
        uint32_t TStateContext;
        uint32_t FeedbackHandler;
        uint32_t Reserved1;
        uint64_t Reserved2;
        Windows::Win32::SystemServices::PPM_WMI_PERF_STATE State[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PPM_IDLE_STATE_ACCOUNTING
    {
        uint32_t IdleTransitions;
        uint32_t FailedTransitions;
        uint32_t InvalidBucketIndex;
        uint64_t TotalTime;
        uint32_t IdleTimeBuckets[6];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PPM_IDLE_ACCOUNTING
    {
        uint32_t StateCount;
        uint32_t TotalTransitions;
        uint32_t ResetCount;
        uint64_t StartTime;
        Windows::Win32::SystemServices::PPM_IDLE_STATE_ACCOUNTING State[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PPM_IDLE_STATE_BUCKET_EX
    {
        uint64_t TotalTimeUs;
        uint32_t MinTimeUs;
        uint32_t MaxTimeUs;
        uint32_t Count;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PPM_IDLE_STATE_ACCOUNTING_EX
    {
        uint64_t TotalTime;
        uint32_t IdleTransitions;
        uint32_t FailedTransitions;
        uint32_t InvalidBucketIndex;
        uint32_t MinTimeUs;
        uint32_t MaxTimeUs;
        uint32_t CancelledTransitions;
        Windows::Win32::SystemServices::PPM_IDLE_STATE_BUCKET_EX IdleTimeBuckets[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PPM_IDLE_ACCOUNTING_EX
    {
        uint32_t StateCount;
        uint32_t TotalTransitions;
        uint32_t ResetCount;
        uint32_t AbortCount;
        uint64_t StartTime;
        Windows::Win32::SystemServices::PPM_IDLE_STATE_ACCOUNTING_EX State[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PPM_PERFSTATE_EVENT
    {
        uint32_t State;
        uint32_t Status;
        uint32_t Latency;
        uint32_t Speed;
        uint32_t Processor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PPM_PERFSTATE_DOMAIN_EVENT
    {
        uint32_t State;
        uint32_t Latency;
        uint32_t Speed;
        uint64_t Processors;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PPM_IDLESTATE_EVENT
    {
        uint32_t NewState;
        uint32_t OldState;
        uint64_t Processors;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PPM_THERMALCHANGE_EVENT
    {
        uint32_t ThermalConstraint;
        uint64_t Processors;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PPM_THERMAL_POLICY_EVENT
    {
        uint8_t Mode;
        uint64_t Processors;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct POWER_ACTION_POLICY
    {
        Windows::Win32::SystemServices::POWER_ACTION Action;
        uint32_t Flags;
        uint32_t EventCode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SYSTEM_POWER_LEVEL
    {
        uint8_t Enable;
        uint8_t Spare[3];
        uint32_t BatteryLevel;
        Windows::Win32::SystemServices::POWER_ACTION_POLICY PowerPolicy;
        Windows::Win32::SystemServices::SYSTEM_POWER_STATE MinSystemState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SYSTEM_POWER_POLICY
    {
        uint32_t Revision;
        Windows::Win32::SystemServices::POWER_ACTION_POLICY PowerButton;
        Windows::Win32::SystemServices::POWER_ACTION_POLICY SleepButton;
        Windows::Win32::SystemServices::POWER_ACTION_POLICY LidClose;
        Windows::Win32::SystemServices::SYSTEM_POWER_STATE LidOpenWake;
        uint32_t Reserved;
        Windows::Win32::SystemServices::POWER_ACTION_POLICY Idle;
        uint32_t IdleTimeout;
        uint8_t IdleSensitivity;
        uint8_t DynamicThrottle;
        uint8_t Spare2[2];
        Windows::Win32::SystemServices::SYSTEM_POWER_STATE MinSleep;
        Windows::Win32::SystemServices::SYSTEM_POWER_STATE MaxSleep;
        Windows::Win32::SystemServices::SYSTEM_POWER_STATE ReducedLatencySleep;
        uint32_t WinLogonFlags;
        uint32_t Spare3;
        uint32_t DozeS4Timeout;
        uint32_t BroadcastCapacityResolution;
        Windows::Win32::SystemServices::SYSTEM_POWER_LEVEL DischargePolicy[4];
        uint32_t VideoTimeout;
        uint8_t VideoDimDisplay;
        uint32_t VideoReserved[3];
        uint32_t SpindownTimeout;
        uint8_t OptimizeForPower;
        uint8_t FanThrottleTolerance;
        uint8_t ForcedThrottle;
        uint8_t MinThrottle;
        Windows::Win32::SystemServices::POWER_ACTION_POLICY OverThrottled;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PROCESSOR_IDLESTATE_INFO
    {
        uint32_t TimeCheck;
        uint8_t DemotePercent;
        uint8_t PromotePercent;
        uint8_t Spare[2];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PROCESSOR_IDLESTATE_POLICY
    {
        union _Flags_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint16_t _bitfield;
            };
            uint16_t AsWORD;
            _Anonymous_e__Struct Anonymous;
        };
        uint16_t Revision;
        _Flags_e__Union Flags;
        uint32_t PolicyCount;
        Windows::Win32::SystemServices::PROCESSOR_IDLESTATE_INFO Policy[3];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PROCESSOR_POWER_POLICY_INFO
    {
        uint32_t TimeCheck;
        uint32_t DemoteLimit;
        uint32_t PromoteLimit;
        uint8_t DemotePercent;
        uint8_t PromotePercent;
        uint8_t Spare[2];
        uint32_t _bitfield;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PROCESSOR_POWER_POLICY
    {
        uint32_t Revision;
        uint8_t DynamicThrottle;
        uint8_t Spare[3];
        uint32_t _bitfield;
        uint32_t PolicyCount;
        Windows::Win32::SystemServices::PROCESSOR_POWER_POLICY_INFO Policy[3];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PROCESSOR_PERFSTATE_POLICY
    {
        union _Anonymous_e__Union
        {
            union _Flags_e__Union
            {
                struct _Anonymous_e__Struct
                {
                    uint8_t _bitfield;
                };
                uint8_t AsBYTE;
                _Anonymous_e__Struct Anonymous;
            };
            uint8_t Spare;
            _Flags_e__Union Flags;
        };
        uint32_t Revision;
        uint8_t MaxThrottle;
        uint8_t MinThrottle;
        uint8_t BusyAdjThreshold;
        _Anonymous_e__Union Anonymous;
        uint32_t TimeCheck;
        uint32_t IncreaseTime;
        uint32_t DecreaseTime;
        uint32_t IncreasePercent;
        uint32_t DecreasePercent;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct ADMINISTRATOR_POWER_POLICY
    {
        Windows::Win32::SystemServices::SYSTEM_POWER_STATE MinSleep;
        Windows::Win32::SystemServices::SYSTEM_POWER_STATE MaxSleep;
        uint32_t MinVideoTimeout;
        uint32_t MaxVideoTimeout;
        uint32_t MinSpindownTimeout;
        uint32_t MaxSpindownTimeout;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct HIBERFILE_BUCKET
    {
        uint64_t MaxPhysicalMemory;
        uint32_t PhysicalMemoryPercent[3];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SYSTEM_POWER_CAPABILITIES
    {
        uint8_t PowerButtonPresent;
        uint8_t SleepButtonPresent;
        uint8_t LidPresent;
        uint8_t SystemS1;
        uint8_t SystemS2;
        uint8_t SystemS3;
        uint8_t SystemS4;
        uint8_t SystemS5;
        uint8_t HiberFilePresent;
        uint8_t FullWake;
        uint8_t VideoDimPresent;
        uint8_t ApmPresent;
        uint8_t UpsPresent;
        uint8_t ThermalControl;
        uint8_t ProcessorThrottle;
        uint8_t ProcessorMinThrottle;
        uint8_t ProcessorMaxThrottle;
        uint8_t FastSystemS4;
        uint8_t Hiberboot;
        uint8_t WakeAlarmPresent;
        uint8_t AoAc;
        uint8_t DiskSpinDown;
        uint8_t HiberFileType;
        uint8_t AoAcConnectivitySupported;
        uint8_t spare3[6];
        uint8_t SystemBatteriesPresent;
        uint8_t BatteriesAreShortTerm;
        Windows::Win32::SystemServices::BATTERY_REPORTING_SCALE BatteryScale[3];
        Windows::Win32::SystemServices::SYSTEM_POWER_STATE AcOnLineWake;
        Windows::Win32::SystemServices::SYSTEM_POWER_STATE SoftLidWake;
        Windows::Win32::SystemServices::SYSTEM_POWER_STATE RtcWake;
        Windows::Win32::SystemServices::SYSTEM_POWER_STATE MinDeviceWakeState;
        Windows::Win32::SystemServices::SYSTEM_POWER_STATE DefaultLowLatencyWake;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SYSTEM_BATTERY_STATE
    {
        uint8_t AcOnLine;
        uint8_t BatteryPresent;
        uint8_t Charging;
        uint8_t Discharging;
        uint8_t Spare1[3];
        uint8_t Tag;
        uint32_t MaxCapacity;
        uint32_t RemainingCapacity;
        uint32_t Rate;
        uint32_t EstimatedTime;
        uint32_t DefaultAlert1;
        uint32_t DefaultAlert2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IMAGE_DOS_HEADER
    {
        uint16_t e_magic;
        uint16_t e_cblp;
        uint16_t e_cp;
        uint16_t e_crlc;
        uint16_t e_cparhdr;
        uint16_t e_minalloc;
        uint16_t e_maxalloc;
        uint16_t e_ss;
        uint16_t e_sp;
        uint16_t e_csum;
        uint16_t e_ip;
        uint16_t e_cs;
        uint16_t e_lfarlc;
        uint16_t e_ovno;
        uint16_t e_res[4];
        uint16_t e_oemid;
        uint16_t e_oeminfo;
        uint16_t e_res2[10];
        int32_t e_lfanew;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IMAGE_OS2_HEADER
    {
        uint16_t ne_magic;
        int8_t ne_ver;
        int8_t ne_rev;
        uint16_t ne_enttab;
        uint16_t ne_cbenttab;
        int32_t ne_crc;
        uint16_t ne_flags;
        uint16_t ne_autodata;
        uint16_t ne_heap;
        uint16_t ne_stack;
        int32_t ne_csip;
        int32_t ne_sssp;
        uint16_t ne_cseg;
        uint16_t ne_cmod;
        uint16_t ne_cbnrestab;
        uint16_t ne_segtab;
        uint16_t ne_rsrctab;
        uint16_t ne_restab;
        uint16_t ne_modtab;
        uint16_t ne_imptab;
        int32_t ne_nrestab;
        uint16_t ne_cmovent;
        uint16_t ne_align;
        uint16_t ne_cres;
        uint8_t ne_exetyp;
        uint8_t ne_flagsothers;
        uint16_t ne_pretthunks;
        uint16_t ne_psegrefbytes;
        uint16_t ne_swaparea;
        uint16_t ne_expver;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IMAGE_VXD_HEADER
    {
        uint16_t e32_magic;
        uint8_t e32_border;
        uint8_t e32_worder;
        uint32_t e32_level;
        uint16_t e32_cpu;
        uint16_t e32_os;
        uint32_t e32_ver;
        uint32_t e32_mflags;
        uint32_t e32_mpages;
        uint32_t e32_startobj;
        uint32_t e32_eip;
        uint32_t e32_stackobj;
        uint32_t e32_esp;
        uint32_t e32_pagesize;
        uint32_t e32_lastpagesize;
        uint32_t e32_fixupsize;
        uint32_t e32_fixupsum;
        uint32_t e32_ldrsize;
        uint32_t e32_ldrsum;
        uint32_t e32_objtab;
        uint32_t e32_objcnt;
        uint32_t e32_objmap;
        uint32_t e32_itermap;
        uint32_t e32_rsrctab;
        uint32_t e32_rsrccnt;
        uint32_t e32_restab;
        uint32_t e32_enttab;
        uint32_t e32_dirtab;
        uint32_t e32_dircnt;
        uint32_t e32_fpagetab;
        uint32_t e32_frectab;
        uint32_t e32_impmod;
        uint32_t e32_impmodcnt;
        uint32_t e32_impproc;
        uint32_t e32_pagesum;
        uint32_t e32_datapage;
        uint32_t e32_preload;
        uint32_t e32_nrestab;
        uint32_t e32_cbnrestab;
        uint32_t e32_nressum;
        uint32_t e32_autodata;
        uint32_t e32_debuginfo;
        uint32_t e32_debuglen;
        uint32_t e32_instpreload;
        uint32_t e32_instdemand;
        uint32_t e32_heapsize;
        uint8_t e32_res3[12];
        uint32_t e32_winresoff;
        uint32_t e32_winreslen;
        uint16_t e32_devid;
        uint16_t e32_ddkver;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct IMAGE_DATA_DIRECTORY
    {
        uint32_t VirtualAddress;
        uint32_t Size;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IMAGE_OPTIONAL_HEADER
    {
        uint16_t Magic;
        uint8_t MajorLinkerVersion;
        uint8_t MinorLinkerVersion;
        uint32_t SizeOfCode;
        uint32_t SizeOfInitializedData;
        uint32_t SizeOfUninitializedData;
        uint32_t AddressOfEntryPoint;
        uint32_t BaseOfCode;
        uint32_t BaseOfData;
        uint32_t ImageBase;
        uint32_t SectionAlignment;
        uint32_t FileAlignment;
        uint16_t MajorOperatingSystemVersion;
        uint16_t MinorOperatingSystemVersion;
        uint16_t MajorImageVersion;
        uint16_t MinorImageVersion;
        uint16_t MajorSubsystemVersion;
        uint16_t MinorSubsystemVersion;
        uint32_t Win32VersionValue;
        uint32_t SizeOfImage;
        uint32_t SizeOfHeaders;
        uint32_t CheckSum;
        uint16_t Subsystem;
        uint16_t DllCharacteristics;
        uint32_t SizeOfStackReserve;
        uint32_t SizeOfStackCommit;
        uint32_t SizeOfHeapReserve;
        uint32_t SizeOfHeapCommit;
        uint32_t LoaderFlags;
        uint32_t NumberOfRvaAndSizes;
        Windows::Win32::Debug::IMAGE_DATA_DIRECTORY DataDirectory[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IMAGE_ROM_OPTIONAL_HEADER
    {
        uint16_t Magic;
        uint8_t MajorLinkerVersion;
        uint8_t MinorLinkerVersion;
        uint32_t SizeOfCode;
        uint32_t SizeOfInitializedData;
        uint32_t SizeOfUninitializedData;
        uint32_t AddressOfEntryPoint;
        uint32_t BaseOfCode;
        uint32_t BaseOfData;
        uint32_t BaseOfBss;
        uint32_t GprMask;
        uint32_t CprMask[4];
        uint32_t GpValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct IMAGE_FILE_HEADER
    {
        uint16_t Machine;
        uint16_t NumberOfSections;
        uint32_t TimeDateStamp;
        uint32_t PointerToSymbolTable;
        uint32_t NumberOfSymbols;
        uint16_t SizeOfOptionalHeader;
        uint16_t Characteristics;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IMAGE_NT_HEADERS
    {
        uint32_t Signature;
        Windows::Win32::Debug::IMAGE_FILE_HEADER FileHeader;
        Windows::Win32::SystemServices::IMAGE_OPTIONAL_HEADER OptionalHeader;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IMAGE_ROM_HEADERS
    {
        Windows::Win32::Debug::IMAGE_FILE_HEADER FileHeader;
        Windows::Win32::SystemServices::IMAGE_ROM_OPTIONAL_HEADER OptionalHeader;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct ANON_OBJECT_HEADER
    {
        uint16_t Sig1;
        uint16_t Sig2;
        uint16_t Version;
        uint16_t Machine;
        uint32_t TimeDateStamp;
        ::win32::guid ClassID;
        uint32_t SizeOfData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct ANON_OBJECT_HEADER_V2
    {
        uint16_t Sig1;
        uint16_t Sig2;
        uint16_t Version;
        uint16_t Machine;
        uint32_t TimeDateStamp;
        ::win32::guid ClassID;
        uint32_t SizeOfData;
        uint32_t Flags;
        uint32_t MetaDataSize;
        uint32_t MetaDataOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct ANON_OBJECT_HEADER_BIGOBJ
    {
        uint16_t Sig1;
        uint16_t Sig2;
        uint16_t Version;
        uint16_t Machine;
        uint32_t TimeDateStamp;
        ::win32::guid ClassID;
        uint32_t SizeOfData;
        uint32_t Flags;
        uint32_t MetaDataSize;
        uint32_t MetaDataOffset;
        uint32_t NumberOfSections;
        uint32_t PointerToSymbolTable;
        uint32_t NumberOfSymbols;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IMAGE_SYMBOL
    {
        union _N_e__Union
        {
            struct _Name_e__Struct
            {
                uint32_t Short;
                uint32_t Long;
            };
            uint8_t ShortName[8];
            _Name_e__Struct Name;
            uint32_t LongName[2];
        };
        _N_e__Union N;
        uint32_t Value;
        int16_t SectionNumber;
        uint16_t Type;
        uint8_t StorageClass;
        uint8_t NumberOfAuxSymbols;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IMAGE_SYMBOL_EX
    {
        union _N_e__Union
        {
            struct _Name_e__Struct
            {
                uint32_t Short;
                uint32_t Long;
            };
            uint8_t ShortName[8];
            _Name_e__Struct Name;
            uint32_t LongName[2];
        };
        _N_e__Union N;
        uint32_t Value;
        int32_t SectionNumber;
        uint16_t Type;
        uint8_t StorageClass;
        uint8_t NumberOfAuxSymbols;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IMAGE_AUX_SYMBOL_TOKEN_DEF
    {
        uint8_t bAuxType;
        uint8_t bReserved;
        uint32_t SymbolTableIndex;
        uint8_t rgbReserved[12];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    union IMAGE_AUX_SYMBOL
    {
        struct _Sym_e__Struct
        {
            union _Misc_e__Union
            {
                struct _LnSz_e__Struct
                {
                    uint16_t Linenumber;
                    uint16_t Size;
                };
                _LnSz_e__Struct LnSz;
                uint32_t TotalSize;
            };
            union _FcnAry_e__Union
            {
                struct _Function_e__Struct
                {
                    uint32_t PointerToLinenumber;
                    uint32_t PointerToNextFunction;
                };
                struct _Array_e__Struct
                {
                    uint16_t Dimension[4];
                };
                _Function_e__Struct Function;
                _Array_e__Struct Array;
            };
            uint32_t TagIndex;
            _Misc_e__Union Misc;
            _FcnAry_e__Union FcnAry;
            uint16_t TvIndex;
        };
        struct _File_e__Struct
        {
            uint8_t Name[18];
        };
        struct _Section_e__Struct
        {
            uint32_t Length;
            uint16_t NumberOfRelocations;
            uint16_t NumberOfLinenumbers;
            uint32_t CheckSum;
            int16_t Number;
            uint8_t Selection;
            uint8_t bReserved;
            int16_t HighNumber;
        };
        struct _CRC_e__Struct
        {
            uint32_t crc;
            uint8_t rgbReserved[14];
        };
        _Sym_e__Struct Sym;
        _File_e__Struct File;
        _Section_e__Struct Section;
        Windows::Win32::SystemServices::IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;
        _CRC_e__Struct CRC;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    union IMAGE_AUX_SYMBOL_EX
    {
        struct _Sym_e__Struct
        {
            uint32_t WeakDefaultSymIndex;
            uint32_t WeakSearchType;
            uint8_t rgbReserved[12];
        };
        struct _File_e__Struct
        {
            uint8_t Name[20];
        };
        struct _Section_e__Struct
        {
            uint32_t Length;
            uint16_t NumberOfRelocations;
            uint16_t NumberOfLinenumbers;
            uint32_t CheckSum;
            int16_t Number;
            uint8_t Selection;
            uint8_t bReserved;
            int16_t HighNumber;
            uint8_t rgbReserved[2];
        };
        struct _Anonymous_e__Struct
        {
            Windows::Win32::SystemServices::IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;
            uint8_t rgbReserved[2];
        };
        struct _CRC_e__Struct
        {
            uint32_t crc;
            uint8_t rgbReserved[16];
        };
        _Sym_e__Struct Sym;
        _File_e__Struct File;
        _Section_e__Struct Section;
        _Anonymous_e__Struct Anonymous;
        _CRC_e__Struct CRC;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IMAGE_RELOCATION
    {
        union _Anonymous_e__Union
        {
            uint32_t VirtualAddress;
            uint32_t RelocCount;
        };
        _Anonymous_e__Union Anonymous;
        uint32_t SymbolTableIndex;
        uint16_t Type;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IMAGE_LINENUMBER
    {
        union _Type_e__Union
        {
            uint32_t SymbolTableIndex;
            uint32_t VirtualAddress;
        };
        _Type_e__Union Type;
        uint16_t Linenumber;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IMAGE_BASE_RELOCATION
    {
        uint32_t VirtualAddress;
        uint32_t SizeOfBlock;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IMAGE_ARCHIVE_MEMBER_HEADER
    {
        uint8_t Name[16];
        uint8_t Date[12];
        uint8_t UserID[6];
        uint8_t GroupID[6];
        uint8_t Mode[8];
        uint8_t Size[10];
        uint8_t EndHeader[2];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IMAGE_EXPORT_DIRECTORY
    {
        uint32_t Characteristics;
        uint32_t TimeDateStamp;
        uint16_t MajorVersion;
        uint16_t MinorVersion;
        uint32_t Name;
        uint32_t Base;
        uint32_t NumberOfFunctions;
        uint32_t NumberOfNames;
        uint32_t AddressOfFunctions;
        uint32_t AddressOfNames;
        uint32_t AddressOfNameOrdinals;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IMAGE_IMPORT_BY_NAME
    {
        uint16_t Hint;
        int8_t Name[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IMAGE_THUNK_DATA64
    {
        union _u1_e__Union
        {
            uint64_t ForwarderString;
            uint64_t Function;
            uint64_t Ordinal;
            uint64_t AddressOfData;
        };
        _u1_e__Union u1;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IMAGE_THUNK_DATA32
    {
        union _u1_e__Union
        {
            uint32_t ForwarderString;
            uint32_t Function;
            uint32_t Ordinal;
            uint32_t AddressOfData;
        };
        _u1_e__Union u1;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IMAGE_TLS_DIRECTORY64
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t _bitfield;
            };
            uint32_t Characteristics;
            _Anonymous_e__Struct Anonymous;
        };
        uint64_t StartAddressOfRawData;
        uint64_t EndAddressOfRawData;
        uint64_t AddressOfIndex;
        uint64_t AddressOfCallBacks;
        uint32_t SizeOfZeroFill;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IMAGE_TLS_DIRECTORY32
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t _bitfield;
            };
            uint32_t Characteristics;
            _Anonymous_e__Struct Anonymous;
        };
        uint32_t StartAddressOfRawData;
        uint32_t EndAddressOfRawData;
        uint32_t AddressOfIndex;
        uint32_t AddressOfCallBacks;
        uint32_t SizeOfZeroFill;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IMAGE_IMPORT_DESCRIPTOR
    {
        union _Anonymous_e__Union
        {
            uint32_t Characteristics;
            uint32_t OriginalFirstThunk;
        };
        _Anonymous_e__Union Anonymous;
        uint32_t TimeDateStamp;
        uint32_t ForwarderChain;
        uint32_t Name;
        uint32_t FirstThunk;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IMAGE_BOUND_IMPORT_DESCRIPTOR
    {
        uint32_t TimeDateStamp;
        uint16_t OffsetModuleName;
        uint16_t NumberOfModuleForwarderRefs;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IMAGE_BOUND_FORWARDER_REF
    {
        uint32_t TimeDateStamp;
        uint16_t OffsetModuleName;
        uint16_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IMAGE_DELAYLOAD_DESCRIPTOR
    {
        union _Attributes_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t _bitfield;
            };
            uint32_t AllAttributes;
            _Anonymous_e__Struct Anonymous;
        };
        _Attributes_e__Union Attributes;
        uint32_t DllNameRVA;
        uint32_t ModuleHandleRVA;
        uint32_t ImportAddressTableRVA;
        uint32_t ImportNameTableRVA;
        uint32_t BoundImportAddressTableRVA;
        uint32_t UnloadInformationTableRVA;
        uint32_t TimeDateStamp;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IMAGE_RESOURCE_DIRECTORY
    {
        uint32_t Characteristics;
        uint32_t TimeDateStamp;
        uint16_t MajorVersion;
        uint16_t MinorVersion;
        uint16_t NumberOfNamedEntries;
        uint16_t NumberOfIdEntries;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IMAGE_RESOURCE_DIRECTORY_ENTRY
    {
        union _Anonymous1_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t _bitfield;
            };
            _Anonymous_e__Struct Anonymous;
            uint32_t Name;
            uint16_t Id;
        };
        union _Anonymous2_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t _bitfield;
            };
            uint32_t OffsetToData;
            _Anonymous_e__Struct Anonymous;
        };
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IMAGE_RESOURCE_DIRECTORY_STRING
    {
        uint16_t Length;
        int8_t NameString[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IMAGE_RESOURCE_DIR_STRING_U
    {
        uint16_t Length;
        uint16_t NameString[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IMAGE_RESOURCE_DATA_ENTRY
    {
        uint32_t OffsetToData;
        uint32_t Size;
        uint32_t CodePage;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IMAGE_LOAD_CONFIG_CODE_INTEGRITY
    {
        uint16_t Flags;
        uint16_t Catalog;
        uint32_t CatalogOffset;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IMAGE_DYNAMIC_RELOCATION_TABLE
    {
        uint32_t Version;
        uint32_t Size;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IMAGE_DYNAMIC_RELOCATION32
    {
        uint32_t Symbol;
        uint32_t BaseRelocSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IMAGE_DYNAMIC_RELOCATION64
    {
        uint64_t Symbol;
        uint32_t BaseRelocSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IMAGE_DYNAMIC_RELOCATION32_V2
    {
        uint32_t HeaderSize;
        uint32_t FixupInfoSize;
        uint32_t Symbol;
        uint32_t SymbolGroup;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IMAGE_DYNAMIC_RELOCATION64_V2
    {
        uint32_t HeaderSize;
        uint32_t FixupInfoSize;
        uint64_t Symbol;
        uint32_t SymbolGroup;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER
    {
        uint8_t PrologueByteCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER
    {
        uint32_t EpilogueCount;
        uint8_t EpilogueByteCount;
        uint8_t BranchDescriptorElementSize;
        uint16_t BranchDescriptorCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION
    {
        uint32_t _bitfield;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION
    {
        uint16_t _bitfield;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION
    {
        uint16_t _bitfield;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IMAGE_HOT_PATCH_INFO
    {
        uint32_t Version;
        uint32_t Size;
        uint32_t SequenceNumber;
        uint32_t BaseImageList;
        uint32_t BaseImageCount;
        uint32_t BufferOffset;
        uint32_t ExtraPatchSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IMAGE_HOT_PATCH_BASE
    {
        uint32_t SequenceNumber;
        uint32_t Flags;
        uint32_t OriginalTimeDateStamp;
        uint32_t OriginalCheckSum;
        uint32_t CodeIntegrityInfo;
        uint32_t CodeIntegritySize;
        uint32_t PatchTable;
        uint32_t BufferOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IMAGE_HOT_PATCH_HASHES
    {
        uint8_t SHA256[32];
        uint8_t SHA1[20];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IMAGE_CE_RUNTIME_FUNCTION_ENTRY
    {
        uint32_t FuncStart;
        uint32_t _bitfield;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IMAGE_ARM_RUNTIME_FUNCTION_ENTRY
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t _bitfield;
            };
            uint32_t UnwindData;
            _Anonymous_e__Struct Anonymous;
        };
        uint32_t BeginAddress;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t _bitfield;
            };
            uint32_t UnwindData;
            _Anonymous_e__Struct Anonymous;
        };
        uint32_t BeginAddress;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    union IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA
    {
        struct _Anonymous_e__Struct
        {
            uint32_t _bitfield;
        };
        uint32_t HeaderData;
        _Anonymous_e__Struct Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY
    {
        uint64_t BeginAddress;
        uint64_t EndAddress;
        uint64_t ExceptionHandler;
        uint64_t HandlerData;
        uint64_t PrologEndAddress;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY
    {
        uint32_t BeginAddress;
        uint32_t EndAddress;
        uint32_t ExceptionHandler;
        uint32_t HandlerData;
        uint32_t PrologEndAddress;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IMAGE_RUNTIME_FUNCTION_ENTRY
    {
        union _Anonymous_e__Union
        {
            uint32_t UnwindInfoAddress;
            uint32_t UnwindData;
        };
        uint32_t BeginAddress;
        uint32_t EndAddress;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IMAGE_ENCLAVE_CONFIG32
    {
        uint32_t Size;
        uint32_t MinimumRequiredConfigSize;
        uint32_t PolicyFlags;
        uint32_t NumberOfImports;
        uint32_t ImportList;
        uint32_t ImportEntrySize;
        uint8_t FamilyID[16];
        uint8_t ImageID[16];
        uint32_t ImageVersion;
        uint32_t SecurityVersion;
        uint32_t EnclaveSize;
        uint32_t NumberOfThreads;
        uint32_t EnclaveFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IMAGE_ENCLAVE_CONFIG64
    {
        uint32_t Size;
        uint32_t MinimumRequiredConfigSize;
        uint32_t PolicyFlags;
        uint32_t NumberOfImports;
        uint32_t ImportList;
        uint32_t ImportEntrySize;
        uint8_t FamilyID[16];
        uint8_t ImageID[16];
        uint32_t ImageVersion;
        uint32_t SecurityVersion;
        uint64_t EnclaveSize;
        uint32_t NumberOfThreads;
        uint32_t EnclaveFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IMAGE_ENCLAVE_IMPORT
    {
        uint32_t MatchType;
        uint32_t MinimumSecurityVersion;
        uint8_t UniqueOrAuthorID[32];
        uint8_t FamilyID[16];
        uint8_t ImageID[16];
        uint32_t ImportName;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IMAGE_DEBUG_MISC
    {
        uint32_t DataType;
        uint32_t Length;
        uint8_t Unicode;
        uint8_t Reserved[3];
        uint8_t Data[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IMAGE_SEPARATE_DEBUG_HEADER
    {
        uint16_t Signature;
        uint16_t Flags;
        uint16_t Machine;
        uint16_t Characteristics;
        uint32_t TimeDateStamp;
        uint32_t CheckSum;
        uint32_t ImageBase;
        uint32_t SizeOfImage;
        uint32_t NumberOfSections;
        uint32_t ExportedNamesSize;
        uint32_t DebugDirectorySize;
        uint32_t SectionAlignment;
        uint32_t Reserved[2];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct NON_PAGED_DEBUG_INFO
    {
        uint16_t Signature;
        uint16_t Flags;
        uint32_t Size;
        uint16_t Machine;
        uint16_t Characteristics;
        uint32_t TimeDateStamp;
        uint32_t CheckSum;
        uint32_t SizeOfImage;
        uint64_t ImageBase;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IMAGE_ARCHITECTURE_HEADER
    {
        uint32_t _bitfield;
        uint32_t FirstEntryRVA;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IMAGE_ARCHITECTURE_ENTRY
    {
        uint32_t FixupInstRVA;
        uint32_t NewInst;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IMPORT_OBJECT_HEADER
    {
        union _Anonymous_e__Union
        {
            uint16_t Ordinal;
            uint16_t Hint;
        };
        uint16_t Sig1;
        uint16_t Sig2;
        uint16_t Version;
        uint16_t Machine;
        uint32_t TimeDateStamp;
        uint32_t SizeOfData;
        _Anonymous_e__Union Anonymous;
        uint16_t _bitfield;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IMAGE_COR20_HEADER
    {
        union _Anonymous_e__Union
        {
            uint32_t EntryPointToken;
            uint32_t EntryPointRVA;
        };
        uint32_t cb;
        uint16_t MajorRuntimeVersion;
        uint16_t MinorRuntimeVersion;
        Windows::Win32::Debug::IMAGE_DATA_DIRECTORY MetaData;
        uint32_t Flags;
        _Anonymous_e__Union Anonymous;
        Windows::Win32::Debug::IMAGE_DATA_DIRECTORY Resources;
        Windows::Win32::Debug::IMAGE_DATA_DIRECTORY StrongNameSignature;
        Windows::Win32::Debug::IMAGE_DATA_DIRECTORY CodeManagerTable;
        Windows::Win32::Debug::IMAGE_DATA_DIRECTORY VTableFixups;
        Windows::Win32::Debug::IMAGE_DATA_DIRECTORY ExportAddressTableJumps;
        Windows::Win32::Debug::IMAGE_DATA_DIRECTORY ManagedNativeHeader;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Kernel
{
    struct SINGLE_LIST_ENTRY
    {
        Windows::Win32::Kernel::SINGLE_LIST_ENTRY* Next;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    union SLIST_HEADER
    {
        struct _Anonymous_e__Struct
        {
            Windows::Win32::Kernel::SINGLE_LIST_ENTRY Next;
            uint16_t Depth;
            uint16_t CpuId;
        };
        uint64_t Alignment;
        _Anonymous_e__Struct Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    union RTL_RUN_ONCE
    {
        void* Ptr;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct RTL_BARRIER
    {
        uint32_t Reserved1;
        uint32_t Reserved2;
        size_t Reserved3[2];
        uint32_t Reserved4;
        uint32_t Reserved5;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct NV_MEMORY_RANGE
    {
        void* BaseAddress;
        size_t Length;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct CORRELATION_VECTOR
    {
        int8_t Version;
        int8_t Vector[129];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG
    {
        uint32_t Size;
        uint16_t* TriggerId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IMAGE_POLICY_ENTRY
    {
        union _u_e__Union
        {
            void* None;
            uint8_t BoolValue;
            int8_t Int8Value;
            uint8_t UInt8Value;
            int16_t Int16Value;
            uint16_t UInt16Value;
            int32_t Int32Value;
            uint32_t UInt32Value;
            int64_t Int64Value;
            uint64_t UInt64Value;
            int8_t* AnsiStringValue;
            uint16_t* UnicodeStringValue;
        };
        Windows::Win32::SystemServices::IMAGE_POLICY_ENTRY_TYPE Type;
        Windows::Win32::SystemServices::IMAGE_POLICY_ID PolicyId;
        _u_e__Union u;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IMAGE_POLICY_METADATA
    {
        uint8_t Version;
        uint8_t Reserved0[7];
        uint64_t ApplicationId;
        Windows::Win32::SystemServices::IMAGE_POLICY_ENTRY Policies;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Kernel
{
    struct LIST_ENTRY
    {
        Windows::Win32::Kernel::LIST_ENTRY* Flink;
        Windows::Win32::Kernel::LIST_ENTRY* Blink;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct RTL_CRITICAL_SECTION_DEBUG
    {
        uint16_t Type;
        uint16_t CreatorBackTraceIndex;
        Windows::Win32::SystemServices::RTL_CRITICAL_SECTION* CriticalSection;
        Windows::Win32::Kernel::LIST_ENTRY ProcessLocksList;
        uint32_t EntryCount;
        uint32_t ContentionCount;
        uint32_t Flags;
        uint16_t CreatorBackTraceIndexHigh;
        uint16_t SpareWORD;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct RTL_CRITICAL_SECTION
    {
        Windows::Win32::SystemServices::RTL_CRITICAL_SECTION_DEBUG* DebugInfo;
        int32_t LockCount;
        int32_t RecursionCount;
        Windows::Win32::SystemServices::HANDLE OwningThread;
        Windows::Win32::SystemServices::HANDLE LockSemaphore;
        size_t SpinCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct RTL_SRWLOCK
    {
        void* Ptr;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct RTL_CONDITION_VARIABLE
    {
        void* Ptr;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct HEAP_OPTIMIZE_RESOURCES_INFORMATION
    {
        uint32_t Version;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SUPPORTED_OS_INFO
    {
        uint16_t MajorVersion;
        uint16_t MinorVersion;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct MAXVERSIONTESTED_INFO
    {
        uint64_t MaxVersionTested;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct EVENTLOGRECORD
    {
        uint32_t Length;
        uint32_t Reserved;
        uint32_t RecordNumber;
        uint32_t TimeGenerated;
        uint32_t TimeWritten;
        uint32_t EventID;
        uint16_t EventType;
        uint16_t NumStrings;
        uint16_t EventCategory;
        uint16_t ReservedFlags;
        uint32_t ClosingRecordNumber;
        uint32_t StringOffset;
        uint32_t UserSidLength;
        uint32_t UserSidOffset;
        uint32_t DataLength;
        uint32_t DataOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct EVENTSFORLOGFILE
    {
        uint32_t ulSize;
        uint16_t szLogicalLogFile[256];
        uint32_t ulNumRecords;
        Windows::Win32::SystemServices::EVENTLOGRECORD pEventLogRecords;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PACKEDEVENTINFO
    {
        uint32_t ulSize;
        uint32_t ulNumEventsForLogFile;
        uint32_t ulOffsets;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct TAPE_ERASE
    {
        uint32_t Type;
        uint8_t Immediate;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct TAPE_PREPARE
    {
        uint32_t Operation;
        uint8_t Immediate;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct TAPE_WRITE_MARKS
    {
        uint32_t Type;
        uint32_t Count;
        uint8_t Immediate;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct TAPE_GET_POSITION
    {
        uint32_t Type;
        uint32_t Partition;
        Windows::Win32::SystemServices::LARGE_INTEGER Offset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct TAPE_SET_POSITION
    {
        uint32_t Method;
        uint32_t Partition;
        Windows::Win32::SystemServices::LARGE_INTEGER Offset;
        uint8_t Immediate;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct TAPE_GET_DRIVE_PARAMETERS
    {
        uint8_t ECC;
        uint8_t Compression;
        uint8_t DataPadding;
        uint8_t ReportSetmarks;
        uint32_t DefaultBlockSize;
        uint32_t MaximumBlockSize;
        uint32_t MinimumBlockSize;
        uint32_t MaximumPartitionCount;
        uint32_t FeaturesLow;
        uint32_t FeaturesHigh;
        uint32_t EOTWarningZoneSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct TAPE_SET_DRIVE_PARAMETERS
    {
        uint8_t ECC;
        uint8_t Compression;
        uint8_t DataPadding;
        uint8_t ReportSetmarks;
        uint32_t EOTWarningZoneSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct TAPE_GET_MEDIA_PARAMETERS
    {
        Windows::Win32::SystemServices::LARGE_INTEGER Capacity;
        Windows::Win32::SystemServices::LARGE_INTEGER Remaining;
        uint32_t BlockSize;
        uint32_t PartitionCount;
        uint8_t WriteProtected;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct TAPE_SET_MEDIA_PARAMETERS
    {
        uint32_t BlockSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct TAPE_CREATE_PARTITION
    {
        uint32_t Method;
        uint32_t Count;
        uint32_t Size;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct TAPE_WMI_OPERATIONS
    {
        uint32_t Method;
        uint32_t DataBufferSize;
        void* DataBuffer;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct TRANSACTION_BASIC_INFORMATION
    {
        ::win32::guid TransactionId;
        uint32_t State;
        uint32_t Outcome;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct TRANSACTIONMANAGER_BASIC_INFORMATION
    {
        ::win32::guid TmIdentity;
        Windows::Win32::SystemServices::LARGE_INTEGER VirtualClock;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct TRANSACTIONMANAGER_LOG_INFORMATION
    {
        ::win32::guid LogIdentity;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct TRANSACTIONMANAGER_LOGPATH_INFORMATION
    {
        uint32_t LogPathLength;
        uint16_t LogPath[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct TRANSACTIONMANAGER_RECOVERY_INFORMATION
    {
        uint64_t LastRecoveredLsn;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct TRANSACTIONMANAGER_OLDEST_INFORMATION
    {
        ::win32::guid OldestTransactionGuid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct TRANSACTION_PROPERTIES_INFORMATION
    {
        uint32_t IsolationLevel;
        uint32_t IsolationFlags;
        Windows::Win32::SystemServices::LARGE_INTEGER Timeout;
        uint32_t Outcome;
        uint32_t DescriptionLength;
        uint16_t Description[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct TRANSACTION_BIND_INFORMATION
    {
        Windows::Win32::SystemServices::HANDLE TmHandle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct TRANSACTION_ENLISTMENT_PAIR
    {
        ::win32::guid EnlistmentId;
        ::win32::guid ResourceManagerId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct TRANSACTION_ENLISTMENTS_INFORMATION
    {
        uint32_t NumberOfEnlistments;
        Windows::Win32::SystemServices::TRANSACTION_ENLISTMENT_PAIR EnlistmentPair[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION
    {
        Windows::Win32::SystemServices::TRANSACTION_ENLISTMENT_PAIR SuperiorEnlistmentPair;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct RESOURCEMANAGER_BASIC_INFORMATION
    {
        ::win32::guid ResourceManagerId;
        uint32_t DescriptionLength;
        uint16_t Description[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct RESOURCEMANAGER_COMPLETION_INFORMATION
    {
        Windows::Win32::SystemServices::HANDLE IoCompletionPortHandle;
        size_t CompletionKey;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct ENLISTMENT_BASIC_INFORMATION
    {
        ::win32::guid EnlistmentId;
        ::win32::guid TransactionId;
        ::win32::guid ResourceManagerId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct ENLISTMENT_CRM_INFORMATION
    {
        ::win32::guid CrmTransactionManagerId;
        ::win32::guid CrmResourceManagerId;
        ::win32::guid CrmEnlistmentId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct TRANSACTION_LIST_ENTRY
    {
        ::win32::guid UOW;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct TRANSACTION_LIST_INFORMATION
    {
        uint32_t NumberOfTransactions;
        Windows::Win32::SystemServices::TRANSACTION_LIST_ENTRY TransactionInformation[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct KTMOBJECT_CURSOR
    {
        ::win32::guid LastQuery;
        uint32_t ObjectIdCount;
        ::win32::guid ObjectIds[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct TP_CALLBACK_INSTANCE
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct TP_POOL
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct TP_POOL_STACK_INFORMATION
    {
        size_t StackReserve;
        size_t StackCommit;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct TP_CLEANUP_GROUP
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct TP_CALLBACK_ENVIRON_V3
    {
        struct _ACTIVATION_CONTEXT
        {
        };
        union _u_e__Union
        {
            struct _s_e__Struct
            {
                uint32_t _bitfield;
            };
            uint32_t Flags;
            _s_e__Struct s;
        };
        uint32_t Version;
        Windows::Win32::SystemServices::PTP_POOL Pool;
        intptr_t CleanupGroup;
        Windows::Win32::SystemServices::PTP_CLEANUP_GROUP_CANCEL_CALLBACK* CleanupGroupCancelCallback;
        void* RaceDll;
        intptr_t ActivationContext;
        Windows::Win32::SystemServices::PTP_SIMPLE_CALLBACK* FinalizationCallback;
        _u_e__Union u;
        Windows::Win32::SystemServices::TP_CALLBACK_PRIORITY CallbackPriority;
        uint32_t Size;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct TP_WORK
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct TP_TIMER
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct TP_WAIT
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct TP_IO
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct TEB
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct HKEY__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct HMETAFILE__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct HINSTANCE__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct HRGN__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct HRSRC__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct HSPRITE__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct HLSURF__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct HSTR__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct HTASK__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct HWINSTA__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct HKL__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct HWND__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct HHOOK__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct HACCEL__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct HBITMAP__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct HBRUSH__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct HCOLORSPACE__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct HDC__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct HGLRC__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct HDESK__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct HENHMETAFILE__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct HFONT__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct HICON__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct HMENU__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct HPALETTE__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct HPEN__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct HWINEVENTHOOK__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct HMONITOR__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct HUMPD__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct APP_LOCAL_DEVICE_ID
    {
        uint8_t value[32];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DPI_AWARENESS_CONTEXT__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION
    {
        int64_t MaxIops;
        int64_t MaxBandwidth;
        int64_t ReservationIops;
        uint16_t* VolumeName;
        uint32_t BaseIoSize;
        uint32_t ControlFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct CONTEXT
    {
        uint32_t ContextFlags;
        uint32_t Dr0;
        uint32_t Dr1;
        uint32_t Dr2;
        uint32_t Dr3;
        uint32_t Dr6;
        uint32_t Dr7;
        Windows::Win32::SystemServices::FLOATING_SAVE_AREA FloatSave;
        uint32_t SegGs;
        uint32_t SegFs;
        uint32_t SegEs;
        uint32_t SegDs;
        uint32_t Edi;
        uint32_t Esi;
        uint32_t Ebx;
        uint32_t Edx;
        uint32_t Ecx;
        uint32_t Eax;
        uint32_t Ebp;
        uint32_t Eip;
        uint32_t SegCs;
        uint32_t EFlags;
        uint32_t Esp;
        uint32_t SegSs;
        uint8_t ExtendedRegisters[512];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct LDT_ENTRY
    {
        union _HighWord_e__Union
        {
            struct _Bytes_e__Struct
            {
                uint8_t BaseMid;
                uint8_t Flags1;
                uint8_t Flags2;
                uint8_t BaseHi;
            };
            struct _Bits_e__Struct
            {
                uint32_t _bitfield;
            };
            _Bytes_e__Struct Bytes;
            _Bits_e__Struct Bits;
        };
        uint16_t LimitLow;
        uint16_t BaseLow;
        _HighWord_e__Union HighWord;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct WOW64_FLOATING_SAVE_AREA
    {
        uint32_t ControlWord;
        uint32_t StatusWord;
        uint32_t TagWord;
        uint32_t ErrorOffset;
        uint32_t ErrorSelector;
        uint32_t DataOffset;
        uint32_t DataSelector;
        uint8_t RegisterArea[80];
        uint32_t Cr0NpxState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct WOW64_CONTEXT
    {
        uint32_t ContextFlags;
        uint32_t Dr0;
        uint32_t Dr1;
        uint32_t Dr2;
        uint32_t Dr3;
        uint32_t Dr6;
        uint32_t Dr7;
        Windows::Win32::Debug::WOW64_FLOATING_SAVE_AREA FloatSave;
        uint32_t SegGs;
        uint32_t SegFs;
        uint32_t SegEs;
        uint32_t SegDs;
        uint32_t Edi;
        uint32_t Esi;
        uint32_t Ebx;
        uint32_t Edx;
        uint32_t Ecx;
        uint32_t Eax;
        uint32_t Ebp;
        uint32_t Eip;
        uint32_t SegCs;
        uint32_t EFlags;
        uint32_t Esp;
        uint32_t SegSs;
        uint8_t ExtendedRegisters[512];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct EXCEPTION_RECORD
    {
        uint32_t ExceptionCode;
        uint32_t ExceptionFlags;
        Windows::Win32::Debug::EXCEPTION_RECORD* ExceptionRecord;
        void* ExceptionAddress;
        uint32_t NumberParameters;
        size_t ExceptionInformation[15];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct EXCEPTION_RECORD64
    {
        uint32_t ExceptionCode;
        uint32_t ExceptionFlags;
        uint64_t ExceptionRecord;
        uint64_t ExceptionAddress;
        uint32_t NumberParameters;
        uint32_t __unusedAlignment;
        uint64_t ExceptionInformation[15];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct EXCEPTION_POINTERS
    {
        Windows::Win32::Debug::EXCEPTION_RECORD* ExceptionRecord;
        Windows::Win32::Debug::CONTEXT* ContextRecord;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct IMAGE_OPTIONAL_HEADER64
    {
        uint16_t Magic;
        uint8_t MajorLinkerVersion;
        uint8_t MinorLinkerVersion;
        uint32_t SizeOfCode;
        uint32_t SizeOfInitializedData;
        uint32_t SizeOfUninitializedData;
        uint32_t AddressOfEntryPoint;
        uint32_t BaseOfCode;
        uint64_t ImageBase;
        uint32_t SectionAlignment;
        uint32_t FileAlignment;
        uint16_t MajorOperatingSystemVersion;
        uint16_t MinorOperatingSystemVersion;
        uint16_t MajorImageVersion;
        uint16_t MinorImageVersion;
        uint16_t MajorSubsystemVersion;
        uint16_t MinorSubsystemVersion;
        uint32_t Win32VersionValue;
        uint32_t SizeOfImage;
        uint32_t SizeOfHeaders;
        uint32_t CheckSum;
        uint16_t Subsystem;
        uint16_t DllCharacteristics;
        uint64_t SizeOfStackReserve;
        uint64_t SizeOfStackCommit;
        uint64_t SizeOfHeapReserve;
        uint64_t SizeOfHeapCommit;
        uint32_t LoaderFlags;
        uint32_t NumberOfRvaAndSizes;
        Windows::Win32::Debug::IMAGE_DATA_DIRECTORY DataDirectory[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct IMAGE_NT_HEADERS64
    {
        uint32_t Signature;
        Windows::Win32::Debug::IMAGE_FILE_HEADER FileHeader;
        Windows::Win32::Debug::IMAGE_OPTIONAL_HEADER64 OptionalHeader;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct IMAGE_SECTION_HEADER
    {
        union _Misc_e__Union
        {
            uint32_t PhysicalAddress;
            uint32_t VirtualSize;
        };
        uint8_t Name[8];
        _Misc_e__Union Misc;
        uint32_t VirtualAddress;
        uint32_t SizeOfRawData;
        uint32_t PointerToRawData;
        uint32_t PointerToRelocations;
        uint32_t PointerToLinenumbers;
        uint16_t NumberOfRelocations;
        uint16_t NumberOfLinenumbers;
        uint32_t Characteristics;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct IMAGE_LOAD_CONFIG_DIRECTORY32
    {
        uint32_t Size;
        uint32_t TimeDateStamp;
        uint16_t MajorVersion;
        uint16_t MinorVersion;
        uint32_t GlobalFlagsClear;
        uint32_t GlobalFlagsSet;
        uint32_t CriticalSectionDefaultTimeout;
        uint32_t DeCommitFreeBlockThreshold;
        uint32_t DeCommitTotalFreeThreshold;
        uint32_t LockPrefixTable;
        uint32_t MaximumAllocationSize;
        uint32_t VirtualMemoryThreshold;
        uint32_t ProcessHeapFlags;
        uint32_t ProcessAffinityMask;
        uint16_t CSDVersion;
        uint16_t DependentLoadFlags;
        uint32_t EditList;
        uint32_t SecurityCookie;
        uint32_t SEHandlerTable;
        uint32_t SEHandlerCount;
        uint32_t GuardCFCheckFunctionPointer;
        uint32_t GuardCFDispatchFunctionPointer;
        uint32_t GuardCFFunctionTable;
        uint32_t GuardCFFunctionCount;
        uint32_t GuardFlags;
        Windows::Win32::SystemServices::IMAGE_LOAD_CONFIG_CODE_INTEGRITY CodeIntegrity;
        uint32_t GuardAddressTakenIatEntryTable;
        uint32_t GuardAddressTakenIatEntryCount;
        uint32_t GuardLongJumpTargetTable;
        uint32_t GuardLongJumpTargetCount;
        uint32_t DynamicValueRelocTable;
        uint32_t CHPEMetadataPointer;
        uint32_t GuardRFFailureRoutine;
        uint32_t GuardRFFailureRoutineFunctionPointer;
        uint32_t DynamicValueRelocTableOffset;
        uint16_t DynamicValueRelocTableSection;
        uint16_t Reserved2;
        uint32_t GuardRFVerifyStackPointerFunctionPointer;
        uint32_t HotPatchTableOffset;
        uint32_t Reserved3;
        uint32_t EnclaveConfigurationPointer;
        uint32_t VolatileMetadataPointer;
        uint32_t GuardEHContinuationTable;
        uint32_t GuardEHContinuationCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct IMAGE_LOAD_CONFIG_DIRECTORY64
    {
        uint32_t Size;
        uint32_t TimeDateStamp;
        uint16_t MajorVersion;
        uint16_t MinorVersion;
        uint32_t GlobalFlagsClear;
        uint32_t GlobalFlagsSet;
        uint32_t CriticalSectionDefaultTimeout;
        uint64_t DeCommitFreeBlockThreshold;
        uint64_t DeCommitTotalFreeThreshold;
        uint64_t LockPrefixTable;
        uint64_t MaximumAllocationSize;
        uint64_t VirtualMemoryThreshold;
        uint64_t ProcessAffinityMask;
        uint32_t ProcessHeapFlags;
        uint16_t CSDVersion;
        uint16_t DependentLoadFlags;
        uint64_t EditList;
        uint64_t SecurityCookie;
        uint64_t SEHandlerTable;
        uint64_t SEHandlerCount;
        uint64_t GuardCFCheckFunctionPointer;
        uint64_t GuardCFDispatchFunctionPointer;
        uint64_t GuardCFFunctionTable;
        uint64_t GuardCFFunctionCount;
        uint32_t GuardFlags;
        Windows::Win32::SystemServices::IMAGE_LOAD_CONFIG_CODE_INTEGRITY CodeIntegrity;
        uint64_t GuardAddressTakenIatEntryTable;
        uint64_t GuardAddressTakenIatEntryCount;
        uint64_t GuardLongJumpTargetTable;
        uint64_t GuardLongJumpTargetCount;
        uint64_t DynamicValueRelocTable;
        uint64_t CHPEMetadataPointer;
        uint64_t GuardRFFailureRoutine;
        uint64_t GuardRFFailureRoutineFunctionPointer;
        uint32_t DynamicValueRelocTableOffset;
        uint16_t DynamicValueRelocTableSection;
        uint16_t Reserved2;
        uint64_t GuardRFVerifyStackPointerFunctionPointer;
        uint32_t HotPatchTableOffset;
        uint32_t Reserved3;
        uint64_t EnclaveConfigurationPointer;
        uint64_t VolatileMetadataPointer;
        uint64_t GuardEHContinuationTable;
        uint64_t GuardEHContinuationCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct IMAGE_DEBUG_DIRECTORY
    {
        uint32_t Characteristics;
        uint32_t TimeDateStamp;
        uint16_t MajorVersion;
        uint16_t MinorVersion;
        uint32_t Type;
        uint32_t SizeOfData;
        uint32_t AddressOfRawData;
        uint32_t PointerToRawData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct IMAGE_COFF_SYMBOLS_HEADER
    {
        uint32_t NumberOfSymbols;
        uint32_t LvaToFirstSymbol;
        uint32_t NumberOfLinenumbers;
        uint32_t LvaToFirstLinenumber;
        uint32_t RvaToFirstByteOfCode;
        uint32_t RvaToLastByteOfCode;
        uint32_t RvaToFirstByteOfData;
        uint32_t RvaToLastByteOfData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct FPO_DATA
    {
        uint32_t ulOffStart;
        uint32_t cbProcSize;
        uint32_t cdwLocals;
        uint16_t cdwParams;
        uint16_t _bitfield;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct IMAGE_FUNCTION_ENTRY
    {
        uint32_t StartingAddress;
        uint32_t EndingAddress;
        uint32_t EndOfPrologue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct IMAGE_FUNCTION_ENTRY64
    {
        union _Anonymous_e__Union
        {
            uint64_t EndOfPrologue;
            uint64_t UnwindInfoAddress;
        };
        uint64_t StartingAddress;
        uint64_t EndingAddress;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct GENERIC_MAPPING
    {
        uint32_t GenericRead;
        uint32_t GenericWrite;
        uint32_t GenericExecute;
        uint32_t GenericAll;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct LUID_AND_ATTRIBUTES
    {
        Windows::Win32::Kernel::LUID Luid;
        uint32_t Attributes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SID_AND_ATTRIBUTES_HASH
    {
        uint32_t SidCount;
        Windows::Win32::Security::SID_AND_ATTRIBUTES* SidAttr;
        size_t Hash[32];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct ACL
    {
        uint8_t AclRevision;
        uint8_t Sbz1;
        uint16_t AclSize;
        uint16_t AceCount;
        uint16_t Sbz2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct ACCESS_ALLOWED_ACE
    {
        Windows::Win32::Security::ACE_HEADER Header;
        uint32_t Mask;
        uint32_t SidStart;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct ACCESS_DENIED_ACE
    {
        Windows::Win32::Security::ACE_HEADER Header;
        uint32_t Mask;
        uint32_t SidStart;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SYSTEM_AUDIT_ACE
    {
        Windows::Win32::Security::ACE_HEADER Header;
        uint32_t Mask;
        uint32_t SidStart;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SYSTEM_ALARM_ACE
    {
        Windows::Win32::Security::ACE_HEADER Header;
        uint32_t Mask;
        uint32_t SidStart;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SYSTEM_RESOURCE_ATTRIBUTE_ACE
    {
        Windows::Win32::Security::ACE_HEADER Header;
        uint32_t Mask;
        uint32_t SidStart;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SYSTEM_SCOPED_POLICY_ID_ACE
    {
        Windows::Win32::Security::ACE_HEADER Header;
        uint32_t Mask;
        uint32_t SidStart;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SYSTEM_MANDATORY_LABEL_ACE
    {
        Windows::Win32::Security::ACE_HEADER Header;
        uint32_t Mask;
        uint32_t SidStart;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct ACCESS_ALLOWED_OBJECT_ACE
    {
        Windows::Win32::Security::ACE_HEADER Header;
        uint32_t Mask;
        uint32_t Flags;
        ::win32::guid ObjectType;
        ::win32::guid InheritedObjectType;
        uint32_t SidStart;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct ACCESS_DENIED_OBJECT_ACE
    {
        Windows::Win32::Security::ACE_HEADER Header;
        uint32_t Mask;
        uint32_t Flags;
        ::win32::guid ObjectType;
        ::win32::guid InheritedObjectType;
        uint32_t SidStart;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SYSTEM_AUDIT_OBJECT_ACE
    {
        Windows::Win32::Security::ACE_HEADER Header;
        uint32_t Mask;
        uint32_t Flags;
        ::win32::guid ObjectType;
        ::win32::guid InheritedObjectType;
        uint32_t SidStart;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SYSTEM_ALARM_OBJECT_ACE
    {
        Windows::Win32::Security::ACE_HEADER Header;
        uint32_t Mask;
        uint32_t Flags;
        ::win32::guid ObjectType;
        ::win32::guid InheritedObjectType;
        uint32_t SidStart;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct ACCESS_ALLOWED_CALLBACK_ACE
    {
        Windows::Win32::Security::ACE_HEADER Header;
        uint32_t Mask;
        uint32_t SidStart;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct ACCESS_DENIED_CALLBACK_ACE
    {
        Windows::Win32::Security::ACE_HEADER Header;
        uint32_t Mask;
        uint32_t SidStart;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SYSTEM_AUDIT_CALLBACK_ACE
    {
        Windows::Win32::Security::ACE_HEADER Header;
        uint32_t Mask;
        uint32_t SidStart;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SYSTEM_ALARM_CALLBACK_ACE
    {
        Windows::Win32::Security::ACE_HEADER Header;
        uint32_t Mask;
        uint32_t SidStart;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct ACCESS_ALLOWED_CALLBACK_OBJECT_ACE
    {
        Windows::Win32::Security::ACE_HEADER Header;
        uint32_t Mask;
        uint32_t Flags;
        ::win32::guid ObjectType;
        ::win32::guid InheritedObjectType;
        uint32_t SidStart;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct ACCESS_DENIED_CALLBACK_OBJECT_ACE
    {
        Windows::Win32::Security::ACE_HEADER Header;
        uint32_t Mask;
        uint32_t Flags;
        ::win32::guid ObjectType;
        ::win32::guid InheritedObjectType;
        uint32_t SidStart;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SYSTEM_AUDIT_CALLBACK_OBJECT_ACE
    {
        Windows::Win32::Security::ACE_HEADER Header;
        uint32_t Mask;
        uint32_t Flags;
        ::win32::guid ObjectType;
        ::win32::guid InheritedObjectType;
        uint32_t SidStart;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SYSTEM_ALARM_CALLBACK_OBJECT_ACE
    {
        Windows::Win32::Security::ACE_HEADER Header;
        uint32_t Mask;
        uint32_t Flags;
        ::win32::guid ObjectType;
        ::win32::guid InheritedObjectType;
        uint32_t SidStart;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct ACL_REVISION_INFORMATION
    {
        uint32_t AclRevision;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct ACL_SIZE_INFORMATION
    {
        uint32_t AceCount;
        uint32_t AclBytesInUse;
        uint32_t AclBytesFree;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SECURITY_DESCRIPTOR
    {
        uint8_t Revision;
        uint8_t Sbz1;
        uint16_t Control;
        void* Owner;
        void* Group;
        Windows::Win32::Security::ACL* Sacl;
        Windows::Win32::Security::ACL* Dacl;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct OBJECT_TYPE_LIST
    {
        uint16_t Level;
        uint16_t Sbz;
        ::win32::guid* ObjectType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct PRIVILEGE_SET
    {
        uint32_t PrivilegeCount;
        uint32_t Control;
        Windows::Win32::Security::LUID_AND_ATTRIBUTES Privilege[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct TOKEN_GROUPS
    {
        uint32_t GroupCount;
        Windows::Win32::Security::SID_AND_ATTRIBUTES Groups[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct TOKEN_PRIVILEGES
    {
        uint32_t PrivilegeCount;
        Windows::Win32::Security::LUID_AND_ATTRIBUTES Privileges[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct TOKEN_OWNER
    {
        void* Owner;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct TOKEN_PRIMARY_GROUP
    {
        void* PrimaryGroup;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct TOKEN_DEFAULT_DACL
    {
        Windows::Win32::Security::ACL* DefaultDacl;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct TOKEN_USER_CLAIMS
    {
        void* UserClaims;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct TOKEN_DEVICE_CLAIMS
    {
        void* DeviceClaims;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct TOKEN_GROUPS_AND_PRIVILEGES
    {
        uint32_t SidCount;
        uint32_t SidLength;
        Windows::Win32::Security::SID_AND_ATTRIBUTES* Sids;
        uint32_t RestrictedSidCount;
        uint32_t RestrictedSidLength;
        Windows::Win32::Security::SID_AND_ATTRIBUTES* RestrictedSids;
        uint32_t PrivilegeCount;
        uint32_t PrivilegeLength;
        Windows::Win32::Security::LUID_AND_ATTRIBUTES* Privileges;
        Windows::Win32::Kernel::LUID AuthenticationId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct TOKEN_LINKED_TOKEN
    {
        Windows::Win32::SystemServices::HANDLE LinkedToken;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct TOKEN_ELEVATION
    {
        uint32_t TokenIsElevated;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct TOKEN_MANDATORY_LABEL
    {
        Windows::Win32::Security::SID_AND_ATTRIBUTES Label;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct TOKEN_MANDATORY_POLICY
    {
        uint32_t Policy;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct TOKEN_ACCESS_INFORMATION
    {
        Windows::Win32::Security::SID_AND_ATTRIBUTES_HASH* SidHash;
        Windows::Win32::Security::SID_AND_ATTRIBUTES_HASH* RestrictedSidHash;
        Windows::Win32::Security::TOKEN_PRIVILEGES* Privileges;
        Windows::Win32::Kernel::LUID AuthenticationId;
        Windows::Win32::Security::TOKEN_TYPE TokenType;
        Windows::Win32::Security::SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
        Windows::Win32::Security::TOKEN_MANDATORY_POLICY MandatoryPolicy;
        uint32_t Flags;
        uint32_t AppContainerNumber;
        void* PackageSid;
        Windows::Win32::Security::SID_AND_ATTRIBUTES_HASH* CapabilitiesHash;
        void* TrustLevelSid;
        void* SecurityAttributes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct TOKEN_AUDIT_POLICY
    {
        uint8_t PerUserPolicy[30];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct TOKEN_SOURCE
    {
        int8_t SourceName[8];
        Windows::Win32::Kernel::LUID SourceIdentifier;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct TOKEN_STATISTICS
    {
        Windows::Win32::Kernel::LUID TokenId;
        Windows::Win32::Kernel::LUID AuthenticationId;
        Windows::Win32::SystemServices::LARGE_INTEGER ExpirationTime;
        Windows::Win32::Security::TOKEN_TYPE TokenType;
        Windows::Win32::Security::SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
        uint32_t DynamicCharged;
        uint32_t DynamicAvailable;
        uint32_t GroupCount;
        uint32_t PrivilegeCount;
        Windows::Win32::Kernel::LUID ModifiedId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct TOKEN_CONTROL
    {
        Windows::Win32::Kernel::LUID TokenId;
        Windows::Win32::Kernel::LUID AuthenticationId;
        Windows::Win32::Kernel::LUID ModifiedId;
        Windows::Win32::Security::TOKEN_SOURCE TokenSource;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct TOKEN_ORIGIN
    {
        Windows::Win32::Kernel::LUID OriginatingLogonSession;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct TOKEN_APPCONTAINER_INFORMATION
    {
        void* TokenAppContainer;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE
    {
        uint64_t Version;
        uint16_t* Name;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE
    {
        void* pValue;
        uint32_t ValueLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CLAIM_SECURITY_ATTRIBUTE_V1
    {
        union _Values_e__Union
        {
            int64_t* pInt64;
            uint64_t* pUint64;
            uint16_t** ppString;
            Windows::Win32::Security::CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE* pFqbn;
            Windows::Win32::Security::CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE* pOctetString;
        };
        uint16_t* Name;
        uint16_t ValueType;
        uint16_t Reserved;
        uint32_t Flags;
        uint32_t ValueCount;
        _Values_e__Union Values;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1
    {
        union _Values_e__Union
        {
            uint32_t pInt64[1];
            uint32_t pUint64[1];
            uint32_t ppString[1];
            uint32_t pFqbn[1];
            uint32_t pOctetString[1];
        };
        uint32_t Name;
        uint16_t ValueType;
        uint16_t Reserved;
        uint32_t Flags;
        uint32_t ValueCount;
        _Values_e__Union Values;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CLAIM_SECURITY_ATTRIBUTES_INFORMATION
    {
        union _Attribute_e__Union
        {
            Windows::Win32::Security::CLAIM_SECURITY_ATTRIBUTE_V1* pAttributeV1;
        };
        uint16_t Version;
        uint16_t Reserved;
        uint32_t AttributeCount;
        _Attribute_e__Union Attribute;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SECURITY_QUALITY_OF_SERVICE
    {
        uint32_t Length;
        Windows::Win32::Security::SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
        uint8_t ContextTrackingMode;
        uint8_t EffectiveOnly;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SECURITY_CAPABILITIES
    {
        void* AppContainerSid;
        Windows::Win32::Security::SID_AND_ATTRIBUTES* Capabilities;
        uint32_t CapabilityCount;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct QUOTA_LIMITS
    {
        size_t PagedPoolLimit;
        size_t NonPagedPoolLimit;
        size_t MinimumWorkingSetSize;
        size_t MaximumWorkingSetSize;
        size_t PagefileLimit;
        Windows::Win32::SystemServices::LARGE_INTEGER TimeLimit;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::HardwareCounterProfiling
{
    struct HARDWARE_COUNTER_DATA
    {
        Windows::Win32::HardwareCounterProfiling::HARDWARE_COUNTER_TYPE Type;
        uint32_t Reserved;
        uint64_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::HardwareCounterProfiling
{
    struct PERFORMANCE_DATA
    {
        uint16_t Size;
        uint8_t Version;
        uint8_t HwCountersCount;
        uint32_t ContextSwitchCount;
        uint64_t WaitReasonBitMap;
        uint64_t CycleTime;
        uint32_t RetryCount;
        uint32_t Reserved;
        Windows::Win32::HardwareCounterProfiling::HARDWARE_COUNTER_DATA HwCounters[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct OSVERSIONINFOA
    {
        uint32_t dwOSVersionInfoSize;
        uint32_t dwMajorVersion;
        uint32_t dwMinorVersion;
        uint32_t dwBuildNumber;
        uint32_t dwPlatformId;
        int8_t szCSDVersion[128];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct OSVERSIONINFOW
    {
        uint32_t dwOSVersionInfoSize;
        uint32_t dwMajorVersion;
        uint32_t dwMinorVersion;
        uint32_t dwBuildNumber;
        uint32_t dwPlatformId;
        uint16_t szCSDVersion[128];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct OSVERSIONINFOEXA
    {
        uint32_t dwOSVersionInfoSize;
        uint32_t dwMajorVersion;
        uint32_t dwMinorVersion;
        uint32_t dwBuildNumber;
        uint32_t dwPlatformId;
        int8_t szCSDVersion[128];
        uint16_t wServicePackMajor;
        uint16_t wServicePackMinor;
        uint16_t wSuiteMask;
        uint8_t wProductType;
        uint8_t wReserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct OSVERSIONINFOEXW
    {
        uint32_t dwOSVersionInfoSize;
        uint32_t dwMajorVersion;
        uint32_t dwMinorVersion;
        uint32_t dwBuildNumber;
        uint32_t dwPlatformId;
        uint16_t szCSDVersion[128];
        uint16_t wServicePackMajor;
        uint16_t wServicePackMinor;
        uint16_t wSuiteMask;
        uint8_t wProductType;
        uint8_t wReserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct FILE_ID_128
    {
        uint8_t Identifier[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct FILE_NOTIFY_INFORMATION
    {
        uint32_t NextEntryOffset;
        uint32_t Action;
        uint32_t FileNameLength;
        uint16_t FileName[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct FILE_NOTIFY_EXTENDED_INFORMATION
    {
        uint32_t NextEntryOffset;
        uint32_t Action;
        Windows::Win32::SystemServices::LARGE_INTEGER CreationTime;
        Windows::Win32::SystemServices::LARGE_INTEGER LastModificationTime;
        Windows::Win32::SystemServices::LARGE_INTEGER LastChangeTime;
        Windows::Win32::SystemServices::LARGE_INTEGER LastAccessTime;
        Windows::Win32::SystemServices::LARGE_INTEGER AllocatedLength;
        Windows::Win32::SystemServices::LARGE_INTEGER FileSize;
        uint32_t FileAttributes;
        uint32_t ReparsePointTag;
        Windows::Win32::SystemServices::LARGE_INTEGER FileId;
        Windows::Win32::SystemServices::LARGE_INTEGER ParentFileId;
        uint32_t FileNameLength;
        uint16_t FileName[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct REPARSE_GUID_DATA_BUFFER
    {
        struct _GenericReparseBuffer_e__Struct
        {
            uint8_t DataBuffer[1];
        };
        uint32_t ReparseTag;
        uint16_t ReparseDataLength;
        uint16_t Reserved;
        ::win32::guid ReparseGuid;
        _GenericReparseBuffer_e__Struct GenericReparseBuffer;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MenusAndResources
{
    struct MESSAGE_RESOURCE_ENTRY
    {
        uint16_t Length;
        uint16_t Flags;
        uint8_t Text[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MenusAndResources
{
    struct MESSAGE_RESOURCE_BLOCK
    {
        uint32_t LowId;
        uint32_t HighId;
        uint32_t OffsetToEntries;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MenusAndResources
{
    struct MESSAGE_RESOURCE_DATA
    {
        uint32_t NumberOfBlocks;
        Windows::Win32::MenusAndResources::MESSAGE_RESOURCE_BLOCK Blocks[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ApplicationInstallationAndServicing
{
    struct ACTIVATION_CONTEXT_QUERY_INDEX
    {
        uint32_t ulAssemblyIndex;
        uint32_t ulFileIndexInAssembly;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ApplicationInstallationAndServicing
{
    struct ASSEMBLY_FILE_DETAILED_INFORMATION
    {
        uint32_t ulFlags;
        uint32_t ulFilenameLength;
        uint32_t ulPathLength;
        uint16_t* lpFileName;
        uint16_t* lpFilePath;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ApplicationInstallationAndServicing
{
    struct ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION
    {
        uint32_t ulFlags;
        uint32_t ulEncodedAssemblyIdentityLength;
        uint32_t ulManifestPathType;
        uint32_t ulManifestPathLength;
        Windows::Win32::SystemServices::LARGE_INTEGER liManifestLastWriteTime;
        uint32_t ulPolicyPathType;
        uint32_t ulPolicyPathLength;
        Windows::Win32::SystemServices::LARGE_INTEGER liPolicyLastWriteTime;
        uint32_t ulMetadataSatelliteRosterIndex;
        uint32_t ulManifestVersionMajor;
        uint32_t ulManifestVersionMinor;
        uint32_t ulPolicyVersionMajor;
        uint32_t ulPolicyVersionMinor;
        uint32_t ulAssemblyDirectoryNameLength;
        uint16_t* lpAssemblyEncodedAssemblyIdentity;
        uint16_t* lpAssemblyManifestPath;
        uint16_t* lpAssemblyPolicyPath;
        uint16_t* lpAssemblyDirectoryName;
        uint32_t ulFileCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ApplicationInstallationAndServicing
{
    struct ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION
    {
        uint32_t ulFlags;
        Windows::Win32::ApplicationInstallationAndServicing::ACTCTX_REQUESTED_RUN_LEVEL RunLevel;
        uint32_t UiAccess;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ApplicationInstallationAndServicing
{
    struct COMPATIBILITY_CONTEXT_ELEMENT
    {
        ::win32::guid Id;
        Windows::Win32::ApplicationInstallationAndServicing::ACTCTX_COMPATIBILITY_ELEMENT_TYPE Type;
        uint64_t MaxVersionTested;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ApplicationInstallationAndServicing
{
    struct ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION
    {
        uint32_t ElementCount;
        Windows::Win32::ApplicationInstallationAndServicing::COMPATIBILITY_CONTEXT_ELEMENT Elements;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ApplicationInstallationAndServicing
{
    struct ACTIVATION_CONTEXT_DETAILED_INFORMATION
    {
        uint32_t dwFlags;
        uint32_t ulFormatVersion;
        uint32_t ulAssemblyCount;
        uint32_t ulRootManifestPathType;
        uint32_t ulRootManifestPathChars;
        uint32_t ulRootConfigurationPathType;
        uint32_t ulRootConfigurationPathChars;
        uint32_t ulAppDirPathType;
        uint32_t ulAppDirPathChars;
        uint16_t* lpRootManifestPath;
        uint16_t* lpRootConfigurationPath;
        uint16_t* lpAppDirPath;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IndexServer
{
    struct CI_STATE
    {
        uint32_t cbStruct;
        uint32_t cWordList;
        uint32_t cPersistentIndex;
        uint32_t cQueries;
        uint32_t cDocuments;
        uint32_t cFreshTest;
        uint32_t dwMergeProgress;
        uint32_t eState;
        uint32_t cFilteredDocuments;
        uint32_t cTotalDocuments;
        uint32_t cPendingScans;
        uint32_t dwIndexSize;
        uint32_t cUniqueKeys;
        uint32_t cSecQDocuments;
        uint32_t dwPropCacheSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct PROPSPEC
    {
        union _Anonymous_e__Union
        {
            uint32_t propid;
            uint16_t* lpwstr;
        };
        uint32_t ulKind;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IndexServer
{
    struct FULLPROPSPEC
    {
        ::win32::guid guidPropSet;
        Windows::Win32::StructuredStorage::PROPSPEC psProperty;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IndexServer
{
    struct FILTERREGION
    {
        uint32_t idChunk;
        uint32_t cwcStart;
        uint32_t cwcExtent;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IndexServer
{
    struct STAT_CHUNK
    {
        uint32_t idChunk;
        Windows::Win32::IndexServer::CHUNK_BREAKTYPE breakType;
        Windows::Win32::IndexServer::CHUNKSTATE flags;
        uint32_t locale;
        Windows::Win32::IndexServer::FULLPROPSPEC attribute;
        uint32_t idChunkSource;
        uint32_t cwcStartSource;
        uint32_t cwcLenSource;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::InteractionContext
{
    struct MANIPULATION_TRANSFORM
    {
        float translationX;
        float translationY;
        float scale;
        float expansion;
        float rotation;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::InteractionContext
{
    struct MANIPULATION_VELOCITY
    {
        float velocityX;
        float velocityY;
        float velocityExpansion;
        float velocityAngular;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::InteractionContext
{
    struct INTERACTION_ARGUMENTS_MANIPULATION
    {
        Windows::Win32::InteractionContext::MANIPULATION_TRANSFORM delta;
        Windows::Win32::InteractionContext::MANIPULATION_TRANSFORM cumulative;
        Windows::Win32::InteractionContext::MANIPULATION_VELOCITY velocity;
        Windows::Win32::InteractionContext::MANIPULATION_RAILS_STATE railsState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::InteractionContext
{
    struct INTERACTION_ARGUMENTS_TAP
    {
        uint32_t count;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::InteractionContext
{
    struct INTERACTION_ARGUMENTS_CROSS_SLIDE
    {
        Windows::Win32::InteractionContext::CROSS_SLIDE_FLAGS flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::InteractionContext
{
    struct INTERACTION_CONTEXT_OUTPUT
    {
        union _arguments_e__Union
        {
            Windows::Win32::InteractionContext::INTERACTION_ARGUMENTS_MANIPULATION manipulation;
            Windows::Win32::InteractionContext::INTERACTION_ARGUMENTS_TAP tap;
            Windows::Win32::InteractionContext::INTERACTION_ARGUMENTS_CROSS_SLIDE crossSlide;
        };
        Windows::Win32::InteractionContext::INTERACTION_ID interactionId;
        Windows::Win32::InteractionContext::INTERACTION_FLAGS interactionFlags;
        uint32_t inputType;
        float x;
        float y;
        _arguments_e__Union arguments;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::InteractionContext
{
    struct INTERACTION_CONTEXT_OUTPUT2
    {
        union _arguments_e__Union
        {
            Windows::Win32::InteractionContext::INTERACTION_ARGUMENTS_MANIPULATION manipulation;
            Windows::Win32::InteractionContext::INTERACTION_ARGUMENTS_TAP tap;
            Windows::Win32::InteractionContext::INTERACTION_ARGUMENTS_CROSS_SLIDE crossSlide;
        };
        Windows::Win32::InteractionContext::INTERACTION_ID interactionId;
        Windows::Win32::InteractionContext::INTERACTION_FLAGS interactionFlags;
        uint32_t inputType;
        uint32_t contactCount;
        uint32_t currentContactCount;
        float x;
        float y;
        _arguments_e__Union arguments;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::InteractionContext
{
    struct INTERACTION_CONTEXT_CONFIGURATION
    {
        Windows::Win32::InteractionContext::INTERACTION_ID interactionId;
        Windows::Win32::InteractionContext::INTERACTION_CONFIGURATION_FLAGS enable;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::InteractionContext
{
    struct CROSS_SLIDE_PARAMETER
    {
        Windows::Win32::InteractionContext::CROSS_SLIDE_THRESHOLD threshold;
        float distance;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::InteractionContext
{
    struct HINTERACTIONCONTEXT__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct CRGB
    {
        uint8_t bRed;
        uint8_t bGreen;
        uint8_t bBlue;
        uint8_t bExtra;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct _PSP
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct PROPSHEETPAGEA_V1
    {
        union _Anonymous1_e__Union
        {
            int8_t* pszTemplate;
            Windows::Win32::WindowsAndMessaging::DLGTEMPLATE* pResource;
        };
        union _Anonymous2_e__Union
        {
            Windows::Win32::Gdi::HICON hIcon;
            int8_t* pszIcon;
        };
        uint32_t dwSize;
        uint32_t dwFlags;
        Windows::Win32::SystemServices::HINSTANCE hInstance;
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
        int8_t* pszTitle;
        Windows::Win32::WindowsAndMessaging::DLGPROC* pfnDlgProc;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
        Windows::Win32::Controls::LPFNPSPCALLBACKA* pfnCallback;
        uint32_t* pcRefParent;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct PROPSHEETPAGEA_V2
    {
        union _Anonymous1_e__Union
        {
            int8_t* pszTemplate;
            Windows::Win32::WindowsAndMessaging::DLGTEMPLATE* pResource;
        };
        union _Anonymous2_e__Union
        {
            Windows::Win32::Gdi::HICON hIcon;
            int8_t* pszIcon;
        };
        uint32_t dwSize;
        uint32_t dwFlags;
        Windows::Win32::SystemServices::HINSTANCE hInstance;
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
        int8_t* pszTitle;
        Windows::Win32::WindowsAndMessaging::DLGPROC* pfnDlgProc;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
        Windows::Win32::Controls::LPFNPSPCALLBACKA* pfnCallback;
        uint32_t* pcRefParent;
        int8_t* pszHeaderTitle;
        int8_t* pszHeaderSubTitle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct PROPSHEETPAGEA_V3
    {
        union _Anonymous1_e__Union
        {
            int8_t* pszTemplate;
            Windows::Win32::WindowsAndMessaging::DLGTEMPLATE* pResource;
        };
        union _Anonymous2_e__Union
        {
            Windows::Win32::Gdi::HICON hIcon;
            int8_t* pszIcon;
        };
        uint32_t dwSize;
        uint32_t dwFlags;
        Windows::Win32::SystemServices::HINSTANCE hInstance;
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
        int8_t* pszTitle;
        Windows::Win32::WindowsAndMessaging::DLGPROC* pfnDlgProc;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
        Windows::Win32::Controls::LPFNPSPCALLBACKA* pfnCallback;
        uint32_t* pcRefParent;
        int8_t* pszHeaderTitle;
        int8_t* pszHeaderSubTitle;
        Windows::Win32::SystemServices::HANDLE hActCtx;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct PROPSHEETPAGEA
    {
        union _Anonymous1_e__Union
        {
            int8_t* pszTemplate;
            Windows::Win32::WindowsAndMessaging::DLGTEMPLATE* pResource;
        };
        union _Anonymous2_e__Union
        {
            Windows::Win32::Gdi::HICON hIcon;
            int8_t* pszIcon;
        };
        union _Anonymous3_e__Union
        {
            Windows::Win32::Gdi::HBITMAP hbmHeader;
            int8_t* pszbmHeader;
        };
        uint32_t dwSize;
        uint32_t dwFlags;
        Windows::Win32::SystemServices::HINSTANCE hInstance;
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
        int8_t* pszTitle;
        Windows::Win32::WindowsAndMessaging::DLGPROC* pfnDlgProc;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
        Windows::Win32::Controls::LPFNPSPCALLBACKA* pfnCallback;
        uint32_t* pcRefParent;
        int8_t* pszHeaderTitle;
        int8_t* pszHeaderSubTitle;
        Windows::Win32::SystemServices::HANDLE hActCtx;
        _Anonymous3_e__Union Anonymous3;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct PROPSHEETPAGEW_V1
    {
        union _Anonymous1_e__Union
        {
            uint16_t* pszTemplate;
            Windows::Win32::WindowsAndMessaging::DLGTEMPLATE* pResource;
        };
        union _Anonymous2_e__Union
        {
            Windows::Win32::Gdi::HICON hIcon;
            uint16_t* pszIcon;
        };
        uint32_t dwSize;
        uint32_t dwFlags;
        Windows::Win32::SystemServices::HINSTANCE hInstance;
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
        uint16_t* pszTitle;
        Windows::Win32::WindowsAndMessaging::DLGPROC* pfnDlgProc;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
        Windows::Win32::Controls::LPFNPSPCALLBACKW* pfnCallback;
        uint32_t* pcRefParent;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct PROPSHEETPAGEW_V2
    {
        union _Anonymous1_e__Union
        {
            uint16_t* pszTemplate;
            Windows::Win32::WindowsAndMessaging::DLGTEMPLATE* pResource;
        };
        union _Anonymous2_e__Union
        {
            Windows::Win32::Gdi::HICON hIcon;
            uint16_t* pszIcon;
        };
        uint32_t dwSize;
        uint32_t dwFlags;
        Windows::Win32::SystemServices::HINSTANCE hInstance;
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
        uint16_t* pszTitle;
        Windows::Win32::WindowsAndMessaging::DLGPROC* pfnDlgProc;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
        Windows::Win32::Controls::LPFNPSPCALLBACKW* pfnCallback;
        uint32_t* pcRefParent;
        uint16_t* pszHeaderTitle;
        uint16_t* pszHeaderSubTitle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct PROPSHEETPAGEW_V3
    {
        union _Anonymous1_e__Union
        {
            uint16_t* pszTemplate;
            Windows::Win32::WindowsAndMessaging::DLGTEMPLATE* pResource;
        };
        union _Anonymous2_e__Union
        {
            Windows::Win32::Gdi::HICON hIcon;
            uint16_t* pszIcon;
        };
        uint32_t dwSize;
        uint32_t dwFlags;
        Windows::Win32::SystemServices::HINSTANCE hInstance;
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
        uint16_t* pszTitle;
        Windows::Win32::WindowsAndMessaging::DLGPROC* pfnDlgProc;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
        Windows::Win32::Controls::LPFNPSPCALLBACKW* pfnCallback;
        uint32_t* pcRefParent;
        uint16_t* pszHeaderTitle;
        uint16_t* pszHeaderSubTitle;
        Windows::Win32::SystemServices::HANDLE hActCtx;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct PROPSHEETPAGEW
    {
        union _Anonymous1_e__Union
        {
            uint16_t* pszTemplate;
            Windows::Win32::WindowsAndMessaging::DLGTEMPLATE* pResource;
        };
        union _Anonymous2_e__Union
        {
            Windows::Win32::Gdi::HICON hIcon;
            uint16_t* pszIcon;
        };
        union _Anonymous3_e__Union
        {
            Windows::Win32::Gdi::HBITMAP hbmHeader;
            uint16_t* pszbmHeader;
        };
        uint32_t dwSize;
        uint32_t dwFlags;
        Windows::Win32::SystemServices::HINSTANCE hInstance;
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
        uint16_t* pszTitle;
        Windows::Win32::WindowsAndMessaging::DLGPROC* pfnDlgProc;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
        Windows::Win32::Controls::LPFNPSPCALLBACKW* pfnCallback;
        uint32_t* pcRefParent;
        uint16_t* pszHeaderTitle;
        uint16_t* pszHeaderSubTitle;
        Windows::Win32::SystemServices::HANDLE hActCtx;
        _Anonymous3_e__Union Anonymous3;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct PROPSHEETHEADERA_V1
    {
        union _Anonymous1_e__Union
        {
            Windows::Win32::Gdi::HICON hIcon;
            int8_t* pszIcon;
        };
        union _Anonymous2_e__Union
        {
            uint32_t nStartPage;
            int8_t* pStartPage;
        };
        union _Anonymous3_e__Union
        {
            Windows::Win32::Controls::PROPSHEETPAGEA* ppsp;
            Windows::Win32::Controls::HPROPSHEETPAGE* phpage;
        };
        uint32_t dwSize;
        uint32_t dwFlags;
        Windows::Win32::WindowsAndMessaging::HWND hwndParent;
        Windows::Win32::SystemServices::HINSTANCE hInstance;
        _Anonymous1_e__Union Anonymous1;
        int8_t* pszCaption;
        uint32_t nPages;
        _Anonymous2_e__Union Anonymous2;
        _Anonymous3_e__Union Anonymous3;
        Windows::Win32::Controls::PFNPROPSHEETCALLBACK* pfnCallback;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct PROPSHEETHEADERA_V2
    {
        union _Anonymous1_e__Union
        {
            Windows::Win32::Gdi::HICON hIcon;
            int8_t* pszIcon;
        };
        union _Anonymous2_e__Union
        {
            uint32_t nStartPage;
            int8_t* pStartPage;
        };
        union _Anonymous3_e__Union
        {
            Windows::Win32::Controls::PROPSHEETPAGEA* ppsp;
            Windows::Win32::Controls::HPROPSHEETPAGE* phpage;
        };
        union _Anonymous4_e__Union
        {
            Windows::Win32::Gdi::HBITMAP hbmWatermark;
            int8_t* pszbmWatermark;
        };
        union _Anonymous5_e__Union
        {
            Windows::Win32::Gdi::HBITMAP hbmHeader;
            int8_t* pszbmHeader;
        };
        uint32_t dwSize;
        uint32_t dwFlags;
        Windows::Win32::WindowsAndMessaging::HWND hwndParent;
        Windows::Win32::SystemServices::HINSTANCE hInstance;
        _Anonymous1_e__Union Anonymous1;
        int8_t* pszCaption;
        uint32_t nPages;
        _Anonymous2_e__Union Anonymous2;
        _Anonymous3_e__Union Anonymous3;
        Windows::Win32::Controls::PFNPROPSHEETCALLBACK* pfnCallback;
        _Anonymous4_e__Union Anonymous4;
        Windows::Win32::Gdi::HPALETTE hplWatermark;
        _Anonymous5_e__Union Anonymous5;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct PROPSHEETHEADERW_V1
    {
        union _Anonymous1_e__Union
        {
            Windows::Win32::Gdi::HICON hIcon;
            uint16_t* pszIcon;
        };
        union _Anonymous2_e__Union
        {
            uint32_t nStartPage;
            uint16_t* pStartPage;
        };
        union _Anonymous3_e__Union
        {
            Windows::Win32::Controls::PROPSHEETPAGEW* ppsp;
            Windows::Win32::Controls::HPROPSHEETPAGE* phpage;
        };
        uint32_t dwSize;
        uint32_t dwFlags;
        Windows::Win32::WindowsAndMessaging::HWND hwndParent;
        Windows::Win32::SystemServices::HINSTANCE hInstance;
        _Anonymous1_e__Union Anonymous1;
        uint16_t* pszCaption;
        uint32_t nPages;
        _Anonymous2_e__Union Anonymous2;
        _Anonymous3_e__Union Anonymous3;
        Windows::Win32::Controls::PFNPROPSHEETCALLBACK* pfnCallback;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct PROPSHEETHEADERW_V2
    {
        union _Anonymous1_e__Union
        {
            Windows::Win32::Gdi::HICON hIcon;
            uint16_t* pszIcon;
        };
        union _Anonymous2_e__Union
        {
            uint32_t nStartPage;
            uint16_t* pStartPage;
        };
        union _Anonymous3_e__Union
        {
            Windows::Win32::Controls::PROPSHEETPAGEW* ppsp;
            Windows::Win32::Controls::HPROPSHEETPAGE* phpage;
        };
        union _Anonymous4_e__Union
        {
            Windows::Win32::Gdi::HBITMAP hbmWatermark;
            uint16_t* pszbmWatermark;
        };
        union _Anonymous5_e__Union
        {
            Windows::Win32::Gdi::HBITMAP hbmHeader;
            uint16_t* pszbmHeader;
        };
        uint32_t dwSize;
        uint32_t dwFlags;
        Windows::Win32::WindowsAndMessaging::HWND hwndParent;
        Windows::Win32::SystemServices::HINSTANCE hInstance;
        _Anonymous1_e__Union Anonymous1;
        uint16_t* pszCaption;
        uint32_t nPages;
        _Anonymous2_e__Union Anonymous2;
        _Anonymous3_e__Union Anonymous3;
        Windows::Win32::Controls::PFNPROPSHEETCALLBACK* pfnCallback;
        _Anonymous4_e__Union Anonymous4;
        Windows::Win32::Gdi::HPALETTE hplWatermark;
        _Anonymous5_e__Union Anonymous5;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct PSHNOTIFY
    {
        Windows::Win32::Controls::NMHDR hdr;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct INITCOMMONCONTROLSEX
    {
        uint32_t dwSize;
        uint32_t dwICC;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct COLORSCHEME
    {
        uint32_t dwSize;
        uint32_t clrBtnHighlight;
        uint32_t clrBtnShadow;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMTOOLTIPSCREATED
    {
        Windows::Win32::Controls::NMHDR hdr;
        Windows::Win32::WindowsAndMessaging::HWND hwndToolTips;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMMOUSE
    {
        Windows::Win32::Controls::NMHDR hdr;
        size_t dwItemSpec;
        size_t dwItemData;
        Windows::Win32::DisplayDevices::POINT pt;
        Windows::Win32::WindowsAndMessaging::LPARAM dwHitInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMOBJECTNOTIFY
    {
        Windows::Win32::Controls::NMHDR hdr;
        int32_t iItem;
        ::win32::guid* piid;
        void* pObject;
        int32_t hResult;
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMKEY
    {
        Windows::Win32::Controls::NMHDR hdr;
        uint32_t nVKey;
        uint32_t uFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMCHAR
    {
        Windows::Win32::Controls::NMHDR hdr;
        uint32_t ch;
        uint32_t dwItemPrev;
        uint32_t dwItemNext;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMCUSTOMTEXT
    {
        Windows::Win32::Controls::NMHDR hdr;
        Windows::Win32::Gdi::HDC hDC;
        uint16_t* lpString;
        int32_t nCount;
        Windows::Win32::DisplayDevices::RECT* lpRect;
        uint32_t uFormat;
        Windows::Win32::SystemServices::BOOL fLink;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMCUSTOMDRAW
    {
        Windows::Win32::Controls::NMHDR hdr;
        uint32_t dwDrawStage;
        Windows::Win32::Gdi::HDC hdc;
        Windows::Win32::DisplayDevices::RECT rc;
        size_t dwItemSpec;
        uint32_t uItemState;
        Windows::Win32::WindowsAndMessaging::LPARAM lItemlParam;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMTTCUSTOMDRAW
    {
        Windows::Win32::Controls::NMCUSTOMDRAW nmcd;
        uint32_t uDrawFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMCUSTOMSPLITRECTINFO
    {
        Windows::Win32::Controls::NMHDR hdr;
        Windows::Win32::DisplayDevices::RECT rcClient;
        Windows::Win32::DisplayDevices::RECT rcButton;
        Windows::Win32::DisplayDevices::RECT rcSplit;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct _IMAGELIST
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct IMAGELISTDRAWPARAMS
    {
        uint32_t cbSize;
        Windows::Win32::Controls::HIMAGELIST himl;
        int32_t i;
        Windows::Win32::Gdi::HDC hdcDst;
        int32_t x;
        int32_t y;
        int32_t cx;
        int32_t cy;
        int32_t xBitmap;
        int32_t yBitmap;
        uint32_t rgbBk;
        uint32_t rgbFg;
        uint32_t fStyle;
        uint32_t dwRop;
        uint32_t fState;
        uint32_t Frame;
        uint32_t crEffect;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct IMAGEINFO
    {
        Windows::Win32::Gdi::HBITMAP hbmImage;
        Windows::Win32::Gdi::HBITMAP hbmMask;
        int32_t Unused1;
        int32_t Unused2;
        Windows::Win32::DisplayDevices::RECT rcImage;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct HD_TEXTFILTERA
    {
        int8_t* pszText;
        int32_t cchTextMax;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct HD_TEXTFILTERW
    {
        uint16_t* pszText;
        int32_t cchTextMax;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct HDITEMA
    {
        uint32_t mask;
        int32_t cxy;
        int8_t* pszText;
        Windows::Win32::Gdi::HBITMAP hbm;
        int32_t cchTextMax;
        int32_t fmt;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
        int32_t iImage;
        int32_t iOrder;
        uint32_t type;
        void* pvFilter;
        uint32_t state;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct HDITEMW
    {
        uint32_t mask;
        int32_t cxy;
        uint16_t* pszText;
        Windows::Win32::Gdi::HBITMAP hbm;
        int32_t cchTextMax;
        int32_t fmt;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
        int32_t iImage;
        int32_t iOrder;
        uint32_t type;
        void* pvFilter;
        uint32_t state;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct HDLAYOUT
    {
        Windows::Win32::DisplayDevices::RECT* prc;
        Windows::Win32::WindowsAndMessaging::WINDOWPOS* pwpos;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct HDHITTESTINFO
    {
        Windows::Win32::DisplayDevices::POINT pt;
        uint32_t flags;
        int32_t iItem;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMHEADERA
    {
        Windows::Win32::Controls::NMHDR hdr;
        int32_t iItem;
        int32_t iButton;
        Windows::Win32::Controls::HDITEMA* pitem;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMHEADERW
    {
        Windows::Win32::Controls::NMHDR hdr;
        int32_t iItem;
        int32_t iButton;
        Windows::Win32::Controls::HDITEMW* pitem;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMHDDISPINFOW
    {
        Windows::Win32::Controls::NMHDR hdr;
        int32_t iItem;
        uint32_t mask;
        uint16_t* pszText;
        int32_t cchTextMax;
        int32_t iImage;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMHDDISPINFOA
    {
        Windows::Win32::Controls::NMHDR hdr;
        int32_t iItem;
        uint32_t mask;
        int8_t* pszText;
        int32_t cchTextMax;
        int32_t iImage;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMHDFILTERBTNCLICK
    {
        Windows::Win32::Controls::NMHDR hdr;
        int32_t iItem;
        Windows::Win32::DisplayDevices::RECT rc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct TBBUTTON
    {
        int32_t iBitmap;
        int32_t idCommand;
        uint8_t fsState;
        uint8_t fsStyle;
        uint8_t bReserved[2];
        size_t dwData;
        intptr_t iString;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct COLORMAP
    {
        uint32_t from;
        uint32_t to;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMTBCUSTOMDRAW
    {
        Windows::Win32::Controls::NMCUSTOMDRAW nmcd;
        Windows::Win32::Gdi::HBRUSH hbrMonoDither;
        Windows::Win32::Gdi::HBRUSH hbrLines;
        Windows::Win32::Gdi::HPEN hpenLines;
        uint32_t clrText;
        uint32_t clrMark;
        uint32_t clrTextHighlight;
        uint32_t clrBtnFace;
        uint32_t clrBtnHighlight;
        uint32_t clrHighlightHotTrack;
        Windows::Win32::DisplayDevices::RECT rcText;
        int32_t nStringBkMode;
        int32_t nHLStringBkMode;
        int32_t iListGap;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct TBADDBITMAP
    {
        Windows::Win32::SystemServices::HINSTANCE hInst;
        size_t nID;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct TBSAVEPARAMSA
    {
        Windows::Win32::WindowsProgramming::HKEY hkr;
        int8_t* pszSubKey;
        int8_t* pszValueName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct TBSAVEPARAMSW
    {
        Windows::Win32::WindowsProgramming::HKEY hkr;
        uint16_t* pszSubKey;
        uint16_t* pszValueName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct TBINSERTMARK
    {
        int32_t iButton;
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct TBREPLACEBITMAP
    {
        Windows::Win32::SystemServices::HINSTANCE hInstOld;
        size_t nIDOld;
        Windows::Win32::SystemServices::HINSTANCE hInstNew;
        size_t nIDNew;
        int32_t nButtons;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct TBBUTTONINFOA
    {
        uint32_t cbSize;
        uint32_t dwMask;
        int32_t idCommand;
        int32_t iImage;
        uint8_t fsState;
        uint8_t fsStyle;
        uint16_t cx;
        size_t lParam;
        int8_t* pszText;
        int32_t cchText;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct TBBUTTONINFOW
    {
        uint32_t cbSize;
        uint32_t dwMask;
        int32_t idCommand;
        int32_t iImage;
        uint8_t fsState;
        uint8_t fsStyle;
        uint16_t cx;
        size_t lParam;
        uint16_t* pszText;
        int32_t cchText;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct TBMETRICS
    {
        uint32_t cbSize;
        uint32_t dwMask;
        int32_t cxPad;
        int32_t cyPad;
        int32_t cxBarPad;
        int32_t cyBarPad;
        int32_t cxButtonSpacing;
        int32_t cyButtonSpacing;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMTBHOTITEM
    {
        Windows::Win32::Controls::NMHDR hdr;
        int32_t idOld;
        int32_t idNew;
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMTBSAVE
    {
        Windows::Win32::Controls::NMHDR hdr;
        uint32_t* pData;
        uint32_t* pCurrent;
        uint32_t cbData;
        int32_t iItem;
        int32_t cButtons;
        Windows::Win32::Controls::TBBUTTON tbButton;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMTBRESTORE
    {
        Windows::Win32::Controls::NMHDR hdr;
        uint32_t* pData;
        uint32_t* pCurrent;
        uint32_t cbData;
        int32_t iItem;
        int32_t cButtons;
        int32_t cbBytesPerRecord;
        Windows::Win32::Controls::TBBUTTON tbButton;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMTBGETINFOTIPA
    {
        Windows::Win32::Controls::NMHDR hdr;
        int8_t* pszText;
        int32_t cchTextMax;
        int32_t iItem;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMTBGETINFOTIPW
    {
        Windows::Win32::Controls::NMHDR hdr;
        uint16_t* pszText;
        int32_t cchTextMax;
        int32_t iItem;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMTBDISPINFOA
    {
        Windows::Win32::Controls::NMHDR hdr;
        uint32_t dwMask;
        int32_t idCommand;
        size_t lParam;
        int32_t iImage;
        int8_t* pszText;
        int32_t cchText;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMTBDISPINFOW
    {
        Windows::Win32::Controls::NMHDR hdr;
        uint32_t dwMask;
        int32_t idCommand;
        size_t lParam;
        int32_t iImage;
        uint16_t* pszText;
        int32_t cchText;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMTOOLBARA
    {
        Windows::Win32::Controls::NMHDR hdr;
        int32_t iItem;
        Windows::Win32::Controls::TBBUTTON tbButton;
        int32_t cchText;
        int8_t* pszText;
        Windows::Win32::DisplayDevices::RECT rcButton;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMTOOLBARW
    {
        Windows::Win32::Controls::NMHDR hdr;
        int32_t iItem;
        Windows::Win32::Controls::TBBUTTON tbButton;
        int32_t cchText;
        uint16_t* pszText;
        Windows::Win32::DisplayDevices::RECT rcButton;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct REBARINFO
    {
        uint32_t cbSize;
        uint32_t fMask;
        Windows::Win32::Controls::HIMAGELIST himl;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct REBARBANDINFOA
    {
        uint32_t cbSize;
        uint32_t fMask;
        uint32_t fStyle;
        uint32_t clrFore;
        uint32_t clrBack;
        int8_t* lpText;
        uint32_t cch;
        int32_t iImage;
        Windows::Win32::WindowsAndMessaging::HWND hwndChild;
        uint32_t cxMinChild;
        uint32_t cyMinChild;
        uint32_t cx;
        Windows::Win32::Gdi::HBITMAP hbmBack;
        uint32_t wID;
        uint32_t cyChild;
        uint32_t cyMaxChild;
        uint32_t cyIntegral;
        uint32_t cxIdeal;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
        uint32_t cxHeader;
        Windows::Win32::DisplayDevices::RECT rcChevronLocation;
        uint32_t uChevronState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct REBARBANDINFOW
    {
        uint32_t cbSize;
        uint32_t fMask;
        uint32_t fStyle;
        uint32_t clrFore;
        uint32_t clrBack;
        uint16_t* lpText;
        uint32_t cch;
        int32_t iImage;
        Windows::Win32::WindowsAndMessaging::HWND hwndChild;
        uint32_t cxMinChild;
        uint32_t cyMinChild;
        uint32_t cx;
        Windows::Win32::Gdi::HBITMAP hbmBack;
        uint32_t wID;
        uint32_t cyChild;
        uint32_t cyMaxChild;
        uint32_t cyIntegral;
        uint32_t cxIdeal;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
        uint32_t cxHeader;
        Windows::Win32::DisplayDevices::RECT rcChevronLocation;
        uint32_t uChevronState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMREBARCHILDSIZE
    {
        Windows::Win32::Controls::NMHDR hdr;
        uint32_t uBand;
        uint32_t wID;
        Windows::Win32::DisplayDevices::RECT rcChild;
        Windows::Win32::DisplayDevices::RECT rcBand;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMREBAR
    {
        Windows::Win32::Controls::NMHDR hdr;
        uint32_t dwMask;
        uint32_t uBand;
        uint32_t fStyle;
        uint32_t wID;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMRBAUTOSIZE
    {
        Windows::Win32::Controls::NMHDR hdr;
        Windows::Win32::SystemServices::BOOL fChanged;
        Windows::Win32::DisplayDevices::RECT rcTarget;
        Windows::Win32::DisplayDevices::RECT rcActual;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMREBARCHEVRON
    {
        Windows::Win32::Controls::NMHDR hdr;
        uint32_t uBand;
        uint32_t wID;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
        Windows::Win32::DisplayDevices::RECT rc;
        Windows::Win32::WindowsAndMessaging::LPARAM lParamNM;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMREBARSPLITTER
    {
        Windows::Win32::Controls::NMHDR hdr;
        Windows::Win32::DisplayDevices::RECT rcSizing;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMREBARAUTOBREAK
    {
        Windows::Win32::Controls::NMHDR hdr;
        uint32_t uBand;
        uint32_t wID;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
        uint32_t uMsg;
        uint32_t fStyleCurrent;
        Windows::Win32::SystemServices::BOOL fAutoBreak;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct RBHITTESTINFO
    {
        Windows::Win32::DisplayDevices::POINT pt;
        uint32_t flags;
        int32_t iBand;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct TTTOOLINFOA
    {
        uint32_t cbSize;
        uint32_t uFlags;
        Windows::Win32::WindowsAndMessaging::HWND hwnd;
        size_t uId;
        Windows::Win32::DisplayDevices::RECT rect;
        Windows::Win32::SystemServices::HINSTANCE hinst;
        int8_t* lpszText;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
        void* lpReserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct TTTOOLINFOW
    {
        uint32_t cbSize;
        uint32_t uFlags;
        Windows::Win32::WindowsAndMessaging::HWND hwnd;
        size_t uId;
        Windows::Win32::DisplayDevices::RECT rect;
        Windows::Win32::SystemServices::HINSTANCE hinst;
        uint16_t* lpszText;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
        void* lpReserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct TTGETTITLE
    {
        uint32_t dwSize;
        uint32_t uTitleBitmap;
        uint32_t cch;
        uint16_t* pszTitle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct TTHITTESTINFOA
    {
        Windows::Win32::WindowsAndMessaging::HWND hwnd;
        Windows::Win32::DisplayDevices::POINT pt;
        Windows::Win32::Controls::TTTOOLINFOA ti;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct TTHITTESTINFOW
    {
        Windows::Win32::WindowsAndMessaging::HWND hwnd;
        Windows::Win32::DisplayDevices::POINT pt;
        Windows::Win32::Controls::TTTOOLINFOW ti;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMTTDISPINFOA
    {
        Windows::Win32::Controls::NMHDR hdr;
        int8_t* lpszText;
        int8_t szText[80];
        Windows::Win32::SystemServices::HINSTANCE hinst;
        uint32_t uFlags;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMTTDISPINFOW
    {
        Windows::Win32::Controls::NMHDR hdr;
        uint16_t* lpszText;
        uint16_t szText[80];
        Windows::Win32::SystemServices::HINSTANCE hinst;
        uint32_t uFlags;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMTRBTHUMBPOSCHANGING
    {
        Windows::Win32::Controls::NMHDR hdr;
        uint32_t dwPos;
        int32_t nReason;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct DRAGLISTINFO
    {
        uint32_t uNotification;
        Windows::Win32::WindowsAndMessaging::HWND hWnd;
        Windows::Win32::DisplayDevices::POINT ptCursor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct UDACCEL
    {
        uint32_t nSec;
        uint32_t nInc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMUPDOWN
    {
        Windows::Win32::Controls::NMHDR hdr;
        int32_t iPos;
        int32_t iDelta;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct PBRANGE
    {
        int32_t iLow;
        int32_t iHigh;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct LITEM
    {
        uint32_t mask;
        int32_t iLink;
        uint32_t state;
        uint32_t stateMask;
        uint16_t szID[48];
        uint16_t szUrl[2084];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct LHITTESTINFO
    {
        Windows::Win32::DisplayDevices::POINT pt;
        Windows::Win32::Controls::LITEM item;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMLINK
    {
        Windows::Win32::Controls::NMHDR hdr;
        Windows::Win32::Controls::LITEM item;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct LVITEMA
    {
        uint32_t mask;
        int32_t iItem;
        int32_t iSubItem;
        uint32_t state;
        uint32_t stateMask;
        int8_t* pszText;
        int32_t cchTextMax;
        int32_t iImage;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
        int32_t iIndent;
        int32_t iGroupId;
        uint32_t cColumns;
        uint32_t* puColumns;
        int32_t* piColFmt;
        int32_t iGroup;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct LVITEMW
    {
        uint32_t mask;
        int32_t iItem;
        int32_t iSubItem;
        uint32_t state;
        uint32_t stateMask;
        uint16_t* pszText;
        int32_t cchTextMax;
        int32_t iImage;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
        int32_t iIndent;
        int32_t iGroupId;
        uint32_t cColumns;
        uint32_t* puColumns;
        int32_t* piColFmt;
        int32_t iGroup;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct LVFINDINFOA
    {
        uint32_t flags;
        int8_t* psz;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
        Windows::Win32::DisplayDevices::POINT pt;
        uint32_t vkDirection;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct LVFINDINFOW
    {
        uint32_t flags;
        uint16_t* psz;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
        Windows::Win32::DisplayDevices::POINT pt;
        uint32_t vkDirection;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct LVHITTESTINFO
    {
        Windows::Win32::DisplayDevices::POINT pt;
        uint32_t flags;
        int32_t iItem;
        int32_t iSubItem;
        int32_t iGroup;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct LVCOLUMNA
    {
        uint32_t mask;
        int32_t fmt;
        int32_t cx;
        int8_t* pszText;
        int32_t cchTextMax;
        int32_t iSubItem;
        int32_t iImage;
        int32_t iOrder;
        int32_t cxMin;
        int32_t cxDefault;
        int32_t cxIdeal;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct LVCOLUMNW
    {
        uint32_t mask;
        int32_t fmt;
        int32_t cx;
        uint16_t* pszText;
        int32_t cchTextMax;
        int32_t iSubItem;
        int32_t iImage;
        int32_t iOrder;
        int32_t cxMin;
        int32_t cxDefault;
        int32_t cxIdeal;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct LVBKIMAGEA
    {
        uint32_t ulFlags;
        Windows::Win32::Gdi::HBITMAP hbm;
        int8_t* pszImage;
        uint32_t cchImageMax;
        int32_t xOffsetPercent;
        int32_t yOffsetPercent;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct LVBKIMAGEW
    {
        uint32_t ulFlags;
        Windows::Win32::Gdi::HBITMAP hbm;
        uint16_t* pszImage;
        uint32_t cchImageMax;
        int32_t xOffsetPercent;
        int32_t yOffsetPercent;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct LVGROUP
    {
        uint32_t cbSize;
        uint32_t mask;
        uint16_t* pszHeader;
        int32_t cchHeader;
        uint16_t* pszFooter;
        int32_t cchFooter;
        int32_t iGroupId;
        uint32_t stateMask;
        uint32_t state;
        uint32_t uAlign;
        uint16_t* pszSubtitle;
        uint32_t cchSubtitle;
        uint16_t* pszTask;
        uint32_t cchTask;
        uint16_t* pszDescriptionTop;
        uint32_t cchDescriptionTop;
        uint16_t* pszDescriptionBottom;
        uint32_t cchDescriptionBottom;
        int32_t iTitleImage;
        int32_t iExtendedImage;
        int32_t iFirstItem;
        uint32_t cItems;
        uint16_t* pszSubsetTitle;
        uint32_t cchSubsetTitle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct LVGROUPMETRICS
    {
        uint32_t cbSize;
        uint32_t mask;
        uint32_t Left;
        uint32_t Top;
        uint32_t Right;
        uint32_t Bottom;
        uint32_t crLeft;
        uint32_t crTop;
        uint32_t crRight;
        uint32_t crBottom;
        uint32_t crHeader;
        uint32_t crFooter;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct LVINSERTGROUPSORTED
    {
        Windows::Win32::Controls::PFNLVGROUPCOMPARE* pfnGroupCompare;
        void* pvData;
        Windows::Win32::Controls::LVGROUP lvGroup;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct LVTILEVIEWINFO
    {
        uint32_t cbSize;
        uint32_t dwMask;
        uint32_t dwFlags;
        Windows::Win32::DisplayDevices::SIZE sizeTile;
        int32_t cLines;
        Windows::Win32::DisplayDevices::RECT rcLabelMargin;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct LVTILEINFO
    {
        uint32_t cbSize;
        int32_t iItem;
        uint32_t cColumns;
        uint32_t* puColumns;
        int32_t* piColFmt;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct LVINSERTMARK
    {
        uint32_t cbSize;
        uint32_t dwFlags;
        int32_t iItem;
        uint32_t dwReserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct LVSETINFOTIP
    {
        uint32_t cbSize;
        uint32_t dwFlags;
        uint16_t* pszText;
        int32_t iItem;
        int32_t iSubItem;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct LVFOOTERINFO
    {
        uint32_t mask;
        uint16_t* pszText;
        int32_t cchTextMax;
        uint32_t cItems;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct LVFOOTERITEM
    {
        uint32_t mask;
        int32_t iItem;
        uint16_t* pszText;
        int32_t cchTextMax;
        uint32_t state;
        uint32_t stateMask;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct LVITEMINDEX
    {
        int32_t iItem;
        int32_t iGroup;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMLISTVIEW
    {
        Windows::Win32::Controls::NMHDR hdr;
        int32_t iItem;
        int32_t iSubItem;
        uint32_t uNewState;
        uint32_t uOldState;
        uint32_t uChanged;
        Windows::Win32::DisplayDevices::POINT ptAction;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMITEMACTIVATE
    {
        Windows::Win32::Controls::NMHDR hdr;
        int32_t iItem;
        int32_t iSubItem;
        uint32_t uNewState;
        uint32_t uOldState;
        uint32_t uChanged;
        Windows::Win32::DisplayDevices::POINT ptAction;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
        uint32_t uKeyFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMLVCUSTOMDRAW
    {
        Windows::Win32::Controls::NMCUSTOMDRAW nmcd;
        uint32_t clrText;
        uint32_t clrTextBk;
        int32_t iSubItem;
        uint32_t dwItemType;
        uint32_t clrFace;
        int32_t iIconEffect;
        int32_t iIconPhase;
        int32_t iPartId;
        int32_t iStateId;
        Windows::Win32::DisplayDevices::RECT rcText;
        uint32_t uAlign;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMLVCACHEHINT
    {
        Windows::Win32::Controls::NMHDR hdr;
        int32_t iFrom;
        int32_t iTo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMLVFINDITEMA
    {
        Windows::Win32::Controls::NMHDR hdr;
        int32_t iStart;
        Windows::Win32::Controls::LVFINDINFOA lvfi;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMLVFINDITEMW
    {
        Windows::Win32::Controls::NMHDR hdr;
        int32_t iStart;
        Windows::Win32::Controls::LVFINDINFOW lvfi;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMLVODSTATECHANGE
    {
        Windows::Win32::Controls::NMHDR hdr;
        int32_t iFrom;
        int32_t iTo;
        uint32_t uNewState;
        uint32_t uOldState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMLVDISPINFOA
    {
        Windows::Win32::Controls::NMHDR hdr;
        Windows::Win32::Controls::LVITEMA item;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMLVDISPINFOW
    {
        Windows::Win32::Controls::NMHDR hdr;
        Windows::Win32::Controls::LVITEMW item;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMLVKEYDOWN
    {
        Windows::Win32::Controls::NMHDR hdr;
        uint16_t wVKey;
        uint32_t flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMLVLINK
    {
        Windows::Win32::Controls::NMHDR hdr;
        Windows::Win32::Controls::LITEM link;
        int32_t iItem;
        int32_t iSubItem;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMLVGETINFOTIPA
    {
        Windows::Win32::Controls::NMHDR hdr;
        uint32_t dwFlags;
        int8_t* pszText;
        int32_t cchTextMax;
        int32_t iItem;
        int32_t iSubItem;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMLVGETINFOTIPW
    {
        Windows::Win32::Controls::NMHDR hdr;
        uint32_t dwFlags;
        uint16_t* pszText;
        int32_t cchTextMax;
        int32_t iItem;
        int32_t iSubItem;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMLVSCROLL
    {
        Windows::Win32::Controls::NMHDR hdr;
        int32_t dx;
        int32_t dy;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMLVEMPTYMARKUP
    {
        Windows::Win32::Controls::NMHDR hdr;
        uint32_t dwFlags;
        uint16_t szMarkup[2084];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct _TREEITEM
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMTVSTATEIMAGECHANGING
    {
        Windows::Win32::Controls::NMHDR hdr;
        Windows::Win32::Controls::_TREEITEM* hti;
        int32_t iOldStateImageIndex;
        int32_t iNewStateImageIndex;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct TVITEMA
    {
        uint32_t mask;
        Windows::Win32::Controls::_TREEITEM* hItem;
        uint32_t state;
        uint32_t stateMask;
        int8_t* pszText;
        int32_t cchTextMax;
        int32_t iImage;
        int32_t iSelectedImage;
        int32_t cChildren;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct TVITEMW
    {
        uint32_t mask;
        Windows::Win32::Controls::_TREEITEM* hItem;
        uint32_t state;
        uint32_t stateMask;
        uint16_t* pszText;
        int32_t cchTextMax;
        int32_t iImage;
        int32_t iSelectedImage;
        int32_t cChildren;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct TVITEMEXA
    {
        uint32_t mask;
        Windows::Win32::Controls::_TREEITEM* hItem;
        uint32_t state;
        uint32_t stateMask;
        int8_t* pszText;
        int32_t cchTextMax;
        int32_t iImage;
        int32_t iSelectedImage;
        int32_t cChildren;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
        int32_t iIntegral;
        uint32_t uStateEx;
        Windows::Win32::WindowsAndMessaging::HWND hwnd;
        int32_t iExpandedImage;
        int32_t iReserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct TVITEMEXW
    {
        uint32_t mask;
        Windows::Win32::Controls::_TREEITEM* hItem;
        uint32_t state;
        uint32_t stateMask;
        uint16_t* pszText;
        int32_t cchTextMax;
        int32_t iImage;
        int32_t iSelectedImage;
        int32_t cChildren;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
        int32_t iIntegral;
        uint32_t uStateEx;
        Windows::Win32::WindowsAndMessaging::HWND hwnd;
        int32_t iExpandedImage;
        int32_t iReserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct TVINSERTSTRUCTA
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::Controls::TVITEMEXA itemex;
            Windows::Win32::Controls::TVITEMA item;
        };
        Windows::Win32::Controls::_TREEITEM* hParent;
        Windows::Win32::Controls::_TREEITEM* hInsertAfter;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct TVINSERTSTRUCTW
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::Controls::TVITEMEXW itemex;
            Windows::Win32::Controls::TVITEMW item;
        };
        Windows::Win32::Controls::_TREEITEM* hParent;
        Windows::Win32::Controls::_TREEITEM* hInsertAfter;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct TVHITTESTINFO
    {
        Windows::Win32::DisplayDevices::POINT pt;
        uint32_t flags;
        Windows::Win32::Controls::_TREEITEM* hItem;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct TVGETITEMPARTRECTINFO
    {
        Windows::Win32::Controls::_TREEITEM* hti;
        Windows::Win32::DisplayDevices::RECT* prc;
        Windows::Win32::Controls::TVITEMPART partID;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct TVSORTCB
    {
        Windows::Win32::Controls::_TREEITEM* hParent;
        Windows::Win32::Controls::PFNTVCOMPARE* lpfnCompare;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMTREEVIEWA
    {
        Windows::Win32::Controls::NMHDR hdr;
        uint32_t action;
        Windows::Win32::Controls::TVITEMA itemOld;
        Windows::Win32::Controls::TVITEMA itemNew;
        Windows::Win32::DisplayDevices::POINT ptDrag;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMTREEVIEWW
    {
        Windows::Win32::Controls::NMHDR hdr;
        uint32_t action;
        Windows::Win32::Controls::TVITEMW itemOld;
        Windows::Win32::Controls::TVITEMW itemNew;
        Windows::Win32::DisplayDevices::POINT ptDrag;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMTVDISPINFOA
    {
        Windows::Win32::Controls::NMHDR hdr;
        Windows::Win32::Controls::TVITEMA item;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMTVDISPINFOW
    {
        Windows::Win32::Controls::NMHDR hdr;
        Windows::Win32::Controls::TVITEMW item;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMTVDISPINFOEXA
    {
        Windows::Win32::Controls::NMHDR hdr;
        Windows::Win32::Controls::TVITEMEXA item;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMTVDISPINFOEXW
    {
        Windows::Win32::Controls::NMHDR hdr;
        Windows::Win32::Controls::TVITEMEXW item;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMTVKEYDOWN
    {
        Windows::Win32::Controls::NMHDR hdr;
        uint16_t wVKey;
        uint32_t flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMTVCUSTOMDRAW
    {
        Windows::Win32::Controls::NMCUSTOMDRAW nmcd;
        uint32_t clrText;
        uint32_t clrTextBk;
        int32_t iLevel;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMTVGETINFOTIPA
    {
        Windows::Win32::Controls::NMHDR hdr;
        int8_t* pszText;
        int32_t cchTextMax;
        Windows::Win32::Controls::_TREEITEM* hItem;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMTVGETINFOTIPW
    {
        Windows::Win32::Controls::NMHDR hdr;
        uint16_t* pszText;
        int32_t cchTextMax;
        Windows::Win32::Controls::_TREEITEM* hItem;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMTVITEMCHANGE
    {
        Windows::Win32::Controls::NMHDR hdr;
        uint32_t uChanged;
        Windows::Win32::Controls::_TREEITEM* hItem;
        uint32_t uStateNew;
        uint32_t uStateOld;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMTVASYNCDRAW
    {
        Windows::Win32::Controls::NMHDR hdr;
        Windows::Win32::Controls::IMAGELISTDRAWPARAMS* pimldp;
        int32_t hr;
        Windows::Win32::Controls::_TREEITEM* hItem;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
        uint32_t dwRetFlags;
        int32_t iRetImageIndex;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct COMBOBOXEXITEMA
    {
        uint32_t mask;
        intptr_t iItem;
        int8_t* pszText;
        int32_t cchTextMax;
        int32_t iImage;
        int32_t iSelectedImage;
        int32_t iOverlay;
        int32_t iIndent;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct COMBOBOXEXITEMW
    {
        uint32_t mask;
        intptr_t iItem;
        uint16_t* pszText;
        int32_t cchTextMax;
        int32_t iImage;
        int32_t iSelectedImage;
        int32_t iOverlay;
        int32_t iIndent;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMCOMBOBOXEXA
    {
        Windows::Win32::Controls::NMHDR hdr;
        Windows::Win32::Controls::COMBOBOXEXITEMA ceItem;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMCOMBOBOXEXW
    {
        Windows::Win32::Controls::NMHDR hdr;
        Windows::Win32::Controls::COMBOBOXEXITEMW ceItem;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMCBEDRAGBEGINW
    {
        Windows::Win32::Controls::NMHDR hdr;
        int32_t iItemid;
        uint16_t szText[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMCBEDRAGBEGINA
    {
        Windows::Win32::Controls::NMHDR hdr;
        int32_t iItemid;
        int8_t szText[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMCBEENDEDITW
    {
        Windows::Win32::Controls::NMHDR hdr;
        Windows::Win32::SystemServices::BOOL fChanged;
        int32_t iNewSelection;
        uint16_t szText[260];
        int32_t iWhy;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMCBEENDEDITA
    {
        Windows::Win32::Controls::NMHDR hdr;
        Windows::Win32::SystemServices::BOOL fChanged;
        int32_t iNewSelection;
        int8_t szText[260];
        int32_t iWhy;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct TCITEMHEADERA
    {
        uint32_t mask;
        uint32_t lpReserved1;
        uint32_t lpReserved2;
        int8_t* pszText;
        int32_t cchTextMax;
        int32_t iImage;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct TCITEMHEADERW
    {
        uint32_t mask;
        uint32_t lpReserved1;
        uint32_t lpReserved2;
        uint16_t* pszText;
        int32_t cchTextMax;
        int32_t iImage;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct TCITEMA
    {
        uint32_t mask;
        uint32_t dwState;
        uint32_t dwStateMask;
        int8_t* pszText;
        int32_t cchTextMax;
        int32_t iImage;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct TCITEMW
    {
        uint32_t mask;
        uint32_t dwState;
        uint32_t dwStateMask;
        uint16_t* pszText;
        int32_t cchTextMax;
        int32_t iImage;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct TCHITTESTINFO
    {
        Windows::Win32::DisplayDevices::POINT pt;
        uint32_t flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMTCKEYDOWN
    {
        Windows::Win32::Controls::NMHDR hdr;
        uint16_t wVKey;
        uint32_t flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct MCHITTESTINFO
    {
        uint32_t cbSize;
        Windows::Win32::DisplayDevices::POINT pt;
        uint32_t uHit;
        Windows::Win32::WindowsProgramming::SYSTEMTIME st;
        Windows::Win32::DisplayDevices::RECT rc;
        int32_t iOffset;
        int32_t iRow;
        int32_t iCol;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct MCGRIDINFO
    {
        uint32_t cbSize;
        uint32_t dwPart;
        uint32_t dwFlags;
        int32_t iCalendar;
        int32_t iRow;
        int32_t iCol;
        Windows::Win32::SystemServices::BOOL bSelected;
        Windows::Win32::WindowsProgramming::SYSTEMTIME stStart;
        Windows::Win32::WindowsProgramming::SYSTEMTIME stEnd;
        Windows::Win32::DisplayDevices::RECT rc;
        uint16_t* pszName;
        size_t cchName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMSELCHANGE
    {
        Windows::Win32::Controls::NMHDR nmhdr;
        Windows::Win32::WindowsProgramming::SYSTEMTIME stSelStart;
        Windows::Win32::WindowsProgramming::SYSTEMTIME stSelEnd;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMDAYSTATE
    {
        Windows::Win32::Controls::NMHDR nmhdr;
        Windows::Win32::WindowsProgramming::SYSTEMTIME stStart;
        int32_t cDayState;
        uint32_t* prgDayState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMVIEWCHANGE
    {
        Windows::Win32::Controls::NMHDR nmhdr;
        uint32_t dwOldView;
        uint32_t dwNewView;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct DATETIMEPICKERINFO
    {
        uint32_t cbSize;
        Windows::Win32::DisplayDevices::RECT rcCheck;
        uint32_t stateCheck;
        Windows::Win32::DisplayDevices::RECT rcButton;
        uint32_t stateButton;
        Windows::Win32::WindowsAndMessaging::HWND hwndEdit;
        Windows::Win32::WindowsAndMessaging::HWND hwndUD;
        Windows::Win32::WindowsAndMessaging::HWND hwndDropDown;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMDATETIMECHANGE
    {
        Windows::Win32::Controls::NMHDR nmhdr;
        uint32_t dwFlags;
        Windows::Win32::WindowsProgramming::SYSTEMTIME st;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMDATETIMESTRINGA
    {
        Windows::Win32::Controls::NMHDR nmhdr;
        int8_t* pszUserString;
        Windows::Win32::WindowsProgramming::SYSTEMTIME st;
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMDATETIMESTRINGW
    {
        Windows::Win32::Controls::NMHDR nmhdr;
        uint16_t* pszUserString;
        Windows::Win32::WindowsProgramming::SYSTEMTIME st;
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMDATETIMEWMKEYDOWNA
    {
        Windows::Win32::Controls::NMHDR nmhdr;
        int32_t nVirtKey;
        int8_t* pszFormat;
        Windows::Win32::WindowsProgramming::SYSTEMTIME st;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMDATETIMEWMKEYDOWNW
    {
        Windows::Win32::Controls::NMHDR nmhdr;
        int32_t nVirtKey;
        uint16_t* pszFormat;
        Windows::Win32::WindowsProgramming::SYSTEMTIME st;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMDATETIMEFORMATA
    {
        Windows::Win32::Controls::NMHDR nmhdr;
        int8_t* pszFormat;
        Windows::Win32::WindowsProgramming::SYSTEMTIME st;
        int8_t* pszDisplay;
        int8_t szDisplay[64];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMDATETIMEFORMATW
    {
        Windows::Win32::Controls::NMHDR nmhdr;
        uint16_t* pszFormat;
        Windows::Win32::WindowsProgramming::SYSTEMTIME st;
        uint16_t* pszDisplay;
        uint16_t szDisplay[64];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMDATETIMEFORMATQUERYA
    {
        Windows::Win32::Controls::NMHDR nmhdr;
        int8_t* pszFormat;
        Windows::Win32::DisplayDevices::SIZE szMax;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMDATETIMEFORMATQUERYW
    {
        Windows::Win32::Controls::NMHDR nmhdr;
        uint16_t* pszFormat;
        Windows::Win32::DisplayDevices::SIZE szMax;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMIPADDRESS
    {
        Windows::Win32::Controls::NMHDR hdr;
        int32_t iField;
        int32_t iValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMPGSCROLL
    {
        Windows::Win32::Controls::NMHDR hdr;
        uint16_t fwKeys;
        Windows::Win32::DisplayDevices::RECT rcParent;
        int32_t iDir;
        int32_t iXpos;
        int32_t iYpos;
        int32_t iScroll;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMPGCALCSIZE
    {
        Windows::Win32::Controls::NMHDR hdr;
        uint32_t dwFlag;
        int32_t iWidth;
        int32_t iHeight;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMPGHOTITEM
    {
        Windows::Win32::Controls::NMHDR hdr;
        int32_t idOld;
        int32_t idNew;
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct BUTTON_IMAGELIST
    {
        Windows::Win32::Controls::HIMAGELIST himl;
        Windows::Win32::DisplayDevices::RECT margin;
        uint32_t uAlign;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMBCHOTITEM
    {
        Windows::Win32::Controls::NMHDR hdr;
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct BUTTON_SPLITINFO
    {
        uint32_t mask;
        Windows::Win32::Controls::HIMAGELIST himlGlyph;
        uint32_t uSplitStyle;
        Windows::Win32::DisplayDevices::SIZE size;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMBCDROPDOWN
    {
        Windows::Win32::Controls::NMHDR hdr;
        Windows::Win32::DisplayDevices::RECT rcButton;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct EDITBALLOONTIP
    {
        uint32_t cbStruct;
        uint16_t* pszTitle;
        uint16_t* pszText;
        int32_t ttiIcon;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct NMSEARCHWEB
    {
        Windows::Win32::Controls::NMHDR hdr;
        Windows::Win32::Controls::EC_SEARCHWEB_ENTRYPOINT entrypoint;
        Windows::Win32::SystemServices::BOOL hasQueryText;
        Windows::Win32::SystemServices::BOOL invokeSucceeded;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct TASKDIALOG_BUTTON
    {
        int32_t nButtonID;
        uint16_t* pszButtonText;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct TASKDIALOGCONFIG
    {
        union _Anonymous1_e__Union
        {
            Windows::Win32::Gdi::HICON hMainIcon;
            uint16_t* pszMainIcon;
        };
        union _Anonymous2_e__Union
        {
            Windows::Win32::Gdi::HICON hFooterIcon;
            uint16_t* pszFooterIcon;
        };
        uint32_t cbSize;
        Windows::Win32::WindowsAndMessaging::HWND hwndParent;
        Windows::Win32::SystemServices::HINSTANCE hInstance;
        int32_t dwFlags;
        int32_t dwCommonButtons;
        uint16_t* pszWindowTitle;
        _Anonymous1_e__Union Anonymous1;
        uint16_t* pszMainInstruction;
        uint16_t* pszContent;
        uint32_t cButtons;
        Windows::Win32::Controls::TASKDIALOG_BUTTON* pButtons;
        int32_t nDefaultButton;
        uint32_t cRadioButtons;
        Windows::Win32::Controls::TASKDIALOG_BUTTON* pRadioButtons;
        int32_t nDefaultRadioButton;
        uint16_t* pszVerificationText;
        uint16_t* pszExpandedInformation;
        uint16_t* pszExpandedControlText;
        uint16_t* pszCollapsedControlText;
        _Anonymous2_e__Union Anonymous2;
        uint16_t* pszFooter;
        Windows::Win32::Controls::PFTASKDIALOGCALLBACK* pfCallback;
        intptr_t lpCallbackData;
        uint32_t cxWidth;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct _DSA
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct _DPA
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct DPASTREAMINFO
    {
        int32_t iPos;
        void* pvItem;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct IMAGELISTSTATS
    {
        uint32_t cbSize;
        int32_t cAlloc;
        int32_t cUsed;
        int32_t cStandby;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct IMECOMPTEXT
    {
        int32_t cb;
        uint32_t flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct TABLEROWPARMS
    {
        uint8_t cbRow;
        uint8_t cbCell;
        uint8_t cCell;
        uint8_t cRow;
        int32_t dxCellMargin;
        int32_t dxIndent;
        int32_t dyHeight;
        uint32_t _bitfield;
        int32_t cpStartRow;
        uint8_t bTableLevel;
        uint8_t iCell;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct TABLECELLPARMS
    {
        int32_t dxWidth;
        uint16_t _bitfield;
        uint16_t wShading;
        int16_t dxBrdrLeft;
        int16_t dyBrdrTop;
        int16_t dxBrdrRight;
        int16_t dyBrdrBottom;
        uint32_t crBrdrLeft;
        uint32_t crBrdrTop;
        uint32_t crBrdrRight;
        uint32_t crBrdrBottom;
        uint32_t crBackPat;
        uint32_t crForePat;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct RICHEDIT_IMAGE_PARAMETERS
    {
        int32_t xWidth;
        int32_t yHeight;
        int32_t Ascent;
        int32_t Type;
        uint16_t* pwszAlternateText;
        Windows::Win32::StructuredStorage::IStream* pIStream;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct ENDCOMPOSITIONNOTIFY
    {
        Windows::Win32::Controls::NMHDR nmhdr;
        uint32_t dwCode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct CHARFORMATA
    {
        uint32_t cbSize;
        uint32_t dwMask;
        uint32_t dwEffects;
        int32_t yHeight;
        int32_t yOffset;
        uint32_t crTextColor;
        uint8_t bCharSet;
        uint8_t bPitchAndFamily;
        int8_t szFaceName[32];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct CHARFORMATW
    {
        uint32_t cbSize;
        uint32_t dwMask;
        uint32_t dwEffects;
        int32_t yHeight;
        int32_t yOffset;
        uint32_t crTextColor;
        uint8_t bCharSet;
        uint8_t bPitchAndFamily;
        uint16_t szFaceName[32];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct CHARFORMAT2W
    {
        union _Anonymous_e__Union
        {
            uint32_t dwReserved;
            uint32_t dwCookie;
        };
        Windows::Win32::Controls::CHARFORMATW __AnonymousBase_richedit_L711_C23;
        uint16_t wWeight;
        int16_t sSpacing;
        uint32_t crBackColor;
        uint32_t lcid;
        _Anonymous_e__Union Anonymous;
        int16_t sStyle;
        uint16_t wKerning;
        uint8_t bUnderlineType;
        uint8_t bAnimation;
        uint8_t bRevAuthor;
        uint8_t bUnderlineColor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct CHARFORMAT2A
    {
        union _Anonymous_e__Union
        {
            uint32_t dwReserved;
            uint32_t dwCookie;
        };
        Windows::Win32::Controls::CHARFORMATA __AnonymousBase_richedit_L736_C23;
        uint16_t wWeight;
        int16_t sSpacing;
        uint32_t crBackColor;
        uint32_t lcid;
        _Anonymous_e__Union Anonymous;
        int16_t sStyle;
        uint16_t wKerning;
        uint8_t bUnderlineType;
        uint8_t bAnimation;
        uint8_t bRevAuthor;
        uint8_t bUnderlineColor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct CHARRANGE
    {
        int32_t cpMin;
        int32_t cpMax;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct TEXTRANGEA
    {
        Windows::Win32::Controls::CHARRANGE chrg;
        int8_t* lpstrText;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct TEXTRANGEW
    {
        Windows::Win32::Controls::CHARRANGE chrg;
        uint16_t* lpstrText;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct EDITSTREAM
    {
        size_t dwCookie;
        uint32_t dwError;
        Windows::Win32::Controls::EDITSTREAMCALLBACK* pfnCallback;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct FINDTEXTA
    {
        Windows::Win32::Controls::CHARRANGE chrg;
        int8_t* lpstrText;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct FINDTEXTW
    {
        Windows::Win32::Controls::CHARRANGE chrg;
        uint16_t* lpstrText;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct FINDTEXTEXA
    {
        Windows::Win32::Controls::CHARRANGE chrg;
        int8_t* lpstrText;
        Windows::Win32::Controls::CHARRANGE chrgText;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct FINDTEXTEXW
    {
        Windows::Win32::Controls::CHARRANGE chrg;
        uint16_t* lpstrText;
        Windows::Win32::Controls::CHARRANGE chrgText;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct FORMATRANGE
    {
        Windows::Win32::Gdi::HDC hdc;
        Windows::Win32::Gdi::HDC hdcTarget;
        Windows::Win32::DisplayDevices::RECT rc;
        Windows::Win32::DisplayDevices::RECT rcPage;
        Windows::Win32::Controls::CHARRANGE chrg;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct PARAFORMAT
    {
        union _Anonymous_e__Union
        {
            uint16_t wReserved;
            uint16_t wEffects;
        };
        uint32_t cbSize;
        uint32_t dwMask;
        uint16_t wNumbering;
        _Anonymous_e__Union Anonymous;
        int32_t dxStartIndent;
        int32_t dxRightIndent;
        int32_t dxOffset;
        uint16_t wAlignment;
        int16_t cTabCount;
        int32_t rgxTabs[32];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct PARAFORMAT2
    {
        Windows::Win32::Controls::PARAFORMAT __AnonymousBase_richedit_L1149_C22;
        int32_t dySpaceBefore;
        int32_t dySpaceAfter;
        int32_t dyLineSpacing;
        int16_t sStyle;
        uint8_t bLineSpacingRule;
        uint8_t bOutlineLevel;
        uint16_t wShadingWeight;
        uint16_t wShadingStyle;
        uint16_t wNumberingStart;
        uint16_t wNumberingStyle;
        uint16_t wNumberingTab;
        uint16_t wBorderSpace;
        uint16_t wBorderWidth;
        uint16_t wBorders;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct MSGFILTER
    {
        Windows::Win32::Controls::NMHDR nmhdr;
        uint32_t msg;
        Windows::Win32::WindowsAndMessaging::WPARAM wParam;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct REQRESIZE
    {
        Windows::Win32::Controls::NMHDR nmhdr;
        Windows::Win32::DisplayDevices::RECT rc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct SELCHANGE
    {
        Windows::Win32::Controls::NMHDR nmhdr;
        Windows::Win32::Controls::CHARRANGE chrg;
        uint16_t seltyp;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct _grouptypingchange
    {
        Windows::Win32::Controls::NMHDR nmhdr;
        Windows::Win32::SystemServices::BOOL fGroupTyping;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct CLIPBOARDFORMAT
    {
        Windows::Win32::Controls::NMHDR nmhdr;
        uint16_t cf;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct GETCONTEXTMENUEX
    {
        Windows::Win32::Controls::CHARRANGE chrg;
        uint32_t dwFlags;
        Windows::Win32::DisplayDevices::POINT pt;
        void* pvReserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct ENDROPFILES
    {
        Windows::Win32::Controls::NMHDR nmhdr;
        Windows::Win32::SystemServices::HANDLE hDrop;
        int32_t cp;
        Windows::Win32::SystemServices::BOOL fProtected;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct ENPROTECTED
    {
        Windows::Win32::Controls::NMHDR nmhdr;
        uint32_t msg;
        Windows::Win32::WindowsAndMessaging::WPARAM wParam;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
        Windows::Win32::Controls::CHARRANGE chrg;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct ENSAVECLIPBOARD
    {
        Windows::Win32::Controls::NMHDR nmhdr;
        int32_t cObjectCount;
        int32_t cch;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct ENOLEOPFAILED
    {
        Windows::Win32::Controls::NMHDR nmhdr;
        int32_t iob;
        int32_t lOper;
        int32_t hr;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct OBJECTPOSITIONS
    {
        Windows::Win32::Controls::NMHDR nmhdr;
        int32_t cObjectCount;
        int32_t* pcpPositions;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct ENLINK
    {
        Windows::Win32::Controls::NMHDR nmhdr;
        uint32_t msg;
        Windows::Win32::WindowsAndMessaging::WPARAM wParam;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
        Windows::Win32::Controls::CHARRANGE chrg;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct ENLOWFIRTF
    {
        Windows::Win32::Controls::NMHDR nmhdr;
        int8_t* szControl;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct ENCORRECTTEXT
    {
        Windows::Win32::Controls::NMHDR nmhdr;
        Windows::Win32::Controls::CHARRANGE chrg;
        uint16_t seltyp;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct PUNCTUATION
    {
        uint32_t iSize;
        int8_t* szPunctuation;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct COMPCOLOR
    {
        uint32_t crText;
        uint32_t crBackground;
        uint32_t dwEffects;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct REPASTESPECIAL
    {
        uint32_t dwAspect;
        size_t dwParam;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct SETTEXTEX
    {
        uint32_t flags;
        uint32_t codepage;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct GETTEXTEX
    {
        uint32_t cb;
        uint32_t flags;
        uint32_t codepage;
        int8_t* lpDefaultChar;
        int32_t* lpUsedDefChar;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct GETTEXTLENGTHEX
    {
        uint32_t flags;
        uint32_t codepage;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct BIDIOPTIONS
    {
        uint32_t cbSize;
        uint16_t wMask;
        uint16_t wEffects;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct hyphresult
    {
        Windows::Win32::Controls::KHYPH khyph;
        int32_t ichHyph;
        uint16_t chHyph;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct HYPHENATEINFO
    {
        int16_t cbSize;
        int16_t dxHyphenateZone;
        intptr_t pfnHyphenate;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct REOBJECT
    {
        uint32_t cbStruct;
        int32_t cp;
        ::win32::guid clsid;
        Windows::Win32::Com::IOleObject* poleobj;
        Windows::Win32::StructuredStorage::IStorage* pstg;
        Windows::Win32::Com::IOleClientSite* polesite;
        Windows::Win32::DisplayDevices::SIZE sizel;
        uint32_t dvaspect;
        uint32_t dwFlags;
        uint32_t dwUser;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct CHANGENOTIFY
    {
        uint32_t dwChangeType;
        void* pvCookieData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    union CARET_INFO
    {
        Windows::Win32::Gdi::HBITMAP hbitmap;
        Windows::Win32::Controls::CARET_FLAGS caretFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct TA_TRANSFORM
    {
        Windows::Win32::Controls::TA_TRANSFORM_TYPE eTransformType;
        uint32_t dwTimingFunctionId;
        uint32_t dwStartTime;
        uint32_t dwDurationTime;
        Windows::Win32::Controls::TA_TRANSFORM_FLAG eFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct TA_TRANSFORM_2D
    {
        Windows::Win32::Controls::TA_TRANSFORM header;
        float rX;
        float rY;
        float rInitialX;
        float rInitialY;
        float rOriginX;
        float rOriginY;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct TA_TRANSFORM_OPACITY
    {
        Windows::Win32::Controls::TA_TRANSFORM header;
        float rOpacity;
        float rInitialOpacity;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct TA_TRANSFORM_CLIP
    {
        Windows::Win32::Controls::TA_TRANSFORM header;
        float rLeft;
        float rTop;
        float rRight;
        float rBottom;
        float rInitialLeft;
        float rInitialTop;
        float rInitialRight;
        float rInitialBottom;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct TA_TIMINGFUNCTION
    {
        Windows::Win32::Controls::TA_TIMINGFUNCTION_TYPE eTimingFunctionType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct TA_CUBIC_BEZIER
    {
        Windows::Win32::Controls::TA_TIMINGFUNCTION header;
        float rX0;
        float rY0;
        float rX1;
        float rY1;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct DTBGOPTS
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        Windows::Win32::DisplayDevices::RECT rcClip;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct MARGINS
    {
        int32_t cxLeftWidth;
        int32_t cxRightWidth;
        int32_t cyTopHeight;
        int32_t cyBottomHeight;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct INTLIST
    {
        int32_t iValueCount;
        int32_t iValues[402];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct WTA_OPTIONS
    {
        uint32_t dwFlags;
        uint32_t dwMask;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct DTTOPTS
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        uint32_t crText;
        uint32_t crBorder;
        uint32_t crShadow;
        int32_t iTextShadowType;
        Windows::Win32::DisplayDevices::POINT ptShadowOffset;
        int32_t iBorderSize;
        int32_t iFontPropId;
        int32_t iColorPropId;
        int32_t iStateId;
        Windows::Win32::SystemServices::BOOL fApplyOverlay;
        int32_t iGlowSize;
        Windows::Win32::Controls::DTT_CALLBACK_PROC* pfnDrawTextCallback;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct BP_ANIMATIONPARAMS
    {
        uint32_t cbSize;
        uint32_t dwFlags;
        Windows::Win32::Controls::BP_ANIMATIONSTYLE style;
        uint32_t dwDuration;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct BP_PAINTPARAMS
    {
        uint32_t cbSize;
        uint32_t dwFlags;
        Windows::Win32::DisplayDevices::RECT* prcExclude;
        Windows::Win32::Gdi::BLENDFUNCTION* pBlendFunction;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct CPINFO
    {
        uint32_t MaxCharSize;
        uint8_t DefaultChar[2];
        uint8_t LeadByte[12];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct CPINFOEXA
    {
        uint32_t MaxCharSize;
        uint8_t DefaultChar[2];
        uint8_t LeadByte[12];
        uint16_t UnicodeDefaultChar;
        uint32_t CodePage;
        int8_t CodePageName[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct CPINFOEXW
    {
        uint32_t MaxCharSize;
        uint8_t DefaultChar[2];
        uint8_t LeadByte[12];
        uint16_t UnicodeDefaultChar;
        uint32_t CodePage;
        uint16_t CodePageName[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct NUMBERFMTA
    {
        uint32_t NumDigits;
        uint32_t LeadingZero;
        uint32_t Grouping;
        int8_t* lpDecimalSep;
        int8_t* lpThousandSep;
        uint32_t NegativeOrder;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct NUMBERFMTW
    {
        uint32_t NumDigits;
        uint32_t LeadingZero;
        uint32_t Grouping;
        uint16_t* lpDecimalSep;
        uint16_t* lpThousandSep;
        uint32_t NegativeOrder;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct CURRENCYFMTA
    {
        uint32_t NumDigits;
        uint32_t LeadingZero;
        uint32_t Grouping;
        int8_t* lpDecimalSep;
        int8_t* lpThousandSep;
        uint32_t NegativeOrder;
        uint32_t PositiveOrder;
        int8_t* lpCurrencySymbol;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct CURRENCYFMTW
    {
        uint32_t NumDigits;
        uint32_t LeadingZero;
        uint32_t Grouping;
        uint16_t* lpDecimalSep;
        uint16_t* lpThousandSep;
        uint32_t NegativeOrder;
        uint32_t PositiveOrder;
        uint16_t* lpCurrencySymbol;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct NLSVERSIONINFO
    {
        uint32_t dwNLSVersionInfoSize;
        uint32_t dwNLSVersion;
        uint32_t dwDefinedVersion;
        uint32_t dwEffectiveId;
        ::win32::guid guidCustomVersion;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct NLSVERSIONINFOEX
    {
        uint32_t dwNLSVersionInfoSize;
        uint32_t dwNLSVersion;
        uint32_t dwDefinedVersion;
        uint32_t dwEffectiveId;
        ::win32::guid guidCustomVersion;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct FILEMUIINFO
    {
        uint32_t dwSize;
        uint32_t dwVersion;
        uint32_t dwFileType;
        uint8_t pChecksum[16];
        uint8_t pServiceChecksum[16];
        uint32_t dwLanguageNameOffset;
        uint32_t dwTypeIDMainSize;
        uint32_t dwTypeIDMainOffset;
        uint32_t dwTypeNameMainOffset;
        uint32_t dwTypeIDMUISize;
        uint32_t dwTypeIDMUIOffset;
        uint32_t dwTypeNameMUIOffset;
        uint8_t abBuffer[8];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct HSAVEDUILANGUAGES__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct HIMC__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct HIMCC__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct COMPOSITIONFORM
    {
        uint32_t dwStyle;
        Windows::Win32::DisplayDevices::POINT ptCurrentPos;
        Windows::Win32::DisplayDevices::RECT rcArea;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct CANDIDATEFORM
    {
        uint32_t dwIndex;
        uint32_t dwStyle;
        Windows::Win32::DisplayDevices::POINT ptCurrentPos;
        Windows::Win32::DisplayDevices::RECT rcArea;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct CANDIDATELIST
    {
        uint32_t dwSize;
        uint32_t dwStyle;
        uint32_t dwCount;
        uint32_t dwSelection;
        uint32_t dwPageStart;
        uint32_t dwPageSize;
        uint32_t dwOffset[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct REGISTERWORDA
    {
        int8_t* lpReading;
        int8_t* lpWord;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct REGISTERWORDW
    {
        uint16_t* lpReading;
        uint16_t* lpWord;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct RECONVERTSTRING
    {
        uint32_t dwSize;
        uint32_t dwVersion;
        uint32_t dwStrLen;
        uint32_t dwStrOffset;
        uint32_t dwCompStrLen;
        uint32_t dwCompStrOffset;
        uint32_t dwTargetStrLen;
        uint32_t dwTargetStrOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct STYLEBUFA
    {
        uint32_t dwStyle;
        int8_t szDescription[32];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct STYLEBUFW
    {
        uint32_t dwStyle;
        uint16_t szDescription[32];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct IMEMENUITEMINFOA
    {
        uint32_t cbSize;
        uint32_t fType;
        uint32_t fState;
        uint32_t wID;
        Windows::Win32::Gdi::HBITMAP hbmpChecked;
        Windows::Win32::Gdi::HBITMAP hbmpUnchecked;
        uint32_t dwItemData;
        int8_t szString[80];
        Windows::Win32::Gdi::HBITMAP hbmpItem;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct IMEMENUITEMINFOW
    {
        uint32_t cbSize;
        uint32_t fType;
        uint32_t fState;
        uint32_t wID;
        Windows::Win32::Gdi::HBITMAP hbmpChecked;
        Windows::Win32::Gdi::HBITMAP hbmpUnchecked;
        uint32_t dwItemData;
        uint16_t szString[80];
        Windows::Win32::Gdi::HBITMAP hbmpItem;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct IMECHARPOSITION
    {
        uint32_t dwSize;
        uint32_t dwCharPos;
        Windows::Win32::DisplayDevices::POINT pt;
        uint32_t cLineHeight;
        Windows::Win32::DisplayDevices::RECT rcDocument;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct MAPPING_SERVICE_INFO
    {
        size_t Size;
        uint16_t* pszCopyright;
        uint16_t wMajorVersion;
        uint16_t wMinorVersion;
        uint16_t wBuildVersion;
        uint16_t wStepVersion;
        uint32_t dwInputContentTypesCount;
        uint16_t** prgInputContentTypes;
        uint32_t dwOutputContentTypesCount;
        uint16_t** prgOutputContentTypes;
        uint32_t dwInputLanguagesCount;
        uint16_t** prgInputLanguages;
        uint32_t dwOutputLanguagesCount;
        uint16_t** prgOutputLanguages;
        uint32_t dwInputScriptsCount;
        uint16_t** prgInputScripts;
        uint32_t dwOutputScriptsCount;
        uint16_t** prgOutputScripts;
        ::win32::guid guid;
        uint16_t* pszCategory;
        uint16_t* pszDescription;
        uint32_t dwPrivateDataSize;
        void* pPrivateData;
        void* pContext;
        uint32_t _bitfield;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct MAPPING_ENUM_OPTIONS
    {
        size_t Size;
        uint16_t* pszCategory;
        uint16_t* pszInputLanguage;
        uint16_t* pszOutputLanguage;
        uint16_t* pszInputScript;
        uint16_t* pszOutputScript;
        uint16_t* pszInputContentType;
        uint16_t* pszOutputContentType;
        ::win32::guid* pGuid;
        uint32_t _bitfield;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct MAPPING_OPTIONS
    {
        size_t Size;
        uint16_t* pszInputLanguage;
        uint16_t* pszOutputLanguage;
        uint16_t* pszInputScript;
        uint16_t* pszOutputScript;
        uint16_t* pszInputContentType;
        uint16_t* pszOutputContentType;
        uint16_t* pszUILanguage;
        Windows::Win32::Intl::PFN_MAPPINGCALLBACKPROC* pfnRecognizeCallback;
        void* pRecognizeCallerData;
        uint32_t dwRecognizeCallerDataSize;
        Windows::Win32::Intl::PFN_MAPPINGCALLBACKPROC* pfnActionCallback;
        void* pActionCallerData;
        uint32_t dwActionCallerDataSize;
        uint32_t dwServiceFlag;
        uint32_t _bitfield;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct MAPPING_DATA_RANGE
    {
        uint32_t dwStartIndex;
        uint32_t dwEndIndex;
        uint16_t* pszDescription;
        uint32_t dwDescriptionLength;
        void* pData;
        uint32_t dwDataSize;
        uint16_t* pszContentType;
        uint16_t** prgActionIds;
        uint32_t dwActionsCount;
        uint16_t** prgActionDisplayNames;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct MAPPING_PROPERTY_BAG
    {
        size_t Size;
        Windows::Win32::Intl::MAPPING_DATA_RANGE* prgResultRanges;
        uint32_t dwRangesCount;
        void* pServiceData;
        uint32_t dwServiceDataSize;
        void* pCallerData;
        uint32_t dwCallerDataSize;
        void* pContext;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct IMEDLG
    {
        int32_t cbIMEDLG;
        Windows::Win32::WindowsAndMessaging::HWND hwnd;
        uint16_t* lpwstrWord;
        int32_t nTabId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct WDD
    {
        union _Anonymous1_e__Union
        {
            uint16_t wReadPos;
            uint16_t wCompPos;
        };
        union _Anonymous2_e__Union
        {
            uint16_t cchRead;
            uint16_t cchComp;
        };
        uint16_t wDispPos;
        _Anonymous1_e__Union Anonymous1;
        uint16_t cchDisp;
        _Anonymous2_e__Union Anonymous2;
        uint32_t WDD_nReserve1;
        uint16_t nPos;
        uint16_t _bitfield;
        void* pReserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct MORRSLT
    {
        union _Anonymous1_e__Union
        {
            uint16_t* pwchRead;
            uint16_t* pwchComp;
        };
        union _Anonymous2_e__Union
        {
            uint16_t cchRead;
            uint16_t cchComp;
        };
        union _Anonymous3_e__Union
        {
            uint16_t* pchReadIdxWDD;
            uint16_t* pchCompIdxWDD;
        };
        uint32_t dwSize;
        uint16_t* pwchOutput;
        uint16_t cchOutput;
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
        uint16_t* pchInputPos;
        uint16_t* pchOutputIdxWDD;
        _Anonymous3_e__Union Anonymous3;
        uint16_t* paMonoRubyPos;
        Windows::Win32::Intl::WDD* pWDD;
        int32_t cWDD;
        void* pPrivate;
        uint16_t BLKBuff;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct IMEWRD
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint16_t nPos1;
                uint16_t nPos2;
            };
            uint32_t ulPos;
            _Anonymous_e__Struct Anonymous;
        };
        uint16_t* pwchReading;
        uint16_t* pwchDisplay;
        _Anonymous_e__Union Anonymous;
        uint32_t rgulAttrs[2];
        int32_t cbComment;
        Windows::Win32::Intl::IMEUCT uct;
        void* pvComment;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct IMESHF
    {
        uint16_t cbShf;
        uint16_t verDic;
        int8_t szTitle[48];
        int8_t szDescription[256];
        int8_t szCopyright[128];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct POSTBL
    {
        uint16_t nPos;
        uint8_t* szName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct IMEDP
    {
        Windows::Win32::Intl::IMEWRD wrdModifier;
        Windows::Win32::Intl::IMEWRD wrdModifiee;
        Windows::Win32::Intl::IMEREL relID;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct IMEKMSINIT
    {
        int32_t cbSize;
        Windows::Win32::WindowsAndMessaging::HWND hWnd;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct IMEKMSKEY
    {
        union _Anonymous1_e__Union
        {
            uint32_t dwControl;
            uint32_t dwNotUsed;
        };
        union _Anonymous2_e__Union
        {
            uint16_t pwszDscr[31];
            uint16_t pwszNoUse[31];
        };
        uint32_t dwStatus;
        uint32_t dwCompStatus;
        uint32_t dwVKEY;
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct IMEKMS
    {
        int32_t cbSize;
        Windows::Win32::Intl::HIMC__* hIMC;
        uint32_t cKeyList;
        Windows::Win32::Intl::IMEKMSKEY* pKeyList;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct IMEKMSNTFY
    {
        int32_t cbSize;
        Windows::Win32::Intl::HIMC__* hIMC;
        Windows::Win32::SystemServices::BOOL fSelect;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct IMEKMSKMP
    {
        int32_t cbSize;
        Windows::Win32::Intl::HIMC__* hIMC;
        uint16_t idLang;
        uint16_t wVKStart;
        uint16_t wVKEnd;
        int32_t cKeyList;
        Windows::Win32::Intl::IMEKMSKEY* pKeyList;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct IMEKMSINVK
    {
        int32_t cbSize;
        Windows::Win32::Intl::HIMC__* hIMC;
        uint32_t dwControl;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct IMEKMSFUNCDESC
    {
        int32_t cbSize;
        uint16_t idLang;
        uint32_t dwControl;
        uint16_t pwszDescription[128];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct COMPOSITIONSTRING
    {
        uint32_t dwSize;
        uint32_t dwCompReadAttrLen;
        uint32_t dwCompReadAttrOffset;
        uint32_t dwCompReadClauseLen;
        uint32_t dwCompReadClauseOffset;
        uint32_t dwCompReadStrLen;
        uint32_t dwCompReadStrOffset;
        uint32_t dwCompAttrLen;
        uint32_t dwCompAttrOffset;
        uint32_t dwCompClauseLen;
        uint32_t dwCompClauseOffset;
        uint32_t dwCompStrLen;
        uint32_t dwCompStrOffset;
        uint32_t dwCursorPos;
        uint32_t dwDeltaStart;
        uint32_t dwResultReadClauseLen;
        uint32_t dwResultReadClauseOffset;
        uint32_t dwResultReadStrLen;
        uint32_t dwResultReadStrOffset;
        uint32_t dwResultClauseLen;
        uint32_t dwResultClauseOffset;
        uint32_t dwResultStrLen;
        uint32_t dwResultStrOffset;
        uint32_t dwPrivateSize;
        uint32_t dwPrivateOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct GUIDELINE
    {
        uint32_t dwSize;
        uint32_t dwLevel;
        uint32_t dwIndex;
        uint32_t dwStrLen;
        uint32_t dwStrOffset;
        uint32_t dwPrivateSize;
        uint32_t dwPrivateOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct TRANSMSG
    {
        uint32_t message;
        Windows::Win32::WindowsAndMessaging::WPARAM wParam;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct TRANSMSGLIST
    {
        uint32_t uMsgCount;
        Windows::Win32::Intl::TRANSMSG TransMsg[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct CANDIDATEINFO
    {
        uint32_t dwSize;
        uint32_t dwCount;
        uint32_t dwOffset[32];
        uint32_t dwPrivateSize;
        uint32_t dwPrivateOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct INPUTCONTEXT
    {
        union _lfFont_e__Union
        {
            Windows::Win32::Shell::LOGFONTA A;
            Windows::Win32::Shell::LOGFONTW W;
        };
        Windows::Win32::WindowsAndMessaging::HWND hWnd;
        Windows::Win32::SystemServices::BOOL fOpen;
        Windows::Win32::DisplayDevices::POINT ptStatusWndPos;
        Windows::Win32::DisplayDevices::POINT ptSoftKbdPos;
        uint32_t fdwConversion;
        uint32_t fdwSentence;
        _lfFont_e__Union lfFont;
        Windows::Win32::Intl::COMPOSITIONFORM cfCompForm;
        Windows::Win32::Intl::CANDIDATEFORM cfCandForm[4];
        Windows::Win32::Intl::HIMCC__* hCompStr;
        Windows::Win32::Intl::HIMCC__* hCandInfo;
        Windows::Win32::Intl::HIMCC__* hGuideLine;
        Windows::Win32::Intl::HIMCC__* hPrivate;
        uint32_t dwNumMsgBuf;
        Windows::Win32::Intl::HIMCC__* hMsgBuf;
        uint32_t fdwInit;
        uint32_t dwReserve[3];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct IMEINFO
    {
        uint32_t dwPrivateDataSize;
        uint32_t fdwProperty;
        uint32_t fdwConversionCaps;
        uint32_t fdwSentenceCaps;
        uint32_t fdwUICaps;
        uint32_t fdwSCSCaps;
        uint32_t fdwSelectCaps;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct SOFTKBDDATA
    {
        uint32_t uCount;
        uint16_t wCode[256];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct APPLETIDLIST
    {
        int32_t count;
        ::win32::guid* pIIDList;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct IMESTRINGCANDIDATE
    {
        uint32_t uCount;
        uint16_t* lpwstr[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct IMEITEM
    {
        int32_t cbSize;
        int32_t iType;
        void* lpItemData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct IMEITEMCANDIDATE
    {
        uint32_t uCount;
        Windows::Win32::Intl::IMEITEM imeItem[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct tabIMESTRINGINFO
    {
        uint32_t dwFarEastId;
        uint16_t* lpwstr;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct tabIMEFAREASTINFO
    {
        uint32_t dwSize;
        uint32_t dwType;
        uint32_t dwData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct IMESTRINGCANDIDATEINFO
    {
        uint32_t dwFarEastId;
        Windows::Win32::Intl::tabIMEFAREASTINFO* lpFarEastInfo;
        uint32_t fInfoMask;
        int32_t iSelIndex;
        uint32_t uCount;
        uint16_t* lpwstr[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct IMECOMPOSITIONSTRINGINFO
    {
        int32_t iCompStrLen;
        int32_t iCaretPos;
        int32_t iEditStart;
        int32_t iEditLen;
        int32_t iTargetStart;
        int32_t iTargetLen;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct IMECHARINFO
    {
        uint16_t wch;
        uint32_t dwCharInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct IMEAPPLETCFG
    {
        uint32_t dwConfig;
        uint16_t wchTitle[64];
        uint16_t wchTitleFontFace[32];
        uint32_t dwCharSet;
        int32_t iCategory;
        Windows::Win32::Gdi::HICON hIcon;
        uint16_t langID;
        uint16_t dummy;
        Windows::Win32::WindowsAndMessaging::LPARAM lReserved1;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct IMEAPPLETUI
    {
        Windows::Win32::WindowsAndMessaging::HWND hwnd;
        uint32_t dwStyle;
        int32_t width;
        int32_t height;
        int32_t minWidth;
        int32_t minHeight;
        int32_t maxWidth;
        int32_t maxHeight;
        Windows::Win32::WindowsAndMessaging::LPARAM lReserved1;
        Windows::Win32::WindowsAndMessaging::LPARAM lReserved2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct APPLYCANDEXPARAM
    {
        uint32_t dwSize;
        uint16_t* lpwstrDisplay;
        uint16_t* lpwstrReading;
        uint32_t dwReserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct SCRIPT_CONTROL
    {
        uint32_t _bitfield;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct SCRIPT_STATE
    {
        uint16_t _bitfield;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct SCRIPT_ANALYSIS
    {
        uint16_t _bitfield;
        Windows::Win32::Intl::SCRIPT_STATE s;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct SCRIPT_ITEM
    {
        int32_t iCharPos;
        Windows::Win32::Intl::SCRIPT_ANALYSIS a;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct SCRIPT_VISATTR
    {
        uint16_t _bitfield;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct GOFFSET
    {
        int32_t du;
        int32_t dv;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct SCRIPT_LOGATTR
    {
        uint8_t _bitfield;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct SCRIPT_PROPERTIES
    {
        uint32_t _bitfield1;
        uint32_t _bitfield2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct SCRIPT_FONTPROPERTIES
    {
        int32_t cBytes;
        uint16_t wgBlank;
        uint16_t wgDefault;
        uint16_t wgInvalid;
        uint16_t wgKashida;
        int32_t iKashidaWidth;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct SCRIPT_TABDEF
    {
        int32_t cTabStops;
        int32_t iScale;
        int32_t* pTabStops;
        int32_t iTabOrigin;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct SCRIPT_DIGITSUBSTITUTE
    {
        uint32_t _bitfield1;
        uint32_t _bitfield2;
        uint32_t dwReserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct opentype_feature_record
    {
        uint32_t tagFeature;
        int32_t lParameter;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct textrange_properties
    {
        Windows::Win32::Intl::opentype_feature_record* potfRecords;
        int32_t cotfRecords;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct script_charprop
    {
        uint16_t _bitfield;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct script_glyphprop
    {
        Windows::Win32::Intl::SCRIPT_VISATTR sva;
        uint16_t reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct UReplaceableCallbacks
    {
        intptr_t length;
        intptr_t charAt;
        intptr_t char32At;
        intptr_t replace;
        intptr_t extract;
        intptr_t copy;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct UFieldPosition
    {
        int32_t field;
        int32_t beginIndex;
        int32_t endIndex;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct UCharIterator
    {
        void* context;
        int32_t length;
        int32_t start;
        int32_t index;
        int32_t limit;
        int32_t reservedField;
        Windows::Win32::Intl::UCharIteratorGetIndex** getIndex;
        Windows::Win32::Intl::UCharIteratorMove** move;
        Windows::Win32::Intl::UCharIteratorHasNext** hasNext;
        Windows::Win32::Intl::UCharIteratorHasPrevious** hasPrevious;
        Windows::Win32::Intl::UCharIteratorCurrent** current;
        Windows::Win32::Intl::UCharIteratorNext** next;
        Windows::Win32::Intl::UCharIteratorPrevious** previous;
        Windows::Win32::Intl::UCharIteratorReserved** reservedFn;
        Windows::Win32::Intl::UCharIteratorGetState** getState;
        Windows::Win32::Intl::UCharIteratorSetState** setState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct UEnumeration
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct UResourceBundle
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct ULocaleDisplayNames
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct UConverter
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct UConverterFromUnicodeArgs
    {
        uint16_t size;
        int8_t flush;
        Windows::Win32::Intl::UConverter* converter;
        uint16_t* source;
        uint16_t* sourceLimit;
        int8_t* target;
        int8_t* targetLimit;
        int32_t* offsets;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct UConverterToUnicodeArgs
    {
        uint16_t size;
        int8_t flush;
        Windows::Win32::Intl::UConverter* converter;
        int8_t* source;
        int8_t* sourceLimit;
        uint16_t* target;
        uint16_t* targetLimit;
        int32_t* offsets;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct USet
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct UBiDi
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct UBiDiTransform
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct UTextFuncs
    {
        int32_t tableSize;
        int32_t reserved1;
        int32_t reserved2;
        int32_t reserved3;
        Windows::Win32::Intl::UTextClone** clone;
        Windows::Win32::Intl::UTextNativeLength** nativeLength;
        Windows::Win32::Intl::UTextAccess** access;
        Windows::Win32::Intl::UTextExtract** extract;
        Windows::Win32::Intl::UTextReplace** replace;
        Windows::Win32::Intl::UTextCopy** copy;
        Windows::Win32::Intl::UTextMapOffsetToNative** mapOffsetToNative;
        Windows::Win32::Intl::UTextMapNativeIndexToUTF16** mapNativeIndexToUTF16;
        Windows::Win32::Intl::UTextClose** close;
        Windows::Win32::Intl::UTextClose** spare1;
        Windows::Win32::Intl::UTextClose** spare2;
        Windows::Win32::Intl::UTextClose** spare3;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct UText
    {
        uint32_t magic;
        int32_t flags;
        int32_t providerProperties;
        int32_t sizeOfStruct;
        int64_t chunkNativeLimit;
        int32_t extraSize;
        int32_t nativeIndexingLimit;
        int64_t chunkNativeStart;
        int32_t chunkOffset;
        int32_t chunkLength;
        uint16_t* chunkContents;
        Windows::Win32::Intl::UTextFuncs* pFuncs;
        void* pExtra;
        void* context;
        void* p;
        void* q;
        void* r;
        void* privP;
        int64_t a;
        int32_t b;
        int32_t c;
        int64_t privA;
        int32_t privB;
        int32_t privC;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct USerializedSet
    {
        uint16_t* array;
        int32_t bmpLength;
        int32_t length;
        uint16_t staticArray[8];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct UNormalizer2
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct UConverterSelector
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct UBreakIterator
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct UCaseMap
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct UParseError
    {
        int32_t line;
        int32_t offset;
        uint16_t preContext[16];
        uint16_t postContext[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct UStringPrepProfile
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct UIDNA
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct UIDNAInfo
    {
        int16_t size;
        int8_t isTransitionalDifferent;
        int8_t reservedB3;
        uint32_t errors;
        int32_t reservedI2;
        int32_t reservedI3;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct UCollator
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct UCollationElements
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct UCharsetDetector
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct UCharsetMatch
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct UFieldPositionIterator
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct UDateIntervalFormat
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct UGenderInfo
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct UListFormatter
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct ULocaleData
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct UDateFormatSymbols
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct UNumberFormatter
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct UFormattedNumber
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct UNumberingSystem
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct UPluralRules
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct URegularExpression
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct URegion
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct URelativeDateTimeFormatter
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct UStringSearch
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct USpoofChecker
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct USpoofCheckResult
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Intl
{
    struct UTransPosition
    {
        int32_t contextStart;
        int32_t contextLimit;
        int32_t start;
        int32_t limit;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Perf
{
    struct PERF_COUNTERSET_INFO
    {
        ::win32::guid CounterSetGuid;
        ::win32::guid ProviderGuid;
        uint32_t NumCounters;
        uint32_t InstanceType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Perf
{
    struct PERF_COUNTER_INFO
    {
        uint32_t CounterId;
        uint32_t Type;
        uint64_t Attrib;
        uint32_t Size;
        uint32_t DetailLevel;
        int32_t Scale;
        uint32_t Offset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Perf
{
    struct PERF_COUNTERSET_INSTANCE
    {
        ::win32::guid CounterSetGuid;
        uint32_t dwSize;
        uint32_t InstanceId;
        uint32_t InstanceNameOffset;
        uint32_t InstanceNameSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Perf
{
    struct PERF_COUNTER_IDENTITY
    {
        ::win32::guid CounterSetGuid;
        uint32_t BufferSize;
        uint32_t CounterId;
        uint32_t InstanceId;
        uint32_t MachineOffset;
        uint32_t NameOffset;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Perf
{
    struct PERF_PROVIDER_CONTEXT
    {
        uint32_t ContextSize;
        uint32_t Reserved;
        Windows::Win32::Perf::PERFLIBREQUEST* ControlCallback;
        Windows::Win32::Perf::PERF_MEM_ALLOC* MemAllocRoutine;
        Windows::Win32::Perf::PERF_MEM_FREE* MemFreeRoutine;
        void* pMemContext;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Perf
{
    struct PERF_INSTANCE_HEADER
    {
        uint32_t Size;
        uint32_t InstanceId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Perf
{
    struct PERF_COUNTERSET_REG_INFO
    {
        ::win32::guid CounterSetGuid;
        uint32_t CounterSetType;
        uint32_t DetailLevel;
        uint32_t NumCounters;
        uint32_t InstanceType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Perf
{
    struct PERF_COUNTER_REG_INFO
    {
        uint32_t CounterId;
        uint32_t Type;
        uint64_t Attrib;
        uint32_t DetailLevel;
        int32_t DefaultScale;
        uint32_t BaseCounterId;
        uint32_t PerfTimeId;
        uint32_t PerfFreqId;
        uint32_t MultiId;
        uint32_t AggregateFunc;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Perf
{
    struct PERF_STRING_BUFFER_HEADER
    {
        uint32_t dwSize;
        uint32_t dwCounters;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Perf
{
    struct PERF_STRING_COUNTER_HEADER
    {
        uint32_t dwCounterId;
        uint32_t dwOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Perf
{
    struct PERF_COUNTER_IDENTIFIER
    {
        ::win32::guid CounterSetGuid;
        uint32_t Status;
        uint32_t Size;
        uint32_t CounterId;
        uint32_t InstanceId;
        uint32_t Index;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Perf
{
    struct PERF_DATA_HEADER
    {
        uint32_t dwTotalSize;
        uint32_t dwNumCounters;
        int64_t PerfTimeStamp;
        int64_t PerfTime100NSec;
        int64_t PerfFreq;
        Windows::Win32::WindowsProgramming::SYSTEMTIME SystemTime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Perf
{
    struct PERF_COUNTER_HEADER
    {
        uint32_t dwStatus;
        Windows::Win32::Perf::PerfCounterDataType dwType;
        uint32_t dwSize;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Perf
{
    struct PERF_MULTI_INSTANCES
    {
        uint32_t dwTotalSize;
        uint32_t dwInstances;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Perf
{
    struct PERF_MULTI_COUNTERS
    {
        uint32_t dwSize;
        uint32_t dwCounters;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Perf
{
    struct PERF_COUNTER_DATA
    {
        uint32_t dwDataSize;
        uint32_t dwSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Perf
{
    struct PDH_RAW_COUNTER
    {
        uint32_t CStatus;
        Windows::Win32::WindowsProgramming::FILETIME TimeStamp;
        int64_t FirstValue;
        int64_t SecondValue;
        uint32_t MultiCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Perf
{
    struct PDH_RAW_COUNTER_ITEM_A
    {
        int8_t* szName;
        Windows::Win32::Perf::PDH_RAW_COUNTER RawValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Perf
{
    struct PDH_RAW_COUNTER_ITEM_W
    {
        uint16_t* szName;
        Windows::Win32::Perf::PDH_RAW_COUNTER RawValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Perf
{
    struct PDH_FMT_COUNTERVALUE
    {
        union _Anonymous_e__Union
        {
            int32_t longValue;
            double doubleValue;
            int64_t largeValue;
            int8_t* AnsiStringValue;
            uint16_t* WideStringValue;
        };
        uint32_t CStatus;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Perf
{
    struct PDH_FMT_COUNTERVALUE_ITEM_A
    {
        int8_t* szName;
        Windows::Win32::Perf::PDH_FMT_COUNTERVALUE FmtValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Perf
{
    struct PDH_FMT_COUNTERVALUE_ITEM_W
    {
        uint16_t* szName;
        Windows::Win32::Perf::PDH_FMT_COUNTERVALUE FmtValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Perf
{
    struct PDH_STATISTICS
    {
        uint32_t dwFormat;
        uint32_t count;
        Windows::Win32::Perf::PDH_FMT_COUNTERVALUE min;
        Windows::Win32::Perf::PDH_FMT_COUNTERVALUE max;
        Windows::Win32::Perf::PDH_FMT_COUNTERVALUE mean;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Perf
{
    struct PDH_COUNTER_PATH_ELEMENTS_A
    {
        int8_t* szMachineName;
        int8_t* szObjectName;
        int8_t* szInstanceName;
        int8_t* szParentInstance;
        uint32_t dwInstanceIndex;
        int8_t* szCounterName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Perf
{
    struct PDH_COUNTER_PATH_ELEMENTS_W
    {
        uint16_t* szMachineName;
        uint16_t* szObjectName;
        uint16_t* szInstanceName;
        uint16_t* szParentInstance;
        uint32_t dwInstanceIndex;
        uint16_t* szCounterName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Perf
{
    struct PDH_DATA_ITEM_PATH_ELEMENTS_A
    {
        int8_t* szMachineName;
        ::win32::guid ObjectGUID;
        uint32_t dwItemId;
        int8_t* szInstanceName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Perf
{
    struct PDH_DATA_ITEM_PATH_ELEMENTS_W
    {
        uint16_t* szMachineName;
        ::win32::guid ObjectGUID;
        uint32_t dwItemId;
        uint16_t* szInstanceName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Perf
{
    struct PDH_COUNTER_INFO_A
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                int8_t* szMachineName;
                int8_t* szObjectName;
                int8_t* szInstanceName;
                int8_t* szParentInstance;
                uint32_t dwInstanceIndex;
                int8_t* szCounterName;
            };
            Windows::Win32::Perf::PDH_DATA_ITEM_PATH_ELEMENTS_A DataItemPath;
            Windows::Win32::Perf::PDH_COUNTER_PATH_ELEMENTS_A CounterPath;
            _Anonymous_e__Struct Anonymous;
        };
        uint32_t dwLength;
        uint32_t dwType;
        uint32_t CVersion;
        uint32_t CStatus;
        int32_t lScale;
        int32_t lDefaultScale;
        size_t dwUserData;
        size_t dwQueryUserData;
        int8_t* szFullPath;
        _Anonymous_e__Union Anonymous;
        int8_t* szExplainText;
        uint32_t DataBuffer[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Perf
{
    struct PDH_COUNTER_INFO_W
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint16_t* szMachineName;
                uint16_t* szObjectName;
                uint16_t* szInstanceName;
                uint16_t* szParentInstance;
                uint32_t dwInstanceIndex;
                uint16_t* szCounterName;
            };
            Windows::Win32::Perf::PDH_DATA_ITEM_PATH_ELEMENTS_W DataItemPath;
            Windows::Win32::Perf::PDH_COUNTER_PATH_ELEMENTS_W CounterPath;
            _Anonymous_e__Struct Anonymous;
        };
        uint32_t dwLength;
        uint32_t dwType;
        uint32_t CVersion;
        uint32_t CStatus;
        int32_t lScale;
        int32_t lDefaultScale;
        size_t dwUserData;
        size_t dwQueryUserData;
        uint16_t* szFullPath;
        _Anonymous_e__Union Anonymous;
        uint16_t* szExplainText;
        uint32_t DataBuffer[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Perf
{
    struct PDH_TIME_INFO
    {
        int64_t StartTime;
        int64_t EndTime;
        uint32_t SampleCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Perf
{
    struct PDH_RAW_LOG_RECORD
    {
        uint32_t dwStructureSize;
        uint32_t dwRecordType;
        uint32_t dwItems;
        uint8_t RawBytes[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Perf
{
    struct PDH_LOG_SERVICE_QUERY_INFO_A
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous1_e__Struct
            {
                uint32_t PdlAutoNameInterval;
                uint32_t PdlAutoNameUnits;
                int8_t* PdlCommandFilename;
                int8_t* PdlCounterList;
                uint32_t PdlAutoNameFormat;
                uint32_t PdlSampleInterval;
                Windows::Win32::WindowsProgramming::FILETIME PdlLogStartTime;
                Windows::Win32::WindowsProgramming::FILETIME PdlLogEndTime;
            };
            struct _Anonymous2_e__Struct
            {
                uint32_t TlNumberOfBuffers;
                uint32_t TlMinimumBuffers;
                uint32_t TlMaximumBuffers;
                uint32_t TlFreeBuffers;
                uint32_t TlBufferSize;
                uint32_t TlEventsLost;
                uint32_t TlLoggerThreadId;
                uint32_t TlBuffersWritten;
                uint32_t TlLogHandle;
                int8_t* TlLogFileName;
            };
            _Anonymous1_e__Struct Anonymous1;
            _Anonymous2_e__Struct Anonymous2;
        };
        uint32_t dwSize;
        uint32_t dwFlags;
        uint32_t dwLogQuota;
        int8_t* szLogFileCaption;
        int8_t* szDefaultDir;
        int8_t* szBaseFileName;
        uint32_t dwFileType;
        uint32_t dwReserved;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Perf
{
    struct PDH_LOG_SERVICE_QUERY_INFO_W
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous1_e__Struct
            {
                uint32_t PdlAutoNameInterval;
                uint32_t PdlAutoNameUnits;
                uint16_t* PdlCommandFilename;
                uint16_t* PdlCounterList;
                uint32_t PdlAutoNameFormat;
                uint32_t PdlSampleInterval;
                Windows::Win32::WindowsProgramming::FILETIME PdlLogStartTime;
                Windows::Win32::WindowsProgramming::FILETIME PdlLogEndTime;
            };
            struct _Anonymous2_e__Struct
            {
                uint32_t TlNumberOfBuffers;
                uint32_t TlMinimumBuffers;
                uint32_t TlMaximumBuffers;
                uint32_t TlFreeBuffers;
                uint32_t TlBufferSize;
                uint32_t TlEventsLost;
                uint32_t TlLoggerThreadId;
                uint32_t TlBuffersWritten;
                uint32_t TlLogHandle;
                uint16_t* TlLogFileName;
            };
            _Anonymous1_e__Struct Anonymous1;
            _Anonymous2_e__Struct Anonymous2;
        };
        uint32_t dwSize;
        uint32_t dwFlags;
        uint32_t dwLogQuota;
        uint16_t* szLogFileCaption;
        uint16_t* szDefaultDir;
        uint16_t* szBaseFileName;
        uint32_t dwFileType;
        uint32_t dwReserved;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Perf
{
    struct PDH_BROWSE_DLG_CONFIG_HW
    {
        uint32_t _bitfield;
        Windows::Win32::WindowsAndMessaging::HWND hWndOwner;
        intptr_t hDataSource;
        uint16_t* szReturnPathBuffer;
        uint32_t cchReturnPathLength;
        Windows::Win32::Perf::CounterPathCallBack* pCallBack;
        size_t dwCallBackArg;
        int32_t CallBackStatus;
        uint32_t dwDefaultDetailLevel;
        uint16_t* szDialogBoxCaption;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Perf
{
    struct PDH_BROWSE_DLG_CONFIG_HA
    {
        uint32_t _bitfield;
        Windows::Win32::WindowsAndMessaging::HWND hWndOwner;
        intptr_t hDataSource;
        int8_t* szReturnPathBuffer;
        uint32_t cchReturnPathLength;
        Windows::Win32::Perf::CounterPathCallBack* pCallBack;
        size_t dwCallBackArg;
        int32_t CallBackStatus;
        uint32_t dwDefaultDetailLevel;
        int8_t* szDialogBoxCaption;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Perf
{
    struct PDH_BROWSE_DLG_CONFIG_W
    {
        uint32_t _bitfield;
        Windows::Win32::WindowsAndMessaging::HWND hWndOwner;
        uint16_t* szDataSource;
        uint16_t* szReturnPathBuffer;
        uint32_t cchReturnPathLength;
        Windows::Win32::Perf::CounterPathCallBack* pCallBack;
        size_t dwCallBackArg;
        int32_t CallBackStatus;
        uint32_t dwDefaultDetailLevel;
        uint16_t* szDialogBoxCaption;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Perf
{
    struct PDH_BROWSE_DLG_CONFIG_A
    {
        uint32_t _bitfield;
        Windows::Win32::WindowsAndMessaging::HWND hWndOwner;
        int8_t* szDataSource;
        int8_t* szReturnPathBuffer;
        uint32_t cchReturnPathLength;
        Windows::Win32::Perf::CounterPathCallBack* pCallBack;
        size_t dwCallBackArg;
        int32_t CallBackStatus;
        uint32_t dwDefaultDetailLevel;
        int8_t* szDialogBoxCaption;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct ip_option_information
    {
        uint8_t Ttl;
        uint8_t Tos;
        uint8_t Flags;
        uint8_t OptionsSize;
        uint8_t* OptionsData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct icmp_echo_reply
    {
        uint32_t Address;
        uint32_t Status;
        uint32_t RoundTripTime;
        uint16_t DataSize;
        uint16_t Reserved;
        void* Data;
        Windows::Win32::IpHelper::ip_option_information Options;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct IPV6_ADDRESS_EX
    {
        uint16_t sin6_port;
        uint32_t sin6_flowinfo;
        uint16_t sin6_addr[8];
        uint32_t sin6_scope_id;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct icmpv6_echo_reply_lh
    {
        Windows::Win32::IpHelper::IPV6_ADDRESS_EX Address;
        uint32_t Status;
        uint32_t RoundTripTime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct arp_send_reply
    {
        uint32_t DestAddress;
        uint32_t SrcAddress;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct tcp_reserve_port_range
    {
        uint16_t UpperRange;
        uint16_t LowerRange;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct IP_ADAPTER_INDEX_MAP
    {
        uint32_t Index;
        uint16_t Name[128];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct IP_INTERFACE_INFO
    {
        int32_t NumAdapters;
        Windows::Win32::IpHelper::IP_ADAPTER_INDEX_MAP Adapter[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct IP_UNIDIRECTIONAL_ADAPTER_ADDRESS
    {
        uint32_t NumAdapters;
        uint32_t Address[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct IP_ADAPTER_ORDER_MAP
    {
        uint32_t NumAdapters;
        uint32_t AdapterOrder[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct IP_MCAST_COUNTER_INFO
    {
        uint64_t InMcastOctets;
        uint64_t OutMcastOctets;
        uint64_t InMcastPkts;
        uint64_t OutMcastPkts;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct NET_IF_RCV_ADDRESS_LH
    {
        Windows::Win32::IpHelper::NET_IF_RCV_ADDRESS_TYPE ifRcvAddressType;
        uint16_t ifRcvAddressLength;
        uint16_t ifRcvAddressOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct NET_IF_ALIAS_LH
    {
        uint16_t ifAliasLength;
        uint16_t ifAliasOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct IF_PHYSICAL_ADDRESS_LH
    {
        uint16_t Length;
        uint8_t Address[32];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct in_addr
    {
        union _S_un_e__Union
        {
            struct _S_un_b_e__Struct
            {
                uint8_t s_b1;
                uint8_t s_b2;
                uint8_t s_b3;
                uint8_t s_b4;
            };
            struct _S_un_w_e__Struct
            {
                uint16_t s_w1;
                uint16_t s_w2;
            };
            _S_un_b_e__Struct S_un_b;
            _S_un_w_e__Struct S_un_w;
            uint32_t S_addr;
        };
        _S_un_e__Union S_un;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct sockaddr_in
    {
        uint16_t sin_family;
        uint16_t sin_port;
        Windows::Win32::WinSock::in_addr sin_addr;
        int8_t sin_zero[8];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    union SOCKADDR_INET
    {
        Windows::Win32::WinSock::sockaddr_in Ipv4;
        Windows::Win32::NetworkDrivers::SOCKADDR_IN6_LH Ipv6;
        uint16_t si_family;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct IP_ADDRESS_PREFIX
    {
        Windows::Win32::IpHelper::SOCKADDR_INET Prefix;
        uint8_t PrefixLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct DNS_SETTINGS
    {
        uint32_t Version;
        uint64_t Flags;
        uint16_t* Hostname;
        uint16_t* Domain;
        uint16_t* SearchList;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct DNS_INTERFACE_SETTINGS
    {
        uint32_t Version;
        uint64_t Flags;
        uint16_t* Domain;
        uint16_t* NameServer;
        uint16_t* SearchList;
        uint32_t RegistrationEnabled;
        uint32_t RegisterAdapterName;
        uint32_t EnableLLMNR;
        uint32_t QueryAdapterName;
        uint16_t* ProfileNameServer;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct DNS_INTERFACE_SETTINGS_EX
    {
        Windows::Win32::IpHelper::DNS_INTERFACE_SETTINGS SettingsV1;
        uint32_t DisableUnconstrainedQueries;
        uint16_t* SupplementalSearchList;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct TCPIP_OWNER_MODULE_BASIC_INFO
    {
        uint16_t* pModuleName;
        uint16_t* pModulePath;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_IPFORWARDROW
    {
        union _Anonymous1_e__Union
        {
            uint32_t dwForwardType;
            Windows::Win32::IpHelper::MIB_IPFORWARD_TYPE ForwardType;
        };
        union _Anonymous2_e__Union
        {
            uint32_t dwForwardProto;
            Windows::Win32::NetworkDrivers::NL_ROUTE_PROTOCOL ForwardProto;
        };
        uint32_t dwForwardDest;
        uint32_t dwForwardMask;
        uint32_t dwForwardPolicy;
        uint32_t dwForwardNextHop;
        uint32_t dwForwardIfIndex;
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
        uint32_t dwForwardAge;
        uint32_t dwForwardNextHopAS;
        uint32_t dwForwardMetric1;
        uint32_t dwForwardMetric2;
        uint32_t dwForwardMetric3;
        uint32_t dwForwardMetric4;
        uint32_t dwForwardMetric5;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct MIB_IPDESTROW
    {
        Windows::Win32::Mib::MIB_IPFORWARDROW ForwardRow;
        uint32_t dwForwardPreference;
        uint32_t dwForwardViewSet;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct MIB_IPDESTTABLE
    {
        uint32_t dwNumEntries;
        Windows::Win32::IpHelper::MIB_IPDESTROW table[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct MIB_ROUTESTATE
    {
        Windows::Win32::SystemServices::BOOL bRoutesSetToStack;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct IP_ADDRESS_STRING
    {
        int8_t String[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct IP_ADDR_STRING
    {
        Windows::Win32::IpHelper::IP_ADDR_STRING* Next;
        Windows::Win32::IpHelper::IP_ADDRESS_STRING IpAddress;
        Windows::Win32::IpHelper::IP_ADDRESS_STRING IpMask;
        uint32_t Context;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct IP_ADAPTER_INFO
    {
        Windows::Win32::IpHelper::IP_ADAPTER_INFO* Next;
        uint32_t ComboIndex;
        int8_t AdapterName[260];
        int8_t Description[132];
        uint32_t AddressLength;
        uint8_t Address[8];
        uint32_t Index;
        uint32_t Type;
        uint32_t DhcpEnabled;
        Windows::Win32::IpHelper::IP_ADDR_STRING* CurrentIpAddress;
        Windows::Win32::IpHelper::IP_ADDR_STRING IpAddressList;
        Windows::Win32::IpHelper::IP_ADDR_STRING GatewayList;
        Windows::Win32::IpHelper::IP_ADDR_STRING DhcpServer;
        Windows::Win32::SystemServices::BOOL HaveWins;
        Windows::Win32::IpHelper::IP_ADDR_STRING PrimaryWinsServer;
        Windows::Win32::IpHelper::IP_ADDR_STRING SecondaryWinsServer;
        int64_t LeaseObtained;
        int64_t LeaseExpires;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct IP_ADAPTER_UNICAST_ADDRESS_LH
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t Length;
                uint32_t Flags;
            };
            uint64_t Alignment;
            _Anonymous_e__Struct Anonymous;
        };
        _Anonymous_e__Union Anonymous;
        Windows::Win32::IpHelper::IP_ADAPTER_UNICAST_ADDRESS_LH* Next;
        Windows::Win32::WinSock::SOCKET_ADDRESS Address;
        Windows::Win32::IpHelper::NL_PREFIX_ORIGIN PrefixOrigin;
        Windows::Win32::IpHelper::NL_SUFFIX_ORIGIN SuffixOrigin;
        Windows::Win32::IpHelper::NL_DAD_STATE DadState;
        uint32_t ValidLifetime;
        uint32_t PreferredLifetime;
        uint32_t LeaseLifetime;
        uint8_t OnLinkPrefixLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct IP_ADAPTER_UNICAST_ADDRESS_XP
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t Length;
                uint32_t Flags;
            };
            uint64_t Alignment;
            _Anonymous_e__Struct Anonymous;
        };
        _Anonymous_e__Union Anonymous;
        Windows::Win32::IpHelper::IP_ADAPTER_UNICAST_ADDRESS_XP* Next;
        Windows::Win32::WinSock::SOCKET_ADDRESS Address;
        Windows::Win32::IpHelper::NL_PREFIX_ORIGIN PrefixOrigin;
        Windows::Win32::IpHelper::NL_SUFFIX_ORIGIN SuffixOrigin;
        Windows::Win32::IpHelper::NL_DAD_STATE DadState;
        uint32_t ValidLifetime;
        uint32_t PreferredLifetime;
        uint32_t LeaseLifetime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct IP_ADAPTER_ANYCAST_ADDRESS_XP
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t Length;
                uint32_t Flags;
            };
            uint64_t Alignment;
            _Anonymous_e__Struct Anonymous;
        };
        _Anonymous_e__Union Anonymous;
        Windows::Win32::IpHelper::IP_ADAPTER_ANYCAST_ADDRESS_XP* Next;
        Windows::Win32::WinSock::SOCKET_ADDRESS Address;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct IP_ADAPTER_MULTICAST_ADDRESS_XP
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t Length;
                uint32_t Flags;
            };
            uint64_t Alignment;
            _Anonymous_e__Struct Anonymous;
        };
        _Anonymous_e__Union Anonymous;
        Windows::Win32::IpHelper::IP_ADAPTER_MULTICAST_ADDRESS_XP* Next;
        Windows::Win32::WinSock::SOCKET_ADDRESS Address;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct IP_ADAPTER_DNS_SERVER_ADDRESS_XP
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t Length;
                uint32_t Reserved;
            };
            uint64_t Alignment;
            _Anonymous_e__Struct Anonymous;
        };
        _Anonymous_e__Union Anonymous;
        Windows::Win32::IpHelper::IP_ADAPTER_DNS_SERVER_ADDRESS_XP* Next;
        Windows::Win32::WinSock::SOCKET_ADDRESS Address;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct IP_ADAPTER_WINS_SERVER_ADDRESS_LH
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t Length;
                uint32_t Reserved;
            };
            uint64_t Alignment;
            _Anonymous_e__Struct Anonymous;
        };
        _Anonymous_e__Union Anonymous;
        Windows::Win32::IpHelper::IP_ADAPTER_WINS_SERVER_ADDRESS_LH* Next;
        Windows::Win32::WinSock::SOCKET_ADDRESS Address;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct IP_ADAPTER_GATEWAY_ADDRESS_LH
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t Length;
                uint32_t Reserved;
            };
            uint64_t Alignment;
            _Anonymous_e__Struct Anonymous;
        };
        _Anonymous_e__Union Anonymous;
        Windows::Win32::IpHelper::IP_ADAPTER_GATEWAY_ADDRESS_LH* Next;
        Windows::Win32::WinSock::SOCKET_ADDRESS Address;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct IP_ADAPTER_PREFIX_XP
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t Length;
                uint32_t Flags;
            };
            uint64_t Alignment;
            _Anonymous_e__Struct Anonymous;
        };
        _Anonymous_e__Union Anonymous;
        Windows::Win32::IpHelper::IP_ADAPTER_PREFIX_XP* Next;
        Windows::Win32::WinSock::SOCKET_ADDRESS Address;
        uint32_t PrefixLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct IP_ADAPTER_DNS_SUFFIX
    {
        Windows::Win32::IpHelper::IP_ADAPTER_DNS_SUFFIX* Next;
        uint16_t String[256];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct IP_ADAPTER_ADDRESSES_LH
    {
        union _Anonymous1_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t Length;
                uint32_t IfIndex;
            };
            uint64_t Alignment;
            _Anonymous_e__Struct Anonymous;
        };
        union _Anonymous2_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t _bitfield;
            };
            uint32_t Flags;
            _Anonymous_e__Struct Anonymous;
        };
        _Anonymous1_e__Union Anonymous1;
        Windows::Win32::IpHelper::IP_ADAPTER_ADDRESSES_LH* Next;
        int8_t* AdapterName;
        Windows::Win32::IpHelper::IP_ADAPTER_UNICAST_ADDRESS_LH* FirstUnicastAddress;
        Windows::Win32::IpHelper::IP_ADAPTER_ANYCAST_ADDRESS_XP* FirstAnycastAddress;
        Windows::Win32::IpHelper::IP_ADAPTER_MULTICAST_ADDRESS_XP* FirstMulticastAddress;
        Windows::Win32::IpHelper::IP_ADAPTER_DNS_SERVER_ADDRESS_XP* FirstDnsServerAddress;
        uint16_t* DnsSuffix;
        uint16_t* Description;
        uint16_t* FriendlyName;
        uint8_t PhysicalAddress[8];
        uint32_t PhysicalAddressLength;
        _Anonymous2_e__Union Anonymous2;
        uint32_t Mtu;
        uint32_t IfType;
        Windows::Win32::IpHelper::IF_OPER_STATUS OperStatus;
        uint32_t Ipv6IfIndex;
        uint32_t ZoneIndices[16];
        Windows::Win32::IpHelper::IP_ADAPTER_PREFIX_XP* FirstPrefix;
        uint64_t TransmitLinkSpeed;
        uint64_t ReceiveLinkSpeed;
        Windows::Win32::IpHelper::IP_ADAPTER_WINS_SERVER_ADDRESS_LH* FirstWinsServerAddress;
        Windows::Win32::IpHelper::IP_ADAPTER_GATEWAY_ADDRESS_LH* FirstGatewayAddress;
        uint32_t Ipv4Metric;
        uint32_t Ipv6Metric;
        Windows::Win32::IpHelper::NET_LUID_LH Luid;
        Windows::Win32::WinSock::SOCKET_ADDRESS Dhcpv4Server;
        uint32_t CompartmentId;
        ::win32::guid NetworkGuid;
        Windows::Win32::NetworkDrivers::NET_IF_CONNECTION_TYPE ConnectionType;
        Windows::Win32::NetworkDrivers::TUNNEL_TYPE TunnelType;
        Windows::Win32::WinSock::SOCKET_ADDRESS Dhcpv6Server;
        uint8_t Dhcpv6ClientDuid[130];
        uint32_t Dhcpv6ClientDuidLength;
        uint32_t Dhcpv6Iaid;
        Windows::Win32::IpHelper::IP_ADAPTER_DNS_SUFFIX* FirstDnsSuffix;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct IP_ADAPTER_ADDRESSES_XP
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t Length;
                uint32_t IfIndex;
            };
            uint64_t Alignment;
            _Anonymous_e__Struct Anonymous;
        };
        _Anonymous_e__Union Anonymous;
        Windows::Win32::IpHelper::IP_ADAPTER_ADDRESSES_XP* Next;
        int8_t* AdapterName;
        Windows::Win32::IpHelper::IP_ADAPTER_UNICAST_ADDRESS_XP* FirstUnicastAddress;
        Windows::Win32::IpHelper::IP_ADAPTER_ANYCAST_ADDRESS_XP* FirstAnycastAddress;
        Windows::Win32::IpHelper::IP_ADAPTER_MULTICAST_ADDRESS_XP* FirstMulticastAddress;
        Windows::Win32::IpHelper::IP_ADAPTER_DNS_SERVER_ADDRESS_XP* FirstDnsServerAddress;
        uint16_t* DnsSuffix;
        uint16_t* Description;
        uint16_t* FriendlyName;
        uint8_t PhysicalAddress[8];
        uint32_t PhysicalAddressLength;
        uint32_t Flags;
        uint32_t Mtu;
        uint32_t IfType;
        Windows::Win32::IpHelper::IF_OPER_STATUS OperStatus;
        uint32_t Ipv6IfIndex;
        uint32_t ZoneIndices[16];
        Windows::Win32::IpHelper::IP_ADAPTER_PREFIX_XP* FirstPrefix;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct IP_PER_ADAPTER_INFO_W2KSP1
    {
        uint32_t AutoconfigEnabled;
        uint32_t AutoconfigActive;
        Windows::Win32::IpHelper::IP_ADDR_STRING* CurrentDnsServer;
        Windows::Win32::IpHelper::IP_ADDR_STRING DnsServerList;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct FIXED_INFO_W2KSP1
    {
        int8_t HostName[132];
        int8_t DomainName[132];
        Windows::Win32::IpHelper::IP_ADDR_STRING* CurrentDnsServer;
        Windows::Win32::IpHelper::IP_ADDR_STRING DnsServerList;
        uint32_t NodeType;
        int8_t ScopeId[260];
        uint32_t EnableRouting;
        uint32_t EnableProxy;
        uint32_t EnableDns;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct ip_interface_name_info_w2ksp1
    {
        uint32_t Index;
        uint32_t MediaType;
        uint8_t ConnectionType;
        uint8_t AccessType;
        ::win32::guid DeviceGuid;
        ::win32::guid InterfaceGuid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct TCP_ESTATS_SYN_OPTS_ROS_v0
    {
        uint8_t ActiveOpen;
        uint32_t MssRcvd;
        uint32_t MssSent;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct TCP_ESTATS_DATA_ROD_v0
    {
        uint64_t DataBytesOut;
        uint64_t DataSegsOut;
        uint64_t DataBytesIn;
        uint64_t DataSegsIn;
        uint64_t SegsOut;
        uint64_t SegsIn;
        uint32_t SoftErrors;
        uint32_t SoftErrorReason;
        uint32_t SndUna;
        uint32_t SndNxt;
        uint32_t SndMax;
        uint64_t ThruBytesAcked;
        uint32_t RcvNxt;
        uint64_t ThruBytesReceived;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct TCP_ESTATS_DATA_RW_v0
    {
        uint8_t EnableCollection;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct TCP_ESTATS_SND_CONG_ROD_v0
    {
        uint32_t SndLimTransRwin;
        uint32_t SndLimTimeRwin;
        size_t SndLimBytesRwin;
        uint32_t SndLimTransCwnd;
        uint32_t SndLimTimeCwnd;
        size_t SndLimBytesCwnd;
        uint32_t SndLimTransSnd;
        uint32_t SndLimTimeSnd;
        size_t SndLimBytesSnd;
        uint32_t SlowStart;
        uint32_t CongAvoid;
        uint32_t OtherReductions;
        uint32_t CurCwnd;
        uint32_t MaxSsCwnd;
        uint32_t MaxCaCwnd;
        uint32_t CurSsthresh;
        uint32_t MaxSsthresh;
        uint32_t MinSsthresh;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct TCP_ESTATS_SND_CONG_ROS_v0
    {
        uint32_t LimCwnd;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct TCP_ESTATS_SND_CONG_RW_v0
    {
        uint8_t EnableCollection;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct TCP_ESTATS_PATH_ROD_v0
    {
        uint32_t FastRetran;
        uint32_t Timeouts;
        uint32_t SubsequentTimeouts;
        uint32_t CurTimeoutCount;
        uint32_t AbruptTimeouts;
        uint32_t PktsRetrans;
        uint32_t BytesRetrans;
        uint32_t DupAcksIn;
        uint32_t SacksRcvd;
        uint32_t SackBlocksRcvd;
        uint32_t CongSignals;
        uint32_t PreCongSumCwnd;
        uint32_t PreCongSumRtt;
        uint32_t PostCongSumRtt;
        uint32_t PostCongCountRtt;
        uint32_t EcnSignals;
        uint32_t EceRcvd;
        uint32_t SendStall;
        uint32_t QuenchRcvd;
        uint32_t RetranThresh;
        uint32_t SndDupAckEpisodes;
        uint32_t SumBytesReordered;
        uint32_t NonRecovDa;
        uint32_t NonRecovDaEpisodes;
        uint32_t AckAfterFr;
        uint32_t DsackDups;
        uint32_t SampleRtt;
        uint32_t SmoothedRtt;
        uint32_t RttVar;
        uint32_t MaxRtt;
        uint32_t MinRtt;
        uint32_t SumRtt;
        uint32_t CountRtt;
        uint32_t CurRto;
        uint32_t MaxRto;
        uint32_t MinRto;
        uint32_t CurMss;
        uint32_t MaxMss;
        uint32_t MinMss;
        uint32_t SpuriousRtoDetections;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct TCP_ESTATS_PATH_RW_v0
    {
        uint8_t EnableCollection;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct TCP_ESTATS_SEND_BUFF_ROD_v0
    {
        size_t CurRetxQueue;
        size_t MaxRetxQueue;
        size_t CurAppWQueue;
        size_t MaxAppWQueue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct TCP_ESTATS_SEND_BUFF_RW_v0
    {
        uint8_t EnableCollection;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct TCP_ESTATS_REC_ROD_v0
    {
        uint32_t CurRwinSent;
        uint32_t MaxRwinSent;
        uint32_t MinRwinSent;
        uint32_t LimRwin;
        uint32_t DupAckEpisodes;
        uint32_t DupAcksOut;
        uint32_t CeRcvd;
        uint32_t EcnSent;
        uint32_t EcnNoncesRcvd;
        uint32_t CurReasmQueue;
        uint32_t MaxReasmQueue;
        size_t CurAppRQueue;
        size_t MaxAppRQueue;
        uint8_t WinScaleSent;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct TCP_ESTATS_REC_RW_v0
    {
        uint8_t EnableCollection;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct TCP_ESTATS_OBS_REC_ROD_v0
    {
        uint32_t CurRwinRcvd;
        uint32_t MaxRwinRcvd;
        uint32_t MinRwinRcvd;
        uint8_t WinScaleRcvd;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct TCP_ESTATS_OBS_REC_RW_v0
    {
        uint8_t EnableCollection;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct TCP_ESTATS_BANDWIDTH_RW_v0
    {
        Windows::Win32::IpHelper::TCP_BOOLEAN_OPTIONAL EnableCollectionOutbound;
        Windows::Win32::IpHelper::TCP_BOOLEAN_OPTIONAL EnableCollectionInbound;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct TCP_ESTATS_BANDWIDTH_ROD_v0
    {
        uint64_t OutboundBandwidth;
        uint64_t InboundBandwidth;
        uint64_t OutboundInstability;
        uint64_t InboundInstability;
        uint8_t OutboundBandwidthPeaked;
        uint8_t InboundBandwidthPeaked;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct TCP_ESTATS_FINE_RTT_RW_v0
    {
        uint8_t EnableCollection;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct TCP_ESTATS_FINE_RTT_ROD_v0
    {
        uint32_t RttVar;
        uint32_t MaxRtt;
        uint32_t MinRtt;
        uint32_t SumRtt;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct INTERFACE_TIMESTAMP_CAPABILITY_FLAGS
    {
        uint8_t PtpV2OverUdpIPv4EventMsgReceiveHw;
        uint8_t PtpV2OverUdpIPv4AllMsgReceiveHw;
        uint8_t PtpV2OverUdpIPv4EventMsgTransmitHw;
        uint8_t PtpV2OverUdpIPv4AllMsgTransmitHw;
        uint8_t PtpV2OverUdpIPv6EventMsgReceiveHw;
        uint8_t PtpV2OverUdpIPv6AllMsgReceiveHw;
        uint8_t PtpV2OverUdpIPv6EventMsgTransmitHw;
        uint8_t PtpV2OverUdpIPv6AllMsgTransmitHw;
        uint8_t AllReceiveHw;
        uint8_t AllTransmitHw;
        uint8_t TaggedTransmitHw;
        uint8_t AllReceiveSw;
        uint8_t AllTransmitSw;
        uint8_t TaggedTransmitSw;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct INTERFACE_TIMESTAMP_CAPABILITIES
    {
        uint32_t Version;
        uint64_t HardwareClockFrequencyHz;
        uint8_t CrossTimestamp;
        uint64_t Reserved1;
        uint64_t Reserved2;
        Windows::Win32::IpHelper::INTERFACE_TIMESTAMP_CAPABILITY_FLAGS TimestampFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct INTERFACE_HARDWARE_CROSSTIMESTAMP
    {
        uint32_t Version;
        uint32_t Flags;
        uint64_t SystemTimestamp1;
        uint64_t HardwareClockTimestamp;
        uint64_t SystemTimestamp2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct HIFTIMESTAMPCHANGE__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetworkDrivers
{
    struct NET_PHYSICAL_LOCATION_LH
    {
        uint32_t BusNumber;
        uint32_t SlotNumber;
        uint32_t FunctionNumber;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetworkDrivers
{
    struct IF_COUNTED_STRING_LH
    {
        uint16_t Length;
        uint16_t String[257];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetworkDrivers
{
    struct NDIS_INTERFACE_INFORMATION
    {
        Windows::Win32::NetworkDrivers::NET_IF_OPER_STATUS ifOperStatus;
        uint32_t ifOperStatusFlags;
        Windows::Win32::NetworkDrivers::NET_IF_MEDIA_CONNECT_STATE MediaConnectState;
        Windows::Win32::NetworkDrivers::NET_IF_MEDIA_DUPLEX_STATE MediaDuplexState;
        uint32_t ifMtu;
        uint8_t ifPromiscuousMode;
        uint8_t ifDeviceWakeUpEnable;
        uint64_t XmitLinkSpeed;
        uint64_t RcvLinkSpeed;
        uint64_t ifLastChange;
        uint64_t ifCounterDiscontinuityTime;
        uint64_t ifInUnknownProtos;
        uint64_t ifInDiscards;
        uint64_t ifInErrors;
        uint64_t ifHCInOctets;
        uint64_t ifHCInUcastPkts;
        uint64_t ifHCInMulticastPkts;
        uint64_t ifHCInBroadcastPkts;
        uint64_t ifHCOutOctets;
        uint64_t ifHCOutUcastPkts;
        uint64_t ifHCOutMulticastPkts;
        uint64_t ifHCOutBroadcastPkts;
        uint64_t ifOutErrors;
        uint64_t ifOutDiscards;
        uint64_t ifHCInUcastOctets;
        uint64_t ifHCInMulticastOctets;
        uint64_t ifHCInBroadcastOctets;
        uint64_t ifHCOutUcastOctets;
        uint64_t ifHCOutMulticastOctets;
        uint64_t ifHCOutBroadcastOctets;
        uint32_t CompartmentId;
        uint32_t SupportedStatistics;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_IF_ROW2
    {
        struct _InterfaceAndOperStatusFlags_e__Struct
        {
            uint8_t _bitfield;
        };
        Windows::Win32::IpHelper::NET_LUID_LH InterfaceLuid;
        uint32_t InterfaceIndex;
        ::win32::guid InterfaceGuid;
        uint16_t Alias[257];
        uint16_t Description[257];
        uint32_t PhysicalAddressLength;
        uint8_t PhysicalAddress[32];
        uint8_t PermanentPhysicalAddress[32];
        uint32_t Mtu;
        uint32_t Type;
        Windows::Win32::NetworkDrivers::TUNNEL_TYPE TunnelType;
        Windows::Win32::NativeWiFi::NDIS_MEDIUM MediaType;
        Windows::Win32::NativeWiFi::NDIS_PHYSICAL_MEDIUM PhysicalMediumType;
        Windows::Win32::NetworkDrivers::NET_IF_ACCESS_TYPE AccessType;
        Windows::Win32::NetworkDrivers::NET_IF_DIRECTION_TYPE DirectionType;
        _InterfaceAndOperStatusFlags_e__Struct InterfaceAndOperStatusFlags;
        Windows::Win32::IpHelper::IF_OPER_STATUS OperStatus;
        Windows::Win32::NetworkDrivers::NET_IF_ADMIN_STATUS AdminStatus;
        Windows::Win32::NetworkDrivers::NET_IF_MEDIA_CONNECT_STATE MediaConnectState;
        ::win32::guid NetworkGuid;
        Windows::Win32::NetworkDrivers::NET_IF_CONNECTION_TYPE ConnectionType;
        uint64_t TransmitLinkSpeed;
        uint64_t ReceiveLinkSpeed;
        uint64_t InOctets;
        uint64_t InUcastPkts;
        uint64_t InNUcastPkts;
        uint64_t InDiscards;
        uint64_t InErrors;
        uint64_t InUnknownProtos;
        uint64_t InUcastOctets;
        uint64_t InMulticastOctets;
        uint64_t InBroadcastOctets;
        uint64_t OutOctets;
        uint64_t OutUcastPkts;
        uint64_t OutNUcastPkts;
        uint64_t OutDiscards;
        uint64_t OutErrors;
        uint64_t OutUcastOctets;
        uint64_t OutMulticastOctets;
        uint64_t OutBroadcastOctets;
        uint64_t OutQLen;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_IF_TABLE2
    {
        uint32_t NumEntries;
        Windows::Win32::Mib::MIB_IF_ROW2 Table[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct NL_INTERFACE_OFFLOAD_ROD
    {
        uint8_t _bitfield;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_IPINTERFACE_ROW
    {
        uint16_t Family;
        Windows::Win32::IpHelper::NET_LUID_LH InterfaceLuid;
        uint32_t InterfaceIndex;
        uint32_t MaxReassemblySize;
        uint64_t InterfaceIdentifier;
        uint32_t MinRouterAdvertisementInterval;
        uint32_t MaxRouterAdvertisementInterval;
        uint8_t AdvertisingEnabled;
        uint8_t ForwardingEnabled;
        uint8_t WeakHostSend;
        uint8_t WeakHostReceive;
        uint8_t UseAutomaticMetric;
        uint8_t UseNeighborUnreachabilityDetection;
        uint8_t ManagedAddressConfigurationSupported;
        uint8_t OtherStatefulConfigurationSupported;
        uint8_t AdvertiseDefaultRoute;
        Windows::Win32::NetworkDrivers::NL_ROUTER_DISCOVERY_BEHAVIOR RouterDiscoveryBehavior;
        uint32_t DadTransmits;
        uint32_t BaseReachableTime;
        uint32_t RetransmitTime;
        uint32_t PathMtuDiscoveryTimeout;
        Windows::Win32::NetworkDrivers::NL_LINK_LOCAL_ADDRESS_BEHAVIOR LinkLocalAddressBehavior;
        uint32_t LinkLocalAddressTimeout;
        uint32_t ZoneIndices[16];
        uint32_t SitePrefixLength;
        uint32_t Metric;
        uint32_t NlMtu;
        uint8_t Connected;
        uint8_t SupportsWakeUpPatterns;
        uint8_t SupportsNeighborDiscovery;
        uint8_t SupportsRouterDiscovery;
        uint32_t ReachableTime;
        Windows::Win32::Mib::NL_INTERFACE_OFFLOAD_ROD TransmitOffload;
        Windows::Win32::Mib::NL_INTERFACE_OFFLOAD_ROD ReceiveOffload;
        uint8_t DisableDefaultRoutes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_IPINTERFACE_TABLE
    {
        uint32_t NumEntries;
        Windows::Win32::Mib::MIB_IPINTERFACE_ROW Table[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_IFSTACK_ROW
    {
        uint32_t HigherLayerInterfaceIndex;
        uint32_t LowerLayerInterfaceIndex;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_INVERTEDIFSTACK_ROW
    {
        uint32_t LowerLayerInterfaceIndex;
        uint32_t HigherLayerInterfaceIndex;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_IFSTACK_TABLE
    {
        uint32_t NumEntries;
        Windows::Win32::Mib::MIB_IFSTACK_ROW Table[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_INVERTEDIFSTACK_TABLE
    {
        uint32_t NumEntries;
        Windows::Win32::Mib::MIB_INVERTEDIFSTACK_ROW Table[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct NL_BANDWIDTH_INFORMATION
    {
        uint64_t Bandwidth;
        uint64_t Instability;
        uint8_t BandwidthPeaked;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_IP_NETWORK_CONNECTION_BANDWIDTH_ESTIMATES
    {
        Windows::Win32::IpHelper::NL_BANDWIDTH_INFORMATION InboundBandwidthInformation;
        Windows::Win32::IpHelper::NL_BANDWIDTH_INFORMATION OutboundBandwidthInformation;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_UNICASTIPADDRESS_ROW
    {
        Windows::Win32::IpHelper::SOCKADDR_INET Address;
        Windows::Win32::IpHelper::NET_LUID_LH InterfaceLuid;
        uint32_t InterfaceIndex;
        Windows::Win32::IpHelper::NL_PREFIX_ORIGIN PrefixOrigin;
        Windows::Win32::IpHelper::NL_SUFFIX_ORIGIN SuffixOrigin;
        uint32_t ValidLifetime;
        uint32_t PreferredLifetime;
        uint8_t OnLinkPrefixLength;
        uint8_t SkipAsSource;
        Windows::Win32::IpHelper::NL_DAD_STATE DadState;
        Windows::Win32::WinSock::SCOPE_ID ScopeId;
        Windows::Win32::SystemServices::LARGE_INTEGER CreationTimeStamp;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_UNICASTIPADDRESS_TABLE
    {
        uint32_t NumEntries;
        Windows::Win32::Mib::MIB_UNICASTIPADDRESS_ROW Table[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_ANYCASTIPADDRESS_ROW
    {
        Windows::Win32::IpHelper::SOCKADDR_INET Address;
        Windows::Win32::IpHelper::NET_LUID_LH InterfaceLuid;
        uint32_t InterfaceIndex;
        Windows::Win32::WinSock::SCOPE_ID ScopeId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_ANYCASTIPADDRESS_TABLE
    {
        uint32_t NumEntries;
        Windows::Win32::Mib::MIB_ANYCASTIPADDRESS_ROW Table[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_MULTICASTIPADDRESS_ROW
    {
        Windows::Win32::IpHelper::SOCKADDR_INET Address;
        uint32_t InterfaceIndex;
        Windows::Win32::IpHelper::NET_LUID_LH InterfaceLuid;
        Windows::Win32::WinSock::SCOPE_ID ScopeId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_MULTICASTIPADDRESS_TABLE
    {
        uint32_t NumEntries;
        Windows::Win32::Mib::MIB_MULTICASTIPADDRESS_ROW Table[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_IPFORWARD_ROW2
    {
        Windows::Win32::IpHelper::NET_LUID_LH InterfaceLuid;
        uint32_t InterfaceIndex;
        Windows::Win32::IpHelper::IP_ADDRESS_PREFIX DestinationPrefix;
        Windows::Win32::IpHelper::SOCKADDR_INET NextHop;
        uint8_t SitePrefixLength;
        uint32_t ValidLifetime;
        uint32_t PreferredLifetime;
        uint32_t Metric;
        Windows::Win32::NetworkDrivers::NL_ROUTE_PROTOCOL Protocol;
        uint8_t Loopback;
        uint8_t AutoconfigureAddress;
        uint8_t Publish;
        uint8_t Immortal;
        uint32_t Age;
        Windows::Win32::NetworkDrivers::NL_ROUTE_ORIGIN Origin;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_IPFORWARD_TABLE2
    {
        uint32_t NumEntries;
        Windows::Win32::Mib::MIB_IPFORWARD_ROW2 Table[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_IPPATH_ROW
    {
        union _Anonymous_e__Union
        {
            uint32_t LastReachable;
            uint32_t LastUnreachable;
        };
        Windows::Win32::IpHelper::SOCKADDR_INET Source;
        Windows::Win32::IpHelper::SOCKADDR_INET Destination;
        Windows::Win32::IpHelper::NET_LUID_LH InterfaceLuid;
        uint32_t InterfaceIndex;
        Windows::Win32::IpHelper::SOCKADDR_INET CurrentNextHop;
        uint32_t PathMtu;
        uint32_t RttMean;
        uint32_t RttDeviation;
        _Anonymous_e__Union Anonymous;
        uint8_t IsReachable;
        uint64_t LinkTransmitSpeed;
        uint64_t LinkReceiveSpeed;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_IPPATH_TABLE
    {
        uint32_t NumEntries;
        Windows::Win32::Mib::MIB_IPPATH_ROW Table[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_IPNET_ROW2
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint8_t _bitfield;
            };
            _Anonymous_e__Struct Anonymous;
            uint8_t Flags;
        };
        union _ReachabilityTime_e__Union
        {
            uint32_t LastReachable;
            uint32_t LastUnreachable;
        };
        Windows::Win32::IpHelper::SOCKADDR_INET Address;
        uint32_t InterfaceIndex;
        Windows::Win32::IpHelper::NET_LUID_LH InterfaceLuid;
        uint8_t PhysicalAddress[32];
        uint32_t PhysicalAddressLength;
        Windows::Win32::NetworkDrivers::NL_NEIGHBOR_STATE State;
        _Anonymous_e__Union Anonymous;
        _ReachabilityTime_e__Union ReachabilityTime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_IPNET_TABLE2
    {
        uint32_t NumEntries;
        Windows::Win32::Mib::MIB_IPNET_ROW2 Table[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_OPAQUE_QUERY
    {
        uint32_t dwVarId;
        uint32_t rgdwVarIndex[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_IFNUMBER
    {
        uint32_t dwValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_IFROW
    {
        uint16_t wszName[256];
        uint32_t dwIndex;
        uint32_t dwType;
        uint32_t dwMtu;
        uint32_t dwSpeed;
        uint32_t dwPhysAddrLen;
        uint8_t bPhysAddr[8];
        uint32_t dwAdminStatus;
        Windows::Win32::IpHelper::INTERNAL_IF_OPER_STATUS dwOperStatus;
        uint32_t dwLastChange;
        uint32_t dwInOctets;
        uint32_t dwInUcastPkts;
        uint32_t dwInNUcastPkts;
        uint32_t dwInDiscards;
        uint32_t dwInErrors;
        uint32_t dwInUnknownProtos;
        uint32_t dwOutOctets;
        uint32_t dwOutUcastPkts;
        uint32_t dwOutNUcastPkts;
        uint32_t dwOutDiscards;
        uint32_t dwOutErrors;
        uint32_t dwOutQLen;
        uint32_t dwDescrLen;
        uint8_t bDescr[256];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_IFTABLE
    {
        uint32_t dwNumEntries;
        Windows::Win32::Mib::MIB_IFROW table[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_IPADDRROW_XP
    {
        uint32_t dwAddr;
        uint32_t dwIndex;
        uint32_t dwMask;
        uint32_t dwBCastAddr;
        uint32_t dwReasmSize;
        uint16_t unused1;
        uint16_t wType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_IPADDRROW_W2K
    {
        uint32_t dwAddr;
        uint32_t dwIndex;
        uint32_t dwMask;
        uint32_t dwBCastAddr;
        uint32_t dwReasmSize;
        uint16_t unused1;
        uint16_t unused2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_IPADDRTABLE
    {
        uint32_t dwNumEntries;
        Windows::Win32::Mib::MIB_IPADDRROW_XP table[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_IPFORWARDNUMBER
    {
        uint32_t dwValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_IPFORWARDTABLE
    {
        uint32_t dwNumEntries;
        Windows::Win32::Mib::MIB_IPFORWARDROW table[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_IPNETROW_LH
    {
        union _Anonymous_e__Union
        {
            uint32_t dwType;
            Windows::Win32::IpHelper::MIB_IPNET_TYPE Type;
        };
        uint32_t dwIndex;
        uint32_t dwPhysAddrLen;
        uint8_t bPhysAddr[8];
        uint32_t dwAddr;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_IPNETROW_W2K
    {
        uint32_t dwIndex;
        uint32_t dwPhysAddrLen;
        uint8_t bPhysAddr[8];
        uint32_t dwAddr;
        uint32_t dwType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_IPNETTABLE
    {
        uint32_t dwNumEntries;
        Windows::Win32::Mib::MIB_IPNETROW_LH table[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_IPSTATS_LH
    {
        union _Anonymous_e__Union
        {
            uint32_t dwForwarding;
            Windows::Win32::IpHelper::MIB_IPSTATS_FORWARDING Forwarding;
        };
        _Anonymous_e__Union Anonymous;
        uint32_t dwDefaultTTL;
        uint32_t dwInReceives;
        uint32_t dwInHdrErrors;
        uint32_t dwInAddrErrors;
        uint32_t dwForwDatagrams;
        uint32_t dwInUnknownProtos;
        uint32_t dwInDiscards;
        uint32_t dwInDelivers;
        uint32_t dwOutRequests;
        uint32_t dwRoutingDiscards;
        uint32_t dwOutDiscards;
        uint32_t dwOutNoRoutes;
        uint32_t dwReasmTimeout;
        uint32_t dwReasmReqds;
        uint32_t dwReasmOks;
        uint32_t dwReasmFails;
        uint32_t dwFragOks;
        uint32_t dwFragFails;
        uint32_t dwFragCreates;
        uint32_t dwNumIf;
        uint32_t dwNumAddr;
        uint32_t dwNumRoutes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_IPSTATS_W2K
    {
        uint32_t dwForwarding;
        uint32_t dwDefaultTTL;
        uint32_t dwInReceives;
        uint32_t dwInHdrErrors;
        uint32_t dwInAddrErrors;
        uint32_t dwForwDatagrams;
        uint32_t dwInUnknownProtos;
        uint32_t dwInDiscards;
        uint32_t dwInDelivers;
        uint32_t dwOutRequests;
        uint32_t dwRoutingDiscards;
        uint32_t dwOutDiscards;
        uint32_t dwOutNoRoutes;
        uint32_t dwReasmTimeout;
        uint32_t dwReasmReqds;
        uint32_t dwReasmOks;
        uint32_t dwReasmFails;
        uint32_t dwFragOks;
        uint32_t dwFragFails;
        uint32_t dwFragCreates;
        uint32_t dwNumIf;
        uint32_t dwNumAddr;
        uint32_t dwNumRoutes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIBICMPSTATS
    {
        uint32_t dwMsgs;
        uint32_t dwErrors;
        uint32_t dwDestUnreachs;
        uint32_t dwTimeExcds;
        uint32_t dwParmProbs;
        uint32_t dwSrcQuenchs;
        uint32_t dwRedirects;
        uint32_t dwEchos;
        uint32_t dwEchoReps;
        uint32_t dwTimestamps;
        uint32_t dwTimestampReps;
        uint32_t dwAddrMasks;
        uint32_t dwAddrMaskReps;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIBICMPINFO
    {
        Windows::Win32::Mib::MIBICMPSTATS icmpInStats;
        Windows::Win32::Mib::MIBICMPSTATS icmpOutStats;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_ICMP
    {
        Windows::Win32::Mib::MIBICMPINFO stats;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIBICMPSTATS_EX_XPSP1
    {
        uint32_t dwMsgs;
        uint32_t dwErrors;
        uint32_t rgdwTypeCount[256];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_ICMP_EX_XPSP1
    {
        Windows::Win32::Mib::MIBICMPSTATS_EX_XPSP1 icmpInStats;
        Windows::Win32::Mib::MIBICMPSTATS_EX_XPSP1 icmpOutStats;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_IPMCAST_OIF_XP
    {
        uint32_t dwOutIfIndex;
        uint32_t dwNextHopAddr;
        uint32_t dwReserved;
        uint32_t dwReserved1;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_IPMCAST_OIF_W2K
    {
        uint32_t dwOutIfIndex;
        uint32_t dwNextHopAddr;
        void* pvReserved;
        uint32_t dwReserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_IPMCAST_MFE
    {
        uint32_t dwGroup;
        uint32_t dwSource;
        uint32_t dwSrcMask;
        uint32_t dwUpStrmNgbr;
        uint32_t dwInIfIndex;
        uint32_t dwInIfProtocol;
        uint32_t dwRouteProtocol;
        uint32_t dwRouteNetwork;
        uint32_t dwRouteMask;
        uint32_t ulUpTime;
        uint32_t ulExpiryTime;
        uint32_t ulTimeOut;
        uint32_t ulNumOutIf;
        uint32_t fFlags;
        uint32_t dwReserved;
        Windows::Win32::Mib::MIB_IPMCAST_OIF_XP rgmioOutInfo[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_MFE_TABLE
    {
        uint32_t dwNumEntries;
        Windows::Win32::Mib::MIB_IPMCAST_MFE table[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_IPMCAST_OIF_STATS_LH
    {
        uint32_t dwOutIfIndex;
        uint32_t dwNextHopAddr;
        uint32_t dwDialContext;
        uint32_t ulTtlTooLow;
        uint32_t ulFragNeeded;
        uint32_t ulOutPackets;
        uint32_t ulOutDiscards;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_IPMCAST_OIF_STATS_W2K
    {
        uint32_t dwOutIfIndex;
        uint32_t dwNextHopAddr;
        void* pvDialContext;
        uint32_t ulTtlTooLow;
        uint32_t ulFragNeeded;
        uint32_t ulOutPackets;
        uint32_t ulOutDiscards;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_IPMCAST_MFE_STATS
    {
        uint32_t dwGroup;
        uint32_t dwSource;
        uint32_t dwSrcMask;
        uint32_t dwUpStrmNgbr;
        uint32_t dwInIfIndex;
        uint32_t dwInIfProtocol;
        uint32_t dwRouteProtocol;
        uint32_t dwRouteNetwork;
        uint32_t dwRouteMask;
        uint32_t ulUpTime;
        uint32_t ulExpiryTime;
        uint32_t ulNumOutIf;
        uint32_t ulInPkts;
        uint32_t ulInOctets;
        uint32_t ulPktsDifferentIf;
        uint32_t ulQueueOverflow;
        Windows::Win32::Mib::MIB_IPMCAST_OIF_STATS_LH rgmiosOutStats[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_MFE_STATS_TABLE
    {
        uint32_t dwNumEntries;
        Windows::Win32::Mib::MIB_IPMCAST_MFE_STATS table[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_IPMCAST_MFE_STATS_EX_XP
    {
        uint32_t dwGroup;
        uint32_t dwSource;
        uint32_t dwSrcMask;
        uint32_t dwUpStrmNgbr;
        uint32_t dwInIfIndex;
        uint32_t dwInIfProtocol;
        uint32_t dwRouteProtocol;
        uint32_t dwRouteNetwork;
        uint32_t dwRouteMask;
        uint32_t ulUpTime;
        uint32_t ulExpiryTime;
        uint32_t ulNumOutIf;
        uint32_t ulInPkts;
        uint32_t ulInOctets;
        uint32_t ulPktsDifferentIf;
        uint32_t ulQueueOverflow;
        uint32_t ulUninitMfe;
        uint32_t ulNegativeMfe;
        uint32_t ulInDiscards;
        uint32_t ulInHdrErrors;
        uint32_t ulTotalOutPackets;
        Windows::Win32::Mib::MIB_IPMCAST_OIF_STATS_LH rgmiosOutStats[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_MFE_STATS_TABLE_EX_XP
    {
        uint32_t dwNumEntries;
        Windows::Win32::Mib::MIB_IPMCAST_MFE_STATS_EX_XP* table[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_IPMCAST_GLOBAL
    {
        uint32_t dwEnable;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_IPMCAST_IF_ENTRY
    {
        uint32_t dwIfIndex;
        uint32_t dwTtl;
        uint32_t dwProtocol;
        uint32_t dwRateLimit;
        uint32_t ulInMcastOctets;
        uint32_t ulOutMcastOctets;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_IPMCAST_IF_TABLE
    {
        uint32_t dwNumEntries;
        Windows::Win32::Mib::MIB_IPMCAST_IF_ENTRY table[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_TCPROW_LH
    {
        union _Anonymous_e__Union
        {
            uint32_t dwState;
            Windows::Win32::IpHelper::MIB_TCP_STATE State;
        };
        _Anonymous_e__Union Anonymous;
        uint32_t dwLocalAddr;
        uint32_t dwLocalPort;
        uint32_t dwRemoteAddr;
        uint32_t dwRemotePort;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_TCPROW_W2K
    {
        uint32_t dwState;
        uint32_t dwLocalAddr;
        uint32_t dwLocalPort;
        uint32_t dwRemoteAddr;
        uint32_t dwRemotePort;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_TCPTABLE
    {
        uint32_t dwNumEntries;
        Windows::Win32::Mib::MIB_TCPROW_LH table[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_TCPROW2
    {
        uint32_t dwState;
        uint32_t dwLocalAddr;
        uint32_t dwLocalPort;
        uint32_t dwRemoteAddr;
        uint32_t dwRemotePort;
        uint32_t dwOwningPid;
        Windows::Win32::Mib::TCP_CONNECTION_OFFLOAD_STATE dwOffloadState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_TCPTABLE2
    {
        uint32_t dwNumEntries;
        Windows::Win32::Mib::MIB_TCPROW2 table[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_TCPROW_OWNER_PID
    {
        uint32_t dwState;
        uint32_t dwLocalAddr;
        uint32_t dwLocalPort;
        uint32_t dwRemoteAddr;
        uint32_t dwRemotePort;
        uint32_t dwOwningPid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_TCPTABLE_OWNER_PID
    {
        uint32_t dwNumEntries;
        Windows::Win32::Mib::MIB_TCPROW_OWNER_PID table[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_TCPROW_OWNER_MODULE
    {
        uint32_t dwState;
        uint32_t dwLocalAddr;
        uint32_t dwLocalPort;
        uint32_t dwRemoteAddr;
        uint32_t dwRemotePort;
        uint32_t dwOwningPid;
        Windows::Win32::SystemServices::LARGE_INTEGER liCreateTimestamp;
        uint64_t OwningModuleInfo[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_TCPTABLE_OWNER_MODULE
    {
        uint32_t dwNumEntries;
        Windows::Win32::Mib::MIB_TCPROW_OWNER_MODULE table[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_TCP6ROW
    {
        Windows::Win32::IpHelper::MIB_TCP_STATE State;
        Windows::Win32::WinSock::in6_addr LocalAddr;
        uint32_t dwLocalScopeId;
        uint32_t dwLocalPort;
        Windows::Win32::WinSock::in6_addr RemoteAddr;
        uint32_t dwRemoteScopeId;
        uint32_t dwRemotePort;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_TCP6TABLE
    {
        uint32_t dwNumEntries;
        Windows::Win32::Mib::MIB_TCP6ROW table[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_TCP6ROW2
    {
        Windows::Win32::WinSock::in6_addr LocalAddr;
        uint32_t dwLocalScopeId;
        uint32_t dwLocalPort;
        Windows::Win32::WinSock::in6_addr RemoteAddr;
        uint32_t dwRemoteScopeId;
        uint32_t dwRemotePort;
        Windows::Win32::IpHelper::MIB_TCP_STATE State;
        uint32_t dwOwningPid;
        Windows::Win32::Mib::TCP_CONNECTION_OFFLOAD_STATE dwOffloadState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_TCP6TABLE2
    {
        uint32_t dwNumEntries;
        Windows::Win32::Mib::MIB_TCP6ROW2 table[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_TCP6ROW_OWNER_PID
    {
        uint8_t ucLocalAddr[16];
        uint32_t dwLocalScopeId;
        uint32_t dwLocalPort;
        uint8_t ucRemoteAddr[16];
        uint32_t dwRemoteScopeId;
        uint32_t dwRemotePort;
        uint32_t dwState;
        uint32_t dwOwningPid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_TCP6TABLE_OWNER_PID
    {
        uint32_t dwNumEntries;
        Windows::Win32::Mib::MIB_TCP6ROW_OWNER_PID table[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_TCP6ROW_OWNER_MODULE
    {
        uint8_t ucLocalAddr[16];
        uint32_t dwLocalScopeId;
        uint32_t dwLocalPort;
        uint8_t ucRemoteAddr[16];
        uint32_t dwRemoteScopeId;
        uint32_t dwRemotePort;
        uint32_t dwState;
        uint32_t dwOwningPid;
        Windows::Win32::SystemServices::LARGE_INTEGER liCreateTimestamp;
        uint64_t OwningModuleInfo[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_TCP6TABLE_OWNER_MODULE
    {
        uint32_t dwNumEntries;
        Windows::Win32::Mib::MIB_TCP6ROW_OWNER_MODULE table[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_TCPSTATS_LH
    {
        union _Anonymous_e__Union
        {
            uint32_t dwRtoAlgorithm;
            Windows::Win32::IpHelper::TCP_RTO_ALGORITHM RtoAlgorithm;
        };
        _Anonymous_e__Union Anonymous;
        uint32_t dwRtoMin;
        uint32_t dwRtoMax;
        uint32_t dwMaxConn;
        uint32_t dwActiveOpens;
        uint32_t dwPassiveOpens;
        uint32_t dwAttemptFails;
        uint32_t dwEstabResets;
        uint32_t dwCurrEstab;
        uint32_t dwInSegs;
        uint32_t dwOutSegs;
        uint32_t dwRetransSegs;
        uint32_t dwInErrs;
        uint32_t dwOutRsts;
        uint32_t dwNumConns;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_TCPSTATS_W2K
    {
        uint32_t dwRtoAlgorithm;
        uint32_t dwRtoMin;
        uint32_t dwRtoMax;
        uint32_t dwMaxConn;
        uint32_t dwActiveOpens;
        uint32_t dwPassiveOpens;
        uint32_t dwAttemptFails;
        uint32_t dwEstabResets;
        uint32_t dwCurrEstab;
        uint32_t dwInSegs;
        uint32_t dwOutSegs;
        uint32_t dwRetransSegs;
        uint32_t dwInErrs;
        uint32_t dwOutRsts;
        uint32_t dwNumConns;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_TCPSTATS2
    {
        Windows::Win32::IpHelper::TCP_RTO_ALGORITHM RtoAlgorithm;
        uint32_t dwRtoMin;
        uint32_t dwRtoMax;
        uint32_t dwMaxConn;
        uint32_t dwActiveOpens;
        uint32_t dwPassiveOpens;
        uint32_t dwAttemptFails;
        uint32_t dwEstabResets;
        uint32_t dwCurrEstab;
        uint64_t dw64InSegs;
        uint64_t dw64OutSegs;
        uint32_t dwRetransSegs;
        uint32_t dwInErrs;
        uint32_t dwOutRsts;
        uint32_t dwNumConns;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_UDPROW
    {
        uint32_t dwLocalAddr;
        uint32_t dwLocalPort;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_UDPTABLE
    {
        uint32_t dwNumEntries;
        Windows::Win32::Mib::MIB_UDPROW table[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_UDPROW_OWNER_PID
    {
        uint32_t dwLocalAddr;
        uint32_t dwLocalPort;
        uint32_t dwOwningPid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_UDPTABLE_OWNER_PID
    {
        uint32_t dwNumEntries;
        Windows::Win32::Mib::MIB_UDPROW_OWNER_PID table[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_UDPROW_OWNER_MODULE
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                int32_t _bitfield;
            };
            _Anonymous_e__Struct Anonymous;
            int32_t dwFlags;
        };
        uint32_t dwLocalAddr;
        uint32_t dwLocalPort;
        uint32_t dwOwningPid;
        Windows::Win32::SystemServices::LARGE_INTEGER liCreateTimestamp;
        _Anonymous_e__Union Anonymous;
        uint64_t OwningModuleInfo[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_UDPTABLE_OWNER_MODULE
    {
        uint32_t dwNumEntries;
        Windows::Win32::Mib::MIB_UDPROW_OWNER_MODULE table[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_UDP6ROW
    {
        Windows::Win32::WinSock::in6_addr dwLocalAddr;
        uint32_t dwLocalScopeId;
        uint32_t dwLocalPort;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_UDP6TABLE
    {
        uint32_t dwNumEntries;
        Windows::Win32::Mib::MIB_UDP6ROW table[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_UDP6ROW_OWNER_PID
    {
        uint8_t ucLocalAddr[16];
        uint32_t dwLocalScopeId;
        uint32_t dwLocalPort;
        uint32_t dwOwningPid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_UDP6TABLE_OWNER_PID
    {
        uint32_t dwNumEntries;
        Windows::Win32::Mib::MIB_UDP6ROW_OWNER_PID table[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_UDP6ROW_OWNER_MODULE
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                int32_t _bitfield;
            };
            _Anonymous_e__Struct Anonymous;
            int32_t dwFlags;
        };
        uint8_t ucLocalAddr[16];
        uint32_t dwLocalScopeId;
        uint32_t dwLocalPort;
        uint32_t dwOwningPid;
        Windows::Win32::SystemServices::LARGE_INTEGER liCreateTimestamp;
        _Anonymous_e__Union Anonymous;
        uint64_t OwningModuleInfo[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_UDP6TABLE_OWNER_MODULE
    {
        uint32_t dwNumEntries;
        Windows::Win32::Mib::MIB_UDP6ROW_OWNER_MODULE table[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_UDPSTATS
    {
        uint32_t dwInDatagrams;
        uint32_t dwNoPorts;
        uint32_t dwInErrors;
        uint32_t dwOutDatagrams;
        uint32_t dwNumAddrs;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_UDPSTATS2
    {
        uint64_t dw64InDatagrams;
        uint32_t dwNoPorts;
        uint32_t dwInErrors;
        uint64_t dw64OutDatagrams;
        uint32_t dwNumAddrs;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_IPMCAST_BOUNDARY
    {
        uint32_t dwIfIndex;
        uint32_t dwGroupAddress;
        uint32_t dwGroupMask;
        uint32_t dwStatus;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_IPMCAST_BOUNDARY_TABLE
    {
        uint32_t dwNumEntries;
        Windows::Win32::Mib::MIB_IPMCAST_BOUNDARY table[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_BOUNDARYROW
    {
        uint32_t dwGroupAddress;
        uint32_t dwGroupMask;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_MCAST_LIMIT_ROW
    {
        uint32_t dwTtl;
        uint32_t dwRateLimit;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_IPMCAST_SCOPE
    {
        uint32_t dwGroupAddress;
        uint32_t dwGroupMask;
        uint16_t snNameBuffer[256];
        uint32_t dwStatus;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_BEST_IF
    {
        uint32_t dwDestAddr;
        uint32_t dwIfIndex;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_PROXYARP
    {
        uint32_t dwAddress;
        uint32_t dwMask;
        uint32_t dwIfIndex;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_IFSTATUS
    {
        uint32_t dwIfIndex;
        uint32_t dwAdminStatus;
        uint32_t dwOperationalStatus;
        Windows::Win32::SystemServices::BOOL bMHbeatActive;
        Windows::Win32::SystemServices::BOOL bMHbeatAlive;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mib
{
    struct MIB_OPAQUE_INFO
    {
        union _Anonymous_e__Union
        {
            uint64_t ullAlign;
            uint8_t rgbyData[1];
        };
        uint32_t dwId;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct AMVPSIZE
    {
        uint32_t dwWidth;
        uint32_t dwHeight;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct AMVPDIMINFO
    {
        uint32_t dwFieldWidth;
        uint32_t dwFieldHeight;
        uint32_t dwVBIWidth;
        uint32_t dwVBIHeight;
        Windows::Win32::DisplayDevices::RECT rcValidRegion;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct AMVPDATAINFO
    {
        uint32_t dwSize;
        uint32_t dwMicrosecondsPerField;
        Windows::Win32::DirectShow::AMVPDIMINFO amvpDimInfo;
        uint32_t dwPictAspectRatioX;
        uint32_t dwPictAspectRatioY;
        Windows::Win32::SystemServices::BOOL bEnableDoubleClock;
        Windows::Win32::SystemServices::BOOL bEnableVACT;
        Windows::Win32::SystemServices::BOOL bDataIsInterlaced;
        int32_t lHalfLinesOdd;
        Windows::Win32::SystemServices::BOOL bFieldPolarityInverted;
        uint32_t dwNumLinesInVREF;
        int32_t lHalfLinesEven;
        uint32_t dwReserved1;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct AM_MEDIA_TYPE
    {
        ::win32::guid majortype;
        ::win32::guid subtype;
        Windows::Win32::SystemServices::BOOL bFixedSizeSamples;
        Windows::Win32::SystemServices::BOOL bTemporalCompression;
        uint32_t lSampleSize;
        ::win32::guid formattype;
        Windows::Win32::Com::IUnknown* pUnk;
        uint32_t cbFormat;
        uint8_t* pbFormat;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct ALLOCATOR_PROPERTIES
    {
        int32_t cBuffers;
        int32_t cbBuffer;
        int32_t cbAlign;
        int32_t cbPrefix;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct PIN_INFO
    {
        Windows::Win32::DirectShow::IBaseFilter* pFilter;
        Windows::Win32::DirectShow::PIN_DIRECTION dir;
        uint16_t achName[128];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct FILTER_INFO
    {
        uint16_t achName[128];
        Windows::Win32::DirectShow::IFilterGraph* pGraph;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct AM_SAMPLE2_PROPERTIES
    {
        uint32_t cbData;
        uint32_t dwTypeSpecificFlags;
        uint32_t dwSampleFlags;
        int32_t lActual;
        int64_t tStart;
        int64_t tStop;
        uint32_t dwStreamId;
        Windows::Win32::DirectShow::AM_MEDIA_TYPE* pMediaType;
        uint8_t* pbBuffer;
        int32_t cbBuffer;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct REGFILTER
    {
        ::win32::guid Clsid;
        uint16_t* Name;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct REGPINTYPES
    {
        ::win32::guid* clsMajorType;
        ::win32::guid* clsMinorType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct REGFILTERPINS
    {
        uint16_t* strName;
        Windows::Win32::SystemServices::BOOL bRendered;
        Windows::Win32::SystemServices::BOOL bOutput;
        Windows::Win32::SystemServices::BOOL bZero;
        Windows::Win32::SystemServices::BOOL bMany;
        ::win32::guid* clsConnectsToFilter;
        uint16_t* strConnectsToPin;
        uint32_t nMediaTypes;
        Windows::Win32::DirectShow::REGPINTYPES* lpMediaType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct REGPINMEDIUM
    {
        ::win32::guid clsMedium;
        uint32_t dw1;
        uint32_t dw2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct REGFILTERPINS2
    {
        uint32_t dwFlags;
        uint32_t cInstances;
        uint32_t nMediaTypes;
        Windows::Win32::DirectShow::REGPINTYPES* lpMediaType;
        uint32_t nMediums;
        Windows::Win32::DirectShow::REGPINMEDIUM* lpMedium;
        ::win32::guid* clsPinCategory;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct REGFILTER2
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous1_e__Struct
            {
                uint32_t cPins;
                Windows::Win32::DirectShow::REGFILTERPINS* rgPins;
            };
            struct _Anonymous2_e__Struct
            {
                uint32_t cPins2;
                Windows::Win32::DirectShow::REGFILTERPINS2* rgPins2;
            };
            _Anonymous1_e__Struct Anonymous1;
            _Anonymous2_e__Struct Anonymous2;
        };
        uint32_t dwVersion;
        uint32_t dwMerit;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct Quality
    {
        Windows::Win32::DirectShow::QualityMessageType Type;
        int32_t Proportion;
        int64_t Late;
        int64_t TimeStamp;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct COLORKEY
    {
        uint32_t KeyType;
        uint32_t PaletteIndex;
        uint32_t LowColorValue;
        uint32_t HighColorValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct AM_STREAM_INFO
    {
        int64_t tStart;
        int64_t tStop;
        uint32_t dwStartCookie;
        uint32_t dwStopCookie;
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct VIDEO_STREAM_CONFIG_CAPS
    {
        ::win32::guid guid;
        uint32_t VideoStandard;
        Windows::Win32::DisplayDevices::SIZE InputSize;
        Windows::Win32::DisplayDevices::SIZE MinCroppingSize;
        Windows::Win32::DisplayDevices::SIZE MaxCroppingSize;
        int32_t CropGranularityX;
        int32_t CropGranularityY;
        int32_t CropAlignX;
        int32_t CropAlignY;
        Windows::Win32::DisplayDevices::SIZE MinOutputSize;
        Windows::Win32::DisplayDevices::SIZE MaxOutputSize;
        int32_t OutputGranularityX;
        int32_t OutputGranularityY;
        int32_t StretchTapsX;
        int32_t StretchTapsY;
        int32_t ShrinkTapsX;
        int32_t ShrinkTapsY;
        int64_t MinFrameInterval;
        int64_t MaxFrameInterval;
        int32_t MinBitsPerSecond;
        int32_t MaxBitsPerSecond;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct AUDIO_STREAM_CONFIG_CAPS
    {
        ::win32::guid guid;
        uint32_t MinimumChannels;
        uint32_t MaximumChannels;
        uint32_t ChannelsGranularity;
        uint32_t MinimumBitsPerSample;
        uint32_t MaximumBitsPerSample;
        uint32_t BitsPerSampleGranularity;
        uint32_t MinimumSampleFrequency;
        uint32_t MaximumSampleFrequency;
        uint32_t SampleFrequencyGranularity;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct DVINFO
    {
        uint32_t dwDVAAuxSrc;
        uint32_t dwDVAAuxCtl;
        uint32_t dwDVAAuxSrc1;
        uint32_t dwDVAAuxCtl1;
        uint32_t dwDVVAuxSrc;
        uint32_t dwDVVAuxCtl;
        uint32_t dwDVReserved[2];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct STREAM_ID_MAP
    {
        uint32_t stream_id;
        uint32_t dwMediaSampleContent;
        uint32_t ulSubstreamFilterValue;
        int32_t iDataOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct AMCOPPSignature
    {
        uint8_t Signature[256];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct AMCOPPCommand
    {
        ::win32::guid macKDI;
        ::win32::guid guidCommandID;
        uint32_t dwSequence;
        uint32_t cbSizeData;
        uint8_t CommandData[4056];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct AMCOPPStatusInput
    {
        ::win32::guid rApp;
        ::win32::guid guidStatusRequestID;
        uint32_t dwSequence;
        uint32_t cbSizeData;
        uint8_t StatusData[4056];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct AMCOPPStatusOutput
    {
        ::win32::guid macKDI;
        uint32_t cbSizeData;
        uint8_t COPPStatus[4076];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct VMRPRESENTATIONINFO
    {
        uint32_t dwFlags;
        Windows::Win32::DirectDraw::IDirectDrawSurface7* lpSurf;
        int64_t rtStart;
        int64_t rtEnd;
        Windows::Win32::DisplayDevices::SIZE szAspectRatio;
        Windows::Win32::DisplayDevices::RECT rcSrc;
        Windows::Win32::DisplayDevices::RECT rcDst;
        uint32_t dwTypeSpecificFlags;
        uint32_t dwInterlaceFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct VMRALLOCATIONINFO
    {
        uint32_t dwFlags;
        Windows::Win32::DirectShow::BITMAPINFOHEADER* lpHdr;
        Windows::Win32::DirectDraw::DDPIXELFORMAT* lpPixFmt;
        Windows::Win32::DisplayDevices::SIZE szAspectRatio;
        uint32_t dwMinBuffers;
        uint32_t dwMaxBuffers;
        uint32_t dwInterlaceFlags;
        Windows::Win32::DisplayDevices::SIZE szNativeSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct NORMALIZEDRECT
    {
        float left;
        float top;
        float right;
        float bottom;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct VMRGUID
    {
        ::win32::guid* pGUID;
        ::win32::guid GUID;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct VMRMONITORINFO
    {
        Windows::Win32::DirectShow::VMRGUID guid;
        Windows::Win32::DisplayDevices::RECT rcMonitor;
        intptr_t hMon;
        uint32_t dwFlags;
        uint16_t szDevice[32];
        uint16_t szDescription[256];
        Windows::Win32::SystemServices::LARGE_INTEGER liDriverVersion;
        uint32_t dwVendorId;
        uint32_t dwDeviceId;
        uint32_t dwSubSysId;
        uint32_t dwRevision;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct VMRFrequency
    {
        uint32_t dwNumerator;
        uint32_t dwDenominator;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct VMRVideoDesc
    {
        uint32_t dwSize;
        uint32_t dwSampleWidth;
        uint32_t dwSampleHeight;
        Windows::Win32::SystemServices::BOOL SingleFieldPerSample;
        uint32_t dwFourCC;
        Windows::Win32::DirectShow::VMRFrequency InputSampleFreq;
        Windows::Win32::DirectShow::VMRFrequency OutputFrameFreq;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct VMRDeinterlaceCaps
    {
        uint32_t dwSize;
        uint32_t dwNumPreviousOutputFrames;
        uint32_t dwNumForwardRefSamples;
        uint32_t dwNumBackwardRefSamples;
        Windows::Win32::DirectShow::VMRDeinterlaceTech DeinterlaceTechnology;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct VMRALPHABITMAP
    {
        uint32_t dwFlags;
        Windows::Win32::Gdi::HDC hdc;
        Windows::Win32::DirectDraw::IDirectDrawSurface7* pDDS;
        Windows::Win32::DisplayDevices::RECT rSrc;
        Windows::Win32::DirectShow::NORMALIZEDRECT rDest;
        float fAlpha;
        uint32_t clrSrcKey;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct DDCOLORKEY
    {
        uint32_t dwColorSpaceLowValue;
        uint32_t dwColorSpaceHighValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct VMRVIDEOSTREAMINFO
    {
        Windows::Win32::DirectDraw::IDirectDrawSurface7* pddsVideoSurface;
        uint32_t dwWidth;
        uint32_t dwHeight;
        uint32_t dwStrmID;
        float fAlpha;
        Windows::Win32::DirectShow::DDCOLORKEY ddClrKey;
        Windows::Win32::DirectShow::NORMALIZEDRECT rNormal;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct DVD_ATR
    {
        uint32_t ulCAT;
        uint8_t pbATRI[768];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct DVD_TIMECODE
    {
        uint32_t _bitfield;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct DVD_HMSF_TIMECODE
    {
        uint8_t bHours;
        uint8_t bMinutes;
        uint8_t bSeconds;
        uint8_t bFrames;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct DVD_PLAYBACK_LOCATION2
    {
        uint32_t TitleNum;
        uint32_t ChapterNum;
        Windows::Win32::DirectShow::DVD_HMSF_TIMECODE TimeCode;
        uint32_t TimeCodeFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct DVD_PLAYBACK_LOCATION
    {
        uint32_t TitleNum;
        uint32_t ChapterNum;
        uint32_t TimeCode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct DVD_AudioAttributes
    {
        Windows::Win32::DirectShow::DVD_AUDIO_APPMODE AppMode;
        uint8_t AppModeData;
        Windows::Win32::DirectShow::DVD_AUDIO_FORMAT AudioFormat;
        uint32_t Language;
        Windows::Win32::DirectShow::DVD_AUDIO_LANG_EXT LanguageExtension;
        Windows::Win32::SystemServices::BOOL fHasMultichannelInfo;
        uint32_t dwFrequency;
        uint8_t bQuantization;
        uint8_t bNumberOfChannels;
        uint32_t dwReserved[2];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct DVD_MUA_MixingInfo
    {
        Windows::Win32::SystemServices::BOOL fMixTo0;
        Windows::Win32::SystemServices::BOOL fMixTo1;
        Windows::Win32::SystemServices::BOOL fMix0InPhase;
        Windows::Win32::SystemServices::BOOL fMix1InPhase;
        uint32_t dwSpeakerPosition;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct DVD_MUA_Coeff
    {
        double log2_alpha;
        double log2_beta;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct DVD_MultichannelAudioAttributes
    {
        Windows::Win32::DirectShow::DVD_MUA_MixingInfo Info[8];
        Windows::Win32::DirectShow::DVD_MUA_Coeff Coeff[8];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct DVD_KaraokeAttributes
    {
        uint8_t bVersion;
        Windows::Win32::SystemServices::BOOL fMasterOfCeremoniesInGuideVocal1;
        Windows::Win32::SystemServices::BOOL fDuet;
        Windows::Win32::DirectShow::DVD_KARAOKE_ASSIGNMENT ChannelAssignment;
        uint16_t wChannelContents[8];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct DVD_VideoAttributes
    {
        Windows::Win32::SystemServices::BOOL fPanscanPermitted;
        Windows::Win32::SystemServices::BOOL fLetterboxPermitted;
        uint32_t ulAspectX;
        uint32_t ulAspectY;
        uint32_t ulFrameRate;
        uint32_t ulFrameHeight;
        Windows::Win32::DirectShow::DVD_VIDEO_COMPRESSION Compression;
        Windows::Win32::SystemServices::BOOL fLine21Field1InGOP;
        Windows::Win32::SystemServices::BOOL fLine21Field2InGOP;
        uint32_t ulSourceResolutionX;
        uint32_t ulSourceResolutionY;
        Windows::Win32::SystemServices::BOOL fIsSourceLetterboxed;
        Windows::Win32::SystemServices::BOOL fIsFilmMode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct DVD_SubpictureAttributes
    {
        Windows::Win32::DirectShow::DVD_SUBPICTURE_TYPE Type;
        Windows::Win32::DirectShow::DVD_SUBPICTURE_CODING CodingMode;
        uint32_t Language;
        Windows::Win32::DirectShow::DVD_SUBPICTURE_LANG_EXT LanguageExtension;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct DVD_TitleAttributes
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::DirectShow::DVD_TITLE_APPMODE AppMode;
            Windows::Win32::DirectShow::DVD_HMSF_TIMECODE TitleLength;
        };
        _Anonymous_e__Union Anonymous;
        Windows::Win32::DirectShow::DVD_VideoAttributes VideoAttributes;
        uint32_t ulNumberOfAudioStreams;
        Windows::Win32::DirectShow::DVD_AudioAttributes AudioAttributes[8];
        Windows::Win32::DirectShow::DVD_MultichannelAudioAttributes MultichannelAudioAttributes[8];
        uint32_t ulNumberOfSubpictureStreams;
        Windows::Win32::DirectShow::DVD_SubpictureAttributes SubpictureAttributes[32];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct DVD_MenuAttributes
    {
        Windows::Win32::SystemServices::BOOL*** fCompatibleRegion[8];
        Windows::Win32::DirectShow::DVD_VideoAttributes VideoAttributes;
        Windows::Win32::SystemServices::BOOL fAudioPresent;
        Windows::Win32::DirectShow::DVD_AudioAttributes AudioAttributes;
        Windows::Win32::SystemServices::BOOL fSubpicturePresent;
        Windows::Win32::DirectShow::DVD_SubpictureAttributes SubpictureAttributes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct DVD_DECODER_CAPS
    {
        uint32_t dwSize;
        uint32_t dwAudioCaps;
        double dFwdMaxRateVideo;
        double dFwdMaxRateAudio;
        double dFwdMaxRateSP;
        double dBwdMaxRateVideo;
        double dBwdMaxRateAudio;
        double dBwdMaxRateSP;
        uint32_t dwRes1;
        uint32_t dwRes2;
        uint32_t dwRes3;
        uint32_t dwRes4;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct AM_DVD_RENDERSTATUS
    {
        int32_t hrVPEStatus;
        Windows::Win32::SystemServices::BOOL bDvdVolInvalid;
        Windows::Win32::SystemServices::BOOL bDvdVolUnknown;
        Windows::Win32::SystemServices::BOOL bNoLine21In;
        Windows::Win32::SystemServices::BOOL bNoLine21Out;
        int32_t iNumStreams;
        int32_t iNumStreamsFailed;
        uint32_t dwFailedStreamsFlag;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct BDA_TEMPLATE_CONNECTION
    {
        uint32_t FromNodeType;
        uint32_t FromNodePinType;
        uint32_t ToNodeType;
        uint32_t ToNodePinType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct BDA_TEMPLATE_PIN_JOINT
    {
        uint32_t uliTemplateConnection;
        uint32_t ulcInstancesMax;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct KS_BDA_FRAME_INFO
    {
        uint32_t ExtendedHeaderSize;
        uint32_t dwFrameFlags;
        uint32_t ulEvent;
        uint32_t ulChannelNumber;
        uint32_t ulSubchannelNumber;
        uint32_t ulReason;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct BDA_ETHERNET_ADDRESS
    {
        uint8_t rgbAddress[6];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct BDA_ETHERNET_ADDRESS_LIST
    {
        uint32_t ulcAddresses;
        Windows::Win32::DirectShow::BDA_ETHERNET_ADDRESS rgAddressl[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct BDA_IPv4_ADDRESS
    {
        uint8_t rgbAddress[4];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct BDA_IPv4_ADDRESS_LIST
    {
        uint32_t ulcAddresses;
        Windows::Win32::DirectShow::BDA_IPv4_ADDRESS rgAddressl[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct BDA_IPv6_ADDRESS
    {
        uint8_t rgbAddress[6];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct BDA_IPv6_ADDRESS_LIST
    {
        uint32_t ulcAddresses;
        Windows::Win32::DirectShow::BDA_IPv6_ADDRESS rgAddressl[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct BDANODE_DESCRIPTOR
    {
        uint32_t ulBdaNodeType;
        ::win32::guid guidFunction;
        ::win32::guid guidName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct BDA_TABLE_SECTION
    {
        uint32_t ulPrimarySectionId;
        uint32_t ulSecondarySectionId;
        uint32_t ulcbSectionLength;
        uint32_t argbSectionData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct BDA_DISEQC_SEND
    {
        uint32_t ulRequestId;
        uint32_t ulPacketLength;
        uint8_t argbPacketData[8];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct BDA_DISEQC_RESPONSE
    {
        uint32_t ulRequestId;
        uint32_t ulPacketLength;
        uint8_t argbPacketData[8];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct PID_MAP
    {
        uint32_t ulPID;
        Windows::Win32::DirectShow::MEDIA_SAMPLE_CONTENT MediaSampleContent;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct BDA_PID_MAP
    {
        Windows::Win32::DirectShow::MEDIA_SAMPLE_CONTENT MediaSampleContent;
        uint32_t ulcPIDs;
        uint32_t aulPIDs[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct BDA_PID_UNMAP
    {
        uint32_t ulcPIDs;
        uint32_t aulPIDs[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct BDA_CA_MODULE_UI
    {
        uint32_t ulFormat;
        uint32_t ulbcDesc;
        uint32_t ulDesc[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct BDA_PROGRAM_PID_LIST
    {
        uint32_t ulProgramNumber;
        uint32_t ulcPIDs;
        uint32_t ulPID[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct BDA_DRM_DRMSTATUS
    {
        int32_t lResult;
        ::win32::guid DRMuuid;
        uint32_t ulDrmUuidListStringSize;
        ::win32::guid argbDrmUuidListString[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct BDA_WMDRM_STATUS
    {
        int32_t lResult;
        uint32_t ulMaxCaptureTokenSize;
        uint32_t uMaxStreamingPid;
        uint32_t ulMaxLicense;
        uint32_t ulMinSecurityLevel;
        uint32_t ulRevInfoSequenceNumber;
        uint64_t ulRevInfoIssuedTime;
        uint32_t ulRevListVersion;
        uint32_t ulRevInfoTTL;
        uint32_t ulState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct BDA_WMDRM_KEYINFOLIST
    {
        int32_t lResult;
        uint32_t ulKeyuuidBufferLen;
        ::win32::guid argKeyuuidBuffer[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct BDA_BUFFER
    {
        int32_t lResult;
        uint32_t ulBufferSize;
        uint8_t argbBuffer[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct BDA_WMDRM_RENEWLICENSE
    {
        int32_t lResult;
        uint32_t ulDescrambleStatus;
        uint32_t ulXmrLicenseOutputLength;
        uint8_t argbXmrLicenceOutputBuffer[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct BDA_WMDRMTUNER_PIDPROTECTION
    {
        int32_t lResult;
        ::win32::guid uuidKeyID;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct BDA_WMDRMTUNER_PURCHASEENTITLEMENT
    {
        int32_t lResult;
        uint32_t ulDescrambleStatus;
        uint32_t ulCaptureTokenLength;
        uint8_t argbCaptureTokenBuffer[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct BDA_TUNER_TUNERSTATE
    {
        int32_t lResult;
        uint32_t ulTuneLength;
        uint8_t argbTuneData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct BDA_TUNER_DIAGNOSTICS
    {
        int32_t lResult;
        uint32_t ulSignalLevel;
        uint32_t ulSignalLevelQuality;
        uint32_t ulSignalNoiseRatio;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct BDA_STRING
    {
        int32_t lResult;
        uint32_t ulStringSize;
        uint8_t argbString[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct BDA_SCAN_CAPABILTIES
    {
        int32_t lResult;
        uint64_t ul64AnalogStandardsSupported;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct BDA_SCAN_STATE
    {
        int32_t lResult;
        uint32_t ulSignalLock;
        uint32_t ulSecondsLeft;
        uint32_t ulCurrentFrequency;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct BDA_SCAN_START
    {
        int32_t lResult;
        uint32_t LowerFrequency;
        uint32_t HigerFrequency;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct BDA_GDDS_DATATYPE
    {
        int32_t lResult;
        ::win32::guid uuidDataType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct BDA_GDDS_DATA
    {
        int32_t lResult;
        uint32_t ulDataLength;
        uint32_t ulPercentageProgress;
        uint8_t argbData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct BDA_USERACTIVITY_INTERVAL
    {
        int32_t lResult;
        uint32_t ulActivityInterval;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct BDA_CAS_CHECK_ENTITLEMENTTOKEN
    {
        int32_t lResult;
        uint32_t ulDescrambleStatus;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct BDA_CAS_CLOSE_MMIDIALOG
    {
        int32_t lResult;
        uint32_t SessionResult;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct BDA_CAS_REQUESTTUNERDATA
    {
        uint8_t ucRequestPriority;
        uint8_t ucRequestReason;
        uint8_t ucRequestConsequences;
        uint32_t ulEstimatedTime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct BDA_CAS_OPENMMIDATA
    {
        uint32_t ulDialogNumber;
        uint32_t ulDialogRequest;
        ::win32::guid uuidDialogType;
        uint16_t usDialogDataLength;
        uint8_t argbDialogData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct BDA_CAS_CLOSEMMIDATA
    {
        uint32_t ulDialogNumber;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct BDA_ISDBCAS_REQUESTHEADER
    {
        uint8_t bInstruction;
        uint8_t bReserved[3];
        uint32_t ulDataLength;
        uint8_t argbIsdbCommand[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct BDA_ISDBCAS_RESPONSEDATA
    {
        int32_t lResult;
        uint32_t ulRequestID;
        uint32_t ulIsdbStatus;
        uint32_t ulIsdbDataSize;
        uint8_t argbIsdbCommandData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct BDA_ISDBCAS_EMG_REQ
    {
        uint8_t bCLA;
        uint8_t bINS;
        uint8_t bP1;
        uint8_t bP2;
        uint8_t bLC;
        uint8_t bCardId[6];
        uint8_t bProtocol;
        uint8_t bCABroadcasterGroupId;
        uint8_t bMessageControl;
        uint8_t bMessageCode[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct BDA_MUX_PIDLISTITEM
    {
        uint16_t usPIDNumber;
        uint16_t usProgramNumber;
        Windows::Win32::DirectShow::MUX_PID_TYPE ePIDType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct BDA_TS_SELECTORINFO
    {
        uint8_t bTSInfolength;
        uint8_t bReserved[2];
        ::win32::guid guidNetworkType;
        uint8_t bTSIDCount;
        uint16_t usTSID[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct BDA_TS_SELECTORINFO_ISDBS_EXT
    {
        uint8_t bTMCC[48];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct BDA_DVBT2_L1_SIGNALLING_DATA
    {
        uint8_t L1Pre_TYPE;
        uint8_t L1Pre_BWT_S1_S2;
        uint8_t L1Pre_REPETITION_GUARD_PAPR;
        uint8_t L1Pre_MOD_COD_FEC;
        uint8_t L1Pre_POSTSIZE_INFO_PILOT[5];
        uint8_t L1Pre_TX_ID_AVAIL;
        uint8_t L1Pre_CELL_ID[2];
        uint8_t L1Pre_NETWORK_ID[2];
        uint8_t L1Pre_T2SYSTEM_ID[2];
        uint8_t L1Pre_NUM_T2_FRAMES;
        uint8_t L1Pre_NUM_DATA_REGENFLAG_L1POSTEXT[2];
        uint8_t L1Pre_NUMRF_CURRENTRF_RESERVED[2];
        uint8_t L1Pre_CRC32[4];
        uint8_t L1PostData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct BDA_RATING_PINRESET
    {
        uint8_t bPinLength;
        uint8_t argbNewPin[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct MPEG2_TRANSPORT_STRIDE
    {
        uint32_t dwOffset;
        uint32_t dwPacketLength;
        uint32_t dwStride;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct BDA_SIGNAL_TIMEOUTS
    {
        uint32_t ulCarrierTimeoutMs;
        uint32_t ulScanningTimeoutMs;
        uint32_t ulTuningTimeoutMs;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct EALocationCodeType
    {
        Windows::Win32::DirectShow::LocationCodeSchemeType LocationCodeScheme;
        uint8_t state_code;
        uint8_t county_subdivision;
        uint16_t county_code;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct SmartCardApplication
    {
        Windows::Win32::DirectShow::ApplicationTypeType ApplicationType;
        uint16_t ApplicationVersion;
        Windows::Win32::Automation::BSTR pbstrApplicationName;
        Windows::Win32::Automation::BSTR pbstrApplicationURL;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectDraw
{
    struct DDPIXELFORMAT
    {
        union _Anonymous1_e__Union
        {
            uint32_t dwRGBBitCount;
            uint32_t dwYUVBitCount;
            uint32_t dwZBufferBitDepth;
            uint32_t dwAlphaBitDepth;
            uint32_t dwLuminanceBitCount;
            uint32_t dwBumpBitCount;
            uint32_t dwPrivateFormatBitCount;
        };
        union _Anonymous2_e__Union
        {
            uint32_t dwRBitMask;
            uint32_t dwYBitMask;
            uint32_t dwStencilBitDepth;
            uint32_t dwLuminanceBitMask;
            uint32_t dwBumpDuBitMask;
            uint32_t dwOperations;
        };
        union _Anonymous3_e__Union
        {
            struct _MultiSampleCaps_e__Struct
            {
                uint16_t wFlipMSTypes;
                uint16_t wBltMSTypes;
            };
            uint32_t dwGBitMask;
            uint32_t dwUBitMask;
            uint32_t dwZBitMask;
            uint32_t dwBumpDvBitMask;
            _MultiSampleCaps_e__Struct MultiSampleCaps;
        };
        union _Anonymous4_e__Union
        {
            uint32_t dwBBitMask;
            uint32_t dwVBitMask;
            uint32_t dwStencilBitMask;
            uint32_t dwBumpLuminanceBitMask;
        };
        union _Anonymous5_e__Union
        {
            uint32_t dwRGBAlphaBitMask;
            uint32_t dwYUVAlphaBitMask;
            uint32_t dwLuminanceAlphaBitMask;
            uint32_t dwRGBZBitMask;
            uint32_t dwYUVZBitMask;
        };
        uint32_t dwSize;
        uint32_t dwFlags;
        uint32_t dwFourCC;
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
        _Anonymous3_e__Union Anonymous3;
        _Anonymous4_e__Union Anonymous4;
        _Anonymous5_e__Union Anonymous5;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct AMVAUncompBufferInfo
    {
        uint32_t dwMinNumSurfaces;
        uint32_t dwMaxNumSurfaces;
        Windows::Win32::DirectDraw::DDPIXELFORMAT ddUncompPixelFormat;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct AMVAUncompDataInfo
    {
        uint32_t dwUncompWidth;
        uint32_t dwUncompHeight;
        Windows::Win32::DirectDraw::DDPIXELFORMAT ddUncompPixelFormat;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct AMVAInternalMemInfo
    {
        uint32_t dwScratchMemAlloc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectDraw
{
    struct DDSCAPS2
    {
        union _Anonymous_e__Union
        {
            uint32_t dwCaps4;
            uint32_t dwVolumeDepth;
        };
        uint32_t dwCaps;
        uint32_t dwCaps2;
        uint32_t dwCaps3;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct AMVACompBufferInfo
    {
        uint32_t dwNumCompBuffers;
        uint32_t dwWidthToCreate;
        uint32_t dwHeightToCreate;
        uint32_t dwBytesToAllocate;
        Windows::Win32::DirectDraw::DDSCAPS2 ddCompCaps;
        Windows::Win32::DirectDraw::DDPIXELFORMAT ddPixelFormat;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct AMVABeginFrameInfo
    {
        uint32_t dwDestSurfaceIndex;
        void* pInputData;
        uint32_t dwSizeInputData;
        void* pOutputData;
        uint32_t dwSizeOutputData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct AMVAEndFrameInfo
    {
        uint32_t dwSizeMiscData;
        void* pMiscData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct AMVABUFFERINFO
    {
        uint32_t dwTypeIndex;
        uint32_t dwBufferIndex;
        uint32_t dwDataOffset;
        uint32_t dwDataSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct AM_WST_PAGE
    {
        uint32_t dwPageNr;
        uint32_t dwSubPageNr;
        uint8_t* pucPageData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct TRUECOLORINFO
    {
        uint32_t dwBitMasks[3];
        Windows::Win32::Gdi::RGBQUAD bmiColors[256];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct VIDEOINFOHEADER
    {
        Windows::Win32::DisplayDevices::RECT rcSource;
        Windows::Win32::DisplayDevices::RECT rcTarget;
        uint32_t dwBitRate;
        uint32_t dwBitErrorRate;
        int64_t AvgTimePerFrame;
        Windows::Win32::DirectShow::BITMAPINFOHEADER bmiHeader;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct VIDEOINFO
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::Gdi::RGBQUAD bmiColors[256];
            uint32_t dwBitMasks[3];
            Windows::Win32::DirectShow::TRUECOLORINFO TrueColorInfo;
        };
        Windows::Win32::DisplayDevices::RECT rcSource;
        Windows::Win32::DisplayDevices::RECT rcTarget;
        uint32_t dwBitRate;
        uint32_t dwBitErrorRate;
        int64_t AvgTimePerFrame;
        Windows::Win32::DirectShow::BITMAPINFOHEADER bmiHeader;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct MPEG1VIDEOINFO
    {
        Windows::Win32::DirectShow::VIDEOINFOHEADER hdr;
        uint32_t dwStartTimeCode;
        uint32_t cbSequenceHeader;
        uint8_t bSequenceHeader[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct ANALOGVIDEOINFO
    {
        Windows::Win32::DisplayDevices::RECT rcSource;
        Windows::Win32::DisplayDevices::RECT rcTarget;
        uint32_t dwActiveWidth;
        uint32_t dwActiveHeight;
        int64_t AvgTimePerFrame;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct AM_FRAMESTEP_STEP
    {
        uint32_t dwFramesToStep;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct OPTIMAL_WEIGHT_TOTALS
    {
        int64_t MinTotalNominator;
        int64_t MaxTotalNominator;
        int64_t TotalDenominator;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct IKsPin
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct IKsAllocator
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct IKsAllocatorEx
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KS_COMPRESSION
    {
        uint32_t RatioNumerator;
        uint32_t RatioDenominator;
        uint32_t RatioConstantMargin;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct PIPE_DIMENSIONS
    {
        Windows::Win32::CoreAudio::KS_COMPRESSION AllocatorPin;
        Windows::Win32::CoreAudio::KS_COMPRESSION MaxExpansionPin;
        Windows::Win32::CoreAudio::KS_COMPRESSION EndPin;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KS_FRAMING_RANGE
    {
        uint32_t MinFrameSize;
        uint32_t MaxFrameSize;
        uint32_t Stepping;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KS_FRAMING_RANGE_WEIGHTED
    {
        Windows::Win32::CoreAudio::KS_FRAMING_RANGE Range;
        uint32_t InPlaceWeight;
        uint32_t NotInPlaceWeight;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct PIPE_TERMINATION
    {
        uint32_t Flags;
        uint32_t OutsideFactors;
        uint32_t Weigth;
        Windows::Win32::CoreAudio::KS_FRAMING_RANGE PhysicalRange;
        Windows::Win32::CoreAudio::KS_FRAMING_RANGE_WEIGHTED OptimalRange;
        Windows::Win32::CoreAudio::KS_COMPRESSION Compression;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct ALLOCATOR_PROPERTIES_EX
    {
        int32_t cBuffers;
        int32_t cbBuffer;
        int32_t cbAlign;
        int32_t cbPrefix;
        ::win32::guid MemoryType;
        ::win32::guid BusType;
        Windows::Win32::DirectShow::PIPE_STATE State;
        Windows::Win32::DirectShow::PIPE_TERMINATION Input;
        Windows::Win32::DirectShow::PIPE_TERMINATION Output;
        uint32_t Strategy;
        uint32_t Flags;
        uint32_t Weight;
        Windows::Win32::DirectShow::KS_LogicalMemoryType LogicalMemoryType;
        Windows::Win32::DirectShow::PIPE_ALLOCATOR_PLACE AllocatorPlace;
        Windows::Win32::DirectShow::PIPE_DIMENSIONS Dimensions;
        Windows::Win32::CoreAudio::KS_FRAMING_RANGE PhysicalRange;
        Windows::Win32::DirectShow::IKsAllocatorEx* PrevSegment;
        uint32_t CountNextSegments;
        Windows::Win32::DirectShow::IKsAllocatorEx** NextSegments;
        uint32_t InsideFactors;
        uint32_t NumberPins;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct AM_MPEGSTREAMTYPE
    {
        uint32_t dwStreamId;
        uint32_t dwReserved;
        Windows::Win32::DirectShow::AM_MEDIA_TYPE mt;
        uint8_t bFormat[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct AM_MPEGSYSTEMTYPE
    {
        uint32_t dwBitRate;
        uint32_t cStreams;
        Windows::Win32::DirectShow::AM_MPEGSTREAMTYPE Streams[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct VMR9PresentationInfo
    {
        uint32_t dwFlags;
        Windows::Win32::Direct2D::IDirect3DSurface9* lpSurf;
        int64_t rtStart;
        int64_t rtEnd;
        Windows::Win32::DisplayDevices::SIZE szAspectRatio;
        Windows::Win32::DisplayDevices::RECT rcSrc;
        Windows::Win32::DisplayDevices::RECT rcDst;
        uint32_t dwReserved1;
        uint32_t dwReserved2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct VMR9AllocationInfo
    {
        uint32_t dwFlags;
        uint32_t dwWidth;
        uint32_t dwHeight;
        Windows::Win32::Direct3D9::D3DFORMAT Format;
        Windows::Win32::Direct3D9::D3DPOOL Pool;
        uint32_t MinBuffers;
        Windows::Win32::DisplayDevices::SIZE szAspectRatio;
        Windows::Win32::DisplayDevices::SIZE szNativeSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct VMR9NormalizedRect
    {
        float left;
        float top;
        float right;
        float bottom;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct VMR9ProcAmpControl
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        float Brightness;
        float Contrast;
        float Hue;
        float Saturation;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct VMR9ProcAmpControlRange
    {
        uint32_t dwSize;
        Windows::Win32::DirectShow::VMR9ProcAmpControlFlags dwProperty;
        float MinValue;
        float MaxValue;
        float DefaultValue;
        float StepSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct VMR9AlphaBitmap
    {
        uint32_t dwFlags;
        Windows::Win32::Gdi::HDC hdc;
        Windows::Win32::Direct2D::IDirect3DSurface9* pDDS;
        Windows::Win32::DisplayDevices::RECT rSrc;
        Windows::Win32::DirectShow::VMR9NormalizedRect rDest;
        float fAlpha;
        uint32_t clrSrcKey;
        uint32_t dwFilterMode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct VMR9MonitorInfo
    {
        uint32_t uDevID;
        Windows::Win32::DisplayDevices::RECT rcMonitor;
        intptr_t hMon;
        uint32_t dwFlags;
        uint16_t szDevice[32];
        uint16_t szDescription[512];
        Windows::Win32::SystemServices::LARGE_INTEGER liDriverVersion;
        uint32_t dwVendorId;
        uint32_t dwDeviceId;
        uint32_t dwSubSysId;
        uint32_t dwRevision;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct VMR9Frequency
    {
        uint32_t dwNumerator;
        uint32_t dwDenominator;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct VMR9VideoDesc
    {
        uint32_t dwSize;
        uint32_t dwSampleWidth;
        uint32_t dwSampleHeight;
        Windows::Win32::DirectShow::VMR9_SampleFormat SampleFormat;
        uint32_t dwFourCC;
        Windows::Win32::DirectShow::VMR9Frequency InputSampleFreq;
        Windows::Win32::DirectShow::VMR9Frequency OutputFrameFreq;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct VMR9DeinterlaceCaps
    {
        uint32_t dwSize;
        uint32_t dwNumPreviousOutputFrames;
        uint32_t dwNumForwardRefSamples;
        uint32_t dwNumBackwardRefSamples;
        Windows::Win32::DirectShow::VMR9DeinterlaceTech DeinterlaceTechnology;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct VMR9VideoStreamInfo
    {
        Windows::Win32::Direct2D::IDirect3DSurface9* pddsVideoSurface;
        uint32_t dwWidth;
        uint32_t dwHeight;
        uint32_t dwStrmID;
        float fAlpha;
        Windows::Win32::DirectShow::VMR9NormalizedRect rNormal;
        int64_t rtStart;
        int64_t rtEnd;
        Windows::Win32::DirectShow::VMR9_SampleFormat SampleFormat;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct _riffchunk
    {
        uint32_t fcc;
        uint32_t cb;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct _rifflist
    {
        uint32_t fcc;
        uint32_t cb;
        uint32_t fccListType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct AVIMAINHEADER
    {
        uint32_t fcc;
        uint32_t cb;
        uint32_t dwMicroSecPerFrame;
        uint32_t dwMaxBytesPerSec;
        uint32_t dwPaddingGranularity;
        uint32_t dwFlags;
        uint32_t dwTotalFrames;
        uint32_t dwInitialFrames;
        uint32_t dwStreams;
        uint32_t dwSuggestedBufferSize;
        uint32_t dwWidth;
        uint32_t dwHeight;
        uint32_t dwReserved[4];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct _aviextheader
    {
        uint32_t fcc;
        uint32_t cb;
        uint32_t dwGrandFrames;
        uint32_t dwFuture[61];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct AVISTREAMHEADER
    {
        struct _rcFrame_e__Struct
        {
            int16_t left;
            int16_t top;
            int16_t right;
            int16_t bottom;
        };
        uint32_t fcc;
        uint32_t cb;
        uint32_t fccType;
        uint32_t fccHandler;
        uint32_t dwFlags;
        uint16_t wPriority;
        uint16_t wLanguage;
        uint32_t dwInitialFrames;
        uint32_t dwScale;
        uint32_t dwRate;
        uint32_t dwStart;
        uint32_t dwLength;
        uint32_t dwSuggestedBufferSize;
        uint32_t dwQuality;
        uint32_t dwSampleSize;
        _rcFrame_e__Struct rcFrame;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct AVIOLDINDEX
    {
        struct _avioldindex_entry
        {
            uint32_t dwChunkId;
            uint32_t dwFlags;
            uint32_t dwOffset;
            uint32_t dwSize;
        };
        uint32_t fcc;
        uint32_t cb;
        _avioldindex_entry aIndex;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    union TIMECODE
    {
        struct _Anonymous_e__Struct
        {
            uint16_t wFrameRate;
            uint16_t wFrameFract;
            uint32_t dwFrames;
        };
        _Anonymous_e__Struct Anonymous;
        uint64_t qw;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct _timecodedata
    {
        Windows::Win32::DirectShow::TIMECODE time;
        uint32_t dwSMPTEflags;
        uint32_t dwUser;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct AVIMETAINDEX
    {
        uint32_t fcc;
        uint32_t cb;
        uint16_t wLongsPerEntry;
        uint8_t bIndexSubType;
        uint8_t bIndexType;
        uint32_t nEntriesInUse;
        uint32_t dwChunkId;
        uint32_t dwReserved[3];
        uint32_t adwIndex;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct AVISUPERINDEX
    {
        struct _avisuperindex_entry
        {
            uint64_t qwOffset;
            uint32_t dwSize;
            uint32_t dwDuration;
        };
        uint32_t fcc;
        uint32_t cb;
        uint16_t wLongsPerEntry;
        uint8_t bIndexSubType;
        uint8_t bIndexType;
        uint32_t nEntriesInUse;
        uint32_t dwChunkId;
        uint32_t dwReserved[3];
        _avisuperindex_entry aIndex[1022];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct AVISTDINDEX_ENTRY
    {
        uint32_t dwOffset;
        uint32_t dwSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct AVISTDINDEX
    {
        uint32_t fcc;
        uint32_t cb;
        uint16_t wLongsPerEntry;
        uint8_t bIndexSubType;
        uint8_t bIndexType;
        uint32_t nEntriesInUse;
        uint32_t dwChunkId;
        uint64_t qwBaseOffset;
        uint32_t dwReserved_3;
        Windows::Win32::DirectShow::AVISTDINDEX_ENTRY aIndex[2044];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct _avitimedindex_entry
    {
        uint32_t dwOffset;
        uint32_t dwSize;
        uint32_t dwDuration;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct _avitimedindex
    {
        uint32_t fcc;
        uint32_t cb;
        uint16_t wLongsPerEntry;
        uint8_t bIndexSubType;
        uint8_t bIndexType;
        uint32_t nEntriesInUse;
        uint32_t dwChunkId;
        uint64_t qwBaseOffset;
        uint32_t dwReserved_3;
        Windows::Win32::DirectShow::_avitimedindex_entry aIndex[1362];
        uint32_t adwTrailingFill[2734];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct _avitimecodeindex
    {
        uint32_t fcc;
        uint32_t cb;
        uint16_t wLongsPerEntry;
        uint8_t bIndexSubType;
        uint8_t bIndexType;
        uint32_t nEntriesInUse;
        uint32_t dwChunkId;
        uint32_t dwReserved[3];
        Windows::Win32::DirectShow::_timecodedata aIndex[1022];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct _avitcdlindex_entry
    {
        uint32_t dwTick;
        Windows::Win32::DirectShow::TIMECODE time;
        uint32_t dwSMPTEflags;
        uint32_t dwUser;
        int8_t szReelId[12];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct _avitcdlindex
    {
        uint32_t fcc;
        uint32_t cb;
        uint16_t wLongsPerEntry;
        uint8_t bIndexSubType;
        uint8_t bIndexType;
        uint32_t nEntriesInUse;
        uint32_t dwChunkId;
        uint32_t dwReserved[3];
        Windows::Win32::DirectShow::_avitcdlindex_entry aIndex[584];
        uint32_t adwTrailingFill[3512];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct _avifieldindex_chunk
    {
        struct _avifieldindex_entry
        {
            uint32_t dwOffset;
            uint32_t dwSize;
            uint32_t dwOffsetField2;
        };
        uint32_t fcc;
        uint32_t cb;
        uint16_t wLongsPerEntry;
        uint8_t bIndexSubType;
        uint8_t bIndexType;
        uint32_t nEntriesInUse;
        uint32_t dwChunkId;
        uint64_t qwBaseOffset;
        uint32_t dwReserved3;
        _avifieldindex_entry aIndex;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct MainAVIHeader
    {
        uint32_t dwMicroSecPerFrame;
        uint32_t dwMaxBytesPerSec;
        uint32_t dwPaddingGranularity;
        uint32_t dwFlags;
        uint32_t dwTotalFrames;
        uint32_t dwInitialFrames;
        uint32_t dwStreams;
        uint32_t dwSuggestedBufferSize;
        uint32_t dwWidth;
        uint32_t dwHeight;
        uint32_t dwReserved[4];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct AVIStreamHeader
    {
        uint32_t fccType;
        uint32_t fccHandler;
        uint32_t dwFlags;
        uint16_t wPriority;
        uint16_t wLanguage;
        uint32_t dwInitialFrames;
        uint32_t dwScale;
        uint32_t dwRate;
        uint32_t dwStart;
        uint32_t dwLength;
        uint32_t dwSuggestedBufferSize;
        uint32_t dwQuality;
        uint32_t dwSampleSize;
        Windows::Win32::DisplayDevices::RECT rcFrame;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct AVIINDEXENTRY
    {
        uint32_t ckid;
        uint32_t dwFlags;
        uint32_t dwChunkOffset;
        uint32_t dwChunkLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct AVIPALCHANGE
    {
        uint8_t bFirstEntry;
        uint8_t bNumEntries;
        uint16_t wFlags;
        Windows::Win32::Direct2D::PALETTEENTRY peNew;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct AM_AC3_ERROR_CONCEALMENT
    {
        Windows::Win32::SystemServices::BOOL fRepeatPreviousBlock;
        Windows::Win32::SystemServices::BOOL fErrorInCurrentBlock;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct AM_AC3_ALTERNATE_AUDIO
    {
        Windows::Win32::SystemServices::BOOL fStereo;
        uint32_t DualMode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct AM_AC3_DOWNMIX
    {
        Windows::Win32::SystemServices::BOOL fDownMix;
        Windows::Win32::SystemServices::BOOL fDolbySurround;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct AM_AC3_BIT_STREAM_MODE
    {
        int32_t BitStreamMode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct AM_AC3_DIALOGUE_LEVEL
    {
        uint32_t DialogueLevel;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct AM_AC3_ROOM_TYPE
    {
        Windows::Win32::SystemServices::BOOL fLargeRoom;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct AM_DVD_YUV
    {
        uint8_t Reserved;
        uint8_t Y;
        uint8_t U;
        uint8_t V;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct AM_PROPERTY_SPPAL
    {
        Windows::Win32::DirectShow::AM_DVD_YUV sppal[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct AM_COLCON
    {
        uint8_t _bitfield1;
        uint8_t _bitfield2;
        uint8_t _bitfield3;
        uint8_t _bitfield4;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct AM_PROPERTY_SPHLI
    {
        uint16_t HLISS;
        uint16_t Reserved;
        uint32_t StartPTM;
        uint32_t EndPTM;
        uint16_t StartX;
        uint16_t StartY;
        uint16_t StopX;
        uint16_t StopY;
        Windows::Win32::DirectShow::AM_COLCON ColCon;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct AM_DVDCOPY_CHLGKEY
    {
        uint8_t ChlgKey[10];
        uint8_t Reserved[2];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct AM_DVDCOPY_BUSKEY
    {
        uint8_t BusKey[5];
        uint8_t Reserved[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct AM_DVDCOPY_DISCKEY
    {
        uint8_t DiscKey[2048];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct AM_DVDCOPY_TITLEKEY
    {
        uint32_t KeyFlags;
        uint32_t Reserved1[2];
        uint8_t TitleKey[6];
        uint8_t Reserved2[2];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct AM_COPY_MACROVISION
    {
        uint32_t MACROVISIONLevel;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct AM_DVDCOPY_SET_COPY_STATE
    {
        uint32_t DVDCopyState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct DVD_REGION
    {
        uint8_t CopySystem;
        uint8_t RegionData;
        uint8_t SystemRegion;
        uint8_t ResetCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct VIDEOINFOHEADER2
    {
        union _Anonymous_e__Union
        {
            uint32_t dwControlFlags;
            uint32_t dwReserved1;
        };
        Windows::Win32::DisplayDevices::RECT rcSource;
        Windows::Win32::DisplayDevices::RECT rcTarget;
        uint32_t dwBitRate;
        uint32_t dwBitErrorRate;
        int64_t AvgTimePerFrame;
        uint32_t dwInterlaceFlags;
        uint32_t dwCopyProtectFlags;
        uint32_t dwPictAspectRatioX;
        uint32_t dwPictAspectRatioY;
        _Anonymous_e__Union Anonymous;
        uint32_t dwReserved2;
        Windows::Win32::DirectShow::BITMAPINFOHEADER bmiHeader;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct MPEG2VIDEOINFO
    {
        Windows::Win32::DirectShow::VIDEOINFOHEADER2 hdr;
        uint32_t dwStartTimeCode;
        uint32_t cbSequenceHeader;
        uint32_t dwProfile;
        uint32_t dwLevel;
        uint32_t dwFlags;
        uint32_t dwSequenceHeader[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct AM_DvdKaraokeData
    {
        uint32_t dwDownmix;
        uint32_t dwSpeakerAssignment;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct AM_SimpleRateChange
    {
        int64_t StartTime;
        int32_t Rate;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct AM_QueryRate
    {
        int32_t lMaxForwardFullFrame;
        int32_t lMaxReverseFullFrame;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct AM_ExactRateChange
    {
        int64_t OutputZeroTime;
        int32_t Rate;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct AM_DVD_ChangeRate
    {
        int64_t StartInTime;
        int64_t StartOutTime;
        int32_t Rate;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct MP_PARAMINFO
    {
        Windows::Win32::DirectShow::MP_TYPE mpType;
        uint32_t mopCaps;
        float mpdMinValue;
        float mpdMaxValue;
        float mpdNeutralValue;
        uint16_t szUnitText[32];
        uint16_t szLabel[32];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct MP_ENVELOPE_SEGMENT
    {
        int64_t rtStart;
        int64_t rtEnd;
        float valStart;
        float valEnd;
        Windows::Win32::DirectShow::MP_CURVE_TYPE iCurve;
        uint32_t flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct DMO_PARTIAL_MEDIATYPE
    {
        ::win32::guid type;
        ::win32::guid subtype;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct CodecAPIEventData
    {
        ::win32::guid guid;
        uint32_t dataLength;
        uint32_t reserved[3];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsMediaFormat
{
    struct AM_WMT_EVENT_DATA
    {
        int32_t hrStatus;
        void* pData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct SCSI_PASS_THROUGH
    {
        uint16_t Length;
        uint8_t ScsiStatus;
        uint8_t PathId;
        uint8_t TargetId;
        uint8_t Lun;
        uint8_t CdbLength;
        uint8_t SenseInfoLength;
        uint8_t DataIn;
        uint32_t DataTransferLength;
        uint32_t TimeOutValue;
        size_t DataBufferOffset;
        uint32_t SenseInfoOffset;
        uint8_t Cdb[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct SCSI_PASS_THROUGH_DIRECT
    {
        uint16_t Length;
        uint8_t ScsiStatus;
        uint8_t PathId;
        uint8_t TargetId;
        uint8_t Lun;
        uint8_t CdbLength;
        uint8_t SenseInfoLength;
        uint8_t DataIn;
        uint32_t DataTransferLength;
        uint32_t TimeOutValue;
        void* DataBuffer;
        uint32_t SenseInfoOffset;
        uint8_t Cdb[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct SCSI_PASS_THROUGH_EX
    {
        uint32_t Version;
        uint32_t Length;
        uint32_t CdbLength;
        uint32_t StorAddressLength;
        uint8_t ScsiStatus;
        uint8_t SenseInfoLength;
        uint8_t DataDirection;
        uint8_t Reserved;
        uint32_t TimeOutValue;
        uint32_t StorAddressOffset;
        uint32_t SenseInfoOffset;
        uint32_t DataOutTransferLength;
        uint32_t DataInTransferLength;
        size_t DataOutBufferOffset;
        size_t DataInBufferOffset;
        uint8_t Cdb[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct SCSI_PASS_THROUGH_DIRECT_EX
    {
        uint32_t Version;
        uint32_t Length;
        uint32_t CdbLength;
        uint32_t StorAddressLength;
        uint8_t ScsiStatus;
        uint8_t SenseInfoLength;
        uint8_t DataDirection;
        uint8_t Reserved;
        uint32_t TimeOutValue;
        uint32_t StorAddressOffset;
        uint32_t SenseInfoOffset;
        uint32_t DataOutTransferLength;
        uint32_t DataInTransferLength;
        void* DataOutBuffer;
        void* DataInBuffer;
        uint8_t Cdb[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct ATA_PASS_THROUGH_EX
    {
        uint16_t Length;
        uint16_t AtaFlags;
        uint8_t PathId;
        uint8_t TargetId;
        uint8_t Lun;
        uint8_t ReservedAsUchar;
        uint32_t DataTransferLength;
        uint32_t TimeOutValue;
        uint32_t ReservedAsUlong;
        size_t DataBufferOffset;
        uint8_t PreviousTaskFile[8];
        uint8_t CurrentTaskFile[8];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct ATA_PASS_THROUGH_DIRECT
    {
        uint16_t Length;
        uint16_t AtaFlags;
        uint8_t PathId;
        uint8_t TargetId;
        uint8_t Lun;
        uint8_t ReservedAsUchar;
        uint32_t DataTransferLength;
        uint32_t TimeOutValue;
        uint32_t ReservedAsUlong;
        void* DataBuffer;
        uint8_t PreviousTaskFile[8];
        uint8_t CurrentTaskFile[8];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct IDE_IO_CONTROL
    {
        uint32_t HeaderLength;
        uint8_t Signature[8];
        uint32_t Timeout;
        uint32_t ControlCode;
        uint32_t ReturnStatus;
        uint32_t DataLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct MPIO_PASS_THROUGH_PATH
    {
        Windows::Win32::IScsiDisc::SCSI_PASS_THROUGH PassThrough;
        uint32_t Version;
        uint16_t Length;
        uint8_t Flags;
        uint8_t PortNumber;
        uint64_t MpioPathId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct MPIO_PASS_THROUGH_PATH_DIRECT
    {
        Windows::Win32::IScsiDisc::SCSI_PASS_THROUGH_DIRECT PassThrough;
        uint32_t Version;
        uint16_t Length;
        uint8_t Flags;
        uint8_t PortNumber;
        uint64_t MpioPathId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct MPIO_PASS_THROUGH_PATH_EX
    {
        uint32_t PassThroughOffset;
        uint32_t Version;
        uint16_t Length;
        uint8_t Flags;
        uint8_t PortNumber;
        uint64_t MpioPathId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct MPIO_PASS_THROUGH_PATH_DIRECT_EX
    {
        uint32_t PassThroughOffset;
        uint32_t Version;
        uint16_t Length;
        uint8_t Flags;
        uint8_t PortNumber;
        uint64_t MpioPathId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct SCSI_BUS_DATA
    {
        uint8_t NumberOfLogicalUnits;
        uint8_t InitiatorBusId;
        uint32_t InquiryDataOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct SCSI_ADAPTER_BUS_INFO
    {
        uint8_t NumberOfBuses;
        Windows::Win32::IScsiDisc::SCSI_BUS_DATA BusData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct SCSI_INQUIRY_DATA
    {
        uint8_t PathId;
        uint8_t TargetId;
        uint8_t Lun;
        uint8_t DeviceClaimed;
        uint32_t InquiryDataLength;
        uint32_t NextInquiryDataOffset;
        uint8_t InquiryData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct SRB_IO_CONTROL
    {
        uint32_t HeaderLength;
        uint8_t Signature[8];
        uint32_t Timeout;
        uint32_t ControlCode;
        uint32_t ReturnCode;
        uint32_t Length;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct NVCACHE_REQUEST_BLOCK
    {
        uint32_t NRBSize;
        uint16_t Function;
        uint32_t NRBFlags;
        uint32_t NRBStatus;
        uint32_t Count;
        uint64_t LBA;
        uint32_t DataBufSize;
        uint32_t NVCacheStatus;
        uint32_t NVCacheSubStatus;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct NV_FEATURE_PARAMETER
    {
        uint16_t NVPowerModeEnabled;
        uint16_t NVParameterReserv1;
        uint16_t NVCmdEnabled;
        uint16_t NVParameterReserv2;
        uint16_t NVPowerModeVer;
        uint16_t NVCmdVer;
        uint32_t NVSize;
        uint16_t NVReadSpeed;
        uint16_t NVWrtSpeed;
        uint32_t DeviceSpinUpTime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct NVCACHE_HINT_PAYLOAD
    {
        uint8_t Command;
        uint8_t Feature7_0;
        uint8_t Feature15_8;
        uint8_t Count15_8;
        uint8_t LBA7_0;
        uint8_t LBA15_8;
        uint8_t LBA23_16;
        uint8_t LBA31_24;
        uint8_t LBA39_32;
        uint8_t LBA47_40;
        uint8_t Auxiliary7_0;
        uint8_t Auxiliary23_16;
        uint8_t Reserved[4];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct NV_SEP_CACHE_PARAMETER
    {
        union _Flags_e__Union
        {
            struct _CacheFlags_e__Struct
            {
                uint8_t _bitfield;
            };
            _CacheFlags_e__Struct CacheFlags;
            uint8_t CacheFlagsSet;
        };
        uint32_t Version;
        uint32_t Size;
        _Flags_e__Union Flags;
        uint8_t WriteCacheType;
        uint8_t WriteCacheTypeEffective;
        uint8_t ParameterReserve1[3];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct STORAGE_DIAGNOSTIC_MP_REQUEST
    {
        uint32_t Version;
        uint32_t Size;
        Windows::Win32::IScsiDisc::MP_STORAGE_DIAGNOSTIC_TARGET_TYPE TargetType;
        Windows::Win32::IScsiDisc::MP_STORAGE_DIAGNOSTIC_LEVEL Level;
        ::win32::guid ProviderId;
        uint32_t BufferSize;
        uint32_t Reserved;
        uint8_t DataBuffer[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct MP_DEVICE_DATA_SET_RANGE
    {
        int64_t StartingOffset;
        uint64_t LengthInBytes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct DSM_NOTIFICATION_REQUEST_BLOCK
    {
        uint32_t Size;
        uint32_t Version;
        uint32_t NotifyFlags;
        uint32_t DataSetProfile;
        uint32_t Reserved[3];
        uint32_t DataSetRangesCount;
        Windows::Win32::IScsiDisc::MP_DEVICE_DATA_SET_RANGE DataSetRanges[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct HYBRID_REQUEST_BLOCK
    {
        uint32_t Version;
        uint32_t Size;
        uint32_t Function;
        uint32_t Flags;
        uint32_t DataBufferOffset;
        uint32_t DataBufferLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct NVCACHE_PRIORITY_LEVEL_DESCRIPTOR
    {
        uint8_t PriorityLevel;
        uint8_t Reserved0[3];
        uint32_t ConsumedNVMSizeFraction;
        uint32_t ConsumedMappingResourcesFraction;
        uint32_t ConsumedNVMSizeForDirtyDataFraction;
        uint32_t ConsumedMappingResourcesForDirtyDataFraction;
        uint32_t Reserved1;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct HYBRID_INFORMATION
    {
        struct _Attributes_e__Struct
        {
            uint32_t _bitfield;
        };
        struct _Priorities_e__Struct
        {
            struct _SupportedCommands_e__Struct
            {
                uint32_t _bitfield;
                uint32_t MaxEvictCommands;
                uint32_t MaxLbaRangeCountForEvict;
                uint32_t MaxLbaRangeCountForChangeLba;
            };
            uint8_t PriorityLevelCount;
            uint8_t MaxPriorityBehavior;
            uint8_t OptimalWriteGranularity;
            uint8_t Reserved;
            uint32_t DirtyThresholdLow;
            uint32_t DirtyThresholdHigh;
            _SupportedCommands_e__Struct SupportedCommands;
            Windows::Win32::IScsiDisc::NVCACHE_PRIORITY_LEVEL_DESCRIPTOR Priority[1];
        };
        uint32_t Version;
        uint32_t Size;
        uint8_t HybridSupported;
        Windows::Win32::IScsiDisc::NVCACHE_STATUS Status;
        Windows::Win32::IScsiDisc::NVCACHE_TYPE CacheTypeEffective;
        Windows::Win32::IScsiDisc::NVCACHE_TYPE CacheTypeDefault;
        uint32_t FractionBase;
        uint64_t CacheSize;
        _Attributes_e__Struct Attributes;
        _Priorities_e__Struct Priorities;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct HYBRID_DIRTY_THRESHOLDS
    {
        uint32_t Version;
        uint32_t Size;
        uint32_t DirtyLowThreshold;
        uint32_t DirtyHighThreshold;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct HYBRID_DEMOTE_BY_SIZE
    {
        uint32_t Version;
        uint32_t Size;
        uint8_t SourcePriority;
        uint8_t TargetPriority;
        uint16_t Reserved0;
        uint32_t Reserved1;
        uint64_t LbaCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct FIRMWARE_REQUEST_BLOCK
    {
        uint32_t Version;
        uint32_t Size;
        uint32_t Function;
        uint32_t Flags;
        uint32_t DataBufferOffset;
        uint32_t DataBufferLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct STORAGE_FIRMWARE_SLOT_INFO
    {
        union _Revision_e__Union
        {
            uint8_t Info[8];
            uint64_t AsUlonglong;
        };
        uint8_t SlotNumber;
        uint8_t ReadOnly;
        uint8_t Reserved[6];
        _Revision_e__Union Revision;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct STORAGE_FIRMWARE_SLOT_INFO_V2
    {
        uint8_t SlotNumber;
        uint8_t ReadOnly;
        uint8_t Reserved[6];
        uint8_t Revision[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct STORAGE_FIRMWARE_INFO
    {
        uint32_t Version;
        uint32_t Size;
        uint8_t UpgradeSupport;
        uint8_t SlotCount;
        uint8_t ActiveSlot;
        uint8_t PendingActivateSlot;
        uint32_t Reserved;
        Windows::Win32::IScsiDisc::STORAGE_FIRMWARE_SLOT_INFO Slot[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct STORAGE_FIRMWARE_INFO_V2
    {
        uint32_t Version;
        uint32_t Size;
        uint8_t UpgradeSupport;
        uint8_t SlotCount;
        uint8_t ActiveSlot;
        uint8_t PendingActivateSlot;
        uint8_t FirmwareShared;
        uint8_t Reserved[3];
        uint32_t ImagePayloadAlignment;
        uint32_t ImagePayloadMaxSize;
        Windows::Win32::IScsiDisc::STORAGE_FIRMWARE_SLOT_INFO_V2 Slot[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct STORAGE_FIRMWARE_DOWNLOAD
    {
        uint32_t Version;
        uint32_t Size;
        uint64_t Offset;
        uint64_t BufferSize;
        uint8_t ImageBuffer[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct STORAGE_FIRMWARE_DOWNLOAD_V2
    {
        uint32_t Version;
        uint32_t Size;
        uint64_t Offset;
        uint64_t BufferSize;
        uint8_t Slot;
        uint8_t Reserved[3];
        uint32_t ImageSize;
        uint8_t ImageBuffer[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct STORAGE_FIRMWARE_ACTIVATE
    {
        uint32_t Version;
        uint32_t Size;
        uint8_t SlotToActivate;
        uint8_t Reserved0[3];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct IO_SCSI_CAPABILITIES
    {
        uint32_t Length;
        uint32_t MaximumTransferLength;
        uint32_t MaximumPhysicalPages;
        uint32_t SupportedAsynchronousEvents;
        uint32_t AlignmentMask;
        uint8_t TaggedQueuing;
        uint8_t AdapterScansDown;
        uint8_t AdapterUsesPio;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct SCSI_ADDRESS
    {
        uint32_t Length;
        uint8_t PortNumber;
        uint8_t PathId;
        uint8_t TargetId;
        uint8_t Lun;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct _ADAPTER_OBJECT
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct DUMP_POINTERS_VERSION
    {
        uint32_t Version;
        uint32_t Size;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct DUMP_POINTERS
    {
        Windows::Win32::IScsiDisc::_ADAPTER_OBJECT* AdapterObject;
        void* MappedRegisterBase;
        void* DumpData;
        void* CommonBufferVa;
        Windows::Win32::SystemServices::LARGE_INTEGER CommonBufferPa;
        uint32_t CommonBufferSize;
        uint8_t AllocateCommonBuffers;
        uint8_t UseDiskDump;
        uint8_t Spare1[2];
        void* DeviceObject;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct DUMP_POINTERS_EX
    {
        Windows::Win32::IScsiDisc::DUMP_POINTERS_VERSION Header;
        void* DumpData;
        void* CommonBufferVa;
        uint32_t CommonBufferSize;
        uint8_t AllocateCommonBuffers;
        void* DeviceObject;
        void* DriverList;
        uint32_t dwPortFlags;
        uint32_t MaxDeviceDumpSectionSize;
        uint32_t MaxDeviceDumpLevel;
        uint32_t MaxTransferSize;
        void* AdapterObject;
        void* MappedRegisterBase;
        uint8_t* DeviceReady;
        Windows::Win32::IScsiDisc::PDUMP_DEVICE_POWERON_ROUTINE* DumpDevicePowerOn;
        void* DumpDevicePowerOnContext;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct DUMP_DRIVER
    {
        void* DumpDriverList;
        uint16_t DriverName[15];
        uint16_t BaseName[15];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct NTSCSI_UNICODE_STRING
    {
        uint16_t Length;
        uint16_t MaximumLength;
        uint16_t* Buffer;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct DUMP_DRIVER_EX
    {
        void* DumpDriverList;
        uint16_t DriverName[15];
        uint16_t BaseName[15];
        Windows::Win32::IScsiDisc::NTSCSI_UNICODE_STRING DriverFullPath;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct STORAGE_ENDURANCE_INFO
    {
        struct _Flags_e__Struct
        {
            uint32_t _bitfield;
        };
        uint32_t ValidFields;
        uint32_t GroupId;
        _Flags_e__Struct Flags;
        uint32_t LifePercentage;
        uint8_t BytesReadCount[16];
        uint8_t ByteWriteCount[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct STORAGE_ENDURANCE_DATA_DESCRIPTOR
    {
        uint32_t Version;
        uint32_t Size;
        Windows::Win32::IScsiDisc::STORAGE_ENDURANCE_INFO EnduranceInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct ISCSI_LOGIN_OPTIONS
    {
        uint32_t Version;
        uint32_t InformationSpecified;
        uint32_t LoginFlags;
        Windows::Win32::IScsiDisc::ISCSI_AUTH_TYPES AuthType;
        Windows::Win32::IScsiDisc::ISCSI_DIGEST_TYPES HeaderDigest;
        Windows::Win32::IScsiDisc::ISCSI_DIGEST_TYPES DataDigest;
        uint32_t MaximumConnections;
        uint32_t DefaultTime2Wait;
        uint32_t DefaultTime2Retain;
        uint32_t UsernameLength;
        uint32_t PasswordLength;
        uint8_t* Username;
        uint8_t* Password;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct IKE_AUTHENTICATION_PRESHARED_KEY
    {
        uint64_t SecurityFlags;
        uint8_t IdType;
        uint32_t IdLengthInBytes;
        uint8_t* Id;
        uint32_t KeyLengthInBytes;
        uint8_t* Key;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct IKE_AUTHENTICATION_INFORMATION
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::IScsiDisc::IKE_AUTHENTICATION_PRESHARED_KEY PsKey;
        };
        Windows::Win32::IScsiDisc::IKE_AUTHENTICATION_METHOD AuthMethod;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct ISCSI_UNIQUE_SESSION_ID
    {
        uint64_t AdapterUnique;
        uint64_t AdapterSpecific;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct SCSI_LUN_LIST
    {
        uint32_t OSLUN;
        uint64_t TargetLUN;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct ISCSI_TARGET_MAPPINGW
    {
        uint16_t InitiatorName[256];
        uint16_t TargetName[224];
        uint16_t OSDeviceName[260];
        Windows::Win32::IScsiDisc::ISCSI_UNIQUE_SESSION_ID SessionId;
        uint32_t OSBusNumber;
        uint32_t OSTargetNumber;
        uint32_t LUNCount;
        Windows::Win32::IScsiDisc::SCSI_LUN_LIST* LUNList;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct ISCSI_TARGET_MAPPINGA
    {
        int8_t InitiatorName[256];
        int8_t TargetName[224];
        int8_t OSDeviceName[260];
        Windows::Win32::IScsiDisc::ISCSI_UNIQUE_SESSION_ID SessionId;
        uint32_t OSBusNumber;
        uint32_t OSTargetNumber;
        uint32_t LUNCount;
        Windows::Win32::IScsiDisc::SCSI_LUN_LIST* LUNList;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct ISCSI_TARGET_PORTALW
    {
        uint16_t SymbolicName[256];
        uint16_t Address[256];
        uint16_t Socket;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct ISCSI_TARGET_PORTALA
    {
        int8_t SymbolicName[256];
        int8_t Address[256];
        uint16_t Socket;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct ISCSI_TARGET_PORTAL_INFOW
    {
        uint16_t InitiatorName[256];
        uint32_t InitiatorPortNumber;
        uint16_t SymbolicName[256];
        uint16_t Address[256];
        uint16_t Socket;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct ISCSI_TARGET_PORTAL_INFOA
    {
        int8_t InitiatorName[256];
        uint32_t InitiatorPortNumber;
        int8_t SymbolicName[256];
        int8_t Address[256];
        uint16_t Socket;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct ISCSI_TARGET_PORTAL_INFO_EXW
    {
        uint16_t InitiatorName[256];
        uint32_t InitiatorPortNumber;
        uint16_t SymbolicName[256];
        uint16_t Address[256];
        uint16_t Socket;
        uint64_t SecurityFlags;
        Windows::Win32::IScsiDisc::ISCSI_LOGIN_OPTIONS LoginOptions;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct ISCSI_TARGET_PORTAL_INFO_EXA
    {
        int8_t InitiatorName[256];
        uint32_t InitiatorPortNumber;
        int8_t SymbolicName[256];
        int8_t Address[256];
        uint16_t Socket;
        uint64_t SecurityFlags;
        Windows::Win32::IScsiDisc::ISCSI_LOGIN_OPTIONS LoginOptions;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct ISCSI_TARGET_PORTAL_GROUPW
    {
        uint32_t Count;
        Windows::Win32::IScsiDisc::ISCSI_TARGET_PORTALW Portals[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct ISCSI_TARGET_PORTAL_GROUPA
    {
        uint32_t Count;
        Windows::Win32::IScsiDisc::ISCSI_TARGET_PORTALA Portals[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct ISCSI_CONNECTION_INFOW
    {
        Windows::Win32::IScsiDisc::ISCSI_UNIQUE_SESSION_ID ConnectionId;
        uint16_t* InitiatorAddress;
        uint16_t* TargetAddress;
        uint16_t InitiatorSocket;
        uint16_t TargetSocket;
        uint8_t CID[2];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct ISCSI_SESSION_INFOW
    {
        Windows::Win32::IScsiDisc::ISCSI_UNIQUE_SESSION_ID SessionId;
        uint16_t* InitiatorName;
        uint16_t* TargetNodeName;
        uint16_t* TargetName;
        uint8_t ISID[6];
        uint8_t TSID[2];
        uint32_t ConnectionCount;
        Windows::Win32::IScsiDisc::ISCSI_CONNECTION_INFOW* Connections;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct ISCSI_CONNECTION_INFOA
    {
        Windows::Win32::IScsiDisc::ISCSI_UNIQUE_SESSION_ID ConnectionId;
        int8_t* InitiatorAddress;
        int8_t* TargetAddress;
        uint16_t InitiatorSocket;
        uint16_t TargetSocket;
        uint8_t CID[2];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct ISCSI_SESSION_INFOA
    {
        Windows::Win32::IScsiDisc::ISCSI_UNIQUE_SESSION_ID SessionId;
        int8_t* InitiatorName;
        int8_t* TargetNodeName;
        int8_t* TargetName;
        uint8_t ISID[6];
        uint8_t TSID[2];
        uint32_t ConnectionCount;
        Windows::Win32::IScsiDisc::ISCSI_CONNECTION_INFOA* Connections;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct ISCSI_CONNECTION_INFO_EX
    {
        Windows::Win32::IScsiDisc::ISCSI_UNIQUE_SESSION_ID ConnectionId;
        uint8_t State;
        uint8_t Protocol;
        uint8_t HeaderDigest;
        uint8_t DataDigest;
        uint32_t MaxRecvDataSegmentLength;
        Windows::Win32::IScsiDisc::ISCSI_AUTH_TYPES AuthType;
        uint64_t EstimatedThroughput;
        uint32_t MaxDatagramSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct ISCSI_SESSION_INFO_EX
    {
        Windows::Win32::IScsiDisc::ISCSI_UNIQUE_SESSION_ID SessionId;
        uint8_t InitialR2t;
        uint8_t ImmediateData;
        uint8_t Type;
        uint8_t DataSequenceInOrder;
        uint8_t DataPduInOrder;
        uint8_t ErrorRecoveryLevel;
        uint32_t MaxOutstandingR2t;
        uint32_t FirstBurstLength;
        uint32_t MaxBurstLength;
        uint32_t MaximumConnections;
        uint32_t ConnectionCount;
        Windows::Win32::IScsiDisc::ISCSI_CONNECTION_INFO_EX* Connections;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STORAGE_DEVICE_NUMBER
    {
        uint32_t DeviceType;
        uint32_t DeviceNumber;
        uint32_t PartitionNumber;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct ISCSI_DEVICE_ON_SESSIONW
    {
        uint16_t InitiatorName[256];
        uint16_t TargetName[224];
        Windows::Win32::IScsiDisc::SCSI_ADDRESS ScsiAddress;
        ::win32::guid DeviceInterfaceType;
        uint16_t DeviceInterfaceName[260];
        uint16_t LegacyName[260];
        Windows::Win32::SystemServices::STORAGE_DEVICE_NUMBER StorageDeviceNumber;
        uint32_t DeviceInstance;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct ISCSI_DEVICE_ON_SESSIONA
    {
        int8_t InitiatorName[256];
        int8_t TargetName[224];
        Windows::Win32::IScsiDisc::SCSI_ADDRESS ScsiAddress;
        ::win32::guid DeviceInterfaceType;
        int8_t DeviceInterfaceName[260];
        int8_t LegacyName[260];
        Windows::Win32::SystemServices::STORAGE_DEVICE_NUMBER StorageDeviceNumber;
        uint32_t DeviceInstance;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct PERSISTENT_ISCSI_LOGIN_INFOW
    {
        uint16_t TargetName[224];
        uint8_t IsInformationalSession;
        uint16_t InitiatorInstance[256];
        uint32_t InitiatorPortNumber;
        Windows::Win32::IScsiDisc::ISCSI_TARGET_PORTALW TargetPortal;
        uint64_t SecurityFlags;
        Windows::Win32::IScsiDisc::ISCSI_TARGET_MAPPINGW* Mappings;
        Windows::Win32::IScsiDisc::ISCSI_LOGIN_OPTIONS LoginOptions;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct PERSISTENT_ISCSI_LOGIN_INFOA
    {
        int8_t TargetName[224];
        uint8_t IsInformationalSession;
        int8_t InitiatorInstance[256];
        uint32_t InitiatorPortNumber;
        Windows::Win32::IScsiDisc::ISCSI_TARGET_PORTALA TargetPortal;
        uint64_t SecurityFlags;
        Windows::Win32::IScsiDisc::ISCSI_TARGET_MAPPINGA* Mappings;
        Windows::Win32::IScsiDisc::ISCSI_LOGIN_OPTIONS LoginOptions;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IScsiDisc
{
    struct ISCSI_VERSION_INFO
    {
        uint32_t MajorVersion;
        uint32_t MinorVersion;
        uint32_t BuildNumber;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dwm
{
    struct DWM_BLURBEHIND
    {
        uint32_t dwFlags;
        Windows::Win32::SystemServices::BOOL fEnable;
        Windows::Win32::Gdi::HRGN hRgnBlur;
        Windows::Win32::SystemServices::BOOL fTransitionOnMaximized;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dwm
{
    struct DWM_THUMBNAIL_PROPERTIES
    {
        uint32_t dwFlags;
        Windows::Win32::DisplayDevices::RECT rcDestination;
        Windows::Win32::DisplayDevices::RECT rcSource;
        uint8_t opacity;
        Windows::Win32::SystemServices::BOOL fVisible;
        Windows::Win32::SystemServices::BOOL fSourceClientAreaOnly;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dwm
{
    struct UNSIGNED_RATIO
    {
        uint32_t uiNumerator;
        uint32_t uiDenominator;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dwm
{
    struct DWM_TIMING_INFO
    {
        uint32_t cbSize;
        Windows::Win32::Dwm::UNSIGNED_RATIO rateRefresh;
        uint64_t qpcRefreshPeriod;
        Windows::Win32::Dwm::UNSIGNED_RATIO rateCompose;
        uint64_t qpcVBlank;
        uint64_t cRefresh;
        uint32_t cDXRefresh;
        uint64_t qpcCompose;
        uint64_t cFrame;
        uint32_t cDXPresent;
        uint64_t cRefreshFrame;
        uint64_t cFrameSubmitted;
        uint32_t cDXPresentSubmitted;
        uint64_t cFrameConfirmed;
        uint32_t cDXPresentConfirmed;
        uint64_t cRefreshConfirmed;
        uint32_t cDXRefreshConfirmed;
        uint64_t cFramesLate;
        uint32_t cFramesOutstanding;
        uint64_t cFrameDisplayed;
        uint64_t qpcFrameDisplayed;
        uint64_t cRefreshFrameDisplayed;
        uint64_t cFrameComplete;
        uint64_t qpcFrameComplete;
        uint64_t cFramePending;
        uint64_t qpcFramePending;
        uint64_t cFramesDisplayed;
        uint64_t cFramesComplete;
        uint64_t cFramesPending;
        uint64_t cFramesAvailable;
        uint64_t cFramesDropped;
        uint64_t cFramesMissed;
        uint64_t cRefreshNextDisplayed;
        uint64_t cRefreshNextPresented;
        uint64_t cRefreshesDisplayed;
        uint64_t cRefreshesPresented;
        uint64_t cRefreshStarted;
        uint64_t cPixelsReceived;
        uint64_t cPixelsDrawn;
        uint64_t cBuffersEmpty;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dwm
{
    struct DWM_PRESENT_PARAMETERS
    {
        uint32_t cbSize;
        Windows::Win32::SystemServices::BOOL fQueue;
        uint64_t cRefreshStart;
        uint32_t cBuffer;
        Windows::Win32::SystemServices::BOOL fUseSourceRate;
        Windows::Win32::Dwm::UNSIGNED_RATIO rateSource;
        uint32_t cRefreshesPerFrame;
        Windows::Win32::Dwm::DWM_SOURCE_FRAME_SAMPLING eSampling;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WpfBitmapEffects
{
    struct MilMatrix3x2D
    {
        double S_11;
        double S_12;
        double S_21;
        double S_22;
        double DX;
        double DY;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ExtensibleAuthenticationProtocol
{
    struct NgcTicketContext
    {
        uint16_t wszTicket[45];
        size_t hKey;
        Windows::Win32::SystemServices::HANDLE hImpersonateToken;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ExtensibleAuthenticationProtocol
{
    struct RAS_AUTH_ATTRIBUTE
    {
        Windows::Win32::ExtensibleAuthenticationProtocol::RAS_AUTH_ATTRIBUTE_TYPE raaType;
        uint32_t dwLength;
        void* Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ExtensibleAuthenticationProtocol
{
    struct PPP_EAP_PACKET
    {
        uint8_t Code;
        uint8_t Id;
        uint8_t Length[2];
        uint8_t Data[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ExtensibleAuthenticationProtocol
{
    struct PPP_EAP_INPUT
    {
        uint32_t dwSizeInBytes;
        uint32_t fFlags;
        Windows::Win32::SystemServices::BOOL fAuthenticator;
        uint16_t* pwszIdentity;
        uint16_t* pwszPassword;
        uint8_t bInitialId;
        Windows::Win32::ExtensibleAuthenticationProtocol::RAS_AUTH_ATTRIBUTE* pUserAttributes;
        Windows::Win32::SystemServices::BOOL fAuthenticationComplete;
        uint32_t dwAuthResultCode;
        Windows::Win32::SystemServices::HANDLE hTokenImpersonateUser;
        Windows::Win32::SystemServices::BOOL fSuccessPacketReceived;
        Windows::Win32::SystemServices::BOOL fDataReceivedFromInteractiveUI;
        uint8_t* pDataFromInteractiveUI;
        uint32_t dwSizeOfDataFromInteractiveUI;
        uint8_t* pConnectionData;
        uint32_t dwSizeOfConnectionData;
        uint8_t* pUserData;
        uint32_t dwSizeOfUserData;
        Windows::Win32::SystemServices::HANDLE hReserved;
        ::win32::guid guidConnectionId;
        Windows::Win32::SystemServices::BOOL isVpn;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ExtensibleAuthenticationProtocol
{
    struct PPP_EAP_OUTPUT
    {
        uint32_t dwSizeInBytes;
        Windows::Win32::ExtensibleAuthenticationProtocol::PPP_EAP_ACTION Action;
        uint32_t dwAuthResultCode;
        Windows::Win32::ExtensibleAuthenticationProtocol::RAS_AUTH_ATTRIBUTE* pUserAttributes;
        Windows::Win32::SystemServices::BOOL fInvokeInteractiveUI;
        uint8_t* pUIContextData;
        uint32_t dwSizeOfUIContextData;
        Windows::Win32::SystemServices::BOOL fSaveConnectionData;
        uint8_t* pConnectionData;
        uint32_t dwSizeOfConnectionData;
        Windows::Win32::SystemServices::BOOL fSaveUserData;
        uint8_t* pUserData;
        uint32_t dwSizeOfUserData;
        Windows::Win32::ExtensibleAuthenticationProtocol::NgcTicketContext* pNgcKerbTicket;
        Windows::Win32::SystemServices::BOOL fSaveToCredMan;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ExtensibleAuthenticationProtocol
{
    struct PPP_EAP_INFO
    {
        uint32_t dwSizeInBytes;
        uint32_t dwEapTypeId;
        intptr_t RasEapInitialize;
        intptr_t RasEapBegin;
        intptr_t RasEapEnd;
        intptr_t RasEapMakeMessage;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ExtensibleAuthenticationProtocol
{
    struct LEGACY_IDENTITY_UI_PARAMS
    {
        uint32_t eapType;
        uint32_t dwFlags;
        uint32_t dwSizeofConnectionData;
        uint8_t* pConnectionData;
        uint32_t dwSizeofUserData;
        uint8_t* pUserData;
        uint32_t dwSizeofUserDataOut;
        uint8_t* pUserDataOut;
        uint16_t* pwszIdentity;
        uint32_t dwError;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ExtensibleAuthenticationProtocol
{
    struct LEGACY_INTERACTIVE_UI_PARAMS
    {
        uint32_t eapType;
        uint32_t dwSizeofContextData;
        uint8_t* pContextData;
        uint32_t dwSizeofInteractiveUIData;
        uint8_t* pInteractiveUIData;
        uint32_t dwError;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ExtensibleAuthenticationProtocol
{
    struct EAP_METHOD_INFO
    {
        Windows::Win32::ExtensibleAuthenticationProtocol::EAP_METHOD_TYPE eaptype;
        uint16_t* pwszAuthorName;
        uint16_t* pwszFriendlyName;
        uint32_t eapProperties;
        Windows::Win32::ExtensibleAuthenticationProtocol::EAP_METHOD_INFO* pInnerMethodInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ExtensibleAuthenticationProtocol
{
    struct EAP_METHOD_INFO_EX
    {
        Windows::Win32::ExtensibleAuthenticationProtocol::EAP_METHOD_TYPE eaptype;
        uint16_t* pwszAuthorName;
        uint16_t* pwszFriendlyName;
        uint32_t eapProperties;
        Windows::Win32::ExtensibleAuthenticationProtocol::EAP_METHOD_INFO_ARRAY_EX* pInnerMethodInfoArray;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ExtensibleAuthenticationProtocol
{
    struct EAP_METHOD_INFO_ARRAY
    {
        uint32_t dwNumberOfMethods;
        Windows::Win32::ExtensibleAuthenticationProtocol::EAP_METHOD_INFO* pEapMethods;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ExtensibleAuthenticationProtocol
{
    struct EAP_METHOD_INFO_ARRAY_EX
    {
        uint32_t dwNumberOfMethods;
        Windows::Win32::ExtensibleAuthenticationProtocol::EAP_METHOD_INFO_EX* pEapMethods;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ExtensibleAuthenticationProtocol
{
    struct EAP_ERROR
    {
        uint32_t dwWinError;
        Windows::Win32::ExtensibleAuthenticationProtocol::EAP_METHOD_TYPE type;
        uint32_t dwReasonCode;
        ::win32::guid rootCauseGuid;
        ::win32::guid repairGuid;
        ::win32::guid helpLinkGuid;
        uint16_t* pRootCauseString;
        uint16_t* pRepairString;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ExtensibleAuthenticationProtocol
{
    struct EAP_ATTRIBUTE
    {
        Windows::Win32::ExtensibleAuthenticationProtocol::EAP_ATTRIBUTE_TYPE eaType;
        uint32_t dwLength;
        uint8_t* pValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ExtensibleAuthenticationProtocol
{
    struct EAP_ATTRIBUTES
    {
        uint32_t dwNumberOfAttributes;
        Windows::Win32::ExtensibleAuthenticationProtocol::EAP_ATTRIBUTE* pAttribs;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ExtensibleAuthenticationProtocol
{
    struct EAP_CONFIG_INPUT_FIELD_DATA
    {
        uint32_t dwSize;
        Windows::Win32::ExtensibleAuthenticationProtocol::EAP_CONFIG_INPUT_FIELD_TYPE Type;
        uint32_t dwFlagProps;
        uint16_t* pwszLabel;
        uint16_t* pwszData;
        uint32_t dwMinDataLength;
        uint32_t dwMaxDataLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ExtensibleAuthenticationProtocol
{
    struct EAP_CONFIG_INPUT_FIELD_ARRAY
    {
        uint32_t dwVersion;
        uint32_t dwNumberOfFields;
        Windows::Win32::ExtensibleAuthenticationProtocol::EAP_CONFIG_INPUT_FIELD_DATA* pFields;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ExtensibleAuthenticationProtocol
{
    struct EAP_CRED_EXPIRY_REQ
    {
        Windows::Win32::ExtensibleAuthenticationProtocol::EAP_CONFIG_INPUT_FIELD_ARRAY curCreds;
        Windows::Win32::ExtensibleAuthenticationProtocol::EAP_CONFIG_INPUT_FIELD_ARRAY newCreds;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ExtensibleAuthenticationProtocol
{
    union EAP_UI_DATA_FORMAT
    {
        Windows::Win32::ExtensibleAuthenticationProtocol::EAP_CONFIG_INPUT_FIELD_ARRAY* credData;
        Windows::Win32::ExtensibleAuthenticationProtocol::EAP_CRED_EXPIRY_REQ* credExpiryData;
        Windows::Win32::ExtensibleAuthenticationProtocol::EAP_CONFIG_INPUT_FIELD_ARRAY* credLogonData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ExtensibleAuthenticationProtocol
{
    struct EAP_INTERACTIVE_UI_DATA
    {
        uint32_t dwVersion;
        uint32_t dwSize;
        Windows::Win32::ExtensibleAuthenticationProtocol::EAP_INTERACTIVE_UI_DATA_TYPE dwDataType;
        uint32_t cbUiData;
        Windows::Win32::ExtensibleAuthenticationProtocol::EAP_UI_DATA_FORMAT pbUiData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ExtensibleAuthenticationProtocol
{
    struct EAP_METHOD_PROPERTY_VALUE_BOOL
    {
        uint32_t length;
        Windows::Win32::SystemServices::BOOL value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ExtensibleAuthenticationProtocol
{
    struct EAP_METHOD_PROPERTY_VALUE_DWORD
    {
        uint32_t length;
        uint32_t value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ExtensibleAuthenticationProtocol
{
    struct EAP_METHOD_PROPERTY_VALUE_STRING
    {
        uint32_t length;
        uint8_t* value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ExtensibleAuthenticationProtocol
{
    union EAP_METHOD_PROPERTY_VALUE
    {
        Windows::Win32::ExtensibleAuthenticationProtocol::EAP_METHOD_PROPERTY_VALUE_BOOL empvBool;
        Windows::Win32::ExtensibleAuthenticationProtocol::EAP_METHOD_PROPERTY_VALUE_DWORD empvDword;
        Windows::Win32::ExtensibleAuthenticationProtocol::EAP_METHOD_PROPERTY_VALUE_STRING empvString;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ExtensibleAuthenticationProtocol
{
    struct EAP_METHOD_PROPERTY
    {
        Windows::Win32::ExtensibleAuthenticationProtocol::EAP_METHOD_PROPERTY_TYPE eapMethodPropertyType;
        Windows::Win32::ExtensibleAuthenticationProtocol::EAP_METHOD_PROPERTY_VALUE_TYPE eapMethodPropertyValueType;
        Windows::Win32::ExtensibleAuthenticationProtocol::EAP_METHOD_PROPERTY_VALUE eapMethodPropertyValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ExtensibleAuthenticationProtocol
{
    struct EAP_METHOD_PROPERTY_ARRAY
    {
        uint32_t dwNumberOfProperties;
        Windows::Win32::ExtensibleAuthenticationProtocol::EAP_METHOD_PROPERTY* pMethodProperty;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ExtensibleAuthenticationProtocol
{
    struct EAPHOST_IDENTITY_UI_PARAMS
    {
        Windows::Win32::ExtensibleAuthenticationProtocol::EAP_METHOD_TYPE eapMethodType;
        uint32_t dwFlags;
        uint32_t dwSizeofConnectionData;
        uint8_t* pConnectionData;
        uint32_t dwSizeofUserData;
        uint8_t* pUserData;
        uint32_t dwSizeofUserDataOut;
        uint8_t* pUserDataOut;
        uint16_t* pwszIdentity;
        uint32_t dwError;
        Windows::Win32::ExtensibleAuthenticationProtocol::EAP_ERROR* pEapError;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ExtensibleAuthenticationProtocol
{
    struct EAPHOST_INTERACTIVE_UI_PARAMS
    {
        uint32_t dwSizeofContextData;
        uint8_t* pContextData;
        uint32_t dwSizeofInteractiveUIData;
        uint8_t* pInteractiveUIData;
        uint32_t dwError;
        Windows::Win32::ExtensibleAuthenticationProtocol::EAP_ERROR* pEapError;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ExtensibleAuthenticationProtocol
{
    struct EapUsernamePasswordCredential
    {
        uint16_t* username;
        uint16_t* password;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ExtensibleAuthenticationProtocol
{
    struct EapCertificateCredential
    {
        uint8_t certHash[20];
        uint16_t* password;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ExtensibleAuthenticationProtocol
{
    struct EapSimCredential
    {
        uint16_t* iccID;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ExtensibleAuthenticationProtocol
{
    union EapCredentialTypeData
    {
        Windows::Win32::ExtensibleAuthenticationProtocol::EapUsernamePasswordCredential username_password;
        Windows::Win32::ExtensibleAuthenticationProtocol::EapCertificateCredential certificate;
        Windows::Win32::ExtensibleAuthenticationProtocol::EapSimCredential sim;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ExtensibleAuthenticationProtocol
{
    struct EapCredential
    {
        Windows::Win32::ExtensibleAuthenticationProtocol::EapCredentialType credType;
        Windows::Win32::ExtensibleAuthenticationProtocol::EapCredentialTypeData credData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ExtensibleAuthenticationProtocol
{
    struct EAPHOST_AUTH_INFO
    {
        Windows::Win32::ExtensibleAuthenticationProtocol::EAPHOST_AUTH_STATUS status;
        uint32_t dwErrorCode;
        uint32_t dwReasonCode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ExtensibleAuthenticationProtocol
{
    struct EapHostPeerMethodResult
    {
        Windows::Win32::SystemServices::BOOL fIsSuccess;
        uint32_t dwFailureReasonCode;
        Windows::Win32::SystemServices::BOOL fSaveConnectionData;
        uint32_t dwSizeofConnectionData;
        uint8_t* pConnectionData;
        Windows::Win32::SystemServices::BOOL fSaveUserData;
        uint32_t dwSizeofUserData;
        uint8_t* pUserData;
        Windows::Win32::ExtensibleAuthenticationProtocol::EAP_ATTRIBUTES* pAttribArray;
        Windows::Win32::ExtensibleAuthenticationProtocol::ISOLATION_STATE isolationState;
        Windows::Win32::ExtensibleAuthenticationProtocol::EAP_METHOD_INFO* pEapMethodInfo;
        Windows::Win32::ExtensibleAuthenticationProtocol::EAP_ERROR* pEapError;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ExtensibleAuthenticationProtocol
{
    struct EapPacket
    {
        uint8_t Code;
        uint8_t Id;
        uint8_t Length[2];
        uint8_t Data[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ExtensibleAuthenticationProtocol
{
    struct EAP_METHOD_AUTHENTICATOR_RESULT
    {
        Windows::Win32::SystemServices::BOOL fIsSuccess;
        uint32_t dwFailureReason;
        Windows::Win32::ExtensibleAuthenticationProtocol::EAP_ATTRIBUTES* pAuthAttribs;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ExtensibleAuthenticationProtocol
{
    struct EapPeerMethodOutput
    {
        Windows::Win32::ExtensibleAuthenticationProtocol::EapPeerMethodResponseAction action;
        Windows::Win32::SystemServices::BOOL fAllowNotifications;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ExtensibleAuthenticationProtocol
{
    struct EapPeerMethodResult
    {
        Windows::Win32::SystemServices::BOOL fIsSuccess;
        uint32_t dwFailureReasonCode;
        Windows::Win32::SystemServices::BOOL fSaveConnectionData;
        uint32_t dwSizeofConnectionData;
        uint8_t* pConnectionData;
        Windows::Win32::SystemServices::BOOL fSaveUserData;
        uint32_t dwSizeofUserData;
        uint8_t* pUserData;
        Windows::Win32::ExtensibleAuthenticationProtocol::EAP_ATTRIBUTES* pAttribArray;
        Windows::Win32::ExtensibleAuthenticationProtocol::EAP_ERROR* pEapError;
        Windows::Win32::ExtensibleAuthenticationProtocol::NgcTicketContext* pNgcKerbTicket;
        Windows::Win32::SystemServices::BOOL fSaveToCredMan;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ExtensibleAuthenticationProtocol
{
    struct EAP_PEER_METHOD_ROUTINES
    {
        uint32_t dwVersion;
        Windows::Win32::ExtensibleAuthenticationProtocol::EAP_TYPE* pEapType;
        intptr_t EapPeerInitialize;
        intptr_t EapPeerGetIdentity;
        intptr_t EapPeerBeginSession;
        intptr_t EapPeerSetCredentials;
        intptr_t EapPeerProcessRequestPacket;
        intptr_t EapPeerGetResponsePacket;
        intptr_t EapPeerGetResult;
        intptr_t EapPeerGetUIContext;
        intptr_t EapPeerSetUIContext;
        intptr_t EapPeerGetResponseAttributes;
        intptr_t EapPeerSetResponseAttributes;
        intptr_t EapPeerEndSession;
        intptr_t EapPeerShutdown;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ExtensibleAuthenticationProtocol
{
    struct EAP_AUTHENTICATOR_METHOD_ROUTINES
    {
        uint32_t dwSizeInBytes;
        Windows::Win32::ExtensibleAuthenticationProtocol::EAP_METHOD_TYPE* pEapType;
        intptr_t EapMethodAuthenticatorInitialize;
        intptr_t EapMethodAuthenticatorBeginSession;
        intptr_t EapMethodAuthenticatorUpdateInnerMethodParams;
        intptr_t EapMethodAuthenticatorReceivePacket;
        intptr_t EapMethodAuthenticatorSendPacket;
        intptr_t EapMethodAuthenticatorGetAttributes;
        intptr_t EapMethodAuthenticatorSetAttributes;
        intptr_t EapMethodAuthenticatorGetResult;
        intptr_t EapMethodAuthenticatorEndSession;
        intptr_t EapMethodAuthenticatorShutdown;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsInformationProtection
{
    struct HTHREAD_NETWORK_CONTEXT
    {
        uint32_t ThreadId;
        Windows::Win32::SystemServices::HANDLE ThreadContext;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsInformationProtection
{
    struct FILE_UNPROTECT_OPTIONS
    {
        bool audit;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::EnhancedStorage
{
    struct ENHANCED_STORAGE_PASSWORD_SILO_INFORMATION
    {
        uint8_t CurrentAdminFailures;
        uint8_t CurrentUserFailures;
        uint32_t TotalUserAuthenticationCount;
        uint32_t TotalAdminAuthenticationCount;
        Windows::Win32::SystemServices::BOOL FipsCompliant;
        Windows::Win32::SystemServices::BOOL SecurityIDAvailable;
        Windows::Win32::SystemServices::BOOL InitializeInProgress;
        Windows::Win32::SystemServices::BOOL ITMSArmed;
        Windows::Win32::SystemServices::BOOL ITMSArmable;
        Windows::Win32::SystemServices::BOOL UserCreated;
        Windows::Win32::SystemServices::BOOL ResetOnPORDefault;
        Windows::Win32::SystemServices::BOOL ResetOnPORCurrent;
        uint8_t MaxAdminFailures;
        uint8_t MaxUserFailures;
        uint32_t TimeToCompleteInitialization;
        uint32_t TimeRemainingToCompleteInitialization;
        uint32_t MinTimeToAuthenticate;
        uint8_t MaxAdminPasswordSize;
        uint8_t MinAdminPasswordSize;
        uint8_t MaxAdminHintSize;
        uint8_t MaxUserPasswordSize;
        uint8_t MinUserPasswordSize;
        uint8_t MaxUserHintSize;
        uint8_t MaxUserNameSize;
        uint8_t MaxSiloNameSize;
        uint16_t MaxChallengeSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::EnhancedStorage
{
    struct ACT_AUTHORIZATION_STATE
    {
        uint32_t ulState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::EnhancedStorage
{
    struct SILO_INFO
    {
        uint32_t ulSTID;
        uint8_t SpecificationMajor;
        uint8_t SpecificationMinor;
        uint8_t ImplementationMajor;
        uint8_t ImplementationMinor;
        uint8_t type;
        uint8_t capabilities;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct WNODE_HEADER
    {
        union _Anonymous1_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t Version;
                uint32_t Linkage;
            };
            uint64_t HistoricalContext;
            _Anonymous_e__Struct Anonymous;
        };
        union _Anonymous2_e__Union
        {
            uint32_t CountLost;
            Windows::Win32::SystemServices::HANDLE KernelHandle;
            Windows::Win32::SystemServices::LARGE_INTEGER TimeStamp;
        };
        uint32_t BufferSize;
        uint32_t ProviderId;
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
        ::win32::guid Guid;
        uint32_t ClientContext;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct OFFSETINSTANCEDATAANDLENGTH
    {
        uint32_t OffsetInstanceData;
        uint32_t LengthInstanceData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct WNODE_ALL_DATA
    {
        union _Anonymous_e__Union
        {
            uint32_t FixedInstanceSize;
            Windows::Win32::Etw::OFFSETINSTANCEDATAANDLENGTH OffsetInstanceDataAndLength;
        };
        Windows::Win32::Etw::WNODE_HEADER WnodeHeader;
        uint32_t DataBlockOffset;
        uint32_t InstanceCount;
        uint32_t OffsetInstanceNameOffsets;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct WNODE_SINGLE_INSTANCE
    {
        Windows::Win32::Etw::WNODE_HEADER WnodeHeader;
        uint32_t OffsetInstanceName;
        uint32_t InstanceIndex;
        uint32_t DataBlockOffset;
        uint32_t SizeDataBlock;
        uint8_t VariableData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct WNODE_SINGLE_ITEM
    {
        Windows::Win32::Etw::WNODE_HEADER WnodeHeader;
        uint32_t OffsetInstanceName;
        uint32_t InstanceIndex;
        uint32_t ItemId;
        uint32_t DataBlockOffset;
        uint32_t SizeDataItem;
        uint8_t VariableData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct WNODE_METHOD_ITEM
    {
        Windows::Win32::Etw::WNODE_HEADER WnodeHeader;
        uint32_t OffsetInstanceName;
        uint32_t InstanceIndex;
        uint32_t MethodId;
        uint32_t DataBlockOffset;
        uint32_t SizeDataBlock;
        uint8_t VariableData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct WNODE_EVENT_ITEM
    {
        Windows::Win32::Etw::WNODE_HEADER WnodeHeader;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct WNODE_EVENT_REFERENCE
    {
        union _Anonymous_e__Union
        {
            uint32_t TargetInstanceIndex;
            uint16_t TargetInstanceName;
        };
        Windows::Win32::Etw::WNODE_HEADER WnodeHeader;
        ::win32::guid TargetGuid;
        uint32_t TargetDataBlockSize;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct WNODE_TOO_SMALL
    {
        Windows::Win32::Etw::WNODE_HEADER WnodeHeader;
        uint32_t SizeNeeded;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct WMIREGGUIDW
    {
        union _Anonymous_e__Union
        {
            uint32_t InstanceNameList;
            uint32_t BaseNameOffset;
            size_t Pdo;
            size_t InstanceInfo;
        };
        ::win32::guid Guid;
        uint32_t Flags;
        uint32_t InstanceCount;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct WMIREGINFOW
    {
        uint32_t BufferSize;
        uint32_t NextWmiRegInfo;
        uint32_t RegistryPath;
        uint32_t MofResourceName;
        uint32_t GuidCount;
        Windows::Win32::Etw::WMIREGGUIDW WmiRegGuid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct EVENT_TRACE_HEADER
    {
        union _Anonymous1_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint8_t HeaderType;
                uint8_t MarkerFlags;
            };
            uint16_t FieldTypeFlags;
            _Anonymous_e__Struct Anonymous;
        };
        union _Anonymous2_e__Union
        {
            struct _Class_e__Struct
            {
                uint8_t Type;
                uint8_t Level;
                uint16_t Version;
            };
            uint32_t Version;
            _Class_e__Struct Class;
        };
        union _Anonymous3_e__Union
        {
            ::win32::guid Guid;
            uint64_t GuidPtr;
        };
        union _Anonymous4_e__Union
        {
            struct _Anonymous1_e__Struct
            {
                uint32_t KernelTime;
                uint32_t UserTime;
            };
            struct _Anonymous2_e__Struct
            {
                uint32_t ClientContext;
                uint32_t Flags;
            };
            _Anonymous1_e__Struct Anonymous1;
            uint64_t ProcessorTime;
            _Anonymous2_e__Struct Anonymous2;
        };
        uint16_t Size;
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
        uint32_t ThreadId;
        uint32_t ProcessId;
        Windows::Win32::SystemServices::LARGE_INTEGER TimeStamp;
        _Anonymous3_e__Union Anonymous3;
        _Anonymous4_e__Union Anonymous4;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct EVENT_INSTANCE_HEADER
    {
        union _Anonymous1_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint8_t HeaderType;
                uint8_t MarkerFlags;
            };
            uint16_t FieldTypeFlags;
            _Anonymous_e__Struct Anonymous;
        };
        union _Anonymous2_e__Union
        {
            struct _Class_e__Struct
            {
                uint8_t Type;
                uint8_t Level;
                uint16_t Version;
            };
            uint32_t Version;
            _Class_e__Struct Class;
        };
        union _Anonymous3_e__Union
        {
            struct _Anonymous1_e__Struct
            {
                uint32_t KernelTime;
                uint32_t UserTime;
            };
            struct _Anonymous2_e__Struct
            {
                uint32_t EventId;
                uint32_t Flags;
            };
            _Anonymous1_e__Struct Anonymous1;
            uint64_t ProcessorTime;
            _Anonymous2_e__Struct Anonymous2;
        };
        uint16_t Size;
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
        uint32_t ThreadId;
        uint32_t ProcessId;
        Windows::Win32::SystemServices::LARGE_INTEGER TimeStamp;
        uint64_t RegHandle;
        uint32_t InstanceId;
        uint32_t ParentInstanceId;
        _Anonymous3_e__Union Anonymous3;
        uint64_t ParentRegHandle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct MOF_FIELD
    {
        uint64_t DataPtr;
        uint32_t Length;
        uint32_t DataType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct TIME_ZONE_INFORMATION
    {
        int32_t Bias;
        uint16_t StandardName[32];
        Windows::Win32::WindowsProgramming::SYSTEMTIME StandardDate;
        int32_t StandardBias;
        uint16_t DaylightName[32];
        Windows::Win32::WindowsProgramming::SYSTEMTIME DaylightDate;
        int32_t DaylightBias;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct TRACE_LOGFILE_HEADER
    {
        union _Anonymous1_e__Union
        {
            struct _VersionDetail_e__Struct
            {
                uint8_t MajorVersion;
                uint8_t MinorVersion;
                uint8_t SubVersion;
                uint8_t SubMinorVersion;
            };
            uint32_t Version;
            _VersionDetail_e__Struct VersionDetail;
        };
        union _Anonymous2_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t StartBuffers;
                uint32_t PointerSize;
                uint32_t EventsLost;
                uint32_t CpuSpeedInMHz;
            };
            ::win32::guid LogInstanceGuid;
            _Anonymous_e__Struct Anonymous;
        };
        uint32_t BufferSize;
        _Anonymous1_e__Union Anonymous1;
        uint32_t ProviderVersion;
        uint32_t NumberOfProcessors;
        Windows::Win32::SystemServices::LARGE_INTEGER EndTime;
        uint32_t TimerResolution;
        uint32_t MaximumFileSize;
        uint32_t LogFileMode;
        uint32_t BuffersWritten;
        _Anonymous2_e__Union Anonymous2;
        uint16_t* LoggerName;
        uint16_t* LogFileName;
        Windows::Win32::WindowsProgramming::TIME_ZONE_INFORMATION TimeZone;
        Windows::Win32::SystemServices::LARGE_INTEGER BootTime;
        Windows::Win32::SystemServices::LARGE_INTEGER PerfFreq;
        Windows::Win32::SystemServices::LARGE_INTEGER StartTime;
        uint32_t ReservedFlags;
        uint32_t BuffersLost;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct TRACE_LOGFILE_HEADER32
    {
        union _Anonymous1_e__Union
        {
            struct _VersionDetail_e__Struct
            {
                uint8_t MajorVersion;
                uint8_t MinorVersion;
                uint8_t SubVersion;
                uint8_t SubMinorVersion;
            };
            uint32_t Version;
            _VersionDetail_e__Struct VersionDetail;
        };
        union _Anonymous2_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t StartBuffers;
                uint32_t PointerSize;
                uint32_t EventsLost;
                uint32_t CpuSpeedInMHz;
            };
            ::win32::guid LogInstanceGuid;
            _Anonymous_e__Struct Anonymous;
        };
        uint32_t BufferSize;
        _Anonymous1_e__Union Anonymous1;
        uint32_t ProviderVersion;
        uint32_t NumberOfProcessors;
        Windows::Win32::SystemServices::LARGE_INTEGER EndTime;
        uint32_t TimerResolution;
        uint32_t MaximumFileSize;
        uint32_t LogFileMode;
        uint32_t BuffersWritten;
        _Anonymous2_e__Union Anonymous2;
        uint32_t LoggerName;
        uint32_t LogFileName;
        Windows::Win32::WindowsProgramming::TIME_ZONE_INFORMATION TimeZone;
        Windows::Win32::SystemServices::LARGE_INTEGER BootTime;
        Windows::Win32::SystemServices::LARGE_INTEGER PerfFreq;
        Windows::Win32::SystemServices::LARGE_INTEGER StartTime;
        uint32_t ReservedFlags;
        uint32_t BuffersLost;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct TRACE_LOGFILE_HEADER64
    {
        union _Anonymous1_e__Union
        {
            struct _VersionDetail_e__Struct
            {
                uint8_t MajorVersion;
                uint8_t MinorVersion;
                uint8_t SubVersion;
                uint8_t SubMinorVersion;
            };
            uint32_t Version;
            _VersionDetail_e__Struct VersionDetail;
        };
        union _Anonymous2_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t StartBuffers;
                uint32_t PointerSize;
                uint32_t EventsLost;
                uint32_t CpuSpeedInMHz;
            };
            ::win32::guid LogInstanceGuid;
            _Anonymous_e__Struct Anonymous;
        };
        uint32_t BufferSize;
        _Anonymous1_e__Union Anonymous1;
        uint32_t ProviderVersion;
        uint32_t NumberOfProcessors;
        Windows::Win32::SystemServices::LARGE_INTEGER EndTime;
        uint32_t TimerResolution;
        uint32_t MaximumFileSize;
        uint32_t LogFileMode;
        uint32_t BuffersWritten;
        _Anonymous2_e__Union Anonymous2;
        uint64_t LoggerName;
        uint64_t LogFileName;
        Windows::Win32::WindowsProgramming::TIME_ZONE_INFORMATION TimeZone;
        Windows::Win32::SystemServices::LARGE_INTEGER BootTime;
        Windows::Win32::SystemServices::LARGE_INTEGER PerfFreq;
        Windows::Win32::SystemServices::LARGE_INTEGER StartTime;
        uint32_t ReservedFlags;
        uint32_t BuffersLost;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct EVENT_INSTANCE_INFO
    {
        Windows::Win32::SystemServices::HANDLE RegHandle;
        uint32_t InstanceId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct EVENT_TRACE_PROPERTIES
    {
        union _Anonymous_e__Union
        {
            int32_t AgeLimit;
            int32_t FlushThreshold;
        };
        Windows::Win32::Etw::WNODE_HEADER Wnode;
        uint32_t BufferSize;
        uint32_t MinimumBuffers;
        uint32_t MaximumBuffers;
        uint32_t MaximumFileSize;
        uint32_t LogFileMode;
        uint32_t FlushTimer;
        uint32_t EnableFlags;
        _Anonymous_e__Union Anonymous;
        uint32_t NumberOfBuffers;
        uint32_t FreeBuffers;
        uint32_t EventsLost;
        uint32_t BuffersWritten;
        uint32_t LogBuffersLost;
        uint32_t RealTimeBuffersLost;
        Windows::Win32::SystemServices::HANDLE LoggerThreadId;
        uint32_t LogFileNameOffset;
        uint32_t LoggerNameOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct EVENT_TRACE_PROPERTIES_V2
    {
        union _Anonymous1_e__Union
        {
            int32_t AgeLimit;
            int32_t FlushThreshold;
        };
        union _Anonymous2_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t _bitfield;
            };
            _Anonymous_e__Struct Anonymous;
            uint32_t V2Control;
        };
        union _Anonymous3_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t _bitfield;
            };
            _Anonymous_e__Struct Anonymous;
            uint64_t V2Options;
        };
        Windows::Win32::Etw::WNODE_HEADER Wnode;
        uint32_t BufferSize;
        uint32_t MinimumBuffers;
        uint32_t MaximumBuffers;
        uint32_t MaximumFileSize;
        uint32_t LogFileMode;
        uint32_t FlushTimer;
        uint32_t EnableFlags;
        _Anonymous1_e__Union Anonymous1;
        uint32_t NumberOfBuffers;
        uint32_t FreeBuffers;
        uint32_t EventsLost;
        uint32_t BuffersWritten;
        uint32_t LogBuffersLost;
        uint32_t RealTimeBuffersLost;
        Windows::Win32::SystemServices::HANDLE LoggerThreadId;
        uint32_t LogFileNameOffset;
        uint32_t LoggerNameOffset;
        _Anonymous2_e__Union Anonymous2;
        uint32_t FilterDescCount;
        Windows::Win32::Etw::EVENT_FILTER_DESCRIPTOR* FilterDesc;
        _Anonymous3_e__Union Anonymous3;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct TRACE_GUID_REGISTRATION
    {
        ::win32::guid* Guid;
        Windows::Win32::SystemServices::HANDLE RegHandle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct TRACE_GUID_PROPERTIES
    {
        ::win32::guid Guid;
        uint32_t GuidType;
        uint32_t LoggerId;
        uint32_t EnableLevel;
        uint32_t EnableFlags;
        uint8_t IsEnable;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct ETW_BUFFER_CONTEXT
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint8_t ProcessorNumber;
                uint8_t Alignment;
            };
            _Anonymous_e__Struct Anonymous;
            uint16_t ProcessorIndex;
        };
        _Anonymous_e__Union Anonymous;
        uint16_t LoggerId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct TRACE_ENABLE_INFO
    {
        uint32_t IsEnabled;
        uint8_t Level;
        uint8_t Reserved1;
        uint16_t LoggerId;
        uint32_t EnableProperty;
        uint32_t Reserved2;
        uint64_t MatchAnyKeyword;
        uint64_t MatchAllKeyword;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct TRACE_PROVIDER_INSTANCE_INFO
    {
        uint32_t NextOffset;
        uint32_t EnableCount;
        uint32_t Pid;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct TRACE_GUID_INFO
    {
        uint32_t InstanceCount;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct PROFILE_SOURCE_INFO
    {
        uint32_t NextEntryOffset;
        uint32_t Source;
        uint32_t MinInterval;
        uint32_t MaxInterval;
        uint64_t Reserved;
        uint16_t Description[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct EVENT_TRACE
    {
        union _Anonymous_e__Union
        {
            uint32_t ClientContext;
            Windows::Win32::Etw::ETW_BUFFER_CONTEXT BufferContext;
        };
        Windows::Win32::Etw::EVENT_TRACE_HEADER Header;
        uint32_t InstanceId;
        uint32_t ParentInstanceId;
        ::win32::guid ParentGuid;
        void* MofData;
        uint32_t MofLength;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct EVENT_TRACE_LOGFILEW
    {
        union _Anonymous1_e__Union
        {
            uint32_t LogFileMode;
            uint32_t ProcessTraceMode;
        };
        union _Anonymous2_e__Union
        {
            Windows::Win32::Etw::PEVENT_CALLBACK* EventCallback;
            Windows::Win32::Etw::PEVENT_RECORD_CALLBACK* EventRecordCallback;
        };
        uint16_t* LogFileName;
        uint16_t* LoggerName;
        int64_t CurrentTime;
        uint32_t BuffersRead;
        _Anonymous1_e__Union Anonymous1;
        Windows::Win32::Etw::EVENT_TRACE CurrentEvent;
        Windows::Win32::Etw::TRACE_LOGFILE_HEADER LogfileHeader;
        Windows::Win32::Etw::PEVENT_TRACE_BUFFER_CALLBACKW* BufferCallback;
        uint32_t BufferSize;
        uint32_t Filled;
        uint32_t EventsLost;
        _Anonymous2_e__Union Anonymous2;
        uint32_t IsKernelTrace;
        void* Context;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct EVENT_TRACE_LOGFILEA
    {
        union _Anonymous1_e__Union
        {
            uint32_t LogFileMode;
            uint32_t ProcessTraceMode;
        };
        union _Anonymous2_e__Union
        {
            Windows::Win32::Etw::PEVENT_CALLBACK* EventCallback;
            Windows::Win32::Etw::PEVENT_RECORD_CALLBACK* EventRecordCallback;
        };
        int8_t* LogFileName;
        int8_t* LoggerName;
        int64_t CurrentTime;
        uint32_t BuffersRead;
        _Anonymous1_e__Union Anonymous1;
        Windows::Win32::Etw::EVENT_TRACE CurrentEvent;
        Windows::Win32::Etw::TRACE_LOGFILE_HEADER LogfileHeader;
        Windows::Win32::Etw::PEVENT_TRACE_BUFFER_CALLBACKA* BufferCallback;
        uint32_t BufferSize;
        uint32_t Filled;
        uint32_t EventsLost;
        _Anonymous2_e__Union Anonymous2;
        uint32_t IsKernelTrace;
        void* Context;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct ENABLE_TRACE_PARAMETERS_V1
    {
        uint32_t Version;
        uint32_t EnableProperty;
        uint32_t ControlFlags;
        ::win32::guid SourceId;
        Windows::Win32::Etw::EVENT_FILTER_DESCRIPTOR* EnableFilterDesc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct ENABLE_TRACE_PARAMETERS
    {
        uint32_t Version;
        uint32_t EnableProperty;
        uint32_t ControlFlags;
        ::win32::guid SourceId;
        Windows::Win32::Etw::EVENT_FILTER_DESCRIPTOR* EnableFilterDesc;
        uint32_t FilterDescCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct CLASSIC_EVENT_ID
    {
        ::win32::guid EventGuid;
        uint8_t Type;
        uint8_t Reserved[7];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct TRACE_PROFILE_INTERVAL
    {
        uint32_t Source;
        uint32_t Interval;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct TRACE_VERSION_INFO
    {
        uint32_t EtwTraceProcessingVersion;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct TRACE_PERIODIC_CAPTURE_STATE_INFO
    {
        uint32_t CaptureStateFrequencyInSeconds;
        uint16_t ProviderCount;
        uint16_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct ETW_TRACE_PARTITION_INFORMATION
    {
        ::win32::guid PartitionId;
        ::win32::guid ParentId;
        int64_t QpcOffsetFromRoot;
        uint32_t PartitionType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct ETW_TRACE_PARTITION_INFORMATION_V2
    {
        int64_t QpcOffsetFromRoot;
        uint32_t PartitionType;
        uint16_t* PartitionId;
        uint16_t* ParentId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct EVENT_DATA_DESCRIPTOR
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint8_t Type;
                uint8_t Reserved1;
                uint16_t Reserved2;
            };
            uint32_t Reserved;
            _Anonymous_e__Struct Anonymous;
        };
        uint64_t Ptr;
        uint32_t Size;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct EVENT_DESCRIPTOR
    {
        uint16_t Id;
        uint8_t Version;
        uint8_t Channel;
        uint8_t Level;
        uint8_t Opcode;
        uint16_t Task;
        uint64_t Keyword;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct EVENT_FILTER_DESCRIPTOR
    {
        uint64_t Ptr;
        uint32_t Size;
        uint32_t Type;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct EVENT_FILTER_HEADER
    {
        uint16_t Id;
        uint8_t Version;
        uint8_t Reserved[5];
        uint64_t InstanceId;
        uint32_t Size;
        uint32_t NextOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct EVENT_FILTER_EVENT_ID
    {
        uint8_t FilterIn;
        uint8_t Reserved;
        uint16_t Count;
        uint16_t Events[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct EVENT_FILTER_EVENT_NAME
    {
        uint64_t MatchAnyKeyword;
        uint64_t MatchAllKeyword;
        uint8_t Level;
        uint8_t FilterIn;
        uint16_t NameCount;
        uint8_t Names[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct EVENT_FILTER_LEVEL_KW
    {
        uint64_t MatchAnyKeyword;
        uint64_t MatchAllKeyword;
        uint8_t Level;
        uint8_t FilterIn;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct EVENT_HEADER_EXTENDED_DATA_ITEM
    {
        struct _Anonymous_e__Struct
        {
            uint16_t _bitfield;
        };
        uint16_t Reserved1;
        uint16_t ExtType;
        _Anonymous_e__Struct Anonymous;
        uint16_t DataSize;
        uint64_t DataPtr;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct EVENT_EXTENDED_ITEM_INSTANCE
    {
        uint32_t InstanceId;
        uint32_t ParentInstanceId;
        ::win32::guid ParentGuid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct EVENT_EXTENDED_ITEM_RELATED_ACTIVITYID
    {
        ::win32::guid RelatedActivityId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct EVENT_EXTENDED_ITEM_TS_ID
    {
        uint32_t SessionId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct EVENT_EXTENDED_ITEM_STACK_TRACE32
    {
        uint64_t MatchId;
        uint32_t Address[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct EVENT_EXTENDED_ITEM_STACK_TRACE64
    {
        uint64_t MatchId;
        uint64_t Address[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct EVENT_EXTENDED_ITEM_PEBS_INDEX
    {
        uint64_t PebsIndex;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct EVENT_EXTENDED_ITEM_PMC_COUNTERS
    {
        uint64_t Counter[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct EVENT_EXTENDED_ITEM_PROCESS_START_KEY
    {
        uint64_t ProcessStartKey;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct EVENT_EXTENDED_ITEM_EVENT_KEY
    {
        uint64_t Key;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct EVENT_HEADER
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t KernelTime;
                uint32_t UserTime;
            };
            _Anonymous_e__Struct Anonymous;
            uint64_t ProcessorTime;
        };
        uint16_t Size;
        uint16_t HeaderType;
        uint16_t Flags;
        uint16_t EventProperty;
        uint32_t ThreadId;
        uint32_t ProcessId;
        Windows::Win32::SystemServices::LARGE_INTEGER TimeStamp;
        ::win32::guid ProviderId;
        Windows::Win32::Etw::EVENT_DESCRIPTOR EventDescriptor;
        _Anonymous_e__Union Anonymous;
        ::win32::guid ActivityId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct EVENT_RECORD
    {
        Windows::Win32::Etw::EVENT_HEADER EventHeader;
        Windows::Win32::Etw::ETW_BUFFER_CONTEXT BufferContext;
        uint16_t ExtendedDataCount;
        uint16_t UserDataLength;
        Windows::Win32::Etw::EVENT_HEADER_EXTENDED_DATA_ITEM* ExtendedData;
        void* UserData;
        void* UserContext;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct EVENT_MAP_ENTRY
    {
        union _Anonymous_e__Union
        {
            uint32_t Value;
            uint32_t InputOffset;
        };
        uint32_t OutputOffset;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct EVENT_MAP_INFO
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::Etw::MAP_VALUETYPE MapEntryValueType;
            uint32_t FormatStringOffset;
        };
        uint32_t NameOffset;
        Windows::Win32::Etw::MAP_FLAGS Flag;
        uint32_t EntryCount;
        _Anonymous_e__Union Anonymous;
        Windows::Win32::Etw::EVENT_MAP_ENTRY MapEntryArray[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct EVENT_PROPERTY_INFO
    {
        union _Anonymous1_e__Union
        {
            struct _nonStructType
            {
                uint16_t InType;
                uint16_t OutType;
                uint32_t MapNameOffset;
            };
            struct _structType
            {
                uint16_t StructStartIndex;
                uint16_t NumOfStructMembers;
                uint32_t padding;
            };
            struct _customSchemaType
            {
                uint16_t InType;
                uint16_t OutType;
                uint32_t CustomSchemaOffset;
            };
            _nonStructType nonStructType;
            _structType structType;
            _customSchemaType customSchemaType;
        };
        union _Anonymous2_e__Union
        {
            uint16_t count;
            uint16_t countPropertyIndex;
        };
        union _Anonymous3_e__Union
        {
            uint16_t length;
            uint16_t lengthPropertyIndex;
        };
        union _Anonymous4_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t _bitfield;
            };
            uint32_t Reserved;
            _Anonymous_e__Struct Anonymous;
        };
        Windows::Win32::Etw::PROPERTY_FLAGS Flags;
        uint32_t NameOffset;
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
        _Anonymous3_e__Union Anonymous3;
        _Anonymous4_e__Union Anonymous4;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct TRACE_EVENT_INFO
    {
        union _Anonymous1_e__Union
        {
            uint32_t EventNameOffset;
            uint32_t ActivityIDNameOffset;
        };
        union _Anonymous2_e__Union
        {
            uint32_t EventAttributesOffset;
            uint32_t RelatedActivityIDNameOffset;
        };
        union _Anonymous3_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t _bitfield;
            };
            Windows::Win32::Etw::TEMPLATE_FLAGS Flags;
            _Anonymous_e__Struct Anonymous;
        };
        ::win32::guid ProviderGuid;
        ::win32::guid EventGuid;
        Windows::Win32::Etw::EVENT_DESCRIPTOR EventDescriptor;
        Windows::Win32::Etw::DECODING_SOURCE DecodingSource;
        uint32_t ProviderNameOffset;
        uint32_t LevelNameOffset;
        uint32_t ChannelNameOffset;
        uint32_t KeywordsNameOffset;
        uint32_t TaskNameOffset;
        uint32_t OpcodeNameOffset;
        uint32_t EventMessageOffset;
        uint32_t ProviderMessageOffset;
        uint32_t BinaryXMLOffset;
        uint32_t BinaryXMLSize;
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
        uint32_t PropertyCount;
        uint32_t TopLevelPropertyCount;
        _Anonymous3_e__Union Anonymous3;
        Windows::Win32::Etw::EVENT_PROPERTY_INFO EventPropertyInfoArray[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct PROPERTY_DATA_DESCRIPTOR
    {
        uint64_t PropertyName;
        uint32_t ArrayIndex;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct PAYLOAD_FILTER_PREDICATE
    {
        uint16_t* FieldName;
        uint16_t CompareOp;
        uint16_t* Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct PROVIDER_FILTER_INFO
    {
        uint8_t Id;
        uint8_t Version;
        uint32_t MessageOffset;
        uint32_t Reserved;
        uint32_t PropertyCount;
        Windows::Win32::Etw::EVENT_PROPERTY_INFO EventPropertyInfoArray[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct PROVIDER_FIELD_INFO
    {
        uint32_t NameOffset;
        uint32_t DescriptionOffset;
        uint64_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct PROVIDER_FIELD_INFOARRAY
    {
        uint32_t NumberOfElements;
        Windows::Win32::Etw::EVENT_FIELD_TYPE FieldType;
        Windows::Win32::Etw::PROVIDER_FIELD_INFO FieldInfoArray[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct TRACE_PROVIDER_INFO
    {
        ::win32::guid ProviderGuid;
        uint32_t SchemaSource;
        uint32_t ProviderNameOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct PROVIDER_ENUMERATION_INFO
    {
        uint32_t NumberOfProviders;
        uint32_t Reserved;
        Windows::Win32::Etw::TRACE_PROVIDER_INFO TraceProviderInfoArray[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct PROVIDER_EVENT_INFO
    {
        uint32_t NumberOfEvents;
        uint32_t Reserved;
        Windows::Win32::Etw::EVENT_DESCRIPTOR EventDescriptorsArray[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Etw
{
    struct TDH_CONTEXT
    {
        uint64_t ParameterValue;
        Windows::Win32::Etw::TDH_CONTEXT_TYPE ParameterType;
        uint32_t ParameterSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct MCI_GENERIC_PARMS
    {
        size_t dwCallback;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct MCI_OPEN_PARMSA
    {
        size_t dwCallback;
        uint32_t wDeviceID;
        int8_t* lpstrDeviceType;
        int8_t* lpstrElementName;
        int8_t* lpstrAlias;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct MCI_OPEN_PARMSW
    {
        size_t dwCallback;
        uint32_t wDeviceID;
        uint16_t* lpstrDeviceType;
        uint16_t* lpstrElementName;
        uint16_t* lpstrAlias;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct MCI_PLAY_PARMS
    {
        size_t dwCallback;
        uint32_t dwFrom;
        uint32_t dwTo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct MCI_SEEK_PARMS
    {
        size_t dwCallback;
        uint32_t dwTo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct MCI_STATUS_PARMS
    {
        size_t dwCallback;
        size_t dwReturn;
        uint32_t dwItem;
        uint32_t dwTrack;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct MCI_INFO_PARMSA
    {
        size_t dwCallback;
        int8_t* lpstrReturn;
        uint32_t dwRetSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct MCI_INFO_PARMSW
    {
        size_t dwCallback;
        uint16_t* lpstrReturn;
        uint32_t dwRetSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct MCI_GETDEVCAPS_PARMS
    {
        size_t dwCallback;
        uint32_t dwReturn;
        uint32_t dwItem;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct MCI_SYSINFO_PARMSA
    {
        size_t dwCallback;
        int8_t* lpstrReturn;
        uint32_t dwRetSize;
        uint32_t dwNumber;
        uint32_t wDeviceType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct MCI_SYSINFO_PARMSW
    {
        size_t dwCallback;
        uint16_t* lpstrReturn;
        uint32_t dwRetSize;
        uint32_t dwNumber;
        uint32_t wDeviceType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct MCI_SET_PARMS
    {
        size_t dwCallback;
        uint32_t dwTimeFormat;
        uint32_t dwAudio;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct MCI_BREAK_PARMS
    {
        size_t dwCallback;
        int32_t nVirtKey;
        Windows::Win32::WindowsAndMessaging::HWND hwndBreak;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct MCI_SAVE_PARMSA
    {
        size_t dwCallback;
        int8_t* lpfilename;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct MCI_SAVE_PARMSW
    {
        size_t dwCallback;
        uint16_t* lpfilename;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct MCI_LOAD_PARMSA
    {
        size_t dwCallback;
        int8_t* lpfilename;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct MCI_LOAD_PARMSW
    {
        size_t dwCallback;
        uint16_t* lpfilename;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct MCI_RECORD_PARMS
    {
        size_t dwCallback;
        uint32_t dwFrom;
        uint32_t dwTo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct MCI_VD_PLAY_PARMS
    {
        size_t dwCallback;
        uint32_t dwFrom;
        uint32_t dwTo;
        uint32_t dwSpeed;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct MCI_VD_STEP_PARMS
    {
        size_t dwCallback;
        uint32_t dwFrames;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct MCI_VD_ESCAPE_PARMSA
    {
        size_t dwCallback;
        int8_t* lpstrCommand;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct MCI_VD_ESCAPE_PARMSW
    {
        size_t dwCallback;
        uint16_t* lpstrCommand;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct MCI_WAVE_OPEN_PARMSA
    {
        size_t dwCallback;
        uint32_t wDeviceID;
        int8_t* lpstrDeviceType;
        int8_t* lpstrElementName;
        int8_t* lpstrAlias;
        uint32_t dwBufferSeconds;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct MCI_WAVE_OPEN_PARMSW
    {
        size_t dwCallback;
        uint32_t wDeviceID;
        uint16_t* lpstrDeviceType;
        uint16_t* lpstrElementName;
        uint16_t* lpstrAlias;
        uint32_t dwBufferSeconds;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct MCI_WAVE_DELETE_PARMS
    {
        size_t dwCallback;
        uint32_t dwFrom;
        uint32_t dwTo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct MCI_WAVE_SET_PARMS
    {
        size_t dwCallback;
        uint32_t dwTimeFormat;
        uint32_t dwAudio;
        uint32_t wInput;
        uint32_t wOutput;
        uint16_t wFormatTag;
        uint16_t wReserved2;
        uint16_t nChannels;
        uint16_t wReserved3;
        uint32_t nSamplesPerSec;
        uint32_t nAvgBytesPerSec;
        uint16_t nBlockAlign;
        uint16_t wReserved4;
        uint16_t wBitsPerSample;
        uint16_t wReserved5;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct MCI_SEQ_SET_PARMS
    {
        size_t dwCallback;
        uint32_t dwTimeFormat;
        uint32_t dwAudio;
        uint32_t dwTempo;
        uint32_t dwPort;
        uint32_t dwSlave;
        uint32_t dwMaster;
        uint32_t dwOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct MCI_ANIM_OPEN_PARMSA
    {
        size_t dwCallback;
        uint32_t wDeviceID;
        int8_t* lpstrDeviceType;
        int8_t* lpstrElementName;
        int8_t* lpstrAlias;
        uint32_t dwStyle;
        Windows::Win32::WindowsAndMessaging::HWND hWndParent;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct MCI_ANIM_OPEN_PARMSW
    {
        size_t dwCallback;
        uint32_t wDeviceID;
        uint16_t* lpstrDeviceType;
        uint16_t* lpstrElementName;
        uint16_t* lpstrAlias;
        uint32_t dwStyle;
        Windows::Win32::WindowsAndMessaging::HWND hWndParent;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct MCI_ANIM_PLAY_PARMS
    {
        size_t dwCallback;
        uint32_t dwFrom;
        uint32_t dwTo;
        uint32_t dwSpeed;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct MCI_ANIM_STEP_PARMS
    {
        size_t dwCallback;
        uint32_t dwFrames;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct MCI_ANIM_WINDOW_PARMSA
    {
        size_t dwCallback;
        Windows::Win32::WindowsAndMessaging::HWND hWnd;
        uint32_t nCmdShow;
        int8_t* lpstrText;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct MCI_ANIM_WINDOW_PARMSW
    {
        size_t dwCallback;
        Windows::Win32::WindowsAndMessaging::HWND hWnd;
        uint32_t nCmdShow;
        uint16_t* lpstrText;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct MCI_ANIM_RECT_PARMS
    {
        size_t dwCallback;
        Windows::Win32::DisplayDevices::RECT rc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct MCI_ANIM_UPDATE_PARMS
    {
        size_t dwCallback;
        Windows::Win32::DisplayDevices::RECT rc;
        Windows::Win32::Gdi::HDC hDC;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct MCI_OVLY_OPEN_PARMSA
    {
        size_t dwCallback;
        uint32_t wDeviceID;
        int8_t* lpstrDeviceType;
        int8_t* lpstrElementName;
        int8_t* lpstrAlias;
        uint32_t dwStyle;
        Windows::Win32::WindowsAndMessaging::HWND hWndParent;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct MCI_OVLY_OPEN_PARMSW
    {
        size_t dwCallback;
        uint32_t wDeviceID;
        uint16_t* lpstrDeviceType;
        uint16_t* lpstrElementName;
        uint16_t* lpstrAlias;
        uint32_t dwStyle;
        Windows::Win32::WindowsAndMessaging::HWND hWndParent;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct MCI_OVLY_WINDOW_PARMSA
    {
        size_t dwCallback;
        Windows::Win32::WindowsAndMessaging::HWND hWnd;
        uint32_t nCmdShow;
        int8_t* lpstrText;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct MCI_OVLY_WINDOW_PARMSW
    {
        size_t dwCallback;
        Windows::Win32::WindowsAndMessaging::HWND hWnd;
        uint32_t nCmdShow;
        uint16_t* lpstrText;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct MCI_OVLY_RECT_PARMS
    {
        size_t dwCallback;
        Windows::Win32::DisplayDevices::RECT rc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct MCI_OVLY_SAVE_PARMSA
    {
        size_t dwCallback;
        int8_t* lpfilename;
        Windows::Win32::DisplayDevices::RECT rc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct MCI_OVLY_SAVE_PARMSW
    {
        size_t dwCallback;
        uint16_t* lpfilename;
        Windows::Win32::DisplayDevices::RECT rc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct MCI_OVLY_LOAD_PARMSA
    {
        size_t dwCallback;
        int8_t* lpfilename;
        Windows::Win32::DisplayDevices::RECT rc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct MCI_OVLY_LOAD_PARMSW
    {
        size_t dwCallback;
        uint16_t* lpfilename;
        Windows::Win32::DisplayDevices::RECT rc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPRIORITY
    {
        uint32_t PriorityClass;
        uint32_t PrioritySubClass;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSP_NODE
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        uint32_t NodeId;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSM_NODE
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Method;
        uint32_t NodeId;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSE_NODE
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Event;
        uint32_t NodeId;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSMULTIPLE_ITEM
    {
        uint32_t Size;
        uint32_t Count;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_DESCRIPTION
    {
        uint32_t AccessFlags;
        uint32_t DescriptionSize;
        Windows::Win32::CoreAudio::KSIDENTIFIER PropTypeSet;
        uint32_t MembersListCount;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_MEMBERSHEADER
    {
        uint32_t MembersFlags;
        uint32_t MembersSize;
        uint32_t MembersCount;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    union KSPROPERTY_BOUNDS_LONG
    {
        struct _Anonymous1_e__Struct
        {
            int32_t SignedMinimum;
            int32_t SignedMaximum;
        };
        struct _Anonymous2_e__Struct
        {
            uint32_t UnsignedMinimum;
            uint32_t UnsignedMaximum;
        };
        _Anonymous1_e__Struct Anonymous1;
        _Anonymous2_e__Struct Anonymous2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    union KSPROPERTY_BOUNDS_LONGLONG
    {
        struct _Anonymous1_e__Struct
        {
            int64_t SignedMinimum;
            int64_t SignedMaximum;
        };
        struct _Anonymous2_e__Struct
        {
            uint64_t UnsignedMinimum;
            uint64_t UnsignedMaximum;
        };
        _Anonymous1_e__Struct Anonymous1;
        _Anonymous2_e__Struct Anonymous2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_STEPPING_LONG
    {
        uint32_t SteppingDelta;
        uint32_t Reserved;
        Windows::Win32::CoreAudio::KSPROPERTY_BOUNDS_LONG Bounds;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_STEPPING_LONGLONG
    {
        uint64_t SteppingDelta;
        Windows::Win32::CoreAudio::KSPROPERTY_BOUNDS_LONGLONG Bounds;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSEVENTDATA
    {
        union _Anonymous_e__Union
        {
            struct _EventHandle_e__Struct
            {
                Windows::Win32::SystemServices::HANDLE Event;
                size_t Reserved[2];
            };
            struct _SemaphoreHandle_e__Struct
            {
                Windows::Win32::SystemServices::HANDLE Semaphore;
                uint32_t Reserved;
                int32_t Adjustment;
            };
            struct _Alignment_e__Struct
            {
                void* Unused;
                intptr_t Alignment[2];
            };
            _EventHandle_e__Struct EventHandle;
            _SemaphoreHandle_e__Struct SemaphoreHandle;
            _Alignment_e__Struct Alignment;
        };
        uint32_t NotificationType;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSQUERYBUFFER
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Event;
        Windows::Win32::CoreAudio::KSEVENTDATA* EventData;
        void* Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSRELATIVEEVENT
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::SystemServices::HANDLE ObjectHandle;
            void* ObjectPointer;
        };
        uint32_t Size;
        uint32_t Flags;
        _Anonymous_e__Union Anonymous;
        void* Reserved;
        Windows::Win32::CoreAudio::KSIDENTIFIER Event;
        Windows::Win32::CoreAudio::KSEVENTDATA EventData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSEVENT_TIME_MARK
    {
        Windows::Win32::CoreAudio::KSEVENTDATA EventData;
        int64_t MarkTime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSEVENT_TIME_INTERVAL
    {
        Windows::Win32::CoreAudio::KSEVENTDATA EventData;
        int64_t TimeBase;
        int64_t Interval;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSINTERVAL
    {
        int64_t TimeBase;
        int64_t Interval;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSCOMPONENTID
    {
        ::win32::guid Manufacturer;
        ::win32::guid Product;
        ::win32::guid Component;
        ::win32::guid Name;
        uint32_t Version;
        uint32_t Revision;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_POSITIONS
    {
        int64_t Current;
        int64_t Stop;
        Windows::Win32::CoreAudio::KS_SEEKING_FLAGS CurrentFlags;
        Windows::Win32::CoreAudio::KS_SEEKING_FLAGS StopFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_MEDIAAVAILABLE
    {
        int64_t Earliest;
        int64_t Latest;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSP_TIMEFORMAT
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        ::win32::guid SourceFormat;
        ::win32::guid TargetFormat;
        int64_t Time;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSTOPOLOGY
    {
        uint32_t CategoriesCount;
        ::win32::guid* Categories;
        uint32_t TopologyNodesCount;
        ::win32::guid* TopologyNodes;
        uint32_t TopologyConnectionsCount;
        Windows::Win32::DirectShow::KSTOPOLOGY_CONNECTION* TopologyConnections;
        ::win32::guid* TopologyNodesNames;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSNODE_CREATE
    {
        uint32_t CreateFlags;
        uint32_t Node;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSE_PIN
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Event;
        uint32_t PinId;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPIN_CINSTANCES
    {
        uint32_t PossibleCount;
        uint32_t CurrentCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    union KSDATAFORMAT
    {
        struct _Anonymous_e__Struct
        {
            uint32_t FormatSize;
            uint32_t Flags;
            uint32_t SampleSize;
            uint32_t Reserved;
            ::win32::guid MajorFormat;
            ::win32::guid SubFormat;
            ::win32::guid Specifier;
        };
        _Anonymous_e__Struct Anonymous;
        int64_t Alignment;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSATTRIBUTE
    {
        uint32_t Size;
        uint32_t Flags;
        ::win32::guid Attribute;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPIN_CONNECT
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Interface;
        Windows::Win32::CoreAudio::KSIDENTIFIER Medium;
        uint32_t PinId;
        Windows::Win32::SystemServices::HANDLE PinToHandle;
        Windows::Win32::CoreAudio::KSPRIORITY Priority;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPIN_PHYSICALCONNECTION
    {
        uint32_t Size;
        uint32_t Pin;
        uint16_t SymbolicLinkName[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSALLOCATOR_FRAMING
    {
        union _Anonymous1_e__Union
        {
            uint32_t OptionsFlags;
            uint32_t RequirementsFlags;
        };
        union _Anonymous2_e__Union
        {
            uint32_t FileAlignment;
            int32_t FramePitch;
        };
        _Anonymous1_e__Union Anonymous1;
        uint32_t PoolType;
        uint32_t Frames;
        uint32_t FrameSize;
        _Anonymous2_e__Union Anonymous2;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KS_FRAMING_ITEM
    {
        union _Anonymous_e__Union
        {
            uint32_t FileAlignment;
            int32_t FramePitch;
        };
        ::win32::guid MemoryType;
        ::win32::guid BusType;
        uint32_t MemoryFlags;
        uint32_t BusFlags;
        uint32_t Flags;
        uint32_t Frames;
        _Anonymous_e__Union Anonymous;
        uint32_t MemoryTypeWeight;
        Windows::Win32::CoreAudio::KS_FRAMING_RANGE PhysicalRange;
        Windows::Win32::CoreAudio::KS_FRAMING_RANGE_WEIGHTED FramingRange;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSALLOCATOR_FRAMING_EX
    {
        uint32_t CountItems;
        uint32_t PinFlags;
        Windows::Win32::CoreAudio::KS_COMPRESSION OutputCompression;
        uint32_t PinWeight;
        Windows::Win32::CoreAudio::KS_FRAMING_ITEM FramingItem[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSSTREAMALLOCATOR_STATUS
    {
        Windows::Win32::CoreAudio::KSALLOCATOR_FRAMING Framing;
        uint32_t AllocatedFrames;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSSTREAMALLOCATOR_STATUS_EX
    {
        Windows::Win32::CoreAudio::KSALLOCATOR_FRAMING_EX Framing;
        uint32_t AllocatedFrames;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSTIME
    {
        int64_t Time;
        uint32_t Numerator;
        uint32_t Denominator;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSSTREAM_HEADER
    {
        uint32_t Size;
        uint32_t TypeSpecificFlags;
        Windows::Win32::CoreAudio::KSTIME PresentationTime;
        int64_t Duration;
        uint32_t FrameExtent;
        uint32_t DataUsed;
        void* Data;
        uint32_t OptionsFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSSTREAM_METADATA_INFO
    {
        uint32_t BufferSize;
        uint32_t UsedSize;
        void* Data;
        void* SystemVa;
        uint32_t Flags;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSSTREAM_UVC_METADATATYPE_TIMESTAMP
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint16_t _bitfield;
            };
            _Anonymous_e__Struct Anonymous;
            uint16_t SCRToken;
        };
        uint32_t PresentationTimeStamp;
        uint32_t SourceClockReference;
        _Anonymous_e__Union Anonymous;
        uint16_t Reserved0;
        uint32_t Reserved1;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSSTREAM_UVC_METADATA
    {
        Windows::Win32::CoreAudio::KSSTREAM_UVC_METADATATYPE_TIMESTAMP StartOfFrameTimestamp;
        Windows::Win32::CoreAudio::KSSTREAM_UVC_METADATATYPE_TIMESTAMP EndOfFrameTimestamp;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPIN_MDL_CACHING_NOTIFICATION
    {
        Windows::Win32::CoreAudio::KSPIN_MDL_CACHING_EVENT Event;
        void* Buffer;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPIN_MDL_CACHING_NOTIFICATION32
    {
        Windows::Win32::CoreAudio::KSPIN_MDL_CACHING_EVENT Event;
        uint32_t Buffer;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSQUALITY_MANAGER
    {
        Windows::Win32::SystemServices::HANDLE QualityManager;
        void* Context;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSFRAMETIME
    {
        int64_t Duration;
        uint32_t FrameFlags;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSRATE
    {
        int64_t PresentationStart;
        int64_t Duration;
        Windows::Win32::CoreAudio::KSIDENTIFIER Interface;
        int32_t Rate;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSRATE_CAPABILITY
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        Windows::Win32::CoreAudio::KSRATE Rate;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSCLOCK_CREATE
    {
        uint32_t CreateFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSCORRELATED_TIME
    {
        int64_t Time;
        int64_t SystemTime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSRESOLUTION
    {
        int64_t Granularity;
        int64_t Error;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSQUALITY
    {
        void* Context;
        uint32_t Proportion;
        int64_t DeltaTime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSERROR
    {
        void* Context;
        uint32_t Status;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_SERIALHDR
    {
        ::win32::guid PropertySet;
        uint32_t Count;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_SERIAL
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER PropTypeSet;
        uint32_t Id;
        uint32_t PropertyLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    union MF_MDL_SHARED_PAYLOAD_KEY
    {
        struct _combined_e__Struct
        {
            uint32_t pHandle;
            uint32_t fHandle;
            uint64_t uPayload;
        };
        _combined_e__Struct combined;
        ::win32::guid GMDLHandle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSMULTIPLE_DATA_PROP
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        Windows::Win32::CoreAudio::KSMULTIPLE_ITEM MultipleItem;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSDATAFORMAT_WAVEFORMATEX
    {
        Windows::Win32::CoreAudio::KSDATAFORMAT DataFormat;
        Windows::Win32::Multimedia::WAVEFORMATEX WaveFormatEx;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct WAVEFORMATEXTENSIBLE
    {
        union _Samples_e__Union
        {
            uint16_t wValidBitsPerSample;
            uint16_t wSamplesPerBlock;
            uint16_t wReserved;
        };
        Windows::Win32::Multimedia::WAVEFORMATEX Format;
        _Samples_e__Union Samples;
        uint32_t dwChannelMask;
        ::win32::guid SubFormat;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct WAVEFORMATEXTENSIBLE_IEC61937
    {
        Windows::Win32::Multimedia::WAVEFORMATEXTENSIBLE FormatExt;
        uint32_t dwEncodedSamplesPerSec;
        uint32_t dwEncodedChannelCount;
        uint32_t dwAverageBytesPerSec;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSDATAFORMAT_WAVEFORMATEXTENSIBLE
    {
        Windows::Win32::CoreAudio::KSDATAFORMAT DataFormat;
        Windows::Win32::Multimedia::WAVEFORMATEXTENSIBLE WaveFormatExt;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSDSOUND_BUFFERDESC
    {
        uint32_t Flags;
        uint32_t Control;
        Windows::Win32::Multimedia::WAVEFORMATEX WaveFormatEx;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSDATAFORMAT_DSOUND
    {
        Windows::Win32::CoreAudio::KSDATAFORMAT DataFormat;
        Windows::Win32::CoreAudio::KSDSOUND_BUFFERDESC BufferDesc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSAUDIO_POSITION
    {
        uint64_t PlayOffset;
        uint64_t WriteOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSAUDIO_PRESENTATION_POSITION
    {
        uint64_t u64PositionInBlocks;
        uint64_t u64QPCPosition;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct _KSAUDIO_PACKETSIZE_SIGNALPROCESSINGMODE_CONSTRAINT
    {
        ::win32::guid ProcessingMode;
        uint32_t SamplesPerProcessingPacket;
        uint32_t ProcessingPacketDurationInHns;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSAUDIO_PACKETSIZE_CONSTRAINTS
    {
        uint32_t MinPacketPeriodInHns;
        uint32_t PacketSizeFileAlignment;
        uint32_t Reserved;
        uint32_t NumProcessingModeConstraints;
        Windows::Win32::CoreAudio::_KSAUDIO_PACKETSIZE_SIGNALPROCESSINGMODE_CONSTRAINT ProcessingModeConstraints[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSAUDIO_PACKETSIZE_CONSTRAINTS2
    {
        uint32_t MinPacketPeriodInHns;
        uint32_t PacketSizeFileAlignment;
        uint32_t MaxPacketSizeInBytes;
        uint32_t NumProcessingModeConstraints;
        Windows::Win32::CoreAudio::_KSAUDIO_PACKETSIZE_SIGNALPROCESSINGMODE_CONSTRAINT ProcessingModeConstraints[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSAUDIO_MICROPHONE_COORDINATES
    {
        uint16_t usType;
        int16_t wXCoord;
        int16_t wYCoord;
        int16_t wZCoord;
        int16_t wVerticalAngle;
        int16_t wHorizontalAngle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSAUDIO_MIC_ARRAY_GEOMETRY
    {
        uint16_t usVersion;
        uint16_t usMicArrayType;
        int16_t wVerticalAngleBegin;
        int16_t wVerticalAngleEnd;
        int16_t wHorizontalAngleBegin;
        int16_t wHorizontalAngleEnd;
        uint16_t usFrequencyBandLo;
        uint16_t usFrequencyBandHi;
        uint16_t usNumberOfMicrophones;
        Windows::Win32::CoreAudio::KSAUDIO_MICROPHONE_COORDINATES KsMicCoord[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct DS3DVECTOR
    {
        union _Anonymous1_e__Union
        {
            float x;
            float dvX;
        };
        union _Anonymous2_e__Union
        {
            float y;
            float dvY;
        };
        union _Anonymous3_e__Union
        {
            float z;
            float dvZ;
        };
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
        _Anonymous3_e__Union Anonymous3;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSDS3D_LISTENER_ALL
    {
        Windows::Win32::CoreAudio::DS3DVECTOR Position;
        Windows::Win32::CoreAudio::DS3DVECTOR Velocity;
        Windows::Win32::CoreAudio::DS3DVECTOR OrientFront;
        Windows::Win32::CoreAudio::DS3DVECTOR OrientTop;
        float DistanceFactor;
        float RolloffFactor;
        float DopplerFactor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSDS3D_LISTENER_ORIENTATION
    {
        Windows::Win32::CoreAudio::DS3DVECTOR Front;
        Windows::Win32::CoreAudio::DS3DVECTOR Top;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSDS3D_BUFFER_ALL
    {
        Windows::Win32::CoreAudio::DS3DVECTOR Position;
        Windows::Win32::CoreAudio::DS3DVECTOR Velocity;
        uint32_t InsideConeAngle;
        uint32_t OutsideConeAngle;
        Windows::Win32::CoreAudio::DS3DVECTOR ConeOrientation;
        int32_t ConeOutsideVolume;
        float MinDistance;
        float MaxDistance;
        uint32_t Mode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSDS3D_BUFFER_CONE_ANGLES
    {
        uint32_t InsideConeAngle;
        uint32_t OutsideConeAngle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSDS3D_HRTF_PARAMS_MSG
    {
        uint32_t Size;
        uint32_t Enabled;
        Windows::Win32::SystemServices::BOOL SwapChannels;
        Windows::Win32::SystemServices::BOOL ZeroAzimuth;
        Windows::Win32::SystemServices::BOOL CrossFadeOutput;
        uint32_t FilterSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSDS3D_HRTF_INIT_MSG
    {
        uint32_t Size;
        Windows::Win32::CoreAudio::KSDS3D_HRTF_FILTER_QUALITY Quality;
        float SampleRate;
        uint32_t MaxFilterSize;
        uint32_t FilterTransientMuteLength;
        uint32_t FilterOverlapBufferLength;
        uint32_t OutputOverlapBufferLength;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSDS3D_HRTF_FILTER_FORMAT_MSG
    {
        Windows::Win32::CoreAudio::KSDS3D_HRTF_FILTER_METHOD FilterMethod;
        Windows::Win32::CoreAudio::KSDS3D_HRTF_COEFF_FORMAT CoeffFormat;
        Windows::Win32::CoreAudio::KSDS3D_HRTF_FILTER_VERSION Version;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSDS3D_ITD_PARAMS
    {
        int32_t Channel;
        float VolSmoothScale;
        float TotalDryAttenuation;
        float TotalWetAttenuation;
        int32_t SmoothFrequency;
        int32_t Delay;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSDS3D_ITD_PARAMS_MSG
    {
        uint32_t Enabled;
        Windows::Win32::CoreAudio::KSDS3D_ITD_PARAMS LeftParams;
        Windows::Win32::CoreAudio::KSDS3D_ITD_PARAMS RightParams;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSDATARANGE_AUDIO
    {
        Windows::Win32::CoreAudio::KSDATAFORMAT DataRange;
        uint32_t MaximumChannels;
        uint32_t MinimumBitsPerSample;
        uint32_t MaximumBitsPerSample;
        uint32_t MinimumSampleFrequency;
        uint32_t MaximumSampleFrequency;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSRTAUDIO_BUFFER_PROPERTY
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        void* BaseAddress;
        uint32_t RequestedBufferSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSRTAUDIO_BUFFER_PROPERTY32
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        uint32_t BaseAddress;
        uint32_t RequestedBufferSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSRTAUDIO_BUFFER_PROPERTY_WITH_NOTIFICATION
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        void* BaseAddress;
        uint32_t RequestedBufferSize;
        uint32_t NotificationCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSRTAUDIO_BUFFER_PROPERTY_WITH_NOTIFICATION32
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        uint32_t BaseAddress;
        uint32_t RequestedBufferSize;
        uint32_t NotificationCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSRTAUDIO_BUFFER
    {
        void* BufferAddress;
        uint32_t ActualBufferSize;
        Windows::Win32::SystemServices::BOOL CallMemoryBarrier;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSRTAUDIO_BUFFER32
    {
        uint32_t BufferAddress;
        uint32_t ActualBufferSize;
        Windows::Win32::SystemServices::BOOL CallMemoryBarrier;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSRTAUDIO_HWLATENCY
    {
        uint32_t FifoSize;
        uint32_t ChipsetDelay;
        uint32_t CodecDelay;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSRTAUDIO_HWREGISTER_PROPERTY
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        void* BaseAddress;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSRTAUDIO_HWREGISTER_PROPERTY32
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        uint32_t BaseAddress;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSRTAUDIO_HWREGISTER
    {
        void* Register;
        uint32_t Width;
        uint64_t Numerator;
        uint64_t Denominator;
        uint32_t Accuracy;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSRTAUDIO_HWREGISTER32
    {
        uint32_t Register;
        uint32_t Width;
        uint64_t Numerator;
        uint64_t Denominator;
        uint32_t Accuracy;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSRTAUDIO_NOTIFICATION_EVENT_PROPERTY
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        Windows::Win32::SystemServices::HANDLE NotificationEvent;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSRTAUDIO_NOTIFICATION_EVENT_PROPERTY32
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        uint32_t NotificationEvent;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSRTAUDIO_GETREADPACKET_INFO
    {
        uint32_t PacketNumber;
        uint32_t Flags;
        uint64_t PerformanceCounterValue;
        Windows::Win32::SystemServices::BOOL MoreData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSRTAUDIO_SETWRITEPACKET_INFO
    {
        uint32_t PacketNumber;
        uint32_t Flags;
        uint32_t EosPacketLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSRTAUDIO_PACKETVREGISTER_PROPERTY
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        void* BaseAddress;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSRTAUDIO_PACKETVREGISTER
    {
        uint64_t* CompletedPacketCount;
        uint64_t* CompletedPacketQPC;
        uint64_t* CompletedPacketHash;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct INTERLEAVED_AUDIO_FORMAT_INFORMATION
    {
        uint32_t Size;
        uint32_t PrimaryChannelCount;
        uint32_t PrimaryChannelStartPosition;
        uint32_t PrimaryChannelMask;
        uint32_t InterleavedChannelCount;
        uint32_t InterleavedChannelStartPosition;
        uint32_t InterleavedChannelMask;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSSOUNDDETECTORPROPERTY
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        ::win32::guid EventId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct SOUNDDETECTOR_PATTERNHEADER
    {
        uint32_t Size;
        ::win32::guid PatternType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSAUDIO_COPY_PROTECTION
    {
        Windows::Win32::SystemServices::BOOL fCopyrighted;
        Windows::Win32::SystemServices::BOOL fOriginal;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSAUDIO_CHANNEL_CONFIG
    {
        int32_t ActiveSpeakerPositions;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSAUDIO_DYNAMIC_RANGE
    {
        uint32_t QuietCompression;
        uint32_t LoudCompression;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSAUDIO_MIXLEVEL
    {
        Windows::Win32::SystemServices::BOOL Mute;
        int32_t Level;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSAUDIO_MIX_CAPS
    {
        union _Anonymous_e__Union
        {
            int32_t Reset;
            int32_t Resolution;
        };
        Windows::Win32::SystemServices::BOOL Mute;
        int32_t Minimum;
        int32_t Maximum;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSAUDIO_MIXCAP_TABLE
    {
        uint32_t InputChannels;
        uint32_t OutputChannels;
        Windows::Win32::CoreAudio::KSAUDIO_MIX_CAPS Capabilities[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSAUDIO_POSITIONEX
    {
        Windows::Win32::SystemServices::LARGE_INTEGER TimerFrequency;
        Windows::Win32::SystemServices::LARGE_INTEGER TimeStamp1;
        Windows::Win32::CoreAudio::KSAUDIO_POSITION Position;
        Windows::Win32::SystemServices::LARGE_INTEGER TimeStamp2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSTELEPHONY_CALLCONTROL
    {
        Windows::Win32::CoreAudio::TELEPHONY_CALLTYPE CallType;
        Windows::Win32::CoreAudio::TELEPHONY_CALLCONTROLOP CallControlOp;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSTELEPHONY_PROVIDERCHANGE
    {
        Windows::Win32::CoreAudio::TELEPHONY_CALLTYPE CallType;
        Windows::Win32::CoreAudio::TELEPHONY_PROVIDERCHANGEOP ProviderChangeOp;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSTELEPHONY_CALLINFO
    {
        Windows::Win32::CoreAudio::TELEPHONY_CALLTYPE CallType;
        Windows::Win32::CoreAudio::TELEPHONY_CALLSTATE CallState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSTOPOLOGY_ENDPOINTID
    {
        uint16_t TopologyName[260];
        uint32_t PinId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSTOPOLOGY_ENDPOINTIDPAIR
    {
        Windows::Win32::CoreAudio::KSTOPOLOGY_ENDPOINTID RenderEndpoint;
        Windows::Win32::CoreAudio::KSTOPOLOGY_ENDPOINTID CaptureEndpoint;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSWAVETABLE_WAVE_DESC
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Identifier;
        uint32_t Size;
        Windows::Win32::SystemServices::BOOL Looped;
        uint32_t LoopPoint;
        Windows::Win32::SystemServices::BOOL InROM;
        Windows::Win32::CoreAudio::KSDATAFORMAT Format;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSWAVE_COMPATCAPS
    {
        uint32_t ulDeviceType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSWAVE_INPUT_CAPABILITIES
    {
        uint32_t MaximumChannelsPerConnection;
        uint32_t MinimumBitsPerSample;
        uint32_t MaximumBitsPerSample;
        uint32_t MinimumSampleFrequency;
        uint32_t MaximumSampleFrequency;
        uint32_t TotalConnections;
        uint32_t ActiveConnections;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSWAVE_OUTPUT_CAPABILITIES
    {
        uint32_t MaximumChannelsPerConnection;
        uint32_t MinimumBitsPerSample;
        uint32_t MaximumBitsPerSample;
        uint32_t MinimumSampleFrequency;
        uint32_t MaximumSampleFrequency;
        uint32_t TotalConnections;
        uint32_t StaticConnections;
        uint32_t StreamingConnections;
        uint32_t ActiveConnections;
        uint32_t ActiveStaticConnections;
        uint32_t ActiveStreamingConnections;
        uint32_t Total3DConnections;
        uint32_t Static3DConnections;
        uint32_t Streaming3DConnections;
        uint32_t Active3DConnections;
        uint32_t ActiveStatic3DConnections;
        uint32_t ActiveStreaming3DConnections;
        uint32_t TotalSampleMemory;
        uint32_t FreeSampleMemory;
        uint32_t LargestFreeContiguousSampleMemory;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSWAVE_VOLUME
    {
        int32_t LeftAttenuation;
        int32_t RightAttenuation;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSWAVE_BUFFER
    {
        uint32_t Attributes;
        uint32_t BufferSize;
        void* BufferAddress;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSDATARANGE_MUSIC
    {
        Windows::Win32::CoreAudio::KSDATAFORMAT DataRange;
        ::win32::guid Technology;
        uint32_t Channels;
        uint32_t Notes;
        uint32_t ChannelMask;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct LOOPEDSTREAMING_POSITION_EVENT_DATA
    {
        Windows::Win32::CoreAudio::KSEVENTDATA KsEventData;
        uint64_t Position;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSNODEPROPERTY
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        uint32_t NodeId;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSNODEPROPERTY_AUDIO_CHANNEL
    {
        Windows::Win32::CoreAudio::KSNODEPROPERTY NodeProperty;
        int32_t Channel;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSNODEPROPERTY_AUDIO_DEV_SPECIFIC
    {
        Windows::Win32::CoreAudio::KSNODEPROPERTY NodeProperty;
        uint32_t DevSpecificId;
        uint32_t DeviceInfo;
        uint32_t Length;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSNODEPROPERTY_AUDIO_3D_LISTENER
    {
        Windows::Win32::CoreAudio::KSNODEPROPERTY NodeProperty;
        void* ListenerId;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSNODEPROPERTY_AUDIO_PROPERTY
    {
        Windows::Win32::CoreAudio::KSNODEPROPERTY NodeProperty;
        void* AppContext;
        uint32_t Length;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSMUSICFORMAT
    {
        uint32_t TimeDeltaMs;
        uint32_t ByteCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSMPEGVID_RECT
    {
        uint32_t StartX;
        uint32_t StartY;
        uint32_t EndX;
        uint32_t EndY;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSAC3_ERROR_CONCEALMENT
    {
        Windows::Win32::SystemServices::BOOL fRepeatPreviousBlock;
        Windows::Win32::SystemServices::BOOL fErrorInCurrentBlock;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSAC3_ALTERNATE_AUDIO
    {
        Windows::Win32::SystemServices::BOOL fStereo;
        uint32_t DualMode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSAC3_DOWNMIX
    {
        Windows::Win32::SystemServices::BOOL fDownMix;
        Windows::Win32::SystemServices::BOOL fDolbySurround;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSAC3_BIT_STREAM_MODE
    {
        int32_t BitStreamMode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSAC3_DIALOGUE_LEVEL
    {
        uint32_t DialogueLevel;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSAC3_ROOM_TYPE
    {
        Windows::Win32::SystemServices::BOOL fLargeRoom;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KS_DVD_YCrCb
    {
        uint8_t Reserved;
        uint8_t Y;
        uint8_t Cr;
        uint8_t Cb;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KS_DVD_YUV
    {
        uint8_t Reserved;
        uint8_t Y;
        uint8_t V;
        uint8_t U;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_SPPAL
    {
        Windows::Win32::CoreAudio::KS_DVD_YUV sppal[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KS_COLCON
    {
        uint8_t _bitfield1;
        uint8_t _bitfield2;
        uint8_t _bitfield3;
        uint8_t _bitfield4;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_SPHLI
    {
        uint16_t HLISS;
        uint16_t Reserved;
        uint32_t StartPTM;
        uint32_t EndPTM;
        uint16_t StartX;
        uint16_t StartY;
        uint16_t StopX;
        uint16_t StopY;
        Windows::Win32::CoreAudio::KS_COLCON ColCon;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KS_DVDCOPY_CHLGKEY
    {
        uint8_t ChlgKey[10];
        uint8_t Reserved[2];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KS_DVDCOPY_BUSKEY
    {
        uint8_t BusKey[5];
        uint8_t Reserved[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KS_DVDCOPY_DISCKEY
    {
        uint8_t DiscKey[2048];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KS_DVDCOPY_REGION
    {
        uint8_t Reserved;
        uint8_t RegionData;
        uint8_t Reserved2[2];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KS_DVDCOPY_TITLEKEY
    {
        uint32_t KeyFlags;
        uint32_t ReservedNT[2];
        uint8_t TitleKey[6];
        uint8_t Reserved[2];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KS_COPY_MACROVISION
    {
        uint32_t MACROVISIONLevel;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KS_DVDCOPY_SET_COPY_STATE
    {
        uint32_t DVDCopyState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KS_RGBQUAD
    {
        uint8_t rgbBlue;
        uint8_t rgbGreen;
        uint8_t rgbRed;
        uint8_t rgbReserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KS_BITMAPINFOHEADER
    {
        uint32_t biSize;
        int32_t biWidth;
        int32_t biHeight;
        uint16_t biPlanes;
        uint16_t biBitCount;
        uint32_t biCompression;
        uint32_t biSizeImage;
        int32_t biXPelsPerMeter;
        int32_t biYPelsPerMeter;
        uint32_t biClrUsed;
        uint32_t biClrImportant;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct tag_KS_TRUECOLORINFO
    {
        uint32_t dwBitMasks[3];
        Windows::Win32::CoreAudio::KS_RGBQUAD bmiColors[256];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KS_VIDEOINFOHEADER
    {
        Windows::Win32::DisplayDevices::RECT rcSource;
        Windows::Win32::DisplayDevices::RECT rcTarget;
        uint32_t dwBitRate;
        uint32_t dwBitErrorRate;
        int64_t AvgTimePerFrame;
        Windows::Win32::CoreAudio::KS_BITMAPINFOHEADER bmiHeader;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KS_VIDEOINFO
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::CoreAudio::KS_RGBQUAD bmiColors[256];
            uint32_t dwBitMasks[3];
            Windows::Win32::CoreAudio::tag_KS_TRUECOLORINFO TrueColorInfo;
        };
        Windows::Win32::DisplayDevices::RECT rcSource;
        Windows::Win32::DisplayDevices::RECT rcTarget;
        uint32_t dwBitRate;
        uint32_t dwBitErrorRate;
        int64_t AvgTimePerFrame;
        Windows::Win32::CoreAudio::KS_BITMAPINFOHEADER bmiHeader;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KS_VBIINFOHEADER
    {
        uint32_t StartLine;
        uint32_t EndLine;
        uint32_t SamplingFrequency;
        uint32_t MinLineStartTime;
        uint32_t MaxLineStartTime;
        uint32_t ActualLineStartTime;
        uint32_t ActualLineEndTime;
        uint32_t VideoStandard;
        uint32_t SamplesPerLine;
        uint32_t StrideInBytes;
        uint32_t BufferSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct tagKS_AnalogVideoInfo
    {
        Windows::Win32::DisplayDevices::RECT rcSource;
        Windows::Win32::DisplayDevices::RECT rcTarget;
        uint32_t dwActiveWidth;
        uint32_t dwActiveHeight;
        int64_t AvgTimePerFrame;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KS_TVTUNER_CHANGE_INFO
    {
        uint32_t dwFlags;
        uint32_t dwCountryCode;
        uint32_t dwAnalogVideoStandard;
        uint32_t dwChannel;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KS_VIDEOINFOHEADER2
    {
        union _Anonymous_e__Union
        {
            uint32_t dwControlFlags;
            uint32_t dwReserved1;
        };
        Windows::Win32::DisplayDevices::RECT rcSource;
        Windows::Win32::DisplayDevices::RECT rcTarget;
        uint32_t dwBitRate;
        uint32_t dwBitErrorRate;
        int64_t AvgTimePerFrame;
        uint32_t dwInterlaceFlags;
        uint32_t dwCopyProtectFlags;
        uint32_t dwPictAspectRatioX;
        uint32_t dwPictAspectRatioY;
        _Anonymous_e__Union Anonymous;
        uint32_t dwReserved2;
        Windows::Win32::CoreAudio::KS_BITMAPINFOHEADER bmiHeader;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KS_MPEG1VIDEOINFO
    {
        Windows::Win32::CoreAudio::KS_VIDEOINFOHEADER hdr;
        uint32_t dwStartTimeCode;
        uint32_t cbSequenceHeader;
        uint8_t bSequenceHeader[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KS_MPEGVIDEOINFO2
    {
        Windows::Win32::CoreAudio::KS_VIDEOINFOHEADER2 hdr;
        uint32_t dwStartTimeCode;
        uint32_t cbSequenceHeader;
        uint32_t dwProfile;
        uint32_t dwLevel;
        uint32_t dwFlags;
        uint32_t bSequenceHeader[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KS_H264VIDEOINFO
    {
        uint16_t wWidth;
        uint16_t wHeight;
        uint16_t wSARwidth;
        uint16_t wSARheight;
        uint16_t wProfile;
        uint8_t bLevelIDC;
        uint16_t wConstrainedToolset;
        uint32_t bmSupportedUsages;
        uint16_t bmCapabilities;
        uint32_t bmSVCCapabilities;
        uint32_t bmMVCCapabilities;
        uint32_t dwFrameInterval;
        uint8_t bMaxCodecConfigDelay;
        uint8_t bmSupportedSliceModes;
        uint8_t bmSupportedSyncFrameTypes;
        uint8_t bResolutionScaling;
        uint8_t bSimulcastSupport;
        uint8_t bmSupportedRateControlModes;
        uint16_t wMaxMBperSecOneResolutionNoScalability;
        uint16_t wMaxMBperSecTwoResolutionsNoScalability;
        uint16_t wMaxMBperSecThreeResolutionsNoScalability;
        uint16_t wMaxMBperSecFourResolutionsNoScalability;
        uint16_t wMaxMBperSecOneResolutionTemporalScalability;
        uint16_t wMaxMBperSecTwoResolutionsTemporalScalablility;
        uint16_t wMaxMBperSecThreeResolutionsTemporalScalability;
        uint16_t wMaxMBperSecFourResolutionsTemporalScalability;
        uint16_t wMaxMBperSecOneResolutionTemporalQualityScalability;
        uint16_t wMaxMBperSecTwoResolutionsTemporalQualityScalability;
        uint16_t wMaxMBperSecThreeResolutionsTemporalQualityScalablity;
        uint16_t wMaxMBperSecFourResolutionsTemporalQualityScalability;
        uint16_t wMaxMBperSecOneResolutionTemporalSpatialScalability;
        uint16_t wMaxMBperSecTwoResolutionsTemporalSpatialScalability;
        uint16_t wMaxMBperSecThreeResolutionsTemporalSpatialScalablity;
        uint16_t wMaxMBperSecFourResolutionsTemporalSpatialScalability;
        uint16_t wMaxMBperSecOneResolutionFullScalability;
        uint16_t wMaxMBperSecTwoResolutionsFullScalability;
        uint16_t wMaxMBperSecThreeResolutionsFullScalability;
        uint16_t wMaxMBperSecFourResolutionsFullScalability;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct tagKS_MPEAUDIOINFO
    {
        uint32_t dwFlags;
        uint32_t dwReserved1;
        uint32_t dwReserved2;
        uint32_t dwReserved3;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KS_DATAFORMAT_VIDEOINFOHEADER
    {
        Windows::Win32::CoreAudio::KSDATAFORMAT DataFormat;
        Windows::Win32::CoreAudio::KS_VIDEOINFOHEADER VideoInfoHeader;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KS_DATAFORMAT_VIDEOINFOHEADER2
    {
        Windows::Win32::CoreAudio::KSDATAFORMAT DataFormat;
        Windows::Win32::CoreAudio::KS_VIDEOINFOHEADER2 VideoInfoHeader2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KS_DATAFORMAT_MPEGVIDEOINFO2
    {
        Windows::Win32::CoreAudio::KSDATAFORMAT DataFormat;
        Windows::Win32::CoreAudio::KS_MPEGVIDEOINFO2 MpegVideoInfoHeader2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KS_DATAFORMAT_H264VIDEOINFO
    {
        Windows::Win32::CoreAudio::KSDATAFORMAT DataFormat;
        Windows::Win32::CoreAudio::KS_H264VIDEOINFO H264VideoInfoHeader;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KS_DATAFORMAT_IMAGEINFO
    {
        Windows::Win32::CoreAudio::KSDATAFORMAT DataFormat;
        Windows::Win32::CoreAudio::KS_BITMAPINFOHEADER ImageInfoHeader;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KS_DATAFORMAT_VIDEOINFO_PALETTE
    {
        Windows::Win32::CoreAudio::KSDATAFORMAT DataFormat;
        Windows::Win32::CoreAudio::KS_VIDEOINFO VideoInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KS_DATAFORMAT_VBIINFOHEADER
    {
        Windows::Win32::CoreAudio::KSDATAFORMAT DataFormat;
        Windows::Win32::CoreAudio::KS_VBIINFOHEADER VBIInfoHeader;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KS_VIDEO_STREAM_CONFIG_CAPS
    {
        ::win32::guid guid;
        uint32_t VideoStandard;
        Windows::Win32::DisplayDevices::SIZE InputSize;
        Windows::Win32::DisplayDevices::SIZE MinCroppingSize;
        Windows::Win32::DisplayDevices::SIZE MaxCroppingSize;
        int32_t CropGranularityX;
        int32_t CropGranularityY;
        int32_t CropAlignX;
        int32_t CropAlignY;
        Windows::Win32::DisplayDevices::SIZE MinOutputSize;
        Windows::Win32::DisplayDevices::SIZE MaxOutputSize;
        int32_t OutputGranularityX;
        int32_t OutputGranularityY;
        int32_t StretchTapsX;
        int32_t StretchTapsY;
        int32_t ShrinkTapsX;
        int32_t ShrinkTapsY;
        int64_t MinFrameInterval;
        int64_t MaxFrameInterval;
        int32_t MinBitsPerSecond;
        int32_t MaxBitsPerSecond;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KS_DATARANGE_VIDEO
    {
        Windows::Win32::CoreAudio::KSDATAFORMAT DataRange;
        Windows::Win32::SystemServices::BOOL bFixedSizeSamples;
        Windows::Win32::SystemServices::BOOL bTemporalCompression;
        uint32_t StreamDescriptionFlags;
        uint32_t MemoryAllocationFlags;
        Windows::Win32::CoreAudio::KS_VIDEO_STREAM_CONFIG_CAPS ConfigCaps;
        Windows::Win32::CoreAudio::KS_VIDEOINFOHEADER VideoInfoHeader;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KS_DATARANGE_VIDEO2
    {
        Windows::Win32::CoreAudio::KSDATAFORMAT DataRange;
        Windows::Win32::SystemServices::BOOL bFixedSizeSamples;
        Windows::Win32::SystemServices::BOOL bTemporalCompression;
        uint32_t StreamDescriptionFlags;
        uint32_t MemoryAllocationFlags;
        Windows::Win32::CoreAudio::KS_VIDEO_STREAM_CONFIG_CAPS ConfigCaps;
        Windows::Win32::CoreAudio::KS_VIDEOINFOHEADER2 VideoInfoHeader;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KS_DATARANGE_MPEG1_VIDEO
    {
        Windows::Win32::CoreAudio::KSDATAFORMAT DataRange;
        Windows::Win32::SystemServices::BOOL bFixedSizeSamples;
        Windows::Win32::SystemServices::BOOL bTemporalCompression;
        uint32_t StreamDescriptionFlags;
        uint32_t MemoryAllocationFlags;
        Windows::Win32::CoreAudio::KS_VIDEO_STREAM_CONFIG_CAPS ConfigCaps;
        Windows::Win32::CoreAudio::KS_MPEG1VIDEOINFO VideoInfoHeader;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KS_DATARANGE_MPEG2_VIDEO
    {
        Windows::Win32::CoreAudio::KSDATAFORMAT DataRange;
        Windows::Win32::SystemServices::BOOL bFixedSizeSamples;
        Windows::Win32::SystemServices::BOOL bTemporalCompression;
        uint32_t StreamDescriptionFlags;
        uint32_t MemoryAllocationFlags;
        Windows::Win32::CoreAudio::KS_VIDEO_STREAM_CONFIG_CAPS ConfigCaps;
        Windows::Win32::CoreAudio::KS_MPEGVIDEOINFO2 VideoInfoHeader;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KS_DATARANGE_H264_VIDEO
    {
        Windows::Win32::CoreAudio::KSDATAFORMAT DataRange;
        Windows::Win32::SystemServices::BOOL bFixedSizeSamples;
        Windows::Win32::SystemServices::BOOL bTemporalCompression;
        uint32_t StreamDescriptionFlags;
        uint32_t MemoryAllocationFlags;
        Windows::Win32::CoreAudio::KS_VIDEO_STREAM_CONFIG_CAPS ConfigCaps;
        Windows::Win32::CoreAudio::KS_H264VIDEOINFO VideoInfoHeader;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KS_DATARANGE_IMAGE
    {
        Windows::Win32::CoreAudio::KSDATAFORMAT DataRange;
        Windows::Win32::CoreAudio::KS_VIDEO_STREAM_CONFIG_CAPS ConfigCaps;
        Windows::Win32::CoreAudio::KS_BITMAPINFOHEADER ImageInfoHeader;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KS_DATARANGE_VIDEO_PALETTE
    {
        Windows::Win32::CoreAudio::KSDATAFORMAT DataRange;
        Windows::Win32::SystemServices::BOOL bFixedSizeSamples;
        Windows::Win32::SystemServices::BOOL bTemporalCompression;
        uint32_t StreamDescriptionFlags;
        uint32_t MemoryAllocationFlags;
        Windows::Win32::CoreAudio::KS_VIDEO_STREAM_CONFIG_CAPS ConfigCaps;
        Windows::Win32::CoreAudio::KS_VIDEOINFO VideoInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KS_DATARANGE_VIDEO_VBI
    {
        Windows::Win32::CoreAudio::KSDATAFORMAT DataRange;
        Windows::Win32::SystemServices::BOOL bFixedSizeSamples;
        Windows::Win32::SystemServices::BOOL bTemporalCompression;
        uint32_t StreamDescriptionFlags;
        uint32_t MemoryAllocationFlags;
        Windows::Win32::CoreAudio::KS_VIDEO_STREAM_CONFIG_CAPS ConfigCaps;
        Windows::Win32::CoreAudio::KS_VBIINFOHEADER VBIInfoHeader;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KS_DATARANGE_ANALOGVIDEO
    {
        Windows::Win32::CoreAudio::KSDATAFORMAT DataRange;
        Windows::Win32::CoreAudio::tagKS_AnalogVideoInfo AnalogVideoInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct VBICAP_PROPERTIES_PROTECTION_S
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        uint32_t StreamIndex;
        uint32_t Status;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct NABTSFEC_BUFFER
    {
        uint32_t dataSize;
        uint16_t groupID;
        uint16_t Reserved;
        uint8_t data[448];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct VBICODECFILTERING_SCANLINES
    {
        uint32_t DwordBitArray[32];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct VBICODECFILTERING_NABTS_SUBSTREAMS
    {
        uint32_t SubstreamMask[128];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct VBICODECFILTERING_CC_SUBSTREAMS
    {
        uint32_t SubstreamMask;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct CC_BYTE_PAIR
    {
        uint8_t Decoded[2];
        uint16_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct CC_HW_FIELD
    {
        Windows::Win32::CoreAudio::VBICODECFILTERING_SCANLINES ScanlinesRequested;
        uint32_t fieldFlags;
        int64_t PictureNumber;
        Windows::Win32::CoreAudio::CC_BYTE_PAIR Lines[12];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct NABTS_BUFFER_LINE
    {
        uint8_t Confidence;
        uint8_t Bytes[36];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct NABTS_BUFFER
    {
        Windows::Win32::CoreAudio::VBICODECFILTERING_SCANLINES ScanlinesRequested;
        int64_t PictureNumber;
        Windows::Win32::CoreAudio::NABTS_BUFFER_LINE NabtsLines[11];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct WST_BUFFER_LINE
    {
        uint8_t Confidence;
        uint8_t Bytes[42];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct WST_BUFFER
    {
        Windows::Win32::CoreAudio::VBICODECFILTERING_SCANLINES ScanlinesRequested;
        Windows::Win32::CoreAudio::WST_BUFFER_LINE WstLines[17];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct VBICODECFILTERING_STATISTICS_COMMON
    {
        uint32_t InputSRBsProcessed;
        uint32_t OutputSRBsProcessed;
        uint32_t SRBsIgnored;
        uint32_t InputSRBsMissing;
        uint32_t OutputSRBsMissing;
        uint32_t OutputFailures;
        uint32_t InternalErrors;
        uint32_t ExternalErrors;
        uint32_t InputDiscontinuities;
        uint32_t DSPFailures;
        uint32_t TvTunerChanges;
        uint32_t VBIHeaderChanges;
        uint32_t LineConfidenceAvg;
        uint32_t BytesOutput;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct VBICODECFILTERING_STATISTICS_COMMON_PIN
    {
        uint32_t SRBsProcessed;
        uint32_t SRBsIgnored;
        uint32_t SRBsMissing;
        uint32_t InternalErrors;
        uint32_t ExternalErrors;
        uint32_t Discontinuities;
        uint32_t LineConfidenceAvg;
        uint32_t BytesOutput;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct VBICODECFILTERING_STATISTICS_NABTS
    {
        Windows::Win32::CoreAudio::VBICODECFILTERING_STATISTICS_COMMON Common;
        uint32_t FECBundleBadLines;
        uint32_t FECQueueOverflows;
        uint32_t FECCorrectedLines;
        uint32_t FECUncorrectableLines;
        uint32_t BundlesProcessed;
        uint32_t BundlesSent2IP;
        uint32_t FilteredLines;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct VBICODECFILTERING_STATISTICS_NABTS_PIN
    {
        Windows::Win32::CoreAudio::VBICODECFILTERING_STATISTICS_COMMON_PIN Common;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct VBICODECFILTERING_STATISTICS_CC
    {
        Windows::Win32::CoreAudio::VBICODECFILTERING_STATISTICS_COMMON Common;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct VBICODECFILTERING_STATISTICS_CC_PIN
    {
        Windows::Win32::CoreAudio::VBICODECFILTERING_STATISTICS_COMMON_PIN Common;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct VBICODECFILTERING_STATISTICS_TELETEXT
    {
        Windows::Win32::CoreAudio::VBICODECFILTERING_STATISTICS_COMMON Common;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct VBICODECFILTERING_STATISTICS_TELETEXT_PIN
    {
        Windows::Win32::CoreAudio::VBICODECFILTERING_STATISTICS_COMMON_PIN Common;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_VBICODECFILTERING_SCANLINES_S
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        Windows::Win32::CoreAudio::VBICODECFILTERING_SCANLINES Scanlines;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_VBICODECFILTERING_NABTS_SUBSTREAMS_S
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        Windows::Win32::CoreAudio::VBICODECFILTERING_NABTS_SUBSTREAMS Substreams;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_VBICODECFILTERING_CC_SUBSTREAMS_S
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        Windows::Win32::CoreAudio::VBICODECFILTERING_CC_SUBSTREAMS Substreams;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_VBICODECFILTERING_STATISTICS_COMMON_S
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        Windows::Win32::CoreAudio::VBICODECFILTERING_STATISTICS_COMMON Statistics;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_VBICODECFILTERING_STATISTICS_COMMON_PIN_S
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        Windows::Win32::CoreAudio::VBICODECFILTERING_STATISTICS_COMMON_PIN Statistics;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_VBICODECFILTERING_STATISTICS_NABTS_S
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        Windows::Win32::CoreAudio::VBICODECFILTERING_STATISTICS_NABTS Statistics;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_VBICODECFILTERING_STATISTICS_NABTS_PIN_S
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        Windows::Win32::CoreAudio::VBICODECFILTERING_STATISTICS_NABTS_PIN Statistics;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_VBICODECFILTERING_STATISTICS_CC_S
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        Windows::Win32::CoreAudio::VBICODECFILTERING_STATISTICS_CC Statistics;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_VBICODECFILTERING_STATISTICS_CC_PIN_S
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        Windows::Win32::CoreAudio::VBICODECFILTERING_STATISTICS_CC_PIN Statistics;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct VRAM_SURFACE_INFO
    {
        size_t hSurface;
        int64_t VramPhysicalAddress;
        uint32_t cbCaptured;
        uint32_t dwWidth;
        uint32_t dwHeight;
        uint32_t dwLinearSize;
        int32_t lPitch;
        uint64_t ullReserved[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct VRAM_SURFACE_INFO_PROPERTY_S
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        Windows::Win32::CoreAudio::VRAM_SURFACE_INFO* pVramSurfaceInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct SECURE_BUFFER_INFO
    {
        ::win32::guid guidBufferIdentifier;
        uint32_t cbBufferSize;
        uint32_t cbCaptured;
        uint64_t ullReserved[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KS_FRAME_INFO
    {
        union _Anonymous1_e__Union
        {
            int32_t lSurfacePitch;
            uint32_t Reserved1;
        };
        union _Anonymous2_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t Reserved3;
                uint32_t Reserved4;
            };
            _Anonymous_e__Struct Anonymous;
            uint64_t FrameCompletionNumber;
        };
        uint32_t ExtendedHeaderSize;
        uint32_t dwFrameFlags;
        int64_t PictureNumber;
        int64_t DropCount;
        Windows::Win32::SystemServices::HANDLE hDirectDraw;
        Windows::Win32::SystemServices::HANDLE hSurfaceHandle;
        Windows::Win32::DisplayDevices::RECT DirectDrawRect;
        _Anonymous1_e__Union Anonymous1;
        uint32_t Reserved2;
        _Anonymous2_e__Union Anonymous2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KS_VBI_FRAME_INFO
    {
        uint32_t ExtendedHeaderSize;
        uint32_t dwFrameFlags;
        int64_t PictureNumber;
        int64_t DropCount;
        uint32_t dwSamplingFrequency;
        Windows::Win32::CoreAudio::KS_TVTUNER_CHANGE_INFO TvTunerChangeInfo;
        Windows::Win32::CoreAudio::KS_VBIINFOHEADER VBIInfoHeader;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_ALLOCATOR_CONTROL_SURFACE_SIZE_S
    {
        uint32_t CX;
        uint32_t CY;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_CAPS_S
    {
        uint32_t InterleavedCapSupported;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_INTERLEAVE_S
    {
        uint32_t InterleavedCapPossible;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_VIDEOPROCAMP_S
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        int32_t Value;
        uint32_t Flags;
        uint32_t Capabilities;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_VIDEOPROCAMP_NODE_S
    {
        Windows::Win32::CoreAudio::KSP_NODE NodeProperty;
        int32_t Value;
        uint32_t Flags;
        uint32_t Capabilities;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_VIDEOPROCAMP_S2
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        int32_t Value1;
        uint32_t Flags;
        uint32_t Capabilities;
        int32_t Value2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_VIDEOPROCAMP_NODE_S2
    {
        Windows::Win32::CoreAudio::KSP_NODE NodeProperty;
        int32_t Value1;
        uint32_t Flags;
        uint32_t Capabilities;
        int32_t Value2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_SELECTOR_S
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        int32_t Value;
        uint32_t Flags;
        uint32_t Capabilities;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_SELECTOR_NODE_S
    {
        Windows::Win32::CoreAudio::KSP_NODE NodeProperty;
        int32_t Value;
        uint32_t Flags;
        uint32_t Capabilities;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_TUNER_CAPS_S
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        uint32_t ModesSupported;
        Windows::Win32::CoreAudio::KSIDENTIFIER VideoMedium;
        Windows::Win32::CoreAudio::KSIDENTIFIER TVAudioMedium;
        Windows::Win32::CoreAudio::KSIDENTIFIER RadioAudioMedium;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_TUNER_IF_MEDIUM_S
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        Windows::Win32::CoreAudio::KSIDENTIFIER IFMedium;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_TUNER_MODE_CAPS_S
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        uint32_t Mode;
        uint32_t StandardsSupported;
        uint32_t MinFrequency;
        uint32_t MaxFrequency;
        uint32_t TuningGranularity;
        uint32_t NumberOfInputs;
        uint32_t SettlingTime;
        uint32_t Strategy;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_TUNER_MODE_S
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        uint32_t Mode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_TUNER_FREQUENCY_S
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        uint32_t Frequency;
        uint32_t LastFrequency;
        uint32_t TuningFlags;
        uint32_t VideoSubChannel;
        uint32_t AudioSubChannel;
        uint32_t Channel;
        uint32_t Country;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_TUNER_STANDARD_S
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        uint32_t Standard;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_TUNER_STANDARD_MODE_S
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        Windows::Win32::SystemServices::BOOL AutoDetect;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_TUNER_INPUT_S
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        uint32_t InputIndex;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_TUNER_STATUS_S
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        uint32_t CurrentFrequency;
        uint32_t PLLOffset;
        uint32_t SignalStrength;
        uint32_t Busy;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct TUNER_ANALOG_CAPS_S
    {
        uint32_t Mode;
        uint32_t StandardsSupported;
        uint32_t MinFrequency;
        uint32_t MaxFrequency;
        uint32_t TuningGranularity;
        uint32_t SettlingTime;
        uint32_t ScanSensingRange;
        uint32_t FineTuneSensingRange;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_TUNER_SCAN_CAPS_S
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        Windows::Win32::SystemServices::BOOL fSupportsHardwareAssistedScanning;
        uint32_t SupportedBroadcastStandards;
        void* GUIDBucket;
        uint32_t lengthofBucket;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_TUNER_NETWORKTYPE_SCAN_CAPS_S
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        ::win32::guid NetworkType;
        uint32_t BufferSize;
        void* NetworkTunerCapabilities;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_TUNER_SCAN_STATUS_S
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        Windows::Win32::CoreAudio::_TunerDecoderLockType LockStatus;
        uint32_t CurrentFrequency;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSEVENT_TUNER_INITIATE_SCAN_S
    {
        Windows::Win32::CoreAudio::KSEVENTDATA EventData;
        uint32_t StartFrequency;
        uint32_t EndFrequency;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_VIDEOENCODER_S
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        int32_t Value;
        uint32_t Flags;
        uint32_t Capabilities;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_VIDEODECODER_CAPS_S
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        uint32_t StandardsSupported;
        uint32_t Capabilities;
        uint32_t SettlingTime;
        uint32_t HSyncPerVSync;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_VIDEODECODER_STATUS_S
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        uint32_t NumberOfLines;
        uint32_t SignalLocked;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_VIDEODECODER_STATUS2_S
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        uint32_t NumberOfLines;
        uint32_t SignalLocked;
        uint32_t ChromaLock;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_VIDEODECODER_S
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        uint32_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_CAMERACONTROL_S_EX
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        int32_t Value;
        uint32_t Flags;
        uint32_t Capabilities;
        Windows::Win32::DisplayDevices::RECT FocusRect;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_CAMERACONTROL_S
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        int32_t Value;
        uint32_t Flags;
        uint32_t Capabilities;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_CAMERACONTROL_NODE_S
    {
        Windows::Win32::CoreAudio::KSP_NODE NodeProperty;
        int32_t Value;
        uint32_t Flags;
        uint32_t Capabilities;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_CAMERACONTROL_S2
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        int32_t Value1;
        uint32_t Flags;
        uint32_t Capabilities;
        int32_t Value2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_CAMERACONTROL_NODE_S2
    {
        Windows::Win32::CoreAudio::KSP_NODE NodeProperty;
        int32_t Value1;
        uint32_t Flags;
        uint32_t Capabilities;
        int32_t Value2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_CAMERACONTROL_FOCAL_LENGTH_S
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        int32_t lOcularFocalLength;
        int32_t lObjectiveFocalLengthMin;
        int32_t lObjectiveFocalLengthMax;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_CAMERACONTROL_NODE_FOCAL_LENGTH_S
    {
        Windows::Win32::CoreAudio::KSNODEPROPERTY NodeProperty;
        int32_t lOcularFocalLength;
        int32_t lObjectiveFocalLengthMin;
        int32_t lObjectiveFocalLengthMax;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_CAMERACONTROL_FLASH_S
    {
        uint32_t Flash;
        uint32_t Capabilities;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_CAMERACONTROL_VIDEOSTABILIZATION_MODE_S
    {
        uint32_t VideoStabilizationMode;
        uint32_t Capabilities;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST_S
    {
        union _Anonymous_e__Union
        {
            uint32_t Capabilities;
            uint32_t Configuration;
        };
        Windows::Win32::DisplayDevices::RECT FocusRect;
        Windows::Win32::SystemServices::BOOL AutoFocusLock;
        Windows::Win32::SystemServices::BOOL AutoExposureLock;
        Windows::Win32::SystemServices::BOOL AutoWhitebalanceLock;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_CAMERACONTROL_IMAGE_PIN_CAPABILITY_S
    {
        uint32_t Capabilities;
        uint32_t Reserved0;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSCAMERA_EXTENDEDPROP_HEADER
    {
        uint32_t Version;
        uint32_t PinId;
        uint32_t Size;
        uint32_t Result;
        uint64_t Flags;
        uint64_t Capability;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSCAMERA_EXTENDEDPROP_VALUE
    {
        union _Value_e__Union
        {
            double dbl;
            uint64_t ull;
            uint32_t ul;
            Windows::Win32::SystemServices::ULARGE_INTEGER ratio;
            int32_t l;
            int64_t ll;
        };
        _Value_e__Union Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSCAMERA_MAXVIDEOFPS_FORPHOTORES
    {
        uint32_t PhotoResWidth;
        uint32_t PhotoResHeight;
        uint32_t PreviewFPSNum;
        uint32_t PreviewFPSDenom;
        uint32_t CaptureFPSNum;
        uint32_t CaptureFPSDenom;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSCAMERA_EXTENDEDPROP_PHOTOMODE
    {
        uint32_t RequestedHistoryFrames;
        uint32_t MaxHistoryFrames;
        uint32_t SubMode;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSCAMERA_EXTENDEDPROP_VIDEOPROCSETTING
    {
        uint32_t Mode;
        int32_t Min;
        int32_t Max;
        int32_t Step;
        Windows::Win32::CoreAudio::KSCAMERA_EXTENDEDPROP_VALUE VideoProc;
        uint64_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSCAMERA_EXTENDEDPROP_EVCOMPENSATION
    {
        uint32_t Mode;
        int32_t Min;
        int32_t Max;
        int32_t Value;
        uint64_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSCAMERA_EXTENDEDPROP_FIELDOFVIEW
    {
        uint32_t NormalizedFocalLengthX;
        uint32_t NormalizedFocalLengthY;
        uint32_t Flag;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSCAMERA_EXTENDEDPROP_CAMERAOFFSET
    {
        int32_t PitchAngle;
        int32_t YawAngle;
        uint32_t Flag;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSCAMERA_EXTENDEDPROP_METADATAINFO
    {
        int32_t BufferAlignment;
        uint32_t MaxMetadataBufferSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSCAMERA_METADATA_ITEMHEADER
    {
        uint32_t MetadataId;
        uint32_t Size;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSCAMERA_METADATA_PHOTOCONFIRMATION
    {
        Windows::Win32::CoreAudio::KSCAMERA_METADATA_ITEMHEADER Header;
        uint32_t PhotoConfirmationIndex;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSCAMERA_METADATA_FRAMEILLUMINATION
    {
        Windows::Win32::CoreAudio::KSCAMERA_METADATA_ITEMHEADER Header;
        uint32_t Flags;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSCAMERA_METADATA_CAPTURESTATS
    {
        Windows::Win32::CoreAudio::KSCAMERA_METADATA_ITEMHEADER Header;
        uint32_t Flags;
        uint32_t Reserved;
        uint64_t ExposureTime;
        uint64_t ExposureCompensationFlags;
        int32_t ExposureCompensationValue;
        uint32_t IsoSpeed;
        uint32_t FocusState;
        uint32_t LensPosition;
        uint32_t WhiteBalance;
        uint32_t Flash;
        uint32_t FlashPower;
        uint32_t ZoomFactor;
        uint64_t SceneMode;
        uint64_t SensorFramerate;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSCAMERA_EXTENDEDPROP_ROI_CONFIGCAPSHEADER
    {
        uint32_t Size;
        uint32_t ConfigCapCount;
        uint64_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSCAMERA_EXTENDEDPROP_ROI_CONFIGCAPS
    {
        uint32_t ControlId;
        uint32_t MaxNumberOfROIs;
        uint64_t Capability;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSCAMERA_EXTENDEDPROP_ROI_ISPCONTROLHEADER
    {
        uint32_t Size;
        uint32_t ControlCount;
        uint64_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSCAMERA_EXTENDEDPROP_ROI_ISPCONTROL
    {
        uint32_t ControlId;
        uint32_t ROICount;
        uint32_t Result;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSCAMERA_EXTENDEDPROP_ROI_INFO
    {
        Windows::Win32::DisplayDevices::RECT Region;
        uint64_t Flags;
        int32_t Weight;
        int32_t RegionOfInterestType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSCAMERA_EXTENDEDPROP_ROI_WHITEBALANCE
    {
        Windows::Win32::CoreAudio::KSCAMERA_EXTENDEDPROP_ROI_INFO ROIInfo;
        uint64_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSCAMERA_EXTENDEDPROP_ROI_EXPOSURE
    {
        Windows::Win32::CoreAudio::KSCAMERA_EXTENDEDPROP_ROI_INFO ROIInfo;
        uint64_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSCAMERA_EXTENDEDPROP_ROI_FOCUS
    {
        Windows::Win32::CoreAudio::KSCAMERA_EXTENDEDPROP_ROI_INFO ROIInfo;
        uint64_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSCAMERA_PERFRAMESETTING_CAP_ITEM_HEADER
    {
        uint32_t Size;
        uint32_t Type;
        uint64_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSCAMERA_PERFRAMESETTING_CAP_HEADER
    {
        uint32_t Size;
        uint32_t ItemCount;
        uint64_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSCAMERA_PERFRAMESETTING_CUSTOM_ITEM
    {
        uint32_t Size;
        uint32_t Reserved;
        ::win32::guid Id;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSCAMERA_PERFRAMESETTING_ITEM_HEADER
    {
        uint32_t Size;
        uint32_t Type;
        uint64_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSCAMERA_PERFRAMESETTING_FRAME_HEADER
    {
        uint32_t Size;
        uint32_t Id;
        uint32_t ItemCount;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSCAMERA_PERFRAMESETTING_HEADER
    {
        uint32_t Size;
        uint32_t FrameCount;
        ::win32::guid Id;
        uint64_t Flags;
        uint32_t LoopCount;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSCAMERA_EXTENDEDPROP_PROFILE
    {
        ::win32::guid ProfileId;
        uint32_t Index;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSCAMERA_PROFILE_MEDIAINFO
    {
        struct _Resolution_e__Struct
        {
            uint32_t X;
            uint32_t Y;
        };
        struct _MaxFrameRate_e__Struct
        {
            uint32_t Numerator;
            uint32_t Denominator;
        };
        _Resolution_e__Struct Resolution;
        _MaxFrameRate_e__Struct MaxFrameRate;
        uint64_t Flags;
        uint32_t Data0;
        uint32_t Data1;
        uint32_t Data2;
        uint32_t Data3;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSCAMERA_PROFILE_PININFO
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint16_t PinIndex;
                uint16_t ProfileSensorType;
            };
            _Anonymous_e__Struct Anonymous;
            uint32_t Reserved;
        };
        ::win32::guid PinCategory;
        _Anonymous_e__Union Anonymous;
        uint32_t MediaInfoCount;
        Windows::Win32::CoreAudio::KSCAMERA_PROFILE_MEDIAINFO* MediaInfos;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSCAMERA_PROFILE_INFO
    {
        ::win32::guid ProfileId;
        uint32_t Index;
        uint32_t PinCount;
        Windows::Win32::CoreAudio::KSCAMERA_PROFILE_PININFO* Pins;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSCAMERA_PROFILE_CONCURRENCYINFO
    {
        ::win32::guid ReferenceGuid;
        uint32_t Reserved;
        uint32_t ProfileCount;
        Windows::Win32::CoreAudio::KSCAMERA_PROFILE_INFO* Profiles;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSDEVICE_PROFILE_INFO
    {
        union _Anonymous_e__Union
        {
            struct _Camera_e__Struct
            {
                Windows::Win32::CoreAudio::KSCAMERA_PROFILE_INFO Info;
                uint32_t Reserved;
                uint32_t ConcurrencyCount;
                Windows::Win32::CoreAudio::KSCAMERA_PROFILE_CONCURRENCYINFO* Concurrency;
            };
            _Camera_e__Struct Camera;
        };
        uint32_t Type;
        uint32_t Size;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct WNF_KSCAMERA_STREAMSTATE_INFO
    {
        uint32_t ProcessId;
        uint32_t SessionId;
        uint32_t StreamState;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_NETWORKCAMERACONTROL_NTPINFO_HEADER
    {
        uint32_t Size;
        Windows::Win32::CoreAudio::KSPROPERTY_NETWORKCAMERACONTROL_NTPINFO_TYPE Type;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct DEVCAPS
    {
        int32_t CanRecord;
        int32_t CanRecordStrobe;
        int32_t HasAudio;
        int32_t HasVideo;
        int32_t UsesFiles;
        int32_t CanSave;
        int32_t DeviceType;
        int32_t TCRead;
        int32_t TCWrite;
        int32_t CTLRead;
        int32_t IndexRead;
        int32_t Preroll;
        int32_t Postroll;
        int32_t SyncAcc;
        int32_t NormRate;
        int32_t CanPreview;
        int32_t CanMonitorSrc;
        int32_t CanTest;
        int32_t VideoIn;
        int32_t AudioIn;
        int32_t Calibrate;
        int32_t SeekType;
        int32_t SimulatedHardware;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_EXTDEVICE_S
    {
        union _u_e__Union
        {
            Windows::Win32::CoreAudio::DEVCAPS Capabilities;
            uint32_t DevPort;
            uint32_t PowerState;
            uint16_t pawchString[260];
            uint32_t NodeUniqueID[2];
        };
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        _u_e__Union u;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct TRANSPORTSTATUS
    {
        int32_t Mode;
        int32_t LastError;
        int32_t RecordInhibit;
        int32_t ServoLock;
        int32_t MediaPresent;
        int32_t MediaLength;
        int32_t MediaSize;
        int32_t MediaTrackCount;
        int32_t MediaTrackLength;
        int32_t MediaTrackSide;
        int32_t MediaType;
        int32_t LinkMode;
        int32_t NotifyOn;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct TRANSPORTBASICPARMS
    {
        int32_t TimeFormat;
        int32_t TimeReference;
        int32_t Superimpose;
        int32_t EndStopAction;
        int32_t RecordFormat;
        int32_t StepFrames;
        int32_t SetpField;
        int32_t Preroll;
        int32_t RecPreroll;
        int32_t Postroll;
        int32_t EditDelay;
        int32_t PlayTCDelay;
        int32_t RecTCDelay;
        int32_t EditField;
        int32_t FrameServo;
        int32_t ColorFrameServo;
        int32_t ServoRef;
        int32_t WarnGenlock;
        int32_t SetTracking;
        int8_t VolumeName[40];
        int32_t Ballistic[20];
        int32_t Speed;
        int32_t CounterFormat;
        int32_t TunerChannel;
        int32_t TunerNumber;
        int32_t TimerEvent;
        int32_t TimerStartDay;
        int32_t TimerStartTime;
        int32_t TimerStopDay;
        int32_t TimerStopTime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct TRANSPORTVIDEOPARMS
    {
        int32_t OutputMode;
        int32_t Input;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct TRANSPORTAUDIOPARMS
    {
        int32_t EnableOutput;
        int32_t EnableRecord;
        int32_t EnableSelsync;
        int32_t Input;
        int32_t MonitorSource;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct MEDIUM_INFO
    {
        Windows::Win32::SystemServices::BOOL MediaPresent;
        uint32_t MediaType;
        Windows::Win32::SystemServices::BOOL RecordInhibit;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct TRANSPORT_STATE
    {
        uint32_t Mode;
        uint32_t State;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_EXTXPORT_S
    {
        union _u_e__Union
        {
            struct _Timecode_e__Struct
            {
                uint8_t frame;
                uint8_t second;
                uint8_t minute;
                uint8_t hour;
            };
            struct _RawAVC_e__Struct
            {
                uint32_t PayloadSize;
                uint8_t Payload[512];
            };
            uint32_t Capabilities;
            uint32_t SignalMode;
            uint32_t LoadMedium;
            Windows::Win32::CoreAudio::MEDIUM_INFO MediumInfo;
            Windows::Win32::CoreAudio::TRANSPORT_STATE XPrtState;
            _Timecode_e__Struct Timecode;
            uint32_t dwTimecode;
            uint32_t dwAbsTrackNumber;
            _RawAVC_e__Struct RawAVC;
        };
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        _u_e__Union u;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_EXTXPORT_NODE_S
    {
        union _u_e__Union
        {
            struct _Timecode_e__Struct
            {
                uint8_t frame;
                uint8_t second;
                uint8_t minute;
                uint8_t hour;
            };
            struct _RawAVC_e__Struct
            {
                uint32_t PayloadSize;
                uint8_t Payload[512];
            };
            uint32_t Capabilities;
            uint32_t SignalMode;
            uint32_t LoadMedium;
            Windows::Win32::CoreAudio::MEDIUM_INFO MediumInfo;
            Windows::Win32::CoreAudio::TRANSPORT_STATE XPrtState;
            _Timecode_e__Struct Timecode;
            uint32_t dwTimecode;
            uint32_t dwAbsTrackNumber;
            _RawAVC_e__Struct RawAVC;
        };
        Windows::Win32::CoreAudio::KSP_NODE NodeProperty;
        _u_e__Union u;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct TIMECODE_SAMPLE
    {
        int64_t qwTick;
        Windows::Win32::DirectShow::TIMECODE timecode;
        uint32_t dwUser;
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_TIMECODE_S
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        Windows::Win32::DirectShow::TIMECODE_SAMPLE TimecodeSamp;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_TIMECODE_NODE_S
    {
        Windows::Win32::CoreAudio::KSP_NODE NodeProperty;
        Windows::Win32::DirectShow::TIMECODE_SAMPLE TimecodeSamp;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_CROSSBAR_CAPS_S
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        uint32_t NumberOfInputs;
        uint32_t NumberOfOutputs;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_CROSSBAR_PININFO_S
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        Windows::Win32::CoreAudio::KSPIN_DATAFLOW Direction;
        uint32_t Index;
        uint32_t PinType;
        uint32_t RelatedPinIndex;
        Windows::Win32::CoreAudio::KSIDENTIFIER Medium;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_CROSSBAR_ROUTE_S
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        uint32_t IndexInputPin;
        uint32_t IndexOutputPin;
        uint32_t CanRoute;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_CROSSBAR_ACTIVE_S
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        uint32_t IndexInputPin;
        uint32_t Active;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_TVAUDIO_CAPS_S
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        uint32_t Capabilities;
        Windows::Win32::CoreAudio::KSIDENTIFIER InputMedium;
        Windows::Win32::CoreAudio::KSIDENTIFIER OutputMedium;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_TVAUDIO_S
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        uint32_t Mode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_VIDEOCOMPRESSION_GETINFO_S
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        uint32_t StreamIndex;
        int32_t DefaultKeyFrameRate;
        int32_t DefaultPFrameRate;
        int32_t DefaultQuality;
        int32_t NumberOfQualitySettings;
        int32_t Capabilities;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_VIDEOCOMPRESSION_S
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        uint32_t StreamIndex;
        int32_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_VIDEOCOMPRESSION_S1
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        uint32_t StreamIndex;
        int32_t Value;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSDISPLAYCHANGE
    {
        uint32_t PelsWidth;
        uint32_t PelsHeight;
        uint32_t BitsPerPel;
        uint16_t DeviceID[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_VIDEOCONTROL_CAPS_S
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        uint32_t StreamIndex;
        uint32_t VideoControlCaps;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_VIDEOCONTROL_MODE_S
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        uint32_t StreamIndex;
        int32_t Mode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_VIDEOCONTROL_ACTUAL_FRAME_RATE_S
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        uint32_t StreamIndex;
        uint32_t RangeIndex;
        Windows::Win32::DisplayDevices::SIZE Dimensions;
        int64_t CurrentActualFrameRate;
        int64_t CurrentMaxAvailableFrameRate;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_VIDEOCONTROL_FRAME_RATES_S
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        uint32_t StreamIndex;
        uint32_t RangeIndex;
        Windows::Win32::DisplayDevices::SIZE Dimensions;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSPROPERTY_DROPPEDFRAMES_CURRENT_S
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        int64_t PictureNumber;
        int64_t DropCount;
        uint32_t AverageFrameSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct DDVIDEOPORTCONNECT
    {
        uint32_t dwSize;
        uint32_t dwPortWidth;
        ::win32::guid guidTypeID;
        uint32_t dwFlags;
        size_t dwReserved1;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KS_AMVPDIMINFO
    {
        uint32_t dwFieldWidth;
        uint32_t dwFieldHeight;
        uint32_t dwVBIWidth;
        uint32_t dwVBIHeight;
        Windows::Win32::DisplayDevices::RECT rcValidRegion;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KS_AMVPDATAINFO
    {
        uint32_t dwSize;
        uint32_t dwMicrosecondsPerField;
        Windows::Win32::CoreAudio::KS_AMVPDIMINFO amvpDimInfo;
        uint32_t dwPictAspectRatioX;
        uint32_t dwPictAspectRatioY;
        Windows::Win32::SystemServices::BOOL bEnableDoubleClock;
        Windows::Win32::SystemServices::BOOL bEnableVACT;
        Windows::Win32::SystemServices::BOOL bDataIsInterlaced;
        int32_t lHalfLinesOdd;
        Windows::Win32::SystemServices::BOOL bFieldPolarityInverted;
        uint32_t dwNumLinesInVREF;
        int32_t lHalfLinesEven;
        uint32_t dwReserved1;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KS_AMVPSIZE
    {
        uint32_t dwWidth;
        uint32_t dwHeight;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSVPMAXPIXELRATE
    {
        Windows::Win32::CoreAudio::KS_AMVPSIZE Size;
        uint32_t MaxPixelsPerSecond;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSVPSIZE_PROP
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        Windows::Win32::CoreAudio::KS_AMVPSIZE Size;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSVPSURFACEPARAMS
    {
        uint32_t dwPitch;
        uint32_t dwXOrigin;
        uint32_t dwYOrigin;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSGOP_USERDATA
    {
        uint32_t sc;
        uint32_t reserved1;
        uint8_t cFields;
        int8_t l21Data[3];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KS_AM_SimpleRateChange
    {
        int64_t StartTime;
        int32_t Rate;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KS_AM_ExactRateChange
    {
        int64_t OutputZeroTime;
        int32_t Rate;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSJACK_DESCRIPTION
    {
        uint32_t ChannelMapping;
        uint32_t Color;
        Windows::Win32::CoreAudio::EPcxConnectionType ConnectionType;
        Windows::Win32::CoreAudio::EPcxGeoLocation GeoLocation;
        Windows::Win32::CoreAudio::EPcxGenLocation GenLocation;
        Windows::Win32::CoreAudio::EPxcPortConnection PortConnection;
        Windows::Win32::SystemServices::BOOL IsConnected;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSJACK_SINK_INFORMATION
    {
        Windows::Win32::CoreAudio::KSJACK_SINK_CONNECTIONTYPE ConnType;
        uint16_t ManufacturerId;
        uint16_t ProductId;
        uint16_t AudioLatency;
        Windows::Win32::SystemServices::BOOL HDCPCapable;
        Windows::Win32::SystemServices::BOOL AICapable;
        uint8_t SinkDescriptionLength;
        uint16_t SinkDescription[32];
        Windows::Win32::Kernel::LUID PortId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSJACK_DESCRIPTION2
    {
        uint32_t DeviceStateInfo;
        uint32_t JackCapabilities;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSAUDIOPOSTURE_PANEL_STATE
    {
        Windows::Win32::CoreAudio::AUDIOPOSTURE_PANEL_POWER Power;
        Windows::Win32::CoreAudio::AUDIOPOSTURE_PANEL_ORIENTATION Orientation;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSAUDIOPOSTURE_DESCRIPTION
    {
        uint32_t CbSize;
        uint32_t MembersListCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSAUDIOENGINE_DESCRIPTOR
    {
        uint32_t nHostPinId;
        uint32_t nOffloadPinId;
        uint32_t nLoopbackPinId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSAUDIOENGINE_BUFFER_SIZE_RANGE
    {
        uint32_t MinBufferBytes;
        uint32_t MaxBufferBytes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSAUDIOENGINE_VOLUMELEVEL
    {
        int32_t TargetVolume;
        Windows::Win32::CoreAudio::AUDIO_CURVE_TYPE CurveType;
        uint64_t CurveDuration;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSATTRIBUTE_AUDIOSIGNALPROCESSING_MODE
    {
        Windows::Win32::CoreAudio::KSATTRIBUTE AttributeHeader;
        ::win32::guid SignalProcessingMode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSAUDIOMODULE_DESCRIPTOR
    {
        ::win32::guid ClassId;
        uint32_t InstanceId;
        uint32_t VersionMajor;
        uint32_t VersionMinor;
        uint16_t Name[128];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSAUDIOMODULE_PROPERTY
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        ::win32::guid ClassId;
        uint32_t InstanceId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct KSAUDIOMODULE_NOTIFICATION
    {
        union _Anonymous_e__Union
        {
            struct _ProviderId_e__Struct
            {
                ::win32::guid DeviceId;
                ::win32::guid ClassId;
                uint32_t InstanceId;
                uint32_t Reserved;
            };
            _ProviderId_e__Struct ProviderId;
            int64_t Alignment;
        };
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct AudioClientProperties
    {
        uint32_t cbSize;
        Windows::Win32::SystemServices::BOOL bIsOffload;
        Windows::Win32::CoreAudio::AUDIO_STREAM_CATEGORY eCategory;
        Windows::Win32::CoreAudio::AUDCLNT_STREAMOPTIONS Options;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct AudioClient3ActivationParams
    {
        ::win32::guid tracingContextId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct AMBISONICS_PARAMS
    {
        uint32_t u32Size;
        uint32_t u32Version;
        Windows::Win32::CoreAudio::AMBISONICS_TYPE u32Type;
        Windows::Win32::CoreAudio::AMBISONICS_CHANNEL_ORDERING u32ChannelOrdering;
        Windows::Win32::CoreAudio::AMBISONICS_NORMALIZATION u32Normalization;
        uint32_t u32Order;
        uint32_t u32NumChannels;
        uint32_t* pu32ChannelMap;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct SpatialAudioObjectRenderStreamActivationParams
    {
        Windows::Win32::Multimedia::WAVEFORMATEX* ObjectFormat;
        Windows::Win32::CoreAudio::AudioObjectType StaticObjectTypeMask;
        uint32_t MinDynamicObjectCount;
        uint32_t MaxDynamicObjectCount;
        Windows::Win32::CoreAudio::AUDIO_STREAM_CATEGORY Category;
        Windows::Win32::SystemServices::HANDLE EventHandle;
        Windows::Win32::CoreAudio::ISpatialAudioObjectRenderStreamNotify* NotifyObject;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct SpatialAudioClientActivationParams
    {
        ::win32::guid tracingContextId;
        ::win32::guid appId;
        int32_t majorVersion;
        int32_t minorVersion1;
        int32_t minorVersion2;
        int32_t minorVersion3;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct SpatialAudioHrtfDirectivity
    {
        Windows::Win32::CoreAudio::SpatialAudioHrtfDirectivityType Type;
        float Scaling;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct SpatialAudioHrtfDirectivityCardioid
    {
        Windows::Win32::CoreAudio::SpatialAudioHrtfDirectivity directivity;
        float Order;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct SpatialAudioHrtfDirectivityCone
    {
        Windows::Win32::CoreAudio::SpatialAudioHrtfDirectivity directivity;
        float InnerAngle;
        float OuterAngle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    union SpatialAudioHrtfDirectivityUnion
    {
        Windows::Win32::CoreAudio::SpatialAudioHrtfDirectivityCone Cone;
        Windows::Win32::CoreAudio::SpatialAudioHrtfDirectivityCardioid Cardiod;
        Windows::Win32::CoreAudio::SpatialAudioHrtfDirectivity Omni;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct SpatialAudioHrtfDistanceDecay
    {
        Windows::Win32::CoreAudio::SpatialAudioHrtfDistanceDecayType Type;
        float MaxGain;
        float MinGain;
        float UnityGainDistance;
        float CutoffDistance;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct SpatialAudioHrtfActivationParams
    {
        Windows::Win32::Multimedia::WAVEFORMATEX* ObjectFormat;
        Windows::Win32::CoreAudio::AudioObjectType StaticObjectTypeMask;
        uint32_t MinDynamicObjectCount;
        uint32_t MaxDynamicObjectCount;
        Windows::Win32::CoreAudio::AUDIO_STREAM_CATEGORY Category;
        Windows::Win32::SystemServices::HANDLE EventHandle;
        Windows::Win32::CoreAudio::ISpatialAudioObjectRenderStreamNotify* NotifyObject;
        Windows::Win32::CoreAudio::SpatialAudioHrtfDistanceDecay* DistanceDecay;
        Windows::Win32::CoreAudio::SpatialAudioHrtfDirectivityUnion* Directivity;
        Windows::Win32::CoreAudio::SpatialAudioHrtfEnvironmentType* Environment;
        float* Orientation;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct DIRECTX_AUDIO_ACTIVATION_PARAMS
    {
        uint32_t cbDirectXAudioActivationParams;
        ::win32::guid guidAudioSession;
        uint32_t dwAudioStreamFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct AudioExtensionParams
    {
        Windows::Win32::WindowsAndMessaging::LPARAM AddPageParam;
        Windows::Win32::CoreAudio::IMMDevice* pEndpoint;
        Windows::Win32::CoreAudio::IMMDevice* pPnpInterface;
        Windows::Win32::CoreAudio::IMMDevice* pPnpDevnode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct AUDIO_ENDPOINT_SHARED_CREATE_PARAMS
    {
        uint32_t u32Size;
        uint32_t u32TSSessionId;
        Windows::Win32::CoreAudio::__MIDL___MIDL_itf_audioengineendpoint_0000_0000_0001 targetEndpointConnectorType;
        Windows::Win32::Multimedia::WAVEFORMATEX wfxDeviceFormat;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct AUDIO_VOLUME_NOTIFICATION_DATA
    {
        ::win32::guid guidEventContext;
        Windows::Win32::SystemServices::BOOL bMuted;
        float fMasterVolume;
        uint32_t nChannels;
        float afChannelVolumes[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct SpatialAudioMetadataItemsInfo
    {
        uint16_t FrameCount;
        uint16_t ItemCount;
        uint16_t MaxItemCount;
        uint32_t MaxValueBufferLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CoreAudio
{
    struct SpatialAudioObjectRenderStreamForMetadataActivationParams
    {
        Windows::Win32::Multimedia::WAVEFORMATEX* ObjectFormat;
        Windows::Win32::CoreAudio::AudioObjectType StaticObjectTypeMask;
        uint32_t MinDynamicObjectCount;
        uint32_t MaxDynamicObjectCount;
        Windows::Win32::CoreAudio::AUDIO_STREAM_CATEGORY Category;
        Windows::Win32::SystemServices::HANDLE EventHandle;
        ::win32::guid MetadataFormatId;
        uint16_t MaxMetadataItemCount;
        Windows::Win32::StructuredStorage::PROPVARIANT* MetadataActivationParams;
        Windows::Win32::CoreAudio::ISpatialAudioObjectRenderStreamNotify* NotifyObject;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct KSTOPOLOGY_CONNECTION
    {
        uint32_t FromNode;
        uint32_t FromNodePin;
        uint32_t ToNode;
        uint32_t ToNodePin;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct APO_CONNECTION_PROPERTY
    {
        size_t pBuffer;
        uint32_t u32ValidFrameCount;
        Windows::Win32::RemoteDesktopServices::APO_BUFFER_FLAGS u32BufferFlags;
        uint32_t u32Signature;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct AE_CURRENT_POSITION
    {
        uint64_t u64DevicePosition;
        uint64_t u64StreamPosition;
        uint64_t u64PaddingFrames;
        int64_t hnsQPCPosition;
        float f32FramesPerSecond;
        Windows::Win32::RemoteDesktopServices::AE_POSITION_FLAGS Flag;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::XmlHttpExtendedRequest
{
    struct __msxml6_ReferenceRemainingTypes__
    {
        Windows::Win32::WindowsProgramming::DOMNodeType __tagDomNodeType__;
        Windows::Win32::WindowsProgramming::DOMNodeType __domNodeType__;
        Windows::Win32::XmlHttpExtendedRequest::SERVERXMLHTTP_OPTION __serverXmlHttpOptionEnum__;
        Windows::Win32::XmlHttpExtendedRequest::SERVERXMLHTTP_OPTION __serverXmlHttpOption__;
        Windows::Win32::XmlHttpExtendedRequest::SXH_SERVER_CERT_OPTION __serverCertOptionEnum__;
        Windows::Win32::XmlHttpExtendedRequest::SXH_SERVER_CERT_OPTION __serverCertOption__;
        Windows::Win32::XmlHttpExtendedRequest::SXH_PROXY_SETTING __proxySettingEnum__;
        Windows::Win32::XmlHttpExtendedRequest::SXH_PROXY_SETTING __proxySetting__;
        Windows::Win32::XmlHttpExtendedRequest::SOMITEMTYPE __somItemTypeEnum__;
        Windows::Win32::XmlHttpExtendedRequest::SOMITEMTYPE __somItemType__;
        Windows::Win32::XmlHttpExtendedRequest::SCHEMAUSE __schemaUseEnum__;
        Windows::Win32::XmlHttpExtendedRequest::SCHEMAUSE __schemaUse__;
        Windows::Win32::XmlHttpExtendedRequest::SCHEMADERIVATIONMETHOD __schemaDerivationMethodEnum__;
        Windows::Win32::XmlHttpExtendedRequest::SCHEMADERIVATIONMETHOD __schemaDerivationMethod__;
        Windows::Win32::XmlHttpExtendedRequest::SCHEMACONTENTTYPE __schemaContentTypeEnum__;
        Windows::Win32::XmlHttpExtendedRequest::SCHEMACONTENTTYPE __schemaContentType__;
        Windows::Win32::XmlHttpExtendedRequest::SCHEMAPROCESSCONTENTS __schemaProcessContentsEnum__;
        Windows::Win32::XmlHttpExtendedRequest::SCHEMAPROCESSCONTENTS __schemaProcessContents__;
        Windows::Win32::XmlHttpExtendedRequest::SCHEMAWHITESPACE __schemaWhitespaceEnum__;
        Windows::Win32::XmlHttpExtendedRequest::SCHEMAWHITESPACE __schemaWhitespace__;
        Windows::Win32::XmlHttpExtendedRequest::SCHEMATYPEVARIETY __schemaTypeVarietyEnum__;
        Windows::Win32::XmlHttpExtendedRequest::SCHEMATYPEVARIETY __schemaTypeVariety__;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::XmlHttpExtendedRequest
{
    struct XHR_COOKIE
    {
        uint16_t* pwszUrl;
        uint16_t* pwszName;
        uint16_t* pwszValue;
        uint16_t* pwszP3PPolicy;
        Windows::Win32::WindowsProgramming::FILETIME ftExpires;
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::XmlHttpExtendedRequest
{
    struct XHR_CERT
    {
        uint32_t cbCert;
        uint8_t* pbCert;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Kernel
{
    struct QUAD
    {
        union _Anonymous_e__Union
        {
            int64_t UseThisFieldToCopy;
            double DoNotUseThisField;
        };
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Kernel
{
    struct CSTRING
    {
        uint16_t Length;
        uint16_t MaximumLength;
        int8_t* Buffer;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Kernel
{
    struct RTL_BALANCED_NODE
    {
        union _Anonymous1_e__Union
        {
            struct _Anonymous_e__Struct
            {
                Windows::Win32::Kernel::RTL_BALANCED_NODE* Left;
                Windows::Win32::Kernel::RTL_BALANCED_NODE* Right;
            };
            Windows::Win32::Kernel::RTL_BALANCED_NODE* Children[2];
            _Anonymous_e__Struct Anonymous;
        };
        union _Anonymous2_e__Union
        {
            uint8_t _bitfield;
            size_t ParentValue;
        };
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Kernel
{
    struct LIST_ENTRY32
    {
        uint32_t Flink;
        uint32_t Blink;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Kernel
{
    struct LIST_ENTRY64
    {
        uint64_t Flink;
        uint64_t Blink;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Kernel
{
    struct SINGLE_LIST_ENTRY32
    {
        uint32_t Next;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Kernel
{
    struct WNF_STATE_NAME
    {
        uint32_t Data[2];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Kernel
{
    struct STRING32
    {
        uint16_t Length;
        uint16_t MaximumLength;
        uint32_t Buffer;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Kernel
{
    struct STRING64
    {
        uint16_t Length;
        uint16_t MaximumLength;
        uint64_t Buffer;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Kernel
{
    struct OBJECT_ATTRIBUTES64
    {
        uint32_t Length;
        uint64_t RootDirectory;
        uint64_t ObjectName;
        uint32_t Attributes;
        uint64_t SecurityDescriptor;
        uint64_t SecurityQualityOfService;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Kernel
{
    struct OBJECT_ATTRIBUTES32
    {
        uint32_t Length;
        uint32_t RootDirectory;
        uint32_t ObjectName;
        uint32_t Attributes;
        uint32_t SecurityDescriptor;
        uint32_t SecurityQualityOfService;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Kernel
{
    struct OBJECTID
    {
        ::win32::guid Lineage;
        uint32_t Uniquifier;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PROCESSOR_NUMBER
    {
        uint16_t Group;
        uint8_t Number;
        uint8_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct STRING
    {
        uint16_t Length;
        uint16_t MaximumLength;
        int8_t* Buffer;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct UNICODE_STRING
    {
        uint16_t Length;
        uint16_t MaximumLength;
        uint16_t* Buffer;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct OVERLAPPED
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t Offset;
                uint32_t OffsetHigh;
            };
            _Anonymous_e__Struct Anonymous;
            void* Pointer;
        };
        size_t Internal;
        size_t InternalHigh;
        _Anonymous_e__Union Anonymous;
        Windows::Win32::SystemServices::HANDLE hEvent;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PROCESS_HEAP_ENTRY
    {
        union _Anonymous_e__Union
        {
            struct _Block_e__Struct
            {
                Windows::Win32::SystemServices::HANDLE hMem;
                uint32_t dwReserved[3];
            };
            struct _Region_e__Struct
            {
                uint32_t dwCommittedSize;
                uint32_t dwUnCommittedSize;
                void* lpFirstBlock;
                void* lpLastBlock;
            };
            _Block_e__Struct Block;
            _Region_e__Struct Region;
        };
        void* lpData;
        uint32_t cbData;
        uint8_t cbOverhead;
        uint8_t iRegionIndex;
        uint16_t wFlags;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct REASON_CONTEXT
    {
        union _Reason_e__Union
        {
            struct _Detailed_e__Struct
            {
                intptr_t LocalizedReasonModule;
                uint32_t LocalizedReasonId;
                uint32_t ReasonStringCount;
                uint16_t** ReasonStrings;
            };
            _Detailed_e__Struct Detailed;
            uint16_t* SimpleReasonString;
        };
        uint32_t Version;
        uint32_t Flags;
        _Reason_e__Union Reason;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct HEAP_SUMMARY
    {
        uint32_t cb;
        size_t cbAllocated;
        size_t cbCommitted;
        size_t cbReserved;
        size_t cbMaxReserve;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct WIN32_MEMORY_RANGE_ENTRY
    {
        void* VirtualAddress;
        size_t NumberOfBytes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct WIN32_MEMORY_REGION_INFORMATION
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t _bitfield;
            };
            uint32_t Flags;
            _Anonymous_e__Struct Anonymous;
        };
        void* AllocationBase;
        uint32_t AllocationProtect;
        _Anonymous_e__Union Anonymous;
        size_t RegionSize;
        size_t CommitSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct ENUMUILANG
    {
        uint32_t NumOfEnumUILang;
        uint32_t SizeOfEnumUIBuffer;
        uint16_t* pEnumUIBuffer;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct REDIRECTION_FUNCTION_DESCRIPTOR
    {
        int8_t* DllName;
        int8_t* FunctionName;
        void* RedirectionTarget;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct REDIRECTION_DESCRIPTOR
    {
        uint32_t Version;
        uint32_t FunctionCount;
        Windows::Win32::SystemServices::REDIRECTION_FUNCTION_DESCRIPTOR* Redirections;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct COORD
    {
        int16_t X;
        int16_t Y;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SMALL_RECT
    {
        int16_t Left;
        int16_t Top;
        int16_t Right;
        int16_t Bottom;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct KEY_EVENT_RECORD
    {
        union _uChar_e__Union
        {
            uint16_t UnicodeChar;
            int8_t AsciiChar;
        };
        Windows::Win32::SystemServices::BOOL bKeyDown;
        uint16_t wRepeatCount;
        uint16_t wVirtualKeyCode;
        uint16_t wVirtualScanCode;
        _uChar_e__Union uChar;
        uint32_t dwControlKeyState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct MOUSE_EVENT_RECORD
    {
        Windows::Win32::SystemServices::COORD dwMousePosition;
        uint32_t dwButtonState;
        uint32_t dwControlKeyState;
        uint32_t dwEventFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct WINDOW_BUFFER_SIZE_RECORD
    {
        Windows::Win32::SystemServices::COORD dwSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct MENU_EVENT_RECORD
    {
        uint32_t dwCommandId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct FOCUS_EVENT_RECORD
    {
        Windows::Win32::SystemServices::BOOL bSetFocus;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct INPUT_RECORD
    {
        union _Event_e__Union
        {
            Windows::Win32::SystemServices::KEY_EVENT_RECORD KeyEvent;
            Windows::Win32::SystemServices::MOUSE_EVENT_RECORD MouseEvent;
            Windows::Win32::SystemServices::WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent;
            Windows::Win32::SystemServices::MENU_EVENT_RECORD MenuEvent;
            Windows::Win32::SystemServices::FOCUS_EVENT_RECORD FocusEvent;
        };
        uint16_t EventType;
        _Event_e__Union Event;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct CHAR_INFO
    {
        union _Char_e__Union
        {
            uint16_t UnicodeChar;
            int8_t AsciiChar;
        };
        _Char_e__Union Char;
        uint16_t Attributes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct CONSOLE_FONT_INFO
    {
        uint32_t nFont;
        Windows::Win32::SystemServices::COORD dwFontSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct CONSOLE_READCONSOLE_CONTROL
    {
        uint32_t nLength;
        uint32_t nInitialChars;
        uint32_t dwCtrlWakeupMask;
        uint32_t dwControlKeyState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct CONSOLE_CURSOR_INFO
    {
        uint32_t dwSize;
        Windows::Win32::SystemServices::BOOL bVisible;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct CONSOLE_SCREEN_BUFFER_INFO
    {
        Windows::Win32::SystemServices::COORD dwSize;
        Windows::Win32::SystemServices::COORD dwCursorPosition;
        uint16_t wAttributes;
        Windows::Win32::SystemServices::SMALL_RECT srWindow;
        Windows::Win32::SystemServices::COORD dwMaximumWindowSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct CONSOLE_SCREEN_BUFFER_INFOEX
    {
        uint32_t cbSize;
        Windows::Win32::SystemServices::COORD dwSize;
        Windows::Win32::SystemServices::COORD dwCursorPosition;
        uint16_t wAttributes;
        Windows::Win32::SystemServices::SMALL_RECT srWindow;
        Windows::Win32::SystemServices::COORD dwMaximumWindowSize;
        uint16_t wPopupAttributes;
        Windows::Win32::SystemServices::BOOL bFullscreenSupported;
        uint32_t ColorTable[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct CONSOLE_FONT_INFOEX
    {
        uint32_t cbSize;
        uint32_t nFont;
        Windows::Win32::SystemServices::COORD dwFontSize;
        uint32_t FontFamily;
        uint32_t FontWeight;
        uint16_t FaceName[32];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct CONSOLE_SELECTION_INFO
    {
        uint32_t dwFlags;
        Windows::Win32::SystemServices::COORD dwSelectionAnchor;
        Windows::Win32::SystemServices::SMALL_RECT srSelection;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct CONSOLE_HISTORY_INFO
    {
        uint32_t cbSize;
        uint32_t HistoryBufferSize;
        uint32_t NumberOfHistoryBuffers;
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct RPC_IMPORT_CONTEXT_P
    {
        void* LookupContext;
        void* ProposedHandle;
        Windows::Win32::Rpc::RPC_BINDING_VECTOR* Bindings;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct RemHGLOBAL
    {
        int32_t fNullHGlobal;
        uint32_t cbData;
        uint8_t data[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct RemHMETAFILEPICT
    {
        int32_t mm;
        int32_t xExt;
        int32_t yExt;
        uint32_t cbData;
        uint8_t data[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct RemHENHMETAFILE
    {
        uint32_t cbData;
        uint8_t data[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct RemHBITMAP
    {
        uint32_t cbData;
        uint8_t data[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct RemHPALETTE
    {
        uint32_t cbData;
        uint8_t data[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct RemBRUSH
    {
        uint32_t cbData;
        uint8_t data[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct userCLIPFORMAT
    {
        union _u_e__Struct
        {
            uint32_t dwValue;
            uint16_t* pwszName;
        };
        int32_t fContext;
        _u_e__Struct u;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct GDI_NONREMOTE
    {
        union _u_e__Struct
        {
            int32_t hInproc;
            Windows::Win32::Com::DWORD_BLOB* hRemote;
        };
        int32_t fContext;
        _u_e__Struct u;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct userHGLOBAL
    {
        union _u_e__Struct
        {
            int32_t hInproc;
            Windows::Win32::Com::FLAGGED_BYTE_BLOB* hRemote;
            int64_t hInproc64;
        };
        int32_t fContext;
        _u_e__Struct u;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct userHMETAFILE
    {
        union _u_e__Struct
        {
            int32_t hInproc;
            Windows::Win32::Com::BYTE_BLOB* hRemote;
            int64_t hInproc64;
        };
        int32_t fContext;
        _u_e__Struct u;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct remoteMETAFILEPICT
    {
        int32_t mm;
        int32_t xExt;
        int32_t yExt;
        Windows::Win32::SystemServices::userHMETAFILE* hMF;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct userHMETAFILEPICT
    {
        union _u_e__Struct
        {
            int32_t hInproc;
            Windows::Win32::SystemServices::remoteMETAFILEPICT* hRemote;
            int64_t hInproc64;
        };
        int32_t fContext;
        _u_e__Struct u;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct userHENHMETAFILE
    {
        union _u_e__Struct
        {
            int32_t hInproc;
            Windows::Win32::Com::BYTE_BLOB* hRemote;
            int64_t hInproc64;
        };
        int32_t fContext;
        _u_e__Struct u;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct userBITMAP
    {
        int32_t bmType;
        int32_t bmWidth;
        int32_t bmHeight;
        int32_t bmWidthBytes;
        uint16_t bmPlanes;
        uint16_t bmBitsPixel;
        uint32_t cbSize;
        uint8_t pBuffer[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct userHBITMAP
    {
        union _u_e__Struct
        {
            int32_t hInproc;
            Windows::Win32::SystemServices::userBITMAP* hRemote;
            int64_t hInproc64;
        };
        int32_t fContext;
        _u_e__Struct u;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct userHPALETTE
    {
        union _u_e__Struct
        {
            int32_t hInproc;
            Windows::Win32::Gdi::LOGPALETTE* hRemote;
            int64_t hInproc64;
        };
        int32_t fContext;
        _u_e__Struct u;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct RemotableHandle
    {
        union _u_e__Struct
        {
            int32_t hInproc;
            int32_t hRemote;
        };
        int32_t fContext;
        _u_e__Struct u;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct BSTRBLOB
    {
        uint32_t cbSize;
        uint8_t* pData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct CLIPDATA
    {
        uint32_t cbSize;
        int32_t ulClipFmt;
        uint8_t* pClipData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct uCLSSPEC
    {
        union _tagged_union_e__Struct
        {
            struct _ByName_e__Struct
            {
                uint16_t* pPackageName;
                ::win32::guid PolicyId;
            };
            struct _ByObjectId_e__Struct
            {
                ::win32::guid ObjectId;
                ::win32::guid PolicyId;
            };
            ::win32::guid clsid;
            uint16_t* pFileExt;
            uint16_t* pMimeType;
            uint16_t* pProgId;
            uint16_t* pFileName;
            _ByName_e__Struct ByName;
            _ByObjectId_e__Struct ByObjectId;
        };
        uint32_t tyspec;
        _tagged_union_e__Struct tagged_union;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STORAGE_HOTPLUG_INFO
    {
        uint32_t Size;
        uint8_t MediaRemovable;
        uint8_t MediaHotplug;
        uint8_t DeviceHotplug;
        uint8_t WriteCacheEnableOverride;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STORAGE_DEVICE_NUMBERS
    {
        uint32_t Version;
        uint32_t Size;
        uint32_t NumberOfDevices;
        Windows::Win32::SystemServices::STORAGE_DEVICE_NUMBER Devices[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STORAGE_DEVICE_NUMBER_EX
    {
        uint32_t Version;
        uint32_t Size;
        uint32_t Flags;
        uint32_t DeviceType;
        uint32_t DeviceNumber;
        ::win32::guid DeviceGuid;
        uint32_t PartitionNumber;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STORAGE_BUS_RESET_REQUEST
    {
        uint8_t PathId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STORAGE_BREAK_RESERVATION_REQUEST
    {
        uint32_t Length;
        uint8_t _unused;
        uint8_t PathId;
        uint8_t TargetId;
        uint8_t Lun;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PREVENT_MEDIA_REMOVAL
    {
        uint8_t PreventMediaRemoval;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct CLASS_MEDIA_CHANGE_CONTEXT
    {
        uint32_t MediaChangeCount;
        uint32_t NewState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct TAPE_STATISTICS
    {
        uint32_t Version;
        uint32_t Flags;
        Windows::Win32::SystemServices::LARGE_INTEGER RecoveredWrites;
        Windows::Win32::SystemServices::LARGE_INTEGER UnrecoveredWrites;
        Windows::Win32::SystemServices::LARGE_INTEGER RecoveredReads;
        Windows::Win32::SystemServices::LARGE_INTEGER UnrecoveredReads;
        uint8_t CompressionRatioReads;
        uint8_t CompressionRatioWrites;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct TAPE_GET_STATISTICS
    {
        uint32_t Operation;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DEVICE_MEDIA_INFO
    {
        union _DeviceSpecific_e__Union
        {
            struct _DiskInfo_e__Struct
            {
                Windows::Win32::SystemServices::LARGE_INTEGER Cylinders;
                Windows::Win32::SystemServices::STORAGE_MEDIA_TYPE MediaType;
                uint32_t TracksPerCylinder;
                uint32_t SectorsPerTrack;
                uint32_t BytesPerSector;
                uint32_t NumberMediaSides;
                uint32_t MediaCharacteristics;
            };
            struct _RemovableDiskInfo_e__Struct
            {
                Windows::Win32::SystemServices::LARGE_INTEGER Cylinders;
                Windows::Win32::SystemServices::STORAGE_MEDIA_TYPE MediaType;
                uint32_t TracksPerCylinder;
                uint32_t SectorsPerTrack;
                uint32_t BytesPerSector;
                uint32_t NumberMediaSides;
                uint32_t MediaCharacteristics;
            };
            struct _TapeInfo_e__Struct
            {
                union _BusSpecificData_e__Union
                {
                    struct _ScsiInformation_e__Struct
                    {
                        uint8_t MediumType;
                        uint8_t DensityCode;
                    };
                    _ScsiInformation_e__Struct ScsiInformation;
                };
                Windows::Win32::SystemServices::STORAGE_MEDIA_TYPE MediaType;
                uint32_t MediaCharacteristics;
                uint32_t CurrentBlockSize;
                Windows::Win32::SystemServices::STORAGE_BUS_TYPE BusType;
                _BusSpecificData_e__Union BusSpecificData;
            };
            _DiskInfo_e__Struct DiskInfo;
            _RemovableDiskInfo_e__Struct RemovableDiskInfo;
            _TapeInfo_e__Struct TapeInfo;
        };
        _DeviceSpecific_e__Union DeviceSpecific;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct GET_MEDIA_TYPES
    {
        uint32_t DeviceType;
        uint32_t MediaInfoCount;
        Windows::Win32::SystemServices::DEVICE_MEDIA_INFO MediaInfo[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STORAGE_PREDICT_FAILURE
    {
        uint32_t PredictFailure;
        uint8_t VendorSpecific[512];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STORAGE_FAILURE_PREDICTION_CONFIG
    {
        uint32_t Version;
        uint32_t Size;
        uint8_t Set;
        uint8_t Enabled;
        uint16_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STORAGE_PROPERTY_SET
    {
        Windows::Win32::FileSystem::STORAGE_PROPERTY_ID PropertyId;
        Windows::Win32::SystemServices::STORAGE_SET_TYPE SetType;
        uint8_t AdditionalParameters[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STORAGE_IDENTIFIER
    {
        Windows::Win32::SystemServices::STORAGE_IDENTIFIER_CODE_SET CodeSet;
        Windows::Win32::SystemServices::STORAGE_IDENTIFIER_TYPE Type;
        uint16_t IdentifierSize;
        uint16_t NextOffset;
        Windows::Win32::SystemServices::STORAGE_ASSOCIATION_TYPE Association;
        uint8_t Identifier[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STORAGE_LB_PROVISIONING_MAP_RESOURCES
    {
        uint32_t Size;
        uint32_t Version;
        uint8_t _bitfield1;
        uint8_t Reserved1[3];
        uint8_t _bitfield2;
        uint8_t Reserved3[3];
        uint64_t AvailableMappingResources;
        uint64_t UsedMappingResources;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STORAGE_RPMB_DESCRIPTOR
    {
        uint32_t Version;
        uint32_t Size;
        uint32_t SizeInBytes;
        uint32_t MaxReliableWriteSizeInBytes;
        Windows::Win32::SystemServices::STORAGE_RPMB_FRAME_TYPE FrameFormat;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STORAGE_CRYPTO_CAPABILITY
    {
        uint32_t Version;
        uint32_t Size;
        uint32_t CryptoCapabilityIndex;
        Windows::Win32::SystemServices::STORAGE_CRYPTO_ALGORITHM_ID AlgorithmId;
        Windows::Win32::SystemServices::STORAGE_CRYPTO_KEY_SIZE KeySize;
        uint32_t DataUnitSizeBitmask;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STORAGE_CRYPTO_DESCRIPTOR
    {
        uint32_t Version;
        uint32_t Size;
        uint32_t NumKeysSupported;
        uint32_t NumCryptoCapabilities;
        Windows::Win32::SystemServices::STORAGE_CRYPTO_CAPABILITY CryptoCapabilities[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STORAGE_TIER
    {
        ::win32::guid Id;
        uint16_t Name[256];
        uint16_t Description[256];
        uint64_t Flags;
        uint64_t ProvisionedCapacity;
        Windows::Win32::SystemServices::STORAGE_TIER_MEDIA_TYPE MediaType;
        Windows::Win32::SystemServices::STORAGE_TIER_CLASS Class;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STORAGE_DEVICE_TIERING_DESCRIPTOR
    {
        uint32_t Version;
        uint32_t Size;
        uint32_t Flags;
        uint32_t TotalNumberOfTiers;
        uint32_t NumberOfTiersReturned;
        Windows::Win32::SystemServices::STORAGE_TIER Tiers[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STORAGE_DEVICE_FAULT_DOMAIN_DESCRIPTOR
    {
        uint32_t Version;
        uint32_t Size;
        uint32_t NumberOfFaultDomains;
        ::win32::guid FaultDomainIds[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STORAGE_PROTOCOL_SPECIFIC_DATA_EXT
    {
        Windows::Win32::FileSystem::STORAGE_PROTOCOL_TYPE ProtocolType;
        uint32_t DataType;
        uint32_t ProtocolDataValue;
        uint32_t ProtocolDataSubValue;
        uint32_t ProtocolDataOffset;
        uint32_t ProtocolDataLength;
        uint32_t FixedProtocolReturnData;
        uint32_t ProtocolDataSubValue2;
        uint32_t ProtocolDataSubValue3;
        uint32_t ProtocolDataSubValue4;
        uint32_t ProtocolDataSubValue5;
        uint32_t Reserved[5];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STORAGE_PROTOCOL_DATA_DESCRIPTOR_EXT
    {
        uint32_t Version;
        uint32_t Size;
        Windows::Win32::SystemServices::STORAGE_PROTOCOL_SPECIFIC_DATA_EXT ProtocolSpecificData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STORAGE_OPERATIONAL_REASON
    {
        union _RawBytes_e__Union
        {
            struct _ScsiSenseKey_e__Struct
            {
                uint8_t SenseKey;
                uint8_t ASC;
                uint8_t ASCQ;
                uint8_t Reserved;
            };
            struct _NVDIMM_N_e__Struct
            {
                uint8_t CriticalHealth;
                uint8_t ModuleHealth[2];
                uint8_t ErrorThresholdStatus;
            };
            _ScsiSenseKey_e__Struct ScsiSenseKey;
            _NVDIMM_N_e__Struct NVDIMM_N;
            uint32_t AsUlong;
        };
        uint32_t Version;
        uint32_t Size;
        Windows::Win32::SystemServices::STORAGE_OPERATIONAL_STATUS_REASON Reason;
        _RawBytes_e__Union RawBytes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STORAGE_DEVICE_MANAGEMENT_STATUS
    {
        uint32_t Version;
        uint32_t Size;
        Windows::Win32::SystemServices::STORAGE_DISK_HEALTH_STATUS Health;
        uint32_t NumberOfOperationalStatus;
        uint32_t NumberOfAdditionalReasons;
        Windows::Win32::SystemServices::STORAGE_DISK_OPERATIONAL_STATUS OperationalStatus[16];
        Windows::Win32::SystemServices::STORAGE_OPERATIONAL_REASON AdditionalReasons[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STORAGE_ZONE_GROUP
    {
        uint32_t ZoneCount;
        Windows::Win32::SystemServices::STORAGE_ZONE_TYPES ZoneType;
        uint64_t ZoneSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STORAGE_ZONED_DEVICE_DESCRIPTOR
    {
        union _ZoneAttributes_e__Union
        {
            struct _SequentialRequiredZone_e__Struct
            {
                uint32_t MaxOpenZoneCount;
                uint8_t UnrestrictedRead;
                uint8_t Reserved[3];
            };
            struct _SequentialPreferredZone_e__Struct
            {
                uint32_t OptimalOpenZoneCount;
                uint32_t Reserved;
            };
            _SequentialRequiredZone_e__Struct SequentialRequiredZone;
            _SequentialPreferredZone_e__Struct SequentialPreferredZone;
        };
        uint32_t Version;
        uint32_t Size;
        Windows::Win32::SystemServices::STORAGE_ZONED_DEVICE_TYPES DeviceType;
        uint32_t ZoneCount;
        _ZoneAttributes_e__Union ZoneAttributes;
        uint32_t ZoneGroupCount;
        Windows::Win32::SystemServices::STORAGE_ZONE_GROUP ZoneGroup[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DEVICE_LOCATION
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous1_e__Struct
            {
                uint32_t Channel;
                uint32_t Device;
            };
            struct _Anonymous2_e__Struct
            {
                uint32_t Target;
                uint32_t Lun;
            };
            _Anonymous1_e__Struct Anonymous1;
            _Anonymous2_e__Struct Anonymous2;
        };
        uint32_t Socket;
        uint32_t Slot;
        uint32_t Adapter;
        uint32_t Port;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STORAGE_DEVICE_LOCATION_DESCRIPTOR
    {
        uint32_t Version;
        uint32_t Size;
        Windows::Win32::SystemServices::DEVICE_LOCATION Location;
        uint32_t StringOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STORAGE_DEVICE_NUMA_PROPERTY
    {
        uint32_t Version;
        uint32_t Size;
        uint32_t NumaNode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STORAGE_DEVICE_UNSAFE_SHUTDOWN_COUNT
    {
        uint32_t Version;
        uint32_t Size;
        uint32_t UnsafeShutdownCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STORAGE_HW_ENDURANCE_INFO
    {
        struct _Flags_e__Struct
        {
            uint32_t _bitfield;
        };
        uint32_t ValidFields;
        uint32_t GroupId;
        _Flags_e__Struct Flags;
        uint32_t LifePercentage;
        uint8_t BytesReadCount[16];
        uint8_t ByteWriteCount[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STORAGE_HW_ENDURANCE_DATA_DESCRIPTOR
    {
        uint32_t Version;
        uint32_t Size;
        Windows::Win32::SystemServices::STORAGE_HW_ENDURANCE_INFO EnduranceInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DEVICE_DATA_SET_RANGE
    {
        int64_t StartingOffset;
        uint64_t LengthInBytes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DEVICE_MANAGE_DATA_SET_ATTRIBUTES
    {
        uint32_t Size;
        uint32_t Action;
        uint32_t Flags;
        uint32_t ParameterBlockOffset;
        uint32_t ParameterBlockLength;
        uint32_t DataSetRangesOffset;
        uint32_t DataSetRangesLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT
    {
        uint32_t Size;
        uint32_t Action;
        uint32_t Flags;
        uint32_t OperationStatus;
        uint32_t ExtendedError;
        uint32_t TargetDetailedError;
        uint32_t ReservedStatus;
        uint32_t OutputBlockOffset;
        uint32_t OutputBlockLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DEVICE_DSM_DEFINITION
    {
        uint32_t Action;
        uint8_t SingleRange;
        uint32_t ParameterBlockAlignment;
        uint32_t ParameterBlockLength;
        uint8_t HasOutput;
        uint32_t OutputBlockAlignment;
        uint32_t OutputBlockLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DEVICE_DSM_NOTIFICATION_PARAMETERS
    {
        uint32_t Size;
        uint32_t Flags;
        uint32_t NumFileTypeIDs;
        ::win32::guid FileTypeID[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STORAGE_OFFLOAD_TOKEN
    {
        union _Anonymous_e__Union
        {
            struct _StorageOffloadZeroDataToken_e__Struct
            {
                uint8_t Reserved2[504];
            };
            _StorageOffloadZeroDataToken_e__Struct StorageOffloadZeroDataToken;
            uint8_t Token[504];
        };
        uint8_t TokenType[4];
        uint8_t Reserved[2];
        uint8_t TokenIdLength[2];
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DEVICE_DSM_OFFLOAD_READ_PARAMETERS
    {
        uint32_t Flags;
        uint32_t TimeToLive;
        uint32_t Reserved[2];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STORAGE_OFFLOAD_READ_OUTPUT
    {
        uint32_t OffloadReadFlags;
        uint32_t Reserved;
        uint64_t LengthProtected;
        uint32_t TokenLength;
        Windows::Win32::SystemServices::STORAGE_OFFLOAD_TOKEN Token;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DEVICE_DSM_OFFLOAD_WRITE_PARAMETERS
    {
        uint32_t Flags;
        uint32_t Reserved;
        uint64_t TokenOffset;
        Windows::Win32::SystemServices::STORAGE_OFFLOAD_TOKEN Token;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STORAGE_OFFLOAD_WRITE_OUTPUT
    {
        uint32_t OffloadWriteFlags;
        uint32_t Reserved;
        uint64_t LengthCopied;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DEVICE_DATA_SET_LBP_STATE_PARAMETERS
    {
        uint32_t Version;
        uint32_t Size;
        uint32_t Flags;
        uint32_t OutputVersion;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DEVICE_DATA_SET_LB_PROVISIONING_STATE
    {
        uint32_t Size;
        uint32_t Version;
        uint64_t SlabSizeInBytes;
        uint32_t SlabOffsetDeltaInBytes;
        uint32_t SlabAllocationBitMapBitCount;
        uint32_t SlabAllocationBitMapLength;
        uint32_t SlabAllocationBitMap[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DEVICE_DATA_SET_LB_PROVISIONING_STATE_V2
    {
        uint32_t Size;
        uint32_t Version;
        uint64_t SlabSizeInBytes;
        uint64_t SlabOffsetDeltaInBytes;
        uint32_t SlabAllocationBitMapBitCount;
        uint32_t SlabAllocationBitMapLength;
        uint32_t SlabAllocationBitMap[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DEVICE_DATA_SET_REPAIR_PARAMETERS
    {
        uint32_t NumberOfRepairCopies;
        uint32_t SourceCopy;
        uint32_t RepairCopies[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DEVICE_DATA_SET_REPAIR_OUTPUT
    {
        Windows::Win32::SystemServices::DEVICE_DATA_SET_RANGE ParityExtent;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DEVICE_DATA_SET_SCRUB_OUTPUT
    {
        uint64_t BytesProcessed;
        uint64_t BytesRepaired;
        uint64_t BytesFailed;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DEVICE_DATA_SET_SCRUB_EX_OUTPUT
    {
        uint64_t BytesProcessed;
        uint64_t BytesRepaired;
        uint64_t BytesFailed;
        Windows::Win32::SystemServices::DEVICE_DATA_SET_RANGE ParityExtent;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DEVICE_DSM_TIERING_QUERY_INPUT
    {
        uint32_t Version;
        uint32_t Size;
        uint32_t Flags;
        uint32_t NumberOfTierIds;
        ::win32::guid TierIds[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STORAGE_TIER_REGION
    {
        ::win32::guid TierId;
        uint64_t Offset;
        uint64_t Length;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DEVICE_DSM_TIERING_QUERY_OUTPUT
    {
        uint32_t Version;
        uint32_t Size;
        uint32_t Flags;
        uint32_t Reserved;
        uint64_t Alignment;
        uint32_t TotalNumberOfRegions;
        uint32_t NumberOfRegionsReturned;
        Windows::Win32::SystemServices::STORAGE_TIER_REGION Regions[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DEVICE_DSM_NVCACHE_CHANGE_PRIORITY_PARAMETERS
    {
        uint32_t Size;
        uint8_t TargetPriority;
        uint8_t Reserved[3];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT
    {
        uint64_t TopologyRangeBytes;
        uint8_t TopologyId[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DEVICE_STORAGE_ADDRESS_RANGE
    {
        int64_t StartAddress;
        uint64_t LengthInBytes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT
    {
        uint32_t Version;
        uint32_t Flags;
        uint32_t TotalNumberOfRanges;
        uint32_t NumberOfRangesReturned;
        Windows::Win32::SystemServices::DEVICE_STORAGE_ADDRESS_RANGE Ranges[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DEVICE_DSM_REPORT_ZONES_PARAMETERS
    {
        uint32_t Size;
        uint8_t ReportOption;
        uint8_t Partial;
        uint8_t Reserved[2];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STORAGE_ZONE_DESCRIPTOR
    {
        uint32_t Size;
        Windows::Win32::SystemServices::STORAGE_ZONE_TYPES ZoneType;
        Windows::Win32::SystemServices::STORAGE_ZONE_CONDITION ZoneCondition;
        uint8_t ResetWritePointerRecommend;
        uint8_t Reserved0[3];
        uint64_t ZoneSize;
        uint64_t WritePointerOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DEVICE_DSM_REPORT_ZONES_DATA
    {
        uint32_t Size;
        uint32_t ZoneCount;
        Windows::Win32::SystemServices::STORAGE_ZONES_ATTRIBUTES Attributes;
        uint32_t Reserved0;
        Windows::Win32::SystemServices::STORAGE_ZONE_DESCRIPTOR ZoneDescriptors[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DEVICE_STORAGE_RANGE_ATTRIBUTES
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t _bitfield;
            };
            uint32_t AllFlags;
            _Anonymous_e__Struct Anonymous;
        };
        uint64_t LengthInBytes;
        _Anonymous_e__Union Anonymous;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DEVICE_DSM_RANGE_ERROR_INFO
    {
        uint32_t Version;
        uint32_t Flags;
        uint32_t TotalNumberOfRanges;
        uint32_t NumberOfRangesReturned;
        Windows::Win32::SystemServices::DEVICE_STORAGE_RANGE_ATTRIBUTES Ranges[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DEVICE_DSM_LOST_QUERY_PARAMETERS
    {
        uint32_t Version;
        uint64_t Granularity;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DEVICE_DSM_LOST_QUERY_OUTPUT
    {
        uint32_t Version;
        uint32_t Size;
        uint64_t Alignment;
        uint32_t NumberOfBits;
        uint32_t BitMap[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DEVICE_DSM_FREE_SPACE_OUTPUT
    {
        uint32_t Version;
        uint64_t FreeSpace;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DEVICE_DSM_CONVERSION_OUTPUT
    {
        uint32_t Version;
        ::win32::guid Source;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STORAGE_GET_BC_PROPERTIES_OUTPUT
    {
        uint32_t MaximumRequestsPerPeriod;
        uint32_t MinimumPeriod;
        uint64_t MaximumRequestSize;
        uint32_t EstimatedTimePerRequest;
        uint32_t NumOutStandingRequests;
        uint64_t RequestSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STORAGE_ALLOCATE_BC_STREAM_INPUT
    {
        uint32_t Version;
        uint32_t RequestsPerPeriod;
        uint32_t Period;
        uint8_t RetryFailures;
        uint8_t Discardable;
        uint8_t Reserved1[2];
        uint32_t AccessType;
        uint32_t AccessMode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STORAGE_ALLOCATE_BC_STREAM_OUTPUT
    {
        uint64_t RequestSize;
        uint32_t NumOutStandingRequests;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STORAGE_PRIORITY_HINT_SUPPORT
    {
        uint32_t SupportFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STORAGE_DIAGNOSTIC_REQUEST
    {
        uint32_t Version;
        uint32_t Size;
        uint32_t Reserved;
        Windows::Win32::SystemServices::STORAGE_DIAGNOSTIC_TARGET_TYPE TargetType;
        Windows::Win32::SystemServices::STORAGE_DIAGNOSTIC_LEVEL Level;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STORAGE_DIAGNOSTIC_DATA
    {
        uint32_t Version;
        uint32_t Size;
        ::win32::guid ProviderId;
        uint32_t BufferSize;
        uint32_t Reserved;
        uint8_t DiagnosticDataBuffer[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PHYSICAL_ELEMENT_STATUS_REQUEST
    {
        uint32_t Version;
        uint32_t Size;
        uint32_t StartingElement;
        uint8_t Filter;
        uint8_t ReportType;
        uint8_t Reserved[2];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PHYSICAL_ELEMENT_STATUS_DESCRIPTOR
    {
        uint32_t Version;
        uint32_t Size;
        uint32_t ElementIdentifier;
        uint8_t PhysicalElementType;
        uint8_t PhysicalElementHealth;
        uint8_t Reserved1[2];
        uint64_t AssociatedCapacity;
        uint32_t Reserved2[4];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PHYSICAL_ELEMENT_STATUS
    {
        uint32_t Version;
        uint32_t Size;
        uint32_t DescriptorCount;
        uint32_t ReturnedDescriptorCount;
        uint32_t ElementIdentifierBeingDepoped;
        uint32_t Reserved;
        Windows::Win32::SystemServices::PHYSICAL_ELEMENT_STATUS_DESCRIPTOR Descriptors[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct REMOVE_ELEMENT_AND_TRUNCATE_REQUEST
    {
        uint32_t Version;
        uint32_t Size;
        uint64_t RequestCapacity;
        uint32_t ElementIdentifier;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct GET_DEVICE_INTERNAL_STATUS_DATA_REQUEST
    {
        uint32_t Version;
        uint32_t Size;
        Windows::Win32::SystemServices::DEVICE_INTERNAL_STATUS_DATA_REQUEST_TYPE RequestDataType;
        Windows::Win32::SystemServices::DEVICE_INTERNAL_STATUS_DATA_SET RequestDataSet;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DEVICE_INTERNAL_STATUS_DATA
    {
        uint32_t Version;
        uint32_t Size;
        uint64_t T10VendorId;
        uint32_t DataSet1Length;
        uint32_t DataSet2Length;
        uint32_t DataSet3Length;
        uint32_t DataSet4Length;
        uint8_t StatusDataVersion;
        uint8_t Reserved[3];
        uint8_t ReasonIdentifier[128];
        uint32_t StatusDataLength;
        uint8_t StatusData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STORAGE_MEDIA_SERIAL_NUMBER_DATA
    {
        uint16_t Reserved;
        uint16_t SerialNumberLength;
        uint8_t SerialNumber[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STORAGE_READ_CAPACITY
    {
        uint32_t Version;
        uint32_t Size;
        uint32_t BlockLength;
        Windows::Win32::SystemServices::LARGE_INTEGER NumberOfBlocks;
        Windows::Win32::SystemServices::LARGE_INTEGER DiskLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PERSISTENT_RESERVE_COMMAND
    {
        union _Anonymous_e__Union
        {
            struct _PR_IN_e__Struct
            {
                uint8_t _bitfield;
                uint16_t AllocationLength;
            };
            struct _PR_OUT_e__Struct
            {
                uint8_t _bitfield1;
                uint8_t _bitfield2;
                uint8_t ParameterList[1];
            };
            _PR_IN_e__Struct PR_IN;
            _PR_OUT_e__Struct PR_OUT;
        };
        uint32_t Version;
        uint32_t Size;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DEVICEDUMP_SUBSECTION_POINTER
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        uint32_t dwOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DEVICEDUMP_STRUCTURE_VERSION
    {
        uint32_t dwSignature;
        uint32_t dwVersion;
        uint32_t dwSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DEVICEDUMP_SECTION_HEADER
    {
        ::win32::guid guidDeviceDataId;
        uint8_t sOrganizationID[16];
        uint32_t dwFirmwareRevision;
        uint8_t sModelNumber[32];
        uint8_t szDeviceManufacturingID[32];
        uint32_t dwFlags;
        uint32_t bRestrictedPrivateDataVersion;
        uint32_t dwFirmwareIssueId;
        uint8_t szIssueDescriptionString[132];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct GP_LOG_PAGE_DESCRIPTOR
    {
        uint16_t LogAddress;
        uint16_t LogSectors;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DEVICEDUMP_PUBLIC_SUBSECTION
    {
        uint32_t dwFlags;
        Windows::Win32::SystemServices::GP_LOG_PAGE_DESCRIPTOR GPLogTable[16];
        int8_t szDescription[16];
        uint8_t bData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DEVICEDUMP_RESTRICTED_SUBSECTION
    {
        uint8_t bData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DEVICEDUMP_PRIVATE_SUBSECTION
    {
        uint32_t dwFlags;
        Windows::Win32::SystemServices::GP_LOG_PAGE_DESCRIPTOR GPLogId;
        uint8_t bData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DEVICEDUMP_STORAGEDEVICE_DATA
    {
        Windows::Win32::SystemServices::DEVICEDUMP_STRUCTURE_VERSION Descriptor;
        Windows::Win32::SystemServices::DEVICEDUMP_SECTION_HEADER SectionHeader;
        uint32_t dwBufferSize;
        uint32_t dwReasonForCollection;
        Windows::Win32::SystemServices::DEVICEDUMP_SUBSECTION_POINTER PublicData;
        Windows::Win32::SystemServices::DEVICEDUMP_SUBSECTION_POINTER RestrictedData;
        Windows::Win32::SystemServices::DEVICEDUMP_SUBSECTION_POINTER PrivateData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD
    {
        union _StackSpecific_e__Union
        {
            struct _ExternalStack_e__Struct
            {
                uint32_t dwReserved;
            };
            struct _AtaPort_e__Struct
            {
                uint32_t dwAtaPortSpecific;
            };
            struct _StorPort_e__Struct
            {
                uint32_t SrbTag;
            };
            _ExternalStack_e__Struct ExternalStack;
            _AtaPort_e__Struct AtaPort;
            _StorPort_e__Struct StorPort;
        };
        uint8_t Cdb[16];
        uint8_t Command[16];
        uint64_t StartTime;
        uint64_t EndTime;
        uint32_t OperationStatus;
        uint32_t OperationError;
        _StackSpecific_e__Union StackSpecific;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DEVICEDUMP_STORAGESTACK_PUBLIC_DUMP
    {
        Windows::Win32::SystemServices::DEVICEDUMP_STRUCTURE_VERSION Descriptor;
        uint32_t dwReasonForCollection;
        uint8_t cDriverName[16];
        uint32_t uiNumRecords;
        Windows::Win32::SystemServices::DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD RecordArray[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STORAGE_IDLE_POWER
    {
        uint32_t Version;
        uint32_t Size;
        uint32_t _bitfield;
        uint32_t D3IdleTimeout;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STORAGE_IDLE_POWERUP_REASON
    {
        uint32_t Version;
        uint32_t Size;
        Windows::Win32::SystemServices::STORAGE_POWERUP_REASON_TYPE PowerupReason;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STORAGE_RPMB_DATA_FRAME
    {
        uint8_t Stuff[196];
        uint8_t KeyOrMAC[32];
        uint8_t Data[256];
        uint8_t Nonce[16];
        uint8_t WriteCounter[4];
        uint8_t Address[2];
        uint8_t BlockCount[2];
        uint8_t OperationResult[2];
        uint8_t RequestOrResponseType[2];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STORAGE_EVENT_NOTIFICATION
    {
        uint32_t Version;
        uint32_t Size;
        uint64_t Events;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STORAGE_COUNTER
    {
        union _Value_e__Union
        {
            struct _ManufactureDate_e__Struct
            {
                uint32_t Week;
                uint32_t Year;
            };
            _ManufactureDate_e__Struct ManufactureDate;
            uint64_t AsUlonglong;
        };
        Windows::Win32::SystemServices::STORAGE_COUNTER_TYPE Type;
        _Value_e__Union Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STORAGE_COUNTERS
    {
        uint32_t Version;
        uint32_t Size;
        uint32_t NumberOfCounters;
        Windows::Win32::SystemServices::STORAGE_COUNTER Counters[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STORAGE_HW_FIRMWARE_INFO_QUERY
    {
        uint32_t Version;
        uint32_t Size;
        uint32_t Flags;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STORAGE_HW_FIRMWARE_SLOT_INFO
    {
        uint32_t Version;
        uint32_t Size;
        uint8_t SlotNumber;
        uint8_t _bitfield;
        uint8_t Reserved1[6];
        uint8_t Revision[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STORAGE_HW_FIRMWARE_INFO
    {
        uint32_t Version;
        uint32_t Size;
        uint8_t _bitfield;
        uint8_t SlotCount;
        uint8_t ActiveSlot;
        uint8_t PendingActivateSlot;
        uint8_t FirmwareShared;
        uint8_t Reserved[3];
        uint32_t ImagePayloadAlignment;
        uint32_t ImagePayloadMaxSize;
        Windows::Win32::SystemServices::STORAGE_HW_FIRMWARE_SLOT_INFO Slot[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STORAGE_HW_FIRMWARE_DOWNLOAD_V2
    {
        uint32_t Version;
        uint32_t Size;
        uint32_t Flags;
        uint8_t Slot;
        uint8_t Reserved[3];
        uint64_t Offset;
        uint64_t BufferSize;
        uint32_t ImageSize;
        uint32_t Reserved2;
        uint8_t ImageBuffer[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STORAGE_ATTRIBUTE_MGMT
    {
        uint32_t Version;
        uint32_t Size;
        Windows::Win32::SystemServices::STORAGE_ATTRIBUTE_MGMT_ACTION Action;
        uint32_t Attribute;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SCM_PD_HEALTH_NOTIFICATION_DATA
    {
        ::win32::guid DeviceGuid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SCM_LOGICAL_DEVICE_INSTANCE
    {
        uint32_t Version;
        uint32_t Size;
        ::win32::guid DeviceGuid;
        uint16_t SymbolicLink[256];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SCM_LOGICAL_DEVICES
    {
        uint32_t Version;
        uint32_t Size;
        uint32_t DeviceCount;
        Windows::Win32::SystemServices::SCM_LOGICAL_DEVICE_INSTANCE Devices[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SCM_PHYSICAL_DEVICE_INSTANCE
    {
        uint32_t Version;
        uint32_t Size;
        uint32_t NfitHandle;
        uint16_t SymbolicLink[256];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SCM_PHYSICAL_DEVICES
    {
        uint32_t Version;
        uint32_t Size;
        uint32_t DeviceCount;
        Windows::Win32::SystemServices::SCM_PHYSICAL_DEVICE_INSTANCE Devices[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SCM_REGION
    {
        uint32_t Version;
        uint32_t Size;
        uint32_t Flags;
        uint32_t NfitHandle;
        ::win32::guid LogicalDeviceGuid;
        ::win32::guid AddressRangeType;
        uint32_t AssociatedId;
        uint64_t Length;
        uint64_t StartingDPA;
        uint64_t BaseSPA;
        uint64_t SPAOffset;
        uint64_t RegionOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SCM_REGIONS
    {
        uint32_t Version;
        uint32_t Size;
        uint32_t RegionCount;
        Windows::Win32::SystemServices::SCM_REGION Regions[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SCM_INTERLEAVED_PD_INFO
    {
        uint32_t DeviceHandle;
        ::win32::guid DeviceGuid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SCM_LD_INTERLEAVE_SET_INFO
    {
        uint32_t Version;
        uint32_t Size;
        uint32_t InterleaveSetSize;
        Windows::Win32::SystemServices::SCM_INTERLEAVED_PD_INFO InterleaveSet[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SCM_PD_PROPERTY_QUERY
    {
        uint32_t Version;
        uint32_t Size;
        Windows::Win32::SystemServices::SCM_PD_PROPERTY_ID PropertyId;
        Windows::Win32::SystemServices::SCM_PD_QUERY_TYPE QueryType;
        uint8_t AdditionalParameters[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SCM_PD_DESCRIPTOR_HEADER
    {
        uint32_t Version;
        uint32_t Size;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SCM_PD_DEVICE_HANDLE
    {
        uint32_t Version;
        uint32_t Size;
        ::win32::guid DeviceGuid;
        uint32_t DeviceHandle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SCM_PD_DEVICE_INFO
    {
        uint32_t Version;
        uint32_t Size;
        ::win32::guid DeviceGuid;
        uint32_t UnsafeShutdownCount;
        uint64_t PersistentMemorySizeInBytes;
        uint64_t VolatileMemorySizeInBytes;
        uint64_t TotalMemorySizeInBytes;
        uint32_t SlotNumber;
        uint32_t DeviceHandle;
        uint16_t PhysicalId;
        uint8_t NumberOfFormatInterfaceCodes;
        uint16_t FormatInterfaceCodes[8];
        uint32_t VendorId;
        uint32_t ProductId;
        uint32_t SubsystemDeviceId;
        uint32_t SubsystemVendorId;
        uint8_t ManufacturingLocation;
        uint8_t ManufacturingWeek;
        uint8_t ManufacturingYear;
        uint32_t SerialNumber4Byte;
        uint32_t SerialNumberLengthInChars;
        int8_t SerialNumber[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SCM_PD_DEVICE_SPECIFIC_PROPERTY
    {
        uint16_t Name[128];
        int64_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SCM_PD_DEVICE_SPECIFIC_INFO
    {
        uint32_t Version;
        uint32_t Size;
        uint32_t NumberOfProperties;
        Windows::Win32::SystemServices::SCM_PD_DEVICE_SPECIFIC_PROPERTY DeviceSpecificProperties[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SCM_PD_FIRMWARE_SLOT_INFO
    {
        uint32_t Version;
        uint32_t Size;
        uint8_t SlotNumber;
        uint8_t _bitfield;
        uint8_t Reserved1[6];
        uint8_t Revision[32];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SCM_PD_FIRMWARE_INFO
    {
        uint32_t Version;
        uint32_t Size;
        uint8_t ActiveSlot;
        uint8_t NextActiveSlot;
        uint8_t SlotCount;
        Windows::Win32::SystemServices::SCM_PD_FIRMWARE_SLOT_INFO Slots[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SCM_PD_MANAGEMENT_STATUS
    {
        uint32_t Version;
        uint32_t Size;
        Windows::Win32::SystemServices::SCM_PD_HEALTH_STATUS Health;
        uint32_t NumberOfOperationalStatus;
        uint32_t NumberOfAdditionalReasons;
        Windows::Win32::SystemServices::SCM_PD_OPERATIONAL_STATUS OperationalStatus[16];
        Windows::Win32::SystemServices::SCM_PD_OPERATIONAL_STATUS_REASON AdditionalReasons[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SCM_PD_LOCATION_STRING
    {
        uint32_t Version;
        uint32_t Size;
        uint16_t Location[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SCM_PD_FIRMWARE_DOWNLOAD
    {
        uint32_t Version;
        uint32_t Size;
        uint32_t Flags;
        uint8_t Slot;
        uint8_t Reserved[3];
        uint64_t Offset;
        uint32_t FirmwareImageSizeInBytes;
        uint8_t FirmwareImage[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SCM_PD_FIRMWARE_ACTIVATE
    {
        uint32_t Version;
        uint32_t Size;
        uint32_t Flags;
        uint8_t Slot;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SCM_PD_PASSTHROUGH_INPUT
    {
        uint32_t Version;
        uint32_t Size;
        ::win32::guid ProtocolGuid;
        uint32_t DataSize;
        uint8_t Data[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SCM_PD_PASSTHROUGH_OUTPUT
    {
        uint32_t Version;
        uint32_t Size;
        ::win32::guid ProtocolGuid;
        uint32_t DataSize;
        uint8_t Data[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SCM_PD_PASSTHROUGH_INVDIMM_INPUT
    {
        uint32_t Opcode;
        uint32_t OpcodeParametersLength;
        uint8_t OpcodeParameters[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT
    {
        uint16_t GeneralStatus;
        uint16_t ExtendedStatus;
        uint32_t OutputDataLength;
        uint8_t OutputData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SCM_PD_REINITIALIZE_MEDIA_INPUT
    {
        struct _Options_e__Struct
        {
            uint32_t _bitfield;
        };
        uint32_t Version;
        uint32_t Size;
        _Options_e__Struct Options;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SCM_PD_REINITIALIZE_MEDIA_OUTPUT
    {
        uint32_t Version;
        uint32_t Size;
        Windows::Win32::SystemServices::SCM_PD_MEDIA_REINITIALIZATION_STATUS Status;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct SET_PARTITION_INFORMATION
    {
        uint8_t PartitionType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct PARTITION_INFORMATION_GPT
    {
        ::win32::guid PartitionType;
        ::win32::guid PartitionId;
        uint64_t Attributes;
        uint16_t Name[36];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SET_PARTITION_INFORMATION_EX
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::FileSystem::SET_PARTITION_INFORMATION Mbr;
            Windows::Win32::FileSystem::PARTITION_INFORMATION_GPT Gpt;
        };
        Windows::Win32::FileSystem::PARTITION_STYLE PartitionStyle;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DISK_CONTROLLER_NUMBER
    {
        uint32_t ControllerNumber;
        uint32_t DiskNumber;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct HISTOGRAM_BUCKET
    {
        uint32_t Reads;
        uint32_t Writes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DISK_HISTOGRAM
    {
        Windows::Win32::SystemServices::LARGE_INTEGER DiskSize;
        Windows::Win32::SystemServices::LARGE_INTEGER Start;
        Windows::Win32::SystemServices::LARGE_INTEGER End;
        Windows::Win32::SystemServices::LARGE_INTEGER Average;
        Windows::Win32::SystemServices::LARGE_INTEGER AverageRead;
        Windows::Win32::SystemServices::LARGE_INTEGER AverageWrite;
        uint32_t Granularity;
        uint32_t Size;
        uint32_t ReadCount;
        uint32_t WriteCount;
        Windows::Win32::SystemServices::HISTOGRAM_BUCKET* Histogram;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DISK_RECORD
    {
        Windows::Win32::SystemServices::LARGE_INTEGER ByteOffset;
        Windows::Win32::SystemServices::LARGE_INTEGER StartTime;
        Windows::Win32::SystemServices::LARGE_INTEGER EndTime;
        void* VirtualAddress;
        uint32_t NumberOfBytes;
        uint8_t DeviceNumber;
        uint8_t ReadRequest;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DISK_LOGGING
    {
        uint8_t Function;
        void* BufferAddress;
        uint32_t BufferSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct BIN_RANGE
    {
        Windows::Win32::SystemServices::LARGE_INTEGER StartValue;
        Windows::Win32::SystemServices::LARGE_INTEGER Length;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PERF_BIN
    {
        uint32_t NumberOfBins;
        uint32_t TypeOfBin;
        Windows::Win32::SystemServices::BIN_RANGE BinsRanges[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct BIN_COUNT
    {
        Windows::Win32::SystemServices::BIN_RANGE BinRange;
        uint32_t BinCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct BIN_RESULTS
    {
        uint32_t NumberOfBins;
        Windows::Win32::SystemServices::BIN_COUNT BinCounts[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct GETVERSIONINPARAMS
    {
        uint8_t bVersion;
        uint8_t bRevision;
        uint8_t bReserved;
        uint8_t bIDEDeviceMap;
        uint32_t fCapabilities;
        uint32_t dwReserved[4];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IDEREGS
    {
        uint8_t bFeaturesReg;
        uint8_t bSectorCountReg;
        uint8_t bSectorNumberReg;
        uint8_t bCylLowReg;
        uint8_t bCylHighReg;
        uint8_t bDriveHeadReg;
        uint8_t bCommandReg;
        uint8_t bReserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SENDCMDINPARAMS
    {
        uint32_t cBufferSize;
        Windows::Win32::SystemServices::IDEREGS irDriveRegs;
        uint8_t bDriveNumber;
        uint8_t bReserved[3];
        uint32_t dwReserved[4];
        uint8_t bBuffer[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DRIVERSTATUS
    {
        uint8_t bDriverError;
        uint8_t bIDEError;
        uint8_t bReserved[2];
        uint32_t dwReserved[2];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SENDCMDOUTPARAMS
    {
        uint32_t cBufferSize;
        Windows::Win32::SystemServices::DRIVERSTATUS DriverStatus;
        uint8_t bBuffer[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct CHANGER_ELEMENT
    {
        Windows::Win32::SystemServices::ELEMENT_TYPE ElementType;
        uint32_t ElementAddress;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct CHANGER_ELEMENT_LIST
    {
        Windows::Win32::SystemServices::CHANGER_ELEMENT Element;
        uint32_t NumberOfElements;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct GET_CHANGER_PARAMETERS
    {
        uint32_t Size;
        uint16_t NumberTransportElements;
        uint16_t NumberStorageElements;
        uint16_t NumberCleanerSlots;
        uint16_t NumberIEElements;
        uint16_t NumberDataTransferElements;
        uint16_t NumberOfDoors;
        uint16_t FirstSlotNumber;
        uint16_t FirstDriveNumber;
        uint16_t FirstTransportNumber;
        uint16_t FirstIEPortNumber;
        uint16_t FirstCleanerSlotAddress;
        uint16_t MagazineSize;
        uint32_t DriveCleanTimeout;
        uint32_t Features0;
        uint32_t Features1;
        uint8_t MoveFromTransport;
        uint8_t MoveFromSlot;
        uint8_t MoveFromIePort;
        uint8_t MoveFromDrive;
        uint8_t ExchangeFromTransport;
        uint8_t ExchangeFromSlot;
        uint8_t ExchangeFromIePort;
        uint8_t ExchangeFromDrive;
        uint8_t LockUnlockCapabilities;
        uint8_t PositionCapabilities;
        uint8_t Reserved1[2];
        uint32_t Reserved2[2];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct CHANGER_PRODUCT_DATA
    {
        uint8_t VendorId[8];
        uint8_t ProductId[16];
        uint8_t Revision[4];
        uint8_t SerialNumber[32];
        uint8_t DeviceType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct CHANGER_SET_ACCESS
    {
        Windows::Win32::SystemServices::CHANGER_ELEMENT Element;
        uint32_t Control;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct CHANGER_READ_ELEMENT_STATUS
    {
        Windows::Win32::SystemServices::CHANGER_ELEMENT_LIST ElementList;
        uint8_t VolumeTagInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct CHANGER_ELEMENT_STATUS
    {
        Windows::Win32::SystemServices::CHANGER_ELEMENT Element;
        Windows::Win32::SystemServices::CHANGER_ELEMENT SrcElementAddress;
        uint32_t Flags;
        uint32_t ExceptionCode;
        uint8_t TargetId;
        uint8_t Lun;
        uint16_t Reserved;
        uint8_t PrimaryVolumeID[36];
        uint8_t AlternateVolumeID[36];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct CHANGER_ELEMENT_STATUS_EX
    {
        Windows::Win32::SystemServices::CHANGER_ELEMENT Element;
        Windows::Win32::SystemServices::CHANGER_ELEMENT SrcElementAddress;
        uint32_t Flags;
        uint32_t ExceptionCode;
        uint8_t TargetId;
        uint8_t Lun;
        uint16_t Reserved;
        uint8_t PrimaryVolumeID[36];
        uint8_t AlternateVolumeID[36];
        uint8_t VendorIdentification[8];
        uint8_t ProductIdentification[16];
        uint8_t SerialNumber[32];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct CHANGER_INITIALIZE_ELEMENT_STATUS
    {
        Windows::Win32::SystemServices::CHANGER_ELEMENT_LIST ElementList;
        uint8_t BarCodeScan;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct CHANGER_SET_POSITION
    {
        Windows::Win32::SystemServices::CHANGER_ELEMENT Transport;
        Windows::Win32::SystemServices::CHANGER_ELEMENT Destination;
        uint8_t Flip;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct CHANGER_EXCHANGE_MEDIUM
    {
        Windows::Win32::SystemServices::CHANGER_ELEMENT Transport;
        Windows::Win32::SystemServices::CHANGER_ELEMENT Source;
        Windows::Win32::SystemServices::CHANGER_ELEMENT Destination1;
        Windows::Win32::SystemServices::CHANGER_ELEMENT Destination2;
        uint8_t Flip1;
        uint8_t Flip2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct CHANGER_MOVE_MEDIUM
    {
        Windows::Win32::SystemServices::CHANGER_ELEMENT Transport;
        Windows::Win32::SystemServices::CHANGER_ELEMENT Source;
        Windows::Win32::SystemServices::CHANGER_ELEMENT Destination;
        uint8_t Flip;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct CHANGER_SEND_VOLUME_TAG_INFORMATION
    {
        Windows::Win32::SystemServices::CHANGER_ELEMENT StartingElement;
        uint32_t ActionCode;
        uint8_t VolumeIDTemplate[40];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct READ_ELEMENT_ADDRESS_INFO
    {
        uint32_t NumberOfElements;
        Windows::Win32::SystemServices::CHANGER_ELEMENT_STATUS ElementStatus[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PATHNAME_BUFFER
    {
        uint32_t PathNameLength;
        uint16_t Name[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct FSCTL_QUERY_FAT_BPB_BUFFER
    {
        uint8_t First0x24BytesOfBootSector[36];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct REFS_VOLUME_DATA_BUFFER
    {
        uint32_t ByteCount;
        uint32_t MajorVersion;
        uint32_t MinorVersion;
        uint32_t BytesPerPhysicalSector;
        Windows::Win32::SystemServices::LARGE_INTEGER VolumeSerialNumber;
        Windows::Win32::SystemServices::LARGE_INTEGER NumberSectors;
        Windows::Win32::SystemServices::LARGE_INTEGER TotalClusters;
        Windows::Win32::SystemServices::LARGE_INTEGER FreeClusters;
        Windows::Win32::SystemServices::LARGE_INTEGER TotalReserved;
        uint32_t BytesPerSector;
        uint32_t BytesPerCluster;
        Windows::Win32::SystemServices::LARGE_INTEGER MaximumSizeOfResidentFile;
        uint16_t FastTierDataFillRatio;
        uint16_t SlowTierDataFillRatio;
        uint32_t DestagesFastTierToSlowTierRate;
        Windows::Win32::SystemServices::LARGE_INTEGER Reserved[9];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STARTING_LCN_INPUT_BUFFER_EX
    {
        Windows::Win32::SystemServices::LARGE_INTEGER StartingLcn;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct RETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER
    {
        struct _Anonymous_e__Struct
        {
            Windows::Win32::SystemServices::LARGE_INTEGER NextVcn;
            Windows::Win32::SystemServices::LARGE_INTEGER Lcn;
            uint32_t ReferenceCount;
        };
        uint32_t ExtentCount;
        Windows::Win32::SystemServices::LARGE_INTEGER StartingVcn;
        _Anonymous_e__Struct Extents[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct RETRIEVAL_POINTER_COUNT
    {
        uint32_t ExtentCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct MOVE_FILE_RECORD_DATA
    {
        Windows::Win32::SystemServices::HANDLE FileHandle;
        Windows::Win32::SystemServices::LARGE_INTEGER SourceFileRecord;
        Windows::Win32::SystemServices::LARGE_INTEGER TargetFileRecord;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct USN_RECORD_COMMON_HEADER
    {
        uint32_t RecordLength;
        uint16_t MajorVersion;
        uint16_t MinorVersion;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct USN_RECORD_V2
    {
        uint32_t RecordLength;
        uint16_t MajorVersion;
        uint16_t MinorVersion;
        uint64_t FileReferenceNumber;
        uint64_t ParentFileReferenceNumber;
        int64_t Usn;
        Windows::Win32::SystemServices::LARGE_INTEGER TimeStamp;
        uint32_t Reason;
        uint32_t SourceInfo;
        uint32_t SecurityId;
        uint32_t FileAttributes;
        uint16_t FileNameLength;
        uint16_t FileNameOffset;
        uint16_t FileName[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct USN_RECORD_V3
    {
        uint32_t RecordLength;
        uint16_t MajorVersion;
        uint16_t MinorVersion;
        Windows::Win32::FileSystem::FILE_ID_128 FileReferenceNumber;
        Windows::Win32::FileSystem::FILE_ID_128 ParentFileReferenceNumber;
        int64_t Usn;
        Windows::Win32::SystemServices::LARGE_INTEGER TimeStamp;
        uint32_t Reason;
        uint32_t SourceInfo;
        uint32_t SecurityId;
        uint32_t FileAttributes;
        uint16_t FileNameLength;
        uint16_t FileNameOffset;
        uint16_t FileName[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct USN_RECORD_EXTENT
    {
        int64_t Offset;
        int64_t Length;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct USN_RECORD_V4
    {
        Windows::Win32::FileSystem::USN_RECORD_COMMON_HEADER Header;
        Windows::Win32::FileSystem::FILE_ID_128 FileReferenceNumber;
        Windows::Win32::FileSystem::FILE_ID_128 ParentFileReferenceNumber;
        int64_t Usn;
        uint32_t Reason;
        uint32_t SourceInfo;
        uint32_t RemainingExtents;
        uint16_t NumberOfExtents;
        uint16_t ExtentSize;
        Windows::Win32::FileSystem::USN_RECORD_EXTENT Extents[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    union USN_RECORD_UNION
    {
        Windows::Win32::FileSystem::USN_RECORD_COMMON_HEADER Header;
        Windows::Win32::FileSystem::USN_RECORD_V2 V2;
        Windows::Win32::FileSystem::USN_RECORD_V3 V3;
        Windows::Win32::FileSystem::USN_RECORD_V4 V4;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct BULK_SECURITY_TEST_DATA
    {
        uint32_t DesiredAccess;
        uint32_t SecurityIds[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct FILE_PREFETCH
    {
        uint32_t Type;
        uint32_t Count;
        uint64_t Prefetch[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct FILE_PREFETCH_EX
    {
        uint32_t Type;
        uint32_t Count;
        void* Context;
        uint64_t Prefetch[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct FILE_ZERO_DATA_INFORMATION_EX
    {
        Windows::Win32::SystemServices::LARGE_INTEGER FileOffset;
        Windows::Win32::SystemServices::LARGE_INTEGER BeyondFinalZero;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct ENCRYPTION_BUFFER
    {
        uint32_t EncryptionOperation;
        uint8_t Private[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DECRYPTION_STATUS_BUFFER
    {
        uint8_t NoEncryptedStreams;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct REQUEST_RAW_ENCRYPTED_DATA
    {
        int64_t FileOffset;
        uint32_t Length;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct ENCRYPTED_DATA_INFO
    {
        uint64_t StartingFileOffset;
        uint32_t OutputBufferOffset;
        uint32_t BytesWithinFileSize;
        uint32_t BytesWithinValidDataLength;
        uint16_t CompressionFormat;
        uint8_t DataUnitShift;
        uint8_t ChunkShift;
        uint8_t ClusterShift;
        uint8_t EncryptionFormat;
        uint16_t NumberOfDataBlocks;
        uint32_t DataBlockSize[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct EXTENDED_ENCRYPTED_DATA_INFO
    {
        uint32_t ExtendedCode;
        uint32_t Length;
        uint32_t Flags;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SI_COPYFILE
    {
        uint32_t SourceFileNameLength;
        uint32_t DestinationFileNameLength;
        uint32_t Flags;
        uint16_t FileNameBuffer[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct FILE_INITIATE_REPAIR_OUTPUT_BUFFER
    {
        uint64_t Hint1;
        uint64_t Hint2;
        uint64_t Clsn;
        uint32_t Status;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct TXFS_ROLLFORWARD_REDO_INFORMATION
    {
        Windows::Win32::SystemServices::LARGE_INTEGER LastVirtualClock;
        uint64_t LastRedoLsn;
        uint64_t HighestRecoveryLsn;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct TXFS_START_RM_INFORMATION
    {
        uint32_t Flags;
        uint64_t LogContainerSize;
        uint32_t LogContainerCountMin;
        uint32_t LogContainerCountMax;
        uint32_t LogGrowthIncrement;
        uint32_t LogAutoShrinkPercentage;
        uint32_t TmLogPathOffset;
        uint16_t TmLogPathLength;
        uint16_t LoggingMode;
        uint16_t LogPathLength;
        uint16_t Reserved;
        uint16_t LogPath[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct FILE_FS_PERSISTENT_VOLUME_INFORMATION
    {
        uint32_t VolumeFlags;
        uint32_t FlagMask;
        uint32_t Version;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST
    {
        uint32_t RequestLevel;
        uint32_t RequestFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::VirtualStorage
{
    struct VIRTUAL_STORAGE_TYPE
    {
        uint32_t DeviceId;
        ::win32::guid VendorId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY
    {
        uint32_t EntryLength;
        uint32_t DependencyTypeFlags;
        uint32_t ProviderSpecificFlags;
        Windows::Win32::VirtualStorage::VIRTUAL_STORAGE_TYPE VirtualStorageType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY
    {
        uint32_t EntryLength;
        uint32_t DependencyTypeFlags;
        uint32_t ProviderSpecificFlags;
        Windows::Win32::VirtualStorage::VIRTUAL_STORAGE_TYPE VirtualStorageType;
        uint32_t AncestorLevel;
        uint32_t HostVolumeNameOffset;
        uint32_t HostVolumeNameSize;
        uint32_t DependentVolumeNameOffset;
        uint32_t DependentVolumeNameSize;
        uint32_t RelativePathOffset;
        uint32_t RelativePathSize;
        uint32_t DependentDeviceNameOffset;
        uint32_t DependentDeviceNameSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::SystemServices::STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY Lev1Depends;
            Windows::Win32::SystemServices::STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY Lev2Depends;
        };
        uint32_t ResponseLevel;
        uint32_t NumberEntries;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SD_CHANGE_MACHINE_SID_INPUT
    {
        uint16_t CurrentMachineSIDOffset;
        uint16_t CurrentMachineSIDLength;
        uint16_t NewMachineSIDOffset;
        uint16_t NewMachineSIDLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SD_CHANGE_MACHINE_SID_OUTPUT
    {
        uint64_t NumSDChangedSuccess;
        uint64_t NumSDChangedFail;
        uint64_t NumSDUnused;
        uint64_t NumSDTotal;
        uint64_t NumMftSDChangedSuccess;
        uint64_t NumMftSDChangedFail;
        uint64_t NumMftSDTotal;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SD_QUERY_STATS_INPUT
    {
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SD_QUERY_STATS_OUTPUT
    {
        uint64_t SdsStreamSize;
        uint64_t SdsAllocationSize;
        uint64_t SiiStreamSize;
        uint64_t SiiAllocationSize;
        uint64_t SdhStreamSize;
        uint64_t SdhAllocationSize;
        uint64_t NumSDTotal;
        uint64_t NumSDUnused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SD_ENUM_SDS_INPUT
    {
        uint64_t StartingOffset;
        uint64_t MaxSDEntriesToReturn;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SD_ENUM_SDS_ENTRY
    {
        uint32_t Hash;
        uint32_t SecurityId;
        uint64_t Offset;
        uint32_t Length;
        uint8_t Descriptor[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SD_ENUM_SDS_OUTPUT
    {
        uint64_t NextOffset;
        uint64_t NumSDEntriesReturned;
        uint64_t NumSDBytesReturned;
        Windows::Win32::SystemServices::SD_ENUM_SDS_ENTRY SDEntry[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SD_GLOBAL_CHANGE_INPUT
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::SystemServices::SD_CHANGE_MACHINE_SID_INPUT SdChange;
            Windows::Win32::SystemServices::SD_QUERY_STATS_INPUT SdQueryStats;
            Windows::Win32::SystemServices::SD_ENUM_SDS_INPUT SdEnumSds;
        };
        uint32_t Flags;
        uint32_t ChangeType;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SD_GLOBAL_CHANGE_OUTPUT
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::SystemServices::SD_CHANGE_MACHINE_SID_OUTPUT SdChange;
            Windows::Win32::SystemServices::SD_QUERY_STATS_OUTPUT SdQueryStats;
            Windows::Win32::SystemServices::SD_ENUM_SDS_OUTPUT SdEnumSds;
        };
        uint32_t Flags;
        uint32_t ChangeType;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct FILE_TYPE_NOTIFICATION_INPUT
    {
        uint32_t Flags;
        uint32_t NumFileTypeIDs;
        ::win32::guid FileTypeID[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct CSV_MGMT_LOCK
    {
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct CSV_QUERY_FILE_REVISION_FILE_ID_128
    {
        Windows::Win32::FileSystem::FILE_ID_128 FileId;
        int64_t FileRevision[3];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct CSV_QUERY_VOLUME_REDIRECT_STATE
    {
        uint32_t MdsNodeId;
        uint32_t DsNodeId;
        uint8_t IsDiskConnected;
        uint8_t ClusterEnableDirectIo;
        Windows::Win32::SystemServices::CSVFS_DISK_CONNECTIVITY DiskConnectivity;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct CSV_QUERY_MDS_PATH_V2
    {
        int64_t Version;
        uint32_t RequiredSize;
        uint32_t MdsNodeId;
        uint32_t DsNodeId;
        uint32_t Flags;
        Windows::Win32::SystemServices::CSVFS_DISK_CONNECTIVITY DiskConnectivity;
        ::win32::guid VolumeId;
        uint32_t IpAddressOffset;
        uint32_t IpAddressLength;
        uint32_t PathOffset;
        uint32_t PathLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct CLUSTER_RANGE
    {
        Windows::Win32::SystemServices::LARGE_INTEGER StartingCluster;
        Windows::Win32::SystemServices::LARGE_INTEGER ClusterCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct FILE_REFERENCE_RANGE
    {
        uint64_t StartingFileReferenceNumber;
        uint64_t EndingFileReferenceNumber;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct QUERY_FILE_LAYOUT_INPUT
    {
        union _Anonymous_e__Union
        {
            uint32_t FilterEntryCount;
            uint32_t NumberOfPairs;
        };
        union _Filter_e__Union
        {
            Windows::Win32::SystemServices::CLUSTER_RANGE ClusterRanges[1];
            Windows::Win32::SystemServices::FILE_REFERENCE_RANGE FileReferenceRanges[1];
            Windows::Win32::SystemServices::STORAGE_RESERVE_ID StorageReserveIds[1];
        };
        _Anonymous_e__Union Anonymous;
        uint32_t Flags;
        Windows::Win32::SystemServices::QUERY_FILE_LAYOUT_FILTER_TYPE FilterType;
        uint32_t Reserved;
        _Filter_e__Union Filter;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct QUERY_FILE_LAYOUT_OUTPUT
    {
        uint32_t FileEntryCount;
        uint32_t FirstFileOffset;
        uint32_t Flags;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct FILE_LAYOUT_ENTRY
    {
        uint32_t Version;
        uint32_t NextFileOffset;
        uint32_t Flags;
        uint32_t FileAttributes;
        uint64_t FileReferenceNumber;
        uint32_t FirstNameOffset;
        uint32_t FirstStreamOffset;
        uint32_t ExtraInfoOffset;
        uint32_t ExtraInfoLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct FILE_LAYOUT_NAME_ENTRY
    {
        uint32_t NextNameOffset;
        uint32_t Flags;
        uint64_t ParentFileReferenceNumber;
        uint32_t FileNameLength;
        uint32_t Reserved;
        uint16_t FileName[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct FILE_LAYOUT_INFO_ENTRY
    {
        struct _BasicInformation_e__Struct
        {
            Windows::Win32::SystemServices::LARGE_INTEGER CreationTime;
            Windows::Win32::SystemServices::LARGE_INTEGER LastAccessTime;
            Windows::Win32::SystemServices::LARGE_INTEGER LastWriteTime;
            Windows::Win32::SystemServices::LARGE_INTEGER ChangeTime;
            uint32_t FileAttributes;
        };
        _BasicInformation_e__Struct BasicInformation;
        uint32_t OwnerId;
        uint32_t SecurityId;
        int64_t Usn;
        Windows::Win32::SystemServices::STORAGE_RESERVE_ID StorageReserveId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STREAM_LAYOUT_ENTRY
    {
        uint32_t Version;
        uint32_t NextStreamOffset;
        uint32_t Flags;
        uint32_t ExtentInformationOffset;
        Windows::Win32::SystemServices::LARGE_INTEGER AllocationSize;
        Windows::Win32::SystemServices::LARGE_INTEGER EndOfFile;
        uint32_t StreamInformationOffset;
        uint32_t AttributeTypeCode;
        uint32_t AttributeFlags;
        uint32_t StreamIdentifierLength;
        uint16_t StreamIdentifier[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct RETRIEVAL_POINTERS_BUFFER
    {
        struct _Anonymous_e__Struct
        {
            Windows::Win32::SystemServices::LARGE_INTEGER NextVcn;
            Windows::Win32::SystemServices::LARGE_INTEGER Lcn;
        };
        uint32_t ExtentCount;
        Windows::Win32::SystemServices::LARGE_INTEGER StartingVcn;
        _Anonymous_e__Struct Extents[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STREAM_EXTENT_ENTRY
    {
        union _ExtentInformation_e__Union
        {
            Windows::Win32::FileSystem::RETRIEVAL_POINTERS_BUFFER RetrievalPointers;
        };
        uint32_t Flags;
        _ExtentInformation_e__Union ExtentInformation;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX
    {
        uint8_t EnableIntegrity;
        uint8_t KeepIntegrityStateUnchanged;
        uint16_t Reserved;
        uint32_t Flags;
        uint8_t Version;
        uint8_t Reserved2[7];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct FSCTL_OFFLOAD_READ_INPUT
    {
        uint32_t Size;
        uint32_t Flags;
        uint32_t TokenTimeToLive;
        uint32_t Reserved;
        uint64_t FileOffset;
        uint64_t CopyLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct FSCTL_OFFLOAD_READ_OUTPUT
    {
        uint32_t Size;
        uint32_t Flags;
        uint64_t TransferLength;
        uint8_t Token[512];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct FSCTL_OFFLOAD_WRITE_INPUT
    {
        uint32_t Size;
        uint32_t Flags;
        uint64_t FileOffset;
        uint64_t CopyLength;
        uint64_t TransferOffset;
        uint8_t Token[512];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct FSCTL_OFFLOAD_WRITE_OUTPUT
    {
        uint32_t Size;
        uint32_t Flags;
        uint64_t LengthWritten;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SET_PURGE_FAILURE_MODE_INPUT
    {
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct FILE_REGION_INFO
    {
        int64_t FileOffset;
        int64_t Length;
        uint32_t Usage;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct FILE_REGION_OUTPUT
    {
        uint32_t Flags;
        uint32_t TotalRegionEntryCount;
        uint32_t RegionEntryCount;
        uint32_t Reserved;
        Windows::Win32::SystemServices::FILE_REGION_INFO Region[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct FILE_REGION_INPUT
    {
        int64_t FileOffset;
        int64_t Length;
        uint32_t DesiredUsage;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct WRITE_USN_REASON_INPUT
    {
        uint32_t Flags;
        uint32_t UsnReasonToWrite;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STREAM_INFORMATION_ENTRY
    {
        union _StreamInformation
        {
            struct _DesiredStorageClass
            {
                Windows::Win32::SystemServices::FILE_STORAGE_TIER_CLASS Class;
                uint32_t Flags;
            };
            struct _DataStream
            {
                uint16_t Length;
                uint16_t Flags;
                uint32_t Reserved;
                uint64_t Vdl;
            };
            struct _Reparse
            {
                uint16_t Length;
                uint16_t Flags;
                uint32_t ReparseDataSize;
                uint32_t ReparseDataOffset;
            };
            struct _Ea
            {
                uint16_t Length;
                uint16_t Flags;
                uint32_t EaSize;
                uint32_t EaInformationOffset;
            };
            _DesiredStorageClass DesiredStorageClass;
            _DataStream DataStream;
            _Reparse Reparse;
            _Ea Ea;
        };
        uint32_t Version;
        uint32_t Flags;
        _StreamInformation StreamInformation;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct FILE_DESIRED_STORAGE_CLASS_INFORMATION
    {
        Windows::Win32::SystemServices::FILE_STORAGE_TIER_CLASS Class;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DUPLICATE_EXTENTS_DATA_EX
    {
        size_t Size;
        Windows::Win32::SystemServices::HANDLE FileHandle;
        Windows::Win32::SystemServices::LARGE_INTEGER SourceFileOffset;
        Windows::Win32::SystemServices::LARGE_INTEGER TargetFileOffset;
        Windows::Win32::SystemServices::LARGE_INTEGER ByteCount;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct REFS_SMR_VOLUME_INFO_OUTPUT
    {
        uint32_t Version;
        uint32_t Flags;
        Windows::Win32::SystemServices::LARGE_INTEGER SizeOfRandomlyWritableTier;
        Windows::Win32::SystemServices::LARGE_INTEGER FreeSpaceInRandomlyWritableTier;
        Windows::Win32::SystemServices::LARGE_INTEGER SizeofSMRTier;
        Windows::Win32::SystemServices::LARGE_INTEGER FreeSpaceInSMRTier;
        Windows::Win32::SystemServices::LARGE_INTEGER UsableFreeSpaceInSMRTier;
        Windows::Win32::SystemServices::REFS_SMR_VOLUME_GC_STATE VolumeGcState;
        uint32_t VolumeGcLastStatus;
        uint64_t Unused[7];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct REFS_SMR_VOLUME_GC_PARAMETERS
    {
        uint32_t Version;
        uint32_t Flags;
        Windows::Win32::SystemServices::REFS_SMR_VOLUME_GC_ACTION Action;
        Windows::Win32::SystemServices::REFS_SMR_VOLUME_GC_METHOD Method;
        uint32_t IoGranularity;
        uint32_t CompressionFormat;
        uint64_t Unused[8];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER
    {
        uint32_t OptimalWriteSize;
        uint32_t StreamGranularitySize;
        uint32_t StreamIdMin;
        uint32_t StreamIdMax;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STREAMS_ASSOCIATE_ID_INPUT_BUFFER
    {
        uint32_t Flags;
        uint32_t StreamId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STREAMS_QUERY_ID_OUTPUT_BUFFER
    {
        uint32_t StreamId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct QUERY_BAD_RANGES_INPUT_RANGE
    {
        uint64_t StartOffset;
        uint64_t LengthInBytes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct QUERY_BAD_RANGES_INPUT
    {
        uint32_t Flags;
        uint32_t NumRanges;
        Windows::Win32::SystemServices::QUERY_BAD_RANGES_INPUT_RANGE Ranges[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct QUERY_BAD_RANGES_OUTPUT_RANGE
    {
        uint32_t Flags;
        uint32_t Reserved;
        uint64_t StartOffset;
        uint64_t LengthInBytes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct QUERY_BAD_RANGES_OUTPUT
    {
        uint32_t Flags;
        uint32_t NumBadRanges;
        uint64_t NextOffsetToLookUp;
        Windows::Win32::SystemServices::QUERY_BAD_RANGES_OUTPUT_RANGE BadRanges[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT
    {
        uint32_t Flags;
        uint32_t AlignmentShift;
        uint64_t FileOffsetToAlign;
        uint32_t FallbackAlignmentShift;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VIRTUAL_STORAGE_SET_BEHAVIOR_INPUT
    {
        uint32_t Size;
        Windows::Win32::SystemServices::VIRTUAL_STORAGE_BEHAVIOR_CODE BehaviorCode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct ENCRYPTION_KEY_CTRL_INPUT
    {
        uint32_t HeaderSize;
        uint32_t StructureSize;
        uint16_t KeyOffset;
        uint16_t KeySize;
        uint32_t DplLock;
        uint64_t DplUserId;
        uint64_t DplCredentialId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct WOF_EXTERNAL_INFO
    {
        uint32_t Version;
        uint32_t Provider;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct WOF_EXTERNAL_FILE_ID
    {
        Windows::Win32::FileSystem::FILE_ID_128 FileId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct WOF_VERSION_INFO
    {
        uint32_t WofVersion;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct WIM_PROVIDER_EXTERNAL_INFO
    {
        uint32_t Version;
        uint32_t Flags;
        Windows::Win32::SystemServices::LARGE_INTEGER DataSourceId;
        uint8_t ResourceHash[20];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct WIM_PROVIDER_ADD_OVERLAY_INPUT
    {
        uint32_t WimType;
        uint32_t WimIndex;
        uint32_t WimFileNameOffset;
        uint32_t WimFileNameLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct WIM_PROVIDER_UPDATE_OVERLAY_INPUT
    {
        Windows::Win32::SystemServices::LARGE_INTEGER DataSourceId;
        uint32_t WimFileNameOffset;
        uint32_t WimFileNameLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct WIM_PROVIDER_REMOVE_OVERLAY_INPUT
    {
        Windows::Win32::SystemServices::LARGE_INTEGER DataSourceId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct WIM_PROVIDER_SUSPEND_OVERLAY_INPUT
    {
        Windows::Win32::SystemServices::LARGE_INTEGER DataSourceId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct WIM_PROVIDER_OVERLAY_ENTRY
    {
        uint32_t NextEntryOffset;
        Windows::Win32::SystemServices::LARGE_INTEGER DataSourceId;
        ::win32::guid WimGuid;
        uint32_t WimFileNameOffset;
        uint32_t WimType;
        uint32_t WimIndex;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct FILE_PROVIDER_EXTERNAL_INFO_V0
    {
        uint32_t Version;
        uint32_t Algorithm;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct FILE_PROVIDER_EXTERNAL_INFO_V1
    {
        uint32_t Version;
        uint32_t Algorithm;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct CONTAINER_VOLUME_STATE
    {
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct CONTAINER_ROOT_INFO_INPUT
    {
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct CONTAINER_ROOT_INFO_OUTPUT
    {
        uint16_t ContainerRootIdLength;
        uint8_t ContainerRootId[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VIRTUALIZATION_INSTANCE_INFO_INPUT
    {
        uint32_t NumberOfWorkerThreads;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VIRTUALIZATION_INSTANCE_INFO_INPUT_EX
    {
        uint16_t HeaderSize;
        uint32_t Flags;
        uint32_t NotificationInfoSize;
        uint16_t NotificationInfoOffset;
        uint16_t ProviderMajorVersion;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VIRTUALIZATION_INSTANCE_INFO_OUTPUT
    {
        ::win32::guid VirtualizationInstanceID;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct GET_FILTER_FILE_IDENTIFIER_INPUT
    {
        uint16_t AltitudeLength;
        uint16_t Altitude[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct GET_FILTER_FILE_IDENTIFIER_OUTPUT
    {
        uint16_t FilterFileIdentifierLength;
        uint8_t FilterFileIdentifier[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IO_IRP_EXT_TRACK_OFFSET_HEADER
    {
        uint16_t Validation;
        uint16_t Flags;
        Windows::Win32::SystemServices::PIO_IRP_EXT_PROCESS_TRACKED_OFFSET_CALLBACK* TrackedOffsetCallback;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SCARD_IO_REQUEST
    {
        uint32_t dwProtocol;
        uint32_t cbPciLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SCARD_T0_COMMAND
    {
        uint8_t bCla;
        uint8_t bIns;
        uint8_t bP1;
        uint8_t bP2;
        uint8_t bP3;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SCARD_T0_REQUEST
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::SystemServices::SCARD_T0_COMMAND CmdBytes;
            uint8_t rgbHeader[5];
        };
        Windows::Win32::SystemServices::SCARD_IO_REQUEST ioRequest;
        uint8_t bSw1;
        uint8_t bSw2;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SCARD_T1_REQUEST
    {
        Windows::Win32::SystemServices::SCARD_IO_REQUEST ioRequest;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PRINTER_INFO_1A
    {
        uint32_t Flags;
        int8_t* pDescription;
        int8_t* pName;
        int8_t* pComment;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PRINTER_INFO_1W
    {
        uint32_t Flags;
        uint16_t* pDescription;
        uint16_t* pName;
        uint16_t* pComment;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PRINTER_INFO_2A
    {
        int8_t* pServerName;
        int8_t* pPrinterName;
        int8_t* pShareName;
        int8_t* pPortName;
        int8_t* pDriverName;
        int8_t* pComment;
        int8_t* pLocation;
        Windows::Win32::Xps::DEVMODEA* pDevMode;
        int8_t* pSepFile;
        int8_t* pPrintProcessor;
        int8_t* pDatatype;
        int8_t* pParameters;
        void* pSecurityDescriptor;
        uint32_t Attributes;
        uint32_t Priority;
        uint32_t DefaultPriority;
        uint32_t StartTime;
        uint32_t UntilTime;
        uint32_t Status;
        uint32_t cJobs;
        uint32_t AveragePPM;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PRINTER_INFO_2W
    {
        uint16_t* pServerName;
        uint16_t* pPrinterName;
        uint16_t* pShareName;
        uint16_t* pPortName;
        uint16_t* pDriverName;
        uint16_t* pComment;
        uint16_t* pLocation;
        Windows::Win32::DisplayDevices::DEVMODEW* pDevMode;
        uint16_t* pSepFile;
        uint16_t* pPrintProcessor;
        uint16_t* pDatatype;
        uint16_t* pParameters;
        void* pSecurityDescriptor;
        uint32_t Attributes;
        uint32_t Priority;
        uint32_t DefaultPriority;
        uint32_t StartTime;
        uint32_t UntilTime;
        uint32_t Status;
        uint32_t cJobs;
        uint32_t AveragePPM;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PRINTER_INFO_3
    {
        void* pSecurityDescriptor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PRINTER_INFO_4A
    {
        int8_t* pPrinterName;
        int8_t* pServerName;
        uint32_t Attributes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PRINTER_INFO_4W
    {
        uint16_t* pPrinterName;
        uint16_t* pServerName;
        uint32_t Attributes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PRINTER_INFO_5A
    {
        int8_t* pPrinterName;
        int8_t* pPortName;
        uint32_t Attributes;
        uint32_t DeviceNotSelectedTimeout;
        uint32_t TransmissionRetryTimeout;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PRINTER_INFO_5W
    {
        uint16_t* pPrinterName;
        uint16_t* pPortName;
        uint32_t Attributes;
        uint32_t DeviceNotSelectedTimeout;
        uint32_t TransmissionRetryTimeout;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PRINTER_INFO_6
    {
        uint32_t dwStatus;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PRINTER_INFO_7A
    {
        int8_t* pszObjectGUID;
        uint32_t dwAction;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PRINTER_INFO_7W
    {
        uint16_t* pszObjectGUID;
        uint32_t dwAction;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PRINTER_INFO_8A
    {
        Windows::Win32::Xps::DEVMODEA* pDevMode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PRINTER_INFO_8W
    {
        Windows::Win32::DisplayDevices::DEVMODEW* pDevMode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PRINTER_INFO_9A
    {
        Windows::Win32::Xps::DEVMODEA* pDevMode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PRINTER_INFO_9W
    {
        Windows::Win32::DisplayDevices::DEVMODEW* pDevMode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct JOB_INFO_1A
    {
        uint32_t JobId;
        int8_t* pPrinterName;
        int8_t* pMachineName;
        int8_t* pUserName;
        int8_t* pDocument;
        int8_t* pDatatype;
        int8_t* pStatus;
        uint32_t Status;
        uint32_t Priority;
        uint32_t Position;
        uint32_t TotalPages;
        uint32_t PagesPrinted;
        Windows::Win32::WindowsProgramming::SYSTEMTIME Submitted;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct JOB_INFO_1W
    {
        uint32_t JobId;
        uint16_t* pPrinterName;
        uint16_t* pMachineName;
        uint16_t* pUserName;
        uint16_t* pDocument;
        uint16_t* pDatatype;
        uint16_t* pStatus;
        uint32_t Status;
        uint32_t Priority;
        uint32_t Position;
        uint32_t TotalPages;
        uint32_t PagesPrinted;
        Windows::Win32::WindowsProgramming::SYSTEMTIME Submitted;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct JOB_INFO_2A
    {
        uint32_t JobId;
        int8_t* pPrinterName;
        int8_t* pMachineName;
        int8_t* pUserName;
        int8_t* pDocument;
        int8_t* pNotifyName;
        int8_t* pDatatype;
        int8_t* pPrintProcessor;
        int8_t* pParameters;
        int8_t* pDriverName;
        Windows::Win32::Xps::DEVMODEA* pDevMode;
        int8_t* pStatus;
        void* pSecurityDescriptor;
        uint32_t Status;
        uint32_t Priority;
        uint32_t Position;
        uint32_t StartTime;
        uint32_t UntilTime;
        uint32_t TotalPages;
        uint32_t Size;
        Windows::Win32::WindowsProgramming::SYSTEMTIME Submitted;
        uint32_t Time;
        uint32_t PagesPrinted;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct JOB_INFO_2W
    {
        uint32_t JobId;
        uint16_t* pPrinterName;
        uint16_t* pMachineName;
        uint16_t* pUserName;
        uint16_t* pDocument;
        uint16_t* pNotifyName;
        uint16_t* pDatatype;
        uint16_t* pPrintProcessor;
        uint16_t* pParameters;
        uint16_t* pDriverName;
        Windows::Win32::DisplayDevices::DEVMODEW* pDevMode;
        uint16_t* pStatus;
        void* pSecurityDescriptor;
        uint32_t Status;
        uint32_t Priority;
        uint32_t Position;
        uint32_t StartTime;
        uint32_t UntilTime;
        uint32_t TotalPages;
        uint32_t Size;
        Windows::Win32::WindowsProgramming::SYSTEMTIME Submitted;
        uint32_t Time;
        uint32_t PagesPrinted;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct JOB_INFO_3
    {
        uint32_t JobId;
        uint32_t NextJobId;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct JOB_INFO_4A
    {
        uint32_t JobId;
        int8_t* pPrinterName;
        int8_t* pMachineName;
        int8_t* pUserName;
        int8_t* pDocument;
        int8_t* pNotifyName;
        int8_t* pDatatype;
        int8_t* pPrintProcessor;
        int8_t* pParameters;
        int8_t* pDriverName;
        Windows::Win32::Xps::DEVMODEA* pDevMode;
        int8_t* pStatus;
        void* pSecurityDescriptor;
        uint32_t Status;
        uint32_t Priority;
        uint32_t Position;
        uint32_t StartTime;
        uint32_t UntilTime;
        uint32_t TotalPages;
        uint32_t Size;
        Windows::Win32::WindowsProgramming::SYSTEMTIME Submitted;
        uint32_t Time;
        uint32_t PagesPrinted;
        int32_t SizeHigh;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct JOB_INFO_4W
    {
        uint32_t JobId;
        uint16_t* pPrinterName;
        uint16_t* pMachineName;
        uint16_t* pUserName;
        uint16_t* pDocument;
        uint16_t* pNotifyName;
        uint16_t* pDatatype;
        uint16_t* pPrintProcessor;
        uint16_t* pParameters;
        uint16_t* pDriverName;
        Windows::Win32::DisplayDevices::DEVMODEW* pDevMode;
        uint16_t* pStatus;
        void* pSecurityDescriptor;
        uint32_t Status;
        uint32_t Priority;
        uint32_t Position;
        uint32_t StartTime;
        uint32_t UntilTime;
        uint32_t TotalPages;
        uint32_t Size;
        Windows::Win32::WindowsProgramming::SYSTEMTIME Submitted;
        uint32_t Time;
        uint32_t PagesPrinted;
        int32_t SizeHigh;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct ADDJOB_INFO_1A
    {
        int8_t* Path;
        uint32_t JobId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct ADDJOB_INFO_1W
    {
        uint16_t* Path;
        uint32_t JobId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DRIVER_INFO_1A
    {
        int8_t* pName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DRIVER_INFO_1W
    {
        uint16_t* pName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DRIVER_INFO_2A
    {
        uint32_t cVersion;
        int8_t* pName;
        int8_t* pEnvironment;
        int8_t* pDriverPath;
        int8_t* pDataFile;
        int8_t* pConfigFile;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DRIVER_INFO_2W
    {
        uint32_t cVersion;
        uint16_t* pName;
        uint16_t* pEnvironment;
        uint16_t* pDriverPath;
        uint16_t* pDataFile;
        uint16_t* pConfigFile;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DRIVER_INFO_3A
    {
        uint32_t cVersion;
        int8_t* pName;
        int8_t* pEnvironment;
        int8_t* pDriverPath;
        int8_t* pDataFile;
        int8_t* pConfigFile;
        int8_t* pHelpFile;
        int8_t* pDependentFiles;
        int8_t* pMonitorName;
        int8_t* pDefaultDataType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DRIVER_INFO_3W
    {
        uint32_t cVersion;
        uint16_t* pName;
        uint16_t* pEnvironment;
        uint16_t* pDriverPath;
        uint16_t* pDataFile;
        uint16_t* pConfigFile;
        uint16_t* pHelpFile;
        uint16_t* pDependentFiles;
        uint16_t* pMonitorName;
        uint16_t* pDefaultDataType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DRIVER_INFO_4A
    {
        uint32_t cVersion;
        int8_t* pName;
        int8_t* pEnvironment;
        int8_t* pDriverPath;
        int8_t* pDataFile;
        int8_t* pConfigFile;
        int8_t* pHelpFile;
        int8_t* pDependentFiles;
        int8_t* pMonitorName;
        int8_t* pDefaultDataType;
        int8_t* pszzPreviousNames;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DRIVER_INFO_4W
    {
        uint32_t cVersion;
        uint16_t* pName;
        uint16_t* pEnvironment;
        uint16_t* pDriverPath;
        uint16_t* pDataFile;
        uint16_t* pConfigFile;
        uint16_t* pHelpFile;
        uint16_t* pDependentFiles;
        uint16_t* pMonitorName;
        uint16_t* pDefaultDataType;
        uint16_t* pszzPreviousNames;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DRIVER_INFO_5A
    {
        uint32_t cVersion;
        int8_t* pName;
        int8_t* pEnvironment;
        int8_t* pDriverPath;
        int8_t* pDataFile;
        int8_t* pConfigFile;
        uint32_t dwDriverAttributes;
        uint32_t dwConfigVersion;
        uint32_t dwDriverVersion;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DRIVER_INFO_5W
    {
        uint32_t cVersion;
        uint16_t* pName;
        uint16_t* pEnvironment;
        uint16_t* pDriverPath;
        uint16_t* pDataFile;
        uint16_t* pConfigFile;
        uint32_t dwDriverAttributes;
        uint32_t dwConfigVersion;
        uint32_t dwDriverVersion;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DRIVER_INFO_6A
    {
        uint32_t cVersion;
        int8_t* pName;
        int8_t* pEnvironment;
        int8_t* pDriverPath;
        int8_t* pDataFile;
        int8_t* pConfigFile;
        int8_t* pHelpFile;
        int8_t* pDependentFiles;
        int8_t* pMonitorName;
        int8_t* pDefaultDataType;
        int8_t* pszzPreviousNames;
        Windows::Win32::WindowsProgramming::FILETIME ftDriverDate;
        uint64_t dwlDriverVersion;
        int8_t* pszMfgName;
        int8_t* pszOEMUrl;
        int8_t* pszHardwareID;
        int8_t* pszProvider;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DRIVER_INFO_6W
    {
        uint32_t cVersion;
        uint16_t* pName;
        uint16_t* pEnvironment;
        uint16_t* pDriverPath;
        uint16_t* pDataFile;
        uint16_t* pConfigFile;
        uint16_t* pHelpFile;
        uint16_t* pDependentFiles;
        uint16_t* pMonitorName;
        uint16_t* pDefaultDataType;
        uint16_t* pszzPreviousNames;
        Windows::Win32::WindowsProgramming::FILETIME ftDriverDate;
        uint64_t dwlDriverVersion;
        uint16_t* pszMfgName;
        uint16_t* pszOEMUrl;
        uint16_t* pszHardwareID;
        uint16_t* pszProvider;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DRIVER_INFO_8A
    {
        uint32_t cVersion;
        int8_t* pName;
        int8_t* pEnvironment;
        int8_t* pDriverPath;
        int8_t* pDataFile;
        int8_t* pConfigFile;
        int8_t* pHelpFile;
        int8_t* pDependentFiles;
        int8_t* pMonitorName;
        int8_t* pDefaultDataType;
        int8_t* pszzPreviousNames;
        Windows::Win32::WindowsProgramming::FILETIME ftDriverDate;
        uint64_t dwlDriverVersion;
        int8_t* pszMfgName;
        int8_t* pszOEMUrl;
        int8_t* pszHardwareID;
        int8_t* pszProvider;
        int8_t* pszPrintProcessor;
        int8_t* pszVendorSetup;
        int8_t* pszzColorProfiles;
        int8_t* pszInfPath;
        uint32_t dwPrinterDriverAttributes;
        int8_t* pszzCoreDriverDependencies;
        Windows::Win32::WindowsProgramming::FILETIME ftMinInboxDriverVerDate;
        uint64_t dwlMinInboxDriverVerVersion;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DRIVER_INFO_8W
    {
        uint32_t cVersion;
        uint16_t* pName;
        uint16_t* pEnvironment;
        uint16_t* pDriverPath;
        uint16_t* pDataFile;
        uint16_t* pConfigFile;
        uint16_t* pHelpFile;
        uint16_t* pDependentFiles;
        uint16_t* pMonitorName;
        uint16_t* pDefaultDataType;
        uint16_t* pszzPreviousNames;
        Windows::Win32::WindowsProgramming::FILETIME ftDriverDate;
        uint64_t dwlDriverVersion;
        uint16_t* pszMfgName;
        uint16_t* pszOEMUrl;
        uint16_t* pszHardwareID;
        uint16_t* pszProvider;
        uint16_t* pszPrintProcessor;
        uint16_t* pszVendorSetup;
        uint16_t* pszzColorProfiles;
        uint16_t* pszInfPath;
        uint32_t dwPrinterDriverAttributes;
        uint16_t* pszzCoreDriverDependencies;
        Windows::Win32::WindowsProgramming::FILETIME ftMinInboxDriverVerDate;
        uint64_t dwlMinInboxDriverVerVersion;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DOC_INFO_1A
    {
        int8_t* pDocName;
        int8_t* pOutputFile;
        int8_t* pDatatype;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DOC_INFO_1W
    {
        uint16_t* pDocName;
        uint16_t* pOutputFile;
        uint16_t* pDatatype;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct FORM_INFO_1A
    {
        uint32_t Flags;
        int8_t* pName;
        Windows::Win32::DisplayDevices::SIZE Size;
        Windows::Win32::DisplayDevices::RECTL ImageableArea;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct FORM_INFO_1W
    {
        uint32_t Flags;
        uint16_t* pName;
        Windows::Win32::DisplayDevices::SIZE Size;
        Windows::Win32::DisplayDevices::RECTL ImageableArea;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct FORM_INFO_2A
    {
        uint32_t Flags;
        int8_t* pName;
        Windows::Win32::DisplayDevices::SIZE Size;
        Windows::Win32::DisplayDevices::RECTL ImageableArea;
        int8_t* pKeyword;
        uint32_t StringType;
        int8_t* pMuiDll;
        uint32_t dwResourceId;
        int8_t* pDisplayName;
        uint16_t wLangId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct FORM_INFO_2W
    {
        uint32_t Flags;
        uint16_t* pName;
        Windows::Win32::DisplayDevices::SIZE Size;
        Windows::Win32::DisplayDevices::RECTL ImageableArea;
        int8_t* pKeyword;
        uint32_t StringType;
        uint16_t* pMuiDll;
        uint32_t dwResourceId;
        uint16_t* pDisplayName;
        uint16_t wLangId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DOC_INFO_2A
    {
        int8_t* pDocName;
        int8_t* pOutputFile;
        int8_t* pDatatype;
        uint32_t dwMode;
        uint32_t JobId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DOC_INFO_2W
    {
        uint16_t* pDocName;
        uint16_t* pOutputFile;
        uint16_t* pDatatype;
        uint32_t dwMode;
        uint32_t JobId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DOC_INFO_3A
    {
        int8_t* pDocName;
        int8_t* pOutputFile;
        int8_t* pDatatype;
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DOC_INFO_3W
    {
        uint16_t* pDocName;
        uint16_t* pOutputFile;
        uint16_t* pDatatype;
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PRINTPROCESSOR_INFO_1A
    {
        int8_t* pName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PRINTPROCESSOR_INFO_1W
    {
        uint16_t* pName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PRINTPROCESSOR_CAPS_1
    {
        uint32_t dwLevel;
        uint32_t dwNupOptions;
        uint32_t dwPageOrderFlags;
        uint32_t dwNumberOfCopies;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PRINTPROCESSOR_CAPS_2
    {
        uint32_t dwLevel;
        uint32_t dwNupOptions;
        uint32_t dwPageOrderFlags;
        uint32_t dwNumberOfCopies;
        uint32_t dwDuplexHandlingCaps;
        uint32_t dwNupDirectionCaps;
        uint32_t dwNupBorderCaps;
        uint32_t dwBookletHandlingCaps;
        uint32_t dwScalingCaps;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PORT_INFO_1A
    {
        int8_t* pName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PORT_INFO_1W
    {
        uint16_t* pName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PORT_INFO_2A
    {
        int8_t* pPortName;
        int8_t* pMonitorName;
        int8_t* pDescription;
        uint32_t fPortType;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PORT_INFO_2W
    {
        uint16_t* pPortName;
        uint16_t* pMonitorName;
        uint16_t* pDescription;
        uint32_t fPortType;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PORT_INFO_3A
    {
        uint32_t dwStatus;
        int8_t* pszStatus;
        uint32_t dwSeverity;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PORT_INFO_3W
    {
        uint32_t dwStatus;
        uint16_t* pszStatus;
        uint32_t dwSeverity;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct MONITOR_INFO_1A
    {
        int8_t* pName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct MONITOR_INFO_1W
    {
        uint16_t* pName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct MONITOR_INFO_2A
    {
        int8_t* pName;
        int8_t* pEnvironment;
        int8_t* pDLLName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct MONITOR_INFO_2W
    {
        uint16_t* pName;
        uint16_t* pEnvironment;
        uint16_t* pDLLName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DATATYPES_INFO_1A
    {
        int8_t* pName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DATATYPES_INFO_1W
    {
        uint16_t* pName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PRINTER_DEFAULTSA
    {
        int8_t* pDatatype;
        Windows::Win32::Xps::DEVMODEA* pDevMode;
        uint32_t DesiredAccess;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PRINTER_DEFAULTSW
    {
        uint16_t* pDatatype;
        Windows::Win32::DisplayDevices::DEVMODEW* pDevMode;
        uint32_t DesiredAccess;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PRINTER_ENUM_VALUESA
    {
        int8_t* pValueName;
        uint32_t cbValueName;
        uint32_t dwType;
        uint8_t* pData;
        uint32_t cbData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PRINTER_ENUM_VALUESW
    {
        uint16_t* pValueName;
        uint32_t cbValueName;
        uint32_t dwType;
        uint8_t* pData;
        uint32_t cbData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PRINTER_NOTIFY_OPTIONS_TYPE
    {
        uint16_t Type;
        uint16_t Reserved0;
        uint32_t Reserved1;
        uint32_t Reserved2;
        uint32_t Count;
        uint16_t* pFields;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PRINTER_NOTIFY_OPTIONS
    {
        uint32_t Version;
        uint32_t Flags;
        uint32_t Count;
        Windows::Win32::SystemServices::PRINTER_NOTIFY_OPTIONS_TYPE* pTypes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PRINTER_NOTIFY_INFO_DATA
    {
        union _NotifyData_e__Union
        {
            struct _Data_e__Struct
            {
                uint32_t cbBuf;
                void* pBuf;
            };
            uint32_t adwData[2];
            _Data_e__Struct Data;
        };
        uint16_t Type;
        uint16_t Field;
        uint32_t Reserved;
        uint32_t Id;
        _NotifyData_e__Union NotifyData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PRINTER_NOTIFY_INFO
    {
        uint32_t Version;
        uint32_t Flags;
        uint32_t Count;
        Windows::Win32::SystemServices::PRINTER_NOTIFY_INFO_DATA aData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct BINARY_CONTAINER
    {
        uint32_t cbBuf;
        uint8_t* pData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct BIDI_DATA
    {
        union _u_e__Union
        {
            Windows::Win32::SystemServices::BOOL bData;
            int32_t iData;
            uint16_t* sData;
            float fData;
            Windows::Win32::SystemServices::BINARY_CONTAINER biData;
        };
        uint32_t dwBidiType;
        _u_e__Union u;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct BIDI_REQUEST_DATA
    {
        uint32_t dwReqNumber;
        uint16_t* pSchema;
        Windows::Win32::SystemServices::BIDI_DATA data;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct BIDI_REQUEST_CONTAINER
    {
        uint32_t Version;
        uint32_t Flags;
        uint32_t Count;
        Windows::Win32::SystemServices::BIDI_REQUEST_DATA aData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct BIDI_RESPONSE_DATA
    {
        uint32_t dwResult;
        uint32_t dwReqNumber;
        uint16_t* pSchema;
        Windows::Win32::SystemServices::BIDI_DATA data;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct BIDI_RESPONSE_CONTAINER
    {
        uint32_t Version;
        uint32_t Flags;
        uint32_t Count;
        Windows::Win32::SystemServices::BIDI_RESPONSE_DATA aData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PROVIDOR_INFO_1A
    {
        int8_t* pName;
        int8_t* pEnvironment;
        int8_t* pDLLName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PROVIDOR_INFO_1W
    {
        uint16_t* pName;
        uint16_t* pEnvironment;
        uint16_t* pDLLName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PROVIDOR_INFO_2A
    {
        int8_t* pOrder;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PROVIDOR_INFO_2W
    {
        uint16_t* pOrder;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PRINTER_OPTIONSA
    {
        uint32_t cbSize;
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PRINTER_OPTIONSW
    {
        uint32_t cbSize;
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PRINTER_CONNECTION_INFO_1A
    {
        uint32_t dwFlags;
        int8_t* pszDriverName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PRINTER_CONNECTION_INFO_1W
    {
        uint32_t dwFlags;
        uint16_t* pszDriverName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct CORE_PRINTER_DRIVERA
    {
        ::win32::guid CoreDriverGUID;
        Windows::Win32::WindowsProgramming::FILETIME ftDriverDate;
        uint64_t dwlDriverVersion;
        int8_t szPackageID[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct CORE_PRINTER_DRIVERW
    {
        ::win32::guid CoreDriverGUID;
        Windows::Win32::WindowsProgramming::FILETIME ftDriverDate;
        uint64_t dwlDriverVersion;
        uint16_t szPackageID[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PrintPropertyValue
    {
        union _value_e__Union
        {
            struct _propertyBlob_e__Struct
            {
                uint32_t cbBuf;
                void* pBuf;
            };
            uint8_t propertyByte;
            uint16_t* propertyString;
            int32_t propertyInt32;
            int64_t propertyInt64;
            _propertyBlob_e__Struct propertyBlob;
        };
        Windows::Win32::SystemServices::EPrintPropertyType ePropertyType;
        _value_e__Union value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PrintNamedProperty
    {
        uint16_t* propertyName;
        Windows::Win32::SystemServices::PrintPropertyValue propertyValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PrintPropertiesCollection
    {
        uint32_t numberOfProperties;
        Windows::Win32::SystemServices::PrintNamedProperty* propertiesCollection;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PRINT_EXECUTION_DATA
    {
        Windows::Win32::SystemServices::PRINT_EXECUTION_CONTEXT context;
        uint32_t clientAppPID;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct MODEMDEVCAPS
    {
        uint32_t dwActualSize;
        uint32_t dwRequiredSize;
        uint32_t dwDevSpecificOffset;
        uint32_t dwDevSpecificSize;
        uint32_t dwModemProviderVersion;
        uint32_t dwModemManufacturerOffset;
        uint32_t dwModemManufacturerSize;
        uint32_t dwModemModelOffset;
        uint32_t dwModemModelSize;
        uint32_t dwModemVersionOffset;
        uint32_t dwModemVersionSize;
        uint32_t dwDialOptions;
        uint32_t dwCallSetupFailTimer;
        uint32_t dwInactivityTimeout;
        uint32_t dwSpeakerVolume;
        uint32_t dwSpeakerMode;
        uint32_t dwModemOptions;
        uint32_t dwMaxDTERate;
        uint32_t dwMaxDCERate;
        uint8_t abVariablePortion[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct MODEMSETTINGS
    {
        uint32_t dwActualSize;
        uint32_t dwRequiredSize;
        uint32_t dwDevSpecificOffset;
        uint32_t dwDevSpecificSize;
        uint32_t dwCallSetupFailTimer;
        uint32_t dwInactivityTimeout;
        uint32_t dwSpeakerVolume;
        uint32_t dwSpeakerMode;
        uint32_t dwPreferredModemOptions;
        uint32_t dwNegotiatedModemOptions;
        uint32_t dwNegotiatedDCERate;
        uint8_t abVariablePortion[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DispatcherQueueOptions
    {
        uint32_t dwSize;
        Windows::Win32::SystemServices::DISPATCHERQUEUE_THREAD_TYPE threadType;
        Windows::Win32::SystemServices::DISPATCHERQUEUE_THREAD_APARTMENTTYPE apartmentType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VDS_STORAGE_IDENTIFIER
    {
        Windows::Win32::SystemServices::VDS_STORAGE_IDENTIFIER_CODE_SET m_CodeSet;
        Windows::Win32::SystemServices::VDS_STORAGE_IDENTIFIER_TYPE m_Type;
        uint32_t m_cbIdentifier;
        uint8_t* m_rgbIdentifier;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VDS_STORAGE_DEVICE_ID_DESCRIPTOR
    {
        uint32_t m_version;
        uint32_t m_cIdentifiers;
        Windows::Win32::SystemServices::VDS_STORAGE_IDENTIFIER* m_rgIdentifiers;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VDS_INTERCONNECT
    {
        Windows::Win32::SystemServices::VDS_INTERCONNECT_ADDRESS_TYPE m_addressType;
        uint32_t m_cbPort;
        uint8_t* m_pbPort;
        uint32_t m_cbAddress;
        uint8_t* m_pbAddress;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VDS_LUN_INFORMATION
    {
        uint32_t m_version;
        uint8_t m_DeviceType;
        uint8_t m_DeviceTypeModifier;
        Windows::Win32::SystemServices::BOOL m_bCommandQueueing;
        Windows::Win32::SystemServices::VDS_STORAGE_BUS_TYPE m_BusType;
        int8_t* m_szVendorId;
        int8_t* m_szProductId;
        int8_t* m_szProductRevision;
        int8_t* m_szSerialNumber;
        ::win32::guid m_diskSignature;
        Windows::Win32::SystemServices::VDS_STORAGE_DEVICE_ID_DESCRIPTOR m_deviceIdDescriptor;
        uint32_t m_cInterconnects;
        Windows::Win32::SystemServices::VDS_INTERCONNECT* m_rgInterconnects;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VDS_PACK_NOTIFICATION
    {
        uint32_t ulEvent;
        ::win32::guid packId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VDS_DISK_NOTIFICATION
    {
        uint32_t ulEvent;
        ::win32::guid diskId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VDS_VOLUME_NOTIFICATION
    {
        uint32_t ulEvent;
        ::win32::guid volumeId;
        ::win32::guid plexId;
        uint32_t ulPercentCompleted;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VDS_PARTITION_NOTIFICATION
    {
        uint32_t ulEvent;
        ::win32::guid diskId;
        uint64_t ullOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VDS_SERVICE_NOTIFICATION
    {
        uint32_t ulEvent;
        Windows::Win32::SystemServices::VDS_RECOVER_ACTION action;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VDS_DRIVE_LETTER_NOTIFICATION
    {
        uint32_t ulEvent;
        uint16_t wcLetter;
        ::win32::guid volumeId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VDS_FILE_SYSTEM_NOTIFICATION
    {
        uint32_t ulEvent;
        ::win32::guid volumeId;
        uint32_t dwPercentCompleted;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VDS_MOUNT_POINT_NOTIFICATION
    {
        uint32_t ulEvent;
        ::win32::guid volumeId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VDS_SUB_SYSTEM_NOTIFICATION
    {
        uint32_t ulEvent;
        ::win32::guid subSystemId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VDS_CONTROLLER_NOTIFICATION
    {
        uint32_t ulEvent;
        ::win32::guid controllerId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VDS_DRIVE_NOTIFICATION
    {
        uint32_t ulEvent;
        ::win32::guid driveId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VDS_LUN_NOTIFICATION
    {
        uint32_t ulEvent;
        ::win32::guid LunId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VDS_PORT_NOTIFICATION
    {
        uint32_t ulEvent;
        ::win32::guid portId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VDS_PORTAL_NOTIFICATION
    {
        uint32_t ulEvent;
        ::win32::guid portalId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VDS_TARGET_NOTIFICATION
    {
        uint32_t ulEvent;
        ::win32::guid targetId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VDS_PORTAL_GROUP_NOTIFICATION
    {
        uint32_t ulEvent;
        ::win32::guid portalGroupId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VDS_NOTIFICATION
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::SystemServices::VDS_PACK_NOTIFICATION Pack;
            Windows::Win32::SystemServices::VDS_DISK_NOTIFICATION Disk;
            Windows::Win32::SystemServices::VDS_VOLUME_NOTIFICATION Volume;
            Windows::Win32::SystemServices::VDS_PARTITION_NOTIFICATION Partition;
            Windows::Win32::SystemServices::VDS_DRIVE_LETTER_NOTIFICATION Letter;
            Windows::Win32::SystemServices::VDS_FILE_SYSTEM_NOTIFICATION FileSystem;
            Windows::Win32::SystemServices::VDS_MOUNT_POINT_NOTIFICATION MountPoint;
            Windows::Win32::SystemServices::VDS_SUB_SYSTEM_NOTIFICATION SubSystem;
            Windows::Win32::SystemServices::VDS_CONTROLLER_NOTIFICATION Controller;
            Windows::Win32::SystemServices::VDS_DRIVE_NOTIFICATION Drive;
            Windows::Win32::SystemServices::VDS_LUN_NOTIFICATION Lun;
            Windows::Win32::SystemServices::VDS_PORT_NOTIFICATION Port;
            Windows::Win32::SystemServices::VDS_PORTAL_NOTIFICATION Portal;
            Windows::Win32::SystemServices::VDS_TARGET_NOTIFICATION Target;
            Windows::Win32::SystemServices::VDS_PORTAL_GROUP_NOTIFICATION PortalGroup;
            Windows::Win32::SystemServices::VDS_SERVICE_NOTIFICATION Service;
        };
        Windows::Win32::SystemServices::VDS_NOTIFICATION_TARGET_TYPE objectType;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VDS_ASYNC_OUTPUT
    {
        union _Anonymous_e__Union
        {
            struct _cp
            {
                uint64_t ullOffset;
                ::win32::guid volumeId;
            };
            struct _cv
            {
                Windows::Win32::Com::IUnknown* pVolumeUnk;
            };
            struct _bvp
            {
                Windows::Win32::Com::IUnknown* pVolumeUnk;
            };
            struct _sv
            {
                uint64_t ullReclaimedBytes;
            };
            struct _cl
            {
                Windows::Win32::Com::IUnknown* pLunUnk;
            };
            struct _ct
            {
                Windows::Win32::Com::IUnknown* pTargetUnk;
            };
            struct _cpg
            {
                Windows::Win32::Com::IUnknown* pPortalGroupUnk;
            };
            struct _cvd
            {
                Windows::Win32::Com::IUnknown* pVDiskUnk;
            };
            _cp cp;
            _cv cv;
            _bvp bvp;
            _sv sv;
            _cl cl;
            _ct ct;
            _cpg cpg;
            _cvd cvd;
        };
        Windows::Win32::SystemServices::VDS_ASYNC_OUTPUT_TYPE type;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VDS_PATH_ID
    {
        uint64_t ullSourceId;
        uint64_t ullPathId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VDS_WWN
    {
        uint8_t rguchWwn[8];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VDS_IPADDRESS
    {
        Windows::Win32::SystemServices::VDS_IPADDRESS_TYPE type;
        uint32_t ipv4Address;
        uint8_t ipv6Address[16];
        uint32_t ulIpv6FlowInfo;
        uint32_t ulIpv6ScopeId;
        uint16_t wszTextAddress[257];
        uint32_t ulPort;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VDS_ISCSI_IPSEC_KEY
    {
        uint8_t* pKey;
        uint32_t ulKeySize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VDS_ISCSI_SHARED_SECRET
    {
        uint8_t* pSharedSecret;
        uint32_t ulSharedSecretSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VDS_HBAPORT_PROP
    {
        ::win32::guid id;
        Windows::Win32::SystemServices::VDS_WWN wwnNode;
        Windows::Win32::SystemServices::VDS_WWN wwnPort;
        Windows::Win32::SystemServices::VDS_HBAPORT_TYPE type;
        Windows::Win32::SystemServices::VDS_HBAPORT_STATUS status;
        uint32_t ulPortSpeed;
        uint32_t ulSupportedPortSpeed;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VDS_ISCSI_INITIATOR_ADAPTER_PROP
    {
        ::win32::guid id;
        uint16_t* pwszName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VDS_ISCSI_INITIATOR_PORTAL_PROP
    {
        ::win32::guid id;
        Windows::Win32::SystemServices::VDS_IPADDRESS address;
        uint32_t ulPortIndex;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VDS_PROVIDER_PROP
    {
        ::win32::guid id;
        uint16_t* pwszName;
        ::win32::guid guidVersionId;
        uint16_t* pwszVersion;
        Windows::Win32::SystemServices::VDS_PROVIDER_TYPE type;
        uint32_t ulFlags;
        uint32_t ulStripeSizeFlags;
        int16_t sRebuildPriority;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VDS_PATH_INFO
    {
        union _Anonymous1_e__Union
        {
            ::win32::guid controllerPortId;
            ::win32::guid targetPortalId;
        };
        union _Anonymous2_e__Union
        {
            ::win32::guid hbaPortId;
            ::win32::guid initiatorAdapterId;
        };
        union _Anonymous3_e__Union
        {
            Windows::Win32::SystemServices::VDS_HBAPORT_PROP* pHbaPortProp;
            Windows::Win32::SystemServices::VDS_IPADDRESS* pInitiatorPortalIpAddr;
        };
        Windows::Win32::SystemServices::VDS_PATH_ID pathId;
        Windows::Win32::SystemServices::VDS_HWPROVIDER_TYPE type;
        Windows::Win32::SystemServices::VDS_PATH_STATUS status;
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
        _Anonymous3_e__Union Anonymous3;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VDS_PATH_POLICY
    {
        Windows::Win32::SystemServices::VDS_PATH_ID pathId;
        Windows::Win32::SystemServices::BOOL bPrimaryPath;
        uint32_t ulWeight;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VDS_HINTS
    {
        uint64_t ullHintMask;
        uint64_t ullExpectedMaximumSize;
        uint32_t ulOptimalReadSize;
        uint32_t ulOptimalReadAlignment;
        uint32_t ulOptimalWriteSize;
        uint32_t ulOptimalWriteAlignment;
        uint32_t ulMaximumDriveCount;
        uint32_t ulStripeSize;
        Windows::Win32::SystemServices::BOOL bFastCrashRecoveryRequired;
        Windows::Win32::SystemServices::BOOL bMostlyReads;
        Windows::Win32::SystemServices::BOOL bOptimizeForSequentialReads;
        Windows::Win32::SystemServices::BOOL bOptimizeForSequentialWrites;
        Windows::Win32::SystemServices::BOOL bRemapEnabled;
        Windows::Win32::SystemServices::BOOL bReadBackVerifyEnabled;
        Windows::Win32::SystemServices::BOOL bWriteThroughCachingEnabled;
        Windows::Win32::SystemServices::BOOL bHardwareChecksumEnabled;
        Windows::Win32::SystemServices::BOOL bIsYankable;
        int16_t sRebuildPriority;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VDS_HINTS2
    {
        uint64_t ullHintMask;
        uint64_t ullExpectedMaximumSize;
        uint32_t ulOptimalReadSize;
        uint32_t ulOptimalReadAlignment;
        uint32_t ulOptimalWriteSize;
        uint32_t ulOptimalWriteAlignment;
        uint32_t ulMaximumDriveCount;
        uint32_t ulStripeSize;
        uint32_t ulReserved1;
        uint32_t ulReserved2;
        uint32_t ulReserved3;
        Windows::Win32::SystemServices::BOOL bFastCrashRecoveryRequired;
        Windows::Win32::SystemServices::BOOL bMostlyReads;
        Windows::Win32::SystemServices::BOOL bOptimizeForSequentialReads;
        Windows::Win32::SystemServices::BOOL bOptimizeForSequentialWrites;
        Windows::Win32::SystemServices::BOOL bRemapEnabled;
        Windows::Win32::SystemServices::BOOL bReadBackVerifyEnabled;
        Windows::Win32::SystemServices::BOOL bWriteThroughCachingEnabled;
        Windows::Win32::SystemServices::BOOL bHardwareChecksumEnabled;
        Windows::Win32::SystemServices::BOOL bIsYankable;
        Windows::Win32::SystemServices::BOOL bAllocateHotSpare;
        Windows::Win32::SystemServices::BOOL bUseMirroredCache;
        Windows::Win32::SystemServices::BOOL bReadCachingEnabled;
        Windows::Win32::SystemServices::BOOL bWriteCachingEnabled;
        Windows::Win32::SystemServices::BOOL bMediaScanEnabled;
        Windows::Win32::SystemServices::BOOL bConsistencyCheckEnabled;
        Windows::Win32::SystemServices::VDS_STORAGE_BUS_TYPE BusType;
        Windows::Win32::SystemServices::BOOL bReserved1;
        Windows::Win32::SystemServices::BOOL bReserved2;
        Windows::Win32::SystemServices::BOOL bReserved3;
        int16_t sRebuildPriority;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VDS_SUB_SYSTEM_PROP
    {
        ::win32::guid id;
        uint16_t* pwszFriendlyName;
        uint16_t* pwszIdentification;
        uint32_t ulFlags;
        uint32_t ulStripeSizeFlags;
        Windows::Win32::SystemServices::VDS_SUB_SYSTEM_STATUS status;
        Windows::Win32::SystemServices::VDS_HEALTH health;
        int16_t sNumberOfInternalBuses;
        int16_t sMaxNumberOfSlotsEachBus;
        int16_t sMaxNumberOfControllers;
        int16_t sRebuildPriority;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VDS_SUB_SYSTEM_PROP2
    {
        ::win32::guid id;
        uint16_t* pwszFriendlyName;
        uint16_t* pwszIdentification;
        uint32_t ulFlags;
        uint32_t ulStripeSizeFlags;
        uint32_t ulSupportedRaidTypeFlags;
        Windows::Win32::SystemServices::VDS_SUB_SYSTEM_STATUS status;
        Windows::Win32::SystemServices::VDS_HEALTH health;
        int16_t sNumberOfInternalBuses;
        int16_t sMaxNumberOfSlotsEachBus;
        int16_t sMaxNumberOfControllers;
        int16_t sRebuildPriority;
        uint32_t ulNumberOfEnclosures;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VDS_CONTROLLER_PROP
    {
        ::win32::guid id;
        uint16_t* pwszFriendlyName;
        uint16_t* pwszIdentification;
        Windows::Win32::SystemServices::VDS_CONTROLLER_STATUS status;
        Windows::Win32::SystemServices::VDS_HEALTH health;
        int16_t sNumberOfPorts;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VDS_DRIVE_PROP
    {
        ::win32::guid id;
        uint64_t ullSize;
        uint16_t* pwszFriendlyName;
        uint16_t* pwszIdentification;
        uint32_t ulFlags;
        Windows::Win32::SystemServices::VDS_DRIVE_STATUS status;
        Windows::Win32::SystemServices::VDS_HEALTH health;
        int16_t sInternalBusNumber;
        int16_t sSlotNumber;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VDS_DRIVE_PROP2
    {
        ::win32::guid id;
        uint64_t ullSize;
        uint16_t* pwszFriendlyName;
        uint16_t* pwszIdentification;
        uint32_t ulFlags;
        Windows::Win32::SystemServices::VDS_DRIVE_STATUS status;
        Windows::Win32::SystemServices::VDS_HEALTH health;
        int16_t sInternalBusNumber;
        int16_t sSlotNumber;
        uint32_t ulEnclosureNumber;
        Windows::Win32::SystemServices::VDS_STORAGE_BUS_TYPE busType;
        uint32_t ulSpindleSpeed;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VDS_DRIVE_EXTENT
    {
        ::win32::guid id;
        ::win32::guid LunId;
        uint64_t ullSize;
        Windows::Win32::SystemServices::BOOL bUsed;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VDS_LUN_PROP
    {
        ::win32::guid id;
        uint64_t ullSize;
        uint16_t* pwszFriendlyName;
        uint16_t* pwszIdentification;
        uint16_t* pwszUnmaskingList;
        uint32_t ulFlags;
        Windows::Win32::SystemServices::VDS_LUN_TYPE type;
        Windows::Win32::SystemServices::VDS_LUN_STATUS status;
        Windows::Win32::SystemServices::VDS_HEALTH health;
        Windows::Win32::SystemServices::VDS_TRANSITION_STATE TransitionState;
        int16_t sRebuildPriority;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VDS_LUN_PLEX_PROP
    {
        ::win32::guid id;
        uint64_t ullSize;
        Windows::Win32::SystemServices::VDS_LUN_PLEX_TYPE type;
        Windows::Win32::SystemServices::VDS_LUN_PLEX_STATUS status;
        Windows::Win32::SystemServices::VDS_HEALTH health;
        Windows::Win32::SystemServices::VDS_TRANSITION_STATE TransitionState;
        uint32_t ulFlags;
        uint32_t ulStripeSize;
        int16_t sRebuildPriority;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VDS_PORT_PROP
    {
        ::win32::guid id;
        uint16_t* pwszFriendlyName;
        uint16_t* pwszIdentification;
        Windows::Win32::SystemServices::VDS_PORT_STATUS status;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VDS_ISCSI_PORTAL_PROP
    {
        ::win32::guid id;
        Windows::Win32::SystemServices::VDS_IPADDRESS address;
        Windows::Win32::SystemServices::VDS_ISCSI_PORTAL_STATUS status;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VDS_ISCSI_TARGET_PROP
    {
        ::win32::guid id;
        uint16_t* pwszIscsiName;
        uint16_t* pwszFriendlyName;
        Windows::Win32::SystemServices::BOOL bChapEnabled;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VDS_ISCSI_PORTALGROUP_PROP
    {
        ::win32::guid id;
        uint16_t tag;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VDS_POOL_CUSTOM_ATTRIBUTES
    {
        uint16_t* pwszName;
        uint16_t* pwszValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VDS_POOL_ATTRIBUTES
    {
        uint64_t ullAttributeMask;
        Windows::Win32::SystemServices::VDS_RAID_TYPE raidType;
        Windows::Win32::SystemServices::VDS_STORAGE_BUS_TYPE busType;
        uint16_t* pwszIntendedUsage;
        Windows::Win32::SystemServices::BOOL bSpinDown;
        Windows::Win32::SystemServices::BOOL bIsThinProvisioned;
        uint64_t ullProvisionedSpace;
        Windows::Win32::SystemServices::BOOL bNoSinglePointOfFailure;
        uint32_t ulDataRedundancyMax;
        uint32_t ulDataRedundancyMin;
        uint32_t ulDataRedundancyDefault;
        uint32_t ulPackageRedundancyMax;
        uint32_t ulPackageRedundancyMin;
        uint32_t ulPackageRedundancyDefault;
        uint32_t ulStripeSize;
        uint32_t ulStripeSizeMax;
        uint32_t ulStripeSizeMin;
        uint32_t ulDefaultStripeSize;
        uint32_t ulNumberOfColumns;
        uint32_t ulNumberOfColumnsMax;
        uint32_t ulNumberOfColumnsMin;
        uint32_t ulDefaultNumberofColumns;
        uint32_t ulDataAvailabilityHint;
        uint32_t ulAccessRandomnessHint;
        uint32_t ulAccessDirectionHint;
        uint32_t ulAccessSizeHint;
        uint32_t ulAccessLatencyHint;
        uint32_t ulAccessBandwidthWeightHint;
        uint32_t ulStorageCostHint;
        uint32_t ulStorageEfficiencyHint;
        uint32_t ulNumOfCustomAttributes;
        Windows::Win32::SystemServices::VDS_POOL_CUSTOM_ATTRIBUTES* pPoolCustomAttributes;
        Windows::Win32::SystemServices::BOOL bReserved1;
        Windows::Win32::SystemServices::BOOL bReserved2;
        uint32_t ulReserved1;
        uint32_t ulReserved2;
        uint64_t ullReserved1;
        uint64_t ullReserved2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VDS_STORAGE_POOL_PROP
    {
        ::win32::guid id;
        Windows::Win32::SystemServices::VDS_STORAGE_POOL_STATUS status;
        Windows::Win32::SystemServices::VDS_HEALTH health;
        Windows::Win32::SystemServices::VDS_STORAGE_POOL_TYPE type;
        uint16_t* pwszName;
        uint16_t* pwszDescription;
        uint64_t ullTotalConsumedSpace;
        uint64_t ullTotalManagedSpace;
        uint64_t ullRemainingFreeSpace;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VDS_STORAGE_POOL_DRIVE_EXTENT
    {
        ::win32::guid id;
        uint64_t ullSize;
        Windows::Win32::SystemServices::BOOL bUsed;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VSS_SNAPSHOT_PROP
    {
        ::win32::guid m_SnapshotId;
        ::win32::guid m_SnapshotSetId;
        int32_t m_lSnapshotsCount;
        uint16_t* m_pwszSnapshotDeviceObject;
        uint16_t* m_pwszOriginalVolumeName;
        uint16_t* m_pwszOriginatingMachine;
        uint16_t* m_pwszServiceMachine;
        uint16_t* m_pwszExposedName;
        uint16_t* m_pwszExposedPath;
        ::win32::guid m_ProviderId;
        int32_t m_lSnapshotAttributes;
        int64_t m_tsCreationTimestamp;
        Windows::Win32::SystemServices::VSS_SNAPSHOT_STATE m_eStatus;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VSS_PROVIDER_PROP
    {
        ::win32::guid m_ProviderId;
        uint16_t* m_pwszProviderName;
        Windows::Win32::SystemServices::VSS_PROVIDER_TYPE m_eProviderType;
        uint16_t* m_pwszProviderVersion;
        ::win32::guid m_ProviderVersionId;
        ::win32::guid m_ClassId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    union __MIDL___MIDL_itf_vss_0000_0000_0001
    {
        Windows::Win32::SystemServices::VSS_SNAPSHOT_PROP Snap;
        Windows::Win32::SystemServices::VSS_PROVIDER_PROP Prov;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VSS_OBJECT_PROP
    {
        Windows::Win32::SystemServices::VSS_OBJECT_TYPE Type;
        Windows::Win32::SystemServices::__MIDL___MIDL_itf_vss_0000_0000_0001 Obj;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IVssExamineWriterMetadata
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VSS_VOLUME_PROP
    {
        uint16_t* m_pwszVolumeName;
        uint16_t* m_pwszVolumeDisplayName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VSS_DIFF_VOLUME_PROP
    {
        uint16_t* m_pwszVolumeName;
        uint16_t* m_pwszVolumeDisplayName;
        int64_t m_llVolumeFreeSpace;
        int64_t m_llVolumeTotalSpace;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VSS_DIFF_AREA_PROP
    {
        uint16_t* m_pwszVolumeName;
        uint16_t* m_pwszDiffAreaVolumeName;
        int64_t m_llMaximumDiffSpace;
        int64_t m_llAllocatedDiffSpace;
        int64_t m_llUsedDiffSpace;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    union __MIDL___MIDL_itf_vsmgmt_0000_0000_0001
    {
        Windows::Win32::SystemServices::VSS_VOLUME_PROP Vol;
        Windows::Win32::SystemServices::VSS_DIFF_VOLUME_PROP DiffVol;
        Windows::Win32::SystemServices::VSS_DIFF_AREA_PROP DiffArea;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VSS_MGMT_OBJECT_PROP
    {
        Windows::Win32::SystemServices::VSS_MGMT_OBJECT_TYPE Type;
        Windows::Win32::SystemServices::__MIDL___MIDL_itf_vsmgmt_0000_0000_0001 Obj;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VSS_VOLUME_PROTECTION_INFO
    {
        Windows::Win32::SystemServices::VSS_PROTECTION_LEVEL m_protectionLevel;
        Windows::Win32::SystemServices::BOOL m_volumeIsOfflineForProtection;
        Windows::Win32::SystemServices::VSS_PROTECTION_FAULT m_protectionFault;
        int32_t m_failureStatus;
        Windows::Win32::SystemServices::BOOL m_volumeHasUnusedDiffArea;
        uint32_t m_reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IDDVideoPortContainer
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IDirectDrawVideoPort
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IDirectDrawVideoPortNotify
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IDDVideoPortContainerVtbl
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IDirectDrawVideoPortVtbl
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct IDirectDrawVideoPortNotifyVtbl
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DDVIDEOPORTSTATUS
    {
        uint32_t dwSize;
        Windows::Win32::SystemServices::BOOL bInUse;
        uint32_t dwFlags;
        uint32_t dwReserved1;
        Windows::Win32::CoreAudio::DDVIDEOPORTCONNECT VideoPortType;
        size_t dwReserved2;
        size_t dwReserved3;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DDVIDEOPORTNOTIFY
    {
        Windows::Win32::SystemServices::LARGE_INTEGER ApproximateTimeStamp;
        int32_t lField;
        uint32_t dwSurfaceIndex;
        int32_t lDone;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct _DD_DESTROYDRIVERDATA
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct _DD_SETMODEDATA
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct _DD_GETVPORTAUTOFLIPSURFACEDATA
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DD_MORECAPS
    {
        uint32_t dwSize;
        uint32_t dwAlphaCaps;
        uint32_t dwSVBAlphaCaps;
        uint32_t dwVSBAlphaCaps;
        uint32_t dwSSBAlphaCaps;
        uint32_t dwFilterCaps;
        uint32_t dwSVBFilterCaps;
        uint32_t dwVSBFilterCaps;
        uint32_t dwSSBFilterCaps;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectDraw
{
    struct DDSCAPS
    {
        uint32_t dwCaps;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DDNTCORECAPS
    {
        uint32_t dwSize;
        uint32_t dwCaps;
        uint32_t dwCaps2;
        uint32_t dwCKeyCaps;
        uint32_t dwFXCaps;
        uint32_t dwFXAlphaCaps;
        uint32_t dwPalCaps;
        uint32_t dwSVCaps;
        uint32_t dwAlphaBltConstBitDepths;
        uint32_t dwAlphaBltPixelBitDepths;
        uint32_t dwAlphaBltSurfaceBitDepths;
        uint32_t dwAlphaOverlayConstBitDepths;
        uint32_t dwAlphaOverlayPixelBitDepths;
        uint32_t dwAlphaOverlaySurfaceBitDepths;
        uint32_t dwZBufferBitDepths;
        uint32_t dwVidMemTotal;
        uint32_t dwVidMemFree;
        uint32_t dwMaxVisibleOverlays;
        uint32_t dwCurrVisibleOverlays;
        uint32_t dwNumFourCCCodes;
        uint32_t dwAlignBoundarySrc;
        uint32_t dwAlignSizeSrc;
        uint32_t dwAlignBoundaryDest;
        uint32_t dwAlignSizeDest;
        uint32_t dwAlignStrideAlign;
        uint32_t dwRops[8];
        Windows::Win32::DirectDraw::DDSCAPS ddsCaps;
        uint32_t dwMinOverlayStretch;
        uint32_t dwMaxOverlayStretch;
        uint32_t dwMinLiveVideoStretch;
        uint32_t dwMaxLiveVideoStretch;
        uint32_t dwMinHwCodecStretch;
        uint32_t dwMaxHwCodecStretch;
        uint32_t dwReserved1;
        uint32_t dwReserved2;
        uint32_t dwReserved3;
        uint32_t dwSVBCaps;
        uint32_t dwSVBCKeyCaps;
        uint32_t dwSVBFXCaps;
        uint32_t dwSVBRops[8];
        uint32_t dwVSBCaps;
        uint32_t dwVSBCKeyCaps;
        uint32_t dwVSBFXCaps;
        uint32_t dwVSBRops[8];
        uint32_t dwSSBCaps;
        uint32_t dwSSBCKeyCaps;
        uint32_t dwSSBFXCaps;
        uint32_t dwSSBRops[8];
        uint32_t dwMaxVideoPorts;
        uint32_t dwCurrVideoPorts;
        uint32_t dwSVBCaps2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct VIDEOMEMORYINFO
    {
        size_t fpPrimary;
        uint32_t dwFlags;
        uint32_t dwDisplayWidth;
        uint32_t dwDisplayHeight;
        int32_t lDisplayPitch;
        Windows::Win32::DirectDraw::DDPIXELFORMAT ddpfDisplay;
        uint32_t dwOffscreenAlign;
        uint32_t dwOverlayAlign;
        uint32_t dwTextureAlign;
        uint32_t dwZBufferAlign;
        uint32_t dwAlphaAlign;
        void* pvPrimary;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DD_HALINFO_V4
    {
        uint32_t dwSize;
        Windows::Win32::DisplayDevices::VIDEOMEMORYINFO vmiData;
        Windows::Win32::SystemServices::DDNTCORECAPS ddCaps;
        Windows::Win32::DisplayDevices::PDD_GETDRIVERINFO* GetDriverInfo;
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DD_SETCLIPLISTDATA
    {
        Windows::Win32::DisplayDevices::DD_DIRECTDRAW_GLOBAL* lpDD;
        Windows::Win32::DisplayDevices::DD_SURFACE_LOCAL* lpDDSurface;
        int32_t ddRVal;
        void* SetClipList;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DD_DRVSETCOLORKEYDATA
    {
        Windows::Win32::DisplayDevices::DD_SURFACE_LOCAL* lpDDSurface;
        uint32_t dwFlags;
        Windows::Win32::DirectShow::DDCOLORKEY ckNew;
        int32_t ddRVal;
        void* SetColorKey;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DD_DESTROYDDLOCALDATA
    {
        uint32_t dwFlags;
        Windows::Win32::DisplayDevices::DD_DIRECTDRAW_LOCAL* pDDLcl;
        int32_t ddRVal;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DRECT
    {
        union _Anonymous1_e__Union
        {
            int32_t x1;
            int32_t lX1;
        };
        union _Anonymous2_e__Union
        {
            int32_t y1;
            int32_t lY1;
        };
        union _Anonymous3_e__Union
        {
            int32_t x2;
            int32_t lX2;
        };
        union _Anonymous4_e__Union
        {
            int32_t y2;
            int32_t lY2;
        };
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
        _Anonymous3_e__Union Anonymous3;
        _Anonymous4_e__Union Anonymous4;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DHVERTEX
    {
        union _Anonymous1_e__Union
        {
            float hx;
            float dvHX;
        };
        union _Anonymous2_e__Union
        {
            float hy;
            float dvHY;
        };
        union _Anonymous3_e__Union
        {
            float hz;
            float dvHZ;
        };
        uint32_t dwFlags;
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
        _Anonymous3_e__Union Anonymous3;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DTLVERTEX
    {
        union _Anonymous1_e__Union
        {
            float sx;
            float dvSX;
        };
        union _Anonymous2_e__Union
        {
            float sy;
            float dvSY;
        };
        union _Anonymous3_e__Union
        {
            float sz;
            float dvSZ;
        };
        union _Anonymous4_e__Union
        {
            float rhw;
            float dvRHW;
        };
        union _Anonymous5_e__Union
        {
            uint32_t color;
            uint32_t dcColor;
        };
        union _Anonymous6_e__Union
        {
            uint32_t specular;
            uint32_t dcSpecular;
        };
        union _Anonymous7_e__Union
        {
            float tu;
            float dvTU;
        };
        union _Anonymous8_e__Union
        {
            float tv;
            float dvTV;
        };
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
        _Anonymous3_e__Union Anonymous3;
        _Anonymous4_e__Union Anonymous4;
        _Anonymous5_e__Union Anonymous5;
        _Anonymous6_e__Union Anonymous6;
        _Anonymous7_e__Union Anonymous7;
        _Anonymous8_e__Union Anonymous8;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DLVERTEX
    {
        union _Anonymous1_e__Union
        {
            float x;
            float dvX;
        };
        union _Anonymous2_e__Union
        {
            float y;
            float dvY;
        };
        union _Anonymous3_e__Union
        {
            float z;
            float dvZ;
        };
        union _Anonymous4_e__Union
        {
            uint32_t color;
            uint32_t dcColor;
        };
        union _Anonymous5_e__Union
        {
            uint32_t specular;
            uint32_t dcSpecular;
        };
        union _Anonymous6_e__Union
        {
            float tu;
            float dvTU;
        };
        union _Anonymous7_e__Union
        {
            float tv;
            float dvTV;
        };
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
        _Anonymous3_e__Union Anonymous3;
        uint32_t dwReserved;
        _Anonymous4_e__Union Anonymous4;
        _Anonymous5_e__Union Anonymous5;
        _Anonymous6_e__Union Anonymous6;
        _Anonymous7_e__Union Anonymous7;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DVERTEX
    {
        union _Anonymous1_e__Union
        {
            float x;
            float dvX;
        };
        union _Anonymous2_e__Union
        {
            float y;
            float dvY;
        };
        union _Anonymous3_e__Union
        {
            float z;
            float dvZ;
        };
        union _Anonymous4_e__Union
        {
            float nx;
            float dvNX;
        };
        union _Anonymous5_e__Union
        {
            float ny;
            float dvNY;
        };
        union _Anonymous6_e__Union
        {
            float nz;
            float dvNZ;
        };
        union _Anonymous7_e__Union
        {
            float tu;
            float dvTU;
        };
        union _Anonymous8_e__Union
        {
            float tv;
            float dvTV;
        };
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
        _Anonymous3_e__Union Anonymous3;
        _Anonymous4_e__Union Anonymous4;
        _Anonymous5_e__Union Anonymous5;
        _Anonymous6_e__Union Anonymous6;
        _Anonymous7_e__Union Anonymous7;
        _Anonymous8_e__Union Anonymous8;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DVIEWPORT
    {
        uint32_t dwSize;
        uint32_t dwX;
        uint32_t dwY;
        uint32_t dwWidth;
        uint32_t dwHeight;
        float dvScaleX;
        float dvScaleY;
        float dvMaxX;
        float dvMaxY;
        float dvMinZ;
        float dvMaxZ;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DVIEWPORT2
    {
        uint32_t dwSize;
        uint32_t dwX;
        uint32_t dwY;
        uint32_t dwWidth;
        uint32_t dwHeight;
        float dvClipX;
        float dvClipY;
        float dvClipWidth;
        float dvClipHeight;
        float dvMinZ;
        float dvMaxZ;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DVIEWPORT7
    {
        uint32_t dwX;
        uint32_t dwY;
        uint32_t dwWidth;
        uint32_t dwHeight;
        float dvMinZ;
        float dvMaxZ;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DTRANSFORMDATA
    {
        uint32_t dwSize;
        void* lpIn;
        uint32_t dwInSize;
        void* lpOut;
        uint32_t dwOutSize;
        Windows::Win32::SystemServices::D3DHVERTEX* lpHOut;
        uint32_t dwClip;
        uint32_t dwClipIntersection;
        uint32_t dwClipUnion;
        Windows::Win32::SystemServices::D3DRECT drExtent;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DLIGHTINGELEMENT
    {
        Windows::Win32::SystemServices::D3DVECTOR dvPosition;
        Windows::Win32::SystemServices::D3DVECTOR dvNormal;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DMATERIAL
    {
        union _Anonymous1_e__Union
        {
            Windows::Win32::Dxgi::DXGI_RGBA diffuse;
            Windows::Win32::Dxgi::DXGI_RGBA dcvDiffuse;
        };
        union _Anonymous2_e__Union
        {
            Windows::Win32::Dxgi::DXGI_RGBA ambient;
            Windows::Win32::Dxgi::DXGI_RGBA dcvAmbient;
        };
        union _Anonymous3_e__Union
        {
            Windows::Win32::Dxgi::DXGI_RGBA specular;
            Windows::Win32::Dxgi::DXGI_RGBA dcvSpecular;
        };
        union _Anonymous4_e__Union
        {
            Windows::Win32::Dxgi::DXGI_RGBA emissive;
            Windows::Win32::Dxgi::DXGI_RGBA dcvEmissive;
        };
        union _Anonymous5_e__Union
        {
            float power;
            float dvPower;
        };
        uint32_t dwSize;
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
        _Anonymous3_e__Union Anonymous3;
        _Anonymous4_e__Union Anonymous4;
        _Anonymous5_e__Union Anonymous5;
        uint32_t hTexture;
        uint32_t dwRampSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DMATERIAL7
    {
        union _Anonymous1_e__Union
        {
            Windows::Win32::Dxgi::DXGI_RGBA diffuse;
            Windows::Win32::Dxgi::DXGI_RGBA dcvDiffuse;
        };
        union _Anonymous2_e__Union
        {
            Windows::Win32::Dxgi::DXGI_RGBA ambient;
            Windows::Win32::Dxgi::DXGI_RGBA dcvAmbient;
        };
        union _Anonymous3_e__Union
        {
            Windows::Win32::Dxgi::DXGI_RGBA specular;
            Windows::Win32::Dxgi::DXGI_RGBA dcvSpecular;
        };
        union _Anonymous4_e__Union
        {
            Windows::Win32::Dxgi::DXGI_RGBA emissive;
            Windows::Win32::Dxgi::DXGI_RGBA dcvEmissive;
        };
        union _Anonymous5_e__Union
        {
            float power;
            float dvPower;
        };
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
        _Anonymous3_e__Union Anonymous3;
        _Anonymous4_e__Union Anonymous4;
        _Anonymous5_e__Union Anonymous5;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DLIGHT
    {
        uint32_t dwSize;
        Windows::Win32::SystemServices::D3DLIGHTTYPE dltType;
        Windows::Win32::Dxgi::DXGI_RGBA dcvColor;
        Windows::Win32::SystemServices::D3DVECTOR dvPosition;
        Windows::Win32::SystemServices::D3DVECTOR dvDirection;
        float dvRange;
        float dvFalloff;
        float dvAttenuation0;
        float dvAttenuation1;
        float dvAttenuation2;
        float dvTheta;
        float dvPhi;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DLIGHT7
    {
        Windows::Win32::SystemServices::D3DLIGHTTYPE dltType;
        Windows::Win32::Dxgi::DXGI_RGBA dcvDiffuse;
        Windows::Win32::Dxgi::DXGI_RGBA dcvSpecular;
        Windows::Win32::Dxgi::DXGI_RGBA dcvAmbient;
        Windows::Win32::SystemServices::D3DVECTOR dvPosition;
        Windows::Win32::SystemServices::D3DVECTOR dvDirection;
        float dvRange;
        float dvFalloff;
        float dvAttenuation0;
        float dvAttenuation1;
        float dvAttenuation2;
        float dvTheta;
        float dvPhi;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DLIGHT2
    {
        uint32_t dwSize;
        Windows::Win32::SystemServices::D3DLIGHTTYPE dltType;
        Windows::Win32::Dxgi::DXGI_RGBA dcvColor;
        Windows::Win32::SystemServices::D3DVECTOR dvPosition;
        Windows::Win32::SystemServices::D3DVECTOR dvDirection;
        float dvRange;
        float dvFalloff;
        float dvAttenuation0;
        float dvAttenuation1;
        float dvAttenuation2;
        float dvTheta;
        float dvPhi;
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DLIGHTDATA
    {
        uint32_t dwSize;
        Windows::Win32::SystemServices::D3DLIGHTINGELEMENT* lpIn;
        uint32_t dwInSize;
        Windows::Win32::SystemServices::D3DTLVERTEX* lpOut;
        uint32_t dwOutSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DINSTRUCTION
    {
        uint8_t bOpcode;
        uint8_t bSize;
        uint16_t wCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DTEXTURELOAD
    {
        uint32_t hDestTexture;
        uint32_t hSrcTexture;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DPICKRECORD
    {
        uint8_t bOpcode;
        uint8_t bPad;
        uint32_t dwOffset;
        float dvZ;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DLINEPATTERN
    {
        uint16_t wRepeatFactor;
        uint16_t wLinePattern;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DSTATE
    {
        union _Anonymous1_e__Union
        {
            Windows::Win32::SystemServices::D3DTRANSFORMSTATETYPE dtstTransformStateType;
            Windows::Win32::SystemServices::D3DLIGHTSTATETYPE dlstLightStateType;
            Windows::Win32::SystemServices::D3DRENDERSTATETYPE drstRenderStateType;
        };
        union _Anonymous2_e__Union
        {
            uint32_t dwArg[1];
            float dvArg[1];
        };
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DMATRIXLOAD
    {
        uint32_t hDestMatrix;
        uint32_t hSrcMatrix;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DMATRIXMULTIPLY
    {
        uint32_t hDestMatrix;
        uint32_t hSrcMatrix1;
        uint32_t hSrcMatrix2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DPROCESSVERTICES
    {
        uint32_t dwFlags;
        uint16_t wStart;
        uint16_t wDest;
        uint32_t dwCount;
        uint32_t dwReserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DTRIANGLE
    {
        union _Anonymous1_e__Union
        {
            uint16_t v1;
            uint16_t wV1;
        };
        union _Anonymous2_e__Union
        {
            uint16_t v2;
            uint16_t wV2;
        };
        union _Anonymous3_e__Union
        {
            uint16_t v3;
            uint16_t wV3;
        };
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
        _Anonymous3_e__Union Anonymous3;
        uint16_t wFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DLINE
    {
        union _Anonymous1_e__Union
        {
            uint16_t v1;
            uint16_t wV1;
        };
        union _Anonymous2_e__Union
        {
            uint16_t v2;
            uint16_t wV2;
        };
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DSPAN
    {
        uint16_t wCount;
        uint16_t wFirst;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DPOINT
    {
        uint16_t wCount;
        uint16_t wFirst;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DBRANCH
    {
        uint32_t dwMask;
        uint32_t dwValue;
        Windows::Win32::SystemServices::BOOL bNegate;
        uint32_t dwOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DSTATUS
    {
        uint32_t dwFlags;
        uint32_t dwStatus;
        Windows::Win32::SystemServices::D3DRECT drExtent;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DCLIPSTATUS
    {
        uint32_t dwFlags;
        uint32_t dwStatus;
        float minx;
        float maxx;
        float miny;
        float maxy;
        float minz;
        float maxz;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DSTATS
    {
        uint32_t dwSize;
        uint32_t dwTrianglesDrawn;
        uint32_t dwLinesDrawn;
        uint32_t dwPointsDrawn;
        uint32_t dwSpansDrawn;
        uint32_t dwVerticesProcessed;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DEXECUTEDATA
    {
        uint32_t dwSize;
        uint32_t dwVertexOffset;
        uint32_t dwVertexCount;
        uint32_t dwInstructionOffset;
        uint32_t dwInstructionLength;
        uint32_t dwHVertexOffset;
        Windows::Win32::SystemServices::D3DSTATUS dsStatus;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DVERTEXBUFFERDESC
    {
        uint32_t dwSize;
        uint32_t dwCaps;
        uint32_t dwFVF;
        uint32_t dwNumVertices;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DDP_PTRSTRIDE
    {
        void* lpvData;
        uint32_t dwStride;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DDRAWPRIMITIVESTRIDEDDATA
    {
        Windows::Win32::SystemServices::D3DDP_PTRSTRIDE position;
        Windows::Win32::SystemServices::D3DDP_PTRSTRIDE normal;
        Windows::Win32::SystemServices::D3DDP_PTRSTRIDE diffuse;
        Windows::Win32::SystemServices::D3DDP_PTRSTRIDE specular;
        Windows::Win32::SystemServices::D3DDP_PTRSTRIDE textureCoords[8];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DTRANSFORMCAPS
    {
        uint32_t dwSize;
        uint32_t dwCaps;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DLIGHTINGCAPS
    {
        uint32_t dwSize;
        uint32_t dwCaps;
        uint32_t dwLightingModel;
        uint32_t dwNumLights;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct _D3DPrimCaps
    {
        uint32_t dwSize;
        uint32_t dwMiscCaps;
        uint32_t dwRasterCaps;
        uint32_t dwZCmpCaps;
        uint32_t dwSrcBlendCaps;
        uint32_t dwDestBlendCaps;
        uint32_t dwAlphaCmpCaps;
        uint32_t dwShadeCaps;
        uint32_t dwTextureCaps;
        uint32_t dwTextureFilterCaps;
        uint32_t dwTextureBlendCaps;
        uint32_t dwTextureAddressCaps;
        uint32_t dwStippleWidth;
        uint32_t dwStippleHeight;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct _D3DDeviceDesc
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        uint32_t dcmColorModel;
        uint32_t dwDevCaps;
        Windows::Win32::SystemServices::D3DTRANSFORMCAPS dtcTransformCaps;
        Windows::Win32::SystemServices::BOOL bClipping;
        Windows::Win32::SystemServices::D3DLIGHTINGCAPS dlcLightingCaps;
        Windows::Win32::SystemServices::_D3DPrimCaps dpcLineCaps;
        Windows::Win32::SystemServices::_D3DPrimCaps dpcTriCaps;
        uint32_t dwDeviceRenderBitDepth;
        uint32_t dwDeviceZBufferBitDepth;
        uint32_t dwMaxBufferSize;
        uint32_t dwMaxVertexCount;
        uint32_t dwMinTextureWidth;
        uint32_t dwMinTextureHeight;
        uint32_t dwMaxTextureWidth;
        uint32_t dwMaxTextureHeight;
        uint32_t dwMinStippleWidth;
        uint32_t dwMaxStippleWidth;
        uint32_t dwMinStippleHeight;
        uint32_t dwMaxStippleHeight;
        uint32_t dwMaxTextureRepeat;
        uint32_t dwMaxTextureAspectRatio;
        uint32_t dwMaxAnisotropy;
        float dvGuardBandLeft;
        float dvGuardBandTop;
        float dvGuardBandRight;
        float dvGuardBandBottom;
        float dvExtentsAdjust;
        uint32_t dwStencilCaps;
        uint32_t dwFVFCaps;
        uint32_t dwTextureOpCaps;
        uint16_t wMaxTextureBlendStages;
        uint16_t wMaxSimultaneousTextures;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct _D3DDeviceDesc7
    {
        uint32_t dwDevCaps;
        Windows::Win32::SystemServices::_D3DPrimCaps dpcLineCaps;
        Windows::Win32::SystemServices::_D3DPrimCaps dpcTriCaps;
        uint32_t dwDeviceRenderBitDepth;
        uint32_t dwDeviceZBufferBitDepth;
        uint32_t dwMinTextureWidth;
        uint32_t dwMinTextureHeight;
        uint32_t dwMaxTextureWidth;
        uint32_t dwMaxTextureHeight;
        uint32_t dwMaxTextureRepeat;
        uint32_t dwMaxTextureAspectRatio;
        uint32_t dwMaxAnisotropy;
        float dvGuardBandLeft;
        float dvGuardBandTop;
        float dvGuardBandRight;
        float dvGuardBandBottom;
        float dvExtentsAdjust;
        uint32_t dwStencilCaps;
        uint32_t dwFVFCaps;
        uint32_t dwTextureOpCaps;
        uint16_t wMaxTextureBlendStages;
        uint16_t wMaxSimultaneousTextures;
        uint32_t dwMaxActiveLights;
        float dvMaxVertexW;
        ::win32::guid deviceGUID;
        uint16_t wMaxUserClipPlanes;
        uint16_t wMaxVertexBlendMatrices;
        uint32_t dwVertexProcessingCaps;
        uint32_t dwReserved1;
        uint32_t dwReserved2;
        uint32_t dwReserved3;
        uint32_t dwReserved4;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DFINDDEVICESEARCH
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        Windows::Win32::SystemServices::BOOL bHardware;
        uint32_t dcmColorModel;
        ::win32::guid guid;
        uint32_t dwCaps;
        Windows::Win32::SystemServices::_D3DPrimCaps dpcPrimCaps;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DFINDDEVICERESULT
    {
        uint32_t dwSize;
        ::win32::guid guid;
        Windows::Win32::SystemServices::_D3DDeviceDesc ddHwDesc;
        Windows::Win32::SystemServices::_D3DDeviceDesc ddSwDesc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct _D3DExecuteBufferDesc
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        uint32_t dwCaps;
        uint32_t dwBufferSize;
        void* lpData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DDEVINFO_TEXTUREMANAGER
    {
        Windows::Win32::SystemServices::BOOL bThrashing;
        uint32_t dwApproxBytesDownloaded;
        uint32_t dwNumEvicts;
        uint32_t dwNumVidCreates;
        uint32_t dwNumTexturesUsed;
        uint32_t dwNumUsedTexInVid;
        uint32_t dwWorkingSet;
        uint32_t dwWorkingSetBytes;
        uint32_t dwTotalManaged;
        uint32_t dwTotalBytes;
        uint32_t dwLastPri;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DDEVINFO_TEXTURING
    {
        uint32_t dwNumLoads;
        uint32_t dwApproxBytesLoaded;
        uint32_t dwNumPreLoads;
        uint32_t dwNumSet;
        uint32_t dwNumCreates;
        uint32_t dwNumDestroys;
        uint32_t dwNumSetPriorities;
        uint32_t dwNumSetLODs;
        uint32_t dwNumLocks;
        uint32_t dwNumGetDCs;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct _D3DNTHALDeviceDesc_V1
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        uint32_t dcmColorModel;
        uint32_t dwDevCaps;
        Windows::Win32::SystemServices::D3DTRANSFORMCAPS dtcTransformCaps;
        Windows::Win32::SystemServices::BOOL bClipping;
        Windows::Win32::SystemServices::D3DLIGHTINGCAPS dlcLightingCaps;
        Windows::Win32::SystemServices::_D3DPrimCaps dpcLineCaps;
        Windows::Win32::SystemServices::_D3DPrimCaps dpcTriCaps;
        uint32_t dwDeviceRenderBitDepth;
        uint32_t dwDeviceZBufferBitDepth;
        uint32_t dwMaxBufferSize;
        uint32_t dwMaxVertexCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct _D3DNTHALDeviceDesc_V2
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        uint32_t dcmColorModel;
        uint32_t dwDevCaps;
        Windows::Win32::SystemServices::D3DTRANSFORMCAPS dtcTransformCaps;
        Windows::Win32::SystemServices::BOOL bClipping;
        Windows::Win32::SystemServices::D3DLIGHTINGCAPS dlcLightingCaps;
        Windows::Win32::SystemServices::_D3DPrimCaps dpcLineCaps;
        Windows::Win32::SystemServices::_D3DPrimCaps dpcTriCaps;
        uint32_t dwDeviceRenderBitDepth;
        uint32_t dwDeviceZBufferBitDepth;
        uint32_t dwMaxBufferSize;
        uint32_t dwMaxVertexCount;
        uint32_t dwMinTextureWidth;
        uint32_t dwMinTextureHeight;
        uint32_t dwMaxTextureWidth;
        uint32_t dwMaxTextureHeight;
        uint32_t dwMinStippleWidth;
        uint32_t dwMaxStippleWidth;
        uint32_t dwMinStippleHeight;
        uint32_t dwMaxStippleHeight;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct _D3DNTDeviceDesc_V3
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        uint32_t dcmColorModel;
        uint32_t dwDevCaps;
        Windows::Win32::SystemServices::D3DTRANSFORMCAPS dtcTransformCaps;
        Windows::Win32::SystemServices::BOOL bClipping;
        Windows::Win32::SystemServices::D3DLIGHTINGCAPS dlcLightingCaps;
        Windows::Win32::SystemServices::_D3DPrimCaps dpcLineCaps;
        Windows::Win32::SystemServices::_D3DPrimCaps dpcTriCaps;
        uint32_t dwDeviceRenderBitDepth;
        uint32_t dwDeviceZBufferBitDepth;
        uint32_t dwMaxBufferSize;
        uint32_t dwMaxVertexCount;
        uint32_t dwMinTextureWidth;
        uint32_t dwMinTextureHeight;
        uint32_t dwMaxTextureWidth;
        uint32_t dwMaxTextureHeight;
        uint32_t dwMinStippleWidth;
        uint32_t dwMaxStippleWidth;
        uint32_t dwMinStippleHeight;
        uint32_t dwMaxStippleHeight;
        uint32_t dwMaxTextureRepeat;
        uint32_t dwMaxTextureAspectRatio;
        uint32_t dwMaxAnisotropy;
        float dvGuardBandLeft;
        float dvGuardBandTop;
        float dvGuardBandRight;
        float dvGuardBandBottom;
        float dvExtentsAdjust;
        uint32_t dwStencilCaps;
        uint32_t dwFVFCaps;
        uint32_t dwTextureOpCaps;
        uint16_t wMaxTextureBlendStages;
        uint16_t wMaxSimultaneousTextures;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DNTHAL_GLOBALDRIVERDATA
    {
        uint32_t dwSize;
        Windows::Win32::SystemServices::_D3DNTHALDeviceDesc_V1 hwCaps;
        uint32_t dwNumVertices;
        uint32_t dwNumClipVertices;
        uint32_t dwNumTextureFormats;
        Windows::Win32::DirectDraw::DDSURFACEDESC* lpTextureFormats;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DNTHAL_D3DDX6EXTENDEDCAPS
    {
        uint32_t dwSize;
        uint32_t dwMinTextureWidth;
        uint32_t dwMaxTextureWidth;
        uint32_t dwMinTextureHeight;
        uint32_t dwMaxTextureHeight;
        uint32_t dwMinStippleWidth;
        uint32_t dwMaxStippleWidth;
        uint32_t dwMinStippleHeight;
        uint32_t dwMaxStippleHeight;
        uint32_t dwMaxTextureRepeat;
        uint32_t dwMaxTextureAspectRatio;
        uint32_t dwMaxAnisotropy;
        float dvGuardBandLeft;
        float dvGuardBandTop;
        float dvGuardBandRight;
        float dvGuardBandBottom;
        float dvExtentsAdjust;
        uint32_t dwStencilCaps;
        uint32_t dwFVFCaps;
        uint32_t dwTextureOpCaps;
        uint16_t wMaxTextureBlendStages;
        uint16_t wMaxSimultaneousTextures;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DNTHAL_D3DEXTENDEDCAPS
    {
        uint32_t dwSize;
        uint32_t dwMinTextureWidth;
        uint32_t dwMaxTextureWidth;
        uint32_t dwMinTextureHeight;
        uint32_t dwMaxTextureHeight;
        uint32_t dwMinStippleWidth;
        uint32_t dwMaxStippleWidth;
        uint32_t dwMinStippleHeight;
        uint32_t dwMaxStippleHeight;
        uint32_t dwMaxTextureRepeat;
        uint32_t dwMaxTextureAspectRatio;
        uint32_t dwMaxAnisotropy;
        float dvGuardBandLeft;
        float dvGuardBandTop;
        float dvGuardBandRight;
        float dvGuardBandBottom;
        float dvExtentsAdjust;
        uint32_t dwStencilCaps;
        uint32_t dwFVFCaps;
        uint32_t dwTextureOpCaps;
        uint16_t wMaxTextureBlendStages;
        uint16_t wMaxSimultaneousTextures;
        uint32_t dwMaxActiveLights;
        float dvMaxVertexW;
        uint16_t wMaxUserClipPlanes;
        uint16_t wMaxVertexBlendMatrices;
        uint32_t dwVertexProcessingCaps;
        uint32_t dwReserved1;
        uint32_t dwReserved2;
        uint32_t dwReserved3;
        uint32_t dwReserved4;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DNTHAL_CONTEXTCREATEDATA
    {
        union _Anonymous1_e__Union
        {
            Windows::Win32::DisplayDevices::DD_DIRECTDRAW_GLOBAL* lpDDGbl;
            Windows::Win32::DisplayDevices::DD_DIRECTDRAW_LOCAL* lpDDLcl;
        };
        union _Anonymous2_e__Union
        {
            Windows::Win32::DisplayDevices::DD_SURFACE_LOCAL* lpDDS;
            Windows::Win32::DisplayDevices::DD_SURFACE_LOCAL* lpDDSLcl;
        };
        union _Anonymous3_e__Union
        {
            Windows::Win32::DisplayDevices::DD_SURFACE_LOCAL* lpDDSZ;
            Windows::Win32::DisplayDevices::DD_SURFACE_LOCAL* lpDDSZLcl;
        };
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
        _Anonymous3_e__Union Anonymous3;
        uint32_t dwPID;
        size_t dwhContext;
        int32_t ddrval;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DNTHAL_CONTEXTDESTROYDATA
    {
        size_t dwhContext;
        int32_t ddrval;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DNTHAL_CONTEXTDESTROYALLDATA
    {
        uint32_t dwPID;
        int32_t ddrval;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DNTHAL_SCENECAPTUREDATA
    {
        size_t dwhContext;
        uint32_t dwFlag;
        int32_t ddrval;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DNTHAL_TEXTURECREATEDATA
    {
        size_t dwhContext;
        Windows::Win32::SystemServices::HANDLE hDDS;
        size_t dwHandle;
        int32_t ddrval;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DNTHAL_TEXTUREDESTROYDATA
    {
        size_t dwhContext;
        size_t dwHandle;
        int32_t ddrval;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DNTHAL_TEXTURESWAPDATA
    {
        size_t dwhContext;
        size_t dwHandle1;
        size_t dwHandle2;
        int32_t ddrval;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DNTHAL_TEXTUREGETSURFDATA
    {
        size_t dwhContext;
        Windows::Win32::SystemServices::HANDLE hDDS;
        size_t dwHandle;
        int32_t ddrval;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DNTHAL_CALLBACKS
    {
        uint32_t dwSize;
        Windows::Win32::SystemServices::LPD3DNTHAL_CONTEXTCREATECB* ContextCreate;
        Windows::Win32::SystemServices::LPD3DNTHAL_CONTEXTDESTROYCB* ContextDestroy;
        Windows::Win32::SystemServices::LPD3DNTHAL_CONTEXTDESTROYALLCB* ContextDestroyAll;
        Windows::Win32::SystemServices::LPD3DNTHAL_SCENECAPTURECB* SceneCapture;
        void* dwReserved10;
        void* dwReserved11;
        void* dwReserved22;
        void* dwReserved23;
        size_t dwReserved;
        Windows::Win32::SystemServices::LPD3DNTHAL_TEXTURECREATECB* TextureCreate;
        Windows::Win32::SystemServices::LPD3DNTHAL_TEXTUREDESTROYCB* TextureDestroy;
        Windows::Win32::SystemServices::LPD3DNTHAL_TEXTURESWAPCB* TextureSwap;
        Windows::Win32::SystemServices::LPD3DNTHAL_TEXTUREGETSURFCB* TextureGetSurf;
        void* dwReserved12;
        void* dwReserved13;
        void* dwReserved14;
        void* dwReserved15;
        void* dwReserved16;
        void* dwReserved17;
        void* dwReserved18;
        void* dwReserved19;
        void* dwReserved20;
        void* dwReserved21;
        void* dwReserved24;
        size_t dwReserved0;
        size_t dwReserved1;
        size_t dwReserved2;
        size_t dwReserved3;
        size_t dwReserved4;
        size_t dwReserved5;
        size_t dwReserved6;
        size_t dwReserved7;
        size_t dwReserved8;
        size_t dwReserved9;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DNTHAL_SETRENDERTARGETDATA
    {
        size_t dwhContext;
        Windows::Win32::DisplayDevices::DD_SURFACE_LOCAL* lpDDS;
        Windows::Win32::DisplayDevices::DD_SURFACE_LOCAL* lpDDSZ;
        int32_t ddrval;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DNTHAL_CALLBACKS2
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        Windows::Win32::SystemServices::LPD3DNTHAL_SETRENDERTARGETCB* SetRenderTarget;
        void* dwReserved1;
        void* dwReserved2;
        void* dwReserved3;
        void* dwReserved4;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DNTHAL_CLEAR2DATA
    {
        size_t dwhContext;
        uint32_t dwFlags;
        uint32_t dwFillColor;
        float dvFillDepth;
        uint32_t dwFillStencil;
        Windows::Win32::SystemServices::D3DRECT* lpRects;
        uint32_t dwNumRects;
        int32_t ddrval;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DNTHAL_VALIDATETEXTURESTAGESTATEDATA
    {
        size_t dwhContext;
        uint32_t dwFlags;
        size_t dwReserved;
        uint32_t dwNumPasses;
        int32_t ddrval;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DNTHAL_DP2COMMAND
    {
        union _Anonymous_e__Union
        {
            uint16_t wPrimitiveCount;
            uint16_t wStateCount;
        };
        uint8_t bCommand;
        uint8_t bReserved;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DNTHAL_DP2POINTS
    {
        uint16_t wCount;
        uint16_t wVStart;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DNTHAL_DP2STARTVERTEX
    {
        uint16_t wVStart;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DNTHAL_DP2LINELIST
    {
        uint16_t wVStart;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DNTHAL_DP2INDEXEDLINELIST
    {
        uint16_t wV1;
        uint16_t wV2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DNTHAL_DP2LINESTRIP
    {
        uint16_t wVStart;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DNTHAL_DP2INDEXEDLINESTRIP
    {
        uint16_t wV[2];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DNTHAL_DP2TRIANGLELIST
    {
        uint16_t wVStart;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DNTHAL_DP2INDEXEDTRIANGLELIST
    {
        uint16_t wV1;
        uint16_t wV2;
        uint16_t wV3;
        uint16_t wFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DNTHAL_DP2INDEXEDTRIANGLELIST2
    {
        uint16_t wV1;
        uint16_t wV2;
        uint16_t wV3;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DNTHAL_DP2TRIANGLESTRIP
    {
        uint16_t wVStart;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DNTHAL_DP2INDEXEDTRIANGLESTRIP
    {
        uint16_t wV[3];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DNTHAL_DP2TRIANGLEFAN
    {
        uint16_t wVStart;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DNTHAL_DP2INDEXEDTRIANGLEFAN
    {
        uint16_t wV[3];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DNTHAL_DP2TRIANGLEFAN_IMM
    {
        uint32_t dwEdgeFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DNTHAL_DP2RENDERSTATE
    {
        union _Anonymous_e__Union
        {
            float fState;
            uint32_t dwState;
        };
        Windows::Win32::SystemServices::D3DRENDERSTATETYPE RenderState;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DNTHAL_DP2TEXTURESTAGESTATE
    {
        uint16_t wStage;
        uint16_t TSState;
        uint32_t dwValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DNTHAL_DP2VIEWPORTINFO
    {
        uint32_t dwX;
        uint32_t dwY;
        uint32_t dwWidth;
        uint32_t dwHeight;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DNTHAL_DP2WINFO
    {
        float dvWNear;
        float dvWFar;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DNTHAL_DP2SETPALETTE
    {
        uint32_t dwPaletteHandle;
        uint32_t dwPaletteFlags;
        uint32_t dwSurfaceHandle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DNTHAL_DP2UPDATEPALETTE
    {
        uint32_t dwPaletteHandle;
        uint16_t wStartIndex;
        uint16_t wNumEntries;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DNTHAL_DP2SETRENDERTARGET
    {
        uint32_t hRenderTarget;
        uint32_t hZBuffer;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DNTHAL_DP2STATESET
    {
        uint32_t dwOperation;
        uint32_t dwParam;
        Windows::Win32::SystemServices::D3DSTATEBLOCKTYPE sbType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DNTHAL_DP2ZRANGE
    {
        float dvMinZ;
        float dvMaxZ;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DNTHAL_DP2SETLIGHT
    {
        union _Anonymous_e__Union
        {
            uint32_t lightData;
            uint32_t dwDataType;
        };
        uint32_t dwIndex;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DNTHAL_DP2SETCLIPPLANE
    {
        uint32_t dwIndex;
        float plane[4];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DNTHAL_DP2CREATELIGHT
    {
        uint32_t dwIndex;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DMATRIX
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                float _11;
                float _12;
                float _13;
                float _14;
                float _21;
                float _22;
                float _23;
                float _24;
                float _31;
                float _32;
                float _33;
                float _34;
                float _41;
                float _42;
                float _43;
                float _44;
            };
            _Anonymous_e__Struct Anonymous;
            float m[16];
        };
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DNTHAL_DP2SETTRANSFORM
    {
        Windows::Win32::SystemServices::D3DTRANSFORMSTATETYPE xfrmType;
        Windows::Win32::Direct3D9::D3DMATRIX matrix;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DNTHAL_DP2EXT
    {
        uint32_t dwExtToken;
        uint32_t dwSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DNTHAL_DP2TEXBLT
    {
        uint32_t dwDDDestSurface;
        uint32_t dwDDSrcSurface;
        Windows::Win32::DisplayDevices::POINT pDest;
        Windows::Win32::DisplayDevices::RECTL rSrc;
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DNTHAL_DP2SETPRIORITY
    {
        uint32_t dwDDDestSurface;
        uint32_t dwPriority;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DNTHAL_DP2CLEAR
    {
        uint32_t dwFlags;
        uint32_t dwFillColor;
        float dvFillDepth;
        uint32_t dwFillStencil;
        Windows::Win32::DisplayDevices::RECT Rects[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DNTHAL_DP2SETTEXLOD
    {
        uint32_t dwDDSurface;
        uint32_t dwLOD;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DNTHAL_DRAWPRIMITIVES2DATA
    {
        union _Anonymous1_e__Union
        {
            Windows::Win32::DisplayDevices::DD_SURFACE_LOCAL* lpDDVertex;
            void* lpVertices;
        };
        union _Anonymous2_e__Union
        {
            uint32_t dwVertexSize;
            int32_t ddrval;
        };
        size_t dwhContext;
        uint32_t dwFlags;
        uint32_t dwVertexType;
        Windows::Win32::DisplayDevices::DD_SURFACE_LOCAL* lpDDCommands;
        uint32_t dwCommandOffset;
        uint32_t dwCommandLength;
        _Anonymous1_e__Union Anonymous1;
        uint32_t dwVertexOffset;
        uint32_t dwVertexLength;
        uint32_t dwReqVertexBufSize;
        uint32_t dwReqCommandBufSize;
        uint32_t* lpdwRStates;
        _Anonymous2_e__Union Anonymous2;
        uint32_t dwErrorOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct D3DNTHAL_CALLBACKS3
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        Windows::Win32::SystemServices::LPD3DNTHAL_CLEAR2CB* Clear2;
        void* lpvReserved;
        Windows::Win32::SystemServices::LPD3DNTHAL_VALIDATETEXTURESTAGESTATECB* ValidateTextureStageState;
        Windows::Win32::SystemServices::LPD3DNTHAL_DRAWPRIMITIVES2CB* DrawPrimitives2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct POINTE
    {
        uint32_t x;
        uint32_t y;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    union FLOAT_LONG
    {
        uint32_t e;
        int32_t l;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct POINTFIX
    {
        int32_t x;
        int32_t y;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct RECTFX
    {
        int32_t xLeft;
        int32_t yTop;
        int32_t xRight;
        int32_t yBottom;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct HBM__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct HDEV__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct HSURF__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DHSURF__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DHPDEV__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct HDRVOBJ__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct LIGATURE
    {
        uint32_t culSize;
        uint16_t* pwsz;
        uint32_t chglyph;
        uint32_t ahglyph[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct FD_LIGATURE
    {
        uint32_t culThis;
        uint32_t ulType;
        uint32_t cLigatures;
        Windows::Win32::SystemServices::LIGATURE alig[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct POINTQF
    {
        Windows::Win32::SystemServices::LARGE_INTEGER x;
        Windows::Win32::SystemServices::LARGE_INTEGER y;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct CDDDXGK_REDIRBITMAPPRESENTINFO
    {
        uint32_t NumDirtyRects;
        Windows::Win32::DisplayDevices::RECT* DirtyRect;
        uint32_t NumContexts;
        intptr_t hContext[65];
        uint8_t bDoNotSynchronizeWithDxContent;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct XFORMOBJ
    {
        uint32_t ulReserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct HSEMAPHORE__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct HFASTMUTEX__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct EMFINFO
    {
        uint32_t nSize;
        Windows::Win32::Gdi::HDC hdc;
        uint8_t* pvEMF;
        uint8_t* pvCurrentRecord;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DRH_APIBITMAPDATA
    {
        Windows::Win32::DisplayDevices::SURFOBJ* pso;
        Windows::Win32::SystemServices::BOOL b;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DEVICE_EVENT_MOUNT
    {
        uint32_t Version;
        uint32_t Flags;
        uint32_t FileSystemNameLength;
        uint32_t FileSystemNameOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DEVICE_EVENT_BECOMING_READY
    {
        uint32_t Version;
        uint32_t Reason;
        uint32_t Estimated100msToReady;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DEVICE_EVENT_EXTERNAL_REQUEST
    {
        uint32_t Version;
        uint32_t DeviceClass;
        uint16_t ButtonStatus;
        uint16_t Request;
        Windows::Win32::SystemServices::LARGE_INTEGER SystemTime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DEVICE_EVENT_GENERIC_DATA
    {
        uint32_t EventNumber;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DEVICE_EVENT_RBC_DATA
    {
        uint32_t EventNumber;
        uint8_t SenseQualifier;
        uint8_t SenseCode;
        uint8_t SenseKey;
        uint8_t Reserved;
        uint32_t Information;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct GUID_IO_DISK_CLONE_ARRIVAL_INFORMATION
    {
        uint32_t DiskNumber;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DISK_HEALTH_NOTIFICATION_DATA
    {
        ::win32::guid DeviceGuid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DEVPROPKEY
    {
        ::win32::guid fmtid;
        uint32_t pid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DEVPROPCOMPKEY
    {
        Windows::Win32::SystemServices::DEVPROPKEY Key;
        Windows::Win32::SystemServices::DEVPROPSTORE Store;
        uint16_t* LocaleName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DEVPROPERTY
    {
        Windows::Win32::SystemServices::DEVPROPCOMPKEY CompKey;
        uint32_t Type;
        uint32_t BufferSize;
        void* Buffer;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct REDBOOK_DIGITAL_AUDIO_EXTRACTION_INFO
    {
        uint32_t Version;
        uint32_t Accurate;
        uint32_t Supported;
        uint32_t AccurateMask0;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DEV_BROADCAST_HDR
    {
        uint32_t dbch_size;
        uint32_t dbch_devicetype;
        uint32_t dbch_reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VolLockBroadcast
    {
        Windows::Win32::SystemServices::DEV_BROADCAST_HDR vlb_dbh;
        uint32_t vlb_owner;
        uint8_t vlb_perms;
        uint8_t vlb_lockType;
        uint8_t vlb_drive;
        uint8_t vlb_flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct _DEV_BROADCAST_HEADER
    {
        uint32_t dbcd_size;
        uint32_t dbcd_devicetype;
        uint32_t dbcd_reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DEV_BROADCAST_OEM
    {
        uint32_t dbco_size;
        uint32_t dbco_devicetype;
        uint32_t dbco_reserved;
        uint32_t dbco_identifier;
        uint32_t dbco_suppfunc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DEV_BROADCAST_DEVNODE
    {
        uint32_t dbcd_size;
        uint32_t dbcd_devicetype;
        uint32_t dbcd_reserved;
        uint32_t dbcd_devnode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DEV_BROADCAST_VOLUME
    {
        uint32_t dbcv_size;
        uint32_t dbcv_devicetype;
        uint32_t dbcv_reserved;
        uint32_t dbcv_unitmask;
        uint16_t dbcv_flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DEV_BROADCAST_PORT_A
    {
        uint32_t dbcp_size;
        uint32_t dbcp_devicetype;
        uint32_t dbcp_reserved;
        int8_t dbcp_name[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DEV_BROADCAST_PORT_W
    {
        uint32_t dbcp_size;
        uint32_t dbcp_devicetype;
        uint32_t dbcp_reserved;
        uint16_t dbcp_name[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DEV_BROADCAST_NET
    {
        uint32_t dbcn_size;
        uint32_t dbcn_devicetype;
        uint32_t dbcn_reserved;
        uint32_t dbcn_resource;
        uint32_t dbcn_flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DEV_BROADCAST_DEVICEINTERFACE_A
    {
        uint32_t dbcc_size;
        uint32_t dbcc_devicetype;
        uint32_t dbcc_reserved;
        ::win32::guid dbcc_classguid;
        int8_t dbcc_name[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DEV_BROADCAST_DEVICEINTERFACE_W
    {
        uint32_t dbcc_size;
        uint32_t dbcc_devicetype;
        uint32_t dbcc_reserved;
        ::win32::guid dbcc_classguid;
        uint16_t dbcc_name[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DEV_BROADCAST_HANDLE
    {
        uint32_t dbch_size;
        uint32_t dbch_devicetype;
        uint32_t dbch_reserved;
        Windows::Win32::SystemServices::HANDLE dbch_handle;
        void* dbch_hdevnotify;
        ::win32::guid dbch_eventguid;
        int32_t dbch_nameoffset;
        uint8_t dbch_data[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DEV_BROADCAST_HANDLE32
    {
        uint32_t dbch_size;
        uint32_t dbch_devicetype;
        uint32_t dbch_reserved;
        uint32_t dbch_handle;
        uint32_t dbch_hdevnotify;
        ::win32::guid dbch_eventguid;
        int32_t dbch_nameoffset;
        uint8_t dbch_data[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DEV_BROADCAST_HANDLE64
    {
        uint32_t dbch_size;
        uint32_t dbch_devicetype;
        uint32_t dbch_reserved;
        uint64_t dbch_handle;
        uint64_t dbch_hdevnotify;
        ::win32::guid dbch_eventguid;
        int32_t dbch_nameoffset;
        uint8_t dbch_data[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct _DEV_BROADCAST_USERDEFINED
    {
        Windows::Win32::SystemServices::DEV_BROADCAST_HDR dbud_dbh;
        int8_t dbud_szName[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PWM_CONTROLLER_INFO
    {
        size_t Size;
        uint32_t PinCount;
        uint64_t MinimumPeriod;
        uint64_t MaximumPeriod;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PWM_CONTROLLER_GET_ACTUAL_PERIOD_OUTPUT
    {
        uint64_t ActualPeriod;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PWM_CONTROLLER_SET_DESIRED_PERIOD_INPUT
    {
        uint64_t DesiredPeriod;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PWM_CONTROLLER_SET_DESIRED_PERIOD_OUTPUT
    {
        uint64_t ActualPeriod;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PWM_PIN_GET_ACTIVE_DUTY_CYCLE_PERCENTAGE_OUTPUT
    {
        uint64_t Percentage;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PWM_PIN_SET_ACTIVE_DUTY_CYCLE_PERCENTAGE_INPUT
    {
        uint64_t Percentage;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PWM_PIN_GET_POLARITY_OUTPUT
    {
        Windows::Win32::SystemServices::PWM_POLARITY Polarity;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PWM_PIN_SET_POLARITY_INPUT
    {
        Windows::Win32::SystemServices::PWM_POLARITY Polarity;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PWM_PIN_IS_STARTED_OUTPUT
    {
        uint8_t IsStarted;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct AtlThunkData_t
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct ENCLAVE_IDENTITY
    {
        uint8_t OwnerId[32];
        uint8_t UniqueId[32];
        uint8_t AuthorId[32];
        uint8_t FamilyId[16];
        uint8_t ImageId[16];
        uint32_t EnclaveSvn;
        uint32_t SecureKernelSvn;
        uint32_t PlatformSvn;
        uint32_t Flags;
        uint32_t SigningLevel;
        uint32_t EnclaveType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VBS_ENCLAVE_REPORT_PKG_HEADER
    {
        uint32_t PackageSize;
        uint32_t Version;
        uint32_t SignatureScheme;
        uint32_t SignedStatementSize;
        uint32_t SignatureSize;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VBS_ENCLAVE_REPORT
    {
        uint32_t ReportSize;
        uint32_t ReportVersion;
        uint8_t EnclaveData[64];
        Windows::Win32::SystemServices::ENCLAVE_IDENTITY EnclaveIdentity;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VBS_ENCLAVE_REPORT_VARDATA_HEADER
    {
        uint32_t DataType;
        uint32_t Size;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VBS_ENCLAVE_REPORT_MODULE
    {
        Windows::Win32::SystemServices::VBS_ENCLAVE_REPORT_VARDATA_HEADER Header;
        uint8_t UniqueId[32];
        uint8_t AuthorId[32];
        uint8_t FamilyId[16];
        uint8_t ImageId[16];
        uint32_t Svn;
        uint16_t ModuleName[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct ENCLAVE_INFORMATION
    {
        uint32_t EnclaveType;
        uint32_t Reserved;
        void* BaseAddress;
        size_t Size;
        Windows::Win32::SystemServices::ENCLAVE_IDENTITY Identity;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VBS_BASIC_ENCLAVE_THREAD_DESCRIPTOR32
    {
        uint32_t ThreadContext[4];
        uint32_t EntryPoint;
        uint32_t StackPointer;
        uint32_t ExceptionEntryPoint;
        uint32_t ExceptionStack;
        uint32_t ExceptionActive;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VBS_BASIC_ENCLAVE_THREAD_DESCRIPTOR64
    {
        uint64_t ThreadContext[4];
        uint64_t EntryPoint;
        uint64_t StackPointer;
        uint64_t ExceptionEntryPoint;
        uint64_t ExceptionStack;
        uint32_t ExceptionActive;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VBS_BASIC_ENCLAVE_EXCEPTION_AMD64
    {
        uint32_t ExceptionCode;
        uint32_t NumberParameters;
        size_t ExceptionInformation[3];
        size_t ExceptionRAX;
        size_t ExceptionRCX;
        size_t ExceptionRIP;
        size_t ExceptionRFLAGS;
        size_t ExceptionRSP;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct ENCLAVE_VBS_BASIC_KEY_REQUEST
    {
        uint32_t RequestSize;
        uint32_t Flags;
        uint32_t EnclaveSVN;
        uint32_t SystemKeyID;
        uint32_t CurrentSystemKeyID;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VBS_BASIC_ENCLAVE_SYSCALL_PAGE
    {
        Windows::Win32::SystemServices::VBS_BASIC_ENCLAVE_BASIC_CALL_RETURN_FROM_ENCLAVE** ReturnFromEnclave;
        Windows::Win32::SystemServices::VBS_BASIC_ENCLAVE_BASIC_CALL_RETURN_FROM_EXCEPTION** ReturnFromException;
        Windows::Win32::SystemServices::VBS_BASIC_ENCLAVE_BASIC_CALL_TERMINATE_THREAD** TerminateThread;
        Windows::Win32::SystemServices::VBS_BASIC_ENCLAVE_BASIC_CALL_INTERRUPT_THREAD** InterruptThread;
        Windows::Win32::SystemServices::VBS_BASIC_ENCLAVE_BASIC_CALL_COMMIT_PAGES** CommitPages;
        Windows::Win32::SystemServices::VBS_BASIC_ENCLAVE_BASIC_CALL_DECOMMIT_PAGES** DecommitPages;
        Windows::Win32::SystemServices::VBS_BASIC_ENCLAVE_BASIC_CALL_PROTECT_PAGES** ProtectPages;
        Windows::Win32::SystemServices::VBS_BASIC_ENCLAVE_BASIC_CALL_CREATE_THREAD** CreateThread;
        Windows::Win32::SystemServices::VBS_BASIC_ENCLAVE_BASIC_CALL_GET_ENCLAVE_INFORMATION** GetEnclaveInformation;
        Windows::Win32::SystemServices::VBS_BASIC_ENCLAVE_BASIC_CALL_GENERATE_KEY** GenerateKey;
        Windows::Win32::SystemServices::VBS_BASIC_ENCLAVE_BASIC_CALL_GENERATE_REPORT** GenerateReport;
        Windows::Win32::SystemServices::VBS_BASIC_ENCLAVE_BASIC_CALL_VERIFY_REPORT** VerifyReport;
        Windows::Win32::SystemServices::VBS_BASIC_ENCLAVE_BASIC_CALL_GENERATE_RANDOM_DATA** GenerateRandomData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct GLOBAL_MACHINE_POWER_POLICY
    {
        uint32_t Revision;
        Windows::Win32::SystemServices::SYSTEM_POWER_STATE LidOpenWakeAc;
        Windows::Win32::SystemServices::SYSTEM_POWER_STATE LidOpenWakeDc;
        uint32_t BroadcastCapacityResolution;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct GLOBAL_USER_POWER_POLICY
    {
        uint32_t Revision;
        Windows::Win32::SystemServices::POWER_ACTION_POLICY PowerButtonAc;
        Windows::Win32::SystemServices::POWER_ACTION_POLICY PowerButtonDc;
        Windows::Win32::SystemServices::POWER_ACTION_POLICY SleepButtonAc;
        Windows::Win32::SystemServices::POWER_ACTION_POLICY SleepButtonDc;
        Windows::Win32::SystemServices::POWER_ACTION_POLICY LidCloseAc;
        Windows::Win32::SystemServices::POWER_ACTION_POLICY LidCloseDc;
        Windows::Win32::SystemServices::SYSTEM_POWER_LEVEL DischargePolicy[4];
        uint32_t GlobalFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct GLOBAL_POWER_POLICY
    {
        Windows::Win32::SystemServices::GLOBAL_USER_POWER_POLICY user;
        Windows::Win32::SystemServices::GLOBAL_MACHINE_POWER_POLICY mach;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct MACHINE_POWER_POLICY
    {
        uint32_t Revision;
        Windows::Win32::SystemServices::SYSTEM_POWER_STATE MinSleepAc;
        Windows::Win32::SystemServices::SYSTEM_POWER_STATE MinSleepDc;
        Windows::Win32::SystemServices::SYSTEM_POWER_STATE ReducedLatencySleepAc;
        Windows::Win32::SystemServices::SYSTEM_POWER_STATE ReducedLatencySleepDc;
        uint32_t DozeTimeoutAc;
        uint32_t DozeTimeoutDc;
        uint32_t DozeS4TimeoutAc;
        uint32_t DozeS4TimeoutDc;
        uint8_t MinThrottleAc;
        uint8_t MinThrottleDc;
        uint8_t pad1[2];
        Windows::Win32::SystemServices::POWER_ACTION_POLICY OverThrottledAc;
        Windows::Win32::SystemServices::POWER_ACTION_POLICY OverThrottledDc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct MACHINE_PROCESSOR_POWER_POLICY
    {
        uint32_t Revision;
        Windows::Win32::SystemServices::PROCESSOR_POWER_POLICY ProcessorPolicyAc;
        Windows::Win32::SystemServices::PROCESSOR_POWER_POLICY ProcessorPolicyDc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct USER_POWER_POLICY
    {
        uint32_t Revision;
        Windows::Win32::SystemServices::POWER_ACTION_POLICY IdleAc;
        Windows::Win32::SystemServices::POWER_ACTION_POLICY IdleDc;
        uint32_t IdleTimeoutAc;
        uint32_t IdleTimeoutDc;
        uint8_t IdleSensitivityAc;
        uint8_t IdleSensitivityDc;
        uint8_t ThrottlePolicyAc;
        uint8_t ThrottlePolicyDc;
        Windows::Win32::SystemServices::SYSTEM_POWER_STATE MaxSleepAc;
        Windows::Win32::SystemServices::SYSTEM_POWER_STATE MaxSleepDc;
        uint32_t Reserved[2];
        uint32_t VideoTimeoutAc;
        uint32_t VideoTimeoutDc;
        uint32_t SpindownTimeoutAc;
        uint32_t SpindownTimeoutDc;
        uint8_t OptimizeForPowerAc;
        uint8_t OptimizeForPowerDc;
        uint8_t FanThrottleToleranceAc;
        uint8_t FanThrottleToleranceDc;
        uint8_t ForcedThrottleAc;
        uint8_t ForcedThrottleDc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct POWER_POLICY
    {
        Windows::Win32::SystemServices::USER_POWER_POLICY user;
        Windows::Win32::SystemServices::MACHINE_POWER_POLICY mach;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DEVICE_NOTIFY_SUBSCRIBE_PARAMETERS
    {
        Windows::Win32::SystemServices::PDEVICE_NOTIFY_CALLBACK_ROUTINE* Callback;
        void* Context;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct THERMAL_EVENT
    {
        uint32_t Version;
        uint32_t Size;
        uint32_t Type;
        uint32_t Temperature;
        uint32_t TripPointTemperature;
        uint16_t* Initiator;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct BATTERY_QUERY_INFORMATION
    {
        uint32_t BatteryTag;
        Windows::Win32::SystemServices::BATTERY_QUERY_INFORMATION_LEVEL InformationLevel;
        uint32_t AtRate;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct BATTERY_INFORMATION
    {
        uint32_t Capabilities;
        uint8_t Technology;
        uint8_t Reserved[3];
        uint8_t Chemistry[4];
        uint32_t DesignedCapacity;
        uint32_t FullChargedCapacity;
        uint32_t DefaultAlert1;
        uint32_t DefaultAlert2;
        uint32_t CriticalBias;
        uint32_t CycleCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct BATTERY_CHARGING_SOURCE
    {
        Windows::Win32::SystemServices::BATTERY_CHARGING_SOURCE_TYPE Type;
        uint32_t MaxCurrent;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct BATTERY_CHARGING_SOURCE_INFORMATION
    {
        Windows::Win32::SystemServices::BATTERY_CHARGING_SOURCE_TYPE Type;
        uint8_t SourceOnline;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct BATTERY_SET_INFORMATION
    {
        uint32_t BatteryTag;
        Windows::Win32::SystemServices::BATTERY_SET_INFORMATION_LEVEL InformationLevel;
        uint8_t Buffer[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct BATTERY_CHARGER_STATUS
    {
        Windows::Win32::SystemServices::BATTERY_CHARGING_SOURCE_TYPE Type;
        uint32_t VaData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct BATTERY_USB_CHARGER_STATUS
    {
        Windows::Win32::SystemServices::BATTERY_CHARGING_SOURCE_TYPE Type;
        uint32_t Reserved;
        uint32_t Flags;
        uint32_t MaxCurrent;
        uint32_t Voltage;
        Windows::Win32::SystemServices::USB_CHARGER_PORT PortType;
        uint64_t PortId;
        void* PowerSourceInformation;
        ::win32::guid OemCharger;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct BATTERY_WAIT_STATUS
    {
        uint32_t BatteryTag;
        uint32_t Timeout;
        uint32_t PowerState;
        uint32_t LowCapacity;
        uint32_t HighCapacity;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct BATTERY_STATUS
    {
        uint32_t PowerState;
        uint32_t Capacity;
        uint32_t Voltage;
        int32_t Rate;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct BATTERY_MANUFACTURE_DATE
    {
        uint8_t Day;
        uint8_t Month;
        uint16_t Year;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct THERMAL_INFORMATION
    {
        uint32_t ThermalStamp;
        uint32_t ThermalConstant1;
        uint32_t ThermalConstant2;
        size_t Processors;
        uint32_t SamplingPeriod;
        uint32_t CurrentTemperature;
        uint32_t PassiveTripPoint;
        uint32_t CriticalTripPoint;
        uint8_t ActiveTripPointCount;
        uint32_t ActiveTripPoint[10];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct THERMAL_WAIT_READ
    {
        uint32_t Timeout;
        uint32_t LowTemperature;
        uint32_t HighTemperature;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct THERMAL_POLICY
    {
        uint32_t Version;
        uint8_t WaitForUpdate;
        uint8_t Hibernate;
        uint8_t Critical;
        uint8_t ThermalStandby;
        uint32_t ActivationReasons;
        uint32_t PassiveLimit;
        uint32_t ActiveLevel;
        uint8_t OverThrottled;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PROCESSOR_OBJECT_INFO
    {
        uint32_t PhysicalID;
        uint32_t PBlkAddress;
        uint8_t PBlkLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PROCESSOR_OBJECT_INFO_EX
    {
        uint32_t PhysicalID;
        uint32_t PBlkAddress;
        uint8_t PBlkLength;
        uint32_t InitialApicId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct WAKE_ALARM_INFORMATION
    {
        uint32_t TimerIdentifier;
        uint32_t Timeout;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct ACPI_REAL_TIME
    {
        uint16_t Year;
        uint8_t Month;
        uint8_t Day;
        uint8_t Hour;
        uint8_t Minute;
        uint8_t Second;
        uint8_t Valid;
        uint16_t Milliseconds;
        int16_t TimeZone;
        uint8_t DayLight;
        uint8_t Reserved1[3];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct INDIRECT_DISPLAY_INFO
    {
        Windows::Win32::Kernel::LUID DisplayAdapterLuid;
        uint32_t Flags;
        uint32_t NumMonitors;
        uint32_t DisplayAdapterTargetBase;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VIDEO_VDM
    {
        Windows::Win32::SystemServices::HANDLE ProcessHandle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VIDEO_REGISTER_VDM
    {
        uint32_t MinimumStateSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VIDEO_MONITOR_DESCRIPTOR
    {
        uint32_t DescriptorSize;
        uint8_t Descriptor[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DXGK_WIN32K_PARAM_DATA
    {
        void* PathsArray;
        void* ModesArray;
        uint32_t NumPathArrayElements;
        uint32_t NumModeArrayElements;
        uint32_t SDCFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VIDEO_WIN32K_CALLBACKS_PARAMS
    {
        Windows::Win32::SystemServices::VIDEO_WIN32K_CALLBACKS_PARAMS_TYPE CalloutType;
        void* PhysDisp;
        size_t Param;
        int32_t Status;
        uint8_t LockUserSession;
        uint8_t IsPostDevice;
        uint8_t SurpriseRemoval;
        uint8_t WaitForQueueReady;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VIDEO_WIN32K_CALLBACKS
    {
        void* PhysDisp;
        Windows::Win32::SystemServices::PVIDEO_WIN32K_CALLOUT* Callout;
        uint32_t bACPI;
        Windows::Win32::SystemServices::HANDLE pPhysDeviceObject;
        uint32_t DualviewFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VIDEO_DEVICE_SESSION_STATUS
    {
        uint32_t bEnable;
        uint32_t bSuccess;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VIDEO_HARDWARE_STATE_HEADER
    {
        uint32_t Length;
        uint8_t PortValue[48];
        uint32_t AttribIndexDataState;
        uint32_t BasicSequencerOffset;
        uint32_t BasicCrtContOffset;
        uint32_t BasicGraphContOffset;
        uint32_t BasicAttribContOffset;
        uint32_t BasicDacOffset;
        uint32_t BasicLatchesOffset;
        uint32_t ExtendedSequencerOffset;
        uint32_t ExtendedCrtContOffset;
        uint32_t ExtendedGraphContOffset;
        uint32_t ExtendedAttribContOffset;
        uint32_t ExtendedDacOffset;
        uint32_t ExtendedValidatorStateOffset;
        uint32_t ExtendedMiscDataOffset;
        uint32_t PlaneLength;
        uint32_t Plane1Offset;
        uint32_t Plane2Offset;
        uint32_t Plane3Offset;
        uint32_t Plane4Offset;
        uint32_t VGAStateFlags;
        uint32_t DIBOffset;
        uint32_t DIBBitsPerPixel;
        uint32_t DIBXResolution;
        uint32_t DIBYResolution;
        uint32_t DIBXlatOffset;
        uint32_t DIBXlatLength;
        uint32_t VesaInfoOffset;
        void* FrameBufferData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VIDEO_HARDWARE_STATE
    {
        Windows::Win32::SystemServices::VIDEO_HARDWARE_STATE_HEADER* StateHeader;
        uint32_t StateLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VIDEO_NUM_MODES
    {
        uint32_t NumModes;
        uint32_t ModeInformationLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VIDEO_MODE
    {
        uint32_t RequestedMode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VIDEO_MODE_INFORMATION
    {
        uint32_t Length;
        uint32_t ModeIndex;
        uint32_t VisScreenWidth;
        uint32_t VisScreenHeight;
        uint32_t ScreenStride;
        uint32_t NumberOfPlanes;
        uint32_t BitsPerPlane;
        uint32_t Frequency;
        uint32_t XMillimeter;
        uint32_t YMillimeter;
        uint32_t NumberRedBits;
        uint32_t NumberGreenBits;
        uint32_t NumberBlueBits;
        uint32_t RedMask;
        uint32_t GreenMask;
        uint32_t BlueMask;
        uint32_t AttributeFlags;
        uint32_t VideoMemoryBitmapWidth;
        uint32_t VideoMemoryBitmapHeight;
        uint32_t DriverSpecificAttributeFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VIDEO_LOAD_FONT_INFORMATION
    {
        uint16_t WidthInPixels;
        uint16_t HeightInPixels;
        uint32_t FontSize;
        uint8_t Font[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VIDEO_PALETTE_DATA
    {
        uint16_t NumEntries;
        uint16_t FirstEntry;
        uint16_t Colors[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VIDEO_CLUTDATA
    {
        uint8_t Red;
        uint8_t Green;
        uint8_t Blue;
        uint8_t Unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VIDEO_CLUT
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::SystemServices::VIDEO_CLUTDATA RgbArray;
            uint32_t RgbLong;
        };
        uint16_t NumEntries;
        uint16_t FirstEntry;
        _Anonymous_e__Union LookupTable[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VIDEO_CURSOR_POSITION
    {
        int16_t Column;
        int16_t Row;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VIDEO_CURSOR_ATTRIBUTES
    {
        uint16_t Width;
        uint16_t Height;
        int16_t Column;
        int16_t Row;
        uint8_t Rate;
        uint8_t Enable;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VIDEO_POINTER_POSITION
    {
        int16_t Column;
        int16_t Row;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VIDEO_POINTER_ATTRIBUTES
    {
        uint32_t Flags;
        uint32_t Width;
        uint32_t Height;
        uint32_t WidthInBytes;
        uint32_t Enable;
        int16_t Column;
        int16_t Row;
        uint8_t Pixels[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VIDEO_POINTER_CAPABILITIES
    {
        uint32_t Flags;
        uint32_t MaxWidth;
        uint32_t MaxHeight;
        uint32_t HWPtrBitmapStart;
        uint32_t HWPtrBitmapEnd;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VIDEO_BANK_SELECT
    {
        uint32_t Length;
        uint32_t Size;
        uint32_t BankingFlags;
        uint32_t BankingType;
        uint32_t PlanarHCBankingType;
        uint32_t BitmapWidthInBytes;
        uint32_t BitmapSize;
        uint32_t Granularity;
        uint32_t PlanarHCGranularity;
        uint32_t CodeOffset;
        uint32_t PlanarHCBankCodeOffset;
        uint32_t PlanarHCEnableCodeOffset;
        uint32_t PlanarHCDisableCodeOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VIDEO_MEMORY
    {
        void* RequestedVirtualAddress;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VIDEO_SHARE_MEMORY
    {
        Windows::Win32::SystemServices::HANDLE ProcessHandle;
        uint32_t ViewOffset;
        uint32_t ViewSize;
        void* RequestedVirtualAddress;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VIDEO_SHARE_MEMORY_INFORMATION
    {
        uint32_t SharedViewOffset;
        uint32_t SharedViewSize;
        void* VirtualAddress;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VIDEO_MEMORY_INFORMATION
    {
        void* VideoRamBase;
        uint32_t VideoRamLength;
        void* FrameBufferBase;
        uint32_t FrameBufferLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VIDEO_PUBLIC_ACCESS_RANGES
    {
        uint32_t InIoSpace;
        uint32_t MappedInIoSpace;
        void* VirtualAddress;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VIDEO_COLOR_CAPABILITIES
    {
        uint32_t Length;
        uint32_t AttributeFlags;
        int32_t RedPhosphoreDecay;
        int32_t GreenPhosphoreDecay;
        int32_t BluePhosphoreDecay;
        int32_t WhiteChromaticity_x;
        int32_t WhiteChromaticity_y;
        int32_t WhiteChromaticity_Y;
        int32_t RedChromaticity_x;
        int32_t RedChromaticity_y;
        int32_t GreenChromaticity_x;
        int32_t GreenChromaticity_y;
        int32_t BlueChromaticity_x;
        int32_t BlueChromaticity_y;
        int32_t WhiteGamma;
        int32_t RedGamma;
        int32_t GreenGamma;
        int32_t BlueGamma;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VIDEO_POWER_MANAGEMENT
    {
        uint32_t Length;
        uint32_t DPMSVersion;
        uint32_t PowerState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VIDEO_COLOR_LUT_DATA
    {
        uint32_t Length;
        uint32_t LutDataFormat;
        uint8_t LutData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VIDEO_LUT_RGB256WORDS
    {
        uint16_t Red[256];
        uint16_t Green[256];
        uint16_t Blue[256];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct BANK_POSITION
    {
        uint32_t ReadBankPosition;
        uint32_t WriteBankPosition;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DISPLAY_BRIGHTNESS
    {
        uint8_t ucDisplayPolicy;
        uint8_t ucACBrightness;
        uint8_t ucDCBrightness;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VIDEO_BRIGHTNESS_POLICY
    {
        struct _Anonymous_e__Struct
        {
            uint8_t BatteryLevel;
            uint8_t Brightness;
        };
        uint8_t DefaultToBiosPolicy;
        uint8_t LevelCount;
        _Anonymous_e__Struct Level[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct FSCNTL_SCREEN_INFO
    {
        Windows::Win32::SystemServices::COORD Position;
        Windows::Win32::SystemServices::COORD ScreenSize;
        uint32_t nNumberOfChars;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct FONT_IMAGE_INFO
    {
        Windows::Win32::SystemServices::COORD FontSize;
        uint8_t* ImageBits;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct CHAR_IMAGE_INFO
    {
        Windows::Win32::SystemServices::CHAR_INFO CharInfo;
        Windows::Win32::SystemServices::FONT_IMAGE_INFO FontImageInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VGA_CHAR
    {
        int8_t Char;
        int8_t Attributes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct FSVIDEO_COPY_FRAME_BUFFER
    {
        Windows::Win32::SystemServices::FSCNTL_SCREEN_INFO SrcScreen;
        Windows::Win32::SystemServices::FSCNTL_SCREEN_INFO DestScreen;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct FSVIDEO_WRITE_TO_FRAME_BUFFER
    {
        Windows::Win32::SystemServices::CHAR_IMAGE_INFO* SrcBuffer;
        Windows::Win32::SystemServices::FSCNTL_SCREEN_INFO DestScreen;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct FSVIDEO_REVERSE_MOUSE_POINTER
    {
        Windows::Win32::SystemServices::FSCNTL_SCREEN_INFO Screen;
        uint32_t dwType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct FSVIDEO_MODE_INFORMATION
    {
        Windows::Win32::SystemServices::VIDEO_MODE_INFORMATION VideoMode;
        Windows::Win32::SystemServices::VIDEO_MEMORY_INFORMATION VideoMemory;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct FSVIDEO_SCREEN_INFORMATION
    {
        Windows::Win32::SystemServices::COORD ScreenSize;
        Windows::Win32::SystemServices::COORD FontSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct FSVIDEO_CURSOR_POSITION
    {
        Windows::Win32::SystemServices::VIDEO_CURSOR_POSITION Coord;
        uint32_t dwType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct ENG_EVENT
    {
        void* pKEvent;
        uint32_t fFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VIDEO_PERFORMANCE_COUNTER
    {
        uint64_t NbOfAllocationEvicted[10];
        uint64_t NbOfAllocationMarked[10];
        uint64_t NbOfAllocationRestored[10];
        uint64_t KBytesEvicted[10];
        uint64_t KBytesMarked[10];
        uint64_t KBytesRestored[10];
        uint64_t NbProcessCommited;
        uint64_t NbAllocationCommited;
        uint64_t NbAllocationMarked;
        uint64_t KBytesAllocated;
        uint64_t KBytesAvailable;
        uint64_t KBytesCurMarked;
        uint64_t Reference;
        uint64_t Unreference;
        uint64_t TrueReference;
        uint64_t NbOfPageIn;
        uint64_t KBytesPageIn;
        uint64_t NbOfPageOut;
        uint64_t KBytesPageOut;
        uint64_t NbOfRotateOut;
        uint64_t KBytesRotateOut;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct VIDEO_QUERY_PERFORMANCE_COUNTER
    {
        uint32_t BufferSize;
        Windows::Win32::SystemServices::VIDEO_PERFORMANCE_COUNTER* Buffer;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PANEL_QUERY_BRIGHTNESS_CAPS
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t _bitfield;
            };
            _Anonymous_e__Struct Anonymous;
            uint32_t Value;
        };
        Windows::Win32::SystemServices::BRIGHTNESS_INTERFACE_VERSION Version;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct BRIGHTNESS_LEVEL
    {
        uint8_t Count;
        uint8_t Level[103];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct BRIGHTNESS_NIT_RANGE
    {
        uint32_t MinLevelInMillinit;
        uint32_t MaxLevelInMillinit;
        uint32_t StepSizeInMillinit;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct BRIGHTNESS_NIT_RANGES
    {
        uint32_t NormalRangeCount;
        uint32_t RangeCount;
        uint32_t PreferredMaximumBrightness;
        Windows::Win32::SystemServices::BRIGHTNESS_NIT_RANGE SupportedRanges[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PANEL_QUERY_BRIGHTNESS_RANGES
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::SystemServices::BRIGHTNESS_LEVEL BrightnessLevel;
            Windows::Win32::SystemServices::BRIGHTNESS_NIT_RANGES NitRanges;
        };
        Windows::Win32::SystemServices::BRIGHTNESS_INTERFACE_VERSION Version;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PANEL_GET_BRIGHTNESS
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t CurrentInMillinits;
                uint32_t TargetInMillinits;
            };
            uint8_t Level;
            _Anonymous_e__Struct Anonymous;
        };
        Windows::Win32::SystemServices::BRIGHTNESS_INTERFACE_VERSION Version;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct CHROMATICITY_COORDINATE
    {
        float x;
        float y;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PANEL_BRIGHTNESS_SENSOR_DATA
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t _bitfield;
            };
            _Anonymous_e__Struct Anonymous;
            uint32_t Value;
        };
        _Anonymous_e__Union Anonymous;
        float AlsReading;
        Windows::Win32::SystemServices::CHROMATICITY_COORDINATE ChromaticityCoordinate;
        float ColorTemperature;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PANEL_SET_BRIGHTNESS
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t Millinits;
                uint32_t TransitionTimeInMs;
                Windows::Win32::SystemServices::PANEL_BRIGHTNESS_SENSOR_DATA SensorData;
            };
            uint8_t Level;
            _Anonymous_e__Struct Anonymous;
        };
        Windows::Win32::SystemServices::BRIGHTNESS_INTERFACE_VERSION Version;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PANEL_SET_BRIGHTNESS_STATE
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t _bitfield;
            };
            _Anonymous_e__Struct Anonymous;
            uint32_t Value;
        };
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PANEL_SET_BACKLIGHT_OPTIMIZATION
    {
        Windows::Win32::SystemServices::BACKLIGHT_OPTIMIZATION_LEVEL Level;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct BACKLIGHT_REDUCTION_GAMMA_RAMP
    {
        uint16_t R[256];
        uint16_t G[256];
        uint16_t B[256];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PANEL_GET_BACKLIGHT_REDUCTION
    {
        uint16_t BacklightUsersetting;
        uint16_t BacklightEffective;
        Windows::Win32::SystemServices::BACKLIGHT_REDUCTION_GAMMA_RAMP GammaRamp;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct COLORSPACE_TRANSFORM_DATA_CAP
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous1_e__Struct
            {
                uint32_t _bitfield;
            };
            struct _Anonymous2_e__Struct
            {
                uint32_t _bitfield;
            };
            _Anonymous1_e__Struct Anonymous1;
            _Anonymous2_e__Struct Anonymous2;
            uint32_t Value;
        };
        Windows::Win32::SystemServices::COLORSPACE_TRANSFORM_DATA_TYPE DataType;
        _Anonymous_e__Union Anonymous;
        float NumericRangeMin;
        float NumericRangeMax;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct COLORSPACE_TRANSFORM_1DLUT_CAP
    {
        uint32_t NumberOfLUTEntries;
        Windows::Win32::SystemServices::COLORSPACE_TRANSFORM_DATA_CAP DataCap;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct COLORSPACE_TRANSFORM_MATRIX_CAP
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t _bitfield;
            };
            _Anonymous_e__Struct Anonymous;
            uint32_t Value;
        };
        _Anonymous_e__Union Anonymous;
        Windows::Win32::SystemServices::COLORSPACE_TRANSFORM_DATA_CAP DataCap;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct COLORSPACE_TRANSFORM_TARGET_CAPS
    {
        Windows::Win32::SystemServices::COLORSPACE_TRANSFORM_TARGET_CAPS_VERSION Version;
        Windows::Win32::SystemServices::COLORSPACE_TRANSFORM_1DLUT_CAP LookupTable1DDegammaCap;
        Windows::Win32::SystemServices::COLORSPACE_TRANSFORM_MATRIX_CAP ColorMatrix3x3Cap;
        Windows::Win32::SystemServices::COLORSPACE_TRANSFORM_1DLUT_CAP LookupTable1DRegammaCap;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct GAMMA_RAMP_RGB256x3x16
    {
        uint16_t Red[256];
        uint16_t Green[256];
        uint16_t Blue[256];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct GAMMA_RAMP_RGB
    {
        float Red;
        float Green;
        float Blue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct GAMMA_RAMP_DXGI_1
    {
        Windows::Win32::SystemServices::GAMMA_RAMP_RGB Scale;
        Windows::Win32::SystemServices::GAMMA_RAMP_RGB Offset;
        Windows::Win32::SystemServices::GAMMA_RAMP_RGB GammaCurve[1025];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct COLORSPACE_TRANSFORM_3x4
    {
        float ColorMatrix3x4[12];
        float ScalarMultiplier;
        Windows::Win32::SystemServices::GAMMA_RAMP_RGB LookupTable1D[4096];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct OUTPUT_WIRE_FORMAT
    {
        Windows::Win32::SystemServices::OUTPUT_COLOR_ENCODING ColorEncoding;
        uint32_t BitsPerPixel;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct COLORSPACE_TRANSFORM_MATRIX_V2
    {
        Windows::Win32::SystemServices::COLORSPACE_TRANSFORM_STAGE_CONTROL StageControlLookupTable1DDegamma;
        Windows::Win32::SystemServices::GAMMA_RAMP_RGB LookupTable1DDegamma[4096];
        Windows::Win32::SystemServices::COLORSPACE_TRANSFORM_STAGE_CONTROL StageControlColorMatrix3x3;
        float ColorMatrix3x3[9];
        Windows::Win32::SystemServices::COLORSPACE_TRANSFORM_STAGE_CONTROL StageControlLookupTable1DRegamma;
        Windows::Win32::SystemServices::GAMMA_RAMP_RGB LookupTable1DRegamma[4096];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct COLORSPACE_TRANSFORM
    {
        union _Data_e__Union
        {
            Windows::Win32::SystemServices::GAMMA_RAMP_RGB256x3x16 Rgb256x3x16;
            Windows::Win32::SystemServices::GAMMA_RAMP_DXGI_1 Dxgi1;
            Windows::Win32::SystemServices::COLORSPACE_TRANSFORM_3x4 T3x4;
            Windows::Win32::SystemServices::COLORSPACE_TRANSFORM_MATRIX_V2 MatrixV2;
        };
        Windows::Win32::SystemServices::COLORSPACE_TRANSFORM_TYPE Type;
        _Data_e__Union Data;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct COLORSPACE_TRANSFORM_SET_INPUT
    {
        Windows::Win32::SystemServices::OUTPUT_WIRE_COLOR_SPACE_TYPE OutputWireColorSpaceExpected;
        Windows::Win32::SystemServices::OUTPUT_WIRE_FORMAT OutputWireFormatExpected;
        Windows::Win32::SystemServices::COLORSPACE_TRANSFORM ColorSpaceTransform;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SET_ACTIVE_COLOR_PROFILE_NAME
    {
        uint16_t ColorProfileName[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct MIPI_DSI_CAPS
    {
        uint8_t DSITypeMajor;
        uint8_t DSITypeMinor;
        uint8_t SpecVersionMajor;
        uint8_t SpecVersionMinor;
        uint8_t SpecVersionPatch;
        uint16_t TargetMaximumReturnPacketSize;
        uint8_t ResultCodeFlags;
        uint8_t ResultCodeStatus;
        uint8_t Revision;
        uint8_t Level;
        uint8_t DeviceClassHi;
        uint8_t DeviceClassLo;
        uint8_t ManufacturerHi;
        uint8_t ManufacturerLo;
        uint8_t ProductHi;
        uint8_t ProductLo;
        uint8_t LengthHi;
        uint8_t LengthLo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct MIPI_DSI_PACKET
    {
        union _Anonymous1_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint8_t _bitfield;
            };
            uint8_t DataId;
            _Anonymous_e__Struct Anonymous;
        };
        union _Anonymous2_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint8_t Data0;
                uint8_t Data1;
            };
            _Anonymous_e__Struct Anonymous;
            uint16_t LongWriteWordCount;
        };
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
        uint8_t EccFiller;
        uint8_t Payload[8];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct MIPI_DSI_TRANSMISSION
    {
        struct _Anonymous_e__Struct
        {
            uint16_t _bitfield;
        };
        uint32_t TotalBufferSize;
        uint8_t PacketCount;
        uint8_t FailedPacket;
        _Anonymous_e__Struct Anonymous;
        uint16_t ReadWordCount;
        uint16_t FinalCommandExtraPayload;
        uint16_t MipiErrors;
        uint16_t HostErrors;
        Windows::Win32::SystemServices::MIPI_DSI_PACKET Packets[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct MIPI_DSI_RESET
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t _bitfield;
            };
            _Anonymous_e__Struct Anonymous;
            uint32_t Results;
        };
        uint32_t Flags;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct OVERLAPPED_ENTRY
    {
        size_t lpCompletionKey;
        Windows::Win32::SystemServices::OVERLAPPED* lpOverlapped;
        size_t Internal;
        uint32_t dwNumberOfBytesTransferred;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct WIN32_FIND_DATAA
    {
        uint32_t dwFileAttributes;
        Windows::Win32::WindowsProgramming::FILETIME ftCreationTime;
        Windows::Win32::WindowsProgramming::FILETIME ftLastAccessTime;
        Windows::Win32::WindowsProgramming::FILETIME ftLastWriteTime;
        uint32_t nFileSizeHigh;
        uint32_t nFileSizeLow;
        uint32_t dwReserved0;
        uint32_t dwReserved1;
        int8_t cFileName[260];
        int8_t cAlternateFileName[14];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct WIN32_FIND_DATAW
    {
        uint32_t dwFileAttributes;
        Windows::Win32::WindowsProgramming::FILETIME ftCreationTime;
        Windows::Win32::WindowsProgramming::FILETIME ftLastAccessTime;
        Windows::Win32::WindowsProgramming::FILETIME ftLastWriteTime;
        uint32_t nFileSizeHigh;
        uint32_t nFileSizeLow;
        uint32_t dwReserved0;
        uint32_t dwReserved1;
        uint16_t cFileName[260];
        uint16_t cAlternateFileName[14];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct STORAGE_PROPERTY_QUERY
    {
        Windows::Win32::FileSystem::STORAGE_PROPERTY_ID PropertyId;
        Windows::Win32::FileSystem::STORAGE_QUERY_TYPE QueryType;
        uint8_t AdditionalParameters[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct STORAGE_DESCRIPTOR_HEADER
    {
        uint32_t Version;
        uint32_t Size;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct STORAGE_DEVICE_DESCRIPTOR
    {
        uint32_t Version;
        uint32_t Size;
        uint8_t DeviceType;
        uint8_t DeviceTypeModifier;
        uint8_t RemovableMedia;
        uint8_t CommandQueueing;
        uint32_t VendorIdOffset;
        uint32_t ProductIdOffset;
        uint32_t ProductRevisionOffset;
        uint32_t SerialNumberOffset;
        Windows::Win32::SystemServices::STORAGE_BUS_TYPE BusType;
        uint32_t RawPropertiesLength;
        uint8_t RawDeviceProperties[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct STORAGE_ADAPTER_DESCRIPTOR
    {
        uint32_t Version;
        uint32_t Size;
        uint32_t MaximumTransferLength;
        uint32_t MaximumPhysicalPages;
        uint32_t AlignmentMask;
        uint8_t AdapterUsesPio;
        uint8_t AdapterScansDown;
        uint8_t CommandQueueing;
        uint8_t AcceleratedTransfer;
        uint8_t BusType;
        uint16_t BusMajorVersion;
        uint16_t BusMinorVersion;
        uint8_t SrbType;
        uint8_t AddressType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR
    {
        uint32_t Version;
        uint32_t Size;
        uint32_t BytesPerCacheLine;
        uint32_t BytesOffsetForCacheAlignment;
        uint32_t BytesPerLogicalSector;
        uint32_t BytesPerPhysicalSector;
        uint32_t BytesOffsetForSectorAlignment;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct STORAGE_MEDIUM_PRODUCT_TYPE_DESCRIPTOR
    {
        uint32_t Version;
        uint32_t Size;
        uint32_t MediumProductType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct STORAGE_MINIPORT_DESCRIPTOR
    {
        uint32_t Version;
        uint32_t Size;
        Windows::Win32::FileSystem::STORAGE_PORT_CODE_SET Portdriver;
        uint8_t LUNResetSupported;
        uint8_t TargetResetSupported;
        uint16_t IoTimeoutValue;
        uint8_t ExtraIoInfoSupported;
        uint8_t Reserved0[3];
        uint32_t Reserved1;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct STORAGE_DEVICE_ID_DESCRIPTOR
    {
        uint32_t Version;
        uint32_t Size;
        uint32_t NumberOfIdentifiers;
        uint8_t Identifiers[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct DEVICE_SEEK_PENALTY_DESCRIPTOR
    {
        uint32_t Version;
        uint32_t Size;
        uint8_t IncursSeekPenalty;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct DEVICE_WRITE_AGGREGATION_DESCRIPTOR
    {
        uint32_t Version;
        uint32_t Size;
        uint8_t BenefitsFromWriteAggregation;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct DEVICE_TRIM_DESCRIPTOR
    {
        uint32_t Version;
        uint32_t Size;
        uint8_t TrimEnabled;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct DEVICE_LB_PROVISIONING_DESCRIPTOR
    {
        uint32_t Version;
        uint32_t Size;
        uint8_t _bitfield;
        uint8_t Reserved1[7];
        uint64_t OptimalUnmapGranularity;
        uint64_t UnmapGranularityAlignment;
        uint32_t MaxUnmapLbaCount;
        uint32_t MaxUnmapBlockDescriptorCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct DEVICE_POWER_DESCRIPTOR
    {
        uint32_t Version;
        uint32_t Size;
        uint8_t DeviceAttentionSupported;
        uint8_t AsynchronousNotificationSupported;
        uint8_t IdlePowerManagementEnabled;
        uint8_t D3ColdEnabled;
        uint8_t D3ColdSupported;
        uint8_t NoVerifyDuringIdlePower;
        uint8_t Reserved[2];
        uint32_t IdleTimeoutInMS;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct DEVICE_COPY_OFFLOAD_DESCRIPTOR
    {
        uint32_t Version;
        uint32_t Size;
        uint32_t MaximumTokenLifetime;
        uint32_t DefaultTokenLifetime;
        uint64_t MaximumTransferSize;
        uint64_t OptimalTransferCount;
        uint32_t MaximumDataDescriptors;
        uint32_t MaximumTransferLengthPerDescriptor;
        uint32_t OptimalTransferLengthPerDescriptor;
        uint16_t OptimalTransferLengthGranularity;
        uint8_t Reserved[2];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct STORAGE_DEVICE_RESILIENCY_DESCRIPTOR
    {
        uint32_t Version;
        uint32_t Size;
        uint32_t NameOffset;
        uint32_t NumberOfLogicalCopies;
        uint32_t NumberOfPhysicalCopies;
        uint32_t PhysicalDiskRedundancy;
        uint32_t NumberOfColumns;
        uint32_t Interleave;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct STORAGE_PROTOCOL_SPECIFIC_DATA
    {
        Windows::Win32::FileSystem::STORAGE_PROTOCOL_TYPE ProtocolType;
        uint32_t DataType;
        uint32_t ProtocolDataRequestValue;
        uint32_t ProtocolDataRequestSubValue;
        uint32_t ProtocolDataOffset;
        uint32_t ProtocolDataLength;
        uint32_t FixedProtocolReturnData;
        uint32_t ProtocolDataRequestSubValue2;
        uint32_t ProtocolDataRequestSubValue3;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct STORAGE_PROTOCOL_DATA_DESCRIPTOR
    {
        uint32_t Version;
        uint32_t Size;
        Windows::Win32::FileSystem::STORAGE_PROTOCOL_SPECIFIC_DATA ProtocolSpecificData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct STORAGE_TEMPERATURE_INFO
    {
        uint16_t Index;
        int16_t Temperature;
        int16_t OverThreshold;
        int16_t UnderThreshold;
        uint8_t OverThresholdChangable;
        uint8_t UnderThresholdChangable;
        uint8_t EventGenerated;
        uint8_t Reserved0;
        uint32_t Reserved1;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct STORAGE_TEMPERATURE_DATA_DESCRIPTOR
    {
        uint32_t Version;
        uint32_t Size;
        int16_t CriticalTemperature;
        int16_t WarningTemperature;
        uint16_t InfoCount;
        uint8_t Reserved0[2];
        uint32_t Reserved1[2];
        Windows::Win32::FileSystem::STORAGE_TEMPERATURE_INFO TemperatureInfo[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct STORAGE_TEMPERATURE_THRESHOLD
    {
        uint32_t Version;
        uint32_t Size;
        uint16_t Flags;
        uint16_t Index;
        int16_t Threshold;
        uint8_t OverThreshold;
        uint8_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    union STORAGE_SPEC_VERSION
    {
        struct _Anonymous_e__Struct
        {
            union _MinorVersion_e__Union
            {
                struct _Anonymous_e__Struct
                {
                    uint8_t SubMinor;
                    uint8_t Minor;
                };
                _Anonymous_e__Struct Anonymous;
                uint16_t AsUshort;
            };
            _MinorVersion_e__Union MinorVersion;
            uint16_t MajorVersion;
        };
        _Anonymous_e__Struct Anonymous;
        uint32_t AsUlong;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct STORAGE_PHYSICAL_DEVICE_DATA
    {
        uint32_t DeviceId;
        uint32_t Role;
        Windows::Win32::FileSystem::STORAGE_COMPONENT_HEALTH_STATUS HealthStatus;
        Windows::Win32::FileSystem::STORAGE_PROTOCOL_TYPE CommandProtocol;
        Windows::Win32::FileSystem::STORAGE_SPEC_VERSION SpecVersion;
        Windows::Win32::FileSystem::STORAGE_DEVICE_FORM_FACTOR FormFactor;
        uint8_t Vendor[8];
        uint8_t Model[40];
        uint8_t FirmwareRevision[16];
        uint64_t Capacity;
        uint8_t PhysicalLocation[32];
        uint32_t Reserved[2];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct STORAGE_PHYSICAL_ADAPTER_DATA
    {
        uint32_t AdapterId;
        Windows::Win32::FileSystem::STORAGE_COMPONENT_HEALTH_STATUS HealthStatus;
        Windows::Win32::FileSystem::STORAGE_PROTOCOL_TYPE CommandProtocol;
        Windows::Win32::FileSystem::STORAGE_SPEC_VERSION SpecVersion;
        uint8_t Vendor[8];
        uint8_t Model[40];
        uint8_t FirmwareRevision[16];
        uint8_t PhysicalLocation[32];
        uint8_t ExpanderConnected;
        uint8_t Reserved0[3];
        uint32_t Reserved1[3];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct STORAGE_PHYSICAL_NODE_DATA
    {
        uint32_t NodeId;
        uint32_t AdapterCount;
        uint32_t AdapterDataLength;
        uint32_t AdapterDataOffset;
        uint32_t DeviceCount;
        uint32_t DeviceDataLength;
        uint32_t DeviceDataOffset;
        uint32_t Reserved[3];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct STORAGE_PHYSICAL_TOPOLOGY_DESCRIPTOR
    {
        uint32_t Version;
        uint32_t Size;
        uint32_t NodeCount;
        uint32_t Reserved;
        Windows::Win32::FileSystem::STORAGE_PHYSICAL_NODE_DATA Node[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct STORAGE_DEVICE_IO_CAPABILITY_DESCRIPTOR
    {
        uint32_t Version;
        uint32_t Size;
        uint32_t LunMaxIoCount;
        uint32_t AdapterMaxIoCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct STORAGE_DEVICE_ATTRIBUTES_DESCRIPTOR
    {
        uint32_t Version;
        uint32_t Size;
        uint64_t Attributes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct STORAGE_ADAPTER_SERIAL_NUMBER
    {
        uint32_t Version;
        uint32_t Size;
        uint16_t SerialNumber[128];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct STORAGE_WRITE_CACHE_PROPERTY
    {
        uint32_t Version;
        uint32_t Size;
        Windows::Win32::FileSystem::WRITE_CACHE_TYPE WriteCacheType;
        Windows::Win32::FileSystem::WRITE_CACHE_ENABLE WriteCacheEnabled;
        Windows::Win32::FileSystem::WRITE_CACHE_CHANGE WriteCacheChangeable;
        Windows::Win32::FileSystem::WRITE_THROUGH WriteThroughSupported;
        uint8_t FlushCacheSupported;
        uint8_t UserDefinedPowerProtection;
        uint8_t NVCacheEnabled;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct STORAGE_DEVICE_POWER_CAP
    {
        uint32_t Version;
        uint32_t Size;
        Windows::Win32::FileSystem::STORAGE_DEVICE_POWER_CAP_UNITS Units;
        uint64_t MaxPower;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct STORAGE_HW_FIRMWARE_DOWNLOAD
    {
        uint32_t Version;
        uint32_t Size;
        uint32_t Flags;
        uint8_t Slot;
        uint8_t Reserved[3];
        uint64_t Offset;
        uint64_t BufferSize;
        uint8_t ImageBuffer[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct STORAGE_HW_FIRMWARE_ACTIVATE
    {
        uint32_t Version;
        uint32_t Size;
        uint32_t Flags;
        uint8_t Slot;
        uint8_t Reserved0[3];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct STORAGE_PROTOCOL_COMMAND
    {
        uint32_t Version;
        uint32_t Length;
        Windows::Win32::FileSystem::STORAGE_PROTOCOL_TYPE ProtocolType;
        uint32_t Flags;
        uint32_t ReturnStatus;
        uint32_t ErrorCode;
        uint32_t CommandLength;
        uint32_t ErrorInfoLength;
        uint32_t DataToDeviceTransferLength;
        uint32_t DataFromDeviceTransferLength;
        uint32_t TimeOutValue;
        uint32_t ErrorInfoOffset;
        uint32_t DataToDeviceBufferOffset;
        uint32_t DataFromDeviceBufferOffset;
        uint32_t CommandSpecific;
        uint32_t Reserved0;
        uint32_t FixedProtocolReturnData;
        uint32_t Reserved1[3];
        uint8_t Command[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct FORMAT_PARAMETERS
    {
        Windows::Win32::FileSystem::MEDIA_TYPE MediaType;
        uint32_t StartCylinderNumber;
        uint32_t EndCylinderNumber;
        uint32_t StartHeadNumber;
        uint32_t EndHeadNumber;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct FORMAT_EX_PARAMETERS
    {
        Windows::Win32::FileSystem::MEDIA_TYPE MediaType;
        uint32_t StartCylinderNumber;
        uint32_t EndCylinderNumber;
        uint32_t StartHeadNumber;
        uint32_t EndHeadNumber;
        uint16_t FormatGapLength;
        uint16_t SectorsPerTrack;
        uint16_t SectorNumber[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct DISK_GEOMETRY
    {
        Windows::Win32::SystemServices::LARGE_INTEGER Cylinders;
        Windows::Win32::FileSystem::MEDIA_TYPE MediaType;
        uint32_t TracksPerCylinder;
        uint32_t SectorsPerTrack;
        uint32_t BytesPerSector;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct PARTITION_INFORMATION
    {
        Windows::Win32::SystemServices::LARGE_INTEGER StartingOffset;
        Windows::Win32::SystemServices::LARGE_INTEGER PartitionLength;
        uint32_t HiddenSectors;
        uint32_t PartitionNumber;
        uint8_t PartitionType;
        uint8_t BootIndicator;
        uint8_t RecognizedPartition;
        uint8_t RewritePartition;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct DRIVE_LAYOUT_INFORMATION
    {
        uint32_t PartitionCount;
        uint32_t Signature;
        Windows::Win32::FileSystem::PARTITION_INFORMATION PartitionEntry[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct VERIFY_INFORMATION
    {
        Windows::Win32::SystemServices::LARGE_INTEGER StartingOffset;
        uint32_t Length;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct REASSIGN_BLOCKS
    {
        uint16_t Reserved;
        uint16_t Count;
        uint32_t BlockNumber[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct REASSIGN_BLOCKS_EX
    {
        uint16_t Reserved;
        uint16_t Count;
        Windows::Win32::SystemServices::LARGE_INTEGER BlockNumber[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct PARTITION_INFORMATION_MBR
    {
        uint8_t PartitionType;
        uint8_t BootIndicator;
        uint8_t RecognizedPartition;
        uint32_t HiddenSectors;
        ::win32::guid PartitionId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct CREATE_DISK_GPT
    {
        ::win32::guid DiskId;
        uint32_t MaxPartitionCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct CREATE_DISK_MBR
    {
        uint32_t Signature;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct CREATE_DISK
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::FileSystem::CREATE_DISK_MBR Mbr;
            Windows::Win32::FileSystem::CREATE_DISK_GPT Gpt;
        };
        Windows::Win32::FileSystem::PARTITION_STYLE PartitionStyle;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct GET_LENGTH_INFORMATION
    {
        Windows::Win32::SystemServices::LARGE_INTEGER Length;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct PARTITION_INFORMATION_EX
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::FileSystem::PARTITION_INFORMATION_MBR Mbr;
            Windows::Win32::FileSystem::PARTITION_INFORMATION_GPT Gpt;
        };
        Windows::Win32::FileSystem::PARTITION_STYLE PartitionStyle;
        Windows::Win32::SystemServices::LARGE_INTEGER StartingOffset;
        Windows::Win32::SystemServices::LARGE_INTEGER PartitionLength;
        uint32_t PartitionNumber;
        uint8_t RewritePartition;
        uint8_t IsServicePartition;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct DRIVE_LAYOUT_INFORMATION_GPT
    {
        ::win32::guid DiskId;
        Windows::Win32::SystemServices::LARGE_INTEGER StartingUsableOffset;
        Windows::Win32::SystemServices::LARGE_INTEGER UsableLength;
        uint32_t MaxPartitionCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct DRIVE_LAYOUT_INFORMATION_MBR
    {
        uint32_t Signature;
        uint32_t CheckSum;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct DRIVE_LAYOUT_INFORMATION_EX
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::FileSystem::DRIVE_LAYOUT_INFORMATION_MBR Mbr;
            Windows::Win32::FileSystem::DRIVE_LAYOUT_INFORMATION_GPT Gpt;
        };
        uint32_t PartitionStyle;
        uint32_t PartitionCount;
        _Anonymous_e__Union Anonymous;
        Windows::Win32::FileSystem::PARTITION_INFORMATION_EX PartitionEntry[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct DISK_INT13_INFO
    {
        uint16_t DriveSelect;
        uint32_t MaxCylinders;
        uint16_t SectorsPerTrack;
        uint16_t MaxHeads;
        uint16_t NumberDrives;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct DISK_EX_INT13_INFO
    {
        uint16_t ExBufferSize;
        uint16_t ExFlags;
        uint32_t ExCylinders;
        uint32_t ExHeads;
        uint32_t ExSectorsPerTrack;
        uint64_t ExSectorsPerDrive;
        uint16_t ExSectorSize;
        uint16_t ExReserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct DISK_DETECTION_INFO
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                Windows::Win32::FileSystem::DISK_INT13_INFO Int13;
                Windows::Win32::FileSystem::DISK_EX_INT13_INFO ExInt13;
            };
            _Anonymous_e__Struct Anonymous;
        };
        uint32_t SizeOfDetectInfo;
        Windows::Win32::SystemServices::DETECTION_TYPE DetectionType;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct DISK_PARTITION_INFO
    {
        union _Anonymous_e__Union
        {
            struct _Mbr_e__Struct
            {
                uint32_t Signature;
                uint32_t CheckSum;
            };
            struct _Gpt_e__Struct
            {
                ::win32::guid DiskId;
            };
            _Mbr_e__Struct Mbr;
            _Gpt_e__Struct Gpt;
        };
        uint32_t SizeOfPartitionInfo;
        Windows::Win32::FileSystem::PARTITION_STYLE PartitionStyle;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct DISK_GEOMETRY_EX
    {
        Windows::Win32::FileSystem::DISK_GEOMETRY Geometry;
        Windows::Win32::SystemServices::LARGE_INTEGER DiskSize;
        uint8_t Data[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct DISK_CACHE_INFORMATION
    {
        union _Anonymous_e__Union
        {
            struct _ScalarPrefetch_e__Struct
            {
                uint16_t Minimum;
                uint16_t Maximum;
                uint16_t MaximumBlocks;
            };
            struct _BlockPrefetch_e__Struct
            {
                uint16_t Minimum;
                uint16_t Maximum;
            };
            _ScalarPrefetch_e__Struct ScalarPrefetch;
            _BlockPrefetch_e__Struct BlockPrefetch;
        };
        uint8_t ParametersSavable;
        uint8_t ReadCacheEnabled;
        uint8_t WriteCacheEnabled;
        Windows::Win32::SystemServices::DISK_CACHE_RETENTION_PRIORITY ReadRetentionPriority;
        Windows::Win32::SystemServices::DISK_CACHE_RETENTION_PRIORITY WriteRetentionPriority;
        uint16_t DisablePrefetchTransferLength;
        uint8_t PrefetchScalar;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct DISK_GROW_PARTITION
    {
        uint32_t PartitionNumber;
        Windows::Win32::SystemServices::LARGE_INTEGER BytesToGrow;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct DISK_PERFORMANCE
    {
        Windows::Win32::SystemServices::LARGE_INTEGER BytesRead;
        Windows::Win32::SystemServices::LARGE_INTEGER BytesWritten;
        Windows::Win32::SystemServices::LARGE_INTEGER ReadTime;
        Windows::Win32::SystemServices::LARGE_INTEGER WriteTime;
        Windows::Win32::SystemServices::LARGE_INTEGER IdleTime;
        uint32_t ReadCount;
        uint32_t WriteCount;
        uint32_t QueueDepth;
        uint32_t SplitCount;
        Windows::Win32::SystemServices::LARGE_INTEGER QueryTime;
        uint32_t StorageDeviceNumber;
        uint16_t StorageManagerName[8];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct GET_DISK_ATTRIBUTES
    {
        uint32_t Version;
        uint32_t Reserved1;
        uint64_t Attributes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct SET_DISK_ATTRIBUTES
    {
        uint32_t Version;
        uint8_t Persist;
        uint8_t Reserved1[3];
        uint64_t Attributes;
        uint64_t AttributesMask;
        uint32_t Reserved2[4];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct NTFS_VOLUME_DATA_BUFFER
    {
        Windows::Win32::SystemServices::LARGE_INTEGER VolumeSerialNumber;
        Windows::Win32::SystemServices::LARGE_INTEGER NumberSectors;
        Windows::Win32::SystemServices::LARGE_INTEGER TotalClusters;
        Windows::Win32::SystemServices::LARGE_INTEGER FreeClusters;
        Windows::Win32::SystemServices::LARGE_INTEGER TotalReserved;
        uint32_t BytesPerSector;
        uint32_t BytesPerCluster;
        uint32_t BytesPerFileRecordSegment;
        uint32_t ClustersPerFileRecordSegment;
        Windows::Win32::SystemServices::LARGE_INTEGER MftValidDataLength;
        Windows::Win32::SystemServices::LARGE_INTEGER MftStartLcn;
        Windows::Win32::SystemServices::LARGE_INTEGER Mft2StartLcn;
        Windows::Win32::SystemServices::LARGE_INTEGER MftZoneStart;
        Windows::Win32::SystemServices::LARGE_INTEGER MftZoneEnd;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct NTFS_EXTENDED_VOLUME_DATA
    {
        uint32_t ByteCount;
        uint16_t MajorVersion;
        uint16_t MinorVersion;
        uint32_t BytesPerPhysicalSector;
        uint16_t LfsMajorVersion;
        uint16_t LfsMinorVersion;
        uint32_t MaxDeviceTrimExtentCount;
        uint32_t MaxDeviceTrimByteCount;
        uint32_t MaxVolumeTrimExtentCount;
        uint32_t MaxVolumeTrimByteCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct STARTING_LCN_INPUT_BUFFER
    {
        Windows::Win32::SystemServices::LARGE_INTEGER StartingLcn;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct VOLUME_BITMAP_BUFFER
    {
        Windows::Win32::SystemServices::LARGE_INTEGER StartingLcn;
        Windows::Win32::SystemServices::LARGE_INTEGER BitmapSize;
        uint8_t Buffer[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct STARTING_VCN_INPUT_BUFFER
    {
        Windows::Win32::SystemServices::LARGE_INTEGER StartingVcn;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct NTFS_FILE_RECORD_INPUT_BUFFER
    {
        Windows::Win32::SystemServices::LARGE_INTEGER FileReferenceNumber;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct NTFS_FILE_RECORD_OUTPUT_BUFFER
    {
        Windows::Win32::SystemServices::LARGE_INTEGER FileReferenceNumber;
        uint32_t FileRecordLength;
        uint8_t FileRecordBuffer[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct MOVE_FILE_DATA
    {
        Windows::Win32::SystemServices::HANDLE FileHandle;
        Windows::Win32::SystemServices::LARGE_INTEGER StartingVcn;
        Windows::Win32::SystemServices::LARGE_INTEGER StartingLcn;
        uint32_t ClusterCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct FIND_BY_SID_DATA
    {
        uint32_t Restart;
        Windows::Win32::Security::SID Sid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct FIND_BY_SID_OUTPUT
    {
        uint32_t NextEntryOffset;
        uint32_t FileIndex;
        uint32_t FileNameLength;
        uint16_t FileName[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct MFT_ENUM_DATA_V0
    {
        uint64_t StartFileReferenceNumber;
        int64_t LowUsn;
        int64_t HighUsn;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct MFT_ENUM_DATA_V1
    {
        uint64_t StartFileReferenceNumber;
        int64_t LowUsn;
        int64_t HighUsn;
        uint16_t MinMajorVersion;
        uint16_t MaxMajorVersion;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct CREATE_USN_JOURNAL_DATA
    {
        uint64_t MaximumSize;
        uint64_t AllocationDelta;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct READ_FILE_USN_DATA
    {
        uint16_t MinMajorVersion;
        uint16_t MaxMajorVersion;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct READ_USN_JOURNAL_DATA_V0
    {
        int64_t StartUsn;
        uint32_t ReasonMask;
        uint32_t ReturnOnlyOnClose;
        uint64_t Timeout;
        uint64_t BytesToWaitFor;
        uint64_t UsnJournalID;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct READ_USN_JOURNAL_DATA_V1
    {
        int64_t StartUsn;
        uint32_t ReasonMask;
        uint32_t ReturnOnlyOnClose;
        uint64_t Timeout;
        uint64_t BytesToWaitFor;
        uint64_t UsnJournalID;
        uint16_t MinMajorVersion;
        uint16_t MaxMajorVersion;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct USN_TRACK_MODIFIED_RANGES
    {
        uint32_t Flags;
        uint32_t Unused;
        uint64_t ChunkSize;
        int64_t FileSizeThreshold;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct USN_RANGE_TRACK_OUTPUT
    {
        int64_t Usn;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct USN_JOURNAL_DATA_V0
    {
        uint64_t UsnJournalID;
        int64_t FirstUsn;
        int64_t NextUsn;
        int64_t LowestValidUsn;
        int64_t MaxUsn;
        uint64_t MaximumSize;
        uint64_t AllocationDelta;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct USN_JOURNAL_DATA_V1
    {
        uint64_t UsnJournalID;
        int64_t FirstUsn;
        int64_t NextUsn;
        int64_t LowestValidUsn;
        int64_t MaxUsn;
        uint64_t MaximumSize;
        uint64_t AllocationDelta;
        uint16_t MinSupportedMajorVersion;
        uint16_t MaxSupportedMajorVersion;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct USN_JOURNAL_DATA_V2
    {
        uint64_t UsnJournalID;
        int64_t FirstUsn;
        int64_t NextUsn;
        int64_t LowestValidUsn;
        int64_t MaxUsn;
        uint64_t MaximumSize;
        uint64_t AllocationDelta;
        uint16_t MinSupportedMajorVersion;
        uint16_t MaxSupportedMajorVersion;
        uint32_t Flags;
        uint64_t RangeTrackChunkSize;
        int64_t RangeTrackFileSizeThreshold;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct DELETE_USN_JOURNAL_DATA
    {
        uint64_t UsnJournalID;
        uint32_t DeleteFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct MARK_HANDLE_INFO
    {
        union _Anonymous_e__Union
        {
            uint32_t UsnSourceInfo;
            uint32_t CopyNumber;
        };
        _Anonymous_e__Union Anonymous;
        Windows::Win32::SystemServices::HANDLE VolumeHandle;
        uint32_t HandleInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct FILESYSTEM_STATISTICS
    {
        uint16_t FileSystemType;
        uint16_t Version;
        uint32_t SizeOfCompleteStructure;
        uint32_t UserFileReads;
        uint32_t UserFileReadBytes;
        uint32_t UserDiskReads;
        uint32_t UserFileWrites;
        uint32_t UserFileWriteBytes;
        uint32_t UserDiskWrites;
        uint32_t MetaDataReads;
        uint32_t MetaDataReadBytes;
        uint32_t MetaDataDiskReads;
        uint32_t MetaDataWrites;
        uint32_t MetaDataWriteBytes;
        uint32_t MetaDataDiskWrites;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct FAT_STATISTICS
    {
        uint32_t CreateHits;
        uint32_t SuccessfulCreates;
        uint32_t FailedCreates;
        uint32_t NonCachedReads;
        uint32_t NonCachedReadBytes;
        uint32_t NonCachedWrites;
        uint32_t NonCachedWriteBytes;
        uint32_t NonCachedDiskReads;
        uint32_t NonCachedDiskWrites;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct EXFAT_STATISTICS
    {
        uint32_t CreateHits;
        uint32_t SuccessfulCreates;
        uint32_t FailedCreates;
        uint32_t NonCachedReads;
        uint32_t NonCachedReadBytes;
        uint32_t NonCachedWrites;
        uint32_t NonCachedWriteBytes;
        uint32_t NonCachedDiskReads;
        uint32_t NonCachedDiskWrites;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct NTFS_STATISTICS
    {
        struct _MftWritesUserLevel_e__Struct
        {
            uint16_t Write;
            uint16_t Create;
            uint16_t SetInfo;
            uint16_t Flush;
        };
        struct _Mft2WritesUserLevel_e__Struct
        {
            uint16_t Write;
            uint16_t Create;
            uint16_t SetInfo;
            uint16_t Flush;
        };
        struct _BitmapWritesUserLevel_e__Struct
        {
            uint16_t Write;
            uint16_t Create;
            uint16_t SetInfo;
        };
        struct _MftBitmapWritesUserLevel_e__Struct
        {
            uint16_t Write;
            uint16_t Create;
            uint16_t SetInfo;
            uint16_t Flush;
        };
        struct _Allocate_e__Struct
        {
            uint32_t Calls;
            uint32_t Clusters;
            uint32_t Hints;
            uint32_t RunsReturned;
            uint32_t HintsHonored;
            uint32_t HintsClusters;
            uint32_t Cache;
            uint32_t CacheClusters;
            uint32_t CacheMiss;
            uint32_t CacheMissClusters;
        };
        uint32_t LogFileFullExceptions;
        uint32_t OtherExceptions;
        uint32_t MftReads;
        uint32_t MftReadBytes;
        uint32_t MftWrites;
        uint32_t MftWriteBytes;
        _MftWritesUserLevel_e__Struct MftWritesUserLevel;
        uint16_t MftWritesFlushForLogFileFull;
        uint16_t MftWritesLazyWriter;
        uint16_t MftWritesUserRequest;
        uint32_t Mft2Writes;
        uint32_t Mft2WriteBytes;
        _Mft2WritesUserLevel_e__Struct Mft2WritesUserLevel;
        uint16_t Mft2WritesFlushForLogFileFull;
        uint16_t Mft2WritesLazyWriter;
        uint16_t Mft2WritesUserRequest;
        uint32_t RootIndexReads;
        uint32_t RootIndexReadBytes;
        uint32_t RootIndexWrites;
        uint32_t RootIndexWriteBytes;
        uint32_t BitmapReads;
        uint32_t BitmapReadBytes;
        uint32_t BitmapWrites;
        uint32_t BitmapWriteBytes;
        uint16_t BitmapWritesFlushForLogFileFull;
        uint16_t BitmapWritesLazyWriter;
        uint16_t BitmapWritesUserRequest;
        _BitmapWritesUserLevel_e__Struct BitmapWritesUserLevel;
        uint32_t MftBitmapReads;
        uint32_t MftBitmapReadBytes;
        uint32_t MftBitmapWrites;
        uint32_t MftBitmapWriteBytes;
        uint16_t MftBitmapWritesFlushForLogFileFull;
        uint16_t MftBitmapWritesLazyWriter;
        uint16_t MftBitmapWritesUserRequest;
        _MftBitmapWritesUserLevel_e__Struct MftBitmapWritesUserLevel;
        uint32_t UserIndexReads;
        uint32_t UserIndexReadBytes;
        uint32_t UserIndexWrites;
        uint32_t UserIndexWriteBytes;
        uint32_t LogFileReads;
        uint32_t LogFileReadBytes;
        uint32_t LogFileWrites;
        uint32_t LogFileWriteBytes;
        _Allocate_e__Struct Allocate;
        uint32_t DiskResourcesExhausted;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct FILESYSTEM_STATISTICS_EX
    {
        uint16_t FileSystemType;
        uint16_t Version;
        uint32_t SizeOfCompleteStructure;
        uint64_t UserFileReads;
        uint64_t UserFileReadBytes;
        uint64_t UserDiskReads;
        uint64_t UserFileWrites;
        uint64_t UserFileWriteBytes;
        uint64_t UserDiskWrites;
        uint64_t MetaDataReads;
        uint64_t MetaDataReadBytes;
        uint64_t MetaDataDiskReads;
        uint64_t MetaDataWrites;
        uint64_t MetaDataWriteBytes;
        uint64_t MetaDataDiskWrites;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct NTFS_STATISTICS_EX
    {
        struct _MftWritesUserLevel_e__Struct
        {
            uint32_t Write;
            uint32_t Create;
            uint32_t SetInfo;
            uint32_t Flush;
        };
        struct _Mft2WritesUserLevel_e__Struct
        {
            uint32_t Write;
            uint32_t Create;
            uint32_t SetInfo;
            uint32_t Flush;
        };
        struct _BitmapWritesUserLevel_e__Struct
        {
            uint32_t Write;
            uint32_t Create;
            uint32_t SetInfo;
            uint32_t Flush;
        };
        struct _MftBitmapWritesUserLevel_e__Struct
        {
            uint32_t Write;
            uint32_t Create;
            uint32_t SetInfo;
            uint32_t Flush;
        };
        struct _Allocate_e__Struct
        {
            uint32_t Calls;
            uint32_t RunsReturned;
            uint32_t Hints;
            uint32_t HintsHonored;
            uint32_t Cache;
            uint32_t CacheMiss;
            uint64_t Clusters;
            uint64_t HintsClusters;
            uint64_t CacheClusters;
            uint64_t CacheMissClusters;
        };
        uint32_t LogFileFullExceptions;
        uint32_t OtherExceptions;
        uint64_t MftReads;
        uint64_t MftReadBytes;
        uint64_t MftWrites;
        uint64_t MftWriteBytes;
        _MftWritesUserLevel_e__Struct MftWritesUserLevel;
        uint32_t MftWritesFlushForLogFileFull;
        uint32_t MftWritesLazyWriter;
        uint32_t MftWritesUserRequest;
        uint64_t Mft2Writes;
        uint64_t Mft2WriteBytes;
        _Mft2WritesUserLevel_e__Struct Mft2WritesUserLevel;
        uint32_t Mft2WritesFlushForLogFileFull;
        uint32_t Mft2WritesLazyWriter;
        uint32_t Mft2WritesUserRequest;
        uint64_t RootIndexReads;
        uint64_t RootIndexReadBytes;
        uint64_t RootIndexWrites;
        uint64_t RootIndexWriteBytes;
        uint64_t BitmapReads;
        uint64_t BitmapReadBytes;
        uint64_t BitmapWrites;
        uint64_t BitmapWriteBytes;
        uint32_t BitmapWritesFlushForLogFileFull;
        uint32_t BitmapWritesLazyWriter;
        uint32_t BitmapWritesUserRequest;
        _BitmapWritesUserLevel_e__Struct BitmapWritesUserLevel;
        uint64_t MftBitmapReads;
        uint64_t MftBitmapReadBytes;
        uint64_t MftBitmapWrites;
        uint64_t MftBitmapWriteBytes;
        uint32_t MftBitmapWritesFlushForLogFileFull;
        uint32_t MftBitmapWritesLazyWriter;
        uint32_t MftBitmapWritesUserRequest;
        _MftBitmapWritesUserLevel_e__Struct MftBitmapWritesUserLevel;
        uint64_t UserIndexReads;
        uint64_t UserIndexReadBytes;
        uint64_t UserIndexWrites;
        uint64_t UserIndexWriteBytes;
        uint64_t LogFileReads;
        uint64_t LogFileReadBytes;
        uint64_t LogFileWrites;
        uint64_t LogFileWriteBytes;
        _Allocate_e__Struct Allocate;
        uint32_t DiskResourcesExhausted;
        uint64_t VolumeTrimCount;
        uint64_t VolumeTrimTime;
        uint64_t VolumeTrimByteCount;
        uint64_t FileLevelTrimCount;
        uint64_t FileLevelTrimTime;
        uint64_t FileLevelTrimByteCount;
        uint64_t VolumeTrimSkippedCount;
        uint64_t VolumeTrimSkippedByteCount;
        uint64_t NtfsFillStatInfoFromMftRecordCalledCount;
        uint64_t NtfsFillStatInfoFromMftRecordBailedBecauseOfAttributeListCount;
        uint64_t NtfsFillStatInfoFromMftRecordBailedBecauseOfNonResReparsePointCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct FILE_OBJECTID_BUFFER
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint8_t BirthVolumeId[16];
                uint8_t BirthObjectId[16];
                uint8_t DomainId[16];
            };
            _Anonymous_e__Struct Anonymous;
            uint8_t ExtendedInfo[48];
        };
        uint8_t ObjectId[16];
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct FILE_SET_SPARSE_BUFFER
    {
        uint8_t SetSparse;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct FILE_ZERO_DATA_INFORMATION
    {
        Windows::Win32::SystemServices::LARGE_INTEGER FileOffset;
        Windows::Win32::SystemServices::LARGE_INTEGER BeyondFinalZero;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct FILE_ALLOCATED_RANGE_BUFFER
    {
        Windows::Win32::SystemServices::LARGE_INTEGER FileOffset;
        Windows::Win32::SystemServices::LARGE_INTEGER Length;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct PLEX_READ_DATA_REQUEST
    {
        Windows::Win32::SystemServices::LARGE_INTEGER ByteOffset;
        uint32_t ByteLength;
        uint32_t PlexNumber;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct FILE_MAKE_COMPATIBLE_BUFFER
    {
        uint8_t CloseDisc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct FILE_SET_DEFECT_MGMT_BUFFER
    {
        uint8_t Disable;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct FILE_QUERY_SPARING_BUFFER
    {
        uint32_t SparingUnitBytes;
        uint8_t SoftwareSparing;
        uint32_t TotalSpareBlocks;
        uint32_t FreeSpareBlocks;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct FILE_QUERY_ON_DISK_VOL_INFO_BUFFER
    {
        Windows::Win32::SystemServices::LARGE_INTEGER DirectoryCount;
        Windows::Win32::SystemServices::LARGE_INTEGER FileCount;
        uint16_t FsFormatMajVersion;
        uint16_t FsFormatMinVersion;
        uint16_t FsFormatName[12];
        Windows::Win32::SystemServices::LARGE_INTEGER FormatTime;
        Windows::Win32::SystemServices::LARGE_INTEGER LastUpdateTime;
        uint16_t CopyrightInfo[34];
        uint16_t AbstractInfo[34];
        uint16_t FormattingImplementationInfo[34];
        uint16_t LastModifyingImplementationInfo[34];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct SHRINK_VOLUME_INFORMATION
    {
        Windows::Win32::SystemServices::SHRINK_VOLUME_REQUEST_TYPES ShrinkRequestType;
        uint64_t Flags;
        int64_t NewNumberOfSectors;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct TXFS_MODIFY_RM
    {
        uint32_t Flags;
        uint32_t LogContainerCountMax;
        uint32_t LogContainerCountMin;
        uint32_t LogContainerCount;
        uint32_t LogGrowthIncrement;
        uint32_t LogAutoShrinkPercentage;
        uint64_t Reserved;
        uint16_t LoggingMode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct TXFS_QUERY_RM_INFORMATION
    {
        uint32_t BytesRequired;
        uint64_t TailLsn;
        uint64_t CurrentLsn;
        uint64_t ArchiveTailLsn;
        uint64_t LogContainerSize;
        Windows::Win32::SystemServices::LARGE_INTEGER HighestVirtualClock;
        uint32_t LogContainerCount;
        uint32_t LogContainerCountMax;
        uint32_t LogContainerCountMin;
        uint32_t LogGrowthIncrement;
        uint32_t LogAutoShrinkPercentage;
        uint32_t Flags;
        uint16_t LoggingMode;
        uint16_t Reserved;
        uint32_t RmState;
        uint64_t LogCapacity;
        uint64_t LogFree;
        uint64_t TopsSize;
        uint64_t TopsUsed;
        uint64_t TransactionCount;
        uint64_t OnePCCount;
        uint64_t TwoPCCount;
        uint64_t NumberLogFileFull;
        uint64_t OldestTransactionAge;
        ::win32::guid RMName;
        uint32_t TmLogPathOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct TXFS_GET_METADATA_INFO_OUT
    {
        struct _TxfFileId_e__Struct
        {
            int64_t LowPart;
            int64_t HighPart;
        };
        _TxfFileId_e__Struct TxfFileId;
        ::win32::guid LockingTransaction;
        uint64_t LastLsn;
        uint32_t TransactionState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY
    {
        uint64_t Offset;
        uint32_t NameFlags;
        int64_t FileId;
        uint32_t Reserved1;
        uint32_t Reserved2;
        int64_t Reserved3;
        uint16_t FileName[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct TXFS_LIST_TRANSACTION_LOCKED_FILES
    {
        ::win32::guid KtmTransaction;
        uint64_t NumberOfFiles;
        uint64_t BufferSizeRequired;
        uint64_t Offset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct TXFS_LIST_TRANSACTIONS_ENTRY
    {
        ::win32::guid TransactionId;
        uint32_t TransactionState;
        uint32_t Reserved1;
        uint32_t Reserved2;
        int64_t Reserved3;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct TXFS_LIST_TRANSACTIONS
    {
        uint64_t NumberOfTransactions;
        uint64_t BufferSizeRequired;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct TXFS_READ_BACKUP_INFORMATION_OUT
    {
        union _Anonymous_e__Union
        {
            uint32_t BufferLength;
            uint8_t Buffer[1];
        };
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct TXFS_WRITE_BACKUP_INFORMATION
    {
        uint8_t Buffer[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct TXFS_GET_TRANSACTED_VERSION
    {
        uint32_t ThisBaseVersion;
        uint32_t LatestVersion;
        uint16_t ThisMiniVersion;
        uint16_t FirstMiniVersion;
        uint16_t LatestMiniVersion;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct TXFS_SAVEPOINT_INFORMATION
    {
        Windows::Win32::SystemServices::HANDLE KtmTransaction;
        uint32_t ActionCode;
        uint32_t SavepointId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct TXFS_CREATE_MINIVERSION_INFO
    {
        uint16_t StructureVersion;
        uint16_t StructureLength;
        uint32_t BaseVersion;
        uint16_t MiniVersion;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct TXFS_TRANSACTION_ACTIVE_INFO
    {
        uint8_t TransactionsActiveAtSnapshot;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct BOOT_AREA_INFO
    {
        struct _Anonymous_e__Struct
        {
            Windows::Win32::SystemServices::LARGE_INTEGER Offset;
        };
        uint32_t BootSectorCount;
        _Anonymous_e__Struct BootSectors[2];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct RETRIEVAL_POINTER_BASE
    {
        Windows::Win32::SystemServices::LARGE_INTEGER FileAreaOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct FILE_SYSTEM_RECOGNITION_INFORMATION
    {
        int8_t FileSystem[9];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct REQUEST_OPLOCK_INPUT_BUFFER
    {
        uint16_t StructureVersion;
        uint16_t StructureLength;
        uint32_t RequestedOplockLevel;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct REQUEST_OPLOCK_OUTPUT_BUFFER
    {
        uint16_t StructureVersion;
        uint16_t StructureLength;
        uint32_t OriginalOplockLevel;
        uint32_t NewOplockLevel;
        uint32_t Flags;
        uint32_t AccessMode;
        uint16_t ShareMode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct LOOKUP_STREAM_FROM_CLUSTER_INPUT
    {
        uint32_t Flags;
        uint32_t NumberOfClusters;
        Windows::Win32::SystemServices::LARGE_INTEGER Cluster[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct LOOKUP_STREAM_FROM_CLUSTER_OUTPUT
    {
        uint32_t Offset;
        uint32_t NumberOfMatches;
        uint32_t BufferSizeRequired;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct LOOKUP_STREAM_FROM_CLUSTER_ENTRY
    {
        uint32_t OffsetToNext;
        uint32_t Flags;
        Windows::Win32::SystemServices::LARGE_INTEGER Reserved;
        Windows::Win32::SystemServices::LARGE_INTEGER Cluster;
        uint16_t FileName[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct CSV_NAMESPACE_INFO
    {
        uint32_t Version;
        uint32_t DeviceNumber;
        Windows::Win32::SystemServices::LARGE_INTEGER StartingOffset;
        uint32_t SectorSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct CSV_CONTROL_PARAM
    {
        Windows::Win32::FileSystem::CSV_CONTROL_OP Operation;
        int64_t Unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct CSV_QUERY_REDIRECT_STATE
    {
        uint32_t MdsNodeId;
        uint32_t DsNodeId;
        uint8_t FileRedirected;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct CSV_QUERY_FILE_REVISION
    {
        int64_t FileId;
        int64_t FileRevision[3];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct CSV_QUERY_MDS_PATH
    {
        uint32_t MdsNodeId;
        uint32_t DsNodeId;
        uint32_t PathLength;
        uint16_t Path[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT
    {
        uint64_t VetoedFromAltitudeIntegral;
        uint64_t VetoedFromAltitudeDecimal;
        uint16_t Reason[256];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct CSV_IS_OWNED_BY_CSVFS
    {
        uint8_t OwnedByCSVFS;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct FILE_LEVEL_TRIM_RANGE
    {
        uint64_t Offset;
        uint64_t Length;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct FILE_LEVEL_TRIM
    {
        uint32_t Key;
        uint32_t NumRanges;
        Windows::Win32::FileSystem::FILE_LEVEL_TRIM_RANGE Ranges[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct FILE_LEVEL_TRIM_OUTPUT
    {
        uint32_t NumRangesProcessed;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct FSCTL_GET_INTEGRITY_INFORMATION_BUFFER
    {
        uint16_t ChecksumAlgorithm;
        uint16_t Reserved;
        uint32_t Flags;
        uint32_t ChecksumChunkSizeInBytes;
        uint32_t ClusterSizeInBytes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct FSCTL_SET_INTEGRITY_INFORMATION_BUFFER
    {
        uint16_t ChecksumAlgorithm;
        uint16_t Reserved;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct REPAIR_COPIES_INPUT
    {
        uint32_t Size;
        uint32_t Flags;
        Windows::Win32::SystemServices::LARGE_INTEGER FileOffset;
        uint32_t Length;
        uint32_t SourceCopy;
        uint32_t NumberOfRepairCopies;
        uint32_t RepairCopies[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct REPAIR_COPIES_OUTPUT
    {
        uint32_t Size;
        uint32_t Status;
        Windows::Win32::SystemServices::LARGE_INTEGER ResumeFileOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct FILE_STORAGE_TIER
    {
        ::win32::guid Id;
        uint16_t Name[256];
        uint16_t Description[256];
        uint64_t Flags;
        uint64_t ProvisionedCapacity;
        Windows::Win32::FileSystem::FILE_STORAGE_TIER_MEDIA_TYPE MediaType;
        Windows::Win32::SystemServices::FILE_STORAGE_TIER_CLASS Class;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct FSCTL_QUERY_STORAGE_CLASSES_OUTPUT
    {
        uint32_t Version;
        uint32_t Size;
        uint32_t Flags;
        uint32_t TotalNumberOfTiers;
        uint32_t NumberOfTiersReturned;
        Windows::Win32::FileSystem::FILE_STORAGE_TIER Tiers[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct FSCTL_QUERY_REGION_INFO_INPUT
    {
        uint32_t Version;
        uint32_t Size;
        uint32_t Flags;
        uint32_t NumberOfTierIds;
        ::win32::guid TierIds[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct FILE_STORAGE_TIER_REGION
    {
        ::win32::guid TierId;
        uint64_t Offset;
        uint64_t Length;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct FSCTL_QUERY_REGION_INFO_OUTPUT
    {
        uint32_t Version;
        uint32_t Size;
        uint32_t Flags;
        uint32_t Reserved;
        uint64_t Alignment;
        uint32_t TotalNumberOfRegions;
        uint32_t NumberOfRegionsReturned;
        Windows::Win32::FileSystem::FILE_STORAGE_TIER_REGION Regions[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct DUPLICATE_EXTENTS_DATA
    {
        Windows::Win32::SystemServices::HANDLE FileHandle;
        Windows::Win32::SystemServices::LARGE_INTEGER SourceFileOffset;
        Windows::Win32::SystemServices::LARGE_INTEGER TargetFileOffset;
        Windows::Win32::SystemServices::LARGE_INTEGER ByteCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct DISK_EXTENT
    {
        uint32_t DiskNumber;
        Windows::Win32::SystemServices::LARGE_INTEGER StartingOffset;
        Windows::Win32::SystemServices::LARGE_INTEGER ExtentLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct VOLUME_DISK_EXTENTS
    {
        uint32_t NumberOfDiskExtents;
        Windows::Win32::FileSystem::DISK_EXTENT Extents[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct VOLUME_GET_GPT_ATTRIBUTES_INFORMATION
    {
        uint64_t GptAttributes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct UpdateAssessment
    {
        Windows::Win32::WindowsProgramming::UpdateAssessmentStatus status;
        Windows::Win32::WindowsProgramming::UpdateImpactLevel impact;
        uint32_t daysOutOfDate;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct OSUpdateAssessment
    {
        Windows::Win32::SystemServices::BOOL isEndOfSupport;
        Windows::Win32::WindowsProgramming::UpdateAssessment assessmentForCurrent;
        Windows::Win32::WindowsProgramming::UpdateAssessment assessmentForUpToDate;
        Windows::Win32::WindowsProgramming::UpdateAssessmentStatus securityStatus;
        Windows::Win32::WindowsProgramming::FILETIME assessmentTime;
        Windows::Win32::WindowsProgramming::FILETIME releaseInfoTime;
        uint16_t* currentOSBuild;
        Windows::Win32::WindowsProgramming::FILETIME currentOSReleaseTime;
        uint16_t* upToDateOSBuild;
        Windows::Win32::WindowsProgramming::FILETIME upToDateOSReleaseTime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct EXCEPTION_DEBUG_INFO
    {
        Windows::Win32::Debug::EXCEPTION_RECORD ExceptionRecord;
        uint32_t dwFirstChance;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct CREATE_THREAD_DEBUG_INFO
    {
        Windows::Win32::SystemServices::HANDLE hThread;
        void* lpThreadLocalBase;
        Windows::Win32::SystemServices::LPTHREAD_START_ROUTINE* lpStartAddress;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct CREATE_PROCESS_DEBUG_INFO
    {
        Windows::Win32::SystemServices::HANDLE hFile;
        Windows::Win32::SystemServices::HANDLE hProcess;
        Windows::Win32::SystemServices::HANDLE hThread;
        void* lpBaseOfImage;
        uint32_t dwDebugInfoFileOffset;
        uint32_t nDebugInfoSize;
        void* lpThreadLocalBase;
        Windows::Win32::SystemServices::LPTHREAD_START_ROUTINE* lpStartAddress;
        void* lpImageName;
        uint16_t fUnicode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct EXIT_THREAD_DEBUG_INFO
    {
        uint32_t dwExitCode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct EXIT_PROCESS_DEBUG_INFO
    {
        uint32_t dwExitCode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct LOAD_DLL_DEBUG_INFO
    {
        Windows::Win32::SystemServices::HANDLE hFile;
        void* lpBaseOfDll;
        uint32_t dwDebugInfoFileOffset;
        uint32_t nDebugInfoSize;
        void* lpImageName;
        uint16_t fUnicode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct UNLOAD_DLL_DEBUG_INFO
    {
        void* lpBaseOfDll;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct OUTPUT_DEBUG_STRING_INFO
    {
        int8_t* lpDebugStringData;
        uint16_t fUnicode;
        uint16_t nDebugStringLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct RIP_INFO
    {
        uint32_t dwError;
        uint32_t dwType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct DEBUG_EVENT
    {
        union _u_e__Union
        {
            Windows::Win32::Debug::EXCEPTION_DEBUG_INFO Exception;
            Windows::Win32::Debug::CREATE_THREAD_DEBUG_INFO CreateThread;
            Windows::Win32::Debug::CREATE_PROCESS_DEBUG_INFO CreateProcessInfo;
            Windows::Win32::Debug::EXIT_THREAD_DEBUG_INFO ExitThread;
            Windows::Win32::Debug::EXIT_PROCESS_DEBUG_INFO ExitProcess;
            Windows::Win32::Debug::LOAD_DLL_DEBUG_INFO LoadDll;
            Windows::Win32::Debug::UNLOAD_DLL_DEBUG_INFO UnloadDll;
            Windows::Win32::Debug::OUTPUT_DEBUG_STRING_INFO DebugString;
            Windows::Win32::Debug::RIP_INFO RipInfo;
        };
        uint32_t dwDebugEventCode;
        uint32_t dwProcessId;
        uint32_t dwThreadId;
        _u_e__Union u;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MenusAndResources
{
    struct VS_FIXEDFILEINFO
    {
        uint32_t dwSignature;
        uint32_t dwStrucVersion;
        uint32_t dwFileVersionMS;
        uint32_t dwFileVersionLS;
        uint32_t dwProductVersionMS;
        uint32_t dwProductVersionLS;
        uint32_t dwFileFlagsMask;
        uint32_t dwFileFlags;
        uint32_t dwFileOS;
        uint32_t dwFileType;
        uint32_t dwFileSubtype;
        uint32_t dwFileDateMS;
        uint32_t dwFileDateLS;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Perf
{
    struct PERF_DATA_BLOCK
    {
        uint16_t Signature[4];
        uint32_t LittleEndian;
        uint32_t Version;
        uint32_t Revision;
        uint32_t TotalByteLength;
        uint32_t HeaderLength;
        uint32_t NumObjectTypes;
        int32_t DefaultObject;
        Windows::Win32::WindowsProgramming::SYSTEMTIME SystemTime;
        Windows::Win32::SystemServices::LARGE_INTEGER PerfTime;
        Windows::Win32::SystemServices::LARGE_INTEGER PerfFreq;
        Windows::Win32::SystemServices::LARGE_INTEGER PerfTime100nSec;
        uint32_t SystemNameLength;
        uint32_t SystemNameOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Perf
{
    struct PERF_OBJECT_TYPE
    {
        uint32_t TotalByteLength;
        uint32_t DefinitionLength;
        uint32_t HeaderLength;
        uint32_t ObjectNameTitleIndex;
        uint16_t* ObjectNameTitle;
        uint32_t ObjectHelpTitleIndex;
        uint16_t* ObjectHelpTitle;
        uint32_t DetailLevel;
        uint32_t NumCounters;
        int32_t DefaultCounter;
        int32_t NumInstances;
        uint32_t CodePage;
        Windows::Win32::SystemServices::LARGE_INTEGER PerfTime;
        Windows::Win32::SystemServices::LARGE_INTEGER PerfFreq;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Perf
{
    struct PERF_COUNTER_DEFINITION
    {
        uint32_t ByteLength;
        uint32_t CounterNameTitleIndex;
        uint16_t* CounterNameTitle;
        uint32_t CounterHelpTitleIndex;
        uint16_t* CounterHelpTitle;
        int32_t DefaultScale;
        uint32_t DetailLevel;
        uint32_t CounterType;
        uint32_t CounterSize;
        uint32_t CounterOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Perf
{
    struct PERF_INSTANCE_DEFINITION
    {
        uint32_t ByteLength;
        uint32_t ParentObjectTitleIndex;
        uint32_t ParentObjectInstance;
        int32_t UniqueID;
        uint32_t NameOffset;
        uint32_t NameLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Perf
{
    struct PERF_COUNTER_BLOCK
    {
        uint32_t ByteLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct CSPLATFORM
    {
        uint32_t dwPlatformId;
        uint32_t dwVersionHi;
        uint32_t dwVersionLo;
        uint32_t dwProcessorArch;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct QUERYCONTEXT
    {
        uint32_t dwContext;
        Windows::Win32::Com::CSPLATFORM Platform;
        uint32_t Locale;
        uint32_t dwVersionHi;
        uint32_t dwVersionLo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsPropertiesSystem
{
    struct PROPERTYKEY
    {
        ::win32::guid fmtid;
        uint32_t pid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DDVIDEOPORTCAPS
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        uint32_t dwMaxWidth;
        uint32_t dwMaxVBIWidth;
        uint32_t dwMaxHeight;
        uint32_t dwVideoPortID;
        uint32_t dwCaps;
        uint32_t dwFX;
        uint32_t dwNumAutoFlipSurfaces;
        uint32_t dwAlignVideoPortBoundary;
        uint32_t dwAlignVideoPortPrescaleWidth;
        uint32_t dwAlignVideoPortCropBoundary;
        uint32_t dwAlignVideoPortCropWidth;
        uint32_t dwPreshrinkXStep;
        uint32_t dwPreshrinkYStep;
        uint32_t dwNumVBIAutoFlipSurfaces;
        uint32_t dwNumPreferredAutoflip;
        uint16_t wNumFilterTapsX;
        uint16_t wNumFilterTapsY;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DDVIDEOPORTDESC
    {
        uint32_t dwSize;
        uint32_t dwFieldWidth;
        uint32_t dwVBIWidth;
        uint32_t dwFieldHeight;
        uint32_t dwMicrosecondsPerField;
        uint32_t dwMaxPixelsPerSecond;
        uint32_t dwVideoPortID;
        uint32_t dwReserved1;
        Windows::Win32::CoreAudio::DDVIDEOPORTCONNECT VideoPortType;
        size_t dwReserved2;
        size_t dwReserved3;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DDVIDEOPORTINFO
    {
        uint32_t dwSize;
        uint32_t dwOriginX;
        uint32_t dwOriginY;
        uint32_t dwVPFlags;
        Windows::Win32::DisplayDevices::RECT rCrop;
        uint32_t dwPrescaleWidth;
        uint32_t dwPrescaleHeight;
        Windows::Win32::DirectDraw::DDPIXELFORMAT* lpddpfInputFormat;
        Windows::Win32::DirectDraw::DDPIXELFORMAT* lpddpfVBIInputFormat;
        Windows::Win32::DirectDraw::DDPIXELFORMAT* lpddpfVBIOutputFormat;
        uint32_t dwVBIHeight;
        size_t dwReserved1;
        size_t dwReserved2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DDVIDEOPORTBANDWIDTH
    {
        uint32_t dwSize;
        uint32_t dwCaps;
        uint32_t dwOverlay;
        uint32_t dwColorkey;
        uint32_t dwYInterpolate;
        uint32_t dwYInterpAndColorkey;
        size_t dwReserved1;
        size_t dwReserved2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_GETHEAPALIGNMENTDATA
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct VIDEOMEMORY
    {
        union _Anonymous1_e__Union
        {
            size_t fpEnd;
            uint32_t dwWidth;
        };
        union _Anonymous2_e__Union
        {
            Windows::Win32::DisplayDevices::VMEMHEAP* lpHeap;
            uint32_t dwHeight;
        };
        uint32_t dwFlags;
        size_t fpStart;
        _Anonymous1_e__Union Anonymous1;
        Windows::Win32::DirectDraw::DDSCAPS ddsCaps;
        Windows::Win32::DirectDraw::DDSCAPS ddsCapsAlt;
        _Anonymous2_e__Union Anonymous2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_CALLBACKS
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        Windows::Win32::SystemServices::PDD_DESTROYDRIVER* DestroyDriver;
        Windows::Win32::DisplayDevices::PDD_CREATESURFACE* CreateSurface;
        Windows::Win32::SystemServices::PDD_SETCOLORKEY* SetColorKey;
        Windows::Win32::SystemServices::PDD_SETMODE* SetMode;
        Windows::Win32::DisplayDevices::PDD_WAITFORVERTICALBLANK* WaitForVerticalBlank;
        Windows::Win32::DisplayDevices::PDD_CANCREATESURFACE* CanCreateSurface;
        Windows::Win32::DisplayDevices::PDD_CREATEPALETTE* CreatePalette;
        Windows::Win32::DisplayDevices::PDD_GETSCANLINE* GetScanLine;
        Windows::Win32::DisplayDevices::PDD_MAPMEMORY* MapMemory;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_MISCELLANEOUSCALLBACKS
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        Windows::Win32::DisplayDevices::PDD_GETAVAILDRIVERMEMORY* GetAvailDriverMemory;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_MISCELLANEOUS2CALLBACKS
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        Windows::Win32::SystemServices::PDD_ALPHABLT* AlphaBlt;
        Windows::Win32::DisplayDevices::PDD_CREATESURFACEEX* CreateSurfaceEx;
        Windows::Win32::DisplayDevices::PDD_GETDRIVERSTATE* GetDriverState;
        Windows::Win32::DisplayDevices::PDD_DESTROYDDLOCAL* DestroyDDLocal;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_NTCALLBACKS
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        Windows::Win32::DisplayDevices::PDD_FREEDRIVERMEMORY* FreeDriverMemory;
        Windows::Win32::DisplayDevices::PDD_SETEXCLUSIVEMODE* SetExclusiveMode;
        Windows::Win32::DisplayDevices::PDD_FLIPTOGDISURFACE* FlipToGDISurface;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_PALETTECALLBACKS
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        Windows::Win32::DisplayDevices::PDD_PALCB_DESTROYPALETTE* DestroyPalette;
        Windows::Win32::DisplayDevices::PDD_PALCB_SETENTRIES* SetEntries;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_SURFACECALLBACKS
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        Windows::Win32::DisplayDevices::PDD_SURFCB_DESTROYSURFACE* DestroySurface;
        Windows::Win32::DisplayDevices::PDD_SURFCB_FLIP* Flip;
        Windows::Win32::SystemServices::PDD_SURFCB_SETCLIPLIST* SetClipList;
        Windows::Win32::DisplayDevices::PDD_SURFCB_LOCK* Lock;
        Windows::Win32::DisplayDevices::PDD_SURFCB_UNLOCK* Unlock;
        Windows::Win32::DisplayDevices::PDD_SURFCB_BLT* Blt;
        Windows::Win32::DisplayDevices::PDD_SURFCB_SETCOLORKEY* SetColorKey;
        Windows::Win32::DisplayDevices::PDD_SURFCB_ADDATTACHEDSURFACE* AddAttachedSurface;
        Windows::Win32::DisplayDevices::PDD_SURFCB_GETBLTSTATUS* GetBltStatus;
        Windows::Win32::DisplayDevices::PDD_SURFCB_GETFLIPSTATUS* GetFlipStatus;
        Windows::Win32::DisplayDevices::PDD_SURFCB_UPDATEOVERLAY* UpdateOverlay;
        Windows::Win32::DisplayDevices::PDD_SURFCB_SETOVERLAYPOSITION* SetOverlayPosition;
        void* reserved4;
        Windows::Win32::DisplayDevices::PDD_SURFCB_SETPALETTE* SetPalette;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_VIDEOPORTCALLBACKS
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        Windows::Win32::DisplayDevices::PDD_VPORTCB_CANCREATEVIDEOPORT* CanCreateVideoPort;
        Windows::Win32::DisplayDevices::PDD_VPORTCB_CREATEVIDEOPORT* CreateVideoPort;
        Windows::Win32::DisplayDevices::PDD_VPORTCB_FLIP* FlipVideoPort;
        Windows::Win32::DisplayDevices::PDD_VPORTCB_GETBANDWIDTH* GetVideoPortBandwidth;
        Windows::Win32::DisplayDevices::PDD_VPORTCB_GETINPUTFORMATS* GetVideoPortInputFormats;
        Windows::Win32::DisplayDevices::PDD_VPORTCB_GETOUTPUTFORMATS* GetVideoPortOutputFormats;
        void* lpReserved1;
        Windows::Win32::DisplayDevices::PDD_VPORTCB_GETFIELD* GetVideoPortField;
        Windows::Win32::DisplayDevices::PDD_VPORTCB_GETLINE* GetVideoPortLine;
        Windows::Win32::DisplayDevices::PDD_VPORTCB_GETVPORTCONNECT* GetVideoPortConnectInfo;
        Windows::Win32::DisplayDevices::PDD_VPORTCB_DESTROYVPORT* DestroyVideoPort;
        Windows::Win32::DisplayDevices::PDD_VPORTCB_GETFLIPSTATUS* GetVideoPortFlipStatus;
        Windows::Win32::DisplayDevices::PDD_VPORTCB_UPDATE* UpdateVideoPort;
        Windows::Win32::DisplayDevices::PDD_VPORTCB_WAITFORSYNC* WaitForVideoPortSync;
        Windows::Win32::DisplayDevices::PDD_VPORTCB_GETSIGNALSTATUS* GetVideoSignalStatus;
        Windows::Win32::DisplayDevices::PDD_VPORTCB_COLORCONTROL* ColorControl;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_COLORCONTROLCALLBACKS
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        Windows::Win32::DisplayDevices::PDD_COLORCB_COLORCONTROL* ColorControl;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_KERNELCALLBACKS
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        Windows::Win32::DisplayDevices::PDD_KERNELCB_SYNCSURFACE* SyncSurfaceData;
        Windows::Win32::DisplayDevices::PDD_KERNELCB_SYNCVIDEOPORT* SyncVideoPortData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_MOTIONCOMPCALLBACKS
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        Windows::Win32::DisplayDevices::PDD_MOCOMPCB_GETGUIDS* GetMoCompGuids;
        Windows::Win32::DisplayDevices::PDD_MOCOMPCB_GETFORMATS* GetMoCompFormats;
        Windows::Win32::DisplayDevices::PDD_MOCOMPCB_CREATE* CreateMoComp;
        Windows::Win32::DisplayDevices::PDD_MOCOMPCB_GETCOMPBUFFINFO* GetMoCompBuffInfo;
        Windows::Win32::DisplayDevices::PDD_MOCOMPCB_GETINTERNALINFO* GetInternalMoCompInfo;
        Windows::Win32::DisplayDevices::PDD_MOCOMPCB_BEGINFRAME* BeginMoCompFrame;
        Windows::Win32::DisplayDevices::PDD_MOCOMPCB_ENDFRAME* EndMoCompFrame;
        Windows::Win32::DisplayDevices::PDD_MOCOMPCB_RENDER* RenderMoComp;
        Windows::Win32::DisplayDevices::PDD_MOCOMPCB_QUERYSTATUS* QueryMoCompStatus;
        Windows::Win32::DisplayDevices::PDD_MOCOMPCB_DESTROY* DestroyMoComp;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_NONLOCALVIDMEMCAPS
    {
        uint32_t dwSize;
        uint32_t dwNLVBCaps;
        uint32_t dwNLVBCaps2;
        uint32_t dwNLVBCKeyCaps;
        uint32_t dwNLVBFXCaps;
        uint32_t dwNLVBRops[8];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_PALETTE_GLOBAL
    {
        size_t dwReserved1;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_PALETTE_LOCAL
    {
        uint32_t dwReserved0;
        size_t dwReserved1;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_CLIPPER_GLOBAL
    {
        size_t dwReserved1;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_CLIPPER_LOCAL
    {
        size_t dwReserved1;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_ATTACHLIST
    {
        Windows::Win32::DisplayDevices::DD_ATTACHLIST* lpLink;
        Windows::Win32::DisplayDevices::DD_SURFACE_LOCAL* lpAttached;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_SURFACE_INT
    {
        Windows::Win32::DisplayDevices::DD_SURFACE_LOCAL* lpLcl;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_SURFACE_GLOBAL
    {
        union _Anonymous1_e__Union
        {
            uint32_t dwBlockSizeY;
            int32_t lSlicePitch;
        };
        union _Anonymous2_e__Union
        {
            Windows::Win32::DisplayDevices::VIDEOMEMORY* lpVidMemHeap;
            uint32_t dwBlockSizeX;
            uint32_t dwUserMemSize;
        };
        union _Anonymous3_e__Union
        {
            int32_t lPitch;
            uint32_t dwLinearSize;
        };
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
        size_t fpVidMem;
        _Anonymous3_e__Union Anonymous3;
        int32_t yHint;
        int32_t xHint;
        uint32_t wHeight;
        uint32_t wWidth;
        size_t dwReserved1;
        Windows::Win32::DirectDraw::DDPIXELFORMAT ddpfSurface;
        size_t fpHeapOffset;
        Windows::Win32::SystemServices::HANDLE hCreatorProcess;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectDraw
{
    struct DDSCAPSEX
    {
        union _Anonymous_e__Union
        {
            uint32_t dwCaps4;
            uint32_t dwVolumeDepth;
        };
        uint32_t dwCaps2;
        uint32_t dwCaps3;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_SURFACE_MORE
    {
        uint32_t dwMipMapCount;
        Windows::Win32::DisplayDevices::DD_VIDEOPORT_LOCAL* lpVideoPort;
        uint32_t dwOverlayFlags;
        Windows::Win32::DirectDraw::DDSCAPSEX ddsCapsEx;
        uint32_t dwSurfaceHandle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_SURFACE_LOCAL
    {
        union _Anonymous1_e__Union
        {
            Windows::Win32::DirectShow::DDCOLORKEY ddckCKSrcOverlay;
            Windows::Win32::DirectShow::DDCOLORKEY ddckCKSrcBlt;
        };
        union _Anonymous2_e__Union
        {
            Windows::Win32::DirectShow::DDCOLORKEY ddckCKDestOverlay;
            Windows::Win32::DirectShow::DDCOLORKEY ddckCKDestBlt;
        };
        Windows::Win32::DisplayDevices::DD_SURFACE_GLOBAL* lpGbl;
        uint32_t dwFlags;
        Windows::Win32::DirectDraw::DDSCAPS ddsCaps;
        size_t dwReserved1;
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
        Windows::Win32::DisplayDevices::DD_SURFACE_MORE* lpSurfMore;
        Windows::Win32::DisplayDevices::DD_ATTACHLIST* lpAttachList;
        Windows::Win32::DisplayDevices::DD_ATTACHLIST* lpAttachListFrom;
        Windows::Win32::DisplayDevices::RECT rcOverlaySrc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_D3DBUFCALLBACKS
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        Windows::Win32::DisplayDevices::PDD_CANCREATESURFACE* CanCreateD3DBuffer;
        Windows::Win32::DisplayDevices::PDD_CREATESURFACE* CreateD3DBuffer;
        Windows::Win32::DisplayDevices::PDD_SURFCB_DESTROYSURFACE* DestroyD3DBuffer;
        Windows::Win32::DisplayDevices::PDD_SURFCB_LOCK* LockD3DBuffer;
        Windows::Win32::DisplayDevices::PDD_SURFCB_UNLOCK* UnlockD3DBuffer;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_HALINFO
    {
        uint32_t dwSize;
        Windows::Win32::DisplayDevices::VIDEOMEMORYINFO vmiData;
        Windows::Win32::SystemServices::DDNTCORECAPS ddCaps;
        Windows::Win32::DisplayDevices::PDD_GETDRIVERINFO* GetDriverInfo;
        uint32_t dwFlags;
        void* lpD3DGlobalDriverData;
        void* lpD3DHALCallbacks;
        Windows::Win32::DisplayDevices::DD_D3DBUFCALLBACKS* lpD3DBufCallbacks;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_DIRECTDRAW_GLOBAL
    {
        void* dhpdev;
        size_t dwReserved1;
        size_t dwReserved2;
        Windows::Win32::DisplayDevices::DDVIDEOPORTCAPS* lpDDVideoPortCaps;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_DIRECTDRAW_LOCAL
    {
        Windows::Win32::DisplayDevices::DD_DIRECTDRAW_GLOBAL* lpGbl;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_VIDEOPORT_LOCAL
    {
        Windows::Win32::DisplayDevices::DD_DIRECTDRAW_LOCAL* lpDD;
        Windows::Win32::DisplayDevices::DDVIDEOPORTDESC ddvpDesc;
        Windows::Win32::DisplayDevices::DDVIDEOPORTINFO ddvpInfo;
        Windows::Win32::DisplayDevices::DD_SURFACE_INT* lpSurface;
        Windows::Win32::DisplayDevices::DD_SURFACE_INT* lpVBISurface;
        uint32_t dwNumAutoflip;
        uint32_t dwNumVBIAutoflip;
        size_t dwReserved1;
        size_t dwReserved2;
        size_t dwReserved3;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_MOTIONCOMP_LOCAL
    {
        Windows::Win32::DisplayDevices::DD_DIRECTDRAW_LOCAL* lpDD;
        ::win32::guid guid;
        uint32_t dwUncompWidth;
        uint32_t dwUncompHeight;
        Windows::Win32::DirectDraw::DDPIXELFORMAT ddUncompPixelFormat;
        uint32_t dwDriverReserved1;
        uint32_t dwDriverReserved2;
        uint32_t dwDriverReserved3;
        void* lpDriverReserved1;
        void* lpDriverReserved2;
        void* lpDriverReserved3;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_MORESURFACECAPS
    {
        struct tagNTExtendedHeapRestrictions
        {
            Windows::Win32::DirectDraw::DDSCAPSEX ddsCapsEx;
            Windows::Win32::DirectDraw::DDSCAPSEX ddsCapsExAlt;
        };
        uint32_t dwSize;
        Windows::Win32::DirectDraw::DDSCAPSEX ddsCapsMore;
        tagNTExtendedHeapRestrictions ddsExtendedHeapRestrictions[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_STEREOMODE
    {
        uint32_t dwSize;
        uint32_t dwHeight;
        uint32_t dwWidth;
        uint32_t dwBpp;
        uint32_t dwRefreshRate;
        Windows::Win32::SystemServices::BOOL bSupported;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_UPDATENONLOCALHEAPDATA
    {
        Windows::Win32::DisplayDevices::DD_DIRECTDRAW_GLOBAL* lpDD;
        uint32_t dwHeap;
        size_t fpGARTLin;
        size_t fpGARTDev;
        size_t ulPolicyMaxBytes;
        int32_t ddRVal;
        void* UpdateNonLocalHeap;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_NTPRIVATEDRIVERCAPS
    {
        uint32_t dwSize;
        uint32_t dwPrivateCaps;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectDraw
{
    struct DDBLTFX
    {
        union _Anonymous1_e__Union
        {
            uint32_t dwZDestConst;
            Windows::Win32::DirectDraw::IDirectDrawSurface* lpDDSZBufferDest;
        };
        union _Anonymous2_e__Union
        {
            uint32_t dwZSrcConst;
            Windows::Win32::DirectDraw::IDirectDrawSurface* lpDDSZBufferSrc;
        };
        union _Anonymous3_e__Union
        {
            uint32_t dwAlphaDestConst;
            Windows::Win32::DirectDraw::IDirectDrawSurface* lpDDSAlphaDest;
        };
        union _Anonymous4_e__Union
        {
            uint32_t dwAlphaSrcConst;
            Windows::Win32::DirectDraw::IDirectDrawSurface* lpDDSAlphaSrc;
        };
        union _Anonymous5_e__Union
        {
            uint32_t dwFillColor;
            uint32_t dwFillDepth;
            uint32_t dwFillPixel;
            Windows::Win32::DirectDraw::IDirectDrawSurface* lpDDSPattern;
        };
        uint32_t dwSize;
        uint32_t dwDDFX;
        uint32_t dwROP;
        uint32_t dwDDROP;
        uint32_t dwRotationAngle;
        uint32_t dwZBufferOpCode;
        uint32_t dwZBufferLow;
        uint32_t dwZBufferHigh;
        uint32_t dwZBufferBaseDest;
        uint32_t dwZDestConstBitDepth;
        _Anonymous1_e__Union Anonymous1;
        uint32_t dwZSrcConstBitDepth;
        _Anonymous2_e__Union Anonymous2;
        uint32_t dwAlphaEdgeBlendBitDepth;
        uint32_t dwAlphaEdgeBlend;
        uint32_t dwReserved;
        uint32_t dwAlphaDestConstBitDepth;
        _Anonymous3_e__Union Anonymous3;
        uint32_t dwAlphaSrcConstBitDepth;
        _Anonymous4_e__Union Anonymous4;
        _Anonymous5_e__Union Anonymous5;
        Windows::Win32::DirectShow::DDCOLORKEY ddckDestColorkey;
        Windows::Win32::DirectShow::DDCOLORKEY ddckSrcColorkey;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectDraw
{
    struct DDARGB
    {
        uint8_t blue;
        uint8_t green;
        uint8_t red;
        uint8_t alpha;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_BLTDATA
    {
        Windows::Win32::DisplayDevices::DD_DIRECTDRAW_GLOBAL* lpDD;
        Windows::Win32::DisplayDevices::DD_SURFACE_LOCAL* lpDDDestSurface;
        Windows::Win32::DisplayDevices::RECTL rDest;
        Windows::Win32::DisplayDevices::DD_SURFACE_LOCAL* lpDDSrcSurface;
        Windows::Win32::DisplayDevices::RECTL rSrc;
        uint32_t dwFlags;
        uint32_t dwROPFlags;
        Windows::Win32::DirectDraw::DDBLTFX bltFX;
        int32_t ddRVal;
        void* Blt;
        Windows::Win32::SystemServices::BOOL IsClipped;
        Windows::Win32::DisplayDevices::RECTL rOrigDest;
        Windows::Win32::DisplayDevices::RECTL rOrigSrc;
        uint32_t dwRectCnt;
        Windows::Win32::DisplayDevices::RECT* prDestRects;
        uint32_t dwAFlags;
        Windows::Win32::DirectDraw::DDARGB ddargbScaleFactors;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_LOCKDATA
    {
        Windows::Win32::DisplayDevices::DD_DIRECTDRAW_GLOBAL* lpDD;
        Windows::Win32::DisplayDevices::DD_SURFACE_LOCAL* lpDDSurface;
        uint32_t bHasRect;
        Windows::Win32::DisplayDevices::RECTL rArea;
        void* lpSurfData;
        int32_t ddRVal;
        void* Lock;
        uint32_t dwFlags;
        size_t fpProcess;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_UNLOCKDATA
    {
        Windows::Win32::DisplayDevices::DD_DIRECTDRAW_GLOBAL* lpDD;
        Windows::Win32::DisplayDevices::DD_SURFACE_LOCAL* lpDDSurface;
        int32_t ddRVal;
        void* Unlock;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectDraw
{
    struct DDOVERLAYFX
    {
        union _Anonymous1_e__Union
        {
            uint32_t dwAlphaDestConst;
            Windows::Win32::DirectDraw::IDirectDrawSurface* lpDDSAlphaDest;
        };
        union _Anonymous2_e__Union
        {
            uint32_t dwAlphaSrcConst;
            Windows::Win32::DirectDraw::IDirectDrawSurface* lpDDSAlphaSrc;
        };
        uint32_t dwSize;
        uint32_t dwAlphaEdgeBlendBitDepth;
        uint32_t dwAlphaEdgeBlend;
        uint32_t dwReserved;
        uint32_t dwAlphaDestConstBitDepth;
        _Anonymous1_e__Union Anonymous1;
        uint32_t dwAlphaSrcConstBitDepth;
        _Anonymous2_e__Union Anonymous2;
        Windows::Win32::DirectShow::DDCOLORKEY dckDestColorkey;
        Windows::Win32::DirectShow::DDCOLORKEY dckSrcColorkey;
        uint32_t dwDDFX;
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_UPDATEOVERLAYDATA
    {
        Windows::Win32::DisplayDevices::DD_DIRECTDRAW_GLOBAL* lpDD;
        Windows::Win32::DisplayDevices::DD_SURFACE_LOCAL* lpDDDestSurface;
        Windows::Win32::DisplayDevices::RECTL rDest;
        Windows::Win32::DisplayDevices::DD_SURFACE_LOCAL* lpDDSrcSurface;
        Windows::Win32::DisplayDevices::RECTL rSrc;
        uint32_t dwFlags;
        Windows::Win32::DirectDraw::DDOVERLAYFX overlayFX;
        int32_t ddRVal;
        void* UpdateOverlay;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_SETOVERLAYPOSITIONDATA
    {
        Windows::Win32::DisplayDevices::DD_DIRECTDRAW_GLOBAL* lpDD;
        Windows::Win32::DisplayDevices::DD_SURFACE_LOCAL* lpDDSrcSurface;
        Windows::Win32::DisplayDevices::DD_SURFACE_LOCAL* lpDDDestSurface;
        int32_t lXPos;
        int32_t lYPos;
        int32_t ddRVal;
        void* SetOverlayPosition;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_SETPALETTEDATA
    {
        Windows::Win32::DisplayDevices::DD_DIRECTDRAW_GLOBAL* lpDD;
        Windows::Win32::DisplayDevices::DD_SURFACE_LOCAL* lpDDSurface;
        Windows::Win32::DisplayDevices::DD_PALETTE_GLOBAL* lpDDPalette;
        int32_t ddRVal;
        void* SetPalette;
        Windows::Win32::SystemServices::BOOL Attach;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_FLIPDATA
    {
        Windows::Win32::DisplayDevices::DD_DIRECTDRAW_GLOBAL* lpDD;
        Windows::Win32::DisplayDevices::DD_SURFACE_LOCAL* lpSurfCurr;
        Windows::Win32::DisplayDevices::DD_SURFACE_LOCAL* lpSurfTarg;
        uint32_t dwFlags;
        int32_t ddRVal;
        void* Flip;
        Windows::Win32::DisplayDevices::DD_SURFACE_LOCAL* lpSurfCurrLeft;
        Windows::Win32::DisplayDevices::DD_SURFACE_LOCAL* lpSurfTargLeft;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_DESTROYSURFACEDATA
    {
        Windows::Win32::DisplayDevices::DD_DIRECTDRAW_GLOBAL* lpDD;
        Windows::Win32::DisplayDevices::DD_SURFACE_LOCAL* lpDDSurface;
        int32_t ddRVal;
        void* DestroySurface;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_ADDATTACHEDSURFACEDATA
    {
        Windows::Win32::DisplayDevices::DD_DIRECTDRAW_GLOBAL* lpDD;
        Windows::Win32::DisplayDevices::DD_SURFACE_LOCAL* lpDDSurface;
        Windows::Win32::DisplayDevices::DD_SURFACE_LOCAL* lpSurfAttached;
        int32_t ddRVal;
        void* AddAttachedSurface;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_SETCOLORKEYDATA
    {
        Windows::Win32::DisplayDevices::DD_DIRECTDRAW_GLOBAL* lpDD;
        Windows::Win32::DisplayDevices::DD_SURFACE_LOCAL* lpDDSurface;
        uint32_t dwFlags;
        Windows::Win32::DirectShow::DDCOLORKEY ckNew;
        int32_t ddRVal;
        void* SetColorKey;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_GETBLTSTATUSDATA
    {
        Windows::Win32::DisplayDevices::DD_DIRECTDRAW_GLOBAL* lpDD;
        Windows::Win32::DisplayDevices::DD_SURFACE_LOCAL* lpDDSurface;
        uint32_t dwFlags;
        int32_t ddRVal;
        void* GetBltStatus;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_GETFLIPSTATUSDATA
    {
        Windows::Win32::DisplayDevices::DD_DIRECTDRAW_GLOBAL* lpDD;
        Windows::Win32::DisplayDevices::DD_SURFACE_LOCAL* lpDDSurface;
        uint32_t dwFlags;
        int32_t ddRVal;
        void* GetFlipStatus;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_DESTROYPALETTEDATA
    {
        Windows::Win32::DisplayDevices::DD_DIRECTDRAW_GLOBAL* lpDD;
        Windows::Win32::DisplayDevices::DD_PALETTE_GLOBAL* lpDDPalette;
        int32_t ddRVal;
        void* DestroyPalette;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_SETENTRIESDATA
    {
        Windows::Win32::DisplayDevices::DD_DIRECTDRAW_GLOBAL* lpDD;
        Windows::Win32::DisplayDevices::DD_PALETTE_GLOBAL* lpDDPalette;
        uint32_t dwBase;
        uint32_t dwNumEntries;
        Windows::Win32::Direct2D::PALETTEENTRY* lpEntries;
        int32_t ddRVal;
        void* SetEntries;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_CREATESURFACEDATA
    {
        Windows::Win32::DisplayDevices::DD_DIRECTDRAW_GLOBAL* lpDD;
        Windows::Win32::DirectDraw::DDSURFACEDESC* lpDDSurfaceDesc;
        Windows::Win32::DisplayDevices::DD_SURFACE_LOCAL** lplpSList;
        uint32_t dwSCnt;
        int32_t ddRVal;
        void* CreateSurface;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_CANCREATESURFACEDATA
    {
        Windows::Win32::DisplayDevices::DD_DIRECTDRAW_GLOBAL* lpDD;
        Windows::Win32::DirectDraw::DDSURFACEDESC* lpDDSurfaceDesc;
        uint32_t bIsDifferentPixelFormat;
        int32_t ddRVal;
        void* CanCreateSurface;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_CREATEPALETTEDATA
    {
        Windows::Win32::DisplayDevices::DD_DIRECTDRAW_GLOBAL* lpDD;
        Windows::Win32::DisplayDevices::DD_PALETTE_GLOBAL* lpDDPalette;
        Windows::Win32::Direct2D::PALETTEENTRY* lpColorTable;
        int32_t ddRVal;
        void* CreatePalette;
        Windows::Win32::SystemServices::BOOL is_excl;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_WAITFORVERTICALBLANKDATA
    {
        Windows::Win32::DisplayDevices::DD_DIRECTDRAW_GLOBAL* lpDD;
        uint32_t dwFlags;
        uint32_t bIsInVB;
        size_t hEvent;
        int32_t ddRVal;
        void* WaitForVerticalBlank;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_GETSCANLINEDATA
    {
        Windows::Win32::DisplayDevices::DD_DIRECTDRAW_GLOBAL* lpDD;
        uint32_t dwScanLine;
        int32_t ddRVal;
        void* GetScanLine;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_MAPMEMORYDATA
    {
        Windows::Win32::DisplayDevices::DD_DIRECTDRAW_GLOBAL* lpDD;
        Windows::Win32::SystemServices::BOOL bMap;
        Windows::Win32::SystemServices::HANDLE hProcess;
        size_t fpProcess;
        int32_t ddRVal;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_CANCREATEVPORTDATA
    {
        Windows::Win32::DisplayDevices::DD_DIRECTDRAW_LOCAL* lpDD;
        Windows::Win32::DisplayDevices::DDVIDEOPORTDESC* lpDDVideoPortDesc;
        int32_t ddRVal;
        void* CanCreateVideoPort;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_CREATEVPORTDATA
    {
        Windows::Win32::DisplayDevices::DD_DIRECTDRAW_LOCAL* lpDD;
        Windows::Win32::DisplayDevices::DDVIDEOPORTDESC* lpDDVideoPortDesc;
        Windows::Win32::DisplayDevices::DD_VIDEOPORT_LOCAL* lpVideoPort;
        int32_t ddRVal;
        void* CreateVideoPort;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_FLIPVPORTDATA
    {
        Windows::Win32::DisplayDevices::DD_DIRECTDRAW_LOCAL* lpDD;
        Windows::Win32::DisplayDevices::DD_VIDEOPORT_LOCAL* lpVideoPort;
        Windows::Win32::DisplayDevices::DD_SURFACE_LOCAL* lpSurfCurr;
        Windows::Win32::DisplayDevices::DD_SURFACE_LOCAL* lpSurfTarg;
        int32_t ddRVal;
        void* FlipVideoPort;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_GETVPORTBANDWIDTHDATA
    {
        Windows::Win32::DisplayDevices::DD_DIRECTDRAW_LOCAL* lpDD;
        Windows::Win32::DisplayDevices::DD_VIDEOPORT_LOCAL* lpVideoPort;
        Windows::Win32::DirectDraw::DDPIXELFORMAT* lpddpfFormat;
        uint32_t dwWidth;
        uint32_t dwHeight;
        uint32_t dwFlags;
        Windows::Win32::DisplayDevices::DDVIDEOPORTBANDWIDTH* lpBandwidth;
        int32_t ddRVal;
        void* GetVideoPortBandwidth;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_GETVPORTINPUTFORMATDATA
    {
        Windows::Win32::DisplayDevices::DD_DIRECTDRAW_LOCAL* lpDD;
        Windows::Win32::DisplayDevices::DD_VIDEOPORT_LOCAL* lpVideoPort;
        uint32_t dwFlags;
        Windows::Win32::DirectDraw::DDPIXELFORMAT* lpddpfFormat;
        uint32_t dwNumFormats;
        int32_t ddRVal;
        void* GetVideoPortInputFormats;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_GETVPORTOUTPUTFORMATDATA
    {
        Windows::Win32::DisplayDevices::DD_DIRECTDRAW_LOCAL* lpDD;
        Windows::Win32::DisplayDevices::DD_VIDEOPORT_LOCAL* lpVideoPort;
        uint32_t dwFlags;
        Windows::Win32::DirectDraw::DDPIXELFORMAT* lpddpfInputFormat;
        Windows::Win32::DirectDraw::DDPIXELFORMAT* lpddpfOutputFormats;
        uint32_t dwNumFormats;
        int32_t ddRVal;
        void* GetVideoPortInputFormats;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_GETVPORTFIELDDATA
    {
        Windows::Win32::DisplayDevices::DD_DIRECTDRAW_LOCAL* lpDD;
        Windows::Win32::DisplayDevices::DD_VIDEOPORT_LOCAL* lpVideoPort;
        Windows::Win32::SystemServices::BOOL bField;
        int32_t ddRVal;
        void* GetVideoPortField;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_GETVPORTLINEDATA
    {
        Windows::Win32::DisplayDevices::DD_DIRECTDRAW_LOCAL* lpDD;
        Windows::Win32::DisplayDevices::DD_VIDEOPORT_LOCAL* lpVideoPort;
        uint32_t dwLine;
        int32_t ddRVal;
        void* GetVideoPortLine;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_GETVPORTCONNECTDATA
    {
        Windows::Win32::DisplayDevices::DD_DIRECTDRAW_LOCAL* lpDD;
        uint32_t dwPortId;
        Windows::Win32::CoreAudio::DDVIDEOPORTCONNECT* lpConnect;
        uint32_t dwNumEntries;
        int32_t ddRVal;
        void* GetVideoPortConnectInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_DESTROYVPORTDATA
    {
        Windows::Win32::DisplayDevices::DD_DIRECTDRAW_LOCAL* lpDD;
        Windows::Win32::DisplayDevices::DD_VIDEOPORT_LOCAL* lpVideoPort;
        int32_t ddRVal;
        void* DestroyVideoPort;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_GETVPORTFLIPSTATUSDATA
    {
        Windows::Win32::DisplayDevices::DD_DIRECTDRAW_LOCAL* lpDD;
        size_t fpSurface;
        int32_t ddRVal;
        void* GetVideoPortFlipStatus;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_UPDATEVPORTDATA
    {
        Windows::Win32::DisplayDevices::DD_DIRECTDRAW_LOCAL* lpDD;
        Windows::Win32::DisplayDevices::DD_VIDEOPORT_LOCAL* lpVideoPort;
        Windows::Win32::DisplayDevices::DD_SURFACE_INT** lplpDDSurface;
        Windows::Win32::DisplayDevices::DD_SURFACE_INT** lplpDDVBISurface;
        Windows::Win32::DisplayDevices::DDVIDEOPORTINFO* lpVideoInfo;
        uint32_t dwFlags;
        uint32_t dwNumAutoflip;
        uint32_t dwNumVBIAutoflip;
        int32_t ddRVal;
        void* UpdateVideoPort;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_WAITFORVPORTSYNCDATA
    {
        Windows::Win32::DisplayDevices::DD_DIRECTDRAW_LOCAL* lpDD;
        Windows::Win32::DisplayDevices::DD_VIDEOPORT_LOCAL* lpVideoPort;
        uint32_t dwFlags;
        uint32_t dwLine;
        uint32_t dwTimeOut;
        int32_t ddRVal;
        void* UpdateVideoPort;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_GETVPORTSIGNALDATA
    {
        Windows::Win32::DisplayDevices::DD_DIRECTDRAW_LOCAL* lpDD;
        Windows::Win32::DisplayDevices::DD_VIDEOPORT_LOCAL* lpVideoPort;
        uint32_t dwStatus;
        int32_t ddRVal;
        void* GetVideoSignalStatus;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_VPORTCOLORDATA
    {
        Windows::Win32::DisplayDevices::DD_DIRECTDRAW_LOCAL* lpDD;
        Windows::Win32::DisplayDevices::DD_VIDEOPORT_LOCAL* lpVideoPort;
        uint32_t dwFlags;
        Windows::Win32::DirectDraw::DDCOLORCONTROL* lpColorData;
        int32_t ddRVal;
        void* ColorControl;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_COLORCONTROLDATA
    {
        Windows::Win32::DisplayDevices::DD_DIRECTDRAW_GLOBAL* lpDD;
        Windows::Win32::DisplayDevices::DD_SURFACE_LOCAL* lpDDSurface;
        Windows::Win32::DirectDraw::DDCOLORCONTROL* lpColorData;
        uint32_t dwFlags;
        int32_t ddRVal;
        void* ColorControl;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_GETDRIVERINFODATA
    {
        void* dhpdev;
        uint32_t dwSize;
        uint32_t dwFlags;
        ::win32::guid guidInfo;
        uint32_t dwExpectedSize;
        void* lpvData;
        uint32_t dwActualSize;
        int32_t ddRVal;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_GETAVAILDRIVERMEMORYDATA
    {
        Windows::Win32::DisplayDevices::DD_DIRECTDRAW_GLOBAL* lpDD;
        Windows::Win32::DirectDraw::DDSCAPS DDSCaps;
        uint32_t dwTotal;
        uint32_t dwFree;
        int32_t ddRVal;
        void* GetAvailDriverMemory;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_FREEDRIVERMEMORYDATA
    {
        Windows::Win32::DisplayDevices::DD_DIRECTDRAW_GLOBAL* lpDD;
        Windows::Win32::DisplayDevices::DD_SURFACE_LOCAL* lpDDSurface;
        int32_t ddRVal;
        void* FreeDriverMemory;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_SETEXCLUSIVEMODEDATA
    {
        Windows::Win32::DisplayDevices::DD_DIRECTDRAW_GLOBAL* lpDD;
        uint32_t dwEnterExcl;
        uint32_t dwReserved;
        int32_t ddRVal;
        void* SetExclusiveMode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_FLIPTOGDISURFACEDATA
    {
        Windows::Win32::DisplayDevices::DD_DIRECTDRAW_GLOBAL* lpDD;
        uint32_t dwToGDI;
        uint32_t dwReserved;
        int32_t ddRVal;
        void* FlipToGDISurface;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_SYNCSURFACEDATA
    {
        Windows::Win32::DisplayDevices::DD_DIRECTDRAW_LOCAL* lpDD;
        Windows::Win32::DisplayDevices::DD_SURFACE_LOCAL* lpDDSurface;
        uint32_t dwSurfaceOffset;
        size_t fpLockPtr;
        int32_t lPitch;
        uint32_t dwOverlayOffset;
        uint32_t dwDriverReserved1;
        uint32_t dwDriverReserved2;
        uint32_t dwDriverReserved3;
        uint32_t dwDriverReserved4;
        int32_t ddRVal;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_SYNCVIDEOPORTDATA
    {
        Windows::Win32::DisplayDevices::DD_DIRECTDRAW_LOCAL* lpDD;
        Windows::Win32::DisplayDevices::DD_VIDEOPORT_LOCAL* lpVideoPort;
        uint32_t dwOriginOffset;
        uint32_t dwHeight;
        uint32_t dwVBIHeight;
        uint32_t dwDriverReserved1;
        uint32_t dwDriverReserved2;
        uint32_t dwDriverReserved3;
        int32_t ddRVal;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_GETMOCOMPGUIDSDATA
    {
        Windows::Win32::DisplayDevices::DD_DIRECTDRAW_LOCAL* lpDD;
        uint32_t dwNumGuids;
        ::win32::guid* lpGuids;
        int32_t ddRVal;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_GETMOCOMPFORMATSDATA
    {
        Windows::Win32::DisplayDevices::DD_DIRECTDRAW_LOCAL* lpDD;
        ::win32::guid* lpGuid;
        uint32_t dwNumFormats;
        Windows::Win32::DirectDraw::DDPIXELFORMAT* lpFormats;
        int32_t ddRVal;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_CREATEMOCOMPDATA
    {
        Windows::Win32::DisplayDevices::DD_DIRECTDRAW_LOCAL* lpDD;
        Windows::Win32::DisplayDevices::DD_MOTIONCOMP_LOCAL* lpMoComp;
        ::win32::guid* lpGuid;
        uint32_t dwUncompWidth;
        uint32_t dwUncompHeight;
        Windows::Win32::DirectDraw::DDPIXELFORMAT ddUncompPixelFormat;
        void* lpData;
        uint32_t dwDataSize;
        int32_t ddRVal;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DDCOMPBUFFERINFO
    {
        uint32_t dwSize;
        uint32_t dwNumCompBuffers;
        uint32_t dwWidthToCreate;
        uint32_t dwHeightToCreate;
        uint32_t dwBytesToAllocate;
        Windows::Win32::DirectDraw::DDSCAPS2 ddCompCaps;
        Windows::Win32::DirectDraw::DDPIXELFORMAT ddPixelFormat;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_GETMOCOMPCOMPBUFFDATA
    {
        Windows::Win32::DisplayDevices::DD_DIRECTDRAW_LOCAL* lpDD;
        ::win32::guid* lpGuid;
        uint32_t dwWidth;
        uint32_t dwHeight;
        Windows::Win32::DirectDraw::DDPIXELFORMAT ddPixelFormat;
        uint32_t dwNumTypesCompBuffs;
        Windows::Win32::DisplayDevices::DDCOMPBUFFERINFO* lpCompBuffInfo;
        int32_t ddRVal;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_GETINTERNALMOCOMPDATA
    {
        Windows::Win32::DisplayDevices::DD_DIRECTDRAW_LOCAL* lpDD;
        ::win32::guid* lpGuid;
        uint32_t dwWidth;
        uint32_t dwHeight;
        Windows::Win32::DirectDraw::DDPIXELFORMAT ddPixelFormat;
        uint32_t dwScratchMemAlloc;
        int32_t ddRVal;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_BEGINMOCOMPFRAMEDATA
    {
        Windows::Win32::DisplayDevices::DD_DIRECTDRAW_LOCAL* lpDD;
        Windows::Win32::DisplayDevices::DD_MOTIONCOMP_LOCAL* lpMoComp;
        Windows::Win32::DisplayDevices::DD_SURFACE_LOCAL* lpDestSurface;
        uint32_t dwInputDataSize;
        void* lpInputData;
        uint32_t dwOutputDataSize;
        void* lpOutputData;
        int32_t ddRVal;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_ENDMOCOMPFRAMEDATA
    {
        Windows::Win32::DisplayDevices::DD_DIRECTDRAW_LOCAL* lpDD;
        Windows::Win32::DisplayDevices::DD_MOTIONCOMP_LOCAL* lpMoComp;
        void* lpInputData;
        uint32_t dwInputDataSize;
        int32_t ddRVal;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DDMOCOMPBUFFERINFO
    {
        uint32_t dwSize;
        Windows::Win32::DisplayDevices::DD_SURFACE_LOCAL* lpCompSurface;
        uint32_t dwDataOffset;
        uint32_t dwDataSize;
        void* lpPrivate;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_RENDERMOCOMPDATA
    {
        Windows::Win32::DisplayDevices::DD_DIRECTDRAW_LOCAL* lpDD;
        Windows::Win32::DisplayDevices::DD_MOTIONCOMP_LOCAL* lpMoComp;
        uint32_t dwNumBuffers;
        Windows::Win32::DisplayDevices::DDMOCOMPBUFFERINFO* lpBufferInfo;
        uint32_t dwFunction;
        void* lpInputData;
        uint32_t dwInputDataSize;
        void* lpOutputData;
        uint32_t dwOutputDataSize;
        int32_t ddRVal;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_QUERYMOCOMPSTATUSDATA
    {
        Windows::Win32::DisplayDevices::DD_DIRECTDRAW_LOCAL* lpDD;
        Windows::Win32::DisplayDevices::DD_MOTIONCOMP_LOCAL* lpMoComp;
        Windows::Win32::DisplayDevices::DD_SURFACE_LOCAL* lpSurface;
        uint32_t dwFlags;
        int32_t ddRVal;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_DESTROYMOCOMPDATA
    {
        Windows::Win32::DisplayDevices::DD_DIRECTDRAW_LOCAL* lpDD;
        Windows::Win32::DisplayDevices::DD_MOTIONCOMP_LOCAL* lpMoComp;
        int32_t ddRVal;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_CREATESURFACEEXDATA
    {
        uint32_t dwFlags;
        Windows::Win32::DisplayDevices::DD_DIRECTDRAW_LOCAL* lpDDLcl;
        Windows::Win32::DisplayDevices::DD_SURFACE_LOCAL* lpDDSLcl;
        int32_t ddRVal;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DD_GETDRIVERSTATEDATA
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::DisplayDevices::DD_DIRECTDRAW_GLOBAL* lpDD;
            size_t dwhContext;
        };
        uint32_t dwFlags;
        _Anonymous_e__Union Anonymous;
        uint32_t* lpdwStates;
        uint32_t dwLength;
        int32_t ddRVal;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct FD_XFORM
    {
        uint32_t eXX;
        uint32_t eXY;
        uint32_t eYX;
        uint32_t eYY;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct FD_DEVICEMETRICS
    {
        uint32_t flRealizedType;
        Windows::Win32::SystemServices::POINTE pteBase;
        Windows::Win32::SystemServices::POINTE pteSide;
        int32_t lD;
        int32_t fxMaxAscender;
        int32_t fxMaxDescender;
        Windows::Win32::DisplayDevices::POINTL ptlUnderline1;
        Windows::Win32::DisplayDevices::POINTL ptlStrikeOut;
        Windows::Win32::DisplayDevices::POINTL ptlULThickness;
        Windows::Win32::DisplayDevices::POINTL ptlSOThickness;
        uint32_t cxMax;
        uint32_t cyMax;
        uint32_t cjGlyphMax;
        Windows::Win32::DisplayDevices::FD_XFORM fdxQuantized;
        int32_t lNonLinearExtLeading;
        int32_t lNonLinearIntLeading;
        int32_t lNonLinearMaxCharWidth;
        int32_t lNonLinearAvgCharWidth;
        int32_t lMinA;
        int32_t lMinC;
        int32_t lMinD;
        int32_t alReserved[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct WCRUN
    {
        uint16_t wcLow;
        uint16_t cGlyphs;
        uint32_t* phg;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct FD_GLYPHSET
    {
        uint32_t cjThis;
        uint32_t flAccel;
        uint32_t cGlyphsSupported;
        uint32_t cRuns;
        Windows::Win32::DisplayDevices::WCRUN awcrun[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct FD_GLYPHATTR
    {
        uint32_t cjThis;
        uint32_t cGlyphs;
        uint32_t iMode;
        uint8_t aGlyphAttr[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct FD_KERNINGPAIR
    {
        uint16_t wcFirst;
        uint16_t wcSecond;
        int16_t fwdKern;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct FONTDIFF
    {
        uint8_t jReserved1;
        uint8_t jReserved2;
        uint8_t jReserved3;
        uint8_t bWeight;
        uint16_t usWinWeight;
        uint16_t fsSelection;
        int16_t fwdAveCharWidth;
        int16_t fwdMaxCharInc;
        Windows::Win32::DisplayDevices::POINTL ptlCaret;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct FONTSIM
    {
        int32_t dpBold;
        int32_t dpItalic;
        int32_t dpBoldItalic;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct IFIMETRICS
    {
        uint32_t cjThis;
        uint32_t cjIfiExtra;
        int32_t dpwszFamilyName;
        int32_t dpwszStyleName;
        int32_t dpwszFaceName;
        int32_t dpwszUniqueName;
        int32_t dpFontSim;
        int32_t lEmbedId;
        int32_t lItalicAngle;
        int32_t lCharBias;
        int32_t dpCharSets;
        uint8_t jWinCharSet;
        uint8_t jWinPitchAndFamily;
        uint16_t usWinWeight;
        uint32_t flInfo;
        uint16_t fsSelection;
        uint16_t fsType;
        int16_t fwdUnitsPerEm;
        int16_t fwdLowestPPEm;
        int16_t fwdWinAscender;
        int16_t fwdWinDescender;
        int16_t fwdMacAscender;
        int16_t fwdMacDescender;
        int16_t fwdMacLineGap;
        int16_t fwdTypoAscender;
        int16_t fwdTypoDescender;
        int16_t fwdTypoLineGap;
        int16_t fwdAveCharWidth;
        int16_t fwdMaxCharInc;
        int16_t fwdCapHeight;
        int16_t fwdXHeight;
        int16_t fwdSubscriptXSize;
        int16_t fwdSubscriptYSize;
        int16_t fwdSubscriptXOffset;
        int16_t fwdSubscriptYOffset;
        int16_t fwdSuperscriptXSize;
        int16_t fwdSuperscriptYSize;
        int16_t fwdSuperscriptXOffset;
        int16_t fwdSuperscriptYOffset;
        int16_t fwdUnderscoreSize;
        int16_t fwdUnderscorePosition;
        int16_t fwdStrikeoutSize;
        int16_t fwdStrikeoutPosition;
        uint8_t chFirstChar;
        uint8_t chLastChar;
        uint8_t chDefaultChar;
        uint8_t chBreakChar;
        uint16_t wcFirstChar;
        uint16_t wcLastChar;
        uint16_t wcDefaultChar;
        uint16_t wcBreakChar;
        Windows::Win32::DisplayDevices::POINTL ptlBaseline;
        Windows::Win32::DisplayDevices::POINTL ptlAspect;
        Windows::Win32::DisplayDevices::POINTL ptlCaret;
        Windows::Win32::DisplayDevices::RECTL rclFontBox;
        uint8_t achVendId[4];
        uint32_t cKerningPairs;
        uint32_t ulPanoseCulture;
        Windows::Win32::Gdi::PANOSE panose;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct IFIEXTRA
    {
        uint32_t ulIdentifier;
        int32_t dpFontSig;
        uint32_t cig;
        int32_t dpDesignVector;
        int32_t dpAxesInfoW;
        uint32_t aulReserved[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DRVFN
    {
        uint32_t iFunc;
        Windows::Win32::SystemServices::PFN* pfn;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DRVENABLEDATA
    {
        uint32_t iDriverVersion;
        uint32_t c;
        Windows::Win32::DisplayDevices::DRVFN* pdrvfn;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DEVINFO
    {
        uint32_t flGraphicsCaps;
        Windows::Win32::Shell::LOGFONTW lfDefaultFont;
        Windows::Win32::Shell::LOGFONTW lfAnsiVarFont;
        Windows::Win32::Shell::LOGFONTW lfAnsiFixFont;
        uint32_t cFonts;
        uint32_t iDitherFormat;
        uint16_t cxDither;
        uint16_t cyDither;
        Windows::Win32::Gdi::HPALETTE hpalDefault;
        uint32_t flGraphicsCaps2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct LINEATTRS
    {
        uint32_t fl;
        uint32_t iJoin;
        uint32_t iEndCap;
        Windows::Win32::SystemServices::FLOAT_LONG elWidth;
        uint32_t eMiterLimit;
        uint32_t cstyle;
        Windows::Win32::SystemServices::FLOAT_LONG* pstyle;
        Windows::Win32::SystemServices::FLOAT_LONG elStyleState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct XFORML
    {
        uint32_t eM11;
        uint32_t eM12;
        uint32_t eM21;
        uint32_t eM22;
        uint32_t eDx;
        uint32_t eDy;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct CIECHROMA
    {
        int32_t x;
        int32_t y;
        int32_t Y;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct COLORINFO
    {
        Windows::Win32::DisplayDevices::CIECHROMA Red;
        Windows::Win32::DisplayDevices::CIECHROMA Green;
        Windows::Win32::DisplayDevices::CIECHROMA Blue;
        Windows::Win32::DisplayDevices::CIECHROMA Cyan;
        Windows::Win32::DisplayDevices::CIECHROMA Magenta;
        Windows::Win32::DisplayDevices::CIECHROMA Yellow;
        Windows::Win32::DisplayDevices::CIECHROMA AlignmentWhite;
        int32_t RedGamma;
        int32_t GreenGamma;
        int32_t BlueGamma;
        int32_t MagentaInCyanDye;
        int32_t YellowInCyanDye;
        int32_t CyanInMagentaDye;
        int32_t YellowInMagentaDye;
        int32_t CyanInYellowDye;
        int32_t MagentaInYellowDye;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct GDIINFO
    {
        uint32_t ulVersion;
        uint32_t ulTechnology;
        uint32_t ulHorzSize;
        uint32_t ulVertSize;
        uint32_t ulHorzRes;
        uint32_t ulVertRes;
        uint32_t cBitsPixel;
        uint32_t cPlanes;
        uint32_t ulNumColors;
        uint32_t flRaster;
        uint32_t ulLogPixelsX;
        uint32_t ulLogPixelsY;
        uint32_t flTextCaps;
        uint32_t ulDACRed;
        uint32_t ulDACGreen;
        uint32_t ulDACBlue;
        uint32_t ulAspectX;
        uint32_t ulAspectY;
        uint32_t ulAspectXY;
        int32_t xStyleStep;
        int32_t yStyleStep;
        int32_t denStyleStep;
        Windows::Win32::DisplayDevices::POINTL ptlPhysOffset;
        Windows::Win32::DisplayDevices::SIZE szlPhysSize;
        uint32_t ulNumPalReg;
        Windows::Win32::DisplayDevices::COLORINFO ciDevice;
        uint32_t ulDevicePelsDPI;
        uint32_t ulPrimaryOrder;
        uint32_t ulHTPatternSize;
        uint32_t ulHTOutputFormat;
        uint32_t flHTFlags;
        uint32_t ulVRefresh;
        uint32_t ulBltAlignment;
        uint32_t ulPanningHorzRes;
        uint32_t ulPanningVertRes;
        uint32_t xPanningAlignment;
        uint32_t yPanningAlignment;
        uint32_t cxHTPat;
        uint32_t cyHTPat;
        uint8_t* pHTPatA;
        uint8_t* pHTPatB;
        uint8_t* pHTPatC;
        uint32_t flShadeBlend;
        uint32_t ulPhysicalPixelCharacteristics;
        uint32_t ulPhysicalPixelGamma;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct BRUSHOBJ
    {
        uint32_t iSolidColor;
        void* pvRbrush;
        uint32_t flColorType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct CLIPOBJ
    {
        uint32_t iUniq;
        Windows::Win32::DisplayDevices::RECTL rclBounds;
        uint8_t iDComplexity;
        uint8_t iFComplexity;
        uint8_t iMode;
        uint8_t fjOptions;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DRIVEROBJ
    {
        void* pvObj;
        Windows::Win32::SystemServices::FREEOBJPROC* pFreeProc;
        Windows::Win32::SystemServices::HDEV__* hdev;
        Windows::Win32::SystemServices::DHPDEV__* dhpdev;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct FONTOBJ
    {
        uint32_t iUniq;
        uint32_t iFace;
        uint32_t cxMax;
        uint32_t flFontType;
        size_t iTTUniq;
        size_t iFile;
        Windows::Win32::DisplayDevices::SIZE sizLogResPpi;
        uint32_t ulStyleSize;
        void* pvConsumer;
        void* pvProducer;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct BLENDOBJ
    {
        Windows::Win32::Gdi::BLENDFUNCTION BlendFunction;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct PALOBJ
    {
        uint32_t ulReserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct PATHOBJ
    {
        uint32_t fl;
        uint32_t cCurves;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct SURFOBJ
    {
        Windows::Win32::SystemServices::DHSURF__* dhsurf;
        Windows::Win32::SystemServices::HSURF__* hsurf;
        Windows::Win32::SystemServices::DHPDEV__* dhpdev;
        Windows::Win32::SystemServices::HDEV__* hdev;
        Windows::Win32::DisplayDevices::SIZE sizlBitmap;
        uint32_t cjBits;
        void* pvBits;
        void* pvScan0;
        int32_t lDelta;
        uint32_t iUniq;
        uint32_t iBitmapFormat;
        uint16_t iType;
        uint16_t fjBitmap;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct WNDOBJ
    {
        Windows::Win32::DisplayDevices::CLIPOBJ coClient;
        void* pvConsumer;
        Windows::Win32::DisplayDevices::RECTL rclClient;
        Windows::Win32::DisplayDevices::SURFOBJ* psoOwner;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct XLATEOBJ
    {
        uint32_t iUniq;
        uint32_t flXlate;
        uint16_t iSrcType;
        uint16_t iDstType;
        uint32_t cEntries;
        uint32_t* pulXlate;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct ENUMRECTS
    {
        uint32_t c;
        Windows::Win32::DisplayDevices::RECTL arcl[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct GLYPHBITS
    {
        Windows::Win32::DisplayDevices::POINTL ptlOrigin;
        Windows::Win32::DisplayDevices::SIZE sizlBitmap;
        uint8_t aj[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    union GLYPHDEF
    {
        Windows::Win32::DisplayDevices::GLYPHBITS* pgb;
        Windows::Win32::DisplayDevices::PATHOBJ* ppo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct GLYPHPOS
    {
        uint32_t hg;
        Windows::Win32::DisplayDevices::GLYPHDEF* pgdf;
        Windows::Win32::DisplayDevices::POINTL ptl;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct GLYPHDATA
    {
        Windows::Win32::DisplayDevices::GLYPHDEF gdf;
        uint32_t hg;
        int32_t fxD;
        int32_t fxA;
        int32_t fxAB;
        int32_t fxInkTop;
        int32_t fxInkBottom;
        Windows::Win32::DisplayDevices::RECTL rclInk;
        Windows::Win32::SystemServices::POINTQF ptqD;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct STROBJ
    {
        uint32_t cGlyphs;
        uint32_t flAccel;
        uint32_t ulCharInc;
        Windows::Win32::DisplayDevices::RECTL rclBkGround;
        Windows::Win32::DisplayDevices::GLYPHPOS* pgp;
        uint16_t* pwszOrg;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct FONTINFO
    {
        uint32_t cjThis;
        uint32_t flCaps;
        uint32_t cGlyphsSupported;
        uint32_t cjMaxGlyph1;
        uint32_t cjMaxGlyph4;
        uint32_t cjMaxGlyph8;
        uint32_t cjMaxGlyph32;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct PATHDATA
    {
        uint32_t flags;
        uint32_t count;
        Windows::Win32::SystemServices::POINTFIX* pptfx;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct RUN
    {
        int32_t iStart;
        int32_t iStop;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct CLIPLINE
    {
        Windows::Win32::SystemServices::POINTFIX ptfxA;
        Windows::Win32::SystemServices::POINTFIX ptfxB;
        int32_t lStyleState;
        uint32_t c;
        Windows::Win32::DisplayDevices::RUN arun[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct PERBANDINFO
    {
        Windows::Win32::SystemServices::BOOL bRepeatThisBand;
        Windows::Win32::DisplayDevices::SIZE szlBand;
        uint32_t ulHorzRes;
        uint32_t ulVertRes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct GAMMARAMP
    {
        uint16_t Red[256];
        uint16_t Green[256];
        uint16_t Blue[256];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DEVHTINFO
    {
        uint32_t HTFlags;
        uint32_t HTPatternSize;
        uint32_t DevPelsDPI;
        Windows::Win32::DisplayDevices::COLORINFO ColorInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DEVHTADJDATA
    {
        uint32_t DeviceFlags;
        uint32_t DeviceXDPI;
        uint32_t DeviceYDPI;
        Windows::Win32::DisplayDevices::DEVHTINFO* pDefHTInfo;
        Windows::Win32::DisplayDevices::DEVHTINFO* pAdjHTInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct TYPE1_FONT
    {
        Windows::Win32::SystemServices::HANDLE hPFM;
        Windows::Win32::SystemServices::HANDLE hPFB;
        uint32_t ulIdentifier;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct ENGSAFESEMAPHORE
    {
        Windows::Win32::SystemServices::HSEMAPHORE__* hsem;
        int32_t lCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct FLOATOBJ
    {
        uint32_t ul1;
        uint32_t ul2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct FLOATOBJ_XFORM
    {
        Windows::Win32::DisplayDevices::FLOATOBJ eM11;
        Windows::Win32::DisplayDevices::FLOATOBJ eM12;
        Windows::Win32::DisplayDevices::FLOATOBJ eM21;
        Windows::Win32::DisplayDevices::FLOATOBJ eM22;
        Windows::Win32::DisplayDevices::FLOATOBJ eDx;
        Windows::Win32::DisplayDevices::FLOATOBJ eDy;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct ENG_TIME_FIELDS
    {
        uint16_t usYear;
        uint16_t usMonth;
        uint16_t usDay;
        uint16_t usHour;
        uint16_t usMinute;
        uint16_t usSecond;
        uint16_t usMilliseconds;
        uint16_t usWeekday;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Ldap
{
    struct ldap
    {
        struct _ld_sb_e__Struct
        {
            size_t sb_sd;
            uint8_t Reserved1[41];
            size_t sb_naddr;
            uint8_t Reserved2[24];
        };
        _ld_sb_e__Struct ld_sb;
        int8_t* ld_host;
        uint32_t ld_version;
        uint8_t ld_lberoptions;
        uint32_t ld_deref;
        uint32_t ld_timelimit;
        uint32_t ld_sizelimit;
        uint32_t ld_errno;
        int8_t* ld_matched;
        int8_t* ld_error;
        uint32_t ld_msgid;
        uint8_t Reserved3[25];
        uint32_t ld_cldaptries;
        uint32_t ld_cldaptimeout;
        uint32_t ld_refhoplimit;
        uint32_t ld_options;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Ldap
{
    struct LDAP_TIMEVAL
    {
        int32_t tv_sec;
        int32_t tv_usec;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Ldap
{
    struct LDAP_BERVAL
    {
        uint32_t bv_len;
        int8_t* bv_val;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Ldap
{
    struct LDAPMessage
    {
        uint32_t lm_msgid;
        uint32_t lm_msgtype;
        void* lm_ber;
        Windows::Win32::Ldap::LDAPMessage* lm_chain;
        Windows::Win32::Ldap::LDAPMessage* lm_next;
        uint32_t lm_time;
        Windows::Win32::Ldap::ldap* Connection;
        void* Request;
        uint32_t lm_returncode;
        uint16_t lm_referral;
        uint8_t lm_chased;
        uint8_t lm_eom;
        uint8_t ConnectionReferenced;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Ldap
{
    struct ldapcontrolA
    {
        int8_t* ldctl_oid;
        Windows::Win32::Ldap::LDAP_BERVAL ldctl_value;
        uint8_t ldctl_iscritical;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Ldap
{
    struct ldapcontrolW
    {
        uint16_t* ldctl_oid;
        Windows::Win32::Ldap::LDAP_BERVAL ldctl_value;
        uint8_t ldctl_iscritical;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Ldap
{
    struct ldapmodW
    {
        union _mod_vals_e__Union
        {
            uint16_t** modv_strvals;
            Windows::Win32::Ldap::LDAP_BERVAL** modv_bvals;
        };
        uint32_t mod_op;
        uint16_t* mod_type;
        _mod_vals_e__Union mod_vals;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Ldap
{
    struct ldapmodA
    {
        union _mod_vals_e__Union
        {
            int8_t** modv_strvals;
            Windows::Win32::Ldap::LDAP_BERVAL** modv_bvals;
        };
        uint32_t mod_op;
        int8_t* mod_type;
        _mod_vals_e__Union mod_vals;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Ldap
{
    struct berelement
    {
        int8_t* opaque;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Ldap
{
    struct ldap_version_info
    {
        uint32_t lv_size;
        uint32_t lv_major;
        uint32_t lv_minor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Ldap
{
    struct ldapapiinfoA
    {
        int32_t ldapai_info_version;
        int32_t ldapai_api_version;
        int32_t ldapai_protocol_version;
        int8_t** ldapai_extensions;
        int8_t* ldapai_vendor_name;
        int32_t ldapai_vendor_version;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Ldap
{
    struct ldapapiinfoW
    {
        int32_t ldapai_info_version;
        int32_t ldapai_api_version;
        int32_t ldapai_protocol_version;
        uint16_t** ldapai_extensions;
        uint16_t* ldapai_vendor_name;
        int32_t ldapai_vendor_version;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Ldap
{
    struct LDAPAPIFeatureInfoA
    {
        int32_t ldapaif_info_version;
        int8_t* ldapaif_name;
        int32_t ldapaif_version;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Ldap
{
    struct LDAPAPIFeatureInfoW
    {
        int32_t ldapaif_info_version;
        uint16_t* ldapaif_name;
        int32_t ldapaif_version;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Ldap
{
    struct ldapsearch
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Ldap
{
    struct ldapsortkeyW
    {
        uint16_t* sk_attrtype;
        uint16_t* sk_matchruleoid;
        uint8_t sk_reverseorder;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Ldap
{
    struct ldapsortkeyA
    {
        int8_t* sk_attrtype;
        int8_t* sk_matchruleoid;
        uint8_t sk_reverseorder;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Ldap
{
    struct ldapvlvinfo
    {
        int32_t ldvlv_version;
        uint32_t ldvlv_before_count;
        uint32_t ldvlv_after_count;
        uint32_t ldvlv_offset;
        uint32_t ldvlv_count;
        Windows::Win32::Ldap::LDAP_BERVAL* ldvlv_attrvalue;
        Windows::Win32::Ldap::LDAP_BERVAL* ldvlv_context;
        void* ldvlv_extradata;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Ldap
{
    struct LDAP_REFERRAL_CALLBACK
    {
        uint32_t SizeOfCallbacks;
        Windows::Win32::Ldap::QUERYFORCONNECTION** QueryForConnection;
        Windows::Win32::Ldap::NOTIFYOFNEWCONNECTION** NotifyRoutine;
        Windows::Win32::Ldap::DEREFERENCECONNECTION** DereferenceRoutine;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MachineLearning
{
    struct WINML_TENSOR_BINDING_DESC
    {
        Windows::Win32::MachineLearning::WINML_TENSOR_DATA_TYPE DataType;
        uint32_t NumDimensions;
        int64_t* pShape;
        uint32_t DataSize;
        void* pData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MachineLearning
{
    struct WINML_SEQUENCE_BINDING_DESC
    {
        union _Anonymous_e__Union
        {
            uint16_t** pStrings;
            int64_t* pInts;
            float* pFloats;
            double* pDoubles;
        };
        uint32_t ElementCount;
        Windows::Win32::MachineLearning::WINML_TENSOR_DATA_TYPE ElementType;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MachineLearning
{
    struct WINML_MAP_BINDING_DESC
    {
        union _Anonymous1_e__Union
        {
            uint16_t** pStringKeys;
            int64_t* pIntKeys;
        };
        union _Anonymous2_e__Union
        {
            uint16_t** pStringFields;
            int64_t* pIntFields;
            float* pFloatFields;
            double* pDoubleFields;
        };
        uint32_t ElementCount;
        Windows::Win32::MachineLearning::WINML_TENSOR_DATA_TYPE KeyType;
        _Anonymous1_e__Union Anonymous1;
        Windows::Win32::MachineLearning::WINML_TENSOR_DATA_TYPE Fields;
        _Anonymous2_e__Union Anonymous2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MachineLearning
{
    struct WINML_IMAGE_BINDING_DESC
    {
        Windows::Win32::MachineLearning::WINML_TENSOR_DATA_TYPE ElementType;
        uint32_t NumDimensions;
        int64_t* pShape;
        uint32_t DataSize;
        void* pData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MachineLearning
{
    struct WINML_RESOURCE_BINDING_DESC
    {
        Windows::Win32::MachineLearning::WINML_TENSOR_DATA_TYPE ElementType;
        uint32_t NumDimensions;
        int64_t* pShape;
        Windows::Win32::Direct3D12::ID3D12Resource* pResource;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MachineLearning
{
    struct WINML_BINDING_DESC
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::MachineLearning::WINML_TENSOR_BINDING_DESC Tensor;
            Windows::Win32::MachineLearning::WINML_SEQUENCE_BINDING_DESC Sequence;
            Windows::Win32::MachineLearning::WINML_MAP_BINDING_DESC Map;
            Windows::Win32::MachineLearning::WINML_IMAGE_BINDING_DESC Image;
            Windows::Win32::MachineLearning::WINML_RESOURCE_BINDING_DESC Resource;
        };
        uint16_t* Name;
        Windows::Win32::MachineLearning::WINML_BINDING_TYPE BindType;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MachineLearning
{
    struct WINML_TENSOR_VARIABLE_DESC
    {
        Windows::Win32::MachineLearning::WINML_TENSOR_DATA_TYPE ElementType;
        uint32_t NumDimensions;
        int64_t* pShape;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MachineLearning
{
    struct WINML_SEQUENCE_VARIABLE_DESC
    {
        Windows::Win32::MachineLearning::WINML_TENSOR_DATA_TYPE ElementType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MachineLearning
{
    struct WINML_MAP_VARIABLE_DESC
    {
        Windows::Win32::MachineLearning::WINML_TENSOR_DATA_TYPE KeyType;
        Windows::Win32::MachineLearning::WINML_TENSOR_DATA_TYPE Fields;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MachineLearning
{
    struct WINML_IMAGE_VARIABLE_DESC
    {
        Windows::Win32::MachineLearning::WINML_TENSOR_DATA_TYPE ElementType;
        uint32_t NumDimensions;
        int64_t* pShape;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MachineLearning
{
    struct WINML_VARIABLE_DESC
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::MachineLearning::WINML_TENSOR_VARIABLE_DESC Tensor;
            Windows::Win32::MachineLearning::WINML_SEQUENCE_VARIABLE_DESC Sequence;
            Windows::Win32::MachineLearning::WINML_MAP_VARIABLE_DESC Map;
            Windows::Win32::MachineLearning::WINML_IMAGE_VARIABLE_DESC Image;
        };
        uint16_t* Name;
        uint16_t* Description;
        Windows::Win32::MachineLearning::WINML_FEATURE_TYPE FeatureType;
        Windows::Win32::SystemServices::BOOL Required;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MachineLearning
{
    struct WINML_MODEL_DESC
    {
        uint16_t* Author;
        uint16_t* Name;
        uint16_t* Domain;
        uint16_t* Description;
        size_t Version;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MachineLearning
{
    struct MLOperatorEdgeDescription
    {
        union _Anonymous_e__Union
        {
            uint64_t reserved;
            Windows::Win32::MachineLearning::MLOperatorTensorDataType tensorDataType;
        };
        Windows::Win32::MachineLearning::MLOperatorEdgeType edgeType;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MachineLearning
{
    struct MLOperatorSchemaEdgeDescription
    {
        union _Anonymous_e__Union
        {
            void* reserved;
            int8_t* typeLabel;
            Windows::Win32::MachineLearning::MLOperatorEdgeDescription edgeDescription;
        };
        Windows::Win32::MachineLearning::MLOperatorParameterOptions options;
        Windows::Win32::MachineLearning::MLOperatorSchemaEdgeTypeFormat typeFormat;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MachineLearning
{
    struct MLOperatorEdgeTypeConstraint
    {
        int8_t* typeLabel;
        Windows::Win32::MachineLearning::MLOperatorEdgeDescription* allowedTypes;
        uint32_t allowedTypeCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MachineLearning
{
    struct MLOperatorAttribute
    {
        int8_t* name;
        Windows::Win32::MachineLearning::MLOperatorAttributeType type;
        bool required;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MachineLearning
{
    struct MLOperatorAttributeNameValue
    {
        union _Anonymous_e__Union
        {
            void* reserved;
            int64_t* ints;
            int8_t** strings;
            float* floats;
        };
        int8_t* name;
        Windows::Win32::MachineLearning::MLOperatorAttributeType type;
        uint32_t valueCount;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MachineLearning
{
    struct MLOperatorSchemaDescription
    {
        int8_t* name;
        int32_t operatorSetVersionAtLastChange;
        Windows::Win32::MachineLearning::MLOperatorSchemaEdgeDescription* inputs;
        uint32_t inputCount;
        Windows::Win32::MachineLearning::MLOperatorSchemaEdgeDescription* outputs;
        uint32_t outputCount;
        Windows::Win32::MachineLearning::MLOperatorEdgeTypeConstraint* typeConstraints;
        uint32_t typeConstraintCount;
        Windows::Win32::MachineLearning::MLOperatorAttribute* attributes;
        uint32_t attributeCount;
        Windows::Win32::MachineLearning::MLOperatorAttributeNameValue* defaultAttributes;
        uint32_t defaultAttributeCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MachineLearning
{
    struct MLOperatorSetId
    {
        int8_t* domain;
        int32_t version;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MachineLearning
{
    struct MLOperatorKernelDescription
    {
        int8_t* domain;
        int8_t* name;
        int32_t minimumOperatorSetVersion;
        Windows::Win32::MachineLearning::MLOperatorExecutionType executionType;
        Windows::Win32::MachineLearning::MLOperatorEdgeTypeConstraint* typeConstraints;
        uint32_t typeConstraintCount;
        Windows::Win32::MachineLearning::MLOperatorAttributeNameValue* defaultAttributes;
        uint32_t defaultAttributeCount;
        Windows::Win32::MachineLearning::MLOperatorKernelOptions options;
        uint32_t executionOptions;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multicast
{
    union IPNG_ADDRESS
    {
        uint32_t IpAddrV4;
        uint8_t IpAddrV6[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multicast
{
    struct MCAST_CLIENT_UID
    {
        uint8_t* ClientUID;
        uint32_t ClientUIDLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multicast
{
    struct MCAST_SCOPE_CTX
    {
        Windows::Win32::Multicast::IPNG_ADDRESS ScopeID;
        Windows::Win32::Multicast::IPNG_ADDRESS Interface;
        Windows::Win32::Multicast::IPNG_ADDRESS ServerID;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multicast
{
    struct MCAST_SCOPE_ENTRY
    {
        Windows::Win32::Multicast::MCAST_SCOPE_CTX ScopeCtx;
        Windows::Win32::Multicast::IPNG_ADDRESS LastAddr;
        uint32_t TTL;
        Windows::Win32::Security::UNICODE_STRING ScopeDesc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multicast
{
    struct MCAST_LEASE_REQUEST
    {
        int32_t LeaseStartTime;
        int32_t MaxLeaseStartTime;
        uint32_t LeaseDuration;
        uint32_t MinLeaseDuration;
        Windows::Win32::Multicast::IPNG_ADDRESS ServerAddress;
        uint16_t MinAddrCount;
        uint16_t AddrCount;
        uint8_t* pAddrBuf;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multicast
{
    struct MCAST_LEASE_RESPONSE
    {
        int32_t LeaseStartTime;
        int32_t LeaseEndTime;
        Windows::Win32::Multicast::IPNG_ADDRESS ServerAddress;
        uint16_t AddrCount;
        uint8_t* pAddrBuf;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Magnification
{
    struct MAGTRANSFORM
    {
        float v[9];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Magnification
{
    struct MAGIMAGEHEADER
    {
        uint32_t width;
        uint32_t height;
        ::win32::guid format;
        uint32_t stride;
        uint32_t offset;
        size_t cbSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Magnification
{
    struct MAGCOLOREFFECT
    {
        float transform[25];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mapi
{
    struct MapiFileDesc
    {
        uint32_t ulReserved;
        uint32_t flFlags;
        uint32_t nPosition;
        int8_t* lpszPathName;
        int8_t* lpszFileName;
        void* lpFileType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mapi
{
    struct MapiFileDescW
    {
        uint32_t ulReserved;
        uint32_t flFlags;
        uint32_t nPosition;
        uint16_t* lpszPathName;
        uint16_t* lpszFileName;
        void* lpFileType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mapi
{
    struct MapiFileTagExt
    {
        uint32_t ulReserved;
        uint32_t cbTag;
        uint8_t* lpTag;
        uint32_t cbEncoding;
        uint8_t* lpEncoding;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mapi
{
    struct MapiRecipDesc
    {
        uint32_t ulReserved;
        uint32_t ulRecipClass;
        int8_t* lpszName;
        int8_t* lpszAddress;
        uint32_t ulEIDSize;
        void* lpEntryID;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mapi
{
    struct MapiRecipDescW
    {
        uint32_t ulReserved;
        uint32_t ulRecipClass;
        uint16_t* lpszName;
        uint16_t* lpszAddress;
        uint32_t ulEIDSize;
        void* lpEntryID;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mapi
{
    struct MapiMessage
    {
        uint32_t ulReserved;
        int8_t* lpszSubject;
        int8_t* lpszNoteText;
        int8_t* lpszMessageType;
        int8_t* lpszDateReceived;
        int8_t* lpszConversationID;
        uint32_t flFlags;
        Windows::Win32::Mapi::MapiRecipDesc* lpOriginator;
        uint32_t nRecipCount;
        Windows::Win32::Mapi::MapiRecipDesc* lpRecips;
        uint32_t nFileCount;
        Windows::Win32::Mapi::MapiFileDesc* lpFiles;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mapi
{
    struct MapiMessageW
    {
        uint32_t ulReserved;
        uint16_t* lpszSubject;
        uint16_t* lpszNoteText;
        uint16_t* lpszMessageType;
        uint16_t* lpszDateReceived;
        uint16_t* lpszConversationID;
        uint32_t flFlags;
        Windows::Win32::Mapi::MapiRecipDescW* lpOriginator;
        uint32_t nRecipCount;
        Windows::Win32::Mapi::MapiRecipDescW* lpRecips;
        uint32_t nFileCount;
        Windows::Win32::Mapi::MapiFileDescW* lpFiles;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::BackgroundIntelligentTransferService
{
    struct BG_FILE_PROGRESS
    {
        uint64_t BytesTotal;
        uint64_t BytesTransferred;
        Windows::Win32::SystemServices::BOOL Completed;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::BackgroundIntelligentTransferService
{
    struct BG_FILE_INFO
    {
        uint16_t* RemoteName;
        uint16_t* LocalName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::BackgroundIntelligentTransferService
{
    struct BG_JOB_PROGRESS
    {
        uint64_t BytesTotal;
        uint64_t BytesTransferred;
        uint32_t FilesTotal;
        uint32_t FilesTransferred;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::BackgroundIntelligentTransferService
{
    struct BG_JOB_TIMES
    {
        Windows::Win32::WindowsProgramming::FILETIME CreationTime;
        Windows::Win32::WindowsProgramming::FILETIME ModificationTime;
        Windows::Win32::WindowsProgramming::FILETIME TransferCompletionTime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::BackgroundIntelligentTransferService
{
    struct BG_JOB_REPLY_PROGRESS
    {
        uint64_t BytesTotal;
        uint64_t BytesTransferred;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::BackgroundIntelligentTransferService
{
    struct BG_BASIC_CREDENTIALS
    {
        uint16_t* UserName;
        uint16_t* Password;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::BackgroundIntelligentTransferService
{
    union BG_AUTH_CREDENTIALS_UNION
    {
        Windows::Win32::BackgroundIntelligentTransferService::BG_BASIC_CREDENTIALS Basic;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::BackgroundIntelligentTransferService
{
    struct BG_AUTH_CREDENTIALS
    {
        Windows::Win32::BackgroundIntelligentTransferService::BG_AUTH_TARGET Target;
        Windows::Win32::BackgroundIntelligentTransferService::BG_AUTH_SCHEME Scheme;
        Windows::Win32::BackgroundIntelligentTransferService::BG_AUTH_CREDENTIALS_UNION Credentials;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::BackgroundIntelligentTransferService
{
    struct BG_FILE_RANGE
    {
        uint64_t InitialOffset;
        uint64_t Length;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::BackgroundIntelligentTransferService
{
    union BITS_JOB_PROPERTY_VALUE
    {
        uint32_t Dword;
        ::win32::guid ClsID;
        Windows::Win32::SystemServices::BOOL Enable;
        uint64_t Uint64;
        Windows::Win32::BackgroundIntelligentTransferService::BG_AUTH_TARGET Target;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::BackgroundIntelligentTransferService
{
    union BITS_FILE_PROPERTY_VALUE
    {
        uint16_t* String;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::BackgroundIntelligentTransferService
{
    struct FILESETINFO
    {
        Windows::Win32::Automation::BSTR bstrRemoteFile;
        Windows::Win32::Automation::BSTR bstrLocalFile;
        uint32_t dwSizeHint;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Bluetooth
{
    struct SDP_LARGE_INTEGER_16
    {
        uint64_t LowPart;
        int64_t HighPart;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Bluetooth
{
    struct SDP_ULARGE_INTEGER_16
    {
        uint64_t LowPart;
        uint64_t HighPart;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Bluetooth
{
    struct SdpAttributeRange
    {
        uint16_t minAttribute;
        uint16_t maxAttribute;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Bluetooth
{
    union SdpQueryUuidUnion
    {
        ::win32::guid uuid128;
        uint32_t uuid32;
        uint16_t uuid16;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Bluetooth
{
    struct SdpQueryUuid
    {
        Windows::Win32::Bluetooth::SdpQueryUuidUnion u;
        uint16_t uuidType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Bluetooth
{
    struct BTH_DEVICE_INFO
    {
        uint32_t flags;
        uint64_t address;
        uint32_t classOfDevice;
        int8_t name[248];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Bluetooth
{
    struct BTH_RADIO_IN_RANGE
    {
        Windows::Win32::Bluetooth::BTH_DEVICE_INFO deviceInfo;
        uint32_t previousDeviceFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Bluetooth
{
    struct BTH_L2CAP_EVENT_INFO
    {
        uint64_t bthAddress;
        uint16_t psm;
        uint8_t connected;
        uint8_t initiated;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Bluetooth
{
    struct BTH_HCI_EVENT_INFO
    {
        uint64_t bthAddress;
        uint8_t connectionType;
        uint8_t connected;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Bluetooth
{
    struct BLUETOOTH_ADDRESS_STRUCT
    {
        union _Anonymous_e__Union
        {
            uint64_t ullLong;
            uint8_t rgBytes[6];
        };
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Bluetooth
{
    struct BLUETOOTH_LOCAL_SERVICE_INFO_STRUCT
    {
        Windows::Win32::SystemServices::BOOL Enabled;
        Windows::Win32::Bluetooth::BLUETOOTH_ADDRESS_STRUCT btAddr;
        uint16_t szName[256];
        uint16_t szDeviceString[256];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Bluetooth
{
    struct BLUETOOTH_FIND_RADIO_PARAMS
    {
        uint32_t dwSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Bluetooth
{
    struct BLUETOOTH_RADIO_INFO
    {
        uint32_t dwSize;
        Windows::Win32::Bluetooth::BLUETOOTH_ADDRESS_STRUCT address;
        uint16_t szName[248];
        uint32_t ulClassofDevice;
        uint16_t lmpSubversion;
        uint16_t manufacturer;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Bluetooth
{
    struct BLUETOOTH_DEVICE_INFO_STRUCT
    {
        uint32_t dwSize;
        Windows::Win32::Bluetooth::BLUETOOTH_ADDRESS_STRUCT Address;
        uint32_t ulClassofDevice;
        Windows::Win32::SystemServices::BOOL fConnected;
        Windows::Win32::SystemServices::BOOL fRemembered;
        Windows::Win32::SystemServices::BOOL fAuthenticated;
        Windows::Win32::WindowsProgramming::SYSTEMTIME stLastSeen;
        Windows::Win32::WindowsProgramming::SYSTEMTIME stLastUsed;
        uint16_t szName[248];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Bluetooth
{
    struct BLUETOOTH_AUTHENTICATION_CALLBACK_PARAMS
    {
        union _Anonymous_e__Union
        {
            uint32_t Numeric_Value;
            uint32_t Passkey;
        };
        Windows::Win32::Bluetooth::BLUETOOTH_DEVICE_INFO_STRUCT deviceInfo;
        Windows::Win32::Bluetooth::BLUETOOTH_AUTHENTICATION_METHOD authenticationMethod;
        Windows::Win32::Bluetooth::BLUETOOTH_IO_CAPABILITY ioCapability;
        Windows::Win32::Bluetooth::BLUETOOTH_AUTHENTICATION_REQUIREMENTS authenticationRequirements;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Bluetooth
{
    struct BLUETOOTH_DEVICE_SEARCH_PARAMS
    {
        uint32_t dwSize;
        Windows::Win32::SystemServices::BOOL fReturnAuthenticated;
        Windows::Win32::SystemServices::BOOL fReturnRemembered;
        Windows::Win32::SystemServices::BOOL fReturnUnknown;
        Windows::Win32::SystemServices::BOOL fReturnConnected;
        Windows::Win32::SystemServices::BOOL fIssueInquiry;
        uint8_t cTimeoutMultiplier;
        Windows::Win32::SystemServices::HANDLE hRadio;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Bluetooth
{
    struct BLUETOOTH_COD_PAIRS
    {
        uint32_t ulCODMask;
        uint16_t* pcszDescription;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Bluetooth
{
    struct BLUETOOTH_SELECT_DEVICE_PARAMS
    {
        uint32_t dwSize;
        uint32_t cNumOfClasses;
        Windows::Win32::Bluetooth::BLUETOOTH_COD_PAIRS* prgClassOfDevices;
        uint16_t* pszInfo;
        Windows::Win32::WindowsAndMessaging::HWND hwndParent;
        Windows::Win32::SystemServices::BOOL fForceAuthentication;
        Windows::Win32::SystemServices::BOOL fShowAuthenticated;
        Windows::Win32::SystemServices::BOOL fShowRemembered;
        Windows::Win32::SystemServices::BOOL fShowUnknown;
        Windows::Win32::SystemServices::BOOL fAddNewDeviceWizard;
        Windows::Win32::SystemServices::BOOL fSkipServicesPage;
        Windows::Win32::Bluetooth::PFN_DEVICE_CALLBACK* pfnDeviceCallback;
        void* pvParam;
        uint32_t cNumDevices;
        Windows::Win32::Bluetooth::BLUETOOTH_DEVICE_INFO_STRUCT* pDevices;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Bluetooth
{
    struct BLUETOOTH_PIN_INFO
    {
        uint8_t pin[16];
        uint8_t pinLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Bluetooth
{
    struct BLUETOOTH_OOB_DATA_INFO
    {
        uint8_t C[16];
        uint8_t R[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Bluetooth
{
    struct BLUETOOTH_NUMERIC_COMPARISON_INFO
    {
        uint32_t NumericValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Bluetooth
{
    struct BLUETOOTH_PASSKEY_INFO
    {
        uint32_t passkey;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Bluetooth
{
    struct BLUETOOTH_AUTHENTICATE_RESPONSE
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::Bluetooth::BLUETOOTH_PIN_INFO pinInfo;
            Windows::Win32::Bluetooth::BLUETOOTH_OOB_DATA_INFO oobInfo;
            Windows::Win32::Bluetooth::BLUETOOTH_NUMERIC_COMPARISON_INFO numericCompInfo;
            Windows::Win32::Bluetooth::BLUETOOTH_PASSKEY_INFO passkeyInfo;
        };
        Windows::Win32::Bluetooth::BLUETOOTH_ADDRESS_STRUCT bthAddressRemote;
        Windows::Win32::Bluetooth::BLUETOOTH_AUTHENTICATION_METHOD authMethod;
        _Anonymous_e__Union Anonymous;
        uint8_t negativeResponse;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Bluetooth
{
    struct SDP_ELEMENT_DATA
    {
        union _data_e__Union
        {
            struct _string_e__Struct
            {
                uint8_t* value;
                uint32_t length;
            };
            struct _url_e__Struct
            {
                uint8_t* value;
                uint32_t length;
            };
            struct _sequence_e__Struct
            {
                uint8_t* value;
                uint32_t length;
            };
            struct _alternative_e__Struct
            {
                uint8_t* value;
                uint32_t length;
            };
            Windows::Win32::Bluetooth::SDP_LARGE_INTEGER_16 int128;
            int64_t int64;
            int32_t int32;
            int16_t int16;
            int8_t int8;
            Windows::Win32::Bluetooth::SDP_ULARGE_INTEGER_16 uint128;
            uint64_t uint64;
            uint32_t uint32;
            uint16_t uint16;
            uint8_t uint8;
            uint8_t booleanVal;
            ::win32::guid uuid128;
            uint32_t uuid32;
            uint16_t uuid16;
            _string_e__Struct string;
            _url_e__Struct url;
            _sequence_e__Struct sequence;
            _alternative_e__Struct alternative;
        };
        Windows::Win32::Bluetooth::SDP_TYPE type;
        Windows::Win32::Bluetooth::SDP_SPECIFICTYPE specificType;
        _data_e__Union data;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Bluetooth
{
    struct SDP_STRING_TYPE_DATA
    {
        uint16_t encoding;
        uint16_t mibeNum;
        uint16_t attributeId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Bluetooth
{
    struct SOCKADDR_BTH
    {
        uint16_t addressFamily;
        uint64_t btAddr;
        ::win32::guid serviceClassId;
        uint32_t port;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Bluetooth
{
    struct BTH_SET_SERVICE
    {
        uint32_t* pSdpVersion;
        Windows::Win32::SystemServices::HANDLE* pRecordHandle;
        uint32_t fCodService;
        uint32_t Reserved[5];
        uint32_t ulRecordLength;
        uint8_t pRecord[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Bluetooth
{
    struct BTH_QUERY_DEVICE
    {
        uint32_t LAP;
        uint8_t length;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Bluetooth
{
    struct BTH_QUERY_SERVICE
    {
        uint32_t type;
        uint32_t serviceHandle;
        Windows::Win32::Bluetooth::SdpQueryUuid uuids[12];
        uint32_t numRange;
        Windows::Win32::Bluetooth::SdpAttributeRange pRange[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Bluetooth
{
    struct RFCOMM_MSC_DATA
    {
        uint8_t Signals;
        uint8_t Break;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Bluetooth
{
    struct RFCOMM_RLS_DATA
    {
        uint8_t LineStatus;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Bluetooth
{
    struct RFCOMM_RPN_DATA
    {
        uint8_t Baud;
        uint8_t Data;
        uint8_t FlowControl;
        uint8_t XonChar;
        uint8_t XoffChar;
        uint8_t ParameterMask1;
        uint8_t ParameterMask2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Bluetooth
{
    struct RFCOMM_COMMAND
    {
        union _Data_e__Union
        {
            Windows::Win32::Bluetooth::RFCOMM_MSC_DATA MSC;
            Windows::Win32::Bluetooth::RFCOMM_RLS_DATA RLS;
            Windows::Win32::Bluetooth::RFCOMM_RPN_DATA RPN;
        };
        uint32_t CmdType;
        _Data_e__Union Data;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Bluetooth
{
    struct BTH_PING_REQ
    {
        uint64_t btAddr;
        uint8_t dataLen;
        uint8_t data[44];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Bluetooth
{
    struct BTH_PING_RSP
    {
        uint8_t dataLen;
        uint8_t data[44];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Bluetooth
{
    struct BTH_INFO_REQ
    {
        uint64_t btAddr;
        uint16_t infoType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Bluetooth
{
    struct BTH_INFO_RSP
    {
        union _Anonymous_e__Union
        {
            uint16_t connectionlessMTU;
            uint8_t data[44];
        };
        uint16_t result;
        uint8_t dataLen;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mbn
{
    struct __mbnapi_ReferenceRemainingTypes__
    {
        Windows::Win32::MobileBroadband::MBN_BAND_CLASS bandClass;
        Windows::Win32::MobileBroadband::MBN_CONTEXT_CONSTANTS contextConstants;
        Windows::Win32::MobileBroadband::MBN_CTRL_CAPS ctrlCaps;
        Windows::Win32::MobileBroadband::MBN_DATA_CLASS dataClass;
        Windows::Win32::MobileBroadband::MBN_INTERFACE_CAPS_CONSTANTS interfaceCapsConstants;
        Windows::Win32::MobileBroadband::MBN_PIN_CONSTANTS pinConstants;
        Windows::Win32::MobileBroadband::MBN_PROVIDER_CONSTANTS providerConstants;
        Windows::Win32::MobileBroadband::MBN_PROVIDER_STATE providerState;
        Windows::Win32::MobileBroadband::MBN_REGISTRATION_CONSTANTS registrationConstants;
        Windows::Win32::MobileBroadband::MBN_SIGNAL_CONSTANTS signalConstants;
        Windows::Win32::MobileBroadband::MBN_SMS_CAPS smsCaps;
        Windows::Win32::MobileBroadband::WWAEXT_SMS_CONSTANTS smsConstants;
        Windows::Win32::MobileBroadband::WWAEXT_SMS_CONSTANTS wwaextSmsConstants;
        Windows::Win32::MobileBroadband::MBN_SMS_STATUS_FLAG smsStatusFlag;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mbn
{
    struct __DummyPinType__
    {
        uint32_t pinType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MobileBroadband
{
    struct MBN_INTERFACE_CAPS
    {
        Windows::Win32::MobileBroadband::MBN_CELLULAR_CLASS cellularClass;
        Windows::Win32::MobileBroadband::MBN_VOICE_CLASS voiceClass;
        uint32_t dataClass;
        Windows::Win32::Automation::BSTR customDataClass;
        uint32_t gsmBandClass;
        uint32_t cdmaBandClass;
        Windows::Win32::Automation::BSTR customBandClass;
        uint32_t smsCaps;
        uint32_t controlCaps;
        Windows::Win32::Automation::BSTR deviceID;
        Windows::Win32::Automation::BSTR manufacturer;
        Windows::Win32::Automation::BSTR model;
        Windows::Win32::Automation::BSTR firmwareInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MobileBroadband
{
    struct MBN_PROVIDER
    {
        Windows::Win32::Automation::BSTR providerID;
        uint32_t providerState;
        Windows::Win32::Automation::BSTR providerName;
        uint32_t dataClass;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MobileBroadband
{
    struct MBN_PROVIDER2
    {
        Windows::Win32::MobileBroadband::MBN_PROVIDER provider;
        Windows::Win32::MobileBroadband::MBN_CELLULAR_CLASS cellularClass;
        uint32_t signalStrength;
        uint32_t signalError;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MobileBroadband
{
    struct MBN_PIN_INFO
    {
        Windows::Win32::MobileBroadband::MBN_PIN_STATE pinState;
        Windows::Win32::MobileBroadband::MBN_PIN_TYPE pinType;
        uint32_t attemptsRemaining;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MobileBroadband
{
    struct MBN_CONTEXT
    {
        uint32_t contextID;
        Windows::Win32::MobileBroadband::MBN_CONTEXT_TYPE contextType;
        Windows::Win32::Automation::BSTR accessString;
        Windows::Win32::Automation::BSTR userName;
        Windows::Win32::Automation::BSTR password;
        Windows::Win32::MobileBroadband::MBN_COMPRESSION compression;
        Windows::Win32::MobileBroadband::MBN_AUTH_PROTOCOL authType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MobileBroadband
{
    struct MBN_SMS_FILTER
    {
        Windows::Win32::MobileBroadband::MBN_SMS_FLAG flag;
        uint32_t messageIndex;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MobileBroadband
{
    struct MBN_SMS_STATUS_INFO
    {
        uint32_t flag;
        uint32_t messageIndex;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MobileBroadband
{
    struct MBN_DEVICE_SERVICE
    {
        Windows::Win32::Automation::BSTR deviceServiceID;
        int16_t dataWriteSupported;
        int16_t dataReadSupported;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MobileDeviceManagementRegistration
{
    struct MANAGEMENT_SERVICE_INFO
    {
        uint16_t* pszMDMServiceUri;
        uint16_t* pszAuthenticationUri;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MobileDeviceManagementRegistration
{
    struct MANAGEMENT_REGISTRATION_INFO
    {
        Windows::Win32::SystemServices::BOOL fDeviceRegisteredWithManagement;
        uint32_t dwDeviceRegistionKind;
        uint16_t* pszUPN;
        uint16_t* pszMDMServiceUri;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    union BM_REQUEST_TYPE
    {
        struct _BM
        {
            uint8_t _bitfield;
        };
        _BM s;
        uint8_t B;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USB_DEFAULT_PIPE_SETUP_PACKET
    {
        union _wValue
        {
            struct _Anonymous_e__Struct
            {
                uint8_t LowByte;
                uint8_t HiByte;
            };
            _Anonymous_e__Struct Anonymous;
            uint16_t W;
        };
        union _wIndex
        {
            struct _Anonymous_e__Struct
            {
                uint8_t LowByte;
                uint8_t HiByte;
            };
            _Anonymous_e__Struct Anonymous;
            uint16_t W;
        };
        Windows::Win32::UsbDrivers::BM_REQUEST_TYPE bmRequestType;
        uint8_t bRequest;
        _wValue wValue;
        _wIndex wIndex;
        uint16_t wLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    union USB_DEVICE_STATUS
    {
        struct _Anonymous_e__Struct
        {
            uint16_t _bitfield;
        };
        uint16_t AsUshort16;
        _Anonymous_e__Struct Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    union USB_INTERFACE_STATUS
    {
        struct _Anonymous_e__Struct
        {
            uint16_t _bitfield;
        };
        uint16_t AsUshort16;
        _Anonymous_e__Struct Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    union USB_ENDPOINT_STATUS
    {
        struct _Anonymous_e__Struct
        {
            uint16_t _bitfield;
        };
        uint16_t AsUshort16;
        _Anonymous_e__Struct Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USB_COMMON_DESCRIPTOR
    {
        uint8_t bLength;
        uint8_t bDescriptorType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USB_DEVICE_DESCRIPTOR
    {
        uint8_t bLength;
        uint8_t bDescriptorType;
        uint16_t bcdUSB;
        uint8_t bDeviceClass;
        uint8_t bDeviceSubClass;
        uint8_t bDeviceProtocol;
        uint8_t bMaxPacketSize0;
        uint16_t idVendor;
        uint16_t idProduct;
        uint16_t bcdDevice;
        uint8_t iManufacturer;
        uint8_t iProduct;
        uint8_t iSerialNumber;
        uint8_t bNumConfigurations;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USB_DEVICE_QUALIFIER_DESCRIPTOR
    {
        uint8_t bLength;
        uint8_t bDescriptorType;
        uint16_t bcdUSB;
        uint8_t bDeviceClass;
        uint8_t bDeviceSubClass;
        uint8_t bDeviceProtocol;
        uint8_t bMaxPacketSize0;
        uint8_t bNumConfigurations;
        uint8_t bReserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USB_BOS_DESCRIPTOR
    {
        uint8_t bLength;
        uint8_t bDescriptorType;
        uint16_t wTotalLength;
        uint8_t bNumDeviceCaps;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USB_DEVICE_CAPABILITY_USB20_EXTENSION_DESCRIPTOR
    {
        union _bmAttributes_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t _bitfield;
            };
            uint32_t AsUlong;
            _Anonymous_e__Struct Anonymous;
        };
        uint8_t bLength;
        uint8_t bDescriptorType;
        uint8_t bDevCapabilityType;
        _bmAttributes_e__Union bmAttributes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USB_DEVICE_CAPABILITY_POWER_DELIVERY_DESCRIPTOR
    {
        union _bmAttributes_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t _bitfield;
            };
            uint32_t AsUlong;
            _Anonymous_e__Struct Anonymous;
        };
        uint8_t bLength;
        uint8_t bDescriptorType;
        uint8_t bDevCapabilityType;
        uint8_t bReserved;
        _bmAttributes_e__Union bmAttributes;
        uint16_t bmProviderPorts;
        uint16_t bmConsumerPorts;
        uint16_t bcdBCVersion;
        uint16_t bcdPDVersion;
        uint16_t bcdUSBTypeCVersion;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USB_DEVICE_CAPABILITY_PD_CONSUMER_PORT_DESCRIPTOR
    {
        union _bmCapabilities_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint16_t _bitfield;
            };
            uint16_t AsUshort;
            _Anonymous_e__Struct Anonymous;
        };
        uint8_t bLength;
        uint8_t bDescriptorType;
        uint8_t bDevCapabilityType;
        uint8_t bReserved;
        _bmCapabilities_e__Union bmCapabilities;
        uint16_t wMinVoltage;
        uint16_t wMaxVoltage;
        uint16_t wReserved;
        uint32_t dwMaxOperatingPower;
        uint32_t dwMaxPeakPower;
        uint32_t dwMaxPeakPowerTime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USB_DEVICE_CAPABILITY_SUPERSPEED_USB_DESCRIPTOR
    {
        uint8_t bLength;
        uint8_t bDescriptorType;
        uint8_t bDevCapabilityType;
        uint8_t bmAttributes;
        uint16_t wSpeedsSupported;
        uint8_t bFunctionalitySupport;
        uint8_t bU1DevExitLat;
        uint16_t wU2DevExitLat;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    union USB_DEVICE_CAPABILITY_SUPERSPEEDPLUS_SPEED
    {
        struct _Anonymous_e__Struct
        {
            uint32_t _bitfield;
        };
        uint32_t AsUlong32;
        _Anonymous_e__Struct Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USB_DEVICE_CAPABILITY_SUPERSPEEDPLUS_USB_DESCRIPTOR
    {
        union _bmAttributes_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t _bitfield;
            };
            uint32_t AsUlong;
            _Anonymous_e__Struct Anonymous;
        };
        union _wFunctionalitySupport_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint16_t _bitfield;
            };
            uint16_t AsUshort;
            _Anonymous_e__Struct Anonymous;
        };
        uint8_t bLength;
        uint8_t bDescriptorType;
        uint8_t bDevCapabilityType;
        uint8_t bReserved;
        _bmAttributes_e__Union bmAttributes;
        _wFunctionalitySupport_e__Union wFunctionalitySupport;
        uint16_t wReserved;
        Windows::Win32::UsbDrivers::USB_DEVICE_CAPABILITY_SUPERSPEEDPLUS_SPEED bmSublinkSpeedAttr[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USB_DEVICE_CAPABILITY_CONTAINER_ID_DESCRIPTOR
    {
        uint8_t bLength;
        uint8_t bDescriptorType;
        uint8_t bDevCapabilityType;
        uint8_t bReserved;
        uint8_t ContainerID[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USB_DEVICE_CAPABILITY_PLATFORM_DESCRIPTOR
    {
        uint8_t bLength;
        uint8_t bDescriptorType;
        uint8_t bDevCapabilityType;
        uint8_t bReserved;
        ::win32::guid PlatformCapabilityUuid;
        uint8_t CapabililityData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USB_DEVICE_CAPABILITY_BILLBOARD_DESCRIPTOR
    {
        union _VconnPower_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint16_t _bitfield;
            };
            uint16_t AsUshort;
            _Anonymous_e__Struct Anonymous;
        };
        struct _Anonymous_e__Struct
        {
            uint16_t wSVID;
            uint8_t bAlternateMode;
            uint8_t iAlternateModeSetting;
        };
        uint8_t bLength;
        uint8_t bDescriptorType;
        uint8_t bDevCapabilityType;
        uint8_t iAddtionalInfoURL;
        uint8_t bNumberOfAlternateModes;
        uint8_t bPreferredAlternateMode;
        _VconnPower_e__Union VconnPower;
        uint8_t bmConfigured[32];
        uint32_t bReserved;
        _Anonymous_e__Struct AlternateMode[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USB_DEVICE_CAPABILITY_FIRMWARE_STATUS_DESCRIPTOR
    {
        union _bmAttributes_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t _bitfield;
            };
            uint32_t AsUlong;
            _Anonymous_e__Struct Anonymous;
        };
        uint8_t bLength;
        uint8_t bDescriptorType;
        uint8_t bDevCapabilityType;
        uint8_t bcdDescriptorVersion;
        _bmAttributes_e__Union bmAttributes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USB_DEVICE_CAPABILITY_DESCRIPTOR
    {
        uint8_t bLength;
        uint8_t bDescriptorType;
        uint8_t bDevCapabilityType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USB_CONFIGURATION_DESCRIPTOR
    {
        uint8_t bLength;
        uint8_t bDescriptorType;
        uint16_t wTotalLength;
        uint8_t bNumInterfaces;
        uint8_t bConfigurationValue;
        uint8_t iConfiguration;
        uint8_t bmAttributes;
        uint8_t MaxPower;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USB_INTERFACE_ASSOCIATION_DESCRIPTOR
    {
        uint8_t bLength;
        uint8_t bDescriptorType;
        uint8_t bFirstInterface;
        uint8_t bInterfaceCount;
        uint8_t bFunctionClass;
        uint8_t bFunctionSubClass;
        uint8_t bFunctionProtocol;
        uint8_t iFunction;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USB_INTERFACE_DESCRIPTOR
    {
        uint8_t bLength;
        uint8_t bDescriptorType;
        uint8_t bInterfaceNumber;
        uint8_t bAlternateSetting;
        uint8_t bNumEndpoints;
        uint8_t bInterfaceClass;
        uint8_t bInterfaceSubClass;
        uint8_t bInterfaceProtocol;
        uint8_t iInterface;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USB_ENDPOINT_DESCRIPTOR
    {
        uint8_t bLength;
        uint8_t bDescriptorType;
        uint8_t bEndpointAddress;
        uint8_t bmAttributes;
        uint16_t wMaxPacketSize;
        uint8_t bInterval;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    union USB_HIGH_SPEED_MAXPACKET
    {
        struct _MP
        {
            uint16_t _bitfield;
        };
        uint16_t us;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USB_STRING_DESCRIPTOR
    {
        uint8_t bLength;
        uint8_t bDescriptorType;
        uint16_t bString[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USB_SUPERSPEED_ENDPOINT_COMPANION_DESCRIPTOR
    {
        union _bmAttributes_e__Union
        {
            struct _Bulk_e__Struct
            {
                uint8_t _bitfield;
            };
            struct _Isochronous_e__Struct
            {
                uint8_t _bitfield;
            };
            uint8_t AsUchar;
            _Bulk_e__Struct Bulk;
            _Isochronous_e__Struct Isochronous;
        };
        uint8_t bLength;
        uint8_t bDescriptorType;
        uint8_t bMaxBurst;
        _bmAttributes_e__Union bmAttributes;
        uint16_t wBytesPerInterval;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USB_SUPERSPEEDPLUS_ISOCH_ENDPOINT_COMPANION_DESCRIPTOR
    {
        uint8_t bLength;
        uint8_t bDescriptorType;
        uint16_t wReserved;
        uint32_t dwBytesPerInterval;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USB_HUB_DESCRIPTOR
    {
        uint8_t bDescriptorLength;
        uint8_t bDescriptorType;
        uint8_t bNumberOfPorts;
        uint16_t wHubCharacteristics;
        uint8_t bPowerOnToPowerGood;
        uint8_t bHubControlCurrent;
        uint8_t bRemoveAndPowerMask[64];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USB_30_HUB_DESCRIPTOR
    {
        uint8_t bLength;
        uint8_t bDescriptorType;
        uint8_t bNumberOfPorts;
        uint16_t wHubCharacteristics;
        uint8_t bPowerOnToPowerGood;
        uint8_t bHubControlCurrent;
        uint8_t bHubHdrDecLat;
        uint16_t wHubDelay;
        uint16_t DeviceRemovable;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    union USB_HUB_STATUS
    {
        struct _Anonymous_e__Struct
        {
            uint16_t _bitfield;
        };
        uint16_t AsUshort16;
        _Anonymous_e__Struct Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    union USB_HUB_CHANGE
    {
        struct _Anonymous_e__Struct
        {
            uint16_t _bitfield;
        };
        uint16_t AsUshort16;
        _Anonymous_e__Struct Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    union USB_HUB_STATUS_AND_CHANGE
    {
        struct _Anonymous_e__Struct
        {
            Windows::Win32::UsbDrivers::USB_HUB_STATUS HubStatus;
            Windows::Win32::UsbDrivers::USB_HUB_CHANGE HubChange;
        };
        uint32_t AsUlong32;
        _Anonymous_e__Struct Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    union USB_20_PORT_STATUS
    {
        struct _Anonymous_e__Struct
        {
            uint16_t _bitfield;
        };
        uint16_t AsUshort16;
        _Anonymous_e__Struct Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    union USB_20_PORT_CHANGE
    {
        struct _Anonymous_e__Struct
        {
            uint16_t _bitfield;
        };
        uint16_t AsUshort16;
        _Anonymous_e__Struct Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    union USB_30_PORT_STATUS
    {
        struct _Anonymous_e__Struct
        {
            uint16_t _bitfield;
        };
        uint16_t AsUshort16;
        _Anonymous_e__Struct Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    union USB_30_PORT_CHANGE
    {
        struct _Anonymous_e__Struct
        {
            uint16_t _bitfield;
        };
        uint16_t AsUshort16;
        _Anonymous_e__Struct Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    union USB_PORT_STATUS
    {
        uint16_t AsUshort16;
        Windows::Win32::UsbDrivers::USB_20_PORT_STATUS Usb20PortStatus;
        Windows::Win32::UsbDrivers::USB_30_PORT_STATUS Usb30PortStatus;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    union USB_PORT_CHANGE
    {
        uint16_t AsUshort16;
        Windows::Win32::UsbDrivers::USB_20_PORT_CHANGE Usb20PortChange;
        Windows::Win32::UsbDrivers::USB_30_PORT_CHANGE Usb30PortChange;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    union USB_PORT_EXT_STATUS
    {
        struct _Anonymous_e__Struct
        {
            uint32_t _bitfield;
        };
        uint32_t AsUlong32;
        _Anonymous_e__Struct Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    union USB_PORT_STATUS_AND_CHANGE
    {
        struct _Anonymous_e__Struct
        {
            Windows::Win32::UsbDrivers::USB_PORT_STATUS PortStatus;
            Windows::Win32::UsbDrivers::USB_PORT_CHANGE PortChange;
        };
        uint32_t AsUlong32;
        _Anonymous_e__Struct Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    union USB_PORT_EXT_STATUS_AND_CHANGE
    {
        struct _Anonymous_e__Struct
        {
            Windows::Win32::UsbDrivers::USB_PORT_STATUS_AND_CHANGE PortStatusChange;
            Windows::Win32::UsbDrivers::USB_PORT_EXT_STATUS PortExtStatus;
        };
        uint64_t AsUlong64;
        _Anonymous_e__Struct Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    union USB_HUB_30_PORT_REMOTE_WAKE_MASK
    {
        struct _Anonymous_e__Struct
        {
            uint8_t _bitfield;
        };
        uint8_t AsUchar8;
        _Anonymous_e__Struct Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    union USB_FUNCTION_SUSPEND_OPTIONS
    {
        struct _Anonymous_e__Struct
        {
            uint8_t _bitfield;
        };
        uint8_t AsUchar;
        _Anonymous_e__Struct Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USB_CONFIGURATION_POWER_DESCRIPTOR
    {
        uint8_t bLength;
        uint8_t bDescriptorType;
        uint8_t SelfPowerConsumedD0[3];
        uint8_t bPowerSummaryId;
        uint8_t bBusPowerSavingD1;
        uint8_t bSelfPowerSavingD1;
        uint8_t bBusPowerSavingD2;
        uint8_t bSelfPowerSavingD2;
        uint8_t bBusPowerSavingD3;
        uint8_t bSelfPowerSavingD3;
        uint16_t TransitionTimeFromD1;
        uint16_t TransitionTimeFromD2;
        uint16_t TransitionTimeFromD3;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USB_INTERFACE_POWER_DESCRIPTOR
    {
        uint8_t bLength;
        uint8_t bDescriptorType;
        uint8_t bmCapabilitiesFlags;
        uint8_t bBusPowerSavingD1;
        uint8_t bSelfPowerSavingD1;
        uint8_t bBusPowerSavingD2;
        uint8_t bSelfPowerSavingD2;
        uint8_t bBusPowerSavingD3;
        uint8_t bSelfPowerSavingD3;
        uint16_t TransitionTimeFromD1;
        uint16_t TransitionTimeFromD2;
        uint16_t TransitionTimeFromD3;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USBD_VERSION_INFORMATION
    {
        uint32_t USBDI_Version;
        uint32_t Supported_USB_Version;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USBD_DEVICE_INFORMATION
    {
        uint32_t OffsetNext;
        void* UsbdDeviceHandle;
        Windows::Win32::UsbDrivers::USB_DEVICE_DESCRIPTOR DeviceDescriptor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USBD_PIPE_INFORMATION
    {
        uint16_t MaximumPacketSize;
        uint8_t EndpointAddress;
        uint8_t Interval;
        Windows::Win32::UsbDrivers::USBD_PIPE_TYPE PipeType;
        void* PipeHandle;
        uint32_t MaximumTransferSize;
        uint32_t PipeFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USBD_ENDPOINT_OFFLOAD_INFORMATION
    {
        uint32_t Size;
        uint16_t EndpointAddress;
        uint32_t ResourceId;
        Windows::Win32::UsbDrivers::USBD_ENDPOINT_OFFLOAD_MODE Mode;
        uint32_t _bitfield1;
        uint32_t _bitfield2;
        Windows::Win32::SystemServices::LARGE_INTEGER TransferSegmentLA;
        void* TransferSegmentVA;
        size_t TransferRingSize;
        uint32_t TransferRingInitialCycleBit;
        uint32_t MessageNumber;
        Windows::Win32::SystemServices::LARGE_INTEGER EventRingSegmentLA;
        void* EventRingSegmentVA;
        size_t EventRingSize;
        uint32_t EventRingInitialCycleBit;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USBD_INTERFACE_INFORMATION
    {
        uint16_t Length;
        uint8_t InterfaceNumber;
        uint8_t AlternateSetting;
        uint8_t Class;
        uint8_t SubClass;
        uint8_t Protocol;
        uint8_t Reserved;
        void* InterfaceHandle;
        uint32_t NumberOfPipes;
        Windows::Win32::UsbDrivers::USBD_PIPE_INFORMATION Pipes[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct _URB_HCD_AREA
    {
        void* Reserved8[8];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct _URB_HEADER
    {
        uint16_t Length;
        uint16_t Function;
        int32_t Status;
        void* UsbdDeviceHandle;
        uint32_t UsbdFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct _URB_SELECT_INTERFACE
    {
        Windows::Win32::UsbDrivers::_URB_HEADER Hdr;
        void* ConfigurationHandle;
        Windows::Win32::UsbDrivers::USBD_INTERFACE_INFORMATION Interface;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct _URB_SELECT_CONFIGURATION
    {
        Windows::Win32::UsbDrivers::_URB_HEADER Hdr;
        Windows::Win32::UsbDrivers::USB_CONFIGURATION_DESCRIPTOR* ConfigurationDescriptor;
        void* ConfigurationHandle;
        Windows::Win32::UsbDrivers::USBD_INTERFACE_INFORMATION Interface;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct _URB_PIPE_REQUEST
    {
        Windows::Win32::UsbDrivers::_URB_HEADER Hdr;
        void* PipeHandle;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct _URB_FRAME_LENGTH_CONTROL
    {
        Windows::Win32::UsbDrivers::_URB_HEADER Hdr;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct _URB_GET_FRAME_LENGTH
    {
        Windows::Win32::UsbDrivers::_URB_HEADER Hdr;
        uint32_t FrameLength;
        uint32_t FrameNumber;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct _URB_SET_FRAME_LENGTH
    {
        Windows::Win32::UsbDrivers::_URB_HEADER Hdr;
        int32_t FrameLengthDelta;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct _URB_GET_CURRENT_FRAME_NUMBER
    {
        Windows::Win32::UsbDrivers::_URB_HEADER Hdr;
        uint32_t FrameNumber;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct _URB_CONTROL_DESCRIPTOR_REQUEST
    {
        Windows::Win32::UsbDrivers::_URB_HEADER Hdr;
        void* Reserved;
        uint32_t Reserved0;
        uint32_t TransferBufferLength;
        void* TransferBuffer;
        void* TransferBufferMDL;
        Windows::Win32::UsbDrivers::URB* UrbLink;
        Windows::Win32::UsbDrivers::_URB_HCD_AREA hca;
        uint16_t Reserved1;
        uint8_t Index;
        uint8_t DescriptorType;
        uint16_t LanguageId;
        uint16_t Reserved2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct _URB_CONTROL_GET_STATUS_REQUEST
    {
        Windows::Win32::UsbDrivers::_URB_HEADER Hdr;
        void* Reserved;
        uint32_t Reserved0;
        uint32_t TransferBufferLength;
        void* TransferBuffer;
        void* TransferBufferMDL;
        Windows::Win32::UsbDrivers::URB* UrbLink;
        Windows::Win32::UsbDrivers::_URB_HCD_AREA hca;
        uint8_t Reserved1[4];
        uint16_t Index;
        uint16_t Reserved2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct _URB_CONTROL_FEATURE_REQUEST
    {
        Windows::Win32::UsbDrivers::_URB_HEADER Hdr;
        void* Reserved;
        uint32_t Reserved2;
        uint32_t Reserved3;
        void* Reserved4;
        void* Reserved5;
        Windows::Win32::UsbDrivers::URB* UrbLink;
        Windows::Win32::UsbDrivers::_URB_HCD_AREA hca;
        uint16_t Reserved0;
        uint16_t FeatureSelector;
        uint16_t Index;
        uint16_t Reserved1;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct _URB_CONTROL_VENDOR_OR_CLASS_REQUEST
    {
        Windows::Win32::UsbDrivers::_URB_HEADER Hdr;
        void* Reserved;
        uint32_t TransferFlags;
        uint32_t TransferBufferLength;
        void* TransferBuffer;
        void* TransferBufferMDL;
        Windows::Win32::UsbDrivers::URB* UrbLink;
        Windows::Win32::UsbDrivers::_URB_HCD_AREA hca;
        uint8_t RequestTypeReservedBits;
        uint8_t Request;
        uint16_t Value;
        uint16_t Index;
        uint16_t Reserved1;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct _URB_CONTROL_GET_INTERFACE_REQUEST
    {
        Windows::Win32::UsbDrivers::_URB_HEADER Hdr;
        void* Reserved;
        uint32_t Reserved0;
        uint32_t TransferBufferLength;
        void* TransferBuffer;
        void* TransferBufferMDL;
        Windows::Win32::UsbDrivers::URB* UrbLink;
        Windows::Win32::UsbDrivers::_URB_HCD_AREA hca;
        uint8_t Reserved1[4];
        uint16_t Interface;
        uint16_t Reserved2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct _URB_CONTROL_GET_CONFIGURATION_REQUEST
    {
        Windows::Win32::UsbDrivers::_URB_HEADER Hdr;
        void* Reserved;
        uint32_t Reserved0;
        uint32_t TransferBufferLength;
        void* TransferBuffer;
        void* TransferBufferMDL;
        Windows::Win32::UsbDrivers::URB* UrbLink;
        Windows::Win32::UsbDrivers::_URB_HCD_AREA hca;
        uint8_t Reserved1[8];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct OS_STRING
    {
        union _Anonymous_e__Union
        {
            uint8_t bPad;
            uint8_t bFlags;
        };
        uint8_t bLength;
        uint8_t bDescriptorType;
        uint16_t MicrosoftString[7];
        uint8_t bVendorCode;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct _URB_OS_FEATURE_DESCRIPTOR_REQUEST
    {
        Windows::Win32::UsbDrivers::_URB_HEADER Hdr;
        void* Reserved;
        uint32_t Reserved0;
        uint32_t TransferBufferLength;
        void* TransferBuffer;
        void* TransferBufferMDL;
        Windows::Win32::UsbDrivers::URB* UrbLink;
        Windows::Win32::UsbDrivers::_URB_HCD_AREA hca;
        uint8_t _bitfield;
        uint8_t Reserved2;
        uint8_t InterfaceNumber;
        uint8_t MS_PageIndex;
        uint16_t MS_FeatureDescriptorIndex;
        uint16_t Reserved3;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct _URB_CONTROL_TRANSFER
    {
        Windows::Win32::UsbDrivers::_URB_HEADER Hdr;
        void* PipeHandle;
        uint32_t TransferFlags;
        uint32_t TransferBufferLength;
        void* TransferBuffer;
        void* TransferBufferMDL;
        Windows::Win32::UsbDrivers::URB* UrbLink;
        Windows::Win32::UsbDrivers::_URB_HCD_AREA hca;
        uint8_t SetupPacket[8];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct _URB_CONTROL_TRANSFER_EX
    {
        Windows::Win32::UsbDrivers::_URB_HEADER Hdr;
        void* PipeHandle;
        uint32_t TransferFlags;
        uint32_t TransferBufferLength;
        void* TransferBuffer;
        void* TransferBufferMDL;
        uint32_t Timeout;
        Windows::Win32::UsbDrivers::_URB_HCD_AREA hca;
        uint8_t SetupPacket[8];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct _URB_BULK_OR_INTERRUPT_TRANSFER
    {
        Windows::Win32::UsbDrivers::_URB_HEADER Hdr;
        void* PipeHandle;
        uint32_t TransferFlags;
        uint32_t TransferBufferLength;
        void* TransferBuffer;
        void* TransferBufferMDL;
        Windows::Win32::UsbDrivers::URB* UrbLink;
        Windows::Win32::UsbDrivers::_URB_HCD_AREA hca;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USBD_ISO_PACKET_DESCRIPTOR
    {
        uint32_t Offset;
        uint32_t Length;
        int32_t Status;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct _URB_ISOCH_TRANSFER
    {
        Windows::Win32::UsbDrivers::_URB_HEADER Hdr;
        void* PipeHandle;
        uint32_t TransferFlags;
        uint32_t TransferBufferLength;
        void* TransferBuffer;
        void* TransferBufferMDL;
        Windows::Win32::UsbDrivers::URB* UrbLink;
        Windows::Win32::UsbDrivers::_URB_HCD_AREA hca;
        uint32_t StartFrame;
        uint32_t NumberOfPackets;
        uint32_t ErrorCount;
        Windows::Win32::UsbDrivers::USBD_ISO_PACKET_DESCRIPTOR IsoPacket[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USBD_STREAM_INFORMATION
    {
        void* PipeHandle;
        uint32_t StreamID;
        uint32_t MaximumTransferSize;
        uint32_t PipeFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct _URB_OPEN_STATIC_STREAMS
    {
        Windows::Win32::UsbDrivers::_URB_HEADER Hdr;
        void* PipeHandle;
        uint32_t NumberOfStreams;
        uint16_t StreamInfoVersion;
        uint16_t StreamInfoSize;
        Windows::Win32::UsbDrivers::USBD_STREAM_INFORMATION* Streams;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct _URB_GET_ISOCH_PIPE_TRANSFER_PATH_DELAYS
    {
        Windows::Win32::UsbDrivers::_URB_HEADER Hdr;
        void* PipeHandle;
        uint32_t MaximumSendPathDelayInMilliSeconds;
        uint32_t MaximumCompletionPathDelayInMilliSeconds;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct URB
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::UsbDrivers::_URB_HEADER UrbHeader;
            Windows::Win32::UsbDrivers::_URB_SELECT_INTERFACE UrbSelectInterface;
            Windows::Win32::UsbDrivers::_URB_SELECT_CONFIGURATION UrbSelectConfiguration;
            Windows::Win32::UsbDrivers::_URB_PIPE_REQUEST UrbPipeRequest;
            Windows::Win32::UsbDrivers::_URB_FRAME_LENGTH_CONTROL UrbFrameLengthControl;
            Windows::Win32::UsbDrivers::_URB_GET_FRAME_LENGTH UrbGetFrameLength;
            Windows::Win32::UsbDrivers::_URB_SET_FRAME_LENGTH UrbSetFrameLength;
            Windows::Win32::UsbDrivers::_URB_GET_CURRENT_FRAME_NUMBER UrbGetCurrentFrameNumber;
            Windows::Win32::UsbDrivers::_URB_CONTROL_TRANSFER UrbControlTransfer;
            Windows::Win32::UsbDrivers::_URB_CONTROL_TRANSFER_EX UrbControlTransferEx;
            Windows::Win32::UsbDrivers::_URB_BULK_OR_INTERRUPT_TRANSFER UrbBulkOrInterruptTransfer;
            Windows::Win32::UsbDrivers::_URB_ISOCH_TRANSFER UrbIsochronousTransfer;
            Windows::Win32::UsbDrivers::_URB_CONTROL_DESCRIPTOR_REQUEST UrbControlDescriptorRequest;
            Windows::Win32::UsbDrivers::_URB_CONTROL_GET_STATUS_REQUEST UrbControlGetStatusRequest;
            Windows::Win32::UsbDrivers::_URB_CONTROL_FEATURE_REQUEST UrbControlFeatureRequest;
            Windows::Win32::UsbDrivers::_URB_CONTROL_VENDOR_OR_CLASS_REQUEST UrbControlVendorClassRequest;
            Windows::Win32::UsbDrivers::_URB_CONTROL_GET_INTERFACE_REQUEST UrbControlGetInterfaceRequest;
            Windows::Win32::UsbDrivers::_URB_CONTROL_GET_CONFIGURATION_REQUEST UrbControlGetConfigurationRequest;
            Windows::Win32::UsbDrivers::_URB_OS_FEATURE_DESCRIPTOR_REQUEST UrbOSFeatureDescriptorRequest;
            Windows::Win32::UsbDrivers::_URB_OPEN_STATIC_STREAMS UrbOpenStaticStreams;
            Windows::Win32::UsbDrivers::_URB_GET_ISOCH_PIPE_TRANSFER_PATH_DELAYS UrbGetIsochPipeTransferPathDelays;
        };
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USB_IDLE_CALLBACK_INFO
    {
        Windows::Win32::UsbDrivers::USB_IDLE_CALLBACK* IdleCallback;
        void* IdleContext;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USBUSER_REQUEST_HEADER
    {
        uint32_t UsbUserRequest;
        Windows::Win32::UsbDrivers::USB_USER_ERROR_CODE UsbUserStatusCode;
        uint32_t RequestBufferLength;
        uint32_t ActualBufferLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct PACKET_PARAMETERS
    {
        uint8_t DeviceAddress;
        uint8_t EndpointAddress;
        uint16_t MaximumPacketSize;
        uint32_t Timeout;
        uint32_t Flags;
        uint32_t DataLength;
        uint16_t HubDeviceAddress;
        uint16_t PortTTNumber;
        uint8_t ErrorCount;
        uint8_t Pad[3];
        int32_t UsbdStatusCode;
        uint8_t Data[4];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USBUSER_SEND_ONE_PACKET
    {
        Windows::Win32::UsbDrivers::USBUSER_REQUEST_HEADER Header;
        Windows::Win32::UsbDrivers::PACKET_PARAMETERS PacketParameters;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct RAW_RESET_PORT_PARAMETERS
    {
        uint16_t PortNumber;
        uint16_t PortStatus;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USBUSER_RAW_RESET_ROOT_PORT
    {
        Windows::Win32::UsbDrivers::USBUSER_REQUEST_HEADER Header;
        Windows::Win32::UsbDrivers::RAW_RESET_PORT_PARAMETERS Parameters;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct RAW_ROOTPORT_FEATURE
    {
        uint16_t PortNumber;
        uint16_t PortFeature;
        uint16_t PortStatus;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USBUSER_ROOTPORT_FEATURE_REQUEST
    {
        Windows::Win32::UsbDrivers::USBUSER_REQUEST_HEADER Header;
        Windows::Win32::UsbDrivers::RAW_ROOTPORT_FEATURE Parameters;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct RAW_ROOTPORT_PARAMETERS
    {
        uint16_t PortNumber;
        uint16_t PortStatus;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USBUSER_ROOTPORT_PARAMETERS
    {
        Windows::Win32::UsbDrivers::USBUSER_REQUEST_HEADER Header;
        Windows::Win32::UsbDrivers::RAW_ROOTPORT_PARAMETERS Parameters;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USB_CONTROLLER_INFO_0
    {
        uint32_t PciVendorId;
        uint32_t PciDeviceId;
        uint32_t PciRevision;
        uint32_t NumberOfRootPorts;
        Windows::Win32::UsbDrivers::USB_CONTROLLER_FLAVOR ControllerFlavor;
        uint32_t HcFeatureFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USBUSER_CONTROLLER_INFO_0
    {
        Windows::Win32::UsbDrivers::USBUSER_REQUEST_HEADER Header;
        Windows::Win32::UsbDrivers::USB_CONTROLLER_INFO_0 Info0;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USB_UNICODE_NAME
    {
        uint32_t Length;
        uint16_t String[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USBUSER_CONTROLLER_UNICODE_NAME
    {
        Windows::Win32::UsbDrivers::USBUSER_REQUEST_HEADER Header;
        Windows::Win32::UsbDrivers::USB_UNICODE_NAME UnicodeName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USB_PASS_THRU_PARAMETERS
    {
        ::win32::guid FunctionGUID;
        uint32_t ParameterLength;
        uint8_t Parameters[4];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USBUSER_PASS_THRU_REQUEST
    {
        Windows::Win32::UsbDrivers::USBUSER_REQUEST_HEADER Header;
        Windows::Win32::UsbDrivers::USB_PASS_THRU_PARAMETERS PassThru;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USB_POWER_INFO
    {
        Windows::Win32::UsbDrivers::WDMUSB_POWER_STATE SystemState;
        Windows::Win32::UsbDrivers::WDMUSB_POWER_STATE HcDevicePowerState;
        Windows::Win32::UsbDrivers::WDMUSB_POWER_STATE HcDeviceWake;
        Windows::Win32::UsbDrivers::WDMUSB_POWER_STATE HcSystemWake;
        Windows::Win32::UsbDrivers::WDMUSB_POWER_STATE RhDevicePowerState;
        Windows::Win32::UsbDrivers::WDMUSB_POWER_STATE RhDeviceWake;
        Windows::Win32::UsbDrivers::WDMUSB_POWER_STATE RhSystemWake;
        Windows::Win32::UsbDrivers::WDMUSB_POWER_STATE LastSystemSleepState;
        uint8_t CanWakeup;
        uint8_t IsPowered;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USBUSER_POWER_INFO_REQUEST
    {
        Windows::Win32::UsbDrivers::USBUSER_REQUEST_HEADER Header;
        Windows::Win32::UsbDrivers::USB_POWER_INFO PowerInformation;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USB_OPEN_RAW_DEVICE_PARAMETERS
    {
        uint16_t PortStatus;
        uint16_t MaxPacketEp0;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USBUSER_OPEN_RAW_DEVICE
    {
        Windows::Win32::UsbDrivers::USBUSER_REQUEST_HEADER Header;
        Windows::Win32::UsbDrivers::USB_OPEN_RAW_DEVICE_PARAMETERS Parameters;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USB_CLOSE_RAW_DEVICE_PARAMETERS
    {
        uint32_t xxx;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USBUSER_CLOSE_RAW_DEVICE
    {
        Windows::Win32::UsbDrivers::USBUSER_REQUEST_HEADER Header;
        Windows::Win32::UsbDrivers::USB_CLOSE_RAW_DEVICE_PARAMETERS Parameters;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USB_SEND_RAW_COMMAND_PARAMETERS
    {
        uint8_t Usb_bmRequest;
        uint8_t Usb_bRequest;
        uint16_t Usb_wVlaue;
        uint16_t Usb_wIndex;
        uint16_t Usb_wLength;
        uint16_t DeviceAddress;
        uint16_t MaximumPacketSize;
        uint32_t Timeout;
        uint32_t DataLength;
        int32_t UsbdStatusCode;
        uint8_t Data[4];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USBUSER_SEND_RAW_COMMAND
    {
        Windows::Win32::UsbDrivers::USBUSER_REQUEST_HEADER Header;
        Windows::Win32::UsbDrivers::USB_SEND_RAW_COMMAND_PARAMETERS Parameters;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USB_BANDWIDTH_INFO
    {
        uint32_t DeviceCount;
        uint32_t TotalBusBandwidth;
        uint32_t Total32secBandwidth;
        uint32_t AllocedBulkAndControl;
        uint32_t AllocedIso;
        uint32_t AllocedInterrupt_1ms;
        uint32_t AllocedInterrupt_2ms;
        uint32_t AllocedInterrupt_4ms;
        uint32_t AllocedInterrupt_8ms;
        uint32_t AllocedInterrupt_16ms;
        uint32_t AllocedInterrupt_32ms;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USBUSER_BANDWIDTH_INFO_REQUEST
    {
        Windows::Win32::UsbDrivers::USBUSER_REQUEST_HEADER Header;
        Windows::Win32::UsbDrivers::USB_BANDWIDTH_INFO BandwidthInformation;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USB_BUS_STATISTICS_0
    {
        uint32_t DeviceCount;
        Windows::Win32::SystemServices::LARGE_INTEGER CurrentSystemTime;
        uint32_t CurrentUsbFrame;
        uint32_t BulkBytes;
        uint32_t IsoBytes;
        uint32_t InterruptBytes;
        uint32_t ControlDataBytes;
        uint32_t PciInterruptCount;
        uint32_t HardResetCount;
        uint32_t WorkerSignalCount;
        uint32_t CommonBufferBytes;
        uint32_t WorkerIdleTimeMs;
        uint8_t RootHubEnabled;
        uint8_t RootHubDevicePowerState;
        uint8_t Unused;
        uint8_t NameIndex;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USBUSER_BUS_STATISTICS_0_REQUEST
    {
        Windows::Win32::UsbDrivers::USBUSER_REQUEST_HEADER Header;
        Windows::Win32::UsbDrivers::USB_BUS_STATISTICS_0 BusStatistics0;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USB_DRIVER_VERSION_PARAMETERS
    {
        uint32_t DriverTrackingCode;
        uint32_t USBDI_Version;
        uint32_t USBUSER_Version;
        uint8_t CheckedPortDriver;
        uint8_t CheckedMiniportDriver;
        uint16_t USB_Version;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USBUSER_GET_DRIVER_VERSION
    {
        Windows::Win32::UsbDrivers::USBUSER_REQUEST_HEADER Header;
        Windows::Win32::UsbDrivers::USB_DRIVER_VERSION_PARAMETERS Parameters;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USB_USB2HW_VERSION_PARAMETERS
    {
        uint8_t Usb2HwRevision;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USBUSER_GET_USB2HW_VERSION
    {
        Windows::Win32::UsbDrivers::USBUSER_REQUEST_HEADER Header;
        Windows::Win32::UsbDrivers::USB_USB2HW_VERSION_PARAMETERS Parameters;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USBUSER_REFRESH_HCT_REG
    {
        Windows::Win32::UsbDrivers::USBUSER_REQUEST_HEADER Header;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct WINUSB_PIPE_INFORMATION
    {
        Windows::Win32::UsbDrivers::USBD_PIPE_TYPE PipeType;
        uint8_t PipeId;
        uint16_t MaximumPacketSize;
        uint8_t Interval;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct WINUSB_PIPE_INFORMATION_EX
    {
        Windows::Win32::UsbDrivers::USBD_PIPE_TYPE PipeType;
        uint8_t PipeId;
        uint16_t MaximumPacketSize;
        uint8_t Interval;
        uint32_t MaximumBytesPerInterval;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct WINUSB_SETUP_PACKET
    {
        uint8_t RequestType;
        uint8_t Request;
        uint16_t Value;
        uint16_t Index;
        uint16_t Length;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USB_START_TRACKING_FOR_TIME_SYNC_INFORMATION
    {
        Windows::Win32::SystemServices::HANDLE TimeTrackingHandle;
        uint8_t IsStartupDelayTolerable;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USB_STOP_TRACKING_FOR_TIME_SYNC_INFORMATION
    {
        Windows::Win32::SystemServices::HANDLE TimeTrackingHandle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UsbDrivers
{
    struct USB_FRAME_NUMBER_AND_QPC_FOR_TIME_SYNC_INFORMATION
    {
        Windows::Win32::SystemServices::HANDLE TimeTrackingHandle;
        uint32_t InputFrameNumber;
        uint32_t InputMicroFrameNumber;
        Windows::Win32::SystemServices::LARGE_INTEGER QueryPerformanceCounterAtInputFrameOrMicroFrame;
        Windows::Win32::SystemServices::LARGE_INTEGER QueryPerformanceCounterFrequency;
        uint32_t PredictedAccuracyInMicroSeconds;
        uint32_t CurrentGenerationID;
        Windows::Win32::SystemServices::LARGE_INTEGER CurrentQueryPerformanceCounter;
        uint32_t CurrentHardwareFrameNumber;
        uint32_t CurrentHardwareMicroFrameNumber;
        uint32_t CurrentUSBFrameNumber;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MenusAndResources
{
    struct SHELLHOOKINFO
    {
        Windows::Win32::WindowsAndMessaging::HWND hwnd;
        Windows::Win32::DisplayDevices::RECT rc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MenusAndResources
{
    struct HARDWAREHOOKSTRUCT
    {
        Windows::Win32::WindowsAndMessaging::HWND hwnd;
        uint32_t message;
        Windows::Win32::WindowsAndMessaging::WPARAM wParam;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MenusAndResources
{
    struct MDINEXTMENU
    {
        Windows::Win32::MenusAndResources::HMENU hmenuIn;
        Windows::Win32::MenusAndResources::HMENU hmenuNext;
        Windows::Win32::WindowsAndMessaging::HWND hwndNext;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MenusAndResources
{
    struct ACCEL
    {
        uint8_t fVirt;
        uint16_t key;
        uint16_t cmd;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MenusAndResources
{
    struct HTOUCHINPUT__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MenusAndResources
{
    struct HSYNTHETICPOINTERDEVICE__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MenusAndResources
{
    struct TPMPARAMS
    {
        uint32_t cbSize;
        Windows::Win32::DisplayDevices::RECT rcExclude;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MenusAndResources
{
    struct MENUINFO
    {
        uint32_t cbSize;
        uint32_t fMask;
        uint32_t dwStyle;
        uint32_t cyMax;
        Windows::Win32::Gdi::HBRUSH hbrBack;
        uint32_t dwContextHelpID;
        size_t dwMenuData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MenusAndResources
{
    struct MENUGETOBJECTINFO
    {
        uint32_t dwFlags;
        uint32_t uPos;
        Windows::Win32::MenusAndResources::HMENU hmenu;
        void* riid;
        void* pvObj;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MenusAndResources
{
    struct MENUITEMINFOA
    {
        uint32_t cbSize;
        uint32_t fMask;
        uint32_t fType;
        uint32_t fState;
        uint32_t wID;
        Windows::Win32::MenusAndResources::HMENU hSubMenu;
        Windows::Win32::Gdi::HBITMAP hbmpChecked;
        Windows::Win32::Gdi::HBITMAP hbmpUnchecked;
        size_t dwItemData;
        int8_t* dwTypeData;
        uint32_t cch;
        Windows::Win32::Gdi::HBITMAP hbmpItem;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MenusAndResources
{
    struct MENUITEMINFOW
    {
        uint32_t cbSize;
        uint32_t fMask;
        uint32_t fType;
        uint32_t fState;
        uint32_t wID;
        Windows::Win32::MenusAndResources::HMENU hSubMenu;
        Windows::Win32::Gdi::HBITMAP hbmpChecked;
        Windows::Win32::Gdi::HBITMAP hbmpUnchecked;
        size_t dwItemData;
        uint16_t* dwTypeData;
        uint32_t cch;
        Windows::Win32::Gdi::HBITMAP hbmpItem;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MenusAndResources
{
    struct DROPSTRUCT
    {
        Windows::Win32::WindowsAndMessaging::HWND hwndSource;
        Windows::Win32::WindowsAndMessaging::HWND hwndSink;
        uint32_t wFmt;
        size_t dwData;
        Windows::Win32::DisplayDevices::POINT ptDrop;
        uint32_t dwControlData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MenusAndResources
{
    struct MENUITEMTEMPLATEHEADER
    {
        uint16_t versionNumber;
        uint16_t offset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MenusAndResources
{
    struct MENUITEMTEMPLATE
    {
        uint16_t mtOption;
        uint16_t mtID;
        uint16_t mtString[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MenusAndResources
{
    struct ICONINFO
    {
        Windows::Win32::SystemServices::BOOL fIcon;
        uint32_t xHotspot;
        uint32_t yHotspot;
        Windows::Win32::Gdi::HBITMAP hbmMask;
        Windows::Win32::Gdi::HBITMAP hbmColor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MenusAndResources
{
    struct CURSORSHAPE
    {
        int32_t xHotSpot;
        int32_t yHotSpot;
        int32_t cx;
        int32_t cy;
        int32_t cbWidth;
        uint8_t Planes;
        uint8_t BitsPixel;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MenusAndResources
{
    struct ICONINFOEXA
    {
        uint32_t cbSize;
        Windows::Win32::SystemServices::BOOL fIcon;
        uint32_t xHotspot;
        uint32_t yHotspot;
        Windows::Win32::Gdi::HBITMAP hbmMask;
        Windows::Win32::Gdi::HBITMAP hbmColor;
        uint16_t wResID;
        int8_t szModName[260];
        int8_t szResName[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MenusAndResources
{
    struct ICONINFOEXW
    {
        uint32_t cbSize;
        Windows::Win32::SystemServices::BOOL fIcon;
        uint32_t xHotspot;
        uint32_t yHotspot;
        Windows::Win32::Gdi::HBITMAP hbmMask;
        Windows::Win32::Gdi::HBITMAP hbmColor;
        uint16_t wResID;
        uint16_t szModName[260];
        uint16_t szResName[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MenusAndResources
{
    struct TouchPredictionParameters
    {
        uint32_t cbSize;
        uint32_t dwLatency;
        uint32_t dwSampleTime;
        uint32_t bUseHWTimeStamp;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MenusAndResources
{
    struct ICONMETRICSA
    {
        uint32_t cbSize;
        int32_t iHorzSpacing;
        int32_t iVertSpacing;
        int32_t iTitleWrap;
        Windows::Win32::Shell::LOGFONTA lfFont;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MenusAndResources
{
    struct ICONMETRICSW
    {
        uint32_t cbSize;
        int32_t iHorzSpacing;
        int32_t iVertSpacing;
        int32_t iTitleWrap;
        Windows::Win32::Shell::LOGFONTW lfFont;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MenusAndResources
{
    struct CURSORINFO
    {
        uint32_t cbSize;
        uint32_t flags;
        Windows::Win32::Gdi::HCURSOR hCursor;
        Windows::Win32::DisplayDevices::POINT ptScreenPos;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MenusAndResources
{
    struct MENUBARINFO
    {
        uint32_t cbSize;
        Windows::Win32::DisplayDevices::RECT rcBar;
        Windows::Win32::MenusAndResources::HMENU hMenu;
        Windows::Win32::WindowsAndMessaging::HWND hwndMenu;
        int32_t _bitfield;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MenusAndResources
{
    struct HRAWINPUT__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MenusAndResources
{
    struct HGESTUREINFO__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MenusAndResources
{
    struct IndexedResourceQualifier
    {
        uint16_t* name;
        uint16_t* value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MenusAndResources
{
    struct MrmResourceIndexerHandle
    {
        void* handle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MenusAndResources
{
    struct MrmResourceIndexerMessage
    {
        Windows::Win32::MenusAndResources::MrmResourceIndexerMessageSeverity severity;
        uint32_t id;
        uint16_t* text;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct CBT_CREATEWNDA
    {
        Windows::Win32::WindowsAndMessaging::CREATESTRUCTA* lpcs;
        Windows::Win32::WindowsAndMessaging::HWND hwndInsertAfter;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct CBT_CREATEWNDW
    {
        Windows::Win32::WindowsAndMessaging::CREATESTRUCTW* lpcs;
        Windows::Win32::WindowsAndMessaging::HWND hwndInsertAfter;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct CBTACTIVATESTRUCT
    {
        Windows::Win32::SystemServices::BOOL fMouse;
        Windows::Win32::WindowsAndMessaging::HWND hWndActive;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct EVENTMSG
    {
        uint32_t message;
        uint32_t paramL;
        uint32_t paramH;
        uint32_t time;
        Windows::Win32::WindowsAndMessaging::HWND hwnd;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct CWPSTRUCT
    {
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
        Windows::Win32::WindowsAndMessaging::WPARAM wParam;
        uint32_t message;
        Windows::Win32::WindowsAndMessaging::HWND hwnd;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct CWPRETSTRUCT
    {
        Windows::Win32::SystemServices::LRESULT lResult;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
        Windows::Win32::WindowsAndMessaging::WPARAM wParam;
        uint32_t message;
        Windows::Win32::WindowsAndMessaging::HWND hwnd;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct KBDLLHOOKSTRUCT
    {
        uint32_t vkCode;
        uint32_t scanCode;
        uint32_t flags;
        uint32_t time;
        size_t dwExtraInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct MSLLHOOKSTRUCT
    {
        Windows::Win32::DisplayDevices::POINT pt;
        uint32_t mouseData;
        uint32_t flags;
        uint32_t time;
        size_t dwExtraInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct DEBUGHOOKINFO
    {
        uint32_t idThread;
        uint32_t idThreadInstaller;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
        Windows::Win32::WindowsAndMessaging::WPARAM wParam;
        int32_t code;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct MOUSEHOOKSTRUCT
    {
        Windows::Win32::DisplayDevices::POINT pt;
        Windows::Win32::WindowsAndMessaging::HWND hwnd;
        uint32_t wHitTestCode;
        size_t dwExtraInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct MOUSEHOOKSTRUCTEX
    {
        Windows::Win32::WindowsAndMessaging::MOUSEHOOKSTRUCT __AnonymousBase_winuser_L1173_C46;
        uint32_t mouseData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct WNDCLASSEXA
    {
        uint32_t cbSize;
        uint32_t style;
        Windows::Win32::MenusAndResources::WNDPROC* lpfnWndProc;
        int32_t cbClsExtra;
        int32_t cbWndExtra;
        Windows::Win32::SystemServices::HINSTANCE hInstance;
        Windows::Win32::Gdi::HICON hIcon;
        Windows::Win32::Gdi::HCURSOR hCursor;
        Windows::Win32::Gdi::HBRUSH hbrBackground;
        int8_t* lpszMenuName;
        int8_t* lpszClassName;
        Windows::Win32::Gdi::HICON hIconSm;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct WNDCLASSEXW
    {
        uint32_t cbSize;
        uint32_t style;
        Windows::Win32::MenusAndResources::WNDPROC* lpfnWndProc;
        int32_t cbClsExtra;
        int32_t cbWndExtra;
        Windows::Win32::SystemServices::HINSTANCE hInstance;
        Windows::Win32::Gdi::HICON hIcon;
        Windows::Win32::Gdi::HCURSOR hCursor;
        Windows::Win32::Gdi::HBRUSH hbrBackground;
        uint16_t* lpszMenuName;
        uint16_t* lpszClassName;
        Windows::Win32::Gdi::HICON hIconSm;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct WNDCLASSA
    {
        uint32_t style;
        Windows::Win32::MenusAndResources::WNDPROC* lpfnWndProc;
        int32_t cbClsExtra;
        int32_t cbWndExtra;
        Windows::Win32::SystemServices::HINSTANCE hInstance;
        Windows::Win32::Gdi::HICON hIcon;
        Windows::Win32::Gdi::HCURSOR hCursor;
        Windows::Win32::Gdi::HBRUSH hbrBackground;
        int8_t* lpszMenuName;
        int8_t* lpszClassName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct WNDCLASSW
    {
        uint32_t style;
        Windows::Win32::MenusAndResources::WNDPROC* lpfnWndProc;
        int32_t cbClsExtra;
        int32_t cbWndExtra;
        Windows::Win32::SystemServices::HINSTANCE hInstance;
        Windows::Win32::Gdi::HICON hIcon;
        Windows::Win32::Gdi::HCURSOR hCursor;
        Windows::Win32::Gdi::HBRUSH hbrBackground;
        uint16_t* lpszMenuName;
        uint16_t* lpszClassName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct MSG
    {
        Windows::Win32::WindowsAndMessaging::HWND hwnd;
        uint32_t message;
        Windows::Win32::WindowsAndMessaging::WPARAM wParam;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
        uint32_t time;
        Windows::Win32::DisplayDevices::POINT pt;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct MINMAXINFO
    {
        Windows::Win32::DisplayDevices::POINT ptReserved;
        Windows::Win32::DisplayDevices::POINT ptMaxSize;
        Windows::Win32::DisplayDevices::POINT ptMaxPosition;
        Windows::Win32::DisplayDevices::POINT ptMinTrackSize;
        Windows::Win32::DisplayDevices::POINT ptMaxTrackSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct WINDOWPOS
    {
        Windows::Win32::WindowsAndMessaging::HWND hwnd;
        Windows::Win32::WindowsAndMessaging::HWND hwndInsertAfter;
        int32_t x;
        int32_t y;
        int32_t cx;
        int32_t cy;
        uint32_t flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct NCCALCSIZE_PARAMS
    {
        Windows::Win32::DisplayDevices::RECT rgrc[3];
        Windows::Win32::WindowsAndMessaging::WINDOWPOS* lppos;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct CREATESTRUCTA
    {
        void* lpCreateParams;
        Windows::Win32::SystemServices::HINSTANCE hInstance;
        Windows::Win32::MenusAndResources::HMENU hMenu;
        Windows::Win32::WindowsAndMessaging::HWND hwndParent;
        int32_t cy;
        int32_t cx;
        int32_t y;
        int32_t x;
        int32_t style;
        int8_t* lpszName;
        int8_t* lpszClass;
        uint32_t dwExStyle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct CREATESTRUCTW
    {
        void* lpCreateParams;
        Windows::Win32::SystemServices::HINSTANCE hInstance;
        Windows::Win32::MenusAndResources::HMENU hMenu;
        Windows::Win32::WindowsAndMessaging::HWND hwndParent;
        int32_t cy;
        int32_t cx;
        int32_t y;
        int32_t x;
        int32_t style;
        uint16_t* lpszName;
        uint16_t* lpszClass;
        uint32_t dwExStyle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct WINDOWPLACEMENT
    {
        uint32_t length;
        uint32_t flags;
        uint32_t showCmd;
        Windows::Win32::DisplayDevices::POINT ptMinPosition;
        Windows::Win32::DisplayDevices::POINT ptMaxPosition;
        Windows::Win32::DisplayDevices::RECT rcNormalPosition;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct STYLESTRUCT
    {
        uint32_t styleOld;
        uint32_t styleNew;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct BSMINFO
    {
        uint32_t cbSize;
        Windows::Win32::WindowsStationsAndDesktops::HDESK hdesk;
        Windows::Win32::WindowsAndMessaging::HWND hwnd;
        Windows::Win32::Kernel::LUID luid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct UPDATELAYEREDWINDOWINFO
    {
        uint32_t cbSize;
        Windows::Win32::Gdi::HDC hdcDst;
        Windows::Win32::DisplayDevices::POINT* pptDst;
        Windows::Win32::DisplayDevices::SIZE* psize;
        Windows::Win32::Gdi::HDC hdcSrc;
        Windows::Win32::DisplayDevices::POINT* pptSrc;
        uint32_t crKey;
        Windows::Win32::Gdi::BLENDFUNCTION* pblend;
        uint32_t dwFlags;
        Windows::Win32::DisplayDevices::RECT* prcDirty;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct DLGTEMPLATE
    {
        uint32_t style;
        uint32_t dwExtendedStyle;
        uint16_t cdit;
        int16_t x;
        int16_t y;
        int16_t cx;
        int16_t cy;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct DLGITEMTEMPLATE
    {
        uint32_t style;
        uint32_t dwExtendedStyle;
        int16_t x;
        int16_t y;
        int16_t cx;
        int16_t cy;
        uint16_t id;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct MSGBOXPARAMSA
    {
        uint32_t cbSize;
        Windows::Win32::WindowsAndMessaging::HWND hwndOwner;
        Windows::Win32::SystemServices::HINSTANCE hInstance;
        int8_t* lpszText;
        int8_t* lpszCaption;
        uint32_t dwStyle;
        int8_t* lpszIcon;
        size_t dwContextHelpId;
        Windows::Win32::MenusAndResources::MSGBOXCALLBACK* lpfnMsgBoxCallback;
        uint32_t dwLanguageId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct MSGBOXPARAMSW
    {
        uint32_t cbSize;
        Windows::Win32::WindowsAndMessaging::HWND hwndOwner;
        Windows::Win32::SystemServices::HINSTANCE hInstance;
        uint16_t* lpszText;
        uint16_t* lpszCaption;
        uint32_t dwStyle;
        uint16_t* lpszIcon;
        size_t dwContextHelpId;
        Windows::Win32::MenusAndResources::MSGBOXCALLBACK* lpfnMsgBoxCallback;
        uint32_t dwLanguageId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct MDICREATESTRUCTA
    {
        int8_t* szClass;
        int8_t* szTitle;
        Windows::Win32::SystemServices::HANDLE hOwner;
        int32_t x;
        int32_t y;
        int32_t cx;
        int32_t cy;
        uint32_t style;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct MDICREATESTRUCTW
    {
        uint16_t* szClass;
        uint16_t* szTitle;
        Windows::Win32::SystemServices::HANDLE hOwner;
        int32_t x;
        int32_t y;
        int32_t cx;
        int32_t cy;
        uint32_t style;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct CLIENTCREATESTRUCT
    {
        Windows::Win32::SystemServices::HANDLE hWindowMenu;
        uint32_t idFirstChild;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct NONCLIENTMETRICSA
    {
        uint32_t cbSize;
        int32_t iBorderWidth;
        int32_t iScrollWidth;
        int32_t iScrollHeight;
        int32_t iCaptionWidth;
        int32_t iCaptionHeight;
        Windows::Win32::Shell::LOGFONTA lfCaptionFont;
        int32_t iSmCaptionWidth;
        int32_t iSmCaptionHeight;
        Windows::Win32::Shell::LOGFONTA lfSmCaptionFont;
        int32_t iMenuWidth;
        int32_t iMenuHeight;
        Windows::Win32::Shell::LOGFONTA lfMenuFont;
        Windows::Win32::Shell::LOGFONTA lfStatusFont;
        Windows::Win32::Shell::LOGFONTA lfMessageFont;
        int32_t iPaddedBorderWidth;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct NONCLIENTMETRICSW
    {
        uint32_t cbSize;
        int32_t iBorderWidth;
        int32_t iScrollWidth;
        int32_t iScrollHeight;
        int32_t iCaptionWidth;
        int32_t iCaptionHeight;
        Windows::Win32::Shell::LOGFONTW lfCaptionFont;
        int32_t iSmCaptionWidth;
        int32_t iSmCaptionHeight;
        Windows::Win32::Shell::LOGFONTW lfSmCaptionFont;
        int32_t iMenuWidth;
        int32_t iMenuHeight;
        Windows::Win32::Shell::LOGFONTW lfMenuFont;
        Windows::Win32::Shell::LOGFONTW lfStatusFont;
        Windows::Win32::Shell::LOGFONTW lfMessageFont;
        int32_t iPaddedBorderWidth;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct MINIMIZEDMETRICS
    {
        uint32_t cbSize;
        int32_t iWidth;
        int32_t iHorzGap;
        int32_t iVertGap;
        int32_t iArrange;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct ANIMATIONINFO
    {
        uint32_t cbSize;
        int32_t iMinAnimate;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct AUDIODESCRIPTION
    {
        uint32_t cbSize;
        Windows::Win32::SystemServices::BOOL Enabled;
        uint32_t Locale;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct GUITHREADINFO
    {
        uint32_t cbSize;
        uint32_t flags;
        Windows::Win32::WindowsAndMessaging::HWND hwndActive;
        Windows::Win32::WindowsAndMessaging::HWND hwndFocus;
        Windows::Win32::WindowsAndMessaging::HWND hwndCapture;
        Windows::Win32::WindowsAndMessaging::HWND hwndMenuOwner;
        Windows::Win32::WindowsAndMessaging::HWND hwndMoveSize;
        Windows::Win32::WindowsAndMessaging::HWND hwndCaret;
        Windows::Win32::DisplayDevices::RECT rcCaret;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct WINDOWINFO
    {
        uint32_t cbSize;
        Windows::Win32::DisplayDevices::RECT rcWindow;
        Windows::Win32::DisplayDevices::RECT rcClient;
        uint32_t dwStyle;
        uint32_t dwExStyle;
        uint32_t dwWindowStatus;
        uint32_t cxWindowBorders;
        uint32_t cyWindowBorders;
        uint16_t atomWindowType;
        uint16_t wCreatorVersion;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct TITLEBARINFO
    {
        uint32_t cbSize;
        Windows::Win32::DisplayDevices::RECT rcTitleBar;
        uint32_t rgstate[6];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct TITLEBARINFOEX
    {
        uint32_t cbSize;
        Windows::Win32::DisplayDevices::RECT rcTitleBar;
        uint32_t rgstate[6];
        Windows::Win32::DisplayDevices::RECT rgrect[6];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct ALTTABINFO
    {
        uint32_t cbSize;
        int32_t cItems;
        int32_t cColumns;
        int32_t cRows;
        int32_t iColFocus;
        int32_t iRowFocus;
        int32_t cxItem;
        int32_t cyItem;
        Windows::Win32::DisplayDevices::POINT ptStart;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAndMessaging
{
    struct CHANGEFILTERSTRUCT
    {
        uint32_t cbSize;
        uint32_t ExtStatus;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct PAINTSTRUCT
    {
        Windows::Win32::Gdi::HDC hdc;
        Windows::Win32::SystemServices::BOOL fErase;
        Windows::Win32::DisplayDevices::RECT rcPaint;
        Windows::Win32::SystemServices::BOOL fRestore;
        Windows::Win32::SystemServices::BOOL fIncUpdate;
        uint8_t rgbReserved[32];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct DRAWTEXTPARAMS
    {
        uint32_t cbSize;
        int32_t iTabLength;
        int32_t iLeftMargin;
        int32_t iRightMargin;
        uint32_t uiLengthDrawn;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct MONITORINFO
    {
        uint32_t cbSize;
        Windows::Win32::DisplayDevices::RECT rcMonitor;
        Windows::Win32::DisplayDevices::RECT rcWork;
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct MONITORINFOEXA
    {
        Windows::Win32::Gdi::MONITORINFO __AnonymousBase_winuser_L13554_C43;
        int8_t szDevice[32];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Gdi
{
    struct MONITORINFOEXW
    {
        Windows::Win32::Gdi::MONITORINFO __AnonymousBase_winuser_L13558_C43;
        uint16_t szDevice[32];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct MEASUREITEMSTRUCT
    {
        uint32_t CtlType;
        uint32_t CtlID;
        uint32_t itemID;
        uint32_t itemWidth;
        uint32_t itemHeight;
        size_t itemData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct DRAWITEMSTRUCT
    {
        uint32_t CtlType;
        uint32_t CtlID;
        uint32_t itemID;
        uint32_t itemAction;
        uint32_t itemState;
        Windows::Win32::WindowsAndMessaging::HWND hwndItem;
        Windows::Win32::Gdi::HDC hDC;
        Windows::Win32::DisplayDevices::RECT rcItem;
        size_t itemData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct DELETEITEMSTRUCT
    {
        uint32_t CtlType;
        uint32_t CtlID;
        uint32_t itemID;
        Windows::Win32::WindowsAndMessaging::HWND hwndItem;
        size_t itemData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct COMPAREITEMSTRUCT
    {
        uint32_t CtlType;
        uint32_t CtlID;
        Windows::Win32::WindowsAndMessaging::HWND hwndItem;
        uint32_t itemID1;
        size_t itemData1;
        uint32_t itemID2;
        size_t itemData2;
        uint32_t dwLocaleId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct USAGE_PROPERTIES
    {
        uint16_t level;
        uint16_t page;
        uint16_t usage;
        int32_t logicalMinimum;
        int32_t logicalMaximum;
        uint16_t unit;
        uint16_t exponent;
        uint8_t count;
        int32_t physicalMinimum;
        int32_t physicalMaximum;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::PointerInput
{
    struct POINTER_INFO
    {
        uint32_t pointerType;
        uint32_t pointerId;
        uint32_t frameId;
        uint32_t pointerFlags;
        Windows::Win32::SystemServices::HANDLE sourceDevice;
        Windows::Win32::WindowsAndMessaging::HWND hwndTarget;
        Windows::Win32::DisplayDevices::POINT ptPixelLocation;
        Windows::Win32::DisplayDevices::POINT ptHimetricLocation;
        Windows::Win32::DisplayDevices::POINT ptPixelLocationRaw;
        Windows::Win32::DisplayDevices::POINT ptHimetricLocationRaw;
        uint32_t dwTime;
        uint32_t historyCount;
        int32_t InputData;
        uint32_t dwKeyStates;
        uint64_t PerformanceCount;
        Windows::Win32::PointerInput::POINTER_BUTTON_CHANGE_TYPE ButtonChangeType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::PointerInput
{
    struct POINTER_TOUCH_INFO
    {
        Windows::Win32::PointerInput::POINTER_INFO pointerInfo;
        uint32_t touchFlags;
        uint32_t touchMask;
        Windows::Win32::DisplayDevices::RECT rcContact;
        Windows::Win32::DisplayDevices::RECT rcContactRaw;
        uint32_t orientation;
        uint32_t pressure;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::PointerInput
{
    struct POINTER_PEN_INFO
    {
        Windows::Win32::PointerInput::POINTER_INFO pointerInfo;
        uint32_t penFlags;
        uint32_t penMask;
        uint32_t pressure;
        uint32_t rotation;
        int32_t tiltX;
        int32_t tiltY;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct POINTER_TYPE_INFO
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::PointerInput::POINTER_TOUCH_INFO touchInfo;
            Windows::Win32::PointerInput::POINTER_PEN_INFO penInfo;
        };
        uint32_t type;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct INPUT_INJECTION_VALUE
    {
        uint16_t page;
        uint16_t usage;
        int32_t value;
        uint16_t index;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct TOUCH_HIT_TESTING_PROXIMITY_EVALUATION
    {
        uint16_t score;
        Windows::Win32::DisplayDevices::POINT adjustedPoint;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct TOUCH_HIT_TESTING_INPUT
    {
        uint32_t pointerId;
        Windows::Win32::DisplayDevices::POINT point;
        Windows::Win32::DisplayDevices::RECT boundingBox;
        Windows::Win32::DisplayDevices::RECT nonOccludedBoundingBox;
        uint32_t orientation;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct SCROLLINFO
    {
        uint32_t cbSize;
        uint32_t fMask;
        int32_t nMin;
        int32_t nMax;
        uint32_t nPage;
        int32_t nPos;
        int32_t nTrackPos;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct SCROLLBARINFO
    {
        uint32_t cbSize;
        Windows::Win32::DisplayDevices::RECT rcScrollBar;
        int32_t dxyLineButton;
        int32_t xyThumbTop;
        int32_t xyThumbBottom;
        int32_t reserved;
        uint32_t rgstate[6];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct COMBOBOXINFO
    {
        uint32_t cbSize;
        Windows::Win32::DisplayDevices::RECT rcItem;
        Windows::Win32::DisplayDevices::RECT rcButton;
        uint32_t stateButton;
        Windows::Win32::WindowsAndMessaging::HWND hwndCombo;
        Windows::Win32::WindowsAndMessaging::HWND hwndItem;
        Windows::Win32::WindowsAndMessaging::HWND hwndList;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct POINTER_DEVICE_INFO
    {
        uint32_t displayOrientation;
        Windows::Win32::SystemServices::HANDLE device;
        Windows::Win32::Controls::POINTER_DEVICE_TYPE pointerDeviceType;
        intptr_t monitor;
        uint32_t startingCursorId;
        uint16_t maxActiveContacts;
        uint16_t productString[520];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct POINTER_DEVICE_PROPERTY
    {
        int32_t logicalMin;
        int32_t logicalMax;
        int32_t physicalMin;
        int32_t physicalMax;
        uint32_t unit;
        uint32_t unitExponent;
        uint16_t usagePageId;
        uint16_t usageId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct POINTER_DEVICE_CURSOR_INFO
    {
        uint32_t cursorId;
        Windows::Win32::Controls::POINTER_DEVICE_CURSOR_TYPE cursor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Controls
{
    struct INPUT_MESSAGE_SOURCE
    {
        Windows::Win32::Controls::INPUT_MESSAGE_DEVICE_TYPE deviceType;
        Windows::Win32::Controls::INPUT_MESSAGE_ORIGIN_ID originId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct WTSSESSION_NOTIFICATION
    {
        uint32_t cbSize;
        uint32_t dwSessionId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::KeyboardAndMouseInput
{
    struct MOUSEMOVEPOINT
    {
        int32_t x;
        int32_t y;
        uint32_t time;
        size_t dwExtraInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::KeyboardAndMouseInput
{
    struct TRACKMOUSEEVENT
    {
        uint32_t cbSize;
        uint32_t dwFlags;
        Windows::Win32::WindowsAndMessaging::HWND hwndTrack;
        uint32_t dwHoverTime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::KeyboardAndMouseInput
{
    struct MOUSEINPUT
    {
        int32_t dx;
        int32_t dy;
        uint32_t mouseData;
        uint32_t dwFlags;
        uint32_t time;
        size_t dwExtraInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::KeyboardAndMouseInput
{
    struct KEYBDINPUT
    {
        uint16_t wVk;
        uint16_t wScan;
        uint32_t dwFlags;
        uint32_t time;
        size_t dwExtraInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::KeyboardAndMouseInput
{
    struct HARDWAREINPUT
    {
        uint32_t uMsg;
        uint16_t wParamL;
        uint16_t wParamH;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::KeyboardAndMouseInput
{
    struct INPUT
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::KeyboardAndMouseInput::MOUSEINPUT mi;
            Windows::Win32::KeyboardAndMouseInput::KEYBDINPUT ki;
            Windows::Win32::KeyboardAndMouseInput::HARDWAREINPUT hi;
        };
        uint32_t type;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::KeyboardAndMouseInput
{
    struct LASTINPUTINFO
    {
        uint32_t cbSize;
        uint32_t dwTime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::KeyboardAndMouseInput
{
    struct RAWINPUTHEADER
    {
        uint32_t dwType;
        uint32_t dwSize;
        Windows::Win32::SystemServices::HANDLE hDevice;
        Windows::Win32::WindowsAndMessaging::WPARAM wParam;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::KeyboardAndMouseInput
{
    struct RAWMOUSE
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint16_t usButtonFlags;
                uint16_t usButtonData;
            };
            uint32_t ulButtons;
            _Anonymous_e__Struct Anonymous;
        };
        uint16_t usFlags;
        _Anonymous_e__Union Anonymous;
        uint32_t ulRawButtons;
        int32_t lLastX;
        int32_t lLastY;
        uint32_t ulExtraInformation;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::KeyboardAndMouseInput
{
    struct RAWKEYBOARD
    {
        uint16_t MakeCode;
        uint16_t Flags;
        uint16_t Reserved;
        uint16_t VKey;
        uint32_t Message;
        uint32_t ExtraInformation;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::KeyboardAndMouseInput
{
    struct RAWHID
    {
        uint32_t dwSizeHid;
        uint32_t dwCount;
        uint8_t bRawData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::KeyboardAndMouseInput
{
    struct RAWINPUT
    {
        union _data_e__Union
        {
            Windows::Win32::KeyboardAndMouseInput::RAWMOUSE mouse;
            Windows::Win32::KeyboardAndMouseInput::RAWKEYBOARD keyboard;
            Windows::Win32::KeyboardAndMouseInput::RAWHID hid;
        };
        Windows::Win32::KeyboardAndMouseInput::RAWINPUTHEADER header;
        _data_e__Union data;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::KeyboardAndMouseInput
{
    struct RID_DEVICE_INFO_MOUSE
    {
        uint32_t dwId;
        uint32_t dwNumberOfButtons;
        uint32_t dwSampleRate;
        Windows::Win32::SystemServices::BOOL fHasHorizontalWheel;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::KeyboardAndMouseInput
{
    struct RID_DEVICE_INFO_KEYBOARD
    {
        uint32_t dwType;
        uint32_t dwSubType;
        uint32_t dwKeyboardMode;
        uint32_t dwNumberOfFunctionKeys;
        uint32_t dwNumberOfIndicators;
        uint32_t dwNumberOfKeysTotal;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::KeyboardAndMouseInput
{
    struct RID_DEVICE_INFO_HID
    {
        uint32_t dwVendorId;
        uint32_t dwProductId;
        uint32_t dwVersionNumber;
        uint16_t usUsagePage;
        uint16_t usUsage;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::KeyboardAndMouseInput
{
    struct RID_DEVICE_INFO
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::KeyboardAndMouseInput::RID_DEVICE_INFO_MOUSE mouse;
            Windows::Win32::KeyboardAndMouseInput::RID_DEVICE_INFO_KEYBOARD keyboard;
            Windows::Win32::KeyboardAndMouseInput::RID_DEVICE_INFO_HID hid;
        };
        uint32_t cbSize;
        uint32_t dwType;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::KeyboardAndMouseInput
{
    struct RAWINPUTDEVICE
    {
        uint16_t usUsagePage;
        uint16_t usUsage;
        uint32_t dwFlags;
        Windows::Win32::WindowsAndMessaging::HWND hwndTarget;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::KeyboardAndMouseInput
{
    struct RAWINPUTDEVICELIST
    {
        Windows::Win32::SystemServices::HANDLE hDevice;
        uint32_t dwType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsStationsAndDesktops
{
    struct USEROBJECTFLAGS
    {
        Windows::Win32::SystemServices::BOOL fInherit;
        Windows::Win32::SystemServices::BOOL fReserved;
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DataExchange
{
    struct COPYDATASTRUCT
    {
        size_t dwData;
        uint32_t cbData;
        void* lpData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct POWERBROADCAST_SETTING
    {
        ::win32::guid PowerSetting;
        uint32_t DataLength;
        uint8_t Data[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct FLASHWINFO
    {
        uint32_t cbSize;
        Windows::Win32::WindowsAndMessaging::HWND hwnd;
        uint32_t dwFlags;
        uint32_t uCount;
        uint32_t dwTimeout;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TouchInput
{
    struct TOUCHINPUT
    {
        int32_t x;
        int32_t y;
        Windows::Win32::SystemServices::HANDLE hSource;
        uint32_t dwID;
        uint32_t dwFlags;
        uint32_t dwMask;
        uint32_t dwTime;
        size_t dwExtraInfo;
        uint32_t cxContact;
        uint32_t cyContact;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TouchInput
{
    struct GESTUREINFO
    {
        uint32_t cbSize;
        uint32_t dwFlags;
        uint32_t dwID;
        Windows::Win32::WindowsAndMessaging::HWND hwndTarget;
        Windows::Win32::DisplayDevices::POINTS ptsLocation;
        uint32_t dwInstanceID;
        uint32_t dwSequenceID;
        uint64_t ullArguments;
        uint32_t cbExtraArgs;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TouchInput
{
    struct GESTURENOTIFYSTRUCT
    {
        uint32_t cbSize;
        uint32_t dwFlags;
        Windows::Win32::WindowsAndMessaging::HWND hwndTarget;
        Windows::Win32::DisplayDevices::POINTS ptsLocation;
        uint32_t dwInstanceID;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TouchInput
{
    struct GESTURECONFIG
    {
        uint32_t dwID;
        uint32_t dwWant;
        uint32_t dwBlock;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::PointerInput
{
    struct INPUT_TRANSFORM
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                float _11;
                float _12;
                float _13;
                float _14;
                float _21;
                float _22;
                float _23;
                float _24;
                float _31;
                float _32;
                float _33;
                float _34;
                float _41;
                float _42;
                float _43;
                float _44;
            };
            _Anonymous_e__Struct Anonymous;
            float m[16];
        };
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct HELPINFO
    {
        uint32_t cbSize;
        int32_t iContextType;
        int32_t iCtrlId;
        Windows::Win32::SystemServices::HANDLE hItemHandle;
        size_t dwContextId;
        Windows::Win32::DisplayDevices::POINT MousePos;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct MULTIKEYHELPA
    {
        uint32_t mkSize;
        int8_t mkKeylist;
        int8_t szKeyphrase[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct MULTIKEYHELPW
    {
        uint32_t mkSize;
        uint16_t mkKeylist;
        uint16_t szKeyphrase[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct HELPWININFOA
    {
        int32_t wStructSize;
        int32_t x;
        int32_t y;
        int32_t dx;
        int32_t dy;
        int32_t wMax;
        int8_t rgchMember[2];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct HELPWININFOW
    {
        int32_t wStructSize;
        int32_t x;
        int32_t y;
        int32_t dx;
        int32_t dy;
        int32_t wMax;
        uint16_t rgchMember[2];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAccessibility
{
    struct SERIALKEYSA
    {
        uint32_t cbSize;
        uint32_t dwFlags;
        int8_t* lpszActivePort;
        int8_t* lpszPort;
        uint32_t iBaudRate;
        uint32_t iPortState;
        uint32_t iActive;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAccessibility
{
    struct SERIALKEYSW
    {
        uint32_t cbSize;
        uint32_t dwFlags;
        uint16_t* lpszActivePort;
        uint16_t* lpszPort;
        uint32_t iBaudRate;
        uint32_t iPortState;
        uint32_t iActive;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAccessibility
{
    struct HIGHCONTRASTA
    {
        uint32_t cbSize;
        uint32_t dwFlags;
        int8_t* lpszDefaultScheme;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAccessibility
{
    struct HIGHCONTRASTW
    {
        uint32_t cbSize;
        uint32_t dwFlags;
        uint16_t* lpszDefaultScheme;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAccessibility
{
    struct FILTERKEYS
    {
        uint32_t cbSize;
        uint32_t dwFlags;
        uint32_t iWaitMSec;
        uint32_t iDelayMSec;
        uint32_t iRepeatMSec;
        uint32_t iBounceMSec;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAccessibility
{
    struct STICKYKEYS
    {
        uint32_t cbSize;
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAccessibility
{
    struct MOUSEKEYS
    {
        uint32_t cbSize;
        uint32_t dwFlags;
        uint32_t iMaxSpeed;
        uint32_t iTimeToMaxSpeed;
        uint32_t iCtrlSpeed;
        uint32_t dwReserved1;
        uint32_t dwReserved2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAccessibility
{
    struct ACCESSTIMEOUT
    {
        uint32_t cbSize;
        uint32_t dwFlags;
        uint32_t iTimeOutMSec;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAccessibility
{
    struct SOUNDSENTRYA
    {
        uint32_t cbSize;
        uint32_t dwFlags;
        uint32_t iFSTextEffect;
        uint32_t iFSTextEffectMSec;
        uint32_t iFSTextEffectColorBits;
        uint32_t iFSGrafEffect;
        uint32_t iFSGrafEffectMSec;
        uint32_t iFSGrafEffectColor;
        uint32_t iWindowsEffect;
        uint32_t iWindowsEffectMSec;
        int8_t* lpszWindowsEffectDLL;
        uint32_t iWindowsEffectOrdinal;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAccessibility
{
    struct SOUNDSENTRYW
    {
        uint32_t cbSize;
        uint32_t dwFlags;
        uint32_t iFSTextEffect;
        uint32_t iFSTextEffectMSec;
        uint32_t iFSTextEffectColorBits;
        uint32_t iFSGrafEffect;
        uint32_t iFSGrafEffectMSec;
        uint32_t iFSGrafEffectColor;
        uint32_t iWindowsEffect;
        uint32_t iWindowsEffectMSec;
        uint16_t* lpszWindowsEffectDLL;
        uint32_t iWindowsEffectOrdinal;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAccessibility
{
    struct TOGGLEKEYS
    {
        uint32_t cbSize;
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Fax
{
    struct FAX_LOG_CATEGORYA
    {
        int8_t* Name;
        uint32_t Category;
        uint32_t Level;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Fax
{
    struct FAX_LOG_CATEGORYW
    {
        uint16_t* Name;
        uint32_t Category;
        uint32_t Level;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Fax
{
    struct FAX_TIME
    {
        uint16_t Hour;
        uint16_t Minute;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Fax
{
    struct FAX_CONFIGURATIONA
    {
        uint32_t SizeOfStruct;
        uint32_t Retries;
        uint32_t RetryDelay;
        uint32_t DirtyDays;
        Windows::Win32::SystemServices::BOOL Branding;
        Windows::Win32::SystemServices::BOOL UseDeviceTsid;
        Windows::Win32::SystemServices::BOOL ServerCp;
        Windows::Win32::SystemServices::BOOL PauseServerQueue;
        Windows::Win32::Fax::FAX_TIME StartCheapTime;
        Windows::Win32::Fax::FAX_TIME StopCheapTime;
        Windows::Win32::SystemServices::BOOL ArchiveOutgoingFaxes;
        int8_t* ArchiveDirectory;
        int8_t* Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Fax
{
    struct FAX_CONFIGURATIONW
    {
        uint32_t SizeOfStruct;
        uint32_t Retries;
        uint32_t RetryDelay;
        uint32_t DirtyDays;
        Windows::Win32::SystemServices::BOOL Branding;
        Windows::Win32::SystemServices::BOOL UseDeviceTsid;
        Windows::Win32::SystemServices::BOOL ServerCp;
        Windows::Win32::SystemServices::BOOL PauseServerQueue;
        Windows::Win32::Fax::FAX_TIME StartCheapTime;
        Windows::Win32::Fax::FAX_TIME StopCheapTime;
        Windows::Win32::SystemServices::BOOL ArchiveOutgoingFaxes;
        uint16_t* ArchiveDirectory;
        uint16_t* Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Fax
{
    struct FAX_DEVICE_STATUSA
    {
        uint32_t SizeOfStruct;
        int8_t* CallerId;
        int8_t* Csid;
        uint32_t CurrentPage;
        uint32_t DeviceId;
        int8_t* DeviceName;
        int8_t* DocumentName;
        uint32_t JobType;
        int8_t* PhoneNumber;
        int8_t* RoutingString;
        int8_t* SenderName;
        int8_t* RecipientName;
        uint32_t Size;
        Windows::Win32::WindowsProgramming::FILETIME StartTime;
        uint32_t Status;
        int8_t* StatusString;
        Windows::Win32::WindowsProgramming::FILETIME SubmittedTime;
        uint32_t TotalPages;
        int8_t* Tsid;
        int8_t* UserName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Fax
{
    struct FAX_DEVICE_STATUSW
    {
        uint32_t SizeOfStruct;
        uint16_t* CallerId;
        uint16_t* Csid;
        uint32_t CurrentPage;
        uint32_t DeviceId;
        uint16_t* DeviceName;
        uint16_t* DocumentName;
        uint32_t JobType;
        uint16_t* PhoneNumber;
        uint16_t* RoutingString;
        uint16_t* SenderName;
        uint16_t* RecipientName;
        uint32_t Size;
        Windows::Win32::WindowsProgramming::FILETIME StartTime;
        uint32_t Status;
        uint16_t* StatusString;
        Windows::Win32::WindowsProgramming::FILETIME SubmittedTime;
        uint32_t TotalPages;
        uint16_t* Tsid;
        uint16_t* UserName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Fax
{
    struct FAX_JOB_ENTRYA
    {
        uint32_t SizeOfStruct;
        uint32_t JobId;
        int8_t* UserName;
        uint32_t JobType;
        uint32_t QueueStatus;
        uint32_t Status;
        uint32_t Size;
        uint32_t PageCount;
        int8_t* RecipientNumber;
        int8_t* RecipientName;
        int8_t* Tsid;
        int8_t* SenderName;
        int8_t* SenderCompany;
        int8_t* SenderDept;
        int8_t* BillingCode;
        uint32_t ScheduleAction;
        Windows::Win32::WindowsProgramming::SYSTEMTIME ScheduleTime;
        uint32_t DeliveryReportType;
        int8_t* DeliveryReportAddress;
        int8_t* DocumentName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Fax
{
    struct FAX_JOB_ENTRYW
    {
        uint32_t SizeOfStruct;
        uint32_t JobId;
        uint16_t* UserName;
        uint32_t JobType;
        uint32_t QueueStatus;
        uint32_t Status;
        uint32_t Size;
        uint32_t PageCount;
        uint16_t* RecipientNumber;
        uint16_t* RecipientName;
        uint16_t* Tsid;
        uint16_t* SenderName;
        uint16_t* SenderCompany;
        uint16_t* SenderDept;
        uint16_t* BillingCode;
        uint32_t ScheduleAction;
        Windows::Win32::WindowsProgramming::SYSTEMTIME ScheduleTime;
        uint32_t DeliveryReportType;
        uint16_t* DeliveryReportAddress;
        uint16_t* DocumentName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Fax
{
    struct FAX_PORT_INFOA
    {
        uint32_t SizeOfStruct;
        uint32_t DeviceId;
        uint32_t State;
        uint32_t Flags;
        uint32_t Rings;
        uint32_t Priority;
        int8_t* DeviceName;
        int8_t* Tsid;
        int8_t* Csid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Fax
{
    struct FAX_PORT_INFOW
    {
        uint32_t SizeOfStruct;
        uint32_t DeviceId;
        uint32_t State;
        uint32_t Flags;
        uint32_t Rings;
        uint32_t Priority;
        uint16_t* DeviceName;
        uint16_t* Tsid;
        uint16_t* Csid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Fax
{
    struct FAX_ROUTING_METHODA
    {
        uint32_t SizeOfStruct;
        uint32_t DeviceId;
        Windows::Win32::SystemServices::BOOL Enabled;
        int8_t* DeviceName;
        int8_t* Guid;
        int8_t* FriendlyName;
        int8_t* FunctionName;
        int8_t* ExtensionImageName;
        int8_t* ExtensionFriendlyName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Fax
{
    struct FAX_ROUTING_METHODW
    {
        uint32_t SizeOfStruct;
        uint32_t DeviceId;
        Windows::Win32::SystemServices::BOOL Enabled;
        uint16_t* DeviceName;
        uint16_t* Guid;
        uint16_t* FriendlyName;
        uint16_t* FunctionName;
        uint16_t* ExtensionImageName;
        uint16_t* ExtensionFriendlyName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Fax
{
    struct FAX_GLOBAL_ROUTING_INFOA
    {
        uint32_t SizeOfStruct;
        uint32_t Priority;
        int8_t* Guid;
        int8_t* FriendlyName;
        int8_t* FunctionName;
        int8_t* ExtensionImageName;
        int8_t* ExtensionFriendlyName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Fax
{
    struct FAX_GLOBAL_ROUTING_INFOW
    {
        uint32_t SizeOfStruct;
        uint32_t Priority;
        uint16_t* Guid;
        uint16_t* FriendlyName;
        uint16_t* FunctionName;
        uint16_t* ExtensionImageName;
        uint16_t* ExtensionFriendlyName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Fax
{
    struct FAX_COVERPAGE_INFOA
    {
        uint32_t SizeOfStruct;
        int8_t* CoverPageName;
        Windows::Win32::SystemServices::BOOL UseServerCoverPage;
        int8_t* RecName;
        int8_t* RecFaxNumber;
        int8_t* RecCompany;
        int8_t* RecStreetAddress;
        int8_t* RecCity;
        int8_t* RecState;
        int8_t* RecZip;
        int8_t* RecCountry;
        int8_t* RecTitle;
        int8_t* RecDepartment;
        int8_t* RecOfficeLocation;
        int8_t* RecHomePhone;
        int8_t* RecOfficePhone;
        int8_t* SdrName;
        int8_t* SdrFaxNumber;
        int8_t* SdrCompany;
        int8_t* SdrAddress;
        int8_t* SdrTitle;
        int8_t* SdrDepartment;
        int8_t* SdrOfficeLocation;
        int8_t* SdrHomePhone;
        int8_t* SdrOfficePhone;
        int8_t* Note;
        int8_t* Subject;
        Windows::Win32::WindowsProgramming::SYSTEMTIME TimeSent;
        uint32_t PageCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Fax
{
    struct FAX_COVERPAGE_INFOW
    {
        uint32_t SizeOfStruct;
        uint16_t* CoverPageName;
        Windows::Win32::SystemServices::BOOL UseServerCoverPage;
        uint16_t* RecName;
        uint16_t* RecFaxNumber;
        uint16_t* RecCompany;
        uint16_t* RecStreetAddress;
        uint16_t* RecCity;
        uint16_t* RecState;
        uint16_t* RecZip;
        uint16_t* RecCountry;
        uint16_t* RecTitle;
        uint16_t* RecDepartment;
        uint16_t* RecOfficeLocation;
        uint16_t* RecHomePhone;
        uint16_t* RecOfficePhone;
        uint16_t* SdrName;
        uint16_t* SdrFaxNumber;
        uint16_t* SdrCompany;
        uint16_t* SdrAddress;
        uint16_t* SdrTitle;
        uint16_t* SdrDepartment;
        uint16_t* SdrOfficeLocation;
        uint16_t* SdrHomePhone;
        uint16_t* SdrOfficePhone;
        uint16_t* Note;
        uint16_t* Subject;
        Windows::Win32::WindowsProgramming::SYSTEMTIME TimeSent;
        uint32_t PageCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Fax
{
    struct FAX_JOB_PARAMA
    {
        uint32_t SizeOfStruct;
        int8_t* RecipientNumber;
        int8_t* RecipientName;
        int8_t* Tsid;
        int8_t* SenderName;
        int8_t* SenderCompany;
        int8_t* SenderDept;
        int8_t* BillingCode;
        uint32_t ScheduleAction;
        Windows::Win32::WindowsProgramming::SYSTEMTIME ScheduleTime;
        uint32_t DeliveryReportType;
        int8_t* DeliveryReportAddress;
        int8_t* DocumentName;
        uint32_t CallHandle;
        size_t Reserved[3];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Fax
{
    struct FAX_JOB_PARAMW
    {
        uint32_t SizeOfStruct;
        uint16_t* RecipientNumber;
        uint16_t* RecipientName;
        uint16_t* Tsid;
        uint16_t* SenderName;
        uint16_t* SenderCompany;
        uint16_t* SenderDept;
        uint16_t* BillingCode;
        uint32_t ScheduleAction;
        Windows::Win32::WindowsProgramming::SYSTEMTIME ScheduleTime;
        uint32_t DeliveryReportType;
        uint16_t* DeliveryReportAddress;
        uint16_t* DocumentName;
        uint32_t CallHandle;
        size_t Reserved[3];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Fax
{
    struct FAX_EVENTA
    {
        uint32_t SizeOfStruct;
        Windows::Win32::WindowsProgramming::FILETIME TimeStamp;
        uint32_t DeviceId;
        uint32_t EventId;
        uint32_t JobId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Fax
{
    struct FAX_EVENTW
    {
        uint32_t SizeOfStruct;
        Windows::Win32::WindowsProgramming::FILETIME TimeStamp;
        uint32_t DeviceId;
        uint32_t EventId;
        uint32_t JobId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Fax
{
    struct FAX_PRINT_INFOA
    {
        uint32_t SizeOfStruct;
        int8_t* DocName;
        int8_t* RecipientName;
        int8_t* RecipientNumber;
        int8_t* SenderName;
        int8_t* SenderCompany;
        int8_t* SenderDept;
        int8_t* SenderBillingCode;
        int8_t* Reserved;
        int8_t* DrEmailAddress;
        int8_t* OutputFileName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Fax
{
    struct FAX_PRINT_INFOW
    {
        uint32_t SizeOfStruct;
        uint16_t* DocName;
        uint16_t* RecipientName;
        uint16_t* RecipientNumber;
        uint16_t* SenderName;
        uint16_t* SenderCompany;
        uint16_t* SenderDept;
        uint16_t* SenderBillingCode;
        uint16_t* Reserved;
        uint16_t* DrEmailAddress;
        uint16_t* OutputFileName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Fax
{
    struct FAX_CONTEXT_INFOA
    {
        uint32_t SizeOfStruct;
        Windows::Win32::Gdi::HDC hDC;
        int8_t ServerName[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Fax
{
    struct FAX_CONTEXT_INFOW
    {
        uint32_t SizeOfStruct;
        Windows::Win32::Gdi::HDC hDC;
        uint16_t ServerName[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Fax
{
    struct FAX_SEND
    {
        uint32_t SizeOfStruct;
        uint16_t* FileName;
        uint16_t* CallerName;
        uint16_t* CallerNumber;
        uint16_t* ReceiverName;
        uint16_t* ReceiverNumber;
        Windows::Win32::SystemServices::BOOL Branding;
        uint32_t CallHandle;
        uint32_t Reserved[3];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Fax
{
    struct FAX_RECEIVE
    {
        uint32_t SizeOfStruct;
        uint16_t* FileName;
        uint16_t* ReceiverName;
        uint16_t* ReceiverNumber;
        uint32_t Reserved[4];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Fax
{
    struct FAX_DEV_STATUS
    {
        uint32_t SizeOfStruct;
        uint32_t StatusId;
        uint32_t StringId;
        uint32_t PageCount;
        uint16_t* CSI;
        uint16_t* CallerId;
        uint16_t* RoutingInfo;
        uint32_t ErrorCode;
        uint32_t Reserved[3];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Fax
{
    struct FAX_ROUTE_CALLBACKROUTINES
    {
        uint32_t SizeOfStruct;
        Windows::Win32::Fax::PFAXROUTEADDFILE* FaxRouteAddFile;
        Windows::Win32::Fax::PFAXROUTEDELETEFILE* FaxRouteDeleteFile;
        Windows::Win32::Fax::PFAXROUTEGETFILE* FaxRouteGetFile;
        Windows::Win32::Fax::PFAXROUTEENUMFILES* FaxRouteEnumFiles;
        Windows::Win32::Fax::PFAXROUTEMODIFYROUTINGDATA* FaxRouteModifyRoutingData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Fax
{
    struct FAX_ROUTE
    {
        uint32_t SizeOfStruct;
        uint32_t JobId;
        uint64_t ElapsedTime;
        uint64_t ReceiveTime;
        uint32_t PageCount;
        uint16_t* Csid;
        uint16_t* Tsid;
        uint16_t* CallerId;
        uint16_t* RoutingInfo;
        uint16_t* ReceiverName;
        uint16_t* ReceiverNumber;
        uint16_t* DeviceName;
        uint32_t DeviceId;
        uint8_t* RoutingInfoData;
        uint32_t RoutingInfoDataSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct TRANSACTION_NOTIFICATION
    {
        void* TransactionKey;
        uint32_t TransactionNotification;
        Windows::Win32::SystemServices::LARGE_INTEGER TmVirtualClock;
        uint32_t ArgumentLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT
    {
        ::win32::guid EnlistmentId;
        ::win32::guid UOW;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT
    {
        ::win32::guid TmIdentity;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT
    {
        uint32_t SavepointId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT
    {
        uint32_t PropagationCookie;
        ::win32::guid UOW;
        ::win32::guid TmIdentity;
        uint32_t BufferLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT
    {
        uint32_t MarshalCookie;
        ::win32::guid UOW;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct KCRM_MARSHAL_HEADER
    {
        uint32_t VersionMajor;
        uint32_t VersionMinor;
        uint32_t NumProtocols;
        uint32_t Unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct KCRM_TRANSACTION_BLOB
    {
        ::win32::guid UOW;
        ::win32::guid TmIdentity;
        uint32_t IsolationLevel;
        uint32_t IsolationFlags;
        uint32_t Timeout;
        uint16_t Description[64];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct KCRM_PROTOCOL_BLOB
    {
        ::win32::guid ProtocolId;
        uint32_t StaticInfoLength;
        uint32_t TransactionIdInfoLength;
        uint32_t Unused1;
        uint32_t Unused2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct DISK_SPACE_INFORMATION
    {
        uint64_t ActualTotalAllocationUnits;
        uint64_t ActualAvailableAllocationUnits;
        uint64_t ActualPoolUnavailableAllocationUnits;
        uint64_t CallerTotalAllocationUnits;
        uint64_t CallerAvailableAllocationUnits;
        uint64_t CallerPoolUnavailableAllocationUnits;
        uint64_t UsedAllocationUnits;
        uint64_t TotalReservedAllocationUnits;
        uint64_t VolumeStorageReserveAllocationUnits;
        uint64_t AvailableCommittedAllocationUnits;
        uint64_t PoolAvailableAllocationUnits;
        uint32_t SectorsPerAllocationUnit;
        uint32_t BytesPerSector;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct WIN32_FILE_ATTRIBUTE_DATA
    {
        uint32_t dwFileAttributes;
        Windows::Win32::WindowsProgramming::FILETIME ftCreationTime;
        Windows::Win32::WindowsProgramming::FILETIME ftLastAccessTime;
        Windows::Win32::WindowsProgramming::FILETIME ftLastWriteTime;
        uint32_t nFileSizeHigh;
        uint32_t nFileSizeLow;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct BY_HANDLE_FILE_INFORMATION
    {
        uint32_t dwFileAttributes;
        Windows::Win32::WindowsProgramming::FILETIME ftCreationTime;
        Windows::Win32::WindowsProgramming::FILETIME ftLastAccessTime;
        Windows::Win32::WindowsProgramming::FILETIME ftLastWriteTime;
        uint32_t dwVolumeSerialNumber;
        uint32_t nFileSizeHigh;
        uint32_t nFileSizeLow;
        uint32_t nNumberOfLinks;
        uint32_t nFileIndexHigh;
        uint32_t nFileIndexLow;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct CREATEFILE2_EXTENDED_PARAMETERS
    {
        uint32_t dwSize;
        uint32_t dwFileAttributes;
        uint32_t dwFileFlags;
        uint32_t dwSecurityQosFlags;
        Windows::Win32::SystemServices::SECURITY_ATTRIBUTES* lpSecurityAttributes;
        Windows::Win32::SystemServices::HANDLE hTemplateFile;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct WIN32_FIND_STREAM_DATA
    {
        Windows::Win32::SystemServices::LARGE_INTEGER StreamSize;
        uint16_t cStreamName[296];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct EFS_CERTIFICATE_BLOB
    {
        uint32_t dwCertEncodingType;
        uint32_t cbData;
        uint8_t* pbData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct EFS_HASH_BLOB
    {
        uint32_t cbData;
        uint8_t* pbData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct EFS_RPC_BLOB
    {
        uint32_t cbData;
        uint8_t* pbData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct EFS_PIN_BLOB
    {
        uint32_t cbPadding;
        uint32_t cbData;
        uint8_t* pbData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct EFS_KEY_INFO
    {
        uint32_t dwVersion;
        uint32_t Entropy;
        uint32_t Algorithm;
        uint32_t KeyLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct EFS_COMPATIBILITY_INFO
    {
        uint32_t EfsVersion;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct EFS_VERSION_INFO
    {
        uint32_t EfsVersion;
        uint32_t SubVersion;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct EFS_DECRYPTION_STATUS_INFO
    {
        uint32_t dwDecryptionError;
        uint32_t dwHashOffset;
        uint32_t cbHash;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct EFS_ENCRYPTION_STATUS_INFO
    {
        Windows::Win32::SystemServices::BOOL bHasCurrentKey;
        uint32_t dwEncryptionError;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct ENCRYPTION_CERTIFICATE
    {
        uint32_t cbTotalLength;
        Windows::Win32::Security::SID* pUserSid;
        Windows::Win32::FileSystem::EFS_CERTIFICATE_BLOB* pCertBlob;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct ENCRYPTION_CERTIFICATE_HASH
    {
        uint32_t cbTotalLength;
        Windows::Win32::Security::SID* pUserSid;
        Windows::Win32::FileSystem::EFS_HASH_BLOB* pHash;
        uint16_t* lpDisplayInformation;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct ENCRYPTION_CERTIFICATE_HASH_LIST
    {
        uint32_t nCert_Hash;
        Windows::Win32::FileSystem::ENCRYPTION_CERTIFICATE_HASH** pUsers;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct ENCRYPTION_CERTIFICATE_LIST
    {
        uint32_t nUsers;
        Windows::Win32::FileSystem::ENCRYPTION_CERTIFICATE** pUsers;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct ENCRYPTED_FILE_METADATA_SIGNATURE
    {
        uint32_t dwEfsAccessType;
        Windows::Win32::FileSystem::ENCRYPTION_CERTIFICATE_HASH_LIST* pCertificatesAdded;
        Windows::Win32::FileSystem::ENCRYPTION_CERTIFICATE* pEncryptionCertificate;
        Windows::Win32::FileSystem::EFS_RPC_BLOB* pEfsStreamSignature;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct ENCRYPTION_PROTECTOR
    {
        uint32_t cbTotalLength;
        Windows::Win32::Security::SID* pUserSid;
        uint16_t* lpProtectorDescriptor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct ENCRYPTION_PROTECTOR_LIST
    {
        uint32_t nProtectors;
        Windows::Win32::FileSystem::ENCRYPTION_PROTECTOR** pProtectors;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct NTMS_ASYNC_IO
    {
        ::win32::guid OperationId;
        ::win32::guid EventId;
        uint32_t dwOperationType;
        uint32_t dwResult;
        uint32_t dwAsyncState;
        Windows::Win32::SystemServices::HANDLE hEvent;
        Windows::Win32::SystemServices::BOOL bOnStateChange;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct NTMS_MOUNT_INFORMATION
    {
        uint32_t dwSize;
        void* lpReserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct NTMS_ALLOCATION_INFORMATION
    {
        uint32_t dwSize;
        void* lpReserved;
        ::win32::guid AllocatedFrom;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct NTMS_DRIVEINFORMATIONA
    {
        uint32_t Number;
        uint32_t State;
        ::win32::guid DriveType;
        int8_t szDeviceName[64];
        int8_t szSerialNumber[32];
        int8_t szRevision[32];
        uint16_t ScsiPort;
        uint16_t ScsiBus;
        uint16_t ScsiTarget;
        uint16_t ScsiLun;
        uint32_t dwMountCount;
        Windows::Win32::WindowsProgramming::SYSTEMTIME LastCleanedTs;
        ::win32::guid SavedPartitionId;
        ::win32::guid Library;
        ::win32::guid Reserved;
        uint32_t dwDeferDismountDelay;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct NTMS_DRIVEINFORMATIONW
    {
        uint32_t Number;
        uint32_t State;
        ::win32::guid DriveType;
        uint16_t szDeviceName[64];
        uint16_t szSerialNumber[32];
        uint16_t szRevision[32];
        uint16_t ScsiPort;
        uint16_t ScsiBus;
        uint16_t ScsiTarget;
        uint16_t ScsiLun;
        uint32_t dwMountCount;
        Windows::Win32::WindowsProgramming::SYSTEMTIME LastCleanedTs;
        ::win32::guid SavedPartitionId;
        ::win32::guid Library;
        ::win32::guid Reserved;
        uint32_t dwDeferDismountDelay;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct NTMS_LIBRARYINFORMATION
    {
        uint32_t LibraryType;
        ::win32::guid CleanerSlot;
        ::win32::guid CleanerSlotDefault;
        Windows::Win32::SystemServices::BOOL LibrarySupportsDriveCleaning;
        Windows::Win32::SystemServices::BOOL BarCodeReaderInstalled;
        uint32_t InventoryMethod;
        uint32_t dwCleanerUsesRemaining;
        uint32_t FirstDriveNumber;
        uint32_t dwNumberOfDrives;
        uint32_t FirstSlotNumber;
        uint32_t dwNumberOfSlots;
        uint32_t FirstDoorNumber;
        uint32_t dwNumberOfDoors;
        uint32_t FirstPortNumber;
        uint32_t dwNumberOfPorts;
        uint32_t FirstChangerNumber;
        uint32_t dwNumberOfChangers;
        uint32_t dwNumberOfMedia;
        uint32_t dwNumberOfMediaTypes;
        uint32_t dwNumberOfLibRequests;
        ::win32::guid Reserved;
        Windows::Win32::SystemServices::BOOL AutoRecovery;
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct NTMS_CHANGERINFORMATIONA
    {
        uint32_t Number;
        ::win32::guid ChangerType;
        int8_t szSerialNumber[32];
        int8_t szRevision[32];
        int8_t szDeviceName[64];
        uint16_t ScsiPort;
        uint16_t ScsiBus;
        uint16_t ScsiTarget;
        uint16_t ScsiLun;
        ::win32::guid Library;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct NTMS_CHANGERINFORMATIONW
    {
        uint32_t Number;
        ::win32::guid ChangerType;
        uint16_t szSerialNumber[32];
        uint16_t szRevision[32];
        uint16_t szDeviceName[64];
        uint16_t ScsiPort;
        uint16_t ScsiBus;
        uint16_t ScsiTarget;
        uint16_t ScsiLun;
        ::win32::guid Library;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct NTMS_STORAGESLOTINFORMATION
    {
        uint32_t Number;
        uint32_t State;
        ::win32::guid Library;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct NTMS_IEDOORINFORMATION
    {
        uint32_t Number;
        uint32_t State;
        uint16_t MaxOpenSecs;
        ::win32::guid Library;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct NTMS_IEPORTINFORMATION
    {
        uint32_t Number;
        uint32_t Content;
        uint32_t Position;
        uint16_t MaxExtendSecs;
        ::win32::guid Library;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct NTMS_PMIDINFORMATIONA
    {
        ::win32::guid CurrentLibrary;
        ::win32::guid MediaPool;
        ::win32::guid Location;
        uint32_t LocationType;
        ::win32::guid MediaType;
        ::win32::guid HomeSlot;
        int8_t szBarCode[64];
        uint32_t BarCodeState;
        int8_t szSequenceNumber[32];
        uint32_t MediaState;
        uint32_t dwNumberOfPartitions;
        uint32_t dwMediaTypeCode;
        uint32_t dwDensityCode;
        ::win32::guid MountedPartition;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct NTMS_PMIDINFORMATIONW
    {
        ::win32::guid CurrentLibrary;
        ::win32::guid MediaPool;
        ::win32::guid Location;
        uint32_t LocationType;
        ::win32::guid MediaType;
        ::win32::guid HomeSlot;
        uint16_t szBarCode[64];
        uint32_t BarCodeState;
        uint16_t szSequenceNumber[32];
        uint32_t MediaState;
        uint32_t dwNumberOfPartitions;
        uint32_t dwMediaTypeCode;
        uint32_t dwDensityCode;
        ::win32::guid MountedPartition;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct NTMS_LMIDINFORMATION
    {
        ::win32::guid MediaPool;
        uint32_t dwNumberOfPartitions;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct NTMS_PARTITIONINFORMATIONA
    {
        ::win32::guid PhysicalMedia;
        ::win32::guid LogicalMedia;
        uint32_t State;
        uint16_t Side;
        uint32_t dwOmidLabelIdLength;
        uint8_t OmidLabelId[255];
        int8_t szOmidLabelType[64];
        int8_t szOmidLabelInfo[256];
        uint32_t dwMountCount;
        uint32_t dwAllocateCount;
        Windows::Win32::SystemServices::LARGE_INTEGER Capacity;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct NTMS_PARTITIONINFORMATIONW
    {
        ::win32::guid PhysicalMedia;
        ::win32::guid LogicalMedia;
        uint32_t State;
        uint16_t Side;
        uint32_t dwOmidLabelIdLength;
        uint8_t OmidLabelId[255];
        uint16_t szOmidLabelType[64];
        uint16_t szOmidLabelInfo[256];
        uint32_t dwMountCount;
        uint32_t dwAllocateCount;
        Windows::Win32::SystemServices::LARGE_INTEGER Capacity;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct NTMS_MEDIAPOOLINFORMATION
    {
        uint32_t PoolType;
        ::win32::guid MediaType;
        ::win32::guid Parent;
        uint32_t AllocationPolicy;
        uint32_t DeallocationPolicy;
        uint32_t dwMaxAllocates;
        uint32_t dwNumberOfPhysicalMedia;
        uint32_t dwNumberOfLogicalMedia;
        uint32_t dwNumberOfMediaPools;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct NTMS_MEDIATYPEINFORMATION
    {
        uint32_t MediaType;
        uint32_t NumberOfSides;
        uint32_t ReadWriteCharacteristics;
        uint32_t DeviceType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct NTMS_DRIVETYPEINFORMATIONA
    {
        int8_t szVendor[128];
        int8_t szProduct[128];
        uint32_t NumberOfHeads;
        uint32_t DeviceType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct NTMS_DRIVETYPEINFORMATIONW
    {
        uint16_t szVendor[128];
        uint16_t szProduct[128];
        uint32_t NumberOfHeads;
        uint32_t DeviceType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct NTMS_CHANGERTYPEINFORMATIONA
    {
        int8_t szVendor[128];
        int8_t szProduct[128];
        uint32_t DeviceType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct NTMS_CHANGERTYPEINFORMATIONW
    {
        uint16_t szVendor[128];
        uint16_t szProduct[128];
        uint32_t DeviceType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct NTMS_LIBREQUESTINFORMATIONA
    {
        uint32_t OperationCode;
        uint32_t OperationOption;
        uint32_t State;
        ::win32::guid PartitionId;
        ::win32::guid DriveId;
        ::win32::guid PhysMediaId;
        ::win32::guid Library;
        ::win32::guid SlotId;
        Windows::Win32::WindowsProgramming::SYSTEMTIME TimeQueued;
        Windows::Win32::WindowsProgramming::SYSTEMTIME TimeCompleted;
        int8_t szApplication[64];
        int8_t szUser[64];
        int8_t szComputer[64];
        uint32_t dwErrorCode;
        ::win32::guid WorkItemId;
        uint32_t dwPriority;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct NTMS_LIBREQUESTINFORMATIONW
    {
        uint32_t OperationCode;
        uint32_t OperationOption;
        uint32_t State;
        ::win32::guid PartitionId;
        ::win32::guid DriveId;
        ::win32::guid PhysMediaId;
        ::win32::guid Library;
        ::win32::guid SlotId;
        Windows::Win32::WindowsProgramming::SYSTEMTIME TimeQueued;
        Windows::Win32::WindowsProgramming::SYSTEMTIME TimeCompleted;
        uint16_t szApplication[64];
        uint16_t szUser[64];
        uint16_t szComputer[64];
        uint32_t dwErrorCode;
        ::win32::guid WorkItemId;
        uint32_t dwPriority;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct NTMS_OPREQUESTINFORMATIONA
    {
        uint32_t Request;
        Windows::Win32::WindowsProgramming::SYSTEMTIME Submitted;
        uint32_t State;
        int8_t szMessage[256];
        uint32_t Arg1Type;
        ::win32::guid Arg1;
        uint32_t Arg2Type;
        ::win32::guid Arg2;
        int8_t szApplication[64];
        int8_t szUser[64];
        int8_t szComputer[64];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct NTMS_OPREQUESTINFORMATIONW
    {
        uint32_t Request;
        Windows::Win32::WindowsProgramming::SYSTEMTIME Submitted;
        uint32_t State;
        uint16_t szMessage[256];
        uint32_t Arg1Type;
        ::win32::guid Arg1;
        uint32_t Arg2Type;
        ::win32::guid Arg2;
        uint16_t szApplication[64];
        uint16_t szUser[64];
        uint16_t szComputer[64];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct NTMS_COMPUTERINFORMATION
    {
        uint32_t dwLibRequestPurgeTime;
        uint32_t dwOpRequestPurgeTime;
        uint32_t dwLibRequestFlags;
        uint32_t dwOpRequestFlags;
        uint32_t dwMediaPoolPolicy;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct NTMS_OBJECTINFORMATIONA
    {
        union _Info_e__Union
        {
            Windows::Win32::FileSystem::NTMS_DRIVEINFORMATIONA Drive;
            Windows::Win32::FileSystem::NTMS_DRIVETYPEINFORMATIONA DriveType;
            Windows::Win32::FileSystem::NTMS_LIBRARYINFORMATION Library;
            Windows::Win32::FileSystem::NTMS_CHANGERINFORMATIONA Changer;
            Windows::Win32::FileSystem::NTMS_CHANGERTYPEINFORMATIONA ChangerType;
            Windows::Win32::FileSystem::NTMS_STORAGESLOTINFORMATION StorageSlot;
            Windows::Win32::FileSystem::NTMS_IEDOORINFORMATION IEDoor;
            Windows::Win32::FileSystem::NTMS_IEPORTINFORMATION IEPort;
            Windows::Win32::FileSystem::NTMS_PMIDINFORMATIONA PhysicalMedia;
            Windows::Win32::FileSystem::NTMS_LMIDINFORMATION LogicalMedia;
            Windows::Win32::FileSystem::NTMS_PARTITIONINFORMATIONA Partition;
            Windows::Win32::FileSystem::NTMS_MEDIAPOOLINFORMATION MediaPool;
            Windows::Win32::FileSystem::NTMS_MEDIATYPEINFORMATION MediaType;
            Windows::Win32::FileSystem::NTMS_LIBREQUESTINFORMATIONA LibRequest;
            Windows::Win32::FileSystem::NTMS_OPREQUESTINFORMATIONA OpRequest;
            Windows::Win32::FileSystem::NTMS_COMPUTERINFORMATION Computer;
        };
        uint32_t dwSize;
        uint32_t dwType;
        Windows::Win32::WindowsProgramming::SYSTEMTIME Created;
        Windows::Win32::WindowsProgramming::SYSTEMTIME Modified;
        ::win32::guid ObjectGuid;
        Windows::Win32::SystemServices::BOOL Enabled;
        uint32_t dwOperationalState;
        int8_t szName[64];
        int8_t szDescription[127];
        _Info_e__Union Info;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct NTMS_OBJECTINFORMATIONW
    {
        union _Info_e__Union
        {
            Windows::Win32::FileSystem::NTMS_DRIVEINFORMATIONW Drive;
            Windows::Win32::FileSystem::NTMS_DRIVETYPEINFORMATIONW DriveType;
            Windows::Win32::FileSystem::NTMS_LIBRARYINFORMATION Library;
            Windows::Win32::FileSystem::NTMS_CHANGERINFORMATIONW Changer;
            Windows::Win32::FileSystem::NTMS_CHANGERTYPEINFORMATIONW ChangerType;
            Windows::Win32::FileSystem::NTMS_STORAGESLOTINFORMATION StorageSlot;
            Windows::Win32::FileSystem::NTMS_IEDOORINFORMATION IEDoor;
            Windows::Win32::FileSystem::NTMS_IEPORTINFORMATION IEPort;
            Windows::Win32::FileSystem::NTMS_PMIDINFORMATIONW PhysicalMedia;
            Windows::Win32::FileSystem::NTMS_LMIDINFORMATION LogicalMedia;
            Windows::Win32::FileSystem::NTMS_PARTITIONINFORMATIONW Partition;
            Windows::Win32::FileSystem::NTMS_MEDIAPOOLINFORMATION MediaPool;
            Windows::Win32::FileSystem::NTMS_MEDIATYPEINFORMATION MediaType;
            Windows::Win32::FileSystem::NTMS_LIBREQUESTINFORMATIONW LibRequest;
            Windows::Win32::FileSystem::NTMS_OPREQUESTINFORMATIONW OpRequest;
            Windows::Win32::FileSystem::NTMS_COMPUTERINFORMATION Computer;
        };
        uint32_t dwSize;
        uint32_t dwType;
        Windows::Win32::WindowsProgramming::SYSTEMTIME Created;
        Windows::Win32::WindowsProgramming::SYSTEMTIME Modified;
        ::win32::guid ObjectGuid;
        Windows::Win32::SystemServices::BOOL Enabled;
        uint32_t dwOperationalState;
        uint16_t szName[64];
        uint16_t szDescription[127];
        _Info_e__Union Info;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct NTMS_I1_LIBRARYINFORMATION
    {
        uint32_t LibraryType;
        ::win32::guid CleanerSlot;
        ::win32::guid CleanerSlotDefault;
        Windows::Win32::SystemServices::BOOL LibrarySupportsDriveCleaning;
        Windows::Win32::SystemServices::BOOL BarCodeReaderInstalled;
        uint32_t InventoryMethod;
        uint32_t dwCleanerUsesRemaining;
        uint32_t FirstDriveNumber;
        uint32_t dwNumberOfDrives;
        uint32_t FirstSlotNumber;
        uint32_t dwNumberOfSlots;
        uint32_t FirstDoorNumber;
        uint32_t dwNumberOfDoors;
        uint32_t FirstPortNumber;
        uint32_t dwNumberOfPorts;
        uint32_t FirstChangerNumber;
        uint32_t dwNumberOfChangers;
        uint32_t dwNumberOfMedia;
        uint32_t dwNumberOfMediaTypes;
        uint32_t dwNumberOfLibRequests;
        ::win32::guid Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct NTMS_I1_LIBREQUESTINFORMATIONA
    {
        uint32_t OperationCode;
        uint32_t OperationOption;
        uint32_t State;
        ::win32::guid PartitionId;
        ::win32::guid DriveId;
        ::win32::guid PhysMediaId;
        ::win32::guid Library;
        ::win32::guid SlotId;
        Windows::Win32::WindowsProgramming::SYSTEMTIME TimeQueued;
        Windows::Win32::WindowsProgramming::SYSTEMTIME TimeCompleted;
        int8_t szApplication[64];
        int8_t szUser[64];
        int8_t szComputer[64];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct NTMS_I1_LIBREQUESTINFORMATIONW
    {
        uint32_t OperationCode;
        uint32_t OperationOption;
        uint32_t State;
        ::win32::guid PartitionId;
        ::win32::guid DriveId;
        ::win32::guid PhysMediaId;
        ::win32::guid Library;
        ::win32::guid SlotId;
        Windows::Win32::WindowsProgramming::SYSTEMTIME TimeQueued;
        Windows::Win32::WindowsProgramming::SYSTEMTIME TimeCompleted;
        uint16_t szApplication[64];
        uint16_t szUser[64];
        uint16_t szComputer[64];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct NTMS_I1_PMIDINFORMATIONA
    {
        ::win32::guid CurrentLibrary;
        ::win32::guid MediaPool;
        ::win32::guid Location;
        uint32_t LocationType;
        ::win32::guid MediaType;
        ::win32::guid HomeSlot;
        int8_t szBarCode[64];
        uint32_t BarCodeState;
        int8_t szSequenceNumber[32];
        uint32_t MediaState;
        uint32_t dwNumberOfPartitions;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct NTMS_I1_PMIDINFORMATIONW
    {
        ::win32::guid CurrentLibrary;
        ::win32::guid MediaPool;
        ::win32::guid Location;
        uint32_t LocationType;
        ::win32::guid MediaType;
        ::win32::guid HomeSlot;
        uint16_t szBarCode[64];
        uint32_t BarCodeState;
        uint16_t szSequenceNumber[32];
        uint32_t MediaState;
        uint32_t dwNumberOfPartitions;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct NTMS_I1_PARTITIONINFORMATIONA
    {
        ::win32::guid PhysicalMedia;
        ::win32::guid LogicalMedia;
        uint32_t State;
        uint16_t Side;
        uint32_t dwOmidLabelIdLength;
        uint8_t OmidLabelId[255];
        int8_t szOmidLabelType[64];
        int8_t szOmidLabelInfo[256];
        uint32_t dwMountCount;
        uint32_t dwAllocateCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct NTMS_I1_PARTITIONINFORMATIONW
    {
        ::win32::guid PhysicalMedia;
        ::win32::guid LogicalMedia;
        uint32_t State;
        uint16_t Side;
        uint32_t dwOmidLabelIdLength;
        uint8_t OmidLabelId[255];
        uint16_t szOmidLabelType[64];
        uint16_t szOmidLabelInfo[256];
        uint32_t dwMountCount;
        uint32_t dwAllocateCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct NTMS_I1_OPREQUESTINFORMATIONA
    {
        uint32_t Request;
        Windows::Win32::WindowsProgramming::SYSTEMTIME Submitted;
        uint32_t State;
        int8_t szMessage[127];
        uint32_t Arg1Type;
        ::win32::guid Arg1;
        uint32_t Arg2Type;
        ::win32::guid Arg2;
        int8_t szApplication[64];
        int8_t szUser[64];
        int8_t szComputer[64];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct NTMS_I1_OPREQUESTINFORMATIONW
    {
        uint32_t Request;
        Windows::Win32::WindowsProgramming::SYSTEMTIME Submitted;
        uint32_t State;
        uint16_t szMessage[127];
        uint32_t Arg1Type;
        ::win32::guid Arg1;
        uint32_t Arg2Type;
        ::win32::guid Arg2;
        uint16_t szApplication[64];
        uint16_t szUser[64];
        uint16_t szComputer[64];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct NTMS_I1_OBJECTINFORMATIONA
    {
        union _Info_e__Union
        {
            Windows::Win32::FileSystem::NTMS_DRIVEINFORMATIONA Drive;
            Windows::Win32::FileSystem::NTMS_DRIVETYPEINFORMATIONA DriveType;
            Windows::Win32::FileSystem::NTMS_I1_LIBRARYINFORMATION Library;
            Windows::Win32::FileSystem::NTMS_CHANGERINFORMATIONA Changer;
            Windows::Win32::FileSystem::NTMS_CHANGERTYPEINFORMATIONA ChangerType;
            Windows::Win32::FileSystem::NTMS_STORAGESLOTINFORMATION StorageSlot;
            Windows::Win32::FileSystem::NTMS_IEDOORINFORMATION IEDoor;
            Windows::Win32::FileSystem::NTMS_IEPORTINFORMATION IEPort;
            Windows::Win32::FileSystem::NTMS_I1_PMIDINFORMATIONA PhysicalMedia;
            Windows::Win32::FileSystem::NTMS_LMIDINFORMATION LogicalMedia;
            Windows::Win32::FileSystem::NTMS_I1_PARTITIONINFORMATIONA Partition;
            Windows::Win32::FileSystem::NTMS_MEDIAPOOLINFORMATION MediaPool;
            Windows::Win32::FileSystem::NTMS_MEDIATYPEINFORMATION MediaType;
            Windows::Win32::FileSystem::NTMS_I1_LIBREQUESTINFORMATIONA LibRequest;
            Windows::Win32::FileSystem::NTMS_I1_OPREQUESTINFORMATIONA OpRequest;
        };
        uint32_t dwSize;
        uint32_t dwType;
        Windows::Win32::WindowsProgramming::SYSTEMTIME Created;
        Windows::Win32::WindowsProgramming::SYSTEMTIME Modified;
        ::win32::guid ObjectGuid;
        Windows::Win32::SystemServices::BOOL Enabled;
        uint32_t dwOperationalState;
        int8_t szName[64];
        int8_t szDescription[127];
        _Info_e__Union Info;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct NTMS_I1_OBJECTINFORMATIONW
    {
        union _Info_e__Union
        {
            Windows::Win32::FileSystem::NTMS_DRIVEINFORMATIONW Drive;
            Windows::Win32::FileSystem::NTMS_DRIVETYPEINFORMATIONW DriveType;
            Windows::Win32::FileSystem::NTMS_I1_LIBRARYINFORMATION Library;
            Windows::Win32::FileSystem::NTMS_CHANGERINFORMATIONW Changer;
            Windows::Win32::FileSystem::NTMS_CHANGERTYPEINFORMATIONW ChangerType;
            Windows::Win32::FileSystem::NTMS_STORAGESLOTINFORMATION StorageSlot;
            Windows::Win32::FileSystem::NTMS_IEDOORINFORMATION IEDoor;
            Windows::Win32::FileSystem::NTMS_IEPORTINFORMATION IEPort;
            Windows::Win32::FileSystem::NTMS_I1_PMIDINFORMATIONW PhysicalMedia;
            Windows::Win32::FileSystem::NTMS_LMIDINFORMATION LogicalMedia;
            Windows::Win32::FileSystem::NTMS_I1_PARTITIONINFORMATIONW Partition;
            Windows::Win32::FileSystem::NTMS_MEDIAPOOLINFORMATION MediaPool;
            Windows::Win32::FileSystem::NTMS_MEDIATYPEINFORMATION MediaType;
            Windows::Win32::FileSystem::NTMS_I1_LIBREQUESTINFORMATIONW LibRequest;
            Windows::Win32::FileSystem::NTMS_I1_OPREQUESTINFORMATIONW OpRequest;
        };
        uint32_t dwSize;
        uint32_t dwType;
        Windows::Win32::WindowsProgramming::SYSTEMTIME Created;
        Windows::Win32::WindowsProgramming::SYSTEMTIME Modified;
        ::win32::guid ObjectGuid;
        Windows::Win32::SystemServices::BOOL Enabled;
        uint32_t dwOperationalState;
        uint16_t szName[64];
        uint16_t szDescription[127];
        _Info_e__Union Info;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct NTMS_FILESYSTEM_INFO
    {
        uint16_t FileSystemType[64];
        uint16_t VolumeName[256];
        uint32_t SerialNumber;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct NTMS_NOTIFICATIONINFORMATION
    {
        uint32_t dwOperation;
        ::win32::guid ObjectId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct MediaLabelInfo
    {
        uint16_t LabelType[64];
        uint32_t LabelIDSize;
        uint8_t LabelID[256];
        uint16_t LabelAppDescr[256];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct CLS_LSN
    {
        uint64_t Internal;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct CLFS_NODE_ID
    {
        uint32_t cType;
        uint32_t cbNode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct CLS_WRITE_ENTRY
    {
        void* Buffer;
        uint32_t ByteLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct CLS_INFORMATION
    {
        int64_t TotalAvailable;
        int64_t CurrentAvailable;
        int64_t TotalReservation;
        uint64_t BaseFileSize;
        uint64_t ContainerSize;
        uint32_t TotalContainers;
        uint32_t FreeContainers;
        uint32_t TotalClients;
        uint32_t Attributes;
        uint32_t FlushThreshold;
        uint32_t SectorSize;
        Windows::Win32::FileSystem::CLS_LSN MinArchiveTailLsn;
        Windows::Win32::FileSystem::CLS_LSN BaseLsn;
        Windows::Win32::FileSystem::CLS_LSN LastFlushedLsn;
        Windows::Win32::FileSystem::CLS_LSN LastLsn;
        Windows::Win32::FileSystem::CLS_LSN RestartLsn;
        ::win32::guid Identity;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct CLFS_LOG_NAME_INFORMATION
    {
        uint16_t NameLengthInBytes;
        uint16_t Name[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct CLFS_STREAM_ID_INFORMATION
    {
        uint8_t StreamIdentifier;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct CLFS_PHYSICAL_LSN_INFORMATION
    {
        uint8_t StreamIdentifier;
        Windows::Win32::FileSystem::CLS_LSN VirtualLsn;
        Windows::Win32::FileSystem::CLS_LSN PhysicalLsn;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct CLS_CONTAINER_INFORMATION
    {
        uint32_t FileAttributes;
        uint64_t CreationTime;
        uint64_t LastAccessTime;
        uint64_t LastWriteTime;
        int64_t ContainerSize;
        uint32_t FileNameActualLength;
        uint32_t FileNameLength;
        uint16_t FileName[256];
        uint32_t State;
        uint32_t PhysicalContainerId;
        uint32_t LogicalContainerId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct CLS_IO_STATISTICS_HEADER
    {
        uint8_t ubMajorVersion;
        uint8_t ubMinorVersion;
        Windows::Win32::FileSystem::CLFS_IOSTATS_CLASS eStatsClass;
        uint16_t cbLength;
        uint32_t coffData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct CLS_IO_STATISTICS
    {
        Windows::Win32::FileSystem::CLS_IO_STATISTICS_HEADER hdrIoStats;
        uint64_t cFlush;
        uint64_t cbFlush;
        uint64_t cMetaFlush;
        uint64_t cbMetaFlush;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct CLS_SCAN_CONTEXT
    {
        Windows::Win32::FileSystem::CLFS_NODE_ID cidNode;
        Windows::Win32::SystemServices::HANDLE hLog;
        uint32_t cIndex;
        uint32_t cContainers;
        uint32_t cContainersReturned;
        uint8_t eScanMode;
        Windows::Win32::FileSystem::CLS_CONTAINER_INFORMATION* pinfoContainer;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct CLS_ARCHIVE_DESCRIPTOR
    {
        uint64_t coffLow;
        uint64_t coffHigh;
        Windows::Win32::FileSystem::CLS_CONTAINER_INFORMATION infoContainer;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct CLFS_MGMT_POLICY
    {
        union _PolicyParameters_e__Union
        {
            struct _MaximumSize_e__Struct
            {
                uint32_t Containers;
            };
            struct _MinimumSize_e__Struct
            {
                uint32_t Containers;
            };
            struct _NewContainerSize_e__Struct
            {
                uint32_t SizeInBytes;
            };
            struct _GrowthRate_e__Struct
            {
                uint32_t AbsoluteGrowthInContainers;
                uint32_t RelativeGrowthPercentage;
            };
            struct _LogTail_e__Struct
            {
                uint32_t MinimumAvailablePercentage;
                uint32_t MinimumAvailableContainers;
            };
            struct _AutoShrink_e__Struct
            {
                uint32_t Percentage;
            };
            struct _AutoGrow_e__Struct
            {
                uint32_t Enabled;
            };
            struct _NewContainerPrefix_e__Struct
            {
                uint16_t PrefixLengthInBytes;
                uint16_t PrefixString[1];
            };
            struct _NewContainerSuffix_e__Struct
            {
                uint64_t NextContainerSuffix;
            };
            struct _NewContainerExtension_e__Struct
            {
                uint16_t ExtensionLengthInBytes;
                uint16_t ExtensionString[1];
            };
            _MaximumSize_e__Struct MaximumSize;
            _MinimumSize_e__Struct MinimumSize;
            _NewContainerSize_e__Struct NewContainerSize;
            _GrowthRate_e__Struct GrowthRate;
            _LogTail_e__Struct LogTail;
            _AutoShrink_e__Struct AutoShrink;
            _AutoGrow_e__Struct AutoGrow;
            _NewContainerPrefix_e__Struct NewContainerPrefix;
            _NewContainerSuffix_e__Struct NewContainerSuffix;
            _NewContainerExtension_e__Struct NewContainerExtension;
        };
        uint32_t Version;
        uint32_t LengthInBytes;
        uint32_t PolicyFlags;
        Windows::Win32::FileSystem::CLFS_MGMT_POLICY_TYPE PolicyType;
        _PolicyParameters_e__Union PolicyParameters;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct CLFS_MGMT_NOTIFICATION
    {
        Windows::Win32::FileSystem::CLFS_MGMT_NOTIFICATION_TYPE Notification;
        Windows::Win32::FileSystem::CLS_LSN Lsn;
        uint16_t LogIsPinned;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct LOG_MANAGEMENT_CALLBACKS
    {
        void* CallbackContext;
        Windows::Win32::FileSystem::PLOG_TAIL_ADVANCE_CALLBACK* AdvanceTailCallback;
        Windows::Win32::FileSystem::PLOG_FULL_HANDLER_CALLBACK* LogFullHandlerCallback;
        Windows::Win32::FileSystem::PLOG_UNPINNED_CALLBACK* LogUnpinnedCallback;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct DISKQUOTA_USER_INFORMATION
    {
        int64_t QuotaUsed;
        int64_t QuotaThreshold;
        int64_t QuotaLimit;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct WIM_ENTRY_INFO
    {
        uint32_t WimEntryInfoSize;
        uint32_t WimType;
        Windows::Win32::SystemServices::LARGE_INTEGER DataSourceId;
        ::win32::guid WimGuid;
        uint16_t* WimPath;
        uint32_t WimIndex;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct WIM_EXTERNAL_FILE_INFO
    {
        Windows::Win32::SystemServices::LARGE_INTEGER DataSourceId;
        uint8_t ResourceHash[20];
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct WOF_FILE_COMPRESSION_INFO_V0
    {
        uint32_t Algorithm;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct WOF_FILE_COMPRESSION_INFO_V1
    {
        uint32_t Algorithm;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct TXF_ID
    {
        struct _Anonymous_e__Struct
        {
            int64_t LowPart;
            int64_t HighPart;
        };
        _Anonymous_e__Struct Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct TXF_LOG_RECORD_BASE
    {
        uint16_t Version;
        uint16_t RecordType;
        uint32_t RecordLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct TXF_LOG_RECORD_WRITE
    {
        uint16_t Version;
        uint16_t RecordType;
        uint32_t RecordLength;
        uint32_t Flags;
        Windows::Win32::FileSystem::TXF_ID TxfFileId;
        ::win32::guid KtmGuid;
        int64_t ByteOffsetInFile;
        uint32_t NumBytesWritten;
        uint32_t ByteOffsetInStructure;
        uint32_t FileNameLength;
        uint32_t FileNameByteOffsetInStructure;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct TXF_LOG_RECORD_TRUNCATE
    {
        uint16_t Version;
        uint16_t RecordType;
        uint32_t RecordLength;
        uint32_t Flags;
        Windows::Win32::FileSystem::TXF_ID TxfFileId;
        ::win32::guid KtmGuid;
        int64_t NewFileSize;
        uint32_t FileNameLength;
        uint32_t FileNameByteOffsetInStructure;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct TXF_LOG_RECORD_AFFECTED_FILE
    {
        uint16_t Version;
        uint32_t RecordLength;
        uint32_t Flags;
        Windows::Win32::FileSystem::TXF_ID TxfFileId;
        ::win32::guid KtmGuid;
        uint32_t FileNameLength;
        uint32_t FileNameByteOffsetInStructure;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct VOLUME_FAILOVER_SET
    {
        uint32_t NumberOfDisks;
        uint32_t DiskNumbers[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct VOLUME_NUMBER
    {
        uint32_t VolumeNumber;
        uint16_t VolumeManagerName[8];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct VOLUME_LOGICAL_OFFSET
    {
        int64_t LogicalOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct VOLUME_PHYSICAL_OFFSET
    {
        uint32_t DiskNumber;
        int64_t Offset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct VOLUME_PHYSICAL_OFFSETS
    {
        uint32_t NumberOfPhysicalOffsets;
        Windows::Win32::FileSystem::VOLUME_PHYSICAL_OFFSET PhysicalOffset[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct VOLUME_READ_PLEX_INPUT
    {
        Windows::Win32::SystemServices::LARGE_INTEGER ByteOffset;
        uint32_t Length;
        uint32_t PlexNumber;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct VOLUME_SET_GPT_ATTRIBUTES_INFORMATION
    {
        uint64_t GptAttributes;
        uint8_t RevertOnClose;
        uint8_t ApplyToAllConnectedVolumes;
        uint16_t Reserved1;
        uint32_t Reserved2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct VOLUME_GET_BC_PROPERTIES_INPUT
    {
        uint32_t Version;
        uint32_t Reserved1;
        uint64_t LowestByteOffset;
        uint64_t HighestByteOffset;
        uint32_t AccessType;
        uint32_t AccessMode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct VOLUME_GET_BC_PROPERTIES_OUTPUT
    {
        uint32_t MaximumRequestsPerPeriod;
        uint32_t MinimumPeriod;
        uint64_t MaximumRequestSize;
        uint32_t EstimatedTimePerRequest;
        uint32_t NumOutStandingRequests;
        uint64_t RequestSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct VOLUME_ALLOCATE_BC_STREAM_INPUT
    {
        uint32_t Version;
        uint32_t RequestsPerPeriod;
        uint32_t Period;
        uint8_t RetryFailures;
        uint8_t Discardable;
        uint8_t Reserved1[2];
        uint64_t LowestByteOffset;
        uint64_t HighestByteOffset;
        uint32_t AccessType;
        uint32_t AccessMode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct VOLUME_ALLOCATE_BC_STREAM_OUTPUT
    {
        uint64_t RequestSize;
        uint32_t NumOutStandingRequests;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct FILE_EXTENT
    {
        uint64_t VolumeOffset;
        uint64_t ExtentLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct VOLUME_CRITICAL_IO
    {
        uint32_t AccessType;
        uint32_t ExtentsCount;
        Windows::Win32::FileSystem::FILE_EXTENT Extents[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct VOLUME_ALLOCATION_HINT_INPUT
    {
        uint32_t ClusterSize;
        uint32_t NumberOfClusters;
        int64_t StartingClusterNumber;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct VOLUME_ALLOCATION_HINT_OUTPUT
    {
        uint32_t Bitmap[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct VOLUME_SHRINK_INFO
    {
        uint64_t VolumeSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct SHARE_INFO_0
    {
        uint16_t* shi0_netname;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct SHARE_INFO_1
    {
        uint16_t* shi1_netname;
        uint32_t shi1_type;
        uint16_t* shi1_remark;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct SHARE_INFO_2
    {
        uint16_t* shi2_netname;
        uint32_t shi2_type;
        uint16_t* shi2_remark;
        uint32_t shi2_permissions;
        uint32_t shi2_max_uses;
        uint32_t shi2_current_uses;
        uint16_t* shi2_path;
        uint16_t* shi2_passwd;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct SHARE_INFO_501
    {
        uint16_t* shi501_netname;
        uint32_t shi501_type;
        uint16_t* shi501_remark;
        uint32_t shi501_flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct SHARE_INFO_502
    {
        uint16_t* shi502_netname;
        uint32_t shi502_type;
        uint16_t* shi502_remark;
        uint32_t shi502_permissions;
        uint32_t shi502_max_uses;
        uint32_t shi502_current_uses;
        uint16_t* shi502_path;
        uint16_t* shi502_passwd;
        uint32_t shi502_reserved;
        void* shi502_security_descriptor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct SHARE_INFO_503
    {
        uint16_t* shi503_netname;
        uint32_t shi503_type;
        uint16_t* shi503_remark;
        uint32_t shi503_permissions;
        uint32_t shi503_max_uses;
        uint32_t shi503_current_uses;
        uint16_t* shi503_path;
        uint16_t* shi503_passwd;
        uint16_t* shi503_servername;
        uint32_t shi503_reserved;
        void* shi503_security_descriptor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct SHARE_INFO_1004
    {
        uint16_t* shi1004_remark;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct SHARE_INFO_1005
    {
        uint32_t shi1005_flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct SHARE_INFO_1006
    {
        uint32_t shi1006_max_uses;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct SHARE_INFO_1501
    {
        uint32_t shi1501_reserved;
        void* shi1501_security_descriptor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct SHARE_INFO_1503
    {
        ::win32::guid shi1503_sharefilter;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct SERVER_ALIAS_INFO_0
    {
        uint16_t* srvai0_alias;
        uint16_t* srvai0_target;
        uint8_t srvai0_default;
        uint32_t srvai0_reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct SESSION_INFO_0
    {
        uint16_t* sesi0_cname;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct SESSION_INFO_1
    {
        uint16_t* sesi1_cname;
        uint16_t* sesi1_username;
        uint32_t sesi1_num_opens;
        uint32_t sesi1_time;
        uint32_t sesi1_idle_time;
        uint32_t sesi1_user_flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct SESSION_INFO_2
    {
        uint16_t* sesi2_cname;
        uint16_t* sesi2_username;
        uint32_t sesi2_num_opens;
        uint32_t sesi2_time;
        uint32_t sesi2_idle_time;
        uint32_t sesi2_user_flags;
        uint16_t* sesi2_cltype_name;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct SESSION_INFO_10
    {
        uint16_t* sesi10_cname;
        uint16_t* sesi10_username;
        uint32_t sesi10_time;
        uint32_t sesi10_idle_time;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct SESSION_INFO_502
    {
        uint16_t* sesi502_cname;
        uint16_t* sesi502_username;
        uint32_t sesi502_num_opens;
        uint32_t sesi502_time;
        uint32_t sesi502_idle_time;
        uint32_t sesi502_user_flags;
        uint16_t* sesi502_cltype_name;
        uint16_t* sesi502_transport;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct CONNECTION_INFO_0
    {
        uint32_t coni0_id;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct CONNECTION_INFO_1
    {
        uint32_t coni1_id;
        uint32_t coni1_type;
        uint32_t coni1_num_opens;
        uint32_t coni1_num_users;
        uint32_t coni1_time;
        uint16_t* coni1_username;
        uint16_t* coni1_netname;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct FILE_INFO_2
    {
        uint32_t fi2_id;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct FILE_INFO_3
    {
        uint32_t fi3_id;
        uint32_t fi3_permissions;
        uint32_t fi3_num_locks;
        uint16_t* fi3_pathname;
        uint16_t* fi3_username;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct SERVER_CERTIFICATE_INFO_0
    {
        uint16_t* srvci0_name;
        uint16_t* srvci0_subject;
        uint16_t* srvci0_issuer;
        uint16_t* srvci0_thumbprint;
        uint16_t* srvci0_friendlyname;
        uint16_t* srvci0_notbefore;
        uint16_t* srvci0_notafter;
        uint16_t* srvci0_storelocation;
        uint16_t* srvci0_storename;
        uint32_t srvci0_type;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct STAT_WORKSTATION_0
    {
        Windows::Win32::SystemServices::LARGE_INTEGER StatisticsStartTime;
        Windows::Win32::SystemServices::LARGE_INTEGER BytesReceived;
        Windows::Win32::SystemServices::LARGE_INTEGER SmbsReceived;
        Windows::Win32::SystemServices::LARGE_INTEGER PagingReadBytesRequested;
        Windows::Win32::SystemServices::LARGE_INTEGER NonPagingReadBytesRequested;
        Windows::Win32::SystemServices::LARGE_INTEGER CacheReadBytesRequested;
        Windows::Win32::SystemServices::LARGE_INTEGER NetworkReadBytesRequested;
        Windows::Win32::SystemServices::LARGE_INTEGER BytesTransmitted;
        Windows::Win32::SystemServices::LARGE_INTEGER SmbsTransmitted;
        Windows::Win32::SystemServices::LARGE_INTEGER PagingWriteBytesRequested;
        Windows::Win32::SystemServices::LARGE_INTEGER NonPagingWriteBytesRequested;
        Windows::Win32::SystemServices::LARGE_INTEGER CacheWriteBytesRequested;
        Windows::Win32::SystemServices::LARGE_INTEGER NetworkWriteBytesRequested;
        uint32_t InitiallyFailedOperations;
        uint32_t FailedCompletionOperations;
        uint32_t ReadOperations;
        uint32_t RandomReadOperations;
        uint32_t ReadSmbs;
        uint32_t LargeReadSmbs;
        uint32_t SmallReadSmbs;
        uint32_t WriteOperations;
        uint32_t RandomWriteOperations;
        uint32_t WriteSmbs;
        uint32_t LargeWriteSmbs;
        uint32_t SmallWriteSmbs;
        uint32_t RawReadsDenied;
        uint32_t RawWritesDenied;
        uint32_t NetworkErrors;
        uint32_t Sessions;
        uint32_t FailedSessions;
        uint32_t Reconnects;
        uint32_t CoreConnects;
        uint32_t Lanman20Connects;
        uint32_t Lanman21Connects;
        uint32_t LanmanNtConnects;
        uint32_t ServerDisconnects;
        uint32_t HungSessions;
        uint32_t UseCount;
        uint32_t FailedUseCount;
        uint32_t CurrentCommands;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct STAT_SERVER_0
    {
        uint32_t sts0_start;
        uint32_t sts0_fopens;
        uint32_t sts0_devopens;
        uint32_t sts0_jobsqueued;
        uint32_t sts0_sopens;
        uint32_t sts0_stimedout;
        uint32_t sts0_serrorout;
        uint32_t sts0_pwerrors;
        uint32_t sts0_permerrors;
        uint32_t sts0_syserrors;
        uint32_t sts0_bytessent_low;
        uint32_t sts0_bytessent_high;
        uint32_t sts0_bytesrcvd_low;
        uint32_t sts0_bytesrcvd_high;
        uint32_t sts0_avresponse;
        uint32_t sts0_reqbufneed;
        uint32_t sts0_bigbufneed;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ComponentServices
{
    struct BOID
    {
        uint8_t rgb[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ComponentServices
{
    struct XACTTRANSINFO
    {
        Windows::Win32::ComponentServices::BOID uow;
        int32_t isoLevel;
        uint32_t isoFlags;
        uint32_t grfTCSupported;
        uint32_t grfRMSupported;
        uint32_t grfTCSupportedRetaining;
        uint32_t grfRMSupportedRetaining;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ComponentServices
{
    struct XACTSTATS
    {
        uint32_t cOpen;
        uint32_t cCommitting;
        uint32_t cCommitted;
        uint32_t cAborting;
        uint32_t cAborted;
        uint32_t cInDoubt;
        uint32_t cHeuristicDecision;
        Windows::Win32::WindowsProgramming::FILETIME timeTransactionsUp;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ComponentServices
{
    struct XACTOPT
    {
        uint32_t ulTimeout;
        int8_t szDescription[40];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ComponentServices
{
    struct xid_t
    {
        int32_t formatID;
        int32_t gtrid_length;
        int32_t bqual_length;
        int8_t data[128];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ComponentServices
{
    struct xa_switch_t
    {
        int8_t name[32];
        int32_t flags;
        int32_t version;
        intptr_t xa_open_entry;
        intptr_t xa_close_entry;
        intptr_t xa_start_entry;
        intptr_t xa_end_entry;
        intptr_t xa_rollback_entry;
        intptr_t xa_prepare_entry;
        intptr_t xa_commit_entry;
        intptr_t xa_recover_entry;
        intptr_t xa_forget_entry;
        intptr_t xa_complete_entry;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ComponentServices
{
    struct _ProxyConfigParams
    {
        uint16_t wcThreadsMax;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ComponentServices
{
    struct COMSVCSEVENTINFO
    {
        uint32_t cbSize;
        uint32_t dwPid;
        int64_t lTime;
        int32_t lMicroTime;
        int64_t perfCount;
        ::win32::guid guidApp;
        uint16_t* sMachineName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ComponentServices
{
    struct RECYCLE_INFO
    {
        ::win32::guid guidCombaseProcessIdentifier;
        int64_t ProcessStartTime;
        uint32_t dwRecycleLifetimeLimit;
        uint32_t dwRecycleMemoryLimit;
        uint32_t dwRecycleExpirationTimeout;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ComponentServices
{
    struct HANG_INFO
    {
        Windows::Win32::SystemServices::BOOL fAppHangMonitorEnabled;
        Windows::Win32::SystemServices::BOOL fTerminateOnHang;
        Windows::Win32::ComponentServices::DUMPTYPE DumpType;
        uint32_t dwHangTimeout;
        uint32_t dwDumpCount;
        uint32_t dwInfoMsgCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ComponentServices
{
    struct CAppStatistics
    {
        uint32_t m_cTotalCalls;
        uint32_t m_cTotalInstances;
        uint32_t m_cTotalClasses;
        uint32_t m_cCallsPerSecond;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ComponentServices
{
    struct CAppData
    {
        uint32_t m_idApp;
        uint16_t m_szAppGuid[40];
        uint32_t m_dwAppProcessId;
        Windows::Win32::ComponentServices::CAppStatistics m_AppStatistics;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ComponentServices
{
    struct CCLSIDData
    {
        ::win32::guid m_clsid;
        uint32_t m_cReferences;
        uint32_t m_cBound;
        uint32_t m_cPooled;
        uint32_t m_cInCall;
        uint32_t m_dwRespTime;
        uint32_t m_cCallsCompleted;
        uint32_t m_cCallsFailed;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ComponentServices
{
    struct CCLSIDData2
    {
        ::win32::guid m_clsid;
        ::win32::guid m_appid;
        ::win32::guid m_partid;
        uint16_t* m_pwszAppName;
        uint16_t* m_pwszCtxName;
        Windows::Win32::ComponentServices::COMPLUS_APPTYPE m_eAppType;
        uint32_t m_cReferences;
        uint32_t m_cBound;
        uint32_t m_cPooled;
        uint32_t m_cInCall;
        uint32_t m_dwRespTime;
        uint32_t m_cCallsCompleted;
        uint32_t m_cCallsFailed;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ComponentServices
{
    struct ApplicationProcessSummary
    {
        ::win32::guid PartitionIdPrimaryApplication;
        ::win32::guid ApplicationIdPrimaryApplication;
        ::win32::guid ApplicationInstanceId;
        uint32_t ProcessId;
        Windows::Win32::ComponentServices::COMPLUS_APPTYPE Type;
        uint16_t* ProcessExeName;
        Windows::Win32::SystemServices::BOOL IsService;
        Windows::Win32::SystemServices::BOOL IsPaused;
        Windows::Win32::SystemServices::BOOL IsRecycled;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ComponentServices
{
    struct ApplicationProcessStatistics
    {
        uint32_t NumCallsOutstanding;
        uint32_t NumTrackedComponents;
        uint32_t NumComponentInstances;
        uint32_t AvgCallsPerSecond;
        uint32_t Reserved1;
        uint32_t Reserved2;
        uint32_t Reserved3;
        uint32_t Reserved4;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ComponentServices
{
    struct ApplicationProcessRecycleInfo
    {
        Windows::Win32::SystemServices::BOOL IsRecyclable;
        Windows::Win32::SystemServices::BOOL IsRecycled;
        Windows::Win32::WindowsProgramming::FILETIME TimeRecycled;
        Windows::Win32::WindowsProgramming::FILETIME TimeToTerminate;
        int32_t RecycleReasonCode;
        Windows::Win32::SystemServices::BOOL IsPendingRecycle;
        Windows::Win32::SystemServices::BOOL HasAutomaticLifetimeRecycling;
        Windows::Win32::WindowsProgramming::FILETIME TimeForAutomaticRecycling;
        uint32_t MemoryLimitInKB;
        uint32_t MemoryUsageInKBLastCheck;
        uint32_t ActivationLimit;
        uint32_t NumActivationsLastReported;
        uint32_t CallLimit;
        uint32_t NumCallsLastReported;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ComponentServices
{
    struct ApplicationSummary
    {
        ::win32::guid ApplicationInstanceId;
        ::win32::guid PartitionId;
        ::win32::guid ApplicationId;
        Windows::Win32::ComponentServices::COMPLUS_APPTYPE Type;
        uint16_t* ApplicationName;
        uint32_t NumTrackedComponents;
        uint32_t NumComponentInstances;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ComponentServices
{
    struct ComponentSummary
    {
        ::win32::guid ApplicationInstanceId;
        ::win32::guid PartitionId;
        ::win32::guid ApplicationId;
        ::win32::guid Clsid;
        uint16_t* ClassName;
        uint16_t* ApplicationName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ComponentServices
{
    struct ComponentStatistics
    {
        uint32_t NumInstances;
        uint32_t NumBoundReferences;
        uint32_t NumPooledObjects;
        uint32_t NumObjectsInCall;
        uint32_t AvgResponseTimeInMs;
        uint32_t NumCallsCompletedRecent;
        uint32_t NumCallsFailedRecent;
        uint32_t NumCallsCompletedTotal;
        uint32_t NumCallsFailedTotal;
        uint32_t Reserved1;
        uint32_t Reserved2;
        uint32_t Reserved3;
        uint32_t Reserved4;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ComponentServices
{
    struct ComponentHangMonitorInfo
    {
        Windows::Win32::SystemServices::BOOL IsMonitored;
        Windows::Win32::SystemServices::BOOL TerminateOnHang;
        uint32_t AvgCallThresholdInMs;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ComponentServices
{
    struct CrmLogRecordRead
    {
        uint32_t dwCrmFlags;
        uint32_t dwSequenceNumber;
        Windows::Win32::WinSock::BLOB blobUserData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ComponentServices
{
    struct COMEVENTSYSCHANGEINFO
    {
        uint32_t cbSize;
        Windows::Win32::Com::EOC_ChangeType changeType;
        Windows::Win32::Automation::BSTR objectId;
        Windows::Win32::Automation::BSTR partitionId;
        Windows::Win32::Automation::BSTR applicationId;
        ::win32::guid reserved[10];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DataExchange
{
    struct DDEACK
    {
        uint16_t _bitfield;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DataExchange
{
    struct DDEADVISE
    {
        uint16_t _bitfield;
        int16_t cfFormat;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DataExchange
{
    struct DDEDATA
    {
        uint16_t _bitfield;
        int16_t cfFormat;
        uint8_t Value[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DataExchange
{
    struct DDEPOKE
    {
        uint16_t _bitfield;
        int16_t cfFormat;
        uint8_t Value[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DataExchange
{
    struct DDELN
    {
        uint16_t _bitfield;
        int16_t cfFormat;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DataExchange
{
    struct DDEUP
    {
        uint16_t _bitfield;
        int16_t cfFormat;
        uint8_t rgb[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DataExchange
{
    struct HCONVLIST__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DataExchange
{
    struct HCONV__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DataExchange
{
    struct HSZ__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DataExchange
{
    struct HDDEDATA__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DataExchange
{
    struct HSZPAIR
    {
        intptr_t hszSvc;
        intptr_t hszTopic;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DataExchange
{
    struct CONVCONTEXT
    {
        uint32_t cb;
        uint32_t wFlags;
        uint32_t wCountryID;
        int32_t iCodePage;
        uint32_t dwLangID;
        uint32_t dwSecurity;
        Windows::Win32::Security::SECURITY_QUALITY_OF_SERVICE qos;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DataExchange
{
    struct CONVINFO
    {
        uint32_t cb;
        size_t hUser;
        intptr_t hConvPartner;
        intptr_t hszSvcPartner;
        intptr_t hszServiceReq;
        intptr_t hszTopic;
        intptr_t hszItem;
        uint32_t wFmt;
        uint32_t wType;
        uint32_t wStatus;
        uint32_t wConvst;
        uint32_t wLastError;
        intptr_t hConvList;
        Windows::Win32::DataExchange::CONVCONTEXT ConvCtxt;
        Windows::Win32::WindowsAndMessaging::HWND hwnd;
        Windows::Win32::WindowsAndMessaging::HWND hwndPartner;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DataExchange
{
    struct DDEML_MSG_HOOK_DATA
    {
        size_t uiLo;
        size_t uiHi;
        uint32_t cbData;
        uint32_t Data[8];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DataExchange
{
    struct MONMSGSTRUCT
    {
        uint32_t cb;
        Windows::Win32::WindowsAndMessaging::HWND hwndTo;
        uint32_t dwTime;
        Windows::Win32::SystemServices::HANDLE hTask;
        uint32_t wMsg;
        Windows::Win32::WindowsAndMessaging::WPARAM wParam;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
        Windows::Win32::DataExchange::DDEML_MSG_HOOK_DATA dmhd;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DataExchange
{
    struct MONCBSTRUCT
    {
        uint32_t cb;
        uint32_t dwTime;
        Windows::Win32::SystemServices::HANDLE hTask;
        uint32_t dwRet;
        uint32_t wType;
        uint32_t wFmt;
        intptr_t hConv;
        intptr_t hsz1;
        intptr_t hsz2;
        intptr_t hData;
        size_t dwData1;
        size_t dwData2;
        Windows::Win32::DataExchange::CONVCONTEXT cc;
        uint32_t cbData;
        uint32_t Data[8];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DataExchange
{
    struct MONHSZSTRUCTA
    {
        uint32_t cb;
        Windows::Win32::SystemServices::BOOL fsAction;
        uint32_t dwTime;
        intptr_t hsz;
        Windows::Win32::SystemServices::HANDLE hTask;
        int8_t str[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DataExchange
{
    struct MONHSZSTRUCTW
    {
        uint32_t cb;
        Windows::Win32::SystemServices::BOOL fsAction;
        uint32_t dwTime;
        intptr_t hsz;
        Windows::Win32::SystemServices::HANDLE hTask;
        uint16_t str[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DataExchange
{
    struct MONERRSTRUCT
    {
        uint32_t cb;
        uint32_t wLastError;
        uint32_t dwTime;
        Windows::Win32::SystemServices::HANDLE hTask;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DataExchange
{
    struct MONLINKSTRUCT
    {
        uint32_t cb;
        uint32_t dwTime;
        Windows::Win32::SystemServices::HANDLE hTask;
        Windows::Win32::SystemServices::BOOL fEstablished;
        Windows::Win32::SystemServices::BOOL fNoData;
        intptr_t hszSvc;
        intptr_t hszTopic;
        intptr_t hszItem;
        uint32_t wFmt;
        Windows::Win32::SystemServices::BOOL fServer;
        intptr_t hConvServer;
        intptr_t hConvClient;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DataExchange
{
    struct MONCONVSTRUCT
    {
        uint32_t cb;
        Windows::Win32::SystemServices::BOOL fConnect;
        uint32_t dwTime;
        Windows::Win32::SystemServices::HANDLE hTask;
        intptr_t hszSvc;
        intptr_t hszTopic;
        intptr_t hConvClient;
        intptr_t hConvServer;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Policy
{
    struct GROUP_POLICY_OBJECTA
    {
        uint32_t dwOptions;
        uint32_t dwVersion;
        int8_t* lpDSPath;
        int8_t* lpFileSysPath;
        int8_t* lpDisplayName;
        int8_t szGPOName[50];
        Windows::Win32::Policy::GPO_LINK GPOLink;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
        Windows::Win32::Policy::GROUP_POLICY_OBJECTA* pNext;
        Windows::Win32::Policy::GROUP_POLICY_OBJECTA* pPrev;
        int8_t* lpExtensions;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam2;
        int8_t* lpLink;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Policy
{
    struct GROUP_POLICY_OBJECTW
    {
        uint32_t dwOptions;
        uint32_t dwVersion;
        uint16_t* lpDSPath;
        uint16_t* lpFileSysPath;
        uint16_t* lpDisplayName;
        uint16_t szGPOName[50];
        Windows::Win32::Policy::GPO_LINK GPOLink;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
        Windows::Win32::Policy::GROUP_POLICY_OBJECTW* pNext;
        Windows::Win32::Policy::GROUP_POLICY_OBJECTW* pPrev;
        uint16_t* lpExtensions;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam2;
        uint16_t* lpLink;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Policy
{
    struct RSOP_TARGET
    {
        uint16_t* pwszAccountName;
        uint16_t* pwszNewSOM;
        Windows::Win32::Automation::SAFEARRAY* psaSecurityGroups;
        void* pRsopToken;
        Windows::Win32::Policy::GROUP_POLICY_OBJECTA* pGPOList;
        Windows::Win32::Wmi::IWbemServices* pWbemServices;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Policy
{
    struct POLICYSETTINGSTATUSINFO
    {
        uint16_t* szKey;
        uint16_t* szEventSource;
        uint16_t* szEventLogName;
        uint32_t dwEventID;
        uint32_t dwErrorCode;
        Windows::Win32::Policy::SETTINGSTATUS status;
        Windows::Win32::WindowsProgramming::SYSTEMTIME timeLogged;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Policy
{
    union INSTALLSPEC
    {
        struct _AppName_e__Struct
        {
            uint16_t* Name;
            ::win32::guid GPOId;
        };
        struct _COMClass_e__Struct
        {
            ::win32::guid Clsid;
            uint32_t ClsCtx;
        };
        _AppName_e__Struct AppName;
        uint16_t* FileExt;
        uint16_t* ProgId;
        _COMClass_e__Struct COMClass;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Policy
{
    struct INSTALLDATA
    {
        Windows::Win32::Policy::INSTALLSPECTYPE Type;
        Windows::Win32::Policy::INSTALLSPEC Spec;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Policy
{
    struct LOCALMANAGEDAPPLICATION
    {
        uint16_t* pszDeploymentName;
        uint16_t* pszPolicyName;
        uint16_t* pszProductId;
        uint32_t dwState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Policy
{
    struct MANAGEDAPPLICATION
    {
        uint16_t* pszPackageName;
        uint16_t* pszPublisher;
        uint32_t dwVersionHi;
        uint32_t dwVersionLo;
        uint32_t dwRevision;
        ::win32::guid GpoId;
        uint16_t* pszPolicyName;
        ::win32::guid ProductId;
        uint16_t Language;
        uint16_t* pszOwner;
        uint16_t* pszCompany;
        uint16_t* pszComments;
        uint16_t* pszContact;
        uint16_t* pszSupportUrl;
        uint32_t dwPathType;
        Windows::Win32::SystemServices::BOOL bInstalled;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Policy
{
    struct GPOBROWSEINFO
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        Windows::Win32::WindowsAndMessaging::HWND hwndOwner;
        uint16_t* lpTitle;
        uint16_t* lpInitialOU;
        uint16_t* lpDSPath;
        uint32_t dwDSPathSize;
        uint16_t* lpName;
        uint32_t dwNameSize;
        Windows::Win32::Policy::GROUP_POLICY_OBJECT_TYPE gpoType;
        Windows::Win32::Policy::GROUP_POLICY_HINT_TYPE gpoHint;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct APPCATEGORYINFO
    {
        uint32_t Locale;
        uint16_t* pszDescription;
        ::win32::guid AppCategoryId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct APPCATEGORYINFOLIST
    {
        uint32_t cCategory;
        Windows::Win32::Shell::APPCATEGORYINFO* pCategoryInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ProcessSnapshotting
{
    struct HPSS__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ProcessSnapshotting
{
    struct HPSSWALK__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ProcessSnapshotting
{
    struct PSS_PROCESS_INFORMATION
    {
        uint32_t ExitStatus;
        void* PebBaseAddress;
        size_t AffinityMask;
        int32_t BasePriority;
        uint32_t ProcessId;
        uint32_t ParentProcessId;
        Windows::Win32::ProcessSnapshotting::PSS_PROCESS_FLAGS Flags;
        Windows::Win32::WindowsProgramming::FILETIME CreateTime;
        Windows::Win32::WindowsProgramming::FILETIME ExitTime;
        Windows::Win32::WindowsProgramming::FILETIME KernelTime;
        Windows::Win32::WindowsProgramming::FILETIME UserTime;
        uint32_t PriorityClass;
        size_t PeakVirtualSize;
        size_t VirtualSize;
        uint32_t PageFaultCount;
        size_t PeakWorkingSetSize;
        size_t WorkingSetSize;
        size_t QuotaPeakPagedPoolUsage;
        size_t QuotaPagedPoolUsage;
        size_t QuotaPeakNonPagedPoolUsage;
        size_t QuotaNonPagedPoolUsage;
        size_t PagefileUsage;
        size_t PeakPagefileUsage;
        size_t PrivateUsage;
        uint32_t ExecuteFlags;
        uint16_t ImageFileName[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ProcessSnapshotting
{
    struct PSS_VA_CLONE_INFORMATION
    {
        Windows::Win32::SystemServices::HANDLE VaCloneHandle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ProcessSnapshotting
{
    struct PSS_AUXILIARY_PAGES_INFORMATION
    {
        uint32_t AuxPagesCaptured;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ProcessSnapshotting
{
    struct PSS_VA_SPACE_INFORMATION
    {
        uint32_t RegionCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ProcessSnapshotting
{
    struct PSS_HANDLE_INFORMATION
    {
        uint32_t HandlesCaptured;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ProcessSnapshotting
{
    struct PSS_THREAD_INFORMATION
    {
        uint32_t ThreadsCaptured;
        uint32_t ContextLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ProcessSnapshotting
{
    struct PSS_HANDLE_TRACE_INFORMATION
    {
        Windows::Win32::SystemServices::HANDLE SectionHandle;
        uint32_t Size;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ProcessSnapshotting
{
    struct PSS_PERFORMANCE_COUNTERS
    {
        uint64_t TotalCycleCount;
        uint64_t TotalWallClockPeriod;
        uint64_t VaCloneCycleCount;
        uint64_t VaCloneWallClockPeriod;
        uint64_t VaSpaceCycleCount;
        uint64_t VaSpaceWallClockPeriod;
        uint64_t AuxPagesCycleCount;
        uint64_t AuxPagesWallClockPeriod;
        uint64_t HandlesCycleCount;
        uint64_t HandlesWallClockPeriod;
        uint64_t ThreadsCycleCount;
        uint64_t ThreadsWallClockPeriod;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ProcessSnapshotting
{
    struct PSS_AUXILIARY_PAGE_ENTRY
    {
        void* Address;
        Windows::Win32::SystemServices::MEMORY_BASIC_INFORMATION BasicInformation;
        Windows::Win32::WindowsProgramming::FILETIME CaptureTime;
        void* PageContents;
        uint32_t PageSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ProcessSnapshotting
{
    struct PSS_VA_SPACE_ENTRY
    {
        void* BaseAddress;
        void* AllocationBase;
        uint32_t AllocationProtect;
        size_t RegionSize;
        uint32_t State;
        uint32_t Protect;
        uint32_t Type;
        uint32_t TimeDateStamp;
        uint32_t SizeOfImage;
        void* ImageBase;
        uint32_t CheckSum;
        uint16_t MappedFileNameLength;
        uint16_t* MappedFileName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ProcessSnapshotting
{
    struct PSS_HANDLE_ENTRY
    {
        union _TypeSpecificInformation_e__Union
        {
            struct _Process_e__Struct
            {
                uint32_t ExitStatus;
                void* PebBaseAddress;
                size_t AffinityMask;
                int32_t BasePriority;
                uint32_t ProcessId;
                uint32_t ParentProcessId;
                uint32_t Flags;
            };
            struct _Thread_e__Struct
            {
                uint32_t ExitStatus;
                void* TebBaseAddress;
                uint32_t ProcessId;
                uint32_t ThreadId;
                size_t AffinityMask;
                int32_t Priority;
                int32_t BasePriority;
                void* Win32StartAddress;
            };
            struct _Mutant_e__Struct
            {
                int32_t CurrentCount;
                Windows::Win32::SystemServices::BOOL Abandoned;
                uint32_t OwnerProcessId;
                uint32_t OwnerThreadId;
            };
            struct _Event_e__Struct
            {
                Windows::Win32::SystemServices::BOOL ManualReset;
                Windows::Win32::SystemServices::BOOL Signaled;
            };
            struct _Section_e__Struct
            {
                void* BaseAddress;
                uint32_t AllocationAttributes;
                Windows::Win32::SystemServices::LARGE_INTEGER MaximumSize;
            };
            struct _Semaphore_e__Struct
            {
                int32_t CurrentCount;
                int32_t MaximumCount;
            };
            _Process_e__Struct Process;
            _Thread_e__Struct Thread;
            _Mutant_e__Struct Mutant;
            _Event_e__Struct Event;
            _Section_e__Struct Section;
            _Semaphore_e__Struct Semaphore;
        };
        Windows::Win32::SystemServices::HANDLE Handle;
        Windows::Win32::ProcessSnapshotting::PSS_HANDLE_FLAGS Flags;
        Windows::Win32::ProcessSnapshotting::PSS_OBJECT_TYPE ObjectType;
        Windows::Win32::WindowsProgramming::FILETIME CaptureTime;
        uint32_t Attributes;
        uint32_t GrantedAccess;
        uint32_t HandleCount;
        uint32_t PointerCount;
        uint32_t PagedPoolCharge;
        uint32_t NonPagedPoolCharge;
        Windows::Win32::WindowsProgramming::FILETIME CreationTime;
        uint16_t TypeNameLength;
        uint16_t* TypeName;
        uint16_t ObjectNameLength;
        uint16_t* ObjectName;
        _TypeSpecificInformation_e__Union TypeSpecificInformation;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ProcessSnapshotting
{
    struct PSS_THREAD_ENTRY
    {
        uint32_t ExitStatus;
        void* TebBaseAddress;
        uint32_t ProcessId;
        uint32_t ThreadId;
        size_t AffinityMask;
        int32_t Priority;
        int32_t BasePriority;
        void* LastSyscallFirstArgument;
        uint16_t LastSyscallNumber;
        Windows::Win32::WindowsProgramming::FILETIME CreateTime;
        Windows::Win32::WindowsProgramming::FILETIME ExitTime;
        Windows::Win32::WindowsProgramming::FILETIME KernelTime;
        Windows::Win32::WindowsProgramming::FILETIME UserTime;
        void* Win32StartAddress;
        Windows::Win32::WindowsProgramming::FILETIME CaptureTime;
        Windows::Win32::ProcessSnapshotting::PSS_THREAD_FLAGS Flags;
        uint16_t SuspendCount;
        uint16_t SizeOfContextRecord;
        Windows::Win32::Debug::CONTEXT* ContextRecord;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ProcessSnapshotting
{
    struct PSS_ALLOCATOR
    {
        void* Context;
        intptr_t AllocRoutine;
        intptr_t FreeRoutine;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ProjectedFileSystem
{
    struct PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ProjectedFileSystem
{
    struct PRJ_DIR_ENTRY_BUFFER_HANDLE__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ProjectedFileSystem
{
    struct PRJ_EXTENDED_INFO
    {
        union _Anonymous_e__Union
        {
            struct _Symlink_e__Struct
            {
                uint16_t* TargetName;
            };
            _Symlink_e__Struct Symlink;
        };
        Windows::Win32::ProjectedFileSystem::PRJ_EXT_INFO_TYPE InfoType;
        uint32_t NextInfoOffset;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ProjectedFileSystem
{
    struct PRJ_NOTIFICATION_MAPPING
    {
        Windows::Win32::ProjectedFileSystem::PRJ_NOTIFY_TYPES NotificationBitMask;
        uint16_t* NotificationRoot;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ProjectedFileSystem
{
    struct PRJ_STARTVIRTUALIZING_OPTIONS
    {
        Windows::Win32::ProjectedFileSystem::PRJ_STARTVIRTUALIZING_FLAGS Flags;
        uint32_t PoolThreadCount;
        uint32_t ConcurrentThreadCount;
        Windows::Win32::ProjectedFileSystem::PRJ_NOTIFICATION_MAPPING* NotificationMappings;
        uint32_t NotificationMappingsCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ProjectedFileSystem
{
    struct PRJ_VIRTUALIZATION_INSTANCE_INFO
    {
        ::win32::guid InstanceID;
        uint32_t WriteAlignment;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ProjectedFileSystem
{
    struct PRJ_PLACEHOLDER_VERSION_INFO
    {
        uint8_t ProviderID[128];
        uint8_t ContentID[128];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ProjectedFileSystem
{
    struct PRJ_FILE_BASIC_INFO
    {
        uint8_t IsDirectory;
        int64_t FileSize;
        Windows::Win32::SystemServices::LARGE_INTEGER CreationTime;
        Windows::Win32::SystemServices::LARGE_INTEGER LastAccessTime;
        Windows::Win32::SystemServices::LARGE_INTEGER LastWriteTime;
        Windows::Win32::SystemServices::LARGE_INTEGER ChangeTime;
        uint32_t FileAttributes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ProjectedFileSystem
{
    struct PRJ_PLACEHOLDER_INFO
    {
        struct _EaInformation_e__Struct
        {
            uint32_t EaBufferSize;
            uint32_t OffsetToFirstEa;
        };
        struct _SecurityInformation_e__Struct
        {
            uint32_t SecurityBufferSize;
            uint32_t OffsetToSecurityDescriptor;
        };
        struct _StreamsInformation_e__Struct
        {
            uint32_t StreamsInfoBufferSize;
            uint32_t OffsetToFirstStreamInfo;
        };
        Windows::Win32::ProjectedFileSystem::PRJ_FILE_BASIC_INFO FileBasicInfo;
        _EaInformation_e__Struct EaInformation;
        _SecurityInformation_e__Struct SecurityInformation;
        _StreamsInformation_e__Struct StreamsInformation;
        Windows::Win32::ProjectedFileSystem::PRJ_PLACEHOLDER_VERSION_INFO VersionInfo;
        uint8_t VariableData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ProjectedFileSystem
{
    struct PRJ_CALLBACK_DATA
    {
        uint32_t Size;
        Windows::Win32::ProjectedFileSystem::PRJ_CALLBACK_DATA_FLAGS Flags;
        Windows::Win32::ProjectedFileSystem::PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT__* NamespaceVirtualizationContext;
        int32_t CommandId;
        ::win32::guid FileId;
        ::win32::guid DataStreamId;
        uint16_t* FilePathName;
        Windows::Win32::ProjectedFileSystem::PRJ_PLACEHOLDER_VERSION_INFO* VersionInfo;
        uint32_t TriggeringProcessId;
        uint16_t* TriggeringProcessImageFileName;
        void* InstanceContext;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ProjectedFileSystem
{
    union PRJ_NOTIFICATION_PARAMETERS
    {
        struct _PostCreate_e__Struct
        {
            Windows::Win32::ProjectedFileSystem::PRJ_NOTIFY_TYPES NotificationMask;
        };
        struct _FileRenamed_e__Struct
        {
            Windows::Win32::ProjectedFileSystem::PRJ_NOTIFY_TYPES NotificationMask;
        };
        struct _FileDeletedOnHandleClose_e__Struct
        {
            uint8_t IsFileModified;
        };
        _PostCreate_e__Struct PostCreate;
        _FileRenamed_e__Struct FileRenamed;
        _FileDeletedOnHandleClose_e__Struct FileDeletedOnHandleClose;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ProjectedFileSystem
{
    struct PRJ_CALLBACKS
    {
        Windows::Win32::ProjectedFileSystem::PRJ_START_DIRECTORY_ENUMERATION_CB** StartDirectoryEnumerationCallback;
        Windows::Win32::ProjectedFileSystem::PRJ_END_DIRECTORY_ENUMERATION_CB** EndDirectoryEnumerationCallback;
        Windows::Win32::ProjectedFileSystem::PRJ_GET_DIRECTORY_ENUMERATION_CB** GetDirectoryEnumerationCallback;
        Windows::Win32::ProjectedFileSystem::PRJ_GET_PLACEHOLDER_INFO_CB** GetPlaceholderInfoCallback;
        Windows::Win32::ProjectedFileSystem::PRJ_GET_FILE_DATA_CB** GetFileDataCallback;
        Windows::Win32::ProjectedFileSystem::PRJ_QUERY_FILE_NAME_CB** QueryFileNameCallback;
        Windows::Win32::ProjectedFileSystem::PRJ_NOTIFICATION_CB** NotificationCallback;
        Windows::Win32::ProjectedFileSystem::PRJ_CANCEL_COMMAND_CB** CancelCommandCallback;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ProjectedFileSystem
{
    struct PRJ_COMPLETE_COMMAND_EXTENDED_PARAMETERS
    {
        union _Anonymous_e__Union
        {
            struct _Notification_e__Struct
            {
                Windows::Win32::ProjectedFileSystem::PRJ_NOTIFY_TYPES NotificationMask;
            };
            struct _Enumeration_e__Struct
            {
                Windows::Win32::ProjectedFileSystem::PRJ_DIR_ENTRY_BUFFER_HANDLE__* DirEntryBufferHandle;
            };
            _Notification_e__Struct Notification;
            _Enumeration_e__Struct Enumeration;
        };
        Windows::Win32::ProjectedFileSystem::PRJ_COMPLETE_COMMAND_TYPE CommandType;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsPropertiesSystem
{
    struct SERIALIZEDPROPSTORAGE
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ProcessStatus
{
    struct MODULEINFO
    {
        void* lpBaseOfDll;
        uint32_t SizeOfImage;
        void* EntryPoint;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ProcessStatus
{
    union PSAPI_WORKING_SET_BLOCK
    {
        struct _Anonymous_e__Struct
        {
            size_t _bitfield;
        };
        size_t Flags;
        _Anonymous_e__Struct Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ProcessStatus
{
    struct PSAPI_WORKING_SET_INFORMATION
    {
        size_t NumberOfEntries;
        Windows::Win32::ProcessStatus::PSAPI_WORKING_SET_BLOCK WorkingSetInfo[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ProcessStatus
{
    union PSAPI_WORKING_SET_EX_BLOCK
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                size_t _bitfield;
            };
            struct _Invalid_e__Struct
            {
                size_t _bitfield;
            };
            _Anonymous_e__Struct Anonymous;
            _Invalid_e__Struct Invalid;
        };
        size_t Flags;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ProcessStatus
{
    struct PSAPI_WORKING_SET_EX_INFORMATION
    {
        void* VirtualAddress;
        Windows::Win32::ProcessStatus::PSAPI_WORKING_SET_EX_BLOCK VirtualAttributes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ProcessStatus
{
    struct PSAPI_WS_WATCH_INFORMATION
    {
        void* FaultingPc;
        void* FaultingVa;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ProcessStatus
{
    struct PSAPI_WS_WATCH_INFORMATION_EX
    {
        Windows::Win32::ProcessStatus::PSAPI_WS_WATCH_INFORMATION BasicInfo;
        size_t FaultingThreadId;
        size_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ProcessStatus
{
    struct PROCESS_MEMORY_COUNTERS
    {
        uint32_t cb;
        uint32_t PageFaultCount;
        size_t PeakWorkingSetSize;
        size_t WorkingSetSize;
        size_t QuotaPeakPagedPoolUsage;
        size_t QuotaPagedPoolUsage;
        size_t QuotaPeakNonPagedPoolUsage;
        size_t QuotaNonPagedPoolUsage;
        size_t PagefileUsage;
        size_t PeakPagefileUsage;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ProcessStatus
{
    struct PROCESS_MEMORY_COUNTERS_EX
    {
        uint32_t cb;
        uint32_t PageFaultCount;
        size_t PeakWorkingSetSize;
        size_t WorkingSetSize;
        size_t QuotaPeakPagedPoolUsage;
        size_t QuotaPagedPoolUsage;
        size_t QuotaPeakNonPagedPoolUsage;
        size_t QuotaNonPagedPoolUsage;
        size_t PagefileUsage;
        size_t PeakPagefileUsage;
        size_t PrivateUsage;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ProcessStatus
{
    struct PERFORMANCE_INFORMATION
    {
        uint32_t cb;
        size_t CommitTotal;
        size_t CommitLimit;
        size_t CommitPeak;
        size_t PhysicalTotal;
        size_t PhysicalAvailable;
        size_t SystemCache;
        size_t KernelTotal;
        size_t KernelPaged;
        size_t KernelNonpaged;
        size_t PageSize;
        uint32_t HandleCount;
        uint32_t ProcessCount;
        uint32_t ThreadCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ProcessStatus
{
    struct ENUM_PAGE_FILE_INFORMATION
    {
        uint32_t cb;
        uint32_t Reserved;
        size_t TotalSize;
        size_t TotalInUse;
        size_t PeakUsage;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct FLOWSPEC
    {
        uint32_t TokenRate;
        uint32_t TokenBucketSize;
        uint32_t PeakBandwidth;
        uint32_t Latency;
        uint32_t DelayVariation;
        uint32_t ServiceType;
        uint32_t MaxSduSize;
        uint32_t MinimumPolicedSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct QOS_OBJECT_HDR
    {
        uint32_t ObjectType;
        uint32_t ObjectLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct QOS_SD_MODE
    {
        Windows::Win32::QualityOfService::QOS_OBJECT_HDR ObjectHdr;
        uint32_t ShapeDiscardMode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct QOS_SHAPING_RATE
    {
        Windows::Win32::QualityOfService::QOS_OBJECT_HDR ObjectHdr;
        uint32_t ShapingRate;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct RsvpObjHdr
    {
        uint16_t obj_length;
        uint8_t obj_class;
        uint8_t obj_ctype;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct Session_IPv4
    {
        Windows::Win32::WinSock::in_addr sess_destaddr;
        uint8_t sess_protid;
        uint8_t sess_flags;
        uint16_t sess_destport;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct RSVP_SESSION
    {
        union _sess_u_e__Union
        {
            Windows::Win32::QualityOfService::Session_IPv4 sess_ipv4;
        };
        Windows::Win32::QualityOfService::RsvpObjHdr sess_header;
        _sess_u_e__Union sess_u;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct Rsvp_Hop_IPv4
    {
        Windows::Win32::WinSock::in_addr hop_ipaddr;
        uint32_t hop_LIH;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct RSVP_HOP
    {
        union _hop_u_e__Union
        {
            Windows::Win32::QualityOfService::Rsvp_Hop_IPv4 hop_ipv4;
        };
        Windows::Win32::QualityOfService::RsvpObjHdr hop_header;
        _hop_u_e__Union hop_u;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct RESV_STYLE
    {
        Windows::Win32::QualityOfService::RsvpObjHdr style_header;
        uint32_t style_word;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct Filter_Spec_IPv4
    {
        Windows::Win32::WinSock::in_addr filt_ipaddr;
        uint16_t filt_unused;
        uint16_t filt_port;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct Filter_Spec_IPv4GPI
    {
        Windows::Win32::WinSock::in_addr filt_ipaddr;
        uint32_t filt_gpi;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct FILTER_SPEC
    {
        union _filt_u_e__Union
        {
            Windows::Win32::QualityOfService::Filter_Spec_IPv4 filt_ipv4;
            Windows::Win32::QualityOfService::Filter_Spec_IPv4GPI filt_ipv4gpi;
        };
        Windows::Win32::QualityOfService::RsvpObjHdr filt_header;
        _filt_u_e__Union filt_u;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct Scope_list_ipv4
    {
        Windows::Win32::WinSock::in_addr scopl_ipaddr[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct RSVP_SCOPE
    {
        union _scope_u_e__Union
        {
            Windows::Win32::QualityOfService::Scope_list_ipv4 scopl_ipv4;
        };
        Windows::Win32::QualityOfService::RsvpObjHdr scopl_header;
        _scope_u_e__Union scope_u;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct Error_Spec_IPv4
    {
        Windows::Win32::WinSock::in_addr errs_errnode;
        uint8_t errs_flags;
        uint8_t errs_code;
        uint16_t errs_value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct ERROR_SPEC
    {
        union _errs_u_e__Union
        {
            Windows::Win32::QualityOfService::Error_Spec_IPv4 errs_ipv4;
        };
        Windows::Win32::QualityOfService::RsvpObjHdr errs_header;
        _errs_u_e__Union errs_u;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct POLICY_DATA
    {
        Windows::Win32::QualityOfService::RsvpObjHdr PolicyObjHdr;
        uint16_t usPeOffset;
        uint16_t usReserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct POLICY_ELEMENT
    {
        uint16_t usPeLength;
        uint16_t usPeType;
        uint8_t ucPeData[4];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct IntServMainHdr
    {
        uint8_t ismh_version;
        uint8_t ismh_unused;
        uint16_t ismh_len32b;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct IntServServiceHdr
    {
        uint8_t issh_service;
        uint8_t issh_flags;
        uint16_t issh_len32b;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct IntServParmHdr
    {
        uint8_t isph_parm_num;
        uint8_t isph_flags;
        uint16_t isph_len32b;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct GenTspecParms
    {
        float TB_Tspec_r;
        float TB_Tspec_b;
        float TB_Tspec_p;
        uint32_t TB_Tspec_m;
        uint32_t TB_Tspec_M;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct GenTspec
    {
        Windows::Win32::QualityOfService::IntServServiceHdr gen_Tspec_serv_hdr;
        Windows::Win32::QualityOfService::IntServParmHdr gen_Tspec_parm_hdr;
        Windows::Win32::QualityOfService::GenTspecParms gen_Tspec_parms;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct QualTspecParms
    {
        uint32_t TB_Tspec_M;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct QualTspec
    {
        Windows::Win32::QualityOfService::IntServServiceHdr qual_Tspec_serv_hdr;
        Windows::Win32::QualityOfService::IntServParmHdr qual_Tspec_parm_hdr;
        Windows::Win32::QualityOfService::QualTspecParms qual_Tspec_parms;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct QualAppFlowSpec
    {
        Windows::Win32::QualityOfService::IntServServiceHdr Q_spec_serv_hdr;
        Windows::Win32::QualityOfService::IntServParmHdr Q_spec_parm_hdr;
        Windows::Win32::QualityOfService::QualTspecParms Q_spec_parms;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct IntServTspecBody
    {
        union _tspec_u_e__Union
        {
            Windows::Win32::QualityOfService::GenTspec gen_stspec;
            Windows::Win32::QualityOfService::QualTspec qual_stspec;
        };
        Windows::Win32::QualityOfService::IntServMainHdr st_mh;
        _tspec_u_e__Union tspec_u;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct SENDER_TSPEC
    {
        Windows::Win32::QualityOfService::RsvpObjHdr stspec_header;
        Windows::Win32::QualityOfService::IntServTspecBody stspec_body;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct CtrlLoadFlowspec
    {
        Windows::Win32::QualityOfService::IntServServiceHdr CL_spec_serv_hdr;
        Windows::Win32::QualityOfService::IntServParmHdr CL_spec_parm_hdr;
        Windows::Win32::QualityOfService::GenTspecParms CL_spec_parms;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct GuarRspec
    {
        float Guar_R;
        uint32_t Guar_S;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct GuarFlowSpec
    {
        Windows::Win32::QualityOfService::IntServServiceHdr Guar_serv_hdr;
        Windows::Win32::QualityOfService::IntServParmHdr Guar_Tspec_hdr;
        Windows::Win32::QualityOfService::GenTspecParms Guar_Tspec_parms;
        Windows::Win32::QualityOfService::IntServParmHdr Guar_Rspec_hdr;
        Windows::Win32::QualityOfService::GuarRspec Guar_Rspec;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct IntServFlowSpec
    {
        union _spec_u_e__Union
        {
            Windows::Win32::QualityOfService::CtrlLoadFlowspec CL_spec;
            Windows::Win32::QualityOfService::GuarFlowSpec G_spec;
            Windows::Win32::QualityOfService::QualAppFlowSpec Q_spec;
        };
        Windows::Win32::QualityOfService::IntServMainHdr spec_mh;
        _spec_u_e__Union spec_u;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct IS_FLOWSPEC
    {
        Windows::Win32::QualityOfService::RsvpObjHdr flow_header;
        Windows::Win32::QualityOfService::IntServFlowSpec flow_body;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct flow_desc
    {
        union _u1_e__Union
        {
            Windows::Win32::QualityOfService::SENDER_TSPEC* stspec;
            Windows::Win32::QualityOfService::IS_FLOWSPEC* isflow;
        };
        union _u2_e__Union
        {
            Windows::Win32::QualityOfService::FILTER_SPEC* stemp;
            Windows::Win32::QualityOfService::FILTER_SPEC* fspec;
        };
        _u1_e__Union u1;
        _u2_e__Union u2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct Gads_parms_t
    {
        Windows::Win32::QualityOfService::IntServServiceHdr Gads_serv_hdr;
        Windows::Win32::QualityOfService::IntServParmHdr Gads_Ctot_hdr;
        uint32_t Gads_Ctot;
        Windows::Win32::QualityOfService::IntServParmHdr Gads_Dtot_hdr;
        uint32_t Gads_Dtot;
        Windows::Win32::QualityOfService::IntServParmHdr Gads_Csum_hdr;
        uint32_t Gads_Csum;
        Windows::Win32::QualityOfService::IntServParmHdr Gads_Dsum_hdr;
        uint32_t Gads_Dsum;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct GenAdspecParams
    {
        Windows::Win32::QualityOfService::IntServServiceHdr gen_parm_hdr;
        Windows::Win32::QualityOfService::IntServParmHdr gen_parm_hopcnt_hdr;
        uint32_t gen_parm_hopcnt;
        Windows::Win32::QualityOfService::IntServParmHdr gen_parm_pathbw_hdr;
        float gen_parm_path_bw;
        Windows::Win32::QualityOfService::IntServParmHdr gen_parm_minlat_hdr;
        uint32_t gen_parm_min_latency;
        Windows::Win32::QualityOfService::IntServParmHdr gen_parm_compmtu_hdr;
        uint32_t gen_parm_composed_MTU;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct IS_ADSPEC_BODY
    {
        Windows::Win32::QualityOfService::IntServMainHdr adspec_mh;
        Windows::Win32::QualityOfService::GenAdspecParams adspec_genparms;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct ADSPEC
    {
        Windows::Win32::QualityOfService::RsvpObjHdr adspec_header;
        Windows::Win32::QualityOfService::IS_ADSPEC_BODY adspec_body;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct ID_ERROR_OBJECT
    {
        uint16_t usIdErrLength;
        uint8_t ucAType;
        uint8_t ucSubType;
        uint16_t usReserved;
        uint16_t usIdErrorValue;
        uint8_t ucIdErrData[4];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct LPM_HANDLE__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct RHANDLE__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct RSVP_MSG_OBJS
    {
        int32_t RsvpMsgType;
        Windows::Win32::QualityOfService::RSVP_SESSION* pRsvpSession;
        Windows::Win32::QualityOfService::RSVP_HOP* pRsvpFromHop;
        Windows::Win32::QualityOfService::RSVP_HOP* pRsvpToHop;
        Windows::Win32::QualityOfService::RESV_STYLE* pResvStyle;
        Windows::Win32::QualityOfService::RSVP_SCOPE* pRsvpScope;
        int32_t FlowDescCount;
        Windows::Win32::QualityOfService::flow_desc* pFlowDescs;
        int32_t PdObjectCount;
        Windows::Win32::QualityOfService::POLICY_DATA** ppPdObjects;
        Windows::Win32::QualityOfService::ERROR_SPEC* pErrorSpec;
        Windows::Win32::QualityOfService::ADSPEC* pAdspec;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct policy_decision
    {
        uint32_t lpvResult;
        uint16_t wPolicyErrCode;
        uint16_t wPolicyErrValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct LPM_INIT_INFO
    {
        uint32_t PcmVersionNumber;
        uint32_t ResultTimeLimit;
        int32_t ConfiguredLpmCount;
        Windows::Win32::QualityOfService::PALLOCMEM* AllocMemory;
        Windows::Win32::QualityOfService::PFREEMEM* FreeMemory;
        Windows::Win32::QualityOfService::CBADMITRESULT* PcmAdmitResultCallback;
        Windows::Win32::QualityOfService::CBGETRSVPOBJECTS* GetRsvpObjectsCallback;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct lpmiptable
    {
        uint32_t ulIfIndex;
        uint32_t MediaType;
        Windows::Win32::WinSock::in_addr IfIpAddr;
        Windows::Win32::WinSock::in_addr IfNetMask;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct QOS_PACKET_PRIORITY
    {
        uint32_t ConformantDSCPValue;
        uint32_t NonConformantDSCPValue;
        uint32_t ConformantL2Value;
        uint32_t NonConformantL2Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct QOS_FLOW_FUNDAMENTALS
    {
        Windows::Win32::SystemServices::BOOL BottleneckBandwidthSet;
        uint64_t BottleneckBandwidth;
        Windows::Win32::SystemServices::BOOL AvailableBandwidthSet;
        uint64_t AvailableBandwidth;
        Windows::Win32::SystemServices::BOOL RTTSet;
        uint32_t RTT;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct QOS_FLOWRATE_OUTGOING
    {
        uint64_t Bandwidth;
        Windows::Win32::QualityOfService::QOS_SHAPING ShapingBehavior;
        Windows::Win32::QualityOfService::QOS_FLOWRATE_REASON Reason;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct QOS_VERSION
    {
        uint16_t MajorVersion;
        uint16_t MinorVersion;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct QOS_FRIENDLY_NAME
    {
        Windows::Win32::QualityOfService::QOS_OBJECT_HDR ObjectHdr;
        uint16_t FriendlyName[256];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct QOS_TRAFFIC_CLASS
    {
        Windows::Win32::QualityOfService::QOS_OBJECT_HDR ObjectHdr;
        uint32_t TrafficClass;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct QOS_DS_CLASS
    {
        Windows::Win32::QualityOfService::QOS_OBJECT_HDR ObjectHdr;
        uint32_t DSField;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct QOS_DIFFSERV
    {
        Windows::Win32::QualityOfService::QOS_OBJECT_HDR ObjectHdr;
        uint32_t DSFieldCount;
        uint8_t DiffservRule[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct QOS_DIFFSERV_RULE
    {
        uint8_t InboundDSField;
        uint8_t ConformingOutboundDSField;
        uint8_t NonConformingOutboundDSField;
        uint8_t ConformingUserPriority;
        uint8_t NonConformingUserPriority;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct QOS_TCP_TRAFFIC
    {
        Windows::Win32::QualityOfService::QOS_OBJECT_HDR ObjectHdr;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct TCI_CLIENT_FUNC_LIST
    {
        Windows::Win32::QualityOfService::TCI_NOTIFY_HANDLER* ClNotifyHandler;
        Windows::Win32::QualityOfService::TCI_ADD_FLOW_COMPLETE_HANDLER* ClAddFlowCompleteHandler;
        Windows::Win32::QualityOfService::TCI_MOD_FLOW_COMPLETE_HANDLER* ClModifyFlowCompleteHandler;
        Windows::Win32::QualityOfService::TCI_DEL_FLOW_COMPLETE_HANDLER* ClDeleteFlowCompleteHandler;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct ADDRESS_LIST_DESCRIPTOR
    {
        uint32_t MediaType;
        Windows::Win32::NativeWiFi::NETWORK_ADDRESS_LIST AddressList;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct TC_IFC_DESCRIPTOR
    {
        uint32_t Length;
        uint16_t* pInterfaceName;
        uint16_t* pInterfaceID;
        Windows::Win32::QualityOfService::ADDRESS_LIST_DESCRIPTOR AddressListDesc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct TC_SUPPORTED_INFO_BUFFER
    {
        uint16_t InstanceIDLength;
        uint16_t InstanceID[256];
        uint64_t InterfaceLuid;
        Windows::Win32::QualityOfService::ADDRESS_LIST_DESCRIPTOR AddrListDesc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct TC_GEN_FILTER
    {
        uint16_t AddressType;
        uint32_t PatternSize;
        void* Pattern;
        void* Mask;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct TC_GEN_FLOW
    {
        Windows::Win32::QualityOfService::FLOWSPEC SendingFlowspec;
        Windows::Win32::QualityOfService::FLOWSPEC ReceivingFlowspec;
        uint32_t TcObjectsLength;
        Windows::Win32::QualityOfService::QOS_OBJECT_HDR TcObjects[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct IP_PATTERN
    {
        union _S_un_e__Union
        {
            struct _S_un_ports_e__Struct
            {
                uint16_t s_srcport;
                uint16_t s_dstport;
            };
            struct _S_un_icmp_e__Struct
            {
                uint8_t s_type;
                uint8_t s_code;
                uint16_t filler;
            };
            _S_un_ports_e__Struct S_un_ports;
            _S_un_icmp_e__Struct S_un_icmp;
            uint32_t S_Spi;
        };
        uint32_t Reserved1;
        uint32_t Reserved2;
        uint32_t SrcAddr;
        uint32_t DstAddr;
        _S_un_e__Union S_un;
        uint8_t ProtocolId;
        uint8_t Reserved3[3];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct IPX_PATTERN
    {
        struct _Src_e__Struct
        {
            uint32_t NetworkAddress;
            uint8_t NodeAddress[6];
            uint16_t Socket;
        };
        _Src_e__Struct Src;
        _Src_e__Struct Dest;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct ENUMERATION_BUFFER
    {
        uint32_t Length;
        uint32_t OwnerProcessId;
        uint16_t FlowNameLength;
        uint16_t FlowName[256];
        Windows::Win32::QualityOfService::TC_GEN_FLOW* pFlow;
        uint32_t NumberOfFilters;
        Windows::Win32::QualityOfService::TC_GEN_FILTER GenericFilter[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDifferentialCompression
{
    struct RdcNeed
    {
        Windows::Win32::RemoteDifferentialCompression::RdcNeedType m_BlockType;
        uint64_t m_FileOffset;
        uint64_t m_BlockLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDifferentialCompression
{
    struct RdcBufferPointer
    {
        uint32_t m_Size;
        uint32_t m_Used;
        uint8_t* m_Data;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDifferentialCompression
{
    struct RdcNeedPointer
    {
        uint32_t m_Size;
        uint32_t m_Used;
        Windows::Win32::RemoteDifferentialCompression::RdcNeed* m_Data;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDifferentialCompression
{
    struct RdcSignature
    {
        uint8_t m_Signature[16];
        uint16_t m_BlockLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDifferentialCompression
{
    struct RdcSignaturePointer
    {
        uint32_t m_Size;
        uint32_t m_Used;
        Windows::Win32::RemoteDifferentialCompression::RdcSignature* m_Data;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDifferentialCompression
{
    struct SimilarityMappedViewInfo
    {
        uint8_t* m_Data;
        uint32_t m_Length;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDifferentialCompression
{
    struct SimilarityData
    {
        uint8_t m_Data[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDifferentialCompression
{
    struct FindSimilarFileIndexResults
    {
        uint32_t m_FileIndex;
        uint32_t m_MatchCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDifferentialCompression
{
    struct SimilarityDumpData
    {
        uint32_t m_FileIndex;
        Windows::Win32::RemoteDifferentialCompression::SimilarityData m_Data;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDifferentialCompression
{
    struct SimilarityFileId
    {
        uint8_t m_FileId[32];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsDesktopSharing
{
    struct __ReferenceRemainingTypes__
    {
        Windows::Win32::WindowsDesktopSharing::CTRL_LEVEL __ctrlLevel__;
        Windows::Win32::WindowsDesktopSharing::ATTENDEE_DISCONNECT_REASON __attendeeDisconnectReason__;
        Windows::Win32::WindowsDesktopSharing::CHANNEL_PRIORITY __channelPriority__;
        Windows::Win32::WindowsDesktopSharing::CHANNEL_FLAGS __channelFlags__;
        Windows::Win32::WindowsDesktopSharing::CHANNEL_ACCESS_ENUM __channelAccessEnum__;
        Windows::Win32::WindowsDesktopSharing::RDPENCOMAPI_ATTENDEE_FLAGS __rdpencomapiAttendeeFlags__;
        Windows::Win32::WindowsDesktopSharing::RDPSRAPI_WND_FLAGS __rdpsrapiWndFlags__;
        Windows::Win32::WindowsDesktopSharing::RDPSRAPI_APP_FLAGS __rdpsrapiAppFlags__;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RightsManagement
{
    struct DRMID
    {
        uint32_t uVersion;
        uint16_t* wszIDType;
        uint16_t* wszID;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RightsManagement
{
    struct DRMBOUNDLICENSEPARAMS
    {
        uint32_t uVersion;
        uint32_t hEnablingPrincipal;
        uint32_t hSecureStore;
        uint16_t* wszRightsRequested;
        uint16_t* wszRightsGroup;
        Windows::Win32::RightsManagement::DRMID idResource;
        uint32_t cAuthenticatorCount;
        uint32_t* rghAuthenticators;
        uint16_t* wszDefaultEnablingPrincipalCredentials;
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RightsManagement
{
    struct DRM_LICENSE_ACQ_DATA
    {
        uint32_t uVersion;
        uint16_t* wszURL;
        uint16_t* wszLocalFilename;
        uint8_t* pbPostData;
        uint32_t dwPostDataSize;
        uint16_t* wszFriendlyName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RightsManagement
{
    struct DRM_ACTSERV_INFO
    {
        uint32_t uVersion;
        uint16_t* wszPubKey;
        uint16_t* wszURL;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RightsManagement
{
    struct DRM_CLIENT_VERSION_INFO
    {
        uint32_t uStructVersion;
        uint32_t dwVersion[4];
        uint16_t wszHierarchy[256];
        uint16_t wszProductId[256];
        uint16_t wszProductDescription[256];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct RPC_BINDING_VECTOR
    {
        uint32_t Count;
        void* BindingH[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct UUID_VECTOR
    {
        uint32_t Count;
        ::win32::guid* Uuid[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct RPC_IF_ID
    {
        ::win32::guid Uuid;
        uint16_t VersMajor;
        uint16_t VersMinor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct RPC_PROTSEQ_VECTORA
    {
        uint32_t Count;
        uint8_t* Protseq[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct RPC_PROTSEQ_VECTORW
    {
        uint32_t Count;
        uint16_t* Protseq[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct RPC_POLICY
    {
        uint32_t Length;
        uint32_t EndpointFlags;
        uint32_t NICFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct RPC_STATS_VECTOR
    {
        uint32_t Count;
        uint32_t Stats[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct RPC_IF_ID_VECTOR
    {
        uint32_t Count;
        Windows::Win32::Rpc::RPC_IF_ID* IfId[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct RPC_SECURITY_QOS
    {
        uint32_t Version;
        uint32_t Capabilities;
        uint32_t IdentityTracking;
        uint32_t ImpersonationType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct RPC_HTTP_TRANSPORT_CREDENTIALS_W
    {
        Windows::Win32::Security::SEC_WINNT_AUTH_IDENTITY_W* TransportCredentials;
        uint32_t Flags;
        uint32_t AuthenticationTarget;
        uint32_t NumberOfAuthnSchemes;
        uint32_t* AuthnSchemes;
        uint16_t* ServerCertificateSubject;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct RPC_HTTP_TRANSPORT_CREDENTIALS_A
    {
        Windows::Win32::Security::SEC_WINNT_AUTH_IDENTITY_A* TransportCredentials;
        uint32_t Flags;
        uint32_t AuthenticationTarget;
        uint32_t NumberOfAuthnSchemes;
        uint32_t* AuthnSchemes;
        uint8_t* ServerCertificateSubject;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct RPC_HTTP_TRANSPORT_CREDENTIALS_V2_W
    {
        Windows::Win32::Security::SEC_WINNT_AUTH_IDENTITY_W* TransportCredentials;
        uint32_t Flags;
        uint32_t AuthenticationTarget;
        uint32_t NumberOfAuthnSchemes;
        uint32_t* AuthnSchemes;
        uint16_t* ServerCertificateSubject;
        Windows::Win32::Security::SEC_WINNT_AUTH_IDENTITY_W* ProxyCredentials;
        uint32_t NumberOfProxyAuthnSchemes;
        uint32_t* ProxyAuthnSchemes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct RPC_HTTP_TRANSPORT_CREDENTIALS_V2_A
    {
        Windows::Win32::Security::SEC_WINNT_AUTH_IDENTITY_A* TransportCredentials;
        uint32_t Flags;
        uint32_t AuthenticationTarget;
        uint32_t NumberOfAuthnSchemes;
        uint32_t* AuthnSchemes;
        uint8_t* ServerCertificateSubject;
        Windows::Win32::Security::SEC_WINNT_AUTH_IDENTITY_A* ProxyCredentials;
        uint32_t NumberOfProxyAuthnSchemes;
        uint32_t* ProxyAuthnSchemes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct RPC_HTTP_TRANSPORT_CREDENTIALS_V3_W
    {
        void* TransportCredentials;
        uint32_t Flags;
        uint32_t AuthenticationTarget;
        uint32_t NumberOfAuthnSchemes;
        uint32_t* AuthnSchemes;
        uint16_t* ServerCertificateSubject;
        void* ProxyCredentials;
        uint32_t NumberOfProxyAuthnSchemes;
        uint32_t* ProxyAuthnSchemes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct RPC_HTTP_TRANSPORT_CREDENTIALS_V3_A
    {
        void* TransportCredentials;
        uint32_t Flags;
        uint32_t AuthenticationTarget;
        uint32_t NumberOfAuthnSchemes;
        uint32_t* AuthnSchemes;
        uint8_t* ServerCertificateSubject;
        void* ProxyCredentials;
        uint32_t NumberOfProxyAuthnSchemes;
        uint32_t* ProxyAuthnSchemes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct RPC_SECURITY_QOS_V2_W
    {
        union _u_e__Union
        {
            Windows::Win32::Rpc::RPC_HTTP_TRANSPORT_CREDENTIALS_W* HttpCredentials;
        };
        uint32_t Version;
        uint32_t Capabilities;
        uint32_t IdentityTracking;
        uint32_t ImpersonationType;
        uint32_t AdditionalSecurityInfoType;
        _u_e__Union u;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct RPC_SECURITY_QOS_V2_A
    {
        union _u_e__Union
        {
            Windows::Win32::Rpc::RPC_HTTP_TRANSPORT_CREDENTIALS_A* HttpCredentials;
        };
        uint32_t Version;
        uint32_t Capabilities;
        uint32_t IdentityTracking;
        uint32_t ImpersonationType;
        uint32_t AdditionalSecurityInfoType;
        _u_e__Union u;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct RPC_SECURITY_QOS_V3_W
    {
        union _u_e__Union
        {
            Windows::Win32::Rpc::RPC_HTTP_TRANSPORT_CREDENTIALS_W* HttpCredentials;
        };
        uint32_t Version;
        uint32_t Capabilities;
        uint32_t IdentityTracking;
        uint32_t ImpersonationType;
        uint32_t AdditionalSecurityInfoType;
        _u_e__Union u;
        void* Sid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct RPC_SECURITY_QOS_V3_A
    {
        union _u_e__Union
        {
            Windows::Win32::Rpc::RPC_HTTP_TRANSPORT_CREDENTIALS_A* HttpCredentials;
        };
        uint32_t Version;
        uint32_t Capabilities;
        uint32_t IdentityTracking;
        uint32_t ImpersonationType;
        uint32_t AdditionalSecurityInfoType;
        _u_e__Union u;
        void* Sid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct RPC_SECURITY_QOS_V4_W
    {
        union _u_e__Union
        {
            Windows::Win32::Rpc::RPC_HTTP_TRANSPORT_CREDENTIALS_W* HttpCredentials;
        };
        uint32_t Version;
        uint32_t Capabilities;
        uint32_t IdentityTracking;
        uint32_t ImpersonationType;
        uint32_t AdditionalSecurityInfoType;
        _u_e__Union u;
        void* Sid;
        uint32_t EffectiveOnly;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct RPC_SECURITY_QOS_V4_A
    {
        union _u_e__Union
        {
            Windows::Win32::Rpc::RPC_HTTP_TRANSPORT_CREDENTIALS_A* HttpCredentials;
        };
        uint32_t Version;
        uint32_t Capabilities;
        uint32_t IdentityTracking;
        uint32_t ImpersonationType;
        uint32_t AdditionalSecurityInfoType;
        _u_e__Union u;
        void* Sid;
        uint32_t EffectiveOnly;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct RPC_SECURITY_QOS_V5_W
    {
        union _u_e__Union
        {
            Windows::Win32::Rpc::RPC_HTTP_TRANSPORT_CREDENTIALS_W* HttpCredentials;
        };
        uint32_t Version;
        uint32_t Capabilities;
        uint32_t IdentityTracking;
        uint32_t ImpersonationType;
        uint32_t AdditionalSecurityInfoType;
        _u_e__Union u;
        void* Sid;
        uint32_t EffectiveOnly;
        void* ServerSecurityDescriptor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct RPC_SECURITY_QOS_V5_A
    {
        union _u_e__Union
        {
            Windows::Win32::Rpc::RPC_HTTP_TRANSPORT_CREDENTIALS_A* HttpCredentials;
        };
        uint32_t Version;
        uint32_t Capabilities;
        uint32_t IdentityTracking;
        uint32_t ImpersonationType;
        uint32_t AdditionalSecurityInfoType;
        _u_e__Union u;
        void* Sid;
        uint32_t EffectiveOnly;
        void* ServerSecurityDescriptor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct RPC_BINDING_HANDLE_TEMPLATE_V1_W
    {
        union _u1_e__Union
        {
            uint16_t* Reserved;
        };
        uint32_t Version;
        uint32_t Flags;
        uint32_t ProtocolSequence;
        uint16_t* NetworkAddress;
        uint16_t* StringEndpoint;
        _u1_e__Union u1;
        ::win32::guid ObjectUuid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct RPC_BINDING_HANDLE_TEMPLATE_V1_A
    {
        union _u1_e__Union
        {
            uint8_t* Reserved;
        };
        uint32_t Version;
        uint32_t Flags;
        uint32_t ProtocolSequence;
        uint8_t* NetworkAddress;
        uint8_t* StringEndpoint;
        _u1_e__Union u1;
        ::win32::guid ObjectUuid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct RPC_BINDING_HANDLE_SECURITY_V1_W
    {
        uint32_t Version;
        uint16_t* ServerPrincName;
        uint32_t AuthnLevel;
        uint32_t AuthnSvc;
        Windows::Win32::Security::SEC_WINNT_AUTH_IDENTITY_W* AuthIdentity;
        Windows::Win32::Rpc::RPC_SECURITY_QOS* SecurityQos;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct RPC_BINDING_HANDLE_SECURITY_V1_A
    {
        uint32_t Version;
        uint8_t* ServerPrincName;
        uint32_t AuthnLevel;
        uint32_t AuthnSvc;
        Windows::Win32::Security::SEC_WINNT_AUTH_IDENTITY_A* AuthIdentity;
        Windows::Win32::Rpc::RPC_SECURITY_QOS* SecurityQos;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct RPC_BINDING_HANDLE_OPTIONS_V1
    {
        uint32_t Version;
        uint32_t Flags;
        uint32_t ComTimeout;
        uint32_t CallTimeout;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct RPC_CLIENT_INFORMATION1
    {
        uint8_t* UserName;
        uint8_t* ComputerName;
        uint16_t Privilege;
        uint32_t AuthFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct RPC_ENDPOINT_TEMPLATEW
    {
        uint32_t Version;
        uint16_t* ProtSeq;
        uint16_t* Endpoint;
        void* SecurityDescriptor;
        uint32_t Backlog;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct RPC_ENDPOINT_TEMPLATEA
    {
        uint32_t Version;
        uint8_t* ProtSeq;
        uint8_t* Endpoint;
        void* SecurityDescriptor;
        uint32_t Backlog;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct RPC_INTERFACE_TEMPLATEA
    {
        uint32_t Version;
        void* IfSpec;
        ::win32::guid* MgrTypeUuid;
        void* MgrEpv;
        uint32_t Flags;
        uint32_t MaxCalls;
        uint32_t MaxRpcSize;
        Windows::Win32::Rpc::RPC_IF_CALLBACK_FN** IfCallback;
        Windows::Win32::Rpc::UUID_VECTOR* UuidVector;
        uint8_t* Annotation;
        void* SecurityDescriptor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct RPC_INTERFACE_TEMPLATEW
    {
        uint32_t Version;
        void* IfSpec;
        ::win32::guid* MgrTypeUuid;
        void* MgrEpv;
        uint32_t Flags;
        uint32_t MaxCalls;
        uint32_t MaxRpcSize;
        Windows::Win32::Rpc::RPC_IF_CALLBACK_FN** IfCallback;
        Windows::Win32::Rpc::UUID_VECTOR* UuidVector;
        uint16_t* Annotation;
        void* SecurityDescriptor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct RPC_VERSION
    {
        uint16_t MajorVersion;
        uint16_t MinorVersion;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct RPC_SYNTAX_IDENTIFIER
    {
        ::win32::guid SyntaxGUID;
        Windows::Win32::Rpc::RPC_VERSION SyntaxVersion;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct RPC_MESSAGE
    {
        void* Handle;
        uint32_t DataRepresentation;
        void* Buffer;
        uint32_t BufferLength;
        uint32_t ProcNum;
        Windows::Win32::Rpc::RPC_SYNTAX_IDENTIFIER* TransferSyntax;
        void* RpcInterfaceInformation;
        void* ReservedForRuntime;
        void* ManagerEpv;
        void* ImportContext;
        uint32_t RpcFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct RPC_DISPATCH_TABLE
    {
        uint32_t DispatchTableCount;
        Windows::Win32::Rpc::RPC_DISPATCH_FUNCTION** DispatchTable;
        intptr_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct RPC_PROTSEQ_ENDPOINT
    {
        uint8_t* RpcProtocolSequence;
        uint8_t* Endpoint;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct RPC_SERVER_INTERFACE
    {
        uint32_t Length;
        Windows::Win32::Rpc::RPC_SYNTAX_IDENTIFIER InterfaceId;
        Windows::Win32::Rpc::RPC_SYNTAX_IDENTIFIER TransferSyntax;
        Windows::Win32::Rpc::RPC_DISPATCH_TABLE* DispatchTable;
        uint32_t RpcProtseqEndpointCount;
        Windows::Win32::Rpc::RPC_PROTSEQ_ENDPOINT* RpcProtseqEndpoint;
        void* DefaultManagerEpv;
        void* InterpreterInfo;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct RPC_CLIENT_INTERFACE
    {
        uint32_t Length;
        Windows::Win32::Rpc::RPC_SYNTAX_IDENTIFIER InterfaceId;
        Windows::Win32::Rpc::RPC_SYNTAX_IDENTIFIER TransferSyntax;
        Windows::Win32::Rpc::RPC_DISPATCH_TABLE* DispatchTable;
        uint32_t RpcProtseqEndpointCount;
        Windows::Win32::Rpc::RPC_PROTSEQ_ENDPOINT* RpcProtseqEndpoint;
        size_t Reserved;
        void* InterpreterInfo;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct RPC_SEC_CONTEXT_KEY_INFO
    {
        uint32_t EncryptAlgorithm;
        uint32_t KeySize;
        uint32_t SignatureAlgorithm;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct RPC_TRANSFER_SYNTAX
    {
        ::win32::guid Uuid;
        uint16_t VersMajor;
        uint16_t VersMinor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct RPC_C_OPT_COOKIE_AUTH_DESCRIPTOR
    {
        uint32_t BufferSize;
        int8_t* Buffer;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct RDR_CALLOUT_STATE
    {
        int32_t LastError;
        void* LastEEInfo;
        Windows::Win32::Rpc::RPC_HTTP_REDIRECTOR_STAGE LastCalledStage;
        uint16_t* ServerName;
        uint16_t* ServerPort;
        uint16_t* RemoteUser;
        uint16_t* AuthType;
        uint8_t ResourceTypePresent;
        uint8_t SessionIdPresent;
        uint8_t InterfacePresent;
        ::win32::guid ResourceType;
        ::win32::guid SessionId;
        Windows::Win32::Rpc::RPC_SYNTAX_IDENTIFIER Interface;
        void* CertContext;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct I_RpcProxyCallbackInterface
    {
        Windows::Win32::Rpc::I_RpcProxyIsValidMachineFn* IsValidMachineFn;
        Windows::Win32::Rpc::I_RpcProxyGetClientAddressFn* GetClientAddressFn;
        Windows::Win32::Rpc::I_RpcProxyGetConnectionTimeoutFn* GetConnectionTimeoutFn;
        Windows::Win32::Rpc::I_RpcPerformCalloutFn* PerformCalloutFn;
        Windows::Win32::Rpc::I_RpcFreeCalloutStateFn* FreeCalloutStateFn;
        Windows::Win32::Rpc::I_RpcProxyGetClientSessionAndResourceUUID* GetClientSessionAndResourceUUIDFn;
        Windows::Win32::Rpc::I_RpcProxyFilterIfFn* ProxyFilterIfFn;
        Windows::Win32::Rpc::I_RpcProxyUpdatePerfCounterFn* RpcProxyUpdatePerfCounterFn;
        Windows::Win32::Rpc::I_RpcProxyUpdatePerfCounterBackendServerFn* RpcProxyUpdatePerfCounterBackendServerFn;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    union RPC_ASYNC_NOTIFICATION_INFO
    {
        struct _APC_e__Struct
        {
            Windows::Win32::Rpc::PFN_RPCNOTIFICATION_ROUTINE* NotificationRoutine;
            Windows::Win32::SystemServices::HANDLE hThread;
        };
        struct _IOC_e__Struct
        {
            Windows::Win32::SystemServices::HANDLE hIOPort;
            uint32_t dwNumberOfBytesTransferred;
            size_t dwCompletionKey;
            Windows::Win32::SystemServices::OVERLAPPED* lpOverlapped;
        };
        struct _IntPtr_e__Struct
        {
            Windows::Win32::WindowsAndMessaging::HWND hWnd;
            uint32_t Msg;
        };
        _APC_e__Struct APC;
        _IOC_e__Struct IOC;
        _IntPtr_e__Struct IntPtr;
        Windows::Win32::SystemServices::HANDLE hEvent;
        Windows::Win32::Rpc::PFN_RPCNOTIFICATION_ROUTINE* NotificationRoutine;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct RPC_ASYNC_STATE
    {
        uint32_t Size;
        uint32_t Signature;
        int32_t Lock;
        uint32_t Flags;
        void* StubInfo;
        void* UserInfo;
        void* RuntimeInfo;
        Windows::Win32::Rpc::RPC_ASYNC_EVENT Event;
        Windows::Win32::Rpc::RPC_NOTIFICATION_TYPES NotificationType;
        Windows::Win32::Rpc::RPC_ASYNC_NOTIFICATION_INFO u;
        intptr_t Reserved[4];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct BinaryParam
    {
        void* Buffer;
        int16_t Size;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct RPC_EE_INFO_PARAM
    {
        union _u_e__Union
        {
            int8_t* AnsiString;
            uint16_t* UnicodeString;
            int32_t LVal;
            int16_t SVal;
            uint64_t PVal;
            Windows::Win32::Rpc::BinaryParam BVal;
        };
        Windows::Win32::Rpc::ExtendedErrorParamTypes ParameterType;
        _u_e__Union u;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct RPC_EXTENDED_ERROR_INFO
    {
        union _u_e__Union
        {
            Windows::Win32::WindowsProgramming::SYSTEMTIME SystemTime;
            Windows::Win32::WindowsProgramming::FILETIME FileTime;
        };
        uint32_t Version;
        uint16_t* ComputerName;
        uint32_t ProcessID;
        _u_e__Union u;
        uint32_t GeneratingComponent;
        uint32_t Status;
        uint16_t DetectionLocation;
        uint16_t Flags;
        int32_t NumberOfParameters;
        Windows::Win32::Rpc::RPC_EE_INFO_PARAM Parameters[4];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct RPC_ERROR_ENUM_HANDLE
    {
        uint32_t Signature;
        void* CurrentPos;
        void* Head;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct RPC_CALL_LOCAL_ADDRESS_V1
    {
        uint32_t Version;
        void* Buffer;
        uint32_t BufferSize;
        Windows::Win32::Rpc::RpcLocalAddressFormat AddressFormat;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct RPC_CALL_ATTRIBUTES_V1_W
    {
        uint32_t Version;
        uint32_t Flags;
        uint32_t ServerPrincipalNameBufferLength;
        uint16_t* ServerPrincipalName;
        uint32_t ClientPrincipalNameBufferLength;
        uint16_t* ClientPrincipalName;
        uint32_t AuthenticationLevel;
        uint32_t AuthenticationService;
        Windows::Win32::SystemServices::BOOL NullSession;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct RPC_CALL_ATTRIBUTES_V1_A
    {
        uint32_t Version;
        uint32_t Flags;
        uint32_t ServerPrincipalNameBufferLength;
        uint8_t* ServerPrincipalName;
        uint32_t ClientPrincipalNameBufferLength;
        uint8_t* ClientPrincipalName;
        uint32_t AuthenticationLevel;
        uint32_t AuthenticationService;
        Windows::Win32::SystemServices::BOOL NullSession;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct RPC_CALL_ATTRIBUTES_V2_W
    {
        uint32_t Version;
        uint32_t Flags;
        uint32_t ServerPrincipalNameBufferLength;
        uint16_t* ServerPrincipalName;
        uint32_t ClientPrincipalNameBufferLength;
        uint16_t* ClientPrincipalName;
        uint32_t AuthenticationLevel;
        uint32_t AuthenticationService;
        Windows::Win32::SystemServices::BOOL NullSession;
        Windows::Win32::SystemServices::BOOL KernelModeCaller;
        uint32_t ProtocolSequence;
        Windows::Win32::Rpc::RpcCallClientLocality IsClientLocal;
        Windows::Win32::SystemServices::HANDLE ClientPID;
        uint32_t CallStatus;
        Windows::Win32::Rpc::RpcCallType CallType;
        Windows::Win32::Rpc::RPC_CALL_LOCAL_ADDRESS_V1* CallLocalAddress;
        uint16_t OpNum;
        ::win32::guid InterfaceUuid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct RPC_CALL_ATTRIBUTES_V2_A
    {
        uint32_t Version;
        uint32_t Flags;
        uint32_t ServerPrincipalNameBufferLength;
        uint8_t* ServerPrincipalName;
        uint32_t ClientPrincipalNameBufferLength;
        uint8_t* ClientPrincipalName;
        uint32_t AuthenticationLevel;
        uint32_t AuthenticationService;
        Windows::Win32::SystemServices::BOOL NullSession;
        Windows::Win32::SystemServices::BOOL KernelModeCaller;
        uint32_t ProtocolSequence;
        uint32_t IsClientLocal;
        Windows::Win32::SystemServices::HANDLE ClientPID;
        uint32_t CallStatus;
        Windows::Win32::Rpc::RpcCallType CallType;
        Windows::Win32::Rpc::RPC_CALL_LOCAL_ADDRESS_V1* CallLocalAddress;
        uint16_t OpNum;
        ::win32::guid InterfaceUuid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct RPC_CALL_ATTRIBUTES_V3_W
    {
        uint32_t Version;
        uint32_t Flags;
        uint32_t ServerPrincipalNameBufferLength;
        uint16_t* ServerPrincipalName;
        uint32_t ClientPrincipalNameBufferLength;
        uint16_t* ClientPrincipalName;
        uint32_t AuthenticationLevel;
        uint32_t AuthenticationService;
        Windows::Win32::SystemServices::BOOL NullSession;
        Windows::Win32::SystemServices::BOOL KernelModeCaller;
        uint32_t ProtocolSequence;
        Windows::Win32::Rpc::RpcCallClientLocality IsClientLocal;
        Windows::Win32::SystemServices::HANDLE ClientPID;
        uint32_t CallStatus;
        Windows::Win32::Rpc::RpcCallType CallType;
        Windows::Win32::Rpc::RPC_CALL_LOCAL_ADDRESS_V1* CallLocalAddress;
        uint16_t OpNum;
        ::win32::guid InterfaceUuid;
        uint32_t ClientIdentifierBufferLength;
        uint8_t* ClientIdentifier;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct RPC_CALL_ATTRIBUTES_V3_A
    {
        uint32_t Version;
        uint32_t Flags;
        uint32_t ServerPrincipalNameBufferLength;
        uint8_t* ServerPrincipalName;
        uint32_t ClientPrincipalNameBufferLength;
        uint8_t* ClientPrincipalName;
        uint32_t AuthenticationLevel;
        uint32_t AuthenticationService;
        Windows::Win32::SystemServices::BOOL NullSession;
        Windows::Win32::SystemServices::BOOL KernelModeCaller;
        uint32_t ProtocolSequence;
        uint32_t IsClientLocal;
        Windows::Win32::SystemServices::HANDLE ClientPID;
        uint32_t CallStatus;
        Windows::Win32::Rpc::RpcCallType CallType;
        Windows::Win32::Rpc::RPC_CALL_LOCAL_ADDRESS_V1* CallLocalAddress;
        uint16_t OpNum;
        ::win32::guid InterfaceUuid;
        uint32_t ClientIdentifierBufferLength;
        uint8_t* ClientIdentifier;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct __AnonymousRecord_rpcndr_L275_C9
    {
        void* pad[2];
        void* userContext;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct SCONTEXT_QUEUE
    {
        uint32_t NumberOfObjects;
        Windows::Win32::Rpc::NDR_SCONTEXT_1** ArrayOfObjects;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct ARRAY_INFO
    {
        int32_t Dimension;
        uint32_t* BufferConformanceMark;
        uint32_t* BufferVarianceMark;
        uint32_t* MaxCountArray;
        uint32_t* OffsetArray;
        uint32_t* ActualCountArray;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct _NDR_ASYNC_MESSAGE
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct _NDR_CORRELATION_INFO
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct NDR_ALLOC_ALL_NODES_CONTEXT
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct NDR_POINTER_QUEUE_STATE
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct _NDR_PROC_CONTEXT
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct MIDL_STUB_MESSAGE
    {
        Windows::Win32::Rpc::RPC_MESSAGE* RpcMsg;
        uint8_t* Buffer;
        uint8_t* BufferStart;
        uint8_t* BufferEnd;
        uint8_t* BufferMark;
        uint32_t BufferLength;
        uint32_t MemorySize;
        uint8_t* Memory;
        uint8_t IsClient;
        uint8_t Pad;
        uint16_t uFlags2;
        int32_t ReuseBuffer;
        Windows::Win32::Rpc::NDR_ALLOC_ALL_NODES_CONTEXT* pAllocAllNodesContext;
        Windows::Win32::Rpc::NDR_POINTER_QUEUE_STATE* pPointerQueueState;
        int32_t IgnoreEmbeddedPointers;
        uint8_t* PointerBufferMark;
        uint8_t CorrDespIncrement;
        uint8_t uFlags;
        uint16_t UniquePtrCount;
        size_t MaxCount;
        uint32_t Offset;
        uint32_t ActualCount;
        intptr_t pfnAllocate;
        intptr_t pfnFree;
        uint8_t* StackTop;
        uint8_t* pPresentedType;
        uint8_t* pTransmitType;
        void* SavedHandle;
        Windows::Win32::Rpc::MIDL_STUB_DESC* StubDesc;
        Windows::Win32::Rpc::FULL_PTR_XLAT_TABLES* FullPtrXlatTables;
        uint32_t FullPtrRefId;
        uint32_t PointerLength;
        int32_t _bitfield;
        uint32_t dwDestContext;
        void* pvDestContext;
        Windows::Win32::Rpc::NDR_SCONTEXT_1** SavedContextHandles;
        int32_t ParamNumber;
        Windows::Win32::Com::IRpcChannelBuffer* pRpcChannelBuffer;
        Windows::Win32::Rpc::ARRAY_INFO* pArrayInfo;
        uint32_t* SizePtrCountArray;
        uint32_t* SizePtrOffsetArray;
        uint32_t* SizePtrLengthArray;
        void* pArgQueue;
        uint32_t dwStubPhase;
        void* LowStackMark;
        Windows::Win32::Rpc::_NDR_ASYNC_MESSAGE* pAsyncMsg;
        Windows::Win32::Rpc::_NDR_CORRELATION_INFO* pCorrInfo;
        uint8_t* pCorrMemory;
        void* pMemoryList;
        intptr_t pCSInfo;
        uint8_t* ConformanceMark;
        uint8_t* VarianceMark;
        intptr_t Unused;
        Windows::Win32::Rpc::_NDR_PROC_CONTEXT* pContext;
        void* ContextHandleHash;
        void* pUserMarshalList;
        intptr_t Reserved51_3;
        intptr_t Reserved51_4;
        intptr_t Reserved51_5;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct GENERIC_BINDING_ROUTINE_PAIR
    {
        Windows::Win32::Rpc::GENERIC_BINDING_ROUTINE* pfnBind;
        Windows::Win32::Rpc::GENERIC_UNBIND_ROUTINE* pfnUnbind;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct __GENERIC_BINDING_INFO
    {
        void* pObj;
        uint32_t Size;
        Windows::Win32::Rpc::GENERIC_BINDING_ROUTINE* pfnBind;
        Windows::Win32::Rpc::GENERIC_UNBIND_ROUTINE* pfnUnbind;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct XMIT_ROUTINE_QUINTUPLE
    {
        Windows::Win32::Rpc::XMIT_HELPER_ROUTINE* pfnTranslateToXmit;
        Windows::Win32::Rpc::XMIT_HELPER_ROUTINE* pfnTranslateFromXmit;
        Windows::Win32::Rpc::XMIT_HELPER_ROUTINE* pfnFreeXmit;
        Windows::Win32::Rpc::XMIT_HELPER_ROUTINE* pfnFreeInst;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct USER_MARSHAL_ROUTINE_QUADRUPLE
    {
        Windows::Win32::Rpc::USER_MARSHAL_SIZING_ROUTINE* pfnBufferSize;
        Windows::Win32::Rpc::USER_MARSHAL_MARSHALLING_ROUTINE* pfnMarshall;
        Windows::Win32::Rpc::USER_MARSHAL_UNMARSHALLING_ROUTINE* pfnUnmarshall;
        Windows::Win32::Rpc::USER_MARSHAL_FREEING_ROUTINE* pfnFree;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct USER_MARSHAL_CB
    {
        uint32_t Flags;
        Windows::Win32::Rpc::MIDL_STUB_MESSAGE* pStubMsg;
        uint8_t* pReserve;
        uint32_t Signature;
        Windows::Win32::Rpc::USER_MARSHAL_CB_TYPE CBType;
        uint8_t* pFormat;
        uint8_t* pTypeFormat;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct MALLOC_FREE_STRUCT
    {
        intptr_t pfnAllocate;
        intptr_t pfnFree;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct COMM_FAULT_OFFSETS
    {
        int16_t CommOffset;
        int16_t FaultOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct NDR_CS_SIZE_CONVERT_ROUTINES
    {
        Windows::Win32::Rpc::CS_TYPE_NET_SIZE_ROUTINE* pfnNetSize;
        Windows::Win32::Rpc::CS_TYPE_TO_NETCS_ROUTINE* pfnToNetCs;
        Windows::Win32::Rpc::CS_TYPE_LOCAL_SIZE_ROUTINE* pfnLocalSize;
        Windows::Win32::Rpc::CS_TYPE_FROM_NETCS_ROUTINE* pfnFromNetCs;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct NDR_CS_ROUTINES
    {
        Windows::Win32::Rpc::NDR_CS_SIZE_CONVERT_ROUTINES* pSizeConvertRoutines;
        Windows::Win32::Rpc::CS_TAG_GETTING_ROUTINE** pTagGettingRoutines;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct NDR_EXPR_DESC
    {
        uint16_t* pOffset;
        uint8_t* pFormatExpr;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct MIDL_STUB_DESC
    {
        union _IMPLICIT_HANDLE_INFO_e__Union
        {
            void** pAutoHandle;
            void** pPrimitiveHandle;
            Windows::Win32::Rpc::__GENERIC_BINDING_INFO* pGenericBindingInfo;
        };
        void* RpcInterfaceInformation;
        intptr_t pfnAllocate;
        intptr_t pfnFree;
        _IMPLICIT_HANDLE_INFO_e__Union IMPLICIT_HANDLE_INFO;
        intptr_t* apfnNdrRundownRoutines;
        Windows::Win32::Rpc::GENERIC_BINDING_ROUTINE_PAIR* aGenericBindingRoutinePairs;
        intptr_t* apfnExprEval;
        Windows::Win32::Rpc::XMIT_ROUTINE_QUINTUPLE* aXmitQuintuple;
        uint8_t* pFormatTypes;
        int32_t fCheckBounds;
        uint32_t Version;
        Windows::Win32::Rpc::MALLOC_FREE_STRUCT* pMallocFreeStruct;
        int32_t MIDLVersion;
        Windows::Win32::Rpc::COMM_FAULT_OFFSETS* CommFaultOffsets;
        Windows::Win32::Rpc::USER_MARSHAL_ROUTINE_QUADRUPLE* aUserMarshalQuadruple;
        intptr_t* NotifyRoutineTable;
        size_t mFlags;
        Windows::Win32::Rpc::NDR_CS_ROUTINES* CsRoutineTables;
        void* ProxyServerInfo;
        Windows::Win32::Rpc::NDR_EXPR_DESC* pExprInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct MIDL_FORMAT_STRING
    {
        int16_t Pad;
        uint8_t Format;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct MIDL_METHOD_PROPERTY
    {
        uint32_t Id;
        size_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct MIDL_METHOD_PROPERTY_MAP
    {
        uint32_t Count;
        Windows::Win32::Rpc::MIDL_METHOD_PROPERTY* Properties;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct MIDL_INTERFACE_METHOD_PROPERTIES
    {
        uint16_t MethodCount;
        Windows::Win32::Rpc::MIDL_METHOD_PROPERTY_MAP** MethodProperties;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct _MIDL_SERVER_INFO_
    {
        Windows::Win32::Rpc::MIDL_STUB_DESC* pStubDesc;
        intptr_t* DispatchTable;
        uint8_t* ProcString;
        uint16_t* FmtStringOffset;
        intptr_t* ThunkTable;
        Windows::Win32::Rpc::RPC_SYNTAX_IDENTIFIER* pTransferSyntax;
        size_t nCount;
        Windows::Win32::Rpc::MIDL_SYNTAX_INFO* pSyntaxInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct MIDL_STUBLESS_PROXY_INFO
    {
        Windows::Win32::Rpc::MIDL_STUB_DESC* pStubDesc;
        uint8_t* ProcFormatString;
        uint16_t* FormatStringOffset;
        Windows::Win32::Rpc::RPC_SYNTAX_IDENTIFIER* pTransferSyntax;
        size_t nCount;
        Windows::Win32::Rpc::MIDL_SYNTAX_INFO* pSyntaxInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct MIDL_SYNTAX_INFO
    {
        Windows::Win32::Rpc::RPC_SYNTAX_IDENTIFIER TransferSyntax;
        Windows::Win32::Rpc::RPC_DISPATCH_TABLE* DispatchTable;
        uint8_t* ProcString;
        uint16_t* FmtStringOffset;
        uint8_t* TypeString;
        void* aUserMarshalQuadruple;
        Windows::Win32::Rpc::MIDL_INTERFACE_METHOD_PROPERTIES* pMethodProperties;
        size_t pReserved2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    union CLIENT_CALL_RETURN
    {
        void* Pointer;
        intptr_t Simple;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct FULL_PTR_XLAT_TABLES
    {
        void* RefIdToPointer;
        void* PointerToRefId;
        uint32_t NextRefId;
        Windows::Win32::Rpc::XLAT_SIDE XlatSide;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct MIDL_INTERCEPTION_INFO
    {
        uint32_t Version;
        uint8_t* ProcString;
        uint16_t* ProcFormatOffsetTable;
        uint32_t ProcCount;
        uint8_t* TypeString;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct MIDL_WINRT_TYPE_SERIALIZATION_INFO
    {
        uint32_t Version;
        uint8_t* TypeFormatString;
        uint16_t FormatStringSize;
        uint16_t TypeOffset;
        Windows::Win32::Rpc::MIDL_STUB_DESC* StubDesc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct NDR_USER_MARSHAL_INFO_LEVEL1
    {
        void* Buffer;
        uint32_t BufferSize;
        intptr_t pfnAllocate;
        intptr_t pfnFree;
        Windows::Win32::Com::IRpcChannelBuffer* pRpcChannelBuffer;
        size_t Reserved[5];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct NDR_USER_MARSHAL_INFO
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::Rpc::NDR_USER_MARSHAL_INFO_LEVEL1 Level1;
        };
        uint32_t InformationLevel;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Rpc
{
    struct MIDL_TYPE_PICKLING_INFO
    {
        uint32_t Version;
        uint32_t Flags;
        size_t Reserved[3];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SEC_WINNT_AUTH_IDENTITY_W
    {
        uint16_t* User;
        uint32_t UserLength;
        uint16_t* Domain;
        uint32_t DomainLength;
        uint16_t* Password;
        uint32_t PasswordLength;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SEC_WINNT_AUTH_IDENTITY_A
    {
        uint8_t* User;
        uint32_t UserLength;
        uint8_t* Domain;
        uint32_t DomainLength;
        uint8_t* Password;
        uint32_t PasswordLength;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct RASIPADDR
    {
        uint8_t a;
        uint8_t b;
        uint8_t c;
        uint8_t d;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct tagRASTUNNELENDPOINT
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::WinSock::in_addr ipv4;
            Windows::Win32::WinSock::in6_addr ipv6;
        };
        uint32_t dwType;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct HRASCONN__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct tagRASCONNW
    {
        uint32_t dwSize;
        Windows::Win32::RoutingAndRemoteAccessService::HRASCONN__* hrasconn;
        uint16_t szEntryName[257];
        uint16_t szDeviceType[17];
        uint16_t szDeviceName[129];
        uint16_t szPhonebook[260];
        uint32_t dwSubEntry;
        ::win32::guid guidEntry;
        uint32_t dwFlags;
        Windows::Win32::Kernel::LUID luid;
        ::win32::guid guidCorrelationId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct tagRASCONNA
    {
        uint32_t dwSize;
        Windows::Win32::RoutingAndRemoteAccessService::HRASCONN__* hrasconn;
        int8_t szEntryName[257];
        int8_t szDeviceType[17];
        int8_t szDeviceName[129];
        int8_t szPhonebook[260];
        uint32_t dwSubEntry;
        ::win32::guid guidEntry;
        uint32_t dwFlags;
        Windows::Win32::Kernel::LUID luid;
        ::win32::guid guidCorrelationId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct tagRASCONNSTATUSW
    {
        uint32_t dwSize;
        Windows::Win32::RoutingAndRemoteAccessService::tagRASCONNSTATE rasconnstate;
        uint32_t dwError;
        uint16_t szDeviceType[17];
        uint16_t szDeviceName[129];
        uint16_t szPhoneNumber[129];
        Windows::Win32::RoutingAndRemoteAccessService::tagRASTUNNELENDPOINT localEndPoint;
        Windows::Win32::RoutingAndRemoteAccessService::tagRASTUNNELENDPOINT remoteEndPoint;
        Windows::Win32::RoutingAndRemoteAccessService::tagRASCONNSUBSTATE rasconnsubstate;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct tagRASCONNSTATUSA
    {
        uint32_t dwSize;
        Windows::Win32::RoutingAndRemoteAccessService::tagRASCONNSTATE rasconnstate;
        uint32_t dwError;
        int8_t szDeviceType[17];
        int8_t szDeviceName[129];
        int8_t szPhoneNumber[129];
        Windows::Win32::RoutingAndRemoteAccessService::tagRASTUNNELENDPOINT localEndPoint;
        Windows::Win32::RoutingAndRemoteAccessService::tagRASTUNNELENDPOINT remoteEndPoint;
        Windows::Win32::RoutingAndRemoteAccessService::tagRASCONNSUBSTATE rasconnsubstate;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct tagRASDIALPARAMSW
    {
        uint32_t dwSize;
        uint16_t szEntryName[257];
        uint16_t szPhoneNumber[129];
        uint16_t szCallbackNumber[129];
        uint16_t szUserName[257];
        uint16_t szPassword[257];
        uint16_t szDomain[16];
        uint32_t dwSubEntry;
        size_t dwCallbackId;
        uint32_t dwIfIndex;
        uint16_t* szEncPassword;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct tagRASDIALPARAMSA
    {
        uint32_t dwSize;
        int8_t szEntryName[257];
        int8_t szPhoneNumber[129];
        int8_t szCallbackNumber[129];
        int8_t szUserName[257];
        int8_t szPassword[257];
        int8_t szDomain[16];
        uint32_t dwSubEntry;
        size_t dwCallbackId;
        uint32_t dwIfIndex;
        int8_t* szEncPassword;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct tagRASEAPINFO
    {
        uint32_t dwSizeofEapInfo;
        uint8_t* pbEapInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct RASDEVSPECIFICINFO
    {
        uint32_t dwSize;
        uint8_t* pbDevSpecificInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct tagRASDIALEXTENSIONS
    {
        uint32_t dwSize;
        uint32_t dwfOptions;
        Windows::Win32::WindowsAndMessaging::HWND hwndParent;
        size_t reserved;
        size_t reserved1;
        Windows::Win32::RoutingAndRemoteAccessService::tagRASEAPINFO RasEapInfo;
        Windows::Win32::SystemServices::BOOL fSkipPppAuth;
        Windows::Win32::RoutingAndRemoteAccessService::RASDEVSPECIFICINFO RasDevSpecificInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct tagRASENTRYNAMEW
    {
        uint32_t dwSize;
        uint16_t szEntryName[257];
        uint32_t dwFlags;
        uint16_t szPhonebookPath[261];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct tagRASENTRYNAMEA
    {
        uint32_t dwSize;
        int8_t szEntryName[257];
        uint32_t dwFlags;
        int8_t szPhonebookPath[261];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct tagRASAMBW
    {
        uint32_t dwSize;
        uint32_t dwError;
        uint16_t szNetBiosError[17];
        uint8_t bLana;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct tagRASAMBA
    {
        uint32_t dwSize;
        uint32_t dwError;
        int8_t szNetBiosError[17];
        uint8_t bLana;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct tagRASPPPNBFW
    {
        uint32_t dwSize;
        uint32_t dwError;
        uint32_t dwNetBiosError;
        uint16_t szNetBiosError[17];
        uint16_t szWorkstationName[17];
        uint8_t bLana;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct tagRASPPPNBFA
    {
        uint32_t dwSize;
        uint32_t dwError;
        uint32_t dwNetBiosError;
        int8_t szNetBiosError[17];
        int8_t szWorkstationName[17];
        uint8_t bLana;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct tagRASIPXW
    {
        uint32_t dwSize;
        uint32_t dwError;
        uint16_t szIpxAddress[22];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct tagRASPPPIPXA
    {
        uint32_t dwSize;
        uint32_t dwError;
        int8_t szIpxAddress[22];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct tagRASPPPIPW
    {
        uint32_t dwSize;
        uint32_t dwError;
        uint16_t szIpAddress[16];
        uint16_t szServerIpAddress[16];
        uint32_t dwOptions;
        uint32_t dwServerOptions;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct tagRASPPPIPA
    {
        uint32_t dwSize;
        uint32_t dwError;
        int8_t szIpAddress[16];
        int8_t szServerIpAddress[16];
        uint32_t dwOptions;
        uint32_t dwServerOptions;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct tagRASPPPIPV6
    {
        uint32_t dwSize;
        uint32_t dwError;
        uint8_t bLocalInterfaceIdentifier[8];
        uint8_t bPeerInterfaceIdentifier[8];
        uint8_t bLocalCompressionProtocol[2];
        uint8_t bPeerCompressionProtocol[2];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct tagRASPPPLCPW
    {
        uint32_t dwSize;
        Windows::Win32::SystemServices::BOOL fBundled;
        uint32_t dwError;
        uint32_t dwAuthenticationProtocol;
        uint32_t dwAuthenticationData;
        uint32_t dwEapTypeId;
        uint32_t dwServerAuthenticationProtocol;
        uint32_t dwServerAuthenticationData;
        uint32_t dwServerEapTypeId;
        Windows::Win32::SystemServices::BOOL fMultilink;
        uint32_t dwTerminateReason;
        uint32_t dwServerTerminateReason;
        uint16_t szReplyMessage[1024];
        uint32_t dwOptions;
        uint32_t dwServerOptions;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct tagRASPPPLCPA
    {
        uint32_t dwSize;
        Windows::Win32::SystemServices::BOOL fBundled;
        uint32_t dwError;
        uint32_t dwAuthenticationProtocol;
        uint32_t dwAuthenticationData;
        uint32_t dwEapTypeId;
        uint32_t dwServerAuthenticationProtocol;
        uint32_t dwServerAuthenticationData;
        uint32_t dwServerEapTypeId;
        Windows::Win32::SystemServices::BOOL fMultilink;
        uint32_t dwTerminateReason;
        uint32_t dwServerTerminateReason;
        int8_t szReplyMessage[1024];
        uint32_t dwOptions;
        uint32_t dwServerOptions;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct tagRASPPPCCP
    {
        uint32_t dwSize;
        uint32_t dwError;
        uint32_t dwCompressionAlgorithm;
        uint32_t dwOptions;
        uint32_t dwServerCompressionAlgorithm;
        uint32_t dwServerOptions;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct RASPPP_PROJECTION_INFO
    {
        uint32_t dwIPv4NegotiationError;
        Windows::Win32::WinSock::in_addr ipv4Address;
        Windows::Win32::WinSock::in_addr ipv4ServerAddress;
        uint32_t dwIPv4Options;
        uint32_t dwIPv4ServerOptions;
        uint32_t dwIPv6NegotiationError;
        uint8_t bInterfaceIdentifier[8];
        uint8_t bServerInterfaceIdentifier[8];
        Windows::Win32::SystemServices::BOOL fBundled;
        Windows::Win32::SystemServices::BOOL fMultilink;
        uint32_t dwAuthenticationProtocol;
        uint32_t dwAuthenticationData;
        uint32_t dwServerAuthenticationProtocol;
        uint32_t dwServerAuthenticationData;
        uint32_t dwEapTypeId;
        uint32_t dwServerEapTypeId;
        uint32_t dwLcpOptions;
        uint32_t dwLcpServerOptions;
        uint32_t dwCcpError;
        uint32_t dwCcpCompressionAlgorithm;
        uint32_t dwCcpServerCompressionAlgorithm;
        uint32_t dwCcpOptions;
        uint32_t dwCcpServerOptions;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct RASIKEV2_PROJECTION_INFO
    {
        uint32_t dwIPv4NegotiationError;
        Windows::Win32::WinSock::in_addr ipv4Address;
        Windows::Win32::WinSock::in_addr ipv4ServerAddress;
        uint32_t dwIPv6NegotiationError;
        Windows::Win32::WinSock::in6_addr ipv6Address;
        Windows::Win32::WinSock::in6_addr ipv6ServerAddress;
        uint32_t dwPrefixLength;
        uint32_t dwAuthenticationProtocol;
        uint32_t dwEapTypeId;
        uint32_t dwFlags;
        uint32_t dwEncryptionMethod;
        uint32_t numIPv4ServerAddresses;
        Windows::Win32::WinSock::in_addr* ipv4ServerAddresses;
        uint32_t numIPv6ServerAddresses;
        Windows::Win32::WinSock::in6_addr* ipv6ServerAddresses;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct RAS_PROJECTION_INFO
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::RoutingAndRemoteAccessService::RASPPP_PROJECTION_INFO ppp;
            Windows::Win32::RoutingAndRemoteAccessService::RASIKEV2_PROJECTION_INFO ikev2;
        };
        Windows::Win32::RoutingAndRemoteAccessService::RASAPIVERSION version;
        Windows::Win32::RoutingAndRemoteAccessService::RASPROJECTION_INFO_TYPE type;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct tagRASDEVINFOW
    {
        uint32_t dwSize;
        uint16_t szDeviceType[17];
        uint16_t szDeviceName[129];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct tagRASDEVINFOA
    {
        uint32_t dwSize;
        int8_t szDeviceType[17];
        int8_t szDeviceName[129];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct RASCTRYINFO
    {
        uint32_t dwSize;
        uint32_t dwCountryID;
        uint32_t dwNextCountryID;
        uint32_t dwCountryCode;
        uint32_t dwCountryNameOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct tagRASENTRYA
    {
        uint32_t dwSize;
        uint32_t dwfOptions;
        uint32_t dwCountryID;
        uint32_t dwCountryCode;
        int8_t szAreaCode[11];
        int8_t szLocalPhoneNumber[129];
        uint32_t dwAlternateOffset;
        Windows::Win32::RoutingAndRemoteAccessService::RASIPADDR ipaddr;
        Windows::Win32::RoutingAndRemoteAccessService::RASIPADDR ipaddrDns;
        Windows::Win32::RoutingAndRemoteAccessService::RASIPADDR ipaddrDnsAlt;
        Windows::Win32::RoutingAndRemoteAccessService::RASIPADDR ipaddrWins;
        Windows::Win32::RoutingAndRemoteAccessService::RASIPADDR ipaddrWinsAlt;
        uint32_t dwFrameSize;
        uint32_t dwfNetProtocols;
        uint32_t dwFramingProtocol;
        int8_t szScript[260];
        int8_t szAutodialDll[260];
        int8_t szAutodialFunc[260];
        int8_t szDeviceType[17];
        int8_t szDeviceName[129];
        int8_t szX25PadType[33];
        int8_t szX25Address[201];
        int8_t szX25Facilities[201];
        int8_t szX25UserData[201];
        uint32_t dwChannels;
        uint32_t dwReserved1;
        uint32_t dwReserved2;
        uint32_t dwSubEntries;
        uint32_t dwDialMode;
        uint32_t dwDialExtraPercent;
        uint32_t dwDialExtraSampleSeconds;
        uint32_t dwHangUpExtraPercent;
        uint32_t dwHangUpExtraSampleSeconds;
        uint32_t dwIdleDisconnectSeconds;
        uint32_t dwType;
        uint32_t dwEncryptionType;
        uint32_t dwCustomAuthKey;
        ::win32::guid guidId;
        int8_t szCustomDialDll[260];
        uint32_t dwVpnStrategy;
        uint32_t dwfOptions2;
        uint32_t dwfOptions3;
        int8_t szDnsSuffix[256];
        uint32_t dwTcpWindowSize;
        int8_t szPrerequisitePbk[260];
        int8_t szPrerequisiteEntry[257];
        uint32_t dwRedialCount;
        uint32_t dwRedialPause;
        Windows::Win32::WinSock::in6_addr ipv6addrDns;
        Windows::Win32::WinSock::in6_addr ipv6addrDnsAlt;
        uint32_t dwIPv4InterfaceMetric;
        uint32_t dwIPv6InterfaceMetric;
        Windows::Win32::WinSock::in6_addr ipv6addr;
        uint32_t dwIPv6PrefixLength;
        uint32_t dwNetworkOutageTime;
        int8_t szIDi[257];
        int8_t szIDr[257];
        Windows::Win32::SystemServices::BOOL fIsImsConfig;
        Windows::Win32::RoutingAndRemoteAccessService::IKEV2_ID_PAYLOAD_TYPE IdiType;
        Windows::Win32::RoutingAndRemoteAccessService::IKEV2_ID_PAYLOAD_TYPE IdrType;
        Windows::Win32::SystemServices::BOOL fDisableIKEv2Fragmentation;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct tagRASENTRYW
    {
        uint32_t dwSize;
        uint32_t dwfOptions;
        uint32_t dwCountryID;
        uint32_t dwCountryCode;
        uint16_t szAreaCode[11];
        uint16_t szLocalPhoneNumber[129];
        uint32_t dwAlternateOffset;
        Windows::Win32::RoutingAndRemoteAccessService::RASIPADDR ipaddr;
        Windows::Win32::RoutingAndRemoteAccessService::RASIPADDR ipaddrDns;
        Windows::Win32::RoutingAndRemoteAccessService::RASIPADDR ipaddrDnsAlt;
        Windows::Win32::RoutingAndRemoteAccessService::RASIPADDR ipaddrWins;
        Windows::Win32::RoutingAndRemoteAccessService::RASIPADDR ipaddrWinsAlt;
        uint32_t dwFrameSize;
        uint32_t dwfNetProtocols;
        uint32_t dwFramingProtocol;
        uint16_t szScript[260];
        uint16_t szAutodialDll[260];
        uint16_t szAutodialFunc[260];
        uint16_t szDeviceType[17];
        uint16_t szDeviceName[129];
        uint16_t szX25PadType[33];
        uint16_t szX25Address[201];
        uint16_t szX25Facilities[201];
        uint16_t szX25UserData[201];
        uint32_t dwChannels;
        uint32_t dwReserved1;
        uint32_t dwReserved2;
        uint32_t dwSubEntries;
        uint32_t dwDialMode;
        uint32_t dwDialExtraPercent;
        uint32_t dwDialExtraSampleSeconds;
        uint32_t dwHangUpExtraPercent;
        uint32_t dwHangUpExtraSampleSeconds;
        uint32_t dwIdleDisconnectSeconds;
        uint32_t dwType;
        uint32_t dwEncryptionType;
        uint32_t dwCustomAuthKey;
        ::win32::guid guidId;
        uint16_t szCustomDialDll[260];
        uint32_t dwVpnStrategy;
        uint32_t dwfOptions2;
        uint32_t dwfOptions3;
        uint16_t szDnsSuffix[256];
        uint32_t dwTcpWindowSize;
        uint16_t szPrerequisitePbk[260];
        uint16_t szPrerequisiteEntry[257];
        uint32_t dwRedialCount;
        uint32_t dwRedialPause;
        Windows::Win32::WinSock::in6_addr ipv6addrDns;
        Windows::Win32::WinSock::in6_addr ipv6addrDnsAlt;
        uint32_t dwIPv4InterfaceMetric;
        uint32_t dwIPv6InterfaceMetric;
        Windows::Win32::WinSock::in6_addr ipv6addr;
        uint32_t dwIPv6PrefixLength;
        uint32_t dwNetworkOutageTime;
        uint16_t szIDi[257];
        uint16_t szIDr[257];
        Windows::Win32::SystemServices::BOOL fIsImsConfig;
        Windows::Win32::RoutingAndRemoteAccessService::IKEV2_ID_PAYLOAD_TYPE IdiType;
        Windows::Win32::RoutingAndRemoteAccessService::IKEV2_ID_PAYLOAD_TYPE IdrType;
        Windows::Win32::SystemServices::BOOL fDisableIKEv2Fragmentation;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct tagRASADPARAMS
    {
        uint32_t dwSize;
        Windows::Win32::WindowsAndMessaging::HWND hwndOwner;
        uint32_t dwFlags;
        int32_t xDlg;
        int32_t yDlg;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct tagRASSUBENTRYA
    {
        uint32_t dwSize;
        uint32_t dwfFlags;
        int8_t szDeviceType[17];
        int8_t szDeviceName[129];
        int8_t szLocalPhoneNumber[129];
        uint32_t dwAlternateOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct tagRASSUBENTRYW
    {
        uint32_t dwSize;
        uint32_t dwfFlags;
        uint16_t szDeviceType[17];
        uint16_t szDeviceName[129];
        uint16_t szLocalPhoneNumber[129];
        uint32_t dwAlternateOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct tagRASCREDENTIALSA
    {
        uint32_t dwSize;
        uint32_t dwMask;
        int8_t szUserName[257];
        int8_t szPassword[257];
        int8_t szDomain[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct tagRASCREDENTIALSW
    {
        uint32_t dwSize;
        uint32_t dwMask;
        uint16_t szUserName[257];
        uint16_t szPassword[257];
        uint16_t szDomain[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct tagRASAUTODIALENTRYA
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        uint32_t dwDialingLocation;
        int8_t szEntry[257];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct tagRASAUTODIALENTRYW
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        uint32_t dwDialingLocation;
        uint16_t szEntry[257];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct tagRASEAPUSERIDENTITYA
    {
        int8_t szUserName[257];
        uint32_t dwSizeofEapInfo;
        uint8_t pbEapInfo[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct tagRASEAPUSERIDENTITYW
    {
        uint16_t szUserName[257];
        uint32_t dwSizeofEapInfo;
        uint8_t pbEapInfo[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct tagRASCOMMSETTINGS
    {
        uint32_t dwSize;
        uint8_t bParity;
        uint8_t bStop;
        uint8_t bByteSize;
        uint8_t bAlign;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct tagRASCUSTOMSCRIPTEXTENSIONS
    {
        uint32_t dwSize;
        Windows::Win32::RoutingAndRemoteAccessService::PFNRASSETCOMMSETTINGS* pfnRasSetCommSettings;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct RAS_STATS
    {
        uint32_t dwSize;
        uint32_t dwBytesXmited;
        uint32_t dwBytesRcved;
        uint32_t dwFramesXmited;
        uint32_t dwFramesRcved;
        uint32_t dwCrcErr;
        uint32_t dwTimeoutErr;
        uint32_t dwAlignmentErr;
        uint32_t dwHardwareOverrunErr;
        uint32_t dwFramingErr;
        uint32_t dwBufferOverrunErr;
        uint32_t dwCompressionRatioIn;
        uint32_t dwCompressionRatioOut;
        uint32_t dwBps;
        uint32_t dwConnectDuration;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct tagRASUPDATECONN
    {
        Windows::Win32::RoutingAndRemoteAccessService::RASAPIVERSION version;
        uint32_t dwSize;
        uint32_t dwFlags;
        uint32_t dwIfIndex;
        Windows::Win32::RoutingAndRemoteAccessService::tagRASTUNNELENDPOINT localEndPoint;
        Windows::Win32::RoutingAndRemoteAccessService::tagRASTUNNELENDPOINT remoteEndPoint;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct tagRASNOUSERW
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        uint32_t dwTimeoutMs;
        uint16_t szUserName[257];
        uint16_t szPassword[257];
        uint16_t szDomain[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct tagRASNOUSERA
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        uint32_t dwTimeoutMs;
        int8_t szUserName[257];
        int8_t szPassword[257];
        int8_t szDomain[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct tagRASPBDLGW
    {
        uint32_t dwSize;
        Windows::Win32::WindowsAndMessaging::HWND hwndOwner;
        uint32_t dwFlags;
        int32_t xDlg;
        int32_t yDlg;
        size_t dwCallbackId;
        Windows::Win32::RoutingAndRemoteAccessService::RASPBDLGFUNCW* pCallback;
        uint32_t dwError;
        size_t reserved;
        size_t reserved2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct tagRASPBDLGA
    {
        uint32_t dwSize;
        Windows::Win32::WindowsAndMessaging::HWND hwndOwner;
        uint32_t dwFlags;
        int32_t xDlg;
        int32_t yDlg;
        size_t dwCallbackId;
        Windows::Win32::RoutingAndRemoteAccessService::RASPBDLGFUNCA* pCallback;
        uint32_t dwError;
        size_t reserved;
        size_t reserved2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct tagRASENTRYDLGW
    {
        uint32_t dwSize;
        Windows::Win32::WindowsAndMessaging::HWND hwndOwner;
        uint32_t dwFlags;
        int32_t xDlg;
        int32_t yDlg;
        uint16_t szEntry[257];
        uint32_t dwError;
        size_t reserved;
        size_t reserved2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct tagRASENTRYDLGA
    {
        uint32_t dwSize;
        Windows::Win32::WindowsAndMessaging::HWND hwndOwner;
        uint32_t dwFlags;
        int32_t xDlg;
        int32_t yDlg;
        int8_t szEntry[257];
        uint32_t dwError;
        size_t reserved;
        size_t reserved2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct tagRASDIALDLG
    {
        uint32_t dwSize;
        Windows::Win32::WindowsAndMessaging::HWND hwndOwner;
        uint32_t dwFlags;
        int32_t xDlg;
        int32_t yDlg;
        uint32_t dwSubEntry;
        uint32_t dwError;
        size_t reserved;
        size_t reserved2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct MPR_INTERFACE_0
    {
        uint16_t wszInterfaceName[257];
        Windows::Win32::SystemServices::HANDLE hInterface;
        Windows::Win32::SystemServices::BOOL fEnabled;
        Windows::Win32::RoutingAndRemoteAccessService::ROUTER_INTERFACE_TYPE dwIfType;
        Windows::Win32::RoutingAndRemoteAccessService::ROUTER_CONNECTION_STATE dwConnectionState;
        uint32_t fUnReachabilityReasons;
        uint32_t dwLastError;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct MPR_IPINIP_INTERFACE_0
    {
        uint16_t wszFriendlyName[257];
        ::win32::guid Guid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct MPR_INTERFACE_1
    {
        uint16_t wszInterfaceName[257];
        Windows::Win32::SystemServices::HANDLE hInterface;
        Windows::Win32::SystemServices::BOOL fEnabled;
        Windows::Win32::RoutingAndRemoteAccessService::ROUTER_INTERFACE_TYPE dwIfType;
        Windows::Win32::RoutingAndRemoteAccessService::ROUTER_CONNECTION_STATE dwConnectionState;
        uint32_t fUnReachabilityReasons;
        uint32_t dwLastError;
        uint16_t* lpwsDialoutHoursRestriction;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct MPR_INTERFACE_2
    {
        uint16_t wszInterfaceName[257];
        Windows::Win32::SystemServices::HANDLE hInterface;
        Windows::Win32::SystemServices::BOOL fEnabled;
        Windows::Win32::RoutingAndRemoteAccessService::ROUTER_INTERFACE_TYPE dwIfType;
        Windows::Win32::RoutingAndRemoteAccessService::ROUTER_CONNECTION_STATE dwConnectionState;
        uint32_t fUnReachabilityReasons;
        uint32_t dwLastError;
        uint32_t dwfOptions;
        uint16_t szLocalPhoneNumber[129];
        uint16_t* szAlternates;
        uint32_t ipaddr;
        uint32_t ipaddrDns;
        uint32_t ipaddrDnsAlt;
        uint32_t ipaddrWins;
        uint32_t ipaddrWinsAlt;
        uint32_t dwfNetProtocols;
        uint16_t szDeviceType[17];
        uint16_t szDeviceName[129];
        uint16_t szX25PadType[33];
        uint16_t szX25Address[201];
        uint16_t szX25Facilities[201];
        uint16_t szX25UserData[201];
        uint32_t dwChannels;
        uint32_t dwSubEntries;
        uint32_t dwDialMode;
        uint32_t dwDialExtraPercent;
        uint32_t dwDialExtraSampleSeconds;
        uint32_t dwHangUpExtraPercent;
        uint32_t dwHangUpExtraSampleSeconds;
        uint32_t dwIdleDisconnectSeconds;
        uint32_t dwType;
        uint32_t dwEncryptionType;
        uint32_t dwCustomAuthKey;
        uint32_t dwCustomAuthDataSize;
        uint8_t* lpbCustomAuthData;
        ::win32::guid guidId;
        uint32_t dwVpnStrategy;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct MPR_INTERFACE_3
    {
        uint16_t wszInterfaceName[257];
        Windows::Win32::SystemServices::HANDLE hInterface;
        Windows::Win32::SystemServices::BOOL fEnabled;
        Windows::Win32::RoutingAndRemoteAccessService::ROUTER_INTERFACE_TYPE dwIfType;
        Windows::Win32::RoutingAndRemoteAccessService::ROUTER_CONNECTION_STATE dwConnectionState;
        uint32_t fUnReachabilityReasons;
        uint32_t dwLastError;
        uint32_t dwfOptions;
        uint16_t szLocalPhoneNumber[129];
        uint16_t* szAlternates;
        uint32_t ipaddr;
        uint32_t ipaddrDns;
        uint32_t ipaddrDnsAlt;
        uint32_t ipaddrWins;
        uint32_t ipaddrWinsAlt;
        uint32_t dwfNetProtocols;
        uint16_t szDeviceType[17];
        uint16_t szDeviceName[129];
        uint16_t szX25PadType[33];
        uint16_t szX25Address[201];
        uint16_t szX25Facilities[201];
        uint16_t szX25UserData[201];
        uint32_t dwChannels;
        uint32_t dwSubEntries;
        uint32_t dwDialMode;
        uint32_t dwDialExtraPercent;
        uint32_t dwDialExtraSampleSeconds;
        uint32_t dwHangUpExtraPercent;
        uint32_t dwHangUpExtraSampleSeconds;
        uint32_t dwIdleDisconnectSeconds;
        uint32_t dwType;
        uint32_t dwEncryptionType;
        uint32_t dwCustomAuthKey;
        uint32_t dwCustomAuthDataSize;
        uint8_t* lpbCustomAuthData;
        ::win32::guid guidId;
        uint32_t dwVpnStrategy;
        uint32_t AddressCount;
        Windows::Win32::WinSock::in6_addr ipv6addrDns;
        Windows::Win32::WinSock::in6_addr ipv6addrDnsAlt;
        Windows::Win32::WinSock::in6_addr* ipv6addr;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct MPR_DEVICE_0
    {
        uint16_t szDeviceType[17];
        uint16_t szDeviceName[129];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct MPR_DEVICE_1
    {
        uint16_t szDeviceType[17];
        uint16_t szDeviceName[129];
        uint16_t szLocalPhoneNumber[129];
        uint16_t* szAlternates;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct MPR_CREDENTIALSEX_0
    {
        uint32_t dwSize;
        uint8_t* lpbCredentialsInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct MPR_CREDENTIALSEX_1
    {
        uint32_t dwSize;
        uint8_t* lpbCredentialsInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct MPR_TRANSPORT_0
    {
        uint32_t dwTransportId;
        Windows::Win32::SystemServices::HANDLE hTransport;
        uint16_t wszTransportName[41];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct MPR_IFTRANSPORT_0
    {
        uint32_t dwTransportId;
        Windows::Win32::SystemServices::HANDLE hIfTransport;
        uint16_t wszIfTransportName[41];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct MPR_SERVER_0
    {
        Windows::Win32::SystemServices::BOOL fLanOnlyMode;
        uint32_t dwUpTime;
        uint32_t dwTotalPorts;
        uint32_t dwPortsInUse;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct MPR_SERVER_1
    {
        uint32_t dwNumPptpPorts;
        uint32_t dwPptpPortFlags;
        uint32_t dwNumL2tpPorts;
        uint32_t dwL2tpPortFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct MPR_SERVER_2
    {
        uint32_t dwNumPptpPorts;
        uint32_t dwPptpPortFlags;
        uint32_t dwNumL2tpPorts;
        uint32_t dwL2tpPortFlags;
        uint32_t dwNumSstpPorts;
        uint32_t dwSstpPortFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct RAS_PORT_0
    {
        Windows::Win32::SystemServices::HANDLE hPort;
        Windows::Win32::SystemServices::HANDLE hConnection;
        Windows::Win32::RoutingAndRemoteAccessService::RAS_PORT_CONDITION dwPortCondition;
        uint32_t dwTotalNumberOfCalls;
        uint32_t dwConnectDuration;
        uint16_t wszPortName[17];
        uint16_t wszMediaName[17];
        uint16_t wszDeviceName[129];
        uint16_t wszDeviceType[17];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct RAS_PORT_1
    {
        Windows::Win32::SystemServices::HANDLE hPort;
        Windows::Win32::SystemServices::HANDLE hConnection;
        Windows::Win32::RoutingAndRemoteAccessService::RAS_HARDWARE_CONDITION dwHardwareCondition;
        uint32_t dwLineSpeed;
        uint32_t dwBytesXmited;
        uint32_t dwBytesRcved;
        uint32_t dwFramesXmited;
        uint32_t dwFramesRcved;
        uint32_t dwCrcErr;
        uint32_t dwTimeoutErr;
        uint32_t dwAlignmentErr;
        uint32_t dwHardwareOverrunErr;
        uint32_t dwFramingErr;
        uint32_t dwBufferOverrunErr;
        uint32_t dwCompressionRatioIn;
        uint32_t dwCompressionRatioOut;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct RAS_PORT_2
    {
        Windows::Win32::SystemServices::HANDLE hPort;
        Windows::Win32::SystemServices::HANDLE hConnection;
        uint32_t dwConn_State;
        uint16_t wszPortName[17];
        uint16_t wszMediaName[17];
        uint16_t wszDeviceName[129];
        uint16_t wszDeviceType[17];
        Windows::Win32::RoutingAndRemoteAccessService::RAS_HARDWARE_CONDITION dwHardwareCondition;
        uint32_t dwLineSpeed;
        uint32_t dwCrcErr;
        uint32_t dwSerialOverRunErrs;
        uint32_t dwTimeoutErr;
        uint32_t dwAlignmentErr;
        uint32_t dwHardwareOverrunErr;
        uint32_t dwFramingErr;
        uint32_t dwBufferOverrunErr;
        uint32_t dwCompressionRatioIn;
        uint32_t dwCompressionRatioOut;
        uint32_t dwTotalErrors;
        uint64_t ullBytesXmited;
        uint64_t ullBytesRcved;
        uint64_t ullFramesXmited;
        uint64_t ullFramesRcved;
        uint64_t ullBytesTxUncompressed;
        uint64_t ullBytesTxCompressed;
        uint64_t ullBytesRcvUncompressed;
        uint64_t ullBytesRcvCompressed;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct PPP_NBFCP_INFO
    {
        uint32_t dwError;
        uint16_t wszWksta[17];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct PPP_IPCP_INFO
    {
        uint32_t dwError;
        uint16_t wszAddress[16];
        uint16_t wszRemoteAddress[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct PPP_IPCP_INFO2
    {
        uint32_t dwError;
        uint16_t wszAddress[16];
        uint16_t wszRemoteAddress[16];
        uint32_t dwOptions;
        uint32_t dwRemoteOptions;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct PPP_IPXCP_INFO
    {
        uint32_t dwError;
        uint16_t wszAddress[23];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct PPP_ATCP_INFO
    {
        uint32_t dwError;
        uint16_t wszAddress[33];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct PPP_IPV6_CP_INFO
    {
        uint32_t dwVersion;
        uint32_t dwSize;
        uint32_t dwError;
        uint8_t bInterfaceIdentifier[8];
        uint8_t bRemoteInterfaceIdentifier[8];
        uint32_t dwOptions;
        uint32_t dwRemoteOptions;
        uint8_t bPrefix[8];
        uint32_t dwPrefixLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct PPP_INFO
    {
        Windows::Win32::RoutingAndRemoteAccessService::PPP_NBFCP_INFO nbf;
        Windows::Win32::RoutingAndRemoteAccessService::PPP_IPCP_INFO ip;
        Windows::Win32::RoutingAndRemoteAccessService::PPP_IPXCP_INFO ipx;
        Windows::Win32::RoutingAndRemoteAccessService::PPP_ATCP_INFO at;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct PPP_CCP_INFO
    {
        uint32_t dwError;
        uint32_t dwCompressionAlgorithm;
        uint32_t dwOptions;
        uint32_t dwRemoteCompressionAlgorithm;
        uint32_t dwRemoteOptions;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct PPP_LCP_INFO
    {
        uint32_t dwError;
        uint32_t dwAuthenticationProtocol;
        uint32_t dwAuthenticationData;
        uint32_t dwRemoteAuthenticationProtocol;
        uint32_t dwRemoteAuthenticationData;
        uint32_t dwTerminateReason;
        uint32_t dwRemoteTerminateReason;
        uint32_t dwOptions;
        uint32_t dwRemoteOptions;
        uint32_t dwEapTypeId;
        uint32_t dwRemoteEapTypeId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct PPP_INFO_2
    {
        Windows::Win32::RoutingAndRemoteAccessService::PPP_NBFCP_INFO nbf;
        Windows::Win32::RoutingAndRemoteAccessService::PPP_IPCP_INFO2 ip;
        Windows::Win32::RoutingAndRemoteAccessService::PPP_IPXCP_INFO ipx;
        Windows::Win32::RoutingAndRemoteAccessService::PPP_ATCP_INFO at;
        Windows::Win32::RoutingAndRemoteAccessService::PPP_CCP_INFO ccp;
        Windows::Win32::RoutingAndRemoteAccessService::PPP_LCP_INFO lcp;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct PPP_INFO_3
    {
        Windows::Win32::RoutingAndRemoteAccessService::PPP_NBFCP_INFO nbf;
        Windows::Win32::RoutingAndRemoteAccessService::PPP_IPCP_INFO2 ip;
        Windows::Win32::RoutingAndRemoteAccessService::PPP_IPV6_CP_INFO ipv6;
        Windows::Win32::RoutingAndRemoteAccessService::PPP_CCP_INFO ccp;
        Windows::Win32::RoutingAndRemoteAccessService::PPP_LCP_INFO lcp;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct RAS_CONNECTION_0
    {
        Windows::Win32::SystemServices::HANDLE hConnection;
        Windows::Win32::SystemServices::HANDLE hInterface;
        uint32_t dwConnectDuration;
        Windows::Win32::RoutingAndRemoteAccessService::ROUTER_INTERFACE_TYPE dwInterfaceType;
        uint32_t dwConnectionFlags;
        uint16_t wszInterfaceName[257];
        uint16_t wszUserName[257];
        uint16_t wszLogonDomain[16];
        uint16_t wszRemoteComputer[17];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct RAS_CONNECTION_1
    {
        Windows::Win32::SystemServices::HANDLE hConnection;
        Windows::Win32::SystemServices::HANDLE hInterface;
        Windows::Win32::RoutingAndRemoteAccessService::PPP_INFO PppInfo;
        uint32_t dwBytesXmited;
        uint32_t dwBytesRcved;
        uint32_t dwFramesXmited;
        uint32_t dwFramesRcved;
        uint32_t dwCrcErr;
        uint32_t dwTimeoutErr;
        uint32_t dwAlignmentErr;
        uint32_t dwHardwareOverrunErr;
        uint32_t dwFramingErr;
        uint32_t dwBufferOverrunErr;
        uint32_t dwCompressionRatioIn;
        uint32_t dwCompressionRatioOut;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct RAS_CONNECTION_2
    {
        Windows::Win32::SystemServices::HANDLE hConnection;
        uint16_t wszUserName[257];
        Windows::Win32::RoutingAndRemoteAccessService::ROUTER_INTERFACE_TYPE dwInterfaceType;
        ::win32::guid guid;
        Windows::Win32::RoutingAndRemoteAccessService::PPP_INFO_2 PppInfo2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct RAS_CONNECTION_3
    {
        uint32_t dwVersion;
        uint32_t dwSize;
        Windows::Win32::SystemServices::HANDLE hConnection;
        uint16_t wszUserName[257];
        Windows::Win32::RoutingAndRemoteAccessService::ROUTER_INTERFACE_TYPE dwInterfaceType;
        ::win32::guid guid;
        Windows::Win32::RoutingAndRemoteAccessService::PPP_INFO_3 PppInfo3;
        Windows::Win32::RoutingAndRemoteAccessService::RAS_QUARANTINE_STATE rasQuarState;
        Windows::Win32::WindowsProgramming::FILETIME timer;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct RAS_USER_0
    {
        uint8_t bfPrivilege;
        uint16_t wszPhoneNumber[129];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct RAS_USER_1
    {
        uint8_t bfPrivilege;
        uint16_t wszPhoneNumber[129];
        uint8_t bfPrivilege2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct MPR_FILTER_0
    {
        Windows::Win32::SystemServices::BOOL fEnable;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct MPRAPI_OBJECT_HEADER
    {
        uint8_t revision;
        uint8_t type;
        uint16_t size;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct PPP_PROJECTION_INFO
    {
        uint32_t dwIPv4NegotiationError;
        uint16_t wszAddress[16];
        uint16_t wszRemoteAddress[16];
        uint32_t dwIPv4Options;
        uint32_t dwIPv4RemoteOptions;
        uint64_t IPv4SubInterfaceIndex;
        uint32_t dwIPv6NegotiationError;
        uint8_t bInterfaceIdentifier[8];
        uint8_t bRemoteInterfaceIdentifier[8];
        uint8_t bPrefix[8];
        uint32_t dwPrefixLength;
        uint64_t IPv6SubInterfaceIndex;
        uint32_t dwLcpError;
        uint32_t dwAuthenticationProtocol;
        uint32_t dwAuthenticationData;
        uint32_t dwRemoteAuthenticationProtocol;
        uint32_t dwRemoteAuthenticationData;
        uint32_t dwLcpTerminateReason;
        uint32_t dwLcpRemoteTerminateReason;
        uint32_t dwLcpOptions;
        uint32_t dwLcpRemoteOptions;
        uint32_t dwEapTypeId;
        uint32_t dwRemoteEapTypeId;
        uint32_t dwCcpError;
        uint32_t dwCompressionAlgorithm;
        uint32_t dwCcpOptions;
        uint32_t dwRemoteCompressionAlgorithm;
        uint32_t dwCcpRemoteOptions;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct PPP_PROJECTION_INFO2
    {
        uint32_t dwIPv4NegotiationError;
        uint16_t wszAddress[16];
        uint16_t wszRemoteAddress[16];
        uint32_t dwIPv4Options;
        uint32_t dwIPv4RemoteOptions;
        uint64_t IPv4SubInterfaceIndex;
        uint32_t dwIPv6NegotiationError;
        uint8_t bInterfaceIdentifier[8];
        uint8_t bRemoteInterfaceIdentifier[8];
        uint8_t bPrefix[8];
        uint32_t dwPrefixLength;
        uint64_t IPv6SubInterfaceIndex;
        uint32_t dwLcpError;
        uint32_t dwAuthenticationProtocol;
        uint32_t dwAuthenticationData;
        uint32_t dwRemoteAuthenticationProtocol;
        uint32_t dwRemoteAuthenticationData;
        uint32_t dwLcpTerminateReason;
        uint32_t dwLcpRemoteTerminateReason;
        uint32_t dwLcpOptions;
        uint32_t dwLcpRemoteOptions;
        uint32_t dwEapTypeId;
        uint32_t dwEmbeddedEAPTypeId;
        uint32_t dwRemoteEapTypeId;
        uint32_t dwCcpError;
        uint32_t dwCompressionAlgorithm;
        uint32_t dwCcpOptions;
        uint32_t dwRemoteCompressionAlgorithm;
        uint32_t dwCcpRemoteOptions;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct IKEV2_PROJECTION_INFO
    {
        uint32_t dwIPv4NegotiationError;
        uint16_t wszAddress[16];
        uint16_t wszRemoteAddress[16];
        uint64_t IPv4SubInterfaceIndex;
        uint32_t dwIPv6NegotiationError;
        uint8_t bInterfaceIdentifier[8];
        uint8_t bRemoteInterfaceIdentifier[8];
        uint8_t bPrefix[8];
        uint32_t dwPrefixLength;
        uint64_t IPv6SubInterfaceIndex;
        uint32_t dwOptions;
        uint32_t dwAuthenticationProtocol;
        uint32_t dwEapTypeId;
        uint32_t dwCompressionAlgorithm;
        uint32_t dwEncryptionMethod;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct IKEV2_PROJECTION_INFO2
    {
        uint32_t dwIPv4NegotiationError;
        uint16_t wszAddress[16];
        uint16_t wszRemoteAddress[16];
        uint64_t IPv4SubInterfaceIndex;
        uint32_t dwIPv6NegotiationError;
        uint8_t bInterfaceIdentifier[8];
        uint8_t bRemoteInterfaceIdentifier[8];
        uint8_t bPrefix[8];
        uint32_t dwPrefixLength;
        uint64_t IPv6SubInterfaceIndex;
        uint32_t dwOptions;
        uint32_t dwAuthenticationProtocol;
        uint32_t dwEapTypeId;
        uint32_t dwEmbeddedEAPTypeId;
        uint32_t dwCompressionAlgorithm;
        uint32_t dwEncryptionMethod;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct PROJECTION_INFO
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::RoutingAndRemoteAccessService::PPP_PROJECTION_INFO PppProjectionInfo;
            Windows::Win32::RoutingAndRemoteAccessService::IKEV2_PROJECTION_INFO Ikev2ProjectionInfo;
        };
        uint8_t projectionInfoType;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct PROJECTION_INFO2
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::RoutingAndRemoteAccessService::PPP_PROJECTION_INFO2 PppProjectionInfo;
            Windows::Win32::RoutingAndRemoteAccessService::IKEV2_PROJECTION_INFO2 Ikev2ProjectionInfo;
        };
        uint8_t projectionInfoType;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct RAS_CONNECTION_EX
    {
        Windows::Win32::RoutingAndRemoteAccessService::MPRAPI_OBJECT_HEADER Header;
        uint32_t dwConnectDuration;
        Windows::Win32::RoutingAndRemoteAccessService::ROUTER_INTERFACE_TYPE dwInterfaceType;
        uint32_t dwConnectionFlags;
        uint16_t wszInterfaceName[257];
        uint16_t wszUserName[257];
        uint16_t wszLogonDomain[16];
        uint16_t wszRemoteComputer[17];
        ::win32::guid guid;
        Windows::Win32::RoutingAndRemoteAccessService::RAS_QUARANTINE_STATE rasQuarState;
        Windows::Win32::WindowsProgramming::FILETIME probationTime;
        uint32_t dwBytesXmited;
        uint32_t dwBytesRcved;
        uint32_t dwFramesXmited;
        uint32_t dwFramesRcved;
        uint32_t dwCrcErr;
        uint32_t dwTimeoutErr;
        uint32_t dwAlignmentErr;
        uint32_t dwHardwareOverrunErr;
        uint32_t dwFramingErr;
        uint32_t dwBufferOverrunErr;
        uint32_t dwCompressionRatioIn;
        uint32_t dwCompressionRatioOut;
        uint32_t dwNumSwitchOvers;
        uint16_t wszRemoteEndpointAddress[65];
        uint16_t wszLocalEndpointAddress[65];
        Windows::Win32::RoutingAndRemoteAccessService::PROJECTION_INFO ProjectionInfo;
        Windows::Win32::SystemServices::HANDLE hConnection;
        Windows::Win32::SystemServices::HANDLE hInterface;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct RAS_CONNECTION_4
    {
        uint32_t dwConnectDuration;
        Windows::Win32::RoutingAndRemoteAccessService::ROUTER_INTERFACE_TYPE dwInterfaceType;
        uint32_t dwConnectionFlags;
        uint16_t wszInterfaceName[257];
        uint16_t wszUserName[257];
        uint16_t wszLogonDomain[16];
        uint16_t wszRemoteComputer[17];
        ::win32::guid guid;
        Windows::Win32::RoutingAndRemoteAccessService::RAS_QUARANTINE_STATE rasQuarState;
        Windows::Win32::WindowsProgramming::FILETIME probationTime;
        Windows::Win32::WindowsProgramming::FILETIME connectionStartTime;
        uint64_t ullBytesXmited;
        uint64_t ullBytesRcved;
        uint32_t dwFramesXmited;
        uint32_t dwFramesRcved;
        uint32_t dwCrcErr;
        uint32_t dwTimeoutErr;
        uint32_t dwAlignmentErr;
        uint32_t dwHardwareOverrunErr;
        uint32_t dwFramingErr;
        uint32_t dwBufferOverrunErr;
        uint32_t dwCompressionRatioIn;
        uint32_t dwCompressionRatioOut;
        uint32_t dwNumSwitchOvers;
        uint16_t wszRemoteEndpointAddress[65];
        uint16_t wszLocalEndpointAddress[65];
        Windows::Win32::RoutingAndRemoteAccessService::PROJECTION_INFO2 ProjectionInfo;
        Windows::Win32::SystemServices::HANDLE hConnection;
        Windows::Win32::SystemServices::HANDLE hInterface;
        uint32_t dwDeviceType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct ROUTER_CUSTOM_IKEv2_POLICY0
    {
        uint32_t dwIntegrityMethod;
        uint32_t dwEncryptionMethod;
        uint32_t dwCipherTransformConstant;
        uint32_t dwAuthTransformConstant;
        uint32_t dwPfsGroup;
        uint32_t dwDhGroup;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPTOAPI_BLOB
    {
        uint32_t cbData;
        uint8_t* pbData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct ROUTER_IKEv2_IF_CUSTOM_CONFIG0
    {
        uint32_t dwSaLifeTime;
        uint32_t dwSaDataSize;
        Windows::Win32::Security::CRYPTOAPI_BLOB certificateName;
        Windows::Win32::RoutingAndRemoteAccessService::ROUTER_CUSTOM_IKEv2_POLICY0* customPolicy;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct MPR_IF_CUSTOMINFOEX0
    {
        Windows::Win32::RoutingAndRemoteAccessService::MPRAPI_OBJECT_HEADER Header;
        uint32_t dwFlags;
        Windows::Win32::RoutingAndRemoteAccessService::ROUTER_IKEv2_IF_CUSTOM_CONFIG0 customIkev2Config;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct MPR_CERT_EKU
    {
        uint32_t dwSize;
        Windows::Win32::SystemServices::BOOL IsEKUOID;
        uint16_t* pwszEKU;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct VPN_TS_IP_ADDRESS
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::WinSock::in_addr v4;
            Windows::Win32::WinSock::in6_addr v6;
        };
        uint16_t Type;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct _MPR_VPN_SELECTOR
    {
        Windows::Win32::RoutingAndRemoteAccessService::MPR_VPN_TS_TYPE type;
        uint8_t protocolId;
        uint16_t portStart;
        uint16_t portEnd;
        uint16_t tsPayloadId;
        Windows::Win32::RoutingAndRemoteAccessService::VPN_TS_IP_ADDRESS addrStart;
        Windows::Win32::RoutingAndRemoteAccessService::VPN_TS_IP_ADDRESS addrEnd;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct MPR_VPN_TRAFFIC_SELECTORS
    {
        uint32_t numTsi;
        uint32_t numTsr;
        Windows::Win32::RoutingAndRemoteAccessService::_MPR_VPN_SELECTOR* tsI;
        Windows::Win32::RoutingAndRemoteAccessService::_MPR_VPN_SELECTOR* tsR;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct ROUTER_IKEv2_IF_CUSTOM_CONFIG2
    {
        uint32_t dwSaLifeTime;
        uint32_t dwSaDataSize;
        Windows::Win32::Security::CRYPTOAPI_BLOB certificateName;
        Windows::Win32::RoutingAndRemoteAccessService::ROUTER_CUSTOM_IKEv2_POLICY0* customPolicy;
        Windows::Win32::Security::CRYPTOAPI_BLOB certificateHash;
        uint32_t dwMmSaLifeTime;
        Windows::Win32::RoutingAndRemoteAccessService::MPR_VPN_TRAFFIC_SELECTORS vpnTrafficSelectors;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct MPR_IF_CUSTOMINFOEX2
    {
        Windows::Win32::RoutingAndRemoteAccessService::MPRAPI_OBJECT_HEADER Header;
        uint32_t dwFlags;
        Windows::Win32::RoutingAndRemoteAccessService::ROUTER_IKEv2_IF_CUSTOM_CONFIG2 customIkev2Config;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct IKEV2_TUNNEL_CONFIG_PARAMS4
    {
        uint32_t dwIdleTimeout;
        uint32_t dwNetworkBlackoutTime;
        uint32_t dwSaLifeTime;
        uint32_t dwSaDataSizeForRenegotiation;
        uint32_t dwConfigOptions;
        uint32_t dwTotalCertificates;
        Windows::Win32::Security::CRYPTOAPI_BLOB* certificateNames;
        Windows::Win32::Security::CRYPTOAPI_BLOB machineCertificateName;
        uint32_t dwEncryptionType;
        Windows::Win32::RoutingAndRemoteAccessService::ROUTER_CUSTOM_IKEv2_POLICY0* customPolicy;
        uint32_t dwTotalEkus;
        Windows::Win32::RoutingAndRemoteAccessService::MPR_CERT_EKU* certificateEKUs;
        Windows::Win32::Security::CRYPTOAPI_BLOB machineCertificateHash;
        uint32_t dwMmSaLifeTime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct ROUTER_IKEv2_IF_CUSTOM_CONFIG1
    {
        uint32_t dwSaLifeTime;
        uint32_t dwSaDataSize;
        Windows::Win32::Security::CRYPTOAPI_BLOB certificateName;
        Windows::Win32::RoutingAndRemoteAccessService::ROUTER_CUSTOM_IKEv2_POLICY0* customPolicy;
        Windows::Win32::Security::CRYPTOAPI_BLOB certificateHash;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct MPR_IF_CUSTOMINFOEX1
    {
        Windows::Win32::RoutingAndRemoteAccessService::MPRAPI_OBJECT_HEADER Header;
        uint32_t dwFlags;
        Windows::Win32::RoutingAndRemoteAccessService::ROUTER_IKEv2_IF_CUSTOM_CONFIG1 customIkev2Config;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct IKEV2_TUNNEL_CONFIG_PARAMS3
    {
        uint32_t dwIdleTimeout;
        uint32_t dwNetworkBlackoutTime;
        uint32_t dwSaLifeTime;
        uint32_t dwSaDataSizeForRenegotiation;
        uint32_t dwConfigOptions;
        uint32_t dwTotalCertificates;
        Windows::Win32::Security::CRYPTOAPI_BLOB* certificateNames;
        Windows::Win32::Security::CRYPTOAPI_BLOB machineCertificateName;
        uint32_t dwEncryptionType;
        Windows::Win32::RoutingAndRemoteAccessService::ROUTER_CUSTOM_IKEv2_POLICY0* customPolicy;
        uint32_t dwTotalEkus;
        Windows::Win32::RoutingAndRemoteAccessService::MPR_CERT_EKU* certificateEKUs;
        Windows::Win32::Security::CRYPTOAPI_BLOB machineCertificateHash;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct IKEV2_TUNNEL_CONFIG_PARAMS2
    {
        uint32_t dwIdleTimeout;
        uint32_t dwNetworkBlackoutTime;
        uint32_t dwSaLifeTime;
        uint32_t dwSaDataSizeForRenegotiation;
        uint32_t dwConfigOptions;
        uint32_t dwTotalCertificates;
        Windows::Win32::Security::CRYPTOAPI_BLOB* certificateNames;
        Windows::Win32::Security::CRYPTOAPI_BLOB machineCertificateName;
        uint32_t dwEncryptionType;
        Windows::Win32::RoutingAndRemoteAccessService::ROUTER_CUSTOM_IKEv2_POLICY0* customPolicy;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct L2TP_TUNNEL_CONFIG_PARAMS2
    {
        uint32_t dwIdleTimeout;
        uint32_t dwEncryptionType;
        uint32_t dwSaLifeTime;
        uint32_t dwSaDataSizeForRenegotiation;
        Windows::Win32::RoutingAndRemoteAccessService::ROUTER_CUSTOM_IKEv2_POLICY0* customPolicy;
        uint32_t dwMmSaLifeTime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct L2TP_TUNNEL_CONFIG_PARAMS1
    {
        uint32_t dwIdleTimeout;
        uint32_t dwEncryptionType;
        uint32_t dwSaLifeTime;
        uint32_t dwSaDataSizeForRenegotiation;
        Windows::Win32::RoutingAndRemoteAccessService::ROUTER_CUSTOM_IKEv2_POLICY0* customPolicy;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct IKEV2_CONFIG_PARAMS
    {
        uint32_t dwNumPorts;
        uint32_t dwPortFlags;
        uint32_t dwTunnelConfigParamFlags;
        Windows::Win32::RoutingAndRemoteAccessService::IKEV2_TUNNEL_CONFIG_PARAMS4 TunnelConfigParams;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct PPTP_CONFIG_PARAMS
    {
        uint32_t dwNumPorts;
        uint32_t dwPortFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct L2TP_CONFIG_PARAMS1
    {
        uint32_t dwNumPorts;
        uint32_t dwPortFlags;
        uint32_t dwTunnelConfigParamFlags;
        Windows::Win32::RoutingAndRemoteAccessService::L2TP_TUNNEL_CONFIG_PARAMS2 TunnelConfigParams;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct GRE_CONFIG_PARAMS0
    {
        uint32_t dwNumPorts;
        uint32_t dwPortFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct L2TP_CONFIG_PARAMS0
    {
        uint32_t dwNumPorts;
        uint32_t dwPortFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct SSTP_CERT_INFO
    {
        Windows::Win32::SystemServices::BOOL isDefault;
        Windows::Win32::Security::CRYPTOAPI_BLOB certBlob;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct SSTP_CONFIG_PARAMS
    {
        uint32_t dwNumPorts;
        uint32_t dwPortFlags;
        Windows::Win32::SystemServices::BOOL isUseHttps;
        uint32_t certAlgorithm;
        Windows::Win32::RoutingAndRemoteAccessService::SSTP_CERT_INFO sstpCertDetails;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct MPRAPI_TUNNEL_CONFIG_PARAMS0
    {
        Windows::Win32::RoutingAndRemoteAccessService::IKEV2_CONFIG_PARAMS IkeConfigParams;
        Windows::Win32::RoutingAndRemoteAccessService::PPTP_CONFIG_PARAMS PptpConfigParams;
        Windows::Win32::RoutingAndRemoteAccessService::L2TP_CONFIG_PARAMS1 L2tpConfigParams;
        Windows::Win32::RoutingAndRemoteAccessService::SSTP_CONFIG_PARAMS SstpConfigParams;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct MPRAPI_TUNNEL_CONFIG_PARAMS1
    {
        Windows::Win32::RoutingAndRemoteAccessService::IKEV2_CONFIG_PARAMS IkeConfigParams;
        Windows::Win32::RoutingAndRemoteAccessService::PPTP_CONFIG_PARAMS PptpConfigParams;
        Windows::Win32::RoutingAndRemoteAccessService::L2TP_CONFIG_PARAMS1 L2tpConfigParams;
        Windows::Win32::RoutingAndRemoteAccessService::SSTP_CONFIG_PARAMS SstpConfigParams;
        Windows::Win32::RoutingAndRemoteAccessService::GRE_CONFIG_PARAMS0 GREConfigParams;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct MPR_SERVER_EX0
    {
        Windows::Win32::RoutingAndRemoteAccessService::MPRAPI_OBJECT_HEADER Header;
        uint32_t fLanOnlyMode;
        uint32_t dwUpTime;
        uint32_t dwTotalPorts;
        uint32_t dwPortsInUse;
        uint32_t Reserved;
        Windows::Win32::RoutingAndRemoteAccessService::MPRAPI_TUNNEL_CONFIG_PARAMS0 ConfigParams;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct MPR_SERVER_EX1
    {
        Windows::Win32::RoutingAndRemoteAccessService::MPRAPI_OBJECT_HEADER Header;
        uint32_t fLanOnlyMode;
        uint32_t dwUpTime;
        uint32_t dwTotalPorts;
        uint32_t dwPortsInUse;
        uint32_t Reserved;
        Windows::Win32::RoutingAndRemoteAccessService::MPRAPI_TUNNEL_CONFIG_PARAMS1 ConfigParams;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct MPR_SERVER_SET_CONFIG_EX0
    {
        Windows::Win32::RoutingAndRemoteAccessService::MPRAPI_OBJECT_HEADER Header;
        uint32_t setConfigForProtocols;
        Windows::Win32::RoutingAndRemoteAccessService::MPRAPI_TUNNEL_CONFIG_PARAMS0 ConfigParams;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct MPR_SERVER_SET_CONFIG_EX1
    {
        Windows::Win32::RoutingAndRemoteAccessService::MPRAPI_OBJECT_HEADER Header;
        uint32_t setConfigForProtocols;
        Windows::Win32::RoutingAndRemoteAccessService::MPRAPI_TUNNEL_CONFIG_PARAMS1 ConfigParams;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct AUTH_VALIDATION_EX
    {
        Windows::Win32::RoutingAndRemoteAccessService::MPRAPI_OBJECT_HEADER Header;
        Windows::Win32::SystemServices::HANDLE hRasConnection;
        uint16_t wszUserName[257];
        uint16_t wszLogonDomain[16];
        uint32_t AuthInfoSize;
        uint8_t AuthInfo[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct RAS_UPDATE_CONNECTION
    {
        Windows::Win32::RoutingAndRemoteAccessService::MPRAPI_OBJECT_HEADER Header;
        uint32_t dwIfIndex;
        uint16_t wszLocalEndpointAddress[65];
        uint16_t wszRemoteEndpointAddress[65];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct MPRAPI_ADMIN_DLL_CALLBACKS
    {
        uint8_t revision;
        Windows::Win32::RoutingAndRemoteAccessService::PMPRADMINGETIPADDRESSFORUSER* lpfnMprAdminGetIpAddressForUser;
        Windows::Win32::RoutingAndRemoteAccessService::PMPRADMINRELEASEIPADRESS* lpfnMprAdminReleaseIpAddress;
        Windows::Win32::RoutingAndRemoteAccessService::PMPRADMINGETIPV6ADDRESSFORUSER* lpfnMprAdminGetIpv6AddressForUser;
        Windows::Win32::RoutingAndRemoteAccessService::PMPRADMINRELEASEIPV6ADDRESSFORUSER* lpfnMprAdminReleaseIpV6AddressForUser;
        Windows::Win32::RoutingAndRemoteAccessService::PMPRADMINACCEPTNEWLINK* lpfnRasAdminAcceptNewLink;
        Windows::Win32::RoutingAndRemoteAccessService::PMPRADMINLINKHANGUPNOTIFICATION* lpfnRasAdminLinkHangupNotification;
        Windows::Win32::RoutingAndRemoteAccessService::PMPRADMINTERMINATEDLL* lpfnRasAdminTerminateDll;
        Windows::Win32::RoutingAndRemoteAccessService::PMPRADMINACCEPTNEWCONNECTIONEX* lpfnRasAdminAcceptNewConnectionEx;
        Windows::Win32::RoutingAndRemoteAccessService::PMPRADMINACCEPTTUNNELENDPOINTCHANGEEX* lpfnRasAdminAcceptEndpointChangeEx;
        Windows::Win32::RoutingAndRemoteAccessService::PMPRADMINACCEPTREAUTHENTICATIONEX* lpfnRasAdminAcceptReauthenticationEx;
        Windows::Win32::RoutingAndRemoteAccessService::PMPRADMINCONNECTIONHANGUPNOTIFICATIONEX* lpfnRasAdminConnectionHangupNotificationEx;
        Windows::Win32::RoutingAndRemoteAccessService::PMPRADMINRASVALIDATEPREAUTHENTICATEDCONNECTIONEX* lpfnRASValidatePreAuthenticatedConnectionEx;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct SECURITY_MESSAGE
    {
        uint32_t dwMsgId;
        intptr_t hPort;
        uint32_t dwError;
        int8_t UserName[257];
        int8_t Domain[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct RAS_SECURITY_INFO
    {
        uint32_t LastError;
        uint32_t BytesReceived;
        int8_t DeviceName[129];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct MGM_IF_ENTRY
    {
        uint32_t dwIfIndex;
        uint32_t dwIfNextHopAddr;
        Windows::Win32::SystemServices::BOOL bIGMP;
        Windows::Win32::SystemServices::BOOL bIsEnabled;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct ROUTING_PROTOCOL_CONFIG
    {
        uint32_t dwCallbackFlags;
        Windows::Win32::RoutingAndRemoteAccessService::PMGM_RPF_CALLBACK* pfnRpfCallback;
        Windows::Win32::RoutingAndRemoteAccessService::PMGM_CREATION_ALERT_CALLBACK* pfnCreationAlertCallback;
        Windows::Win32::RoutingAndRemoteAccessService::PMGM_PRUNE_ALERT_CALLBACK* pfnPruneAlertCallback;
        Windows::Win32::RoutingAndRemoteAccessService::PMGM_JOIN_ALERT_CALLBACK* pfnJoinAlertCallback;
        Windows::Win32::RoutingAndRemoteAccessService::PMGM_WRONG_IF_CALLBACK* pfnWrongIfCallback;
        Windows::Win32::RoutingAndRemoteAccessService::PMGM_LOCAL_JOIN_CALLBACK* pfnLocalJoinCallback;
        Windows::Win32::RoutingAndRemoteAccessService::PMGM_LOCAL_LEAVE_CALLBACK* pfnLocalLeaveCallback;
        Windows::Win32::RoutingAndRemoteAccessService::PMGM_DISABLE_IGMP_CALLBACK* pfnDisableIgmpCallback;
        Windows::Win32::RoutingAndRemoteAccessService::PMGM_ENABLE_IGMP_CALLBACK* pfnEnableIgmpCallback;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct SOURCE_GROUP_ENTRY
    {
        uint32_t dwSourceAddr;
        uint32_t dwSourceMask;
        uint32_t dwGroupAddr;
        uint32_t dwGroupMask;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct RTM_REGN_PROFILE
    {
        uint32_t MaxNextHopsInRoute;
        uint32_t MaxHandlesInEnum;
        uint32_t ViewsSupported;
        uint32_t NumberOfViews;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct RTM_NET_ADDRESS
    {
        uint16_t AddressFamily;
        uint16_t NumBits;
        uint8_t AddrBits[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct RTM_PREF_INFO
    {
        uint32_t Metric;
        uint32_t Preference;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct RTM_NEXTHOP_LIST
    {
        uint16_t NumNextHops;
        intptr_t NextHops[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct RTM_DEST_INFO
    {
        struct _Anonymous_e__Struct
        {
            int32_t ViewId;
            uint32_t NumRoutes;
            intptr_t Route;
            intptr_t Owner;
            uint32_t DestFlags;
            intptr_t HoldRoute;
        };
        intptr_t DestHandle;
        Windows::Win32::RoutingAndRemoteAccessService::RTM_NET_ADDRESS DestAddress;
        Windows::Win32::WindowsProgramming::FILETIME LastChanged;
        uint32_t BelongsToViews;
        uint32_t NumberOfViews;
        _Anonymous_e__Struct ViewInfo[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct RTM_ROUTE_INFO
    {
        intptr_t DestHandle;
        intptr_t RouteOwner;
        intptr_t Neighbour;
        uint8_t State;
        uint8_t Flags1;
        uint16_t Flags;
        Windows::Win32::RoutingAndRemoteAccessService::RTM_PREF_INFO PrefInfo;
        uint32_t BelongsToViews;
        void* EntitySpecificInfo;
        Windows::Win32::RoutingAndRemoteAccessService::RTM_NEXTHOP_LIST NextHopsList;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct RTM_NEXTHOP_INFO
    {
        Windows::Win32::RoutingAndRemoteAccessService::RTM_NET_ADDRESS NextHopAddress;
        intptr_t NextHopOwner;
        uint32_t InterfaceIndex;
        uint16_t State;
        uint16_t Flags;
        void* EntitySpecificInfo;
        intptr_t RemoteNextHop;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct RTM_ENTITY_ID
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t EntityProtocolId;
                uint32_t EntityInstanceId;
            };
            _Anonymous_e__Struct Anonymous;
            uint64_t EntityId;
        };
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct RTM_ENTITY_INFO
    {
        uint16_t RtmInstanceId;
        uint16_t AddressFamily;
        Windows::Win32::RoutingAndRemoteAccessService::RTM_ENTITY_ID EntityId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct RTM_ENTITY_METHOD_INPUT
    {
        uint32_t MethodType;
        uint32_t InputSize;
        uint8_t InputData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct RTM_ENTITY_METHOD_OUTPUT
    {
        uint32_t MethodType;
        uint32_t MethodStatus;
        uint32_t OutputSize;
        uint8_t OutputData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RoutingAndRemoteAccessService
{
    struct RTM_ENTITY_EXPORT_METHODS
    {
        uint32_t NumMethods;
        intptr_t Methods[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RestartManager
{
    struct RM_UNIQUE_PROCESS
    {
        uint32_t dwProcessId;
        Windows::Win32::WindowsProgramming::FILETIME ProcessStartTime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RestartManager
{
    struct RM_PROCESS_INFO
    {
        Windows::Win32::RestartManager::RM_UNIQUE_PROCESS Process;
        uint16_t strAppName[256];
        uint16_t strServiceShortName[64];
        Windows::Win32::RestartManager::RM_APP_TYPE ApplicationType;
        uint32_t AppStatus;
        uint32_t TSSessionId;
        Windows::Win32::SystemServices::BOOL bRestartable;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RestartManager
{
    struct RM_FILTER_INFO
    {
        union _Anonymous_e__Union
        {
            uint16_t* strFilename;
            Windows::Win32::RestartManager::RM_UNIQUE_PROCESS Process;
            uint16_t* strServiceShortName;
        };
        Windows::Win32::RestartManager::RM_FILTER_ACTION FilterAction;
        Windows::Win32::RestartManager::RM_FILTER_TRIGGER FilterTrigger;
        uint32_t cbNextOffset;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct __MIDL___MIDL_itf_encdec_0000_0000_0001
    {
        uint16_t wszKID[25];
        uint64_t qwCounter;
        uint64_t qwIndex;
        uint8_t bOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct __MIDL___MIDL_itf_encdec_0000_0000_0002
    {
        int32_t hrReason;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct STREAMBUFFER_ATTRIBUTE
    {
        uint16_t* pszName;
        Windows::Win32::DirectShow::STREAMBUFFER_ATTR_DATATYPE StreamBufferAttributeType;
        uint8_t* pbAttribute;
        uint16_t cbLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct SBE_PIN_DATA
    {
        uint64_t cDataBytes;
        uint64_t cSamplesProcessed;
        uint64_t cDiscontinuities;
        uint64_t cSyncPoints;
        uint64_t cTimestamps;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct SBE2_STREAM_DESC
    {
        uint32_t Version;
        uint32_t StreamId;
        uint32_t Default;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct DVR_STREAM_DESC
    {
        uint32_t Version;
        uint32_t StreamId;
        Windows::Win32::SystemServices::BOOL Default;
        Windows::Win32::SystemServices::BOOL Creation;
        uint32_t Reserved;
        ::win32::guid guidSubMediaType;
        ::win32::guid guidFormatType;
        Windows::Win32::DirectShow::AM_MEDIA_TYPE MediaType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct __MIDL___MIDL_itf_mpeg2structs_0000_0000_0001
    {
        uint16_t Bits;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct __MIDL___MIDL_itf_mpeg2structs_0000_0000_0002
    {
        uint16_t Bits;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct __MIDL___MIDL_itf_mpeg2structs_0000_0000_0003
    {
        uint8_t Bits;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct __MIDL___MIDL_itf_mpeg2structs_0000_0000_0005
    {
        uint16_t wTidExt;
        uint16_t wCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct SECTION
    {
        union _Header_e__Union
        {
            Windows::Win32::DirectShow::__MIDL___MIDL_itf_mpeg2structs_0000_0000_0002 S;
            uint16_t W;
        };
        uint8_t TableId;
        _Header_e__Union Header;
        uint8_t SectionData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct LONG_SECTION
    {
        union _Header_e__Union
        {
            Windows::Win32::DirectShow::__MIDL___MIDL_itf_mpeg2structs_0000_0000_0002 S;
            uint16_t W;
        };
        union _Version_e__Union
        {
            Windows::Win32::DirectShow::__MIDL___MIDL_itf_mpeg2structs_0000_0000_0003 S;
            uint8_t B;
        };
        uint8_t TableId;
        _Header_e__Union Header;
        uint16_t TableIdExtension;
        _Version_e__Union Version;
        uint8_t SectionNumber;
        uint8_t LastSectionNumber;
        uint8_t RemainingData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct DSMCC_SECTION
    {
        union _Header_e__Union
        {
            Windows::Win32::DirectShow::__MIDL___MIDL_itf_mpeg2structs_0000_0000_0002 S;
            uint16_t W;
        };
        union _Version_e__Union
        {
            Windows::Win32::DirectShow::__MIDL___MIDL_itf_mpeg2structs_0000_0000_0003 S;
            uint8_t B;
        };
        uint8_t TableId;
        _Header_e__Union Header;
        uint16_t TableIdExtension;
        _Version_e__Union Version;
        uint8_t SectionNumber;
        uint8_t LastSectionNumber;
        uint8_t ProtocolDiscriminator;
        uint8_t DsmccType;
        uint16_t MessageId;
        uint32_t TransactionId;
        uint8_t Reserved;
        uint8_t AdaptationLength;
        uint16_t MessageLength;
        uint8_t RemainingData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct MPEG_RQST_PACKET
    {
        uint32_t dwLength;
        Windows::Win32::DirectShow::SECTION* pSection;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct MPEG_PACKET_LIST
    {
        uint16_t wPacketCount;
        Windows::Win32::DirectShow::MPEG_RQST_PACKET* PacketList[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct DSMCC_FILTER_OPTIONS
    {
        Windows::Win32::SystemServices::BOOL fSpecifyProtocol;
        uint8_t Protocol;
        Windows::Win32::SystemServices::BOOL fSpecifyType;
        uint8_t Type;
        Windows::Win32::SystemServices::BOOL fSpecifyMessageId;
        uint16_t MessageId;
        Windows::Win32::SystemServices::BOOL fSpecifyTransactionId;
        Windows::Win32::SystemServices::BOOL fUseTrxIdMessageIdMask;
        uint32_t TransactionId;
        Windows::Win32::SystemServices::BOOL fSpecifyModuleVersion;
        uint8_t ModuleVersion;
        Windows::Win32::SystemServices::BOOL fSpecifyBlockNumber;
        uint16_t BlockNumber;
        Windows::Win32::SystemServices::BOOL fGetModuleCall;
        uint16_t NumberOfBlocksInModule;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct ATSC_FILTER_OPTIONS
    {
        Windows::Win32::SystemServices::BOOL fSpecifyEtmId;
        uint32_t EtmId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct DVB_EIT_FILTER_OPTIONS
    {
        Windows::Win32::SystemServices::BOOL fSpecifySegment;
        uint8_t bSegment;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct MPEG2_FILTER
    {
        uint8_t bVersionNumber;
        uint16_t wFilterSize;
        Windows::Win32::SystemServices::BOOL fUseRawFilteringBits;
        uint8_t Filter[16];
        uint8_t Mask[16];
        Windows::Win32::SystemServices::BOOL fSpecifyTableIdExtension;
        uint16_t TableIdExtension;
        Windows::Win32::SystemServices::BOOL fSpecifyVersion;
        uint8_t Version;
        Windows::Win32::SystemServices::BOOL fSpecifySectionNumber;
        uint8_t SectionNumber;
        Windows::Win32::SystemServices::BOOL fSpecifyCurrentNext;
        Windows::Win32::SystemServices::BOOL fNext;
        Windows::Win32::SystemServices::BOOL fSpecifyDsmccOptions;
        Windows::Win32::DirectShow::DSMCC_FILTER_OPTIONS Dsmcc;
        Windows::Win32::SystemServices::BOOL fSpecifyAtscOptions;
        Windows::Win32::DirectShow::ATSC_FILTER_OPTIONS Atsc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct MPEG2_FILTER2
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint8_t bVersionNumber;
                uint16_t wFilterSize;
                Windows::Win32::SystemServices::BOOL fUseRawFilteringBits;
                uint8_t Filter[16];
                uint8_t Mask[16];
                Windows::Win32::SystemServices::BOOL fSpecifyTableIdExtension;
                uint16_t TableIdExtension;
                Windows::Win32::SystemServices::BOOL fSpecifyVersion;
                uint8_t Version;
                Windows::Win32::SystemServices::BOOL fSpecifySectionNumber;
                uint8_t SectionNumber;
                Windows::Win32::SystemServices::BOOL fSpecifyCurrentNext;
                Windows::Win32::SystemServices::BOOL fNext;
                Windows::Win32::SystemServices::BOOL fSpecifyDsmccOptions;
                Windows::Win32::DirectShow::DSMCC_FILTER_OPTIONS Dsmcc;
                Windows::Win32::SystemServices::BOOL fSpecifyAtscOptions;
                Windows::Win32::DirectShow::ATSC_FILTER_OPTIONS Atsc;
            };
            _Anonymous_e__Struct Anonymous;
            uint8_t bVersion1Bytes[124];
        };
        _Anonymous_e__Union Anonymous;
        Windows::Win32::SystemServices::BOOL fSpecifyDvbEitOptions;
        Windows::Win32::DirectShow::DVB_EIT_FILTER_OPTIONS DvbEit;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct MPEG_STREAM_BUFFER
    {
        int32_t hr;
        uint32_t dwDataBufferSize;
        uint32_t dwSizeOfDataRead;
        uint8_t* pDataBuffer;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct MPEG_TIME
    {
        uint8_t Hours;
        uint8_t Minutes;
        uint8_t Seconds;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct MPEG_DATE
    {
        uint8_t Date;
        uint8_t Month;
        uint16_t Year;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct MPEG_DATE_AND_TIME
    {
        Windows::Win32::DirectShow::MPEG_DATE D;
        Windows::Win32::DirectShow::MPEG_TIME T;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct MPEG_BCS_DEMUX
    {
        uint32_t AVMGraphId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct MPEG_WINSOCK
    {
        uint32_t AVMGraphId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct MPEG_CONTEXT
    {
        union _U_e__Union
        {
            Windows::Win32::DirectShow::MPEG_BCS_DEMUX Demux;
            Windows::Win32::DirectShow::MPEG_WINSOCK Winsock;
        };
        Windows::Win32::DirectShow::MPEG_CONTEXT_TYPE Type;
        _U_e__Union U;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct __MIDL___MIDL_itf_mpeg2structs_0000_0000_0033
    {
        Windows::Win32::DirectShow::MPEG_REQUEST_TYPE Type;
        Windows::Win32::DirectShow::MPEG_CONTEXT Context;
        uint16_t Pid;
        uint8_t TableId;
        Windows::Win32::DirectShow::MPEG2_FILTER Filter;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct __MIDL___MIDL_itf_mpeg2structs_0000_0000_0034
    {
        uint32_t IPAddress;
        uint16_t Port;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct DSMCC_ELEMENT
    {
        uint16_t pid;
        uint8_t bComponentTag;
        uint32_t dwCarouselId;
        uint32_t dwTransactionId;
        Windows::Win32::DirectShow::DSMCC_ELEMENT* pNext;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct MPE_ELEMENT
    {
        uint16_t pid;
        uint8_t bComponentTag;
        Windows::Win32::DirectShow::MPE_ELEMENT* pNext;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct MPEG_STREAM_FILTER
    {
        uint16_t wPidValue;
        uint32_t dwFilterSize;
        Windows::Win32::SystemServices::BOOL fCrcEnabled;
        uint8_t rgchFilter[16];
        uint8_t rgchMask[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct Mpeg2TableSampleHdr
    {
        uint8_t SectionCount;
        uint8_t Reserved[3];
        int32_t SectionOffsets[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct __MIDL_IPAT_0001
    {
        uint16_t wProgramNumber;
        uint16_t wProgramMapPID;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct UDCR_TAG
    {
        uint8_t bVersion;
        uint8_t KID[25];
        uint64_t ullBaseCounter;
        uint64_t ullBaseCounterRange;
        Windows::Win32::SystemServices::BOOL fScrambled;
        uint8_t bStreamMark;
        uint32_t dwReserved1;
        uint32_t dwReserved2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct PIC_SEQ_SAMPLE
    {
        uint32_t _bitfield;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct SAMPLE_SEQ_OFFSET
    {
        uint32_t _bitfield;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct VA_OPTIONAL_VIDEO_PROPERTIES
    {
        uint16_t dwPictureHeight;
        uint16_t dwPictureWidth;
        uint16_t dwAspectRatioX;
        uint16_t dwAspectRatioY;
        Windows::Win32::DirectShow::VA_VIDEO_FORMAT VAVideoFormat;
        Windows::Win32::DirectShow::VA_COLOR_PRIMARIES VAColorPrimaries;
        Windows::Win32::DirectShow::VA_TRANSFER_CHARACTERISTICS VATransferCharacteristics;
        Windows::Win32::DirectShow::VA_MATRIX_COEFFICIENTS VAMatrixCoefficients;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct TRANSPORT_PROPERTIES
    {
        union _Fields_e__Union
        {
            struct _Others
            {
                int64_t _bitfield;
            };
            _Others Others;
            int64_t Value;
        };
        uint32_t PID;
        int64_t PCR;
        _Fields_e__Union Fields;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct PBDA_TAG_ATTRIBUTE
    {
        ::win32::guid TableUUId;
        uint8_t TableId;
        uint16_t VersionNo;
        uint32_t TableDataSize;
        uint8_t TableData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct CAPTURE_STREAMTIME
    {
        int64_t StreamTime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct DSHOW_STREAM_DESC
    {
        uint32_t VersionNo;
        uint32_t StreamId;
        Windows::Win32::SystemServices::BOOL Default;
        Windows::Win32::SystemServices::BOOL Creation;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct SAMPLE_LIVE_STREAM_TIME
    {
        uint64_t qwStreamTime;
        uint64_t qwLiveTime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct KSP_BDA_NODE_PIN
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Property;
        uint32_t ulNodeType;
        uint32_t ulInputPinId;
        uint32_t ulOutputPinId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct KSM_BDA_PIN
    {
        union _Anonymous_e__Union
        {
            uint32_t PinId;
            uint32_t PinType;
        };
        Windows::Win32::CoreAudio::KSIDENTIFIER Method;
        _Anonymous_e__Union Anonymous;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct KSM_BDA_PIN_PAIR
    {
        union _Anonymous1_e__Union
        {
            uint32_t InputPinId;
            uint32_t InputPinType;
        };
        union _Anonymous2_e__Union
        {
            uint32_t OutputPinId;
            uint32_t OutputPinType;
        };
        Windows::Win32::CoreAudio::KSIDENTIFIER Method;
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct KSP_NODE_ESPID
    {
        Windows::Win32::CoreAudio::KSP_NODE Property;
        uint32_t EsPid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct KSM_BDA_DEBUG_LEVEL
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Method;
        uint8_t ucDebugLevel;
        uint32_t ulDebugStringSize;
        uint8_t argbDebugString[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct BDA_DEBUG_DATA
    {
        int32_t lResult;
        ::win32::guid uuidDebugDataType;
        uint32_t ulDataSize;
        uint8_t argbDebugData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct BDA_EVENT_DATA
    {
        int32_t lResult;
        uint32_t ulEventID;
        ::win32::guid uuidEventType;
        uint32_t ulEventDataLength;
        uint8_t argbEventData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct KSM_BDA_EVENT_COMPLETE
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Method;
        uint32_t ulEventID;
        uint32_t ulEventResult;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct KSM_BDA_DRM_SETDRM
    {
        Windows::Win32::CoreAudio::KSM_NODE NodeMethod;
        ::win32::guid NewDRMuuid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct KSM_BDA_BUFFER
    {
        Windows::Win32::CoreAudio::KSM_NODE NodeMethod;
        uint32_t ulBufferSize;
        uint8_t argbBuffer[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct KSM_BDA_WMDRM_LICENSE
    {
        Windows::Win32::CoreAudio::KSM_NODE NodeMethod;
        ::win32::guid uuidKeyID;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct KSM_BDA_WMDRM_RENEWLICENSE
    {
        Windows::Win32::CoreAudio::KSM_NODE NodeMethod;
        uint32_t ulXMRLicenseLength;
        uint32_t ulEntitlementTokenLength;
        uint8_t argbDataBuffer[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct KSM_BDA_WMDRMTUNER_PURCHASEENTITLEMENT
    {
        Windows::Win32::CoreAudio::KSM_NODE NodeMethod;
        uint32_t ulDialogRequest;
        int8_t cLanguage[12];
        uint32_t ulPurchaseTokenLength;
        uint8_t argbDataBuffer[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct KSM_BDA_WMDRMTUNER_SETPIDPROTECTION
    {
        Windows::Win32::CoreAudio::KSM_NODE NodeMethod;
        uint32_t ulPID;
        ::win32::guid uuidKeyID;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct KSM_BDA_WMDRMTUNER_GETPIDPROTECTION
    {
        Windows::Win32::CoreAudio::KSM_NODE NodeMethod;
        uint32_t ulPID;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct KSM_BDA_WMDRMTUNER_SYNCVALUE
    {
        Windows::Win32::CoreAudio::KSM_NODE NodeMethod;
        uint32_t ulSyncValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct KSM_BDA_TUNER_TUNEREQUEST
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Method;
        uint32_t ulTuneLength;
        uint8_t argbTuneData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct KSM_BDA_GPNV_GETVALUE
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Method;
        uint32_t ulNameLength;
        int8_t cLanguage[12];
        uint8_t argbData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct KSM_BDA_GPNV_SETVALUE
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Method;
        uint32_t ulDialogRequest;
        int8_t cLanguage[12];
        uint32_t ulNameLength;
        uint32_t ulValueLength;
        uint8_t argbName[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct KSM_BDA_GPNV_NAMEINDEX
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Method;
        uint32_t ulValueNameIndex;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct KSM_BDA_SCAN_CAPABILTIES
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Method;
        ::win32::guid uuidBroadcastStandard;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct KSM_BDA_SCAN_FILTER
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Method;
        uint32_t ulScanModulationTypeSize;
        uint64_t AnalogVideoStandards;
        uint8_t argbScanModulationTypes[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct KSM_BDA_SCAN_START
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Method;
        uint32_t LowerFrequency;
        uint32_t HigherFrequency;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct KSM_BDA_GDDS_TUNEXMLFROMIDX
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Method;
        uint64_t ulIdx;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct KSM_BDA_GDDS_SERVICEFROMTUNEXML
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Method;
        uint32_t ulTuneXmlLength;
        uint8_t argbTuneXml[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct KSM_BDA_USERACTIVITY_USEREASON
    {
        Windows::Win32::CoreAudio::KSIDENTIFIER Method;
        uint32_t ulUseReason;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct KSM_BDA_CAS_ENTITLEMENTTOKEN
    {
        Windows::Win32::CoreAudio::KSM_NODE NodeMethod;
        uint32_t ulDialogRequest;
        int8_t cLanguage[12];
        uint32_t ulRequestType;
        uint32_t ulEntitlementTokenLen;
        uint8_t argbEntitlementToken[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct KSM_BDA_CAS_CAPTURETOKEN
    {
        Windows::Win32::CoreAudio::KSM_NODE NodeMethod;
        uint32_t ulTokenLength;
        uint8_t argbToken[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct KSM_BDA_CAS_OPENBROADCASTMMI
    {
        Windows::Win32::CoreAudio::KSM_NODE NodeMethod;
        uint32_t ulDialogRequest;
        int8_t cLanguage[12];
        uint32_t ulEventId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct KSM_BDA_CAS_CLOSEMMIDIALOG
    {
        Windows::Win32::CoreAudio::KSM_NODE NodeMethod;
        uint32_t ulDialogRequest;
        int8_t cLanguage[12];
        uint32_t ulDialogNumber;
        uint32_t ulReason;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct KSM_BDA_ISDBCAS_REQUEST
    {
        Windows::Win32::CoreAudio::KSM_NODE NodeMethod;
        uint32_t ulRequestID;
        uint32_t ulIsdbCommandSize;
        uint8_t argbIsdbCommandData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct KSM_BDA_TS_SELECTOR_SETTSID
    {
        Windows::Win32::CoreAudio::KSM_NODE NodeMethod;
        uint16_t usTSID;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct KS_DATARANGE_BDA_ANTENNA
    {
        Windows::Win32::CoreAudio::KSDATAFORMAT DataRange;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct BDA_TRANSPORT_INFO
    {
        uint32_t ulcbPhyiscalPacket;
        uint32_t ulcbPhyiscalFrame;
        uint32_t ulcbPhyiscalFrameAlignment;
        int64_t AvgTimePerFrame;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct KS_DATARANGE_BDA_TRANSPORT
    {
        Windows::Win32::CoreAudio::KSDATAFORMAT DataRange;
        Windows::Win32::DirectShow::BDA_TRANSPORT_INFO BdaTransportInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct ChannelChangeInfo
    {
        Windows::Win32::DirectShow::ChannelChangeSpanningEvent_State state;
        uint64_t TimeStamp;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct ChannelTypeInfo
    {
        Windows::Win32::DirectShow::ChannelType channelType;
        uint64_t timeStamp;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct ChannelInfo
    {
        union _Anonymous_e__Union
        {
            struct _DVB_e__Struct
            {
                int32_t lONID;
                int32_t lTSID;
                int32_t lSID;
            };
            struct _DC_e__Struct
            {
                int32_t lProgNumber;
            };
            struct _ATSC_e__Struct
            {
                int32_t lProgNumber;
            };
            _DVB_e__Struct DVB;
            _DC_e__Struct DC;
            _ATSC_e__Struct ATSC;
        };
        int32_t lFrequency;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct SpanningEventDescriptor
    {
        uint16_t wDataLen;
        uint16_t wProgNumber;
        uint16_t wSID;
        uint8_t bDescriptor[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct DVBScramblingControlSpanningEvent
    {
        uint32_t ulPID;
        Windows::Win32::SystemServices::BOOL fScrambled;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct SpanningEventEmmMessage
    {
        uint8_t bCAbroadcasterGroupId;
        uint8_t bMessageControl;
        uint16_t wServiceId;
        uint16_t wTableIdExtension;
        uint8_t bDeletionStatus;
        uint8_t bDisplayingDuration1;
        uint8_t bDisplayingDuration2;
        uint8_t bDisplayingDuration3;
        uint8_t bDisplayingCycle;
        uint8_t bFormatVersion;
        uint8_t bDisplayPosition;
        uint16_t wMessageLength;
        uint16_t szMessageArea[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct LanguageInfo
    {
        uint16_t LangID;
        int32_t lISOLangCode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct DualMonoInfo
    {
        uint16_t LangID1;
        uint16_t LangID2;
        int32_t lISOLangCode1;
        int32_t lISOLangCode2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct PIDListSpanningEvent
    {
        uint16_t wPIDCount;
        uint32_t pulPIDs[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct RATING_ATTRIBUTE
    {
        uint32_t rating_attribute_id;
        uint32_t rating_attribute_value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct RATING_SYSTEM
    {
        ::win32::guid rating_system_id;
        uint8_t _bitfield;
        uint8_t country_code[3];
        uint32_t rating_attribute_count;
        Windows::Win32::DirectShow::RATING_ATTRIBUTE* lpratingattrib;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct RATING_INFO
    {
        uint32_t rating_system_count;
        Windows::Win32::DirectShow::RATING_SYSTEM* lpratingsystem;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct PBDAParentalControl
    {
        uint32_t rating_system_count;
        Windows::Win32::DirectShow::RATING_SYSTEM* rating_systems;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct DvbParentalRatingParam
    {
        int8_t szCountryCode[4];
        uint8_t bRating;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct DvbParentalRatingDescriptor
    {
        uint32_t ulNumParams;
        Windows::Win32::DirectShow::DvbParentalRatingParam pParams[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct KSPROPERTY_BDA_RF_TUNER_CAPS_S
    {
        Windows::Win32::CoreAudio::KSP_NODE Property;
        uint32_t Mode;
        uint32_t AnalogStandardsSupported;
        uint32_t DigitalStandardsSupported;
        uint32_t MinFrequency;
        uint32_t MaxFrequency;
        uint32_t SettlingTime;
        uint32_t AnalogSensingRange;
        uint32_t DigitalSensingRange;
        uint32_t MilliSecondsPerMHz;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct KSPROPERTY_BDA_RF_TUNER_SCAN_STATUS_S
    {
        Windows::Win32::CoreAudio::KSP_NODE Property;
        uint32_t CurrentFrequency;
        uint32_t FrequencyRangeMin;
        uint32_t FrequencyRangeMax;
        uint32_t MilliSecondsLeft;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct KSPROPERTY_BDA_RF_TUNER_STANDARD_S
    {
        Windows::Win32::CoreAudio::KSP_NODE Property;
        Windows::Win32::DirectShow::_BdaSignalType SignalType;
        uint32_t SignalStandard;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct KSPROPERTY_BDA_RF_TUNER_STANDARD_MODE_S
    {
        Windows::Win32::CoreAudio::KSP_NODE Property;
        Windows::Win32::SystemServices::BOOL AutoDetect;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct KSEVENTDATA_BDA_RF_TUNER_SCAN_S
    {
        Windows::Win32::CoreAudio::KSEVENTDATA EventData;
        uint32_t StartFrequency;
        uint32_t EndFrequency;
        Windows::Win32::DirectShow::_BdaLockType LockRequested;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct PID_BITS
    {
        uint16_t _bitfield;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct MPEG_HEADER_BITS
    {
        uint16_t _bitfield;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct MPEG_HEADER_VERSION_BITS
    {
        uint8_t _bitfield;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MMTIME
    {
        union _u_e__Union
        {
            struct _smpte_e__Struct
            {
                uint8_t hour;
                uint8_t min;
                uint8_t sec;
                uint8_t frame;
                uint8_t fps;
                uint8_t dummy;
                uint8_t pad[2];
            };
            struct _midi_e__Struct
            {
                uint32_t songptrpos;
            };
            uint32_t ms;
            uint32_t sample;
            uint32_t cb;
            uint32_t ticks;
            _smpte_e__Struct smpte;
            _midi_e__Struct midi;
        };
        uint32_t wType;
        _u_e__Union u;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct HDRVR__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct DRVCONFIGINFOEX
    {
        uint32_t dwDCISize;
        uint16_t* lpszDCISectionName;
        uint16_t* lpszDCIAliasName;
        uint32_t dnDevNode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct DRVCONFIGINFO
    {
        uint32_t dwDCISize;
        uint16_t* lpszDCISectionName;
        uint16_t* lpszDCIAliasName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct HMMIO__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MMIOINFO
    {
        uint32_t dwFlags;
        uint32_t fccIOProc;
        Windows::Win32::Multimedia::LPMMIOPROC* pIOProc;
        uint32_t wErrorRet;
        intptr_t htask;
        int32_t cchBuffer;
        int8_t* pchBuffer;
        int8_t* pchNext;
        int8_t* pchEndRead;
        int8_t* pchEndWrite;
        int32_t lBufOffset;
        int32_t lDiskOffset;
        uint32_t adwInfo[3];
        uint32_t dwReserved1;
        uint32_t dwReserved2;
        Windows::Win32::Multimedia::HMMIO__* hmmio;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MMCKINFO
    {
        uint32_t ckid;
        uint32_t cksize;
        uint32_t fccType;
        uint32_t dwDataOffset;
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct HWAVE__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct HWAVEIN__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct HWAVEOUT__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct WAVEHDR
    {
        int8_t* lpData;
        uint32_t dwBufferLength;
        uint32_t dwBytesRecorded;
        size_t dwUser;
        uint32_t dwFlags;
        uint32_t dwLoops;
        Windows::Win32::Multimedia::WAVEHDR* lpNext;
        size_t reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct WAVEOUTCAPSA
    {
        uint16_t wMid;
        uint16_t wPid;
        uint32_t vDriverVersion;
        int8_t szPname[32];
        uint32_t dwFormats;
        uint16_t wChannels;
        uint16_t wReserved1;
        uint32_t dwSupport;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct WAVEOUTCAPSW
    {
        uint16_t wMid;
        uint16_t wPid;
        uint32_t vDriverVersion;
        uint16_t szPname[32];
        uint32_t dwFormats;
        uint16_t wChannels;
        uint16_t wReserved1;
        uint32_t dwSupport;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct WAVEOUTCAPS2A
    {
        uint16_t wMid;
        uint16_t wPid;
        uint32_t vDriverVersion;
        int8_t szPname[32];
        uint32_t dwFormats;
        uint16_t wChannels;
        uint16_t wReserved1;
        uint32_t dwSupport;
        ::win32::guid ManufacturerGuid;
        ::win32::guid ProductGuid;
        ::win32::guid NameGuid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct WAVEOUTCAPS2W
    {
        uint16_t wMid;
        uint16_t wPid;
        uint32_t vDriverVersion;
        uint16_t szPname[32];
        uint32_t dwFormats;
        uint16_t wChannels;
        uint16_t wReserved1;
        uint32_t dwSupport;
        ::win32::guid ManufacturerGuid;
        ::win32::guid ProductGuid;
        ::win32::guid NameGuid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct WAVEINCAPSA
    {
        uint16_t wMid;
        uint16_t wPid;
        uint32_t vDriverVersion;
        int8_t szPname[32];
        uint32_t dwFormats;
        uint16_t wChannels;
        uint16_t wReserved1;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct WAVEINCAPSW
    {
        uint16_t wMid;
        uint16_t wPid;
        uint32_t vDriverVersion;
        uint16_t szPname[32];
        uint32_t dwFormats;
        uint16_t wChannels;
        uint16_t wReserved1;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct WAVEINCAPS2A
    {
        uint16_t wMid;
        uint16_t wPid;
        uint32_t vDriverVersion;
        int8_t szPname[32];
        uint32_t dwFormats;
        uint16_t wChannels;
        uint16_t wReserved1;
        ::win32::guid ManufacturerGuid;
        ::win32::guid ProductGuid;
        ::win32::guid NameGuid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct WAVEINCAPS2W
    {
        uint16_t wMid;
        uint16_t wPid;
        uint32_t vDriverVersion;
        uint16_t szPname[32];
        uint32_t dwFormats;
        uint16_t wChannels;
        uint16_t wReserved1;
        ::win32::guid ManufacturerGuid;
        ::win32::guid ProductGuid;
        ::win32::guid NameGuid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct WAVEFORMAT
    {
        uint16_t wFormatTag;
        uint16_t nChannels;
        uint32_t nSamplesPerSec;
        uint32_t nAvgBytesPerSec;
        uint16_t nBlockAlign;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct PCMWAVEFORMAT
    {
        Windows::Win32::Multimedia::WAVEFORMAT wf;
        uint16_t wBitsPerSample;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct HMIDI__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct HMIDIIN__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct HMIDIOUT__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct HMIDISTRM__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MIDIOUTCAPSA
    {
        uint16_t wMid;
        uint16_t wPid;
        uint32_t vDriverVersion;
        int8_t szPname[32];
        uint16_t wTechnology;
        uint16_t wVoices;
        uint16_t wNotes;
        uint16_t wChannelMask;
        uint32_t dwSupport;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MIDIOUTCAPSW
    {
        uint16_t wMid;
        uint16_t wPid;
        uint32_t vDriverVersion;
        uint16_t szPname[32];
        uint16_t wTechnology;
        uint16_t wVoices;
        uint16_t wNotes;
        uint16_t wChannelMask;
        uint32_t dwSupport;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MIDIOUTCAPS2A
    {
        uint16_t wMid;
        uint16_t wPid;
        uint32_t vDriverVersion;
        int8_t szPname[32];
        uint16_t wTechnology;
        uint16_t wVoices;
        uint16_t wNotes;
        uint16_t wChannelMask;
        uint32_t dwSupport;
        ::win32::guid ManufacturerGuid;
        ::win32::guid ProductGuid;
        ::win32::guid NameGuid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MIDIOUTCAPS2W
    {
        uint16_t wMid;
        uint16_t wPid;
        uint32_t vDriverVersion;
        uint16_t szPname[32];
        uint16_t wTechnology;
        uint16_t wVoices;
        uint16_t wNotes;
        uint16_t wChannelMask;
        uint32_t dwSupport;
        ::win32::guid ManufacturerGuid;
        ::win32::guid ProductGuid;
        ::win32::guid NameGuid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MIDIINCAPSA
    {
        uint16_t wMid;
        uint16_t wPid;
        uint32_t vDriverVersion;
        int8_t szPname[32];
        uint32_t dwSupport;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MIDIINCAPSW
    {
        uint16_t wMid;
        uint16_t wPid;
        uint32_t vDriverVersion;
        uint16_t szPname[32];
        uint32_t dwSupport;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MIDIINCAPS2A
    {
        uint16_t wMid;
        uint16_t wPid;
        uint32_t vDriverVersion;
        int8_t szPname[32];
        uint32_t dwSupport;
        ::win32::guid ManufacturerGuid;
        ::win32::guid ProductGuid;
        ::win32::guid NameGuid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MIDIINCAPS2W
    {
        uint16_t wMid;
        uint16_t wPid;
        uint32_t vDriverVersion;
        uint16_t szPname[32];
        uint32_t dwSupport;
        ::win32::guid ManufacturerGuid;
        ::win32::guid ProductGuid;
        ::win32::guid NameGuid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MIDIHDR
    {
        int8_t* lpData;
        uint32_t dwBufferLength;
        uint32_t dwBytesRecorded;
        size_t dwUser;
        uint32_t dwFlags;
        Windows::Win32::Multimedia::MIDIHDR* lpNext;
        size_t reserved;
        uint32_t dwOffset;
        size_t dwReserved[8];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MIDIEVENT
    {
        uint32_t dwDeltaTime;
        uint32_t dwStreamID;
        uint32_t dwEvent;
        uint32_t dwParms[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MIDISTRMBUFFVER
    {
        uint32_t dwVersion;
        uint32_t dwMid;
        uint32_t dwOEMVersion;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MIDIPROPTIMEDIV
    {
        uint32_t cbStruct;
        uint32_t dwTimeDiv;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MIDIPROPTEMPO
    {
        uint32_t cbStruct;
        uint32_t dwTempo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct AUXCAPSA
    {
        uint16_t wMid;
        uint16_t wPid;
        uint32_t vDriverVersion;
        int8_t szPname[32];
        uint16_t wTechnology;
        uint16_t wReserved1;
        uint32_t dwSupport;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct AUXCAPSW
    {
        uint16_t wMid;
        uint16_t wPid;
        uint32_t vDriverVersion;
        uint16_t szPname[32];
        uint16_t wTechnology;
        uint16_t wReserved1;
        uint32_t dwSupport;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct AUXCAPS2A
    {
        uint16_t wMid;
        uint16_t wPid;
        uint32_t vDriverVersion;
        int8_t szPname[32];
        uint16_t wTechnology;
        uint16_t wReserved1;
        uint32_t dwSupport;
        ::win32::guid ManufacturerGuid;
        ::win32::guid ProductGuid;
        ::win32::guid NameGuid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct AUXCAPS2W
    {
        uint16_t wMid;
        uint16_t wPid;
        uint32_t vDriverVersion;
        uint16_t szPname[32];
        uint16_t wTechnology;
        uint16_t wReserved1;
        uint32_t dwSupport;
        ::win32::guid ManufacturerGuid;
        ::win32::guid ProductGuid;
        ::win32::guid NameGuid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct HMIXEROBJ__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct HMIXER__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MIXERCAPSA
    {
        uint16_t wMid;
        uint16_t wPid;
        uint32_t vDriverVersion;
        int8_t szPname[32];
        uint32_t fdwSupport;
        uint32_t cDestinations;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MIXERCAPSW
    {
        uint16_t wMid;
        uint16_t wPid;
        uint32_t vDriverVersion;
        uint16_t szPname[32];
        uint32_t fdwSupport;
        uint32_t cDestinations;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MIXERCAPS2A
    {
        uint16_t wMid;
        uint16_t wPid;
        uint32_t vDriverVersion;
        int8_t szPname[32];
        uint32_t fdwSupport;
        uint32_t cDestinations;
        ::win32::guid ManufacturerGuid;
        ::win32::guid ProductGuid;
        ::win32::guid NameGuid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MIXERCAPS2W
    {
        uint16_t wMid;
        uint16_t wPid;
        uint32_t vDriverVersion;
        uint16_t szPname[32];
        uint32_t fdwSupport;
        uint32_t cDestinations;
        ::win32::guid ManufacturerGuid;
        ::win32::guid ProductGuid;
        ::win32::guid NameGuid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MIXERLINEA
    {
        struct _Target_e__Struct
        {
            uint32_t dwType;
            uint32_t dwDeviceID;
            uint16_t wMid;
            uint16_t wPid;
            uint32_t vDriverVersion;
            int8_t szPname[32];
        };
        uint32_t cbStruct;
        uint32_t dwDestination;
        uint32_t dwSource;
        uint32_t dwLineID;
        uint32_t fdwLine;
        size_t dwUser;
        uint32_t dwComponentType;
        uint32_t cChannels;
        uint32_t cConnections;
        uint32_t cControls;
        int8_t szShortName[16];
        int8_t szName[64];
        _Target_e__Struct Target;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MIXERLINEW
    {
        struct _Target_e__Struct
        {
            uint32_t dwType;
            uint32_t dwDeviceID;
            uint16_t wMid;
            uint16_t wPid;
            uint32_t vDriverVersion;
            uint16_t szPname[32];
        };
        uint32_t cbStruct;
        uint32_t dwDestination;
        uint32_t dwSource;
        uint32_t dwLineID;
        uint32_t fdwLine;
        size_t dwUser;
        uint32_t dwComponentType;
        uint32_t cChannels;
        uint32_t cConnections;
        uint32_t cControls;
        uint16_t szShortName[16];
        uint16_t szName[64];
        _Target_e__Struct Target;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MIXERCONTROLA
    {
        union _Bounds_e__Union
        {
            struct _Anonymous1_e__Struct
            {
                int32_t lMinimum;
                int32_t lMaximum;
            };
            struct _Anonymous2_e__Struct
            {
                uint32_t dwMinimum;
                uint32_t dwMaximum;
            };
            _Anonymous1_e__Struct Anonymous1;
            _Anonymous2_e__Struct Anonymous2;
            uint32_t dwReserved[6];
        };
        union _Metrics_e__Union
        {
            uint32_t cSteps;
            uint32_t cbCustomData;
            uint32_t dwReserved[6];
        };
        uint32_t cbStruct;
        uint32_t dwControlID;
        uint32_t dwControlType;
        uint32_t fdwControl;
        uint32_t cMultipleItems;
        int8_t szShortName[16];
        int8_t szName[64];
        _Bounds_e__Union Bounds;
        _Metrics_e__Union Metrics;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MIXERCONTROLW
    {
        union _Bounds_e__Union
        {
            struct _Anonymous1_e__Struct
            {
                int32_t lMinimum;
                int32_t lMaximum;
            };
            struct _Anonymous2_e__Struct
            {
                uint32_t dwMinimum;
                uint32_t dwMaximum;
            };
            _Anonymous1_e__Struct Anonymous1;
            _Anonymous2_e__Struct Anonymous2;
            uint32_t dwReserved[6];
        };
        union _Metrics_e__Union
        {
            uint32_t cSteps;
            uint32_t cbCustomData;
            uint32_t dwReserved[6];
        };
        uint32_t cbStruct;
        uint32_t dwControlID;
        uint32_t dwControlType;
        uint32_t fdwControl;
        uint32_t cMultipleItems;
        uint16_t szShortName[16];
        uint16_t szName[64];
        _Bounds_e__Union Bounds;
        _Metrics_e__Union Metrics;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MIXERLINECONTROLSA
    {
        union _Anonymous_e__Union
        {
            uint32_t dwControlID;
            uint32_t dwControlType;
        };
        uint32_t cbStruct;
        uint32_t dwLineID;
        _Anonymous_e__Union Anonymous;
        uint32_t cControls;
        uint32_t cbmxctrl;
        Windows::Win32::Multimedia::MIXERCONTROLA* pamxctrl;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MIXERLINECONTROLSW
    {
        union _Anonymous_e__Union
        {
            uint32_t dwControlID;
            uint32_t dwControlType;
        };
        uint32_t cbStruct;
        uint32_t dwLineID;
        _Anonymous_e__Union Anonymous;
        uint32_t cControls;
        uint32_t cbmxctrl;
        Windows::Win32::Multimedia::MIXERCONTROLW* pamxctrl;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MIXERCONTROLDETAILS
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::WindowsAndMessaging::HWND hwndOwner;
            uint32_t cMultipleItems;
        };
        uint32_t cbStruct;
        uint32_t dwControlID;
        uint32_t cChannels;
        _Anonymous_e__Union Anonymous;
        uint32_t cbDetails;
        void* paDetails;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MIXERCONTROLDETAILS_LISTTEXTA
    {
        uint32_t dwParam1;
        uint32_t dwParam2;
        int8_t szName[64];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MIXERCONTROLDETAILS_LISTTEXTW
    {
        uint32_t dwParam1;
        uint32_t dwParam2;
        uint16_t szName[64];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MIXERCONTROLDETAILS_BOOLEAN
    {
        int32_t fValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MIXERCONTROLDETAILS_SIGNED
    {
        int32_t lValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MIXERCONTROLDETAILS_UNSIGNED
    {
        uint32_t dwValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct TIMECAPS
    {
        uint32_t wPeriodMin;
        uint32_t wPeriodMax;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct JOYCAPSA
    {
        uint16_t wMid;
        uint16_t wPid;
        int8_t szPname[32];
        uint32_t wXmin;
        uint32_t wXmax;
        uint32_t wYmin;
        uint32_t wYmax;
        uint32_t wZmin;
        uint32_t wZmax;
        uint32_t wNumButtons;
        uint32_t wPeriodMin;
        uint32_t wPeriodMax;
        uint32_t wRmin;
        uint32_t wRmax;
        uint32_t wUmin;
        uint32_t wUmax;
        uint32_t wVmin;
        uint32_t wVmax;
        uint32_t wCaps;
        uint32_t wMaxAxes;
        uint32_t wNumAxes;
        uint32_t wMaxButtons;
        int8_t szRegKey[32];
        int8_t szOEMVxD[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct JOYCAPSW
    {
        uint16_t wMid;
        uint16_t wPid;
        uint16_t szPname[32];
        uint32_t wXmin;
        uint32_t wXmax;
        uint32_t wYmin;
        uint32_t wYmax;
        uint32_t wZmin;
        uint32_t wZmax;
        uint32_t wNumButtons;
        uint32_t wPeriodMin;
        uint32_t wPeriodMax;
        uint32_t wRmin;
        uint32_t wRmax;
        uint32_t wUmin;
        uint32_t wUmax;
        uint32_t wVmin;
        uint32_t wVmax;
        uint32_t wCaps;
        uint32_t wMaxAxes;
        uint32_t wNumAxes;
        uint32_t wMaxButtons;
        uint16_t szRegKey[32];
        uint16_t szOEMVxD[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct JOYCAPS2A
    {
        uint16_t wMid;
        uint16_t wPid;
        int8_t szPname[32];
        uint32_t wXmin;
        uint32_t wXmax;
        uint32_t wYmin;
        uint32_t wYmax;
        uint32_t wZmin;
        uint32_t wZmax;
        uint32_t wNumButtons;
        uint32_t wPeriodMin;
        uint32_t wPeriodMax;
        uint32_t wRmin;
        uint32_t wRmax;
        uint32_t wUmin;
        uint32_t wUmax;
        uint32_t wVmin;
        uint32_t wVmax;
        uint32_t wCaps;
        uint32_t wMaxAxes;
        uint32_t wNumAxes;
        uint32_t wMaxButtons;
        int8_t szRegKey[32];
        int8_t szOEMVxD[260];
        ::win32::guid ManufacturerGuid;
        ::win32::guid ProductGuid;
        ::win32::guid NameGuid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct JOYCAPS2W
    {
        uint16_t wMid;
        uint16_t wPid;
        uint16_t szPname[32];
        uint32_t wXmin;
        uint32_t wXmax;
        uint32_t wYmin;
        uint32_t wYmax;
        uint32_t wZmin;
        uint32_t wZmax;
        uint32_t wNumButtons;
        uint32_t wPeriodMin;
        uint32_t wPeriodMax;
        uint32_t wRmin;
        uint32_t wRmax;
        uint32_t wUmin;
        uint32_t wUmax;
        uint32_t wVmin;
        uint32_t wVmax;
        uint32_t wCaps;
        uint32_t wMaxAxes;
        uint32_t wNumAxes;
        uint32_t wMaxButtons;
        uint16_t szRegKey[32];
        uint16_t szOEMVxD[260];
        ::win32::guid ManufacturerGuid;
        ::win32::guid ProductGuid;
        ::win32::guid NameGuid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct JOYINFO
    {
        uint32_t wXpos;
        uint32_t wYpos;
        uint32_t wZpos;
        uint32_t wButtons;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct JOYINFOEX
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        uint32_t dwXpos;
        uint32_t dwYpos;
        uint32_t dwZpos;
        uint32_t dwRpos;
        uint32_t dwUpos;
        uint32_t dwVpos;
        uint32_t dwButtons;
        uint32_t dwButtonNumber;
        uint32_t dwPOV;
        uint32_t dwReserved1;
        uint32_t dwReserved2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct ADPCMCOEFSET
    {
        int16_t iCoef1;
        int16_t iCoef2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct ADPCMWAVEFORMAT
    {
        Windows::Win32::Multimedia::WAVEFORMATEX wfx;
        uint16_t wSamplesPerBlock;
        uint16_t wNumCoef;
        Windows::Win32::Multimedia::ADPCMCOEFSET aCoef;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct DRMWAVEFORMAT
    {
        Windows::Win32::Multimedia::WAVEFORMATEX wfx;
        uint16_t wReserved;
        uint32_t ulContentId;
        Windows::Win32::Multimedia::WAVEFORMATEX wfxSecure;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct DVIADPCMWAVEFORMAT
    {
        Windows::Win32::Multimedia::WAVEFORMATEX wfx;
        uint16_t wSamplesPerBlock;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct IMAADPCMWAVEFORMAT
    {
        Windows::Win32::Multimedia::WAVEFORMATEX wfx;
        uint16_t wSamplesPerBlock;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MEDIASPACEADPCMWAVEFORMAT
    {
        Windows::Win32::Multimedia::WAVEFORMATEX wfx;
        uint16_t wRevision;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct SIERRAADPCMWAVEFORMAT
    {
        Windows::Win32::Multimedia::WAVEFORMATEX wfx;
        uint16_t wRevision;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct G723_ADPCMWAVEFORMAT
    {
        Windows::Win32::Multimedia::WAVEFORMATEX wfx;
        uint16_t cbExtraSize;
        uint16_t nAuxBlockSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct DIGISTDWAVEFORMAT
    {
        Windows::Win32::Multimedia::WAVEFORMATEX wfx;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct DIGIFIXWAVEFORMAT
    {
        Windows::Win32::Multimedia::WAVEFORMATEX wfx;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct DIALOGICOKIADPCMWAVEFORMAT
    {
        Windows::Win32::Multimedia::WAVEFORMATEX ewf;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct YAMAHA_ADPCMWAVEFORMAT
    {
        Windows::Win32::Multimedia::WAVEFORMATEX wfx;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct SONARCWAVEFORMAT
    {
        Windows::Win32::Multimedia::WAVEFORMATEX wfx;
        uint16_t wCompType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct TRUESPEECHWAVEFORMAT
    {
        Windows::Win32::Multimedia::WAVEFORMATEX wfx;
        uint16_t wRevision;
        uint16_t nSamplesPerBlock;
        uint8_t abReserved[28];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct ECHOSC1WAVEFORMAT
    {
        Windows::Win32::Multimedia::WAVEFORMATEX wfx;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct AUDIOFILE_AF36WAVEFORMAT
    {
        Windows::Win32::Multimedia::WAVEFORMATEX wfx;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct APTXWAVEFORMAT
    {
        Windows::Win32::Multimedia::WAVEFORMATEX wfx;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct AUDIOFILE_AF10WAVEFORMAT
    {
        Windows::Win32::Multimedia::WAVEFORMATEX wfx;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct DOLBYAC2WAVEFORMAT
    {
        Windows::Win32::Multimedia::WAVEFORMATEX wfx;
        uint16_t nAuxBitsCode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct GSM610WAVEFORMAT
    {
        Windows::Win32::Multimedia::WAVEFORMATEX wfx;
        uint16_t wSamplesPerBlock;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct ADPCMEWAVEFORMAT
    {
        Windows::Win32::Multimedia::WAVEFORMATEX wfx;
        uint16_t wSamplesPerBlock;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct CONTRESVQLPCWAVEFORMAT
    {
        Windows::Win32::Multimedia::WAVEFORMATEX wfx;
        uint16_t wSamplesPerBlock;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct DIGIREALWAVEFORMAT
    {
        Windows::Win32::Multimedia::WAVEFORMATEX wfx;
        uint16_t wSamplesPerBlock;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct DIGIADPCMWAVEFORMAT
    {
        Windows::Win32::Multimedia::WAVEFORMATEX wfx;
        uint16_t wSamplesPerBlock;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct CONTRESCR10WAVEFORMAT
    {
        Windows::Win32::Multimedia::WAVEFORMATEX wfx;
        uint16_t wSamplesPerBlock;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct NMS_VBXADPCMWAVEFORMAT
    {
        Windows::Win32::Multimedia::WAVEFORMATEX wfx;
        uint16_t wSamplesPerBlock;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct G721_ADPCMWAVEFORMAT
    {
        Windows::Win32::Multimedia::WAVEFORMATEX wfx;
        uint16_t nAuxBlockSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MSAUDIO1WAVEFORMAT
    {
        Windows::Win32::Multimedia::WAVEFORMATEX wfx;
        uint16_t wSamplesPerBlock;
        uint16_t wEncodeOptions;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct WMAUDIO2WAVEFORMAT
    {
        Windows::Win32::Multimedia::WAVEFORMATEX wfx;
        uint32_t dwSamplesPerBlock;
        uint16_t wEncodeOptions;
        uint32_t dwSuperBlockAlign;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct WMAUDIO3WAVEFORMAT
    {
        Windows::Win32::Multimedia::WAVEFORMATEX wfx;
        uint16_t wValidBitsPerSample;
        uint32_t dwChannelMask;
        uint32_t dwReserved1;
        uint32_t dwReserved2;
        uint16_t wEncodeOptions;
        uint16_t wReserved3;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct CREATIVEADPCMWAVEFORMAT
    {
        Windows::Win32::Multimedia::WAVEFORMATEX wfx;
        uint16_t wRevision;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct CREATIVEFASTSPEECH8WAVEFORMAT
    {
        Windows::Win32::Multimedia::WAVEFORMATEX wfx;
        uint16_t wRevision;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct CREATIVEFASTSPEECH10WAVEFORMAT
    {
        Windows::Win32::Multimedia::WAVEFORMATEX wfx;
        uint16_t wRevision;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct FMTOWNS_SND_WAVEFORMAT
    {
        Windows::Win32::Multimedia::WAVEFORMATEX wfx;
        uint16_t wRevision;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct OLIGSMWAVEFORMAT
    {
        Windows::Win32::Multimedia::WAVEFORMATEX wfx;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct OLIADPCMWAVEFORMAT
    {
        Windows::Win32::Multimedia::WAVEFORMATEX wfx;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct OLICELPWAVEFORMAT
    {
        Windows::Win32::Multimedia::WAVEFORMATEX wfx;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct OLISBCWAVEFORMAT
    {
        Windows::Win32::Multimedia::WAVEFORMATEX wfx;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct OLIOPRWAVEFORMAT
    {
        Windows::Win32::Multimedia::WAVEFORMATEX wfx;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct CSIMAADPCMWAVEFORMAT
    {
        Windows::Win32::Multimedia::WAVEFORMATEX wfx;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct WAVEFILTER
    {
        uint32_t cbStruct;
        uint32_t dwFilterTag;
        uint32_t fdwFilter;
        uint32_t dwReserved[5];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct VOLUMEWAVEFILTER
    {
        Windows::Win32::Multimedia::WAVEFILTER wfltr;
        uint32_t dwVolume;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct ECHOWAVEFILTER
    {
        Windows::Win32::Multimedia::WAVEFILTER wfltr;
        uint32_t dwVolume;
        uint32_t dwDelay;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct s_RIFFWAVE_inst
    {
        uint8_t bUnshiftedNote;
        int8_t chFineTune;
        int8_t chGain;
        uint8_t bLowNote;
        uint8_t bHighNote;
        uint8_t bLowVelocity;
        uint8_t bHighVelocity;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct tag_s_RIFFWAVE_INST
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct EXBMINFOHEADER
    {
        Windows::Win32::DirectShow::BITMAPINFOHEADER bmi;
        uint32_t biExtDataOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct JPEGINFOHEADER
    {
        uint32_t JPEGSize;
        uint32_t JPEGProcess;
        uint32_t JPEGColorSpaceID;
        uint32_t JPEGBitsPerSample;
        uint32_t JPEGHSubSampling;
        uint32_t JPEGVSubSampling;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MCI_DGV_RECT_PARMS
    {
        size_t dwCallback;
        Windows::Win32::DisplayDevices::RECT rc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MCI_DGV_CAPTURE_PARMSA
    {
        size_t dwCallback;
        int8_t* lpstrFileName;
        Windows::Win32::DisplayDevices::RECT rc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MCI_DGV_CAPTURE_PARMSW
    {
        size_t dwCallback;
        uint16_t* lpstrFileName;
        Windows::Win32::DisplayDevices::RECT rc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MCI_DGV_COPY_PARMS
    {
        size_t dwCallback;
        uint32_t dwFrom;
        uint32_t dwTo;
        Windows::Win32::DisplayDevices::RECT rc;
        uint32_t dwAudioStream;
        uint32_t dwVideoStream;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MCI_DGV_CUE_PARMS
    {
        size_t dwCallback;
        uint32_t dwTo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MCI_DGV_CUT_PARMS
    {
        size_t dwCallback;
        uint32_t dwFrom;
        uint32_t dwTo;
        Windows::Win32::DisplayDevices::RECT rc;
        uint32_t dwAudioStream;
        uint32_t dwVideoStream;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MCI_DGV_DELETE_PARMS
    {
        size_t dwCallback;
        uint32_t dwFrom;
        uint32_t dwTo;
        Windows::Win32::DisplayDevices::RECT rc;
        uint32_t dwAudioStream;
        uint32_t dwVideoStream;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MCI_DGV_INFO_PARMSA
    {
        size_t dwCallback;
        int8_t* lpstrReturn;
        uint32_t dwRetSize;
        uint32_t dwItem;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MCI_DGV_INFO_PARMSW
    {
        size_t dwCallback;
        uint16_t* lpstrReturn;
        uint32_t dwRetSize;
        uint32_t dwItem;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MCI_DGV_LIST_PARMSA
    {
        size_t dwCallback;
        int8_t* lpstrReturn;
        uint32_t dwLength;
        uint32_t dwNumber;
        uint32_t dwItem;
        int8_t* lpstrAlgorithm;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MCI_DGV_LIST_PARMSW
    {
        size_t dwCallback;
        uint16_t* lpstrReturn;
        uint32_t dwLength;
        uint32_t dwNumber;
        uint32_t dwItem;
        uint16_t* lpstrAlgorithm;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MCI_DGV_MONITOR_PARMS
    {
        size_t dwCallback;
        uint32_t dwSource;
        uint32_t dwMethod;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MCI_DGV_OPEN_PARMSA
    {
        size_t dwCallback;
        uint32_t wDeviceID;
        int8_t* lpstrDeviceType;
        int8_t* lpstrElementName;
        int8_t* lpstrAlias;
        uint32_t dwStyle;
        Windows::Win32::WindowsAndMessaging::HWND hWndParent;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MCI_DGV_OPEN_PARMSW
    {
        size_t dwCallback;
        uint32_t wDeviceID;
        uint16_t* lpstrDeviceType;
        uint16_t* lpstrElementName;
        uint16_t* lpstrAlias;
        uint32_t dwStyle;
        Windows::Win32::WindowsAndMessaging::HWND hWndParent;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MCI_DGV_PASTE_PARMS
    {
        size_t dwCallback;
        uint32_t dwTo;
        Windows::Win32::DisplayDevices::RECT rc;
        uint32_t dwAudioStream;
        uint32_t dwVideoStream;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MCI_DGV_QUALITY_PARMSA
    {
        size_t dwCallback;
        uint32_t dwItem;
        int8_t* lpstrName;
        uint32_t lpstrAlgorithm;
        uint32_t dwHandle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MCI_DGV_QUALITY_PARMSW
    {
        size_t dwCallback;
        uint32_t dwItem;
        uint16_t* lpstrName;
        uint32_t lpstrAlgorithm;
        uint32_t dwHandle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MCI_DGV_RECORD_PARMS
    {
        size_t dwCallback;
        uint32_t dwFrom;
        uint32_t dwTo;
        Windows::Win32::DisplayDevices::RECT rc;
        uint32_t dwAudioStream;
        uint32_t dwVideoStream;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MCI_DGV_RESERVE_PARMSA
    {
        size_t dwCallback;
        int8_t* lpstrPath;
        uint32_t dwSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MCI_DGV_RESERVE_PARMSW
    {
        size_t dwCallback;
        uint16_t* lpstrPath;
        uint32_t dwSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MCI_DGV_RESTORE_PARMSA
    {
        size_t dwCallback;
        int8_t* lpstrFileName;
        Windows::Win32::DisplayDevices::RECT rc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MCI_DGV_RESTORE_PARMSW
    {
        size_t dwCallback;
        uint16_t* lpstrFileName;
        Windows::Win32::DisplayDevices::RECT rc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MCI_DGV_SAVE_PARMSA
    {
        size_t dwCallback;
        int8_t* lpstrFileName;
        Windows::Win32::DisplayDevices::RECT rc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MCI_DGV_SAVE_PARMSW
    {
        size_t dwCallback;
        uint16_t* lpstrFileName;
        Windows::Win32::DisplayDevices::RECT rc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MCI_DGV_SET_PARMS
    {
        size_t dwCallback;
        uint32_t dwTimeFormat;
        uint32_t dwAudio;
        uint32_t dwFileFormat;
        uint32_t dwSpeed;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MCI_DGV_SETAUDIO_PARMSA
    {
        size_t dwCallback;
        uint32_t dwItem;
        uint32_t dwValue;
        uint32_t dwOver;
        int8_t* lpstrAlgorithm;
        int8_t* lpstrQuality;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MCI_DGV_SETAUDIO_PARMSW
    {
        size_t dwCallback;
        uint32_t dwItem;
        uint32_t dwValue;
        uint32_t dwOver;
        uint16_t* lpstrAlgorithm;
        uint16_t* lpstrQuality;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MCI_DGV_SIGNAL_PARMS
    {
        size_t dwCallback;
        uint32_t dwPosition;
        uint32_t dwPeriod;
        uint32_t dwUserParm;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MCI_DGV_SETVIDEO_PARMSA
    {
        size_t dwCallback;
        uint32_t dwItem;
        uint32_t dwValue;
        uint32_t dwOver;
        int8_t* lpstrAlgorithm;
        int8_t* lpstrQuality;
        uint32_t dwSourceNumber;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MCI_DGV_SETVIDEO_PARMSW
    {
        size_t dwCallback;
        uint32_t dwItem;
        uint32_t dwValue;
        uint32_t dwOver;
        uint16_t* lpstrAlgorithm;
        uint16_t* lpstrQuality;
        uint32_t dwSourceNumber;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MCI_DGV_STATUS_PARMSA
    {
        size_t dwCallback;
        size_t dwReturn;
        uint32_t dwItem;
        uint32_t dwTrack;
        int8_t* lpstrDrive;
        uint32_t dwReference;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MCI_DGV_STATUS_PARMSW
    {
        size_t dwCallback;
        size_t dwReturn;
        uint32_t dwItem;
        uint32_t dwTrack;
        uint16_t* lpstrDrive;
        uint32_t dwReference;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MCI_DGV_STEP_PARMS
    {
        size_t dwCallback;
        uint32_t dwFrames;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MCI_DGV_UPDATE_PARMS
    {
        size_t dwCallback;
        Windows::Win32::DisplayDevices::RECT rc;
        Windows::Win32::Gdi::HDC hDC;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MCI_DGV_WINDOW_PARMSA
    {
        size_t dwCallback;
        Windows::Win32::WindowsAndMessaging::HWND hWnd;
        uint32_t nCmdShow;
        int8_t* lpstrText;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MCI_DGV_WINDOW_PARMSW
    {
        size_t dwCallback;
        Windows::Win32::WindowsAndMessaging::HWND hWnd;
        uint32_t nCmdShow;
        uint16_t* lpstrText;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct HACMDRIVERID__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct HACMDRIVER__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct HACMSTREAM__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct HACMOBJ__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct tACMDRIVERDETAILSA
    {
        uint32_t cbStruct;
        uint32_t fccType;
        uint32_t fccComp;
        uint16_t wMid;
        uint16_t wPid;
        uint32_t vdwACM;
        uint32_t vdwDriver;
        uint32_t fdwSupport;
        uint32_t cFormatTags;
        uint32_t cFilterTags;
        Windows::Win32::Gdi::HICON hicon;
        int8_t szShortName[32];
        int8_t szLongName[128];
        int8_t szCopyright[80];
        int8_t szLicensing[128];
        int8_t szFeatures[512];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct tACMDRIVERDETAILSW
    {
        uint32_t cbStruct;
        uint32_t fccType;
        uint32_t fccComp;
        uint16_t wMid;
        uint16_t wPid;
        uint32_t vdwACM;
        uint32_t vdwDriver;
        uint32_t fdwSupport;
        uint32_t cFormatTags;
        uint32_t cFilterTags;
        Windows::Win32::Gdi::HICON hicon;
        uint16_t szShortName[32];
        uint16_t szLongName[128];
        uint16_t szCopyright[80];
        uint16_t szLicensing[128];
        uint16_t szFeatures[512];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct tACMFORMATTAGDETAILSA
    {
        uint32_t cbStruct;
        uint32_t dwFormatTagIndex;
        uint32_t dwFormatTag;
        uint32_t cbFormatSize;
        uint32_t fdwSupport;
        uint32_t cStandardFormats;
        int8_t szFormatTag[48];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct tACMFORMATTAGDETAILSW
    {
        uint32_t cbStruct;
        uint32_t dwFormatTagIndex;
        uint32_t dwFormatTag;
        uint32_t cbFormatSize;
        uint32_t fdwSupport;
        uint32_t cStandardFormats;
        uint16_t szFormatTag[48];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct tACMFORMATDETAILSA
    {
        uint32_t cbStruct;
        uint32_t dwFormatIndex;
        uint32_t dwFormatTag;
        uint32_t fdwSupport;
        Windows::Win32::Multimedia::WAVEFORMATEX* pwfx;
        uint32_t cbwfx;
        int8_t szFormat[128];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct tACMFORMATDETAILSW
    {
        uint32_t cbStruct;
        uint32_t dwFormatIndex;
        uint32_t dwFormatTag;
        uint32_t fdwSupport;
        Windows::Win32::Multimedia::WAVEFORMATEX* pwfx;
        uint32_t cbwfx;
        uint16_t szFormat[128];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct tACMFORMATCHOOSEA
    {
        uint32_t cbStruct;
        uint32_t fdwStyle;
        Windows::Win32::WindowsAndMessaging::HWND hwndOwner;
        Windows::Win32::Multimedia::WAVEFORMATEX* pwfx;
        uint32_t cbwfx;
        int8_t* pszTitle;
        int8_t szFormatTag[48];
        int8_t szFormat[128];
        int8_t* pszName;
        uint32_t cchName;
        uint32_t fdwEnum;
        Windows::Win32::Multimedia::WAVEFORMATEX* pwfxEnum;
        Windows::Win32::SystemServices::HINSTANCE hInstance;
        int8_t* pszTemplateName;
        Windows::Win32::WindowsAndMessaging::LPARAM lCustData;
        Windows::Win32::Multimedia::ACMFORMATCHOOSEHOOKPROCA* pfnHook;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct tACMFORMATCHOOSEW
    {
        uint32_t cbStruct;
        uint32_t fdwStyle;
        Windows::Win32::WindowsAndMessaging::HWND hwndOwner;
        Windows::Win32::Multimedia::WAVEFORMATEX* pwfx;
        uint32_t cbwfx;
        uint16_t* pszTitle;
        uint16_t szFormatTag[48];
        uint16_t szFormat[128];
        uint16_t* pszName;
        uint32_t cchName;
        uint32_t fdwEnum;
        Windows::Win32::Multimedia::WAVEFORMATEX* pwfxEnum;
        Windows::Win32::SystemServices::HINSTANCE hInstance;
        uint16_t* pszTemplateName;
        Windows::Win32::WindowsAndMessaging::LPARAM lCustData;
        Windows::Win32::Multimedia::ACMFORMATCHOOSEHOOKPROCW* pfnHook;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct tACMFILTERTAGDETAILSA
    {
        uint32_t cbStruct;
        uint32_t dwFilterTagIndex;
        uint32_t dwFilterTag;
        uint32_t cbFilterSize;
        uint32_t fdwSupport;
        uint32_t cStandardFilters;
        int8_t szFilterTag[48];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct tACMFILTERTAGDETAILSW
    {
        uint32_t cbStruct;
        uint32_t dwFilterTagIndex;
        uint32_t dwFilterTag;
        uint32_t cbFilterSize;
        uint32_t fdwSupport;
        uint32_t cStandardFilters;
        uint16_t szFilterTag[48];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct tACMFILTERDETAILSA
    {
        uint32_t cbStruct;
        uint32_t dwFilterIndex;
        uint32_t dwFilterTag;
        uint32_t fdwSupport;
        Windows::Win32::Multimedia::WAVEFILTER* pwfltr;
        uint32_t cbwfltr;
        int8_t szFilter[128];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct tACMFILTERDETAILSW
    {
        uint32_t cbStruct;
        uint32_t dwFilterIndex;
        uint32_t dwFilterTag;
        uint32_t fdwSupport;
        Windows::Win32::Multimedia::WAVEFILTER* pwfltr;
        uint32_t cbwfltr;
        uint16_t szFilter[128];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct tACMFILTERCHOOSEA
    {
        uint32_t cbStruct;
        uint32_t fdwStyle;
        Windows::Win32::WindowsAndMessaging::HWND hwndOwner;
        Windows::Win32::Multimedia::WAVEFILTER* pwfltr;
        uint32_t cbwfltr;
        int8_t* pszTitle;
        int8_t szFilterTag[48];
        int8_t szFilter[128];
        int8_t* pszName;
        uint32_t cchName;
        uint32_t fdwEnum;
        Windows::Win32::Multimedia::WAVEFILTER* pwfltrEnum;
        Windows::Win32::SystemServices::HINSTANCE hInstance;
        int8_t* pszTemplateName;
        Windows::Win32::WindowsAndMessaging::LPARAM lCustData;
        Windows::Win32::Multimedia::ACMFILTERCHOOSEHOOKPROCA* pfnHook;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct tACMFILTERCHOOSEW
    {
        uint32_t cbStruct;
        uint32_t fdwStyle;
        Windows::Win32::WindowsAndMessaging::HWND hwndOwner;
        Windows::Win32::Multimedia::WAVEFILTER* pwfltr;
        uint32_t cbwfltr;
        uint16_t* pszTitle;
        uint16_t szFilterTag[48];
        uint16_t szFilter[128];
        uint16_t* pszName;
        uint32_t cchName;
        uint32_t fdwEnum;
        Windows::Win32::Multimedia::WAVEFILTER* pwfltrEnum;
        Windows::Win32::SystemServices::HINSTANCE hInstance;
        uint16_t* pszTemplateName;
        Windows::Win32::WindowsAndMessaging::LPARAM lCustData;
        Windows::Win32::Multimedia::ACMFILTERCHOOSEHOOKPROCW* pfnHook;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct ACMSTREAMHEADER
    {
        uint32_t cbStruct;
        uint32_t fdwStatus;
        size_t dwUser;
        uint8_t* pbSrc;
        uint32_t cbSrcLength;
        uint32_t cbSrcLengthUsed;
        size_t dwSrcUser;
        uint8_t* pbDst;
        uint32_t cbDstLength;
        uint32_t cbDstLengthUsed;
        size_t dwDstUser;
        uint32_t dwReservedDriver[10];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct HIC__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct ICOPEN
    {
        uint32_t dwSize;
        uint32_t fccType;
        uint32_t fccHandler;
        uint32_t dwVersion;
        uint32_t dwFlags;
        Windows::Win32::SystemServices::LRESULT dwError;
        void* pV1Reserved;
        void* pV2Reserved;
        uint32_t dnDevNode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct ICINFO
    {
        uint32_t dwSize;
        uint32_t fccType;
        uint32_t fccHandler;
        uint32_t dwFlags;
        uint32_t dwVersion;
        uint32_t dwVersionICM;
        uint16_t szName[16];
        uint16_t szDescription[128];
        uint16_t szDriver[128];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct ICCOMPRESS
    {
        uint32_t dwFlags;
        Windows::Win32::DirectShow::BITMAPINFOHEADER* lpbiOutput;
        void* lpOutput;
        Windows::Win32::DirectShow::BITMAPINFOHEADER* lpbiInput;
        void* lpInput;
        uint32_t* lpckid;
        uint32_t* lpdwFlags;
        int32_t lFrameNum;
        uint32_t dwFrameSize;
        uint32_t dwQuality;
        Windows::Win32::DirectShow::BITMAPINFOHEADER* lpbiPrev;
        void* lpPrev;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct ICCOMPRESSFRAMES
    {
        uint32_t dwFlags;
        Windows::Win32::DirectShow::BITMAPINFOHEADER* lpbiOutput;
        Windows::Win32::WindowsAndMessaging::LPARAM lOutput;
        Windows::Win32::DirectShow::BITMAPINFOHEADER* lpbiInput;
        Windows::Win32::WindowsAndMessaging::LPARAM lInput;
        int32_t lStartFrame;
        int32_t lFrameCount;
        int32_t lQuality;
        int32_t lDataRate;
        int32_t lKeyRate;
        uint32_t dwRate;
        uint32_t dwScale;
        uint32_t dwOverheadPerFrame;
        uint32_t dwReserved2;
        intptr_t GetData;
        intptr_t PutData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct ICSETSTATUSPROC
    {
        uint32_t dwFlags;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
        intptr_t Status;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct ICDECOMPRESS
    {
        uint32_t dwFlags;
        Windows::Win32::DirectShow::BITMAPINFOHEADER* lpbiInput;
        void* lpInput;
        Windows::Win32::DirectShow::BITMAPINFOHEADER* lpbiOutput;
        void* lpOutput;
        uint32_t ckid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct ICDECOMPRESSEX
    {
        uint32_t dwFlags;
        Windows::Win32::DirectShow::BITMAPINFOHEADER* lpbiSrc;
        void* lpSrc;
        Windows::Win32::DirectShow::BITMAPINFOHEADER* lpbiDst;
        void* lpDst;
        int32_t xDst;
        int32_t yDst;
        int32_t dxDst;
        int32_t dyDst;
        int32_t xSrc;
        int32_t ySrc;
        int32_t dxSrc;
        int32_t dySrc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct ICDRAWBEGIN
    {
        uint32_t dwFlags;
        Windows::Win32::Gdi::HPALETTE hpal;
        Windows::Win32::WindowsAndMessaging::HWND hwnd;
        Windows::Win32::Gdi::HDC hdc;
        int32_t xDst;
        int32_t yDst;
        int32_t dxDst;
        int32_t dyDst;
        Windows::Win32::DirectShow::BITMAPINFOHEADER* lpbi;
        int32_t xSrc;
        int32_t ySrc;
        int32_t dxSrc;
        int32_t dySrc;
        uint32_t dwRate;
        uint32_t dwScale;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct ICDRAW
    {
        uint32_t dwFlags;
        void* lpFormat;
        void* lpData;
        uint32_t cbData;
        int32_t lTime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct ICDRAWSUGGEST
    {
        Windows::Win32::DirectShow::BITMAPINFOHEADER* lpbiIn;
        Windows::Win32::DirectShow::BITMAPINFOHEADER* lpbiSuggest;
        int32_t dxSrc;
        int32_t dySrc;
        int32_t dxDst;
        int32_t dyDst;
        Windows::Win32::Multimedia::HIC__* hicDecompressor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct ICPALETTE
    {
        uint32_t dwFlags;
        int32_t iStart;
        int32_t iLen;
        Windows::Win32::Direct2D::PALETTEENTRY* lppe;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct COMPVARS
    {
        int32_t cbSize;
        uint32_t dwFlags;
        Windows::Win32::Multimedia::HIC__* hic;
        uint32_t fccType;
        uint32_t fccHandler;
        Windows::Win32::Gdi::BITMAPINFO* lpbiIn;
        Windows::Win32::Gdi::BITMAPINFO* lpbiOut;
        void* lpBitsOut;
        void* lpBitsPrev;
        int32_t lFrame;
        int32_t lKey;
        int32_t lDataRate;
        int32_t lQ;
        int32_t lKeyCount;
        void* lpState;
        int32_t cbState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct DRAWDIBTIME
    {
        int32_t timeCount;
        int32_t timeDraw;
        int32_t timeDecompress;
        int32_t timeDither;
        int32_t timeStretch;
        int32_t timeBlt;
        int32_t timeSetDIBits;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct AVISTREAMINFOW
    {
        uint32_t fccType;
        uint32_t fccHandler;
        uint32_t dwFlags;
        uint32_t dwCaps;
        uint16_t wPriority;
        uint16_t wLanguage;
        uint32_t dwScale;
        uint32_t dwRate;
        uint32_t dwStart;
        uint32_t dwLength;
        uint32_t dwInitialFrames;
        uint32_t dwSuggestedBufferSize;
        uint32_t dwQuality;
        uint32_t dwSampleSize;
        Windows::Win32::DisplayDevices::RECT rcFrame;
        uint32_t dwEditCount;
        uint32_t dwFormatChangeCount;
        uint16_t szName[64];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct AVISTREAMINFOA
    {
        uint32_t fccType;
        uint32_t fccHandler;
        uint32_t dwFlags;
        uint32_t dwCaps;
        uint16_t wPriority;
        uint16_t wLanguage;
        uint32_t dwScale;
        uint32_t dwRate;
        uint32_t dwStart;
        uint32_t dwLength;
        uint32_t dwInitialFrames;
        uint32_t dwSuggestedBufferSize;
        uint32_t dwQuality;
        uint32_t dwSampleSize;
        Windows::Win32::DisplayDevices::RECT rcFrame;
        uint32_t dwEditCount;
        uint32_t dwFormatChangeCount;
        int8_t szName[64];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct AVIFILEINFOW
    {
        uint32_t dwMaxBytesPerSec;
        uint32_t dwFlags;
        uint32_t dwCaps;
        uint32_t dwStreams;
        uint32_t dwSuggestedBufferSize;
        uint32_t dwWidth;
        uint32_t dwHeight;
        uint32_t dwScale;
        uint32_t dwRate;
        uint32_t dwLength;
        uint32_t dwEditCount;
        uint16_t szFileType[64];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct AVIFILEINFOA
    {
        uint32_t dwMaxBytesPerSec;
        uint32_t dwFlags;
        uint32_t dwCaps;
        uint32_t dwStreams;
        uint32_t dwSuggestedBufferSize;
        uint32_t dwWidth;
        uint32_t dwHeight;
        uint32_t dwScale;
        uint32_t dwRate;
        uint32_t dwLength;
        uint32_t dwEditCount;
        int8_t szFileType[64];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct AVICOMPRESSOPTIONS
    {
        uint32_t fccType;
        uint32_t fccHandler;
        uint32_t dwKeyFrameEvery;
        uint32_t dwQuality;
        uint32_t dwBytesPerSecond;
        uint32_t dwFlags;
        void* lpFormat;
        uint32_t cbFormat;
        void* lpParms;
        uint32_t cbParms;
        uint32_t dwInterleaveEvery;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct HVIDEO__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct VIDEOHDR
    {
        uint8_t* lpData;
        uint32_t dwBufferLength;
        uint32_t dwBytesUsed;
        uint32_t dwTimeCaptured;
        size_t dwUser;
        uint32_t dwFlags;
        size_t dwReserved[4];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct channel_caps_tag
    {
        uint32_t dwFlags;
        uint32_t dwSrcRectXMod;
        uint32_t dwSrcRectYMod;
        uint32_t dwSrcRectWidthMod;
        uint32_t dwSrcRectHeightMod;
        uint32_t dwDstRectXMod;
        uint32_t dwDstRectYMod;
        uint32_t dwDstRectWidthMod;
        uint32_t dwDstRectHeightMod;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct CAPDRIVERCAPS
    {
        uint32_t wDeviceIndex;
        Windows::Win32::SystemServices::BOOL fHasOverlay;
        Windows::Win32::SystemServices::BOOL fHasDlgVideoSource;
        Windows::Win32::SystemServices::BOOL fHasDlgVideoFormat;
        Windows::Win32::SystemServices::BOOL fHasDlgVideoDisplay;
        Windows::Win32::SystemServices::BOOL fCaptureInitialized;
        Windows::Win32::SystemServices::BOOL fDriverSuppliesPalettes;
        Windows::Win32::SystemServices::HANDLE hVideoIn;
        Windows::Win32::SystemServices::HANDLE hVideoOut;
        Windows::Win32::SystemServices::HANDLE hVideoExtIn;
        Windows::Win32::SystemServices::HANDLE hVideoExtOut;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct CAPSTATUS
    {
        uint32_t uiImageWidth;
        uint32_t uiImageHeight;
        Windows::Win32::SystemServices::BOOL fLiveWindow;
        Windows::Win32::SystemServices::BOOL fOverlayWindow;
        Windows::Win32::SystemServices::BOOL fScale;
        Windows::Win32::DisplayDevices::POINT ptScroll;
        Windows::Win32::SystemServices::BOOL fUsingDefaultPalette;
        Windows::Win32::SystemServices::BOOL fAudioHardware;
        Windows::Win32::SystemServices::BOOL fCapFileExists;
        uint32_t dwCurrentVideoFrame;
        uint32_t dwCurrentVideoFramesDropped;
        uint32_t dwCurrentWaveSamples;
        uint32_t dwCurrentTimeElapsedMS;
        Windows::Win32::Gdi::HPALETTE hPalCurrent;
        Windows::Win32::SystemServices::BOOL fCapturingNow;
        uint32_t dwReturn;
        uint32_t wNumVideoAllocated;
        uint32_t wNumAudioAllocated;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct CAPTUREPARMS
    {
        uint32_t dwRequestMicroSecPerFrame;
        Windows::Win32::SystemServices::BOOL fMakeUserHitOKToCapture;
        uint32_t wPercentDropForError;
        Windows::Win32::SystemServices::BOOL fYield;
        uint32_t dwIndexSize;
        uint32_t wChunkGranularity;
        Windows::Win32::SystemServices::BOOL fUsingDOSMemory;
        uint32_t wNumVideoRequested;
        Windows::Win32::SystemServices::BOOL fCaptureAudio;
        uint32_t wNumAudioRequested;
        uint32_t vKeyAbort;
        Windows::Win32::SystemServices::BOOL fAbortLeftMouse;
        Windows::Win32::SystemServices::BOOL fAbortRightMouse;
        Windows::Win32::SystemServices::BOOL fLimitEnabled;
        uint32_t wTimeLimit;
        Windows::Win32::SystemServices::BOOL fMCIControl;
        Windows::Win32::SystemServices::BOOL fStepMCIDevice;
        uint32_t dwMCIStartTime;
        uint32_t dwMCIStopTime;
        Windows::Win32::SystemServices::BOOL fStepCaptureAt2x;
        uint32_t wStepCaptureAverageFrames;
        uint32_t dwAudioBufferSize;
        Windows::Win32::SystemServices::BOOL fDisableWriteCache;
        uint32_t AVStreamMaster;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct CAPINFOCHUNK
    {
        uint32_t fccInfoID;
        void* lpData;
        int32_t cbData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct DRVM_IOCTL_DATA
    {
        uint32_t dwSize;
        uint32_t dwCmd;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct waveopendesc_tag
    {
        intptr_t hWave;
        Windows::Win32::Multimedia::WAVEFORMAT* lpFormat;
        size_t dwCallback;
        size_t dwInstance;
        uint32_t uMappedDeviceID;
        size_t dnDevNode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct midiopenstrmid_tag
    {
        uint32_t dwStreamID;
        uint32_t uDeviceID;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct tMIXEROPENDESC
    {
        intptr_t hmx;
        void* pReserved0;
        size_t dwCallback;
        size_t dwInstance;
        size_t dnDevNode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct timerevent_tag
    {
        uint16_t wDelay;
        uint16_t wResolution;
        Windows::Win32::SystemServices::LPTIMECALLBACK* lpFunction;
        uint32_t dwUser;
        uint16_t wFlags;
        uint16_t wReserved1;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct joycalibrate_tag
    {
        uint16_t wXbase;
        uint16_t wXdelta;
        uint16_t wYbase;
        uint16_t wYdelta;
        uint16_t wZbase;
        uint16_t wZdelta;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Multimedia
{
    struct MCI_OPEN_DRIVER_PARMS
    {
        uint32_t wDeviceID;
        uint16_t* lpstrParams;
        uint32_t wCustomCommandTable;
        uint32_t wType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct VIDEOPARAMETERS
    {
        ::win32::guid Guid;
        uint32_t dwOffset;
        uint32_t dwCommand;
        uint32_t dwFlags;
        uint32_t dwMode;
        uint32_t dwTVStandard;
        uint32_t dwAvailableModes;
        uint32_t dwAvailableTVStandard;
        uint32_t dwFlickerFilter;
        uint32_t dwOverScanX;
        uint32_t dwOverScanY;
        uint32_t dwMaxUnscaledX;
        uint32_t dwMaxUnscaledY;
        uint32_t dwPositionX;
        uint32_t dwPositionY;
        uint32_t dwBrightness;
        uint32_t dwContrast;
        uint32_t dwCPType;
        uint32_t dwCPCommand;
        uint32_t dwCPStandard;
        uint32_t dwCPKey;
        uint32_t bCP_APSTriggerBits;
        uint8_t bOEMCopyProtection[256];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct MPEG1WAVEFORMAT
    {
        Windows::Win32::Multimedia::WAVEFORMATEX wfx;
        uint16_t fwHeadLayer;
        uint32_t dwHeadBitrate;
        uint16_t fwHeadMode;
        uint16_t fwHeadModeExt;
        uint16_t wHeadEmphasis;
        uint16_t fwHeadFlags;
        uint32_t dwPTSLow;
        uint32_t dwPTSHigh;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct MPEGLAYER3WAVEFORMAT
    {
        Windows::Win32::Multimedia::WAVEFORMATEX wfx;
        uint16_t wID;
        uint32_t fdwFlags;
        uint16_t nBlockSize;
        uint16_t nFramesPerBlock;
        uint16_t nCodecDelay;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct HEAACWAVEINFO
    {
        Windows::Win32::Multimedia::WAVEFORMATEX wfx;
        uint16_t wPayloadType;
        uint16_t wAudioProfileLevelIndication;
        uint16_t wStructType;
        uint16_t wReserved1;
        uint32_t dwReserved2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct HEAACWAVEFORMAT
    {
        Windows::Win32::DirectShow::HEAACWAVEINFO wfInfo;
        uint8_t pbAudioSpecificConfig[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct MDEVICECAPSEX
    {
        uint32_t cbSize;
        void* pCaps;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Audio
{
    struct MIDIOPENDESC
    {
        intptr_t hMidi;
        size_t dwCallback;
        size_t dwInstance;
        size_t dnDevNode;
        uint32_t cIds;
        Windows::Win32::Multimedia::midiopenstrmid_tag rgIds[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Search
{
    struct TEXT_SOURCE
    {
        Windows::Win32::Search::PFNFILLTEXTBUFFER* pfnFillTextBuffer;
        uint16_t* awcBuffer;
        uint32_t iEnd;
        uint32_t iCur;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Search
{
    struct FILTERED_DATA_SOURCES
    {
        uint16_t* pwcsExtension;
        uint16_t* pwcsMime;
        ::win32::guid* pClsid;
        uint16_t* pwcsOverride;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Search
{
    struct IRowsetExactScroll
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Search
{
    struct DB_NUMERIC
    {
        uint8_t precision;
        uint8_t scale;
        uint8_t sign;
        uint8_t val[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Search
{
    struct DBVECTOR
    {
        uint32_t size;
        void* ptr;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Search
{
    struct DBDATE
    {
        int16_t year;
        uint16_t month;
        uint16_t day;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Search
{
    struct DBTIME
    {
        uint16_t hour;
        uint16_t minute;
        uint16_t second;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Search
{
    struct DBTIMESTAMP
    {
        int16_t year;
        uint16_t month;
        uint16_t day;
        uint16_t hour;
        uint16_t minute;
        uint16_t second;
        uint32_t fraction;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Search
{
    struct DB_VARNUMERIC
    {
        uint8_t precision;
        int8_t scale;
        uint8_t sign;
        uint8_t val[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IndexServer
{
    struct DBID
    {
        union _uGuid_e__Union
        {
            ::win32::guid guid;
            ::win32::guid* pguid;
        };
        union _uName_e__Union
        {
            uint16_t* pwszName;
            uint32_t ulPropid;
        };
        _uGuid_e__Union uGuid;
        uint32_t eKind;
        _uName_e__Union uName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Search
{
    struct SEC_OBJECT_ELEMENT
    {
        ::win32::guid guidObjectType;
        Windows::Win32::IndexServer::DBID ObjectID;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Search
{
    struct SEC_OBJECT
    {
        uint32_t cObjects;
        Windows::Win32::Search::SEC_OBJECT_ELEMENT* prgObjects;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Search
{
    struct DBIMPLICITSESSION
    {
        Windows::Win32::Com::IUnknown* pUnkOuter;
        ::win32::guid* piid;
        Windows::Win32::Com::IUnknown* pSession;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Search
{
    struct DBOBJECT
    {
        uint32_t dwFlags;
        ::win32::guid iid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Search
{
    struct DBBINDEXT
    {
        uint8_t* pExtension;
        uint32_t ulExtension;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Search
{
    struct DBBINDING
    {
        uint32_t iOrdinal;
        uint32_t obValue;
        uint32_t obLength;
        uint32_t obStatus;
        Windows::Win32::Automation::ITypeInfo* pTypeInfo;
        Windows::Win32::Search::DBOBJECT* pObject;
        Windows::Win32::Search::DBBINDEXT* pBindExt;
        uint32_t dwPart;
        uint32_t dwMemOwner;
        uint32_t eParamIO;
        uint32_t cbMaxLen;
        uint32_t dwFlags;
        uint16_t wType;
        uint8_t bPrecision;
        uint8_t bScale;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Search
{
    struct DBFAILUREINFO
    {
        size_t hRow;
        uint32_t iColumn;
        int32_t failure;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Search
{
    struct DBCOLUMNINFO
    {
        uint16_t* pwszName;
        Windows::Win32::Automation::ITypeInfo* pTypeInfo;
        uint32_t iOrdinal;
        uint32_t dwFlags;
        uint32_t ulColumnSize;
        uint16_t wType;
        uint8_t bPrecision;
        uint8_t bScale;
        Windows::Win32::IndexServer::DBID columnid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Search
{
    struct DBPARAMS
    {
        void* pData;
        uint32_t cParamSets;
        size_t hAccessor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Search
{
    struct DBPARAMINFO
    {
        uint32_t dwFlags;
        uint32_t iOrdinal;
        uint16_t* pwszName;
        Windows::Win32::Automation::ITypeInfo* pTypeInfo;
        uint32_t ulParamSize;
        uint16_t wType;
        uint8_t bPrecision;
        uint8_t bScale;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Search
{
    struct DBPROPIDSET
    {
        uint32_t* rgPropertyIDs;
        uint32_t cPropertyIDs;
        ::win32::guid guidPropertySet;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Search
{
    struct DBPROPINFO
    {
        uint16_t* pwszDescription;
        uint32_t dwPropertyID;
        uint32_t dwFlags;
        uint16_t vtType;
        Windows::Win32::Automation::VARIANT vValues;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Search
{
    struct DBPROPINFOSET
    {
        Windows::Win32::Search::DBPROPINFO* rgPropertyInfos;
        uint32_t cPropertyInfos;
        ::win32::guid guidPropertySet;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Search
{
    struct DBPROP
    {
        uint32_t dwPropertyID;
        uint32_t dwOptions;
        uint32_t dwStatus;
        Windows::Win32::IndexServer::DBID colid;
        Windows::Win32::Automation::VARIANT vValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Search
{
    struct DBPROPSET
    {
        Windows::Win32::Search::DBPROP* rgProperties;
        uint32_t cProperties;
        ::win32::guid guidPropertySet;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Search
{
    struct DBINDEXCOLUMNDESC
    {
        Windows::Win32::IndexServer::DBID* pColumnID;
        uint32_t eIndexColOrder;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Search
{
    struct DBCOLUMNDESC
    {
        uint16_t* pwszTypeName;
        Windows::Win32::Automation::ITypeInfo* pTypeInfo;
        Windows::Win32::Search::DBPROPSET* rgPropertySets;
        ::win32::guid* pclsid;
        uint32_t cPropertySets;
        uint32_t ulColumnSize;
        Windows::Win32::IndexServer::DBID dbcid;
        uint16_t wType;
        uint8_t bPrecision;
        uint8_t bScale;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Search
{
    struct DBCOLUMNACCESS
    {
        void* pData;
        Windows::Win32::IndexServer::DBID columnid;
        uint32_t cbDataLen;
        uint32_t dwStatus;
        uint32_t cbMaxLen;
        uint32_t dwReserved;
        uint16_t wType;
        uint8_t bPrecision;
        uint8_t bScale;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Search
{
    struct DBCONSTRAINTDESC
    {
        Windows::Win32::IndexServer::DBID* pConstraintID;
        uint32_t ConstraintType;
        uint32_t cColumns;
        Windows::Win32::IndexServer::DBID* rgColumnList;
        Windows::Win32::IndexServer::DBID* pReferencedTableID;
        uint32_t cForeignKeyColumns;
        Windows::Win32::IndexServer::DBID* rgForeignKeyColumnList;
        uint16_t* pwszConstraintText;
        uint32_t UpdateRule;
        uint32_t DeleteRule;
        uint32_t MatchType;
        uint32_t Deferrability;
        uint32_t cReserved;
        Windows::Win32::Search::DBPROPSET* rgReserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Search
{
    struct MDAXISINFO
    {
        uint32_t cbSize;
        uint32_t iAxis;
        uint32_t cDimensions;
        uint32_t cCoordinates;
        uint32_t* rgcColumns;
        uint16_t** rgpwszDimensionNames;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Search
{
    struct RMTPACK
    {
        Windows::Win32::StructuredStorage::ISequentialStream* pISeqStream;
        uint32_t cbData;
        uint32_t cBSTR;
        Windows::Win32::Automation::BSTR* rgBSTR;
        uint32_t cVARIANT;
        Windows::Win32::Automation::VARIANT* rgVARIANT;
        uint32_t cIDISPATCH;
        Windows::Win32::Automation::IDispatch** rgIDISPATCH;
        uint32_t cIUNKNOWN;
        Windows::Win32::Com::IUnknown** rgIUNKNOWN;
        uint32_t cPROPVARIANT;
        Windows::Win32::StructuredStorage::PROPVARIANT* rgPROPVARIANT;
        uint32_t cArray;
        Windows::Win32::Automation::VARIANT* rgArray;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Search
{
    struct DBPARAMBINDINFO
    {
        uint16_t* pwszDataSourceType;
        uint16_t* pwszName;
        uint32_t ulParamSize;
        uint32_t dwFlags;
        uint8_t bPrecision;
        uint8_t bScale;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Search
{
    struct DBLITERALINFO
    {
        uint16_t* pwszLiteralValue;
        uint16_t* pwszInvalidChars;
        uint16_t* pwszInvalidStartingChars;
        uint32_t lt;
        Windows::Win32::SystemServices::BOOL fSupported;
        uint32_t cchMaxLen;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Search
{
    struct ERRORINFO
    {
        int32_t hrError;
        uint32_t dwMinor;
        ::win32::guid clsid;
        ::win32::guid iid;
        int32_t dispid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Search
{
    struct HITRANGE
    {
        uint32_t iPosition;
        uint32_t cLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Search
{
    struct TIMEOUT_INFO
    {
        uint32_t dwSize;
        uint32_t dwConnectTimeout;
        uint32_t dwDataTimeout;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Search
{
    struct PROXY_INFO
    {
        uint32_t dwSize;
        uint16_t* pcwszUserAgent;
        Windows::Win32::Search::PROXY_ACCESS paUseProxy;
        Windows::Win32::SystemServices::BOOL fLocalBypass;
        uint32_t dwPortNumber;
        uint16_t* pcwszProxyName;
        uint16_t* pcwszBypassList;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Search
{
    struct AUTHENTICATION_INFO
    {
        uint32_t dwSize;
        Windows::Win32::Search::AUTH_TYPE atAuthenticationType;
        uint16_t* pcwszUser;
        uint16_t* pcwszPassword;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Search
{
    struct INCREMENTAL_ACCESS_INFO
    {
        uint32_t dwSize;
        Windows::Win32::WindowsProgramming::FILETIME ftLastModifiedTime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Search
{
    struct ITEM_INFO
    {
        uint32_t dwSize;
        uint16_t* pcwszFromEMail;
        uint16_t* pcwszApplicationName;
        uint16_t* pcwszCatalogName;
        uint16_t* pcwszContentClass;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Search
{
    struct SEARCH_ITEM_CHANGE
    {
        Windows::Win32::Search::SEARCH_KIND_OF_CHANGE Change;
        Windows::Win32::Search::SEARCH_NOTIFICATION_PRIORITY Priority;
        Windows::Win32::WinSock::BLOB* pUserData;
        uint16_t* lpwszURL;
        uint16_t* lpwszOldURL;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Search
{
    struct SEARCH_ITEM_PERSISTENT_CHANGE
    {
        Windows::Win32::Search::SEARCH_KIND_OF_CHANGE Change;
        uint16_t* URL;
        uint16_t* OldURL;
        Windows::Win32::Search::SEARCH_NOTIFICATION_PRIORITY Priority;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Search
{
    struct SEARCH_ITEM_INDEXING_STATUS
    {
        uint32_t dwDocID;
        int32_t hrIndexingStatus;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct CAC
    {
        uint32_t cElems;
        int8_t* pElems;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct CAUB
    {
        uint32_t cElems;
        uint8_t* pElems;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct CAI
    {
        uint32_t cElems;
        int16_t* pElems;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct CAUI
    {
        uint32_t cElems;
        uint16_t* pElems;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct CAL
    {
        uint32_t cElems;
        int32_t* pElems;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct CAUL
    {
        uint32_t cElems;
        uint32_t* pElems;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct CAH
    {
        uint32_t cElems;
        Windows::Win32::SystemServices::LARGE_INTEGER* pElems;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct CAUH
    {
        uint32_t cElems;
        Windows::Win32::SystemServices::ULARGE_INTEGER* pElems;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct CAFLT
    {
        uint32_t cElems;
        float* pElems;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct CADBL
    {
        uint32_t cElems;
        double* pElems;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct CABOOL
    {
        uint32_t cElems;
        int16_t* pElems;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct CASCODE
    {
        uint32_t cElems;
        int32_t* pElems;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct CACY
    {
        uint32_t cElems;
        Windows::Win32::SystemServices::CY* pElems;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct CADATE
    {
        uint32_t cElems;
        double* pElems;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct CAFILETIME
    {
        uint32_t cElems;
        Windows::Win32::WindowsProgramming::FILETIME* pElems;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct CACLSID
    {
        uint32_t cElems;
        ::win32::guid* pElems;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct CACLIPDATA
    {
        uint32_t cElems;
        Windows::Win32::SystemServices::CLIPDATA* pElems;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct CABSTR
    {
        uint32_t cElems;
        Windows::Win32::Automation::BSTR* pElems;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct CABSTRBLOB
    {
        uint32_t cElems;
        Windows::Win32::SystemServices::BSTRBLOB* pElems;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct CALPSTR
    {
        uint32_t cElems;
        int8_t** pElems;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct CALPWSTR
    {
        uint32_t cElems;
        uint16_t** pElems;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct CAPROPVARIANT
    {
        uint32_t cElems;
        Windows::Win32::StructuredStorage::PROPVARIANT* pElems;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct PROPVARIANT
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                union _Anonymous_e__Union
                {
                    int8_t cVal;
                    uint8_t bVal;
                    int16_t iVal;
                    uint16_t uiVal;
                    int32_t lVal;
                    uint32_t ulVal;
                    int32_t intVal;
                    uint32_t uintVal;
                    Windows::Win32::SystemServices::LARGE_INTEGER hVal;
                    Windows::Win32::SystemServices::ULARGE_INTEGER uhVal;
                    float fltVal;
                    double dblVal;
                    int16_t boolVal;
                    int16_t __OBSOLETE__VARIANT_BOOL;
                    int32_t scode;
                    Windows::Win32::SystemServices::CY cyVal;
                    double date;
                    Windows::Win32::WindowsProgramming::FILETIME filetime;
                    ::win32::guid* puuid;
                    Windows::Win32::SystemServices::CLIPDATA* pclipdata;
                    Windows::Win32::Automation::BSTR bstrVal;
                    Windows::Win32::SystemServices::BSTRBLOB bstrblobVal;
                    Windows::Win32::WinSock::BLOB blob;
                    int8_t* pszVal;
                    uint16_t* pwszVal;
                    Windows::Win32::Com::IUnknown* punkVal;
                    Windows::Win32::Automation::IDispatch* pdispVal;
                    Windows::Win32::StructuredStorage::IStream* pStream;
                    Windows::Win32::StructuredStorage::IStorage* pStorage;
                    Windows::Win32::StructuredStorage::VERSIONEDSTREAM* pVersionedStream;
                    Windows::Win32::Automation::SAFEARRAY* parray;
                    Windows::Win32::StructuredStorage::CAC cac;
                    Windows::Win32::StructuredStorage::CAUB caub;
                    Windows::Win32::StructuredStorage::CAI cai;
                    Windows::Win32::StructuredStorage::CAUI caui;
                    Windows::Win32::StructuredStorage::CAL cal;
                    Windows::Win32::StructuredStorage::CAUL caul;
                    Windows::Win32::StructuredStorage::CAH cah;
                    Windows::Win32::StructuredStorage::CAUH cauh;
                    Windows::Win32::StructuredStorage::CAFLT caflt;
                    Windows::Win32::StructuredStorage::CADBL cadbl;
                    Windows::Win32::StructuredStorage::CABOOL cabool;
                    Windows::Win32::StructuredStorage::CASCODE cascode;
                    Windows::Win32::StructuredStorage::CACY cacy;
                    Windows::Win32::StructuredStorage::CADATE cadate;
                    Windows::Win32::StructuredStorage::CAFILETIME cafiletime;
                    Windows::Win32::StructuredStorage::CACLSID cauuid;
                    Windows::Win32::StructuredStorage::CACLIPDATA caclipdata;
                    Windows::Win32::StructuredStorage::CABSTR cabstr;
                    Windows::Win32::StructuredStorage::CABSTRBLOB cabstrblob;
                    Windows::Win32::StructuredStorage::CALPSTR calpstr;
                    Windows::Win32::StructuredStorage::CALPWSTR calpwstr;
                    Windows::Win32::StructuredStorage::CAPROPVARIANT capropvar;
                    int8_t* pcVal;
                    uint8_t* pbVal;
                    int16_t* piVal;
                    uint16_t* puiVal;
                    int32_t* plVal;
                    uint32_t* pulVal;
                    int32_t* pintVal;
                    uint32_t* puintVal;
                    float* pfltVal;
                    double* pdblVal;
                    int16_t* pboolVal;
                    Windows::Win32::SystemServices::DECIMAL* pdecVal;
                    int32_t* pscode;
                    Windows::Win32::SystemServices::CY* pcyVal;
                    double* pdate;
                    Windows::Win32::Automation::BSTR* pbstrVal;
                    Windows::Win32::Com::IUnknown** ppunkVal;
                    Windows::Win32::Automation::IDispatch** ppdispVal;
                    Windows::Win32::Automation::SAFEARRAY** pparray;
                    Windows::Win32::StructuredStorage::PROPVARIANT* pvarVal;
                };
                uint16_t vt;
                uint16_t wReserved1;
                uint16_t wReserved2;
                uint16_t wReserved3;
                _Anonymous_e__Union Anonymous;
            };
            _Anonymous_e__Struct Anonymous;
            Windows::Win32::SystemServices::DECIMAL decVal;
        };
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Search
{
    struct SEARCH_COLUMN_PROPERTIES
    {
        Windows::Win32::StructuredStorage::PROPVARIANT Value;
        uint32_t lcid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Search
{
    struct ITEMPROP
    {
        Windows::Win32::Automation::VARIANT variantValue;
        uint16_t* pwszName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Search
{
    struct SUBSCRIPTIONITEMINFO
    {
        uint32_t cbSize;
        uint32_t dwFlags;
        uint32_t dwPriority;
        ::win32::guid ScheduleGroup;
        ::win32::guid clsidAgent;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Search
{
    struct _tagSubscriptionInfo
    {
        uint32_t cbSize;
        uint32_t fUpdateFlags;
        Windows::Win32::Search::SUBSCRIPTIONSCHEDULE schedule;
        ::win32::guid customGroupCookie;
        void* pTrigger;
        uint32_t dwRecurseLevels;
        uint32_t fWebcrawlerFlags;
        Windows::Win32::SystemServices::BOOL bMailNotification;
        Windows::Win32::SystemServices::BOOL bGleam;
        Windows::Win32::SystemServices::BOOL bChangesOnly;
        Windows::Win32::SystemServices::BOOL bNeedPassword;
        uint32_t fChannelFlags;
        Windows::Win32::Automation::BSTR bstrUserName;
        Windows::Win32::Automation::BSTR bstrPassword;
        Windows::Win32::Automation::BSTR bstrFriendlyName;
        uint32_t dwMaxSizeKB;
        Windows::Win32::Search::SUBSCRIPTIONTYPE subType;
        uint32_t fTaskFlags;
        uint32_t dwReserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsBiometricFramework
{
    struct WINBIO_VERSION
    {
        uint32_t MajorVersion;
        uint32_t MinorVersion;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsBiometricFramework
{
    struct WINBIO_IDENTITY
    {
        union _Value_e__Union
        {
            struct _AccountSid_e__Struct
            {
                uint32_t Size;
                uint8_t Data[68];
            };
            uint32_t Null;
            uint32_t Wildcard;
            ::win32::guid TemplateGuid;
            _AccountSid_e__Struct AccountSid;
            uint8_t SecureId[32];
        };
        uint32_t Type;
        _Value_e__Union Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsBiometricFramework
{
    struct WINBIO_SECURE_CONNECTION_PARAMS
    {
        uint32_t PayloadSize;
        uint16_t Version;
        uint16_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsBiometricFramework
{
    struct WINBIO_SECURE_CONNECTION_DATA
    {
        uint32_t Size;
        uint16_t Version;
        uint16_t Flags;
        uint32_t ModelCertificateSize;
        uint32_t IntermediateCA1Size;
        uint32_t IntermediateCA2Size;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsBiometricFramework
{
    struct WINBIO_BIR_DATA
    {
        uint32_t Size;
        uint32_t Offset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsBiometricFramework
{
    struct WINBIO_BIR
    {
        Windows::Win32::WindowsBiometricFramework::WINBIO_BIR_DATA HeaderBlock;
        Windows::Win32::WindowsBiometricFramework::WINBIO_BIR_DATA StandardDataBlock;
        Windows::Win32::WindowsBiometricFramework::WINBIO_BIR_DATA VendorDataBlock;
        Windows::Win32::WindowsBiometricFramework::WINBIO_BIR_DATA SignatureBlock;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsBiometricFramework
{
    struct WINBIO_REGISTERED_FORMAT
    {
        uint16_t Owner;
        uint16_t Type;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsBiometricFramework
{
    struct WINBIO_BIR_HEADER
    {
        struct _ValidityPeriod_e__Struct
        {
            Windows::Win32::SystemServices::LARGE_INTEGER BeginDate;
            Windows::Win32::SystemServices::LARGE_INTEGER EndDate;
        };
        uint16_t ValidFields;
        uint8_t HeaderVersion;
        uint8_t PatronHeaderVersion;
        uint8_t DataFlags;
        uint32_t Type;
        uint8_t Subtype;
        uint8_t Purpose;
        int8_t DataQuality;
        Windows::Win32::SystemServices::LARGE_INTEGER CreationDate;
        _ValidityPeriod_e__Struct ValidityPeriod;
        Windows::Win32::WindowsBiometricFramework::WINBIO_REGISTERED_FORMAT BiometricDataFormat;
        Windows::Win32::WindowsBiometricFramework::WINBIO_REGISTERED_FORMAT ProductId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsBiometricFramework
{
    struct WINBIO_BDB_ANSI_381_HEADER
    {
        uint64_t RecordLength;
        uint32_t FormatIdentifier;
        uint32_t VersionNumber;
        Windows::Win32::WindowsBiometricFramework::WINBIO_REGISTERED_FORMAT ProductId;
        uint16_t CaptureDeviceId;
        uint16_t ImageAcquisitionLevel;
        uint16_t HorizontalScanResolution;
        uint16_t VerticalScanResolution;
        uint16_t HorizontalImageResolution;
        uint16_t VerticalImageResolution;
        uint8_t ElementCount;
        uint8_t ScaleUnits;
        uint8_t PixelDepth;
        uint8_t ImageCompressionAlg;
        uint16_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsBiometricFramework
{
    struct WINBIO_BDB_ANSI_381_RECORD
    {
        uint32_t BlockLength;
        uint16_t HorizontalLineLength;
        uint16_t VerticalLineLength;
        uint8_t Position;
        uint8_t CountOfViews;
        uint8_t ViewNumber;
        uint8_t ImageQuality;
        uint8_t ImpressionType;
        uint8_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsBiometricFramework
{
    struct WINBIO_SECURE_BUFFER_HEADER_V1
    {
        uint32_t Type;
        uint32_t Size;
        uint32_t Flags;
        uint64_t ValidationTag;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsBiometricFramework
{
    struct WINBIO_EVENT
    {
        union _Parameters_e__Union
        {
            struct _Unclaimed_e__Struct
            {
                uint32_t UnitId;
                uint32_t RejectDetail;
            };
            struct _UnclaimedIdentify_e__Struct
            {
                uint32_t UnitId;
                Windows::Win32::WindowsBiometricFramework::WINBIO_IDENTITY Identity;
                uint8_t SubFactor;
                uint32_t RejectDetail;
            };
            struct _Error_e__Struct
            {
                int32_t ErrorCode;
            };
            _Unclaimed_e__Struct Unclaimed;
            _UnclaimedIdentify_e__Struct UnclaimedIdentify;
            _Error_e__Struct Error;
        };
        uint32_t Type;
        _Parameters_e__Union Parameters;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsBiometricFramework
{
    union WINBIO_PRESENCE_PROPERTIES
    {
        struct _FacialFeatures_e__Struct
        {
            struct _OpaqueEngineData_e__Struct
            {
                ::win32::guid AdapterId;
                uint32_t Data[77];
            };
            Windows::Win32::DisplayDevices::RECT BoundingBox;
            int32_t Distance;
            _OpaqueEngineData_e__Struct OpaqueEngineData;
        };
        struct _Iris_e__Struct
        {
            Windows::Win32::DisplayDevices::RECT EyeBoundingBox_1;
            Windows::Win32::DisplayDevices::RECT EyeBoundingBox_2;
            Windows::Win32::DisplayDevices::POINT PupilCenter_1;
            Windows::Win32::DisplayDevices::POINT PupilCenter_2;
            int32_t Distance;
        };
        _FacialFeatures_e__Struct FacialFeatures;
        _Iris_e__Struct Iris;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsBiometricFramework
{
    struct WINBIO_PRESENCE
    {
        struct _Authorization_e__Struct
        {
            uint32_t Size;
            uint8_t Data[32];
        };
        uint32_t Factor;
        uint8_t SubFactor;
        int32_t Status;
        uint32_t RejectDetail;
        Windows::Win32::WindowsBiometricFramework::WINBIO_IDENTITY Identity;
        uint64_t TrackingId;
        uint64_t Ticket;
        Windows::Win32::WindowsBiometricFramework::WINBIO_PRESENCE_PROPERTIES Properties;
        _Authorization_e__Struct Authorization;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsBiometricFramework
{
    struct WINBIO_BSP_SCHEMA
    {
        uint32_t BiometricFactor;
        ::win32::guid BspId;
        uint16_t Description[256];
        uint16_t Vendor[256];
        Windows::Win32::WindowsBiometricFramework::WINBIO_VERSION Version;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsBiometricFramework
{
    struct WINBIO_UNIT_SCHEMA
    {
        uint32_t UnitId;
        uint32_t PoolType;
        uint32_t BiometricFactor;
        uint32_t SensorSubType;
        uint32_t Capabilities;
        uint16_t DeviceInstanceId[256];
        uint16_t Description[256];
        uint16_t Manufacturer[256];
        uint16_t Model[256];
        uint16_t SerialNumber[256];
        Windows::Win32::WindowsBiometricFramework::WINBIO_VERSION FirmwareVersion;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsBiometricFramework
{
    struct WINBIO_STORAGE_SCHEMA
    {
        uint32_t BiometricFactor;
        ::win32::guid DatabaseId;
        ::win32::guid DataFormat;
        uint32_t Attributes;
        uint16_t FilePath[256];
        uint16_t ConnectionString[256];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsBiometricFramework
{
    struct WINBIO_EXTENDED_SENSOR_INFO
    {
        union _Specific_e__Union
        {
            struct _FacialFeatures_e__Struct
            {
                struct _HardwareInfo_e__Struct
                {
                    uint16_t ColorSensorId[260];
                    uint16_t InfraredSensorId[260];
                    uint32_t InfraredSensorRotationAngle;
                };
                Windows::Win32::DisplayDevices::RECT FrameSize;
                Windows::Win32::DisplayDevices::POINT FrameOffset;
                uint32_t MandatoryOrientation;
                _HardwareInfo_e__Struct HardwareInfo;
            };
            struct _Fingerprint_e__Struct
            {
                uint32_t Reserved;
            };
            struct _Iris_e__Struct
            {
                Windows::Win32::DisplayDevices::RECT FrameSize;
                Windows::Win32::DisplayDevices::POINT FrameOffset;
                uint32_t MandatoryOrientation;
            };
            struct _Voice_e__Struct
            {
                uint32_t Reserved;
            };
            uint32_t Null;
            _FacialFeatures_e__Struct FacialFeatures;
            _Fingerprint_e__Struct Fingerprint;
            _Iris_e__Struct Iris;
            _Voice_e__Struct Voice;
        };
        uint32_t GenericSensorCapabilities;
        uint32_t Factor;
        _Specific_e__Union Specific;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsBiometricFramework
{
    struct WINBIO_EXTENDED_ENGINE_INFO
    {
        union _Specific_e__Union
        {
            struct _FacialFeatures_e__Struct
            {
                struct _EnrollmentRequirements_e__Struct
                {
                    uint32_t Null;
                };
                uint32_t Capabilities;
                _EnrollmentRequirements_e__Struct EnrollmentRequirements;
            };
            struct _Fingerprint_e__Struct
            {
                struct _EnrollmentRequirements_e__Struct
                {
                    uint32_t GeneralSamples;
                    uint32_t Center;
                    uint32_t TopEdge;
                    uint32_t BottomEdge;
                    uint32_t LeftEdge;
                    uint32_t RightEdge;
                };
                uint32_t Capabilities;
                _EnrollmentRequirements_e__Struct EnrollmentRequirements;
            };
            struct _Iris_e__Struct
            {
                struct _EnrollmentRequirements_e__Struct
                {
                    uint32_t Null;
                };
                uint32_t Capabilities;
                _EnrollmentRequirements_e__Struct EnrollmentRequirements;
            };
            struct _Voice_e__Struct
            {
                struct _EnrollmentRequirements_e__Struct
                {
                    uint32_t Null;
                };
                uint32_t Capabilities;
                _EnrollmentRequirements_e__Struct EnrollmentRequirements;
            };
            uint32_t Null;
            _FacialFeatures_e__Struct FacialFeatures;
            _Fingerprint_e__Struct Fingerprint;
            _Iris_e__Struct Iris;
            _Voice_e__Struct Voice;
        };
        uint32_t GenericEngineCapabilities;
        uint32_t Factor;
        _Specific_e__Union Specific;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsBiometricFramework
{
    struct WINBIO_EXTENDED_STORAGE_INFO
    {
        union _Specific_e__Union
        {
            struct _FacialFeatures_e__Struct
            {
                uint32_t Capabilities;
            };
            struct _Fingerprint_e__Struct
            {
                uint32_t Capabilities;
            };
            struct _Iris_e__Struct
            {
                uint32_t Capabilities;
            };
            struct _Voice_e__Struct
            {
                uint32_t Capabilities;
            };
            uint32_t Null;
            _FacialFeatures_e__Struct FacialFeatures;
            _Fingerprint_e__Struct Fingerprint;
            _Iris_e__Struct Iris;
            _Voice_e__Struct Voice;
        };
        uint32_t GenericStorageCapabilities;
        uint32_t Factor;
        _Specific_e__Union Specific;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsBiometricFramework
{
    struct WINBIO_EXTENDED_ENROLLMENT_STATUS
    {
        union _Specific_e__Union
        {
            struct _FacialFeatures_e__Struct
            {
                struct _OpaqueEngineData_e__Struct
                {
                    ::win32::guid AdapterId;
                    uint32_t Data[77];
                };
                Windows::Win32::DisplayDevices::RECT BoundingBox;
                int32_t Distance;
                _OpaqueEngineData_e__Struct OpaqueEngineData;
            };
            struct _Fingerprint_e__Struct
            {
                uint32_t GeneralSamples;
                uint32_t Center;
                uint32_t TopEdge;
                uint32_t BottomEdge;
                uint32_t LeftEdge;
                uint32_t RightEdge;
            };
            struct _Iris_e__Struct
            {
                struct _Point3D_e__Struct
                {
                    double X;
                    double Y;
                    double Z;
                };
                Windows::Win32::DisplayDevices::RECT EyeBoundingBox_1;
                Windows::Win32::DisplayDevices::RECT EyeBoundingBox_2;
                Windows::Win32::DisplayDevices::POINT PupilCenter_1;
                Windows::Win32::DisplayDevices::POINT PupilCenter_2;
                int32_t Distance;
                uint32_t GridPointCompletionPercent;
                uint16_t GridPointIndex;
                _Point3D_e__Struct Point3D;
                Windows::Win32::SystemServices::BOOL StopCaptureAndShowCriticalFeedback;
            };
            struct _Voice_e__Struct
            {
                uint32_t Reserved;
            };
            uint32_t Null;
            _FacialFeatures_e__Struct FacialFeatures;
            _Fingerprint_e__Struct Fingerprint;
            _Iris_e__Struct Iris;
            _Voice_e__Struct Voice;
        };
        int32_t TemplateStatus;
        uint32_t RejectDetail;
        uint32_t PercentComplete;
        uint32_t Factor;
        uint8_t SubFactor;
        _Specific_e__Union Specific;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsBiometricFramework
{
    struct WINBIO_EXTENDED_UNIT_STATUS
    {
        uint32_t Availability;
        uint32_t ReasonCode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsBiometricFramework
{
    struct WINBIO_FP_BU_STATE
    {
        Windows::Win32::SystemServices::BOOL SensorAttached;
        int32_t CreationResult;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsBiometricFramework
{
    struct WINBIO_ANTI_SPOOF_POLICY
    {
        Windows::Win32::WindowsBiometricFramework::WINBIO_ANTI_SPOOF_POLICY_ACTION Action;
        Windows::Win32::WindowsBiometricFramework::WINBIO_POLICY_SOURCE Source;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsBiometricFramework
{
    struct WINBIO_EXTENDED_ENROLLMENT_PARAMETERS
    {
        size_t Size;
        uint8_t SubFactor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsBiometricFramework
{
    struct WINBIO_ACCOUNT_POLICY
    {
        Windows::Win32::WindowsBiometricFramework::WINBIO_IDENTITY Identity;
        Windows::Win32::WindowsBiometricFramework::WINBIO_ANTI_SPOOF_POLICY_ACTION AntiSpoofBehavior;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsBiometricFramework
{
    struct WINBIO_PROTECTION_POLICY
    {
        uint32_t Version;
        Windows::Win32::WindowsBiometricFramework::WINBIO_IDENTITY Identity;
        ::win32::guid DatabaseId;
        uint64_t UserState;
        size_t PolicySize;
        uint8_t Policy[128];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsBiometricFramework
{
    struct WINBIO_GESTURE_METADATA
    {
        size_t Size;
        uint32_t BiometricType;
        uint32_t MatchType;
        uint32_t ProtectionType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsBiometricFramework
{
    struct WINBIO_ASYNC_RESULT
    {
        union _Parameters_e__Union
        {
            struct _Verify_e__Struct
            {
                uint8_t Match;
                uint32_t RejectDetail;
            };
            struct _Identify_e__Struct
            {
                Windows::Win32::WindowsBiometricFramework::WINBIO_IDENTITY Identity;
                uint8_t SubFactor;
                uint32_t RejectDetail;
            };
            struct _EnrollBegin_e__Struct
            {
                uint8_t SubFactor;
            };
            struct _EnrollCapture_e__Struct
            {
                uint32_t RejectDetail;
            };
            struct _EnrollCommit_e__Struct
            {
                Windows::Win32::WindowsBiometricFramework::WINBIO_IDENTITY Identity;
                uint8_t IsNewTemplate;
            };
            struct _EnumEnrollments_e__Struct
            {
                Windows::Win32::WindowsBiometricFramework::WINBIO_IDENTITY Identity;
                size_t SubFactorCount;
                uint8_t* SubFactorArray;
            };
            struct _CaptureSample_e__Struct
            {
                Windows::Win32::WindowsBiometricFramework::WINBIO_BIR* Sample;
                size_t SampleSize;
                uint32_t RejectDetail;
            };
            struct _DeleteTemplate_e__Struct
            {
                Windows::Win32::WindowsBiometricFramework::WINBIO_IDENTITY Identity;
                uint8_t SubFactor;
            };
            struct _GetProperty_e__Struct
            {
                uint32_t PropertyType;
                uint32_t PropertyId;
                Windows::Win32::WindowsBiometricFramework::WINBIO_IDENTITY Identity;
                uint8_t SubFactor;
                size_t PropertyBufferSize;
                void* PropertyBuffer;
            };
            struct _SetProperty_e__Struct
            {
                uint32_t PropertyType;
                uint32_t PropertyId;
                Windows::Win32::WindowsBiometricFramework::WINBIO_IDENTITY Identity;
                uint8_t SubFactor;
                size_t PropertyBufferSize;
                void* PropertyBuffer;
            };
            struct _GetEvent_e__Struct
            {
                Windows::Win32::WindowsBiometricFramework::WINBIO_EVENT Event;
            };
            struct _ControlUnit_e__Struct
            {
                uint32_t Component;
                uint32_t ControlCode;
                uint32_t OperationStatus;
                uint8_t* SendBuffer;
                size_t SendBufferSize;
                uint8_t* ReceiveBuffer;
                size_t ReceiveBufferSize;
                size_t ReceiveDataSize;
            };
            struct _EnumServiceProviders_e__Struct
            {
                size_t BspCount;
                Windows::Win32::WindowsBiometricFramework::WINBIO_BSP_SCHEMA* BspSchemaArray;
            };
            struct _EnumBiometricUnits_e__Struct
            {
                size_t UnitCount;
                Windows::Win32::WindowsBiometricFramework::WINBIO_UNIT_SCHEMA* UnitSchemaArray;
            };
            struct _EnumDatabases_e__Struct
            {
                size_t StorageCount;
                Windows::Win32::WindowsBiometricFramework::WINBIO_STORAGE_SCHEMA* StorageSchemaArray;
            };
            struct _VerifyAndReleaseTicket_e__Struct
            {
                uint8_t Match;
                uint32_t RejectDetail;
                uint64_t Ticket;
            };
            struct _IdentifyAndReleaseTicket_e__Struct
            {
                Windows::Win32::WindowsBiometricFramework::WINBIO_IDENTITY Identity;
                uint8_t SubFactor;
                uint32_t RejectDetail;
                uint64_t Ticket;
            };
            struct _EnrollSelect_e__Struct
            {
                uint64_t SelectorValue;
            };
            struct _MonitorPresence_e__Struct
            {
                uint32_t ChangeType;
                size_t PresenceCount;
                Windows::Win32::WindowsBiometricFramework::WINBIO_PRESENCE* PresenceArray;
            };
            struct _GetProtectionPolicy_e__Struct
            {
                Windows::Win32::WindowsBiometricFramework::WINBIO_IDENTITY Identity;
                Windows::Win32::WindowsBiometricFramework::WINBIO_PROTECTION_POLICY Policy;
            };
            struct _NotifyUnitStatusChange_e__Struct
            {
                Windows::Win32::WindowsBiometricFramework::WINBIO_EXTENDED_UNIT_STATUS ExtendedStatus;
            };
            _Verify_e__Struct Verify;
            _Identify_e__Struct Identify;
            _EnrollBegin_e__Struct EnrollBegin;
            _EnrollCapture_e__Struct EnrollCapture;
            _EnrollCommit_e__Struct EnrollCommit;
            _EnumEnrollments_e__Struct EnumEnrollments;
            _CaptureSample_e__Struct CaptureSample;
            _DeleteTemplate_e__Struct DeleteTemplate;
            _GetProperty_e__Struct GetProperty;
            _SetProperty_e__Struct SetProperty;
            _GetEvent_e__Struct GetEvent;
            _ControlUnit_e__Struct ControlUnit;
            _EnumServiceProviders_e__Struct EnumServiceProviders;
            _EnumBiometricUnits_e__Struct EnumBiometricUnits;
            _EnumDatabases_e__Struct EnumDatabases;
            _VerifyAndReleaseTicket_e__Struct VerifyAndReleaseTicket;
            _IdentifyAndReleaseTicket_e__Struct IdentifyAndReleaseTicket;
            _EnrollSelect_e__Struct EnrollSelect;
            _MonitorPresence_e__Struct MonitorPresence;
            _GetProtectionPolicy_e__Struct GetProtectionPolicy;
            _NotifyUnitStatusChange_e__Struct NotifyUnitStatusChange;
        };
        uint32_t SessionHandle;
        uint32_t Operation;
        uint64_t SequenceNumber;
        int64_t TimeStamp;
        int32_t ApiStatus;
        uint32_t UnitId;
        void* UserData;
        _Parameters_e__Union Parameters;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsBiometricFramework
{
    struct _WINIBIO_SENSOR_CONTEXT
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsBiometricFramework
{
    struct _WINIBIO_ENGINE_CONTEXT
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsBiometricFramework
{
    struct _WINIBIO_STORAGE_CONTEXT
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsBiometricFramework
{
    struct WINBIO_STORAGE_RECORD
    {
        Windows::Win32::WindowsBiometricFramework::WINBIO_IDENTITY* Identity;
        uint8_t SubFactor;
        uint32_t* IndexVector;
        size_t IndexElementCount;
        uint8_t* TemplateBlob;
        size_t TemplateBlobSize;
        uint8_t* PayloadBlob;
        size_t PayloadBlobSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsBiometricFramework
{
    struct WINBIO_PIPELINE
    {
        Windows::Win32::SystemServices::HANDLE SensorHandle;
        Windows::Win32::SystemServices::HANDLE EngineHandle;
        Windows::Win32::SystemServices::HANDLE StorageHandle;
        Windows::Win32::WindowsBiometricFramework::WINBIO_SENSOR_INTERFACE* SensorInterface;
        Windows::Win32::WindowsBiometricFramework::WINBIO_ENGINE_INTERFACE* EngineInterface;
        Windows::Win32::WindowsBiometricFramework::WINBIO_STORAGE_INTERFACE* StorageInterface;
        Windows::Win32::WindowsBiometricFramework::_WINIBIO_SENSOR_CONTEXT* SensorContext;
        Windows::Win32::WindowsBiometricFramework::_WINIBIO_ENGINE_CONTEXT* EngineContext;
        Windows::Win32::WindowsBiometricFramework::_WINIBIO_STORAGE_CONTEXT* StorageContext;
        Windows::Win32::WindowsBiometricFramework::WINBIO_FRAMEWORK_INTERFACE* FrameworkInterface;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsBiometricFramework
{
    struct WINBIO_ADAPTER_INTERFACE_VERSION
    {
        uint16_t MajorVersion;
        uint16_t MinorVersion;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsBiometricFramework
{
    struct WINBIO_SENSOR_INTERFACE
    {
        Windows::Win32::WindowsBiometricFramework::WINBIO_ADAPTER_INTERFACE_VERSION Version;
        uint32_t Type;
        size_t Size;
        ::win32::guid AdapterId;
        Windows::Win32::WindowsBiometricFramework::PIBIO_SENSOR_ATTACH_FN* Attach;
        Windows::Win32::WindowsBiometricFramework::PIBIO_SENSOR_DETACH_FN* Detach;
        Windows::Win32::WindowsBiometricFramework::PIBIO_SENSOR_CLEAR_CONTEXT_FN* ClearContext;
        Windows::Win32::WindowsBiometricFramework::PIBIO_SENSOR_QUERY_STATUS_FN* QueryStatus;
        Windows::Win32::WindowsBiometricFramework::PIBIO_SENSOR_RESET_FN* Reset;
        Windows::Win32::WindowsBiometricFramework::PIBIO_SENSOR_SET_MODE_FN* SetMode;
        Windows::Win32::WindowsBiometricFramework::PIBIO_SENSOR_SET_INDICATOR_STATUS_FN* SetIndicatorStatus;
        Windows::Win32::WindowsBiometricFramework::PIBIO_SENSOR_GET_INDICATOR_STATUS_FN* GetIndicatorStatus;
        Windows::Win32::WindowsBiometricFramework::PIBIO_SENSOR_START_CAPTURE_FN* StartCapture;
        Windows::Win32::WindowsBiometricFramework::PIBIO_SENSOR_FINISH_CAPTURE_FN* FinishCapture;
        Windows::Win32::WindowsBiometricFramework::PIBIO_SENSOR_EXPORT_SENSOR_DATA_FN* ExportSensorData;
        Windows::Win32::WindowsBiometricFramework::PIBIO_SENSOR_CANCEL_FN* Cancel;
        Windows::Win32::WindowsBiometricFramework::PIBIO_SENSOR_PUSH_DATA_TO_ENGINE_FN* PushDataToEngine;
        Windows::Win32::WindowsBiometricFramework::PIBIO_SENSOR_CONTROL_UNIT_FN* ControlUnit;
        Windows::Win32::WindowsBiometricFramework::PIBIO_SENSOR_CONTROL_UNIT_PRIVILEGED_FN* ControlUnitPrivileged;
        Windows::Win32::WindowsBiometricFramework::PIBIO_SENSOR_NOTIFY_POWER_CHANGE_FN* NotifyPowerChange;
        Windows::Win32::WindowsBiometricFramework::PIBIO_SENSOR_PIPELINE_INIT_FN* PipelineInit;
        Windows::Win32::WindowsBiometricFramework::PIBIO_SENSOR_PIPELINE_CLEANUP_FN* PipelineCleanup;
        Windows::Win32::WindowsBiometricFramework::PIBIO_SENSOR_ACTIVATE_FN* Activate;
        Windows::Win32::WindowsBiometricFramework::PIBIO_SENSOR_DEACTIVATE_FN* Deactivate;
        Windows::Win32::WindowsBiometricFramework::PIBIO_SENSOR_QUERY_EXTENDED_INFO_FN* QueryExtendedInfo;
        Windows::Win32::WindowsBiometricFramework::PIBIO_SENSOR_QUERY_CALIBRATION_FORMATS_FN* QueryCalibrationFormats;
        Windows::Win32::WindowsBiometricFramework::PIBIO_SENSOR_SET_CALIBRATION_FORMAT_FN* SetCalibrationFormat;
        Windows::Win32::WindowsBiometricFramework::PIBIO_SENSOR_ACCEPT_CALIBRATION_DATA_FN* AcceptCalibrationData;
        Windows::Win32::WindowsBiometricFramework::PIBIO_SENSOR_ASYNC_IMPORT_RAW_BUFFER_FN* AsyncImportRawBuffer;
        Windows::Win32::WindowsBiometricFramework::PIBIO_SENSOR_ASYNC_IMPORT_SECURE_BUFFER_FN* AsyncImportSecureBuffer;
        Windows::Win32::WindowsBiometricFramework::PIBIO_SENSOR_QUERY_PRIVATE_SENSOR_TYPE_FN* QueryPrivateSensorType;
        Windows::Win32::WindowsBiometricFramework::PIBIO_SENSOR_CONNECT_SECURE_FN* ConnectSecure;
        Windows::Win32::WindowsBiometricFramework::PIBIO_SENSOR_START_CAPTURE_EX_FN* StartCaptureEx;
        Windows::Win32::WindowsBiometricFramework::PIBIO_SENSOR_START_NOTIFY_WAKE_FN* StartNotifyWake;
        Windows::Win32::WindowsBiometricFramework::PIBIO_SENSOR_FINISH_NOTIFY_WAKE_FN* FinishNotifyWake;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsBiometricFramework
{
    struct WINBIO_ENGINE_INTERFACE
    {
        Windows::Win32::WindowsBiometricFramework::WINBIO_ADAPTER_INTERFACE_VERSION Version;
        uint32_t Type;
        size_t Size;
        ::win32::guid AdapterId;
        Windows::Win32::WindowsBiometricFramework::PIBIO_ENGINE_ATTACH_FN* Attach;
        Windows::Win32::WindowsBiometricFramework::PIBIO_ENGINE_DETACH_FN* Detach;
        Windows::Win32::WindowsBiometricFramework::PIBIO_ENGINE_CLEAR_CONTEXT_FN* ClearContext;
        Windows::Win32::WindowsBiometricFramework::PIBIO_ENGINE_QUERY_PREFERRED_FORMAT_FN* QueryPreferredFormat;
        Windows::Win32::WindowsBiometricFramework::PIBIO_ENGINE_QUERY_INDEX_VECTOR_SIZE_FN* QueryIndexVectorSize;
        Windows::Win32::WindowsBiometricFramework::PIBIO_ENGINE_QUERY_HASH_ALGORITHMS_FN* QueryHashAlgorithms;
        Windows::Win32::WindowsBiometricFramework::PIBIO_ENGINE_SET_HASH_ALGORITHM_FN* SetHashAlgorithm;
        Windows::Win32::WindowsBiometricFramework::PIBIO_ENGINE_QUERY_SAMPLE_HINT_FN* QuerySampleHint;
        Windows::Win32::WindowsBiometricFramework::PIBIO_ENGINE_ACCEPT_SAMPLE_DATA_FN* AcceptSampleData;
        Windows::Win32::WindowsBiometricFramework::PIBIO_ENGINE_EXPORT_ENGINE_DATA_FN* ExportEngineData;
        Windows::Win32::WindowsBiometricFramework::PIBIO_ENGINE_VERIFY_FEATURE_SET_FN* VerifyFeatureSet;
        Windows::Win32::WindowsBiometricFramework::PIBIO_ENGINE_IDENTIFY_FEATURE_SET_FN* IdentifyFeatureSet;
        Windows::Win32::WindowsBiometricFramework::PIBIO_ENGINE_CREATE_ENROLLMENT_FN* CreateEnrollment;
        Windows::Win32::WindowsBiometricFramework::PIBIO_ENGINE_UPDATE_ENROLLMENT_FN* UpdateEnrollment;
        Windows::Win32::WindowsBiometricFramework::PIBIO_ENGINE_GET_ENROLLMENT_STATUS_FN* GetEnrollmentStatus;
        Windows::Win32::WindowsBiometricFramework::PIBIO_ENGINE_GET_ENROLLMENT_HASH_FN* GetEnrollmentHash;
        Windows::Win32::WindowsBiometricFramework::PIBIO_ENGINE_CHECK_FOR_DUPLICATE_FN* CheckForDuplicate;
        Windows::Win32::WindowsBiometricFramework::PIBIO_ENGINE_COMMIT_ENROLLMENT_FN* CommitEnrollment;
        Windows::Win32::WindowsBiometricFramework::PIBIO_ENGINE_DISCARD_ENROLLMENT_FN* DiscardEnrollment;
        Windows::Win32::WindowsBiometricFramework::PIBIO_ENGINE_CONTROL_UNIT_FN* ControlUnit;
        Windows::Win32::WindowsBiometricFramework::PIBIO_ENGINE_CONTROL_UNIT_PRIVILEGED_FN* ControlUnitPrivileged;
        Windows::Win32::WindowsBiometricFramework::PIBIO_ENGINE_NOTIFY_POWER_CHANGE_FN* NotifyPowerChange;
        Windows::Win32::WindowsBiometricFramework::PIBIO_ENGINE_RESERVED_1_FN* Reserved_1;
        Windows::Win32::WindowsBiometricFramework::PIBIO_ENGINE_PIPELINE_INIT_FN* PipelineInit;
        Windows::Win32::WindowsBiometricFramework::PIBIO_ENGINE_PIPELINE_CLEANUP_FN* PipelineCleanup;
        Windows::Win32::WindowsBiometricFramework::PIBIO_ENGINE_ACTIVATE_FN* Activate;
        Windows::Win32::WindowsBiometricFramework::PIBIO_ENGINE_DEACTIVATE_FN* Deactivate;
        Windows::Win32::WindowsBiometricFramework::PIBIO_ENGINE_QUERY_EXTENDED_INFO_FN* QueryExtendedInfo;
        Windows::Win32::WindowsBiometricFramework::PIBIO_ENGINE_IDENTIFY_ALL_FN* IdentifyAll;
        Windows::Win32::WindowsBiometricFramework::PIBIO_ENGINE_SET_ENROLLMENT_SELECTOR_FN* SetEnrollmentSelector;
        Windows::Win32::WindowsBiometricFramework::PIBIO_ENGINE_SET_ENROLLMENT_PARAMETERS_FN* SetEnrollmentParameters;
        Windows::Win32::WindowsBiometricFramework::PIBIO_ENGINE_QUERY_EXTENDED_ENROLLMENT_STATUS_FN* QueryExtendedEnrollmentStatus;
        Windows::Win32::WindowsBiometricFramework::PIBIO_ENGINE_REFRESH_CACHE_FN* RefreshCache;
        Windows::Win32::WindowsBiometricFramework::PIBIO_ENGINE_SELECT_CALIBRATION_FORMAT_FN* SelectCalibrationFormat;
        Windows::Win32::WindowsBiometricFramework::PIBIO_ENGINE_QUERY_CALIBRATION_DATA_FN* QueryCalibrationData;
        Windows::Win32::WindowsBiometricFramework::PIBIO_ENGINE_SET_ACCOUNT_POLICY_FN* SetAccountPolicy;
        Windows::Win32::WindowsBiometricFramework::PIBIO_ENGINE_CREATE_KEY_FN* CreateKey;
        Windows::Win32::WindowsBiometricFramework::PIBIO_ENGINE_IDENTIFY_FEATURE_SET_SECURE_FN* IdentifyFeatureSetSecure;
        Windows::Win32::WindowsBiometricFramework::PIBIO_ENGINE_ACCEPT_PRIVATE_SENSOR_TYPE_INFO_FN* AcceptPrivateSensorTypeInfo;
        Windows::Win32::WindowsBiometricFramework::PIBIO_ENGINE_CREATE_ENROLLMENT_AUTHENTICATED_FN* CreateEnrollmentAuthenticated;
        Windows::Win32::WindowsBiometricFramework::PIBIO_ENGINE_IDENTIFY_FEATURE_SET_AUTHENTICATED_FN* IdentifyFeatureSetAuthenticated;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsBiometricFramework
{
    struct WINBIO_STORAGE_INTERFACE
    {
        Windows::Win32::WindowsBiometricFramework::WINBIO_ADAPTER_INTERFACE_VERSION Version;
        uint32_t Type;
        size_t Size;
        ::win32::guid AdapterId;
        Windows::Win32::WindowsBiometricFramework::PIBIO_STORAGE_ATTACH_FN* Attach;
        Windows::Win32::WindowsBiometricFramework::PIBIO_STORAGE_DETACH_FN* Detach;
        Windows::Win32::WindowsBiometricFramework::PIBIO_STORAGE_CLEAR_CONTEXT_FN* ClearContext;
        Windows::Win32::WindowsBiometricFramework::PIBIO_STORAGE_CREATE_DATABASE_FN* CreateDatabase;
        Windows::Win32::WindowsBiometricFramework::PIBIO_STORAGE_ERASE_DATABASE_FN* EraseDatabase;
        Windows::Win32::WindowsBiometricFramework::PIBIO_STORAGE_OPEN_DATABASE_FN* OpenDatabase;
        Windows::Win32::WindowsBiometricFramework::PIBIO_STORAGE_CLOSE_DATABASE_FN* CloseDatabase;
        Windows::Win32::WindowsBiometricFramework::PIBIO_STORAGE_GET_DATA_FORMAT_FN* GetDataFormat;
        Windows::Win32::WindowsBiometricFramework::PIBIO_STORAGE_GET_DATABASE_SIZE_FN* GetDatabaseSize;
        Windows::Win32::WindowsBiometricFramework::PIBIO_STORAGE_ADD_RECORD_FN* AddRecord;
        Windows::Win32::WindowsBiometricFramework::PIBIO_STORAGE_DELETE_RECORD_FN* DeleteRecord;
        Windows::Win32::WindowsBiometricFramework::PIBIO_STORAGE_QUERY_BY_SUBJECT_FN* QueryBySubject;
        Windows::Win32::WindowsBiometricFramework::PIBIO_STORAGE_QUERY_BY_CONTENT_FN* QueryByContent;
        Windows::Win32::WindowsBiometricFramework::PIBIO_STORAGE_GET_RECORD_COUNT_FN* GetRecordCount;
        Windows::Win32::WindowsBiometricFramework::PIBIO_STORAGE_FIRST_RECORD_FN* FirstRecord;
        Windows::Win32::WindowsBiometricFramework::PIBIO_STORAGE_NEXT_RECORD_FN* NextRecord;
        Windows::Win32::WindowsBiometricFramework::PIBIO_STORAGE_GET_CURRENT_RECORD_FN* GetCurrentRecord;
        Windows::Win32::WindowsBiometricFramework::PIBIO_STORAGE_CONTROL_UNIT_FN* ControlUnit;
        Windows::Win32::WindowsBiometricFramework::PIBIO_STORAGE_CONTROL_UNIT_PRIVILEGED_FN* ControlUnitPrivileged;
        Windows::Win32::WindowsBiometricFramework::PIBIO_STORAGE_NOTIFY_POWER_CHANGE_FN* NotifyPowerChange;
        Windows::Win32::WindowsBiometricFramework::PIBIO_STORAGE_PIPELINE_INIT_FN* PipelineInit;
        Windows::Win32::WindowsBiometricFramework::PIBIO_STORAGE_PIPELINE_CLEANUP_FN* PipelineCleanup;
        Windows::Win32::WindowsBiometricFramework::PIBIO_STORAGE_ACTIVATE_FN* Activate;
        Windows::Win32::WindowsBiometricFramework::PIBIO_STORAGE_DEACTIVATE_FN* Deactivate;
        Windows::Win32::WindowsBiometricFramework::PIBIO_STORAGE_QUERY_EXTENDED_INFO_FN* QueryExtendedInfo;
        Windows::Win32::WindowsBiometricFramework::PIBIO_STORAGE_NOTIFY_DATABASE_CHANGE_FN* NotifyDatabaseChange;
        Windows::Win32::WindowsBiometricFramework::PIBIO_STORAGE_RESERVED_1_FN* Reserved1;
        Windows::Win32::WindowsBiometricFramework::PIBIO_STORAGE_RESERVED_2_FN* Reserved2;
        Windows::Win32::WindowsBiometricFramework::PIBIO_STORAGE_UPDATE_RECORD_BEGIN_FN* UpdateRecordBegin;
        Windows::Win32::WindowsBiometricFramework::PIBIO_STORAGE_UPDATE_RECORD_COMMIT_FN* UpdateRecordCommit;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsBiometricFramework
{
    struct WINBIO_FRAMEWORK_INTERFACE
    {
        Windows::Win32::WindowsBiometricFramework::WINBIO_ADAPTER_INTERFACE_VERSION Version;
        uint32_t Type;
        size_t Size;
        ::win32::guid AdapterId;
        Windows::Win32::WindowsBiometricFramework::PIBIO_FRAMEWORK_SET_UNIT_STATUS_FN* SetUnitStatus;
        Windows::Win32::WindowsBiometricFramework::PIBIO_STORAGE_ATTACH_FN* VsmStorageAttach;
        Windows::Win32::WindowsBiometricFramework::PIBIO_STORAGE_DETACH_FN* VsmStorageDetach;
        Windows::Win32::WindowsBiometricFramework::PIBIO_STORAGE_CLEAR_CONTEXT_FN* VsmStorageClearContext;
        Windows::Win32::WindowsBiometricFramework::PIBIO_STORAGE_CREATE_DATABASE_FN* VsmStorageCreateDatabase;
        Windows::Win32::WindowsBiometricFramework::PIBIO_STORAGE_OPEN_DATABASE_FN* VsmStorageOpenDatabase;
        Windows::Win32::WindowsBiometricFramework::PIBIO_STORAGE_CLOSE_DATABASE_FN* VsmStorageCloseDatabase;
        Windows::Win32::WindowsBiometricFramework::PIBIO_STORAGE_DELETE_RECORD_FN* VsmStorageDeleteRecord;
        Windows::Win32::WindowsBiometricFramework::PIBIO_STORAGE_NOTIFY_POWER_CHANGE_FN* VsmStorageNotifyPowerChange;
        Windows::Win32::WindowsBiometricFramework::PIBIO_STORAGE_PIPELINE_INIT_FN* VsmStoragePipelineInit;
        Windows::Win32::WindowsBiometricFramework::PIBIO_STORAGE_PIPELINE_CLEANUP_FN* VsmStoragePipelineCleanup;
        Windows::Win32::WindowsBiometricFramework::PIBIO_STORAGE_ACTIVATE_FN* VsmStorageActivate;
        Windows::Win32::WindowsBiometricFramework::PIBIO_STORAGE_DEACTIVATE_FN* VsmStorageDeactivate;
        Windows::Win32::WindowsBiometricFramework::PIBIO_STORAGE_QUERY_EXTENDED_INFO_FN* VsmStorageQueryExtendedInfo;
        Windows::Win32::WindowsBiometricFramework::PIBIO_FRAMEWORK_VSM_CACHE_CLEAR_FN* VsmStorageCacheClear;
        Windows::Win32::WindowsBiometricFramework::PIBIO_FRAMEWORK_VSM_CACHE_IMPORT_BEGIN_FN* VsmStorageCacheImportBegin;
        Windows::Win32::WindowsBiometricFramework::PIBIO_FRAMEWORK_VSM_CACHE_IMPORT_NEXT_FN* VsmStorageCacheImportNext;
        Windows::Win32::WindowsBiometricFramework::PIBIO_FRAMEWORK_VSM_CACHE_IMPORT_END_FN* VsmStorageCacheImportEnd;
        Windows::Win32::WindowsBiometricFramework::PIBIO_FRAMEWORK_VSM_CACHE_EXPORT_BEGIN_FN* VsmStorageCacheExportBegin;
        Windows::Win32::WindowsBiometricFramework::PIBIO_FRAMEWORK_VSM_CACHE_EXPORT_NEXT_FN* VsmStorageCacheExportNext;
        Windows::Win32::WindowsBiometricFramework::PIBIO_FRAMEWORK_VSM_CACHE_EXPORT_END_FN* VsmStorageCacheExportEnd;
        Windows::Win32::WindowsBiometricFramework::PIBIO_SENSOR_ATTACH_FN* VsmSensorAttach;
        Windows::Win32::WindowsBiometricFramework::PIBIO_SENSOR_DETACH_FN* VsmSensorDetach;
        Windows::Win32::WindowsBiometricFramework::PIBIO_SENSOR_CLEAR_CONTEXT_FN* VsmSensorClearContext;
        Windows::Win32::WindowsBiometricFramework::PIBIO_SENSOR_PUSH_DATA_TO_ENGINE_FN* VsmSensorPushDataToEngine;
        Windows::Win32::WindowsBiometricFramework::PIBIO_SENSOR_NOTIFY_POWER_CHANGE_FN* VsmSensorNotifyPowerChange;
        Windows::Win32::WindowsBiometricFramework::PIBIO_SENSOR_PIPELINE_INIT_FN* VsmSensorPipelineInit;
        Windows::Win32::WindowsBiometricFramework::PIBIO_SENSOR_PIPELINE_CLEANUP_FN* VsmSensorPipelineCleanup;
        Windows::Win32::WindowsBiometricFramework::PIBIO_SENSOR_ACTIVATE_FN* VsmSensorActivate;
        Windows::Win32::WindowsBiometricFramework::PIBIO_SENSOR_DEACTIVATE_FN* VsmSensorDeactivate;
        Windows::Win32::WindowsBiometricFramework::PIBIO_SENSOR_ASYNC_IMPORT_RAW_BUFFER_FN* VsmSensorAsyncImportRawBuffer;
        Windows::Win32::WindowsBiometricFramework::PIBIO_SENSOR_ASYNC_IMPORT_SECURE_BUFFER_FN* VsmSensorAsyncImportSecureBuffer;
        Windows::Win32::WindowsBiometricFramework::PIBIO_FRAMEWORK_VSM_STORAGE_RESERVED_1_FN* Reserved1;
        Windows::Win32::WindowsBiometricFramework::PIBIO_FRAMEWORK_VSM_STORAGE_RESERVED_2_FN* Reserved2;
        Windows::Win32::WindowsBiometricFramework::PIBIO_FRAMEWORK_VSM_STORAGE_RESERVED_3_FN* Reserved3;
        Windows::Win32::WindowsBiometricFramework::PIBIO_STORAGE_RESERVED_1_FN* Reserved4;
        Windows::Win32::WindowsBiometricFramework::PIBIO_STORAGE_RESERVED_2_FN* Reserved5;
        Windows::Win32::WindowsBiometricFramework::PIBIO_FRAMEWORK_ALLOCATE_MEMORY_FN* AllocateMemory;
        Windows::Win32::WindowsBiometricFramework::PIBIO_FRAMEWORK_FREE_MEMORY_FN* FreeMemory;
        Windows::Win32::WindowsBiometricFramework::PIBIO_FRAMEWORK_GET_PROPERTY_FN* GetProperty;
        Windows::Win32::WindowsBiometricFramework::PIBIO_FRAMEWORK_LOCK_AND_VALIDATE_SECURE_BUFFER_FN* LockAndValidateSecureBuffer;
        Windows::Win32::WindowsBiometricFramework::PIBIO_FRAMEWORK_RELEASE_SECURE_BUFFER_FN* ReleaseSecureBuffer;
        Windows::Win32::WindowsBiometricFramework::PIBIO_FRAMEWORK_VSM_QUERY_AUTHORIZED_ENROLLMENTS_FN* QueryAuthorizedEnrollments;
        Windows::Win32::WindowsBiometricFramework::PIBIO_FRAMEWORK_VSM_DECRYPT_SAMPLE_FN* DecryptSample;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CloudFilters
{
    struct CF_CONNECTION_KEY__
    {
        int64_t Internal;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct FILE_BASIC_INFO
    {
        Windows::Win32::SystemServices::LARGE_INTEGER CreationTime;
        Windows::Win32::SystemServices::LARGE_INTEGER LastAccessTime;
        Windows::Win32::SystemServices::LARGE_INTEGER LastWriteTime;
        Windows::Win32::SystemServices::LARGE_INTEGER ChangeTime;
        uint32_t FileAttributes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CloudFilters
{
    struct CF_FS_METADATA
    {
        Windows::Win32::FileSystem::FILE_BASIC_INFO BasicInfo;
        Windows::Win32::SystemServices::LARGE_INTEGER FileSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CloudFilters
{
    struct CF_PLACEHOLDER_CREATE_INFO
    {
        uint16_t* RelativeFileName;
        Windows::Win32::CloudFilters::CF_FS_METADATA FsMetadata;
        void* FileIdentity;
        uint32_t FileIdentityLength;
        Windows::Win32::CloudFilters::CF_PLACEHOLDER_CREATE_FLAGS Flags;
        int32_t Result;
        int64_t CreateUsn;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CloudFilters
{
    struct CF_PROCESS_INFO
    {
        uint32_t StructSize;
        uint32_t ProcessId;
        uint16_t* ImagePath;
        uint16_t* PackageName;
        uint16_t* ApplicationId;
        uint16_t* CommandLine;
        uint32_t SessionId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CloudFilters
{
    struct CF_PLATFORM_INFO
    {
        uint32_t BuildNumber;
        uint32_t RevisionNumber;
        uint32_t IntegrationNumber;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CloudFilters
{
    struct CF_HYDRATION_POLICY_PRIMARY_USHORT
    {
        uint16_t us;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CloudFilters
{
    struct CF_HYDRATION_POLICY_MODIFIER_USHORT
    {
        uint16_t us;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CloudFilters
{
    struct CF_HYDRATION_POLICY
    {
        Windows::Win32::CloudFilters::CF_HYDRATION_POLICY_PRIMARY_USHORT Primary;
        Windows::Win32::CloudFilters::CF_HYDRATION_POLICY_MODIFIER_USHORT Modifier;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CloudFilters
{
    struct CF_POPULATION_POLICY_PRIMARY_USHORT
    {
        uint16_t us;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CloudFilters
{
    struct CF_POPULATION_POLICY_MODIFIER_USHORT
    {
        uint16_t us;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CloudFilters
{
    struct CF_POPULATION_POLICY
    {
        Windows::Win32::CloudFilters::CF_POPULATION_POLICY_PRIMARY_USHORT Primary;
        Windows::Win32::CloudFilters::CF_POPULATION_POLICY_MODIFIER_USHORT Modifier;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CloudFilters
{
    struct CF_SYNC_POLICIES
    {
        uint32_t StructSize;
        Windows::Win32::CloudFilters::CF_HYDRATION_POLICY Hydration;
        Windows::Win32::CloudFilters::CF_POPULATION_POLICY Population;
        Windows::Win32::CloudFilters::CF_INSYNC_POLICY InSync;
        Windows::Win32::CloudFilters::CF_HARDLINK_POLICY HardLink;
        Windows::Win32::CloudFilters::CF_PLACEHOLDER_MANAGEMENT_POLICY PlaceholderManagement;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CloudFilters
{
    struct CF_SYNC_REGISTRATION
    {
        uint32_t StructSize;
        uint16_t* ProviderName;
        uint16_t* ProviderVersion;
        void* SyncRootIdentity;
        uint32_t SyncRootIdentityLength;
        void* FileIdentity;
        uint32_t FileIdentityLength;
        ::win32::guid ProviderId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CloudFilters
{
    struct CF_CALLBACK_INFO
    {
        uint32_t StructSize;
        Windows::Win32::CloudFilters::CF_CONNECTION_KEY__ ConnectionKey;
        void* CallbackContext;
        uint16_t* VolumeGuidName;
        uint16_t* VolumeDosName;
        uint32_t VolumeSerialNumber;
        Windows::Win32::SystemServices::LARGE_INTEGER SyncRootFileId;
        void* SyncRootIdentity;
        uint32_t SyncRootIdentityLength;
        Windows::Win32::SystemServices::LARGE_INTEGER FileId;
        Windows::Win32::SystemServices::LARGE_INTEGER FileSize;
        void* FileIdentity;
        uint32_t FileIdentityLength;
        uint16_t* NormalizedPath;
        Windows::Win32::SystemServices::LARGE_INTEGER TransferKey;
        uint8_t PriorityHint;
        Windows::Win32::SystemServices::CORRELATION_VECTOR* CorrelationVector;
        Windows::Win32::CloudFilters::CF_PROCESS_INFO* ProcessInfo;
        Windows::Win32::SystemServices::LARGE_INTEGER RequestKey;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CloudFilters
{
    struct CF_CALLBACK_PARAMETERS
    {
        union _Anonymous_e__Union
        {
            struct _Cancel_e__Struct
            {
                union _Anonymous_e__Union
                {
                    struct _FetchData_e__Struct
                    {
                        Windows::Win32::SystemServices::LARGE_INTEGER FileOffset;
                        Windows::Win32::SystemServices::LARGE_INTEGER Length;
                    };
                    _FetchData_e__Struct FetchData;
                };
                Windows::Win32::CloudFilters::CF_CALLBACK_CANCEL_FLAGS Flags;
                _Anonymous_e__Union Anonymous;
            };
            struct _FetchData_e__Struct
            {
                Windows::Win32::CloudFilters::CF_CALLBACK_FETCH_DATA_FLAGS Flags;
                Windows::Win32::SystemServices::LARGE_INTEGER RequiredFileOffset;
                Windows::Win32::SystemServices::LARGE_INTEGER RequiredLength;
                Windows::Win32::SystemServices::LARGE_INTEGER OptionalFileOffset;
                Windows::Win32::SystemServices::LARGE_INTEGER OptionalLength;
                Windows::Win32::SystemServices::LARGE_INTEGER LastDehydrationTime;
                Windows::Win32::CloudFilters::CF_CALLBACK_DEHYDRATION_REASON LastDehydrationReason;
            };
            struct _ValidateData_e__Struct
            {
                Windows::Win32::CloudFilters::CF_CALLBACK_VALIDATE_DATA_FLAGS Flags;
                Windows::Win32::SystemServices::LARGE_INTEGER RequiredFileOffset;
                Windows::Win32::SystemServices::LARGE_INTEGER RequiredLength;
            };
            struct _FetchPlaceholders_e__Struct
            {
                Windows::Win32::CloudFilters::CF_CALLBACK_FETCH_PLACEHOLDERS_FLAGS Flags;
                uint16_t* Pattern;
            };
            struct _OpenCompletion_e__Struct
            {
                Windows::Win32::CloudFilters::CF_CALLBACK_OPEN_COMPLETION_FLAGS Flags;
            };
            struct _CloseCompletion_e__Struct
            {
                Windows::Win32::CloudFilters::CF_CALLBACK_CLOSE_COMPLETION_FLAGS Flags;
            };
            struct _Dehydrate_e__Struct
            {
                Windows::Win32::CloudFilters::CF_CALLBACK_DEHYDRATE_FLAGS Flags;
                Windows::Win32::CloudFilters::CF_CALLBACK_DEHYDRATION_REASON Reason;
            };
            struct _DehydrateCompletion_e__Struct
            {
                Windows::Win32::CloudFilters::CF_CALLBACK_DEHYDRATE_COMPLETION_FLAGS Flags;
                Windows::Win32::CloudFilters::CF_CALLBACK_DEHYDRATION_REASON Reason;
            };
            struct _Delete_e__Struct
            {
                Windows::Win32::CloudFilters::CF_CALLBACK_DELETE_FLAGS Flags;
            };
            struct _DeleteCompletion_e__Struct
            {
                Windows::Win32::CloudFilters::CF_CALLBACK_DELETE_COMPLETION_FLAGS Flags;
            };
            struct _Rename_e__Struct
            {
                Windows::Win32::CloudFilters::CF_CALLBACK_RENAME_FLAGS Flags;
                uint16_t* TargetPath;
            };
            struct _RenameCompletion_e__Struct
            {
                Windows::Win32::CloudFilters::CF_CALLBACK_RENAME_COMPLETION_FLAGS Flags;
                uint16_t* SourcePath;
            };
            _Cancel_e__Struct Cancel;
            _FetchData_e__Struct FetchData;
            _ValidateData_e__Struct ValidateData;
            _FetchPlaceholders_e__Struct FetchPlaceholders;
            _OpenCompletion_e__Struct OpenCompletion;
            _CloseCompletion_e__Struct CloseCompletion;
            _Dehydrate_e__Struct Dehydrate;
            _DehydrateCompletion_e__Struct DehydrateCompletion;
            _Delete_e__Struct Delete;
            _DeleteCompletion_e__Struct DeleteCompletion;
            _Rename_e__Struct Rename;
            _RenameCompletion_e__Struct RenameCompletion;
        };
        uint32_t ParamSize;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CloudFilters
{
    struct CF_CALLBACK_REGISTRATION
    {
        Windows::Win32::CloudFilters::CF_CALLBACK_TYPE Type;
        Windows::Win32::CloudFilters::CF_CALLBACK* Callback;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CloudFilters
{
    struct CF_SYNC_STATUS
    {
        uint32_t StructSize;
        uint32_t Code;
        uint32_t DescriptionOffset;
        uint32_t DescriptionLength;
        uint32_t DeviceIdOffset;
        uint32_t DeviceIdLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CloudFilters
{
    struct CF_OPERATION_INFO
    {
        uint32_t StructSize;
        Windows::Win32::CloudFilters::CF_OPERATION_TYPE Type;
        Windows::Win32::CloudFilters::CF_CONNECTION_KEY__ ConnectionKey;
        Windows::Win32::SystemServices::LARGE_INTEGER TransferKey;
        Windows::Win32::SystemServices::CORRELATION_VECTOR* CorrelationVector;
        Windows::Win32::CloudFilters::CF_SYNC_STATUS* SyncStatus;
        Windows::Win32::SystemServices::LARGE_INTEGER RequestKey;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CloudFilters
{
    struct CF_OPERATION_PARAMETERS
    {
        union _Anonymous_e__Union
        {
            struct _TransferData_e__Struct
            {
                Windows::Win32::CloudFilters::CF_OPERATION_TRANSFER_DATA_FLAGS Flags;
                Windows::Win32::SystemServices::NTSTATUS CompletionStatus;
                void* Buffer;
                Windows::Win32::SystemServices::LARGE_INTEGER Offset;
                Windows::Win32::SystemServices::LARGE_INTEGER Length;
            };
            struct _RetrieveData_e__Struct
            {
                Windows::Win32::CloudFilters::CF_OPERATION_RETRIEVE_DATA_FLAGS Flags;
                void* Buffer;
                Windows::Win32::SystemServices::LARGE_INTEGER Offset;
                Windows::Win32::SystemServices::LARGE_INTEGER Length;
                Windows::Win32::SystemServices::LARGE_INTEGER ReturnedLength;
            };
            struct _AckData_e__Struct
            {
                Windows::Win32::CloudFilters::CF_OPERATION_ACK_DATA_FLAGS Flags;
                Windows::Win32::SystemServices::NTSTATUS CompletionStatus;
                Windows::Win32::SystemServices::LARGE_INTEGER Offset;
                Windows::Win32::SystemServices::LARGE_INTEGER Length;
            };
            struct _RestartHydration_e__Struct
            {
                Windows::Win32::CloudFilters::CF_OPERATION_RESTART_HYDRATION_FLAGS Flags;
                Windows::Win32::CloudFilters::CF_FS_METADATA* FsMetadata;
                void* FileIdentity;
                uint32_t FileIdentityLength;
            };
            struct _TransferPlaceholders_e__Struct
            {
                Windows::Win32::CloudFilters::CF_OPERATION_TRANSFER_PLACEHOLDERS_FLAGS Flags;
                Windows::Win32::SystemServices::NTSTATUS CompletionStatus;
                Windows::Win32::SystemServices::LARGE_INTEGER PlaceholderTotalCount;
                Windows::Win32::CloudFilters::CF_PLACEHOLDER_CREATE_INFO* PlaceholderArray;
                uint32_t PlaceholderCount;
                uint32_t EntriesProcessed;
            };
            struct _AckDehydrate_e__Struct
            {
                Windows::Win32::CloudFilters::CF_OPERATION_ACK_DEHYDRATE_FLAGS Flags;
                Windows::Win32::SystemServices::NTSTATUS CompletionStatus;
                void* FileIdentity;
                uint32_t FileIdentityLength;
            };
            struct _AckRename_e__Struct
            {
                Windows::Win32::CloudFilters::CF_OPERATION_ACK_RENAME_FLAGS Flags;
                Windows::Win32::SystemServices::NTSTATUS CompletionStatus;
            };
            struct _AckDelete_e__Struct
            {
                Windows::Win32::CloudFilters::CF_OPERATION_ACK_DELETE_FLAGS Flags;
                Windows::Win32::SystemServices::NTSTATUS CompletionStatus;
            };
            _TransferData_e__Struct TransferData;
            _RetrieveData_e__Struct RetrieveData;
            _AckData_e__Struct AckData;
            _RestartHydration_e__Struct RestartHydration;
            _TransferPlaceholders_e__Struct TransferPlaceholders;
            _AckDehydrate_e__Struct AckDehydrate;
            _AckRename_e__Struct AckRename;
            _AckDelete_e__Struct AckDelete;
        };
        uint32_t ParamSize;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CloudFilters
{
    struct CF_FILE_RANGE
    {
        Windows::Win32::SystemServices::LARGE_INTEGER StartingOffset;
        Windows::Win32::SystemServices::LARGE_INTEGER Length;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CloudFilters
{
    struct CF_PLACEHOLDER_BASIC_INFO
    {
        Windows::Win32::CloudFilters::CF_PIN_STATE PinState;
        Windows::Win32::CloudFilters::CF_IN_SYNC_STATE InSyncState;
        Windows::Win32::SystemServices::LARGE_INTEGER FileId;
        Windows::Win32::SystemServices::LARGE_INTEGER SyncRootFileId;
        uint32_t FileIdentityLength;
        uint8_t FileIdentity[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CloudFilters
{
    struct CF_PLACEHOLDER_STANDARD_INFO
    {
        Windows::Win32::SystemServices::LARGE_INTEGER OnDiskDataSize;
        Windows::Win32::SystemServices::LARGE_INTEGER ValidatedDataSize;
        Windows::Win32::SystemServices::LARGE_INTEGER ModifiedDataSize;
        Windows::Win32::SystemServices::LARGE_INTEGER PropertiesSize;
        Windows::Win32::CloudFilters::CF_PIN_STATE PinState;
        Windows::Win32::CloudFilters::CF_IN_SYNC_STATE InSyncState;
        Windows::Win32::SystemServices::LARGE_INTEGER FileId;
        Windows::Win32::SystemServices::LARGE_INTEGER SyncRootFileId;
        uint32_t FileIdentityLength;
        uint8_t FileIdentity[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CloudFilters
{
    struct CF_SYNC_ROOT_BASIC_INFO
    {
        Windows::Win32::SystemServices::LARGE_INTEGER SyncRootFileId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CloudFilters
{
    struct CF_SYNC_ROOT_PROVIDER_INFO
    {
        Windows::Win32::CloudFilters::CF_SYNC_PROVIDER_STATUS ProviderStatus;
        uint16_t ProviderName[256];
        uint16_t ProviderVersion[256];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::CloudFilters
{
    struct CF_SYNC_ROOT_STANDARD_INFO
    {
        Windows::Win32::SystemServices::LARGE_INTEGER SyncRootFileId;
        Windows::Win32::CloudFilters::CF_HYDRATION_POLICY HydrationPolicy;
        Windows::Win32::CloudFilters::CF_POPULATION_POLICY PopulationPolicy;
        Windows::Win32::CloudFilters::CF_INSYNC_POLICY InSyncPolicy;
        Windows::Win32::CloudFilters::CF_HARDLINK_POLICY HardLinkPolicy;
        Windows::Win32::CloudFilters::CF_SYNC_PROVIDER_STATUS ProviderStatus;
        uint16_t ProviderName[256];
        uint16_t ProviderVersion[256];
        uint32_t SyncRootIdentityLength;
        uint8_t SyncRootIdentity[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Compression
{
    struct COMPRESS_ALLOCATION_ROUTINES
    {
        Windows::Win32::Compression::PFN_COMPRESS_ALLOCATE* Allocate;
        Windows::Win32::Compression::PFN_COMPRESS_FREE* Free;
        void* UserContext;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWP_BITMAP_ARRAY64_
    {
        uint8_t bitmapArray64[8];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWP_BYTE_ARRAY6
    {
        uint8_t byteArray6[6];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWP_BYTE_ARRAY16
    {
        uint8_t byteArray16[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWP_BYTE_BLOB
    {
        uint32_t size;
        uint8_t* data;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWP_TOKEN_INFORMATION
    {
        uint32_t sidCount;
        Windows::Win32::Security::SID_AND_ATTRIBUTES* sids;
        uint32_t restrictedSidCount;
        Windows::Win32::Security::SID_AND_ATTRIBUTES* restrictedSids;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWP_VALUE0
    {
        union _Anonymous_e__Union
        {
            uint8_t uint8;
            uint16_t uint16;
            uint32_t uint32;
            uint64_t* uint64;
            int8_t int8;
            int16_t int16;
            int32_t int32;
            int64_t* int64;
            float float32;
            double* double64;
            Windows::Win32::WindowsFiltering::FWP_BYTE_ARRAY16* byteArray16;
            Windows::Win32::WindowsFiltering::FWP_BYTE_BLOB* byteBlob;
            Windows::Win32::Security::SID* sid;
            Windows::Win32::WindowsFiltering::FWP_BYTE_BLOB* sd;
            Windows::Win32::WindowsFiltering::FWP_TOKEN_INFORMATION* tokenInformation;
            Windows::Win32::WindowsFiltering::FWP_BYTE_BLOB* tokenAccessInformation;
            uint16_t* unicodeString;
            Windows::Win32::WindowsFiltering::FWP_BYTE_ARRAY6* byteArray6;
            Windows::Win32::WindowsFiltering::FWP_BITMAP_ARRAY64_* bitmapArray64;
        };
        Windows::Win32::WindowsFiltering::FWP_DATA_TYPE type;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWP_V4_ADDR_AND_MASK
    {
        uint32_t addr;
        uint32_t mask;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWP_V6_ADDR_AND_MASK
    {
        uint8_t addr[16];
        uint8_t prefixLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWP_RANGE0
    {
        Windows::Win32::WindowsFiltering::FWP_VALUE0 valueLow;
        Windows::Win32::WindowsFiltering::FWP_VALUE0 valueHigh;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWP_CONDITION_VALUE0
    {
        union _Anonymous_e__Union
        {
            uint8_t uint8;
            uint16_t uint16;
            uint32_t uint32;
            uint64_t* uint64;
            int8_t int8;
            int16_t int16;
            int32_t int32;
            int64_t* int64;
            float float32;
            double* double64;
            Windows::Win32::WindowsFiltering::FWP_BYTE_ARRAY16* byteArray16;
            Windows::Win32::WindowsFiltering::FWP_BYTE_BLOB* byteBlob;
            Windows::Win32::Security::SID* sid;
            Windows::Win32::WindowsFiltering::FWP_BYTE_BLOB* sd;
            Windows::Win32::WindowsFiltering::FWP_TOKEN_INFORMATION* tokenInformation;
            Windows::Win32::WindowsFiltering::FWP_BYTE_BLOB* tokenAccessInformation;
            uint16_t* unicodeString;
            Windows::Win32::WindowsFiltering::FWP_BYTE_ARRAY6* byteArray6;
            Windows::Win32::WindowsFiltering::FWP_BITMAP_ARRAY64_* bitmapArray64;
            Windows::Win32::WindowsFiltering::FWP_V4_ADDR_AND_MASK* v4AddrMask;
            Windows::Win32::WindowsFiltering::FWP_V6_ADDR_AND_MASK* v6AddrMask;
            Windows::Win32::WindowsFiltering::FWP_RANGE0* rangeValue;
        };
        Windows::Win32::WindowsFiltering::FWP_DATA_TYPE type;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_DISPLAY_DATA0
    {
        uint16_t* name;
        uint16_t* description;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_VIRTUAL_IF_TUNNEL_INFO0
    {
        uint64_t virtualIfTunnelId;
        uint64_t trafficSelectorId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IKEEXT_PRESHARED_KEY_AUTHENTICATION0
    {
        Windows::Win32::WindowsFiltering::FWP_BYTE_BLOB presharedKey;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IKEEXT_PRESHARED_KEY_AUTHENTICATION1
    {
        Windows::Win32::WindowsFiltering::FWP_BYTE_BLOB presharedKey;
        uint32_t flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IKEEXT_CERT_ROOT_CONFIG0
    {
        Windows::Win32::WindowsFiltering::FWP_BYTE_BLOB certData;
        uint32_t flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IKEEXT_CERTIFICATE_AUTHENTICATION0
    {
        union _Anonymous1_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t inboundRootArraySize;
                Windows::Win32::WindowsFiltering::IKEEXT_CERT_ROOT_CONFIG0* inboundRootArray;
            };
            _Anonymous_e__Struct Anonymous;
            Windows::Win32::WindowsFiltering::IKEEXT_CERT_ROOT_CONFIG0* inboundEnterpriseStoreConfig;
            Windows::Win32::WindowsFiltering::IKEEXT_CERT_ROOT_CONFIG0* inboundTrustedRootStoreConfig;
        };
        union _Anonymous2_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t outboundRootArraySize;
                Windows::Win32::WindowsFiltering::IKEEXT_CERT_ROOT_CONFIG0* outboundRootArray;
            };
            _Anonymous_e__Struct Anonymous;
            Windows::Win32::WindowsFiltering::IKEEXT_CERT_ROOT_CONFIG0* outboundEnterpriseStoreConfig;
            Windows::Win32::WindowsFiltering::IKEEXT_CERT_ROOT_CONFIG0* outboundTrustedRootStoreConfig;
        };
        Windows::Win32::WindowsFiltering::IKEEXT_CERT_CONFIG_TYPE inboundConfigType;
        _Anonymous1_e__Union Anonymous1;
        Windows::Win32::WindowsFiltering::IKEEXT_CERT_CONFIG_TYPE outboundConfigType;
        _Anonymous2_e__Union Anonymous2;
        uint32_t flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IKEEXT_CERTIFICATE_AUTHENTICATION1
    {
        union _Anonymous1_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t inboundRootArraySize;
                Windows::Win32::WindowsFiltering::IKEEXT_CERT_ROOT_CONFIG0* inboundRootArray;
            };
            _Anonymous_e__Struct Anonymous;
            Windows::Win32::WindowsFiltering::IKEEXT_CERT_ROOT_CONFIG0* inboundEnterpriseStoreConfig;
            Windows::Win32::WindowsFiltering::IKEEXT_CERT_ROOT_CONFIG0* inboundTrustedRootStoreConfig;
        };
        union _Anonymous2_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t outboundRootArraySize;
                Windows::Win32::WindowsFiltering::IKEEXT_CERT_ROOT_CONFIG0* outboundRootArray;
            };
            _Anonymous_e__Struct Anonymous;
            Windows::Win32::WindowsFiltering::IKEEXT_CERT_ROOT_CONFIG0* outboundEnterpriseStoreConfig;
            Windows::Win32::WindowsFiltering::IKEEXT_CERT_ROOT_CONFIG0* outboundTrustedRootStoreConfig;
        };
        Windows::Win32::WindowsFiltering::IKEEXT_CERT_CONFIG_TYPE inboundConfigType;
        _Anonymous1_e__Union Anonymous1;
        Windows::Win32::WindowsFiltering::IKEEXT_CERT_CONFIG_TYPE outboundConfigType;
        _Anonymous2_e__Union Anonymous2;
        uint32_t flags;
        Windows::Win32::WindowsFiltering::FWP_BYTE_BLOB localCertLocationUrl;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IKEEXT_CERT_EKUS0
    {
        uint32_t numEku;
        int8_t** eku;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IKEEXT_CERT_NAME0
    {
        Windows::Win32::WindowsFiltering::IKEEXT_CERT_CRITERIA_NAME_TYPE nameType;
        uint16_t* certName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IKEEXT_CERTIFICATE_CRITERIA0
    {
        Windows::Win32::WindowsFiltering::FWP_BYTE_BLOB certData;
        Windows::Win32::WindowsFiltering::FWP_BYTE_BLOB certHash;
        Windows::Win32::WindowsFiltering::IKEEXT_CERT_EKUS0* eku;
        Windows::Win32::WindowsFiltering::IKEEXT_CERT_NAME0* name;
        uint32_t flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IKEEXT_CERTIFICATE_AUTHENTICATION2
    {
        union _Anonymous1_e__Union
        {
            struct _Anonymous1_e__Struct
            {
                uint32_t inboundRootArraySize;
                Windows::Win32::WindowsFiltering::IKEEXT_CERTIFICATE_CRITERIA0* inboundRootCriteria;
            };
            struct _Anonymous2_e__Struct
            {
                uint32_t inboundEnterpriseStoreArraySize;
                Windows::Win32::WindowsFiltering::IKEEXT_CERTIFICATE_CRITERIA0* inboundEnterpriseStoreCriteria;
            };
            struct _Anonymous3_e__Struct
            {
                uint32_t inboundRootStoreArraySize;
                Windows::Win32::WindowsFiltering::IKEEXT_CERTIFICATE_CRITERIA0* inboundTrustedRootStoreCriteria;
            };
            _Anonymous1_e__Struct Anonymous1;
            _Anonymous2_e__Struct Anonymous2;
            _Anonymous3_e__Struct Anonymous3;
        };
        union _Anonymous2_e__Union
        {
            struct _Anonymous1_e__Struct
            {
                uint32_t outboundRootArraySize;
                Windows::Win32::WindowsFiltering::IKEEXT_CERTIFICATE_CRITERIA0* outboundRootCriteria;
            };
            struct _Anonymous2_e__Struct
            {
                uint32_t outboundEnterpriseStoreArraySize;
                Windows::Win32::WindowsFiltering::IKEEXT_CERTIFICATE_CRITERIA0* outboundEnterpriseStoreCriteria;
            };
            struct _Anonymous3_e__Struct
            {
                uint32_t outboundRootStoreArraySize;
                Windows::Win32::WindowsFiltering::IKEEXT_CERTIFICATE_CRITERIA0* outboundTrustedRootStoreCriteria;
            };
            _Anonymous1_e__Struct Anonymous1;
            _Anonymous2_e__Struct Anonymous2;
            _Anonymous3_e__Struct Anonymous3;
        };
        Windows::Win32::WindowsFiltering::IKEEXT_CERT_CONFIG_TYPE inboundConfigType;
        _Anonymous1_e__Union Anonymous1;
        Windows::Win32::WindowsFiltering::IKEEXT_CERT_CONFIG_TYPE outboundConfigType;
        _Anonymous2_e__Union Anonymous2;
        uint32_t flags;
        Windows::Win32::WindowsFiltering::FWP_BYTE_BLOB localCertLocationUrl;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IKEEXT_IPV6_CGA_AUTHENTICATION0
    {
        uint16_t* keyContainerName;
        uint16_t* cspName;
        uint32_t cspType;
        Windows::Win32::WindowsFiltering::FWP_BYTE_ARRAY16 cgaModifier;
        uint8_t cgaCollisionCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IKEEXT_KERBEROS_AUTHENTICATION0
    {
        uint32_t flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IKEEXT_KERBEROS_AUTHENTICATION1
    {
        uint32_t flags;
        uint16_t* proxyServer;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IKEEXT_RESERVED_AUTHENTICATION0
    {
        uint32_t flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IKEEXT_NTLM_V2_AUTHENTICATION0
    {
        uint32_t flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IKEEXT_EAP_AUTHENTICATION0
    {
        uint32_t flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IKEEXT_AUTHENTICATION_METHOD0
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::WindowsFiltering::IKEEXT_PRESHARED_KEY_AUTHENTICATION0 presharedKeyAuthentication;
            Windows::Win32::WindowsFiltering::IKEEXT_CERTIFICATE_AUTHENTICATION0 certificateAuthentication;
            Windows::Win32::WindowsFiltering::IKEEXT_KERBEROS_AUTHENTICATION0 kerberosAuthentication;
            Windows::Win32::WindowsFiltering::IKEEXT_NTLM_V2_AUTHENTICATION0 ntlmV2Authentication;
            Windows::Win32::WindowsFiltering::IKEEXT_CERTIFICATE_AUTHENTICATION0 sslAuthentication;
            Windows::Win32::WindowsFiltering::IKEEXT_IPV6_CGA_AUTHENTICATION0 cgaAuthentication;
        };
        Windows::Win32::WindowsFiltering::IKEEXT_AUTHENTICATION_METHOD_TYPE authenticationMethodType;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IKEEXT_AUTHENTICATION_METHOD1
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::WindowsFiltering::IKEEXT_PRESHARED_KEY_AUTHENTICATION1 presharedKeyAuthentication;
            Windows::Win32::WindowsFiltering::IKEEXT_CERTIFICATE_AUTHENTICATION1 certificateAuthentication;
            Windows::Win32::WindowsFiltering::IKEEXT_KERBEROS_AUTHENTICATION0 kerberosAuthentication;
            Windows::Win32::WindowsFiltering::IKEEXT_NTLM_V2_AUTHENTICATION0 ntlmV2Authentication;
            Windows::Win32::WindowsFiltering::IKEEXT_CERTIFICATE_AUTHENTICATION1 sslAuthentication;
            Windows::Win32::WindowsFiltering::IKEEXT_IPV6_CGA_AUTHENTICATION0 cgaAuthentication;
            Windows::Win32::WindowsFiltering::IKEEXT_EAP_AUTHENTICATION0 eapAuthentication;
        };
        Windows::Win32::WindowsFiltering::IKEEXT_AUTHENTICATION_METHOD_TYPE authenticationMethodType;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IKEEXT_AUTHENTICATION_METHOD2
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::WindowsFiltering::IKEEXT_PRESHARED_KEY_AUTHENTICATION1 presharedKeyAuthentication;
            Windows::Win32::WindowsFiltering::IKEEXT_CERTIFICATE_AUTHENTICATION2 certificateAuthentication;
            Windows::Win32::WindowsFiltering::IKEEXT_KERBEROS_AUTHENTICATION1 kerberosAuthentication;
            Windows::Win32::WindowsFiltering::IKEEXT_RESERVED_AUTHENTICATION0 reservedAuthentication;
            Windows::Win32::WindowsFiltering::IKEEXT_NTLM_V2_AUTHENTICATION0 ntlmV2Authentication;
            Windows::Win32::WindowsFiltering::IKEEXT_CERTIFICATE_AUTHENTICATION2 sslAuthentication;
            Windows::Win32::WindowsFiltering::IKEEXT_IPV6_CGA_AUTHENTICATION0 cgaAuthentication;
            Windows::Win32::WindowsFiltering::IKEEXT_EAP_AUTHENTICATION0 eapAuthentication;
        };
        Windows::Win32::WindowsFiltering::IKEEXT_AUTHENTICATION_METHOD_TYPE authenticationMethodType;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IKEEXT_CIPHER_ALGORITHM0
    {
        Windows::Win32::WindowsFiltering::IKEEXT_CIPHER_TYPE algoIdentifier;
        uint32_t keyLen;
        uint32_t rounds;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IKEEXT_INTEGRITY_ALGORITHM0
    {
        Windows::Win32::WindowsFiltering::IKEEXT_INTEGRITY_TYPE algoIdentifier;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IKEEXT_PROPOSAL0
    {
        Windows::Win32::WindowsFiltering::IKEEXT_CIPHER_ALGORITHM0 cipherAlgorithm;
        Windows::Win32::WindowsFiltering::IKEEXT_INTEGRITY_ALGORITHM0 integrityAlgorithm;
        uint32_t maxLifetimeSeconds;
        Windows::Win32::WindowsFiltering::IKEEXT_DH_GROUP dhGroup;
        uint32_t quickModeLimit;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IKEEXT_POLICY0
    {
        uint32_t softExpirationTime;
        uint32_t numAuthenticationMethods;
        Windows::Win32::WindowsFiltering::IKEEXT_AUTHENTICATION_METHOD0* authenticationMethods;
        Windows::Win32::WindowsFiltering::IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE initiatorImpersonationType;
        uint32_t numIkeProposals;
        Windows::Win32::WindowsFiltering::IKEEXT_PROPOSAL0* ikeProposals;
        uint32_t flags;
        uint32_t maxDynamicFilters;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IKEEXT_POLICY1
    {
        uint32_t softExpirationTime;
        uint32_t numAuthenticationMethods;
        Windows::Win32::WindowsFiltering::IKEEXT_AUTHENTICATION_METHOD1* authenticationMethods;
        Windows::Win32::WindowsFiltering::IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE initiatorImpersonationType;
        uint32_t numIkeProposals;
        Windows::Win32::WindowsFiltering::IKEEXT_PROPOSAL0* ikeProposals;
        uint32_t flags;
        uint32_t maxDynamicFilters;
        uint32_t retransmitDurationSecs;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IKEEXT_POLICY2
    {
        uint32_t softExpirationTime;
        uint32_t numAuthenticationMethods;
        Windows::Win32::WindowsFiltering::IKEEXT_AUTHENTICATION_METHOD2* authenticationMethods;
        Windows::Win32::WindowsFiltering::IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE initiatorImpersonationType;
        uint32_t numIkeProposals;
        Windows::Win32::WindowsFiltering::IKEEXT_PROPOSAL0* ikeProposals;
        uint32_t flags;
        uint32_t maxDynamicFilters;
        uint32_t retransmitDurationSecs;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IKEEXT_EM_POLICY0
    {
        uint32_t numAuthenticationMethods;
        Windows::Win32::WindowsFiltering::IKEEXT_AUTHENTICATION_METHOD0* authenticationMethods;
        Windows::Win32::WindowsFiltering::IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE initiatorImpersonationType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IKEEXT_EM_POLICY1
    {
        uint32_t numAuthenticationMethods;
        Windows::Win32::WindowsFiltering::IKEEXT_AUTHENTICATION_METHOD1* authenticationMethods;
        Windows::Win32::WindowsFiltering::IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE initiatorImpersonationType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IKEEXT_EM_POLICY2
    {
        uint32_t numAuthenticationMethods;
        Windows::Win32::WindowsFiltering::IKEEXT_AUTHENTICATION_METHOD2* authenticationMethods;
        Windows::Win32::WindowsFiltering::IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE initiatorImpersonationType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS0
    {
        uint32_t currentActiveMainModes;
        uint32_t totalMainModesStarted;
        uint32_t totalSuccessfulMainModes;
        uint32_t totalFailedMainModes;
        uint32_t totalResponderMainModes;
        uint32_t currentNewResponderMainModes;
        uint32_t currentActiveQuickModes;
        uint32_t totalQuickModesStarted;
        uint32_t totalSuccessfulQuickModes;
        uint32_t totalFailedQuickModes;
        uint32_t totalAcquires;
        uint32_t totalReinitAcquires;
        uint32_t currentActiveExtendedModes;
        uint32_t totalExtendedModesStarted;
        uint32_t totalSuccessfulExtendedModes;
        uint32_t totalFailedExtendedModes;
        uint32_t totalImpersonationExtendedModes;
        uint32_t totalImpersonationMainModes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS1
    {
        uint32_t currentActiveMainModes;
        uint32_t totalMainModesStarted;
        uint32_t totalSuccessfulMainModes;
        uint32_t totalFailedMainModes;
        uint32_t totalResponderMainModes;
        uint32_t currentNewResponderMainModes;
        uint32_t currentActiveQuickModes;
        uint32_t totalQuickModesStarted;
        uint32_t totalSuccessfulQuickModes;
        uint32_t totalFailedQuickModes;
        uint32_t totalAcquires;
        uint32_t totalReinitAcquires;
        uint32_t currentActiveExtendedModes;
        uint32_t totalExtendedModesStarted;
        uint32_t totalSuccessfulExtendedModes;
        uint32_t totalFailedExtendedModes;
        uint32_t totalImpersonationExtendedModes;
        uint32_t totalImpersonationMainModes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IKEEXT_KEYMODULE_STATISTICS0
    {
        Windows::Win32::WindowsFiltering::IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS0 v4Statistics;
        Windows::Win32::WindowsFiltering::IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS0 v6Statistics;
        uint32_t errorFrequencyTable[97];
        uint32_t mainModeNegotiationTime;
        uint32_t quickModeNegotiationTime;
        uint32_t extendedModeNegotiationTime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IKEEXT_KEYMODULE_STATISTICS1
    {
        Windows::Win32::WindowsFiltering::IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS1 v4Statistics;
        Windows::Win32::WindowsFiltering::IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS1 v6Statistics;
        uint32_t errorFrequencyTable[97];
        uint32_t mainModeNegotiationTime;
        uint32_t quickModeNegotiationTime;
        uint32_t extendedModeNegotiationTime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS0
    {
        uint32_t totalSocketReceiveFailures;
        uint32_t totalSocketSendFailures;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS1
    {
        uint32_t totalSocketReceiveFailures;
        uint32_t totalSocketSendFailures;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IKEEXT_COMMON_STATISTICS0
    {
        Windows::Win32::WindowsFiltering::IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS0 v4Statistics;
        Windows::Win32::WindowsFiltering::IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS0 v6Statistics;
        uint32_t totalPacketsReceived;
        uint32_t totalInvalidPacketsReceived;
        uint32_t currentQueuedWorkitems;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IKEEXT_COMMON_STATISTICS1
    {
        Windows::Win32::WindowsFiltering::IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS1 v4Statistics;
        Windows::Win32::WindowsFiltering::IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS1 v6Statistics;
        uint32_t totalPacketsReceived;
        uint32_t totalInvalidPacketsReceived;
        uint32_t currentQueuedWorkitems;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IKEEXT_STATISTICS0
    {
        Windows::Win32::WindowsFiltering::IKEEXT_KEYMODULE_STATISTICS0 ikeStatistics;
        Windows::Win32::WindowsFiltering::IKEEXT_KEYMODULE_STATISTICS0 authipStatistics;
        Windows::Win32::WindowsFiltering::IKEEXT_COMMON_STATISTICS0 commonStatistics;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IKEEXT_STATISTICS1
    {
        Windows::Win32::WindowsFiltering::IKEEXT_KEYMODULE_STATISTICS1 ikeStatistics;
        Windows::Win32::WindowsFiltering::IKEEXT_KEYMODULE_STATISTICS1 authipStatistics;
        Windows::Win32::WindowsFiltering::IKEEXT_KEYMODULE_STATISTICS1 ikeV2Statistics;
        Windows::Win32::WindowsFiltering::IKEEXT_COMMON_STATISTICS1 commonStatistics;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IKEEXT_TRAFFIC0
    {
        union _Anonymous1_e__Union
        {
            uint32_t localV4Address;
            uint8_t localV6Address[16];
        };
        union _Anonymous2_e__Union
        {
            uint32_t remoteV4Address;
            uint8_t remoteV6Address[16];
        };
        Windows::Win32::WindowsFiltering::FWP_IP_VERSION ipVersion;
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
        uint64_t authIpFilterId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IKEEXT_COOKIE_PAIR0
    {
        uint64_t initiator;
        uint64_t responder;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IKEEXT_CERTIFICATE_CREDENTIAL0
    {
        Windows::Win32::WindowsFiltering::FWP_BYTE_BLOB subjectName;
        Windows::Win32::WindowsFiltering::FWP_BYTE_BLOB certHash;
        uint32_t flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IKEEXT_NAME_CREDENTIAL0
    {
        uint16_t* principalName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IKEEXT_CREDENTIAL0
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::WindowsFiltering::IKEEXT_PRESHARED_KEY_AUTHENTICATION0* presharedKey;
            Windows::Win32::WindowsFiltering::IKEEXT_CERTIFICATE_CREDENTIAL0* certificate;
            Windows::Win32::WindowsFiltering::IKEEXT_NAME_CREDENTIAL0* name;
        };
        Windows::Win32::WindowsFiltering::IKEEXT_AUTHENTICATION_METHOD_TYPE authenticationMethodType;
        Windows::Win32::WindowsFiltering::IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE impersonationType;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IKEEXT_CREDENTIAL_PAIR0
    {
        Windows::Win32::WindowsFiltering::IKEEXT_CREDENTIAL0 localCredentials;
        Windows::Win32::WindowsFiltering::IKEEXT_CREDENTIAL0 peerCredentials;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IKEEXT_CREDENTIALS0
    {
        uint32_t numCredentials;
        Windows::Win32::WindowsFiltering::IKEEXT_CREDENTIAL_PAIR0* credentials;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IKEEXT_SA_DETAILS0
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::WindowsFiltering::IPSEC_V4_UDP_ENCAPSULATION0* v4UdpEncapsulation;
        };
        uint64_t saId;
        Windows::Win32::WindowsFiltering::IKEEXT_KEY_MODULE_TYPE keyModuleType;
        Windows::Win32::WindowsFiltering::FWP_IP_VERSION ipVersion;
        _Anonymous_e__Union Anonymous;
        Windows::Win32::WindowsFiltering::IKEEXT_TRAFFIC0 ikeTraffic;
        Windows::Win32::WindowsFiltering::IKEEXT_PROPOSAL0 ikeProposal;
        Windows::Win32::WindowsFiltering::IKEEXT_COOKIE_PAIR0 cookiePair;
        Windows::Win32::WindowsFiltering::IKEEXT_CREDENTIALS0 ikeCredentials;
        ::win32::guid ikePolicyKey;
        uint64_t virtualIfTunnelId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IKEEXT_CERTIFICATE_CREDENTIAL1
    {
        Windows::Win32::WindowsFiltering::FWP_BYTE_BLOB subjectName;
        Windows::Win32::WindowsFiltering::FWP_BYTE_BLOB certHash;
        uint32_t flags;
        Windows::Win32::WindowsFiltering::FWP_BYTE_BLOB certificate;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IKEEXT_CREDENTIAL1
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::WindowsFiltering::IKEEXT_PRESHARED_KEY_AUTHENTICATION1* presharedKey;
            Windows::Win32::WindowsFiltering::IKEEXT_CERTIFICATE_CREDENTIAL1* certificate;
            Windows::Win32::WindowsFiltering::IKEEXT_NAME_CREDENTIAL0* name;
        };
        Windows::Win32::WindowsFiltering::IKEEXT_AUTHENTICATION_METHOD_TYPE authenticationMethodType;
        Windows::Win32::WindowsFiltering::IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE impersonationType;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IKEEXT_CREDENTIAL_PAIR1
    {
        Windows::Win32::WindowsFiltering::IKEEXT_CREDENTIAL1 localCredentials;
        Windows::Win32::WindowsFiltering::IKEEXT_CREDENTIAL1 peerCredentials;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IKEEXT_CREDENTIALS1
    {
        uint32_t numCredentials;
        Windows::Win32::WindowsFiltering::IKEEXT_CREDENTIAL_PAIR1* credentials;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IKEEXT_SA_DETAILS1
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::WindowsFiltering::IPSEC_V4_UDP_ENCAPSULATION0* v4UdpEncapsulation;
        };
        uint64_t saId;
        Windows::Win32::WindowsFiltering::IKEEXT_KEY_MODULE_TYPE keyModuleType;
        Windows::Win32::WindowsFiltering::FWP_IP_VERSION ipVersion;
        _Anonymous_e__Union Anonymous;
        Windows::Win32::WindowsFiltering::IKEEXT_TRAFFIC0 ikeTraffic;
        Windows::Win32::WindowsFiltering::IKEEXT_PROPOSAL0 ikeProposal;
        Windows::Win32::WindowsFiltering::IKEEXT_COOKIE_PAIR0 cookiePair;
        Windows::Win32::WindowsFiltering::IKEEXT_CREDENTIALS1 ikeCredentials;
        ::win32::guid ikePolicyKey;
        uint64_t virtualIfTunnelId;
        Windows::Win32::WindowsFiltering::FWP_BYTE_BLOB correlationKey;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IKEEXT_CREDENTIAL2
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::WindowsFiltering::IKEEXT_PRESHARED_KEY_AUTHENTICATION1* presharedKey;
            Windows::Win32::WindowsFiltering::IKEEXT_CERTIFICATE_CREDENTIAL1* certificate;
            Windows::Win32::WindowsFiltering::IKEEXT_NAME_CREDENTIAL0* name;
        };
        Windows::Win32::WindowsFiltering::IKEEXT_AUTHENTICATION_METHOD_TYPE authenticationMethodType;
        Windows::Win32::WindowsFiltering::IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE impersonationType;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IKEEXT_CREDENTIAL_PAIR2
    {
        Windows::Win32::WindowsFiltering::IKEEXT_CREDENTIAL2 localCredentials;
        Windows::Win32::WindowsFiltering::IKEEXT_CREDENTIAL2 peerCredentials;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IKEEXT_CREDENTIALS2
    {
        uint32_t numCredentials;
        Windows::Win32::WindowsFiltering::IKEEXT_CREDENTIAL_PAIR2* credentials;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IKEEXT_SA_DETAILS2
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::WindowsFiltering::IPSEC_V4_UDP_ENCAPSULATION0* v4UdpEncapsulation;
        };
        uint64_t saId;
        Windows::Win32::WindowsFiltering::IKEEXT_KEY_MODULE_TYPE keyModuleType;
        Windows::Win32::WindowsFiltering::FWP_IP_VERSION ipVersion;
        _Anonymous_e__Union Anonymous;
        Windows::Win32::WindowsFiltering::IKEEXT_TRAFFIC0 ikeTraffic;
        Windows::Win32::WindowsFiltering::IKEEXT_PROPOSAL0 ikeProposal;
        Windows::Win32::WindowsFiltering::IKEEXT_COOKIE_PAIR0 cookiePair;
        Windows::Win32::WindowsFiltering::IKEEXT_CREDENTIALS2 ikeCredentials;
        ::win32::guid ikePolicyKey;
        uint64_t virtualIfTunnelId;
        Windows::Win32::WindowsFiltering::FWP_BYTE_BLOB correlationKey;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IKEEXT_SA_ENUM_TEMPLATE0
    {
        Windows::Win32::WindowsFiltering::FWP_CONDITION_VALUE0 localSubNet;
        Windows::Win32::WindowsFiltering::FWP_CONDITION_VALUE0 remoteSubNet;
        Windows::Win32::WindowsFiltering::FWP_BYTE_BLOB localMainModeCertHash;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_SA_LIFETIME0
    {
        uint32_t lifetimeSeconds;
        uint32_t lifetimeKilobytes;
        uint32_t lifetimePackets;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_AUTH_TRANSFORM_ID0
    {
        Windows::Win32::WindowsFiltering::IPSEC_AUTH_TYPE authType;
        uint8_t authConfig;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_AUTH_TRANSFORM0
    {
        Windows::Win32::WindowsFiltering::IPSEC_AUTH_TRANSFORM_ID0 authTransformId;
        ::win32::guid* cryptoModuleId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_CIPHER_TRANSFORM_ID0
    {
        Windows::Win32::WindowsFiltering::IPSEC_CIPHER_TYPE cipherType;
        uint8_t cipherConfig;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_CIPHER_TRANSFORM0
    {
        Windows::Win32::WindowsFiltering::IPSEC_CIPHER_TRANSFORM_ID0 cipherTransformId;
        ::win32::guid* cryptoModuleId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_AUTH_AND_CIPHER_TRANSFORM0
    {
        Windows::Win32::WindowsFiltering::IPSEC_AUTH_TRANSFORM0 authTransform;
        Windows::Win32::WindowsFiltering::IPSEC_CIPHER_TRANSFORM0 cipherTransform;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_SA_TRANSFORM0
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::WindowsFiltering::IPSEC_AUTH_TRANSFORM0* ahTransform;
            Windows::Win32::WindowsFiltering::IPSEC_AUTH_TRANSFORM0* espAuthTransform;
            Windows::Win32::WindowsFiltering::IPSEC_CIPHER_TRANSFORM0* espCipherTransform;
            Windows::Win32::WindowsFiltering::IPSEC_AUTH_AND_CIPHER_TRANSFORM0* espAuthAndCipherTransform;
            Windows::Win32::WindowsFiltering::IPSEC_AUTH_TRANSFORM0* espAuthFwTransform;
        };
        Windows::Win32::WindowsFiltering::IPSEC_TRANSFORM_TYPE ipsecTransformType;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_PROPOSAL0
    {
        Windows::Win32::WindowsFiltering::IPSEC_SA_LIFETIME0 lifetime;
        uint32_t numSaTransforms;
        Windows::Win32::WindowsFiltering::IPSEC_SA_TRANSFORM0* saTransforms;
        Windows::Win32::WindowsFiltering::IPSEC_PFS_GROUP pfsGroup;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_SA_IDLE_TIMEOUT0
    {
        uint32_t idleTimeoutSeconds;
        uint32_t idleTimeoutSecondsFailOver;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_TRAFFIC_SELECTOR0_
    {
        union _Anonymous1_e__Union
        {
            uint32_t startV4Address;
            uint8_t startV6Address[16];
        };
        union _Anonymous2_e__Union
        {
            uint32_t endV4Address;
            uint8_t endV6Address[16];
        };
        uint8_t protocolId;
        uint16_t portStart;
        uint16_t portEnd;
        Windows::Win32::WindowsFiltering::FWP_IP_VERSION ipVersion;
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_TRAFFIC_SELECTOR_POLICY0_
    {
        uint32_t flags;
        uint32_t numLocalTrafficSelectors;
        Windows::Win32::WindowsFiltering::IPSEC_TRAFFIC_SELECTOR0_* localTrafficSelectors;
        uint32_t numRemoteTrafficSelectors;
        Windows::Win32::WindowsFiltering::IPSEC_TRAFFIC_SELECTOR0_* remoteTrafficSelectors;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_TRANSPORT_POLICY0
    {
        uint32_t numIpsecProposals;
        Windows::Win32::WindowsFiltering::IPSEC_PROPOSAL0* ipsecProposals;
        uint32_t flags;
        uint32_t ndAllowClearTimeoutSeconds;
        Windows::Win32::WindowsFiltering::IPSEC_SA_IDLE_TIMEOUT0 saIdleTimeout;
        Windows::Win32::WindowsFiltering::IKEEXT_EM_POLICY0* emPolicy;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_TRANSPORT_POLICY1
    {
        uint32_t numIpsecProposals;
        Windows::Win32::WindowsFiltering::IPSEC_PROPOSAL0* ipsecProposals;
        uint32_t flags;
        uint32_t ndAllowClearTimeoutSeconds;
        Windows::Win32::WindowsFiltering::IPSEC_SA_IDLE_TIMEOUT0 saIdleTimeout;
        Windows::Win32::WindowsFiltering::IKEEXT_EM_POLICY1* emPolicy;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_TRANSPORT_POLICY2
    {
        uint32_t numIpsecProposals;
        Windows::Win32::WindowsFiltering::IPSEC_PROPOSAL0* ipsecProposals;
        uint32_t flags;
        uint32_t ndAllowClearTimeoutSeconds;
        Windows::Win32::WindowsFiltering::IPSEC_SA_IDLE_TIMEOUT0 saIdleTimeout;
        Windows::Win32::WindowsFiltering::IKEEXT_EM_POLICY2* emPolicy;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_TUNNEL_ENDPOINTS0
    {
        union _Anonymous1_e__Union
        {
            uint32_t localV4Address;
            uint8_t localV6Address[16];
        };
        union _Anonymous2_e__Union
        {
            uint32_t remoteV4Address;
            uint8_t remoteV6Address[16];
        };
        Windows::Win32::WindowsFiltering::FWP_IP_VERSION ipVersion;
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_TUNNEL_ENDPOINT0
    {
        union _Anonymous_e__Union
        {
            uint32_t v4Address;
            uint8_t v6Address[16];
        };
        Windows::Win32::WindowsFiltering::FWP_IP_VERSION ipVersion;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_TUNNEL_ENDPOINTS2
    {
        union _Anonymous1_e__Union
        {
            uint32_t localV4Address;
            uint8_t localV6Address[16];
        };
        union _Anonymous2_e__Union
        {
            uint32_t remoteV4Address;
            uint8_t remoteV6Address[16];
        };
        Windows::Win32::WindowsFiltering::FWP_IP_VERSION ipVersion;
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
        uint64_t localIfLuid;
        uint16_t* remoteFqdn;
        uint32_t numAddresses;
        Windows::Win32::WindowsFiltering::IPSEC_TUNNEL_ENDPOINT0* remoteAddresses;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_TUNNEL_ENDPOINTS1
    {
        union _Anonymous1_e__Union
        {
            uint32_t localV4Address;
            uint8_t localV6Address[16];
        };
        union _Anonymous2_e__Union
        {
            uint32_t remoteV4Address;
            uint8_t remoteV6Address[16];
        };
        Windows::Win32::WindowsFiltering::FWP_IP_VERSION ipVersion;
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
        uint64_t localIfLuid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_TUNNEL_POLICY0
    {
        uint32_t flags;
        uint32_t numIpsecProposals;
        Windows::Win32::WindowsFiltering::IPSEC_PROPOSAL0* ipsecProposals;
        Windows::Win32::WindowsFiltering::IPSEC_TUNNEL_ENDPOINTS0 tunnelEndpoints;
        Windows::Win32::WindowsFiltering::IPSEC_SA_IDLE_TIMEOUT0 saIdleTimeout;
        Windows::Win32::WindowsFiltering::IKEEXT_EM_POLICY0* emPolicy;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_TUNNEL_POLICY1
    {
        uint32_t flags;
        uint32_t numIpsecProposals;
        Windows::Win32::WindowsFiltering::IPSEC_PROPOSAL0* ipsecProposals;
        Windows::Win32::WindowsFiltering::IPSEC_TUNNEL_ENDPOINTS1 tunnelEndpoints;
        Windows::Win32::WindowsFiltering::IPSEC_SA_IDLE_TIMEOUT0 saIdleTimeout;
        Windows::Win32::WindowsFiltering::IKEEXT_EM_POLICY1* emPolicy;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_TUNNEL_POLICY2
    {
        uint32_t flags;
        uint32_t numIpsecProposals;
        Windows::Win32::WindowsFiltering::IPSEC_PROPOSAL0* ipsecProposals;
        Windows::Win32::WindowsFiltering::IPSEC_TUNNEL_ENDPOINTS2 tunnelEndpoints;
        Windows::Win32::WindowsFiltering::IPSEC_SA_IDLE_TIMEOUT0 saIdleTimeout;
        Windows::Win32::WindowsFiltering::IKEEXT_EM_POLICY2* emPolicy;
        uint32_t fwdPathSaLifetime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_TUNNEL_POLICY3_
    {
        uint32_t flags;
        uint32_t numIpsecProposals;
        Windows::Win32::WindowsFiltering::IPSEC_PROPOSAL0* ipsecProposals;
        Windows::Win32::WindowsFiltering::IPSEC_TUNNEL_ENDPOINTS2 tunnelEndpoints;
        Windows::Win32::WindowsFiltering::IPSEC_SA_IDLE_TIMEOUT0 saIdleTimeout;
        Windows::Win32::WindowsFiltering::IKEEXT_EM_POLICY2* emPolicy;
        uint32_t fwdPathSaLifetime;
        uint32_t compartmentId;
        uint32_t numTrafficSelectorPolicy;
        Windows::Win32::WindowsFiltering::IPSEC_TRAFFIC_SELECTOR_POLICY0_* trafficSelectorPolicies;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_KEYING_POLICY0
    {
        uint32_t numKeyMods;
        ::win32::guid* keyModKeys;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_KEYING_POLICY1
    {
        uint32_t numKeyMods;
        ::win32::guid* keyModKeys;
        uint32_t flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_AGGREGATE_SA_STATISTICS0
    {
        uint32_t activeSas;
        uint32_t pendingSaNegotiations;
        uint32_t totalSasAdded;
        uint32_t totalSasDeleted;
        uint32_t successfulRekeys;
        uint32_t activeTunnels;
        uint32_t offloadedSas;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_ESP_DROP_PACKET_STATISTICS0
    {
        uint32_t invalidSpisOnInbound;
        uint32_t decryptionFailuresOnInbound;
        uint32_t authenticationFailuresOnInbound;
        uint32_t replayCheckFailuresOnInbound;
        uint32_t saNotInitializedOnInbound;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_AH_DROP_PACKET_STATISTICS0
    {
        uint32_t invalidSpisOnInbound;
        uint32_t authenticationFailuresOnInbound;
        uint32_t replayCheckFailuresOnInbound;
        uint32_t saNotInitializedOnInbound;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_AGGREGATE_DROP_PACKET_STATISTICS0
    {
        uint32_t invalidSpisOnInbound;
        uint32_t decryptionFailuresOnInbound;
        uint32_t authenticationFailuresOnInbound;
        uint32_t udpEspValidationFailuresOnInbound;
        uint32_t replayCheckFailuresOnInbound;
        uint32_t invalidClearTextInbound;
        uint32_t saNotInitializedOnInbound;
        uint32_t receiveOverIncorrectSaInbound;
        uint32_t secureReceivesNotMatchingFilters;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_AGGREGATE_DROP_PACKET_STATISTICS1
    {
        uint32_t invalidSpisOnInbound;
        uint32_t decryptionFailuresOnInbound;
        uint32_t authenticationFailuresOnInbound;
        uint32_t udpEspValidationFailuresOnInbound;
        uint32_t replayCheckFailuresOnInbound;
        uint32_t invalidClearTextInbound;
        uint32_t saNotInitializedOnInbound;
        uint32_t receiveOverIncorrectSaInbound;
        uint32_t secureReceivesNotMatchingFilters;
        uint32_t totalDropPacketsInbound;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_TRAFFIC_STATISTICS0
    {
        uint64_t encryptedByteCount;
        uint64_t authenticatedAHByteCount;
        uint64_t authenticatedESPByteCount;
        uint64_t transportByteCount;
        uint64_t tunnelByteCount;
        uint64_t offloadByteCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_TRAFFIC_STATISTICS1
    {
        uint64_t encryptedByteCount;
        uint64_t authenticatedAHByteCount;
        uint64_t authenticatedESPByteCount;
        uint64_t transportByteCount;
        uint64_t tunnelByteCount;
        uint64_t offloadByteCount;
        uint64_t totalSuccessfulPackets;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_STATISTICS0
    {
        Windows::Win32::WindowsFiltering::IPSEC_AGGREGATE_SA_STATISTICS0 aggregateSaStatistics;
        Windows::Win32::WindowsFiltering::IPSEC_ESP_DROP_PACKET_STATISTICS0 espDropPacketStatistics;
        Windows::Win32::WindowsFiltering::IPSEC_AH_DROP_PACKET_STATISTICS0 ahDropPacketStatistics;
        Windows::Win32::WindowsFiltering::IPSEC_AGGREGATE_DROP_PACKET_STATISTICS0 aggregateDropPacketStatistics;
        Windows::Win32::WindowsFiltering::IPSEC_TRAFFIC_STATISTICS0 inboundTrafficStatistics;
        Windows::Win32::WindowsFiltering::IPSEC_TRAFFIC_STATISTICS0 outboundTrafficStatistics;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_STATISTICS1
    {
        Windows::Win32::WindowsFiltering::IPSEC_AGGREGATE_SA_STATISTICS0 aggregateSaStatistics;
        Windows::Win32::WindowsFiltering::IPSEC_ESP_DROP_PACKET_STATISTICS0 espDropPacketStatistics;
        Windows::Win32::WindowsFiltering::IPSEC_AH_DROP_PACKET_STATISTICS0 ahDropPacketStatistics;
        Windows::Win32::WindowsFiltering::IPSEC_AGGREGATE_DROP_PACKET_STATISTICS1 aggregateDropPacketStatistics;
        Windows::Win32::WindowsFiltering::IPSEC_TRAFFIC_STATISTICS1 inboundTrafficStatistics;
        Windows::Win32::WindowsFiltering::IPSEC_TRAFFIC_STATISTICS1 outboundTrafficStatistics;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_SA_AUTH_INFORMATION0
    {
        Windows::Win32::WindowsFiltering::IPSEC_AUTH_TRANSFORM0 authTransform;
        Windows::Win32::WindowsFiltering::FWP_BYTE_BLOB authKey;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_SA_CIPHER_INFORMATION0
    {
        Windows::Win32::WindowsFiltering::IPSEC_CIPHER_TRANSFORM0 cipherTransform;
        Windows::Win32::WindowsFiltering::FWP_BYTE_BLOB cipherKey;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_SA_AUTH_AND_CIPHER_INFORMATION0
    {
        Windows::Win32::WindowsFiltering::IPSEC_SA_CIPHER_INFORMATION0 saCipherInformation;
        Windows::Win32::WindowsFiltering::IPSEC_SA_AUTH_INFORMATION0 saAuthInformation;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_SA0
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::WindowsFiltering::IPSEC_SA_AUTH_INFORMATION0* ahInformation;
            Windows::Win32::WindowsFiltering::IPSEC_SA_AUTH_INFORMATION0* espAuthInformation;
            Windows::Win32::WindowsFiltering::IPSEC_SA_CIPHER_INFORMATION0* espCipherInformation;
            Windows::Win32::WindowsFiltering::IPSEC_SA_AUTH_AND_CIPHER_INFORMATION0* espAuthAndCipherInformation;
            Windows::Win32::WindowsFiltering::IPSEC_SA_AUTH_INFORMATION0* espAuthFwInformation;
        };
        uint32_t spi;
        Windows::Win32::WindowsFiltering::IPSEC_TRANSFORM_TYPE saTransformType;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_KEYMODULE_STATE0
    {
        ::win32::guid keyModuleKey;
        Windows::Win32::WindowsFiltering::FWP_BYTE_BLOB stateBlob;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_TOKEN0
    {
        Windows::Win32::WindowsFiltering::IPSEC_TOKEN_TYPE type;
        Windows::Win32::WindowsFiltering::IPSEC_TOKEN_PRINCIPAL principal;
        Windows::Win32::WindowsFiltering::IPSEC_TOKEN_MODE mode;
        uint64_t token;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_ID0
    {
        uint16_t* mmTargetName;
        uint16_t* emTargetName;
        uint32_t numTokens;
        Windows::Win32::WindowsFiltering::IPSEC_TOKEN0* tokens;
        uint64_t explicitCredentials;
        uint64_t logonId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_SA_BUNDLE0
    {
        union _Anonymous_e__Union
        {
            uint32_t peerV4PrivateAddress;
        };
        uint32_t flags;
        Windows::Win32::WindowsFiltering::IPSEC_SA_LIFETIME0 lifetime;
        uint32_t idleTimeoutSeconds;
        uint32_t ndAllowClearTimeoutSeconds;
        Windows::Win32::WindowsFiltering::IPSEC_ID0* ipsecId;
        uint32_t napContext;
        uint32_t qmSaId;
        uint32_t numSAs;
        Windows::Win32::WindowsFiltering::IPSEC_SA0* saList;
        Windows::Win32::WindowsFiltering::IPSEC_KEYMODULE_STATE0* keyModuleState;
        Windows::Win32::WindowsFiltering::FWP_IP_VERSION ipVersion;
        _Anonymous_e__Union Anonymous;
        uint64_t mmSaId;
        Windows::Win32::WindowsFiltering::IPSEC_PFS_GROUP pfsGroup;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_SA_BUNDLE1
    {
        union _Anonymous_e__Union
        {
            uint32_t peerV4PrivateAddress;
        };
        uint32_t flags;
        Windows::Win32::WindowsFiltering::IPSEC_SA_LIFETIME0 lifetime;
        uint32_t idleTimeoutSeconds;
        uint32_t ndAllowClearTimeoutSeconds;
        Windows::Win32::WindowsFiltering::IPSEC_ID0* ipsecId;
        uint32_t napContext;
        uint32_t qmSaId;
        uint32_t numSAs;
        Windows::Win32::WindowsFiltering::IPSEC_SA0* saList;
        Windows::Win32::WindowsFiltering::IPSEC_KEYMODULE_STATE0* keyModuleState;
        Windows::Win32::WindowsFiltering::FWP_IP_VERSION ipVersion;
        _Anonymous_e__Union Anonymous;
        uint64_t mmSaId;
        Windows::Win32::WindowsFiltering::IPSEC_PFS_GROUP pfsGroup;
        ::win32::guid saLookupContext;
        uint64_t qmFilterId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_TRAFFIC0
    {
        union _Anonymous1_e__Union
        {
            uint32_t localV4Address;
            uint8_t localV6Address[16];
        };
        union _Anonymous2_e__Union
        {
            uint32_t remoteV4Address;
            uint8_t remoteV6Address[16];
        };
        union _Anonymous3_e__Union
        {
            uint64_t ipsecFilterId;
            uint64_t tunnelPolicyId;
        };
        Windows::Win32::WindowsFiltering::FWP_IP_VERSION ipVersion;
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
        Windows::Win32::WindowsFiltering::IPSEC_TRAFFIC_TYPE trafficType;
        _Anonymous3_e__Union Anonymous3;
        uint16_t remotePort;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_TRAFFIC1
    {
        union _Anonymous1_e__Union
        {
            uint32_t localV4Address;
            uint8_t localV6Address[16];
        };
        union _Anonymous2_e__Union
        {
            uint32_t remoteV4Address;
            uint8_t remoteV6Address[16];
        };
        union _Anonymous3_e__Union
        {
            uint64_t ipsecFilterId;
            uint64_t tunnelPolicyId;
        };
        Windows::Win32::WindowsFiltering::FWP_IP_VERSION ipVersion;
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
        Windows::Win32::WindowsFiltering::IPSEC_TRAFFIC_TYPE trafficType;
        _Anonymous3_e__Union Anonymous3;
        uint16_t remotePort;
        uint16_t localPort;
        uint8_t ipProtocol;
        uint64_t localIfLuid;
        uint32_t realIfProfileId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_V4_UDP_ENCAPSULATION0
    {
        uint16_t localUdpEncapPort;
        uint16_t remoteUdpEncapPort;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_GETSPI0
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::WindowsFiltering::IPSEC_V4_UDP_ENCAPSULATION0* inboundUdpEncapsulation;
        };
        Windows::Win32::WindowsFiltering::IPSEC_TRAFFIC0 inboundIpsecTraffic;
        Windows::Win32::WindowsFiltering::FWP_IP_VERSION ipVersion;
        _Anonymous_e__Union Anonymous;
        ::win32::guid* rngCryptoModuleID;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_GETSPI1
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::WindowsFiltering::IPSEC_V4_UDP_ENCAPSULATION0* inboundUdpEncapsulation;
        };
        Windows::Win32::WindowsFiltering::IPSEC_TRAFFIC1 inboundIpsecTraffic;
        Windows::Win32::WindowsFiltering::FWP_IP_VERSION ipVersion;
        _Anonymous_e__Union Anonymous;
        ::win32::guid* rngCryptoModuleID;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_SA_DETAILS0
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::WindowsFiltering::IPSEC_V4_UDP_ENCAPSULATION0* udpEncapsulation;
        };
        Windows::Win32::WindowsFiltering::FWP_IP_VERSION ipVersion;
        Windows::Win32::WindowsFiltering::FWP_DIRECTION saDirection;
        Windows::Win32::WindowsFiltering::IPSEC_TRAFFIC0 traffic;
        Windows::Win32::WindowsFiltering::IPSEC_SA_BUNDLE0 saBundle;
        _Anonymous_e__Union Anonymous;
        Windows::Win32::WindowsFiltering::FWPM_FILTER0* transportFilter;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_SA_DETAILS1
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::WindowsFiltering::IPSEC_V4_UDP_ENCAPSULATION0* udpEncapsulation;
        };
        Windows::Win32::WindowsFiltering::FWP_IP_VERSION ipVersion;
        Windows::Win32::WindowsFiltering::FWP_DIRECTION saDirection;
        Windows::Win32::WindowsFiltering::IPSEC_TRAFFIC1 traffic;
        Windows::Win32::WindowsFiltering::IPSEC_SA_BUNDLE1 saBundle;
        _Anonymous_e__Union Anonymous;
        Windows::Win32::WindowsFiltering::FWPM_FILTER0* transportFilter;
        Windows::Win32::WindowsFiltering::IPSEC_VIRTUAL_IF_TUNNEL_INFO0 virtualIfTunnelInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_SA_CONTEXT0
    {
        uint64_t saContextId;
        Windows::Win32::WindowsFiltering::IPSEC_SA_DETAILS0* inboundSa;
        Windows::Win32::WindowsFiltering::IPSEC_SA_DETAILS0* outboundSa;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_SA_CONTEXT1
    {
        uint64_t saContextId;
        Windows::Win32::WindowsFiltering::IPSEC_SA_DETAILS1* inboundSa;
        Windows::Win32::WindowsFiltering::IPSEC_SA_DETAILS1* outboundSa;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_SA_CONTEXT_ENUM_TEMPLATE0
    {
        Windows::Win32::WindowsFiltering::FWP_CONDITION_VALUE0 localSubNet;
        Windows::Win32::WindowsFiltering::FWP_CONDITION_VALUE0 remoteSubNet;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_SA_ENUM_TEMPLATE0
    {
        Windows::Win32::WindowsFiltering::FWP_DIRECTION saDirection;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_SA_CONTEXT_SUBSCRIPTION0
    {
        Windows::Win32::WindowsFiltering::IPSEC_SA_CONTEXT_ENUM_TEMPLATE0* enumTemplate;
        uint32_t flags;
        ::win32::guid sessionKey;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_SA_CONTEXT_CHANGE0
    {
        Windows::Win32::WindowsFiltering::IPSEC_SA_CONTEXT_EVENT_TYPE0 changeType;
        uint64_t saContextId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_ADDRESS_INFO0
    {
        uint32_t numV4Addresses;
        uint32_t* v4Addresses;
        uint32_t numV6Addresses;
        Windows::Win32::WindowsFiltering::FWP_BYTE_ARRAY16* v6Addresses;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_DOSP_OPTIONS0
    {
        uint32_t stateIdleTimeoutSeconds;
        uint32_t perIPRateLimitQueueIdleTimeoutSeconds;
        uint8_t ipV6IPsecUnauthDscp;
        uint32_t ipV6IPsecUnauthRateLimitBytesPerSec;
        uint32_t ipV6IPsecUnauthPerIPRateLimitBytesPerSec;
        uint8_t ipV6IPsecAuthDscp;
        uint32_t ipV6IPsecAuthRateLimitBytesPerSec;
        uint8_t icmpV6Dscp;
        uint32_t icmpV6RateLimitBytesPerSec;
        uint8_t ipV6FilterExemptDscp;
        uint32_t ipV6FilterExemptRateLimitBytesPerSec;
        uint8_t defBlockExemptDscp;
        uint32_t defBlockExemptRateLimitBytesPerSec;
        uint32_t maxStateEntries;
        uint32_t maxPerIPRateLimitQueues;
        uint32_t flags;
        uint32_t numPublicIFLuids;
        uint64_t* publicIFLuids;
        uint32_t numInternalIFLuids;
        uint64_t* internalIFLuids;
        Windows::Win32::WindowsFiltering::FWP_V6_ADDR_AND_MASK publicV6AddrMask;
        Windows::Win32::WindowsFiltering::FWP_V6_ADDR_AND_MASK internalV6AddrMask;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_DOSP_STATISTICS0
    {
        uint64_t totalStateEntriesCreated;
        uint64_t currentStateEntries;
        uint64_t totalInboundAllowedIPv6IPsecUnauthPkts;
        uint64_t totalInboundRatelimitDiscardedIPv6IPsecUnauthPkts;
        uint64_t totalInboundPerIPRatelimitDiscardedIPv6IPsecUnauthPkts;
        uint64_t totalInboundOtherDiscardedIPv6IPsecUnauthPkts;
        uint64_t totalInboundAllowedIPv6IPsecAuthPkts;
        uint64_t totalInboundRatelimitDiscardedIPv6IPsecAuthPkts;
        uint64_t totalInboundOtherDiscardedIPv6IPsecAuthPkts;
        uint64_t totalInboundAllowedICMPv6Pkts;
        uint64_t totalInboundRatelimitDiscardedICMPv6Pkts;
        uint64_t totalInboundAllowedIPv6FilterExemptPkts;
        uint64_t totalInboundRatelimitDiscardedIPv6FilterExemptPkts;
        uint64_t totalInboundDiscardedIPv6FilterBlockPkts;
        uint64_t totalInboundAllowedDefBlockExemptPkts;
        uint64_t totalInboundRatelimitDiscardedDefBlockExemptPkts;
        uint64_t totalInboundDiscardedDefBlockPkts;
        uint64_t currentInboundIPv6IPsecUnauthPerIPRateLimitQueues;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_DOSP_STATE0
    {
        uint8_t publicHostV6Addr[16];
        uint8_t internalHostV6Addr[16];
        uint64_t totalInboundIPv6IPsecAuthPackets;
        uint64_t totalOutboundIPv6IPsecAuthPackets;
        uint32_t durationSecs;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_DOSP_STATE_ENUM_TEMPLATE0
    {
        Windows::Win32::WindowsFiltering::FWP_V6_ADDR_AND_MASK publicV6AddrMask;
        Windows::Win32::WindowsFiltering::FWP_V6_ADDR_AND_MASK internalV6AddrMask;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_KEY_MANAGER0
    {
        ::win32::guid keyManagerKey;
        Windows::Win32::WindowsFiltering::FWPM_DISPLAY_DATA0 displayData;
        uint32_t flags;
        uint8_t keyDictationTimeoutHint;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_SESSION0
    {
        ::win32::guid sessionKey;
        Windows::Win32::WindowsFiltering::FWPM_DISPLAY_DATA0 displayData;
        uint32_t flags;
        uint32_t txnWaitTimeoutInMSec;
        uint32_t processId;
        Windows::Win32::Security::SID* sid;
        uint16_t* username;
        Windows::Win32::SystemServices::BOOL kernelMode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_SESSION_ENUM_TEMPLATE0
    {
        uint64_t reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_PROVIDER0
    {
        ::win32::guid providerKey;
        Windows::Win32::WindowsFiltering::FWPM_DISPLAY_DATA0 displayData;
        uint32_t flags;
        Windows::Win32::WindowsFiltering::FWP_BYTE_BLOB providerData;
        uint16_t* serviceName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_PROVIDER_ENUM_TEMPLATE0
    {
        uint64_t reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_PROVIDER_CHANGE0
    {
        Windows::Win32::WindowsFiltering::FWPM_CHANGE_TYPE changeType;
        ::win32::guid providerKey;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_PROVIDER_SUBSCRIPTION0
    {
        Windows::Win32::WindowsFiltering::FWPM_PROVIDER_ENUM_TEMPLATE0* enumTemplate;
        uint32_t flags;
        ::win32::guid sessionKey;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_CLASSIFY_OPTION0
    {
        Windows::Win32::WindowsFiltering::FWP_CLASSIFY_OPTION_TYPE type;
        Windows::Win32::WindowsFiltering::FWP_VALUE0 value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_CLASSIFY_OPTIONS0
    {
        uint32_t numOptions;
        Windows::Win32::WindowsFiltering::FWPM_CLASSIFY_OPTION0* options;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_PROVIDER_CONTEXT0
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::WindowsFiltering::IPSEC_KEYING_POLICY0* keyingPolicy;
            Windows::Win32::WindowsFiltering::IPSEC_TRANSPORT_POLICY0* ikeQmTransportPolicy;
            Windows::Win32::WindowsFiltering::IPSEC_TUNNEL_POLICY0* ikeQmTunnelPolicy;
            Windows::Win32::WindowsFiltering::IPSEC_TRANSPORT_POLICY0* authipQmTransportPolicy;
            Windows::Win32::WindowsFiltering::IPSEC_TUNNEL_POLICY0* authipQmTunnelPolicy;
            Windows::Win32::WindowsFiltering::IKEEXT_POLICY0* ikeMmPolicy;
            Windows::Win32::WindowsFiltering::IKEEXT_POLICY0* authIpMmPolicy;
            Windows::Win32::WindowsFiltering::FWP_BYTE_BLOB* dataBuffer;
            Windows::Win32::WindowsFiltering::FWPM_CLASSIFY_OPTIONS0* classifyOptions;
        };
        ::win32::guid providerContextKey;
        Windows::Win32::WindowsFiltering::FWPM_DISPLAY_DATA0 displayData;
        uint32_t flags;
        ::win32::guid* providerKey;
        Windows::Win32::WindowsFiltering::FWP_BYTE_BLOB providerData;
        Windows::Win32::WindowsFiltering::FWPM_PROVIDER_CONTEXT_TYPE type;
        _Anonymous_e__Union Anonymous;
        uint64_t providerContextId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_PROVIDER_CONTEXT1
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::WindowsFiltering::IPSEC_KEYING_POLICY0* keyingPolicy;
            Windows::Win32::WindowsFiltering::IPSEC_TRANSPORT_POLICY1* ikeQmTransportPolicy;
            Windows::Win32::WindowsFiltering::IPSEC_TUNNEL_POLICY1* ikeQmTunnelPolicy;
            Windows::Win32::WindowsFiltering::IPSEC_TRANSPORT_POLICY1* authipQmTransportPolicy;
            Windows::Win32::WindowsFiltering::IPSEC_TUNNEL_POLICY1* authipQmTunnelPolicy;
            Windows::Win32::WindowsFiltering::IKEEXT_POLICY1* ikeMmPolicy;
            Windows::Win32::WindowsFiltering::IKEEXT_POLICY1* authIpMmPolicy;
            Windows::Win32::WindowsFiltering::FWP_BYTE_BLOB* dataBuffer;
            Windows::Win32::WindowsFiltering::FWPM_CLASSIFY_OPTIONS0* classifyOptions;
            Windows::Win32::WindowsFiltering::IPSEC_TUNNEL_POLICY1* ikeV2QmTunnelPolicy;
            Windows::Win32::WindowsFiltering::IKEEXT_POLICY1* ikeV2MmPolicy;
            Windows::Win32::WindowsFiltering::IPSEC_DOSP_OPTIONS0* idpOptions;
        };
        ::win32::guid providerContextKey;
        Windows::Win32::WindowsFiltering::FWPM_DISPLAY_DATA0 displayData;
        uint32_t flags;
        ::win32::guid* providerKey;
        Windows::Win32::WindowsFiltering::FWP_BYTE_BLOB providerData;
        Windows::Win32::WindowsFiltering::FWPM_PROVIDER_CONTEXT_TYPE type;
        _Anonymous_e__Union Anonymous;
        uint64_t providerContextId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_PROVIDER_CONTEXT2
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::WindowsFiltering::IPSEC_KEYING_POLICY1* keyingPolicy;
            Windows::Win32::WindowsFiltering::IPSEC_TRANSPORT_POLICY2* ikeQmTransportPolicy;
            Windows::Win32::WindowsFiltering::IPSEC_TUNNEL_POLICY2* ikeQmTunnelPolicy;
            Windows::Win32::WindowsFiltering::IPSEC_TRANSPORT_POLICY2* authipQmTransportPolicy;
            Windows::Win32::WindowsFiltering::IPSEC_TUNNEL_POLICY2* authipQmTunnelPolicy;
            Windows::Win32::WindowsFiltering::IKEEXT_POLICY2* ikeMmPolicy;
            Windows::Win32::WindowsFiltering::IKEEXT_POLICY2* authIpMmPolicy;
            Windows::Win32::WindowsFiltering::FWP_BYTE_BLOB* dataBuffer;
            Windows::Win32::WindowsFiltering::FWPM_CLASSIFY_OPTIONS0* classifyOptions;
            Windows::Win32::WindowsFiltering::IPSEC_TUNNEL_POLICY2* ikeV2QmTunnelPolicy;
            Windows::Win32::WindowsFiltering::IPSEC_TRANSPORT_POLICY2* ikeV2QmTransportPolicy;
            Windows::Win32::WindowsFiltering::IKEEXT_POLICY2* ikeV2MmPolicy;
            Windows::Win32::WindowsFiltering::IPSEC_DOSP_OPTIONS0* idpOptions;
        };
        ::win32::guid providerContextKey;
        Windows::Win32::WindowsFiltering::FWPM_DISPLAY_DATA0 displayData;
        uint32_t flags;
        ::win32::guid* providerKey;
        Windows::Win32::WindowsFiltering::FWP_BYTE_BLOB providerData;
        Windows::Win32::WindowsFiltering::FWPM_PROVIDER_CONTEXT_TYPE type;
        _Anonymous_e__Union Anonymous;
        uint64_t providerContextId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_PROVIDER_CONTEXT3_
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::WindowsFiltering::IPSEC_KEYING_POLICY1* keyingPolicy;
            Windows::Win32::WindowsFiltering::IPSEC_TRANSPORT_POLICY2* ikeQmTransportPolicy;
            Windows::Win32::WindowsFiltering::IPSEC_TUNNEL_POLICY3_* ikeQmTunnelPolicy;
            Windows::Win32::WindowsFiltering::IPSEC_TRANSPORT_POLICY2* authipQmTransportPolicy;
            Windows::Win32::WindowsFiltering::IPSEC_TUNNEL_POLICY3_* authipQmTunnelPolicy;
            Windows::Win32::WindowsFiltering::IKEEXT_POLICY2* ikeMmPolicy;
            Windows::Win32::WindowsFiltering::IKEEXT_POLICY2* authIpMmPolicy;
            Windows::Win32::WindowsFiltering::FWP_BYTE_BLOB* dataBuffer;
            Windows::Win32::WindowsFiltering::FWPM_CLASSIFY_OPTIONS0* classifyOptions;
            Windows::Win32::WindowsFiltering::IPSEC_TUNNEL_POLICY3_* ikeV2QmTunnelPolicy;
            Windows::Win32::WindowsFiltering::IPSEC_TRANSPORT_POLICY2* ikeV2QmTransportPolicy;
            Windows::Win32::WindowsFiltering::IKEEXT_POLICY2* ikeV2MmPolicy;
            Windows::Win32::WindowsFiltering::IPSEC_DOSP_OPTIONS0* idpOptions;
        };
        ::win32::guid providerContextKey;
        Windows::Win32::WindowsFiltering::FWPM_DISPLAY_DATA0 displayData;
        uint32_t flags;
        ::win32::guid* providerKey;
        Windows::Win32::WindowsFiltering::FWP_BYTE_BLOB providerData;
        Windows::Win32::WindowsFiltering::FWPM_PROVIDER_CONTEXT_TYPE type;
        _Anonymous_e__Union Anonymous;
        uint64_t providerContextId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_PROVIDER_CONTEXT_ENUM_TEMPLATE0
    {
        ::win32::guid* providerKey;
        Windows::Win32::WindowsFiltering::FWPM_PROVIDER_CONTEXT_TYPE providerContextType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_PROVIDER_CONTEXT_CHANGE0
    {
        Windows::Win32::WindowsFiltering::FWPM_CHANGE_TYPE changeType;
        ::win32::guid providerContextKey;
        uint64_t providerContextId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_PROVIDER_CONTEXT_SUBSCRIPTION0
    {
        Windows::Win32::WindowsFiltering::FWPM_PROVIDER_CONTEXT_ENUM_TEMPLATE0* enumTemplate;
        uint32_t flags;
        ::win32::guid sessionKey;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_SUBLAYER0
    {
        ::win32::guid subLayerKey;
        Windows::Win32::WindowsFiltering::FWPM_DISPLAY_DATA0 displayData;
        uint32_t flags;
        ::win32::guid* providerKey;
        Windows::Win32::WindowsFiltering::FWP_BYTE_BLOB providerData;
        uint16_t weight;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_SUBLAYER_ENUM_TEMPLATE0
    {
        ::win32::guid* providerKey;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_SUBLAYER_CHANGE0
    {
        Windows::Win32::WindowsFiltering::FWPM_CHANGE_TYPE changeType;
        ::win32::guid subLayerKey;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_SUBLAYER_SUBSCRIPTION0
    {
        Windows::Win32::WindowsFiltering::FWPM_SUBLAYER_ENUM_TEMPLATE0* enumTemplate;
        uint32_t flags;
        ::win32::guid sessionKey;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_FIELD0
    {
        ::win32::guid* fieldKey;
        Windows::Win32::WindowsFiltering::FWPM_FIELD_TYPE type;
        Windows::Win32::WindowsFiltering::FWP_DATA_TYPE dataType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_LAYER0
    {
        ::win32::guid layerKey;
        Windows::Win32::WindowsFiltering::FWPM_DISPLAY_DATA0 displayData;
        uint32_t flags;
        uint32_t numFields;
        Windows::Win32::WindowsFiltering::FWPM_FIELD0* field;
        ::win32::guid defaultSubLayerKey;
        uint16_t layerId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_LAYER_ENUM_TEMPLATE0
    {
        uint64_t reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_CALLOUT0
    {
        ::win32::guid calloutKey;
        Windows::Win32::WindowsFiltering::FWPM_DISPLAY_DATA0 displayData;
        uint32_t flags;
        ::win32::guid* providerKey;
        Windows::Win32::WindowsFiltering::FWP_BYTE_BLOB providerData;
        ::win32::guid applicableLayer;
        uint32_t calloutId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_CALLOUT_ENUM_TEMPLATE0
    {
        ::win32::guid* providerKey;
        ::win32::guid layerKey;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_CALLOUT_CHANGE0
    {
        Windows::Win32::WindowsFiltering::FWPM_CHANGE_TYPE changeType;
        ::win32::guid calloutKey;
        uint32_t calloutId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_CALLOUT_SUBSCRIPTION0
    {
        Windows::Win32::WindowsFiltering::FWPM_CALLOUT_ENUM_TEMPLATE0* enumTemplate;
        uint32_t flags;
        ::win32::guid sessionKey;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_ACTION0
    {
        union _Anonymous_e__Union
        {
            ::win32::guid filterType;
            ::win32::guid calloutKey;
            uint8_t bitmapIndex;
        };
        uint32_t type;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_FILTER_CONDITION0
    {
        ::win32::guid fieldKey;
        Windows::Win32::WindowsFiltering::FWP_MATCH_TYPE matchType;
        Windows::Win32::WindowsFiltering::FWP_CONDITION_VALUE0 conditionValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_FILTER0
    {
        union _Anonymous_e__Union
        {
            uint64_t rawContext;
            ::win32::guid providerContextKey;
        };
        ::win32::guid filterKey;
        Windows::Win32::WindowsFiltering::FWPM_DISPLAY_DATA0 displayData;
        uint32_t flags;
        ::win32::guid* providerKey;
        Windows::Win32::WindowsFiltering::FWP_BYTE_BLOB providerData;
        ::win32::guid layerKey;
        ::win32::guid subLayerKey;
        Windows::Win32::WindowsFiltering::FWP_VALUE0 weight;
        uint32_t numFilterConditions;
        Windows::Win32::WindowsFiltering::FWPM_FILTER_CONDITION0* filterCondition;
        Windows::Win32::WindowsFiltering::FWPM_ACTION0 action;
        _Anonymous_e__Union Anonymous;
        ::win32::guid* reserved;
        uint64_t filterId;
        Windows::Win32::WindowsFiltering::FWP_VALUE0 effectiveWeight;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_FILTER_ENUM_TEMPLATE0
    {
        ::win32::guid* providerKey;
        ::win32::guid layerKey;
        Windows::Win32::WindowsFiltering::FWP_FILTER_ENUM_TYPE enumType;
        uint32_t flags;
        Windows::Win32::WindowsFiltering::FWPM_PROVIDER_CONTEXT_ENUM_TEMPLATE0* providerContextTemplate;
        uint32_t numFilterConditions;
        Windows::Win32::WindowsFiltering::FWPM_FILTER_CONDITION0* filterCondition;
        uint32_t actionMask;
        ::win32::guid* calloutKey;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_FILTER_CHANGE0
    {
        Windows::Win32::WindowsFiltering::FWPM_CHANGE_TYPE changeType;
        ::win32::guid filterKey;
        uint64_t filterId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_FILTER_SUBSCRIPTION0
    {
        Windows::Win32::WindowsFiltering::FWPM_FILTER_ENUM_TEMPLATE0* enumTemplate;
        uint32_t flags;
        ::win32::guid sessionKey;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_LAYER_STATISTICS0
    {
        ::win32::guid layerId;
        uint32_t classifyPermitCount;
        uint32_t classifyBlockCount;
        uint32_t classifyVetoCount;
        uint32_t numCacheEntries;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_STATISTICS0
    {
        uint32_t numLayerStatistics;
        Windows::Win32::WindowsFiltering::FWPM_LAYER_STATISTICS0* layerStatistics;
        uint32_t inboundAllowedConnectionsV4;
        uint32_t inboundBlockedConnectionsV4;
        uint32_t outboundAllowedConnectionsV4;
        uint32_t outboundBlockedConnectionsV4;
        uint32_t inboundAllowedConnectionsV6;
        uint32_t inboundBlockedConnectionsV6;
        uint32_t outboundAllowedConnectionsV6;
        uint32_t outboundBlockedConnectionsV6;
        uint32_t inboundActiveConnectionsV4;
        uint32_t outboundActiveConnectionsV4;
        uint32_t inboundActiveConnectionsV6;
        uint32_t outboundActiveConnectionsV6;
        uint64_t reauthDirInbound;
        uint64_t reauthDirOutbound;
        uint64_t reauthFamilyV4;
        uint64_t reauthFamilyV6;
        uint64_t reauthProtoOther;
        uint64_t reauthProtoIPv4;
        uint64_t reauthProtoIPv6;
        uint64_t reauthProtoICMP;
        uint64_t reauthProtoICMP6;
        uint64_t reauthProtoUDP;
        uint64_t reauthProtoTCP;
        uint64_t reauthReasonPolicyChange;
        uint64_t reauthReasonNewArrivalInterface;
        uint64_t reauthReasonNewNextHopInterface;
        uint64_t reauthReasonProfileCrossing;
        uint64_t reauthReasonClassifyCompletion;
        uint64_t reauthReasonIPSecPropertiesChanged;
        uint64_t reauthReasonMidStreamInspection;
        uint64_t reauthReasonSocketPropertyChanged;
        uint64_t reauthReasonNewInboundMCastBCastPacket;
        uint64_t reauthReasonEDPPolicyChanged;
        uint64_t reauthReasonPreclassifyLocalAddrLayerChange;
        uint64_t reauthReasonPreclassifyRemoteAddrLayerChange;
        uint64_t reauthReasonPreclassifyLocalPortLayerChange;
        uint64_t reauthReasonPreclassifyRemotePortLayerChange;
        uint64_t reauthReasonProxyHandleChanged;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_NET_EVENT_HEADER0
    {
        union _Anonymous1_e__Union
        {
            uint32_t localAddrV4;
            Windows::Win32::WindowsFiltering::FWP_BYTE_ARRAY16 localAddrV6;
        };
        union _Anonymous2_e__Union
        {
            uint32_t remoteAddrV4;
            Windows::Win32::WindowsFiltering::FWP_BYTE_ARRAY16 remoteAddrV6;
        };
        Windows::Win32::WindowsProgramming::FILETIME timeStamp;
        uint32_t flags;
        Windows::Win32::WindowsFiltering::FWP_IP_VERSION ipVersion;
        uint8_t ipProtocol;
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
        uint16_t localPort;
        uint16_t remotePort;
        uint32_t scopeId;
        Windows::Win32::WindowsFiltering::FWP_BYTE_BLOB appId;
        Windows::Win32::Security::SID* userId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_NET_EVENT_HEADER1
    {
        union _Anonymous1_e__Union
        {
            uint32_t localAddrV4;
            Windows::Win32::WindowsFiltering::FWP_BYTE_ARRAY16 localAddrV6;
        };
        union _Anonymous2_e__Union
        {
            uint32_t remoteAddrV4;
            Windows::Win32::WindowsFiltering::FWP_BYTE_ARRAY16 remoteAddrV6;
        };
        union _Anonymous3_e__Union
        {
            struct _Anonymous_e__Struct
            {
                union _Anonymous_e__Union
                {
                    struct _Anonymous_e__Struct
                    {
                        Windows::Win32::WindowsFiltering::FWP_BYTE_ARRAY6 reserved2;
                        Windows::Win32::WindowsFiltering::FWP_BYTE_ARRAY6 reserved3;
                        uint32_t reserved4;
                        uint32_t reserved5;
                        uint16_t reserved6;
                        uint32_t reserved7;
                        uint32_t reserved8;
                        uint16_t reserved9;
                        uint64_t reserved10;
                    };
                    _Anonymous_e__Struct Anonymous;
                };
                Windows::Win32::WindowsFiltering::FWP_AF reserved1;
                _Anonymous_e__Union Anonymous;
            };
            _Anonymous_e__Struct Anonymous;
        };
        Windows::Win32::WindowsProgramming::FILETIME timeStamp;
        uint32_t flags;
        Windows::Win32::WindowsFiltering::FWP_IP_VERSION ipVersion;
        uint8_t ipProtocol;
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
        uint16_t localPort;
        uint16_t remotePort;
        uint32_t scopeId;
        Windows::Win32::WindowsFiltering::FWP_BYTE_BLOB appId;
        Windows::Win32::Security::SID* userId;
        _Anonymous3_e__Union Anonymous3;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_NET_EVENT_HEADER2
    {
        union _Anonymous1_e__Union
        {
            uint32_t localAddrV4;
            Windows::Win32::WindowsFiltering::FWP_BYTE_ARRAY16 localAddrV6;
        };
        union _Anonymous2_e__Union
        {
            uint32_t remoteAddrV4;
            Windows::Win32::WindowsFiltering::FWP_BYTE_ARRAY16 remoteAddrV6;
        };
        Windows::Win32::WindowsProgramming::FILETIME timeStamp;
        uint32_t flags;
        Windows::Win32::WindowsFiltering::FWP_IP_VERSION ipVersion;
        uint8_t ipProtocol;
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
        uint16_t localPort;
        uint16_t remotePort;
        uint32_t scopeId;
        Windows::Win32::WindowsFiltering::FWP_BYTE_BLOB appId;
        Windows::Win32::Security::SID* userId;
        Windows::Win32::WindowsFiltering::FWP_AF addressFamily;
        Windows::Win32::Security::SID* packageSid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_NET_EVENT_HEADER3
    {
        union _Anonymous1_e__Union
        {
            uint32_t localAddrV4;
            Windows::Win32::WindowsFiltering::FWP_BYTE_ARRAY16 localAddrV6;
        };
        union _Anonymous2_e__Union
        {
            uint32_t remoteAddrV4;
            Windows::Win32::WindowsFiltering::FWP_BYTE_ARRAY16 remoteAddrV6;
        };
        Windows::Win32::WindowsProgramming::FILETIME timeStamp;
        uint32_t flags;
        Windows::Win32::WindowsFiltering::FWP_IP_VERSION ipVersion;
        uint8_t ipProtocol;
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
        uint16_t localPort;
        uint16_t remotePort;
        uint32_t scopeId;
        Windows::Win32::WindowsFiltering::FWP_BYTE_BLOB appId;
        Windows::Win32::Security::SID* userId;
        Windows::Win32::WindowsFiltering::FWP_AF addressFamily;
        Windows::Win32::Security::SID* packageSid;
        uint16_t* enterpriseId;
        uint64_t policyFlags;
        Windows::Win32::WindowsFiltering::FWP_BYTE_BLOB effectiveName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_NET_EVENT_IKEEXT_MM_FAILURE0
    {
        uint32_t failureErrorCode;
        Windows::Win32::WindowsFiltering::IPSEC_FAILURE_POINT failurePoint;
        uint32_t flags;
        Windows::Win32::WindowsFiltering::IKEEXT_KEY_MODULE_TYPE keyingModuleType;
        Windows::Win32::WindowsFiltering::IKEEXT_MM_SA_STATE mmState;
        Windows::Win32::WindowsFiltering::IKEEXT_SA_ROLE saRole;
        Windows::Win32::WindowsFiltering::IKEEXT_AUTHENTICATION_METHOD_TYPE mmAuthMethod;
        uint8_t endCertHash[20];
        uint64_t mmId;
        uint64_t mmFilterId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_NET_EVENT_IKEEXT_MM_FAILURE1
    {
        uint32_t failureErrorCode;
        Windows::Win32::WindowsFiltering::IPSEC_FAILURE_POINT failurePoint;
        uint32_t flags;
        Windows::Win32::WindowsFiltering::IKEEXT_KEY_MODULE_TYPE keyingModuleType;
        Windows::Win32::WindowsFiltering::IKEEXT_MM_SA_STATE mmState;
        Windows::Win32::WindowsFiltering::IKEEXT_SA_ROLE saRole;
        Windows::Win32::WindowsFiltering::IKEEXT_AUTHENTICATION_METHOD_TYPE mmAuthMethod;
        uint8_t endCertHash[20];
        uint64_t mmId;
        uint64_t mmFilterId;
        uint16_t* localPrincipalNameForAuth;
        uint16_t* remotePrincipalNameForAuth;
        uint32_t numLocalPrincipalGroupSids;
        uint16_t** localPrincipalGroupSids;
        uint32_t numRemotePrincipalGroupSids;
        uint16_t** remotePrincipalGroupSids;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_NET_EVENT_IKEEXT_MM_FAILURE2_
    {
        uint32_t failureErrorCode;
        Windows::Win32::WindowsFiltering::IPSEC_FAILURE_POINT failurePoint;
        uint32_t flags;
        Windows::Win32::WindowsFiltering::IKEEXT_KEY_MODULE_TYPE keyingModuleType;
        Windows::Win32::WindowsFiltering::IKEEXT_MM_SA_STATE mmState;
        Windows::Win32::WindowsFiltering::IKEEXT_SA_ROLE saRole;
        Windows::Win32::WindowsFiltering::IKEEXT_AUTHENTICATION_METHOD_TYPE mmAuthMethod;
        uint8_t endCertHash[20];
        uint64_t mmId;
        uint64_t mmFilterId;
        uint16_t* localPrincipalNameForAuth;
        uint16_t* remotePrincipalNameForAuth;
        uint32_t numLocalPrincipalGroupSids;
        uint16_t** localPrincipalGroupSids;
        uint32_t numRemotePrincipalGroupSids;
        uint16_t** remotePrincipalGroupSids;
        ::win32::guid* providerContextKey;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_NET_EVENT_IKEEXT_QM_FAILURE0
    {
        union _Anonymous1_e__Union
        {
            Windows::Win32::WindowsFiltering::FWP_CONDITION_VALUE0 localSubNet;
        };
        union _Anonymous2_e__Union
        {
            Windows::Win32::WindowsFiltering::FWP_CONDITION_VALUE0 remoteSubNet;
        };
        uint32_t failureErrorCode;
        Windows::Win32::WindowsFiltering::IPSEC_FAILURE_POINT failurePoint;
        Windows::Win32::WindowsFiltering::IKEEXT_KEY_MODULE_TYPE keyingModuleType;
        Windows::Win32::WindowsFiltering::IKEEXT_QM_SA_STATE qmState;
        Windows::Win32::WindowsFiltering::IKEEXT_SA_ROLE saRole;
        Windows::Win32::WindowsFiltering::IPSEC_TRAFFIC_TYPE saTrafficType;
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
        uint64_t qmFilterId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_NET_EVENT_IKEEXT_QM_FAILURE1_
    {
        union _Anonymous1_e__Union
        {
            Windows::Win32::WindowsFiltering::FWP_CONDITION_VALUE0 localSubNet;
        };
        union _Anonymous2_e__Union
        {
            Windows::Win32::WindowsFiltering::FWP_CONDITION_VALUE0 remoteSubNet;
        };
        uint32_t failureErrorCode;
        Windows::Win32::WindowsFiltering::IPSEC_FAILURE_POINT failurePoint;
        Windows::Win32::WindowsFiltering::IKEEXT_KEY_MODULE_TYPE keyingModuleType;
        Windows::Win32::WindowsFiltering::IKEEXT_QM_SA_STATE qmState;
        Windows::Win32::WindowsFiltering::IKEEXT_SA_ROLE saRole;
        Windows::Win32::WindowsFiltering::IPSEC_TRAFFIC_TYPE saTrafficType;
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
        uint64_t qmFilterId;
        uint64_t mmSaLuid;
        ::win32::guid mmProviderContextKey;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_NET_EVENT_IKEEXT_EM_FAILURE0
    {
        uint32_t failureErrorCode;
        Windows::Win32::WindowsFiltering::IPSEC_FAILURE_POINT failurePoint;
        uint32_t flags;
        Windows::Win32::WindowsFiltering::IKEEXT_EM_SA_STATE emState;
        Windows::Win32::WindowsFiltering::IKEEXT_SA_ROLE saRole;
        Windows::Win32::WindowsFiltering::IKEEXT_AUTHENTICATION_METHOD_TYPE emAuthMethod;
        uint8_t endCertHash[20];
        uint64_t mmId;
        uint64_t qmFilterId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_NET_EVENT_IKEEXT_EM_FAILURE1
    {
        uint32_t failureErrorCode;
        Windows::Win32::WindowsFiltering::IPSEC_FAILURE_POINT failurePoint;
        uint32_t flags;
        Windows::Win32::WindowsFiltering::IKEEXT_EM_SA_STATE emState;
        Windows::Win32::WindowsFiltering::IKEEXT_SA_ROLE saRole;
        Windows::Win32::WindowsFiltering::IKEEXT_AUTHENTICATION_METHOD_TYPE emAuthMethod;
        uint8_t endCertHash[20];
        uint64_t mmId;
        uint64_t qmFilterId;
        uint16_t* localPrincipalNameForAuth;
        uint16_t* remotePrincipalNameForAuth;
        uint32_t numLocalPrincipalGroupSids;
        uint16_t** localPrincipalGroupSids;
        uint32_t numRemotePrincipalGroupSids;
        uint16_t** remotePrincipalGroupSids;
        Windows::Win32::WindowsFiltering::IPSEC_TRAFFIC_TYPE saTrafficType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_NET_EVENT_CLASSIFY_DROP0
    {
        uint64_t filterId;
        uint16_t layerId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_NET_EVENT_CLASSIFY_DROP1
    {
        uint64_t filterId;
        uint16_t layerId;
        uint32_t reauthReason;
        uint32_t originalProfile;
        uint32_t currentProfile;
        uint32_t msFwpDirection;
        Windows::Win32::SystemServices::BOOL isLoopback;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_NET_EVENT_CLASSIFY_DROP2
    {
        uint64_t filterId;
        uint16_t layerId;
        uint32_t reauthReason;
        uint32_t originalProfile;
        uint32_t currentProfile;
        uint32_t msFwpDirection;
        Windows::Win32::SystemServices::BOOL isLoopback;
        Windows::Win32::WindowsFiltering::FWP_BYTE_BLOB vSwitchId;
        uint32_t vSwitchSourcePort;
        uint32_t vSwitchDestinationPort;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_NET_EVENT_CLASSIFY_DROP_MAC0
    {
        Windows::Win32::WindowsFiltering::FWP_BYTE_ARRAY6 localMacAddr;
        Windows::Win32::WindowsFiltering::FWP_BYTE_ARRAY6 remoteMacAddr;
        uint32_t mediaType;
        uint32_t ifType;
        uint16_t etherType;
        uint32_t ndisPortNumber;
        uint32_t reserved;
        uint16_t vlanTag;
        uint64_t ifLuid;
        uint64_t filterId;
        uint16_t layerId;
        uint32_t reauthReason;
        uint32_t originalProfile;
        uint32_t currentProfile;
        uint32_t msFwpDirection;
        Windows::Win32::SystemServices::BOOL isLoopback;
        Windows::Win32::WindowsFiltering::FWP_BYTE_BLOB vSwitchId;
        uint32_t vSwitchSourcePort;
        uint32_t vSwitchDestinationPort;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_NET_EVENT_CLASSIFY_ALLOW0
    {
        uint64_t filterId;
        uint16_t layerId;
        uint32_t reauthReason;
        uint32_t originalProfile;
        uint32_t currentProfile;
        uint32_t msFwpDirection;
        Windows::Win32::SystemServices::BOOL isLoopback;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_NET_EVENT_IPSEC_KERNEL_DROP0
    {
        int32_t failureStatus;
        Windows::Win32::WindowsFiltering::FWP_DIRECTION direction;
        uint32_t spi;
        uint64_t filterId;
        uint16_t layerId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_NET_EVENT_IPSEC_DOSP_DROP0
    {
        union _Anonymous1_e__Union
        {
            uint32_t publicHostV4Addr;
            uint8_t publicHostV6Addr[16];
        };
        union _Anonymous2_e__Union
        {
            uint32_t internalHostV4Addr;
            uint8_t internalHostV6Addr[16];
        };
        Windows::Win32::WindowsFiltering::FWP_IP_VERSION ipVersion;
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
        int32_t failureStatus;
        Windows::Win32::WindowsFiltering::FWP_DIRECTION direction;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_NET_EVENT_CAPABILITY_DROP0
    {
        Windows::Win32::WindowsFiltering::FWPM_APPC_NETWORK_CAPABILITY_TYPE networkCapabilityId;
        uint64_t filterId;
        Windows::Win32::SystemServices::BOOL isLoopback;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_NET_EVENT_CAPABILITY_ALLOW0
    {
        Windows::Win32::WindowsFiltering::FWPM_APPC_NETWORK_CAPABILITY_TYPE networkCapabilityId;
        uint64_t filterId;
        Windows::Win32::SystemServices::BOOL isLoopback;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_NET_EVENT_LPM_PACKET_ARRIVAL0_
    {
        uint32_t spi;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_NET_EVENT0
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_IKEEXT_MM_FAILURE0* ikeMmFailure;
            Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_IKEEXT_QM_FAILURE0* ikeQmFailure;
            Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_IKEEXT_EM_FAILURE0* ikeEmFailure;
            Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_CLASSIFY_DROP0* classifyDrop;
            Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_IPSEC_KERNEL_DROP0* ipsecDrop;
            Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_IPSEC_DOSP_DROP0* idpDrop;
        };
        Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_HEADER0 header;
        Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_TYPE type;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_NET_EVENT1
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_IKEEXT_MM_FAILURE1* ikeMmFailure;
            Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_IKEEXT_QM_FAILURE0* ikeQmFailure;
            Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_IKEEXT_EM_FAILURE1* ikeEmFailure;
            Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_CLASSIFY_DROP1* classifyDrop;
            Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_IPSEC_KERNEL_DROP0* ipsecDrop;
            Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_IPSEC_DOSP_DROP0* idpDrop;
        };
        Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_HEADER1 header;
        Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_TYPE type;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_NET_EVENT2
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_IKEEXT_MM_FAILURE1* ikeMmFailure;
            Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_IKEEXT_QM_FAILURE0* ikeQmFailure;
            Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_IKEEXT_EM_FAILURE1* ikeEmFailure;
            Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_CLASSIFY_DROP2* classifyDrop;
            Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_IPSEC_KERNEL_DROP0* ipsecDrop;
            Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_IPSEC_DOSP_DROP0* idpDrop;
            Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_CLASSIFY_ALLOW0* classifyAllow;
            Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_CAPABILITY_DROP0* capabilityDrop;
            Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_CAPABILITY_ALLOW0* capabilityAllow;
            Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_CLASSIFY_DROP_MAC0* classifyDropMac;
        };
        Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_HEADER2 header;
        Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_TYPE type;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_NET_EVENT3
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_IKEEXT_MM_FAILURE1* ikeMmFailure;
            Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_IKEEXT_QM_FAILURE0* ikeQmFailure;
            Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_IKEEXT_EM_FAILURE1* ikeEmFailure;
            Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_CLASSIFY_DROP2* classifyDrop;
            Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_IPSEC_KERNEL_DROP0* ipsecDrop;
            Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_IPSEC_DOSP_DROP0* idpDrop;
            Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_CLASSIFY_ALLOW0* classifyAllow;
            Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_CAPABILITY_DROP0* capabilityDrop;
            Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_CAPABILITY_ALLOW0* capabilityAllow;
            Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_CLASSIFY_DROP_MAC0* classifyDropMac;
        };
        Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_HEADER3 header;
        Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_TYPE type;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_NET_EVENT4_
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_IKEEXT_MM_FAILURE2_* ikeMmFailure;
            Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_IKEEXT_QM_FAILURE1_* ikeQmFailure;
            Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_IKEEXT_EM_FAILURE1* ikeEmFailure;
            Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_CLASSIFY_DROP2* classifyDrop;
            Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_IPSEC_KERNEL_DROP0* ipsecDrop;
            Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_IPSEC_DOSP_DROP0* idpDrop;
            Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_CLASSIFY_ALLOW0* classifyAllow;
            Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_CAPABILITY_DROP0* capabilityDrop;
            Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_CAPABILITY_ALLOW0* capabilityAllow;
            Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_CLASSIFY_DROP_MAC0* classifyDropMac;
        };
        Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_HEADER3 header;
        Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_TYPE type;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_NET_EVENT5_
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_IKEEXT_MM_FAILURE2_* ikeMmFailure;
            Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_IKEEXT_QM_FAILURE1_* ikeQmFailure;
            Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_IKEEXT_EM_FAILURE1* ikeEmFailure;
            Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_CLASSIFY_DROP2* classifyDrop;
            Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_IPSEC_KERNEL_DROP0* ipsecDrop;
            Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_IPSEC_DOSP_DROP0* idpDrop;
            Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_CLASSIFY_ALLOW0* classifyAllow;
            Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_CAPABILITY_DROP0* capabilityDrop;
            Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_CAPABILITY_ALLOW0* capabilityAllow;
            Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_CLASSIFY_DROP_MAC0* classifyDropMac;
            Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_LPM_PACKET_ARRIVAL0_* lpmPacketArrival;
        };
        Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_HEADER3 header;
        Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_TYPE type;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_NET_EVENT_ENUM_TEMPLATE0
    {
        Windows::Win32::WindowsProgramming::FILETIME startTime;
        Windows::Win32::WindowsProgramming::FILETIME endTime;
        uint32_t numFilterConditions;
        Windows::Win32::WindowsFiltering::FWPM_FILTER_CONDITION0* filterCondition;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_NET_EVENT_SUBSCRIPTION0
    {
        Windows::Win32::WindowsFiltering::FWPM_NET_EVENT_ENUM_TEMPLATE0* enumTemplate;
        uint32_t flags;
        ::win32::guid sessionKey;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_SYSTEM_PORTS_BY_TYPE0
    {
        Windows::Win32::WindowsFiltering::FWPM_SYSTEM_PORT_TYPE type;
        uint32_t numPorts;
        uint16_t* ports;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_SYSTEM_PORTS0
    {
        uint32_t numTypes;
        Windows::Win32::WindowsFiltering::FWPM_SYSTEM_PORTS_BY_TYPE0* types;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_CONNECTION0
    {
        union _Anonymous1_e__Union
        {
            uint32_t localV4Address;
            uint8_t localV6Address[16];
        };
        union _Anonymous2_e__Union
        {
            uint32_t remoteV4Address;
            uint8_t remoteV6Address[16];
        };
        uint64_t connectionId;
        Windows::Win32::WindowsFiltering::FWP_IP_VERSION ipVersion;
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
        ::win32::guid* providerKey;
        Windows::Win32::WindowsFiltering::IPSEC_TRAFFIC_TYPE ipsecTrafficModeType;
        Windows::Win32::WindowsFiltering::IKEEXT_KEY_MODULE_TYPE keyModuleType;
        Windows::Win32::WindowsFiltering::IKEEXT_PROPOSAL0 mmCrypto;
        Windows::Win32::WindowsFiltering::IKEEXT_CREDENTIAL2 mmPeer;
        Windows::Win32::WindowsFiltering::IKEEXT_CREDENTIAL2 emPeer;
        uint64_t bytesTransferredIn;
        uint64_t bytesTransferredOut;
        uint64_t bytesTransferredTotal;
        Windows::Win32::WindowsProgramming::FILETIME startSysTime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_CONNECTION_ENUM_TEMPLATE0
    {
        uint64_t connectionId;
        uint32_t flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_CONNECTION_SUBSCRIPTION0
    {
        Windows::Win32::WindowsFiltering::FWPM_CONNECTION_ENUM_TEMPLATE0* enumTemplate;
        uint32_t flags;
        ::win32::guid sessionKey;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_VSWITCH_EVENT0
    {
        union _Anonymous_e__Union
        {
            struct _positionInfo_e__Struct
            {
                uint32_t numvSwitchFilterExtensions;
                uint16_t** vSwitchFilterExtensions;
            };
            struct _reorderInfo_e__Struct
            {
                Windows::Win32::SystemServices::BOOL inRequiredPosition;
                uint32_t numvSwitchFilterExtensions;
                uint16_t** vSwitchFilterExtensions;
            };
            _positionInfo_e__Struct positionInfo;
            _reorderInfo_e__Struct reorderInfo;
        };
        Windows::Win32::WindowsFiltering::FWPM_VSWITCH_EVENT_TYPE eventType;
        uint16_t* vSwitchId;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct FWPM_VSWITCH_EVENT_SUBSCRIPTION0
    {
        uint32_t flags;
        ::win32::guid sessionKey;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPSEC_KEY_MANAGER_CALLBACKS0
    {
        ::win32::guid reserved;
        uint32_t flags;
        Windows::Win32::WindowsFiltering::IPSEC_KEY_MANAGER_KEY_DICTATION_CHECK0* keyDictationCheck;
        Windows::Win32::WindowsFiltering::IPSEC_KEY_MANAGER_DICTATE_KEY0* keyDictation;
        Windows::Win32::WindowsFiltering::IPSEC_KEY_MANAGER_NOTIFY_KEY0* keyNotify;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    union DL_OUI
    {
        struct _Anonymous_e__Struct
        {
            uint8_t _bitfield;
        };
        uint8_t Byte[3];
        _Anonymous_e__Struct Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    union DL_EI48
    {
        uint8_t Byte[3];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    union DL_EUI48
    {
        struct _Anonymous_e__Struct
        {
            Windows::Win32::WindowsFiltering::DL_OUI Oui;
            Windows::Win32::WindowsFiltering::DL_EI48 Ei48;
        };
        uint8_t Byte[6];
        _Anonymous_e__Struct Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    union DL_EI64
    {
        uint8_t Byte[5];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    union DL_EUI64
    {
        struct _Anonymous_e__Struct
        {
            union _Anonymous_e__Union
            {
                struct _Anonymous_e__Struct
                {
                    uint8_t Type;
                    uint8_t Tse;
                    Windows::Win32::WindowsFiltering::DL_EI48 Ei48;
                };
                Windows::Win32::WindowsFiltering::DL_EI64 Ei64;
                _Anonymous_e__Struct Anonymous;
            };
            Windows::Win32::WindowsFiltering::DL_OUI Oui;
            _Anonymous_e__Union Anonymous;
        };
        uint8_t Byte[8];
        uint64_t Value;
        _Anonymous_e__Struct Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct SNAP_HEADER
    {
        uint8_t Dsap;
        uint8_t Ssap;
        uint8_t Control;
        uint8_t Oui[3];
        uint16_t Type;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct ETHERNET_HEADER
    {
        union _Anonymous_e__Union
        {
            uint16_t Type;
            uint16_t Length;
        };
        Windows::Win32::WindowsFiltering::DL_EUI48 Destination;
        Windows::Win32::WindowsFiltering::DL_EUI48 Source;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct VLAN_TAG
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint16_t _bitfield;
            };
            uint16_t Tag;
            _Anonymous_e__Struct Anonymous;
        };
        _Anonymous_e__Union Anonymous;
        uint16_t Type;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct ICMP_HEADER
    {
        uint8_t Type;
        uint8_t Code;
        uint16_t Checksum;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct ICMP_MESSAGE
    {
        union _Data_e__Union
        {
            uint32_t Data32[1];
            uint16_t Data16[2];
            uint8_t Data8[4];
        };
        Windows::Win32::WindowsFiltering::ICMP_HEADER Header;
        _Data_e__Union Data;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPV4_HEADER
    {
        union _Anonymous1_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint8_t _bitfield;
            };
            uint8_t VersionAndHeaderLength;
            _Anonymous_e__Struct Anonymous;
        };
        union _Anonymous2_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint8_t _bitfield;
            };
            uint8_t TypeOfServiceAndEcnField;
            _Anonymous_e__Struct Anonymous;
        };
        union _Anonymous3_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint16_t _bitfield;
            };
            uint16_t FlagsAndOffset;
            _Anonymous_e__Struct Anonymous;
        };
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
        uint16_t TotalLength;
        uint16_t Identification;
        _Anonymous3_e__Union Anonymous3;
        uint8_t TimeToLive;
        uint8_t Protocol;
        uint16_t HeaderChecksum;
        Windows::Win32::WinSock::in_addr SourceAddress;
        Windows::Win32::WinSock::in_addr DestinationAddress;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPV4_OPTION_HEADER
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint8_t _bitfield;
            };
            uint8_t OptionType;
            _Anonymous_e__Struct Anonymous;
        };
        _Anonymous_e__Union Anonymous;
        uint8_t OptionLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPV4_TIMESTAMP_OPTION
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint8_t _bitfield;
            };
            uint8_t FlagsOverflow;
            _Anonymous_e__Struct Anonymous;
        };
        Windows::Win32::WindowsFiltering::IPV4_OPTION_HEADER OptionHeader;
        uint8_t Pointer;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPV4_ROUTING_HEADER
    {
        Windows::Win32::WindowsFiltering::IPV4_OPTION_HEADER OptionHeader;
        uint8_t Pointer;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct ICMPV4_ROUTER_SOLICIT
    {
        Windows::Win32::WindowsFiltering::ICMP_MESSAGE RsHeader;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct ICMPV4_ROUTER_ADVERT_HEADER
    {
        Windows::Win32::WindowsFiltering::ICMP_MESSAGE RaHeader;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct ICMPV4_ROUTER_ADVERT_ENTRY
    {
        Windows::Win32::WinSock::in_addr RouterAdvertAddr;
        int32_t PreferenceLevel;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct ICMPV4_TIMESTAMP_MESSAGE
    {
        Windows::Win32::WindowsFiltering::ICMP_MESSAGE Header;
        uint32_t OriginateTimestamp;
        uint32_t ReceiveTimestamp;
        uint32_t TransmitTimestamp;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct ICMPV4_ADDRESS_MASK_MESSAGE
    {
        Windows::Win32::WindowsFiltering::ICMP_MESSAGE Header;
        uint32_t AddressMask;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct ARP_HEADER
    {
        uint16_t HardwareAddressSpace;
        uint16_t ProtocolAddressSpace;
        uint8_t HardwareAddressLength;
        uint8_t ProtocolAddressLength;
        uint16_t Opcode;
        uint8_t SenderHardwareAddress[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IGMP_HEADER
    {
        union _Anonymous1_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint8_t _bitfield;
            };
            _Anonymous_e__Struct Anonymous;
            uint8_t VersionType;
        };
        union _Anonymous2_e__Union
        {
            uint8_t Reserved;
            uint8_t MaxRespTime;
            uint8_t Code;
        };
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
        uint16_t Checksum;
        Windows::Win32::WinSock::in_addr MulticastAddress;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IGMPV3_QUERY_HEADER
    {
        union _Anonymous1_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint8_t _bitfield;
            };
            uint8_t MaxRespCode;
            _Anonymous_e__Struct Anonymous;
        };
        union _Anonymous2_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint8_t _bitfield;
            };
            uint8_t QueriersQueryInterfaceCode;
            _Anonymous_e__Struct Anonymous;
        };
        uint8_t Type;
        _Anonymous1_e__Union Anonymous1;
        uint16_t Checksum;
        Windows::Win32::WinSock::in_addr MulticastAddress;
        uint8_t _bitfield;
        _Anonymous2_e__Union Anonymous2;
        uint16_t SourceCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IGMPV3_REPORT_RECORD_HEADER
    {
        uint8_t Type;
        uint8_t AuxillaryDataLength;
        uint16_t SourceCount;
        Windows::Win32::WinSock::in_addr MulticastAddress;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IGMPV3_REPORT_HEADER
    {
        uint8_t Type;
        uint8_t Reserved;
        uint16_t Checksum;
        uint16_t Reserved2;
        uint16_t RecordCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPV6_HEADER
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t _bitfield;
            };
            uint32_t VersionClassFlow;
            _Anonymous_e__Struct Anonymous;
        };
        _Anonymous_e__Union Anonymous;
        uint16_t PayloadLength;
        uint8_t NextHeader;
        uint8_t HopLimit;
        Windows::Win32::WinSock::in6_addr SourceAddress;
        Windows::Win32::WinSock::in6_addr DestinationAddress;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPV6_FRAGMENT_HEADER
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint16_t _bitfield;
            };
            _Anonymous_e__Struct Anonymous;
            uint16_t OffsetAndFlags;
        };
        uint8_t NextHeader;
        uint8_t Reserved;
        _Anonymous_e__Union Anonymous;
        uint32_t Id;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPV6_EXTENSION_HEADER
    {
        uint8_t NextHeader;
        uint8_t Length;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPV6_OPTION_HEADER
    {
        uint8_t Type;
        uint8_t DataLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPV6_OPTION_JUMBOGRAM
    {
        Windows::Win32::WindowsFiltering::IPV6_OPTION_HEADER Header;
        uint8_t JumbogramLength[4];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPV6_OPTION_ROUTER_ALERT
    {
        Windows::Win32::WindowsFiltering::IPV6_OPTION_HEADER Header;
        uint8_t Value[2];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPV6_ROUTING_HEADER
    {
        uint8_t NextHeader;
        uint8_t Length;
        uint8_t RoutingType;
        uint8_t SegmentsLeft;
        uint8_t Reserved[4];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct nd_router_solicit
    {
        Windows::Win32::WindowsFiltering::ICMP_MESSAGE nd_rs_hdr;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct nd_router_advert
    {
        Windows::Win32::WindowsFiltering::ICMP_MESSAGE nd_ra_hdr;
        uint32_t nd_ra_reachable;
        uint32_t nd_ra_retransmit;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    union IPV6_ROUTER_ADVERTISEMENT_FLAGS
    {
        struct _Anonymous_e__Struct
        {
            uint8_t _bitfield;
        };
        _Anonymous_e__Struct Anonymous;
        uint8_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct nd_neighbor_solicit
    {
        Windows::Win32::WindowsFiltering::ICMP_MESSAGE nd_ns_hdr;
        Windows::Win32::WinSock::in6_addr nd_ns_target;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct nd_neighbor_advert
    {
        Windows::Win32::WindowsFiltering::ICMP_MESSAGE nd_na_hdr;
        Windows::Win32::WinSock::in6_addr nd_na_target;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    union IPV6_NEIGHBOR_ADVERTISEMENT_FLAGS
    {
        struct _Anonymous_e__Struct
        {
            uint8_t _bitfield;
            uint8_t Reserved2[3];
        };
        _Anonymous_e__Struct Anonymous;
        uint32_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct nd_redirect
    {
        Windows::Win32::WindowsFiltering::ICMP_MESSAGE nd_rd_hdr;
        Windows::Win32::WinSock::in6_addr nd_rd_target;
        Windows::Win32::WinSock::in6_addr nd_rd_dst;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct nd_opt_hdr
    {
        uint8_t nd_opt_type;
        uint8_t nd_opt_len;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct nd_opt_prefix_info
    {
        union _Anonymous1_e__Union
        {
            struct _Flags_e__Struct
            {
                uint8_t _bitfield;
            };
            uint8_t nd_opt_pi_flags_reserved;
            _Flags_e__Struct Flags;
        };
        union _Anonymous2_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint8_t nd_opt_pi_reserved3[3];
                uint8_t nd_opt_pi_site_prefix_len;
            };
            uint32_t nd_opt_pi_reserved2;
            _Anonymous_e__Struct Anonymous;
        };
        uint8_t nd_opt_pi_type;
        uint8_t nd_opt_pi_len;
        uint8_t nd_opt_pi_prefix_len;
        _Anonymous1_e__Union Anonymous1;
        uint32_t nd_opt_pi_valid_time;
        uint32_t nd_opt_pi_preferred_time;
        _Anonymous2_e__Union Anonymous2;
        Windows::Win32::WinSock::in6_addr nd_opt_pi_prefix;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct nd_opt_rd_hdr
    {
        uint8_t nd_opt_rh_type;
        uint8_t nd_opt_rh_len;
        uint16_t nd_opt_rh_reserved1;
        uint32_t nd_opt_rh_reserved2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct nd_opt_mtu
    {
        uint8_t nd_opt_mtu_type;
        uint8_t nd_opt_mtu_len;
        uint16_t nd_opt_mtu_reserved;
        uint32_t nd_opt_mtu_mtu;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct nd_opt_route_info
    {
        union _Anonymous_e__Union
        {
            struct _Flags_e__Struct
            {
                uint8_t _bitfield;
            };
            uint8_t nd_opt_ri_flags_reserved;
            _Flags_e__Struct Flags;
        };
        uint8_t nd_opt_ri_type;
        uint8_t nd_opt_ri_len;
        uint8_t nd_opt_ri_prefix_len;
        _Anonymous_e__Union Anonymous;
        uint32_t nd_opt_ri_route_lifetime;
        Windows::Win32::WinSock::in6_addr nd_opt_ri_prefix;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct nd_opt_rdnss
    {
        uint8_t nd_opt_rdnss_type;
        uint8_t nd_opt_rdnss_len;
        uint16_t nd_opt_rdnss_reserved;
        uint32_t nd_opt_rdnss_lifetime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct nd_opt_dnssl
    {
        uint8_t nd_opt_dnssl_type;
        uint8_t nd_opt_dnssl_len;
        uint16_t nd_opt_dnssl_reserved;
        uint32_t nd_opt_dnssl_lifetime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct MLD_HEADER
    {
        Windows::Win32::WindowsFiltering::ICMP_HEADER IcmpHeader;
        uint16_t MaxRespTime;
        uint16_t Reserved;
        Windows::Win32::WinSock::in6_addr MulticastAddress;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct MLDV2_QUERY_HEADER
    {
        union _Anonymous1_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint16_t _bitfield;
            };
            uint16_t MaxRespCode;
            _Anonymous_e__Struct Anonymous;
        };
        union _Anonymous2_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint8_t _bitfield;
            };
            uint8_t QueriersQueryInterfaceCode;
            _Anonymous_e__Struct Anonymous;
        };
        Windows::Win32::WindowsFiltering::ICMP_HEADER IcmpHeader;
        _Anonymous1_e__Union Anonymous1;
        uint16_t Reserved;
        Windows::Win32::WinSock::in6_addr MulticastAddress;
        uint8_t _bitfield;
        _Anonymous2_e__Union Anonymous2;
        uint16_t SourceCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct MLDV2_REPORT_RECORD_HEADER
    {
        uint8_t Type;
        uint8_t AuxillaryDataLength;
        uint16_t SourceCount;
        Windows::Win32::WinSock::in6_addr MulticastAddress;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct MLDV2_REPORT_HEADER
    {
        Windows::Win32::WindowsFiltering::ICMP_HEADER IcmpHeader;
        uint16_t Reserved;
        uint16_t RecordCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct tcp_hdr
    {
        uint16_t th_sport;
        uint16_t th_dport;
        uint32_t th_seq;
        uint32_t th_ack;
        uint8_t _bitfield;
        uint8_t th_flags;
        uint16_t th_win;
        uint16_t th_sum;
        uint16_t th_urp;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct tcp_opt_mss
    {
        uint8_t Kind;
        uint8_t Length;
        uint16_t Mss;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct tcp_opt_ws
    {
        uint8_t Kind;
        uint8_t Length;
        uint8_t ShiftCnt;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct tcp_opt_sack_permitted
    {
        uint8_t Kind;
        uint8_t Length;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct tcp_opt_sack
    {
        struct tcp_opt_sack_block
        {
            uint32_t Left;
            uint32_t Right;
        };
        uint8_t Kind;
        uint8_t Length;
        tcp_opt_sack_block Block[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct tcp_opt_ts
    {
        uint8_t Kind;
        uint8_t Length;
        uint32_t Val;
        uint32_t EcR;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct tcp_opt_unknown
    {
        uint8_t Kind;
        uint8_t Length;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct tcp_opt_fastopen
    {
        uint8_t Kind;
        uint8_t Length;
        uint8_t Cookie[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct DL_TUNNEL_ADDRESS
    {
        Windows::Win32::Kernel::COMPARTMENT_ID CompartmentId;
        Windows::Win32::WinSock::SCOPE_ID ScopeId;
        uint8_t IpAddress[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct DL_TEREDO_ADDRESS
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint16_t Flags;
                uint16_t MappedPort;
                Windows::Win32::WinSock::in_addr MappedAddress;
            };
            Windows::Win32::WindowsFiltering::DL_EUI64 Eui64;
            _Anonymous_e__Struct Anonymous;
        };
        uint8_t Reserved[6];
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct DL_TEREDO_ADDRESS_PRV
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint16_t Flags;
                uint16_t MappedPort;
                Windows::Win32::WinSock::in_addr MappedAddress;
                Windows::Win32::WinSock::in_addr LocalAddress;
                uint32_t InterfaceIndex;
                uint16_t LocalPort;
                Windows::Win32::WindowsFiltering::DL_EUI48 DlDestination;
            };
            Windows::Win32::WindowsFiltering::DL_EUI64 Eui64;
            _Anonymous_e__Struct Anonymous;
        };
        uint8_t Reserved[6];
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct IPTLS_METADATA
    {
        uint64_t SequenceNumber;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsFiltering
{
    struct NPI_MODULEID
    {
        union _Anonymous_e__Union
        {
            ::win32::guid Guid;
            Windows::Win32::Kernel::LUID IfLuid;
        };
        uint16_t Length;
        Windows::Win32::WindowsFiltering::NPI_MODULEID_TYPE Type;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_VIDEO_FORMAT
    {
        Windows::Win32::Dxgi::DXGI_FORMAT Format;
        Windows::Win32::Dxgi::DXGI_COLOR_SPACE_TYPE ColorSpace;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_VIDEO_SAMPLE
    {
        uint32_t Width;
        uint32_t Height;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_FORMAT Format;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_VIDEO_DECODE_CONFIGURATION
    {
        ::win32::guid DecodeProfile;
        Windows::Win32::MediaFoundation::D3D12_BITSTREAM_ENCRYPTION_TYPE BitstreamEncryption;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE InterlaceType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_VIDEO_DECODER_DESC
    {
        uint32_t NodeMask;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_DECODE_CONFIGURATION Configuration;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dxgi
{
    struct DXGI_RATIONAL
    {
        uint32_t Numerator;
        uint32_t Denominator;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_VIDEO_DECODER_HEAP_DESC
    {
        uint32_t NodeMask;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_DECODE_CONFIGURATION Configuration;
        uint32_t DecodeWidth;
        uint32_t DecodeHeight;
        Windows::Win32::Dxgi::DXGI_FORMAT Format;
        Windows::Win32::Dxgi::DXGI_RATIONAL FrameRate;
        uint32_t BitRate;
        uint32_t MaxDecodePictureBufferCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_VIDEO_SIZE_RANGE
    {
        uint32_t MaxWidth;
        uint32_t MaxHeight;
        uint32_t MinWidth;
        uint32_t MinHeight;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_VIDEO_PROCESS_ALPHA_BLENDING
    {
        Windows::Win32::SystemServices::BOOL Enable;
        float Alpha;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_VIDEO_PROCESS_LUMA_KEY
    {
        Windows::Win32::SystemServices::BOOL Enable;
        float Lower;
        float Upper;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC
    {
        Windows::Win32::Dxgi::DXGI_FORMAT Format;
        Windows::Win32::Dxgi::DXGI_COLOR_SPACE_TYPE ColorSpace;
        Windows::Win32::Dxgi::DXGI_RATIONAL SourceAspectRatio;
        Windows::Win32::Dxgi::DXGI_RATIONAL DestinationAspectRatio;
        Windows::Win32::Dxgi::DXGI_RATIONAL FrameRate;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_SIZE_RANGE SourceSizeRange;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_SIZE_RANGE DestinationSizeRange;
        Windows::Win32::SystemServices::BOOL EnableOrientation;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_PROCESS_FILTER_FLAGS FilterFlags;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_FRAME_STEREO_FORMAT StereoFormat;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_FIELD_TYPE FieldType;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS DeinterlaceMode;
        Windows::Win32::SystemServices::BOOL EnableAlphaBlending;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_PROCESS_LUMA_KEY LumaKey;
        uint32_t NumPastFrames;
        uint32_t NumFutureFrames;
        Windows::Win32::SystemServices::BOOL EnableAutoProcessing;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC
    {
        Windows::Win32::Dxgi::DXGI_FORMAT Format;
        Windows::Win32::Dxgi::DXGI_COLOR_SPACE_TYPE ColorSpace;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE AlphaFillMode;
        uint32_t AlphaFillModeSourceStreamIndex;
        float BackgroundColor[4];
        Windows::Win32::Dxgi::DXGI_RATIONAL FrameRate;
        Windows::Win32::SystemServices::BOOL EnableStereo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT
    {
        uint32_t NodeIndex;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_DECODE_CONFIGURATION Configuration;
        uint32_t Width;
        uint32_t Height;
        Windows::Win32::Dxgi::DXGI_FORMAT DecodeFormat;
        Windows::Win32::Dxgi::DXGI_RATIONAL FrameRate;
        uint32_t BitRate;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_DECODE_SUPPORT_FLAGS SupportFlags;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS ConfigurationFlags;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_DECODE_TIER DecodeTier;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILE_COUNT
    {
        uint32_t NodeIndex;
        uint32_t ProfileCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILES
    {
        uint32_t NodeIndex;
        uint32_t ProfileCount;
        ::win32::guid* pProfiles;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_FEATURE_DATA_VIDEO_DECODE_FORMAT_COUNT
    {
        uint32_t NodeIndex;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_DECODE_CONFIGURATION Configuration;
        uint32_t FormatCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_FEATURE_DATA_VIDEO_DECODE_FORMATS
    {
        uint32_t NodeIndex;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_DECODE_CONFIGURATION Configuration;
        uint32_t FormatCount;
        Windows::Win32::Dxgi::DXGI_FORMAT* pOutputFormats;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_FEATURE_DATA_VIDEO_ARCHITECTURE
    {
        Windows::Win32::SystemServices::BOOL IOCoherent;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM
    {
        uint32_t NodeIndex;
        ::win32::guid DecodeProfile;
        uint32_t Width;
        uint32_t Height;
        Windows::Win32::Dxgi::DXGI_FORMAT DecodeFormat;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS Components;
        uint32_t BinCount;
        uint32_t CounterBitDepth;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_VIDEO_SCALE_SUPPORT
    {
        Windows::Win32::MediaFoundation::D3D12_VIDEO_SIZE_RANGE OutputSizeRange;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_SCALE_SUPPORT_FLAGS Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT
    {
        uint32_t NodeIndex;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_DECODE_CONFIGURATION Configuration;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_SAMPLE DecodeSample;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_FORMAT OutputFormat;
        Windows::Win32::Dxgi::DXGI_RATIONAL FrameRate;
        uint32_t BitRate;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAGS SupportFlags;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_SCALE_SUPPORT ScaleSupport;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE
    {
        Windows::Win32::MediaFoundation::D3D12_VIDEO_DECODER_HEAP_DESC VideoDecoderHeapDesc;
        uint64_t MemoryPoolL0Size;
        uint64_t MemoryPoolL1Size;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE
    {
        uint32_t NodeMask;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC* pOutputStreamDesc;
        uint32_t NumInputStreamDescs;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC* pInputStreamDescs;
        uint64_t MemoryPoolL0Size;
        uint64_t MemoryPoolL1Size;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_QUERY_DATA_VIDEO_DECODE_STATISTICS
    {
        uint64_t Status;
        uint64_t NumMacroblocksAffected;
        Windows::Win32::Dxgi::DXGI_RATIONAL FrameRate;
        uint32_t BitRate;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_VIDEO_DECODE_FRAME_ARGUMENT
    {
        Windows::Win32::MediaFoundation::D3D12_VIDEO_DECODE_ARGUMENT_TYPE Type;
        uint32_t Size;
        void* pData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_VIDEO_DECODE_REFERENCE_FRAMES
    {
        uint32_t NumTexture2Ds;
        Windows::Win32::Direct3D12::ID3D12Resource** ppTexture2Ds;
        uint32_t* pSubresources;
        Windows::Win32::MediaFoundation::ID3D12VideoDecoderHeap** ppHeaps;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM
    {
        Windows::Win32::Direct3D12::ID3D12Resource* pBuffer;
        uint64_t Offset;
        uint64_t Size;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS
    {
        Windows::Win32::SystemServices::BOOL Enable;
        Windows::Win32::Direct3D12::ID3D12Resource* pReferenceTexture2D;
        uint32_t ReferenceSubresource;
        Windows::Win32::Dxgi::DXGI_COLOR_SPACE_TYPE OutputColorSpace;
        Windows::Win32::Dxgi::DXGI_COLOR_SPACE_TYPE DecodeColorSpace;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS
    {
        uint32_t NumFrameArguments;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_DECODE_FRAME_ARGUMENT FrameArguments[10];
        Windows::Win32::MediaFoundation::D3D12_VIDEO_DECODE_REFERENCE_FRAMES ReferenceFrames;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM CompressedBitstream;
        Windows::Win32::MediaFoundation::ID3D12VideoDecoderHeap* pHeap;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS
    {
        Windows::Win32::Direct3D12::ID3D12Resource* pOutputTexture2D;
        uint32_t OutputSubresource;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS ConversionArguments;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_VIDEO_PROCESS_FILTER_RANGE
    {
        int32_t Minimum;
        int32_t Maximum;
        int32_t Default;
        float Multiplier;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT
    {
        uint32_t NodeIndex;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_SAMPLE InputSample;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_FIELD_TYPE InputFieldType;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_FRAME_STEREO_FORMAT InputStereoFormat;
        Windows::Win32::Dxgi::DXGI_RATIONAL InputFrameRate;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_FORMAT OutputFormat;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_FRAME_STEREO_FORMAT OutputStereoFormat;
        Windows::Win32::Dxgi::DXGI_RATIONAL OutputFrameRate;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_PROCESS_SUPPORT_FLAGS SupportFlags;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_SCALE_SUPPORT ScaleSupport;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_PROCESS_FEATURE_FLAGS FeatureSupport;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS DeinterlaceSupport;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS AutoProcessingSupport;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_PROCESS_FILTER_FLAGS FilterSupport;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_PROCESS_FILTER_RANGE FilterRangeSupport[32];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_FEATURE_DATA_VIDEO_PROCESS_MAX_INPUT_STREAMS
    {
        uint32_t NodeIndex;
        uint32_t MaxInputStreams;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO
    {
        uint32_t NodeIndex;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS DeinterlaceMode;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_PROCESS_FILTER_FLAGS Filters;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_PROCESS_FEATURE_FLAGS FeatureSupport;
        Windows::Win32::Dxgi::DXGI_RATIONAL InputFrameRate;
        Windows::Win32::Dxgi::DXGI_RATIONAL OutputFrameRate;
        Windows::Win32::SystemServices::BOOL EnableAutoProcessing;
        uint32_t PastFrames;
        uint32_t FutureFrames;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_VIDEO_PROCESS_REFERENCE_SET
    {
        uint32_t NumPastFrames;
        Windows::Win32::Direct3D12::ID3D12Resource** ppPastFrames;
        uint32_t* pPastSubresources;
        uint32_t NumFutureFrames;
        Windows::Win32::Direct3D12::ID3D12Resource** ppFutureFrames;
        uint32_t* pFutureSubresources;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_VIDEO_PROCESS_TRANSFORM
    {
        Windows::Win32::DisplayDevices::RECT SourceRectangle;
        Windows::Win32::DisplayDevices::RECT DestinationRectangle;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_PROCESS_ORIENTATION Orientation;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE
    {
        uint32_t OutputIndex;
        uint32_t InputFrameOrField;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_VIDEO_PROCESS_INPUT_STREAM
    {
        Windows::Win32::Direct3D12::ID3D12Resource* pTexture2D;
        uint32_t Subresource;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_PROCESS_REFERENCE_SET ReferenceSet;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS
    {
        Windows::Win32::MediaFoundation::D3D12_VIDEO_PROCESS_INPUT_STREAM InputStream[2];
        Windows::Win32::MediaFoundation::D3D12_VIDEO_PROCESS_TRANSFORM Transform;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS Flags;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE RateInfo;
        int32_t FilterLevels[32];
        Windows::Win32::MediaFoundation::D3D12_VIDEO_PROCESS_ALPHA_BLENDING AlphaBlending;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_VIDEO_PROCESS_OUTPUT_STREAM
    {
        Windows::Win32::Direct3D12::ID3D12Resource* pTexture2D;
        uint32_t Subresource;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS
    {
        Windows::Win32::MediaFoundation::D3D12_VIDEO_PROCESS_OUTPUT_STREAM OutputStream[2];
        Windows::Win32::DisplayDevices::RECT TargetRectangle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM
    {
        uint64_t Offset;
        Windows::Win32::Direct3D12::ID3D12Resource* pBuffer;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1
    {
        Windows::Win32::SystemServices::BOOL Enable;
        Windows::Win32::Direct3D12::ID3D12Resource* pReferenceTexture2D;
        uint32_t ReferenceSubresource;
        Windows::Win32::Dxgi::DXGI_COLOR_SPACE_TYPE OutputColorSpace;
        Windows::Win32::Dxgi::DXGI_COLOR_SPACE_TYPE DecodeColorSpace;
        uint32_t OutputWidth;
        uint32_t OutputHeight;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1
    {
        Windows::Win32::Direct3D12::ID3D12Resource* pOutputTexture2D;
        uint32_t OutputSubresource;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1 ConversionArguments;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM Histograms[4];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1
    {
        Windows::Win32::MediaFoundation::D3D12_VIDEO_PROCESS_INPUT_STREAM InputStream[2];
        Windows::Win32::MediaFoundation::D3D12_VIDEO_PROCESS_TRANSFORM Transform;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS Flags;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE RateInfo;
        int32_t FilterLevels[32];
        Windows::Win32::MediaFoundation::D3D12_VIDEO_PROCESS_ALPHA_BLENDING AlphaBlending;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_FIELD_TYPE FieldType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_FEATURE_DATA_VIDEO_FEATURE_AREA_SUPPORT
    {
        uint32_t NodeIndex;
        Windows::Win32::SystemServices::BOOL VideoDecodeSupport;
        Windows::Win32::SystemServices::BOOL VideoProcessSupport;
        Windows::Win32::SystemServices::BOOL VideoEncodeSupport;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR
    {
        uint32_t NodeIndex;
        Windows::Win32::Dxgi::DXGI_FORMAT InputFormat;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAGS BlockSizeFlags;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAGS PrecisionFlags;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_SIZE_RANGE SizeRange;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE
    {
        uint32_t NodeIndex;
        Windows::Win32::Dxgi::DXGI_FORMAT InputFormat;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE BlockSize;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION Precision;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_SIZE_RANGE SizeRange;
        Windows::Win32::SystemServices::BOOL Protected;
        uint64_t MotionVectorHeapMemoryPoolL0Size;
        uint64_t MotionVectorHeapMemoryPoolL1Size;
        uint64_t MotionEstimatorMemoryPoolL0Size;
        uint64_t MotionEstimatorMemoryPoolL1Size;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_VIDEO_MOTION_ESTIMATOR_DESC
    {
        uint32_t NodeMask;
        Windows::Win32::Dxgi::DXGI_FORMAT InputFormat;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE BlockSize;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION Precision;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_SIZE_RANGE SizeRange;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC
    {
        uint32_t NodeMask;
        Windows::Win32::Dxgi::DXGI_FORMAT InputFormat;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE BlockSize;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION Precision;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_SIZE_RANGE SizeRange;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_RESOURCE_COORDINATE
    {
        uint64_t X;
        uint32_t Y;
        uint32_t Z;
        uint32_t SubresourceIndex;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT
    {
        Windows::Win32::MediaFoundation::ID3D12VideoMotionVectorHeap* pMotionVectorHeap;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_VIDEO_MOTION_ESTIMATOR_INPUT
    {
        Windows::Win32::Direct3D12::ID3D12Resource* pInputTexture2D;
        uint32_t InputSubresourceIndex;
        Windows::Win32::Direct3D12::ID3D12Resource* pReferenceTexture2D;
        uint32_t ReferenceSubresourceIndex;
        Windows::Win32::MediaFoundation::ID3D12VideoMotionVectorHeap* pHintMotionVectorHeap;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT
    {
        Windows::Win32::Direct3D12::ID3D12Resource* pMotionVectorTexture2D;
        Windows::Win32::MediaFoundation::D3D12_RESOURCE_COORDINATE MotionVectorCoordinate;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT
    {
        Windows::Win32::MediaFoundation::ID3D12VideoMotionVectorHeap* pMotionVectorHeap;
        uint32_t PixelWidth;
        uint32_t PixelHeight;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_FEATURE_DATA_VIDEO_DECODE_PROTECTED_RESOURCES
    {
        uint32_t NodeIndex;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_DECODE_CONFIGURATION Configuration;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS SupportFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_FEATURE_DATA_VIDEO_PROCESS_PROTECTED_RESOURCES
    {
        uint32_t NodeIndex;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS SupportFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES
    {
        uint32_t NodeIndex;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS SupportFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE1
    {
        Windows::Win32::MediaFoundation::D3D12_VIDEO_DECODER_HEAP_DESC VideoDecoderHeapDesc;
        Windows::Win32::SystemServices::BOOL Protected;
        uint64_t MemoryPoolL0Size;
        uint64_t MemoryPoolL1Size;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE1
    {
        uint32_t NodeMask;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC* pOutputStreamDesc;
        uint32_t NumInputStreamDescs;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC* pInputStreamDescs;
        Windows::Win32::SystemServices::BOOL Protected;
        uint64_t MemoryPoolL0Size;
        uint64_t MemoryPoolL1Size;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_COUNT
    {
        uint32_t NodeIndex;
        uint32_t CommandCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_VIDEO_EXTENSION_COMMAND_INFO
    {
        ::win32::guid CommandId;
        uint16_t* Name;
        Windows::Win32::Direct3D12::D3D12_COMMAND_LIST_SUPPORT_FLAGS CommandListSupportFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMANDS
    {
        uint32_t NodeIndex;
        uint32_t CommandCount;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_EXTENSION_COMMAND_INFO* pCommandInfos;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT
    {
        ::win32::guid CommandId;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE Stage;
        uint32_t ParameterCount;
        uint32_t ParameterPacking;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO
    {
        uint16_t* Name;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE Type;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAGS Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETERS
    {
        ::win32::guid CommandId;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE Stage;
        uint32_t ParameterCount;
        Windows::Win32::MediaFoundation::D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO* pParameterInfos;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SUPPORT
    {
        uint32_t NodeIndex;
        ::win32::guid CommandId;
        void* pInputData;
        size_t InputDataSizeInBytes;
        void* pOutputData;
        size_t OutputDataSizeInBytes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SIZE
    {
        uint32_t NodeIndex;
        ::win32::guid CommandId;
        void* pCreationParameters;
        size_t CreationParametersSizeInBytes;
        uint64_t MemoryPoolL0Size;
        uint64_t MemoryPoolL1Size;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D12_VIDEO_EXTENSION_COMMAND_DESC
    {
        uint32_t NodeMask;
        ::win32::guid CommandId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct AecQualityMetrics_Struct
    {
        int64_t i64Timestamp;
        uint8_t ConvergenceFlag;
        uint8_t MicClippedFlag;
        uint8_t MicSilenceFlag;
        uint8_t PstvFeadbackFlag;
        uint8_t SpkClippedFlag;
        uint8_t SpkMuteFlag;
        uint8_t GlitchFlag;
        uint8_t DoubleTalkFlag;
        uint32_t uGlitchCount;
        uint32_t uMicClipCount;
        float fDuration;
        float fTSVariance;
        float fTSDriftRate;
        float fVoiceLevel;
        float fNoiseLevel;
        float fERLE;
        float fAvgERLE;
        uint32_t dwReserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct TOC_DESCRIPTOR
    {
        ::win32::guid guidID;
        uint16_t wStreamNumber;
        ::win32::guid guidType;
        uint16_t wLanguageIndex;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct TOC_ENTRY_DESCRIPTOR
    {
        uint64_t qwStartTime;
        uint64_t qwEndTime;
        uint64_t qwStartPacketOffset;
        uint64_t qwEndPacketOffset;
        uint64_t qwRepresentativeFrameTime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVA_AYUVsample2
    {
        uint8_t bCrValue;
        uint8_t bCbValue;
        uint8_t bY_Value;
        uint8_t bSampleAlpha8;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVA_BufferDescription
    {
        uint32_t dwTypeIndex;
        uint32_t dwBufferIndex;
        uint32_t dwDataOffset;
        uint32_t dwDataSize;
        uint32_t dwFirstMBaddress;
        uint32_t dwNumMBsInBuffer;
        uint32_t dwWidth;
        uint32_t dwHeight;
        uint32_t dwStride;
        uint32_t dwReservedBits;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVA_ConfigPictureDecode
    {
        uint32_t dwFunction;
        uint32_t dwReservedBits[3];
        ::win32::guid guidConfigBitstreamEncryption;
        ::win32::guid guidConfigMBcontrolEncryption;
        ::win32::guid guidConfigResidDiffEncryption;
        uint8_t bConfigBitstreamRaw;
        uint8_t bConfigMBcontrolRasterOrder;
        uint8_t bConfigResidDiffHost;
        uint8_t bConfigSpatialResid8;
        uint8_t bConfigResid8Subtraction;
        uint8_t bConfigSpatialHost8or9Clipping;
        uint8_t bConfigSpatialResidInterleaved;
        uint8_t bConfigIntraResidUnsigned;
        uint8_t bConfigResidDiffAccelerator;
        uint8_t bConfigHostInverseScan;
        uint8_t bConfigSpecificIDCT;
        uint8_t bConfig4GroupedCoefs;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVA_PictureParameters
    {
        uint16_t wDecodedPictureIndex;
        uint16_t wDeblockedPictureIndex;
        uint16_t wForwardRefPictureIndex;
        uint16_t wBackwardRefPictureIndex;
        uint16_t wPicWidthInMBminus1;
        uint16_t wPicHeightInMBminus1;
        uint8_t bMacroblockWidthMinus1;
        uint8_t bMacroblockHeightMinus1;
        uint8_t bBlockWidthMinus1;
        uint8_t bBlockHeightMinus1;
        uint8_t bBPPminus1;
        uint8_t bPicStructure;
        uint8_t bSecondField;
        uint8_t bPicIntra;
        uint8_t bPicBackwardPrediction;
        uint8_t bBidirectionalAveragingMode;
        uint8_t bMVprecisionAndChromaRelation;
        uint8_t bChromaFormat;
        uint8_t bPicScanFixed;
        uint8_t bPicScanMethod;
        uint8_t bPicReadbackRequests;
        uint8_t bRcontrol;
        uint8_t bPicSpatialResid8;
        uint8_t bPicOverflowBlocks;
        uint8_t bPicExtrapolation;
        uint8_t bPicDeblocked;
        uint8_t bPicDeblockConfined;
        uint8_t bPic4MVallowed;
        uint8_t bPicOBMC;
        uint8_t bPicBinPB;
        uint8_t bMV_RPS;
        uint8_t bReservedBits;
        uint16_t wBitstreamFcodes;
        uint16_t wBitstreamPCEelements;
        uint8_t bBitstreamConcealmentNeed;
        uint8_t bBitstreamConcealmentMethod;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVAUncompDataInfo
    {
        uint32_t UncompWidth;
        uint32_t UncompHeight;
        Windows::Win32::Direct3D9::D3DFORMAT UncompFormat;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVACompBufferInfo
    {
        uint32_t NumCompBuffers;
        uint32_t WidthToCreate;
        uint32_t HeightToCreate;
        uint32_t BytesToAllocate;
        uint32_t Usage;
        Windows::Win32::Direct3D9::D3DPOOL Pool;
        Windows::Win32::Direct3D9::D3DFORMAT Format;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVABufferInfo
    {
        void* pCompSurface;
        uint32_t DataOffset;
        uint32_t DataSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVA_ExtendedFormat
    {
        uint32_t _bitfield;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVA_Frequency
    {
        uint32_t Numerator;
        uint32_t Denominator;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVA_VideoDesc
    {
        uint32_t Size;
        uint32_t SampleWidth;
        uint32_t SampleHeight;
        uint32_t SampleFormat;
        Windows::Win32::Direct3D9::D3DFORMAT d3dFormat;
        Windows::Win32::MediaFoundation::DXVA_Frequency InputSampleFreq;
        Windows::Win32::MediaFoundation::DXVA_Frequency OutputFrameFreq;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVA_VideoSample
    {
        int64_t rtStart;
        int64_t rtEnd;
        Windows::Win32::MediaFoundation::DXVA_SampleFormat SampleFormat;
        void* lpDDSSrcSurface;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVA_VideoSample2
    {
        int64_t rtStart;
        int64_t rtEnd;
        uint32_t SampleFormat;
        uint32_t SampleFlags;
        void* lpDDSSrcSurface;
        Windows::Win32::DisplayDevices::RECT rcSrc;
        Windows::Win32::DisplayDevices::RECT rcDst;
        Windows::Win32::MediaFoundation::DXVA_AYUVsample2 Palette[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVA_DeinterlaceCaps
    {
        uint32_t Size;
        uint32_t NumPreviousOutputFrames;
        uint32_t InputPool;
        uint32_t NumForwardRefSamples;
        uint32_t NumBackwardRefSamples;
        Windows::Win32::Direct3D9::D3DFORMAT d3dOutputFormat;
        Windows::Win32::MediaFoundation::DXVA_VideoProcessCaps VideoProcessingCaps;
        Windows::Win32::MediaFoundation::DXVA_DeinterlaceTech DeinterlaceTechnology;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVA_DeinterlaceBlt
    {
        uint32_t Size;
        uint32_t Reserved;
        int64_t rtTarget;
        Windows::Win32::DisplayDevices::RECT DstRect;
        Windows::Win32::DisplayDevices::RECT SrcRect;
        uint32_t NumSourceSurfaces;
        float Alpha;
        Windows::Win32::MediaFoundation::DXVA_VideoSample Source[32];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVA_DeinterlaceBltEx
    {
        uint32_t Size;
        Windows::Win32::MediaFoundation::DXVA_AYUVsample2 BackgroundColor;
        Windows::Win32::DisplayDevices::RECT rcTarget;
        int64_t rtTarget;
        uint32_t NumSourceSurfaces;
        float Alpha;
        Windows::Win32::MediaFoundation::DXVA_VideoSample2 Source[32];
        uint32_t DestinationFormat;
        uint32_t DestinationFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVA_DeinterlaceQueryAvailableModes
    {
        uint32_t Size;
        uint32_t NumGuids;
        ::win32::guid Guids[32];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVA_DeinterlaceQueryModeCaps
    {
        uint32_t Size;
        ::win32::guid Guid;
        Windows::Win32::MediaFoundation::DXVA_VideoDesc VideoDesc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVA_ProcAmpControlCaps
    {
        uint32_t Size;
        uint32_t InputPool;
        Windows::Win32::Direct3D9::D3DFORMAT d3dOutputFormat;
        uint32_t ProcAmpControlProps;
        uint32_t VideoProcessingCaps;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVA_ProcAmpControlQueryRange
    {
        uint32_t Size;
        Windows::Win32::MediaFoundation::DXVA_ProcAmpControlProp ProcAmpControlProp;
        Windows::Win32::MediaFoundation::DXVA_VideoDesc VideoDesc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVA_VideoPropertyRange
    {
        float MinValue;
        float MaxValue;
        float DefaultValue;
        float StepSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVA_ProcAmpControlBlt
    {
        uint32_t Size;
        Windows::Win32::DisplayDevices::RECT DstRect;
        Windows::Win32::DisplayDevices::RECT SrcRect;
        float Alpha;
        float Brightness;
        float Contrast;
        float Hue;
        float Saturation;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVA_COPPSignature
    {
        uint8_t Signature[256];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVA_COPPCommand
    {
        ::win32::guid macKDI;
        ::win32::guid guidCommandID;
        uint32_t dwSequence;
        uint32_t cbSizeData;
        uint8_t CommandData[4056];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVA_COPPStatusInput
    {
        ::win32::guid rApp;
        ::win32::guid guidStatusRequestID;
        uint32_t dwSequence;
        uint32_t cbSizeData;
        uint8_t StatusData[4056];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVA_COPPStatusOutput
    {
        ::win32::guid macKDI;
        uint32_t cbSizeData;
        uint8_t COPPStatus[4076];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVAHD_RATIONAL
    {
        uint32_t Numerator;
        uint32_t Denominator;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVAHD_COLOR_RGBA
    {
        float R;
        float G;
        float B;
        float A;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVAHD_COLOR_YCbCrA
    {
        float Y;
        float Cb;
        float Cr;
        float A;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    union DXVAHD_COLOR
    {
        Windows::Win32::MediaFoundation::DXVAHD_COLOR_RGBA RGB;
        Windows::Win32::MediaFoundation::DXVAHD_COLOR_YCbCrA YCbCr;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVAHD_CONTENT_DESC
    {
        Windows::Win32::MediaFoundation::DXVAHD_FRAME_FORMAT InputFrameFormat;
        Windows::Win32::MediaFoundation::DXVAHD_RATIONAL InputFrameRate;
        uint32_t InputWidth;
        uint32_t InputHeight;
        Windows::Win32::MediaFoundation::DXVAHD_RATIONAL OutputFrameRate;
        uint32_t OutputWidth;
        uint32_t OutputHeight;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVAHD_VPDEVCAPS
    {
        Windows::Win32::MediaFoundation::DXVAHD_DEVICE_TYPE DeviceType;
        uint32_t DeviceCaps;
        uint32_t FeatureCaps;
        uint32_t FilterCaps;
        uint32_t InputFormatCaps;
        Windows::Win32::Direct3D9::D3DPOOL InputPool;
        uint32_t OutputFormatCount;
        uint32_t InputFormatCount;
        uint32_t VideoProcessorCount;
        uint32_t MaxInputStreams;
        uint32_t MaxStreamStates;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVAHD_VPCAPS
    {
        ::win32::guid VPGuid;
        uint32_t PastFrames;
        uint32_t FutureFrames;
        uint32_t ProcessorCaps;
        uint32_t ITelecineCaps;
        uint32_t CustomRateCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVAHD_CUSTOM_RATE_DATA
    {
        Windows::Win32::MediaFoundation::DXVAHD_RATIONAL CustomRate;
        uint32_t OutputFrames;
        Windows::Win32::SystemServices::BOOL InputInterlaced;
        uint32_t InputFramesOrFields;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVAHD_FILTER_RANGE_DATA
    {
        int32_t Minimum;
        int32_t Maximum;
        int32_t Default;
        float Multiplier;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVAHD_BLT_STATE_TARGET_RECT_DATA
    {
        Windows::Win32::SystemServices::BOOL Enable;
        Windows::Win32::DisplayDevices::RECT TargetRect;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVAHD_BLT_STATE_BACKGROUND_COLOR_DATA
    {
        Windows::Win32::SystemServices::BOOL YCbCr;
        Windows::Win32::MediaFoundation::DXVAHD_COLOR BackgroundColor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t _bitfield;
            };
            _Anonymous_e__Struct Anonymous;
            uint32_t Value;
        };
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVAHD_BLT_STATE_ALPHA_FILL_DATA
    {
        Windows::Win32::MediaFoundation::DXVAHD_ALPHA_FILL_MODE Mode;
        uint32_t StreamNumber;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVAHD_BLT_STATE_CONSTRICTION_DATA
    {
        Windows::Win32::SystemServices::BOOL Enable;
        Windows::Win32::DisplayDevices::SIZE Size;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVAHD_BLT_STATE_PRIVATE_DATA
    {
        ::win32::guid Guid;
        uint32_t DataSize;
        void* pData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVAHD_STREAM_STATE_D3DFORMAT_DATA
    {
        Windows::Win32::Direct3D9::D3DFORMAT Format;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVAHD_STREAM_STATE_FRAME_FORMAT_DATA
    {
        Windows::Win32::MediaFoundation::DXVAHD_FRAME_FORMAT FrameFormat;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t _bitfield;
            };
            _Anonymous_e__Struct Anonymous;
            uint32_t Value;
        };
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVAHD_STREAM_STATE_OUTPUT_RATE_DATA
    {
        Windows::Win32::SystemServices::BOOL RepeatFrame;
        Windows::Win32::MediaFoundation::DXVAHD_OUTPUT_RATE OutputRate;
        Windows::Win32::MediaFoundation::DXVAHD_RATIONAL CustomRate;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVAHD_STREAM_STATE_SOURCE_RECT_DATA
    {
        Windows::Win32::SystemServices::BOOL Enable;
        Windows::Win32::DisplayDevices::RECT SourceRect;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVAHD_STREAM_STATE_DESTINATION_RECT_DATA
    {
        Windows::Win32::SystemServices::BOOL Enable;
        Windows::Win32::DisplayDevices::RECT DestinationRect;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVAHD_STREAM_STATE_ALPHA_DATA
    {
        Windows::Win32::SystemServices::BOOL Enable;
        float Alpha;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVAHD_STREAM_STATE_PALETTE_DATA
    {
        uint32_t Count;
        uint32_t* pEntries;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVAHD_STREAM_STATE_LUMA_KEY_DATA
    {
        Windows::Win32::SystemServices::BOOL Enable;
        float Lower;
        float Upper;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVAHD_STREAM_STATE_ASPECT_RATIO_DATA
    {
        Windows::Win32::SystemServices::BOOL Enable;
        Windows::Win32::MediaFoundation::DXVAHD_RATIONAL SourceAspectRatio;
        Windows::Win32::MediaFoundation::DXVAHD_RATIONAL DestinationAspectRatio;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVAHD_STREAM_STATE_FILTER_DATA
    {
        Windows::Win32::SystemServices::BOOL Enable;
        int32_t Level;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVAHD_STREAM_STATE_PRIVATE_DATA
    {
        ::win32::guid Guid;
        uint32_t DataSize;
        void* pData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVAHD_STREAM_DATA
    {
        Windows::Win32::SystemServices::BOOL Enable;
        uint32_t OutputIndex;
        uint32_t InputFrameOrField;
        uint32_t PastFrames;
        uint32_t FutureFrames;
        Windows::Win32::Direct2D::IDirect3DSurface9** ppPastSurfaces;
        Windows::Win32::Direct2D::IDirect3DSurface9* pInputSurface;
        Windows::Win32::Direct2D::IDirect3DSurface9** ppFutureSurfaces;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVAHD_STREAM_STATE_PRIVATE_IVTC_DATA
    {
        Windows::Win32::SystemServices::BOOL Enable;
        uint32_t ITelecineFlags;
        uint32_t Frames;
        uint32_t InputField;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVAHDSW_CALLBACKS
    {
        Windows::Win32::MediaFoundation::PDXVAHDSW_CreateDevice* CreateDevice;
        Windows::Win32::MediaFoundation::PDXVAHDSW_ProposeVideoPrivateFormat* ProposeVideoPrivateFormat;
        Windows::Win32::MediaFoundation::PDXVAHDSW_GetVideoProcessorDeviceCaps* GetVideoProcessorDeviceCaps;
        Windows::Win32::MediaFoundation::PDXVAHDSW_GetVideoProcessorOutputFormats* GetVideoProcessorOutputFormats;
        Windows::Win32::MediaFoundation::PDXVAHDSW_GetVideoProcessorInputFormats* GetVideoProcessorInputFormats;
        Windows::Win32::MediaFoundation::PDXVAHDSW_GetVideoProcessorCaps* GetVideoProcessorCaps;
        Windows::Win32::MediaFoundation::PDXVAHDSW_GetVideoProcessorCustomRates* GetVideoProcessorCustomRates;
        Windows::Win32::MediaFoundation::PDXVAHDSW_GetVideoProcessorFilterRange* GetVideoProcessorFilterRange;
        Windows::Win32::MediaFoundation::PDXVAHDSW_DestroyDevice* DestroyDevice;
        Windows::Win32::MediaFoundation::PDXVAHDSW_CreateVideoProcessor* CreateVideoProcessor;
        Windows::Win32::MediaFoundation::PDXVAHDSW_SetVideoProcessBltState* SetVideoProcessBltState;
        Windows::Win32::MediaFoundation::PDXVAHDSW_GetVideoProcessBltStatePrivate* GetVideoProcessBltStatePrivate;
        Windows::Win32::MediaFoundation::PDXVAHDSW_SetVideoProcessStreamState* SetVideoProcessStreamState;
        Windows::Win32::MediaFoundation::PDXVAHDSW_GetVideoProcessStreamStatePrivate* GetVideoProcessStreamStatePrivate;
        Windows::Win32::MediaFoundation::PDXVAHDSW_VideoProcessBltHD* VideoProcessBltHD;
        Windows::Win32::MediaFoundation::PDXVAHDSW_DestroyVideoProcessor* DestroyVideoProcessor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVAHDETW_CREATEVIDEOPROCESSOR
    {
        uint64_t pObject;
        uint64_t pD3D9Ex;
        ::win32::guid VPGuid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVAHDETW_VIDEOPROCESSBLTSTATE
    {
        uint64_t pObject;
        Windows::Win32::MediaFoundation::DXVAHD_BLT_STATE State;
        uint32_t DataSize;
        Windows::Win32::SystemServices::BOOL SetState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVAHDETW_VIDEOPROCESSSTREAMSTATE
    {
        uint64_t pObject;
        uint32_t StreamNumber;
        Windows::Win32::MediaFoundation::DXVAHD_STREAM_STATE State;
        uint32_t DataSize;
        Windows::Win32::SystemServices::BOOL SetState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVAHDETW_VIDEOPROCESSBLTHD
    {
        uint64_t pObject;
        uint64_t pOutputSurface;
        Windows::Win32::DisplayDevices::RECT TargetRect;
        Windows::Win32::Direct3D9::D3DFORMAT OutputFormat;
        uint32_t ColorSpace;
        uint32_t OutputFrame;
        uint32_t StreamCount;
        Windows::Win32::SystemServices::BOOL Enter;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVAHDETW_VIDEOPROCESSBLTHD_STREAM
    {
        uint64_t pObject;
        uint64_t pInputSurface;
        Windows::Win32::DisplayDevices::RECT SourceRect;
        Windows::Win32::DisplayDevices::RECT DestinationRect;
        Windows::Win32::Direct3D9::D3DFORMAT InputFormat;
        Windows::Win32::MediaFoundation::DXVAHD_FRAME_FORMAT FrameFormat;
        uint32_t ColorSpace;
        uint32_t StreamNumber;
        uint32_t OutputIndex;
        uint32_t InputFrameOrField;
        uint32_t PastFrames;
        uint32_t FutureFrames;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVAHDETW_DESTROYVIDEOPROCESSOR
    {
        uint64_t pObject;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVA2_ExtendedFormat
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t _bitfield;
            };
            _Anonymous_e__Struct Anonymous;
            uint32_t value;
        };
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVA2_Frequency
    {
        uint32_t Numerator;
        uint32_t Denominator;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVA2_VideoDesc
    {
        uint32_t SampleWidth;
        uint32_t SampleHeight;
        Windows::Win32::MediaFoundation::DXVA2_ExtendedFormat SampleFormat;
        Windows::Win32::Direct3D9::D3DFORMAT Format;
        Windows::Win32::MediaFoundation::DXVA2_Frequency InputSampleFreq;
        Windows::Win32::MediaFoundation::DXVA2_Frequency OutputFrameFreq;
        uint32_t UABProtectionLevel;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVA2_VideoProcessorCaps
    {
        uint32_t DeviceCaps;
        Windows::Win32::Direct3D9::D3DPOOL InputPool;
        uint32_t NumForwardRefSamples;
        uint32_t NumBackwardRefSamples;
        uint32_t Reserved;
        uint32_t DeinterlaceTechnology;
        uint32_t ProcAmpControlCaps;
        uint32_t VideoProcessorOperations;
        uint32_t NoiseFilterTechnology;
        uint32_t DetailFilterTechnology;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVA2_Fixed32
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint16_t Fraction;
                int16_t Value;
            };
            _Anonymous_e__Struct Anonymous;
            int32_t ll;
        };
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVA2_AYUVSample8
    {
        uint8_t Cr;
        uint8_t Cb;
        uint8_t Y;
        uint8_t Alpha;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVA2_AYUVSample16
    {
        uint16_t Cr;
        uint16_t Cb;
        uint16_t Y;
        uint16_t Alpha;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVA2_VideoSample
    {
        int64_t Start;
        int64_t End;
        Windows::Win32::MediaFoundation::DXVA2_ExtendedFormat SampleFormat;
        Windows::Win32::Direct2D::IDirect3DSurface9* SrcSurface;
        Windows::Win32::DisplayDevices::RECT SrcRect;
        Windows::Win32::DisplayDevices::RECT DstRect;
        Windows::Win32::MediaFoundation::DXVA2_AYUVSample8 Pal[16];
        Windows::Win32::MediaFoundation::DXVA2_Fixed32 PlanarAlpha;
        uint32_t SampleData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVA2_ValueRange
    {
        Windows::Win32::MediaFoundation::DXVA2_Fixed32 MinValue;
        Windows::Win32::MediaFoundation::DXVA2_Fixed32 MaxValue;
        Windows::Win32::MediaFoundation::DXVA2_Fixed32 DefaultValue;
        Windows::Win32::MediaFoundation::DXVA2_Fixed32 StepSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVA2_ProcAmpValues
    {
        Windows::Win32::MediaFoundation::DXVA2_Fixed32 Brightness;
        Windows::Win32::MediaFoundation::DXVA2_Fixed32 Contrast;
        Windows::Win32::MediaFoundation::DXVA2_Fixed32 Hue;
        Windows::Win32::MediaFoundation::DXVA2_Fixed32 Saturation;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVA2_FilterValues
    {
        Windows::Win32::MediaFoundation::DXVA2_Fixed32 Level;
        Windows::Win32::MediaFoundation::DXVA2_Fixed32 Threshold;
        Windows::Win32::MediaFoundation::DXVA2_Fixed32 Radius;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVA2_VideoProcessBltParams
    {
        int64_t TargetFrame;
        Windows::Win32::DisplayDevices::RECT TargetRect;
        Windows::Win32::DisplayDevices::SIZE ConstrictionSize;
        uint32_t StreamingFlags;
        Windows::Win32::MediaFoundation::DXVA2_AYUVSample16 BackgroundColor;
        Windows::Win32::MediaFoundation::DXVA2_ExtendedFormat DestFormat;
        Windows::Win32::MediaFoundation::DXVA2_ProcAmpValues ProcAmpValues;
        Windows::Win32::MediaFoundation::DXVA2_Fixed32 Alpha;
        Windows::Win32::MediaFoundation::DXVA2_FilterValues NoiseFilterLuma;
        Windows::Win32::MediaFoundation::DXVA2_FilterValues NoiseFilterChroma;
        Windows::Win32::MediaFoundation::DXVA2_FilterValues DetailFilterLuma;
        Windows::Win32::MediaFoundation::DXVA2_FilterValues DetailFilterChroma;
        uint32_t DestData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVA2_ConfigPictureDecode
    {
        ::win32::guid guidConfigBitstreamEncryption;
        ::win32::guid guidConfigMBcontrolEncryption;
        ::win32::guid guidConfigResidDiffEncryption;
        uint32_t ConfigBitstreamRaw;
        uint32_t ConfigMBcontrolRasterOrder;
        uint32_t ConfigResidDiffHost;
        uint32_t ConfigSpatialResid8;
        uint32_t ConfigResid8Subtraction;
        uint32_t ConfigSpatialHost8or9Clipping;
        uint32_t ConfigSpatialResidInterleaved;
        uint32_t ConfigIntraResidUnsigned;
        uint32_t ConfigResidDiffAccelerator;
        uint32_t ConfigHostInverseScan;
        uint32_t ConfigSpecificIDCT;
        uint32_t Config4GroupedCoefs;
        uint16_t ConfigMinRenderTargetBuffCount;
        uint16_t ConfigDecoderSpecific;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVA2_DecodeBufferDesc
    {
        uint32_t CompressedBufferType;
        uint32_t BufferIndex;
        uint32_t DataOffset;
        uint32_t DataSize;
        uint32_t FirstMBaddress;
        uint32_t NumMBsInBuffer;
        uint32_t Width;
        uint32_t Height;
        uint32_t Stride;
        uint32_t ReservedBits;
        void* pvPVPState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVA2_AES_CTR_IV
    {
        uint64_t IV;
        uint64_t Count;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVA2_DecodeExtensionData
    {
        uint32_t Function;
        void* pPrivateInputData;
        uint32_t PrivateInputDataSize;
        void* pPrivateOutputData;
        uint32_t PrivateOutputDataSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DXVA2_DecodeExecuteParams
    {
        uint32_t NumCompBuffers;
        Windows::Win32::MediaFoundation::DXVA2_DecodeBufferDesc* pCompressedBuffers;
        Windows::Win32::MediaFoundation::DXVA2_DecodeExtensionData* pExtensionData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct OPM_RANDOM_NUMBER
    {
        uint8_t abRandomNumber[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct OPM_OMAC
    {
        uint8_t abOMAC[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct OPM_ENCRYPTED_INITIALIZATION_PARAMETERS
    {
        uint8_t abEncryptedInitializationParameters[256];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct OPM_GET_INFO_PARAMETERS
    {
        Windows::Win32::MediaFoundation::OPM_OMAC omac;
        Windows::Win32::MediaFoundation::OPM_RANDOM_NUMBER rnRandomNumber;
        ::win32::guid guidInformation;
        uint32_t ulSequenceNumber;
        uint32_t cbParametersSize;
        uint8_t abParameters[4056];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct OPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS
    {
        Windows::Win32::MediaFoundation::OPM_RANDOM_NUMBER rnRandomNumber;
        ::win32::guid guidInformation;
        uint32_t ulSequenceNumber;
        uint32_t cbParametersSize;
        uint8_t abParameters[4056];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct OPM_HDCP_KEY_SELECTION_VECTOR
    {
        uint8_t abKeySelectionVector[5];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct OPM_CONNECTED_HDCP_DEVICE_INFORMATION
    {
        Windows::Win32::MediaFoundation::OPM_RANDOM_NUMBER rnRandomNumber;
        uint32_t ulStatusFlags;
        uint32_t ulHDCPFlags;
        Windows::Win32::MediaFoundation::OPM_HDCP_KEY_SELECTION_VECTOR ksvB;
        uint8_t Reserved[11];
        uint8_t Reserved2[16];
        uint8_t Reserved3[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct OPM_REQUESTED_INFORMATION
    {
        Windows::Win32::MediaFoundation::OPM_OMAC omac;
        uint32_t cbRequestedInformationSize;
        uint8_t abRequestedInformation[4076];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct OPM_STANDARD_INFORMATION
    {
        Windows::Win32::MediaFoundation::OPM_RANDOM_NUMBER rnRandomNumber;
        uint32_t ulStatusFlags;
        uint32_t ulInformation;
        uint32_t ulReserved;
        uint32_t ulReserved2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct OPM_ACTUAL_OUTPUT_FORMAT
    {
        Windows::Win32::MediaFoundation::OPM_RANDOM_NUMBER rnRandomNumber;
        uint32_t ulStatusFlags;
        uint32_t ulDisplayWidth;
        uint32_t ulDisplayHeight;
        Windows::Win32::MediaFoundation::DXVA2_SampleFormat dsfSampleInterleaveFormat;
        Windows::Win32::Direct3D9::D3DFORMAT d3dFormat;
        uint32_t ulFrequencyNumerator;
        uint32_t ulFrequencyDenominator;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct OPM_ACP_AND_CGMSA_SIGNALING
    {
        Windows::Win32::MediaFoundation::OPM_RANDOM_NUMBER rnRandomNumber;
        uint32_t ulStatusFlags;
        uint32_t ulAvailableTVProtectionStandards;
        uint32_t ulActiveTVProtectionStandard;
        uint32_t ulReserved;
        uint32_t ulAspectRatioValidMask1;
        uint32_t ulAspectRatioData1;
        uint32_t ulAspectRatioValidMask2;
        uint32_t ulAspectRatioData2;
        uint32_t ulAspectRatioValidMask3;
        uint32_t ulAspectRatioData3;
        uint32_t ulReserved2[4];
        uint32_t ulReserved3[4];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct OPM_OUTPUT_ID_DATA
    {
        Windows::Win32::MediaFoundation::OPM_RANDOM_NUMBER rnRandomNumber;
        uint32_t ulStatusFlags;
        uint64_t OutputId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct OPM_CONFIGURE_PARAMETERS
    {
        Windows::Win32::MediaFoundation::OPM_OMAC omac;
        ::win32::guid guidSetting;
        uint32_t ulSequenceNumber;
        uint32_t cbParametersSize;
        uint8_t abParameters[4056];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct OPM_SET_PROTECTION_LEVEL_PARAMETERS
    {
        uint32_t ulProtectionType;
        uint32_t ulProtectionLevel;
        uint32_t Reserved;
        uint32_t Reserved2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct OPM_SET_ACP_AND_CGMSA_SIGNALING_PARAMETERS
    {
        uint32_t ulNewTVProtectionStandard;
        uint32_t ulAspectRatioChangeMask1;
        uint32_t ulAspectRatioData1;
        uint32_t ulAspectRatioChangeMask2;
        uint32_t ulAspectRatioData2;
        uint32_t ulAspectRatioChangeMask3;
        uint32_t ulAspectRatioData3;
        uint32_t ulReserved[4];
        uint32_t ulReserved2[4];
        uint32_t ulReserved3;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct OPM_SET_HDCP_SRM_PARAMETERS
    {
        uint32_t ulSRMVersion;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct OPM_GET_CODEC_INFO_PARAMETERS
    {
        uint32_t cbVerifier;
        uint8_t Verifier[4052];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct OPM_GET_CODEC_INFO_INFORMATION
    {
        Windows::Win32::MediaFoundation::OPM_RANDOM_NUMBER rnRandomNumber;
        uint32_t Merit;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MFT_REGISTER_TYPE_INFO
    {
        ::win32::guid guidMajorType;
        ::win32::guid guidSubtype;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MFRatio
    {
        uint32_t Numerator;
        uint32_t Denominator;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MFOffset
    {
        uint16_t fract;
        int16_t value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MFVideoArea
    {
        Windows::Win32::MediaFoundation::MFOffset OffsetX;
        Windows::Win32::MediaFoundation::MFOffset OffsetY;
        Windows::Win32::DisplayDevices::SIZE Area;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MFVideoInfo
    {
        uint32_t dwWidth;
        uint32_t dwHeight;
        Windows::Win32::MediaFoundation::MFRatio PixelAspectRatio;
        Windows::Win32::MediaFoundation::MFVideoChromaSubsampling SourceChromaSubsampling;
        Windows::Win32::MediaFoundation::MFVideoInterlaceMode InterlaceMode;
        Windows::Win32::MediaFoundation::MFVideoTransferFunction TransferFunction;
        Windows::Win32::MediaFoundation::MFVideoPrimaries ColorPrimaries;
        Windows::Win32::MediaFoundation::MFVideoTransferMatrix TransferMatrix;
        Windows::Win32::MediaFoundation::MFVideoLighting SourceLighting;
        Windows::Win32::MediaFoundation::MFRatio FramesPerSecond;
        Windows::Win32::MediaFoundation::MFNominalRange NominalRange;
        Windows::Win32::MediaFoundation::MFVideoArea GeometricAperture;
        Windows::Win32::MediaFoundation::MFVideoArea MinimumDisplayAperture;
        Windows::Win32::MediaFoundation::MFVideoArea PanScanAperture;
        uint64_t VideoFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MFAYUVSample
    {
        uint8_t bCrValue;
        uint8_t bCbValue;
        uint8_t bYValue;
        uint8_t bSampleAlpha8;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MFARGB
    {
        uint8_t rgbBlue;
        uint8_t rgbGreen;
        uint8_t rgbRed;
        uint8_t rgbAlpha;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    union MFPaletteEntry
    {
        Windows::Win32::MediaFoundation::MFARGB ARGB;
        Windows::Win32::MediaFoundation::MFAYUVSample AYCbCr;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MFVideoSurfaceInfo
    {
        uint32_t Format;
        uint32_t PaletteEntries;
        Windows::Win32::MediaFoundation::MFPaletteEntry Palette[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MFVideoCompressedInfo
    {
        int64_t AvgBitrate;
        int64_t AvgBitErrorRate;
        uint32_t MaxKeyFrameSpacing;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MFVIDEOFORMAT
    {
        uint32_t dwSize;
        Windows::Win32::MediaFoundation::MFVideoInfo videoInfo;
        ::win32::guid guidFormat;
        Windows::Win32::MediaFoundation::MFVideoCompressedInfo compressedInfo;
        Windows::Win32::MediaFoundation::MFVideoSurfaceInfo surfaceInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MFT_INPUT_STREAM_INFO
    {
        int64_t hnsMaxLatency;
        uint32_t dwFlags;
        uint32_t cbSize;
        uint32_t cbMaxLookahead;
        uint32_t cbAlignment;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MFT_OUTPUT_STREAM_INFO
    {
        uint32_t dwFlags;
        uint32_t cbSize;
        uint32_t cbAlignment;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MFT_OUTPUT_DATA_BUFFER
    {
        uint32_t dwStreamID;
        Windows::Win32::MediaFoundation::IMFSample* pSample;
        uint32_t dwStatus;
        Windows::Win32::MediaFoundation::IMFCollection* pEvents;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct STREAM_MEDIUM
    {
        ::win32::guid gidMedium;
        uint32_t unMediumInstance;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MFAudioDecoderDegradationInfo
    {
        Windows::Win32::MediaFoundation::MFT_AUDIO_DECODER_DEGRADATION_REASON eDegradationReason;
        Windows::Win32::MediaFoundation::MFT_AUDIO_DECODER_DEGRADATION_TYPE eType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MFT_STREAM_STATE_PARAM
    {
        uint32_t StreamId;
        Windows::Win32::MediaFoundation::MF_STREAM_STATE State;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MFCLOCK_PROPERTIES
    {
        uint64_t qwCorrelationRate;
        ::win32::guid guidClockId;
        uint32_t dwClockFlags;
        uint64_t qwClockFrequency;
        uint32_t dwClockTolerance;
        uint32_t dwClockJitter;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MFRR_COMPONENT_HASH_INFO
    {
        uint32_t ulReason;
        uint16_t rgHeaderHash[43];
        uint16_t rgPublicKeyHash[43];
        uint16_t wszName[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MFRR_COMPONENTS
    {
        uint32_t dwRRInfoVersion;
        uint32_t dwRRComponents;
        Windows::Win32::MediaFoundation::MFRR_COMPONENT_HASH_INFO* pRRComponents;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct ASF_FLAT_PICTURE
    {
        uint8_t bPictureType;
        uint32_t dwDataLen;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct ASF_FLAT_SYNCHRONISED_LYRICS
    {
        uint8_t bTimeStampFormat;
        uint8_t bContentType;
        uint32_t dwLyricsLen;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MFTOPONODE_ATTRIBUTE_UPDATE
    {
        union _Anonymous_e__Union
        {
            uint32_t u32;
            uint64_t u64;
            double d;
        };
        uint64_t NodeId;
        ::win32::guid guidAttributeKey;
        Windows::Win32::MediaFoundation::MF_ATTRIBUTE_TYPE attrType;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MF_LEAKY_BUCKET_PAIR
    {
        uint32_t dwBitrate;
        uint32_t msBufferWindow;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MFBYTESTREAM_BUFFERING_PARAMS
    {
        uint64_t cbTotalFileSize;
        uint64_t cbPlayableDataSize;
        Windows::Win32::MediaFoundation::MF_LEAKY_BUCKET_PAIR* prgBuckets;
        uint32_t cBuckets;
        uint64_t qwNetBufferingTime;
        uint64_t qwExtraBufferingTimeDuringSeek;
        uint64_t qwPlayDuration;
        float dRate;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MF_BYTE_STREAM_CACHE_RANGE
    {
        uint64_t qwStartOffset;
        uint64_t qwEndOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MFNetCredentialManagerGetParam
    {
        int32_t hrOp;
        Windows::Win32::SystemServices::BOOL fAllowLoggedOnUser;
        Windows::Win32::SystemServices::BOOL fClearTextPackage;
        uint16_t* pszUrl;
        uint16_t* pszSite;
        uint16_t* pszRealm;
        uint16_t* pszPackage;
        int32_t nRetries;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MFINPUTTRUSTAUTHORITY_ACCESS_ACTION
    {
        Windows::Win32::MediaFoundation::MFPOLICYMANAGER_ACTION Action;
        uint8_t* pbTicket;
        uint32_t cbTicket;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS
    {
        uint32_t dwSize;
        uint32_t dwVer;
        uint32_t cbSignatureOffset;
        uint32_t cbSignatureSize;
        uint32_t cbExtensionOffset;
        uint32_t cbExtensionSize;
        uint32_t cActions;
        Windows::Win32::MediaFoundation::MFINPUTTRUSTAUTHORITY_ACCESS_ACTION rgOutputActions[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MF_TRANSCODE_SINK_INFO
    {
        uint32_t dwVideoStreamID;
        Windows::Win32::MediaFoundation::IMFMediaType* pVideoMediaType;
        uint32_t dwAudioStreamID;
        Windows::Win32::MediaFoundation::IMFMediaType* pAudioMediaType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MFT_REGISTRATION_INFO
    {
        ::win32::guid clsid;
        ::win32::guid guidCategory;
        uint32_t uiFlags;
        uint16_t* pszName;
        uint32_t cInTypes;
        Windows::Win32::MediaFoundation::MFT_REGISTER_TYPE_INFO* pInTypes;
        uint32_t cOutTypes;
        Windows::Win32::MediaFoundation::MFT_REGISTER_TYPE_INFO* pOutTypes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MFCONTENTPROTECTIONDEVICE_INPUT_DATA
    {
        uint32_t HWProtectionFunctionID;
        uint32_t PrivateDataByteCount;
        uint32_t HWProtectionDataByteCount;
        uint32_t Reserved;
        uint8_t InputData[4];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MFCONTENTPROTECTIONDEVICE_OUTPUT_DATA
    {
        uint32_t PrivateDataByteCount;
        uint32_t MaxHWProtectionDataByteCount;
        uint32_t HWProtectionDataByteCount;
        int32_t Status;
        int64_t TransportTimeInHundredsOfNanoseconds;
        int64_t ExecutionTimeInHundredsOfNanoseconds;
        uint8_t OutputData[4];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA
    {
        uint32_t TaskIndex;
        uint16_t ClassName[260];
        int32_t BasePriority;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MFMediaKeyStatus
    {
        uint8_t* pbKeyId;
        uint32_t cbKeyId;
        Windows::Win32::MediaFoundation::MF_MEDIAKEY_STATUS eMediaKeyStatus;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MF_VIDEO_SPHERICAL_VIEWDIRECTION
    {
        int32_t iHeading;
        int32_t iPitch;
        int32_t iRoll;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct SENSORPROFILEID
    {
        ::win32::guid Type;
        uint32_t Index;
        uint32_t Unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MFCameraIntrinsic_CameraModel
    {
        float FocalLength_x;
        float FocalLength_y;
        float PrincipalPoint_x;
        float PrincipalPoint_y;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MFCameraIntrinsic_DistortionModel6KT
    {
        float Radial_k1;
        float Radial_k2;
        float Radial_k3;
        float Radial_k4;
        float Radial_k5;
        float Radial_k6;
        float Tangential_p1;
        float Tangential_p2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MFCameraIntrinsic_DistortionModelArcTan
    {
        float Radial_k0;
        float DistortionCenter_x;
        float DistortionCenter_y;
        float Tangential_x;
        float Tangential_y;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MFExtendedCameraIntrinsic_IntrinsicModel
    {
        uint32_t Width;
        uint32_t Height;
        uint32_t SplitFrameId;
        Windows::Win32::MediaFoundation::MFCameraIntrinsic_CameraModel CameraModel;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct ASF_INDEX_IDENTIFIER
    {
        ::win32::guid guidIndexType;
        uint16_t wStreamNumber;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct ASF_INDEX_DESCRIPTOR
    {
        Windows::Win32::MediaFoundation::ASF_INDEX_IDENTIFIER Identifier;
        uint16_t cPerEntryBytes;
        uint16_t szDescription[32];
        uint32_t dwInterval;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct ASF_MUX_STATISTICS
    {
        uint32_t cFramesWritten;
        uint32_t cFramesDropped;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MFVideoNormalizedRect
    {
        float left;
        float top;
        float right;
        float bottom;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MOVE_RECT
    {
        Windows::Win32::DisplayDevices::POINT SourcePoint;
        Windows::Win32::DisplayDevices::RECT DestRect;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DIRTYRECT_INFO
    {
        uint32_t FrameNumber;
        uint32_t NumDirtyRects;
        Windows::Win32::DisplayDevices::RECT DirtyRects[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MOVEREGION_INFO
    {
        uint32_t FrameNumber;
        uint32_t NumMoveRegions;
        Windows::Win32::MediaFoundation::MOVE_RECT MoveRegions[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct ROI_AREA
    {
        Windows::Win32::DisplayDevices::RECT rect;
        int32_t QPDelta;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MACROBLOCK_DATA
    {
        uint32_t flags;
        int16_t motionVectorX;
        int16_t motionVectorY;
        int32_t QPDelta;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MFFOLDDOWN_MATRIX
    {
        uint32_t cbSize;
        uint32_t cSrcChannels;
        uint32_t cDstChannels;
        uint32_t dwChannelMask;
        int32_t Coeff[64];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MT_CUSTOM_VIDEO_PRIMARIES
    {
        float fRx;
        float fRy;
        float fGx;
        float fGy;
        float fBx;
        float fBy;
        float fWx;
        float fWy;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MT_ARBITRARY_HEADER
    {
        ::win32::guid majortype;
        ::win32::guid subtype;
        Windows::Win32::SystemServices::BOOL bFixedSizeSamples;
        Windows::Win32::SystemServices::BOOL bTemporalCompression;
        uint32_t lSampleSize;
        ::win32::guid formattype;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MF_FLOAT2
    {
        float x;
        float y;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MF_FLOAT3
    {
        float x;
        float y;
        float z;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MF_QUATERNION
    {
        float x;
        float y;
        float z;
        float w;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MFCameraExtrinsic_CalibratedTransform
    {
        ::win32::guid CalibrationId;
        Windows::Win32::MediaFoundation::MF_FLOAT3 Position;
        Windows::Win32::MediaFoundation::MF_QUATERNION Orientation;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MFCameraExtrinsics
    {
        uint32_t TransformCount;
        Windows::Win32::MediaFoundation::MFCameraExtrinsic_CalibratedTransform CalibratedTransforms[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MFCameraIntrinsic_PinholeCameraModel
    {
        Windows::Win32::MediaFoundation::MF_FLOAT2 FocalLength;
        Windows::Win32::MediaFoundation::MF_FLOAT2 PrincipalPoint;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MFCameraIntrinsic_DistortionModel
    {
        float Radial_k1;
        float Radial_k2;
        float Radial_k3;
        float Tangential_p1;
        float Tangential_p2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MFPinholeCameraIntrinsic_IntrinsicModel
    {
        uint32_t Width;
        uint32_t Height;
        Windows::Win32::MediaFoundation::MFCameraIntrinsic_PinholeCameraModel CameraModel;
        Windows::Win32::MediaFoundation::MFCameraIntrinsic_DistortionModel DistortionModel;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MFPinholeCameraIntrinsics
    {
        uint32_t IntrinsicModelCount;
        Windows::Win32::MediaFoundation::MFPinholeCameraIntrinsic_IntrinsicModel IntrinsicModels[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MFMPEG2DLNASINKSTATS
    {
        uint64_t cBytesWritten;
        Windows::Win32::SystemServices::BOOL fPAL;
        uint32_t fccVideo;
        uint32_t dwVideoWidth;
        uint32_t dwVideoHeight;
        uint64_t cVideoFramesReceived;
        uint64_t cVideoFramesEncoded;
        uint64_t cVideoFramesSkipped;
        uint64_t cBlackVideoFramesEncoded;
        uint64_t cVideoFramesDuplicated;
        uint32_t cAudioSamplesPerSec;
        uint32_t cAudioChannels;
        uint64_t cAudioBytesReceived;
        uint64_t cAudioFramesEncoded;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MF_SINK_WRITER_STATISTICS
    {
        uint32_t cb;
        int64_t llLastTimestampReceived;
        int64_t llLastTimestampEncoded;
        int64_t llLastTimestampProcessed;
        int64_t llLastStreamTickReceived;
        int64_t llLastSinkSampleRequest;
        uint64_t qwNumSamplesReceived;
        uint64_t qwNumSamplesEncoded;
        uint64_t qwNumSamplesProcessed;
        uint64_t qwNumStreamTicksReceived;
        uint32_t dwByteCountQueued;
        uint64_t qwByteCountProcessed;
        uint32_t dwNumOutstandingSinkSampleRequests;
        uint32_t dwAverageSampleRateReceived;
        uint32_t dwAverageSampleRateEncoded;
        uint32_t dwAverageSampleRateProcessed;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MFP_EVENT_HEADER
    {
        Windows::Win32::MediaFoundation::MFP_EVENT_TYPE eEventType;
        int32_t hrEvent;
        Windows::Win32::MediaFoundation::IMFPMediaPlayer* pMediaPlayer;
        Windows::Win32::MediaFoundation::MFP_MEDIAPLAYER_STATE eState;
        Windows::Win32::Audio::IPropertyStore* pPropertyStore;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MFP_PLAY_EVENT
    {
        Windows::Win32::MediaFoundation::MFP_EVENT_HEADER header;
        Windows::Win32::MediaFoundation::IMFPMediaItem* pMediaItem;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MFP_PAUSE_EVENT
    {
        Windows::Win32::MediaFoundation::MFP_EVENT_HEADER header;
        Windows::Win32::MediaFoundation::IMFPMediaItem* pMediaItem;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MFP_STOP_EVENT
    {
        Windows::Win32::MediaFoundation::MFP_EVENT_HEADER header;
        Windows::Win32::MediaFoundation::IMFPMediaItem* pMediaItem;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MFP_POSITION_SET_EVENT
    {
        Windows::Win32::MediaFoundation::MFP_EVENT_HEADER header;
        Windows::Win32::MediaFoundation::IMFPMediaItem* pMediaItem;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MFP_RATE_SET_EVENT
    {
        Windows::Win32::MediaFoundation::MFP_EVENT_HEADER header;
        Windows::Win32::MediaFoundation::IMFPMediaItem* pMediaItem;
        float flRate;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MFP_MEDIAITEM_CREATED_EVENT
    {
        Windows::Win32::MediaFoundation::MFP_EVENT_HEADER header;
        Windows::Win32::MediaFoundation::IMFPMediaItem* pMediaItem;
        size_t dwUserData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MFP_MEDIAITEM_SET_EVENT
    {
        Windows::Win32::MediaFoundation::MFP_EVENT_HEADER header;
        Windows::Win32::MediaFoundation::IMFPMediaItem* pMediaItem;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MFP_FRAME_STEP_EVENT
    {
        Windows::Win32::MediaFoundation::MFP_EVENT_HEADER header;
        Windows::Win32::MediaFoundation::IMFPMediaItem* pMediaItem;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MFP_MEDIAITEM_CLEARED_EVENT
    {
        Windows::Win32::MediaFoundation::MFP_EVENT_HEADER header;
        Windows::Win32::MediaFoundation::IMFPMediaItem* pMediaItem;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MFP_MF_EVENT
    {
        Windows::Win32::MediaFoundation::MFP_EVENT_HEADER header;
        uint32_t MFEventType;
        Windows::Win32::MediaFoundation::IMFMediaEvent* pMFMediaEvent;
        Windows::Win32::MediaFoundation::IMFPMediaItem* pMediaItem;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MFP_ERROR_EVENT
    {
        Windows::Win32::MediaFoundation::MFP_EVENT_HEADER header;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MFP_PLAYBACK_ENDED_EVENT
    {
        Windows::Win32::MediaFoundation::MFP_EVENT_HEADER header;
        Windows::Win32::MediaFoundation::IMFPMediaItem* pMediaItem;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MFP_ACQUIRE_USER_CREDENTIAL_EVENT
    {
        Windows::Win32::MediaFoundation::MFP_EVENT_HEADER header;
        size_t dwUserData;
        Windows::Win32::SystemServices::BOOL fProceedWithAuthentication;
        int32_t hrAuthenticationStatus;
        uint16_t* pwszURL;
        uint16_t* pwszSite;
        uint16_t* pwszRealm;
        uint16_t* pwszPackage;
        int32_t nRetries;
        uint32_t flags;
        Windows::Win32::MediaFoundation::IMFNetCredential* pCredential;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct DEVICE_INFO
    {
        Windows::Win32::Automation::BSTR pFriendlyDeviceName;
        Windows::Win32::Automation::BSTR pUniqueDeviceName;
        Windows::Win32::Automation::BSTR pManufacturerName;
        Windows::Win32::Automation::BSTR pModelName;
        Windows::Win32::Automation::BSTR pIconURL;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MFVideoAlphaBitmapParams
    {
        uint32_t dwFlags;
        uint32_t clrSrcKey;
        Windows::Win32::DisplayDevices::RECT rcSrc;
        Windows::Win32::MediaFoundation::MFVideoNormalizedRect nrcDest;
        float fAlpha;
        uint32_t dwFilterMode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct MFVideoAlphaBitmap
    {
        union _bitmap_e__Union
        {
            Windows::Win32::Gdi::HDC hdc;
            Windows::Win32::Direct2D::IDirect3DSurface9* pDDS;
        };
        Windows::Win32::SystemServices::BOOL GetBitmapFromDC;
        _bitmap_e__Union bitmap;
        Windows::Win32::MediaFoundation::MFVideoAlphaBitmapParams params;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct DMO_MEDIA_TYPE
    {
        ::win32::guid majortype;
        ::win32::guid subtype;
        Windows::Win32::SystemServices::BOOL bFixedSizeSamples;
        Windows::Win32::SystemServices::BOOL bTemporalCompression;
        uint32_t lSampleSize;
        ::win32::guid formattype;
        Windows::Win32::Com::IUnknown* pUnk;
        uint32_t cbFormat;
        uint8_t* pbFormat;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct DMO_OUTPUT_DATA_BUFFER
    {
        Windows::Win32::DirectShow::IMediaBuffer* pBuffer;
        uint32_t dwStatus;
        int64_t rtTimestamp;
        int64_t rtTimelength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct DXVA_COPPSetProtectionLevelCmdData
    {
        uint32_t ProtType;
        uint32_t ProtLevel;
        uint32_t ExtendedInfoChangeMask;
        uint32_t ExtendedInfoData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct DXVA_COPPSetSignalingCmdData
    {
        uint32_t ActiveTVProtectionStandard;
        uint32_t AspectRatioChangeMask1;
        uint32_t AspectRatioData1;
        uint32_t AspectRatioChangeMask2;
        uint32_t AspectRatioData2;
        uint32_t AspectRatioChangeMask3;
        uint32_t AspectRatioData3;
        uint32_t ExtendedInfoChangeMask[4];
        uint32_t ExtendedInfoData[4];
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct DXVA_COPPStatusData
    {
        ::win32::guid rApp;
        uint32_t dwFlags;
        uint32_t dwData;
        uint32_t ExtendedInfoValidMask;
        uint32_t ExtendedInfoData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct DXVA_COPPStatusDisplayData
    {
        ::win32::guid rApp;
        uint32_t dwFlags;
        uint32_t DisplayWidth;
        uint32_t DisplayHeight;
        uint32_t Format;
        uint32_t d3dFormat;
        uint32_t FreqNumerator;
        uint32_t FreqDenominator;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct DXVA_COPPStatusHDCPKeyData
    {
        ::win32::guid rApp;
        uint32_t dwFlags;
        uint32_t dwHDCPFlags;
        ::win32::guid BKey;
        ::win32::guid Reserved1;
        ::win32::guid Reserved2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectShow
{
    struct DXVA_COPPStatusSignalingCmdData
    {
        ::win32::guid rApp;
        uint32_t dwFlags;
        uint32_t AvailableTVProtectionStandards;
        uint32_t ActiveTVProtectionStandard;
        uint32_t TVType;
        uint32_t AspectRatioValidMask1;
        uint32_t AspectRatioData1;
        uint32_t AspectRatioValidMask2;
        uint32_t AspectRatioData2;
        uint32_t AspectRatioValidMask3;
        uint32_t AspectRatioData3;
        uint32_t ExtendedInfoValidMask[4];
        uint32_t ExtendedInfoData[4];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StreamingMedia
{
    struct FaceRectInfoBlobHeader
    {
        uint32_t Size;
        uint32_t Count;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StreamingMedia
{
    struct FaceRectInfo
    {
        Windows::Win32::DisplayDevices::RECT Region;
        int32_t confidenceLevel;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StreamingMedia
{
    struct FaceCharacterizationBlobHeader
    {
        uint32_t Size;
        uint32_t Count;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StreamingMedia
{
    struct FaceCharacterization
    {
        uint32_t BlinkScoreLeft;
        uint32_t BlinkScoreRight;
        uint32_t FacialExpression;
        uint32_t FacialExpressionScore;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StreamingMedia
{
    struct CapturedMetadataExposureCompensation
    {
        uint64_t Flags;
        int32_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StreamingMedia
{
    struct CapturedMetadataISOGains
    {
        float AnalogGain;
        float DigitalGain;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StreamingMedia
{
    struct CapturedMetadataWhiteBalanceGains
    {
        float R;
        float G;
        float B;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StreamingMedia
{
    struct MetadataTimeStamps
    {
        uint32_t Flags;
        int64_t Device;
        int64_t Presentation;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StreamingMedia
{
    struct HistogramGrid
    {
        uint32_t Width;
        uint32_t Height;
        Windows::Win32::DisplayDevices::RECT Region;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StreamingMedia
{
    struct HistogramBlobHeader
    {
        uint32_t Size;
        uint32_t Histograms;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StreamingMedia
{
    struct HistogramHeader
    {
        uint32_t Size;
        uint32_t Bins;
        uint32_t FourCC;
        uint32_t ChannelMasks;
        Windows::Win32::StreamingMedia::HistogramGrid Grid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StreamingMedia
{
    struct HistogramDataHeader
    {
        uint32_t Size;
        uint32_t ChannelMask;
        uint32_t Linear;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsConnectionManager
{
    struct WCM_POLICY_VALUE
    {
        Windows::Win32::SystemServices::BOOL fValue;
        Windows::Win32::SystemServices::BOOL fIsGroupPolicy;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsConnectionManager
{
    struct WCM_PROFILE_INFO
    {
        uint16_t strProfileName[256];
        ::win32::guid AdapterGUID;
        Windows::Win32::WindowsConnectionManager::WCM_MEDIA_TYPE Media;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsConnectionManager
{
    struct WCM_PROFILE_INFO_LIST
    {
        uint32_t dwNumberOfItems;
        Windows::Win32::WindowsConnectionManager::WCM_PROFILE_INFO ProfileInfo[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsConnectionManager
{
    struct WCM_CONNECTION_COST_DATA
    {
        uint32_t ConnectionCost;
        Windows::Win32::WindowsConnectionManager::WCM_CONNECTION_COST_SOURCE CostSource;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsConnectionManager
{
    struct WCM_TIME_INTERVAL
    {
        uint16_t wYear;
        uint16_t wMonth;
        uint16_t wDay;
        uint16_t wHour;
        uint16_t wMinute;
        uint16_t wSecond;
        uint16_t wMilliseconds;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsConnectionManager
{
    struct WCM_USAGE_DATA
    {
        uint32_t UsageInMegabytes;
        Windows::Win32::WindowsProgramming::FILETIME LastSyncTime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsConnectionManager
{
    struct WCM_BILLING_CYCLE_INFO
    {
        Windows::Win32::WindowsProgramming::FILETIME StartDate;
        Windows::Win32::WindowsConnectionManager::WCM_TIME_INTERVAL Duration;
        Windows::Win32::SystemServices::BOOL Reset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsConnectionManager
{
    struct WCM_DATAPLAN_STATUS
    {
        Windows::Win32::WindowsConnectionManager::WCM_USAGE_DATA UsageData;
        uint32_t DataLimitInMegabytes;
        uint32_t InboundBandwidthInKbps;
        uint32_t OutboundBandwidthInKbps;
        Windows::Win32::WindowsConnectionManager::WCM_BILLING_CYCLE_INFO BillingCycle;
        uint32_t MaxTransferSizeInMegabytes;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsConnectNow
{
    struct WCN_VALUE_TYPE_PRIMARY_DEVICE_TYPE
    {
        uint16_t Category;
        uint32_t SubCategoryOUI;
        uint16_t SubCategory;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsConnectNow
{
    struct WCN_VENDOR_EXTENSION_SPEC
    {
        uint32_t VendorId;
        uint32_t SubType;
        uint32_t Index;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsColorSystem
{
    struct XYZColorF
    {
        float X;
        float Y;
        float Z;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsColorSystem
{
    struct JChColorF
    {
        float J;
        float C;
        float h;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsColorSystem
{
    struct JabColorF
    {
        float J;
        float a;
        float b;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsColorSystem
{
    struct GamutShellTriangle
    {
        uint32_t aVertexIndex[3];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsColorSystem
{
    struct GamutShell
    {
        float JMin;
        float JMax;
        uint32_t cVertices;
        uint32_t cTriangles;
        Windows::Win32::WindowsColorSystem::JabColorF* pVertices;
        Windows::Win32::WindowsColorSystem::GamutShellTriangle* pTriangles;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsColorSystem
{
    struct PrimaryJabColors
    {
        Windows::Win32::WindowsColorSystem::JabColorF red;
        Windows::Win32::WindowsColorSystem::JabColorF yellow;
        Windows::Win32::WindowsColorSystem::JabColorF green;
        Windows::Win32::WindowsColorSystem::JabColorF cyan;
        Windows::Win32::WindowsColorSystem::JabColorF blue;
        Windows::Win32::WindowsColorSystem::JabColorF magenta;
        Windows::Win32::WindowsColorSystem::JabColorF black;
        Windows::Win32::WindowsColorSystem::JabColorF white;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsColorSystem
{
    struct PrimaryXYZColors
    {
        Windows::Win32::WindowsColorSystem::XYZColorF red;
        Windows::Win32::WindowsColorSystem::XYZColorF yellow;
        Windows::Win32::WindowsColorSystem::XYZColorF green;
        Windows::Win32::WindowsColorSystem::XYZColorF cyan;
        Windows::Win32::WindowsColorSystem::XYZColorF blue;
        Windows::Win32::WindowsColorSystem::XYZColorF magenta;
        Windows::Win32::WindowsColorSystem::XYZColorF black;
        Windows::Win32::WindowsColorSystem::XYZColorF white;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsColorSystem
{
    struct GamutBoundaryDescription
    {
        Windows::Win32::WindowsColorSystem::PrimaryJabColors* pPrimaries;
        uint32_t cNeutralSamples;
        Windows::Win32::WindowsColorSystem::JabColorF* pNeutralSamples;
        Windows::Win32::WindowsColorSystem::GamutShell* pReferenceShell;
        Windows::Win32::WindowsColorSystem::GamutShell* pPlausibleShell;
        Windows::Win32::WindowsColorSystem::GamutShell* pPossibleShell;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsColorSystem
{
    struct BlackInformation
    {
        Windows::Win32::SystemServices::BOOL fBlackOnly;
        float blackWeight;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsColorSystem
{
    struct NAMED_PROFILE_INFO
    {
        uint32_t dwFlags;
        uint32_t dwCount;
        uint32_t dwCountDevCoordinates;
        int8_t szPrefix[32];
        int8_t szSuffix[32];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsColorSystem
{
    struct GRAYCOLOR
    {
        uint16_t gray;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsColorSystem
{
    struct RGBCOLOR
    {
        uint16_t red;
        uint16_t green;
        uint16_t blue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsColorSystem
{
    struct CMYKCOLOR
    {
        uint16_t cyan;
        uint16_t magenta;
        uint16_t yellow;
        uint16_t black;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsColorSystem
{
    struct XYZCOLOR
    {
        uint16_t X;
        uint16_t Y;
        uint16_t Z;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsColorSystem
{
    struct YxyCOLOR
    {
        uint16_t Y;
        uint16_t x;
        uint16_t y;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsColorSystem
{
    struct LabCOLOR
    {
        uint16_t L;
        uint16_t a;
        uint16_t b;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsColorSystem
{
    struct GENERIC3CHANNEL
    {
        uint16_t ch1;
        uint16_t ch2;
        uint16_t ch3;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsColorSystem
{
    struct NAMEDCOLOR
    {
        uint32_t dwIndex;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsColorSystem
{
    struct HiFiCOLOR
    {
        uint8_t channel[8];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsColorSystem
{
    union COLOR
    {
        struct _Anonymous_e__Struct
        {
            uint32_t reserved1;
            void* reserved2;
        };
        Windows::Win32::WindowsColorSystem::GRAYCOLOR gray;
        Windows::Win32::WindowsColorSystem::RGBCOLOR rgb;
        Windows::Win32::WindowsColorSystem::CMYKCOLOR cmyk;
        Windows::Win32::WindowsColorSystem::XYZCOLOR XYZ;
        Windows::Win32::WindowsColorSystem::YxyCOLOR Yxy;
        Windows::Win32::WindowsColorSystem::LabCOLOR Lab;
        Windows::Win32::WindowsColorSystem::GENERIC3CHANNEL gen3ch;
        Windows::Win32::WindowsColorSystem::NAMEDCOLOR named;
        Windows::Win32::WindowsColorSystem::HiFiCOLOR hifi;
        _Anonymous_e__Struct Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsColorSystem
{
    struct PROFILEHEADER
    {
        uint32_t phSize;
        uint32_t phCMMType;
        uint32_t phVersion;
        uint32_t phClass;
        uint32_t phDataColorSpace;
        uint32_t phConnectionSpace;
        uint32_t phDateTime[3];
        uint32_t phSignature;
        uint32_t phPlatform;
        uint32_t phProfileFlags;
        uint32_t phManufacturer;
        uint32_t phModel;
        uint32_t phAttributes[2];
        uint32_t phRenderingIntent;
        Windows::Win32::WindowsColorSystem::CIEXYZ phIlluminant;
        uint32_t phCreator;
        uint8_t phReserved[44];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsColorSystem
{
    struct PROFILE
    {
        uint32_t dwType;
        void* pProfileData;
        uint32_t cbDataSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsColorSystem
{
    struct ENUMTYPEA
    {
        uint32_t dwSize;
        uint32_t dwVersion;
        uint32_t dwFields;
        int8_t* pDeviceName;
        uint32_t dwMediaType;
        uint32_t dwDitheringMode;
        uint32_t dwResolution[2];
        uint32_t dwCMMType;
        uint32_t dwClass;
        uint32_t dwDataColorSpace;
        uint32_t dwConnectionSpace;
        uint32_t dwSignature;
        uint32_t dwPlatform;
        uint32_t dwProfileFlags;
        uint32_t dwManufacturer;
        uint32_t dwModel;
        uint32_t dwAttributes[2];
        uint32_t dwRenderingIntent;
        uint32_t dwCreator;
        uint32_t dwDeviceClass;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsColorSystem
{
    struct ENUMTYPEW
    {
        uint32_t dwSize;
        uint32_t dwVersion;
        uint32_t dwFields;
        uint16_t* pDeviceName;
        uint32_t dwMediaType;
        uint32_t dwDitheringMode;
        uint32_t dwResolution[2];
        uint32_t dwCMMType;
        uint32_t dwClass;
        uint32_t dwDataColorSpace;
        uint32_t dwConnectionSpace;
        uint32_t dwSignature;
        uint32_t dwPlatform;
        uint32_t dwProfileFlags;
        uint32_t dwManufacturer;
        uint32_t dwModel;
        uint32_t dwAttributes[2];
        uint32_t dwRenderingIntent;
        uint32_t dwCreator;
        uint32_t dwDeviceClass;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsColorSystem
{
    struct COLORMATCHSETUPW
    {
        uint32_t dwSize;
        uint32_t dwVersion;
        uint32_t dwFlags;
        Windows::Win32::WindowsAndMessaging::HWND hwndOwner;
        uint16_t* pSourceName;
        uint16_t* pDisplayName;
        uint16_t* pPrinterName;
        uint32_t dwRenderIntent;
        uint32_t dwProofingIntent;
        uint16_t* pMonitorProfile;
        uint32_t ccMonitorProfile;
        uint16_t* pPrinterProfile;
        uint32_t ccPrinterProfile;
        uint16_t* pTargetProfile;
        uint32_t ccTargetProfile;
        Windows::Win32::WindowsAndMessaging::DLGPROC* lpfnHook;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
        Windows::Win32::WindowsColorSystem::PCMSCALLBACKW* lpfnApplyCallback;
        Windows::Win32::WindowsAndMessaging::LPARAM lParamApplyCallback;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsColorSystem
{
    struct COLORMATCHSETUPA
    {
        uint32_t dwSize;
        uint32_t dwVersion;
        uint32_t dwFlags;
        Windows::Win32::WindowsAndMessaging::HWND hwndOwner;
        int8_t* pSourceName;
        int8_t* pDisplayName;
        int8_t* pPrinterName;
        uint32_t dwRenderIntent;
        uint32_t dwProofingIntent;
        int8_t* pMonitorProfile;
        uint32_t ccMonitorProfile;
        int8_t* pPrinterProfile;
        uint32_t ccPrinterProfile;
        int8_t* pTargetProfile;
        uint32_t ccTargetProfile;
        Windows::Win32::WindowsAndMessaging::DLGPROC* lpfnHook;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
        Windows::Win32::WindowsColorSystem::PCMSCALLBACKA* lpfnApplyCallback;
        Windows::Win32::WindowsAndMessaging::LPARAM lParamApplyCallback;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsColorSystem
{
    struct XYYPoint
    {
        float x;
        float y;
        float Y;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsColorSystem
{
    struct WhitePoint
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::WindowsColorSystem::XYYPoint xyY;
            float CCT;
        };
        int32_t type;
        _Anonymous_e__Union Anonymous;
        static constexpr int32_t CHROMATICITY = 0;
        static constexpr int32_t TEMPERATURE = 1;
        static constexpr int32_t D65 = 2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsColorSystem
{
    struct DisplayID
    {
        Windows::Win32::Kernel::LUID targetAdapterID;
        uint32_t sourceInfoID;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsColorSystem
{
    struct DisplayStateID
    {
        uint32_t profileID;
        uint32_t transformID;
        uint32_t whitepointID;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsColorSystem
{
    struct DisplayTransformLut
    {
        uint16_t red[256];
        uint16_t green[256];
        uint16_t blue[256];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DistributedFileSystem
{
    struct DFS_TARGET_PRIORITY
    {
        Windows::Win32::DistributedFileSystem::DFS_TARGET_PRIORITY_CLASS TargetPriorityClass;
        uint16_t TargetPriorityRank;
        uint16_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DistributedFileSystem
{
    struct DFS_INFO_1
    {
        uint16_t* EntryPath;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DistributedFileSystem
{
    struct DFS_INFO_2
    {
        uint16_t* EntryPath;
        uint16_t* Comment;
        uint32_t State;
        uint32_t NumberOfStorages;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DistributedFileSystem
{
    struct DFS_STORAGE_INFO
    {
        uint32_t State;
        uint16_t* ServerName;
        uint16_t* ShareName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DistributedFileSystem
{
    struct DFS_STORAGE_INFO_1
    {
        uint32_t State;
        uint16_t* ServerName;
        uint16_t* ShareName;
        Windows::Win32::DistributedFileSystem::DFS_TARGET_PRIORITY TargetPriority;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DistributedFileSystem
{
    struct DFS_INFO_3
    {
        uint16_t* EntryPath;
        uint16_t* Comment;
        uint32_t State;
        uint32_t NumberOfStorages;
        Windows::Win32::DistributedFileSystem::DFS_STORAGE_INFO* Storage;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DistributedFileSystem
{
    struct DFS_INFO_4
    {
        uint16_t* EntryPath;
        uint16_t* Comment;
        uint32_t State;
        uint32_t Timeout;
        ::win32::guid Guid;
        uint32_t NumberOfStorages;
        Windows::Win32::DistributedFileSystem::DFS_STORAGE_INFO* Storage;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DistributedFileSystem
{
    struct DFS_INFO_5
    {
        uint16_t* EntryPath;
        uint16_t* Comment;
        uint32_t State;
        uint32_t Timeout;
        ::win32::guid Guid;
        uint32_t PropertyFlags;
        uint32_t MetadataSize;
        uint32_t NumberOfStorages;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DistributedFileSystem
{
    struct DFS_INFO_6
    {
        uint16_t* EntryPath;
        uint16_t* Comment;
        uint32_t State;
        uint32_t Timeout;
        ::win32::guid Guid;
        uint32_t PropertyFlags;
        uint32_t MetadataSize;
        uint32_t NumberOfStorages;
        Windows::Win32::DistributedFileSystem::DFS_STORAGE_INFO_1* Storage;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DistributedFileSystem
{
    struct DFS_INFO_7
    {
        ::win32::guid GenerationGuid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DistributedFileSystem
{
    struct DFS_INFO_8
    {
        uint16_t* EntryPath;
        uint16_t* Comment;
        uint32_t State;
        uint32_t Timeout;
        ::win32::guid Guid;
        uint32_t PropertyFlags;
        uint32_t MetadataSize;
        uint32_t SdLengthReserved;
        void* pSecurityDescriptor;
        uint32_t NumberOfStorages;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DistributedFileSystem
{
    struct DFS_INFO_9
    {
        uint16_t* EntryPath;
        uint16_t* Comment;
        uint32_t State;
        uint32_t Timeout;
        ::win32::guid Guid;
        uint32_t PropertyFlags;
        uint32_t MetadataSize;
        uint32_t SdLengthReserved;
        void* pSecurityDescriptor;
        uint32_t NumberOfStorages;
        Windows::Win32::DistributedFileSystem::DFS_STORAGE_INFO_1* Storage;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DistributedFileSystem
{
    struct DFS_INFO_50
    {
        uint32_t NamespaceMajorVersion;
        uint32_t NamespaceMinorVersion;
        uint64_t NamespaceCapabilities;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DistributedFileSystem
{
    struct DFS_INFO_100
    {
        uint16_t* Comment;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DistributedFileSystem
{
    struct DFS_INFO_101
    {
        uint32_t State;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DistributedFileSystem
{
    struct DFS_INFO_102
    {
        uint32_t Timeout;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DistributedFileSystem
{
    struct DFS_INFO_103
    {
        uint32_t PropertyFlagMask;
        uint32_t PropertyFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DistributedFileSystem
{
    struct DFS_INFO_104
    {
        Windows::Win32::DistributedFileSystem::DFS_TARGET_PRIORITY TargetPriority;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DistributedFileSystem
{
    struct DFS_INFO_105
    {
        uint16_t* Comment;
        uint32_t State;
        uint32_t Timeout;
        uint32_t PropertyFlagMask;
        uint32_t PropertyFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DistributedFileSystem
{
    struct DFS_INFO_106
    {
        uint32_t State;
        Windows::Win32::DistributedFileSystem::DFS_TARGET_PRIORITY TargetPriority;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DistributedFileSystem
{
    struct DFS_INFO_107
    {
        uint16_t* Comment;
        uint32_t State;
        uint32_t Timeout;
        uint32_t PropertyFlagMask;
        uint32_t PropertyFlags;
        uint32_t SdLengthReserved;
        void* pSecurityDescriptor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DistributedFileSystem
{
    struct DFS_INFO_150
    {
        uint32_t SdLengthReserved;
        void* pSecurityDescriptor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DistributedFileSystem
{
    struct DFS_INFO_200
    {
        uint16_t* FtDfsName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DistributedFileSystem
{
    struct DFS_INFO_300
    {
        uint32_t Flags;
        uint16_t* DfsName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DistributedFileSystem
{
    struct DFS_SITENAME_INFO
    {
        uint32_t SiteFlags;
        uint16_t* SiteName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DistributedFileSystem
{
    struct DFS_SITELIST_INFO
    {
        uint32_t cSites;
        Windows::Win32::DistributedFileSystem::DFS_SITENAME_INFO Site[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DistributedFileSystem
{
    struct DFS_SUPPORTED_NAMESPACE_VERSION_INFO
    {
        uint32_t DomainDfsMajorVersion;
        uint32_t DomainDfsMinorVersion;
        uint64_t DomainDfsCapabilities;
        uint32_t StandaloneDfsMajorVersion;
        uint32_t StandaloneDfsMinorVersion;
        uint64_t StandaloneDfsCapabilities;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DistributedFileSystem
{
    struct DFS_GET_PKT_ENTRY_STATE_ARG
    {
        uint16_t DfsEntryPathLen;
        uint16_t ServerNameLen;
        uint16_t ShareNameLen;
        uint32_t Level;
        uint16_t Buffer[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCPV6CAPI_PARAMS
    {
        uint32_t Flags;
        uint32_t OptionId;
        Windows::Win32::SystemServices::BOOL IsVendor;
        uint8_t* Data;
        uint32_t nBytesData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCPV6CAPI_PARAMS_ARRAY
    {
        uint32_t nParams;
        Windows::Win32::Dhcp::DHCPV6CAPI_PARAMS* Params;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCPV6CAPI_CLASSID
    {
        uint32_t Flags;
        uint8_t* Data;
        uint32_t nBytesData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCPV6Prefix
    {
        uint8_t prefix[16];
        uint32_t prefixLength;
        uint32_t preferredLifeTime;
        uint32_t validLifeTime;
        Windows::Win32::Dhcp::StatusCode status;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCPV6PrefixLeaseInformation
    {
        uint32_t nPrefixes;
        Windows::Win32::Dhcp::DHCPV6Prefix* prefixArray;
        uint32_t iaid;
        int64_t T1;
        int64_t T2;
        int64_t MaxLeaseExpirationTime;
        int64_t LastRenewalTime;
        Windows::Win32::Dhcp::StatusCode status;
        uint8_t* ServerId;
        uint32_t ServerIdLen;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCPAPI_PARAMS
    {
        uint32_t Flags;
        uint32_t OptionId;
        Windows::Win32::SystemServices::BOOL IsVendor;
        uint8_t* Data;
        uint32_t nBytesData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCPCAPI_PARAMS_ARRAY
    {
        uint32_t nParams;
        Windows::Win32::Dhcp::DHCPAPI_PARAMS* Params;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCPCAPI_CLASSID
    {
        uint32_t Flags;
        uint8_t* Data;
        uint32_t nBytesData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_SERVER_OPTIONS
    {
        uint8_t* MessageType;
        uint32_t* SubnetMask;
        uint32_t* RequestedAddress;
        uint32_t* RequestLeaseTime;
        uint8_t* OverlayFields;
        uint32_t* RouterAddress;
        uint32_t* Server;
        uint8_t* ParameterRequestList;
        uint32_t ParameterRequestListLength;
        int8_t* MachineName;
        uint32_t MachineNameLength;
        uint8_t ClientHardwareAddressType;
        uint8_t ClientHardwareAddressLength;
        uint8_t* ClientHardwareAddress;
        int8_t* ClassIdentifier;
        uint32_t ClassIdentifierLength;
        uint8_t* VendorClass;
        uint32_t VendorClassLength;
        uint32_t DNSFlags;
        uint32_t DNSNameLength;
        uint8_t* DNSName;
        uint8_t DSDomainNameRequested;
        int8_t* DSDomainName;
        uint32_t DSDomainNameLen;
        uint32_t* ScopeId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_CALLOUT_TABLE
    {
        Windows::Win32::Dhcp::LPDHCP_CONTROL* DhcpControlHook;
        Windows::Win32::Dhcp::LPDHCP_NEWPKT* DhcpNewPktHook;
        Windows::Win32::Dhcp::LPDHCP_DROP_SEND* DhcpPktDropHook;
        Windows::Win32::Dhcp::LPDHCP_DROP_SEND* DhcpPktSendHook;
        Windows::Win32::Dhcp::LPDHCP_PROB* DhcpAddressDelHook;
        Windows::Win32::Dhcp::LPDHCP_GIVE_ADDRESS* DhcpAddressOfferHook;
        Windows::Win32::Dhcp::LPDHCP_HANDLE_OPTIONS* DhcpHandleOptionsHook;
        Windows::Win32::Dhcp::LPDHCP_DELETE_CLIENT* DhcpDeleteClientHook;
        void* DhcpExtensionHook;
        void* DhcpReservedHook;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DATE_TIME
    {
        uint32_t dwLowDateTime;
        uint32_t dwHighDateTime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_IP_RANGE
    {
        uint32_t StartAddress;
        uint32_t EndAddress;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_BINARY_DATA
    {
        uint32_t DataLength;
        uint8_t* Data;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_HOST_INFO
    {
        uint32_t IpAddress;
        uint16_t* NetBiosName;
        uint16_t* HostName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DWORD_DWORD
    {
        uint32_t DWord1;
        uint32_t DWord2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_SUBNET_INFO
    {
        uint32_t SubnetAddress;
        uint32_t SubnetMask;
        uint16_t* SubnetName;
        uint16_t* SubnetComment;
        Windows::Win32::Dhcp::DHCP_HOST_INFO PrimaryHost;
        Windows::Win32::Dhcp::DHCP_SUBNET_STATE SubnetState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_SUBNET_INFO_VQ
    {
        uint32_t SubnetAddress;
        uint32_t SubnetMask;
        uint16_t* SubnetName;
        uint16_t* SubnetComment;
        Windows::Win32::Dhcp::DHCP_HOST_INFO PrimaryHost;
        Windows::Win32::Dhcp::DHCP_SUBNET_STATE SubnetState;
        uint32_t QuarantineOn;
        uint32_t Reserved1;
        uint32_t Reserved2;
        int64_t Reserved3;
        int64_t Reserved4;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_IP_ARRAY
    {
        uint32_t NumElements;
        uint32_t* Elements;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_IP_CLUSTER
    {
        uint32_t ClusterAddress;
        uint32_t ClusterMask;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_IP_RESERVATION
    {
        uint32_t ReservedIpAddress;
        Windows::Win32::Dhcp::DHCP_BINARY_DATA* ReservedForClient;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_SUBNET_ELEMENT_DATA
    {
        union DHCP_SUBNET_ELEMENT_UNION
        {
            Windows::Win32::Dhcp::DHCP_IP_RANGE* IpRange;
            Windows::Win32::Dhcp::DHCP_HOST_INFO* SecondaryHost;
            Windows::Win32::Dhcp::DHCP_IP_RESERVATION* ReservedIp;
            Windows::Win32::Dhcp::DHCP_IP_RANGE* ExcludeIpRange;
            Windows::Win32::Dhcp::DHCP_IP_CLUSTER* IpUsedCluster;
        };
        Windows::Win32::Dhcp::DHCP_SUBNET_ELEMENT_TYPE ElementType;
        DHCP_SUBNET_ELEMENT_UNION Element;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    union DHCP_SUBNET_ELEMENT_UNION
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_SUBNET_ELEMENT_INFO_ARRAY
    {
        uint32_t NumElements;
        Windows::Win32::Dhcp::DHCP_SUBNET_ELEMENT_DATA* Elements;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_IPV6_ADDRESS
    {
        uint64_t HighOrderBits;
        uint64_t LowOrderBits;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_ADDR_PATTERN
    {
        Windows::Win32::SystemServices::BOOL MatchHWType;
        uint8_t HWType;
        Windows::Win32::SystemServices::BOOL IsWildcard;
        uint8_t Length;
        uint8_t Pattern[255];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_FILTER_ADD_INFO
    {
        Windows::Win32::Dhcp::DHCP_ADDR_PATTERN AddrPatt;
        uint16_t* Comment;
        Windows::Win32::Dhcp::DHCP_FILTER_LIST_TYPE ListType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_FILTER_GLOBAL_INFO
    {
        Windows::Win32::SystemServices::BOOL EnforceAllowList;
        Windows::Win32::SystemServices::BOOL EnforceDenyList;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_FILTER_RECORD
    {
        Windows::Win32::Dhcp::DHCP_ADDR_PATTERN AddrPatt;
        uint16_t* Comment;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_FILTER_ENUM_INFO
    {
        uint32_t NumElements;
        Windows::Win32::Dhcp::DHCP_FILTER_RECORD* pEnumRecords;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_OPTION_DATA_ELEMENT
    {
        union DHCP_OPTION_ELEMENT_UNION
        {
            uint8_t ByteOption;
            uint16_t WordOption;
            uint32_t DWordOption;
            Windows::Win32::Dhcp::DWORD_DWORD DWordDWordOption;
            uint32_t IpAddressOption;
            uint16_t* StringDataOption;
            Windows::Win32::Dhcp::DHCP_BINARY_DATA BinaryDataOption;
            Windows::Win32::Dhcp::DHCP_BINARY_DATA EncapsulatedDataOption;
            uint16_t* Ipv6AddressDataOption;
        };
        Windows::Win32::Dhcp::DHCP_OPTION_DATA_TYPE OptionType;
        DHCP_OPTION_ELEMENT_UNION Element;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    union DHCP_OPTION_ELEMENT_UNION
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_OPTION_DATA
    {
        uint32_t NumElements;
        Windows::Win32::Dhcp::DHCP_OPTION_DATA_ELEMENT* Elements;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_OPTION
    {
        uint32_t OptionID;
        uint16_t* OptionName;
        uint16_t* OptionComment;
        Windows::Win32::Dhcp::DHCP_OPTION_DATA DefaultValue;
        Windows::Win32::Dhcp::DHCP_OPTION_TYPE OptionType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_OPTION_ARRAY
    {
        uint32_t NumElements;
        Windows::Win32::Dhcp::DHCP_OPTION* Options;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_OPTION_VALUE
    {
        uint32_t OptionID;
        Windows::Win32::Dhcp::DHCP_OPTION_DATA Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_OPTION_VALUE_ARRAY
    {
        uint32_t NumElements;
        Windows::Win32::Dhcp::DHCP_OPTION_VALUE* Values;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_RESERVED_SCOPE
    {
        uint32_t ReservedIpAddress;
        uint32_t ReservedIpSubnetAddress;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_OPTION_SCOPE_INFO
    {
        union _DHCP_OPTION_SCOPE_UNION
        {
            void* DefaultScopeInfo;
            void* GlobalScopeInfo;
            uint32_t SubnetScopeInfo;
            Windows::Win32::Dhcp::DHCP_RESERVED_SCOPE ReservedScopeInfo;
            uint16_t* MScopeInfo;
        };
        Windows::Win32::Dhcp::DHCP_OPTION_SCOPE_TYPE ScopeType;
        _DHCP_OPTION_SCOPE_UNION ScopeInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_RESERVED_SCOPE6
    {
        Windows::Win32::Dhcp::DHCP_IPV6_ADDRESS ReservedIpAddress;
        Windows::Win32::Dhcp::DHCP_IPV6_ADDRESS ReservedIpSubnetAddress;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_OPTION_SCOPE_INFO6
    {
        union DHCP_OPTION_SCOPE_UNION6
        {
            void* DefaultScopeInfo;
            Windows::Win32::Dhcp::DHCP_IPV6_ADDRESS SubnetScopeInfo;
            Windows::Win32::Dhcp::DHCP_RESERVED_SCOPE6 ReservedScopeInfo;
        };
        Windows::Win32::Dhcp::DHCP_OPTION_SCOPE_TYPE6 ScopeType;
        DHCP_OPTION_SCOPE_UNION6 ScopeInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    union DHCP_OPTION_SCOPE_UNION6
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_OPTION_LIST
    {
        uint32_t NumOptions;
        Windows::Win32::Dhcp::DHCP_OPTION_VALUE* Options;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_CLIENT_INFO
    {
        uint32_t ClientIpAddress;
        uint32_t SubnetMask;
        Windows::Win32::Dhcp::DHCP_BINARY_DATA ClientHardwareAddress;
        uint16_t* ClientName;
        uint16_t* ClientComment;
        Windows::Win32::Dhcp::DATE_TIME ClientLeaseExpires;
        Windows::Win32::Dhcp::DHCP_HOST_INFO OwnerHost;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_CLIENT_INFO_ARRAY
    {
        uint32_t NumElements;
        Windows::Win32::Dhcp::DHCP_CLIENT_INFO** Clients;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_CLIENT_INFO_VQ
    {
        uint32_t ClientIpAddress;
        uint32_t SubnetMask;
        Windows::Win32::Dhcp::DHCP_BINARY_DATA ClientHardwareAddress;
        uint16_t* ClientName;
        uint16_t* ClientComment;
        Windows::Win32::Dhcp::DATE_TIME ClientLeaseExpires;
        Windows::Win32::Dhcp::DHCP_HOST_INFO OwnerHost;
        uint8_t bClientType;
        uint8_t AddressState;
        Windows::Win32::Dhcp::QuarantineStatus Status;
        Windows::Win32::Dhcp::DATE_TIME ProbationEnds;
        Windows::Win32::SystemServices::BOOL QuarantineCapable;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_CLIENT_INFO_ARRAY_VQ
    {
        uint32_t NumElements;
        Windows::Win32::Dhcp::DHCP_CLIENT_INFO_VQ** Clients;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_CLIENT_FILTER_STATUS_INFO
    {
        uint32_t ClientIpAddress;
        uint32_t SubnetMask;
        Windows::Win32::Dhcp::DHCP_BINARY_DATA ClientHardwareAddress;
        uint16_t* ClientName;
        uint16_t* ClientComment;
        Windows::Win32::Dhcp::DATE_TIME ClientLeaseExpires;
        Windows::Win32::Dhcp::DHCP_HOST_INFO OwnerHost;
        uint8_t bClientType;
        uint8_t AddressState;
        Windows::Win32::Dhcp::QuarantineStatus Status;
        Windows::Win32::Dhcp::DATE_TIME ProbationEnds;
        Windows::Win32::SystemServices::BOOL QuarantineCapable;
        uint32_t FilterStatus;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_CLIENT_FILTER_STATUS_INFO_ARRAY
    {
        uint32_t NumElements;
        Windows::Win32::Dhcp::DHCP_CLIENT_FILTER_STATUS_INFO** Clients;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_CLIENT_INFO_PB
    {
        uint32_t ClientIpAddress;
        uint32_t SubnetMask;
        Windows::Win32::Dhcp::DHCP_BINARY_DATA ClientHardwareAddress;
        uint16_t* ClientName;
        uint16_t* ClientComment;
        Windows::Win32::Dhcp::DATE_TIME ClientLeaseExpires;
        Windows::Win32::Dhcp::DHCP_HOST_INFO OwnerHost;
        uint8_t bClientType;
        uint8_t AddressState;
        Windows::Win32::Dhcp::QuarantineStatus Status;
        Windows::Win32::Dhcp::DATE_TIME ProbationEnds;
        Windows::Win32::SystemServices::BOOL QuarantineCapable;
        uint32_t FilterStatus;
        uint16_t* PolicyName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_CLIENT_INFO_PB_ARRAY
    {
        uint32_t NumElements;
        Windows::Win32::Dhcp::DHCP_CLIENT_INFO_PB** Clients;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_SEARCH_INFO
    {
        union DHCP_CLIENT_SEARCH_UNION
        {
            uint32_t ClientIpAddress;
            Windows::Win32::Dhcp::DHCP_BINARY_DATA ClientHardwareAddress;
            uint16_t* ClientName;
        };
        Windows::Win32::Dhcp::DHCP_SEARCH_INFO_TYPE SearchType;
        DHCP_CLIENT_SEARCH_UNION SearchInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    union DHCP_CLIENT_SEARCH_UNION
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_PROPERTY
    {
        union _DHCP_PROPERTY_VALUE_UNION
        {
            uint8_t ByteValue;
            uint16_t WordValue;
            uint32_t DWordValue;
            uint16_t* StringValue;
            Windows::Win32::Dhcp::DHCP_BINARY_DATA BinaryValue;
        };
        Windows::Win32::Dhcp::DHCP_PROPERTY_ID ID;
        Windows::Win32::Dhcp::DHCP_PROPERTY_TYPE Type;
        _DHCP_PROPERTY_VALUE_UNION Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_PROPERTY_ARRAY
    {
        uint32_t NumElements;
        Windows::Win32::Dhcp::DHCP_PROPERTY* Elements;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_CLIENT_INFO_EX
    {
        uint32_t ClientIpAddress;
        uint32_t SubnetMask;
        Windows::Win32::Dhcp::DHCP_BINARY_DATA ClientHardwareAddress;
        uint16_t* ClientName;
        uint16_t* ClientComment;
        Windows::Win32::Dhcp::DATE_TIME ClientLeaseExpires;
        Windows::Win32::Dhcp::DHCP_HOST_INFO OwnerHost;
        uint8_t bClientType;
        uint8_t AddressState;
        Windows::Win32::Dhcp::QuarantineStatus Status;
        Windows::Win32::Dhcp::DATE_TIME ProbationEnds;
        Windows::Win32::SystemServices::BOOL QuarantineCapable;
        uint32_t FilterStatus;
        uint16_t* PolicyName;
        Windows::Win32::Dhcp::DHCP_PROPERTY_ARRAY* Properties;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_CLIENT_INFO_EX_ARRAY
    {
        uint32_t NumElements;
        Windows::Win32::Dhcp::DHCP_CLIENT_INFO_EX** Clients;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct SCOPE_MIB_INFO
    {
        uint32_t Subnet;
        uint32_t NumAddressesInuse;
        uint32_t NumAddressesFree;
        uint32_t NumPendingOffers;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_MIB_INFO
    {
        uint32_t Discovers;
        uint32_t Offers;
        uint32_t Requests;
        uint32_t Acks;
        uint32_t Naks;
        uint32_t Declines;
        uint32_t Releases;
        Windows::Win32::Dhcp::DATE_TIME ServerStartTime;
        uint32_t Scopes;
        Windows::Win32::Dhcp::SCOPE_MIB_INFO* ScopeInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct SCOPE_MIB_INFO_VQ
    {
        uint32_t Subnet;
        uint32_t NumAddressesInuse;
        uint32_t NumAddressesFree;
        uint32_t NumPendingOffers;
        uint32_t QtnNumLeases;
        uint32_t QtnPctQtnLeases;
        uint32_t QtnProbationLeases;
        uint32_t QtnNonQtnLeases;
        uint32_t QtnExemptLeases;
        uint32_t QtnCapableClients;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_MIB_INFO_VQ
    {
        uint32_t Discovers;
        uint32_t Offers;
        uint32_t Requests;
        uint32_t Acks;
        uint32_t Naks;
        uint32_t Declines;
        uint32_t Releases;
        Windows::Win32::Dhcp::DATE_TIME ServerStartTime;
        uint32_t QtnNumLeases;
        uint32_t QtnPctQtnLeases;
        uint32_t QtnProbationLeases;
        uint32_t QtnNonQtnLeases;
        uint32_t QtnExemptLeases;
        uint32_t QtnCapableClients;
        uint32_t QtnIASErrors;
        uint32_t Scopes;
        Windows::Win32::Dhcp::SCOPE_MIB_INFO_VQ* ScopeInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct SCOPE_MIB_INFO_V5
    {
        uint32_t Subnet;
        uint32_t NumAddressesInuse;
        uint32_t NumAddressesFree;
        uint32_t NumPendingOffers;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_MIB_INFO_V5
    {
        uint32_t Discovers;
        uint32_t Offers;
        uint32_t Requests;
        uint32_t Acks;
        uint32_t Naks;
        uint32_t Declines;
        uint32_t Releases;
        Windows::Win32::Dhcp::DATE_TIME ServerStartTime;
        uint32_t QtnNumLeases;
        uint32_t QtnPctQtnLeases;
        uint32_t QtnProbationLeases;
        uint32_t QtnNonQtnLeases;
        uint32_t QtnExemptLeases;
        uint32_t QtnCapableClients;
        uint32_t QtnIASErrors;
        uint32_t DelayedOffers;
        uint32_t ScopesWithDelayedOffers;
        uint32_t Scopes;
        Windows::Win32::Dhcp::SCOPE_MIB_INFO_V5* ScopeInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_SERVER_CONFIG_INFO
    {
        uint32_t APIProtocolSupport;
        uint16_t* DatabaseName;
        uint16_t* DatabasePath;
        uint16_t* BackupPath;
        uint32_t BackupInterval;
        uint32_t DatabaseLoggingFlag;
        uint32_t RestoreFlag;
        uint32_t DatabaseCleanupInterval;
        uint32_t DebugFlag;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_SCAN_ITEM
    {
        uint32_t IpAddress;
        Windows::Win32::Dhcp::DHCP_SCAN_FLAG ScanFlag;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_SCAN_LIST
    {
        uint32_t NumScanItems;
        Windows::Win32::Dhcp::DHCP_SCAN_ITEM* ScanItems;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_CLASS_INFO
    {
        uint16_t* ClassName;
        uint16_t* ClassComment;
        uint32_t ClassDataLength;
        Windows::Win32::SystemServices::BOOL IsVendor;
        uint32_t Flags;
        uint8_t* ClassData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_CLASS_INFO_ARRAY
    {
        uint32_t NumElements;
        Windows::Win32::Dhcp::DHCP_CLASS_INFO* Classes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_CLASS_INFO_V6
    {
        uint16_t* ClassName;
        uint16_t* ClassComment;
        uint32_t ClassDataLength;
        Windows::Win32::SystemServices::BOOL IsVendor;
        uint32_t EnterpriseNumber;
        uint32_t Flags;
        uint8_t* ClassData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_CLASS_INFO_ARRAY_V6
    {
        uint32_t NumElements;
        Windows::Win32::Dhcp::DHCP_CLASS_INFO_V6* Classes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_SERVER_SPECIFIC_STRINGS
    {
        uint16_t* DefaultVendorClassName;
        uint16_t* DefaultUserClassName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_IP_RESERVATION_V4
    {
        uint32_t ReservedIpAddress;
        Windows::Win32::Dhcp::DHCP_BINARY_DATA* ReservedForClient;
        uint8_t bAllowedClientTypes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_IP_RESERVATION_INFO
    {
        uint32_t ReservedIpAddress;
        Windows::Win32::Dhcp::DHCP_BINARY_DATA ReservedForClient;
        uint16_t* ReservedClientName;
        uint16_t* ReservedClientDesc;
        uint8_t bAllowedClientTypes;
        uint8_t fOptionsPresent;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_RESERVATION_INFO_ARRAY
    {
        uint32_t NumElements;
        Windows::Win32::Dhcp::DHCP_IP_RESERVATION_INFO** Elements;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_SUBNET_ELEMENT_DATA_V4
    {
        union DHCP_SUBNET_ELEMENT_UNION_V4
        {
            Windows::Win32::Dhcp::DHCP_IP_RANGE* IpRange;
            Windows::Win32::Dhcp::DHCP_HOST_INFO* SecondaryHost;
            Windows::Win32::Dhcp::DHCP_IP_RESERVATION_V4* ReservedIp;
            Windows::Win32::Dhcp::DHCP_IP_RANGE* ExcludeIpRange;
            Windows::Win32::Dhcp::DHCP_IP_CLUSTER* IpUsedCluster;
        };
        Windows::Win32::Dhcp::DHCP_SUBNET_ELEMENT_TYPE ElementType;
        DHCP_SUBNET_ELEMENT_UNION_V4 Element;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    union DHCP_SUBNET_ELEMENT_UNION_V4
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_SUBNET_ELEMENT_INFO_ARRAY_V4
    {
        uint32_t NumElements;
        Windows::Win32::Dhcp::DHCP_SUBNET_ELEMENT_DATA_V4* Elements;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_CLIENT_INFO_V4
    {
        uint32_t ClientIpAddress;
        uint32_t SubnetMask;
        Windows::Win32::Dhcp::DHCP_BINARY_DATA ClientHardwareAddress;
        uint16_t* ClientName;
        uint16_t* ClientComment;
        Windows::Win32::Dhcp::DATE_TIME ClientLeaseExpires;
        Windows::Win32::Dhcp::DHCP_HOST_INFO OwnerHost;
        uint8_t bClientType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_CLIENT_INFO_ARRAY_V4
    {
        uint32_t NumElements;
        Windows::Win32::Dhcp::DHCP_CLIENT_INFO_V4** Clients;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_SERVER_CONFIG_INFO_V4
    {
        uint32_t APIProtocolSupport;
        uint16_t* DatabaseName;
        uint16_t* DatabasePath;
        uint16_t* BackupPath;
        uint32_t BackupInterval;
        uint32_t DatabaseLoggingFlag;
        uint32_t RestoreFlag;
        uint32_t DatabaseCleanupInterval;
        uint32_t DebugFlag;
        uint32_t dwPingRetries;
        uint32_t cbBootTableString;
        uint16_t* wszBootTableString;
        Windows::Win32::SystemServices::BOOL fAuditLog;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_SERVER_CONFIG_INFO_VQ
    {
        uint32_t APIProtocolSupport;
        uint16_t* DatabaseName;
        uint16_t* DatabasePath;
        uint16_t* BackupPath;
        uint32_t BackupInterval;
        uint32_t DatabaseLoggingFlag;
        uint32_t RestoreFlag;
        uint32_t DatabaseCleanupInterval;
        uint32_t DebugFlag;
        uint32_t dwPingRetries;
        uint32_t cbBootTableString;
        uint16_t* wszBootTableString;
        Windows::Win32::SystemServices::BOOL fAuditLog;
        Windows::Win32::SystemServices::BOOL QuarantineOn;
        uint32_t QuarDefFail;
        Windows::Win32::SystemServices::BOOL QuarRuntimeStatus;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_SERVER_CONFIG_INFO_V6
    {
        Windows::Win32::SystemServices::BOOL UnicastFlag;
        Windows::Win32::SystemServices::BOOL RapidCommitFlag;
        uint32_t PreferredLifetime;
        uint32_t ValidLifetime;
        uint32_t T1;
        uint32_t T2;
        uint32_t PreferredLifetimeIATA;
        uint32_t ValidLifetimeIATA;
        Windows::Win32::SystemServices::BOOL fAuditLog;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_SUPER_SCOPE_TABLE_ENTRY
    {
        uint32_t SubnetAddress;
        uint32_t SuperScopeNumber;
        uint32_t NextInSuperScope;
        uint16_t* SuperScopeName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_SUPER_SCOPE_TABLE
    {
        uint32_t cEntries;
        Windows::Win32::Dhcp::DHCP_SUPER_SCOPE_TABLE_ENTRY* pEntries;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_CLIENT_INFO_V5
    {
        uint32_t ClientIpAddress;
        uint32_t SubnetMask;
        Windows::Win32::Dhcp::DHCP_BINARY_DATA ClientHardwareAddress;
        uint16_t* ClientName;
        uint16_t* ClientComment;
        Windows::Win32::Dhcp::DATE_TIME ClientLeaseExpires;
        Windows::Win32::Dhcp::DHCP_HOST_INFO OwnerHost;
        uint8_t bClientType;
        uint8_t AddressState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_CLIENT_INFO_ARRAY_V5
    {
        uint32_t NumElements;
        Windows::Win32::Dhcp::DHCP_CLIENT_INFO_V5** Clients;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_ALL_OPTIONS
    {
        struct _Anonymous_e__Struct
        {
            Windows::Win32::Dhcp::DHCP_OPTION Option;
            uint16_t* VendorName;
            uint16_t* ClassName;
        };
        uint32_t Flags;
        Windows::Win32::Dhcp::DHCP_OPTION_ARRAY* NonVendorOptions;
        uint32_t NumVendorOptions;
        _Anonymous_e__Struct* VendorOptions;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_ALL_OPTION_VALUES
    {
        struct _Anonymous_e__Struct
        {
            uint16_t* ClassName;
            uint16_t* VendorName;
            Windows::Win32::SystemServices::BOOL IsVendor;
            Windows::Win32::Dhcp::DHCP_OPTION_VALUE_ARRAY* OptionsArray;
        };
        uint32_t Flags;
        uint32_t NumElements;
        _Anonymous_e__Struct* Options;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_ALL_OPTION_VALUES_PB
    {
        struct _Anonymous_e__Struct
        {
            uint16_t* PolicyName;
            uint16_t* VendorName;
            Windows::Win32::SystemServices::BOOL IsVendor;
            Windows::Win32::Dhcp::DHCP_OPTION_VALUE_ARRAY* OptionsArray;
        };
        uint32_t Flags;
        uint32_t NumElements;
        _Anonymous_e__Struct* Options;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCPDS_SERVER
    {
        uint32_t Version;
        uint16_t* ServerName;
        uint32_t ServerAddress;
        uint32_t Flags;
        uint32_t State;
        uint16_t* DsLocation;
        uint32_t DsLocType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCPDS_SERVERS
    {
        uint32_t Flags;
        uint32_t NumElements;
        Windows::Win32::Dhcp::DHCPDS_SERVER* Servers;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_ATTRIB
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::SystemServices::BOOL DhcpAttribBool;
            uint32_t DhcpAttribUlong;
        };
        uint32_t DhcpAttribId;
        uint32_t DhcpAttribType;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_ATTRIB_ARRAY
    {
        uint32_t NumElements;
        Windows::Win32::Dhcp::DHCP_ATTRIB* DhcpAttribs;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_BOOTP_IP_RANGE
    {
        uint32_t StartAddress;
        uint32_t EndAddress;
        uint32_t BootpAllocated;
        uint32_t MaxBootpAllowed;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_SUBNET_ELEMENT_DATA_V5
    {
        union _DHCP_SUBNET_ELEMENT_UNION_V5
        {
            Windows::Win32::Dhcp::DHCP_BOOTP_IP_RANGE* IpRange;
            Windows::Win32::Dhcp::DHCP_HOST_INFO* SecondaryHost;
            Windows::Win32::Dhcp::DHCP_IP_RESERVATION_V4* ReservedIp;
            Windows::Win32::Dhcp::DHCP_IP_RANGE* ExcludeIpRange;
            Windows::Win32::Dhcp::DHCP_IP_CLUSTER* IpUsedCluster;
        };
        Windows::Win32::Dhcp::DHCP_SUBNET_ELEMENT_TYPE ElementType;
        _DHCP_SUBNET_ELEMENT_UNION_V5 Element;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_SUBNET_ELEMENT_INFO_ARRAY_V5
    {
        uint32_t NumElements;
        Windows::Win32::Dhcp::DHCP_SUBNET_ELEMENT_DATA_V5* Elements;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_PERF_STATS
    {
        uint32_t dwNumPacketsReceived;
        uint32_t dwNumPacketsDuplicate;
        uint32_t dwNumPacketsExpired;
        uint32_t dwNumMilliSecondsProcessed;
        uint32_t dwNumPacketsInActiveQueue;
        uint32_t dwNumPacketsInPingQueue;
        uint32_t dwNumDiscoversReceived;
        uint32_t dwNumOffersSent;
        uint32_t dwNumRequestsReceived;
        uint32_t dwNumInformsReceived;
        uint32_t dwNumAcksSent;
        uint32_t dwNumNacksSent;
        uint32_t dwNumDeclinesReceived;
        uint32_t dwNumReleasesReceived;
        uint32_t dwNumDelayedOfferInQueue;
        uint32_t dwNumPacketsProcessed;
        uint32_t dwNumPacketsInQuarWaitingQueue;
        uint32_t dwNumPacketsInQuarReadyQueue;
        uint32_t dwNumPacketsInQuarDecisionQueue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_BIND_ELEMENT
    {
        uint32_t Flags;
        Windows::Win32::SystemServices::BOOL fBoundToDHCPServer;
        uint32_t AdapterPrimaryAddress;
        uint32_t AdapterSubnetAddress;
        uint16_t* IfDescription;
        uint32_t IfIdSize;
        uint8_t* IfId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_BIND_ELEMENT_ARRAY
    {
        uint32_t NumElements;
        Windows::Win32::Dhcp::DHCP_BIND_ELEMENT* Elements;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCPV6_BIND_ELEMENT
    {
        uint32_t Flags;
        Windows::Win32::SystemServices::BOOL fBoundToDHCPServer;
        Windows::Win32::Dhcp::DHCP_IPV6_ADDRESS AdapterPrimaryAddress;
        Windows::Win32::Dhcp::DHCP_IPV6_ADDRESS AdapterSubnetAddress;
        uint16_t* IfDescription;
        uint32_t IpV6IfIndex;
        uint32_t IfIdSize;
        uint8_t* IfId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCPV6_BIND_ELEMENT_ARRAY
    {
        uint32_t NumElements;
        Windows::Win32::Dhcp::DHCPV6_BIND_ELEMENT* Elements;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_IP_RANGE_V6
    {
        Windows::Win32::Dhcp::DHCP_IPV6_ADDRESS StartAddress;
        Windows::Win32::Dhcp::DHCP_IPV6_ADDRESS EndAddress;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_HOST_INFO_V6
    {
        Windows::Win32::Dhcp::DHCP_IPV6_ADDRESS IpAddress;
        uint16_t* NetBiosName;
        uint16_t* HostName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_SUBNET_INFO_V6
    {
        Windows::Win32::Dhcp::DHCP_IPV6_ADDRESS SubnetAddress;
        uint32_t Prefix;
        uint16_t Preference;
        uint16_t* SubnetName;
        uint16_t* SubnetComment;
        uint32_t State;
        uint32_t ScopeId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct SCOPE_MIB_INFO_V6
    {
        Windows::Win32::Dhcp::DHCP_IPV6_ADDRESS Subnet;
        uint64_t NumAddressesInuse;
        uint64_t NumAddressesFree;
        uint64_t NumPendingAdvertises;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_MIB_INFO_V6
    {
        uint32_t Solicits;
        uint32_t Advertises;
        uint32_t Requests;
        uint32_t Renews;
        uint32_t Rebinds;
        uint32_t Replies;
        uint32_t Confirms;
        uint32_t Declines;
        uint32_t Releases;
        uint32_t Informs;
        Windows::Win32::Dhcp::DATE_TIME ServerStartTime;
        uint32_t Scopes;
        Windows::Win32::Dhcp::SCOPE_MIB_INFO_V6* ScopeInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_IP_RESERVATION_V6
    {
        Windows::Win32::Dhcp::DHCP_IPV6_ADDRESS ReservedIpAddress;
        Windows::Win32::Dhcp::DHCP_BINARY_DATA* ReservedForClient;
        uint32_t InterfaceId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_SUBNET_ELEMENT_DATA_V6
    {
        union DHCP_SUBNET_ELEMENT_UNION_V6
        {
            Windows::Win32::Dhcp::DHCP_IP_RANGE_V6* IpRange;
            Windows::Win32::Dhcp::DHCP_IP_RESERVATION_V6* ReservedIp;
            Windows::Win32::Dhcp::DHCP_IP_RANGE_V6* ExcludeIpRange;
        };
        Windows::Win32::Dhcp::DHCP_SUBNET_ELEMENT_TYPE_V6 ElementType;
        DHCP_SUBNET_ELEMENT_UNION_V6 Element;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    union DHCP_SUBNET_ELEMENT_UNION_V6
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_SUBNET_ELEMENT_INFO_ARRAY_V6
    {
        uint32_t NumElements;
        Windows::Win32::Dhcp::DHCP_SUBNET_ELEMENT_DATA_V6* Elements;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_CLIENT_INFO_V6
    {
        Windows::Win32::Dhcp::DHCP_IPV6_ADDRESS ClientIpAddress;
        Windows::Win32::Dhcp::DHCP_BINARY_DATA ClientDUID;
        uint32_t AddressType;
        uint32_t IAID;
        uint16_t* ClientName;
        uint16_t* ClientComment;
        Windows::Win32::Dhcp::DATE_TIME ClientValidLeaseExpires;
        Windows::Win32::Dhcp::DATE_TIME ClientPrefLeaseExpires;
        Windows::Win32::Dhcp::DHCP_HOST_INFO_V6 OwnerHost;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCPV6_IP_ARRAY
    {
        uint32_t NumElements;
        Windows::Win32::Dhcp::DHCP_IPV6_ADDRESS* Elements;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_CLIENT_INFO_ARRAY_V6
    {
        uint32_t NumElements;
        Windows::Win32::Dhcp::DHCP_CLIENT_INFO_V6** Clients;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_SEARCH_INFO_V6
    {
        union _DHCP_CLIENT_SEARCH_UNION_V6
        {
            Windows::Win32::Dhcp::DHCP_IPV6_ADDRESS ClientIpAddress;
            Windows::Win32::Dhcp::DHCP_BINARY_DATA ClientDUID;
            uint16_t* ClientName;
        };
        Windows::Win32::Dhcp::DHCP_SEARCH_INFO_TYPE_V6 SearchType;
        _DHCP_CLIENT_SEARCH_UNION_V6 SearchInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_POL_COND
    {
        uint32_t ParentExpr;
        Windows::Win32::Dhcp::DHCP_POL_ATTR_TYPE Type;
        uint32_t OptionID;
        uint32_t SubOptionID;
        uint16_t* VendorName;
        Windows::Win32::Dhcp::DHCP_POL_COMPARATOR Operator;
        uint8_t* Value;
        uint32_t ValueLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_POL_COND_ARRAY
    {
        uint32_t NumElements;
        Windows::Win32::Dhcp::DHCP_POL_COND* Elements;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_POL_EXPR
    {
        uint32_t ParentExpr;
        Windows::Win32::Dhcp::DHCP_POL_LOGIC_OPER Operator;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_POL_EXPR_ARRAY
    {
        uint32_t NumElements;
        Windows::Win32::Dhcp::DHCP_POL_EXPR* Elements;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_IP_RANGE_ARRAY
    {
        uint32_t NumElements;
        Windows::Win32::Dhcp::DHCP_IP_RANGE* Elements;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_POLICY
    {
        uint16_t* PolicyName;
        Windows::Win32::SystemServices::BOOL IsGlobalPolicy;
        uint32_t Subnet;
        uint32_t ProcessingOrder;
        Windows::Win32::Dhcp::DHCP_POL_COND_ARRAY* Conditions;
        Windows::Win32::Dhcp::DHCP_POL_EXPR_ARRAY* Expressions;
        Windows::Win32::Dhcp::DHCP_IP_RANGE_ARRAY* Ranges;
        uint16_t* Description;
        Windows::Win32::SystemServices::BOOL Enabled;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_POLICY_ARRAY
    {
        uint32_t NumElements;
        Windows::Win32::Dhcp::DHCP_POLICY* Elements;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_POLICY_EX
    {
        uint16_t* PolicyName;
        Windows::Win32::SystemServices::BOOL IsGlobalPolicy;
        uint32_t Subnet;
        uint32_t ProcessingOrder;
        Windows::Win32::Dhcp::DHCP_POL_COND_ARRAY* Conditions;
        Windows::Win32::Dhcp::DHCP_POL_EXPR_ARRAY* Expressions;
        Windows::Win32::Dhcp::DHCP_IP_RANGE_ARRAY* Ranges;
        uint16_t* Description;
        Windows::Win32::SystemServices::BOOL Enabled;
        Windows::Win32::Dhcp::DHCP_PROPERTY_ARRAY* Properties;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_POLICY_EX_ARRAY
    {
        uint32_t NumElements;
        Windows::Win32::Dhcp::DHCP_POLICY_EX* Elements;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCPV6_STATELESS_PARAMS
    {
        Windows::Win32::SystemServices::BOOL Status;
        uint32_t PurgeInterval;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCPV6_STATELESS_SCOPE_STATS
    {
        Windows::Win32::Dhcp::DHCP_IPV6_ADDRESS SubnetAddress;
        uint64_t NumStatelessClientsAdded;
        uint64_t NumStatelessClientsRemoved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCPV6_STATELESS_STATS
    {
        uint32_t NumScopes;
        Windows::Win32::Dhcp::DHCPV6_STATELESS_SCOPE_STATS* ScopeStats;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_FAILOVER_RELATIONSHIP
    {
        uint32_t PrimaryServer;
        uint32_t SecondaryServer;
        Windows::Win32::Dhcp::DHCP_FAILOVER_MODE Mode;
        Windows::Win32::Dhcp::DHCP_FAILOVER_SERVER ServerType;
        Windows::Win32::Dhcp::FSM_STATE State;
        Windows::Win32::Dhcp::FSM_STATE PrevState;
        uint32_t Mclt;
        uint32_t SafePeriod;
        uint16_t* RelationshipName;
        uint16_t* PrimaryServerName;
        uint16_t* SecondaryServerName;
        Windows::Win32::Dhcp::DHCP_IP_ARRAY* pScopes;
        uint8_t Percentage;
        uint16_t* SharedSecret;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_FAILOVER_RELATIONSHIP_ARRAY
    {
        uint32_t NumElements;
        Windows::Win32::Dhcp::DHCP_FAILOVER_RELATIONSHIP* pRelationships;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCPV4_FAILOVER_CLIENT_INFO
    {
        uint32_t ClientIpAddress;
        uint32_t SubnetMask;
        Windows::Win32::Dhcp::DHCP_BINARY_DATA ClientHardwareAddress;
        uint16_t* ClientName;
        uint16_t* ClientComment;
        Windows::Win32::Dhcp::DATE_TIME ClientLeaseExpires;
        Windows::Win32::Dhcp::DHCP_HOST_INFO OwnerHost;
        uint8_t bClientType;
        uint8_t AddressState;
        Windows::Win32::Dhcp::QuarantineStatus Status;
        Windows::Win32::Dhcp::DATE_TIME ProbationEnds;
        Windows::Win32::SystemServices::BOOL QuarantineCapable;
        uint32_t SentPotExpTime;
        uint32_t AckPotExpTime;
        uint32_t RecvPotExpTime;
        uint32_t StartTime;
        uint32_t CltLastTransTime;
        uint32_t LastBndUpdTime;
        uint32_t BndMsgStatus;
        uint16_t* PolicyName;
        uint8_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCPV4_FAILOVER_CLIENT_INFO_ARRAY
    {
        uint32_t NumElements;
        Windows::Win32::Dhcp::DHCPV4_FAILOVER_CLIENT_INFO** Clients;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCPV4_FAILOVER_CLIENT_INFO_EX
    {
        uint32_t ClientIpAddress;
        uint32_t SubnetMask;
        Windows::Win32::Dhcp::DHCP_BINARY_DATA ClientHardwareAddress;
        uint16_t* ClientName;
        uint16_t* ClientComment;
        Windows::Win32::Dhcp::DATE_TIME ClientLeaseExpires;
        Windows::Win32::Dhcp::DHCP_HOST_INFO OwnerHost;
        uint8_t bClientType;
        uint8_t AddressState;
        Windows::Win32::Dhcp::QuarantineStatus Status;
        Windows::Win32::Dhcp::DATE_TIME ProbationEnds;
        Windows::Win32::SystemServices::BOOL QuarantineCapable;
        uint32_t SentPotExpTime;
        uint32_t AckPotExpTime;
        uint32_t RecvPotExpTime;
        uint32_t StartTime;
        uint32_t CltLastTransTime;
        uint32_t LastBndUpdTime;
        uint32_t BndMsgStatus;
        uint16_t* PolicyName;
        uint8_t Flags;
        uint32_t AddressStateEx;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dhcp
{
    struct DHCP_FAILOVER_STATISTICS
    {
        uint32_t NumAddr;
        uint32_t AddrFree;
        uint32_t AddrInUse;
        uint32_t PartnerAddrFree;
        uint32_t ThisAddrFree;
        uint32_t PartnerAddrInUse;
        uint32_t ThisAddrInUse;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TilesBadgesNotifications
{
    struct NOTIFICATION_USER_INPUT_DATA
    {
        uint16_t* Key;
        uint16_t* Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsDeploymentServices
{
    struct WDS_CLI_CRED
    {
        uint16_t* pwszUserName;
        uint16_t* pwszDomain;
        uint16_t* pwszPassword;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsDeploymentServices
{
    struct PXE_DHCP_OPTION
    {
        uint8_t OptionType;
        uint8_t OptionLength;
        uint8_t OptionValue[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsDeploymentServices
{
    struct PXE_DHCP_MESSAGE
    {
        union _Anonymous_e__Union
        {
            uint8_t bMagicCookie[4];
            uint32_t uMagicCookie;
        };
        uint8_t Operation;
        uint8_t HardwareAddressType;
        uint8_t HardwareAddressLength;
        uint8_t HopCount;
        uint32_t TransactionID;
        uint16_t SecondsSinceBoot;
        uint16_t Reserved;
        uint32_t ClientIpAddress;
        uint32_t YourIpAddress;
        uint32_t BootstrapServerAddress;
        uint32_t RelayAgentIpAddress;
        uint8_t HardwareAddress[16];
        uint8_t HostName[64];
        uint8_t BootFileName[128];
        _Anonymous_e__Union Anonymous;
        Windows::Win32::WindowsDeploymentServices::PXE_DHCP_OPTION Option;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsDeploymentServices
{
    struct PXE_DHCPV6_OPTION
    {
        uint16_t OptionCode;
        uint16_t DataLength;
        uint8_t Data[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsDeploymentServices
{
    struct PXE_DHCPV6_MESSAGE_HEADER
    {
        uint8_t MessageType;
        uint8_t Message[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsDeploymentServices
{
    struct PXE_DHCPV6_MESSAGE
    {
        uint8_t MessageType;
        uint8_t TransactionIDByte1;
        uint8_t TransactionIDByte2;
        uint8_t TransactionIDByte3;
        Windows::Win32::WindowsDeploymentServices::PXE_DHCPV6_OPTION Options[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsDeploymentServices
{
    struct PXE_DHCPV6_RELAY_MESSAGE
    {
        uint8_t MessageType;
        uint8_t HopCount;
        uint8_t LinkAddress[16];
        uint8_t PeerAddress[16];
        Windows::Win32::WindowsDeploymentServices::PXE_DHCPV6_OPTION Options[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsDeploymentServices
{
    struct PXE_PROVIDER
    {
        uint32_t uSizeOfStruct;
        uint16_t* pwszName;
        uint16_t* pwszFilePath;
        Windows::Win32::SystemServices::BOOL bIsCritical;
        uint32_t uIndex;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsDeploymentServices
{
    struct PXE_ADDRESS
    {
        union _Anonymous_e__Union
        {
            uint8_t bAddress[16];
            uint32_t uIpAddress;
        };
        uint32_t uFlags;
        _Anonymous_e__Union Anonymous;
        uint32_t uAddrLen;
        uint16_t uPort;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsDeploymentServices
{
    struct PXE_DHCPV6_NESTED_RELAY_MESSAGE
    {
        Windows::Win32::WindowsDeploymentServices::PXE_DHCPV6_RELAY_MESSAGE* pRelayMessage;
        uint32_t cbRelayMessage;
        void* pInterfaceIdOption;
        uint16_t cbInterfaceIdOption;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsDeploymentServices
{
    struct WDS_TRANSPORTPROVIDER_INIT_PARAMS
    {
        uint32_t ulLength;
        uint32_t ulMcServerVersion;
        Windows::Win32::WindowsProgramming::HKEY hRegistryKey;
        Windows::Win32::SystemServices::HANDLE hProvider;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsDeploymentServices
{
    struct WDS_TRANSPORTPROVIDER_SETTINGS
    {
        uint32_t ulLength;
        uint32_t ulProviderVersion;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsDeploymentServices
{
    struct TRANSPORTCLIENT_SESSION_INFO
    {
        uint32_t ulStructureLength;
        Windows::Win32::SystemServices::ULARGE_INTEGER ullFileSize;
        uint32_t ulBlockSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsDeploymentServices
{
    struct WDS_TRANSPORTCLIENT_REQUEST
    {
        uint32_t ulLength;
        uint32_t ulApiVersion;
        uint32_t ulAuthLevel;
        uint16_t* pwszServer;
        uint16_t* pwszNamespace;
        uint16_t* pwszObjectName;
        uint32_t ulCacheSize;
        uint32_t ulProtocol;
        void* pvProtocolData;
        uint32_t ulProtocolDataLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsDeploymentServices
{
    struct WDS_TRANSPORTCLIENT_CALLBACKS
    {
        Windows::Win32::WindowsDeploymentServices::PFN_WdsTransportClientSessionStart* SessionStart;
        Windows::Win32::WindowsDeploymentServices::PFN_WdsTransportClientSessionStartEx* SessionStartEx;
        Windows::Win32::WindowsDeploymentServices::PFN_WdsTransportClientReceiveContents* ReceiveContents;
        Windows::Win32::WindowsDeploymentServices::PFN_WdsTransportClientReceiveMetadata* ReceiveMetadata;
        Windows::Win32::WindowsDeploymentServices::PFN_WdsTransportClientSessionComplete* SessionComplete;
        Windows::Win32::WindowsDeploymentServices::PFN_WdsTransportClientSessionNegotiate* SessionNegotiate;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsImagingComponent
{
    struct WICRect
    {
        int32_t X;
        int32_t Y;
        int32_t Width;
        int32_t Height;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsImagingComponent
{
    struct WICBitmapPattern
    {
        Windows::Win32::SystemServices::ULARGE_INTEGER Position;
        uint32_t Length;
        uint8_t* Pattern;
        uint8_t* Mask;
        Windows::Win32::SystemServices::BOOL EndOfStream;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D1_PIXEL_FORMAT
    {
        Windows::Win32::Dxgi::DXGI_FORMAT format;
        Windows::Win32::Direct2D::D2D1_ALPHA_MODE alphaMode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsImagingComponent
{
    struct WICImageParameters
    {
        Windows::Win32::Direct2D::D2D1_PIXEL_FORMAT PixelFormat;
        float DpiX;
        float DpiY;
        float Top;
        float Left;
        uint32_t PixelWidth;
        uint32_t PixelHeight;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsImagingComponent
{
    struct WICBitmapPlaneDescription
    {
        ::win32::guid Format;
        uint32_t Width;
        uint32_t Height;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsImagingComponent
{
    struct WICBitmapPlane
    {
        ::win32::guid Format;
        uint8_t* pbBuffer;
        uint32_t cbStride;
        uint32_t cbBufferSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsImagingComponent
{
    struct WICJpegFrameHeader
    {
        uint32_t Width;
        uint32_t Height;
        Windows::Win32::WindowsImagingComponent::WICJpegTransferMatrix TransferMatrix;
        Windows::Win32::WindowsImagingComponent::WICJpegScanType ScanType;
        uint32_t cComponents;
        uint32_t ComponentIdentifiers;
        uint32_t SampleFactors;
        uint32_t QuantizationTableIndices;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsImagingComponent
{
    struct WICJpegScanHeader
    {
        uint32_t cComponents;
        uint32_t RestartInterval;
        uint32_t ComponentSelectors;
        uint32_t HuffmanTableIndices;
        uint8_t StartSpectralSelection;
        uint8_t EndSpectralSelection;
        uint8_t SuccessiveApproximationHigh;
        uint8_t SuccessiveApproximationLow;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsImagingComponent
{
    struct WICRawCapabilitiesInfo
    {
        uint32_t cbSize;
        uint32_t CodecMajorVersion;
        uint32_t CodecMinorVersion;
        Windows::Win32::WindowsImagingComponent::WICRawCapabilities ExposureCompensationSupport;
        Windows::Win32::WindowsImagingComponent::WICRawCapabilities ContrastSupport;
        Windows::Win32::WindowsImagingComponent::WICRawCapabilities RGBWhitePointSupport;
        Windows::Win32::WindowsImagingComponent::WICRawCapabilities NamedWhitePointSupport;
        uint32_t NamedWhitePointSupportMask;
        Windows::Win32::WindowsImagingComponent::WICRawCapabilities KelvinWhitePointSupport;
        Windows::Win32::WindowsImagingComponent::WICRawCapabilities GammaSupport;
        Windows::Win32::WindowsImagingComponent::WICRawCapabilities TintSupport;
        Windows::Win32::WindowsImagingComponent::WICRawCapabilities SaturationSupport;
        Windows::Win32::WindowsImagingComponent::WICRawCapabilities SharpnessSupport;
        Windows::Win32::WindowsImagingComponent::WICRawCapabilities NoiseReductionSupport;
        Windows::Win32::WindowsImagingComponent::WICRawCapabilities DestinationColorProfileSupport;
        Windows::Win32::WindowsImagingComponent::WICRawCapabilities ToneCurveSupport;
        Windows::Win32::WindowsImagingComponent::WICRawRotationCapabilities RotationSupport;
        Windows::Win32::WindowsImagingComponent::WICRawCapabilities RenderModeSupport;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsImagingComponent
{
    struct WICRawToneCurvePoint
    {
        double Input;
        double Output;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsImagingComponent
{
    struct WICRawToneCurve
    {
        uint32_t cPoints;
        Windows::Win32::WindowsImagingComponent::WICRawToneCurvePoint aPoints[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsImagingComponent
{
    struct WICDdsParameters
    {
        uint32_t Width;
        uint32_t Height;
        uint32_t Depth;
        uint32_t MipLevels;
        uint32_t ArraySize;
        Windows::Win32::Dxgi::DXGI_FORMAT DxgiFormat;
        Windows::Win32::WindowsImagingComponent::WICDdsDimension Dimension;
        Windows::Win32::WindowsImagingComponent::WICDdsAlphaMode AlphaMode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsImagingComponent
{
    struct WICDdsFormatInfo
    {
        Windows::Win32::Dxgi::DXGI_FORMAT DxgiFormat;
        uint32_t BytesPerBlock;
        uint32_t BlockWidth;
        uint32_t BlockHeight;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsImagingComponent
{
    struct WICMetadataPattern
    {
        Windows::Win32::SystemServices::ULARGE_INTEGER Position;
        uint32_t Length;
        uint8_t* Pattern;
        uint8_t* Mask;
        Windows::Win32::SystemServices::ULARGE_INTEGER DataOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsImagingComponent
{
    struct WICMetadataHeader
    {
        Windows::Win32::SystemServices::ULARGE_INTEGER Position;
        uint32_t Length;
        uint8_t* Header;
        Windows::Win32::SystemServices::ULARGE_INTEGER DataOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WebDav
{
    struct DAV_CALLBACK_AUTH_BLOB
    {
        void* pBuffer;
        uint32_t ulSize;
        uint32_t ulType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WebDav
{
    struct DAV_CALLBACK_AUTH_UNP
    {
        uint16_t* pszUserName;
        uint32_t ulUserNameLength;
        uint16_t* pszPassword;
        uint32_t ulPasswordLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WebDav
{
    struct DAV_CALLBACK_CRED
    {
        Windows::Win32::WebDav::DAV_CALLBACK_AUTH_BLOB AuthBlob;
        Windows::Win32::WebDav::DAV_CALLBACK_AUTH_UNP UNPBlob;
        Windows::Win32::SystemServices::BOOL bAuthBlobValid;
        Windows::Win32::SystemServices::BOOL bSave;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsRibbon
{
    struct UI_EVENTPARAMS_COMMAND
    {
        uint32_t CommandID;
        uint16_t* CommandName;
        uint32_t ParentCommandID;
        uint16_t* ParentCommandName;
        uint32_t SelectionIndex;
        Windows::Win32::WindowsRibbon::UI_EVENTLOCATION Location;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsRibbon
{
    struct UI_EVENTPARAMS
    {
        union _Anonymous_e__Union
        {
            int32_t Modes;
            Windows::Win32::WindowsRibbon::UI_EVENTPARAMS_COMMAND Params;
        };
        Windows::Win32::WindowsRibbon::UI_EVENTTYPE EventType;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D_POINT_2U
    {
        uint32_t x;
        uint32_t y;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D_POINT_2F
    {
        float x;
        float y;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D_VECTOR_2F
    {
        float x;
        float y;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D_VECTOR_3F
    {
        float x;
        float y;
        float z;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D_VECTOR_4F
    {
        float x;
        float y;
        float z;
        float w;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D_RECT_F
    {
        float left;
        float top;
        float right;
        float bottom;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D_RECT_U
    {
        uint32_t left;
        uint32_t top;
        uint32_t right;
        uint32_t bottom;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D_SIZE_F
    {
        float width;
        float height;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D_MATRIX_3X2_F
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous1_e__Struct
            {
                float m11;
                float m12;
                float m21;
                float m22;
                float dx;
                float dy;
            };
            struct _Anonymous2_e__Struct
            {
                float _11;
                float _12;
                float _21;
                float _22;
                float _31;
                float _32;
            };
            _Anonymous1_e__Struct Anonymous1;
            _Anonymous2_e__Struct Anonymous2;
            float m[6];
        };
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D_MATRIX_4X3_F
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                float _11;
                float _12;
                float _13;
                float _21;
                float _22;
                float _23;
                float _31;
                float _32;
                float _33;
                float _41;
                float _42;
                float _43;
            };
            _Anonymous_e__Struct Anonymous;
            float m[12];
        };
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D_MATRIX_4X4_F
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                float _11;
                float _12;
                float _13;
                float _14;
                float _21;
                float _22;
                float _23;
                float _24;
                float _31;
                float _32;
                float _33;
                float _34;
                float _41;
                float _42;
                float _43;
                float _44;
            };
            _Anonymous_e__Struct Anonymous;
            float m[16];
        };
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D_MATRIX_5X4_F
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                float _11;
                float _12;
                float _13;
                float _14;
                float _21;
                float _22;
                float _23;
                float _24;
                float _31;
                float _32;
                float _33;
                float _34;
                float _41;
                float _42;
                float _43;
                float _44;
                float _51;
                float _52;
                float _53;
                float _54;
            };
            _Anonymous_e__Struct Anonymous;
            float m[20];
        };
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D1_BITMAP_PROPERTIES
    {
        Windows::Win32::Direct2D::D2D1_PIXEL_FORMAT pixelFormat;
        float dpiX;
        float dpiY;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D1_GRADIENT_STOP
    {
        float position;
        Windows::Win32::Dxgi::DXGI_RGBA color;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D1_BRUSH_PROPERTIES
    {
        float opacity;
        Windows::Win32::Direct2D::D2D_MATRIX_3X2_F transform;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D1_BITMAP_BRUSH_PROPERTIES
    {
        Windows::Win32::Direct2D::D2D1_EXTEND_MODE extendModeX;
        Windows::Win32::Direct2D::D2D1_EXTEND_MODE extendModeY;
        Windows::Win32::Direct2D::D2D1_BITMAP_INTERPOLATION_MODE interpolationMode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES
    {
        Windows::Win32::Direct2D::D2D_POINT_2F startPoint;
        Windows::Win32::Direct2D::D2D_POINT_2F endPoint;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES
    {
        Windows::Win32::Direct2D::D2D_POINT_2F center;
        Windows::Win32::Direct2D::D2D_POINT_2F gradientOriginOffset;
        float radiusX;
        float radiusY;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D1_BEZIER_SEGMENT
    {
        Windows::Win32::Direct2D::D2D_POINT_2F point1;
        Windows::Win32::Direct2D::D2D_POINT_2F point2;
        Windows::Win32::Direct2D::D2D_POINT_2F point3;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D1_TRIANGLE
    {
        Windows::Win32::Direct2D::D2D_POINT_2F point1;
        Windows::Win32::Direct2D::D2D_POINT_2F point2;
        Windows::Win32::Direct2D::D2D_POINT_2F point3;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D1_ARC_SEGMENT
    {
        Windows::Win32::Direct2D::D2D_POINT_2F point;
        Windows::Win32::Direct2D::D2D_SIZE_F size;
        float rotationAngle;
        Windows::Win32::Direct2D::D2D1_SWEEP_DIRECTION sweepDirection;
        Windows::Win32::Direct2D::D2D1_ARC_SIZE arcSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D1_QUADRATIC_BEZIER_SEGMENT
    {
        Windows::Win32::Direct2D::D2D_POINT_2F point1;
        Windows::Win32::Direct2D::D2D_POINT_2F point2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D1_ELLIPSE
    {
        Windows::Win32::Direct2D::D2D_POINT_2F point;
        float radiusX;
        float radiusY;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D1_ROUNDED_RECT
    {
        Windows::Win32::Direct2D::D2D_RECT_F rect;
        float radiusX;
        float radiusY;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D1_STROKE_STYLE_PROPERTIES
    {
        Windows::Win32::Direct2D::D2D1_CAP_STYLE startCap;
        Windows::Win32::Direct2D::D2D1_CAP_STYLE endCap;
        Windows::Win32::Direct2D::D2D1_CAP_STYLE dashCap;
        Windows::Win32::Direct2D::D2D1_LINE_JOIN lineJoin;
        float miterLimit;
        Windows::Win32::Direct2D::D2D1_DASH_STYLE dashStyle;
        float dashOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D1_LAYER_PARAMETERS
    {
        Windows::Win32::Direct2D::D2D_RECT_F contentBounds;
        Windows::Win32::Direct2D::ID2D1Geometry* geometricMask;
        Windows::Win32::Direct2D::D2D1_ANTIALIAS_MODE maskAntialiasMode;
        Windows::Win32::Direct2D::D2D_MATRIX_3X2_F maskTransform;
        float opacity;
        Windows::Win32::Direct2D::ID2D1Brush* opacityBrush;
        Windows::Win32::Direct2D::D2D1_LAYER_OPTIONS layerOptions;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D1_RENDER_TARGET_PROPERTIES
    {
        Windows::Win32::Direct2D::D2D1_RENDER_TARGET_TYPE type;
        Windows::Win32::Direct2D::D2D1_PIXEL_FORMAT pixelFormat;
        float dpiX;
        float dpiY;
        Windows::Win32::Direct2D::D2D1_RENDER_TARGET_USAGE usage;
        Windows::Win32::Direct2D::D2D1_FEATURE_LEVEL minLevel;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D1_HWND_RENDER_TARGET_PROPERTIES
    {
        Windows::Win32::WindowsAndMessaging::HWND hwnd;
        Windows::Win32::Direct2D::D2D_SIZE_U pixelSize;
        Windows::Win32::Direct2D::D2D1_PRESENT_OPTIONS presentOptions;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D1_DRAWING_STATE_DESCRIPTION
    {
        Windows::Win32::Direct2D::D2D1_ANTIALIAS_MODE antialiasMode;
        Windows::Win32::Direct2D::D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode;
        uint64_t tag1;
        uint64_t tag2;
        Windows::Win32::Direct2D::D2D_MATRIX_3X2_F transform;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D1_FACTORY_OPTIONS
    {
        Windows::Win32::Direct2D::D2D1_DEBUG_LEVEL debugLevel;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D1_BITMAP_PROPERTIES1
    {
        Windows::Win32::Direct2D::D2D1_PIXEL_FORMAT pixelFormat;
        float dpiX;
        float dpiY;
        Windows::Win32::Direct2D::D2D1_BITMAP_OPTIONS bitmapOptions;
        Windows::Win32::Direct2D::ID2D1ColorContext* colorContext;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D1_MAPPED_RECT
    {
        uint32_t pitch;
        uint8_t* bits;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D1_RENDERING_CONTROLS
    {
        Windows::Win32::Direct2D::D2D1_BUFFER_PRECISION bufferPrecision;
        Windows::Win32::Direct2D::D2D_SIZE_U tileSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D1_EFFECT_INPUT_DESCRIPTION
    {
        Windows::Win32::Direct2D::ID2D1Effect* effect;
        uint32_t inputIndex;
        Windows::Win32::Direct2D::D2D_RECT_F inputRectangle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D1_POINT_DESCRIPTION
    {
        Windows::Win32::Direct2D::D2D_POINT_2F point;
        Windows::Win32::Direct2D::D2D_POINT_2F unitTangentVector;
        uint32_t endSegment;
        uint32_t endFigure;
        float lengthToEndSegment;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D1_IMAGE_BRUSH_PROPERTIES
    {
        Windows::Win32::Direct2D::D2D_RECT_F sourceRectangle;
        Windows::Win32::Direct2D::D2D1_EXTEND_MODE extendModeX;
        Windows::Win32::Direct2D::D2D1_EXTEND_MODE extendModeY;
        Windows::Win32::Direct2D::D2D1_INTERPOLATION_MODE interpolationMode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D1_BITMAP_BRUSH_PROPERTIES1
    {
        Windows::Win32::Direct2D::D2D1_EXTEND_MODE extendModeX;
        Windows::Win32::Direct2D::D2D1_EXTEND_MODE extendModeY;
        Windows::Win32::Direct2D::D2D1_INTERPOLATION_MODE interpolationMode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D1_STROKE_STYLE_PROPERTIES1
    {
        Windows::Win32::Direct2D::D2D1_CAP_STYLE startCap;
        Windows::Win32::Direct2D::D2D1_CAP_STYLE endCap;
        Windows::Win32::Direct2D::D2D1_CAP_STYLE dashCap;
        Windows::Win32::Direct2D::D2D1_LINE_JOIN lineJoin;
        float miterLimit;
        Windows::Win32::Direct2D::D2D1_DASH_STYLE dashStyle;
        float dashOffset;
        Windows::Win32::Direct2D::D2D1_STROKE_TRANSFORM_TYPE transformType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D1_LAYER_PARAMETERS1
    {
        Windows::Win32::Direct2D::D2D_RECT_F contentBounds;
        Windows::Win32::Direct2D::ID2D1Geometry* geometricMask;
        Windows::Win32::Direct2D::D2D1_ANTIALIAS_MODE maskAntialiasMode;
        Windows::Win32::Direct2D::D2D_MATRIX_3X2_F maskTransform;
        float opacity;
        Windows::Win32::Direct2D::ID2D1Brush* opacityBrush;
        Windows::Win32::Direct2D::D2D1_LAYER_OPTIONS1 layerOptions;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D1_DRAWING_STATE_DESCRIPTION1
    {
        Windows::Win32::Direct2D::D2D1_ANTIALIAS_MODE antialiasMode;
        Windows::Win32::Direct2D::D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode;
        uint64_t tag1;
        uint64_t tag2;
        Windows::Win32::Direct2D::D2D_MATRIX_3X2_F transform;
        Windows::Win32::Direct2D::D2D1_PRIMITIVE_BLEND primitiveBlend;
        Windows::Win32::Direct2D::D2D1_UNIT_MODE unitMode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D1_PRINT_CONTROL_PROPERTIES
    {
        Windows::Win32::Direct2D::D2D1_PRINT_FONT_SUBSET_MODE fontSubset;
        float rasterDPI;
        Windows::Win32::Direct2D::D2D1_COLOR_SPACE colorSpace;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D1_CREATION_PROPERTIES
    {
        Windows::Win32::Direct2D::D2D1_THREADING_MODE threadingMode;
        Windows::Win32::Direct2D::D2D1_DEBUG_LEVEL debugLevel;
        Windows::Win32::Direct2D::D2D1_DEVICE_CONTEXT_OPTIONS options;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct Matrix4x3F
    {
        Windows::Win32::Direct2D::D2D_MATRIX_4X3_F __AnonymousBase_d2d1_1helper_L45_C31;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct Matrix4x4F
    {
        Windows::Win32::Direct2D::D2D_MATRIX_4X4_F __AnonymousBase_d2d1_1helper_L97_C31;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct Matrix5x4F
    {
        Windows::Win32::Direct2D::D2D_MATRIX_5X4_F __AnonymousBase_d2d1_1helper_L472_C31;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D1_PROPERTY_BINDING
    {
        uint16_t* propertyName;
        Windows::Win32::Direct2D::PD2D1_PROPERTY_SET_FUNCTION* setFunction;
        Windows::Win32::Direct2D::PD2D1_PROPERTY_GET_FUNCTION* getFunction;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D1_RESOURCE_TEXTURE_PROPERTIES
    {
        uint32_t* extents;
        uint32_t dimensions;
        Windows::Win32::Direct2D::D2D1_BUFFER_PRECISION bufferPrecision;
        Windows::Win32::Direct2D::D2D1_CHANNEL_DEPTH channelDepth;
        Windows::Win32::Direct2D::D2D1_FILTER filter;
        Windows::Win32::Direct2D::D2D1_EXTEND_MODE* extendModes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D1_INPUT_ELEMENT_DESC
    {
        int8_t* semanticName;
        uint32_t semanticIndex;
        Windows::Win32::Dxgi::DXGI_FORMAT format;
        uint32_t inputSlot;
        uint32_t alignedByteOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D1_VERTEX_BUFFER_PROPERTIES
    {
        uint32_t inputCount;
        Windows::Win32::Direct2D::D2D1_VERTEX_USAGE usage;
        uint8_t* data;
        uint32_t byteWidth;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES
    {
        uint8_t* shaderBufferWithInputSignature;
        uint32_t shaderBufferSize;
        Windows::Win32::Direct2D::D2D1_INPUT_ELEMENT_DESC* inputElements;
        uint32_t elementCount;
        uint32_t stride;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D1_VERTEX_RANGE
    {
        uint32_t startVertex;
        uint32_t vertexCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D1_BLEND_DESCRIPTION
    {
        Windows::Win32::Direct2D::D2D1_BLEND sourceBlend;
        Windows::Win32::Direct2D::D2D1_BLEND destinationBlend;
        Windows::Win32::Direct2D::D2D1_BLEND_OPERATION blendOperation;
        Windows::Win32::Direct2D::D2D1_BLEND sourceBlendAlpha;
        Windows::Win32::Direct2D::D2D1_BLEND destinationBlendAlpha;
        Windows::Win32::Direct2D::D2D1_BLEND_OPERATION blendOperationAlpha;
        float blendFactor[4];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D1_INPUT_DESCRIPTION
    {
        Windows::Win32::Direct2D::D2D1_FILTER filter;
        uint32_t levelOfDetailCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D1_FEATURE_DATA_DOUBLES
    {
        Windows::Win32::SystemServices::BOOL doublePrecisionFloatShaderOps;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D1_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS
    {
        Windows::Win32::SystemServices::BOOL computeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D1_SVG_LENGTH
    {
        float value;
        Windows::Win32::Direct2D::D2D1_SVG_LENGTH_UNITS units;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D1_SVG_PRESERVE_ASPECT_RATIO
    {
        Windows::Win32::SystemServices::BOOL defer;
        Windows::Win32::Direct2D::D2D1_SVG_ASPECT_ALIGN align;
        Windows::Win32::Direct2D::D2D1_SVG_ASPECT_SCALING meetOrSlice;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D1_SVG_VIEWBOX
    {
        float x;
        float y;
        float width;
        float height;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES
    {
        Windows::Win32::Direct2D::D2D1_ORIENTATION orientation;
        float scaleX;
        float scaleY;
        Windows::Win32::Direct2D::D2D1_INTERPOLATION_MODE interpolationMode;
        Windows::Win32::Direct2D::D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS options;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D1_INK_POINT
    {
        float x;
        float y;
        float radius;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D1_INK_BEZIER_SEGMENT
    {
        Windows::Win32::Direct2D::D2D1_INK_POINT point1;
        Windows::Win32::Direct2D::D2D1_INK_POINT point2;
        Windows::Win32::Direct2D::D2D1_INK_POINT point3;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D1_INK_STYLE_PROPERTIES
    {
        Windows::Win32::Direct2D::D2D1_INK_NIB_SHAPE nibShape;
        Windows::Win32::Direct2D::D2D_MATRIX_3X2_F nibTransform;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D1_GRADIENT_MESH_PATCH
    {
        Windows::Win32::Direct2D::D2D_POINT_2F point00;
        Windows::Win32::Direct2D::D2D_POINT_2F point01;
        Windows::Win32::Direct2D::D2D_POINT_2F point02;
        Windows::Win32::Direct2D::D2D_POINT_2F point03;
        Windows::Win32::Direct2D::D2D_POINT_2F point10;
        Windows::Win32::Direct2D::D2D_POINT_2F point11;
        Windows::Win32::Direct2D::D2D_POINT_2F point12;
        Windows::Win32::Direct2D::D2D_POINT_2F point13;
        Windows::Win32::Direct2D::D2D_POINT_2F point20;
        Windows::Win32::Direct2D::D2D_POINT_2F point21;
        Windows::Win32::Direct2D::D2D_POINT_2F point22;
        Windows::Win32::Direct2D::D2D_POINT_2F point23;
        Windows::Win32::Direct2D::D2D_POINT_2F point30;
        Windows::Win32::Direct2D::D2D_POINT_2F point31;
        Windows::Win32::Direct2D::D2D_POINT_2F point32;
        Windows::Win32::Direct2D::D2D_POINT_2F point33;
        Windows::Win32::Dxgi::DXGI_RGBA color00;
        Windows::Win32::Dxgi::DXGI_RGBA color03;
        Windows::Win32::Dxgi::DXGI_RGBA color30;
        Windows::Win32::Dxgi::DXGI_RGBA color33;
        Windows::Win32::Direct2D::D2D1_PATCH_EDGE_MODE topEdgeMode;
        Windows::Win32::Direct2D::D2D1_PATCH_EDGE_MODE leftEdgeMode;
        Windows::Win32::Direct2D::D2D1_PATCH_EDGE_MODE bottomEdgeMode;
        Windows::Win32::Direct2D::D2D1_PATCH_EDGE_MODE rightEdgeMode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D2D1_SIMPLE_COLOR_PROFILE
    {
        Windows::Win32::Direct2D::D2D_POINT_2F redPrimary;
        Windows::Win32::Direct2D::D2D_POINT_2F greenPrimary;
        Windows::Win32::Direct2D::D2D_POINT_2F bluePrimary;
        Windows::Win32::Direct2D::D2D_POINT_2F whitePointXZ;
        Windows::Win32::Direct2D::D2D1_GAMMA1 gamma;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct HDROP__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct DRAGINFOA
    {
        uint32_t uSize;
        Windows::Win32::DisplayDevices::POINT pt;
        Windows::Win32::SystemServices::BOOL fNC;
        int8_t* lpFileList;
        uint32_t grfKeyState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct DRAGINFOW
    {
        uint32_t uSize;
        Windows::Win32::DisplayDevices::POINT pt;
        Windows::Win32::SystemServices::BOOL fNC;
        uint16_t* lpFileList;
        uint32_t grfKeyState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct APPBARDATA
    {
        uint32_t cbSize;
        Windows::Win32::WindowsAndMessaging::HWND hWnd;
        uint32_t uCallbackMessage;
        uint32_t uEdge;
        Windows::Win32::DisplayDevices::RECT rc;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct SHFILEOPSTRUCTA
    {
        Windows::Win32::WindowsAndMessaging::HWND hwnd;
        uint32_t wFunc;
        int8_t* pFrom;
        int8_t* pTo;
        uint16_t fFlags;
        Windows::Win32::SystemServices::BOOL fAnyOperationsAborted;
        void* hNameMappings;
        int8_t* lpszProgressTitle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct SHFILEOPSTRUCTW
    {
        Windows::Win32::WindowsAndMessaging::HWND hwnd;
        uint32_t wFunc;
        uint16_t* pFrom;
        uint16_t* pTo;
        uint16_t fFlags;
        Windows::Win32::SystemServices::BOOL fAnyOperationsAborted;
        void* hNameMappings;
        uint16_t* lpszProgressTitle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct SHNAMEMAPPINGA
    {
        int8_t* pszOldPath;
        int8_t* pszNewPath;
        int32_t cchOldPath;
        int32_t cchNewPath;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct SHNAMEMAPPINGW
    {
        uint16_t* pszOldPath;
        uint16_t* pszNewPath;
        int32_t cchOldPath;
        int32_t cchNewPath;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct SHELLEXECUTEINFOA
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::SystemServices::HANDLE hIcon;
            Windows::Win32::SystemServices::HANDLE hMonitor;
        };
        uint32_t cbSize;
        uint32_t fMask;
        Windows::Win32::WindowsAndMessaging::HWND hwnd;
        int8_t* lpVerb;
        int8_t* lpFile;
        int8_t* lpParameters;
        int8_t* lpDirectory;
        int32_t nShow;
        Windows::Win32::SystemServices::HINSTANCE hInstApp;
        void* lpIDList;
        int8_t* lpClass;
        Windows::Win32::WindowsProgramming::HKEY hkeyClass;
        uint32_t dwHotKey;
        _Anonymous_e__Union Anonymous;
        Windows::Win32::SystemServices::HANDLE hProcess;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct SHELLEXECUTEINFOW
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::SystemServices::HANDLE hIcon;
            Windows::Win32::SystemServices::HANDLE hMonitor;
        };
        uint32_t cbSize;
        uint32_t fMask;
        Windows::Win32::WindowsAndMessaging::HWND hwnd;
        uint16_t* lpVerb;
        uint16_t* lpFile;
        uint16_t* lpParameters;
        uint16_t* lpDirectory;
        int32_t nShow;
        Windows::Win32::SystemServices::HINSTANCE hInstApp;
        void* lpIDList;
        uint16_t* lpClass;
        Windows::Win32::WindowsProgramming::HKEY hkeyClass;
        uint32_t dwHotKey;
        _Anonymous_e__Union Anonymous;
        Windows::Win32::SystemServices::HANDLE hProcess;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct SHCREATEPROCESSINFOW
    {
        uint32_t cbSize;
        uint32_t fMask;
        Windows::Win32::WindowsAndMessaging::HWND hwnd;
        uint16_t* pszFile;
        uint16_t* pszParameters;
        uint16_t* pszCurrentDirectory;
        Windows::Win32::SystemServices::HANDLE hUserToken;
        Windows::Win32::SystemServices::SECURITY_ATTRIBUTES* lpProcessAttributes;
        Windows::Win32::SystemServices::SECURITY_ATTRIBUTES* lpThreadAttributes;
        Windows::Win32::SystemServices::BOOL bInheritHandles;
        uint32_t dwCreationFlags;
        Windows::Win32::SystemServices::STARTUPINFOW* lpStartupInfo;
        Windows::Win32::SystemServices::PROCESS_INFORMATION* lpProcessInformation;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct ASSOCIATIONELEMENT
    {
        Windows::Win32::Shell::ASSOCCLASS ac;
        Windows::Win32::WindowsProgramming::HKEY hkClass;
        uint16_t* pszClass;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct SHQUERYRBINFO
    {
        uint32_t cbSize;
        int64_t i64Size;
        int64_t i64NumItems;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct NOTIFYICONDATAA
    {
        union _Anonymous_e__Union
        {
            uint32_t uTimeout;
            uint32_t uVersion;
        };
        uint32_t cbSize;
        Windows::Win32::WindowsAndMessaging::HWND hWnd;
        uint32_t uID;
        uint32_t uFlags;
        uint32_t uCallbackMessage;
        Windows::Win32::Gdi::HICON hIcon;
        int8_t szTip[128];
        uint32_t dwState;
        uint32_t dwStateMask;
        int8_t szInfo[256];
        _Anonymous_e__Union Anonymous;
        int8_t szInfoTitle[64];
        uint32_t dwInfoFlags;
        ::win32::guid guidItem;
        Windows::Win32::Gdi::HICON hBalloonIcon;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct NOTIFYICONDATAW
    {
        union _Anonymous_e__Union
        {
            uint32_t uTimeout;
            uint32_t uVersion;
        };
        uint32_t cbSize;
        Windows::Win32::WindowsAndMessaging::HWND hWnd;
        uint32_t uID;
        uint32_t uFlags;
        uint32_t uCallbackMessage;
        Windows::Win32::Gdi::HICON hIcon;
        uint16_t szTip[128];
        uint32_t dwState;
        uint32_t dwStateMask;
        uint16_t szInfo[256];
        _Anonymous_e__Union Anonymous;
        uint16_t szInfoTitle[64];
        uint32_t dwInfoFlags;
        ::win32::guid guidItem;
        Windows::Win32::Gdi::HICON hBalloonIcon;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct NOTIFYICONIDENTIFIER
    {
        uint32_t cbSize;
        Windows::Win32::WindowsAndMessaging::HWND hWnd;
        uint32_t uID;
        ::win32::guid guidItem;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct SHFILEINFOA
    {
        Windows::Win32::Gdi::HICON hIcon;
        int32_t iIcon;
        uint32_t dwAttributes;
        int8_t szDisplayName[260];
        int8_t szTypeName[80];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct SHFILEINFOW
    {
        Windows::Win32::Gdi::HICON hIcon;
        int32_t iIcon;
        uint32_t dwAttributes;
        uint16_t szDisplayName[260];
        uint16_t szTypeName[80];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct SHSTOCKICONINFO
    {
        uint32_t cbSize;
        Windows::Win32::Gdi::HICON hIcon;
        int32_t iSysImageIndex;
        int32_t iIcon;
        uint16_t szPath[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct OPEN_PRINTER_PROPS_INFOA
    {
        uint32_t dwSize;
        int8_t* pszSheetName;
        uint32_t uSheetIndex;
        uint32_t dwFlags;
        Windows::Win32::SystemServices::BOOL bModal;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct OPEN_PRINTER_PROPS_INFOW
    {
        uint32_t dwSize;
        uint16_t* pszSheetName;
        uint32_t uSheetIndex;
        uint32_t dwFlags;
        Windows::Win32::SystemServices::BOOL bModal;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct IMarkupCallback
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct IControlMarkup
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct SHITEMID
    {
        uint16_t cb;
        uint8_t abID[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct ITEMIDLIST
    {
        Windows::Win32::Shell::SHITEMID mkid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct STRRET
    {
        union _Anonymous_e__Union
        {
            uint16_t* pOleStr;
            uint32_t uOffset;
            int8_t cStr[260];
        };
        uint32_t uType;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct SHELLDETAILS
    {
        int32_t fmt;
        int32_t cxChar;
        Windows::Win32::Shell::STRRET str;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct COMDLG_FILTERSPEC
    {
        uint16_t* pszName;
        uint16_t* pszSpec;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct CMINVOKECOMMANDINFO
    {
        uint32_t cbSize;
        uint32_t fMask;
        Windows::Win32::WindowsAndMessaging::HWND hwnd;
        int8_t* lpVerb;
        int8_t* lpParameters;
        int8_t* lpDirectory;
        int32_t nShow;
        uint32_t dwHotKey;
        Windows::Win32::SystemServices::HANDLE hIcon;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct CMINVOKECOMMANDINFOEX
    {
        uint32_t cbSize;
        uint32_t fMask;
        Windows::Win32::WindowsAndMessaging::HWND hwnd;
        int8_t* lpVerb;
        int8_t* lpParameters;
        int8_t* lpDirectory;
        int32_t nShow;
        uint32_t dwHotKey;
        Windows::Win32::SystemServices::HANDLE hIcon;
        int8_t* lpTitle;
        uint16_t* lpVerbW;
        uint16_t* lpParametersW;
        uint16_t* lpDirectoryW;
        uint16_t* lpTitleW;
        Windows::Win32::DisplayDevices::POINT ptInvoke;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct PERSIST_FOLDER_TARGET_INFO
    {
        Windows::Win32::Shell::ITEMIDLIST* pidlTargetFolder;
        uint16_t szTargetParsingName[260];
        uint16_t szNetworkProvider[260];
        uint32_t dwAttributes;
        int32_t csidl;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct EXTRASEARCH
    {
        ::win32::guid guidSearch;
        uint16_t wszFriendlyName[80];
        uint16_t wszUrl[2084];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct FOLDERSETTINGS
    {
        uint32_t ViewMode;
        uint32_t fFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct SV2CVW2_PARAMS
    {
        uint32_t cbSize;
        Windows::Win32::Shell::IShellView* psvPrev;
        Windows::Win32::Shell::FOLDERSETTINGS* pfs;
        Windows::Win32::Shell::IShellBrowser* psbOwner;
        Windows::Win32::DisplayDevices::RECT* prcView;
        ::win32::guid* pvid;
        Windows::Win32::WindowsAndMessaging::HWND hwndView;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct SORTCOLUMN
    {
        Windows::Win32::WindowsPropertiesSystem::PROPERTYKEY propkey;
        int32_t direction;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct CM_COLUMNINFO
    {
        uint32_t cbSize;
        uint32_t dwMask;
        uint32_t dwState;
        uint32_t uWidth;
        uint32_t uDefaultWidth;
        uint32_t uIdealWidth;
        uint16_t wszName[80];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct SHELL_ITEM_RESOURCE
    {
        ::win32::guid guidType;
        uint16_t szName[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct CATEGORY_INFO
    {
        Windows::Win32::Shell::CATEGORYINFO_FLAGS cif;
        uint16_t wszName[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct SHDRAGIMAGE
    {
        Windows::Win32::DisplayDevices::SIZE sizeDragImage;
        Windows::Win32::DisplayDevices::POINT ptOffset;
        Windows::Win32::Gdi::HBITMAP hbmpDragImage;
        uint32_t crColorKey;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct DESKBANDINFO
    {
        uint32_t dwMask;
        Windows::Win32::DisplayDevices::POINTL ptMinSize;
        Windows::Win32::DisplayDevices::POINTL ptMaxSize;
        Windows::Win32::DisplayDevices::POINTL ptIntegral;
        Windows::Win32::DisplayDevices::POINTL ptActual;
        uint16_t wszTitle[256];
        uint32_t dwModeFlags;
        uint32_t crBkgnd;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct THUMBBUTTON
    {
        Windows::Win32::Shell::THUMBBUTTONMASK dwMask;
        uint32_t iId;
        uint32_t iBitmap;
        Windows::Win32::Gdi::HICON hIcon;
        uint16_t szTip[260];
        Windows::Win32::Shell::THUMBBUTTONFLAGS dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct BANDSITEINFO
    {
        uint32_t dwMask;
        uint32_t dwState;
        uint32_t dwStyle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct DELEGATEITEMID
    {
        uint16_t cbSize;
        uint16_t wOuter;
        uint16_t cbInner;
        uint8_t rgb[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct SMDATA
    {
        uint32_t dwMask;
        uint32_t dwFlags;
        Windows::Win32::MenusAndResources::HMENU hmenu;
        Windows::Win32::WindowsAndMessaging::HWND hwnd;
        uint32_t uId;
        uint32_t uIdParent;
        uint32_t uIdAncestor;
        Windows::Win32::Com::IUnknown* punk;
        Windows::Win32::Shell::ITEMIDLIST* pidlFolder;
        Windows::Win32::Shell::ITEMIDLIST* pidlItem;
        Windows::Win32::Shell::IShellFolder* psf;
        void* pvUserData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct SMINFO
    {
        uint32_t dwMask;
        uint32_t dwType;
        uint32_t dwFlags;
        int32_t iIcon;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct SMCSHCHANGENOTIFYSTRUCT
    {
        int32_t lEvent;
        Windows::Win32::Shell::ITEMIDLIST* pidl1;
        Windows::Win32::Shell::ITEMIDLIST* pidl2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct KNOWNFOLDER_DEFINITION
    {
        Windows::Win32::Shell::KF_CATEGORY category;
        uint16_t* pszName;
        uint16_t* pszDescription;
        ::win32::guid fidParent;
        uint16_t* pszRelativePath;
        uint16_t* pszParsingName;
        uint16_t* pszTooltip;
        uint16_t* pszLocalizedName;
        uint16_t* pszIcon;
        uint16_t* pszSecurity;
        uint32_t dwAttributes;
        uint32_t kfdFlags;
        ::win32::guid ftidType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct PREVIEWHANDLERFRAMEINFO
    {
        Windows::Win32::MenusAndResources::HACCEL haccel;
        uint32_t cAccelEntries;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct BANNER_NOTIFICATION
    {
        Windows::Win32::Shell::BANNER_NOTIFICATION_EVENT event;
        uint16_t* providerIdentity;
        uint16_t* contentId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct NSTCCUSTOMDRAW
    {
        Windows::Win32::Shell::IShellItem* psi;
        uint32_t uItemState;
        uint32_t nstcis;
        uint16_t* pszText;
        int32_t iImage;
        Windows::Win32::Controls::HIMAGELIST himl;
        int32_t iLevel;
        int32_t iIndent;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct DATABLOCK_HEADER
    {
        uint32_t cbSize;
        uint32_t dwSignature;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct NT_CONSOLE_PROPS
    {
        Windows::Win32::Shell::DATABLOCK_HEADER dbh;
        uint16_t wFillAttribute;
        uint16_t wPopupFillAttribute;
        Windows::Win32::SystemServices::COORD dwScreenBufferSize;
        Windows::Win32::SystemServices::COORD dwWindowSize;
        Windows::Win32::SystemServices::COORD dwWindowOrigin;
        uint32_t nFont;
        uint32_t nInputBufferSize;
        Windows::Win32::SystemServices::COORD dwFontSize;
        uint32_t uFontFamily;
        uint32_t uFontWeight;
        uint16_t FaceName[32];
        uint32_t uCursorSize;
        Windows::Win32::SystemServices::BOOL bFullScreen;
        Windows::Win32::SystemServices::BOOL bQuickEdit;
        Windows::Win32::SystemServices::BOOL bInsertMode;
        Windows::Win32::SystemServices::BOOL bAutoPosition;
        uint32_t uHistoryBufferSize;
        uint32_t uNumberOfHistoryBuffers;
        Windows::Win32::SystemServices::BOOL bHistoryNoDup;
        uint32_t ColorTable[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct NT_FE_CONSOLE_PROPS
    {
        Windows::Win32::Shell::DATABLOCK_HEADER dbh;
        uint32_t uCodePage;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct EXP_DARWIN_LINK
    {
        Windows::Win32::Shell::DATABLOCK_HEADER dbh;
        int8_t szDarwinID[260];
        uint16_t szwDarwinID[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct EXP_SPECIAL_FOLDER
    {
        uint32_t cbSize;
        uint32_t dwSignature;
        uint32_t idSpecialFolder;
        uint32_t cbOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct EXP_SZ_LINK
    {
        uint32_t cbSize;
        uint32_t dwSignature;
        int8_t szTarget[260];
        uint16_t swzTarget[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct EXP_PROPERTYSTORAGE
    {
        uint32_t cbSize;
        uint32_t dwSignature;
        uint8_t abPropertyStorage[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct SHFOLDERCUSTOMSETTINGS
    {
        uint32_t dwSize;
        uint32_t dwMask;
        ::win32::guid* pvid;
        uint16_t* pszWebViewTemplate;
        uint32_t cchWebViewTemplate;
        uint16_t* pszWebViewTemplateVersion;
        uint16_t* pszInfoTip;
        uint32_t cchInfoTip;
        ::win32::guid* pclsid;
        uint32_t dwFlags;
        uint16_t* pszIconFile;
        uint32_t cchIconFile;
        int32_t iIconIndex;
        uint16_t* pszLogo;
        uint32_t cchLogo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct BROWSEINFOA
    {
        Windows::Win32::WindowsAndMessaging::HWND hwndOwner;
        Windows::Win32::Shell::ITEMIDLIST* pidlRoot;
        int8_t* pszDisplayName;
        int8_t* lpszTitle;
        uint32_t ulFlags;
        Windows::Win32::ActiveDirectory::BFFCALLBACK* lpfn;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
        int32_t iImage;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct BROWSEINFOW
    {
        Windows::Win32::WindowsAndMessaging::HWND hwndOwner;
        Windows::Win32::Shell::ITEMIDLIST* pidlRoot;
        uint16_t* pszDisplayName;
        uint16_t* lpszTitle;
        uint32_t ulFlags;
        Windows::Win32::ActiveDirectory::BFFCALLBACK* lpfn;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
        int32_t iImage;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct NETRESOURCEA
    {
        uint32_t dwScope;
        uint32_t dwType;
        uint32_t dwDisplayType;
        uint32_t dwUsage;
        int8_t* lpLocalName;
        int8_t* lpRemoteName;
        int8_t* lpComment;
        int8_t* lpProvider;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct NRESARRAY
    {
        uint32_t cItems;
        Windows::Win32::Security::NETRESOURCEA nr[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct CIDA
    {
        uint32_t cidl;
        uint32_t aoffset[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct FILEDESCRIPTORA
    {
        uint32_t dwFlags;
        ::win32::guid clsid;
        Windows::Win32::DisplayDevices::SIZE sizel;
        Windows::Win32::DisplayDevices::POINTL pointl;
        uint32_t dwFileAttributes;
        Windows::Win32::WindowsProgramming::FILETIME ftCreationTime;
        Windows::Win32::WindowsProgramming::FILETIME ftLastAccessTime;
        Windows::Win32::WindowsProgramming::FILETIME ftLastWriteTime;
        uint32_t nFileSizeHigh;
        uint32_t nFileSizeLow;
        int8_t cFileName[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct FILEDESCRIPTORW
    {
        uint32_t dwFlags;
        ::win32::guid clsid;
        Windows::Win32::DisplayDevices::SIZE sizel;
        Windows::Win32::DisplayDevices::POINTL pointl;
        uint32_t dwFileAttributes;
        Windows::Win32::WindowsProgramming::FILETIME ftCreationTime;
        Windows::Win32::WindowsProgramming::FILETIME ftLastAccessTime;
        Windows::Win32::WindowsProgramming::FILETIME ftLastWriteTime;
        uint32_t nFileSizeHigh;
        uint32_t nFileSizeLow;
        uint16_t cFileName[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct FILEGROUPDESCRIPTORA
    {
        uint32_t cItems;
        Windows::Win32::Shell::FILEDESCRIPTORA fgd[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct FILEGROUPDESCRIPTORW
    {
        uint32_t cItems;
        Windows::Win32::Shell::FILEDESCRIPTORW fgd[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct DROPFILES
    {
        uint32_t pFiles;
        Windows::Win32::DisplayDevices::POINT pt;
        Windows::Win32::SystemServices::BOOL fNC;
        Windows::Win32::SystemServices::BOOL fWide;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct FILE_ATTRIBUTES_ARRAY
    {
        uint32_t cItems;
        uint32_t dwSumFileAttributes;
        uint32_t dwProductFileAttributes;
        uint32_t rgdwFileAttributes[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct DROPDESCRIPTION
    {
        Windows::Win32::Shell::DROPIMAGETYPE type;
        uint16_t szMessage[260];
        uint16_t szInsert[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct SHChangeNotifyEntry
    {
        Windows::Win32::Shell::ITEMIDLIST* pidl;
        Windows::Win32::SystemServices::BOOL fRecursive;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct SHARDAPPIDINFO
    {
        Windows::Win32::Shell::IShellItem* psi;
        uint16_t* pszAppID;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct SHARDAPPIDINFOIDLIST
    {
        Windows::Win32::Shell::ITEMIDLIST* pidl;
        uint16_t* pszAppID;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct SHARDAPPIDINFOLINK
    {
        Windows::Win32::Shell::IShellLinkA* psl;
        uint16_t* pszAppID;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct SHChangeDWORDAsIDList
    {
        uint16_t cb;
        uint32_t dwItem1;
        uint32_t dwItem2;
        uint16_t cbZero;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct SHChangeUpdateImageIDList
    {
        uint16_t cb;
        int32_t iIconIndex;
        int32_t iCurIndex;
        uint32_t uFlags;
        uint32_t dwProcessID;
        uint16_t szName[260];
        uint16_t cbZero;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct SHDESCRIPTIONID
    {
        uint32_t dwDescriptionId;
        ::win32::guid clsid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct AUTO_SCROLL_DATA
    {
        int32_t iNextSample;
        uint32_t dwLastScroll;
        Windows::Win32::SystemServices::BOOL bFull;
        Windows::Win32::DisplayDevices::POINT pts[3];
        uint32_t dwTimes[3];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct CABINETSTATE
    {
        uint16_t cLength;
        uint16_t nVersion;
        int32_t _bitfield;
        uint32_t fMenuEnumFilter;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct HPSXA__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct OPENASINFO
    {
        uint16_t* pcszFile;
        uint16_t* pcszClass;
        int32_t oaifInFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct QCMINFO_IDMAP_PLACEMENT
    {
        uint32_t id;
        uint32_t fFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct QCMINFO_IDMAP
    {
        uint32_t nMaxIds;
        Windows::Win32::Shell::QCMINFO_IDMAP_PLACEMENT pIdList[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct QCMINFO
    {
        Windows::Win32::MenusAndResources::HMENU hmenu;
        uint32_t indexMenu;
        uint32_t idCmdFirst;
        uint32_t idCmdLast;
        Windows::Win32::Shell::QCMINFO_IDMAP* pIdMap;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct DETAILSINFO
    {
        Windows::Win32::Shell::ITEMIDLIST* pidl;
        int32_t fmt;
        int32_t cxChar;
        Windows::Win32::Shell::STRRET str;
        int32_t iImage;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct SFVM_PROPPAGE_DATA
    {
        uint32_t dwReserved;
        Windows::Win32::Controls::LPFNADDPROPSHEETPAGE* pfn;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct SFVM_HELPTOPIC_DATA
    {
        uint16_t wszHelpFile[260];
        uint16_t wszHelpTopic[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct ITEMSPACING
    {
        int32_t cxSmall;
        int32_t cySmall;
        int32_t cxLarge;
        int32_t cyLarge;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct SFV_CREATE
    {
        uint32_t cbSize;
        Windows::Win32::Shell::IShellFolder* pshf;
        Windows::Win32::Shell::IShellView* psvOuter;
        Windows::Win32::Shell::IShellFolderViewCB* psfvcb;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct DEFCONTEXTMENU
    {
        Windows::Win32::WindowsAndMessaging::HWND hwnd;
        Windows::Win32::Shell::IContextMenuCB* pcmcb;
        Windows::Win32::Shell::ITEMIDLIST* pidlFolder;
        Windows::Win32::Shell::IShellFolder* psf;
        uint32_t cidl;
        Windows::Win32::Shell::ITEMIDLIST** apidl;
        Windows::Win32::Com::IUnknown* punkAssociationInfo;
        uint32_t cKeys;
        intptr_t* aKeys;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct DFMICS
    {
        uint32_t cbSize;
        uint32_t fMask;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
        uint32_t idCmdFirst;
        uint32_t idDefMax;
        Windows::Win32::Shell::CMINVOKECOMMANDINFO* pici;
        Windows::Win32::Com::IUnknown* punkSite;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct CSFV
    {
        uint32_t cbSize;
        Windows::Win32::Shell::IShellFolder* pshf;
        Windows::Win32::Shell::IShellView* psvOuter;
        Windows::Win32::Shell::ITEMIDLIST* pidl;
        int32_t lEvents;
        Windows::Win32::Shell::LPFNVIEWCALLBACK* pfnCallback;
        Windows::Win32::Shell::FOLDERVIEWMODE fvm;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct SHELLSTATEA
    {
        int32_t _bitfield1;
        uint32_t dwWin95Unused;
        uint32_t uWin95Unused;
        int32_t lParamSort;
        int32_t iSortDirection;
        uint32_t version;
        uint32_t uNotUsed;
        int32_t _bitfield2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct SHELLSTATEW
    {
        int32_t _bitfield1;
        uint32_t dwWin95Unused;
        uint32_t uWin95Unused;
        int32_t lParamSort;
        int32_t iSortDirection;
        uint32_t version;
        uint32_t uNotUsed;
        int32_t _bitfield2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct SHELLFLAGSTATE
    {
        int32_t _bitfield;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct BANDINFOSFB
    {
        uint32_t dwMask;
        uint32_t dwStateMask;
        uint32_t dwState;
        uint32_t crBkgnd;
        uint32_t crBtnLt;
        uint32_t crBtnDk;
        uint16_t wViewMode;
        uint16_t wAlign;
        Windows::Win32::Shell::IShellFolder* psf;
        Windows::Win32::Shell::ITEMIDLIST* pidl;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct SHCOLUMNINFO
    {
        Windows::Win32::WindowsPropertiesSystem::PROPERTYKEY scid;
        uint16_t vt;
        uint32_t fmt;
        uint32_t cChars;
        uint32_t csFlags;
        uint16_t wszTitle[80];
        uint16_t wszDescription[128];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct SHCOLUMNINIT
    {
        uint32_t dwFlags;
        uint32_t dwReserved;
        uint16_t wszFolder[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct SHCOLUMNDATA
    {
        uint32_t dwFlags;
        uint32_t dwFileAttributes;
        uint32_t dwReserved;
        uint16_t* pwszExt;
        uint16_t wszFile[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct SHChangeProductKeyAsIDList
    {
        uint16_t cb;
        uint16_t wszProductKey[39];
        uint16_t cbZero;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct TBINFO
    {
        uint32_t cbuttons;
        uint32_t uFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct SFV_SETITEMPOS
    {
        Windows::Win32::Shell::ITEMIDLIST* pidl;
        Windows::Win32::DisplayDevices::POINT pt;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct AASHELLMENUFILENAME
    {
        int16_t cbTotal;
        uint8_t rgbReserved[12];
        uint16_t szFileName[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct AASHELLMENUITEM
    {
        void* lpReserved1;
        int32_t iReserved;
        uint32_t uiReserved;
        Windows::Win32::Shell::AASHELLMENUFILENAME* lpName;
        uint16_t* psz;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct PARSEDURLA
    {
        uint32_t cbSize;
        int8_t* pszProtocol;
        uint32_t cchProtocol;
        int8_t* pszSuffix;
        uint32_t cchSuffix;
        uint32_t nScheme;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct PARSEDURLW
    {
        uint32_t cbSize;
        uint16_t* pszProtocol;
        uint32_t cchProtocol;
        uint16_t* pszSuffix;
        uint32_t cchSuffix;
        uint32_t nScheme;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct QITAB
    {
        ::win32::guid* piid;
        uint32_t dwOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct DLLVERSIONINFO
    {
        uint32_t cbSize;
        uint32_t dwMajorVersion;
        uint32_t dwMinorVersion;
        uint32_t dwBuildNumber;
        uint32_t dwPlatformID;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct DLLVERSIONINFO2
    {
        Windows::Win32::Shell::DLLVERSIONINFO info1;
        uint32_t dwFlags;
        uint64_t ullVersion;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct APPINFODATA
    {
        uint32_t cbSize;
        uint32_t dwMask;
        uint16_t* pszDisplayName;
        uint16_t* pszVersion;
        uint16_t* pszPublisher;
        uint16_t* pszProductID;
        uint16_t* pszRegisteredOwner;
        uint16_t* pszRegisteredCompany;
        uint16_t* pszLanguage;
        uint16_t* pszSupportUrl;
        uint16_t* pszSupportTelephone;
        uint16_t* pszHelpLink;
        uint16_t* pszInstallLocation;
        uint16_t* pszInstallSource;
        uint16_t* pszInstallDate;
        uint16_t* pszContact;
        uint16_t* pszComments;
        uint16_t* pszImage;
        uint16_t* pszReadmeUrl;
        uint16_t* pszUpdateInfoUrl;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct SLOWAPPINFO
    {
        uint64_t ullSize;
        Windows::Win32::WindowsProgramming::FILETIME ftLastUsed;
        int32_t iTimesUsed;
        uint16_t* pszImage;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct PUBAPPINFO
    {
        uint32_t cbSize;
        uint32_t dwMask;
        uint16_t* pszSource;
        Windows::Win32::WindowsProgramming::SYSTEMTIME stAssigned;
        Windows::Win32::WindowsProgramming::SYSTEMTIME stPublished;
        Windows::Win32::WindowsProgramming::SYSTEMTIME stScheduled;
        Windows::Win32::WindowsProgramming::SYSTEMTIME stExpire;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct CREDENTIAL_PROVIDER_FIELD_DESCRIPTOR
    {
        uint32_t dwFieldID;
        Windows::Win32::Shell::CREDENTIAL_PROVIDER_FIELD_TYPE cpft;
        uint16_t* pszLabel;
        ::win32::guid guidFieldType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION
    {
        uint32_t ulAuthenticationPackage;
        ::win32::guid clsidCredentialProvider;
        uint32_t cbSerialization;
        uint8_t* rgbSerialization;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct SYNCMGR_CONFLICT_ID_INFO
    {
        Windows::Win32::Com::BYTE_BLOB* pblobID;
        Windows::Win32::Com::BYTE_BLOB* pblobExtra;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct CONFIRM_CONFLICT_ITEM
    {
        Windows::Win32::Shell::IShellItem2* pShellItem;
        uint16_t* pszOriginalName;
        uint16_t* pszAlternateName;
        uint16_t* pszLocationShort;
        uint16_t* pszLocationFull;
        Windows::Win32::Shell::SYNCMGR_CONFLICT_ITEM_TYPE nType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct CONFIRM_CONFLICT_RESULT_INFO
    {
        uint16_t* pszNewName;
        uint32_t iItemIndex;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct WTS_THUMBNAILID
    {
        uint8_t rgbKey[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct SYNCMGRPROGRESSITEM
    {
        uint32_t cbSize;
        uint32_t mask;
        uint16_t* lpcStatusText;
        uint32_t dwStatusType;
        int32_t iProgValue;
        int32_t iMaxValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct SYNCMGRLOGERRORINFO
    {
        uint32_t cbSize;
        uint32_t mask;
        uint32_t dwSyncMgrErrorFlags;
        ::win32::guid ErrorID;
        ::win32::guid ItemID;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct SYNCMGRITEM
    {
        uint32_t cbSize;
        uint32_t dwFlags;
        ::win32::guid ItemID;
        uint32_t dwItemState;
        Windows::Win32::Gdi::HICON hIcon;
        uint16_t wszItemName[128];
        Windows::Win32::WindowsProgramming::FILETIME ftLastUpdate;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct SYNCMGRHANDLERINFO
    {
        uint32_t cbSize;
        Windows::Win32::Gdi::HICON hIcon;
        uint32_t SyncMgrHandlerFlags;
        uint16_t wszHandlerName[32];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct WINDOWDATA
    {
        uint32_t dwWindowID;
        uint32_t uiCP;
        Windows::Win32::Shell::ITEMIDLIST* pidl;
        uint16_t* lpszUrl;
        uint16_t* lpszUrlLocation;
        uint16_t* lpszTitle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct HLITEM
    {
        uint32_t uHLID;
        uint16_t* pwzFriendlyName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct HLTBINFO
    {
        uint32_t uDockType;
        Windows::Win32::DisplayDevices::RECT rcTbPos;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct HLBWINFO
    {
        uint32_t cbSize;
        uint32_t grfHLBWIF;
        Windows::Win32::DisplayDevices::RECT rcFramePos;
        Windows::Win32::DisplayDevices::RECT rcDocPos;
        Windows::Win32::Shell::HLTBINFO hltbinfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct BASEBROWSERDATAXP
    {
        Windows::Win32::WindowsAndMessaging::HWND _hwnd;
        Windows::Win32::Shell::ITravelLog* _ptl;
        Windows::Win32::Shell::IHlinkFrame* _phlf;
        Windows::Win32::WindowsProgramming::IWebBrowser2* _pautoWB2;
        Windows::Win32::Shell::IExpDispSupportXP* _pautoEDS;
        Windows::Win32::Shell::IShellService* _pautoSS;
        int32_t _eSecureLockIcon;
        uint32_t _bitfield;
        uint32_t _uActivateState;
        Windows::Win32::Shell::ITEMIDLIST* _pidlViewState;
        Windows::Win32::Com::IOleCommandTarget* _pctView;
        Windows::Win32::Shell::ITEMIDLIST* _pidlCur;
        Windows::Win32::Shell::IShellView* _psv;
        Windows::Win32::Shell::IShellFolder* _psf;
        Windows::Win32::WindowsAndMessaging::HWND _hwndView;
        uint16_t* _pszTitleCur;
        Windows::Win32::Shell::ITEMIDLIST* _pidlPending;
        Windows::Win32::Shell::IShellView* _psvPending;
        Windows::Win32::Shell::IShellFolder* _psfPending;
        Windows::Win32::WindowsAndMessaging::HWND _hwndViewPending;
        uint16_t* _pszTitlePending;
        Windows::Win32::SystemServices::BOOL _fIsViewMSHTML;
        Windows::Win32::SystemServices::BOOL _fPrivacyImpacted;
        ::win32::guid _clsidView;
        ::win32::guid _clsidViewPending;
        Windows::Win32::WindowsAndMessaging::HWND _hwndFrame;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct BASEBROWSERDATALH
    {
        Windows::Win32::WindowsAndMessaging::HWND _hwnd;
        Windows::Win32::Shell::ITravelLog* _ptl;
        Windows::Win32::Shell::IHlinkFrame* _phlf;
        Windows::Win32::WindowsProgramming::IWebBrowser2* _pautoWB2;
        Windows::Win32::Shell::IExpDispSupport* _pautoEDS;
        Windows::Win32::Shell::IShellService* _pautoSS;
        int32_t _eSecureLockIcon;
        uint32_t _bitfield;
        uint32_t _uActivateState;
        Windows::Win32::Shell::ITEMIDLIST* _pidlViewState;
        Windows::Win32::Com::IOleCommandTarget* _pctView;
        Windows::Win32::Shell::ITEMIDLIST* _pidlCur;
        Windows::Win32::Shell::IShellView* _psv;
        Windows::Win32::Shell::IShellFolder* _psf;
        Windows::Win32::WindowsAndMessaging::HWND _hwndView;
        uint16_t* _pszTitleCur;
        Windows::Win32::Shell::ITEMIDLIST* _pidlPending;
        Windows::Win32::Shell::IShellView* _psvPending;
        Windows::Win32::Shell::IShellFolder* _psfPending;
        Windows::Win32::WindowsAndMessaging::HWND _hwndViewPending;
        uint16_t* _pszTitlePending;
        Windows::Win32::SystemServices::BOOL _fIsViewMSHTML;
        Windows::Win32::SystemServices::BOOL _fPrivacyImpacted;
        ::win32::guid _clsidView;
        ::win32::guid _clsidViewPending;
        Windows::Win32::WindowsAndMessaging::HWND _hwndFrame;
        int32_t _lPhishingFilterStatus;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct FOLDERSETDATA
    {
        Windows::Win32::Shell::FOLDERSETTINGS _fs;
        ::win32::guid _vidRestore;
        uint32_t _dwViewPriority;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct TOOLBARITEM
    {
        Windows::Win32::Shell::IDockingWindow* ptbar;
        Windows::Win32::DisplayDevices::RECT rcBorderTool;
        uint16_t* pwszItem;
        Windows::Win32::SystemServices::BOOL fShow;
        intptr_t hMon;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct CPLINFO
    {
        int32_t idIcon;
        int32_t idName;
        int32_t idInfo;
        intptr_t lData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct NEWCPLINFOA
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        uint32_t dwHelpContext;
        intptr_t lData;
        Windows::Win32::Gdi::HICON hIcon;
        int8_t szName[32];
        int8_t szInfo[64];
        int8_t szHelpFile[128];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct NEWCPLINFOW
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        uint32_t dwHelpContext;
        intptr_t lData;
        Windows::Win32::Gdi::HICON hIcon;
        uint16_t szName[32];
        uint16_t szInfo[64];
        uint16_t szHelpFile[128];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct PROFILEINFOA
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        int8_t* lpUserName;
        int8_t* lpProfilePath;
        int8_t* lpDefaultPath;
        int8_t* lpServerName;
        int8_t* lpPolicyPath;
        Windows::Win32::SystemServices::HANDLE hProfile;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct PROFILEINFOW
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        uint16_t* lpUserName;
        uint16_t* lpProfilePath;
        uint16_t* lpDefaultPath;
        uint16_t* lpServerName;
        uint16_t* lpPolicyPath;
        Windows::Win32::SystemServices::HANDLE hProfile;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct urlinvokecommandinfoA
    {
        uint32_t dwcbSize;
        uint32_t dwFlags;
        Windows::Win32::WindowsAndMessaging::HWND hwndParent;
        int8_t* pcszVerb;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct urlinvokecommandinfoW
    {
        uint32_t dwcbSize;
        uint32_t dwFlags;
        Windows::Win32::WindowsAndMessaging::HWND hwndParent;
        uint16_t* pcszVerb;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct _APPSTATE_REGISTRATION
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct _APPCONSTRAIN_REGISTRATION
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct __MIDL___MIDL_itf_dimm_0000_0000_0012
    {
        union _lfFont_e__Union
        {
            Windows::Win32::Shell::LOGFONTA A;
            Windows::Win32::Shell::LOGFONTW W;
        };
        Windows::Win32::WindowsAndMessaging::HWND hWnd;
        Windows::Win32::SystemServices::BOOL fOpen;
        Windows::Win32::DisplayDevices::POINT ptStatusWndPos;
        Windows::Win32::DisplayDevices::POINT ptSoftKbdPos;
        uint32_t fdwConversion;
        uint32_t fdwSentence;
        _lfFont_e__Union lfFont;
        Windows::Win32::Intl::COMPOSITIONFORM cfCompForm;
        Windows::Win32::Intl::CANDIDATEFORM cfCandForm[4];
        Windows::Win32::Intl::HIMCC__* hCompStr;
        Windows::Win32::Intl::HIMCC__* hCandInfo;
        Windows::Win32::Intl::HIMCC__* hGuideLine;
        Windows::Win32::Intl::HIMCC__* hPrivate;
        uint32_t dwNumMsgBuf;
        Windows::Win32::Intl::HIMCC__* hMsgBuf;
        uint32_t fdwInit;
        uint32_t dwReserve[3];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct __MIDL___MIDL_itf_dimm_0000_0000_0014
    {
        uint32_t dwPrivateDataSize;
        uint32_t fdwProperty;
        uint32_t fdwConversionCaps;
        uint32_t fdwSentenceCaps;
        uint32_t fdwUICaps;
        uint32_t fdwSCSCaps;
        uint32_t fdwSelectCaps;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct NET_ADDRESS_INFO
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct NC_ADDRESS
    {
        Windows::Win32::IpHelper::NET_ADDRESS_INFO* pAddrInfo;
        uint16_t PortNumber;
        uint8_t PrefixLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsPropertiesSystem
{
    struct PROPPRG
    {
        uint16_t flPrg;
        uint16_t flPrgInit;
        int8_t achTitle[30];
        int8_t achCmdLine[128];
        int8_t achWorkDir[64];
        uint16_t wHotKey;
        int8_t achIconFile[80];
        uint16_t wIconIndex;
        uint32_t dwEnhModeFlags;
        uint32_t dwRealModeFlags;
        int8_t achOtherFile[80];
        int8_t achPIFFile[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct INTERNET_ASYNC_RESULT
    {
        size_t dwResult;
        uint32_t dwError;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct INTERNET_DIAGNOSTIC_SOCKET_INFO
    {
        size_t Socket;
        uint32_t SourcePort;
        uint32_t DestPort;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct INTERNET_PROXY_INFO
    {
        uint32_t dwAccessType;
        int8_t* lpszProxy;
        int8_t* lpszProxyBypass;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct INTERNET_PER_CONN_OPTIONA
    {
        union _Value_e__Union
        {
            uint32_t dwValue;
            int8_t* pszValue;
            Windows::Win32::WindowsProgramming::FILETIME ftValue;
        };
        uint32_t dwOption;
        _Value_e__Union Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct INTERNET_PER_CONN_OPTIONW
    {
        union _Value_e__Union
        {
            uint32_t dwValue;
            uint16_t* pszValue;
            Windows::Win32::WindowsProgramming::FILETIME ftValue;
        };
        uint32_t dwOption;
        _Value_e__Union Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct INTERNET_PER_CONN_OPTION_LISTA
    {
        uint32_t dwSize;
        int8_t* pszConnection;
        uint32_t dwOptionCount;
        uint32_t dwOptionError;
        Windows::Win32::WinInet::INTERNET_PER_CONN_OPTIONA* pOptions;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct INTERNET_PER_CONN_OPTION_LISTW
    {
        uint32_t dwSize;
        uint16_t* pszConnection;
        uint32_t dwOptionCount;
        uint32_t dwOptionError;
        Windows::Win32::WinInet::INTERNET_PER_CONN_OPTIONW* pOptions;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct INTERNET_VERSION_INFO
    {
        uint32_t dwMajorVersion;
        uint32_t dwMinorVersion;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct INTERNET_CONNECTED_INFO
    {
        uint32_t dwConnectedState;
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct URL_COMPONENTSA
    {
        uint32_t dwStructSize;
        int8_t* lpszScheme;
        uint32_t dwSchemeLength;
        Windows::Win32::WinInet::INTERNET_SCHEME nScheme;
        int8_t* lpszHostName;
        uint32_t dwHostNameLength;
        uint16_t nPort;
        int8_t* lpszUserName;
        uint32_t dwUserNameLength;
        int8_t* lpszPassword;
        uint32_t dwPasswordLength;
        int8_t* lpszUrlPath;
        uint32_t dwUrlPathLength;
        int8_t* lpszExtraInfo;
        uint32_t dwExtraInfoLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct URL_COMPONENTSW
    {
        uint32_t dwStructSize;
        uint16_t* lpszScheme;
        uint32_t dwSchemeLength;
        Windows::Win32::WinInet::INTERNET_SCHEME nScheme;
        uint16_t* lpszHostName;
        uint32_t dwHostNameLength;
        uint16_t nPort;
        uint16_t* lpszUserName;
        uint32_t dwUserNameLength;
        uint16_t* lpszPassword;
        uint32_t dwPasswordLength;
        uint16_t* lpszUrlPath;
        uint32_t dwUrlPathLength;
        uint16_t* lpszExtraInfo;
        uint32_t dwExtraInfoLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct INTERNET_CERTIFICATE_INFO
    {
        Windows::Win32::WindowsProgramming::FILETIME ftExpiry;
        Windows::Win32::WindowsProgramming::FILETIME ftStart;
        int8_t* lpszSubjectInfo;
        int8_t* lpszIssuerInfo;
        int8_t* lpszProtocolName;
        int8_t* lpszSignatureAlgName;
        int8_t* lpszEncryptionAlgName;
        uint32_t dwKeySize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct INTERNET_BUFFERSA
    {
        uint32_t dwStructSize;
        Windows::Win32::WinInet::INTERNET_BUFFERSA* Next;
        int8_t* lpcszHeader;
        uint32_t dwHeadersLength;
        uint32_t dwHeadersTotal;
        void* lpvBuffer;
        uint32_t dwBufferLength;
        uint32_t dwBufferTotal;
        uint32_t dwOffsetLow;
        uint32_t dwOffsetHigh;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct INTERNET_BUFFERSW
    {
        uint32_t dwStructSize;
        Windows::Win32::WinInet::INTERNET_BUFFERSW* Next;
        uint16_t* lpcszHeader;
        uint32_t dwHeadersLength;
        uint32_t dwHeadersTotal;
        void* lpvBuffer;
        uint32_t dwBufferLength;
        uint32_t dwBufferTotal;
        uint32_t dwOffsetLow;
        uint32_t dwOffsetHigh;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct IncomingCookieState
    {
        int32_t cSession;
        int32_t cPersistent;
        int32_t cAccepted;
        int32_t cLeashed;
        int32_t cDowngraded;
        int32_t cBlocked;
        int8_t* pszLocation;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct OutgoingCookieState
    {
        int32_t cSent;
        int32_t cSuppressed;
        int8_t* pszLocation;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct InternetCookieHistory
    {
        Windows::Win32::SystemServices::BOOL fAccepted;
        Windows::Win32::SystemServices::BOOL fLeashed;
        Windows::Win32::SystemServices::BOOL fDowngraded;
        Windows::Win32::SystemServices::BOOL fRejected;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct CookieDecision
    {
        uint32_t dwCookieState;
        Windows::Win32::SystemServices::BOOL fAllowSession;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct GOPHER_FIND_DATAA
    {
        int8_t DisplayString[129];
        uint32_t GopherType;
        uint32_t SizeLow;
        uint32_t SizeHigh;
        Windows::Win32::WindowsProgramming::FILETIME LastModificationTime;
        int8_t Locator[654];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct GOPHER_FIND_DATAW
    {
        uint16_t DisplayString[129];
        uint32_t GopherType;
        uint32_t SizeLow;
        uint32_t SizeHigh;
        Windows::Win32::WindowsProgramming::FILETIME LastModificationTime;
        uint16_t Locator[654];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct GOPHER_ADMIN_ATTRIBUTE_TYPE
    {
        int8_t* Comment;
        int8_t* EmailAddress;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct GOPHER_MOD_DATE_ATTRIBUTE_TYPE
    {
        Windows::Win32::WindowsProgramming::FILETIME DateAndTime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct GOPHER_TTL_ATTRIBUTE_TYPE
    {
        uint32_t Ttl;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct GOPHER_SCORE_ATTRIBUTE_TYPE
    {
        int32_t Score;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct GOPHER_SCORE_RANGE_ATTRIBUTE_TYPE
    {
        int32_t LowerBound;
        int32_t UpperBound;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct GOPHER_SITE_ATTRIBUTE_TYPE
    {
        int8_t* Site;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct GOPHER_ORGANIZATION_ATTRIBUTE_TYPE
    {
        int8_t* Organization;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct GOPHER_LOCATION_ATTRIBUTE_TYPE
    {
        int8_t* Location;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct GOPHER_GEOGRAPHICAL_LOCATION_ATTRIBUTE_TYPE
    {
        int32_t DegreesNorth;
        int32_t MinutesNorth;
        int32_t SecondsNorth;
        int32_t DegreesEast;
        int32_t MinutesEast;
        int32_t SecondsEast;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct GOPHER_TIMEZONE_ATTRIBUTE_TYPE
    {
        int32_t Zone;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct GOPHER_PROVIDER_ATTRIBUTE_TYPE
    {
        int8_t* Provider;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct GOPHER_VERSION_ATTRIBUTE_TYPE
    {
        int8_t* Version;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct GOPHER_ABSTRACT_ATTRIBUTE_TYPE
    {
        int8_t* ShortAbstract;
        int8_t* AbstractFile;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct GOPHER_VIEW_ATTRIBUTE_TYPE
    {
        int8_t* ContentType;
        int8_t* Language;
        uint32_t Size;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct GOPHER_VERONICA_ATTRIBUTE_TYPE
    {
        Windows::Win32::SystemServices::BOOL TreeWalk;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct GOPHER_ASK_ATTRIBUTE_TYPE
    {
        int8_t* QuestionType;
        int8_t* QuestionText;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct GOPHER_UNKNOWN_ATTRIBUTE_TYPE
    {
        int8_t* Text;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct GOPHER_ATTRIBUTE_TYPE
    {
        union _AttributeType_e__Union
        {
            Windows::Win32::WinInet::GOPHER_ADMIN_ATTRIBUTE_TYPE Admin;
            Windows::Win32::WinInet::GOPHER_MOD_DATE_ATTRIBUTE_TYPE ModDate;
            Windows::Win32::WinInet::GOPHER_TTL_ATTRIBUTE_TYPE Ttl;
            Windows::Win32::WinInet::GOPHER_SCORE_ATTRIBUTE_TYPE Score;
            Windows::Win32::WinInet::GOPHER_SCORE_RANGE_ATTRIBUTE_TYPE ScoreRange;
            Windows::Win32::WinInet::GOPHER_SITE_ATTRIBUTE_TYPE Site;
            Windows::Win32::WinInet::GOPHER_ORGANIZATION_ATTRIBUTE_TYPE Organization;
            Windows::Win32::WinInet::GOPHER_LOCATION_ATTRIBUTE_TYPE Location;
            Windows::Win32::WinInet::GOPHER_GEOGRAPHICAL_LOCATION_ATTRIBUTE_TYPE GeographicalLocation;
            Windows::Win32::WinInet::GOPHER_TIMEZONE_ATTRIBUTE_TYPE TimeZone;
            Windows::Win32::WinInet::GOPHER_PROVIDER_ATTRIBUTE_TYPE Provider;
            Windows::Win32::WinInet::GOPHER_VERSION_ATTRIBUTE_TYPE Version;
            Windows::Win32::WinInet::GOPHER_ABSTRACT_ATTRIBUTE_TYPE Abstract;
            Windows::Win32::WinInet::GOPHER_VIEW_ATTRIBUTE_TYPE View;
            Windows::Win32::WinInet::GOPHER_VERONICA_ATTRIBUTE_TYPE Veronica;
            Windows::Win32::WinInet::GOPHER_ASK_ATTRIBUTE_TYPE Ask;
            Windows::Win32::WinInet::GOPHER_UNKNOWN_ATTRIBUTE_TYPE Unknown;
        };
        uint32_t CategoryId;
        uint32_t AttributeId;
        _AttributeType_e__Union AttributeType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct INTERNET_COOKIE2
    {
        uint16_t* pwszName;
        uint16_t* pwszValue;
        uint16_t* pwszDomain;
        uint16_t* pwszPath;
        uint32_t dwFlags;
        Windows::Win32::WindowsProgramming::FILETIME ftExpires;
        Windows::Win32::SystemServices::BOOL fExpiresSet;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct INTERNET_AUTH_NOTIFY_DATA
    {
        uint32_t cbStruct;
        uint32_t dwOptions;
        Windows::Win32::WinInet::PFN_AUTH_NOTIFY* pfnNotify;
        size_t dwContext;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct INTERNET_CACHE_ENTRY_INFOA
    {
        union _Anonymous_e__Union
        {
            uint32_t dwReserved;
            uint32_t dwExemptDelta;
        };
        uint32_t dwStructSize;
        int8_t* lpszSourceUrlName;
        int8_t* lpszLocalFileName;
        uint32_t CacheEntryType;
        uint32_t dwUseCount;
        uint32_t dwHitRate;
        uint32_t dwSizeLow;
        uint32_t dwSizeHigh;
        Windows::Win32::WindowsProgramming::FILETIME LastModifiedTime;
        Windows::Win32::WindowsProgramming::FILETIME ExpireTime;
        Windows::Win32::WindowsProgramming::FILETIME LastAccessTime;
        Windows::Win32::WindowsProgramming::FILETIME LastSyncTime;
        int8_t* lpHeaderInfo;
        uint32_t dwHeaderInfoSize;
        int8_t* lpszFileExtension;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct INTERNET_CACHE_ENTRY_INFOW
    {
        union _Anonymous_e__Union
        {
            uint32_t dwReserved;
            uint32_t dwExemptDelta;
        };
        uint32_t dwStructSize;
        uint16_t* lpszSourceUrlName;
        uint16_t* lpszLocalFileName;
        uint32_t CacheEntryType;
        uint32_t dwUseCount;
        uint32_t dwHitRate;
        uint32_t dwSizeLow;
        uint32_t dwSizeHigh;
        Windows::Win32::WindowsProgramming::FILETIME LastModifiedTime;
        Windows::Win32::WindowsProgramming::FILETIME ExpireTime;
        Windows::Win32::WindowsProgramming::FILETIME LastAccessTime;
        Windows::Win32::WindowsProgramming::FILETIME LastSyncTime;
        uint16_t* lpHeaderInfo;
        uint32_t dwHeaderInfoSize;
        uint16_t* lpszFileExtension;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct INTERNET_CACHE_TIMESTAMPS
    {
        Windows::Win32::WindowsProgramming::FILETIME ftExpires;
        Windows::Win32::WindowsProgramming::FILETIME ftLastModified;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct INTERNET_CACHE_GROUP_INFOA
    {
        uint32_t dwGroupSize;
        uint32_t dwGroupFlags;
        uint32_t dwGroupType;
        uint32_t dwDiskUsage;
        uint32_t dwDiskQuota;
        uint32_t dwOwnerStorage[4];
        int8_t szGroupName[120];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct INTERNET_CACHE_GROUP_INFOW
    {
        uint32_t dwGroupSize;
        uint32_t dwGroupFlags;
        uint32_t dwGroupType;
        uint32_t dwDiskUsage;
        uint32_t dwDiskQuota;
        uint32_t dwOwnerStorage[4];
        uint16_t szGroupName[120];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct AutoProxyHelperVtbl
    {
        Windows::Win32::SystemServices::BOOL********** IsResolvable;
        intptr_t GetIPAddress;
        intptr_t ResolveHostName;
        Windows::Win32::SystemServices::BOOL********** IsInNet;
        Windows::Win32::SystemServices::BOOL********** IsResolvableEx;
        intptr_t GetIPAddressEx;
        intptr_t ResolveHostNameEx;
        Windows::Win32::SystemServices::BOOL********** IsInNetEx;
        intptr_t SortIpList;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct AUTO_PROXY_SCRIPT_BUFFER
    {
        uint32_t dwStructSize;
        int8_t* lpszScriptBuffer;
        uint32_t dwScriptBufferSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct AutoProxyHelperFunctions
    {
        Windows::Win32::WinInet::AutoProxyHelperVtbl* lpVtbl;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct INTERNET_PREFETCH_STATUS
    {
        uint32_t dwStatus;
        uint32_t dwSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_ConnectionInfo
    {
        uint32_t dwProtocol;
        uint32_t aiCipher;
        uint32_t dwCipherStrength;
        uint32_t aiHash;
        uint32_t dwHashStrength;
        uint32_t aiExch;
        uint32_t dwExchStrength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_CipherInfo
    {
        uint32_t dwVersion;
        uint32_t dwProtocol;
        uint32_t dwCipherSuite;
        uint32_t dwBaseCipherSuite;
        uint16_t szCipherSuite[64];
        uint16_t szCipher[64];
        uint32_t dwCipherLen;
        uint32_t dwCipherBlockLen;
        uint16_t szHash[64];
        uint32_t dwHashLen;
        uint16_t szExchange[64];
        uint32_t dwMinExchangeLen;
        uint32_t dwMaxExchangeLen;
        uint16_t szCertificate[64];
        uint32_t dwKeyType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_Bindings
    {
        uint32_t BindingsLength;
        Windows::Win32::Security::SEC_CHANNEL_BINDINGS* Bindings;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct INTERNET_SECURITY_INFO
    {
        uint32_t dwSize;
        Windows::Win32::Security::CERT_CONTEXT* pCertificate;
        Windows::Win32::Security::CERT_CHAIN_CONTEXT* pcCertChain;
        Windows::Win32::Security::SecPkgContext_ConnectionInfo connectionInfo;
        Windows::Win32::Security::SecPkgContext_CipherInfo cipherInfo;
        Windows::Win32::Security::CERT_CHAIN_CONTEXT* pcUnverifiedCertChain;
        Windows::Win32::Security::SecPkgContext_Bindings channelBindingToken;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct INTERNET_SECURITY_CONNECTION_INFO
    {
        uint32_t dwSize;
        Windows::Win32::SystemServices::BOOL fSecure;
        Windows::Win32::Security::SecPkgContext_ConnectionInfo connectionInfo;
        Windows::Win32::Security::SecPkgContext_CipherInfo cipherInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct INTERNET_DOWNLOAD_MODE_HANDLE
    {
        uint16_t* pcwszFileName;
        Windows::Win32::SystemServices::HANDLE* phFile;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct HTTP_REQUEST_TIMES
    {
        uint32_t cTimes;
        uint64_t rgTimes[32];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct INTERNET_SERVER_CONNECTION_STATE
    {
        uint16_t* lpcwszHostName;
        Windows::Win32::SystemServices::BOOL fProxy;
        uint32_t dwCounter;
        uint32_t dwConnectionLimit;
        uint32_t dwAvailableCreates;
        uint32_t dwAvailableKeepAlives;
        uint32_t dwActiveConnections;
        uint32_t dwWaiters;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct INTERNET_END_BROWSER_SESSION_DATA
    {
        void* lpBuffer;
        uint32_t dwBufferLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct INTERNET_CALLBACK_COOKIE
    {
        uint16_t* pcwszName;
        uint16_t* pcwszValue;
        uint16_t* pcwszDomain;
        uint16_t* pcwszPath;
        Windows::Win32::WindowsProgramming::FILETIME ftExpires;
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct INTERNET_CREDENTIALS
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint16_t* lpcwszUserName;
                uint16_t* lpcwszPassword;
            };
            _Anonymous_e__Struct Anonymous;
            void* pAuthIdentityOpaque;
        };
        uint16_t* lpcwszHostName;
        uint32_t dwPort;
        uint32_t dwScheme;
        uint16_t* lpcwszUrl;
        uint16_t* lpcwszRealm;
        Windows::Win32::SystemServices::BOOL fAuthIdentity;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct HTTP_PUSH_WAIT_HANDLE__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct HTTP_PUSH_TRANSPORT_SETTING
    {
        ::win32::guid TransportSettingId;
        ::win32::guid BrokerEventId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct HTTP_PUSH_NOTIFICATION_STATUS
    {
        Windows::Win32::SystemServices::BOOL ChannelStatusValid;
        uint32_t ChannelStatus;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct INTERNET_COOKIE
    {
        uint32_t cbSize;
        int8_t* pszName;
        int8_t* pszData;
        int8_t* pszDomain;
        int8_t* pszPath;
        Windows::Win32::WindowsProgramming::FILETIME* pftExpires;
        uint32_t dwFlags;
        int8_t* pszUrl;
        int8_t* pszP3PPolicy;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct COOKIE_DLG_INFO
    {
        uint16_t* pszServer;
        Windows::Win32::WinInet::INTERNET_COOKIE* pic;
        uint32_t dwStopWarning;
        int32_t cx;
        int32_t cy;
        uint16_t* pszHeader;
        uint32_t dwOperation;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct INTERNET_CACHE_CONFIG_PATH_ENTRYA
    {
        int8_t CachePath[260];
        uint32_t dwCacheSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct INTERNET_CACHE_CONFIG_PATH_ENTRYW
    {
        uint16_t CachePath[260];
        uint32_t dwCacheSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct INTERNET_CACHE_CONFIG_INFOA
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                int8_t CachePath[260];
                uint32_t dwCacheSize;
            };
            _Anonymous_e__Struct Anonymous;
            Windows::Win32::WinInet::INTERNET_CACHE_CONFIG_PATH_ENTRYA CachePaths[1];
        };
        uint32_t dwStructSize;
        uint32_t dwContainer;
        uint32_t dwQuota;
        uint32_t dwReserved4;
        Windows::Win32::SystemServices::BOOL fPerUser;
        uint32_t dwSyncMode;
        uint32_t dwNumCachePaths;
        _Anonymous_e__Union Anonymous;
        uint32_t dwNormalUsage;
        uint32_t dwExemptUsage;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct INTERNET_CACHE_CONFIG_INFOW
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint16_t CachePath[260];
                uint32_t dwCacheSize;
            };
            _Anonymous_e__Struct Anonymous;
            Windows::Win32::WinInet::INTERNET_CACHE_CONFIG_PATH_ENTRYW CachePaths[1];
        };
        uint32_t dwStructSize;
        uint32_t dwContainer;
        uint32_t dwQuota;
        uint32_t dwReserved4;
        Windows::Win32::SystemServices::BOOL fPerUser;
        uint32_t dwSyncMode;
        uint32_t dwNumCachePaths;
        _Anonymous_e__Union Anonymous;
        uint32_t dwNormalUsage;
        uint32_t dwExemptUsage;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct INTERNET_CACHE_CONTAINER_INFOA
    {
        uint32_t dwCacheVersion;
        int8_t* lpszName;
        int8_t* lpszCachePrefix;
        int8_t* lpszVolumeLabel;
        int8_t* lpszVolumeTitle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct INTERNET_CACHE_CONTAINER_INFOW
    {
        uint32_t dwCacheVersion;
        uint16_t* lpszName;
        uint16_t* lpszCachePrefix;
        uint16_t* lpszVolumeLabel;
        uint16_t* lpszVolumeTitle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct APP_CACHE_DOWNLOAD_ENTRY
    {
        uint16_t* pwszUrl;
        uint32_t dwEntryType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct APP_CACHE_DOWNLOAD_LIST
    {
        uint32_t dwEntryCount;
        Windows::Win32::WinInet::APP_CACHE_DOWNLOAD_ENTRY* pEntries;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct APP_CACHE_GROUP_INFO
    {
        uint16_t* pwszManifestUrl;
        Windows::Win32::WindowsProgramming::FILETIME ftLastAccessTime;
        uint64_t ullSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct APP_CACHE_GROUP_LIST
    {
        uint32_t dwAppCacheGroupCount;
        Windows::Win32::WinInet::APP_CACHE_GROUP_INFO* pAppCacheGroups;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct URLCACHE_ENTRY_INFO
    {
        uint16_t* pwszSourceUrlName;
        uint16_t* pwszLocalFileName;
        uint32_t dwCacheEntryType;
        uint32_t dwUseCount;
        uint32_t dwHitRate;
        uint32_t dwSizeLow;
        uint32_t dwSizeHigh;
        Windows::Win32::WindowsProgramming::FILETIME ftLastModifiedTime;
        Windows::Win32::WindowsProgramming::FILETIME ftExpireTime;
        Windows::Win32::WindowsProgramming::FILETIME ftLastAccessTime;
        Windows::Win32::WindowsProgramming::FILETIME ftLastSyncTime;
        uint8_t* pbHeaderInfo;
        uint32_t cbHeaderInfoSize;
        uint8_t* pbExtraData;
        uint32_t cbExtraDataSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct WININET_PROXY_INFO
    {
        Windows::Win32::SystemServices::BOOL fProxy;
        Windows::Win32::SystemServices::BOOL fBypass;
        Windows::Win32::WinInet::INTERNET_SCHEME ProxyScheme;
        uint16_t* pwszProxy;
        uint16_t ProxyPort;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct WININET_PROXY_INFO_LIST
    {
        uint32_t dwProxyInfoCount;
        Windows::Win32::WinInet::WININET_PROXY_INFO* pProxyInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct HTTP_WEB_SOCKET_ASYNC_RESULT
    {
        Windows::Win32::WinInet::INTERNET_ASYNC_RESULT AsyncResult;
        Windows::Win32::WinInet::HTTP_WEB_SOCKET_OPERATION Operation;
        Windows::Win32::WinInet::HTTP_WEB_SOCKET_BUFFER_TYPE BufferType;
        uint32_t dwBytesTransferred;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinInet
{
    struct ProofOfPossessionCookieInfo
    {
        uint16_t* name;
        uint16_t* data;
        uint32_t flags;
        uint16_t* p3pHeader;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAccessibility
{
    struct MSAAMENUINFO
    {
        uint32_t dwMSAASignature;
        uint32_t cchWText;
        uint16_t* pszWText;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAccessibility
{
    struct UiaRect
    {
        double left;
        double top;
        double width;
        double height;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAccessibility
{
    struct UiaPoint
    {
        double x;
        double y;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAccessibility
{
    struct UiaChangeInfo
    {
        int32_t uiaId;
        Windows::Win32::Automation::VARIANT payload;
        Windows::Win32::Automation::VARIANT extraInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAccessibility
{
    struct UIAutomationParameter
    {
        Windows::Win32::WindowsAccessibility::UIAutomationType type;
        void* pData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAccessibility
{
    struct UIAutomationPropertyInfo
    {
        ::win32::guid guid;
        uint16_t* pProgrammaticName;
        Windows::Win32::WindowsAccessibility::UIAutomationType type;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAccessibility
{
    struct UIAutomationEventInfo
    {
        ::win32::guid guid;
        uint16_t* pProgrammaticName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAccessibility
{
    struct UIAutomationMethodInfo
    {
        uint16_t* pProgrammaticName;
        Windows::Win32::SystemServices::BOOL doSetFocus;
        uint32_t cInParameters;
        uint32_t cOutParameters;
        Windows::Win32::WindowsAccessibility::UIAutomationType* pParameterTypes;
        uint16_t** pParameterNames;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAccessibility
{
    struct UIAutomationPatternInfo
    {
        ::win32::guid guid;
        uint16_t* pProgrammaticName;
        ::win32::guid providerInterfaceId;
        ::win32::guid clientInterfaceId;
        uint32_t cProperties;
        Windows::Win32::WindowsAccessibility::UIAutomationPropertyInfo* pProperties;
        uint32_t cMethods;
        Windows::Win32::WindowsAccessibility::UIAutomationMethodInfo* pMethods;
        uint32_t cEvents;
        Windows::Win32::WindowsAccessibility::UIAutomationEventInfo* pEvents;
        Windows::Win32::WindowsAccessibility::IUIAutomationPatternHandler* pPatternHandler;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAccessibility
{
    struct HUIANODE__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAccessibility
{
    struct HUIAPATTERNOBJECT__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAccessibility
{
    struct HUIATEXTRANGE__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAccessibility
{
    struct HUIAEVENT__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAccessibility
{
    struct UiaCondition
    {
        Windows::Win32::WindowsAccessibility::ConditionType ConditionType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAccessibility
{
    struct UiaPropertyCondition
    {
        Windows::Win32::WindowsAccessibility::ConditionType ConditionType;
        int32_t PropertyId;
        Windows::Win32::Automation::VARIANT Value;
        Windows::Win32::WindowsAccessibility::PropertyConditionFlags Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAccessibility
{
    struct UiaAndOrCondition
    {
        Windows::Win32::WindowsAccessibility::ConditionType ConditionType;
        Windows::Win32::WindowsAccessibility::UiaCondition** ppConditions;
        int32_t cConditions;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAccessibility
{
    struct UiaNotCondition
    {
        Windows::Win32::WindowsAccessibility::ConditionType ConditionType;
        Windows::Win32::WindowsAccessibility::UiaCondition* pCondition;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAccessibility
{
    struct UiaCacheRequest
    {
        Windows::Win32::WindowsAccessibility::UiaCondition* pViewCondition;
        Windows::Win32::WindowsAccessibility::TreeScope Scope;
        int32_t* pProperties;
        int32_t cProperties;
        int32_t* pPatterns;
        int32_t cPatterns;
        Windows::Win32::WindowsAccessibility::AutomationElementMode automationElementMode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAccessibility
{
    struct UiaFindParams
    {
        int32_t MaxDepth;
        Windows::Win32::SystemServices::BOOL FindFirst;
        Windows::Win32::SystemServices::BOOL ExcludeRoot;
        Windows::Win32::WindowsAccessibility::UiaCondition* pFindCondition;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAccessibility
{
    struct UiaEventArgs
    {
        Windows::Win32::WindowsAccessibility::EventArgsType Type;
        int32_t EventId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAccessibility
{
    struct UiaPropertyChangedEventArgs
    {
        Windows::Win32::WindowsAccessibility::EventArgsType Type;
        int32_t EventId;
        int32_t PropertyId;
        Windows::Win32::Automation::VARIANT OldValue;
        Windows::Win32::Automation::VARIANT NewValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAccessibility
{
    struct UiaStructureChangedEventArgs
    {
        Windows::Win32::WindowsAccessibility::EventArgsType Type;
        int32_t EventId;
        Windows::Win32::WindowsAccessibility::StructureChangeType StructureChangeType;
        int32_t* pRuntimeId;
        int32_t cRuntimeIdLen;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAccessibility
{
    struct UiaTextEditTextChangedEventArgs
    {
        Windows::Win32::WindowsAccessibility::EventArgsType Type;
        int32_t EventId;
        Windows::Win32::WindowsAccessibility::TextEditChangeType TextEditChangeType;
        Windows::Win32::Automation::SAFEARRAY* pTextChange;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAccessibility
{
    struct UiaChangesEventArgs
    {
        Windows::Win32::WindowsAccessibility::EventArgsType Type;
        int32_t EventId;
        int32_t EventIdCount;
        Windows::Win32::WindowsAccessibility::UiaChangeInfo* pUiaChanges;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAccessibility
{
    struct UiaAsyncContentLoadedEventArgs
    {
        Windows::Win32::WindowsAccessibility::EventArgsType Type;
        int32_t EventId;
        Windows::Win32::WindowsAccessibility::AsyncContentLoadedState AsyncContentLoadedState;
        double PercentComplete;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAccessibility
{
    struct UiaWindowClosedEventArgs
    {
        Windows::Win32::WindowsAccessibility::EventArgsType Type;
        int32_t EventId;
        int32_t* pRuntimeId;
        int32_t cRuntimeIdLen;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAccessibility
{
    struct ExtendedProperty
    {
        Windows::Win32::Automation::BSTR PropertyName;
        Windows::Win32::Automation::BSTR PropertyValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CMS_KEY_INFO
    {
        uint32_t dwVersion;
        uint32_t Algid;
        uint8_t* pbOID;
        uint32_t cbOID;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct HMAC_Info
    {
        uint32_t HashAlgid;
        uint8_t* pbInnerString;
        uint32_t cbInnerString;
        uint8_t* pbOuterString;
        uint32_t cbOuterString;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SCHANNEL_ALG
    {
        uint32_t dwUse;
        uint32_t Algid;
        uint32_t cBits;
        uint32_t dwFlags;
        uint32_t dwReserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct PROV_ENUMALGS
    {
        uint32_t aiAlgid;
        uint32_t dwBitLen;
        uint32_t dwNameLen;
        int8_t szName[20];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct PROV_ENUMALGS_EX
    {
        uint32_t aiAlgid;
        uint32_t dwDefaultLen;
        uint32_t dwMinLen;
        uint32_t dwMaxLen;
        uint32_t dwProtocols;
        uint32_t dwNameLen;
        int8_t szName[20];
        uint32_t dwLongNameLen;
        int8_t szLongName[40];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct PUBLICKEYSTRUC
    {
        uint8_t bType;
        uint8_t bVersion;
        uint16_t reserved;
        uint32_t aiKeyAlg;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct RSAPUBKEY
    {
        uint32_t magic;
        uint32_t bitlen;
        uint32_t pubexp;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct PUBKEY
    {
        uint32_t magic;
        uint32_t bitlen;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct DSSSEED
    {
        uint32_t counter;
        uint8_t seed[20];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct PUBKEYVER3
    {
        uint32_t magic;
        uint32_t bitlenP;
        uint32_t bitlenQ;
        uint32_t bitlenJ;
        Windows::Win32::Security::DSSSEED DSSSeed;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct PRIVKEYVER3
    {
        uint32_t magic;
        uint32_t bitlenP;
        uint32_t bitlenQ;
        uint32_t bitlenJ;
        uint32_t bitlenX;
        Windows::Win32::Security::DSSSEED DSSSeed;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KEY_TYPE_SUBTYPE
    {
        uint32_t dwKeySpec;
        ::win32::guid Type;
        ::win32::guid Subtype;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_FORTEZZA_DATA_PROP
    {
        uint8_t SerialNumber[8];
        int32_t CertIndex;
        uint8_t CertLabel[36];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_RC4_KEY_STATE
    {
        uint8_t Key[16];
        uint8_t SBox[256];
        uint8_t i;
        uint8_t j;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_DES_KEY_STATE
    {
        uint8_t Key[8];
        uint8_t IV[8];
        uint8_t Feedback[8];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_3DES_KEY_STATE
    {
        uint8_t Key[24];
        uint8_t IV[8];
        uint8_t Feedback[8];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_AES_128_KEY_STATE
    {
        uint8_t Key[16];
        uint8_t IV[16];
        uint8_t EncryptionState[176];
        uint8_t DecryptionState[176];
        uint8_t Feedback[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_AES_256_KEY_STATE
    {
        uint8_t Key[32];
        uint8_t IV[16];
        uint8_t EncryptionState[240];
        uint8_t DecryptionState[240];
        uint8_t Feedback[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CMS_DH_KEY_INFO
    {
        uint32_t dwVersion;
        uint32_t Algid;
        int8_t* pszContentEncObjId;
        Windows::Win32::Security::CRYPTOAPI_BLOB PubInfo;
        void* pReserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct BCRYPT_KEY_LENGTHS_STRUCT
    {
        uint32_t dwMinLength;
        uint32_t dwMaxLength;
        uint32_t dwIncrement;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct BCRYPT_OID
    {
        uint32_t cbOID;
        uint8_t* pbOID;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct BCRYPT_OID_LIST
    {
        uint32_t dwOIDCount;
        Windows::Win32::Security::BCRYPT_OID* pOIDs;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct BCRYPT_PKCS1_PADDING_INFO
    {
        uint16_t* pszAlgId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct BCRYPT_PSS_PADDING_INFO
    {
        uint16_t* pszAlgId;
        uint32_t cbSalt;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct BCRYPT_OAEP_PADDING_INFO
    {
        uint16_t* pszAlgId;
        uint8_t* pbLabel;
        uint32_t cbLabel;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO
    {
        uint32_t cbSize;
        uint32_t dwInfoVersion;
        uint8_t* pbNonce;
        uint32_t cbNonce;
        uint8_t* pbAuthData;
        uint32_t cbAuthData;
        uint8_t* pbTag;
        uint32_t cbTag;
        uint8_t* pbMacContext;
        uint32_t cbMacContext;
        uint32_t cbAAD;
        uint64_t cbData;
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct BCryptBuffer
    {
        uint32_t cbBuffer;
        uint32_t BufferType;
        void* pvBuffer;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct BCryptBufferDesc
    {
        uint32_t ulVersion;
        uint32_t cBuffers;
        Windows::Win32::Security::BCryptBuffer* pBuffers;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct BCRYPT_KEY_BLOB
    {
        uint32_t Magic;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct BCRYPT_RSAKEY_BLOB
    {
        uint32_t Magic;
        uint32_t BitLength;
        uint32_t cbPublicExp;
        uint32_t cbModulus;
        uint32_t cbPrime1;
        uint32_t cbPrime2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct BCRYPT_ECCKEY_BLOB
    {
        uint32_t dwMagic;
        uint32_t cbKey;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SSL_ECCKEY_BLOB
    {
        uint32_t dwCurveType;
        uint32_t cbKey;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct BCRYPT_ECCFULLKEY_BLOB
    {
        uint32_t dwMagic;
        uint32_t dwVersion;
        Windows::Win32::Security::ECC_CURVE_TYPE_ENUM dwCurveType;
        Windows::Win32::Security::ECC_CURVE_ALG_ID_ENUM dwCurveGenerationAlgId;
        uint32_t cbFieldLength;
        uint32_t cbSubgroupOrder;
        uint32_t cbCofactor;
        uint32_t cbSeed;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct BCRYPT_DH_KEY_BLOB
    {
        uint32_t dwMagic;
        uint32_t cbKey;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct BCRYPT_DH_PARAMETER_HEADER
    {
        uint32_t cbLength;
        uint32_t dwMagic;
        uint32_t cbKeyLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct BCRYPT_DSA_KEY_BLOB
    {
        uint32_t dwMagic;
        uint32_t cbKey;
        uint8_t Count[4];
        uint8_t Seed[20];
        uint8_t q[20];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct BCRYPT_DSA_KEY_BLOB_V2
    {
        uint32_t dwMagic;
        uint32_t cbKey;
        Windows::Win32::Security::HASHALGORITHM_ENUM hashAlgorithm;
        Windows::Win32::Security::DSAFIPSVERSION_ENUM standardVersion;
        uint32_t cbSeedLength;
        uint32_t cbGroupSize;
        uint8_t Count[4];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct BCRYPT_KEY_DATA_BLOB_HEADER
    {
        uint32_t dwMagic;
        uint32_t dwVersion;
        uint32_t cbKeyData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct BCRYPT_DSA_PARAMETER_HEADER
    {
        uint32_t cbLength;
        uint32_t dwMagic;
        uint32_t cbKeyLength;
        uint8_t Count[4];
        uint8_t Seed[20];
        uint8_t q[20];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct BCRYPT_DSA_PARAMETER_HEADER_V2
    {
        uint32_t cbLength;
        uint32_t dwMagic;
        uint32_t cbKeyLength;
        Windows::Win32::Security::HASHALGORITHM_ENUM hashAlgorithm;
        Windows::Win32::Security::DSAFIPSVERSION_ENUM standardVersion;
        uint32_t cbSeedLength;
        uint32_t cbGroupSize;
        uint8_t Count[4];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct BCRYPT_ECC_CURVE_NAMES
    {
        uint32_t dwEccCurveNames;
        uint16_t** pEccCurveNames;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct BCRYPT_MULTI_HASH_OPERATION
    {
        uint32_t iHash;
        Windows::Win32::Security::BCRYPT_HASH_OPERATION_TYPE hashOperation;
        uint8_t* pbBuffer;
        uint32_t cbBuffer;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct BCRYPT_MULTI_OBJECT_LENGTH_STRUCT
    {
        uint32_t cbPerObject;
        uint32_t cbPerElement;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct BCRYPT_ALGORITHM_IDENTIFIER
    {
        uint16_t* pszName;
        uint32_t dwClass;
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct BCRYPT_PROVIDER_NAME
    {
        uint16_t* pszProviderName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct BCRYPT_INTERFACE_VERSION
    {
        uint16_t MajorVersion;
        uint16_t MinorVersion;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_INTERFACE_REG
    {
        uint32_t dwInterface;
        uint32_t dwFlags;
        uint32_t cFunctions;
        uint16_t** rgpszFunctions;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_IMAGE_REG
    {
        uint16_t* pszImage;
        uint32_t cInterfaces;
        Windows::Win32::Security::CRYPT_INTERFACE_REG** rgpInterfaces;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_PROVIDER_REG
    {
        uint32_t cAliases;
        uint16_t** rgpszAliases;
        Windows::Win32::Security::CRYPT_IMAGE_REG* pUM;
        Windows::Win32::Security::CRYPT_IMAGE_REG* pKM;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_PROVIDERS
    {
        uint32_t cProviders;
        uint16_t** rgpszProviders;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_CONTEXT_CONFIG
    {
        uint32_t dwFlags;
        uint32_t dwReserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_CONTEXT_FUNCTION_CONFIG
    {
        uint32_t dwFlags;
        uint32_t dwReserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_CONTEXTS
    {
        uint32_t cContexts;
        uint16_t** rgpszContexts;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_CONTEXT_FUNCTIONS
    {
        uint32_t cFunctions;
        uint16_t** rgpszFunctions;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_CONTEXT_FUNCTION_PROVIDERS
    {
        uint32_t cProviders;
        uint16_t** rgpszProviders;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_PROPERTY_REF
    {
        uint16_t* pszProperty;
        uint32_t cbValue;
        uint8_t* pbValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_IMAGE_REF
    {
        uint16_t* pszImage;
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_PROVIDER_REF
    {
        uint32_t dwInterface;
        uint16_t* pszFunction;
        uint16_t* pszProvider;
        uint32_t cProperties;
        Windows::Win32::Security::CRYPT_PROPERTY_REF** rgpProperties;
        Windows::Win32::Security::CRYPT_IMAGE_REF* pUM;
        Windows::Win32::Security::CRYPT_IMAGE_REF* pKM;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_PROVIDER_REFS
    {
        uint32_t cProviders;
        Windows::Win32::Security::CRYPT_PROVIDER_REF** rgpProviders;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct NCRYPT_ALLOC_PARA
    {
        uint32_t cbSize;
        Windows::Win32::Security::PFN_NCRYPT_ALLOC* pfnAlloc;
        Windows::Win32::Security::PFN_NCRYPT_FREE* pfnFree;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct NCRYPT_CIPHER_PADDING_INFO
    {
        uint32_t cbSize;
        uint32_t dwFlags;
        uint8_t* pbIV;
        uint32_t cbIV;
        uint8_t* pbOtherInfo;
        uint32_t cbOtherInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct NCRYPT_PLATFORM_ATTEST_PADDING_INFO
    {
        uint32_t magic;
        uint32_t pcrMask;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct NCRYPT_KEY_ATTEST_PADDING_INFO
    {
        uint32_t magic;
        uint8_t* pbKeyBlob;
        uint32_t cbKeyBlob;
        uint8_t* pbKeyAuth;
        uint32_t cbKeyAuth;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES
    {
        uint32_t Version;
        uint32_t Flags;
        uint32_t cbPublicKeyBlob;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct NCRYPT_VSM_KEY_ATTESTATION_STATEMENT
    {
        uint32_t Magic;
        uint32_t Version;
        uint32_t cbSignature;
        uint32_t cbReport;
        uint32_t cbAttributes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS
    {
        uint32_t Version;
        uint64_t TrustletId;
        uint32_t MinSvn;
        uint32_t FlagsMask;
        uint32_t FlagsExpected;
        uint32_t _bitfield;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct NCRYPT_EXPORTED_ISOLATED_KEY_HEADER
    {
        uint32_t Version;
        uint32_t KeyUsage;
        uint32_t _bitfield;
        uint32_t cbAlgName;
        uint32_t cbNonce;
        uint32_t cbAuthTag;
        uint32_t cbWrappingKey;
        uint32_t cbIsolatedKey;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct NCRYPT_EXPORTED_ISOLATED_KEY_ENVELOPE
    {
        Windows::Win32::Security::NCRYPT_EXPORTED_ISOLATED_KEY_HEADER Header;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT
    {
        uint32_t Magic;
        uint32_t Version;
        uint32_t HeaderSize;
        uint32_t cbCertifyInfo;
        uint32_t cbSignature;
        uint32_t cbTpmPublic;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT
    {
        uint32_t Magic;
        uint32_t Version;
        uint32_t pcrAlg;
        uint32_t cbSignature;
        uint32_t cbQuote;
        uint32_t cbPcrs;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct NCryptAlgorithmName
    {
        uint16_t* pszName;
        uint32_t dwClass;
        uint32_t dwAlgOperations;
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct NCryptKeyName
    {
        uint16_t* pszName;
        uint16_t* pszAlgid;
        uint32_t dwLegacyKeySpec;
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct NCryptProviderName
    {
        uint16_t* pszName;
        uint16_t* pszComment;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct NCRYPT_UI_POLICY
    {
        uint32_t dwVersion;
        uint32_t dwFlags;
        uint16_t* pszCreationTitle;
        uint16_t* pszFriendlyName;
        uint16_t* pszDescription;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct __NCRYPT_KEY_ACCESS_POLICY_BLOB
    {
        uint32_t dwVersion;
        uint32_t dwPolicyFlags;
        uint32_t cbUserSid;
        uint32_t cbApplicationSid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct NCRYPT_SUPPORTED_LENGTHS
    {
        uint32_t dwMinLength;
        uint32_t dwMaxLength;
        uint32_t dwIncrement;
        uint32_t dwDefaultLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct __NCRYPT_PCP_HMAC_AUTH_SIGNATURE_INFO
    {
        uint32_t dwVersion;
        int32_t iExpiration;
        uint8_t pabNonce[32];
        uint8_t pabPolicyRef[32];
        uint8_t pabHMAC[32];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct __NCRYPT_PCP_TPM_FW_VERSION_INFO
    {
        uint16_t major1;
        uint16_t major2;
        uint16_t minor1;
        uint16_t minor2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct __NCRYPT_PCP_RAW_POLICYDIGEST
    {
        uint32_t dwVersion;
        uint32_t cbDigest;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct NCRYPT_KEY_BLOB_HEADER
    {
        uint32_t cbSize;
        uint32_t dwMagic;
        uint32_t cbAlgName;
        uint32_t cbKeyData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER
    {
        uint32_t magic;
        uint32_t cbHeader;
        uint32_t cbPublic;
        uint32_t cbPrivate;
        uint32_t cbName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_BIT_BLOB
    {
        uint32_t cbData;
        uint8_t* pbData;
        uint32_t cUnusedBits;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_ALGORITHM_IDENTIFIER
    {
        int8_t* pszObjId;
        Windows::Win32::Security::CRYPTOAPI_BLOB Parameters;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_OBJID_TABLE
    {
        uint32_t dwAlgId;
        int8_t* pszObjId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_HASH_INFO
    {
        Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
        Windows::Win32::Security::CRYPTOAPI_BLOB Hash;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_EXTENSION
    {
        int8_t* pszObjId;
        Windows::Win32::SystemServices::BOOL fCritical;
        Windows::Win32::Security::CRYPTOAPI_BLOB Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_ATTRIBUTE_TYPE_VALUE
    {
        int8_t* pszObjId;
        Windows::Win32::Security::CRYPTOAPI_BLOB Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_ATTRIBUTE
    {
        int8_t* pszObjId;
        uint32_t cValue;
        Windows::Win32::Security::CRYPTOAPI_BLOB* rgValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_ATTRIBUTES
    {
        uint32_t cAttr;
        Windows::Win32::Security::CRYPT_ATTRIBUTE* rgAttr;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_RDN_ATTR
    {
        int8_t* pszObjId;
        uint32_t dwValueType;
        Windows::Win32::Security::CRYPTOAPI_BLOB Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_RDN
    {
        uint32_t cRDNAttr;
        Windows::Win32::Security::CERT_RDN_ATTR* rgRDNAttr;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_NAME_INFO
    {
        uint32_t cRDN;
        Windows::Win32::Security::CERT_RDN* rgRDN;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_NAME_VALUE
    {
        uint32_t dwValueType;
        Windows::Win32::Security::CRYPTOAPI_BLOB Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_PUBLIC_KEY_INFO
    {
        Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER Algorithm;
        Windows::Win32::Security::CRYPT_BIT_BLOB PublicKey;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_ECC_PRIVATE_KEY_INFO
    {
        uint32_t dwVersion;
        Windows::Win32::Security::CRYPTOAPI_BLOB PrivateKey;
        int8_t* szCurveOid;
        Windows::Win32::Security::CRYPT_BIT_BLOB PublicKey;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_PRIVATE_KEY_INFO
    {
        uint32_t Version;
        Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER Algorithm;
        Windows::Win32::Security::CRYPTOAPI_BLOB PrivateKey;
        Windows::Win32::Security::CRYPT_ATTRIBUTES* pAttributes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_ENCRYPTED_PRIVATE_KEY_INFO
    {
        Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER EncryptionAlgorithm;
        Windows::Win32::Security::CRYPTOAPI_BLOB EncryptedPrivateKey;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_PKCS8_IMPORT_PARAMS
    {
        Windows::Win32::Security::CRYPTOAPI_BLOB PrivateKey;
        Windows::Win32::Security::PCRYPT_RESOLVE_HCRYPTPROV_FUNC* pResolvehCryptProvFunc;
        void* pVoidResolveFunc;
        Windows::Win32::Security::PCRYPT_DECRYPT_PRIVATE_KEY_FUNC* pDecryptPrivateKeyFunc;
        void* pVoidDecryptFunc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_PKCS8_EXPORT_PARAMS
    {
        size_t hCryptProv;
        uint32_t dwKeySpec;
        int8_t* pszPrivateKeyObjId;
        Windows::Win32::Security::PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC* pEncryptPrivateKeyFunc;
        void* pVoidEncryptFunc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_INFO
    {
        uint32_t dwVersion;
        Windows::Win32::Security::CRYPTOAPI_BLOB SerialNumber;
        Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
        Windows::Win32::Security::CRYPTOAPI_BLOB Issuer;
        Windows::Win32::WindowsProgramming::FILETIME NotBefore;
        Windows::Win32::WindowsProgramming::FILETIME NotAfter;
        Windows::Win32::Security::CRYPTOAPI_BLOB Subject;
        Windows::Win32::Security::CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;
        Windows::Win32::Security::CRYPT_BIT_BLOB IssuerUniqueId;
        Windows::Win32::Security::CRYPT_BIT_BLOB SubjectUniqueId;
        uint32_t cExtension;
        Windows::Win32::Security::CERT_EXTENSION* rgExtension;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRL_ENTRY
    {
        Windows::Win32::Security::CRYPTOAPI_BLOB SerialNumber;
        Windows::Win32::WindowsProgramming::FILETIME RevocationDate;
        uint32_t cExtension;
        Windows::Win32::Security::CERT_EXTENSION* rgExtension;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRL_INFO
    {
        uint32_t dwVersion;
        Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
        Windows::Win32::Security::CRYPTOAPI_BLOB Issuer;
        Windows::Win32::WindowsProgramming::FILETIME ThisUpdate;
        Windows::Win32::WindowsProgramming::FILETIME NextUpdate;
        uint32_t cCRLEntry;
        Windows::Win32::Security::CRL_ENTRY* rgCRLEntry;
        uint32_t cExtension;
        Windows::Win32::Security::CERT_EXTENSION* rgExtension;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_OR_CRL_BLOB
    {
        uint32_t dwChoice;
        uint32_t cbEncoded;
        uint8_t* pbEncoded;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_OR_CRL_BUNDLE
    {
        uint32_t cItem;
        Windows::Win32::Security::CERT_OR_CRL_BLOB* rgItem;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_REQUEST_INFO
    {
        uint32_t dwVersion;
        Windows::Win32::Security::CRYPTOAPI_BLOB Subject;
        Windows::Win32::Security::CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;
        uint32_t cAttribute;
        Windows::Win32::Security::CRYPT_ATTRIBUTE* rgAttribute;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_KEYGEN_REQUEST_INFO
    {
        uint32_t dwVersion;
        Windows::Win32::Security::CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;
        uint16_t* pwszChallengeString;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_SIGNED_CONTENT_INFO
    {
        Windows::Win32::Security::CRYPTOAPI_BLOB ToBeSigned;
        Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
        Windows::Win32::Security::CRYPT_BIT_BLOB Signature;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CTL_USAGE
    {
        uint32_t cUsageIdentifier;
        int8_t** rgpszUsageIdentifier;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CTL_ENTRY
    {
        Windows::Win32::Security::CRYPTOAPI_BLOB SubjectIdentifier;
        uint32_t cAttribute;
        Windows::Win32::Security::CRYPT_ATTRIBUTE* rgAttribute;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CTL_INFO
    {
        uint32_t dwVersion;
        Windows::Win32::Security::CTL_USAGE SubjectUsage;
        Windows::Win32::Security::CRYPTOAPI_BLOB ListIdentifier;
        Windows::Win32::Security::CRYPTOAPI_BLOB SequenceNumber;
        Windows::Win32::WindowsProgramming::FILETIME ThisUpdate;
        Windows::Win32::WindowsProgramming::FILETIME NextUpdate;
        Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER SubjectAlgorithm;
        uint32_t cCTLEntry;
        Windows::Win32::Security::CTL_ENTRY* rgCTLEntry;
        uint32_t cExtension;
        Windows::Win32::Security::CERT_EXTENSION* rgExtension;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_TIME_STAMP_REQUEST_INFO
    {
        int8_t* pszTimeStampAlgorithm;
        int8_t* pszContentType;
        Windows::Win32::Security::CRYPTOAPI_BLOB Content;
        uint32_t cAttribute;
        Windows::Win32::Security::CRYPT_ATTRIBUTE* rgAttribute;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_ENROLLMENT_NAME_VALUE_PAIR
    {
        uint16_t* pwszName;
        uint16_t* pwszValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_CSP_PROVIDER
    {
        uint32_t dwKeySpec;
        uint16_t* pwszProviderName;
        Windows::Win32::Security::CRYPT_BIT_BLOB Signature;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_ENCODE_PARA
    {
        uint32_t cbSize;
        Windows::Win32::Security::PFN_CRYPT_ALLOC* pfnAlloc;
        Windows::Win32::Security::PFN_CRYPT_FREE* pfnFree;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_DECODE_PARA
    {
        uint32_t cbSize;
        Windows::Win32::Security::PFN_CRYPT_ALLOC* pfnAlloc;
        Windows::Win32::Security::PFN_CRYPT_FREE* pfnFree;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_EXTENSIONS
    {
        uint32_t cExtension;
        Windows::Win32::Security::CERT_EXTENSION* rgExtension;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_AUTHORITY_KEY_ID_INFO
    {
        Windows::Win32::Security::CRYPTOAPI_BLOB KeyId;
        Windows::Win32::Security::CRYPTOAPI_BLOB CertIssuer;
        Windows::Win32::Security::CRYPTOAPI_BLOB CertSerialNumber;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_PRIVATE_KEY_VALIDITY
    {
        Windows::Win32::WindowsProgramming::FILETIME NotBefore;
        Windows::Win32::WindowsProgramming::FILETIME NotAfter;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_KEY_ATTRIBUTES_INFO
    {
        Windows::Win32::Security::CRYPTOAPI_BLOB KeyId;
        Windows::Win32::Security::CRYPT_BIT_BLOB IntendedKeyUsage;
        Windows::Win32::Security::CERT_PRIVATE_KEY_VALIDITY* pPrivateKeyUsagePeriod;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_POLICY_ID
    {
        uint32_t cCertPolicyElementId;
        int8_t** rgpszCertPolicyElementId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_KEY_USAGE_RESTRICTION_INFO
    {
        uint32_t cCertPolicyId;
        Windows::Win32::Security::CERT_POLICY_ID* rgCertPolicyId;
        Windows::Win32::Security::CRYPT_BIT_BLOB RestrictedKeyUsage;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_OTHER_NAME
    {
        int8_t* pszObjId;
        Windows::Win32::Security::CRYPTOAPI_BLOB Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_ALT_NAME_ENTRY
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::Security::CERT_OTHER_NAME* pOtherName;
            uint16_t* pwszRfc822Name;
            uint16_t* pwszDNSName;
            Windows::Win32::Security::CRYPTOAPI_BLOB DirectoryName;
            uint16_t* pwszURL;
            Windows::Win32::Security::CRYPTOAPI_BLOB IPAddress;
            int8_t* pszRegisteredID;
        };
        uint32_t dwAltNameChoice;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_ALT_NAME_INFO
    {
        uint32_t cAltEntry;
        Windows::Win32::Security::CERT_ALT_NAME_ENTRY* rgAltEntry;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_BASIC_CONSTRAINTS_INFO
    {
        Windows::Win32::Security::CRYPT_BIT_BLOB SubjectType;
        Windows::Win32::SystemServices::BOOL fPathLenConstraint;
        uint32_t dwPathLenConstraint;
        uint32_t cSubtreesConstraint;
        Windows::Win32::Security::CRYPTOAPI_BLOB* rgSubtreesConstraint;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_BASIC_CONSTRAINTS2_INFO
    {
        Windows::Win32::SystemServices::BOOL fCA;
        Windows::Win32::SystemServices::BOOL fPathLenConstraint;
        uint32_t dwPathLenConstraint;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_POLICY_QUALIFIER_INFO
    {
        int8_t* pszPolicyQualifierId;
        Windows::Win32::Security::CRYPTOAPI_BLOB Qualifier;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_POLICY_INFO
    {
        int8_t* pszPolicyIdentifier;
        uint32_t cPolicyQualifier;
        Windows::Win32::Security::CERT_POLICY_QUALIFIER_INFO* rgPolicyQualifier;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_POLICIES_INFO
    {
        uint32_t cPolicyInfo;
        Windows::Win32::Security::CERT_POLICY_INFO* rgPolicyInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_POLICY_QUALIFIER_NOTICE_REFERENCE
    {
        int8_t* pszOrganization;
        uint32_t cNoticeNumbers;
        int32_t* rgNoticeNumbers;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_POLICY_QUALIFIER_USER_NOTICE
    {
        Windows::Win32::Security::CERT_POLICY_QUALIFIER_NOTICE_REFERENCE* pNoticeReference;
        uint16_t* pszDisplayText;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CPS_URLS
    {
        uint16_t* pszURL;
        Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER* pAlgorithm;
        Windows::Win32::Security::CRYPTOAPI_BLOB* pDigest;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_POLICY95_QUALIFIER1
    {
        uint16_t* pszPracticesReference;
        int8_t* pszNoticeIdentifier;
        int8_t* pszNSINoticeIdentifier;
        uint32_t cCPSURLs;
        Windows::Win32::Security::CPS_URLS* rgCPSURLs;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_POLICY_MAPPING
    {
        int8_t* pszIssuerDomainPolicy;
        int8_t* pszSubjectDomainPolicy;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_POLICY_MAPPINGS_INFO
    {
        uint32_t cPolicyMapping;
        Windows::Win32::Security::CERT_POLICY_MAPPING* rgPolicyMapping;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_POLICY_CONSTRAINTS_INFO
    {
        Windows::Win32::SystemServices::BOOL fRequireExplicitPolicy;
        uint32_t dwRequireExplicitPolicySkipCerts;
        Windows::Win32::SystemServices::BOOL fInhibitPolicyMapping;
        uint32_t dwInhibitPolicyMappingSkipCerts;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY
    {
        int8_t* pszObjId;
        uint32_t cValue;
        Windows::Win32::Security::CRYPTOAPI_BLOB* rgValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_CONTENT_INFO
    {
        int8_t* pszObjId;
        Windows::Win32::Security::CRYPTOAPI_BLOB Content;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_SEQUENCE_OF_ANY
    {
        uint32_t cValue;
        Windows::Win32::Security::CRYPTOAPI_BLOB* rgValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_AUTHORITY_KEY_ID2_INFO
    {
        Windows::Win32::Security::CRYPTOAPI_BLOB KeyId;
        Windows::Win32::Security::CERT_ALT_NAME_INFO AuthorityCertIssuer;
        Windows::Win32::Security::CRYPTOAPI_BLOB AuthorityCertSerialNumber;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_ACCESS_DESCRIPTION
    {
        int8_t* pszAccessMethod;
        Windows::Win32::Security::CERT_ALT_NAME_ENTRY AccessLocation;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_AUTHORITY_INFO_ACCESS
    {
        uint32_t cAccDescr;
        Windows::Win32::Security::CERT_ACCESS_DESCRIPTION* rgAccDescr;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRL_DIST_POINT_NAME
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::Security::CERT_ALT_NAME_INFO FullName;
        };
        uint32_t dwDistPointNameChoice;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRL_DIST_POINT
    {
        Windows::Win32::Security::CRL_DIST_POINT_NAME DistPointName;
        Windows::Win32::Security::CRYPT_BIT_BLOB ReasonFlags;
        Windows::Win32::Security::CERT_ALT_NAME_INFO CRLIssuer;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRL_DIST_POINTS_INFO
    {
        uint32_t cDistPoint;
        Windows::Win32::Security::CRL_DIST_POINT* rgDistPoint;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CROSS_CERT_DIST_POINTS_INFO
    {
        uint32_t dwSyncDeltaTime;
        uint32_t cDistPoint;
        Windows::Win32::Security::CERT_ALT_NAME_INFO* rgDistPoint;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_PAIR
    {
        Windows::Win32::Security::CRYPTOAPI_BLOB Forward;
        Windows::Win32::Security::CRYPTOAPI_BLOB Reverse;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRL_ISSUING_DIST_POINT
    {
        Windows::Win32::Security::CRL_DIST_POINT_NAME DistPointName;
        Windows::Win32::SystemServices::BOOL fOnlyContainsUserCerts;
        Windows::Win32::SystemServices::BOOL fOnlyContainsCACerts;
        Windows::Win32::Security::CRYPT_BIT_BLOB OnlySomeReasonFlags;
        Windows::Win32::SystemServices::BOOL fIndirectCRL;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_GENERAL_SUBTREE
    {
        Windows::Win32::Security::CERT_ALT_NAME_ENTRY Base;
        uint32_t dwMinimum;
        Windows::Win32::SystemServices::BOOL fMaximum;
        uint32_t dwMaximum;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_NAME_CONSTRAINTS_INFO
    {
        uint32_t cPermittedSubtree;
        Windows::Win32::Security::CERT_GENERAL_SUBTREE* rgPermittedSubtree;
        uint32_t cExcludedSubtree;
        Windows::Win32::Security::CERT_GENERAL_SUBTREE* rgExcludedSubtree;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_DSS_PARAMETERS
    {
        Windows::Win32::Security::CRYPTOAPI_BLOB p;
        Windows::Win32::Security::CRYPTOAPI_BLOB q;
        Windows::Win32::Security::CRYPTOAPI_BLOB g;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_DH_PARAMETERS
    {
        Windows::Win32::Security::CRYPTOAPI_BLOB p;
        Windows::Win32::Security::CRYPTOAPI_BLOB g;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_ECC_SIGNATURE
    {
        Windows::Win32::Security::CRYPTOAPI_BLOB r;
        Windows::Win32::Security::CRYPTOAPI_BLOB s;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_X942_DH_VALIDATION_PARAMS
    {
        Windows::Win32::Security::CRYPT_BIT_BLOB seed;
        uint32_t pgenCounter;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_X942_DH_PARAMETERS
    {
        Windows::Win32::Security::CRYPTOAPI_BLOB p;
        Windows::Win32::Security::CRYPTOAPI_BLOB g;
        Windows::Win32::Security::CRYPTOAPI_BLOB q;
        Windows::Win32::Security::CRYPTOAPI_BLOB j;
        Windows::Win32::Security::CERT_X942_DH_VALIDATION_PARAMS* pValidationParams;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_X942_OTHER_INFO
    {
        int8_t* pszContentEncryptionObjId;
        uint8_t rgbCounter[4];
        uint8_t rgbKeyLength[4];
        Windows::Win32::Security::CRYPTOAPI_BLOB PubInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_ECC_CMS_SHARED_INFO
    {
        Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER Algorithm;
        Windows::Win32::Security::CRYPTOAPI_BLOB EntityUInfo;
        uint8_t rgbSuppPubInfo[4];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_RC2_CBC_PARAMETERS
    {
        uint32_t dwVersion;
        Windows::Win32::SystemServices::BOOL fIV;
        uint8_t rgbIV[8];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_SMIME_CAPABILITY
    {
        int8_t* pszObjId;
        Windows::Win32::Security::CRYPTOAPI_BLOB Parameters;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_SMIME_CAPABILITIES
    {
        uint32_t cCapability;
        Windows::Win32::Security::CRYPT_SMIME_CAPABILITY* rgCapability;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_QC_STATEMENT
    {
        int8_t* pszStatementId;
        Windows::Win32::Security::CRYPTOAPI_BLOB StatementInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_QC_STATEMENTS_EXT_INFO
    {
        uint32_t cStatement;
        Windows::Win32::Security::CERT_QC_STATEMENT* rgStatement;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_MASK_GEN_ALGORITHM
    {
        int8_t* pszObjId;
        Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_RSA_SSA_PSS_PARAMETERS
    {
        Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
        Windows::Win32::Security::CRYPT_MASK_GEN_ALGORITHM MaskGenAlgorithm;
        uint32_t dwSaltLength;
        uint32_t dwTrailerField;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_PSOURCE_ALGORITHM
    {
        int8_t* pszObjId;
        Windows::Win32::Security::CRYPTOAPI_BLOB EncodingParameters;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_RSAES_OAEP_PARAMETERS
    {
        Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
        Windows::Win32::Security::CRYPT_MASK_GEN_ALGORITHM MaskGenAlgorithm;
        Windows::Win32::Security::CRYPT_PSOURCE_ALGORITHM PSourceAlgorithm;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CMC_TAGGED_ATTRIBUTE
    {
        uint32_t dwBodyPartID;
        Windows::Win32::Security::CRYPT_ATTRIBUTE Attribute;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CMC_TAGGED_CERT_REQUEST
    {
        uint32_t dwBodyPartID;
        Windows::Win32::Security::CRYPTOAPI_BLOB SignedCertRequest;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CMC_TAGGED_REQUEST
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::Security::CMC_TAGGED_CERT_REQUEST* pTaggedCertRequest;
        };
        uint32_t dwTaggedRequestChoice;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CMC_TAGGED_CONTENT_INFO
    {
        uint32_t dwBodyPartID;
        Windows::Win32::Security::CRYPTOAPI_BLOB EncodedContentInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CMC_TAGGED_OTHER_MSG
    {
        uint32_t dwBodyPartID;
        int8_t* pszObjId;
        Windows::Win32::Security::CRYPTOAPI_BLOB Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CMC_DATA_INFO
    {
        uint32_t cTaggedAttribute;
        Windows::Win32::Security::CMC_TAGGED_ATTRIBUTE* rgTaggedAttribute;
        uint32_t cTaggedRequest;
        Windows::Win32::Security::CMC_TAGGED_REQUEST* rgTaggedRequest;
        uint32_t cTaggedContentInfo;
        Windows::Win32::Security::CMC_TAGGED_CONTENT_INFO* rgTaggedContentInfo;
        uint32_t cTaggedOtherMsg;
        Windows::Win32::Security::CMC_TAGGED_OTHER_MSG* rgTaggedOtherMsg;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CMC_RESPONSE_INFO
    {
        uint32_t cTaggedAttribute;
        Windows::Win32::Security::CMC_TAGGED_ATTRIBUTE* rgTaggedAttribute;
        uint32_t cTaggedContentInfo;
        Windows::Win32::Security::CMC_TAGGED_CONTENT_INFO* rgTaggedContentInfo;
        uint32_t cTaggedOtherMsg;
        Windows::Win32::Security::CMC_TAGGED_OTHER_MSG* rgTaggedOtherMsg;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CMC_PEND_INFO
    {
        Windows::Win32::Security::CRYPTOAPI_BLOB PendToken;
        Windows::Win32::WindowsProgramming::FILETIME PendTime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CMC_STATUS_INFO
    {
        union _Anonymous_e__Union
        {
            uint32_t dwFailInfo;
            Windows::Win32::Security::CMC_PEND_INFO* pPendInfo;
        };
        uint32_t dwStatus;
        uint32_t cBodyList;
        uint32_t* rgdwBodyList;
        uint16_t* pwszStatusString;
        uint32_t dwOtherInfoChoice;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CMC_ADD_EXTENSIONS_INFO
    {
        uint32_t dwCmcDataReference;
        uint32_t cCertReference;
        uint32_t* rgdwCertReference;
        uint32_t cExtension;
        Windows::Win32::Security::CERT_EXTENSION* rgExtension;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CMC_ADD_ATTRIBUTES_INFO
    {
        uint32_t dwCmcDataReference;
        uint32_t cCertReference;
        uint32_t* rgdwCertReference;
        uint32_t cAttribute;
        Windows::Win32::Security::CRYPT_ATTRIBUTE* rgAttribute;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_TEMPLATE_EXT
    {
        int8_t* pszObjId;
        uint32_t dwMajorVersion;
        Windows::Win32::SystemServices::BOOL fMinorVersion;
        uint32_t dwMinorVersion;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_HASHED_URL
    {
        Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
        Windows::Win32::Security::CRYPTOAPI_BLOB Hash;
        uint16_t* pwszUrl;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_LOGOTYPE_DETAILS
    {
        uint16_t* pwszMimeType;
        uint32_t cHashedUrl;
        Windows::Win32::Security::CERT_HASHED_URL* rgHashedUrl;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_LOGOTYPE_REFERENCE
    {
        uint32_t cHashedUrl;
        Windows::Win32::Security::CERT_HASHED_URL* rgHashedUrl;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_LOGOTYPE_IMAGE_INFO
    {
        union _Anonymous_e__Union
        {
            uint32_t dwNumBits;
            uint32_t dwTableSize;
        };
        uint32_t dwLogotypeImageInfoChoice;
        uint32_t dwFileSize;
        uint32_t dwXSize;
        uint32_t dwYSize;
        uint32_t dwLogotypeImageResolutionChoice;
        _Anonymous_e__Union Anonymous;
        uint16_t* pwszLanguage;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_LOGOTYPE_IMAGE
    {
        Windows::Win32::Security::CERT_LOGOTYPE_DETAILS LogotypeDetails;
        Windows::Win32::Security::CERT_LOGOTYPE_IMAGE_INFO* pLogotypeImageInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_LOGOTYPE_AUDIO_INFO
    {
        uint32_t dwFileSize;
        uint32_t dwPlayTime;
        uint32_t dwChannels;
        uint32_t dwSampleRate;
        uint16_t* pwszLanguage;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_LOGOTYPE_AUDIO
    {
        Windows::Win32::Security::CERT_LOGOTYPE_DETAILS LogotypeDetails;
        Windows::Win32::Security::CERT_LOGOTYPE_AUDIO_INFO* pLogotypeAudioInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_LOGOTYPE_DATA
    {
        uint32_t cLogotypeImage;
        Windows::Win32::Security::CERT_LOGOTYPE_IMAGE* rgLogotypeImage;
        uint32_t cLogotypeAudio;
        Windows::Win32::Security::CERT_LOGOTYPE_AUDIO* rgLogotypeAudio;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_LOGOTYPE_INFO
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::Security::CERT_LOGOTYPE_DATA* pLogotypeDirectInfo;
            Windows::Win32::Security::CERT_LOGOTYPE_REFERENCE* pLogotypeIndirectInfo;
        };
        uint32_t dwLogotypeInfoChoice;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_OTHER_LOGOTYPE_INFO
    {
        int8_t* pszObjId;
        Windows::Win32::Security::CERT_LOGOTYPE_INFO LogotypeInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_LOGOTYPE_EXT_INFO
    {
        uint32_t cCommunityLogo;
        Windows::Win32::Security::CERT_LOGOTYPE_INFO* rgCommunityLogo;
        Windows::Win32::Security::CERT_LOGOTYPE_INFO* pIssuerLogo;
        Windows::Win32::Security::CERT_LOGOTYPE_INFO* pSubjectLogo;
        uint32_t cOtherLogo;
        Windows::Win32::Security::CERT_OTHER_LOGOTYPE_INFO* rgOtherLogo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_BIOMETRIC_DATA
    {
        union _Anonymous_e__Union
        {
            uint32_t dwPredefined;
            int8_t* pszObjId;
        };
        uint32_t dwTypeOfBiometricDataChoice;
        _Anonymous_e__Union Anonymous;
        Windows::Win32::Security::CERT_HASHED_URL HashedUrl;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_BIOMETRIC_EXT_INFO
    {
        uint32_t cBiometricData;
        Windows::Win32::Security::CERT_BIOMETRIC_DATA* rgBiometricData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct OCSP_SIGNATURE_INFO
    {
        Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
        Windows::Win32::Security::CRYPT_BIT_BLOB Signature;
        uint32_t cCertEncoded;
        Windows::Win32::Security::CRYPTOAPI_BLOB* rgCertEncoded;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct OCSP_SIGNED_REQUEST_INFO
    {
        Windows::Win32::Security::CRYPTOAPI_BLOB ToBeSigned;
        Windows::Win32::Security::OCSP_SIGNATURE_INFO* pOptionalSignatureInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct OCSP_CERT_ID
    {
        Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
        Windows::Win32::Security::CRYPTOAPI_BLOB IssuerNameHash;
        Windows::Win32::Security::CRYPTOAPI_BLOB IssuerKeyHash;
        Windows::Win32::Security::CRYPTOAPI_BLOB SerialNumber;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct OCSP_REQUEST_ENTRY
    {
        Windows::Win32::Security::OCSP_CERT_ID CertId;
        uint32_t cExtension;
        Windows::Win32::Security::CERT_EXTENSION* rgExtension;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct OCSP_REQUEST_INFO
    {
        uint32_t dwVersion;
        Windows::Win32::Security::CERT_ALT_NAME_ENTRY* pRequestorName;
        uint32_t cRequestEntry;
        Windows::Win32::Security::OCSP_REQUEST_ENTRY* rgRequestEntry;
        uint32_t cExtension;
        Windows::Win32::Security::CERT_EXTENSION* rgExtension;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct OCSP_RESPONSE_INFO
    {
        uint32_t dwStatus;
        int8_t* pszObjId;
        Windows::Win32::Security::CRYPTOAPI_BLOB Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct OCSP_BASIC_SIGNED_RESPONSE_INFO
    {
        Windows::Win32::Security::CRYPTOAPI_BLOB ToBeSigned;
        Windows::Win32::Security::OCSP_SIGNATURE_INFO SignatureInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct OCSP_BASIC_REVOKED_INFO
    {
        Windows::Win32::WindowsProgramming::FILETIME RevocationDate;
        uint32_t dwCrlReasonCode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct OCSP_BASIC_RESPONSE_ENTRY
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::Security::OCSP_BASIC_REVOKED_INFO* pRevokedInfo;
        };
        Windows::Win32::Security::OCSP_CERT_ID CertId;
        uint32_t dwCertStatus;
        _Anonymous_e__Union Anonymous;
        Windows::Win32::WindowsProgramming::FILETIME ThisUpdate;
        Windows::Win32::WindowsProgramming::FILETIME NextUpdate;
        uint32_t cExtension;
        Windows::Win32::Security::CERT_EXTENSION* rgExtension;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct OCSP_BASIC_RESPONSE_INFO
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::Security::CRYPTOAPI_BLOB ByNameResponderId;
            Windows::Win32::Security::CRYPTOAPI_BLOB ByKeyResponderId;
        };
        uint32_t dwVersion;
        uint32_t dwResponderIdChoice;
        _Anonymous_e__Union Anonymous;
        Windows::Win32::WindowsProgramming::FILETIME ProducedAt;
        uint32_t cResponseEntry;
        Windows::Win32::Security::OCSP_BASIC_RESPONSE_ENTRY* rgResponseEntry;
        uint32_t cExtension;
        Windows::Win32::Security::CERT_EXTENSION* rgExtension;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_SUPPORTED_ALGORITHM_INFO
    {
        Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER Algorithm;
        Windows::Win32::Security::CRYPT_BIT_BLOB IntendedKeyUsage;
        Windows::Win32::Security::CERT_POLICIES_INFO IntendedCertPolicies;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_TPM_SPECIFICATION_INFO
    {
        uint16_t* pwszFamily;
        uint32_t dwLevel;
        uint32_t dwRevision;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_OID_FUNC_ENTRY
    {
        int8_t* pszOID;
        void* pvFuncAddr;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_OID_INFO
    {
        union _Anonymous_e__Union
        {
            uint32_t dwValue;
            uint32_t Algid;
            uint32_t dwLength;
        };
        uint32_t cbSize;
        int8_t* pszOID;
        uint16_t* pwszName;
        uint32_t dwGroupId;
        _Anonymous_e__Union Anonymous;
        Windows::Win32::Security::CRYPTOAPI_BLOB ExtraInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_STRONG_SIGN_SERIALIZED_INFO
    {
        uint32_t dwFlags;
        uint16_t* pwszCNGSignHashAlgids;
        uint16_t* pwszCNGPubKeyMinBitLengths;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_STRONG_SIGN_PARA
    {
        union _Anonymous_e__Union
        {
            void* pvInfo;
            Windows::Win32::Security::CERT_STRONG_SIGN_SERIALIZED_INFO* pSerializedInfo;
            int8_t* pszOID;
        };
        uint32_t cbSize;
        uint32_t dwInfoChoice;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_ISSUER_SERIAL_NUMBER
    {
        Windows::Win32::Security::CRYPTOAPI_BLOB Issuer;
        Windows::Win32::Security::CRYPTOAPI_BLOB SerialNumber;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_ID
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::Security::CERT_ISSUER_SERIAL_NUMBER IssuerSerialNumber;
            Windows::Win32::Security::CRYPTOAPI_BLOB KeyId;
            Windows::Win32::Security::CRYPTOAPI_BLOB HashId;
        };
        uint32_t dwIdChoice;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CMSG_SIGNER_ENCODE_INFO
    {
        union _Anonymous_e__Union
        {
            size_t hCryptProv;
            size_t hNCryptKey;
        };
        uint32_t cbSize;
        Windows::Win32::Security::CERT_INFO* pCertInfo;
        _Anonymous_e__Union Anonymous;
        uint32_t dwKeySpec;
        Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
        void* pvHashAuxInfo;
        uint32_t cAuthAttr;
        Windows::Win32::Security::CRYPT_ATTRIBUTE* rgAuthAttr;
        uint32_t cUnauthAttr;
        Windows::Win32::Security::CRYPT_ATTRIBUTE* rgUnauthAttr;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CMSG_SIGNED_ENCODE_INFO
    {
        uint32_t cbSize;
        uint32_t cSigners;
        Windows::Win32::Security::CMSG_SIGNER_ENCODE_INFO* rgSigners;
        uint32_t cCertEncoded;
        Windows::Win32::Security::CRYPTOAPI_BLOB* rgCertEncoded;
        uint32_t cCrlEncoded;
        Windows::Win32::Security::CRYPTOAPI_BLOB* rgCrlEncoded;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CMSG_ENVELOPED_ENCODE_INFO
    {
        uint32_t cbSize;
        size_t hCryptProv;
        Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
        void* pvEncryptionAuxInfo;
        uint32_t cRecipients;
        Windows::Win32::Security::CERT_INFO** rgpRecipients;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO
    {
        uint32_t cbSize;
        Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
        void* pvKeyEncryptionAuxInfo;
        size_t hCryptProv;
        Windows::Win32::Security::CRYPT_BIT_BLOB RecipientPublicKey;
        Windows::Win32::Security::CERT_ID RecipientId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO
    {
        uint32_t cbSize;
        Windows::Win32::Security::CRYPT_BIT_BLOB RecipientPublicKey;
        Windows::Win32::Security::CERT_ID RecipientId;
        Windows::Win32::WindowsProgramming::FILETIME Date;
        Windows::Win32::Security::CRYPT_ATTRIBUTE_TYPE_VALUE* pOtherAttr;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER* pEphemeralAlgorithm;
            Windows::Win32::Security::CERT_ID* pSenderId;
        };
        uint32_t cbSize;
        Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
        void* pvKeyEncryptionAuxInfo;
        Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER KeyWrapAlgorithm;
        void* pvKeyWrapAuxInfo;
        size_t hCryptProv;
        uint32_t dwKeySpec;
        uint32_t dwKeyChoice;
        _Anonymous_e__Union Anonymous;
        Windows::Win32::Security::CRYPTOAPI_BLOB UserKeyingMaterial;
        uint32_t cRecipientEncryptedKeys;
        Windows::Win32::Security::CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO** rgpRecipientEncryptedKeys;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO
    {
        union _Anonymous_e__Union
        {
            size_t hKeyEncryptionKey;
            void* pvKeyEncryptionKey;
        };
        uint32_t cbSize;
        Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
        void* pvKeyEncryptionAuxInfo;
        size_t hCryptProv;
        uint32_t dwKeyChoice;
        _Anonymous_e__Union Anonymous;
        Windows::Win32::Security::CRYPTOAPI_BLOB KeyId;
        Windows::Win32::WindowsProgramming::FILETIME Date;
        Windows::Win32::Security::CRYPT_ATTRIBUTE_TYPE_VALUE* pOtherAttr;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CMSG_RECIPIENT_ENCODE_INFO
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::Security::CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO* pKeyTrans;
            Windows::Win32::Security::CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO* pKeyAgree;
            Windows::Win32::Security::CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO* pMailList;
        };
        uint32_t dwRecipientChoice;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CMSG_RC2_AUX_INFO
    {
        uint32_t cbSize;
        uint32_t dwBitLen;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CMSG_SP3_COMPATIBLE_AUX_INFO
    {
        uint32_t cbSize;
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CMSG_RC4_AUX_INFO
    {
        uint32_t cbSize;
        uint32_t dwBitLen;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO
    {
        uint32_t cbSize;
        Windows::Win32::Security::CMSG_SIGNED_ENCODE_INFO SignedInfo;
        Windows::Win32::Security::CMSG_ENVELOPED_ENCODE_INFO EnvelopedInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CMSG_HASHED_ENCODE_INFO
    {
        uint32_t cbSize;
        size_t hCryptProv;
        Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
        void* pvHashAuxInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CMSG_ENCRYPTED_ENCODE_INFO
    {
        uint32_t cbSize;
        Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
        void* pvEncryptionAuxInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CMSG_STREAM_INFO
    {
        uint32_t cbContent;
        Windows::Win32::Security::PFN_CMSG_STREAM_OUTPUT* pfnStreamOutput;
        void* pvArg;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CMSG_SIGNER_INFO
    {
        uint32_t dwVersion;
        Windows::Win32::Security::CRYPTOAPI_BLOB Issuer;
        Windows::Win32::Security::CRYPTOAPI_BLOB SerialNumber;
        Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
        Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER HashEncryptionAlgorithm;
        Windows::Win32::Security::CRYPTOAPI_BLOB EncryptedHash;
        Windows::Win32::Security::CRYPT_ATTRIBUTES AuthAttrs;
        Windows::Win32::Security::CRYPT_ATTRIBUTES UnauthAttrs;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CMSG_CMS_SIGNER_INFO
    {
        uint32_t dwVersion;
        Windows::Win32::Security::CERT_ID SignerId;
        Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
        Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER HashEncryptionAlgorithm;
        Windows::Win32::Security::CRYPTOAPI_BLOB EncryptedHash;
        Windows::Win32::Security::CRYPT_ATTRIBUTES AuthAttrs;
        Windows::Win32::Security::CRYPT_ATTRIBUTES UnauthAttrs;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CMSG_KEY_TRANS_RECIPIENT_INFO
    {
        uint32_t dwVersion;
        Windows::Win32::Security::CERT_ID RecipientId;
        Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
        Windows::Win32::Security::CRYPTOAPI_BLOB EncryptedKey;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CMSG_RECIPIENT_ENCRYPTED_KEY_INFO
    {
        Windows::Win32::Security::CERT_ID RecipientId;
        Windows::Win32::Security::CRYPTOAPI_BLOB EncryptedKey;
        Windows::Win32::WindowsProgramming::FILETIME Date;
        Windows::Win32::Security::CRYPT_ATTRIBUTE_TYPE_VALUE* pOtherAttr;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CMSG_KEY_AGREE_RECIPIENT_INFO
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::Security::CERT_ID OriginatorCertId;
            Windows::Win32::Security::CERT_PUBLIC_KEY_INFO OriginatorPublicKeyInfo;
        };
        uint32_t dwVersion;
        uint32_t dwOriginatorChoice;
        _Anonymous_e__Union Anonymous;
        Windows::Win32::Security::CRYPTOAPI_BLOB UserKeyingMaterial;
        Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
        uint32_t cRecipientEncryptedKeys;
        Windows::Win32::Security::CMSG_RECIPIENT_ENCRYPTED_KEY_INFO** rgpRecipientEncryptedKeys;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CMSG_MAIL_LIST_RECIPIENT_INFO
    {
        uint32_t dwVersion;
        Windows::Win32::Security::CRYPTOAPI_BLOB KeyId;
        Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
        Windows::Win32::Security::CRYPTOAPI_BLOB EncryptedKey;
        Windows::Win32::WindowsProgramming::FILETIME Date;
        Windows::Win32::Security::CRYPT_ATTRIBUTE_TYPE_VALUE* pOtherAttr;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CMSG_CMS_RECIPIENT_INFO
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::Security::CMSG_KEY_TRANS_RECIPIENT_INFO* pKeyTrans;
            Windows::Win32::Security::CMSG_KEY_AGREE_RECIPIENT_INFO* pKeyAgree;
            Windows::Win32::Security::CMSG_MAIL_LIST_RECIPIENT_INFO* pMailList;
        };
        uint32_t dwRecipientChoice;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA
    {
        uint32_t cbSize;
        size_t hCryptProv;
        uint32_t dwSignerIndex;
        uint32_t dwSignerType;
        void* pvSigner;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CMSG_CTRL_DECRYPT_PARA
    {
        union _Anonymous_e__Union
        {
            size_t hCryptProv;
            size_t hNCryptKey;
        };
        uint32_t cbSize;
        _Anonymous_e__Union Anonymous;
        uint32_t dwKeySpec;
        uint32_t dwRecipientIndex;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CMSG_CTRL_KEY_TRANS_DECRYPT_PARA
    {
        union _Anonymous_e__Union
        {
            size_t hCryptProv;
            size_t hNCryptKey;
        };
        uint32_t cbSize;
        _Anonymous_e__Union Anonymous;
        uint32_t dwKeySpec;
        Windows::Win32::Security::CMSG_KEY_TRANS_RECIPIENT_INFO* pKeyTrans;
        uint32_t dwRecipientIndex;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CMSG_CTRL_KEY_AGREE_DECRYPT_PARA
    {
        union _Anonymous_e__Union
        {
            size_t hCryptProv;
            size_t hNCryptKey;
        };
        uint32_t cbSize;
        _Anonymous_e__Union Anonymous;
        uint32_t dwKeySpec;
        Windows::Win32::Security::CMSG_KEY_AGREE_RECIPIENT_INFO* pKeyAgree;
        uint32_t dwRecipientIndex;
        uint32_t dwRecipientEncryptedKeyIndex;
        Windows::Win32::Security::CRYPT_BIT_BLOB OriginatorPublicKey;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CMSG_CTRL_MAIL_LIST_DECRYPT_PARA
    {
        union _Anonymous_e__Union
        {
            size_t hKeyEncryptionKey;
            void* pvKeyEncryptionKey;
        };
        uint32_t cbSize;
        size_t hCryptProv;
        Windows::Win32::Security::CMSG_MAIL_LIST_RECIPIENT_INFO* pMailList;
        uint32_t dwRecipientIndex;
        uint32_t dwKeyChoice;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA
    {
        uint32_t cbSize;
        uint32_t dwSignerIndex;
        Windows::Win32::Security::CRYPTOAPI_BLOB blob;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA
    {
        uint32_t cbSize;
        uint32_t dwSignerIndex;
        uint32_t dwUnauthAttrIndex;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CMSG_CONTENT_ENCRYPT_INFO
    {
        union _Anonymous_e__Union
        {
            size_t hContentEncryptKey;
            void* hCNGContentEncryptKey;
        };
        uint32_t cbSize;
        size_t hCryptProv;
        Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
        void* pvEncryptionAuxInfo;
        uint32_t cRecipients;
        Windows::Win32::Security::CMSG_RECIPIENT_ENCODE_INFO* rgCmsRecipients;
        Windows::Win32::Security::PFN_CMSG_ALLOC* pfnAlloc;
        Windows::Win32::Security::PFN_CMSG_FREE* pfnFree;
        uint32_t dwEncryptFlags;
        _Anonymous_e__Union Anonymous;
        uint32_t dwFlags;
        Windows::Win32::SystemServices::BOOL fCNG;
        uint8_t* pbCNGContentEncryptKeyObject;
        uint8_t* pbContentEncryptKey;
        uint32_t cbContentEncryptKey;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CMSG_KEY_TRANS_ENCRYPT_INFO
    {
        uint32_t cbSize;
        uint32_t dwRecipientIndex;
        Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
        Windows::Win32::Security::CRYPTOAPI_BLOB EncryptedKey;
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CMSG_KEY_AGREE_KEY_ENCRYPT_INFO
    {
        uint32_t cbSize;
        Windows::Win32::Security::CRYPTOAPI_BLOB EncryptedKey;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CMSG_KEY_AGREE_ENCRYPT_INFO
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::Security::CERT_ID OriginatorCertId;
            Windows::Win32::Security::CERT_PUBLIC_KEY_INFO OriginatorPublicKeyInfo;
        };
        uint32_t cbSize;
        uint32_t dwRecipientIndex;
        Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
        Windows::Win32::Security::CRYPTOAPI_BLOB UserKeyingMaterial;
        uint32_t dwOriginatorChoice;
        _Anonymous_e__Union Anonymous;
        uint32_t cKeyAgreeKeyEncryptInfo;
        Windows::Win32::Security::CMSG_KEY_AGREE_KEY_ENCRYPT_INFO** rgpKeyAgreeKeyEncryptInfo;
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CMSG_MAIL_LIST_ENCRYPT_INFO
    {
        uint32_t cbSize;
        uint32_t dwRecipientIndex;
        Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
        Windows::Win32::Security::CRYPTOAPI_BLOB EncryptedKey;
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CMSG_CNG_CONTENT_DECRYPT_INFO
    {
        uint32_t cbSize;
        Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
        Windows::Win32::Security::PFN_CMSG_ALLOC* pfnAlloc;
        Windows::Win32::Security::PFN_CMSG_FREE* pfnFree;
        size_t hNCryptKey;
        uint8_t* pbContentEncryptKey;
        uint32_t cbContentEncryptKey;
        void* hCNGContentEncryptKey;
        uint8_t* pbCNGContentEncryptKeyObject;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_CONTEXT
    {
        uint32_t dwCertEncodingType;
        uint8_t* pbCertEncoded;
        uint32_t cbCertEncoded;
        Windows::Win32::Security::CERT_INFO* pCertInfo;
        void* hCertStore;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRL_CONTEXT
    {
        uint32_t dwCertEncodingType;
        uint8_t* pbCrlEncoded;
        uint32_t cbCrlEncoded;
        Windows::Win32::Security::CRL_INFO* pCrlInfo;
        void* hCertStore;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CTL_CONTEXT
    {
        uint32_t dwMsgAndCertEncodingType;
        uint8_t* pbCtlEncoded;
        uint32_t cbCtlEncoded;
        Windows::Win32::Security::CTL_INFO* pCtlInfo;
        void* hCertStore;
        void* hCryptMsg;
        uint8_t* pbCtlContent;
        uint32_t cbCtlContent;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_KEY_PROV_PARAM
    {
        uint32_t dwParam;
        uint8_t* pbData;
        uint32_t cbData;
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_KEY_PROV_INFO
    {
        uint16_t* pwszContainerName;
        uint16_t* pwszProvName;
        uint32_t dwProvType;
        uint32_t dwFlags;
        uint32_t cProvParam;
        Windows::Win32::Security::CRYPT_KEY_PROV_PARAM* rgProvParam;
        uint32_t dwKeySpec;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_KEY_CONTEXT
    {
        union _Anonymous_e__Union
        {
            size_t hCryptProv;
            size_t hNCryptKey;
        };
        uint32_t cbSize;
        _Anonymous_e__Union Anonymous;
        uint32_t dwKeySpec;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct ROOT_INFO_LUID
    {
        uint32_t LowPart;
        int32_t HighPart;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_SMART_CARD_ROOT_INFO
    {
        uint8_t rgbCardID[16];
        Windows::Win32::Security::ROOT_INFO_LUID luid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_SYSTEM_STORE_RELOCATE_PARA
    {
        union _Anonymous1_e__Union
        {
            Windows::Win32::WindowsProgramming::HKEY hKeyBase;
            void* pvBase;
        };
        union _Anonymous2_e__Union
        {
            void* pvSystemStore;
            int8_t* pszSystemStore;
            uint16_t* pwszSystemStore;
        };
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_REGISTRY_STORE_CLIENT_GPT_PARA
    {
        Windows::Win32::WindowsProgramming::HKEY hKeyBase;
        uint16_t* pwszRegPath;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_REGISTRY_STORE_ROAMING_PARA
    {
        Windows::Win32::WindowsProgramming::HKEY hKey;
        uint16_t* pwszStoreDirectory;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_LDAP_STORE_OPENED_PARA
    {
        void* pvLdapSessionHandle;
        uint16_t* pwszLdapUrl;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_STORE_PROV_INFO
    {
        uint32_t cbSize;
        uint32_t cStoreProvFunc;
        void** rgpvStoreProvFunc;
        void* hStoreProv;
        uint32_t dwStoreProvFlags;
        void* hStoreProvFuncAddr2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_STORE_PROV_FIND_INFO
    {
        uint32_t cbSize;
        uint32_t dwMsgAndCertEncodingType;
        uint32_t dwFindFlags;
        uint32_t dwFindType;
        void* pvFindPara;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRL_FIND_ISSUED_FOR_PARA
    {
        Windows::Win32::Security::CERT_CONTEXT* pSubjectCert;
        Windows::Win32::Security::CERT_CONTEXT* pIssuerCert;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CTL_ANY_SUBJECT_INFO
    {
        Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER SubjectAlgorithm;
        Windows::Win32::Security::CRYPTOAPI_BLOB SubjectIdentifier;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CTL_FIND_USAGE_PARA
    {
        uint32_t cbSize;
        Windows::Win32::Security::CTL_USAGE SubjectUsage;
        Windows::Win32::Security::CRYPTOAPI_BLOB ListIdentifier;
        Windows::Win32::Security::CERT_INFO* pSigner;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CTL_FIND_SUBJECT_PARA
    {
        uint32_t cbSize;
        Windows::Win32::Security::CTL_FIND_USAGE_PARA* pUsagePara;
        uint32_t dwSubjectType;
        void* pvSubject;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_CREATE_CONTEXT_PARA
    {
        uint32_t cbSize;
        Windows::Win32::Security::PFN_CRYPT_FREE* pfnFree;
        void* pvFree;
        Windows::Win32::Security::PFN_CERT_CREATE_CONTEXT_SORT_FUNC* pfnSort;
        void* pvSort;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_SYSTEM_STORE_INFO
    {
        uint32_t cbSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_PHYSICAL_STORE_INFO
    {
        uint32_t cbSize;
        int8_t* pszOpenStoreProvider;
        uint32_t dwOpenEncodingType;
        uint32_t dwOpenFlags;
        Windows::Win32::Security::CRYPTOAPI_BLOB OpenParameters;
        uint32_t dwFlags;
        uint32_t dwPriority;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CTL_VERIFY_USAGE_PARA
    {
        uint32_t cbSize;
        Windows::Win32::Security::CRYPTOAPI_BLOB ListIdentifier;
        uint32_t cCtlStore;
        void** rghCtlStore;
        uint32_t cSignerStore;
        void** rghSignerStore;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CTL_VERIFY_USAGE_STATUS
    {
        uint32_t cbSize;
        uint32_t dwError;
        uint32_t dwFlags;
        Windows::Win32::Security::CTL_CONTEXT** ppCtl;
        uint32_t dwCtlEntryIndex;
        Windows::Win32::Security::CERT_CONTEXT** ppSigner;
        uint32_t dwSignerIndex;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_REVOCATION_CRL_INFO
    {
        uint32_t cbSize;
        Windows::Win32::Security::CRL_CONTEXT* pBaseCrlContext;
        Windows::Win32::Security::CRL_CONTEXT* pDeltaCrlContext;
        Windows::Win32::Security::CRL_ENTRY* pCrlEntry;
        Windows::Win32::SystemServices::BOOL fDeltaCrlEntry;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_REVOCATION_PARA
    {
        uint32_t cbSize;
        Windows::Win32::Security::CERT_CONTEXT* pIssuerCert;
        uint32_t cCertStore;
        void** rgCertStore;
        void* hCrlStore;
        Windows::Win32::WindowsProgramming::FILETIME* pftTimeToUse;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_REVOCATION_STATUS
    {
        uint32_t cbSize;
        uint32_t dwIndex;
        uint32_t dwError;
        uint32_t dwReason;
        Windows::Win32::SystemServices::BOOL fHasFreshnessTime;
        uint32_t dwFreshnessTime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO
    {
        Windows::Win32::Security::CRYPTOAPI_BLOB CertSignHashCNGAlgPropData;
        Windows::Win32::Security::CRYPTOAPI_BLOB CertIssuerPubKeyBitLengthPropData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO
    {
        uint32_t cCNGHashAlgid;
        uint16_t** rgpwszCNGHashAlgid;
        uint32_t dwWeakIndex;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA
    {
        uint32_t cOID;
        int8_t** rgpszOID;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_SIGN_MESSAGE_PARA
    {
        uint32_t cbSize;
        uint32_t dwMsgEncodingType;
        Windows::Win32::Security::CERT_CONTEXT* pSigningCert;
        Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
        void* pvHashAuxInfo;
        uint32_t cMsgCert;
        Windows::Win32::Security::CERT_CONTEXT** rgpMsgCert;
        uint32_t cMsgCrl;
        Windows::Win32::Security::CRL_CONTEXT** rgpMsgCrl;
        uint32_t cAuthAttr;
        Windows::Win32::Security::CRYPT_ATTRIBUTE* rgAuthAttr;
        uint32_t cUnauthAttr;
        Windows::Win32::Security::CRYPT_ATTRIBUTE* rgUnauthAttr;
        uint32_t dwFlags;
        uint32_t dwInnerContentType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_VERIFY_MESSAGE_PARA
    {
        uint32_t cbSize;
        uint32_t dwMsgAndCertEncodingType;
        size_t hCryptProv;
        Windows::Win32::Security::PFN_CRYPT_GET_SIGNER_CERTIFICATE* pfnGetSignerCertificate;
        void* pvGetArg;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_ENCRYPT_MESSAGE_PARA
    {
        uint32_t cbSize;
        uint32_t dwMsgEncodingType;
        size_t hCryptProv;
        Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
        void* pvEncryptionAuxInfo;
        uint32_t dwFlags;
        uint32_t dwInnerContentType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_DECRYPT_MESSAGE_PARA
    {
        uint32_t cbSize;
        uint32_t dwMsgAndCertEncodingType;
        uint32_t cCertStore;
        void** rghCertStore;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_HASH_MESSAGE_PARA
    {
        uint32_t cbSize;
        uint32_t dwMsgEncodingType;
        size_t hCryptProv;
        Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
        void* pvHashAuxInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_KEY_SIGN_MESSAGE_PARA
    {
        union _Anonymous_e__Union
        {
            size_t hCryptProv;
            size_t hNCryptKey;
        };
        uint32_t cbSize;
        uint32_t dwMsgAndCertEncodingType;
        _Anonymous_e__Union Anonymous;
        uint32_t dwKeySpec;
        Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
        void* pvHashAuxInfo;
        Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER PubKeyAlgorithm;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_KEY_VERIFY_MESSAGE_PARA
    {
        uint32_t cbSize;
        uint32_t dwMsgEncodingType;
        size_t hCryptProv;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_CHAIN
    {
        uint32_t cCerts;
        Windows::Win32::Security::CRYPTOAPI_BLOB* certs;
        Windows::Win32::Security::CRYPT_KEY_PROV_INFO keyLocatorInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_BLOB_ARRAY
    {
        uint32_t cBlob;
        Windows::Win32::Security::CRYPTOAPI_BLOB* rgBlob;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_CREDENTIALS
    {
        uint32_t cbSize;
        int8_t* pszCredentialsOid;
        void* pvCredentials;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_PASSWORD_CREDENTIALSA
    {
        uint32_t cbSize;
        int8_t* pszUsername;
        int8_t* pszPassword;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_PASSWORD_CREDENTIALSW
    {
        uint32_t cbSize;
        uint16_t* pszUsername;
        uint16_t* pszPassword;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPTNET_URL_CACHE_PRE_FETCH_INFO
    {
        uint32_t cbSize;
        uint32_t dwObjectType;
        uint32_t dwError;
        uint32_t dwReserved;
        Windows::Win32::WindowsProgramming::FILETIME ThisUpdateTime;
        Windows::Win32::WindowsProgramming::FILETIME NextUpdateTime;
        Windows::Win32::WindowsProgramming::FILETIME PublishTime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPTNET_URL_CACHE_FLUSH_INFO
    {
        uint32_t cbSize;
        uint32_t dwExemptSeconds;
        Windows::Win32::WindowsProgramming::FILETIME ExpireTime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPTNET_URL_CACHE_RESPONSE_INFO
    {
        uint32_t cbSize;
        uint16_t wResponseType;
        uint16_t wResponseFlags;
        Windows::Win32::WindowsProgramming::FILETIME LastModifiedTime;
        uint32_t dwMaxAge;
        uint16_t* pwszETag;
        uint32_t dwProxyId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_RETRIEVE_AUX_INFO
    {
        uint32_t cbSize;
        Windows::Win32::WindowsProgramming::FILETIME* pLastSyncTime;
        uint32_t dwMaxUrlRetrievalByteCount;
        Windows::Win32::Security::CRYPTNET_URL_CACHE_PRE_FETCH_INFO* pPreFetchInfo;
        Windows::Win32::Security::CRYPTNET_URL_CACHE_FLUSH_INFO* pFlushInfo;
        Windows::Win32::Security::CRYPTNET_URL_CACHE_RESPONSE_INFO** ppResponseInfo;
        uint16_t* pwszCacheFileNamePrefix;
        Windows::Win32::WindowsProgramming::FILETIME* pftCacheResync;
        Windows::Win32::SystemServices::BOOL fProxyCacheRetrieval;
        uint32_t dwHttpStatusCode;
        uint16_t** ppwszErrorResponseHeaders;
        Windows::Win32::Security::CRYPTOAPI_BLOB** ppErrorContentBlob;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_ASYNC_RETRIEVAL_COMPLETION
    {
        Windows::Win32::Security::PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC* pfnCompletion;
        void* pvCompletion;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_URL_ARRAY
    {
        uint32_t cUrl;
        uint16_t** rgwszUrl;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_URL_INFO
    {
        uint32_t cbSize;
        uint32_t dwSyncDeltaTime;
        uint32_t cGroup;
        uint32_t* rgcGroupEntry;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_CRL_CONTEXT_PAIR
    {
        Windows::Win32::Security::CERT_CONTEXT* pCertContext;
        Windows::Win32::Security::CRL_CONTEXT* pCrlContext;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO
    {
        uint32_t cbSize;
        int32_t iDeltaCrlIndicator;
        Windows::Win32::WindowsProgramming::FILETIME* pftCacheResync;
        Windows::Win32::WindowsProgramming::FILETIME* pLastSyncTime;
        Windows::Win32::WindowsProgramming::FILETIME* pMaxAgeTime;
        Windows::Win32::Security::CERT_REVOCATION_CHAIN_PARA* pChainPara;
        Windows::Win32::Security::CRYPTOAPI_BLOB* pDeltaCrlIndicator;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_CHAIN_ENGINE_CONFIG
    {
        uint32_t cbSize;
        void* hRestrictedRoot;
        void* hRestrictedTrust;
        void* hRestrictedOther;
        uint32_t cAdditionalStore;
        void** rghAdditionalStore;
        uint32_t dwFlags;
        uint32_t dwUrlRetrievalTimeout;
        uint32_t MaximumCachedCertificates;
        uint32_t CycleDetectionModulus;
        void* hExclusiveRoot;
        void* hExclusiveTrustedPeople;
        uint32_t dwExclusiveFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_TRUST_STATUS
    {
        uint32_t dwErrorStatus;
        uint32_t dwInfoStatus;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_REVOCATION_INFO
    {
        uint32_t cbSize;
        uint32_t dwRevocationResult;
        int8_t* pszRevocationOid;
        void* pvOidSpecificInfo;
        Windows::Win32::SystemServices::BOOL fHasFreshnessTime;
        uint32_t dwFreshnessTime;
        Windows::Win32::Security::CERT_REVOCATION_CRL_INFO* pCrlInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_TRUST_LIST_INFO
    {
        uint32_t cbSize;
        Windows::Win32::Security::CTL_ENTRY* pCtlEntry;
        Windows::Win32::Security::CTL_CONTEXT* pCtlContext;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_CHAIN_ELEMENT
    {
        uint32_t cbSize;
        Windows::Win32::Security::CERT_CONTEXT* pCertContext;
        Windows::Win32::Security::CERT_TRUST_STATUS TrustStatus;
        Windows::Win32::Security::CERT_REVOCATION_INFO* pRevocationInfo;
        Windows::Win32::Security::CTL_USAGE* pIssuanceUsage;
        Windows::Win32::Security::CTL_USAGE* pApplicationUsage;
        uint16_t* pwszExtendedErrorInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_SIMPLE_CHAIN
    {
        uint32_t cbSize;
        Windows::Win32::Security::CERT_TRUST_STATUS TrustStatus;
        uint32_t cElement;
        Windows::Win32::Security::CERT_CHAIN_ELEMENT** rgpElement;
        Windows::Win32::Security::CERT_TRUST_LIST_INFO* pTrustListInfo;
        Windows::Win32::SystemServices::BOOL fHasRevocationFreshnessTime;
        uint32_t dwRevocationFreshnessTime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_CHAIN_CONTEXT
    {
        uint32_t cbSize;
        Windows::Win32::Security::CERT_TRUST_STATUS TrustStatus;
        uint32_t cChain;
        Windows::Win32::Security::CERT_SIMPLE_CHAIN** rgpChain;
        uint32_t cLowerQualityChainContext;
        Windows::Win32::Security::CERT_CHAIN_CONTEXT** rgpLowerQualityChainContext;
        Windows::Win32::SystemServices::BOOL fHasRevocationFreshnessTime;
        uint32_t dwRevocationFreshnessTime;
        uint32_t dwCreateFlags;
        ::win32::guid ChainId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_USAGE_MATCH
    {
        uint32_t dwType;
        Windows::Win32::Security::CTL_USAGE Usage;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CTL_USAGE_MATCH
    {
        uint32_t dwType;
        Windows::Win32::Security::CTL_USAGE Usage;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_CHAIN_PARA
    {
        uint32_t cbSize;
        Windows::Win32::Security::CERT_USAGE_MATCH RequestedUsage;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_REVOCATION_CHAIN_PARA
    {
        uint32_t cbSize;
        Windows::Win32::Security::HCERTCHAINENGINE hChainEngine;
        void* hAdditionalStore;
        uint32_t dwChainFlags;
        uint32_t dwUrlRetrievalTimeout;
        Windows::Win32::WindowsProgramming::FILETIME* pftCurrentTime;
        Windows::Win32::WindowsProgramming::FILETIME* pftCacheResync;
        uint32_t cbMaxUrlRetrievalByteCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRL_REVOCATION_INFO
    {
        Windows::Win32::Security::CRL_ENTRY* pCrlEntry;
        Windows::Win32::Security::CRL_CONTEXT* pCrlContext;
        Windows::Win32::Security::CERT_CHAIN_CONTEXT* pCrlIssuerChain;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_CHAIN_FIND_BY_ISSUER_PARA
    {
        uint32_t cbSize;
        int8_t* pszUsageIdentifier;
        uint32_t dwKeySpec;
        uint32_t dwAcquirePrivateKeyFlags;
        uint32_t cIssuer;
        Windows::Win32::Security::CRYPTOAPI_BLOB* rgIssuer;
        Windows::Win32::Security::PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK* pfnFindCallback;
        void* pvFindArg;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_CHAIN_POLICY_PARA
    {
        uint32_t cbSize;
        uint32_t dwFlags;
        void* pvExtraPolicyPara;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_CHAIN_POLICY_STATUS
    {
        uint32_t cbSize;
        uint32_t dwError;
        int32_t lChainIndex;
        int32_t lElementIndex;
        void* pvExtraPolicyStatus;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA
    {
        uint32_t cbSize;
        uint32_t dwRegPolicySettings;
        Windows::Win32::Security::CMSG_SIGNER_INFO* pSignerInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS
    {
        uint32_t cbSize;
        Windows::Win32::SystemServices::BOOL fCommercial;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA
    {
        uint32_t cbSize;
        uint32_t dwRegPolicySettings;
        Windows::Win32::SystemServices::BOOL fCommercial;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct HTTPSPolicyCallbackData
    {
        union _Anonymous_e__Union
        {
            uint32_t cbStruct;
            uint32_t cbSize;
        };
        _Anonymous_e__Union Anonymous;
        uint32_t dwAuthType;
        uint32_t fdwChecks;
        uint16_t* pwszServerName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct EV_EXTRA_CERT_CHAIN_POLICY_PARA
    {
        uint32_t cbSize;
        uint32_t dwRootProgramQualifierFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct EV_EXTRA_CERT_CHAIN_POLICY_STATUS
    {
        uint32_t cbSize;
        uint32_t dwQualifiers;
        uint32_t dwIssuanceUsageIndex;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SSL_F12_EXTRA_CERT_CHAIN_POLICY_STATUS
    {
        uint32_t cbSize;
        uint32_t dwErrorLevel;
        uint32_t dwErrorCategory;
        uint32_t dwReserved;
        uint16_t wszErrorText[256];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SSL_HPKP_HEADER_EXTRA_CERT_CHAIN_POLICY_PARA
    {
        uint32_t cbSize;
        uint32_t dwReserved;
        uint16_t* pwszServerName;
        int8_t* rgpszHpkpValue[2];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_PARA
    {
        uint32_t cbSize;
        uint32_t dwReserved;
        uint16_t* pwszServerName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_STATUS
    {
        uint32_t cbSize;
        int32_t lError;
        uint16_t wszErrorText[512];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_PKCS12_PBE_PARAMS
    {
        int32_t iIterations;
        uint32_t cbSalt;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct PKCS12_PBES2_EXPORT_PARAMS
    {
        uint32_t dwSize;
        void* hNcryptDescriptor;
        uint16_t* pwszPbes2Alg;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_SERVER_OCSP_RESPONSE_CONTEXT
    {
        uint32_t cbSize;
        uint8_t* pbEncodedOcspResponse;
        uint32_t cbEncodedOcspResponse;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_SERVER_OCSP_RESPONSE_OPEN_PARA
    {
        uint32_t cbSize;
        uint32_t dwFlags;
        uint32_t* pcbUsedSize;
        uint16_t* pwszOcspDirectory;
        Windows::Win32::Security::PFN_CERT_SERVER_OCSP_RESPONSE_UPDATE_CALLBACK* pfnUpdateCallback;
        void* pvUpdateCallbackArg;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_SELECT_CHAIN_PARA
    {
        Windows::Win32::Security::HCERTCHAINENGINE hChainEngine;
        Windows::Win32::WindowsProgramming::FILETIME* pTime;
        void* hAdditionalStore;
        Windows::Win32::Security::CERT_CHAIN_PARA* pChainPara;
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_SELECT_CRITERIA
    {
        uint32_t dwType;
        uint32_t cPara;
        void** ppPara;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_TIMESTAMP_REQUEST
    {
        uint32_t dwVersion;
        Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
        Windows::Win32::Security::CRYPTOAPI_BLOB HashedMessage;
        int8_t* pszTSAPolicyId;
        Windows::Win32::Security::CRYPTOAPI_BLOB Nonce;
        Windows::Win32::SystemServices::BOOL fCertReq;
        uint32_t cExtension;
        Windows::Win32::Security::CERT_EXTENSION* rgExtension;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_TIMESTAMP_RESPONSE
    {
        uint32_t dwStatus;
        uint32_t cFreeText;
        uint16_t** rgFreeText;
        Windows::Win32::Security::CRYPT_BIT_BLOB FailureInfo;
        Windows::Win32::Security::CRYPTOAPI_BLOB ContentInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_TIMESTAMP_ACCURACY
    {
        uint32_t dwSeconds;
        uint32_t dwMillis;
        uint32_t dwMicros;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_TIMESTAMP_INFO
    {
        uint32_t dwVersion;
        int8_t* pszTSAPolicyId;
        Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
        Windows::Win32::Security::CRYPTOAPI_BLOB HashedMessage;
        Windows::Win32::Security::CRYPTOAPI_BLOB SerialNumber;
        Windows::Win32::WindowsProgramming::FILETIME ftTime;
        Windows::Win32::Security::CRYPT_TIMESTAMP_ACCURACY* pvAccuracy;
        Windows::Win32::SystemServices::BOOL fOrdering;
        Windows::Win32::Security::CRYPTOAPI_BLOB Nonce;
        Windows::Win32::Security::CRYPTOAPI_BLOB Tsa;
        uint32_t cExtension;
        Windows::Win32::Security::CERT_EXTENSION* rgExtension;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_TIMESTAMP_CONTEXT
    {
        uint32_t cbEncoded;
        uint8_t* pbEncoded;
        Windows::Win32::Security::CRYPT_TIMESTAMP_INFO* pTimeStamp;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_TIMESTAMP_PARA
    {
        int8_t* pszTSAPolicyId;
        Windows::Win32::SystemServices::BOOL fRequestCerts;
        Windows::Win32::Security::CRYPTOAPI_BLOB Nonce;
        uint32_t cExtension;
        Windows::Win32::Security::CERT_EXTENSION* rgExtension;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE
    {
        uint32_t cbSize;
        Windows::Win32::Security::PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_GET* pfnGet;
        Windows::Win32::Security::PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_RELEASE* pfnRelease;
        Windows::Win32::Security::PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_PASSWORD* pfnFreePassword;
        Windows::Win32::Security::PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE* pfnFree;
        Windows::Win32::Security::PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_IDENTIFIER* pfnFreeIdentifier;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPTPROTECT_PROMPTSTRUCT
    {
        uint32_t cbSize;
        uint32_t dwPromptFlags;
        Windows::Win32::WindowsAndMessaging::HWND hwndApp;
        uint16_t* szPrompt;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SCARD_READERSTATEA
    {
        int8_t* szReader;
        void* pvUserData;
        uint32_t dwCurrentState;
        uint32_t dwEventState;
        uint32_t cbAtr;
        uint8_t rgbAtr[36];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SCARD_READERSTATEW
    {
        uint16_t* szReader;
        void* pvUserData;
        uint32_t dwCurrentState;
        uint32_t dwEventState;
        uint32_t cbAtr;
        uint8_t rgbAtr[36];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SCARD_ATRMASK
    {
        uint32_t cbAtr;
        uint8_t rgbAtr[36];
        uint8_t rgbMask[36];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct OPENCARD_SEARCH_CRITERIAA
    {
        uint32_t dwStructSize;
        int8_t* lpstrGroupNames;
        uint32_t nMaxGroupNames;
        ::win32::guid* rgguidInterfaces;
        uint32_t cguidInterfaces;
        int8_t* lpstrCardNames;
        uint32_t nMaxCardNames;
        Windows::Win32::Security::LPOCNCHKPROC* lpfnCheck;
        Windows::Win32::Security::LPOCNCONNPROCA* lpfnConnect;
        Windows::Win32::Security::LPOCNDSCPROC* lpfnDisconnect;
        void* pvUserData;
        uint32_t dwShareMode;
        uint32_t dwPreferredProtocols;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct OPENCARD_SEARCH_CRITERIAW
    {
        uint32_t dwStructSize;
        uint16_t* lpstrGroupNames;
        uint32_t nMaxGroupNames;
        ::win32::guid* rgguidInterfaces;
        uint32_t cguidInterfaces;
        uint16_t* lpstrCardNames;
        uint32_t nMaxCardNames;
        Windows::Win32::Security::LPOCNCHKPROC* lpfnCheck;
        Windows::Win32::Security::LPOCNCONNPROCW* lpfnConnect;
        Windows::Win32::Security::LPOCNDSCPROC* lpfnDisconnect;
        void* pvUserData;
        uint32_t dwShareMode;
        uint32_t dwPreferredProtocols;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct OPENCARDNAME_EXA
    {
        uint32_t dwStructSize;
        size_t hSCardContext;
        Windows::Win32::WindowsAndMessaging::HWND hwndOwner;
        uint32_t dwFlags;
        int8_t* lpstrTitle;
        int8_t* lpstrSearchDesc;
        Windows::Win32::Gdi::HICON hIcon;
        Windows::Win32::Security::OPENCARD_SEARCH_CRITERIAA* pOpenCardSearchCriteria;
        Windows::Win32::Security::LPOCNCONNPROCA* lpfnConnect;
        void* pvUserData;
        uint32_t dwShareMode;
        uint32_t dwPreferredProtocols;
        int8_t* lpstrRdr;
        uint32_t nMaxRdr;
        int8_t* lpstrCard;
        uint32_t nMaxCard;
        uint32_t dwActiveProtocol;
        size_t hCardHandle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct OPENCARDNAME_EXW
    {
        uint32_t dwStructSize;
        size_t hSCardContext;
        Windows::Win32::WindowsAndMessaging::HWND hwndOwner;
        uint32_t dwFlags;
        uint16_t* lpstrTitle;
        uint16_t* lpstrSearchDesc;
        Windows::Win32::Gdi::HICON hIcon;
        Windows::Win32::Security::OPENCARD_SEARCH_CRITERIAW* pOpenCardSearchCriteria;
        Windows::Win32::Security::LPOCNCONNPROCW* lpfnConnect;
        void* pvUserData;
        uint32_t dwShareMode;
        uint32_t dwPreferredProtocols;
        uint16_t* lpstrRdr;
        uint32_t nMaxRdr;
        uint16_t* lpstrCard;
        uint32_t nMaxCard;
        uint32_t dwActiveProtocol;
        size_t hCardHandle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct READER_SEL_REQUEST
    {
        union _Anonymous_e__Union
        {
            struct _ReaderAndContainerParameter_e__Struct
            {
                uint32_t cbReaderNameOffset;
                uint32_t cchReaderNameLength;
                uint32_t cbContainerNameOffset;
                uint32_t cchContainerNameLength;
                uint32_t dwDesiredCardModuleVersion;
                uint32_t dwCspFlags;
            };
            struct _SerialNumberParameter_e__Struct
            {
                uint32_t cbSerialNumberOffset;
                uint32_t cbSerialNumberLength;
                uint32_t dwDesiredCardModuleVersion;
            };
            _ReaderAndContainerParameter_e__Struct ReaderAndContainerParameter;
            _SerialNumberParameter_e__Struct SerialNumberParameter;
        };
        uint32_t dwShareMode;
        uint32_t dwPreferredProtocols;
        Windows::Win32::Security::READER_SEL_REQUEST_MATCH_TYPE MatchType;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct READER_SEL_RESPONSE
    {
        uint32_t cbReaderNameOffset;
        uint32_t cchReaderNameLength;
        uint32_t cbCardNameOffset;
        uint32_t cchCardNameLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct OPENCARDNAMEA
    {
        uint32_t dwStructSize;
        Windows::Win32::WindowsAndMessaging::HWND hwndOwner;
        size_t hSCardContext;
        int8_t* lpstrGroupNames;
        uint32_t nMaxGroupNames;
        int8_t* lpstrCardNames;
        uint32_t nMaxCardNames;
        ::win32::guid* rgguidInterfaces;
        uint32_t cguidInterfaces;
        int8_t* lpstrRdr;
        uint32_t nMaxRdr;
        int8_t* lpstrCard;
        uint32_t nMaxCard;
        int8_t* lpstrTitle;
        uint32_t dwFlags;
        void* pvUserData;
        uint32_t dwShareMode;
        uint32_t dwPreferredProtocols;
        uint32_t dwActiveProtocol;
        Windows::Win32::Security::LPOCNCONNPROCA* lpfnConnect;
        Windows::Win32::Security::LPOCNCHKPROC* lpfnCheck;
        Windows::Win32::Security::LPOCNDSCPROC* lpfnDisconnect;
        size_t hCardHandle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct OPENCARDNAMEW
    {
        uint32_t dwStructSize;
        Windows::Win32::WindowsAndMessaging::HWND hwndOwner;
        size_t hSCardContext;
        uint16_t* lpstrGroupNames;
        uint32_t nMaxGroupNames;
        uint16_t* lpstrCardNames;
        uint32_t nMaxCardNames;
        ::win32::guid* rgguidInterfaces;
        uint32_t cguidInterfaces;
        uint16_t* lpstrRdr;
        uint32_t nMaxRdr;
        uint16_t* lpstrCard;
        uint32_t nMaxCard;
        uint16_t* lpstrTitle;
        uint32_t dwFlags;
        void* pvUserData;
        uint32_t dwShareMode;
        uint32_t dwPreferredProtocols;
        uint32_t dwActiveProtocol;
        Windows::Win32::Security::LPOCNCONNPROCW* lpfnConnect;
        Windows::Win32::Security::LPOCNCHKPROC* lpfnCheck;
        Windows::Win32::Security::LPOCNDSCPROC* lpfnDisconnect;
        size_t hCardHandle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SERVICE_TRIGGER_CUSTOM_STATE_ID
    {
        uint32_t Data[2];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM
    {
        union _u_e__Union
        {
            struct _s_e__Struct
            {
                uint32_t DataOffset;
                uint8_t Data[1];
            };
            Windows::Win32::Security::SERVICE_TRIGGER_CUSTOM_STATE_ID CustomStateId;
            _s_e__Struct s;
        };
        _u_e__Union u;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SERVICE_DESCRIPTIONA
    {
        int8_t* lpDescription;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SERVICE_DESCRIPTIONW
    {
        uint16_t* lpDescription;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SC_ACTION
    {
        Windows::Win32::Security::SC_ACTION_TYPE Type;
        uint32_t Delay;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SERVICE_FAILURE_ACTIONSA
    {
        uint32_t dwResetPeriod;
        int8_t* lpRebootMsg;
        int8_t* lpCommand;
        uint32_t cActions;
        Windows::Win32::Security::SC_ACTION* lpsaActions;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SERVICE_FAILURE_ACTIONSW
    {
        uint32_t dwResetPeriod;
        uint16_t* lpRebootMsg;
        uint16_t* lpCommand;
        uint32_t cActions;
        Windows::Win32::Security::SC_ACTION* lpsaActions;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SERVICE_DELAYED_AUTO_START_INFO
    {
        Windows::Win32::SystemServices::BOOL fDelayedAutostart;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SERVICE_FAILURE_ACTIONS_FLAG
    {
        Windows::Win32::SystemServices::BOOL fFailureActionsOnNonCrashFailures;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SERVICE_SID_INFO
    {
        uint32_t dwServiceSidType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SERVICE_REQUIRED_PRIVILEGES_INFOA
    {
        int8_t* pmszRequiredPrivileges;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SERVICE_REQUIRED_PRIVILEGES_INFOW
    {
        uint16_t* pmszRequiredPrivileges;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SERVICE_PRESHUTDOWN_INFO
    {
        uint32_t dwPreshutdownTimeout;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SERVICE_TRIGGER_SPECIFIC_DATA_ITEM
    {
        uint32_t dwDataType;
        uint32_t cbData;
        uint8_t* pData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SERVICE_TRIGGER
    {
        uint32_t dwTriggerType;
        uint32_t dwAction;
        ::win32::guid* pTriggerSubtype;
        uint32_t cDataItems;
        Windows::Win32::Security::SERVICE_TRIGGER_SPECIFIC_DATA_ITEM* pDataItems;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SERVICE_TRIGGER_INFO
    {
        uint32_t cTriggers;
        Windows::Win32::Security::SERVICE_TRIGGER* pTriggers;
        uint8_t* pReserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SERVICE_PREFERRED_NODE_INFO
    {
        uint16_t usPreferredNode;
        uint8_t fDelete;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SERVICE_TIMECHANGE_INFO
    {
        Windows::Win32::SystemServices::LARGE_INTEGER liNewTime;
        Windows::Win32::SystemServices::LARGE_INTEGER liOldTime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SERVICE_LAUNCH_PROTECTED_INFO
    {
        uint32_t dwLaunchProtected;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SC_HANDLE__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SERVICE_STATUS_HANDLE__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SERVICE_STATUS
    {
        uint32_t dwServiceType;
        uint32_t dwCurrentState;
        uint32_t dwControlsAccepted;
        uint32_t dwWin32ExitCode;
        uint32_t dwServiceSpecificExitCode;
        uint32_t dwCheckPoint;
        uint32_t dwWaitHint;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SERVICE_STATUS_PROCESS
    {
        uint32_t dwServiceType;
        uint32_t dwCurrentState;
        uint32_t dwControlsAccepted;
        uint32_t dwWin32ExitCode;
        uint32_t dwServiceSpecificExitCode;
        uint32_t dwCheckPoint;
        uint32_t dwWaitHint;
        uint32_t dwProcessId;
        uint32_t dwServiceFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct ENUM_SERVICE_STATUSA
    {
        int8_t* lpServiceName;
        int8_t* lpDisplayName;
        Windows::Win32::Security::SERVICE_STATUS ServiceStatus;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct ENUM_SERVICE_STATUSW
    {
        uint16_t* lpServiceName;
        uint16_t* lpDisplayName;
        Windows::Win32::Security::SERVICE_STATUS ServiceStatus;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct ENUM_SERVICE_STATUS_PROCESSA
    {
        int8_t* lpServiceName;
        int8_t* lpDisplayName;
        Windows::Win32::Security::SERVICE_STATUS_PROCESS ServiceStatusProcess;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct ENUM_SERVICE_STATUS_PROCESSW
    {
        uint16_t* lpServiceName;
        uint16_t* lpDisplayName;
        Windows::Win32::Security::SERVICE_STATUS_PROCESS ServiceStatusProcess;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct QUERY_SERVICE_LOCK_STATUSA
    {
        uint32_t fIsLocked;
        int8_t* lpLockOwner;
        uint32_t dwLockDuration;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct QUERY_SERVICE_LOCK_STATUSW
    {
        uint32_t fIsLocked;
        uint16_t* lpLockOwner;
        uint32_t dwLockDuration;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct QUERY_SERVICE_CONFIGA
    {
        uint32_t dwServiceType;
        uint32_t dwStartType;
        uint32_t dwErrorControl;
        int8_t* lpBinaryPathName;
        int8_t* lpLoadOrderGroup;
        uint32_t dwTagId;
        int8_t* lpDependencies;
        int8_t* lpServiceStartName;
        int8_t* lpDisplayName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct QUERY_SERVICE_CONFIGW
    {
        uint32_t dwServiceType;
        uint32_t dwStartType;
        uint32_t dwErrorControl;
        uint16_t* lpBinaryPathName;
        uint16_t* lpLoadOrderGroup;
        uint32_t dwTagId;
        uint16_t* lpDependencies;
        uint16_t* lpServiceStartName;
        uint16_t* lpDisplayName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SERVICE_TABLE_ENTRYA
    {
        int8_t* lpServiceName;
        Windows::Win32::Security::LPSERVICE_MAIN_FUNCTIONA* lpServiceProc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SERVICE_TABLE_ENTRYW
    {
        uint16_t* lpServiceName;
        Windows::Win32::Security::LPSERVICE_MAIN_FUNCTIONW* lpServiceProc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SERVICE_NOTIFY_1
    {
        uint32_t dwVersion;
        Windows::Win32::Security::PFN_SC_NOTIFY_CALLBACK* pfnNotifyCallback;
        void* pContext;
        uint32_t dwNotificationStatus;
        Windows::Win32::Security::SERVICE_STATUS_PROCESS ServiceStatus;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SERVICE_NOTIFY_2A
    {
        uint32_t dwVersion;
        Windows::Win32::Security::PFN_SC_NOTIFY_CALLBACK* pfnNotifyCallback;
        void* pContext;
        uint32_t dwNotificationStatus;
        Windows::Win32::Security::SERVICE_STATUS_PROCESS ServiceStatus;
        uint32_t dwNotificationTriggered;
        int8_t* pszServiceNames;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SERVICE_NOTIFY_2W
    {
        uint32_t dwVersion;
        Windows::Win32::Security::PFN_SC_NOTIFY_CALLBACK* pfnNotifyCallback;
        void* pContext;
        uint32_t dwNotificationStatus;
        Windows::Win32::Security::SERVICE_STATUS_PROCESS ServiceStatus;
        uint32_t dwNotificationTriggered;
        uint16_t* pszServiceNames;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SERVICE_CONTROL_STATUS_REASON_PARAMSA
    {
        uint32_t dwReason;
        int8_t* pszComment;
        Windows::Win32::Security::SERVICE_STATUS_PROCESS ServiceStatus;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SERVICE_CONTROL_STATUS_REASON_PARAMSW
    {
        uint32_t dwReason;
        uint16_t* pszComment;
        Windows::Win32::Security::SERVICE_STATUS_PROCESS ServiceStatus;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SERVICE_START_REASON
    {
        uint32_t dwReason;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct _SC_NOTIFICATION_REGISTRATION
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct LSA_TRUST_INFORMATION
    {
        Windows::Win32::Security::UNICODE_STRING Name;
        void* Sid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct LSA_REFERENCED_DOMAIN_LIST
    {
        uint32_t Entries;
        Windows::Win32::Security::LSA_TRUST_INFORMATION* Domains;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct LSA_TRANSLATED_SID2
    {
        Windows::Win32::Security::SID_NAME_USE Use;
        void* Sid;
        int32_t DomainIndex;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct LSA_TRANSLATED_NAME
    {
        Windows::Win32::Security::SID_NAME_USE Use;
        Windows::Win32::Security::UNICODE_STRING Name;
        int32_t DomainIndex;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct POLICY_ACCOUNT_DOMAIN_INFO
    {
        Windows::Win32::Security::UNICODE_STRING DomainName;
        void* DomainSid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct POLICY_DNS_DOMAIN_INFO
    {
        Windows::Win32::Security::UNICODE_STRING Name;
        Windows::Win32::Security::UNICODE_STRING DnsDomainName;
        Windows::Win32::Security::UNICODE_STRING DnsForestName;
        ::win32::guid DomainGuid;
        void* Sid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SE_ADT_OBJECT_TYPE
    {
        ::win32::guid ObjectType;
        uint16_t Flags;
        uint16_t Level;
        uint32_t AccessMask;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SE_ADT_PARAMETER_ARRAY_ENTRY
    {
        Windows::Win32::Security::SE_ADT_PARAMETER_TYPE Type;
        uint32_t Length;
        size_t Data[2];
        void* Address;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SE_ADT_ACCESS_REASON
    {
        uint32_t AccessMask;
        uint32_t AccessReasons[32];
        uint32_t ObjectTypeIndex;
        uint32_t AccessGranted;
        void* SecurityDescriptor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SE_ADT_CLAIMS
    {
        uint32_t Length;
        void* Claims;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SE_ADT_PARAMETER_ARRAY
    {
        uint32_t CategoryId;
        uint32_t AuditId;
        uint32_t ParameterCount;
        uint32_t Length;
        uint16_t FlatSubCategoryId;
        uint16_t Type;
        uint32_t Flags;
        Windows::Win32::Security::SE_ADT_PARAMETER_ARRAY_ENTRY Parameters[32];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SE_ADT_PARAMETER_ARRAY_EX
    {
        uint32_t CategoryId;
        uint32_t AuditId;
        uint32_t Version;
        uint32_t ParameterCount;
        uint32_t Length;
        uint16_t FlatSubCategoryId;
        uint16_t Type;
        uint32_t Flags;
        Windows::Win32::Security::SE_ADT_PARAMETER_ARRAY_ENTRY Parameters[32];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct LSA_TRANSLATED_SID
    {
        Windows::Win32::Security::SID_NAME_USE Use;
        uint32_t RelativeId;
        int32_t DomainIndex;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct POLICY_AUDIT_LOG_INFO
    {
        uint32_t AuditLogPercentFull;
        uint32_t MaximumLogSize;
        Windows::Win32::SystemServices::LARGE_INTEGER AuditRetentionPeriod;
        uint8_t AuditLogFullShutdownInProgress;
        Windows::Win32::SystemServices::LARGE_INTEGER TimeToShutdown;
        uint32_t NextAuditRecordId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct POLICY_AUDIT_EVENTS_INFO
    {
        uint8_t AuditingMode;
        uint32_t* EventAuditingOptions;
        uint32_t MaximumAuditEventCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct POLICY_AUDIT_SUBCATEGORIES_INFO
    {
        uint32_t MaximumSubCategoryCount;
        uint32_t* EventAuditingOptions;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct POLICY_AUDIT_CATEGORIES_INFO
    {
        uint32_t MaximumCategoryCount;
        Windows::Win32::Security::POLICY_AUDIT_SUBCATEGORIES_INFO* SubCategoriesInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct POLICY_PRIMARY_DOMAIN_INFO
    {
        Windows::Win32::Security::UNICODE_STRING Name;
        void* Sid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct POLICY_PD_ACCOUNT_INFO
    {
        Windows::Win32::Security::UNICODE_STRING Name;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct POLICY_LSA_SERVER_ROLE_INFO
    {
        Windows::Win32::Security::POLICY_LSA_SERVER_ROLE LsaServerRole;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct POLICY_REPLICA_SOURCE_INFO
    {
        Windows::Win32::Security::UNICODE_STRING ReplicaSource;
        Windows::Win32::Security::UNICODE_STRING ReplicaAccountName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct POLICY_DEFAULT_QUOTA_INFO
    {
        Windows::Win32::Security::QUOTA_LIMITS QuotaLimits;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct POLICY_MODIFICATION_INFO
    {
        Windows::Win32::SystemServices::LARGE_INTEGER ModifiedId;
        Windows::Win32::SystemServices::LARGE_INTEGER DatabaseCreationTime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct POLICY_AUDIT_FULL_SET_INFO
    {
        uint8_t ShutDownOnFull;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct POLICY_AUDIT_FULL_QUERY_INFO
    {
        uint8_t ShutDownOnFull;
        uint8_t LogIsFull;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct POLICY_DOMAIN_EFS_INFO
    {
        uint32_t InfoLength;
        uint8_t* EfsBlob;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct POLICY_DOMAIN_KERBEROS_TICKET_INFO
    {
        uint32_t AuthenticationOptions;
        Windows::Win32::SystemServices::LARGE_INTEGER MaxServiceTicketAge;
        Windows::Win32::SystemServices::LARGE_INTEGER MaxTicketAge;
        Windows::Win32::SystemServices::LARGE_INTEGER MaxRenewAge;
        Windows::Win32::SystemServices::LARGE_INTEGER MaxClockSkew;
        Windows::Win32::SystemServices::LARGE_INTEGER Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct POLICY_MACHINE_ACCT_INFO
    {
        uint32_t Rid;
        void* Sid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct TRUSTED_DOMAIN_NAME_INFO
    {
        Windows::Win32::Security::UNICODE_STRING Name;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct TRUSTED_CONTROLLERS_INFO
    {
        uint32_t Entries;
        Windows::Win32::Security::UNICODE_STRING* Names;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct TRUSTED_POSIX_OFFSET_INFO
    {
        uint32_t Offset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct TRUSTED_PASSWORD_INFO
    {
        Windows::Win32::Security::UNICODE_STRING Password;
        Windows::Win32::Security::UNICODE_STRING OldPassword;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct TRUSTED_DOMAIN_INFORMATION_EX
    {
        Windows::Win32::Security::UNICODE_STRING Name;
        Windows::Win32::Security::UNICODE_STRING FlatName;
        void* Sid;
        uint32_t TrustDirection;
        uint32_t TrustType;
        uint32_t TrustAttributes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct TRUSTED_DOMAIN_INFORMATION_EX2
    {
        Windows::Win32::Security::UNICODE_STRING Name;
        Windows::Win32::Security::UNICODE_STRING FlatName;
        void* Sid;
        uint32_t TrustDirection;
        uint32_t TrustType;
        uint32_t TrustAttributes;
        uint32_t ForestTrustLength;
        uint8_t* ForestTrustInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct LSA_AUTH_INFORMATION
    {
        Windows::Win32::SystemServices::LARGE_INTEGER LastUpdateTime;
        uint32_t AuthType;
        uint32_t AuthInfoLength;
        uint8_t* AuthInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct TRUSTED_DOMAIN_AUTH_INFORMATION
    {
        uint32_t IncomingAuthInfos;
        Windows::Win32::Security::LSA_AUTH_INFORMATION* IncomingAuthenticationInformation;
        Windows::Win32::Security::LSA_AUTH_INFORMATION* IncomingPreviousAuthenticationInformation;
        uint32_t OutgoingAuthInfos;
        Windows::Win32::Security::LSA_AUTH_INFORMATION* OutgoingAuthenticationInformation;
        Windows::Win32::Security::LSA_AUTH_INFORMATION* OutgoingPreviousAuthenticationInformation;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct TRUSTED_DOMAIN_FULL_INFORMATION
    {
        Windows::Win32::Security::TRUSTED_DOMAIN_INFORMATION_EX Information;
        Windows::Win32::Security::TRUSTED_POSIX_OFFSET_INFO PosixOffset;
        Windows::Win32::Security::TRUSTED_DOMAIN_AUTH_INFORMATION AuthInformation;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct TRUSTED_DOMAIN_FULL_INFORMATION2
    {
        Windows::Win32::Security::TRUSTED_DOMAIN_INFORMATION_EX2 Information;
        Windows::Win32::Security::TRUSTED_POSIX_OFFSET_INFO PosixOffset;
        Windows::Win32::Security::TRUSTED_DOMAIN_AUTH_INFORMATION AuthInformation;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct TRUSTED_DOMAIN_SUPPORTED_ENCRYPTION_TYPES
    {
        uint32_t SupportedEncryptionTypes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct LSA_FOREST_TRUST_DOMAIN_INFO
    {
        void* Sid;
        Windows::Win32::Security::UNICODE_STRING DnsName;
        Windows::Win32::Security::UNICODE_STRING NetbiosName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct LSA_FOREST_TRUST_BINARY_DATA
    {
        uint32_t Length;
        uint8_t* Buffer;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct LSA_FOREST_TRUST_RECORD
    {
        union _ForestTrustData_e__Union
        {
            Windows::Win32::Security::UNICODE_STRING TopLevelName;
            Windows::Win32::Security::LSA_FOREST_TRUST_DOMAIN_INFO DomainInfo;
            Windows::Win32::Security::LSA_FOREST_TRUST_BINARY_DATA Data;
        };
        uint32_t Flags;
        Windows::Win32::Security::LSA_FOREST_TRUST_RECORD_TYPE ForestTrustType;
        Windows::Win32::SystemServices::LARGE_INTEGER Time;
        _ForestTrustData_e__Union ForestTrustData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct LSA_FOREST_TRUST_INFORMATION
    {
        uint32_t RecordCount;
        Windows::Win32::Security::LSA_FOREST_TRUST_RECORD** Entries;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct LSA_FOREST_TRUST_COLLISION_RECORD
    {
        uint32_t Index;
        Windows::Win32::Security::LSA_FOREST_TRUST_COLLISION_RECORD_TYPE Type;
        uint32_t Flags;
        Windows::Win32::Security::UNICODE_STRING Name;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct LSA_FOREST_TRUST_COLLISION_INFORMATION
    {
        uint32_t RecordCount;
        Windows::Win32::Security::LSA_FOREST_TRUST_COLLISION_RECORD** Entries;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct LSA_ENUMERATION_INFORMATION
    {
        void* Sid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct LSA_LAST_INTER_LOGON_INFO
    {
        Windows::Win32::SystemServices::LARGE_INTEGER LastSuccessfulLogon;
        Windows::Win32::SystemServices::LARGE_INTEGER LastFailedLogon;
        uint32_t FailedAttemptCountSinceLastSuccessfulLogon;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SECURITY_LOGON_SESSION_DATA
    {
        uint32_t Size;
        Windows::Win32::Kernel::LUID LogonId;
        Windows::Win32::Security::UNICODE_STRING UserName;
        Windows::Win32::Security::UNICODE_STRING LogonDomain;
        Windows::Win32::Security::UNICODE_STRING AuthenticationPackage;
        uint32_t LogonType;
        uint32_t Session;
        void* Sid;
        Windows::Win32::SystemServices::LARGE_INTEGER LogonTime;
        Windows::Win32::Security::UNICODE_STRING LogonServer;
        Windows::Win32::Security::UNICODE_STRING DnsDomainName;
        Windows::Win32::Security::UNICODE_STRING Upn;
        uint32_t UserFlags;
        Windows::Win32::Security::LSA_LAST_INTER_LOGON_INFO LastLogonInfo;
        Windows::Win32::Security::UNICODE_STRING LogonScript;
        Windows::Win32::Security::UNICODE_STRING ProfilePath;
        Windows::Win32::Security::UNICODE_STRING HomeDirectory;
        Windows::Win32::Security::UNICODE_STRING HomeDirectoryDrive;
        Windows::Win32::SystemServices::LARGE_INTEGER LogoffTime;
        Windows::Win32::SystemServices::LARGE_INTEGER KickOffTime;
        Windows::Win32::SystemServices::LARGE_INTEGER PasswordLastSet;
        Windows::Win32::SystemServices::LARGE_INTEGER PasswordCanChange;
        Windows::Win32::SystemServices::LARGE_INTEGER PasswordMustChange;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CENTRAL_ACCESS_POLICY_ENTRY
    {
        Windows::Win32::Security::UNICODE_STRING Name;
        Windows::Win32::Security::UNICODE_STRING Description;
        Windows::Win32::Security::UNICODE_STRING ChangeId;
        uint32_t LengthAppliesTo;
        uint8_t* AppliesTo;
        uint32_t LengthSD;
        void* SD;
        uint32_t LengthStagedSD;
        void* StagedSD;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CENTRAL_ACCESS_POLICY
    {
        void* CAPID;
        Windows::Win32::Security::UNICODE_STRING Name;
        Windows::Win32::Security::UNICODE_STRING Description;
        Windows::Win32::Security::UNICODE_STRING ChangeId;
        uint32_t Flags;
        uint32_t CAPECount;
        Windows::Win32::Security::CENTRAL_ACCESS_POLICY_ENTRY** CAPEs;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct NEGOTIATE_PACKAGE_PREFIX
    {
        size_t PackageId;
        void* PackageDataA;
        void* PackageDataW;
        size_t PrefixLen;
        uint8_t Prefix[32];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct NEGOTIATE_PACKAGE_PREFIXES
    {
        uint32_t MessageType;
        uint32_t PrefixCount;
        uint32_t Offset;
        uint32_t Pad;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct NEGOTIATE_CALLER_NAME_REQUEST
    {
        uint32_t MessageType;
        Windows::Win32::Kernel::LUID LogonId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct NEGOTIATE_CALLER_NAME_RESPONSE
    {
        uint32_t MessageType;
        uint16_t* CallerName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct DOMAIN_PASSWORD_INFORMATION
    {
        uint16_t MinPasswordLength;
        uint16_t PasswordHistoryLength;
        uint32_t PasswordProperties;
        Windows::Win32::SystemServices::LARGE_INTEGER MaxPasswordAge;
        Windows::Win32::SystemServices::LARGE_INTEGER MinPasswordAge;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct MSV1_0_INTERACTIVE_LOGON
    {
        Windows::Win32::Security::MSV1_0_LOGON_SUBMIT_TYPE MessageType;
        Windows::Win32::Security::UNICODE_STRING LogonDomainName;
        Windows::Win32::Security::UNICODE_STRING UserName;
        Windows::Win32::Security::UNICODE_STRING Password;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct MSV1_0_INTERACTIVE_PROFILE
    {
        Windows::Win32::Security::MSV1_0_PROFILE_BUFFER_TYPE MessageType;
        uint16_t LogonCount;
        uint16_t BadPasswordCount;
        Windows::Win32::SystemServices::LARGE_INTEGER LogonTime;
        Windows::Win32::SystemServices::LARGE_INTEGER LogoffTime;
        Windows::Win32::SystemServices::LARGE_INTEGER KickOffTime;
        Windows::Win32::SystemServices::LARGE_INTEGER PasswordLastSet;
        Windows::Win32::SystemServices::LARGE_INTEGER PasswordCanChange;
        Windows::Win32::SystemServices::LARGE_INTEGER PasswordMustChange;
        Windows::Win32::Security::UNICODE_STRING LogonScript;
        Windows::Win32::Security::UNICODE_STRING HomeDirectory;
        Windows::Win32::Security::UNICODE_STRING FullName;
        Windows::Win32::Security::UNICODE_STRING ProfilePath;
        Windows::Win32::Security::UNICODE_STRING HomeDirectoryDrive;
        Windows::Win32::Security::UNICODE_STRING LogonServer;
        uint32_t UserFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct MSV1_0_LM20_LOGON
    {
        Windows::Win32::Security::MSV1_0_LOGON_SUBMIT_TYPE MessageType;
        Windows::Win32::Security::UNICODE_STRING LogonDomainName;
        Windows::Win32::Security::UNICODE_STRING UserName;
        Windows::Win32::Security::UNICODE_STRING Workstation;
        uint8_t ChallengeToClient[8];
        Windows::Win32::WindowsProgramming::STRING CaseSensitiveChallengeResponse;
        Windows::Win32::WindowsProgramming::STRING CaseInsensitiveChallengeResponse;
        uint32_t ParameterControl;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct MSV1_0_SUBAUTH_LOGON
    {
        Windows::Win32::Security::MSV1_0_LOGON_SUBMIT_TYPE MessageType;
        Windows::Win32::Security::UNICODE_STRING LogonDomainName;
        Windows::Win32::Security::UNICODE_STRING UserName;
        Windows::Win32::Security::UNICODE_STRING Workstation;
        uint8_t ChallengeToClient[8];
        Windows::Win32::WindowsProgramming::STRING AuthenticationInfo1;
        Windows::Win32::WindowsProgramming::STRING AuthenticationInfo2;
        uint32_t ParameterControl;
        uint32_t SubAuthPackageId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct MSV1_0_S4U_LOGON
    {
        Windows::Win32::Security::MSV1_0_LOGON_SUBMIT_TYPE MessageType;
        uint32_t Flags;
        Windows::Win32::Security::UNICODE_STRING UserPrincipalName;
        Windows::Win32::Security::UNICODE_STRING DomainName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct MSV1_0_LM20_LOGON_PROFILE
    {
        Windows::Win32::Security::MSV1_0_PROFILE_BUFFER_TYPE MessageType;
        Windows::Win32::SystemServices::LARGE_INTEGER KickOffTime;
        Windows::Win32::SystemServices::LARGE_INTEGER LogoffTime;
        uint32_t UserFlags;
        uint8_t UserSessionKey[16];
        Windows::Win32::Security::UNICODE_STRING LogonDomainName;
        uint8_t LanmanSessionKey[8];
        Windows::Win32::Security::UNICODE_STRING LogonServer;
        Windows::Win32::Security::UNICODE_STRING UserParameters;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct MSV1_0_CREDENTIAL_KEY
    {
        uint8_t Data[20];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct MSV1_0_SUPPLEMENTAL_CREDENTIAL
    {
        uint32_t Version;
        uint32_t Flags;
        uint8_t LmPassword[16];
        uint8_t NtPassword[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct MSV1_0_SUPPLEMENTAL_CREDENTIAL_V2
    {
        uint32_t Version;
        uint32_t Flags;
        uint8_t NtPassword[16];
        Windows::Win32::Security::MSV1_0_CREDENTIAL_KEY CredentialKey;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct MSV1_0_SUPPLEMENTAL_CREDENTIAL_V3
    {
        uint32_t Version;
        uint32_t Flags;
        Windows::Win32::Security::MSV1_0_CREDENTIAL_KEY_TYPE CredentialKeyType;
        uint8_t NtPassword[16];
        Windows::Win32::Security::MSV1_0_CREDENTIAL_KEY CredentialKey;
        uint8_t ShaPassword[20];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct MSV1_0_IUM_SUPPLEMENTAL_CREDENTIAL
    {
        uint32_t Version;
        uint32_t EncryptedCredsSize;
        uint8_t EncryptedCreds[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct MSV1_0_REMOTE_SUPPLEMENTAL_CREDENTIAL
    {
        uint32_t Version;
        uint32_t Flags;
        Windows::Win32::Security::MSV1_0_CREDENTIAL_KEY CredentialKey;
        Windows::Win32::Security::MSV1_0_CREDENTIAL_KEY_TYPE CredentialKeyType;
        uint32_t EncryptedCredsSize;
        uint8_t EncryptedCreds[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct MSV1_0_NTLM3_RESPONSE
    {
        uint8_t Response[16];
        uint8_t RespType;
        uint8_t HiRespType;
        uint16_t Flags;
        uint32_t MsgWord;
        uint64_t TimeStamp;
        uint8_t ChallengeFromClient[8];
        uint32_t AvPairsOff;
        uint8_t Buffer[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct MSV1_0_AV_PAIR
    {
        uint16_t AvId;
        uint16_t AvLen;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct MSV1_0_CHANGEPASSWORD_REQUEST
    {
        Windows::Win32::Security::MSV1_0_PROTOCOL_MESSAGE_TYPE MessageType;
        Windows::Win32::Security::UNICODE_STRING DomainName;
        Windows::Win32::Security::UNICODE_STRING AccountName;
        Windows::Win32::Security::UNICODE_STRING OldPassword;
        Windows::Win32::Security::UNICODE_STRING NewPassword;
        uint8_t Impersonating;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct MSV1_0_CHANGEPASSWORD_RESPONSE
    {
        Windows::Win32::Security::MSV1_0_PROTOCOL_MESSAGE_TYPE MessageType;
        uint8_t PasswordInfoValid;
        Windows::Win32::Security::DOMAIN_PASSWORD_INFORMATION DomainPasswordInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct MSV1_0_PASSTHROUGH_REQUEST
    {
        Windows::Win32::Security::MSV1_0_PROTOCOL_MESSAGE_TYPE MessageType;
        Windows::Win32::Security::UNICODE_STRING DomainName;
        Windows::Win32::Security::UNICODE_STRING PackageName;
        uint32_t DataLength;
        uint8_t* LogonData;
        uint32_t Pad;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct MSV1_0_PASSTHROUGH_RESPONSE
    {
        Windows::Win32::Security::MSV1_0_PROTOCOL_MESSAGE_TYPE MessageType;
        uint32_t Pad;
        uint32_t DataLength;
        uint8_t* ValidationData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct MSV1_0_SUBAUTH_REQUEST
    {
        Windows::Win32::Security::MSV1_0_PROTOCOL_MESSAGE_TYPE MessageType;
        uint32_t SubAuthPackageId;
        uint32_t SubAuthInfoLength;
        uint8_t* SubAuthSubmitBuffer;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct MSV1_0_SUBAUTH_RESPONSE
    {
        Windows::Win32::Security::MSV1_0_PROTOCOL_MESSAGE_TYPE MessageType;
        uint32_t SubAuthInfoLength;
        uint8_t* SubAuthReturnBuffer;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_INTERACTIVE_LOGON
    {
        Windows::Win32::Security::KERB_LOGON_SUBMIT_TYPE MessageType;
        Windows::Win32::Security::UNICODE_STRING LogonDomainName;
        Windows::Win32::Security::UNICODE_STRING UserName;
        Windows::Win32::Security::UNICODE_STRING Password;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_INTERACTIVE_UNLOCK_LOGON
    {
        Windows::Win32::Security::KERB_INTERACTIVE_LOGON Logon;
        Windows::Win32::Kernel::LUID LogonId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_SMART_CARD_LOGON
    {
        Windows::Win32::Security::KERB_LOGON_SUBMIT_TYPE MessageType;
        Windows::Win32::Security::UNICODE_STRING Pin;
        uint32_t CspDataLength;
        uint8_t* CspData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_SMART_CARD_UNLOCK_LOGON
    {
        Windows::Win32::Security::KERB_SMART_CARD_LOGON Logon;
        Windows::Win32::Kernel::LUID LogonId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_CERTIFICATE_LOGON
    {
        Windows::Win32::Security::KERB_LOGON_SUBMIT_TYPE MessageType;
        Windows::Win32::Security::UNICODE_STRING DomainName;
        Windows::Win32::Security::UNICODE_STRING UserName;
        Windows::Win32::Security::UNICODE_STRING Pin;
        uint32_t Flags;
        uint32_t CspDataLength;
        uint8_t* CspData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_CERTIFICATE_UNLOCK_LOGON
    {
        Windows::Win32::Security::KERB_CERTIFICATE_LOGON Logon;
        Windows::Win32::Kernel::LUID LogonId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_CERTIFICATE_S4U_LOGON
    {
        Windows::Win32::Security::KERB_LOGON_SUBMIT_TYPE MessageType;
        uint32_t Flags;
        Windows::Win32::Security::UNICODE_STRING UserPrincipalName;
        Windows::Win32::Security::UNICODE_STRING DomainName;
        uint32_t CertificateLength;
        uint8_t* Certificate;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_TICKET_LOGON
    {
        Windows::Win32::Security::KERB_LOGON_SUBMIT_TYPE MessageType;
        uint32_t Flags;
        uint32_t ServiceTicketLength;
        uint32_t TicketGrantingTicketLength;
        uint8_t* ServiceTicket;
        uint8_t* TicketGrantingTicket;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_TICKET_UNLOCK_LOGON
    {
        Windows::Win32::Security::KERB_TICKET_LOGON Logon;
        Windows::Win32::Kernel::LUID LogonId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_S4U_LOGON
    {
        Windows::Win32::Security::KERB_LOGON_SUBMIT_TYPE MessageType;
        uint32_t Flags;
        Windows::Win32::Security::UNICODE_STRING ClientUpn;
        Windows::Win32::Security::UNICODE_STRING ClientRealm;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_INTERACTIVE_PROFILE
    {
        Windows::Win32::Security::KERB_PROFILE_BUFFER_TYPE MessageType;
        uint16_t LogonCount;
        uint16_t BadPasswordCount;
        Windows::Win32::SystemServices::LARGE_INTEGER LogonTime;
        Windows::Win32::SystemServices::LARGE_INTEGER LogoffTime;
        Windows::Win32::SystemServices::LARGE_INTEGER KickOffTime;
        Windows::Win32::SystemServices::LARGE_INTEGER PasswordLastSet;
        Windows::Win32::SystemServices::LARGE_INTEGER PasswordCanChange;
        Windows::Win32::SystemServices::LARGE_INTEGER PasswordMustChange;
        Windows::Win32::Security::UNICODE_STRING LogonScript;
        Windows::Win32::Security::UNICODE_STRING HomeDirectory;
        Windows::Win32::Security::UNICODE_STRING FullName;
        Windows::Win32::Security::UNICODE_STRING ProfilePath;
        Windows::Win32::Security::UNICODE_STRING HomeDirectoryDrive;
        Windows::Win32::Security::UNICODE_STRING LogonServer;
        uint32_t UserFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_SMART_CARD_PROFILE
    {
        Windows::Win32::Security::KERB_INTERACTIVE_PROFILE Profile;
        uint32_t CertificateSize;
        uint8_t* CertificateData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_CRYPTO_KEY
    {
        int32_t KeyType;
        uint32_t Length;
        uint8_t* Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_CRYPTO_KEY32
    {
        int32_t KeyType;
        uint32_t Length;
        uint32_t Offset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_TICKET_PROFILE
    {
        Windows::Win32::Security::KERB_INTERACTIVE_PROFILE Profile;
        Windows::Win32::Security::KERB_CRYPTO_KEY SessionKey;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_QUERY_TKT_CACHE_REQUEST
    {
        Windows::Win32::Security::KERB_PROTOCOL_MESSAGE_TYPE MessageType;
        Windows::Win32::Kernel::LUID LogonId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_TICKET_CACHE_INFO
    {
        Windows::Win32::Security::UNICODE_STRING ServerName;
        Windows::Win32::Security::UNICODE_STRING RealmName;
        Windows::Win32::SystemServices::LARGE_INTEGER StartTime;
        Windows::Win32::SystemServices::LARGE_INTEGER EndTime;
        Windows::Win32::SystemServices::LARGE_INTEGER RenewTime;
        int32_t EncryptionType;
        uint32_t TicketFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_TICKET_CACHE_INFO_EX
    {
        Windows::Win32::Security::UNICODE_STRING ClientName;
        Windows::Win32::Security::UNICODE_STRING ClientRealm;
        Windows::Win32::Security::UNICODE_STRING ServerName;
        Windows::Win32::Security::UNICODE_STRING ServerRealm;
        Windows::Win32::SystemServices::LARGE_INTEGER StartTime;
        Windows::Win32::SystemServices::LARGE_INTEGER EndTime;
        Windows::Win32::SystemServices::LARGE_INTEGER RenewTime;
        int32_t EncryptionType;
        uint32_t TicketFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_TICKET_CACHE_INFO_EX2
    {
        Windows::Win32::Security::UNICODE_STRING ClientName;
        Windows::Win32::Security::UNICODE_STRING ClientRealm;
        Windows::Win32::Security::UNICODE_STRING ServerName;
        Windows::Win32::Security::UNICODE_STRING ServerRealm;
        Windows::Win32::SystemServices::LARGE_INTEGER StartTime;
        Windows::Win32::SystemServices::LARGE_INTEGER EndTime;
        Windows::Win32::SystemServices::LARGE_INTEGER RenewTime;
        int32_t EncryptionType;
        uint32_t TicketFlags;
        uint32_t SessionKeyType;
        uint32_t BranchId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_TICKET_CACHE_INFO_EX3
    {
        Windows::Win32::Security::UNICODE_STRING ClientName;
        Windows::Win32::Security::UNICODE_STRING ClientRealm;
        Windows::Win32::Security::UNICODE_STRING ServerName;
        Windows::Win32::Security::UNICODE_STRING ServerRealm;
        Windows::Win32::SystemServices::LARGE_INTEGER StartTime;
        Windows::Win32::SystemServices::LARGE_INTEGER EndTime;
        Windows::Win32::SystemServices::LARGE_INTEGER RenewTime;
        int32_t EncryptionType;
        uint32_t TicketFlags;
        uint32_t SessionKeyType;
        uint32_t BranchId;
        uint32_t CacheFlags;
        Windows::Win32::Security::UNICODE_STRING KdcCalled;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_QUERY_TKT_CACHE_RESPONSE
    {
        Windows::Win32::Security::KERB_PROTOCOL_MESSAGE_TYPE MessageType;
        uint32_t CountOfTickets;
        Windows::Win32::Security::KERB_TICKET_CACHE_INFO Tickets[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_QUERY_TKT_CACHE_EX_RESPONSE
    {
        Windows::Win32::Security::KERB_PROTOCOL_MESSAGE_TYPE MessageType;
        uint32_t CountOfTickets;
        Windows::Win32::Security::KERB_TICKET_CACHE_INFO_EX Tickets[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_QUERY_TKT_CACHE_EX2_RESPONSE
    {
        Windows::Win32::Security::KERB_PROTOCOL_MESSAGE_TYPE MessageType;
        uint32_t CountOfTickets;
        Windows::Win32::Security::KERB_TICKET_CACHE_INFO_EX2 Tickets[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_QUERY_TKT_CACHE_EX3_RESPONSE
    {
        Windows::Win32::Security::KERB_PROTOCOL_MESSAGE_TYPE MessageType;
        uint32_t CountOfTickets;
        Windows::Win32::Security::KERB_TICKET_CACHE_INFO_EX3 Tickets[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecHandle
    {
        size_t dwLower;
        size_t dwUpper;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_AUTH_DATA
    {
        uint32_t Type;
        uint32_t Length;
        uint8_t* Data;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_NET_ADDRESS
    {
        uint32_t Family;
        uint32_t Length;
        int8_t* Address;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_NET_ADDRESSES
    {
        uint32_t Number;
        Windows::Win32::Security::KERB_NET_ADDRESS Addresses[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_EXTERNAL_NAME
    {
        int16_t NameType;
        uint16_t NameCount;
        Windows::Win32::Security::UNICODE_STRING Names[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_EXTERNAL_TICKET
    {
        Windows::Win32::Security::KERB_EXTERNAL_NAME* ServiceName;
        Windows::Win32::Security::KERB_EXTERNAL_NAME* TargetName;
        Windows::Win32::Security::KERB_EXTERNAL_NAME* ClientName;
        Windows::Win32::Security::UNICODE_STRING DomainName;
        Windows::Win32::Security::UNICODE_STRING TargetDomainName;
        Windows::Win32::Security::UNICODE_STRING AltTargetDomainName;
        Windows::Win32::Security::KERB_CRYPTO_KEY SessionKey;
        uint32_t TicketFlags;
        uint32_t Flags;
        Windows::Win32::SystemServices::LARGE_INTEGER KeyExpirationTime;
        Windows::Win32::SystemServices::LARGE_INTEGER StartTime;
        Windows::Win32::SystemServices::LARGE_INTEGER EndTime;
        Windows::Win32::SystemServices::LARGE_INTEGER RenewUntil;
        Windows::Win32::SystemServices::LARGE_INTEGER TimeSkew;
        uint32_t EncodedTicketSize;
        uint8_t* EncodedTicket;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_RETRIEVE_TKT_REQUEST
    {
        Windows::Win32::Security::KERB_PROTOCOL_MESSAGE_TYPE MessageType;
        Windows::Win32::Kernel::LUID LogonId;
        Windows::Win32::Security::UNICODE_STRING TargetName;
        uint32_t TicketFlags;
        uint32_t CacheOptions;
        int32_t EncryptionType;
        Windows::Win32::Security::SecHandle CredentialsHandle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_RETRIEVE_TKT_RESPONSE
    {
        Windows::Win32::Security::KERB_EXTERNAL_TICKET Ticket;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_PURGE_TKT_CACHE_REQUEST
    {
        Windows::Win32::Security::KERB_PROTOCOL_MESSAGE_TYPE MessageType;
        Windows::Win32::Kernel::LUID LogonId;
        Windows::Win32::Security::UNICODE_STRING ServerName;
        Windows::Win32::Security::UNICODE_STRING RealmName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_PURGE_TKT_CACHE_EX_REQUEST
    {
        Windows::Win32::Security::KERB_PROTOCOL_MESSAGE_TYPE MessageType;
        Windows::Win32::Kernel::LUID LogonId;
        uint32_t Flags;
        Windows::Win32::Security::KERB_TICKET_CACHE_INFO_EX TicketTemplate;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_SUBMIT_TKT_REQUEST
    {
        Windows::Win32::Security::KERB_PROTOCOL_MESSAGE_TYPE MessageType;
        Windows::Win32::Kernel::LUID LogonId;
        uint32_t Flags;
        Windows::Win32::Security::KERB_CRYPTO_KEY32 Key;
        uint32_t KerbCredSize;
        uint32_t KerbCredOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_QUERY_KDC_PROXY_CACHE_REQUEST
    {
        Windows::Win32::Security::KERB_PROTOCOL_MESSAGE_TYPE MessageType;
        uint32_t Flags;
        Windows::Win32::Kernel::LUID LogonId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KDC_PROXY_CACHE_ENTRY_DATA
    {
        uint64_t SinceLastUsed;
        Windows::Win32::Security::UNICODE_STRING DomainName;
        Windows::Win32::Security::UNICODE_STRING ProxyServerName;
        Windows::Win32::Security::UNICODE_STRING ProxyServerVdir;
        uint16_t ProxyServerPort;
        Windows::Win32::Kernel::LUID LogonId;
        Windows::Win32::Security::UNICODE_STRING CredUserName;
        Windows::Win32::Security::UNICODE_STRING CredDomainName;
        uint8_t GlobalCache;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_QUERY_KDC_PROXY_CACHE_RESPONSE
    {
        Windows::Win32::Security::KERB_PROTOCOL_MESSAGE_TYPE MessageType;
        uint32_t CountOfEntries;
        Windows::Win32::Security::KDC_PROXY_CACHE_ENTRY_DATA* Entries;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_PURGE_KDC_PROXY_CACHE_REQUEST
    {
        Windows::Win32::Security::KERB_PROTOCOL_MESSAGE_TYPE MessageType;
        uint32_t Flags;
        Windows::Win32::Kernel::LUID LogonId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_PURGE_KDC_PROXY_CACHE_RESPONSE
    {
        Windows::Win32::Security::KERB_PROTOCOL_MESSAGE_TYPE MessageType;
        uint32_t CountOfPurged;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_S4U2PROXY_CACHE_ENTRY_INFO
    {
        Windows::Win32::Security::UNICODE_STRING ServerName;
        uint32_t Flags;
        Windows::Win32::SystemServices::NTSTATUS LastStatus;
        Windows::Win32::SystemServices::LARGE_INTEGER Expiry;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_S4U2PROXY_CRED
    {
        Windows::Win32::Security::UNICODE_STRING UserName;
        Windows::Win32::Security::UNICODE_STRING DomainName;
        uint32_t Flags;
        Windows::Win32::SystemServices::NTSTATUS LastStatus;
        Windows::Win32::SystemServices::LARGE_INTEGER Expiry;
        uint32_t CountOfEntries;
        Windows::Win32::Security::KERB_S4U2PROXY_CACHE_ENTRY_INFO* Entries;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_QUERY_S4U2PROXY_CACHE_REQUEST
    {
        Windows::Win32::Security::KERB_PROTOCOL_MESSAGE_TYPE MessageType;
        uint32_t Flags;
        Windows::Win32::Kernel::LUID LogonId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_QUERY_S4U2PROXY_CACHE_RESPONSE
    {
        Windows::Win32::Security::KERB_PROTOCOL_MESSAGE_TYPE MessageType;
        uint32_t CountOfCreds;
        Windows::Win32::Security::KERB_S4U2PROXY_CRED* Creds;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_RETRIEVE_KEY_TAB_REQUEST
    {
        Windows::Win32::Security::KERB_PROTOCOL_MESSAGE_TYPE MessageType;
        uint32_t Flags;
        Windows::Win32::Security::UNICODE_STRING UserName;
        Windows::Win32::Security::UNICODE_STRING DomainName;
        Windows::Win32::Security::UNICODE_STRING Password;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_RETRIEVE_KEY_TAB_RESPONSE
    {
        Windows::Win32::Security::KERB_PROTOCOL_MESSAGE_TYPE MessageType;
        uint32_t KeyTabLength;
        uint8_t* KeyTab;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_CHANGEPASSWORD_REQUEST
    {
        Windows::Win32::Security::KERB_PROTOCOL_MESSAGE_TYPE MessageType;
        Windows::Win32::Security::UNICODE_STRING DomainName;
        Windows::Win32::Security::UNICODE_STRING AccountName;
        Windows::Win32::Security::UNICODE_STRING OldPassword;
        Windows::Win32::Security::UNICODE_STRING NewPassword;
        uint8_t Impersonating;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_SETPASSWORD_REQUEST
    {
        Windows::Win32::Security::KERB_PROTOCOL_MESSAGE_TYPE MessageType;
        Windows::Win32::Kernel::LUID LogonId;
        Windows::Win32::Security::SecHandle CredentialsHandle;
        uint32_t Flags;
        Windows::Win32::Security::UNICODE_STRING DomainName;
        Windows::Win32::Security::UNICODE_STRING AccountName;
        Windows::Win32::Security::UNICODE_STRING Password;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_SETPASSWORD_EX_REQUEST
    {
        Windows::Win32::Security::KERB_PROTOCOL_MESSAGE_TYPE MessageType;
        Windows::Win32::Kernel::LUID LogonId;
        Windows::Win32::Security::SecHandle CredentialsHandle;
        uint32_t Flags;
        Windows::Win32::Security::UNICODE_STRING AccountRealm;
        Windows::Win32::Security::UNICODE_STRING AccountName;
        Windows::Win32::Security::UNICODE_STRING Password;
        Windows::Win32::Security::UNICODE_STRING ClientRealm;
        Windows::Win32::Security::UNICODE_STRING ClientName;
        uint8_t Impersonating;
        Windows::Win32::Security::UNICODE_STRING KdcAddress;
        uint32_t KdcAddressType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_DECRYPT_REQUEST
    {
        Windows::Win32::Security::KERB_PROTOCOL_MESSAGE_TYPE MessageType;
        Windows::Win32::Kernel::LUID LogonId;
        uint32_t Flags;
        int32_t CryptoType;
        int32_t KeyUsage;
        Windows::Win32::Security::KERB_CRYPTO_KEY Key;
        uint32_t EncryptedDataSize;
        uint32_t InitialVectorSize;
        uint8_t* InitialVector;
        uint8_t* EncryptedData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_DECRYPT_RESPONSE
    {
        uint8_t DecryptedData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_ADD_BINDING_CACHE_ENTRY_REQUEST
    {
        Windows::Win32::Security::KERB_PROTOCOL_MESSAGE_TYPE MessageType;
        Windows::Win32::Security::UNICODE_STRING RealmName;
        Windows::Win32::Security::UNICODE_STRING KdcAddress;
        uint32_t AddressType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_REFRESH_SCCRED_REQUEST
    {
        Windows::Win32::Security::KERB_PROTOCOL_MESSAGE_TYPE MessageType;
        Windows::Win32::Security::UNICODE_STRING CredentialBlob;
        Windows::Win32::Kernel::LUID LogonId;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_ADD_CREDENTIALS_REQUEST
    {
        Windows::Win32::Security::KERB_PROTOCOL_MESSAGE_TYPE MessageType;
        Windows::Win32::Security::UNICODE_STRING UserName;
        Windows::Win32::Security::UNICODE_STRING DomainName;
        Windows::Win32::Security::UNICODE_STRING Password;
        Windows::Win32::Kernel::LUID LogonId;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_ADD_CREDENTIALS_REQUEST_EX
    {
        Windows::Win32::Security::KERB_ADD_CREDENTIALS_REQUEST Credentials;
        uint32_t PrincipalNameCount;
        Windows::Win32::Security::UNICODE_STRING PrincipalNames[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_TRANSFER_CRED_REQUEST
    {
        Windows::Win32::Security::KERB_PROTOCOL_MESSAGE_TYPE MessageType;
        Windows::Win32::Kernel::LUID OriginLogonId;
        Windows::Win32::Kernel::LUID DestinationLogonId;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_CLEANUP_MACHINE_PKINIT_CREDS_REQUEST
    {
        Windows::Win32::Security::KERB_PROTOCOL_MESSAGE_TYPE MessageType;
        Windows::Win32::Kernel::LUID LogonId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_BINDING_CACHE_ENTRY_DATA
    {
        uint64_t DiscoveryTime;
        Windows::Win32::Security::UNICODE_STRING RealmName;
        Windows::Win32::Security::UNICODE_STRING KdcAddress;
        uint32_t AddressType;
        uint32_t Flags;
        uint32_t DcFlags;
        uint32_t CacheFlags;
        Windows::Win32::Security::UNICODE_STRING KdcName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_QUERY_BINDING_CACHE_RESPONSE
    {
        Windows::Win32::Security::KERB_PROTOCOL_MESSAGE_TYPE MessageType;
        uint32_t CountOfEntries;
        Windows::Win32::Security::KERB_BINDING_CACHE_ENTRY_DATA* Entries;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_ADD_BINDING_CACHE_ENTRY_EX_REQUEST
    {
        Windows::Win32::Security::KERB_PROTOCOL_MESSAGE_TYPE MessageType;
        Windows::Win32::Security::UNICODE_STRING RealmName;
        Windows::Win32::Security::UNICODE_STRING KdcAddress;
        uint32_t AddressType;
        uint32_t DcFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_QUERY_BINDING_CACHE_REQUEST
    {
        Windows::Win32::Security::KERB_PROTOCOL_MESSAGE_TYPE MessageType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_PURGE_BINDING_CACHE_REQUEST
    {
        Windows::Win32::Security::KERB_PROTOCOL_MESSAGE_TYPE MessageType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_QUERY_DOMAIN_EXTENDED_POLICIES_REQUEST
    {
        Windows::Win32::Security::KERB_PROTOCOL_MESSAGE_TYPE MessageType;
        uint32_t Flags;
        Windows::Win32::Security::UNICODE_STRING DomainName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_QUERY_DOMAIN_EXTENDED_POLICIES_RESPONSE
    {
        Windows::Win32::Security::KERB_PROTOCOL_MESSAGE_TYPE MessageType;
        uint32_t Flags;
        uint32_t ExtendedPolicies;
        uint32_t DsFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_CERTIFICATE_HASHINFO
    {
        uint16_t StoreNameLength;
        uint16_t HashLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KERB_CERTIFICATE_INFO
    {
        uint32_t CertInfoSize;
        uint32_t InfoType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct POLICY_AUDIT_SID_ARRAY
    {
        uint32_t UsersCount;
        void** UserSidArray;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct AUDIT_POLICY_INFORMATION
    {
        ::win32::guid AuditSubCategoryGuid;
        uint32_t AuditingInformation;
        ::win32::guid AuditCategoryGuid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct PKU2U_CERT_BLOB
    {
        uint32_t CertOffset;
        uint16_t CertLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct PKU2U_CREDUI_CONTEXT
    {
        uint64_t Version;
        uint16_t cbHeaderLength;
        uint32_t cbStructureLength;
        uint16_t CertArrayCount;
        uint32_t CertArrayOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct PKU2U_CERTIFICATE_S4U_LOGON
    {
        Windows::Win32::Security::PKU2U_LOGON_SUBMIT_TYPE MessageType;
        uint32_t Flags;
        Windows::Win32::Security::UNICODE_STRING UserPrincipalName;
        Windows::Win32::Security::UNICODE_STRING DomainName;
        uint32_t CertificateLength;
        uint8_t* Certificate;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgInfoW
    {
        uint32_t fCapabilities;
        uint16_t wVersion;
        uint16_t wRPCID;
        uint32_t cbMaxToken;
        uint16_t* Name;
        uint16_t* Comment;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgInfoA
    {
        uint32_t fCapabilities;
        uint16_t wVersion;
        uint16_t wRPCID;
        uint32_t cbMaxToken;
        int8_t* Name;
        int8_t* Comment;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecBuffer
    {
        uint32_t cbBuffer;
        uint32_t BufferType;
        void* pvBuffer;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecBufferDesc
    {
        uint32_t ulVersion;
        uint32_t cBuffers;
        Windows::Win32::Security::SecBuffer* pBuffers;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SEC_NEGOTIATION_INFO
    {
        uint32_t Size;
        uint32_t NameLength;
        uint16_t* Name;
        void* Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SEC_CHANNEL_BINDINGS
    {
        uint32_t dwInitiatorAddrType;
        uint32_t cbInitiatorLength;
        uint32_t dwInitiatorOffset;
        uint32_t dwAcceptorAddrType;
        uint32_t cbAcceptorLength;
        uint32_t dwAcceptorOffset;
        uint32_t cbApplicationDataLength;
        uint32_t dwApplicationDataOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SEC_APPLICATION_PROTOCOL_LIST
    {
        Windows::Win32::Security::SEC_APPLICATION_PROTOCOL_NEGOTIATION_EXT ProtoNegoExt;
        uint16_t ProtocolListSize;
        uint8_t ProtocolList[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SEC_APPLICATION_PROTOCOLS
    {
        uint32_t ProtocolListsSize;
        Windows::Win32::Security::SEC_APPLICATION_PROTOCOL_LIST ProtocolLists[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SEC_SRTP_PROTECTION_PROFILES
    {
        uint16_t ProfilesSize;
        uint16_t ProfilesList[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SEC_SRTP_MASTER_KEY_IDENTIFIER
    {
        uint8_t MasterKeyIdentifierSize;
        uint8_t MasterKeyIdentifier[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SEC_TOKEN_BINDING
    {
        uint8_t MajorVersion;
        uint8_t MinorVersion;
        uint16_t KeyParametersSize;
        uint8_t KeyParameters[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SEC_PRESHAREDKEY
    {
        uint16_t KeySize;
        uint8_t Key[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SEC_PRESHAREDKEY_IDENTITY
    {
        uint16_t KeyIdentitySize;
        uint8_t KeyIdentity[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SEC_DTLS_MTU
    {
        uint16_t PathMTU;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SEC_FLAGS
    {
        uint64_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SEC_TRAFFIC_SECRETS
    {
        uint16_t SymmetricAlgId[64];
        uint16_t ChainingMode[64];
        uint16_t HashAlgId[64];
        uint16_t KeySize;
        uint16_t IvSize;
        uint16_t MsgSequenceStart;
        uint16_t MsgSequenceEnd;
        Windows::Win32::Security::SEC_TRAFFIC_SECRET_TYPE TrafficSecretType;
        uint16_t TrafficSecretSize;
        uint8_t TrafficSecret[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgCredentials_NamesW
    {
        uint16_t* sUserName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgCredentials_NamesA
    {
        int8_t* sUserName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgCredentials_SSIProviderW
    {
        uint16_t* sProviderName;
        uint32_t ProviderInfoLength;
        int8_t* ProviderInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgCredentials_SSIProviderA
    {
        int8_t* sProviderName;
        uint32_t ProviderInfoLength;
        int8_t* ProviderInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgCredentials_KdcProxySettingsW
    {
        uint32_t Version;
        uint32_t Flags;
        uint16_t ProxyServerOffset;
        uint16_t ProxyServerLength;
        uint16_t ClientTlsCredOffset;
        uint16_t ClientTlsCredLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgCredentials_Cert
    {
        uint32_t EncodedCertSize;
        uint8_t* EncodedCert;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_SubjectAttributes
    {
        void* AttributeInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_CredInfo
    {
        Windows::Win32::Security::SECPKG_CRED_CLASS CredClass;
        uint32_t IsPromptingNeeded;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_NegoPackageInfo
    {
        uint32_t PackageMask;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_NegoStatus
    {
        uint32_t LastStatus;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_Sizes
    {
        uint32_t cbMaxToken;
        uint32_t cbMaxSignature;
        uint32_t cbBlockSize;
        uint32_t cbSecurityTrailer;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_StreamSizes
    {
        uint32_t cbHeader;
        uint32_t cbTrailer;
        uint32_t cbMaximumMessage;
        uint32_t cBuffers;
        uint32_t cbBlockSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_NamesW
    {
        uint16_t* sUserName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_LastClientTokenStatus
    {
        Windows::Win32::Security::SECPKG_ATTR_LCT_STATUS LastClientTokenStatus;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_NamesA
    {
        int8_t* sUserName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_Lifespan
    {
        Windows::Win32::SystemServices::LARGE_INTEGER tsStart;
        Windows::Win32::SystemServices::LARGE_INTEGER tsExpiry;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_DceInfo
    {
        uint32_t AuthzSvc;
        void* pPac;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_KeyInfoA
    {
        int8_t* sSignatureAlgorithmName;
        int8_t* sEncryptAlgorithmName;
        uint32_t KeySize;
        uint32_t SignatureAlgorithm;
        uint32_t EncryptAlgorithm;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_KeyInfoW
    {
        uint16_t* sSignatureAlgorithmName;
        uint16_t* sEncryptAlgorithmName;
        uint32_t KeySize;
        uint32_t SignatureAlgorithm;
        uint32_t EncryptAlgorithm;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_AuthorityA
    {
        int8_t* sAuthorityName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_AuthorityW
    {
        uint16_t* sAuthorityName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_ProtoInfoA
    {
        int8_t* sProtocolName;
        uint32_t majorVersion;
        uint32_t minorVersion;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_ProtoInfoW
    {
        uint16_t* sProtocolName;
        uint32_t majorVersion;
        uint32_t minorVersion;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_PasswordExpiry
    {
        Windows::Win32::SystemServices::LARGE_INTEGER tsPasswordExpires;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_LogoffTime
    {
        Windows::Win32::SystemServices::LARGE_INTEGER tsLogoffTime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_SessionKey
    {
        uint32_t SessionKeyLength;
        uint8_t* SessionKey;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_NegoKeys
    {
        uint32_t KeyType;
        uint16_t KeyLength;
        uint8_t* KeyValue;
        uint32_t VerifyKeyType;
        uint16_t VerifyKeyLength;
        uint8_t* VerifyKeyValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_PackageInfoW
    {
        Windows::Win32::Security::SecPkgInfoW* PackageInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_PackageInfoA
    {
        Windows::Win32::Security::SecPkgInfoA* PackageInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_UserFlags
    {
        uint32_t UserFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_Flags
    {
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_NegotiationInfoA
    {
        Windows::Win32::Security::SecPkgInfoA* PackageInfo;
        uint32_t NegotiationState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_NegotiationInfoW
    {
        Windows::Win32::Security::SecPkgInfoW* PackageInfo;
        uint32_t NegotiationState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_NativeNamesW
    {
        uint16_t* sClientName;
        uint16_t* sServerName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_NativeNamesA
    {
        int8_t* sClientName;
        int8_t* sServerName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_CredentialNameW
    {
        uint32_t CredentialType;
        uint16_t* sCredentialName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_CredentialNameA
    {
        uint32_t CredentialType;
        int8_t* sCredentialName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_AccessToken
    {
        void* AccessToken;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_TargetInformation
    {
        uint32_t MarshalledTargetInfoLength;
        uint8_t* MarshalledTargetInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_AuthzID
    {
        uint32_t AuthzIDLength;
        int8_t* AuthzID;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_Target
    {
        uint32_t TargetLength;
        int8_t* Target;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_ClientSpecifiedTarget
    {
        uint16_t* sTargetName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_ApplicationProtocol
    {
        Windows::Win32::Security::SEC_APPLICATION_PROTOCOL_NEGOTIATION_STATUS ProtoNegoStatus;
        Windows::Win32::Security::SEC_APPLICATION_PROTOCOL_NEGOTIATION_EXT ProtoNegoExt;
        uint8_t ProtocolIdSize;
        uint8_t ProtocolId[255];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_NegotiatedTlsExtensions
    {
        uint32_t ExtensionsCount;
        uint16_t* Extensions;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SECPKG_APP_MODE_INFO
    {
        uint32_t UserFunction;
        size_t Argument1;
        size_t Argument2;
        Windows::Win32::Security::SecBuffer UserData;
        uint8_t ReturnToLsa;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecurityFunctionTableW
    {
        uint32_t dwVersion;
        Windows::Win32::Security::ENUMERATE_SECURITY_PACKAGES_FN_W* EnumerateSecurityPackagesW;
        Windows::Win32::Security::QUERY_CREDENTIALS_ATTRIBUTES_FN_W* QueryCredentialsAttributesW;
        Windows::Win32::Security::ACQUIRE_CREDENTIALS_HANDLE_FN_W* AcquireCredentialsHandleW;
        Windows::Win32::Security::FREE_CREDENTIALS_HANDLE_FN* FreeCredentialsHandle;
        void* Reserved2;
        Windows::Win32::Security::INITIALIZE_SECURITY_CONTEXT_FN_W* InitializeSecurityContextW;
        Windows::Win32::Security::ACCEPT_SECURITY_CONTEXT_FN* AcceptSecurityContext;
        Windows::Win32::Security::COMPLETE_AUTH_TOKEN_FN* CompleteAuthToken;
        Windows::Win32::Security::DELETE_SECURITY_CONTEXT_FN* DeleteSecurityContext;
        Windows::Win32::Security::APPLY_CONTROL_TOKEN_FN* ApplyControlToken;
        Windows::Win32::Security::QUERY_CONTEXT_ATTRIBUTES_FN_W* QueryContextAttributesW;
        Windows::Win32::Security::IMPERSONATE_SECURITY_CONTEXT_FN* ImpersonateSecurityContext;
        Windows::Win32::Security::REVERT_SECURITY_CONTEXT_FN* RevertSecurityContext;
        Windows::Win32::Security::MAKE_SIGNATURE_FN* MakeSignature;
        Windows::Win32::Security::VERIFY_SIGNATURE_FN* VerifySignature;
        Windows::Win32::Security::FREE_CONTEXT_BUFFER_FN* FreeContextBuffer;
        Windows::Win32::Security::QUERY_SECURITY_PACKAGE_INFO_FN_W* QuerySecurityPackageInfoW;
        void* Reserved3;
        void* Reserved4;
        Windows::Win32::Security::EXPORT_SECURITY_CONTEXT_FN* ExportSecurityContext;
        Windows::Win32::Security::IMPORT_SECURITY_CONTEXT_FN_W* ImportSecurityContextW;
        Windows::Win32::Security::ADD_CREDENTIALS_FN_W* AddCredentialsW;
        void* Reserved8;
        Windows::Win32::Security::QUERY_SECURITY_CONTEXT_TOKEN_FN* QuerySecurityContextToken;
        Windows::Win32::Security::ENCRYPT_MESSAGE_FN* EncryptMessage;
        Windows::Win32::Security::DECRYPT_MESSAGE_FN* DecryptMessage;
        Windows::Win32::Security::SET_CONTEXT_ATTRIBUTES_FN_W* SetContextAttributesW;
        Windows::Win32::Security::SET_CREDENTIALS_ATTRIBUTES_FN_W* SetCredentialsAttributesW;
        Windows::Win32::Security::CHANGE_PASSWORD_FN_W* ChangeAccountPasswordW;
        Windows::Win32::Security::QUERY_CONTEXT_ATTRIBUTES_EX_FN_W* QueryContextAttributesExW;
        Windows::Win32::Security::QUERY_CREDENTIALS_ATTRIBUTES_EX_FN_W* QueryCredentialsAttributesExW;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecurityFunctionTableA
    {
        uint32_t dwVersion;
        Windows::Win32::Security::ENUMERATE_SECURITY_PACKAGES_FN_A* EnumerateSecurityPackagesA;
        Windows::Win32::Security::QUERY_CREDENTIALS_ATTRIBUTES_FN_A* QueryCredentialsAttributesA;
        Windows::Win32::Security::ACQUIRE_CREDENTIALS_HANDLE_FN_A* AcquireCredentialsHandleA;
        Windows::Win32::Security::FREE_CREDENTIALS_HANDLE_FN* FreeCredentialsHandle;
        void* Reserved2;
        Windows::Win32::Security::INITIALIZE_SECURITY_CONTEXT_FN_A* InitializeSecurityContextA;
        Windows::Win32::Security::ACCEPT_SECURITY_CONTEXT_FN* AcceptSecurityContext;
        Windows::Win32::Security::COMPLETE_AUTH_TOKEN_FN* CompleteAuthToken;
        Windows::Win32::Security::DELETE_SECURITY_CONTEXT_FN* DeleteSecurityContext;
        Windows::Win32::Security::APPLY_CONTROL_TOKEN_FN* ApplyControlToken;
        Windows::Win32::Security::QUERY_CONTEXT_ATTRIBUTES_FN_A* QueryContextAttributesA;
        Windows::Win32::Security::IMPERSONATE_SECURITY_CONTEXT_FN* ImpersonateSecurityContext;
        Windows::Win32::Security::REVERT_SECURITY_CONTEXT_FN* RevertSecurityContext;
        Windows::Win32::Security::MAKE_SIGNATURE_FN* MakeSignature;
        Windows::Win32::Security::VERIFY_SIGNATURE_FN* VerifySignature;
        Windows::Win32::Security::FREE_CONTEXT_BUFFER_FN* FreeContextBuffer;
        Windows::Win32::Security::QUERY_SECURITY_PACKAGE_INFO_FN_A* QuerySecurityPackageInfoA;
        void* Reserved3;
        void* Reserved4;
        Windows::Win32::Security::EXPORT_SECURITY_CONTEXT_FN* ExportSecurityContext;
        Windows::Win32::Security::IMPORT_SECURITY_CONTEXT_FN_A* ImportSecurityContextA;
        Windows::Win32::Security::ADD_CREDENTIALS_FN_A* AddCredentialsA;
        void* Reserved8;
        Windows::Win32::Security::QUERY_SECURITY_CONTEXT_TOKEN_FN* QuerySecurityContextToken;
        Windows::Win32::Security::ENCRYPT_MESSAGE_FN* EncryptMessage;
        Windows::Win32::Security::DECRYPT_MESSAGE_FN* DecryptMessage;
        Windows::Win32::Security::SET_CONTEXT_ATTRIBUTES_FN_A* SetContextAttributesA;
        Windows::Win32::Security::SET_CREDENTIALS_ATTRIBUTES_FN_A* SetCredentialsAttributesA;
        Windows::Win32::Security::CHANGE_PASSWORD_FN_A* ChangeAccountPasswordA;
        Windows::Win32::Security::QUERY_CONTEXT_ATTRIBUTES_EX_FN_A* QueryContextAttributesExA;
        Windows::Win32::Security::QUERY_CREDENTIALS_ATTRIBUTES_EX_FN_A* QueryCredentialsAttributesExA;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SEC_WINNT_AUTH_IDENTITY_EX2
    {
        uint32_t Version;
        uint16_t cbHeaderLength;
        uint32_t cbStructureLength;
        uint32_t UserOffset;
        uint16_t UserLength;
        uint32_t DomainOffset;
        uint16_t DomainLength;
        uint32_t PackedCredentialsOffset;
        uint16_t PackedCredentialsLength;
        uint32_t Flags;
        uint32_t PackageListOffset;
        uint16_t PackageListLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SEC_WINNT_AUTH_IDENTITY_EXW
    {
        uint32_t Version;
        uint32_t Length;
        uint16_t* User;
        uint32_t UserLength;
        uint16_t* Domain;
        uint32_t DomainLength;
        uint16_t* Password;
        uint32_t PasswordLength;
        uint32_t Flags;
        uint16_t* PackageList;
        uint32_t PackageListLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SEC_WINNT_AUTH_IDENTITY_EXA
    {
        uint32_t Version;
        uint32_t Length;
        uint8_t* User;
        uint32_t UserLength;
        uint8_t* Domain;
        uint32_t DomainLength;
        uint8_t* Password;
        uint32_t PasswordLength;
        uint32_t Flags;
        uint8_t* PackageList;
        uint32_t PackageListLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    union SEC_WINNT_AUTH_IDENTITY_INFO
    {
        Windows::Win32::Security::SEC_WINNT_AUTH_IDENTITY_EXW AuthIdExw;
        Windows::Win32::Security::SEC_WINNT_AUTH_IDENTITY_EXA AuthIdExa;
        Windows::Win32::Security::SEC_WINNT_AUTH_IDENTITY_A AuthId_a;
        Windows::Win32::Security::SEC_WINNT_AUTH_IDENTITY_W AuthId_w;
        Windows::Win32::Security::SEC_WINNT_AUTH_IDENTITY_EX2 AuthIdEx2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SECURITY_PACKAGE_OPTIONS
    {
        uint32_t Size;
        uint32_t Type;
        uint32_t Flags;
        uint32_t SignatureSize;
        void* Signature;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CREDENTIAL_ATTRIBUTEA
    {
        int8_t* Keyword;
        uint32_t Flags;
        uint32_t ValueSize;
        uint8_t* Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CREDENTIAL_ATTRIBUTEW
    {
        uint16_t* Keyword;
        uint32_t Flags;
        uint32_t ValueSize;
        uint8_t* Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CREDENTIALA
    {
        uint32_t Flags;
        uint32_t Type;
        int8_t* TargetName;
        int8_t* Comment;
        Windows::Win32::WindowsProgramming::FILETIME LastWritten;
        uint32_t CredentialBlobSize;
        uint8_t* CredentialBlob;
        uint32_t Persist;
        uint32_t AttributeCount;
        Windows::Win32::Security::CREDENTIAL_ATTRIBUTEA* Attributes;
        int8_t* TargetAlias;
        int8_t* UserName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CREDENTIALW
    {
        uint32_t Flags;
        uint32_t Type;
        uint16_t* TargetName;
        uint16_t* Comment;
        Windows::Win32::WindowsProgramming::FILETIME LastWritten;
        uint32_t CredentialBlobSize;
        uint8_t* CredentialBlob;
        uint32_t Persist;
        uint32_t AttributeCount;
        Windows::Win32::Security::CREDENTIAL_ATTRIBUTEW* Attributes;
        uint16_t* TargetAlias;
        uint16_t* UserName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CREDENTIAL_TARGET_INFORMATIONA
    {
        int8_t* TargetName;
        int8_t* NetbiosServerName;
        int8_t* DnsServerName;
        int8_t* NetbiosDomainName;
        int8_t* DnsDomainName;
        int8_t* DnsTreeName;
        int8_t* PackageName;
        uint32_t Flags;
        uint32_t CredTypeCount;
        uint32_t* CredTypes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CREDENTIAL_TARGET_INFORMATIONW
    {
        uint16_t* TargetName;
        uint16_t* NetbiosServerName;
        uint16_t* DnsServerName;
        uint16_t* NetbiosDomainName;
        uint16_t* DnsDomainName;
        uint16_t* DnsTreeName;
        uint16_t* PackageName;
        uint32_t Flags;
        uint32_t CredTypeCount;
        uint32_t* CredTypes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_CREDENTIAL_INFO
    {
        uint32_t cbSize;
        uint8_t rgbHashOfCert[20];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct USERNAME_TARGET_CREDENTIAL_INFO
    {
        uint16_t* UserName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct BINARY_BLOB_CREDENTIAL_INFO
    {
        uint32_t cbBlob;
        uint8_t* pbBlob;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CREDUI_INFOA
    {
        uint32_t cbSize;
        Windows::Win32::WindowsAndMessaging::HWND hwndParent;
        int8_t* pszMessageText;
        int8_t* pszCaptionText;
        Windows::Win32::Gdi::HBITMAP hbmBanner;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CREDUI_INFOW
    {
        uint32_t cbSize;
        Windows::Win32::WindowsAndMessaging::HWND hwndParent;
        uint16_t* pszMessageText;
        uint16_t* pszCaptionText;
        Windows::Win32::Gdi::HBITMAP hbmBanner;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct LSA_TOKEN_INFORMATION_NULL
    {
        Windows::Win32::SystemServices::LARGE_INTEGER ExpirationTime;
        Windows::Win32::Security::TOKEN_GROUPS* Groups;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct LSA_TOKEN_INFORMATION_V1
    {
        Windows::Win32::SystemServices::LARGE_INTEGER ExpirationTime;
        Windows::Win32::Security::TOKEN_USER User;
        Windows::Win32::Security::TOKEN_GROUPS* Groups;
        Windows::Win32::Security::TOKEN_PRIMARY_GROUP PrimaryGroup;
        Windows::Win32::Security::TOKEN_PRIVILEGES* Privileges;
        Windows::Win32::Security::TOKEN_OWNER Owner;
        Windows::Win32::Security::TOKEN_DEFAULT_DACL DefaultDacl;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct LSA_TOKEN_INFORMATION_V3
    {
        Windows::Win32::SystemServices::LARGE_INTEGER ExpirationTime;
        Windows::Win32::Security::TOKEN_USER User;
        Windows::Win32::Security::TOKEN_GROUPS* Groups;
        Windows::Win32::Security::TOKEN_PRIMARY_GROUP PrimaryGroup;
        Windows::Win32::Security::TOKEN_PRIVILEGES* Privileges;
        Windows::Win32::Security::TOKEN_OWNER Owner;
        Windows::Win32::Security::TOKEN_DEFAULT_DACL DefaultDacl;
        Windows::Win32::Security::TOKEN_USER_CLAIMS UserClaims;
        Windows::Win32::Security::TOKEN_DEVICE_CLAIMS DeviceClaims;
        Windows::Win32::Security::TOKEN_GROUPS* DeviceGroups;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct LSA_DISPATCH_TABLE
    {
        Windows::Win32::Security::PLSA_CREATE_LOGON_SESSION* CreateLogonSession;
        Windows::Win32::Security::PLSA_DELETE_LOGON_SESSION* DeleteLogonSession;
        Windows::Win32::Security::PLSA_ADD_CREDENTIAL* AddCredential;
        Windows::Win32::Security::PLSA_GET_CREDENTIALS* GetCredentials;
        Windows::Win32::Security::PLSA_DELETE_CREDENTIAL* DeleteCredential;
        Windows::Win32::Security::PLSA_ALLOCATE_LSA_HEAP* AllocateLsaHeap;
        Windows::Win32::Security::PLSA_FREE_LSA_HEAP* FreeLsaHeap;
        Windows::Win32::Security::PLSA_ALLOCATE_CLIENT_BUFFER* AllocateClientBuffer;
        Windows::Win32::Security::PLSA_FREE_CLIENT_BUFFER* FreeClientBuffer;
        Windows::Win32::Security::PLSA_COPY_TO_CLIENT_BUFFER* CopyToClientBuffer;
        Windows::Win32::Security::PLSA_COPY_FROM_CLIENT_BUFFER* CopyFromClientBuffer;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SAM_REGISTER_MAPPING_ELEMENT
    {
        int8_t* Original;
        int8_t* Mapped;
        uint8_t Continuable;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SAM_REGISTER_MAPPING_LIST
    {
        uint32_t Count;
        Windows::Win32::Security::SAM_REGISTER_MAPPING_ELEMENT* Elements;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SAM_REGISTER_MAPPING_TABLE
    {
        uint32_t Count;
        Windows::Win32::Security::SAM_REGISTER_MAPPING_LIST* Lists;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SECPKG_CLIENT_INFO
    {
        Windows::Win32::Kernel::LUID LogonId;
        uint32_t ProcessID;
        uint32_t ThreadID;
        uint8_t HasTcbPrivilege;
        uint8_t Impersonating;
        uint8_t Restricted;
        uint8_t ClientFlags;
        Windows::Win32::Security::SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
        Windows::Win32::SystemServices::HANDLE ClientToken;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SECPKG_CALL_INFO
    {
        uint32_t ProcessId;
        uint32_t ThreadId;
        uint32_t Attributes;
        uint32_t CallCount;
        void* MechOid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SECPKG_SUPPLEMENTAL_CRED
    {
        Windows::Win32::Security::UNICODE_STRING PackageName;
        uint32_t CredentialSize;
        uint8_t* Credentials;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SECPKG_BYTE_VECTOR
    {
        uint32_t ByteArrayOffset;
        uint16_t ByteArrayLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SECPKG_SHORT_VECTOR
    {
        uint32_t ShortArrayOffset;
        uint16_t ShortArrayCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SECPKG_SUPPLIED_CREDENTIAL
    {
        uint16_t cbHeaderLength;
        uint16_t cbStructureLength;
        Windows::Win32::Security::SECPKG_SHORT_VECTOR UserName;
        Windows::Win32::Security::SECPKG_SHORT_VECTOR DomainName;
        Windows::Win32::Security::SECPKG_BYTE_VECTOR PackedCredentials;
        uint32_t CredFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SECPKG_CREDENTIAL
    {
        uint64_t Version;
        uint16_t cbHeaderLength;
        uint32_t cbStructureLength;
        uint32_t ClientProcess;
        uint32_t ClientThread;
        Windows::Win32::Kernel::LUID LogonId;
        Windows::Win32::SystemServices::HANDLE ClientToken;
        uint32_t SessionId;
        Windows::Win32::Kernel::LUID ModifiedId;
        uint32_t fCredentials;
        uint32_t Flags;
        Windows::Win32::Security::SECPKG_BYTE_VECTOR PrincipalName;
        Windows::Win32::Security::SECPKG_BYTE_VECTOR PackageList;
        Windows::Win32::Security::SECPKG_BYTE_VECTOR MarshaledSuppliedCreds;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SECPKG_SUPPLEMENTAL_CRED_ARRAY
    {
        uint32_t CredentialCount;
        Windows::Win32::Security::SECPKG_SUPPLEMENTAL_CRED Credentials[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SECPKG_SURROGATE_LOGON_ENTRY
    {
        ::win32::guid Type;
        void* Data;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SECPKG_SURROGATE_LOGON
    {
        uint32_t Version;
        Windows::Win32::Kernel::LUID SurrogateLogonID;
        uint32_t EntryCount;
        Windows::Win32::Security::SECPKG_SURROGATE_LOGON_ENTRY* Entries;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SECPKG_PRIMARY_CRED
    {
        Windows::Win32::Kernel::LUID LogonId;
        Windows::Win32::Security::UNICODE_STRING DownlevelName;
        Windows::Win32::Security::UNICODE_STRING DomainName;
        Windows::Win32::Security::UNICODE_STRING Password;
        Windows::Win32::Security::UNICODE_STRING OldPassword;
        void* UserSid;
        uint32_t Flags;
        Windows::Win32::Security::UNICODE_STRING DnsDomainName;
        Windows::Win32::Security::UNICODE_STRING Upn;
        Windows::Win32::Security::UNICODE_STRING LogonServer;
        Windows::Win32::Security::UNICODE_STRING Spare1;
        Windows::Win32::Security::UNICODE_STRING Spare2;
        Windows::Win32::Security::UNICODE_STRING Spare3;
        Windows::Win32::Security::UNICODE_STRING Spare4;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SECPKG_PRIMARY_CRED_EX
    {
        Windows::Win32::Kernel::LUID LogonId;
        Windows::Win32::Security::UNICODE_STRING DownlevelName;
        Windows::Win32::Security::UNICODE_STRING DomainName;
        Windows::Win32::Security::UNICODE_STRING Password;
        Windows::Win32::Security::UNICODE_STRING OldPassword;
        void* UserSid;
        uint32_t Flags;
        Windows::Win32::Security::UNICODE_STRING DnsDomainName;
        Windows::Win32::Security::UNICODE_STRING Upn;
        Windows::Win32::Security::UNICODE_STRING LogonServer;
        Windows::Win32::Security::UNICODE_STRING Spare1;
        Windows::Win32::Security::UNICODE_STRING Spare2;
        Windows::Win32::Security::UNICODE_STRING Spare3;
        Windows::Win32::Security::UNICODE_STRING Spare4;
        size_t PackageId;
        Windows::Win32::Kernel::LUID PrevLogonId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SECPKG_PARAMETERS
    {
        uint32_t Version;
        uint32_t MachineState;
        uint32_t SetupMode;
        void* DomainSid;
        Windows::Win32::Security::UNICODE_STRING DomainName;
        Windows::Win32::Security::UNICODE_STRING DnsDomainName;
        ::win32::guid DomainGuid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SECPKG_GSS_INFO
    {
        uint32_t EncodedIdLength;
        uint8_t EncodedId[4];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SECPKG_CONTEXT_THUNKS
    {
        uint32_t InfoLevelCount;
        uint32_t Levels[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SECPKG_MUTUAL_AUTH_LEVEL
    {
        uint32_t MutualAuthLevel;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SECPKG_WOW_CLIENT_DLL
    {
        Windows::Win32::Security::UNICODE_STRING WowClientDllPath;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SECPKG_SERIALIZED_OID
    {
        uint32_t OidLength;
        uint32_t OidAttributes;
        uint8_t OidValue[32];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SECPKG_EXTRA_OIDS
    {
        uint32_t OidCount;
        Windows::Win32::Security::SECPKG_SERIALIZED_OID Oids[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SECPKG_NEGO2_INFO
    {
        uint8_t AuthScheme[16];
        uint32_t PackageFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SECPKG_EXTENDED_INFORMATION
    {
        union _Info_e__Union
        {
            Windows::Win32::Security::SECPKG_GSS_INFO GssInfo;
            Windows::Win32::Security::SECPKG_CONTEXT_THUNKS ContextThunks;
            Windows::Win32::Security::SECPKG_MUTUAL_AUTH_LEVEL MutualAuthLevel;
            Windows::Win32::Security::SECPKG_WOW_CLIENT_DLL WowClientDll;
            Windows::Win32::Security::SECPKG_EXTRA_OIDS ExtraOids;
            Windows::Win32::Security::SECPKG_NEGO2_INFO Nego2Info;
        };
        Windows::Win32::Security::SECPKG_EXTENDED_INFORMATION_CLASS Class;
        _Info_e__Union Info;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SECPKG_TARGETINFO
    {
        void* DomainSid;
        uint16_t* ComputerName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_SaslContext
    {
        void* SaslContext;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SECURITY_USER_DATA
    {
        Windows::Win32::Security::UNICODE_STRING UserName;
        Windows::Win32::Security::UNICODE_STRING LogonDomainName;
        Windows::Win32::Security::UNICODE_STRING LogonServer;
        void* pSid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SECPKG_CALL_PACKAGE_PIN_DC_REQUEST
    {
        uint32_t MessageType;
        uint32_t Flags;
        Windows::Win32::Security::UNICODE_STRING DomainName;
        Windows::Win32::Security::UNICODE_STRING DcName;
        uint32_t DcFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SECPKG_CALL_PACKAGE_UNPIN_ALL_DCS_REQUEST
    {
        uint32_t MessageType;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SECPKG_CALL_PACKAGE_TRANSFER_CRED_REQUEST
    {
        uint32_t MessageType;
        Windows::Win32::Kernel::LUID OriginLogonId;
        Windows::Win32::Kernel::LUID DestinationLogonId;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SECPKG_REDIRECTED_LOGON_BUFFER
    {
        ::win32::guid RedirectedLogonGuid;
        Windows::Win32::SystemServices::HANDLE RedirectedLogonHandle;
        Windows::Win32::Security::PLSA_REDIRECTED_LOGON_INIT* Init;
        Windows::Win32::Security::PLSA_REDIRECTED_LOGON_CALLBACK* Callback;
        Windows::Win32::Security::PLSA_REDIRECTED_LOGON_CLEANUP_CALLBACK* CleanupCallback;
        Windows::Win32::Security::PLSA_REDIRECTED_LOGON_GET_LOGON_CREDS* GetLogonCreds;
        Windows::Win32::Security::PLSA_REDIRECTED_LOGON_GET_SUPP_CREDS* GetSupplementalCreds;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SECPKG_POST_LOGON_USER_INFO
    {
        uint32_t Flags;
        Windows::Win32::Kernel::LUID LogonId;
        Windows::Win32::Kernel::LUID LinkedLogonId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SECPKG_EVENT_PACKAGE_CHANGE
    {
        uint32_t ChangeType;
        size_t PackageId;
        Windows::Win32::Security::UNICODE_STRING PackageName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SECPKG_EVENT_ROLE_CHANGE
    {
        uint32_t PreviousRole;
        uint32_t NewRole;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SECPKG_EVENT_NOTIFY
    {
        uint32_t EventClass;
        uint32_t Reserved;
        uint32_t EventDataSize;
        void* EventData;
        void* PackageParameter;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct ENCRYPTED_CREDENTIALW
    {
        Windows::Win32::Security::CREDENTIALW Cred;
        uint32_t ClearCredentialBlobSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SEC_WINNT_AUTH_IDENTITY32
    {
        uint32_t User;
        uint32_t UserLength;
        uint32_t Domain;
        uint32_t DomainLength;
        uint32_t Password;
        uint32_t PasswordLength;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SEC_WINNT_AUTH_IDENTITY_EX32
    {
        uint32_t Version;
        uint32_t Length;
        uint32_t User;
        uint32_t UserLength;
        uint32_t Domain;
        uint32_t DomainLength;
        uint32_t Password;
        uint32_t PasswordLength;
        uint32_t Flags;
        uint32_t PackageList;
        uint32_t PackageListLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct LSA_SECPKG_FUNCTION_TABLE
    {
        Windows::Win32::Security::PLSA_CREATE_LOGON_SESSION* CreateLogonSession;
        Windows::Win32::Security::PLSA_DELETE_LOGON_SESSION* DeleteLogonSession;
        Windows::Win32::Security::PLSA_ADD_CREDENTIAL* AddCredential;
        Windows::Win32::Security::PLSA_GET_CREDENTIALS* GetCredentials;
        Windows::Win32::Security::PLSA_DELETE_CREDENTIAL* DeleteCredential;
        Windows::Win32::Security::PLSA_ALLOCATE_LSA_HEAP* AllocateLsaHeap;
        Windows::Win32::Security::PLSA_FREE_LSA_HEAP* FreeLsaHeap;
        Windows::Win32::Security::PLSA_ALLOCATE_CLIENT_BUFFER* AllocateClientBuffer;
        Windows::Win32::Security::PLSA_FREE_CLIENT_BUFFER* FreeClientBuffer;
        Windows::Win32::Security::PLSA_COPY_TO_CLIENT_BUFFER* CopyToClientBuffer;
        Windows::Win32::Security::PLSA_COPY_FROM_CLIENT_BUFFER* CopyFromClientBuffer;
        Windows::Win32::Security::PLSA_IMPERSONATE_CLIENT* ImpersonateClient;
        Windows::Win32::Security::PLSA_UNLOAD_PACKAGE* UnloadPackage;
        Windows::Win32::Security::PLSA_DUPLICATE_HANDLE* DuplicateHandle;
        Windows::Win32::Security::PLSA_SAVE_SUPPLEMENTAL_CREDENTIALS* SaveSupplementalCredentials;
        Windows::Win32::Security::PLSA_CREATE_THREAD* CreateThread;
        Windows::Win32::Security::PLSA_GET_CLIENT_INFO* GetClientInfo;
        Windows::Win32::Security::PLSA_REGISTER_NOTIFICATION* RegisterNotification;
        Windows::Win32::Security::PLSA_CANCEL_NOTIFICATION* CancelNotification;
        Windows::Win32::Security::PLSA_MAP_BUFFER* MapBuffer;
        Windows::Win32::Security::PLSA_CREATE_TOKEN* CreateToken;
        Windows::Win32::Security::PLSA_AUDIT_LOGON* AuditLogon;
        Windows::Win32::Security::PLSA_CALL_PACKAGE* CallPackage;
        Windows::Win32::Security::PLSA_FREE_LSA_HEAP* FreeReturnBuffer;
        Windows::Win32::Security::PLSA_GET_CALL_INFO* GetCallInfo;
        Windows::Win32::Security::PLSA_CALL_PACKAGEEX* CallPackageEx;
        Windows::Win32::Security::PLSA_CREATE_SHARED_MEMORY* CreateSharedMemory;
        Windows::Win32::Security::PLSA_ALLOCATE_SHARED_MEMORY* AllocateSharedMemory;
        Windows::Win32::Security::PLSA_FREE_SHARED_MEMORY* FreeSharedMemory;
        Windows::Win32::Security::PLSA_DELETE_SHARED_MEMORY* DeleteSharedMemory;
        Windows::Win32::Security::PLSA_OPEN_SAM_USER* OpenSamUser;
        Windows::Win32::Security::PLSA_GET_USER_CREDENTIALS* GetUserCredentials;
        Windows::Win32::Security::PLSA_GET_USER_AUTH_DATA* GetUserAuthData;
        Windows::Win32::Security::PLSA_CLOSE_SAM_USER* CloseSamUser;
        Windows::Win32::Security::PLSA_CONVERT_AUTH_DATA_TO_TOKEN* ConvertAuthDataToToken;
        Windows::Win32::Security::PLSA_CLIENT_CALLBACK* ClientCallback;
        Windows::Win32::Security::PLSA_UPDATE_PRIMARY_CREDENTIALS* UpdateCredentials;
        Windows::Win32::Security::PLSA_GET_AUTH_DATA_FOR_USER* GetAuthDataForUser;
        Windows::Win32::Security::PLSA_CRACK_SINGLE_NAME* CrackSingleName;
        Windows::Win32::Security::PLSA_AUDIT_ACCOUNT_LOGON* AuditAccountLogon;
        Windows::Win32::Security::PLSA_CALL_PACKAGE_PASSTHROUGH* CallPackagePassthrough;
        Windows::Win32::Security::CredReadFn** CrediRead;
        Windows::Win32::Security::CredReadDomainCredentialsFn** CrediReadDomainCredentials;
        Windows::Win32::Security::CredFreeCredentialsFn** CrediFreeCredentials;
        Windows::Win32::Security::PLSA_PROTECT_MEMORY* LsaProtectMemory;
        Windows::Win32::Security::PLSA_PROTECT_MEMORY* LsaUnprotectMemory;
        Windows::Win32::Security::PLSA_OPEN_TOKEN_BY_LOGON_ID* OpenTokenByLogonId;
        Windows::Win32::Security::PLSA_EXPAND_AUTH_DATA_FOR_DOMAIN* ExpandAuthDataForDomain;
        Windows::Win32::Security::PLSA_ALLOCATE_PRIVATE_HEAP* AllocatePrivateHeap;
        Windows::Win32::Security::PLSA_FREE_PRIVATE_HEAP* FreePrivateHeap;
        Windows::Win32::Security::PLSA_CREATE_TOKEN_EX* CreateTokenEx;
        Windows::Win32::Security::CredWriteFn** CrediWrite;
        Windows::Win32::Security::CrediUnmarshalandDecodeStringFn** CrediUnmarshalandDecodeString;
        Windows::Win32::Security::PLSA_PROTECT_MEMORY* DummyFunction6;
        Windows::Win32::Security::PLSA_GET_EXTENDED_CALL_FLAGS* GetExtendedCallFlags;
        Windows::Win32::Security::PLSA_DUPLICATE_HANDLE* DuplicateTokenHandle;
        Windows::Win32::Security::PLSA_GET_SERVICE_ACCOUNT_PASSWORD* GetServiceAccountPassword;
        Windows::Win32::Security::PLSA_PROTECT_MEMORY* DummyFunction7;
        Windows::Win32::Security::PLSA_AUDIT_LOGON_EX* AuditLogonEx;
        Windows::Win32::Security::PLSA_CHECK_PROTECTED_USER_BY_TOKEN* CheckProtectedUserByToken;
        Windows::Win32::Security::PLSA_QUERY_CLIENT_REQUEST* QueryClientRequest;
        Windows::Win32::Security::PLSA_GET_APP_MODE_INFO* GetAppModeInfo;
        Windows::Win32::Security::PLSA_SET_APP_MODE_INFO* SetAppModeInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SECPKG_DLL_FUNCTIONS
    {
        Windows::Win32::Security::PLSA_ALLOCATE_LSA_HEAP* AllocateHeap;
        Windows::Win32::Security::PLSA_FREE_LSA_HEAP* FreeHeap;
        Windows::Win32::Security::PLSA_REGISTER_CALLBACK* RegisterCallback;
        Windows::Win32::Security::PLSA_LOCATE_PKG_BY_ID* LocatePackageById;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SECPKG_FUNCTION_TABLE
    {
        Windows::Win32::Security::PLSA_AP_INITIALIZE_PACKAGE* InitializePackage;
        Windows::Win32::Security::PLSA_AP_LOGON_USER* LogonUserA;
        Windows::Win32::Security::PLSA_AP_CALL_PACKAGE* CallPackage;
        Windows::Win32::Security::PLSA_AP_LOGON_TERMINATED* LogonTerminated;
        Windows::Win32::Security::PLSA_AP_CALL_PACKAGE_UNTRUSTED* CallPackageUntrusted;
        Windows::Win32::Security::PLSA_AP_CALL_PACKAGE_PASSTHROUGH* CallPackagePassthrough;
        Windows::Win32::Security::PLSA_AP_LOGON_USER_EX* LogonUserExA;
        Windows::Win32::Security::PLSA_AP_LOGON_USER_EX2* LogonUserEx2;
        Windows::Win32::Security::SpInitializeFn** Initialize;
        Windows::Win32::Security::SpShutdownFn** Shutdown;
        Windows::Win32::Security::SpGetInfoFn** GetInfo;
        Windows::Win32::Security::SpAcceptCredentialsFn** AcceptCredentials;
        Windows::Win32::Security::SpAcquireCredentialsHandleFn** AcquireCredentialsHandleA;
        Windows::Win32::Security::SpQueryCredentialsAttributesFn** QueryCredentialsAttributesA;
        Windows::Win32::Security::SpFreeCredentialsHandleFn** FreeCredentialsHandle;
        Windows::Win32::Security::SpSaveCredentialsFn** SaveCredentials;
        Windows::Win32::Security::SpGetCredentialsFn** GetCredentials;
        Windows::Win32::Security::SpDeleteCredentialsFn** DeleteCredentials;
        Windows::Win32::Security::SpInitLsaModeContextFn** InitLsaModeContext;
        Windows::Win32::Security::SpAcceptLsaModeContextFn** AcceptLsaModeContext;
        Windows::Win32::Security::SpDeleteContextFn** DeleteContext;
        Windows::Win32::Security::SpApplyControlTokenFn** ApplyControlToken;
        Windows::Win32::Security::SpGetUserInfoFn** GetUserInfo;
        Windows::Win32::Security::SpGetExtendedInformationFn** GetExtendedInformation;
        Windows::Win32::Security::SpQueryContextAttributesFn** QueryContextAttributesA;
        Windows::Win32::Security::SpAddCredentialsFn** AddCredentialsA;
        Windows::Win32::Security::SpSetExtendedInformationFn** SetExtendedInformation;
        Windows::Win32::Security::SpSetContextAttributesFn** SetContextAttributesA;
        Windows::Win32::Security::SpSetCredentialsAttributesFn** SetCredentialsAttributesA;
        Windows::Win32::Security::SpChangeAccountPasswordFn** ChangeAccountPasswordA;
        Windows::Win32::Security::SpQueryMetaDataFn** QueryMetaData;
        Windows::Win32::Security::SpExchangeMetaDataFn** ExchangeMetaData;
        Windows::Win32::Security::SpGetCredUIContextFn** GetCredUIContext;
        Windows::Win32::Security::SpUpdateCredentialsFn** UpdateCredentials;
        Windows::Win32::Security::SpValidateTargetInfoFn** ValidateTargetInfo;
        Windows::Win32::Security::LSA_AP_POST_LOGON_USER** PostLogonUser;
        Windows::Win32::Security::SpGetRemoteCredGuardLogonBufferFn** GetRemoteCredGuardLogonBuffer;
        Windows::Win32::Security::SpGetRemoteCredGuardSupplementalCredsFn** GetRemoteCredGuardSupplementalCreds;
        Windows::Win32::Security::SpGetTbalSupplementalCredsFn** GetTbalSupplementalCreds;
        Windows::Win32::Security::PLSA_AP_LOGON_USER_EX3* LogonUserEx3;
        Windows::Win32::Security::PLSA_AP_PRE_LOGON_USER_SURROGATE* PreLogonUserSurrogate;
        Windows::Win32::Security::PLSA_AP_POST_LOGON_USER_SURROGATE* PostLogonUserSurrogate;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SECPKG_USER_FUNCTION_TABLE
    {
        Windows::Win32::Security::SpInstanceInitFn** InstanceInit;
        Windows::Win32::Security::SpInitUserModeContextFn** InitUserModeContext;
        Windows::Win32::Security::SpMakeSignatureFn** MakeSignature;
        Windows::Win32::Security::SpVerifySignatureFn** VerifySignature;
        Windows::Win32::Security::SpSealMessageFn** SealMessage;
        Windows::Win32::Security::SpUnsealMessageFn** UnsealMessage;
        Windows::Win32::Security::SpGetContextTokenFn** GetContextToken;
        Windows::Win32::Security::SpQueryContextAttributesFn** QueryContextAttributesA;
        Windows::Win32::Security::SpCompleteAuthTokenFn** CompleteAuthToken;
        Windows::Win32::Security::SpDeleteContextFn** DeleteUserModeContext;
        Windows::Win32::Security::SpFormatCredentialsFn** FormatCredentials;
        Windows::Win32::Security::SpMarshallSupplementalCredsFn** MarshallSupplementalCreds;
        Windows::Win32::Security::SpExportSecurityContextFn** ExportContext;
        Windows::Win32::Security::SpImportSecurityContextFn** ImportContext;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KSEC_LIST_ENTRY
    {
        Windows::Win32::Kernel::LIST_ENTRY List;
        int32_t RefCount;
        uint32_t Signature;
        void* OwningList;
        void* Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SECPKG_KERNEL_FUNCTIONS
    {
        Windows::Win32::Security::PLSA_ALLOCATE_LSA_HEAP* AllocateHeap;
        Windows::Win32::Security::PLSA_FREE_LSA_HEAP* FreeHeap;
        Windows::Win32::Security::PKSEC_CREATE_CONTEXT_LIST* CreateContextList;
        Windows::Win32::Security::PKSEC_INSERT_LIST_ENTRY* InsertListEntry;
        Windows::Win32::Security::PKSEC_REFERENCE_LIST_ENTRY* ReferenceListEntry;
        Windows::Win32::Security::PKSEC_DEREFERENCE_LIST_ENTRY* DereferenceListEntry;
        Windows::Win32::Security::PKSEC_SERIALIZE_WINNT_AUTH_DATA* SerializeWinntAuthData;
        Windows::Win32::Security::PKSEC_SERIALIZE_SCHANNEL_AUTH_DATA* SerializeSchannelAuthData;
        Windows::Win32::Security::PKSEC_LOCATE_PKG_BY_ID* LocatePackageById;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SECPKG_KERNEL_FUNCTION_TABLE
    {
        Windows::Win32::Security::KspInitPackageFn** Initialize;
        Windows::Win32::Security::KspDeleteContextFn** DeleteContext;
        Windows::Win32::Security::KspInitContextFn** InitContext;
        Windows::Win32::Security::KspMapHandleFn** MapHandle;
        Windows::Win32::Security::KspMakeSignatureFn** Sign;
        Windows::Win32::Security::KspVerifySignatureFn** Verify;
        Windows::Win32::Security::KspSealMessageFn** Seal;
        Windows::Win32::Security::KspUnsealMessageFn** Unseal;
        Windows::Win32::Security::KspGetTokenFn** GetToken;
        Windows::Win32::Security::KspQueryAttributesFn** QueryAttributes;
        Windows::Win32::Security::KspCompleteTokenFn** CompleteToken;
        Windows::Win32::Security::SpExportSecurityContextFn** ExportContext;
        Windows::Win32::Security::SpImportSecurityContextFn** ImportContext;
        Windows::Win32::Security::KspSetPagingModeFn** SetPackagePagingMode;
        Windows::Win32::Security::KspSerializeAuthDataFn** SerializeAuthData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgCred_SupportedAlgs
    {
        uint32_t cSupportedAlgs;
        uint32_t* palgSupportedAlgs;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgCred_CipherStrengths
    {
        uint32_t dwMinimumCipherStrength;
        uint32_t dwMaximumCipherStrength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgCred_SupportedProtocols
    {
        uint32_t grbitProtocol;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgCred_ClientCertPolicy
    {
        uint32_t dwFlags;
        ::win32::guid guidPolicyId;
        uint32_t dwCertFlags;
        uint32_t dwUrlRetrievalTimeout;
        Windows::Win32::SystemServices::BOOL fCheckRevocationFreshnessTime;
        uint32_t dwRevocationFreshnessTime;
        Windows::Win32::SystemServices::BOOL fOmitUsageCheck;
        uint16_t* pwszSslCtlStoreName;
        uint16_t* pwszSslCtlIdentifier;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_RemoteCredentialInfo
    {
        uint32_t cbCertificateChain;
        uint8_t* pbCertificateChain;
        uint32_t cCertificates;
        uint32_t fFlags;
        uint32_t dwBits;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_LocalCredentialInfo
    {
        uint32_t cbCertificateChain;
        uint8_t* pbCertificateChain;
        uint32_t cCertificates;
        uint32_t fFlags;
        uint32_t dwBits;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_ClientCertPolicyResult
    {
        int32_t dwPolicyResult;
        ::win32::guid guidPolicyId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_IssuerListInfoEx
    {
        Windows::Win32::Security::CRYPTOAPI_BLOB* aIssuers;
        uint32_t cIssuers;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_ConnectionInfoEx
    {
        uint32_t dwVersion;
        uint32_t dwProtocol;
        uint16_t szCipher[64];
        uint32_t dwCipherStrength;
        uint16_t szHash[64];
        uint32_t dwHashStrength;
        uint16_t szExchange[64];
        uint32_t dwExchStrength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_EapKeyBlock
    {
        uint8_t rgbKeys[128];
        uint8_t rgbIVs[64];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_MappedCredAttr
    {
        uint32_t dwAttribute;
        void* pvBuffer;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_SessionInfo
    {
        uint32_t dwFlags;
        uint32_t cbSessionId;
        uint8_t rgbSessionId[32];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_SessionAppData
    {
        uint32_t dwFlags;
        uint32_t cbAppData;
        uint8_t* pbAppData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_EapPrfInfo
    {
        uint32_t dwVersion;
        uint32_t cbPrfData;
        uint8_t* pbPrfData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_SupportedSignatures
    {
        uint16_t cSignatureAndHashAlgorithms;
        uint16_t* pSignatureAndHashAlgorithms;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_Certificates
    {
        uint32_t cCertificates;
        uint32_t cbCertificateChain;
        uint8_t* pbCertificateChain;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_CertInfo
    {
        uint32_t dwVersion;
        uint32_t cbSubjectName;
        uint16_t* pwszSubjectName;
        uint32_t cbIssuerName;
        uint16_t* pwszIssuerName;
        uint32_t dwKeySize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_UiInfo
    {
        Windows::Win32::WindowsAndMessaging::HWND hParentWindow;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_EarlyStart
    {
        uint32_t dwEarlyStartFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_KeyingMaterialInfo
    {
        uint16_t cbLabel;
        int8_t* pszLabel;
        uint16_t cbContextValue;
        uint8_t* pbContextValue;
        uint32_t cbKeyingMaterial;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_KeyingMaterial
    {
        uint32_t cbKeyingMaterial;
        uint8_t* pbKeyingMaterial;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_KeyingMaterial_Inproc
    {
        uint16_t cbLabel;
        int8_t* pszLabel;
        uint16_t cbContextValue;
        uint8_t* pbContextValue;
        uint32_t cbKeyingMaterial;
        uint8_t* pbKeyingMaterial;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_SrtpParameters
    {
        uint16_t ProtectionProfile;
        uint8_t MasterKeyIdentifierSize;
        uint8_t* MasterKeyIdentifier;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SecPkgContext_TokenBinding
    {
        uint8_t MajorVersion;
        uint8_t MinorVersion;
        uint16_t KeyParametersSize;
        uint8_t* KeyParameters;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct _HMAPPER
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SCHANNEL_CRED
    {
        uint32_t dwVersion;
        uint32_t cCreds;
        Windows::Win32::Security::CERT_CONTEXT** paCred;
        void* hRootStore;
        uint32_t cMappers;
        Windows::Win32::Security::_HMAPPER** aphMappers;
        uint32_t cSupportedAlgs;
        uint32_t* palgSupportedAlgs;
        uint32_t grbitEnabledProtocols;
        uint32_t dwMinimumCipherStrength;
        uint32_t dwMaximumCipherStrength;
        uint32_t dwSessionLifespan;
        uint32_t dwFlags;
        uint32_t dwCredFormat;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SEND_GENERIC_TLS_EXTENSION
    {
        uint16_t ExtensionType;
        uint16_t HandshakeType;
        uint32_t Flags;
        uint16_t BufferSize;
        uint8_t Buffer[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct TLS_EXTENSION_SUBSCRIPTION
    {
        uint16_t ExtensionType;
        uint16_t HandshakeType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SUBSCRIBE_GENERIC_TLS_EXTENSION
    {
        uint32_t Flags;
        uint32_t SubscriptionsCount;
        Windows::Win32::Security::TLS_EXTENSION_SUBSCRIPTION Subscriptions[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SCHANNEL_CERT_HASH
    {
        uint32_t dwLength;
        uint32_t dwFlags;
        size_t hProv;
        uint8_t ShaHash[20];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SCHANNEL_CERT_HASH_STORE
    {
        uint32_t dwLength;
        uint32_t dwFlags;
        size_t hProv;
        uint8_t ShaHash[20];
        uint16_t pwszStoreName[128];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SCHANNEL_ALERT_TOKEN
    {
        uint32_t dwTokenType;
        uint32_t dwAlertType;
        uint32_t dwAlertNumber;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SCHANNEL_SESSION_TOKEN
    {
        uint32_t dwTokenType;
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SCHANNEL_CLIENT_SIGNATURE
    {
        uint32_t cbLength;
        uint32_t aiHash;
        uint32_t cbHash;
        uint8_t HashValue[36];
        uint8_t CertThumbprint[20];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SSL_CREDENTIAL_CERTIFICATE
    {
        uint32_t cbPrivateKey;
        uint8_t* pPrivateKey;
        uint32_t cbCertificate;
        uint8_t* pCertificate;
        int8_t* pszPassword;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SCH_CRED
    {
        uint32_t dwVersion;
        uint32_t cCreds;
        void** paSecret;
        void** paPublic;
        uint32_t cMappers;
        Windows::Win32::Security::_HMAPPER** aphMappers;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SCH_CRED_SECRET_CAPI
    {
        uint32_t dwType;
        size_t hProv;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SCH_CRED_SECRET_PRIVKEY
    {
        uint32_t dwType;
        uint8_t* pPrivateKey;
        uint32_t cbPrivateKey;
        int8_t* pszPassword;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SCH_CRED_PUBLIC_CERTCHAIN
    {
        uint32_t dwType;
        uint32_t cbCertChain;
        uint8_t* pCertChain;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct PctPublicKey
    {
        uint32_t Type;
        uint32_t cbKey;
        uint8_t pKey[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct X509Certificate
    {
        uint32_t Version;
        uint32_t SerialNumber[4];
        uint32_t SignatureAlgorithm;
        Windows::Win32::WindowsProgramming::FILETIME ValidFrom;
        Windows::Win32::WindowsProgramming::FILETIME ValidUntil;
        int8_t* pszIssuer;
        int8_t* pszSubject;
        Windows::Win32::Security::PctPublicKey* pPublicKey;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SCH_EXTENSION_DATA
    {
        uint16_t ExtensionType;
        uint8_t* pExtData;
        uint32_t cbExtData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct OLD_LARGE_INTEGER
    {
        uint32_t LowPart;
        int32_t HighPart;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct OBJECTS_AND_SID
    {
        uint32_t ObjectsPresent;
        ::win32::guid ObjectTypeGuid;
        ::win32::guid InheritedObjectTypeGuid;
        Windows::Win32::Security::SID* pSid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct OBJECTS_AND_NAME_A
    {
        uint32_t ObjectsPresent;
        Windows::Win32::Security::SE_OBJECT_TYPE ObjectType;
        int8_t* ObjectTypeName;
        int8_t* InheritedObjectTypeName;
        int8_t* ptstrName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct OBJECTS_AND_NAME_W
    {
        uint32_t ObjectsPresent;
        Windows::Win32::Security::SE_OBJECT_TYPE ObjectType;
        uint16_t* ObjectTypeName;
        uint16_t* InheritedObjectTypeName;
        uint16_t* ptstrName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct TRUSTEE_A
    {
        Windows::Win32::Security::TRUSTEE_A* pMultipleTrustee;
        Windows::Win32::Security::MULTIPLE_TRUSTEE_OPERATION MultipleTrusteeOperation;
        Windows::Win32::Security::TRUSTEE_FORM TrusteeForm;
        Windows::Win32::Security::TRUSTEE_TYPE TrusteeType;
        int8_t* ptstrName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct TRUSTEE_W
    {
        Windows::Win32::Security::TRUSTEE_W* pMultipleTrustee;
        Windows::Win32::Security::MULTIPLE_TRUSTEE_OPERATION MultipleTrusteeOperation;
        Windows::Win32::Security::TRUSTEE_FORM TrusteeForm;
        Windows::Win32::Security::TRUSTEE_TYPE TrusteeType;
        uint16_t* ptstrName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct EXPLICIT_ACCESS_A
    {
        uint32_t grfAccessPermissions;
        Windows::Win32::Security::ACCESS_MODE grfAccessMode;
        uint32_t grfInheritance;
        Windows::Win32::Security::TRUSTEE_A Trustee;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct EXPLICIT_ACCESS_W
    {
        uint32_t grfAccessPermissions;
        Windows::Win32::Security::ACCESS_MODE grfAccessMode;
        uint32_t grfInheritance;
        Windows::Win32::Security::TRUSTEE_W Trustee;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct TRUSTEE_ACCESSA
    {
        int8_t* lpProperty;
        uint32_t Access;
        uint32_t fAccessFlags;
        uint32_t fReturnedAccess;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct TRUSTEE_ACCESSW
    {
        uint16_t* lpProperty;
        uint32_t Access;
        uint32_t fAccessFlags;
        uint32_t fReturnedAccess;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct ACTRL_OVERLAPPED
    {
        union _Anonymous_e__Union
        {
            void* Provider;
            uint32_t Reserved1;
        };
        _Anonymous_e__Union Anonymous;
        uint32_t Reserved2;
        Windows::Win32::SystemServices::HANDLE hEvent;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct ACTRL_ACCESS_INFOA
    {
        uint32_t fAccessPermission;
        int8_t* lpAccessPermissionName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct ACTRL_ACCESS_INFOW
    {
        uint32_t fAccessPermission;
        uint16_t* lpAccessPermissionName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct ACTRL_CONTROL_INFOA
    {
        int8_t* lpControlId;
        int8_t* lpControlName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct ACTRL_CONTROL_INFOW
    {
        uint16_t* lpControlId;
        uint16_t* lpControlName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct _FN_OBJECT_MGR_FUNCTIONS
    {
        uint32_t Placeholder;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct INHERITED_FROMA
    {
        int32_t GenerationGap;
        int8_t* AncestorName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct INHERITED_FROMW
    {
        int32_t GenerationGap;
        uint16_t* AncestorName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct WLX_SC_NOTIFICATION_INFO
    {
        uint16_t* pszCard;
        uint16_t* pszReader;
        uint16_t* pszContainer;
        uint16_t* pszCryptoProvider;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct WLX_PROFILE_V1_0
    {
        uint32_t dwType;
        uint16_t* pszProfile;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct WLX_PROFILE_V2_0
    {
        uint32_t dwType;
        uint16_t* pszProfile;
        uint16_t* pszPolicy;
        uint16_t* pszNetworkDefaultUserProfile;
        uint16_t* pszServerName;
        uint16_t* pszEnvironment;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct WLX_MPR_NOTIFY_INFO
    {
        uint16_t* pszUserName;
        uint16_t* pszDomain;
        uint16_t* pszPassword;
        uint16_t* pszOldPassword;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct WLX_TERMINAL_SERVICES_DATA
    {
        uint16_t ProfilePath[257];
        uint16_t HomeDir[257];
        uint16_t HomeDirDrive[4];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct WLX_CLIENT_CREDENTIALS_INFO_V1_0
    {
        uint32_t dwType;
        uint16_t* pszUserName;
        uint16_t* pszDomain;
        uint16_t* pszPassword;
        Windows::Win32::SystemServices::BOOL fPromptForPassword;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct WLX_CLIENT_CREDENTIALS_INFO_V2_0
    {
        uint32_t dwType;
        uint16_t* pszUserName;
        uint16_t* pszDomain;
        uint16_t* pszPassword;
        Windows::Win32::SystemServices::BOOL fPromptForPassword;
        Windows::Win32::SystemServices::BOOL fDisconnectOnLogonFailure;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct WLX_CONSOLESWITCH_CREDENTIALS_INFO_V1_0
    {
        uint32_t dwType;
        Windows::Win32::SystemServices::HANDLE UserToken;
        Windows::Win32::Kernel::LUID LogonId;
        Windows::Win32::Security::QUOTA_LIMITS Quotas;
        uint16_t* UserName;
        uint16_t* Domain;
        Windows::Win32::SystemServices::LARGE_INTEGER LogonTime;
        Windows::Win32::SystemServices::BOOL SmartCardLogon;
        uint32_t ProfileLength;
        uint32_t MessageType;
        uint16_t LogonCount;
        uint16_t BadPasswordCount;
        Windows::Win32::SystemServices::LARGE_INTEGER ProfileLogonTime;
        Windows::Win32::SystemServices::LARGE_INTEGER LogoffTime;
        Windows::Win32::SystemServices::LARGE_INTEGER KickOffTime;
        Windows::Win32::SystemServices::LARGE_INTEGER PasswordLastSet;
        Windows::Win32::SystemServices::LARGE_INTEGER PasswordCanChange;
        Windows::Win32::SystemServices::LARGE_INTEGER PasswordMustChange;
        uint16_t* LogonScript;
        uint16_t* HomeDirectory;
        uint16_t* FullName;
        uint16_t* ProfilePath;
        uint16_t* HomeDirectoryDrive;
        uint16_t* LogonServer;
        uint32_t UserFlags;
        uint32_t PrivateDataLen;
        uint8_t* PrivateData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct WLX_DESKTOP
    {
        uint32_t Size;
        uint32_t Flags;
        Windows::Win32::WindowsStationsAndDesktops::HDESK hDesktop;
        uint16_t* pszDesktopName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct WLX_DISPATCH_VERSION_1_0
    {
        Windows::Win32::Security::PWLX_USE_CTRL_ALT_DEL* WlxUseCtrlAltDel;
        Windows::Win32::Security::PWLX_SET_CONTEXT_POINTER* WlxSetContextPointer;
        Windows::Win32::Security::PWLX_SAS_NOTIFY* WlxSasNotify;
        Windows::Win32::Security::PWLX_SET_TIMEOUT* WlxSetTimeout;
        Windows::Win32::Security::PWLX_ASSIGN_SHELL_PROTECTION* WlxAssignShellProtection;
        Windows::Win32::Security::PWLX_MESSAGE_BOX* WlxMessageBox;
        Windows::Win32::Security::PWLX_DIALOG_BOX* WlxDialogBox;
        Windows::Win32::Security::PWLX_DIALOG_BOX_PARAM* WlxDialogBoxParam;
        Windows::Win32::Security::PWLX_DIALOG_BOX_INDIRECT* WlxDialogBoxIndirect;
        Windows::Win32::Security::PWLX_DIALOG_BOX_INDIRECT_PARAM* WlxDialogBoxIndirectParam;
        Windows::Win32::Security::PWLX_SWITCH_DESKTOP_TO_USER* WlxSwitchDesktopToUser;
        Windows::Win32::Security::PWLX_SWITCH_DESKTOP_TO_WINLOGON* WlxSwitchDesktopToWinlogon;
        Windows::Win32::Security::PWLX_CHANGE_PASSWORD_NOTIFY* WlxChangePasswordNotify;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct WLX_DISPATCH_VERSION_1_1
    {
        Windows::Win32::Security::PWLX_USE_CTRL_ALT_DEL* WlxUseCtrlAltDel;
        Windows::Win32::Security::PWLX_SET_CONTEXT_POINTER* WlxSetContextPointer;
        Windows::Win32::Security::PWLX_SAS_NOTIFY* WlxSasNotify;
        Windows::Win32::Security::PWLX_SET_TIMEOUT* WlxSetTimeout;
        Windows::Win32::Security::PWLX_ASSIGN_SHELL_PROTECTION* WlxAssignShellProtection;
        Windows::Win32::Security::PWLX_MESSAGE_BOX* WlxMessageBox;
        Windows::Win32::Security::PWLX_DIALOG_BOX* WlxDialogBox;
        Windows::Win32::Security::PWLX_DIALOG_BOX_PARAM* WlxDialogBoxParam;
        Windows::Win32::Security::PWLX_DIALOG_BOX_INDIRECT* WlxDialogBoxIndirect;
        Windows::Win32::Security::PWLX_DIALOG_BOX_INDIRECT_PARAM* WlxDialogBoxIndirectParam;
        Windows::Win32::Security::PWLX_SWITCH_DESKTOP_TO_USER* WlxSwitchDesktopToUser;
        Windows::Win32::Security::PWLX_SWITCH_DESKTOP_TO_WINLOGON* WlxSwitchDesktopToWinlogon;
        Windows::Win32::Security::PWLX_CHANGE_PASSWORD_NOTIFY* WlxChangePasswordNotify;
        Windows::Win32::Security::PWLX_GET_SOURCE_DESKTOP* WlxGetSourceDesktop;
        Windows::Win32::Security::PWLX_SET_RETURN_DESKTOP* WlxSetReturnDesktop;
        Windows::Win32::Security::PWLX_CREATE_USER_DESKTOP* WlxCreateUserDesktop;
        Windows::Win32::Security::PWLX_CHANGE_PASSWORD_NOTIFY_EX* WlxChangePasswordNotifyEx;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct WLX_DISPATCH_VERSION_1_2
    {
        Windows::Win32::Security::PWLX_USE_CTRL_ALT_DEL* WlxUseCtrlAltDel;
        Windows::Win32::Security::PWLX_SET_CONTEXT_POINTER* WlxSetContextPointer;
        Windows::Win32::Security::PWLX_SAS_NOTIFY* WlxSasNotify;
        Windows::Win32::Security::PWLX_SET_TIMEOUT* WlxSetTimeout;
        Windows::Win32::Security::PWLX_ASSIGN_SHELL_PROTECTION* WlxAssignShellProtection;
        Windows::Win32::Security::PWLX_MESSAGE_BOX* WlxMessageBox;
        Windows::Win32::Security::PWLX_DIALOG_BOX* WlxDialogBox;
        Windows::Win32::Security::PWLX_DIALOG_BOX_PARAM* WlxDialogBoxParam;
        Windows::Win32::Security::PWLX_DIALOG_BOX_INDIRECT* WlxDialogBoxIndirect;
        Windows::Win32::Security::PWLX_DIALOG_BOX_INDIRECT_PARAM* WlxDialogBoxIndirectParam;
        Windows::Win32::Security::PWLX_SWITCH_DESKTOP_TO_USER* WlxSwitchDesktopToUser;
        Windows::Win32::Security::PWLX_SWITCH_DESKTOP_TO_WINLOGON* WlxSwitchDesktopToWinlogon;
        Windows::Win32::Security::PWLX_CHANGE_PASSWORD_NOTIFY* WlxChangePasswordNotify;
        Windows::Win32::Security::PWLX_GET_SOURCE_DESKTOP* WlxGetSourceDesktop;
        Windows::Win32::Security::PWLX_SET_RETURN_DESKTOP* WlxSetReturnDesktop;
        Windows::Win32::Security::PWLX_CREATE_USER_DESKTOP* WlxCreateUserDesktop;
        Windows::Win32::Security::PWLX_CHANGE_PASSWORD_NOTIFY_EX* WlxChangePasswordNotifyEx;
        Windows::Win32::Security::PWLX_CLOSE_USER_DESKTOP* WlxCloseUserDesktop;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct WLX_DISPATCH_VERSION_1_3
    {
        Windows::Win32::Security::PWLX_USE_CTRL_ALT_DEL* WlxUseCtrlAltDel;
        Windows::Win32::Security::PWLX_SET_CONTEXT_POINTER* WlxSetContextPointer;
        Windows::Win32::Security::PWLX_SAS_NOTIFY* WlxSasNotify;
        Windows::Win32::Security::PWLX_SET_TIMEOUT* WlxSetTimeout;
        Windows::Win32::Security::PWLX_ASSIGN_SHELL_PROTECTION* WlxAssignShellProtection;
        Windows::Win32::Security::PWLX_MESSAGE_BOX* WlxMessageBox;
        Windows::Win32::Security::PWLX_DIALOG_BOX* WlxDialogBox;
        Windows::Win32::Security::PWLX_DIALOG_BOX_PARAM* WlxDialogBoxParam;
        Windows::Win32::Security::PWLX_DIALOG_BOX_INDIRECT* WlxDialogBoxIndirect;
        Windows::Win32::Security::PWLX_DIALOG_BOX_INDIRECT_PARAM* WlxDialogBoxIndirectParam;
        Windows::Win32::Security::PWLX_SWITCH_DESKTOP_TO_USER* WlxSwitchDesktopToUser;
        Windows::Win32::Security::PWLX_SWITCH_DESKTOP_TO_WINLOGON* WlxSwitchDesktopToWinlogon;
        Windows::Win32::Security::PWLX_CHANGE_PASSWORD_NOTIFY* WlxChangePasswordNotify;
        Windows::Win32::Security::PWLX_GET_SOURCE_DESKTOP* WlxGetSourceDesktop;
        Windows::Win32::Security::PWLX_SET_RETURN_DESKTOP* WlxSetReturnDesktop;
        Windows::Win32::Security::PWLX_CREATE_USER_DESKTOP* WlxCreateUserDesktop;
        Windows::Win32::Security::PWLX_CHANGE_PASSWORD_NOTIFY_EX* WlxChangePasswordNotifyEx;
        Windows::Win32::Security::PWLX_CLOSE_USER_DESKTOP* WlxCloseUserDesktop;
        Windows::Win32::Security::PWLX_SET_OPTION* WlxSetOption;
        Windows::Win32::Security::PWLX_GET_OPTION* WlxGetOption;
        Windows::Win32::Security::PWLX_WIN31_MIGRATE* WlxWin31Migrate;
        Windows::Win32::Security::PWLX_QUERY_CLIENT_CREDENTIALS* WlxQueryClientCredentials;
        Windows::Win32::Security::PWLX_QUERY_IC_CREDENTIALS* WlxQueryInetConnectorCredentials;
        Windows::Win32::Security::PWLX_DISCONNECT* WlxDisconnect;
        Windows::Win32::Security::PWLX_QUERY_TERMINAL_SERVICES_DATA* WlxQueryTerminalServicesData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct WLX_DISPATCH_VERSION_1_4
    {
        Windows::Win32::Security::PWLX_USE_CTRL_ALT_DEL* WlxUseCtrlAltDel;
        Windows::Win32::Security::PWLX_SET_CONTEXT_POINTER* WlxSetContextPointer;
        Windows::Win32::Security::PWLX_SAS_NOTIFY* WlxSasNotify;
        Windows::Win32::Security::PWLX_SET_TIMEOUT* WlxSetTimeout;
        Windows::Win32::Security::PWLX_ASSIGN_SHELL_PROTECTION* WlxAssignShellProtection;
        Windows::Win32::Security::PWLX_MESSAGE_BOX* WlxMessageBox;
        Windows::Win32::Security::PWLX_DIALOG_BOX* WlxDialogBox;
        Windows::Win32::Security::PWLX_DIALOG_BOX_PARAM* WlxDialogBoxParam;
        Windows::Win32::Security::PWLX_DIALOG_BOX_INDIRECT* WlxDialogBoxIndirect;
        Windows::Win32::Security::PWLX_DIALOG_BOX_INDIRECT_PARAM* WlxDialogBoxIndirectParam;
        Windows::Win32::Security::PWLX_SWITCH_DESKTOP_TO_USER* WlxSwitchDesktopToUser;
        Windows::Win32::Security::PWLX_SWITCH_DESKTOP_TO_WINLOGON* WlxSwitchDesktopToWinlogon;
        Windows::Win32::Security::PWLX_CHANGE_PASSWORD_NOTIFY* WlxChangePasswordNotify;
        Windows::Win32::Security::PWLX_GET_SOURCE_DESKTOP* WlxGetSourceDesktop;
        Windows::Win32::Security::PWLX_SET_RETURN_DESKTOP* WlxSetReturnDesktop;
        Windows::Win32::Security::PWLX_CREATE_USER_DESKTOP* WlxCreateUserDesktop;
        Windows::Win32::Security::PWLX_CHANGE_PASSWORD_NOTIFY_EX* WlxChangePasswordNotifyEx;
        Windows::Win32::Security::PWLX_CLOSE_USER_DESKTOP* WlxCloseUserDesktop;
        Windows::Win32::Security::PWLX_SET_OPTION* WlxSetOption;
        Windows::Win32::Security::PWLX_GET_OPTION* WlxGetOption;
        Windows::Win32::Security::PWLX_WIN31_MIGRATE* WlxWin31Migrate;
        Windows::Win32::Security::PWLX_QUERY_CLIENT_CREDENTIALS* WlxQueryClientCredentials;
        Windows::Win32::Security::PWLX_QUERY_IC_CREDENTIALS* WlxQueryInetConnectorCredentials;
        Windows::Win32::Security::PWLX_DISCONNECT* WlxDisconnect;
        Windows::Win32::Security::PWLX_QUERY_TERMINAL_SERVICES_DATA* WlxQueryTerminalServicesData;
        Windows::Win32::Security::PWLX_QUERY_CONSOLESWITCH_CREDENTIALS* WlxQueryConsoleSwitchCredentials;
        Windows::Win32::Security::PWLX_QUERY_TS_LOGON_CREDENTIALS* WlxQueryTsLogonCredentials;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct WLX_NOTIFICATION_INFO
    {
        uint32_t Size;
        uint32_t Flags;
        uint16_t* UserName;
        uint16_t* Domain;
        uint16_t* WindowStation;
        Windows::Win32::SystemServices::HANDLE hToken;
        Windows::Win32::WindowsStationsAndDesktops::HDESK hDesktop;
        Windows::Win32::Security::PFNMSGECALLBACK* pStatusCallback;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct KeyCredentialManagerInfo
    {
        ::win32::guid containerId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct NOTIFYINFO
    {
        uint32_t dwNotifyStatus;
        uint32_t dwOperationStatus;
        void* lpContext;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct NOTIFYADD
    {
        Windows::Win32::WindowsAndMessaging::HWND hwndOwner;
        Windows::Win32::Security::NETRESOURCEA NetResource;
        uint32_t dwAddFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct NOTIFYCANCEL
    {
        uint16_t* lpName;
        uint16_t* lpProvider;
        uint32_t dwFlags;
        Windows::Win32::SystemServices::BOOL fForce;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct LOGON_HOURS
    {
        uint16_t UnitsPerWeek;
        uint8_t* LogonHours;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SR_SECURITY_DESCRIPTOR
    {
        uint32_t Length;
        uint8_t* SecurityDescriptor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct USER_ALL_INFORMATION
    {
        Windows::Win32::SystemServices::LARGE_INTEGER LastLogon;
        Windows::Win32::SystemServices::LARGE_INTEGER LastLogoff;
        Windows::Win32::SystemServices::LARGE_INTEGER PasswordLastSet;
        Windows::Win32::SystemServices::LARGE_INTEGER AccountExpires;
        Windows::Win32::SystemServices::LARGE_INTEGER PasswordCanChange;
        Windows::Win32::SystemServices::LARGE_INTEGER PasswordMustChange;
        Windows::Win32::Security::UNICODE_STRING UserName;
        Windows::Win32::Security::UNICODE_STRING FullName;
        Windows::Win32::Security::UNICODE_STRING HomeDirectory;
        Windows::Win32::Security::UNICODE_STRING HomeDirectoryDrive;
        Windows::Win32::Security::UNICODE_STRING ScriptPath;
        Windows::Win32::Security::UNICODE_STRING ProfilePath;
        Windows::Win32::Security::UNICODE_STRING AdminComment;
        Windows::Win32::Security::UNICODE_STRING WorkStations;
        Windows::Win32::Security::UNICODE_STRING UserComment;
        Windows::Win32::Security::UNICODE_STRING Parameters;
        Windows::Win32::Security::UNICODE_STRING LmPassword;
        Windows::Win32::Security::UNICODE_STRING NtPassword;
        Windows::Win32::Security::UNICODE_STRING PrivateData;
        Windows::Win32::Security::SR_SECURITY_DESCRIPTOR SecurityDescriptor;
        uint32_t UserId;
        uint32_t PrimaryGroupId;
        uint32_t UserAccountControl;
        uint32_t WhichFields;
        Windows::Win32::Security::LOGON_HOURS LogonHours;
        uint16_t BadPasswordCount;
        uint16_t LogonCount;
        uint16_t CountryCode;
        uint16_t CodePage;
        uint8_t LmPasswordPresent;
        uint8_t NtPasswordPresent;
        uint8_t PasswordExpired;
        uint8_t PrivateDataSensitive;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CLEAR_BLOCK
    {
        int8_t data[8];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct USER_SESSION_KEY
    {
        Windows::Win32::PasswordManagement::CYPHER_BLOCK data[2];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct NETLOGON_LOGON_IDENTITY_INFO
    {
        Windows::Win32::Security::UNICODE_STRING LogonDomainName;
        uint32_t ParameterControl;
        Windows::Win32::Security::OLD_LARGE_INTEGER LogonId;
        Windows::Win32::Security::UNICODE_STRING UserName;
        Windows::Win32::Security::UNICODE_STRING Workstation;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct NETLOGON_INTERACTIVE_INFO
    {
        Windows::Win32::Security::NETLOGON_LOGON_IDENTITY_INFO Identity;
        Windows::Win32::PasswordManagement::LM_OWF_PASSWORD LmOwfPassword;
        Windows::Win32::PasswordManagement::LM_OWF_PASSWORD NtOwfPassword;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct NETLOGON_SERVICE_INFO
    {
        Windows::Win32::Security::NETLOGON_LOGON_IDENTITY_INFO Identity;
        Windows::Win32::PasswordManagement::LM_OWF_PASSWORD LmOwfPassword;
        Windows::Win32::PasswordManagement::LM_OWF_PASSWORD NtOwfPassword;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct NETLOGON_NETWORK_INFO
    {
        Windows::Win32::Security::NETLOGON_LOGON_IDENTITY_INFO Identity;
        Windows::Win32::Security::CLEAR_BLOCK LmChallenge;
        Windows::Win32::WindowsProgramming::STRING NtChallengeResponse;
        Windows::Win32::WindowsProgramming::STRING LmChallengeResponse;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct NETLOGON_GENERIC_INFO
    {
        Windows::Win32::Security::NETLOGON_LOGON_IDENTITY_INFO Identity;
        Windows::Win32::Security::UNICODE_STRING PackageName;
        uint32_t DataLength;
        uint8_t* LogonData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct MSV1_0_VALIDATION_INFO
    {
        Windows::Win32::SystemServices::LARGE_INTEGER LogoffTime;
        Windows::Win32::SystemServices::LARGE_INTEGER KickoffTime;
        Windows::Win32::Security::UNICODE_STRING LogonServer;
        Windows::Win32::Security::UNICODE_STRING LogonDomainName;
        Windows::Win32::Security::USER_SESSION_KEY SessionKey;
        uint8_t Authoritative;
        uint32_t UserFlags;
        uint32_t WhichFields;
        uint32_t UserId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct AUDIT_OBJECT_TYPE
    {
        ::win32::guid ObjectType;
        uint16_t Flags;
        uint16_t Level;
        uint32_t AccessMask;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct AUDIT_OBJECT_TYPES
    {
        uint16_t Count;
        uint16_t Flags;
        Windows::Win32::Security::AUDIT_OBJECT_TYPE* pObjectTypes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct AUDIT_IP_ADDRESS
    {
        uint8_t pIpAddress[128];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct AUDIT_PARAM
    {
        union _Anonymous1_e__Union
        {
            size_t Data0;
            uint16_t* String;
            size_t u;
            Windows::Win32::Security::SID* psid;
            ::win32::guid* pguid;
            uint32_t LogonId_LowPart;
            Windows::Win32::Security::AUDIT_OBJECT_TYPES* pObjectTypes;
            Windows::Win32::Security::AUDIT_IP_ADDRESS* pIpAddress;
        };
        union _Anonymous2_e__Union
        {
            size_t Data1;
            int32_t LogonId_HighPart;
        };
        Windows::Win32::Security::AUDIT_PARAM_TYPE Type;
        uint32_t Length;
        uint32_t Flags;
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct AUDIT_PARAMS
    {
        uint32_t Length;
        uint32_t Flags;
        uint16_t Count;
        Windows::Win32::Security::AUDIT_PARAM* Parameters;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct AUTHZ_AUDIT_EVENT_TYPE_LEGACY
    {
        uint16_t CategoryId;
        uint16_t AuditId;
        uint16_t ParameterCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    union AUTHZ_AUDIT_EVENT_TYPE_UNION
    {
        Windows::Win32::Security::AUTHZ_AUDIT_EVENT_TYPE_LEGACY Legacy;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct AUTHZ_AUDIT_EVENT_TYPE_OLD
    {
        uint32_t Version;
        uint32_t dwFlags;
        int32_t RefCount;
        size_t hAudit;
        Windows::Win32::Kernel::LUID LinkId;
        Windows::Win32::Security::AUTHZ_AUDIT_EVENT_TYPE_UNION u;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct AUTHZ_ACCESS_CHECK_RESULTS_HANDLE__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct AUTHZ_CLIENT_CONTEXT_HANDLE__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct AUTHZ_RESOURCE_MANAGER_HANDLE__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct AUTHZ_AUDIT_EVENT_HANDLE__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct AUTHZ_AUDIT_EVENT_TYPE_HANDLE__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct AUTHZ_SECURITY_EVENT_PROVIDER_HANDLE__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct AUTHZ_CAP_CHANGE_SUBSCRIPTION_HANDLE__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct AUTHZ_ACCESS_REQUEST
    {
        uint32_t DesiredAccess;
        void* PrincipalSelfSid;
        Windows::Win32::Security::OBJECT_TYPE_LIST* ObjectTypeList;
        uint32_t ObjectTypeListLength;
        void* OptionalArguments;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct AUTHZ_ACCESS_REPLY
    {
        uint32_t ResultListLength;
        uint32_t* GrantedAccessMask;
        uint32_t* SaclEvaluationResults;
        uint32_t* Error;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct AUTHZ_SECURITY_ATTRIBUTE_FQBN_VALUE
    {
        uint64_t Version;
        uint16_t* pName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct AUTHZ_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE
    {
        void* pValue;
        uint32_t ValueLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct AUTHZ_SECURITY_ATTRIBUTE_V1
    {
        union _Values_e__Union
        {
            int64_t* pInt64;
            uint64_t* pUint64;
            uint16_t** ppString;
            Windows::Win32::Security::AUTHZ_SECURITY_ATTRIBUTE_FQBN_VALUE* pFqbn;
            Windows::Win32::Security::AUTHZ_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE* pOctetString;
        };
        uint16_t* pName;
        uint16_t ValueType;
        uint16_t Reserved;
        uint32_t Flags;
        uint32_t ValueCount;
        _Values_e__Union Values;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct AUTHZ_SECURITY_ATTRIBUTES_INFORMATION
    {
        union _Attribute_e__Union
        {
            Windows::Win32::Security::AUTHZ_SECURITY_ATTRIBUTE_V1* pAttributeV1;
        };
        uint16_t Version;
        uint16_t Reserved;
        uint32_t AttributeCount;
        _Attribute_e__Union Attribute;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct AUTHZ_RPC_INIT_INFO_CLIENT
    {
        uint16_t version;
        uint16_t* ObjectUuid;
        uint16_t* ProtSeq;
        uint16_t* NetworkAddr;
        uint16_t* Endpoint;
        uint16_t* Options;
        uint16_t* ServerSpn;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct AUTHZ_INIT_INFO
    {
        uint16_t version;
        uint16_t* szResourceManagerName;
        Windows::Win32::Security::PFN_AUTHZ_DYNAMIC_ACCESS_CHECK* pfnDynamicAccessCheck;
        Windows::Win32::Security::PFN_AUTHZ_COMPUTE_DYNAMIC_GROUPS* pfnComputeDynamicGroups;
        Windows::Win32::Security::PFN_AUTHZ_FREE_DYNAMIC_GROUPS* pfnFreeDynamicGroups;
        Windows::Win32::Security::PFN_AUTHZ_GET_CENTRAL_ACCESS_POLICY* pfnGetCentralAccessPolicy;
        Windows::Win32::Security::PFN_AUTHZ_FREE_CENTRAL_ACCESS_POLICY* pfnFreeCentralAccessPolicy;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct AUTHZ_REGISTRATION_OBJECT_TYPE_NAME_OFFSET
    {
        uint16_t* szObjectTypeName;
        uint32_t dwOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct AUTHZ_SOURCE_SCHEMA_REGISTRATION
    {
        union _Anonymous_e__Union
        {
            void* pReserved;
            ::win32::guid* pProviderGuid;
        };
        uint32_t dwFlags;
        uint16_t* szEventSourceName;
        uint16_t* szEventMessageFile;
        uint16_t* szEventSourceXmlSchemaFile;
        uint16_t* szEventAccessStringsFile;
        uint16_t* szExecutableImagePath;
        _Anonymous_e__Union Anonymous;
        uint32_t dwObjectTypeNameCount;
        Windows::Win32::Security::AUTHZ_REGISTRATION_OBJECT_TYPE_NAME_OFFSET ObjectTypeNames[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SI_OBJECT_INFO
    {
        uint32_t dwFlags;
        Windows::Win32::SystemServices::HINSTANCE hInstance;
        uint16_t* pszServerName;
        uint16_t* pszObjectName;
        uint16_t* pszPageTitle;
        ::win32::guid guidObjectType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SI_ACCESS
    {
        ::win32::guid* pguid;
        uint32_t mask;
        uint16_t* pszName;
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SI_INHERIT_TYPE
    {
        ::win32::guid* pguid;
        uint32_t dwFlags;
        uint16_t* pszName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SID_INFO
    {
        void* pSid;
        uint16_t* pwzCommonName;
        uint16_t* pwzClass;
        uint16_t* pwzUPN;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SID_INFO_LIST
    {
        uint32_t cItems;
        Windows::Win32::Security::SID_INFO aSidInfo[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SECURITY_OBJECT
    {
        uint16_t* pwszName;
        void* pData;
        uint32_t cbData;
        void* pData2;
        uint32_t cbData2;
        uint32_t Id;
        uint8_t fWellKnown;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct EFFPERM_RESULT_LIST
    {
        uint8_t fEvaluated;
        uint32_t cObjectTypeListLength;
        Windows::Win32::Security::OBJECT_TYPE_LIST* pObjectTypeList;
        uint32_t* pGrantedAccessList;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERTTRANSBLOB
    {
        uint32_t cb;
        uint8_t* pb;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERTVIEWRESTRICTION
    {
        uint32_t ColumnIndex;
        int32_t SeekOperator;
        int32_t SortOrder;
        uint8_t* pbValue;
        uint32_t cbValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CSEDB_RSTMAPW
    {
        uint16_t* pwszDatabaseName;
        uint16_t* pwszNewDatabaseName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct NCRYPT_DESCRIPTOR_HANDLE__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct NCRYPT_STREAM_HANDLE__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct NCRYPT_PROTECT_STREAM_INFO
    {
        Windows::Win32::Security::PFNCryptStreamOutputCallback* pfnStreamOutput;
        void* pvCallbackCtxt;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct NCRYPT_PROTECT_STREAM_INFO_EX
    {
        Windows::Win32::Security::PFNCryptStreamOutputCallbackEx* pfnStreamOutput;
        void* pvCallbackCtxt;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct TOKENBINDING_IDENTIFIER
    {
        uint8_t keyType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct TOKENBINDING_RESULT_DATA
    {
        Windows::Win32::Security::TOKENBINDING_TYPE bindingType;
        uint32_t identifierSize;
        Windows::Win32::Security::TOKENBINDING_IDENTIFIER* identifierData;
        Windows::Win32::Security::TOKENBINDING_EXTENSION_FORMAT extensionFormat;
        uint32_t extensionSize;
        void* extensionData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct TOKENBINDING_RESULT_LIST
    {
        uint32_t resultCount;
        Windows::Win32::Security::TOKENBINDING_RESULT_DATA* resultData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct TOKENBINDING_KEY_TYPES
    {
        uint32_t keyCount;
        Windows::Win32::Security::TOKENBINDING_KEY_PARAMETERS_TYPE* keyType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_XML_BLOB
    {
        Windows::Win32::Security::CRYPT_XML_CHARSET dwCharset;
        uint32_t cbData;
        uint8_t* pbData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_XML_DATA_BLOB
    {
        uint32_t cbData;
        uint8_t* pbData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_XML_PROPERTY
    {
        Windows::Win32::Security::CRYPT_XML_PROPERTY_ID dwPropId;
        void* pvValue;
        uint32_t cbValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_XML_DATA_PROVIDER
    {
        void* pvCallbackState;
        uint32_t cbBufferSize;
        Windows::Win32::Security::PFN_CRYPT_XML_DATA_PROVIDER_READ* pfnRead;
        Windows::Win32::Security::PFN_CRYPT_XML_DATA_PROVIDER_CLOSE* pfnClose;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_XML_STATUS
    {
        uint32_t cbSize;
        uint32_t dwErrorStatus;
        uint32_t dwInfoStatus;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_XML_ALGORITHM
    {
        uint32_t cbSize;
        uint16_t* wszAlgorithm;
        Windows::Win32::Security::CRYPT_XML_BLOB Encoded;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_XML_TRANSFORM_INFO
    {
        uint32_t cbSize;
        uint16_t* wszAlgorithm;
        uint32_t cbBufferSize;
        uint32_t dwFlags;
        Windows::Win32::Security::PFN_CRYPT_XML_CREATE_TRANSFORM* pfnCreateTransform;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_XML_TRANSFORM_CHAIN_CONFIG
    {
        uint32_t cbSize;
        uint32_t cTransformInfo;
        Windows::Win32::Security::CRYPT_XML_TRANSFORM_INFO** rgpTransformInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_XML_KEY_DSA_KEY_VALUE
    {
        Windows::Win32::Security::CRYPT_XML_DATA_BLOB P;
        Windows::Win32::Security::CRYPT_XML_DATA_BLOB Q;
        Windows::Win32::Security::CRYPT_XML_DATA_BLOB G;
        Windows::Win32::Security::CRYPT_XML_DATA_BLOB Y;
        Windows::Win32::Security::CRYPT_XML_DATA_BLOB J;
        Windows::Win32::Security::CRYPT_XML_DATA_BLOB Seed;
        Windows::Win32::Security::CRYPT_XML_DATA_BLOB Counter;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_XML_KEY_ECDSA_KEY_VALUE
    {
        uint16_t* wszNamedCurve;
        Windows::Win32::Security::CRYPT_XML_DATA_BLOB X;
        Windows::Win32::Security::CRYPT_XML_DATA_BLOB Y;
        Windows::Win32::Security::CRYPT_XML_BLOB ExplicitPara;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_XML_KEY_RSA_KEY_VALUE
    {
        Windows::Win32::Security::CRYPT_XML_DATA_BLOB Modulus;
        Windows::Win32::Security::CRYPT_XML_DATA_BLOB Exponent;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_XML_KEY_VALUE
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::Security::CRYPT_XML_KEY_DSA_KEY_VALUE DSAKeyValue;
            Windows::Win32::Security::CRYPT_XML_KEY_RSA_KEY_VALUE RSAKeyValue;
            Windows::Win32::Security::CRYPT_XML_KEY_ECDSA_KEY_VALUE ECDSAKeyValue;
            Windows::Win32::Security::CRYPT_XML_BLOB Custom;
        };
        uint32_t dwType;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_XML_ISSUER_SERIAL
    {
        uint16_t* wszIssuer;
        uint16_t* wszSerial;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_XML_X509DATA_ITEM
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::Security::CRYPT_XML_ISSUER_SERIAL IssuerSerial;
            Windows::Win32::Security::CRYPT_XML_DATA_BLOB SKI;
            uint16_t* wszSubjectName;
            Windows::Win32::Security::CRYPT_XML_DATA_BLOB Certificate;
            Windows::Win32::Security::CRYPT_XML_DATA_BLOB CRL;
            Windows::Win32::Security::CRYPT_XML_BLOB Custom;
        };
        uint32_t dwType;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_XML_X509DATA
    {
        uint32_t cX509Data;
        Windows::Win32::Security::CRYPT_XML_X509DATA_ITEM* rgX509Data;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_XML_KEY_INFO_ITEM
    {
        union _Anonymous_e__Union
        {
            uint16_t* wszKeyName;
            Windows::Win32::Security::CRYPT_XML_KEY_VALUE KeyValue;
            Windows::Win32::Security::CRYPT_XML_BLOB RetrievalMethod;
            Windows::Win32::Security::CRYPT_XML_X509DATA X509Data;
            Windows::Win32::Security::CRYPT_XML_BLOB Custom;
        };
        uint32_t dwType;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_XML_KEY_INFO
    {
        uint32_t cbSize;
        uint16_t* wszId;
        uint32_t cKeyInfo;
        Windows::Win32::Security::CRYPT_XML_KEY_INFO_ITEM* rgKeyInfo;
        void* hVerifyKey;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_XML_REFERENCE
    {
        uint32_t cbSize;
        void* hReference;
        uint16_t* wszId;
        uint16_t* wszUri;
        uint16_t* wszType;
        Windows::Win32::Security::CRYPT_XML_ALGORITHM DigestMethod;
        Windows::Win32::Security::CRYPTOAPI_BLOB DigestValue;
        uint32_t cTransform;
        Windows::Win32::Security::CRYPT_XML_ALGORITHM* rgTransform;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_XML_REFERENCES
    {
        uint32_t cReference;
        Windows::Win32::Security::CRYPT_XML_REFERENCE** rgpReference;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_XML_SIGNED_INFO
    {
        uint32_t cbSize;
        uint16_t* wszId;
        Windows::Win32::Security::CRYPT_XML_ALGORITHM Canonicalization;
        Windows::Win32::Security::CRYPT_XML_ALGORITHM SignatureMethod;
        uint32_t cReference;
        Windows::Win32::Security::CRYPT_XML_REFERENCE** rgpReference;
        Windows::Win32::Security::CRYPT_XML_BLOB Encoded;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_XML_OBJECT
    {
        uint32_t cbSize;
        void* hObject;
        uint16_t* wszId;
        uint16_t* wszMimeType;
        uint16_t* wszEncoding;
        Windows::Win32::Security::CRYPT_XML_REFERENCES Manifest;
        Windows::Win32::Security::CRYPT_XML_BLOB Encoded;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_XML_SIGNATURE
    {
        uint32_t cbSize;
        void* hSignature;
        uint16_t* wszId;
        Windows::Win32::Security::CRYPT_XML_SIGNED_INFO SignedInfo;
        Windows::Win32::Security::CRYPTOAPI_BLOB SignatureValue;
        Windows::Win32::Security::CRYPT_XML_KEY_INFO* pKeyInfo;
        uint32_t cObject;
        Windows::Win32::Security::CRYPT_XML_OBJECT** rgpObject;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_XML_DOC_CTXT
    {
        uint32_t cbSize;
        void* hDocCtxt;
        Windows::Win32::Security::CRYPT_XML_TRANSFORM_CHAIN_CONFIG* pTransformsConfig;
        uint32_t cSignature;
        Windows::Win32::Security::CRYPT_XML_SIGNATURE** rgpSignature;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_XML_KEYINFO_PARAM
    {
        uint16_t* wszId;
        uint16_t* wszKeyName;
        Windows::Win32::Security::CRYPTOAPI_BLOB SKI;
        uint16_t* wszSubjectName;
        uint32_t cCertificate;
        Windows::Win32::Security::CRYPTOAPI_BLOB* rgCertificate;
        uint32_t cCRL;
        Windows::Win32::Security::CRYPTOAPI_BLOB* rgCRL;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_XML_ALGORITHM_INFO
    {
        uint32_t cbSize;
        uint16_t* wszAlgorithmURI;
        uint16_t* wszName;
        uint32_t dwGroupId;
        uint16_t* wszCNGAlgid;
        uint16_t* wszCNGExtraAlgid;
        uint32_t dwSignFlags;
        uint32_t dwVerifyFlags;
        void* pvPaddingInfo;
        void* pvExtraInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_XML_CRYPTOGRAPHIC_INTERFACE
    {
        uint32_t cbSize;
        Windows::Win32::Security::CryptXmlDllEncodeAlgorithm* fpCryptXmlEncodeAlgorithm;
        Windows::Win32::Security::CryptXmlDllCreateDigest* fpCryptXmlCreateDigest;
        Windows::Win32::Security::CryptXmlDllDigestData* fpCryptXmlDigestData;
        Windows::Win32::Security::CryptXmlDllFinalizeDigest* fpCryptXmlFinalizeDigest;
        Windows::Win32::Security::CryptXmlDllCloseDigest* fpCryptXmlCloseDigest;
        Windows::Win32::Security::CryptXmlDllSignData* fpCryptXmlSignData;
        Windows::Win32::Security::CryptXmlDllVerifySignature* fpCryptXmlVerifySignature;
        Windows::Win32::Security::CryptXmlDllGetAlgorithmInfo* fpCryptXmlGetAlgorithmInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CAINFO
    {
        uint32_t cbSize;
        Windows::Win32::Security::ENUM_CATYPES CAType;
        uint32_t cCASignatureCerts;
        uint32_t cCAExchangeCerts;
        uint32_t cExitModules;
        int32_t lPropIdMax;
        int32_t lRoleSeparationEnabled;
        uint32_t cKRACertUsedCount;
        uint32_t cKRACertCount;
        uint32_t fAdvancedServer;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct LLFILETIME
    {
        union _Anonymous_e__Union
        {
            int64_t ll;
            Windows::Win32::WindowsProgramming::FILETIME ft;
        };
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_SELECT_STRUCT_A
    {
        uint32_t dwSize;
        Windows::Win32::WindowsAndMessaging::HWND hwndParent;
        Windows::Win32::SystemServices::HINSTANCE hInstance;
        int8_t* pTemplateName;
        uint32_t dwFlags;
        int8_t* szTitle;
        uint32_t cCertStore;
        void** arrayCertStore;
        int8_t* szPurposeOid;
        uint32_t cCertContext;
        Windows::Win32::Security::CERT_CONTEXT** arrayCertContext;
        Windows::Win32::WindowsAndMessaging::LPARAM lCustData;
        Windows::Win32::Security::PFNCMHOOKPROC* pfnHook;
        Windows::Win32::Security::PFNCMFILTERPROC* pfnFilter;
        int8_t* szHelpFileName;
        uint32_t dwHelpId;
        size_t hprov;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_SELECT_STRUCT_W
    {
        uint32_t dwSize;
        Windows::Win32::WindowsAndMessaging::HWND hwndParent;
        Windows::Win32::SystemServices::HINSTANCE hInstance;
        uint16_t* pTemplateName;
        uint32_t dwFlags;
        uint16_t* szTitle;
        uint32_t cCertStore;
        void** arrayCertStore;
        int8_t* szPurposeOid;
        uint32_t cCertContext;
        Windows::Win32::Security::CERT_CONTEXT** arrayCertContext;
        Windows::Win32::WindowsAndMessaging::LPARAM lCustData;
        Windows::Win32::Security::PFNCMHOOKPROC* pfnHook;
        Windows::Win32::Security::PFNCMFILTERPROC* pfnFilter;
        uint16_t* szHelpFileName;
        uint32_t dwHelpId;
        size_t hprov;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_VIEWPROPERTIES_STRUCT_A
    {
        uint32_t dwSize;
        Windows::Win32::WindowsAndMessaging::HWND hwndParent;
        Windows::Win32::SystemServices::HINSTANCE hInstance;
        uint32_t dwFlags;
        int8_t* szTitle;
        Windows::Win32::Security::CERT_CONTEXT* pCertContext;
        int8_t** arrayPurposes;
        uint32_t cArrayPurposes;
        uint32_t cRootStores;
        void** rghstoreRoots;
        uint32_t cStores;
        void** rghstoreCAs;
        uint32_t cTrustStores;
        void** rghstoreTrust;
        size_t hprov;
        Windows::Win32::WindowsAndMessaging::LPARAM lCustData;
        uint32_t dwPad;
        int8_t* szHelpFileName;
        uint32_t dwHelpId;
        uint32_t nStartPage;
        uint32_t cArrayPropSheetPages;
        Windows::Win32::Controls::PROPSHEETPAGEA* arrayPropSheetPages;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_VIEWPROPERTIES_STRUCT_W
    {
        uint32_t dwSize;
        Windows::Win32::WindowsAndMessaging::HWND hwndParent;
        Windows::Win32::SystemServices::HINSTANCE hInstance;
        uint32_t dwFlags;
        uint16_t* szTitle;
        Windows::Win32::Security::CERT_CONTEXT* pCertContext;
        int8_t** arrayPurposes;
        uint32_t cArrayPurposes;
        uint32_t cRootStores;
        void** rghstoreRoots;
        uint32_t cStores;
        void** rghstoreCAs;
        uint32_t cTrustStores;
        void** rghstoreTrust;
        size_t hprov;
        Windows::Win32::WindowsAndMessaging::LPARAM lCustData;
        uint32_t dwPad;
        uint16_t* szHelpFileName;
        uint32_t dwHelpId;
        uint32_t nStartPage;
        uint32_t cArrayPropSheetPages;
        Windows::Win32::Controls::PROPSHEETPAGEA* arrayPropSheetPages;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct tagCMOID
    {
        int8_t* szExtensionOID;
        uint32_t dwTestOperation;
        uint8_t* pbTestData;
        uint32_t cbTestData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct tagCMFLTR
    {
        uint32_t dwSize;
        uint32_t cExtensionChecks;
        Windows::Win32::Security::tagCMOID* arrayExtensionChecks;
        uint32_t dwCheckingFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_VERIFY_CERTIFICATE_TRUST
    {
        uint32_t cbSize;
        Windows::Win32::Security::CERT_CONTEXT* pccert;
        uint32_t dwFlags;
        uint32_t dwIgnoreErr;
        uint32_t* pdwErrors;
        int8_t* pszUsageOid;
        size_t hprov;
        uint32_t cRootStores;
        void** rghstoreRoots;
        uint32_t cStores;
        void** rghstoreCAs;
        uint32_t cTrustStores;
        void** rghstoreTrust;
        Windows::Win32::WindowsAndMessaging::LPARAM lCustData;
        Windows::Win32::Security::PFNTRUSTHELPER* pfnTrustHelper;
        uint32_t* pcChain;
        Windows::Win32::Security::CERT_CONTEXT*** prgChain;
        uint32_t** prgdwErrors;
        Windows::Win32::Security::CRYPTOAPI_BLOB** prgpbTrustInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CTL_MODIFY_REQUEST
    {
        Windows::Win32::Security::CERT_CONTEXT* pccert;
        uint32_t dwOperation;
        uint32_t dwError;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct WINTRUST_DATA
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::Security::WINTRUST_FILE_INFO* pFile;
            Windows::Win32::Security::WINTRUST_CATALOG_INFO* pCatalog;
            Windows::Win32::Security::WINTRUST_BLOB_INFO* pBlob;
            Windows::Win32::Security::WINTRUST_SGNR_INFO* pSgnr;
            Windows::Win32::Security::WINTRUST_CERT_INFO* pCert;
        };
        uint32_t cbStruct;
        void* pPolicyCallbackData;
        void* pSIPClientData;
        uint32_t dwUIChoice;
        uint32_t fdwRevocationChecks;
        uint32_t dwUnionChoice;
        _Anonymous_e__Union Anonymous;
        uint32_t dwStateAction;
        Windows::Win32::SystemServices::HANDLE hWVTStateData;
        uint16_t* pwszURLReference;
        uint32_t dwProvFlags;
        uint32_t dwUIContext;
        Windows::Win32::Security::WINTRUST_SIGNATURE_SETTINGS* pSignatureSettings;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct WINTRUST_SIGNATURE_SETTINGS
    {
        uint32_t cbStruct;
        uint32_t dwIndex;
        uint32_t dwFlags;
        uint32_t cSecondarySigs;
        uint32_t dwVerifiedSigIndex;
        Windows::Win32::Security::CERT_STRONG_SIGN_PARA* pCryptoPolicy;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct WINTRUST_FILE_INFO
    {
        uint32_t cbStruct;
        uint16_t* pcwszFilePath;
        Windows::Win32::SystemServices::HANDLE hFile;
        ::win32::guid* pgKnownSubject;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct WINTRUST_CATALOG_INFO
    {
        uint32_t cbStruct;
        uint32_t dwCatalogVersion;
        uint16_t* pcwszCatalogFilePath;
        uint16_t* pcwszMemberTag;
        uint16_t* pcwszMemberFilePath;
        Windows::Win32::SystemServices::HANDLE hMemberFile;
        uint8_t* pbCalculatedFileHash;
        uint32_t cbCalculatedFileHash;
        Windows::Win32::Security::CTL_CONTEXT* pcCatalogContext;
        intptr_t hCatAdmin;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct WINTRUST_BLOB_INFO
    {
        uint32_t cbStruct;
        ::win32::guid gSubject;
        uint16_t* pcwszDisplayName;
        uint32_t cbMemObject;
        uint8_t* pbMemObject;
        uint32_t cbMemSignedMsg;
        uint8_t* pbMemSignedMsg;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct WINTRUST_SGNR_INFO
    {
        uint32_t cbStruct;
        uint16_t* pcwszDisplayName;
        Windows::Win32::Security::CMSG_SIGNER_INFO* psSignerInfo;
        uint32_t chStores;
        void** pahStores;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct WINTRUST_CERT_INFO
    {
        uint32_t cbStruct;
        uint16_t* pcwszDisplayName;
        Windows::Win32::Security::CERT_CONTEXT* psCertContext;
        uint32_t chStores;
        void** pahStores;
        uint32_t dwFlags;
        Windows::Win32::WindowsProgramming::FILETIME* psftVerifyAsOf;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_PROVIDER_DATA
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::Security::PROVDATA_SIP* pPDSip;
        };
        uint32_t cbStruct;
        Windows::Win32::Security::WINTRUST_DATA* pWintrustData;
        Windows::Win32::SystemServices::BOOL fOpenedFile;
        Windows::Win32::WindowsAndMessaging::HWND hWndParent;
        ::win32::guid* pgActionID;
        size_t hProv;
        uint32_t dwError;
        uint32_t dwRegSecuritySettings;
        uint32_t dwRegPolicySettings;
        Windows::Win32::Security::CRYPT_PROVIDER_FUNCTIONS* psPfns;
        uint32_t cdwTrustStepErrors;
        uint32_t* padwTrustStepErrors;
        uint32_t chStores;
        void** pahStores;
        uint32_t dwEncoding;
        void* hMsg;
        uint32_t csSigners;
        Windows::Win32::Security::CRYPT_PROVIDER_SGNR* pasSigners;
        uint32_t csProvPrivData;
        Windows::Win32::Security::CRYPT_PROVIDER_PRIVDATA* pasProvPrivData;
        uint32_t dwSubjectChoice;
        _Anonymous_e__Union Anonymous;
        int8_t* pszUsageOID;
        Windows::Win32::SystemServices::BOOL fRecallWithState;
        Windows::Win32::WindowsProgramming::FILETIME sftSystemTime;
        int8_t* pszCTLSignerUsageOID;
        uint32_t dwProvFlags;
        uint32_t dwFinalError;
        Windows::Win32::Security::CERT_USAGE_MATCH* pRequestUsage;
        uint32_t dwTrustPubSettings;
        uint32_t dwUIStateFlags;
        Windows::Win32::Security::CRYPT_PROVIDER_SIGSTATE* pSigState;
        Windows::Win32::Security::WINTRUST_SIGNATURE_SETTINGS* pSigSettings;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_PROVIDER_SIGSTATE
    {
        uint32_t cbStruct;
        void** rhSecondarySigs;
        void* hPrimarySig;
        Windows::Win32::SystemServices::BOOL fFirstAttemptMade;
        Windows::Win32::SystemServices::BOOL fNoMoreSigs;
        uint32_t cSecondarySigs;
        uint32_t dwCurrentIndex;
        Windows::Win32::SystemServices::BOOL fSupportMultiSig;
        uint32_t dwCryptoPolicySupport;
        uint32_t iAttemptCount;
        Windows::Win32::SystemServices::BOOL fCheckedSealing;
        Windows::Win32::Security::SEALING_SIGNATURE_ATTRIBUTE* pSealingSignature;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_PROVIDER_FUNCTIONS
    {
        uint32_t cbStruct;
        Windows::Win32::Security::PFN_CPD_MEM_ALLOC* pfnAlloc;
        Windows::Win32::Security::PFN_CPD_MEM_FREE* pfnFree;
        Windows::Win32::Security::PFN_CPD_ADD_STORE* pfnAddStore2Chain;
        Windows::Win32::Security::PFN_CPD_ADD_SGNR* pfnAddSgnr2Chain;
        Windows::Win32::Security::PFN_CPD_ADD_CERT* pfnAddCert2Chain;
        Windows::Win32::Security::PFN_CPD_ADD_PRIVDATA* pfnAddPrivData2Chain;
        Windows::Win32::Security::PFN_PROVIDER_INIT_CALL* pfnInitialize;
        Windows::Win32::Security::PFN_PROVIDER_OBJTRUST_CALL* pfnObjectTrust;
        Windows::Win32::Security::PFN_PROVIDER_SIGTRUST_CALL* pfnSignatureTrust;
        Windows::Win32::Security::PFN_PROVIDER_CERTTRUST_CALL* pfnCertificateTrust;
        Windows::Win32::Security::PFN_PROVIDER_FINALPOLICY_CALL* pfnFinalPolicy;
        Windows::Win32::Security::PFN_PROVIDER_CERTCHKPOLICY_CALL* pfnCertCheckPolicy;
        Windows::Win32::Security::PFN_PROVIDER_TESTFINALPOLICY_CALL* pfnTestFinalPolicy;
        Windows::Win32::Security::CRYPT_PROVUI_FUNCS* psUIpfns;
        Windows::Win32::Security::PFN_PROVIDER_CLEANUP_CALL* pfnCleanupPolicy;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_PROVUI_FUNCS
    {
        uint32_t cbStruct;
        Windows::Win32::Security::CRYPT_PROVUI_DATA* psUIData;
        Windows::Win32::Security::PFN_PROVUI_CALL* pfnOnMoreInfoClick;
        Windows::Win32::Security::PFN_PROVUI_CALL* pfnOnMoreInfoClickDefault;
        Windows::Win32::Security::PFN_PROVUI_CALL* pfnOnAdvancedClick;
        Windows::Win32::Security::PFN_PROVUI_CALL* pfnOnAdvancedClickDefault;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_PROVUI_DATA
    {
        uint32_t cbStruct;
        uint32_t dwFinalError;
        uint16_t* pYesButtonText;
        uint16_t* pNoButtonText;
        uint16_t* pMoreInfoButtonText;
        uint16_t* pAdvancedLinkText;
        uint16_t* pCopyActionText;
        uint16_t* pCopyActionTextNoTS;
        uint16_t* pCopyActionTextNotSigned;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_PROVIDER_SGNR
    {
        uint32_t cbStruct;
        Windows::Win32::WindowsProgramming::FILETIME sftVerifyAsOf;
        uint32_t csCertChain;
        Windows::Win32::Security::CRYPT_PROVIDER_CERT* pasCertChain;
        uint32_t dwSignerType;
        Windows::Win32::Security::CMSG_SIGNER_INFO* psSigner;
        uint32_t dwError;
        uint32_t csCounterSigners;
        Windows::Win32::Security::CRYPT_PROVIDER_SGNR* pasCounterSigners;
        Windows::Win32::Security::CERT_CHAIN_CONTEXT* pChainContext;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_PROVIDER_CERT
    {
        uint32_t cbStruct;
        Windows::Win32::Security::CERT_CONTEXT* pCert;
        Windows::Win32::SystemServices::BOOL fCommercial;
        Windows::Win32::SystemServices::BOOL fTrustedRoot;
        Windows::Win32::SystemServices::BOOL fSelfSigned;
        Windows::Win32::SystemServices::BOOL fTestCert;
        uint32_t dwRevokedReason;
        uint32_t dwConfidence;
        uint32_t dwError;
        Windows::Win32::Security::CTL_CONTEXT* pTrustListContext;
        Windows::Win32::SystemServices::BOOL fTrustListSignerCert;
        Windows::Win32::Security::CTL_CONTEXT* pCtlContext;
        uint32_t dwCtlError;
        Windows::Win32::SystemServices::BOOL fIsCyclic;
        Windows::Win32::Security::CERT_CHAIN_ELEMENT* pChainElement;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_PROVIDER_PRIVDATA
    {
        uint32_t cbStruct;
        ::win32::guid gProviderID;
        uint32_t cbProvData;
        void* pvProvData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct PROVDATA_SIP
    {
        uint32_t cbStruct;
        ::win32::guid gSubject;
        Windows::Win32::Security::SIP_DISPATCH_INFO* pSip;
        Windows::Win32::Security::SIP_DISPATCH_INFO* pCATSip;
        Windows::Win32::Security::SIP_SUBJECTINFO* psSipSubjectInfo;
        Windows::Win32::Security::SIP_SUBJECTINFO* psSipCATSubjectInfo;
        Windows::Win32::Security::SIP_INDIRECT_DATA* psIndirectData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_TRUST_REG_ENTRY
    {
        uint32_t cbStruct;
        uint16_t* pwszDLLName;
        uint16_t* pwszFunctionName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_REGISTER_ACTIONID
    {
        uint32_t cbStruct;
        Windows::Win32::Security::CRYPT_TRUST_REG_ENTRY sInitProvider;
        Windows::Win32::Security::CRYPT_TRUST_REG_ENTRY sObjectProvider;
        Windows::Win32::Security::CRYPT_TRUST_REG_ENTRY sSignatureProvider;
        Windows::Win32::Security::CRYPT_TRUST_REG_ENTRY sCertificateProvider;
        Windows::Win32::Security::CRYPT_TRUST_REG_ENTRY sCertificatePolicyProvider;
        Windows::Win32::Security::CRYPT_TRUST_REG_ENTRY sFinalPolicyProvider;
        Windows::Win32::Security::CRYPT_TRUST_REG_ENTRY sTestPolicyProvider;
        Windows::Win32::Security::CRYPT_TRUST_REG_ENTRY sCleanupProvider;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_PROVIDER_REGDEFUSAGE
    {
        uint32_t cbStruct;
        ::win32::guid* pgActionID;
        uint16_t* pwszDllName;
        int8_t* pwszLoadCallbackDataFunctionName;
        int8_t* pwszFreeCallbackDataFunctionName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPT_PROVIDER_DEFUSAGE
    {
        uint32_t cbStruct;
        ::win32::guid gActionID;
        void* pDefPolicyCallbackData;
        void* pDefSIPClientData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SPC_SERIALIZED_OBJECT
    {
        uint8_t ClassId[16];
        Windows::Win32::Security::CRYPTOAPI_BLOB SerializedData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SPC_SIGINFO
    {
        uint32_t dwSipVersion;
        ::win32::guid gSIPGuid;
        uint32_t dwReserved1;
        uint32_t dwReserved2;
        uint32_t dwReserved3;
        uint32_t dwReserved4;
        uint32_t dwReserved5;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SPC_LINK
    {
        union _Anonymous_e__Union
        {
            uint16_t* pwszUrl;
            Windows::Win32::Security::SPC_SERIALIZED_OBJECT Moniker;
            uint16_t* pwszFile;
        };
        uint32_t dwLinkChoice;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SPC_PE_IMAGE_DATA
    {
        Windows::Win32::Security::CRYPT_BIT_BLOB Flags;
        Windows::Win32::Security::SPC_LINK* pFile;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SPC_INDIRECT_DATA_CONTENT
    {
        Windows::Win32::Security::CRYPT_ATTRIBUTE_TYPE_VALUE Data;
        Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER DigestAlgorithm;
        Windows::Win32::Security::CRYPTOAPI_BLOB Digest;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SPC_FINANCIAL_CRITERIA
    {
        Windows::Win32::SystemServices::BOOL fFinancialInfoAvailable;
        Windows::Win32::SystemServices::BOOL fMeetsCriteria;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SPC_IMAGE
    {
        Windows::Win32::Security::SPC_LINK* pImageLink;
        Windows::Win32::Security::CRYPTOAPI_BLOB Bitmap;
        Windows::Win32::Security::CRYPTOAPI_BLOB Metafile;
        Windows::Win32::Security::CRYPTOAPI_BLOB EnhancedMetafile;
        Windows::Win32::Security::CRYPTOAPI_BLOB GifFile;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SPC_SP_AGENCY_INFO
    {
        Windows::Win32::Security::SPC_LINK* pPolicyInformation;
        uint16_t* pwszPolicyDisplayText;
        Windows::Win32::Security::SPC_IMAGE* pLogoImage;
        Windows::Win32::Security::SPC_LINK* pLogoLink;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SPC_STATEMENT_TYPE
    {
        uint32_t cKeyPurposeId;
        int8_t** rgpszKeyPurposeId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SPC_SP_OPUS_INFO
    {
        uint16_t* pwszProgramName;
        Windows::Win32::Security::SPC_LINK* pMoreInfo;
        Windows::Win32::Security::SPC_LINK* pPublisherInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CAT_NAMEVALUE
    {
        uint16_t* pwszTag;
        uint32_t fdwFlags;
        Windows::Win32::Security::CRYPTOAPI_BLOB Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CAT_MEMBERINFO
    {
        uint16_t* pwszSubjGuid;
        uint32_t dwCertVersion;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CAT_MEMBERINFO2
    {
        ::win32::guid SubjectGuid;
        uint32_t dwCertVersion;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct INTENT_TO_SEAL_ATTRIBUTE
    {
        uint32_t version;
        uint8_t seal;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SEALING_SIGNATURE_ATTRIBUTE
    {
        uint32_t version;
        uint32_t signerIndex;
        Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER signatureAlgorithm;
        Windows::Win32::Security::CRYPTOAPI_BLOB encryptedDigest;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SEALING_TIMESTAMP_ATTRIBUTE
    {
        uint32_t version;
        uint32_t signerIndex;
        Windows::Win32::Security::CRYPTOAPI_BLOB sealTimeStampToken;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct WIN_CERTIFICATE
    {
        uint32_t dwLength;
        uint16_t wRevision;
        uint16_t wCertificateType;
        uint8_t bCertificate[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct WIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT
    {
        Windows::Win32::SystemServices::HANDLE hClientToken;
        ::win32::guid* SubjectType;
        void* Subject;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct WIN_TRUST_ACTDATA_SUBJECT_ONLY
    {
        ::win32::guid* SubjectType;
        void* Subject;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct WIN_TRUST_SUBJECT_FILE
    {
        Windows::Win32::SystemServices::HANDLE hFile;
        uint16_t* lpPath;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct WIN_TRUST_SUBJECT_FILE_AND_DISPLAY
    {
        Windows::Win32::SystemServices::HANDLE hFile;
        uint16_t* lpPath;
        uint16_t* lpDisplayName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct WIN_SPUB_TRUSTED_PUBLISHER_DATA
    {
        Windows::Win32::SystemServices::HANDLE hClientToken;
        Windows::Win32::Security::WIN_CERTIFICATE* lpCertificate;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CERT_SELECTUI_INPUT
    {
        void* hStore;
        Windows::Win32::Security::CERT_CHAIN_CONTEXT** prgpChain;
        uint32_t cChain;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPTUI_CERT_MGR_STRUCT
    {
        uint32_t dwSize;
        Windows::Win32::WindowsAndMessaging::HWND hwndParent;
        uint32_t dwFlags;
        uint16_t* pwszTitle;
        int8_t* pszInitUsageOID;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPTUI_WIZ_DIGITAL_SIGN_BLOB_INFO
    {
        uint32_t dwSize;
        ::win32::guid* pGuidSubject;
        uint32_t cbBlob;
        uint8_t* pbBlob;
        uint16_t* pwszDisplayName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPTUI_WIZ_DIGITAL_SIGN_STORE_INFO
    {
        uint32_t dwSize;
        uint32_t cCertStore;
        void** rghCertStore;
        Windows::Win32::Security::PFNCFILTERPROC* pFilterCallback;
        void* pvCallbackData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPTUI_WIZ_DIGITAL_SIGN_PVK_FILE_INFO
    {
        uint32_t dwSize;
        uint16_t* pwszPvkFileName;
        uint16_t* pwszProvName;
        uint32_t dwProvType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPTUI_WIZ_DIGITAL_SIGN_CERT_PVK_INFO
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::Security::CRYPTUI_WIZ_DIGITAL_SIGN_PVK_FILE_INFO* pPvkFileInfo;
            Windows::Win32::Security::CRYPT_KEY_PROV_INFO* pPvkProvInfo;
        };
        uint32_t dwSize;
        uint16_t* pwszSigningCertFileName;
        uint32_t dwPvkChoice;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPTUI_WIZ_DIGITAL_SIGN_EXTENDED_INFO
    {
        uint32_t dwSize;
        uint32_t dwAttrFlags;
        uint16_t* pwszDescription;
        uint16_t* pwszMoreInfoLocation;
        int8_t* pszHashAlg;
        uint16_t* pwszSigningCertDisplayString;
        void* hAdditionalCertStore;
        Windows::Win32::Security::CRYPT_ATTRIBUTES* psAuthenticated;
        Windows::Win32::Security::CRYPT_ATTRIBUTES* psUnauthenticated;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPTUI_WIZ_DIGITAL_SIGN_INFO
    {
        union _Anonymous1_e__Union
        {
            uint16_t* pwszFileName;
            Windows::Win32::Security::CRYPTUI_WIZ_DIGITAL_SIGN_BLOB_INFO* pSignBlobInfo;
        };
        union _Anonymous2_e__Union
        {
            Windows::Win32::Security::CERT_CONTEXT* pSigningCertContext;
            Windows::Win32::Security::CRYPTUI_WIZ_DIGITAL_SIGN_STORE_INFO* pSigningCertStore;
            Windows::Win32::Security::CRYPTUI_WIZ_DIGITAL_SIGN_CERT_PVK_INFO* pSigningCertPvkInfo;
        };
        uint32_t dwSize;
        uint32_t dwSubjectChoice;
        _Anonymous1_e__Union Anonymous1;
        uint32_t dwSigningCertChoice;
        _Anonymous2_e__Union Anonymous2;
        uint16_t* pwszTimestampURL;
        uint32_t dwAdditionalCertChoice;
        Windows::Win32::Security::CRYPTUI_WIZ_DIGITAL_SIGN_EXTENDED_INFO* pSignExtInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT
    {
        uint32_t dwSize;
        uint32_t cbBlob;
        uint8_t* pbBlob;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPTUI_INITDIALOG_STRUCT
    {
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
        Windows::Win32::Security::CERT_CONTEXT* pCertContext;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPTUI_VIEWCERTIFICATE_STRUCTW
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::Security::CRYPT_PROVIDER_DATA* pCryptProviderData;
            Windows::Win32::SystemServices::HANDLE hWVTStateData;
        };
        uint32_t dwSize;
        Windows::Win32::WindowsAndMessaging::HWND hwndParent;
        uint32_t dwFlags;
        uint16_t* szTitle;
        Windows::Win32::Security::CERT_CONTEXT* pCertContext;
        int8_t** rgszPurposes;
        uint32_t cPurposes;
        _Anonymous_e__Union Anonymous;
        Windows::Win32::SystemServices::BOOL fpCryptProviderDataTrustedUsage;
        uint32_t idxSigner;
        uint32_t idxCert;
        Windows::Win32::SystemServices::BOOL fCounterSigner;
        uint32_t idxCounterSigner;
        uint32_t cStores;
        void** rghStores;
        uint32_t cPropSheetPages;
        Windows::Win32::Controls::PROPSHEETPAGEW* rgPropSheetPages;
        uint32_t nStartPage;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPTUI_VIEWCERTIFICATE_STRUCTA
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::Security::CRYPT_PROVIDER_DATA* pCryptProviderData;
            Windows::Win32::SystemServices::HANDLE hWVTStateData;
        };
        uint32_t dwSize;
        Windows::Win32::WindowsAndMessaging::HWND hwndParent;
        uint32_t dwFlags;
        int8_t* szTitle;
        Windows::Win32::Security::CERT_CONTEXT* pCertContext;
        int8_t** rgszPurposes;
        uint32_t cPurposes;
        _Anonymous_e__Union Anonymous;
        Windows::Win32::SystemServices::BOOL fpCryptProviderDataTrustedUsage;
        uint32_t idxSigner;
        uint32_t idxCert;
        Windows::Win32::SystemServices::BOOL fCounterSigner;
        uint32_t idxCounterSigner;
        uint32_t cStores;
        void** rghStores;
        uint32_t cPropSheetPages;
        Windows::Win32::Controls::PROPSHEETPAGEA* rgPropSheetPages;
        uint32_t nStartPage;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPTUI_WIZ_EXPORT_INFO
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::Security::CERT_CONTEXT* pCertContext;
            Windows::Win32::Security::CTL_CONTEXT* pCTLContext;
            Windows::Win32::Security::CRL_CONTEXT* pCRLContext;
            void* hCertStore;
        };
        uint32_t dwSize;
        uint16_t* pwszExportFileName;
        uint32_t dwSubjectChoice;
        _Anonymous_e__Union Anonymous;
        uint32_t cStores;
        void** rghStores;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPTUI_WIZ_EXPORT_CERTCONTEXT_INFO
    {
        uint32_t dwSize;
        uint32_t dwExportFormat;
        Windows::Win32::SystemServices::BOOL fExportChain;
        Windows::Win32::SystemServices::BOOL fExportPrivateKeys;
        uint16_t* pwszPassword;
        Windows::Win32::SystemServices::BOOL fStrongEncryption;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPTUI_WIZ_IMPORT_SRC_INFO
    {
        union _Anonymous_e__Union
        {
            uint16_t* pwszFileName;
            Windows::Win32::Security::CERT_CONTEXT* pCertContext;
            Windows::Win32::Security::CTL_CONTEXT* pCTLContext;
            Windows::Win32::Security::CRL_CONTEXT* pCRLContext;
            void* hCertStore;
        };
        uint32_t dwSize;
        uint32_t dwSubjectChoice;
        _Anonymous_e__Union Anonymous;
        uint32_t dwFlags;
        uint16_t* pwszPassword;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SIP_SUBJECTINFO
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::Security::MS_ADDINFO_FLAT* psFlat;
            Windows::Win32::Security::MS_ADDINFO_CATALOGMEMBER* psCatMember;
            Windows::Win32::Security::MS_ADDINFO_BLOB* psBlob;
        };
        uint32_t cbSize;
        ::win32::guid* pgSubjectType;
        Windows::Win32::SystemServices::HANDLE hFile;
        uint16_t* pwsFileName;
        uint16_t* pwsDisplayName;
        uint32_t dwReserved1;
        uint32_t dwIntVersion;
        size_t hProv;
        Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER DigestAlgorithm;
        uint32_t dwFlags;
        uint32_t dwEncodingType;
        uint32_t dwReserved2;
        uint32_t fdwCAPISettings;
        uint32_t fdwSecuritySettings;
        uint32_t dwIndex;
        uint32_t dwUnionChoice;
        _Anonymous_e__Union Anonymous;
        void* pClientData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct MS_ADDINFO_FLAT
    {
        uint32_t cbStruct;
        Windows::Win32::Security::SIP_INDIRECT_DATA* pIndirectData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct MS_ADDINFO_CATALOGMEMBER
    {
        uint32_t cbStruct;
        Windows::Win32::Security::CRYPTCATSTORE* pStore;
        Windows::Win32::Security::CRYPTCATMEMBER* pMember;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct MS_ADDINFO_BLOB
    {
        uint32_t cbStruct;
        uint32_t cbMemObject;
        uint8_t* pbMemObject;
        uint32_t cbMemSignedMsg;
        uint8_t* pbMemSignedMsg;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SIP_CAP_SET_V2
    {
        uint32_t cbSize;
        uint32_t dwVersion;
        Windows::Win32::SystemServices::BOOL isMultiSign;
        uint32_t dwReserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SIP_CAP_SET_V3
    {
        union _Anonymous_e__Union
        {
            uint32_t dwFlags;
            uint32_t dwReserved;
        };
        uint32_t cbSize;
        uint32_t dwVersion;
        Windows::Win32::SystemServices::BOOL isMultiSign;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SIP_INDIRECT_DATA
    {
        Windows::Win32::Security::CRYPT_ATTRIBUTE_TYPE_VALUE Data;
        Windows::Win32::Security::CRYPT_ALGORITHM_IDENTIFIER DigestAlgorithm;
        Windows::Win32::Security::CRYPTOAPI_BLOB Digest;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SIP_DISPATCH_INFO
    {
        uint32_t cbSize;
        Windows::Win32::SystemServices::HANDLE hSIP;
        Windows::Win32::Security::pCryptSIPGetSignedDataMsg* pfGet;
        Windows::Win32::Security::pCryptSIPPutSignedDataMsg* pfPut;
        Windows::Win32::Security::pCryptSIPCreateIndirectData* pfCreate;
        Windows::Win32::Security::pCryptSIPVerifyIndirectData* pfVerify;
        Windows::Win32::Security::pCryptSIPRemoveSignedDataMsg* pfRemove;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SIP_ADD_NEWPROVIDER
    {
        uint32_t cbStruct;
        ::win32::guid* pgSubject;
        uint16_t* pwszDLLFileName;
        uint16_t* pwszMagicNumber;
        uint16_t* pwszIsFunctionName;
        uint16_t* pwszGetFuncName;
        uint16_t* pwszPutFuncName;
        uint16_t* pwszCreateFuncName;
        uint16_t* pwszVerifyFuncName;
        uint16_t* pwszRemoveFuncName;
        uint16_t* pwszIsFunctionNameFmt2;
        uint16_t* pwszGetCapFuncName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPTCATSTORE
    {
        uint32_t cbStruct;
        uint32_t dwPublicVersion;
        uint16_t* pwszP7File;
        size_t hProv;
        uint32_t dwEncodingType;
        uint32_t fdwStoreFlags;
        Windows::Win32::SystemServices::HANDLE hReserved;
        Windows::Win32::SystemServices::HANDLE hAttrs;
        void* hCryptMsg;
        Windows::Win32::SystemServices::HANDLE hSorted;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPTCATMEMBER
    {
        uint32_t cbStruct;
        uint16_t* pwszReferenceTag;
        uint16_t* pwszFileName;
        ::win32::guid gSubjectType;
        uint32_t fdwMemberFlags;
        Windows::Win32::Security::SIP_INDIRECT_DATA* pIndirectData;
        uint32_t dwCertVersion;
        uint32_t dwReserved;
        Windows::Win32::SystemServices::HANDLE hReserved;
        Windows::Win32::Security::CRYPTOAPI_BLOB sEncodedIndirectData;
        Windows::Win32::Security::CRYPTOAPI_BLOB sEncodedMemberInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPTCATATTRIBUTE
    {
        uint32_t cbStruct;
        uint16_t* pwszReferenceTag;
        uint32_t dwAttrTypeAndAction;
        uint32_t cbValue;
        uint8_t* pbValue;
        uint32_t dwReserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CRYPTCATCDF
    {
        uint32_t cbStruct;
        Windows::Win32::SystemServices::HANDLE hFile;
        uint32_t dwCurFilePos;
        uint32_t dwLastMemberOffset;
        Windows::Win32::SystemServices::BOOL fEOF;
        uint16_t* pwszResultDir;
        Windows::Win32::SystemServices::HANDLE hCATStore;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct CATALOG_INFO
    {
        uint32_t cbStruct;
        uint16_t wszCatalogFile[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SCESVC_CONFIGURATION_LINE
    {
        int8_t* Key;
        int8_t* Value;
        uint32_t ValueLen;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SCESVC_CONFIGURATION_INFO
    {
        uint32_t Count;
        Windows::Win32::Security::SCESVC_CONFIGURATION_LINE* Lines;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SCESVC_ANALYSIS_LINE
    {
        int8_t* Key;
        uint8_t* Value;
        uint32_t ValueLen;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SCESVC_ANALYSIS_INFO
    {
        uint32_t Count;
        Windows::Win32::Security::SCESVC_ANALYSIS_LINE* Lines;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SCESVC_CALLBACK_INFO
    {
        void* sceHandle;
        Windows::Win32::Security::PFSCE_QUERY_INFO* pfQueryInfo;
        Windows::Win32::Security::PFSCE_SET_INFO* pfSetInfo;
        Windows::Win32::Security::PFSCE_FREE_INFO* pfFreeInfo;
        Windows::Win32::Security::PFSCE_LOG_INFO* pfLogInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SAFER_LEVEL_HANDLE__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SAFER_CODE_PROPERTIES_V1
    {
        uint32_t cbSize;
        uint32_t dwCheckFlags;
        uint16_t* ImagePath;
        Windows::Win32::SystemServices::HANDLE hImageFileHandle;
        uint32_t UrlZoneId;
        uint8_t ImageHash[64];
        uint32_t dwImageHashSize;
        Windows::Win32::SystemServices::LARGE_INTEGER ImageSize;
        uint32_t HashAlgorithm;
        uint8_t* pByteBlock;
        Windows::Win32::WindowsAndMessaging::HWND hWndParent;
        uint32_t dwWVTUIChoice;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SAFER_CODE_PROPERTIES_V2
    {
        uint32_t cbSize;
        uint32_t dwCheckFlags;
        uint16_t* ImagePath;
        Windows::Win32::SystemServices::HANDLE hImageFileHandle;
        uint32_t UrlZoneId;
        uint8_t ImageHash[64];
        uint32_t dwImageHashSize;
        Windows::Win32::SystemServices::LARGE_INTEGER ImageSize;
        uint32_t HashAlgorithm;
        uint8_t* pByteBlock;
        Windows::Win32::WindowsAndMessaging::HWND hWndParent;
        uint32_t dwWVTUIChoice;
        uint16_t* PackageMoniker;
        uint16_t* PackagePublisher;
        uint16_t* PackageName;
        uint64_t PackageVersion;
        Windows::Win32::SystemServices::BOOL PackageIsFramework;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SAFER_IDENTIFICATION_HEADER
    {
        Windows::Win32::Security::SAFER_IDENTIFICATION_TYPES dwIdentificationType;
        uint32_t cbStructSize;
        ::win32::guid IdentificationGuid;
        Windows::Win32::WindowsProgramming::FILETIME lastModified;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SAFER_PATHNAME_IDENTIFICATION
    {
        Windows::Win32::Security::SAFER_IDENTIFICATION_HEADER header;
        uint16_t Description[256];
        uint16_t* ImageName;
        uint32_t dwSaferFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SAFER_HASH_IDENTIFICATION
    {
        Windows::Win32::Security::SAFER_IDENTIFICATION_HEADER header;
        uint16_t Description[256];
        uint16_t FriendlyName[256];
        uint32_t HashSize;
        uint8_t ImageHash[64];
        uint32_t HashAlgorithm;
        Windows::Win32::SystemServices::LARGE_INTEGER ImageSize;
        uint32_t dwSaferFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SAFER_HASH_IDENTIFICATION2
    {
        Windows::Win32::Security::SAFER_HASH_IDENTIFICATION hashIdentification;
        uint32_t HashSize;
        uint8_t ImageHash[64];
        uint32_t HashAlgorithm;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SAFER_URLZONE_IDENTIFICATION
    {
        Windows::Win32::Security::SAFER_IDENTIFICATION_HEADER header;
        uint32_t UrlZoneId;
        uint32_t dwSaferFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SL_LICENSING_STATUS
    {
        ::win32::guid SkuId;
        Windows::Win32::Security::SLLICENSINGSTATUS eStatus;
        uint32_t dwGraceTime;
        uint32_t dwTotalGraceDays;
        int32_t hrReason;
        uint64_t qwValidityExpiration;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SL_ACTIVATION_INFO_HEADER
    {
        uint32_t cbSize;
        Windows::Win32::Security::SL_ACTIVATION_TYPE type;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SL_AD_ACTIVATION_INFO
    {
        Windows::Win32::Security::SL_ACTIVATION_INFO_HEADER header;
        uint16_t* pwszProductKey;
        uint16_t* pwszActivationObjectName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SL_NONGENUINE_UI_OPTIONS
    {
        uint32_t cbSize;
        ::win32::guid* pComponentId;
        int32_t hResultUI;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SL_SYSTEM_POLICY_INFORMATION
    {
        void* Reserved1[2];
        uint32_t Reserved2[3];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct DIAGNOSTIC_DATA_RECORD
    {
        int64_t rowId;
        uint64_t timestamp;
        uint64_t eventKeywords;
        uint16_t* fullEventName;
        uint16_t* providerGroupGuid;
        uint16_t* producerName;
        int32_t* privacyTags;
        uint32_t privacyTagCount;
        int32_t* categoryIds;
        uint32_t categoryIdCount;
        Windows::Win32::SystemServices::BOOL isCoreData;
        uint16_t* extra1;
        uint16_t* extra2;
        uint16_t* extra3;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct DIAGNOSTIC_DATA_SEARCH_CRITERIA
    {
        uint16_t** producerNames;
        uint32_t producerNameCount;
        uint16_t* textToMatch;
        int32_t* categoryIds;
        uint32_t categoryIdCount;
        int32_t* privacyTags;
        uint32_t privacyTagCount;
        Windows::Win32::SystemServices::BOOL coreDataOnly;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct DIAGNOSTIC_DATA_EVENT_TAG_DESCRIPTION
    {
        int32_t privacyTag;
        uint16_t* name;
        uint16_t* description;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct DIAGNOSTIC_DATA_EVENT_PRODUCER_DESCRIPTION
    {
        uint16_t* name;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct DIAGNOSTIC_DATA_EVENT_CATEGORY_DESCRIPTION
    {
        int32_t id;
        uint16_t* name;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct DIAGNOSTIC_DATA_EVENT_TAG_STATS
    {
        int32_t privacyTag;
        uint32_t eventCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct DIAGNOSTIC_DATA_EVENT_BINARY_STATS
    {
        uint16_t* moduleName;
        uint16_t* friendlyModuleName;
        uint32_t eventCount;
        uint64_t uploadSizeBytes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct DIAGNOSTIC_DATA_GENERAL_STATS
    {
        uint32_t optInLevel;
        uint64_t transcriptSizeBytes;
        uint64_t oldestEventTimestamp;
        uint32_t totalEventCountLast24Hours;
        float averageDailyEvents;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct DIAGNOSTIC_DATA_EVENT_TRANSCRIPT_CONFIGURATION
    {
        uint32_t hoursOfHistoryToKeep;
        uint32_t maxStoreMegabytes;
        uint32_t requestedMaxStoreMegabytes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct DIAGNOSTIC_REPORT_PARAMETER
    {
        uint16_t name[129];
        uint16_t value[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct DIAGNOSTIC_REPORT_SIGNATURE
    {
        uint16_t eventName[65];
        Windows::Win32::Security::DIAGNOSTIC_REPORT_PARAMETER parameters[10];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct DIAGNOSTIC_REPORT_DATA
    {
        Windows::Win32::Security::DIAGNOSTIC_REPORT_SIGNATURE signature;
        ::win32::guid bucketId;
        ::win32::guid reportId;
        Windows::Win32::WindowsProgramming::FILETIME creationTime;
        uint64_t sizeInBytes;
        uint16_t* cabId;
        uint32_t reportStatus;
        ::win32::guid reportIntegratorId;
        uint16_t** fileNames;
        uint32_t fileCount;
        uint16_t* friendlyEventName;
        uint16_t* applicationName;
        uint16_t* applicationPath;
        uint16_t* description;
        uint16_t* bucketIdString;
        uint64_t legacyBucketId;
        uint16_t* reportKey;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct HDIAGNOSTIC_DATA_QUERY_SESSION__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct HDIAGNOSTIC_REPORT__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct HDIAGNOSTIC_EVENT_TAG_DESCRIPTION__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct HDIAGNOSTIC_EVENT_PRODUCER_DESCRIPTION__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct HDIAGNOSTIC_EVENT_CATEGORY_DESCRIPTION__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct HDIAGNOSTIC_RECORD__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct ACTRL_ACCESS_ENTRYA
    {
        Windows::Win32::Security::TRUSTEE_A Trustee;
        uint32_t fAccessFlags;
        uint32_t Access;
        uint32_t ProvSpecificAccess;
        uint32_t Inheritance;
        int8_t* lpInheritProperty;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct ACTRL_ACCESS_ENTRYW
    {
        Windows::Win32::Security::TRUSTEE_W Trustee;
        uint32_t fAccessFlags;
        uint32_t Access;
        uint32_t ProvSpecificAccess;
        uint32_t Inheritance;
        uint16_t* lpInheritProperty;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct ACTRL_ACCESS_ENTRY_LISTA
    {
        uint32_t cEntries;
        Windows::Win32::Com::ACTRL_ACCESS_ENTRYA* pAccessList;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct ACTRL_ACCESS_ENTRY_LISTW
    {
        uint32_t cEntries;
        Windows::Win32::Com::ACTRL_ACCESS_ENTRYW* pAccessList;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct ACTRL_PROPERTY_ENTRYA
    {
        int8_t* lpProperty;
        Windows::Win32::Com::ACTRL_ACCESS_ENTRY_LISTA* pAccessEntryList;
        uint32_t fListFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct ACTRL_PROPERTY_ENTRYW
    {
        uint16_t* lpProperty;
        Windows::Win32::Com::ACTRL_ACCESS_ENTRY_LISTW* pAccessEntryList;
        uint32_t fListFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct ACTRL_ACCESSA
    {
        uint32_t cEntries;
        Windows::Win32::Com::ACTRL_PROPERTY_ENTRYA* pPropertyAccessList;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Com
{
    struct ACTRL_ACCESSW
    {
        uint32_t cEntries;
        Windows::Win32::Com::ACTRL_PROPERTY_ENTRYW* pPropertyAccessList;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemEventNotificationService
{
    struct QOCINFO
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        uint32_t dwInSpeed;
        uint32_t dwOutSpeed;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemEventNotificationService
{
    struct SENS_QOCINFO
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        uint32_t dwOutSpeed;
        uint32_t dwInSpeed;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SerialController
{
    struct HCOMDB__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ApplicationInstallationAndServicing
{
    struct PMSIHANDLE
    {
        uint32_t m_h;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ApplicationInstallationAndServicing
{
    struct MSIPATCHSEQUENCEINFOA
    {
        int8_t* szPatchData;
        Windows::Win32::ApplicationInstallationAndServicing::MSIPATCHDATATYPE ePatchDataType;
        uint32_t dwOrder;
        uint32_t uStatus;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ApplicationInstallationAndServicing
{
    struct MSIPATCHSEQUENCEINFOW
    {
        uint16_t* szPatchData;
        Windows::Win32::ApplicationInstallationAndServicing::MSIPATCHDATATYPE ePatchDataType;
        uint32_t dwOrder;
        uint32_t uStatus;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ApplicationInstallationAndServicing
{
    struct MSIFILEHASHINFO
    {
        uint32_t dwFileHashInfoSize;
        uint32_t dwData[4];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ApplicationInstallationAndServicing
{
    struct ASSEMBLY_INFO
    {
        uint32_t cbAssemblyInfo;
        uint32_t dwAssemblyFlags;
        Windows::Win32::SystemServices::ULARGE_INTEGER uliAssemblySizeInKB;
        uint16_t* pszCurrentAssemblyPathBuf;
        uint32_t cchBuf;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ApplicationInstallationAndServicing
{
    struct FUSION_INSTALL_REFERENCE
    {
        uint32_t cbSize;
        uint32_t dwFlags;
        ::win32::guid guidScheme;
        uint16_t* szIdentifier;
        uint16_t* szNonCannonicalData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ApplicationInstallationAndServicing
{
    struct PROTECTED_FILE_DATA
    {
        uint16_t FileName[260];
        uint32_t FileNumber;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_INPUT_ELEMENT_DESC
    {
        int8_t* SemanticName;
        uint32_t SemanticIndex;
        Windows::Win32::Dxgi::DXGI_FORMAT Format;
        uint32_t InputSlot;
        uint32_t AlignedByteOffset;
        Windows::Win32::Direct3D10::D3D10_INPUT_CLASSIFICATION InputSlotClass;
        uint32_t InstanceDataStepRate;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_SO_DECLARATION_ENTRY
    {
        int8_t* SemanticName;
        uint32_t SemanticIndex;
        uint8_t StartComponent;
        uint8_t ComponentCount;
        uint8_t OutputSlot;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_VIEWPORT
    {
        int32_t TopLeftX;
        int32_t TopLeftY;
        uint32_t Width;
        uint32_t Height;
        float MinDepth;
        float MaxDepth;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_BOX
    {
        uint32_t left;
        uint32_t top;
        uint32_t front;
        uint32_t right;
        uint32_t bottom;
        uint32_t back;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_DEPTH_STENCILOP_DESC
    {
        Windows::Win32::Direct3D10::D3D10_STENCIL_OP StencilFailOp;
        Windows::Win32::Direct3D10::D3D10_STENCIL_OP StencilDepthFailOp;
        Windows::Win32::Direct3D10::D3D10_STENCIL_OP StencilPassOp;
        Windows::Win32::Direct3D10::D3D10_COMPARISON_FUNC StencilFunc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_DEPTH_STENCIL_DESC
    {
        Windows::Win32::SystemServices::BOOL DepthEnable;
        Windows::Win32::Direct3D10::D3D10_DEPTH_WRITE_MASK DepthWriteMask;
        Windows::Win32::Direct3D10::D3D10_COMPARISON_FUNC DepthFunc;
        Windows::Win32::SystemServices::BOOL StencilEnable;
        uint8_t StencilReadMask;
        uint8_t StencilWriteMask;
        Windows::Win32::Direct3D10::D3D10_DEPTH_STENCILOP_DESC FrontFace;
        Windows::Win32::Direct3D10::D3D10_DEPTH_STENCILOP_DESC BackFace;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_BLEND_DESC
    {
        Windows::Win32::SystemServices::BOOL AlphaToCoverageEnable;
        Windows::Win32::SystemServices::BOOL*** BlendEnable[8];
        Windows::Win32::Direct3D10::D3D10_BLEND SrcBlend;
        Windows::Win32::Direct3D10::D3D10_BLEND DestBlend;
        Windows::Win32::Direct3D10::D3D10_BLEND_OP BlendOp;
        Windows::Win32::Direct3D10::D3D10_BLEND SrcBlendAlpha;
        Windows::Win32::Direct3D10::D3D10_BLEND DestBlendAlpha;
        Windows::Win32::Direct3D10::D3D10_BLEND_OP BlendOpAlpha;
        uint8_t RenderTargetWriteMask[8];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_RASTERIZER_DESC
    {
        Windows::Win32::Direct3D10::D3D10_FILL_MODE FillMode;
        Windows::Win32::Direct3D10::D3D10_CULL_MODE CullMode;
        Windows::Win32::SystemServices::BOOL FrontCounterClockwise;
        int32_t DepthBias;
        float DepthBiasClamp;
        float SlopeScaledDepthBias;
        Windows::Win32::SystemServices::BOOL DepthClipEnable;
        Windows::Win32::SystemServices::BOOL ScissorEnable;
        Windows::Win32::SystemServices::BOOL MultisampleEnable;
        Windows::Win32::SystemServices::BOOL AntialiasedLineEnable;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_SUBRESOURCE_DATA
    {
        void* pSysMem;
        uint32_t SysMemPitch;
        uint32_t SysMemSlicePitch;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_BUFFER_DESC
    {
        uint32_t ByteWidth;
        Windows::Win32::Direct3D10::D3D10_USAGE Usage;
        uint32_t BindFlags;
        uint32_t CPUAccessFlags;
        uint32_t MiscFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_TEXTURE1D_DESC
    {
        uint32_t Width;
        uint32_t MipLevels;
        uint32_t ArraySize;
        Windows::Win32::Dxgi::DXGI_FORMAT Format;
        Windows::Win32::Direct3D10::D3D10_USAGE Usage;
        uint32_t BindFlags;
        uint32_t CPUAccessFlags;
        uint32_t MiscFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dxgi
{
    struct DXGI_SAMPLE_DESC
    {
        uint32_t Count;
        uint32_t Quality;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_TEXTURE2D_DESC
    {
        uint32_t Width;
        uint32_t Height;
        uint32_t MipLevels;
        uint32_t ArraySize;
        Windows::Win32::Dxgi::DXGI_FORMAT Format;
        Windows::Win32::Dxgi::DXGI_SAMPLE_DESC SampleDesc;
        Windows::Win32::Direct3D10::D3D10_USAGE Usage;
        uint32_t BindFlags;
        uint32_t CPUAccessFlags;
        uint32_t MiscFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_MAPPED_TEXTURE2D
    {
        void* pData;
        uint32_t RowPitch;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_TEXTURE3D_DESC
    {
        uint32_t Width;
        uint32_t Height;
        uint32_t Depth;
        uint32_t MipLevels;
        Windows::Win32::Dxgi::DXGI_FORMAT Format;
        Windows::Win32::Direct3D10::D3D10_USAGE Usage;
        uint32_t BindFlags;
        uint32_t CPUAccessFlags;
        uint32_t MiscFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_MAPPED_TEXTURE3D
    {
        void* pData;
        uint32_t RowPitch;
        uint32_t DepthPitch;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_BUFFER_SRV
    {
        union _Anonymous1_e__Union
        {
            uint32_t FirstElement;
            uint32_t ElementOffset;
        };
        union _Anonymous2_e__Union
        {
            uint32_t NumElements;
            uint32_t ElementWidth;
        };
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_TEX1D_SRV
    {
        uint32_t MostDetailedMip;
        uint32_t MipLevels;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_TEX1D_ARRAY_SRV
    {
        uint32_t MostDetailedMip;
        uint32_t MipLevels;
        uint32_t FirstArraySlice;
        uint32_t ArraySize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_TEX2D_SRV
    {
        uint32_t MostDetailedMip;
        uint32_t MipLevels;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_TEX2D_ARRAY_SRV
    {
        uint32_t MostDetailedMip;
        uint32_t MipLevels;
        uint32_t FirstArraySlice;
        uint32_t ArraySize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_TEX3D_SRV
    {
        uint32_t MostDetailedMip;
        uint32_t MipLevels;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_TEXCUBE_SRV
    {
        uint32_t MostDetailedMip;
        uint32_t MipLevels;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_TEX2DMS_SRV
    {
        uint32_t UnusedField_NothingToDefine;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_TEX2DMS_ARRAY_SRV
    {
        uint32_t FirstArraySlice;
        uint32_t ArraySize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_SHADER_RESOURCE_VIEW_DESC
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::Direct3D10::D3D10_BUFFER_SRV Buffer;
            Windows::Win32::Direct3D10::D3D10_TEX1D_SRV Texture1D;
            Windows::Win32::Direct3D10::D3D10_TEX1D_ARRAY_SRV Texture1DArray;
            Windows::Win32::Direct3D10::D3D10_TEX2D_SRV Texture2D;
            Windows::Win32::Direct3D10::D3D10_TEX2D_ARRAY_SRV Texture2DArray;
            Windows::Win32::Direct3D10::D3D10_TEX2DMS_SRV Texture2DMS;
            Windows::Win32::Direct3D10::D3D10_TEX2DMS_ARRAY_SRV Texture2DMSArray;
            Windows::Win32::Direct3D10::D3D10_TEX3D_SRV Texture3D;
            Windows::Win32::Direct3D10::D3D10_TEXCUBE_SRV TextureCube;
        };
        Windows::Win32::Dxgi::DXGI_FORMAT Format;
        Windows::Win32::Direct3D11::D3D_SRV_DIMENSION ViewDimension;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_BUFFER_RTV
    {
        union _Anonymous1_e__Union
        {
            uint32_t FirstElement;
            uint32_t ElementOffset;
        };
        union _Anonymous2_e__Union
        {
            uint32_t NumElements;
            uint32_t ElementWidth;
        };
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_TEX1D_RTV
    {
        uint32_t MipSlice;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_TEX1D_ARRAY_RTV
    {
        uint32_t MipSlice;
        uint32_t FirstArraySlice;
        uint32_t ArraySize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_TEX2D_RTV
    {
        uint32_t MipSlice;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_TEX2DMS_RTV
    {
        uint32_t UnusedField_NothingToDefine;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_TEX2D_ARRAY_RTV
    {
        uint32_t MipSlice;
        uint32_t FirstArraySlice;
        uint32_t ArraySize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_TEX2DMS_ARRAY_RTV
    {
        uint32_t FirstArraySlice;
        uint32_t ArraySize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_TEX3D_RTV
    {
        uint32_t MipSlice;
        uint32_t FirstWSlice;
        uint32_t WSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_RENDER_TARGET_VIEW_DESC
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::Direct3D10::D3D10_BUFFER_RTV Buffer;
            Windows::Win32::Direct3D10::D3D10_TEX1D_RTV Texture1D;
            Windows::Win32::Direct3D10::D3D10_TEX1D_ARRAY_RTV Texture1DArray;
            Windows::Win32::Direct3D10::D3D10_TEX2D_RTV Texture2D;
            Windows::Win32::Direct3D10::D3D10_TEX2D_ARRAY_RTV Texture2DArray;
            Windows::Win32::Direct3D10::D3D10_TEX2DMS_RTV Texture2DMS;
            Windows::Win32::Direct3D10::D3D10_TEX2DMS_ARRAY_RTV Texture2DMSArray;
            Windows::Win32::Direct3D10::D3D10_TEX3D_RTV Texture3D;
        };
        Windows::Win32::Dxgi::DXGI_FORMAT Format;
        Windows::Win32::Direct3D10::D3D10_RTV_DIMENSION ViewDimension;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_TEX1D_DSV
    {
        uint32_t MipSlice;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_TEX1D_ARRAY_DSV
    {
        uint32_t MipSlice;
        uint32_t FirstArraySlice;
        uint32_t ArraySize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_TEX2D_DSV
    {
        uint32_t MipSlice;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_TEX2D_ARRAY_DSV
    {
        uint32_t MipSlice;
        uint32_t FirstArraySlice;
        uint32_t ArraySize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_TEX2DMS_DSV
    {
        uint32_t UnusedField_NothingToDefine;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_TEX2DMS_ARRAY_DSV
    {
        uint32_t FirstArraySlice;
        uint32_t ArraySize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_DEPTH_STENCIL_VIEW_DESC
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::Direct3D10::D3D10_TEX1D_DSV Texture1D;
            Windows::Win32::Direct3D10::D3D10_TEX1D_ARRAY_DSV Texture1DArray;
            Windows::Win32::Direct3D10::D3D10_TEX2D_DSV Texture2D;
            Windows::Win32::Direct3D10::D3D10_TEX2D_ARRAY_DSV Texture2DArray;
            Windows::Win32::Direct3D10::D3D10_TEX2DMS_DSV Texture2DMS;
            Windows::Win32::Direct3D10::D3D10_TEX2DMS_ARRAY_DSV Texture2DMSArray;
        };
        Windows::Win32::Dxgi::DXGI_FORMAT Format;
        Windows::Win32::Direct3D10::D3D10_DSV_DIMENSION ViewDimension;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_SAMPLER_DESC
    {
        Windows::Win32::Direct3D10::D3D10_FILTER Filter;
        Windows::Win32::Direct3D10::D3D10_TEXTURE_ADDRESS_MODE AddressU;
        Windows::Win32::Direct3D10::D3D10_TEXTURE_ADDRESS_MODE AddressV;
        Windows::Win32::Direct3D10::D3D10_TEXTURE_ADDRESS_MODE AddressW;
        float MipLODBias;
        uint32_t MaxAnisotropy;
        Windows::Win32::Direct3D10::D3D10_COMPARISON_FUNC ComparisonFunc;
        float BorderColor[4];
        float MinLOD;
        float MaxLOD;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_QUERY_DESC
    {
        Windows::Win32::Direct3D10::D3D10_QUERY Query;
        uint32_t MiscFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_QUERY_DATA_TIMESTAMP_DISJOINT
    {
        uint64_t Frequency;
        Windows::Win32::SystemServices::BOOL Disjoint;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_QUERY_DATA_PIPELINE_STATISTICS
    {
        uint64_t IAVertices;
        uint64_t IAPrimitives;
        uint64_t VSInvocations;
        uint64_t GSInvocations;
        uint64_t GSPrimitives;
        uint64_t CInvocations;
        uint64_t CPrimitives;
        uint64_t PSInvocations;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_QUERY_DATA_SO_STATISTICS
    {
        uint64_t NumPrimitivesWritten;
        uint64_t PrimitivesStorageNeeded;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_COUNTER_DESC
    {
        Windows::Win32::Direct3D10::D3D10_COUNTER Counter;
        uint32_t MiscFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_COUNTER_INFO
    {
        Windows::Win32::Direct3D10::D3D10_COUNTER LastDeviceDependentCounter;
        uint32_t NumSimultaneousCounters;
        uint8_t NumDetectableParallelUnits;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_MESSAGE
    {
        Windows::Win32::Direct3D10::D3D10_MESSAGE_CATEGORY Category;
        Windows::Win32::Direct3D10::D3D10_MESSAGE_SEVERITY Severity;
        Windows::Win32::Direct3D10::D3D10_MESSAGE_ID ID;
        int8_t* pDescription;
        size_t DescriptionByteLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_INFO_QUEUE_FILTER_DESC
    {
        uint32_t NumCategories;
        Windows::Win32::Direct3D10::D3D10_MESSAGE_CATEGORY* pCategoryList;
        uint32_t NumSeverities;
        Windows::Win32::Direct3D10::D3D10_MESSAGE_SEVERITY* pSeverityList;
        uint32_t NumIDs;
        Windows::Win32::Direct3D10::D3D10_MESSAGE_ID* pIDList;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_INFO_QUEUE_FILTER
    {
        Windows::Win32::Direct3D10::D3D10_INFO_QUEUE_FILTER_DESC AllowList;
        Windows::Win32::Direct3D10::D3D10_INFO_QUEUE_FILTER_DESC DenyList;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_SHADER_DESC
    {
        uint32_t Version;
        int8_t* Creator;
        uint32_t Flags;
        uint32_t ConstantBuffers;
        uint32_t BoundResources;
        uint32_t InputParameters;
        uint32_t OutputParameters;
        uint32_t InstructionCount;
        uint32_t TempRegisterCount;
        uint32_t TempArrayCount;
        uint32_t DefCount;
        uint32_t DclCount;
        uint32_t TextureNormalInstructions;
        uint32_t TextureLoadInstructions;
        uint32_t TextureCompInstructions;
        uint32_t TextureBiasInstructions;
        uint32_t TextureGradientInstructions;
        uint32_t FloatInstructionCount;
        uint32_t IntInstructionCount;
        uint32_t UintInstructionCount;
        uint32_t StaticFlowControlCount;
        uint32_t DynamicFlowControlCount;
        uint32_t MacroInstructionCount;
        uint32_t ArrayInstructionCount;
        uint32_t CutInstructionCount;
        uint32_t EmitInstructionCount;
        Windows::Win32::Direct3D11::D3D_PRIMITIVE_TOPOLOGY GSOutputTopology;
        uint32_t GSMaxOutputVertexCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_SHADER_BUFFER_DESC
    {
        int8_t* Name;
        Windows::Win32::Direct3D11::D3D_CBUFFER_TYPE Type;
        uint32_t Variables;
        uint32_t Size;
        uint32_t uFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_SHADER_VARIABLE_DESC
    {
        int8_t* Name;
        uint32_t StartOffset;
        uint32_t Size;
        uint32_t uFlags;
        void* DefaultValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_SHADER_TYPE_DESC
    {
        Windows::Win32::Direct3D11::D3D_SHADER_VARIABLE_CLASS Class;
        Windows::Win32::Direct3D11::D3D_SHADER_VARIABLE_TYPE Type;
        uint32_t Rows;
        uint32_t Columns;
        uint32_t Elements;
        uint32_t Members;
        uint32_t Offset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_SHADER_INPUT_BIND_DESC
    {
        int8_t* Name;
        Windows::Win32::Direct3D11::D3D_SHADER_INPUT_TYPE Type;
        uint32_t BindPoint;
        uint32_t BindCount;
        uint32_t uFlags;
        Windows::Win32::Direct3D11::D3D_RESOURCE_RETURN_TYPE ReturnType;
        Windows::Win32::Direct3D11::D3D_SRV_DIMENSION Dimension;
        uint32_t NumSamples;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_SIGNATURE_PARAMETER_DESC
    {
        int8_t* SemanticName;
        uint32_t SemanticIndex;
        uint32_t Register;
        Windows::Win32::Direct3D11::D3D_NAME SystemValueType;
        Windows::Win32::Direct3D11::D3D_REGISTER_COMPONENT_TYPE ComponentType;
        uint8_t Mask;
        uint8_t ReadWriteMask;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_STATE_BLOCK_MASK
    {
        uint8_t VS;
        uint8_t VSSamplers[2];
        uint8_t VSShaderResources[16];
        uint8_t VSConstantBuffers[2];
        uint8_t GS;
        uint8_t GSSamplers[2];
        uint8_t GSShaderResources[16];
        uint8_t GSConstantBuffers[2];
        uint8_t PS;
        uint8_t PSSamplers[2];
        uint8_t PSShaderResources[16];
        uint8_t PSConstantBuffers[2];
        uint8_t IAVertexBuffers[2];
        uint8_t IAIndexBuffer;
        uint8_t IAInputLayout;
        uint8_t IAPrimitiveTopology;
        uint8_t OMRenderTargets;
        uint8_t OMDepthStencilState;
        uint8_t OMBlendState;
        uint8_t RSViewports;
        uint8_t RSScissorRects;
        uint8_t RSRasterizerState;
        uint8_t SOBuffers;
        uint8_t Predication;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_EFFECT_TYPE_DESC
    {
        int8_t* TypeName;
        Windows::Win32::Direct3D11::D3D_SHADER_VARIABLE_CLASS Class;
        Windows::Win32::Direct3D11::D3D_SHADER_VARIABLE_TYPE Type;
        uint32_t Elements;
        uint32_t Members;
        uint32_t Rows;
        uint32_t Columns;
        uint32_t PackedSize;
        uint32_t UnpackedSize;
        uint32_t Stride;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_EFFECT_VARIABLE_DESC
    {
        int8_t* Name;
        int8_t* Semantic;
        uint32_t Flags;
        uint32_t Annotations;
        uint32_t BufferOffset;
        uint32_t ExplicitBindPoint;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_EFFECT_SHADER_DESC
    {
        uint8_t* pInputSignature;
        Windows::Win32::SystemServices::BOOL IsInline;
        uint8_t* pBytecode;
        uint32_t BytecodeLength;
        int8_t* SODecl;
        uint32_t NumInputSignatureEntries;
        uint32_t NumOutputSignatureEntries;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_PASS_DESC
    {
        int8_t* Name;
        uint32_t Annotations;
        uint8_t* pIAInputSignature;
        size_t IAInputSignatureSize;
        uint32_t StencilRef;
        uint32_t SampleMask;
        float BlendFactor[4];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_PASS_SHADER_DESC
    {
        Windows::Win32::Direct3D10::ID3D10EffectShaderVariable* pShaderVariable;
        uint32_t ShaderIndex;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_TECHNIQUE_DESC
    {
        int8_t* Name;
        uint32_t Passes;
        uint32_t Annotations;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_EFFECT_DESC
    {
        Windows::Win32::SystemServices::BOOL IsChildEffect;
        uint32_t ConstantBuffers;
        uint32_t SharedConstantBuffers;
        uint32_t GlobalVariables;
        uint32_t SharedGlobalVariables;
        uint32_t Techniques;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_RENDER_TARGET_BLEND_DESC1
    {
        Windows::Win32::SystemServices::BOOL BlendEnable;
        Windows::Win32::Direct3D10::D3D10_BLEND SrcBlend;
        Windows::Win32::Direct3D10::D3D10_BLEND DestBlend;
        Windows::Win32::Direct3D10::D3D10_BLEND_OP BlendOp;
        Windows::Win32::Direct3D10::D3D10_BLEND SrcBlendAlpha;
        Windows::Win32::Direct3D10::D3D10_BLEND DestBlendAlpha;
        Windows::Win32::Direct3D10::D3D10_BLEND_OP BlendOpAlpha;
        uint8_t RenderTargetWriteMask;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_BLEND_DESC1
    {
        Windows::Win32::SystemServices::BOOL AlphaToCoverageEnable;
        Windows::Win32::SystemServices::BOOL IndependentBlendEnable;
        Windows::Win32::Direct3D10::D3D10_RENDER_TARGET_BLEND_DESC1 RenderTarget[8];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_TEXCUBE_ARRAY_SRV1
    {
        uint32_t MostDetailedMip;
        uint32_t MipLevels;
        uint32_t First2DArrayFace;
        uint32_t NumCubes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_SHADER_RESOURCE_VIEW_DESC1
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::Direct3D10::D3D10_BUFFER_SRV Buffer;
            Windows::Win32::Direct3D10::D3D10_TEX1D_SRV Texture1D;
            Windows::Win32::Direct3D10::D3D10_TEX1D_ARRAY_SRV Texture1DArray;
            Windows::Win32::Direct3D10::D3D10_TEX2D_SRV Texture2D;
            Windows::Win32::Direct3D10::D3D10_TEX2D_ARRAY_SRV Texture2DArray;
            Windows::Win32::Direct3D10::D3D10_TEX2DMS_SRV Texture2DMS;
            Windows::Win32::Direct3D10::D3D10_TEX2DMS_ARRAY_SRV Texture2DMSArray;
            Windows::Win32::Direct3D10::D3D10_TEX3D_SRV Texture3D;
            Windows::Win32::Direct3D10::D3D10_TEXCUBE_SRV TextureCube;
            Windows::Win32::Direct3D10::D3D10_TEXCUBE_ARRAY_SRV1 TextureCubeArray;
        };
        Windows::Win32::Dxgi::DXGI_FORMAT Format;
        Windows::Win32::Direct3D11::D3D_SRV_DIMENSION ViewDimension;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_SHADER_DEBUG_TOKEN_INFO
    {
        uint32_t File;
        uint32_t Line;
        uint32_t Column;
        uint32_t TokenLength;
        uint32_t TokenId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_SHADER_DEBUG_VAR_INFO
    {
        uint32_t TokenId;
        Windows::Win32::Direct3D11::D3D_SHADER_VARIABLE_TYPE Type;
        uint32_t Register;
        uint32_t Component;
        uint32_t ScopeVar;
        uint32_t ScopeVarOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_SHADER_DEBUG_INPUT_INFO
    {
        uint32_t Var;
        Windows::Win32::Direct3D10::D3D10_SHADER_DEBUG_REGTYPE InitialRegisterSet;
        uint32_t InitialBank;
        uint32_t InitialRegister;
        uint32_t InitialComponent;
        uint32_t InitialValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_SHADER_DEBUG_SCOPEVAR_INFO
    {
        uint32_t TokenId;
        Windows::Win32::Direct3D10::D3D10_SHADER_DEBUG_VARTYPE VarType;
        Windows::Win32::Direct3D11::D3D_SHADER_VARIABLE_CLASS Class;
        uint32_t Rows;
        uint32_t Columns;
        uint32_t StructMemberScope;
        uint32_t uArrayIndices;
        uint32_t ArrayElements;
        uint32_t ArrayStrides;
        uint32_t uVariables;
        uint32_t uFirstVariable;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_SHADER_DEBUG_SCOPE_INFO
    {
        Windows::Win32::Direct3D10::D3D10_SHADER_DEBUG_SCOPETYPE ScopeType;
        uint32_t Name;
        uint32_t uNameLen;
        uint32_t uVariables;
        uint32_t VariableData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_SHADER_DEBUG_OUTPUTVAR
    {
        uint32_t Var;
        uint32_t uValueMin;
        uint32_t uValueMax;
        int32_t iValueMin;
        int32_t iValueMax;
        float fValueMin;
        float fValueMax;
        Windows::Win32::SystemServices::BOOL bNaNPossible;
        Windows::Win32::SystemServices::BOOL bInfPossible;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_SHADER_DEBUG_OUTPUTREG_INFO
    {
        Windows::Win32::Direct3D10::D3D10_SHADER_DEBUG_REGTYPE OutputRegisterSet;
        uint32_t OutputReg;
        uint32_t TempArrayReg;
        uint32_t OutputComponents[4];
        Windows::Win32::Direct3D10::D3D10_SHADER_DEBUG_OUTPUTVAR OutputVars[4];
        uint32_t IndexReg;
        uint32_t IndexComp;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_SHADER_DEBUG_INST_INFO
    {
        uint32_t Id;
        uint32_t Opcode;
        uint32_t uOutputs;
        Windows::Win32::Direct3D10::D3D10_SHADER_DEBUG_OUTPUTREG_INFO pOutputs[2];
        uint32_t TokenId;
        uint32_t NestingLevel;
        uint32_t Scopes;
        uint32_t ScopeInfo;
        uint32_t AccessedVars;
        uint32_t AccessedVarsInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_SHADER_DEBUG_FILE_INFO
    {
        uint32_t FileName;
        uint32_t FileNameLen;
        uint32_t FileData;
        uint32_t FileLen;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D10
{
    struct D3D10_SHADER_DEBUG_INFO
    {
        uint32_t Size;
        uint32_t Creator;
        uint32_t EntrypointName;
        uint32_t ShaderTarget;
        uint32_t CompileFlags;
        uint32_t Files;
        uint32_t FileInfo;
        uint32_t Instructions;
        uint32_t InstructionInfo;
        uint32_t Variables;
        uint32_t VariableInfo;
        uint32_t InputVariables;
        uint32_t InputVariableInfo;
        uint32_t Tokens;
        uint32_t TokenInfo;
        uint32_t Scopes;
        uint32_t ScopeInfo;
        uint32_t ScopeVariables;
        uint32_t ScopeVariableInfo;
        uint32_t UintOffset;
        uint32_t StringOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mmc
{
    struct MMC_SNAPIN_PROPERTY
    {
        uint16_t* pszPropName;
        Windows::Win32::Automation::VARIANT varValue;
        Windows::Win32::Mmc::MMC_PROPERTY_ACTION eAction;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mmc
{
    struct MMCBUTTON
    {
        int32_t nBitmap;
        int32_t idCommand;
        uint8_t fsState;
        uint8_t fsType;
        uint16_t* lpButtonText;
        uint16_t* lpTooltipText;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mmc
{
    struct RESULTDATAITEM
    {
        uint32_t mask;
        Windows::Win32::SystemServices::BOOL bScopeItem;
        intptr_t itemID;
        int32_t nIndex;
        int32_t nCol;
        uint16_t* str;
        int32_t nImage;
        uint32_t nState;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
        int32_t iIndent;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mmc
{
    struct RESULTFINDINFO
    {
        uint16_t* psz;
        int32_t nStart;
        uint32_t dwOptions;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mmc
{
    struct SCOPEDATAITEM
    {
        uint32_t mask;
        uint16_t* displayname;
        int32_t nImage;
        int32_t nOpenImage;
        uint32_t nState;
        int32_t cChildren;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
        intptr_t relativeID;
        intptr_t ID;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mmc
{
    struct CONTEXTMENUITEM
    {
        uint16_t* strName;
        uint16_t* strStatusBarText;
        int32_t lCommandID;
        int32_t lInsertionPointID;
        int32_t fFlags;
        int32_t fSpecialFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mmc
{
    struct MENUBUTTONDATA
    {
        int32_t idCommand;
        int32_t x;
        int32_t y;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mmc
{
    struct MMC_FILTERDATA
    {
        uint16_t* pszText;
        int32_t cchTextMax;
        int32_t lValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mmc
{
    struct MMC_RESTORE_VIEW
    {
        uint32_t dwSize;
        intptr_t cookie;
        uint16_t* pViewType;
        int32_t lViewOptions;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mmc
{
    struct MMC_EXPANDSYNC_STRUCT
    {
        Windows::Win32::SystemServices::BOOL bHandled;
        Windows::Win32::SystemServices::BOOL bExpanding;
        intptr_t hItem;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mmc
{
    struct MMC_VISIBLE_COLUMNS
    {
        int32_t nVisibleColumns;
        int32_t rgVisibleCols[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mmc
{
    struct SMMCDataObjects
    {
        uint32_t count;
        Windows::Win32::Com::IDataObject* lpDataObject[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mmc
{
    struct SMMCObjectTypes
    {
        uint32_t count;
        ::win32::guid guid[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mmc
{
    struct SNodeID
    {
        uint32_t cBytes;
        uint8_t id[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mmc
{
    struct SNodeID2
    {
        uint32_t dwFlags;
        uint32_t cBytes;
        uint8_t id[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mmc
{
    struct SColumnSetID
    {
        uint32_t dwFlags;
        uint32_t cBytes;
        uint8_t id[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mmc
{
    struct MMC_TASK_DISPLAY_SYMBOL
    {
        uint16_t* szFontFamilyName;
        uint16_t* szURLtoEOT;
        uint16_t* szSymbolString;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mmc
{
    struct MMC_TASK_DISPLAY_BITMAP
    {
        uint16_t* szMouseOverBitmap;
        uint16_t* szMouseOffBitmap;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mmc
{
    struct MMC_TASK_DISPLAY_OBJECT
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::Mmc::MMC_TASK_DISPLAY_BITMAP uBitmap;
            Windows::Win32::Mmc::MMC_TASK_DISPLAY_SYMBOL uSymbol;
        };
        Windows::Win32::Mmc::MMC_TASK_DISPLAY_TYPE eDisplayType;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mmc
{
    struct MMC_TASK
    {
        union _Anonymous_e__Union
        {
            intptr_t nCommandID;
            uint16_t* szActionURL;
            uint16_t* szScript;
        };
        Windows::Win32::Mmc::MMC_TASK_DISPLAY_OBJECT sDisplayObject;
        uint16_t* szText;
        uint16_t* szHelpString;
        Windows::Win32::Mmc::MMC_ACTION_TYPE eActionType;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mmc
{
    struct MMC_LISTPAD_INFO
    {
        uint16_t* szTitle;
        uint16_t* szButtonText;
        intptr_t nCommandID;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mmc
{
    struct MMC_COLUMN_DATA
    {
        int32_t nColIndex;
        uint32_t dwFlags;
        int32_t nWidth;
        size_t ulReserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mmc
{
    struct MMC_COLUMN_SET_DATA
    {
        int32_t cbSize;
        int32_t nNumCols;
        Windows::Win32::Mmc::MMC_COLUMN_DATA* pColData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mmc
{
    struct MMC_SORT_DATA
    {
        int32_t nColIndex;
        uint32_t dwSortOptions;
        size_t ulReserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mmc
{
    struct MMC_SORT_SET_DATA
    {
        int32_t cbSize;
        int32_t nNumItems;
        Windows::Win32::Mmc::MMC_SORT_DATA* pSortData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mmc
{
    struct RDITEMHDR
    {
        uint32_t dwFlags;
        intptr_t cookie;
        Windows::Win32::WindowsAndMessaging::LPARAM lpReserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mmc
{
    struct RDCOMPARE
    {
        uint32_t cbSize;
        uint32_t dwFlags;
        int32_t nColumn;
        Windows::Win32::WindowsAndMessaging::LPARAM lUserParam;
        Windows::Win32::Mmc::RDITEMHDR* prdch1;
        Windows::Win32::Mmc::RDITEMHDR* prdch2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mmc
{
    struct RESULT_VIEW_TYPE_INFO
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous1_e__Struct
            {
                uint32_t dwHTMLOptions;
                uint16_t* pstrURL;
            };
            struct _Anonymous2_e__Struct
            {
                uint32_t dwOCXOptions;
                Windows::Win32::Com::IUnknown* pUnkControl;
            };
            uint32_t dwListOptions;
            _Anonymous1_e__Struct Anonymous1;
            _Anonymous2_e__Struct Anonymous2;
        };
        uint16_t* pstrPersistableViewDescription;
        Windows::Win32::Mmc::MMC_VIEW_TYPE eViewType;
        uint32_t dwMiscOptions;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mmc
{
    struct CONTEXTMENUITEM2
    {
        uint16_t* strName;
        uint16_t* strStatusBarText;
        int32_t lCommandID;
        int32_t lInsertionPointID;
        int32_t fFlags;
        int32_t fSpecialFlags;
        uint16_t* strLanguageIndependentName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Mmc
{
    struct MMC_EXT_VIEW_DATA
    {
        ::win32::guid viewID;
        uint16_t* pszURL;
        uint16_t* pszViewTitle;
        uint16_t* pszTooltipText;
        Windows::Win32::SystemServices::BOOL bReplacesDefaultView;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Monitor
{
    struct PHYSICAL_MONITOR
    {
        Windows::Win32::SystemServices::HANDLE hPhysicalMonitor;
        uint16_t szPhysicalMonitorDescription[128];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Monitor
{
    struct MC_TIMING_REPORT
    {
        uint32_t dwHorizontalFrequencyInHZ;
        uint32_t dwVerticalFrequencyInHZ;
        uint8_t bTimingStatusByte;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TpmBaseServices
{
    struct TBS_CONTEXT_PARAMS
    {
        uint32_t version;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TpmBaseServices
{
    struct TBS_CONTEXT_PARAMS2
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t _bitfield;
            };
            _Anonymous_e__Struct Anonymous;
            uint32_t asUINT32;
        };
        uint32_t version;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TpmBaseServices
{
    struct tdTPM_WNF_PROVISIONING
    {
        uint32_t status;
        uint8_t message[28];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TpmBaseServices
{
    struct TPM_DEVICE_INFO
    {
        uint32_t structVersion;
        uint32_t tpmVersion;
        uint32_t tpmInterfaceType;
        uint32_t tpmImpRevision;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct _PROC_THREAD_ATTRIBUTE_LIST
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct SYSTEM_INFO
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint16_t wProcessorArchitecture;
                uint16_t wReserved;
            };
            uint32_t dwOemId;
            _Anonymous_e__Struct Anonymous;
        };
        _Anonymous_e__Union Anonymous;
        uint32_t dwPageSize;
        void* lpMinimumApplicationAddress;
        void* lpMaximumApplicationAddress;
        size_t dwActiveProcessorMask;
        uint32_t dwNumberOfProcessors;
        uint32_t dwProcessorType;
        uint32_t dwAllocationGranularity;
        uint16_t wProcessorLevel;
        uint16_t wProcessorRevision;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct JIT_DEBUG_INFO
    {
        uint32_t dwSize;
        uint32_t dwProcessorArchitecture;
        uint32_t dwThreadID;
        uint32_t dwReserved0;
        uint64_t lpExceptionAddress;
        uint64_t lpExceptionRecord;
        uint64_t lpContextRecord;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct HW_PROFILE_INFOA
    {
        uint32_t dwDockInfo;
        int8_t szHwProfileGuid[39];
        int8_t szHwProfileName[80];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct HW_PROFILE_INFOW
    {
        uint32_t dwDockInfo;
        uint16_t szHwProfileGuid[39];
        uint16_t szHwProfileName[80];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DYNAMIC_TIME_ZONE_INFORMATION
    {
        int32_t Bias;
        uint16_t StandardName[32];
        Windows::Win32::WindowsProgramming::SYSTEMTIME StandardDate;
        int32_t StandardBias;
        uint16_t DaylightName[32];
        Windows::Win32::WindowsProgramming::SYSTEMTIME DaylightDate;
        int32_t DaylightBias;
        uint16_t TimeZoneKeyName[128];
        uint8_t DynamicDaylightTimeDisabled;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct ACTCTX_SECTION_KEYED_DATA_2600
    {
        uint32_t cbSize;
        uint32_t ulDataFormatVersion;
        void* lpData;
        uint32_t ulLength;
        void* lpSectionGlobalData;
        uint32_t ulSectionGlobalDataLength;
        void* lpSectionBase;
        uint32_t ulSectionTotalLength;
        Windows::Win32::SystemServices::HANDLE hActCtx;
        uint32_t ulAssemblyRosterIndex;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA
    {
        void* lpInformation;
        void* lpSectionBase;
        uint32_t ulSectionLength;
        void* lpSectionGlobalDataBase;
        uint32_t ulSectionGlobalDataLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct ACTIVATION_CONTEXT_BASIC_INFORMATION
    {
        Windows::Win32::SystemServices::HANDLE hActCtx;
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct FILE_CASE_SENSITIVE_INFO
    {
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct FILE_DISPOSITION_INFO_EX
    {
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct val_context
    {
        int32_t valuelen;
        void* value_context;
        void* val_buff_ptr;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct pvalueA
    {
        int8_t* pv_valuename;
        int32_t pv_valuelen;
        void* pv_value_context;
        uint32_t pv_type;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct pvalueW
    {
        uint16_t* pv_valuename;
        int32_t pv_valuelen;
        void* pv_value_context;
        uint32_t pv_type;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct provider_info
    {
        Windows::Win32::WindowsProgramming::PQUERYHANDLER* pi_R0_1val;
        Windows::Win32::WindowsProgramming::PQUERYHANDLER* pi_R0_allvals;
        Windows::Win32::WindowsProgramming::PQUERYHANDLER* pi_R3_1val;
        Windows::Win32::WindowsProgramming::PQUERYHANDLER* pi_R3_allvals;
        uint32_t pi_flags;
        void* pi_key_context;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct VALENTA
    {
        int8_t* ve_valuename;
        uint32_t ve_valuelen;
        size_t ve_valueptr;
        uint32_t ve_type;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct VALENTW
    {
        uint16_t* ve_valuename;
        uint32_t ve_valuelen;
        size_t ve_valueptr;
        uint32_t ve_type;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct XML_ERROR
    {
        uint32_t _nLine;
        Windows::Win32::Automation::BSTR _pchBuf;
        uint32_t _cchBuf;
        uint32_t _ich;
        Windows::Win32::Automation::BSTR _pszFound;
        Windows::Win32::Automation::BSTR _pszExpected;
        uint32_t _reserved1;
        uint32_t _reserved2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct CLIENT_ID
    {
        Windows::Win32::SystemServices::HANDLE UniqueProcess;
        Windows::Win32::SystemServices::HANDLE UniqueThread;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct LDR_DATA_TABLE_ENTRY
    {
        union _Anonymous_e__Union
        {
            uint32_t CheckSum;
            void* Reserved6;
        };
        void* Reserved1[2];
        Windows::Win32::Kernel::LIST_ENTRY InMemoryOrderLinks;
        void* Reserved2[2];
        void* DllBase;
        void* Reserved3[2];
        Windows::Win32::Security::UNICODE_STRING FullDllName;
        uint8_t Reserved4[8];
        void* Reserved5[3];
        _Anonymous_e__Union Anonymous;
        uint32_t TimeDateStamp;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct OBJECT_ATTRIBUTES
    {
        uint32_t Length;
        Windows::Win32::SystemServices::HANDLE RootDirectory;
        Windows::Win32::Security::UNICODE_STRING* ObjectName;
        uint32_t Attributes;
        void* SecurityDescriptor;
        void* SecurityQualityOfService;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct IO_STATUS_BLOCK
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::SystemServices::NTSTATUS Status;
            void* Pointer;
        };
        _Anonymous_e__Union Anonymous;
        size_t Information;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct PROCESS_BASIC_INFORMATION
    {
        void* Reserved1;
        Windows::Win32::SystemServices::PEB* PebBaseAddress;
        void* Reserved2[2];
        size_t UniqueProcessId;
        void* Reserved3;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION
    {
        Windows::Win32::SystemServices::LARGE_INTEGER IdleTime;
        Windows::Win32::SystemServices::LARGE_INTEGER KernelTime;
        Windows::Win32::SystemServices::LARGE_INTEGER UserTime;
        Windows::Win32::SystemServices::LARGE_INTEGER Reserved1[2];
        uint32_t Reserved2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct SYSTEM_PROCESS_INFORMATION
    {
        uint32_t NextEntryOffset;
        uint32_t NumberOfThreads;
        uint8_t Reserved1[48];
        Windows::Win32::Security::UNICODE_STRING ImageName;
        int32_t BasePriority;
        Windows::Win32::SystemServices::HANDLE UniqueProcessId;
        void* Reserved2;
        uint32_t HandleCount;
        uint32_t SessionId;
        void* Reserved3;
        size_t PeakVirtualSize;
        size_t VirtualSize;
        uint32_t Reserved4;
        size_t PeakWorkingSetSize;
        size_t WorkingSetSize;
        void* Reserved5;
        size_t QuotaPagedPoolUsage;
        void* Reserved6;
        size_t QuotaNonPagedPoolUsage;
        size_t PagefileUsage;
        size_t PeakPagefileUsage;
        size_t PrivatePageCount;
        Windows::Win32::SystemServices::LARGE_INTEGER Reserved7[6];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct SYSTEM_THREAD_INFORMATION
    {
        Windows::Win32::SystemServices::LARGE_INTEGER Reserved1[3];
        uint32_t Reserved2;
        void* StartAddress;
        Windows::Win32::WindowsProgramming::CLIENT_ID ClientId;
        int32_t Priority;
        int32_t BasePriority;
        uint32_t Reserved3;
        uint32_t ThreadState;
        uint32_t WaitReason;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct SYSTEM_REGISTRY_QUOTA_INFORMATION
    {
        uint32_t RegistryQuotaAllowed;
        uint32_t RegistryQuotaUsed;
        void* Reserved1;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct SYSTEM_BASIC_INFORMATION
    {
        uint8_t Reserved1[24];
        void* Reserved2[4];
        int8_t NumberOfProcessors;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct SYSTEM_TIMEOFDAY_INFORMATION
    {
        uint8_t Reserved1[48];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct SYSTEM_PERFORMANCE_INFORMATION
    {
        uint8_t Reserved1[312];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct SYSTEM_EXCEPTION_INFORMATION
    {
        uint8_t Reserved1[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct SYSTEM_LOOKASIDE_INFORMATION
    {
        uint8_t Reserved1[32];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct SYSTEM_INTERRUPT_INFORMATION
    {
        uint8_t Reserved1[24];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct SYSTEM_POLICY_INFORMATION
    {
        void* Reserved1[2];
        uint32_t Reserved2[3];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct SYSTEM_CODEINTEGRITY_INFORMATION
    {
        uint32_t Length;
        uint32_t CodeIntegrityOptions;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct PUBLIC_OBJECT_BASIC_INFORMATION
    {
        uint32_t Attributes;
        uint32_t GrantedAccess;
        uint32_t HandleCount;
        uint32_t PointerCount;
        uint32_t Reserved[10];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct __PUBLIC_OBJECT_TYPE_INFORMATION
    {
        Windows::Win32::Security::UNICODE_STRING TypeName;
        uint32_t Reserved[22];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct KEY_VALUE_ENTRY
    {
        Windows::Win32::Security::UNICODE_STRING* ValueName;
        uint32_t DataLength;
        uint32_t DataOffset;
        uint32_t Type;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct WINSTATIONINFORMATIONW
    {
        uint8_t Reserved2[70];
        uint32_t LogonId;
        uint8_t Reserved3[1140];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct AVRF_BACKTRACE_INFORMATION
    {
        uint32_t Depth;
        uint32_t Index;
        uint64_t ReturnAddresses[32];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct AVRF_HEAP_ALLOCATION
    {
        uint64_t HeapHandle;
        uint64_t UserAllocation;
        uint64_t UserAllocationSize;
        uint64_t Allocation;
        uint64_t AllocationSize;
        uint32_t UserAllocationState;
        uint32_t HeapState;
        uint64_t HeapContext;
        Windows::Win32::WindowsProgramming::AVRF_BACKTRACE_INFORMATION* BackTraceInformation;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct AVRF_HANDLE_OPERATION
    {
        uint64_t Handle;
        uint32_t ProcessId;
        uint32_t ThreadId;
        uint32_t OperationType;
        uint32_t Spare0;
        Windows::Win32::WindowsProgramming::AVRF_BACKTRACE_INFORMATION BackTraceInformation;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct ERF
    {
        int32_t erfOper;
        int32_t erfType;
        Windows::Win32::SystemServices::BOOL fError;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct CCAB
    {
        uint32_t cb;
        uint32_t cbFolderThresh;
        uint32_t cbReserveCFHeader;
        uint32_t cbReserveCFFolder;
        uint32_t cbReserveCFData;
        int32_t iCab;
        int32_t iDisk;
        int32_t fFailOnIncompressible;
        uint16_t setID;
        int8_t szDisk[256];
        int8_t szCab[256];
        int8_t szCabPath[256];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct FDICABINETINFO
    {
        int32_t cbCabinet;
        uint16_t cFolders;
        uint16_t cFiles;
        uint16_t setID;
        uint16_t iCabinet;
        Windows::Win32::SystemServices::BOOL fReserve;
        Windows::Win32::SystemServices::BOOL hasprev;
        Windows::Win32::SystemServices::BOOL hasnext;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct FDIDECRYPT
    {
        union _Anonymous_e__Union
        {
            struct _cabinet_e__Struct
            {
                void* pHeaderReserve;
                uint16_t cbHeaderReserve;
                uint16_t setID;
                int32_t iCabinet;
            };
            struct _folder_e__Struct
            {
                void* pFolderReserve;
                uint16_t cbFolderReserve;
                uint16_t iFolder;
            };
            struct _decrypt_e__Struct
            {
                void* pDataReserve;
                uint16_t cbDataReserve;
                void* pbData;
                uint16_t cbData;
                Windows::Win32::SystemServices::BOOL fSplit;
                uint16_t cbPartial;
            };
            _cabinet_e__Struct cabinet;
            _folder_e__Struct folder;
            _decrypt_e__Struct decrypt;
        };
        Windows::Win32::WindowsProgramming::FDIDECRYPTTYPE fdidt;
        void* pvUser;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct FDINOTIFICATION
    {
        int32_t cb;
        int8_t* psz1;
        int8_t* psz2;
        int8_t* psz3;
        void* pv;
        intptr_t hf;
        uint16_t date;
        uint16_t time;
        uint16_t attribs;
        uint16_t setID;
        uint16_t iCabinet;
        uint16_t iFolder;
        Windows::Win32::WindowsProgramming::FDIERROR fdie;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct FDISPILLFILE
    {
        int8_t ach[2];
        int32_t cbFile;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct VDMCONTEXT_WITHOUT_XSAVE
    {
        uint32_t ContextFlags;
        uint32_t Dr0;
        uint32_t Dr1;
        uint32_t Dr2;
        uint32_t Dr3;
        uint32_t Dr6;
        uint32_t Dr7;
        Windows::Win32::SystemServices::FLOATING_SAVE_AREA FloatSave;
        uint32_t SegGs;
        uint32_t SegFs;
        uint32_t SegEs;
        uint32_t SegDs;
        uint32_t Edi;
        uint32_t Esi;
        uint32_t Ebx;
        uint32_t Edx;
        uint32_t Ecx;
        uint32_t Eax;
        uint32_t Ebp;
        uint32_t Eip;
        uint32_t SegCs;
        uint32_t EFlags;
        uint32_t Esp;
        uint32_t SegSs;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct SEGMENT_NOTE
    {
        uint16_t Selector1;
        uint16_t Selector2;
        uint16_t Segment;
        int8_t Module[10];
        int8_t FileName[256];
        uint16_t Type;
        uint32_t Length;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct IMAGE_NOTE
    {
        int8_t Module[10];
        int8_t FileName[256];
        uint16_t hModule;
        uint16_t hTask;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct MODULEENTRY
    {
        uint32_t dwSize;
        int8_t szModule[10];
        Windows::Win32::SystemServices::HANDLE hModule;
        uint16_t wcUsage;
        int8_t szExePath[256];
        uint16_t wNext;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct TEMP_BP_NOTE
    {
        uint16_t Seg;
        uint32_t Offset;
        Windows::Win32::SystemServices::BOOL bPM;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct VDM_SEGINFO
    {
        uint16_t Selector;
        uint16_t SegNumber;
        uint32_t Length;
        uint16_t Type;
        int8_t ModuleName[9];
        int8_t FileName[255];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct GLOBALENTRY
    {
        uint32_t dwSize;
        uint32_t dwAddress;
        uint32_t dwBlockSize;
        Windows::Win32::SystemServices::HANDLE hBlock;
        uint16_t wcLock;
        uint16_t wcPageLock;
        uint16_t wFlags;
        Windows::Win32::SystemServices::BOOL wHeapPresent;
        Windows::Win32::SystemServices::HANDLE hOwner;
        uint16_t wType;
        uint16_t wData;
        uint32_t dwNext;
        uint32_t dwNextAlt;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct FEATURE_ERROR
    {
        int32_t hr;
        uint16_t lineNumber;
        int8_t* file;
        int8_t* process;
        int8_t* module;
        uint32_t callerReturnAddressOffset;
        int8_t* callerModule;
        int8_t* message;
        uint16_t originLineNumber;
        int8_t* originFile;
        int8_t* originModule;
        uint32_t originCallerReturnAddressOffset;
        int8_t* originCallerModule;
        int8_t* originName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct FEATURE_STATE_CHANGE_SUBSCRIPTION__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct FH_SERVICE_PIPE_HANDLE__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DCICMD
    {
        uint32_t dwCommand;
        uint32_t dwParam1;
        uint32_t dwParam2;
        uint32_t dwVersion;
        uint32_t dwReserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DCICREATEINPUT
    {
        Windows::Win32::WindowsProgramming::DCICMD cmd;
        uint32_t dwCompression;
        uint32_t dwMask[3];
        uint32_t dwWidth;
        uint32_t dwHeight;
        uint32_t dwDCICaps;
        uint32_t dwBitCount;
        void* lpSurface;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DCISURFACEINFO
    {
        uint32_t dwSize;
        uint32_t dwDCICaps;
        uint32_t dwCompression;
        uint32_t dwMask[3];
        uint32_t dwWidth;
        uint32_t dwHeight;
        int32_t lStride;
        uint32_t dwBitCount;
        size_t dwOffSurface;
        uint16_t wSelSurface;
        uint16_t wReserved;
        uint32_t dwReserved1;
        uint32_t dwReserved2;
        uint32_t dwReserved3;
        intptr_t BeginAccess;
        intptr_t EndAccess;
        intptr_t DestroySurface;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DCIENUMINPUT
    {
        Windows::Win32::WindowsProgramming::DCICMD cmd;
        Windows::Win32::DisplayDevices::RECT rSrc;
        Windows::Win32::DisplayDevices::RECT rDst;
        intptr_t EnumCallback;
        void* lpContext;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DCIOFFSCREEN
    {
        Windows::Win32::WindowsProgramming::DCISURFACEINFO dciInfo;
        intptr_t Draw;
        intptr_t SetClipList;
        intptr_t SetDestination;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DCIOVERLAY
    {
        Windows::Win32::WindowsProgramming::DCISURFACEINFO dciInfo;
        uint32_t dwChromakeyValue;
        uint32_t dwChromakeyMask;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct HWINWATCH__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct VMEML
    {
        Windows::Win32::WindowsProgramming::VMEML* next;
        size_t ptr;
        uint32_t size;
        Windows::Win32::SystemServices::BOOL bDiscardable;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct VMEMR
    {
        Windows::Win32::WindowsProgramming::VMEMR* next;
        Windows::Win32::WindowsProgramming::VMEMR* prev;
        Windows::Win32::WindowsProgramming::VMEMR* pUp;
        Windows::Win32::WindowsProgramming::VMEMR* pDown;
        Windows::Win32::WindowsProgramming::VMEMR* pLeft;
        Windows::Win32::WindowsProgramming::VMEMR* pRight;
        size_t ptr;
        uint32_t size;
        uint32_t x;
        uint32_t y;
        uint32_t cx;
        uint32_t cy;
        uint32_t flags;
        size_t pBits;
        Windows::Win32::SystemServices::BOOL bDiscardable;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct PROCESS_LIST
    {
        Windows::Win32::WindowsProgramming::PROCESS_LIST* lpLink;
        uint32_t dwProcessId;
        uint32_t dwRefCnt;
        uint32_t dwAlphaDepth;
        uint32_t dwZDepth;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDMONITORINFO
    {
        uint16_t Manufacturer;
        uint16_t Product;
        uint32_t SerialNumber;
        ::win32::guid DeviceIdentifier;
        int32_t Mode640x480;
        int32_t Mode800x600;
        int32_t Mode1024x768;
        int32_t Mode1280x1024;
        int32_t Mode1600x1200;
        int32_t ModeReserved1;
        int32_t ModeReserved2;
        int32_t ModeReserved3;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct IDirectDrawClipperVtbl
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct IDirectDrawPaletteVtbl
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct IDirectDrawSurfaceVtbl
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct IDirectDrawSurface2Vtbl
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct IDirectDrawSurface3Vtbl
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct IDirectDrawSurface4Vtbl
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct IDirectDrawSurface7Vtbl
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct IDirectDrawColorControlVtbl
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct IDirectDrawVtbl
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct IDirectDraw2Vtbl
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct IDirectDraw4Vtbl
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct IDirectDraw7Vtbl
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct IDirectDrawKernelVtbl
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct IDirectDrawSurfaceKernelVtbl
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct IDirectDrawGammaControlVtbl
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DD32BITDRIVERDATA
    {
        int8_t szName[260];
        int8_t szEntryPoint[64];
        uint32_t dwContext;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDVERSIONDATA
    {
        uint32_t dwHALVersion;
        size_t dwReserved1;
        size_t dwReserved2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct VIDMEM
    {
        union _Anonymous1_e__Union
        {
            size_t fpEnd;
            uint32_t dwWidth;
        };
        union _Anonymous2_e__Union
        {
            Windows::Win32::DisplayDevices::VMEMHEAP* lpHeap;
            uint32_t dwHeight;
        };
        uint32_t dwFlags;
        size_t fpStart;
        _Anonymous1_e__Union Anonymous1;
        Windows::Win32::DirectDraw::DDSCAPS ddsCaps;
        Windows::Win32::DirectDraw::DDSCAPS ddsCapsAlt;
        _Anonymous2_e__Union Anonymous2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct VIDMEMINFO
    {
        size_t fpPrimary;
        uint32_t dwFlags;
        uint32_t dwDisplayWidth;
        uint32_t dwDisplayHeight;
        int32_t lDisplayPitch;
        Windows::Win32::DirectDraw::DDPIXELFORMAT ddpfDisplay;
        uint32_t dwOffscreenAlign;
        uint32_t dwOverlayAlign;
        uint32_t dwTextureAlign;
        uint32_t dwZBufferAlign;
        uint32_t dwAlphaAlign;
        uint32_t dwNumHeaps;
        Windows::Win32::WindowsProgramming::VIDMEM* pvmList;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct HEAPALIAS
    {
        size_t fpVidMem;
        void* lpAlias;
        uint32_t dwAliasSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct HEAPALIASINFO
    {
        uint32_t dwRefCnt;
        uint32_t dwFlags;
        uint32_t dwNumHeaps;
        Windows::Win32::WindowsProgramming::HEAPALIAS* lpAliases;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct IUNKNOWN_LIST
    {
        Windows::Win32::WindowsProgramming::IUNKNOWN_LIST* lpLink;
        ::win32::guid* lpGuid;
        Windows::Win32::Com::IUnknown* lpIUnknown;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_DDCALLBACKS
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        Windows::Win32::WindowsProgramming::LPDDHAL_DESTROYDRIVER* DestroyDriver;
        Windows::Win32::WindowsProgramming::LPDDHAL_CREATESURFACE* CreateSurface;
        Windows::Win32::WindowsProgramming::LPDDHAL_SETCOLORKEY* SetColorKey;
        Windows::Win32::WindowsProgramming::LPDDHAL_SETMODE* SetMode;
        Windows::Win32::WindowsProgramming::LPDDHAL_WAITFORVERTICALBLANK* WaitForVerticalBlank;
        Windows::Win32::WindowsProgramming::LPDDHAL_CANCREATESURFACE* CanCreateSurface;
        Windows::Win32::WindowsProgramming::LPDDHAL_CREATEPALETTE* CreatePalette;
        Windows::Win32::WindowsProgramming::LPDDHAL_GETSCANLINE* GetScanLine;
        Windows::Win32::WindowsProgramming::LPDDHAL_SETEXCLUSIVEMODE* SetExclusiveMode;
        Windows::Win32::WindowsProgramming::LPDDHAL_FLIPTOGDISURFACE* FlipToGDISurface;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_DDPALETTECALLBACKS
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        Windows::Win32::WindowsProgramming::LPDDHALPALCB_DESTROYPALETTE* DestroyPalette;
        Windows::Win32::WindowsProgramming::LPDDHALPALCB_SETENTRIES* SetEntries;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_DDSURFACECALLBACKS
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        Windows::Win32::WindowsProgramming::LPDDHALSURFCB_DESTROYSURFACE* DestroySurface;
        Windows::Win32::WindowsProgramming::LPDDHALSURFCB_FLIP* Flip;
        Windows::Win32::WindowsProgramming::LPDDHALSURFCB_SETCLIPLIST* SetClipList;
        Windows::Win32::WindowsProgramming::LPDDHALSURFCB_LOCK* Lock;
        Windows::Win32::WindowsProgramming::LPDDHALSURFCB_UNLOCK* Unlock;
        Windows::Win32::WindowsProgramming::LPDDHALSURFCB_BLT* Blt;
        Windows::Win32::WindowsProgramming::LPDDHALSURFCB_SETCOLORKEY* SetColorKey;
        Windows::Win32::WindowsProgramming::LPDDHALSURFCB_ADDATTACHEDSURFACE* AddAttachedSurface;
        Windows::Win32::WindowsProgramming::LPDDHALSURFCB_GETBLTSTATUS* GetBltStatus;
        Windows::Win32::WindowsProgramming::LPDDHALSURFCB_GETFLIPSTATUS* GetFlipStatus;
        Windows::Win32::WindowsProgramming::LPDDHALSURFCB_UPDATEOVERLAY* UpdateOverlay;
        Windows::Win32::WindowsProgramming::LPDDHALSURFCB_SETOVERLAYPOSITION* SetOverlayPosition;
        void* reserved4;
        Windows::Win32::WindowsProgramming::LPDDHALSURFCB_SETPALETTE* SetPalette;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_DDMISCELLANEOUSCALLBACKS
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        Windows::Win32::WindowsProgramming::LPDDHAL_GETAVAILDRIVERMEMORY* GetAvailDriverMemory;
        Windows::Win32::WindowsProgramming::LPDDHAL_UPDATENONLOCALHEAP* UpdateNonLocalHeap;
        Windows::Win32::WindowsProgramming::LPDDHAL_GETHEAPALIGNMENT* GetHeapAlignment;
        Windows::Win32::WindowsProgramming::LPDDHALSURFCB_GETBLTSTATUS* GetSysmemBltStatus;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_DDMISCELLANEOUS2CALLBACKS
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        void* Reserved;
        Windows::Win32::WindowsProgramming::LPDDHAL_CREATESURFACEEX* CreateSurfaceEx;
        Windows::Win32::WindowsProgramming::LPDDHAL_GETDRIVERSTATE* GetDriverState;
        Windows::Win32::WindowsProgramming::LPDDHAL_DESTROYDDLOCAL* DestroyDDLocal;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_DDEXEBUFCALLBACKS
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        Windows::Win32::WindowsProgramming::LPDDHALEXEBUFCB_CANCREATEEXEBUF* CanCreateExecuteBuffer;
        Windows::Win32::WindowsProgramming::LPDDHALEXEBUFCB_CREATEEXEBUF* CreateExecuteBuffer;
        Windows::Win32::WindowsProgramming::LPDDHALEXEBUFCB_DESTROYEXEBUF* DestroyExecuteBuffer;
        Windows::Win32::WindowsProgramming::LPDDHALEXEBUFCB_LOCKEXEBUF* LockExecuteBuffer;
        Windows::Win32::WindowsProgramming::LPDDHALEXEBUFCB_UNLOCKEXEBUF* UnlockExecuteBuffer;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_DDVIDEOPORTCALLBACKS
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        Windows::Win32::WindowsProgramming::LPDDHALVPORTCB_CANCREATEVIDEOPORT* CanCreateVideoPort;
        Windows::Win32::WindowsProgramming::LPDDHALVPORTCB_CREATEVIDEOPORT* CreateVideoPort;
        Windows::Win32::WindowsProgramming::LPDDHALVPORTCB_FLIP* FlipVideoPort;
        Windows::Win32::WindowsProgramming::LPDDHALVPORTCB_GETBANDWIDTH* GetVideoPortBandwidth;
        Windows::Win32::WindowsProgramming::LPDDHALVPORTCB_GETINPUTFORMATS* GetVideoPortInputFormats;
        Windows::Win32::WindowsProgramming::LPDDHALVPORTCB_GETOUTPUTFORMATS* GetVideoPortOutputFormats;
        void* lpReserved1;
        Windows::Win32::WindowsProgramming::LPDDHALVPORTCB_GETFIELD* GetVideoPortField;
        Windows::Win32::WindowsProgramming::LPDDHALVPORTCB_GETLINE* GetVideoPortLine;
        Windows::Win32::WindowsProgramming::LPDDHALVPORTCB_GETVPORTCONNECT* GetVideoPortConnectInfo;
        Windows::Win32::WindowsProgramming::LPDDHALVPORTCB_DESTROYVPORT* DestroyVideoPort;
        Windows::Win32::WindowsProgramming::LPDDHALVPORTCB_GETFLIPSTATUS* GetVideoPortFlipStatus;
        Windows::Win32::WindowsProgramming::LPDDHALVPORTCB_UPDATE* UpdateVideoPort;
        Windows::Win32::WindowsProgramming::LPDDHALVPORTCB_WAITFORSYNC* WaitForVideoPortSync;
        Windows::Win32::WindowsProgramming::LPDDHALVPORTCB_GETSIGNALSTATUS* GetVideoSignalStatus;
        Windows::Win32::WindowsProgramming::LPDDHALVPORTCB_COLORCONTROL* ColorControl;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_DDCOLORCONTROLCALLBACKS
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        Windows::Win32::WindowsProgramming::LPDDHALCOLORCB_COLORCONTROL* ColorControl;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_DDKERNELCALLBACKS
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        Windows::Win32::WindowsProgramming::LPDDHALKERNELCB_SYNCSURFACE* SyncSurfaceData;
        Windows::Win32::WindowsProgramming::LPDDHALKERNELCB_SYNCVIDEOPORT* SyncVideoPortData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_DDMOTIONCOMPCALLBACKS
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        Windows::Win32::WindowsProgramming::LPDDHALMOCOMPCB_GETGUIDS* GetMoCompGuids;
        Windows::Win32::WindowsProgramming::LPDDHALMOCOMPCB_GETFORMATS* GetMoCompFormats;
        Windows::Win32::WindowsProgramming::LPDDHALMOCOMPCB_CREATE* CreateMoComp;
        Windows::Win32::WindowsProgramming::LPDDHALMOCOMPCB_GETCOMPBUFFINFO* GetMoCompBuffInfo;
        Windows::Win32::WindowsProgramming::LPDDHALMOCOMPCB_GETINTERNALINFO* GetInternalMoCompInfo;
        Windows::Win32::WindowsProgramming::LPDDHALMOCOMPCB_BEGINFRAME* BeginMoCompFrame;
        Windows::Win32::WindowsProgramming::LPDDHALMOCOMPCB_ENDFRAME* EndMoCompFrame;
        Windows::Win32::WindowsProgramming::LPDDHALMOCOMPCB_RENDER* RenderMoComp;
        Windows::Win32::WindowsProgramming::LPDDHALMOCOMPCB_QUERYSTATUS* QueryMoCompStatus;
        Windows::Win32::WindowsProgramming::LPDDHALMOCOMPCB_DESTROY* DestroyMoComp;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDNONLOCALVIDMEMCAPS
    {
        uint32_t dwSize;
        uint32_t dwNLVBCaps;
        uint32_t dwNLVBCaps2;
        uint32_t dwNLVBCKeyCaps;
        uint32_t dwNLVBFXCaps;
        uint32_t dwNLVBRops[8];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDMORESURFACECAPS
    {
        struct tagExtendedHeapRestrictions
        {
            Windows::Win32::DirectDraw::DDSCAPSEX ddsCapsEx;
            Windows::Win32::DirectDraw::DDSCAPSEX ddsCapsExAlt;
        };
        uint32_t dwSize;
        Windows::Win32::DirectDraw::DDSCAPSEX ddsCapsMore;
        tagExtendedHeapRestrictions ddsExtendedHeapRestrictions[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDSTEREOMODE
    {
        uint32_t dwSize;
        uint32_t dwHeight;
        uint32_t dwWidth;
        uint32_t dwBpp;
        uint32_t dwRefreshRate;
        Windows::Win32::SystemServices::BOOL bSupported;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDRAWI_DDRAWPALETTE_INT
    {
        void* lpVtbl;
        Windows::Win32::WindowsProgramming::DDRAWI_DDRAWPALETTE_LCL* lpLcl;
        Windows::Win32::WindowsProgramming::DDRAWI_DDRAWPALETTE_INT* lpLink;
        uint32_t dwIntRefCnt;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDRAWI_DDRAWPALETTE_GBL
    {
        union _Anonymous_e__Union
        {
            size_t dwReserved1;
            Windows::Win32::Gdi::HPALETTE hHELGDIPalette;
        };
        uint32_t dwRefCnt;
        uint32_t dwFlags;
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_LCL* lpDD_lcl;
        uint32_t dwProcessId;
        Windows::Win32::Direct2D::PALETTEENTRY* lpColorTable;
        _Anonymous_e__Union Anonymous;
        uint32_t dwDriverReserved;
        uint32_t dwContentsStamp;
        uint32_t dwSaveStamp;
        uint32_t dwHandle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDRAWI_DDRAWPALETTE_LCL
    {
        uint32_t lpPalMore;
        Windows::Win32::WindowsProgramming::DDRAWI_DDRAWPALETTE_GBL* lpGbl;
        size_t dwUnused0;
        uint32_t dwLocalRefCnt;
        Windows::Win32::Com::IUnknown* pUnkOuter;
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_LCL* lpDD_lcl;
        size_t dwReserved1;
        size_t dwDDRAWReserved1;
        size_t dwDDRAWReserved2;
        size_t dwDDRAWReserved3;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDRAWI_DDRAWCLIPPER_INT
    {
        void* lpVtbl;
        Windows::Win32::WindowsProgramming::DDRAWI_DDRAWCLIPPER_LCL* lpLcl;
        Windows::Win32::WindowsProgramming::DDRAWI_DDRAWCLIPPER_INT* lpLink;
        uint32_t dwIntRefCnt;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDRAWI_DDRAWCLIPPER_GBL
    {
        uint32_t dwRefCnt;
        uint32_t dwFlags;
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_GBL* lpDD;
        uint32_t dwProcessId;
        size_t dwReserved1;
        size_t hWnd;
        Windows::Win32::Gdi::RGNDATA* lpStaticClipList;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDRAWI_DDRAWCLIPPER_LCL
    {
        uint32_t lpClipMore;
        Windows::Win32::WindowsProgramming::DDRAWI_DDRAWCLIPPER_GBL* lpGbl;
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_LCL* lpDD_lcl;
        uint32_t dwLocalRefCnt;
        Windows::Win32::Com::IUnknown* pUnkOuter;
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_INT* lpDD_int;
        size_t dwReserved1;
        Windows::Win32::Com::IUnknown* pAddrefedThisOwner;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct ATTACHLIST
    {
        uint32_t dwFlags;
        Windows::Win32::WindowsProgramming::ATTACHLIST* lpLink;
        Windows::Win32::WindowsProgramming::DDRAWI_DDRAWSURFACE_LCL* lpAttached;
        Windows::Win32::WindowsProgramming::DDRAWI_DDRAWSURFACE_INT* lpIAttached;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DBLNODE
    {
        Windows::Win32::WindowsProgramming::DBLNODE* next;
        Windows::Win32::WindowsProgramming::DBLNODE* prev;
        Windows::Win32::WindowsProgramming::DDRAWI_DDRAWSURFACE_LCL* object;
        Windows::Win32::WindowsProgramming::DDRAWI_DDRAWSURFACE_INT* object_int;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct ACCESSRECTLIST
    {
        Windows::Win32::WindowsProgramming::ACCESSRECTLIST* lpLink;
        Windows::Win32::DisplayDevices::RECT rDest;
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_LCL* lpOwner;
        void* lpSurfaceData;
        uint32_t dwFlags;
        Windows::Win32::WindowsProgramming::HEAPALIASINFO* lpHeapAliasInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDRAWI_DDRAWSURFACE_INT
    {
        void* lpVtbl;
        Windows::Win32::WindowsProgramming::DDRAWI_DDRAWSURFACE_LCL* lpLcl;
        Windows::Win32::WindowsProgramming::DDRAWI_DDRAWSURFACE_INT* lpLink;
        uint32_t dwIntRefCnt;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDRAWI_DDRAWSURFACE_GBL
    {
        union _Anonymous1_e__Union
        {
            Windows::Win32::WindowsProgramming::ACCESSRECTLIST* lpRectList;
            uint32_t dwBlockSizeY;
            int32_t lSlicePitch;
        };
        union _Anonymous2_e__Union
        {
            Windows::Win32::DisplayDevices::VMEMHEAP* lpVidMemHeap;
            uint32_t dwBlockSizeX;
        };
        union _Anonymous3_e__Union
        {
            Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_GBL* lpDD;
            void* lpDDHandle;
        };
        union _Anonymous4_e__Union
        {
            int32_t lPitch;
            uint32_t dwLinearSize;
        };
        uint32_t dwRefCnt;
        uint32_t dwGlobalFlags;
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
        _Anonymous3_e__Union Anonymous3;
        size_t fpVidMem;
        _Anonymous4_e__Union Anonymous4;
        uint16_t wHeight;
        uint16_t wWidth;
        uint32_t dwUsageCount;
        size_t dwReserved1;
        Windows::Win32::DirectDraw::DDPIXELFORMAT ddpfSurface;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDRAWI_DDRAWSURFACE_GBL_MORE
    {
        union _Anonymous_e__Union
        {
            uint32_t dwPhysicalPageTable;
            size_t fpPhysicalVidMem;
        };
        uint32_t dwSize;
        _Anonymous_e__Union Anonymous;
        uint32_t* pPageTable;
        uint32_t cPages;
        size_t dwSavedDCContext;
        size_t fpAliasedVidMem;
        size_t dwDriverReserved;
        size_t dwHELReserved;
        uint32_t cPageUnlocks;
        size_t hKernelSurface;
        uint32_t dwKernelRefCnt;
        Windows::Win32::DirectDraw::DDCOLORCONTROL* lpColorInfo;
        size_t fpNTAlias;
        uint32_t dwContentsStamp;
        void* lpvUnswappedDriverReserved;
        void* lpDDRAWReserved2;
        uint32_t dwDDRAWReserved1;
        uint32_t dwDDRAWReserved2;
        size_t fpAliasOfVidMem;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDRAWI_DDRAWSURFACE_MORE
    {
        uint32_t dwSize;
        Windows::Win32::WindowsProgramming::IUNKNOWN_LIST* lpIUnknowns;
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_LCL* lpDD_lcl;
        uint32_t dwPageLockCount;
        uint32_t dwBytesAllocated;
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_INT* lpDD_int;
        uint32_t dwMipMapCount;
        Windows::Win32::WindowsProgramming::DDRAWI_DDRAWCLIPPER_INT* lpDDIClipper;
        Windows::Win32::WindowsProgramming::HEAPALIASINFO* lpHeapAliasInfo;
        uint32_t dwOverlayFlags;
        void* rgjunc;
        Windows::Win32::WindowsProgramming::DDRAWI_DDVIDEOPORT_LCL* lpVideoPort;
        Windows::Win32::DirectDraw::DDOVERLAYFX* lpddOverlayFX;
        Windows::Win32::DirectDraw::DDSCAPSEX ddsCapsEx;
        uint32_t dwTextureStage;
        void* lpDDRAWReserved;
        void* lpDDRAWReserved2;
        void* lpDDrawReserved3;
        uint32_t dwDDrawReserved4;
        void* lpDDrawReserved5;
        uint32_t* lpGammaRamp;
        uint32_t* lpOriginalGammaRamp;
        void* lpDDrawReserved6;
        uint32_t dwSurfaceHandle;
        uint32_t qwDDrawReserved8[2];
        void* lpDDrawReserved9;
        uint32_t cSurfaces;
        Windows::Win32::DirectDraw::DDSURFACEDESC2* pCreatedDDSurfaceDesc2;
        Windows::Win32::WindowsProgramming::DDRAWI_DDRAWSURFACE_LCL** slist;
        uint32_t dwFVF;
        void* lpVB;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDRAWI_DDRAWSURFACE_LCL
    {
        union _Anonymous1_e__Union
        {
            Windows::Win32::WindowsProgramming::DDRAWI_DDRAWPALETTE_INT* lpDDPalette;
            Windows::Win32::WindowsProgramming::DDRAWI_DDRAWPALETTE_INT* lp16DDPalette;
        };
        union _Anonymous2_e__Union
        {
            Windows::Win32::WindowsProgramming::DDRAWI_DDRAWCLIPPER_LCL* lpDDClipper;
            Windows::Win32::WindowsProgramming::DDRAWI_DDRAWCLIPPER_INT* lp16DDClipper;
        };
        Windows::Win32::WindowsProgramming::DDRAWI_DDRAWSURFACE_MORE* lpSurfMore;
        Windows::Win32::WindowsProgramming::DDRAWI_DDRAWSURFACE_GBL* lpGbl;
        size_t hDDSurface;
        Windows::Win32::WindowsProgramming::ATTACHLIST* lpAttachList;
        Windows::Win32::WindowsProgramming::ATTACHLIST* lpAttachListFrom;
        uint32_t dwLocalRefCnt;
        uint32_t dwProcessId;
        uint32_t dwFlags;
        Windows::Win32::DirectDraw::DDSCAPS ddsCaps;
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
        uint32_t dwModeCreatedIn;
        uint32_t dwBackBufferCount;
        Windows::Win32::DirectShow::DDCOLORKEY ddckCKDestBlt;
        Windows::Win32::DirectShow::DDCOLORKEY ddckCKSrcBlt;
        size_t hDC;
        size_t dwReserved1;
        Windows::Win32::DirectShow::DDCOLORKEY ddckCKSrcOverlay;
        Windows::Win32::DirectShow::DDCOLORKEY ddckCKDestOverlay;
        Windows::Win32::WindowsProgramming::DDRAWI_DDRAWSURFACE_INT* lpSurfaceOverlaying;
        Windows::Win32::WindowsProgramming::DBLNODE dbnOverlayNode;
        Windows::Win32::DisplayDevices::RECT rcOverlaySrc;
        Windows::Win32::DisplayDevices::RECT rcOverlayDest;
        uint32_t dwClrXparent;
        uint32_t dwAlpha;
        int32_t lOverlayX;
        int32_t lOverlayY;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHALMODEINFO
    {
        uint32_t dwWidth;
        uint32_t dwHeight;
        int32_t lPitch;
        uint32_t dwBPP;
        uint16_t wFlags;
        uint16_t wRefreshRate;
        uint32_t dwRBitMask;
        uint32_t dwGBitMask;
        uint32_t dwBBitMask;
        uint32_t dwAlphaBitMask;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDRAWI_DIRECTDRAW_INT
    {
        void* lpVtbl;
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_LCL* lpLcl;
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_INT* lpLink;
        uint32_t dwIntRefCnt;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_CALLBACKS
    {
        Windows::Win32::WindowsProgramming::DDHAL_DDCALLBACKS cbDDCallbacks;
        Windows::Win32::WindowsProgramming::DDHAL_DDSURFACECALLBACKS cbDDSurfaceCallbacks;
        Windows::Win32::WindowsProgramming::DDHAL_DDPALETTECALLBACKS cbDDPaletteCallbacks;
        Windows::Win32::WindowsProgramming::DDHAL_DDCALLBACKS HALDD;
        Windows::Win32::WindowsProgramming::DDHAL_DDSURFACECALLBACKS HALDDSurface;
        Windows::Win32::WindowsProgramming::DDHAL_DDPALETTECALLBACKS HALDDPalette;
        Windows::Win32::WindowsProgramming::DDHAL_DDCALLBACKS HELDD;
        Windows::Win32::WindowsProgramming::DDHAL_DDSURFACECALLBACKS HELDDSurface;
        Windows::Win32::WindowsProgramming::DDHAL_DDPALETTECALLBACKS HELDDPalette;
        Windows::Win32::WindowsProgramming::DDHAL_DDEXEBUFCALLBACKS cbDDExeBufCallbacks;
        Windows::Win32::WindowsProgramming::DDHAL_DDEXEBUFCALLBACKS HALDDExeBuf;
        Windows::Win32::WindowsProgramming::DDHAL_DDEXEBUFCALLBACKS HELDDExeBuf;
        Windows::Win32::WindowsProgramming::DDHAL_DDVIDEOPORTCALLBACKS cbDDVideoPortCallbacks;
        Windows::Win32::WindowsProgramming::DDHAL_DDVIDEOPORTCALLBACKS HALDDVideoPort;
        Windows::Win32::WindowsProgramming::DDHAL_DDCOLORCONTROLCALLBACKS cbDDColorControlCallbacks;
        Windows::Win32::WindowsProgramming::DDHAL_DDCOLORCONTROLCALLBACKS HALDDColorControl;
        Windows::Win32::WindowsProgramming::DDHAL_DDMISCELLANEOUSCALLBACKS cbDDMiscellaneousCallbacks;
        Windows::Win32::WindowsProgramming::DDHAL_DDMISCELLANEOUSCALLBACKS HALDDMiscellaneous;
        Windows::Win32::WindowsProgramming::DDHAL_DDKERNELCALLBACKS cbDDKernelCallbacks;
        Windows::Win32::WindowsProgramming::DDHAL_DDKERNELCALLBACKS HALDDKernel;
        Windows::Win32::WindowsProgramming::DDHAL_DDMOTIONCOMPCALLBACKS cbDDMotionCompCallbacks;
        Windows::Win32::WindowsProgramming::DDHAL_DDMOTIONCOMPCALLBACKS HALDDMotionComp;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DDCORECAPS
    {
        uint32_t dwSize;
        uint32_t dwCaps;
        uint32_t dwCaps2;
        uint32_t dwCKeyCaps;
        uint32_t dwFXCaps;
        uint32_t dwFXAlphaCaps;
        uint32_t dwPalCaps;
        uint32_t dwSVCaps;
        uint32_t dwAlphaBltConstBitDepths;
        uint32_t dwAlphaBltPixelBitDepths;
        uint32_t dwAlphaBltSurfaceBitDepths;
        uint32_t dwAlphaOverlayConstBitDepths;
        uint32_t dwAlphaOverlayPixelBitDepths;
        uint32_t dwAlphaOverlaySurfaceBitDepths;
        uint32_t dwZBufferBitDepths;
        uint32_t dwVidMemTotal;
        uint32_t dwVidMemFree;
        uint32_t dwMaxVisibleOverlays;
        uint32_t dwCurrVisibleOverlays;
        uint32_t dwNumFourCCCodes;
        uint32_t dwAlignBoundarySrc;
        uint32_t dwAlignSizeSrc;
        uint32_t dwAlignBoundaryDest;
        uint32_t dwAlignSizeDest;
        uint32_t dwAlignStrideAlign;
        uint32_t dwRops[8];
        Windows::Win32::DirectDraw::DDSCAPS ddsCaps;
        uint32_t dwMinOverlayStretch;
        uint32_t dwMaxOverlayStretch;
        uint32_t dwMinLiveVideoStretch;
        uint32_t dwMaxLiveVideoStretch;
        uint32_t dwMinHwCodecStretch;
        uint32_t dwMaxHwCodecStretch;
        uint32_t dwReserved1;
        uint32_t dwReserved2;
        uint32_t dwReserved3;
        uint32_t dwSVBCaps;
        uint32_t dwSVBCKeyCaps;
        uint32_t dwSVBFXCaps;
        uint32_t dwSVBRops[8];
        uint32_t dwVSBCaps;
        uint32_t dwVSBCKeyCaps;
        uint32_t dwVSBFXCaps;
        uint32_t dwVSBRops[8];
        uint32_t dwSSBCaps;
        uint32_t dwSSBCKeyCaps;
        uint32_t dwSSBFXCaps;
        uint32_t dwSSBRops[8];
        uint32_t dwMaxVideoPorts;
        uint32_t dwCurrVideoPorts;
        uint32_t dwSVBCaps2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDRAWI_DIRECTDRAW_GBL
    {
        uint32_t dwRefCnt;
        uint32_t dwFlags;
        size_t fpPrimaryOrig;
        Windows::Win32::DisplayDevices::DDCORECAPS ddCaps;
        uint32_t dwInternal1;
        uint32_t dwUnused1[9];
        Windows::Win32::WindowsProgramming::DDHAL_CALLBACKS* lpDDCBtmp;
        Windows::Win32::WindowsProgramming::DDRAWI_DDRAWSURFACE_INT* dsList;
        Windows::Win32::WindowsProgramming::DDRAWI_DDRAWPALETTE_INT* palList;
        Windows::Win32::WindowsProgramming::DDRAWI_DDRAWCLIPPER_INT* clipperList;
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_GBL* lp16DD;
        uint32_t dwMaxOverlays;
        uint32_t dwCurrOverlays;
        uint32_t dwMonitorFrequency;
        Windows::Win32::DisplayDevices::DDCORECAPS ddHELCaps;
        uint32_t dwUnused2[50];
        Windows::Win32::DirectShow::DDCOLORKEY ddckCKDestOverlay;
        Windows::Win32::DirectShow::DDCOLORKEY ddckCKSrcOverlay;
        Windows::Win32::WindowsProgramming::VIDMEMINFO vmiData;
        void* lpDriverHandle;
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_LCL* lpExclusiveOwner;
        uint32_t dwModeIndex;
        uint32_t dwModeIndexOrig;
        uint32_t dwNumFourCC;
        uint32_t* lpdwFourCC;
        uint32_t dwNumModes;
        Windows::Win32::WindowsProgramming::DDHALMODEINFO* lpModeInfo;
        Windows::Win32::WindowsProgramming::PROCESS_LIST plProcessList;
        uint32_t dwSurfaceLockCount;
        uint32_t dwAliasedLockCnt;
        size_t dwReserved3;
        size_t hDD;
        int8_t cObsolete[12];
        uint32_t dwReserved1;
        uint32_t dwReserved2;
        Windows::Win32::WindowsProgramming::DBLNODE dbnOverlayRoot;
        uint16_t* lpwPDeviceFlags;
        uint32_t dwPDevice;
        uint32_t dwWin16LockCnt;
        uint32_t dwUnused3;
        uint32_t hInstance;
        uint32_t dwEvent16;
        uint32_t dwSaveNumModes;
        size_t lpD3DGlobalDriverData;
        size_t lpD3DHALCallbacks;
        Windows::Win32::DisplayDevices::DDCORECAPS ddBothCaps;
        Windows::Win32::DisplayDevices::DDVIDEOPORTCAPS* lpDDVideoPortCaps;
        Windows::Win32::WindowsProgramming::DDRAWI_DDVIDEOPORT_INT* dvpList;
        size_t lpD3DHALCallbacks2;
        Windows::Win32::DisplayDevices::RECT rectDevice;
        uint32_t cMonitors;
        void* gpbmiSrc;
        void* gpbmiDest;
        Windows::Win32::WindowsProgramming::HEAPALIASINFO* phaiHeapAliases;
        size_t hKernelHandle;
        size_t pfnNotifyProc;
        Windows::Win32::DisplayDevices::DDKERNELCAPS* lpDDKernelCaps;
        Windows::Win32::WindowsProgramming::DDNONLOCALVIDMEMCAPS* lpddNLVCaps;
        Windows::Win32::WindowsProgramming::DDNONLOCALVIDMEMCAPS* lpddNLVHELCaps;
        Windows::Win32::WindowsProgramming::DDNONLOCALVIDMEMCAPS* lpddNLVBothCaps;
        size_t lpD3DExtendedCaps;
        uint32_t dwDOSBoxEvent;
        Windows::Win32::DisplayDevices::RECT rectDesktop;
        int8_t cDriverName[32];
        size_t lpD3DHALCallbacks3;
        uint32_t dwNumZPixelFormats;
        Windows::Win32::DirectDraw::DDPIXELFORMAT* lpZPixelFormats;
        Windows::Win32::WindowsProgramming::DDRAWI_DDMOTIONCOMP_INT* mcList;
        uint32_t hDDVxd;
        Windows::Win32::DirectDraw::DDSCAPSEX ddsCapsMore;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDRAWI_DIRECTDRAW_LCL
    {
        uint32_t lpDDMore;
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_GBL* lpGbl;
        uint32_t dwUnused0;
        uint32_t dwLocalFlags;
        uint32_t dwLocalRefCnt;
        uint32_t dwProcessId;
        Windows::Win32::Com::IUnknown* pUnkOuter;
        uint32_t dwObsolete1;
        size_t hWnd;
        size_t hDC;
        uint32_t dwErrorMode;
        Windows::Win32::WindowsProgramming::DDRAWI_DDRAWSURFACE_INT* lpPrimary;
        Windows::Win32::WindowsProgramming::DDRAWI_DDRAWSURFACE_INT* lpCB;
        uint32_t dwPreferredMode;
        Windows::Win32::SystemServices::HINSTANCE hD3DInstance;
        Windows::Win32::Com::IUnknown* pD3DIUnknown;
        Windows::Win32::WindowsProgramming::DDHAL_CALLBACKS* lpDDCB;
        size_t hDDVxd;
        uint32_t dwAppHackFlags;
        size_t hFocusWnd;
        uint32_t dwHotTracking;
        uint32_t dwIMEState;
        size_t hWndPopup;
        size_t hDD;
        size_t hGammaCalibrator;
        Windows::Win32::WindowsProgramming::LPDDGAMMACALIBRATORPROC* lpGammaCalibrator;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDRAWI_DDVIDEOPORT_INT
    {
        void* lpVtbl;
        Windows::Win32::WindowsProgramming::DDRAWI_DDVIDEOPORT_LCL* lpLcl;
        Windows::Win32::WindowsProgramming::DDRAWI_DDVIDEOPORT_INT* lpLink;
        uint32_t dwIntRefCnt;
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDRAWI_DDVIDEOPORT_LCL
    {
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_LCL* lpDD;
        Windows::Win32::DisplayDevices::DDVIDEOPORTDESC ddvpDesc;
        Windows::Win32::DisplayDevices::DDVIDEOPORTINFO ddvpInfo;
        Windows::Win32::WindowsProgramming::DDRAWI_DDRAWSURFACE_INT* lpSurface;
        Windows::Win32::WindowsProgramming::DDRAWI_DDRAWSURFACE_INT* lpVBISurface;
        Windows::Win32::WindowsProgramming::DDRAWI_DDRAWSURFACE_INT** lpFlipInts;
        uint32_t dwNumAutoflip;
        uint32_t dwProcessID;
        uint32_t dwStateFlags;
        uint32_t dwFlags;
        uint32_t dwRefCnt;
        size_t fpLastFlip;
        size_t dwReserved1;
        size_t dwReserved2;
        Windows::Win32::SystemServices::HANDLE hDDVideoPort;
        uint32_t dwNumVBIAutoflip;
        Windows::Win32::DisplayDevices::DDVIDEOPORTDESC* lpVBIDesc;
        Windows::Win32::DisplayDevices::DDVIDEOPORTDESC* lpVideoDesc;
        Windows::Win32::DisplayDevices::DDVIDEOPORTINFO* lpVBIInfo;
        Windows::Win32::DisplayDevices::DDVIDEOPORTINFO* lpVideoInfo;
        uint32_t dwVBIProcessID;
        Windows::Win32::WindowsProgramming::DDRAWI_DDVIDEOPORT_INT* lpVPNotify;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDRAWI_DDMOTIONCOMP_INT
    {
        void* lpVtbl;
        Windows::Win32::WindowsProgramming::DDRAWI_DDMOTIONCOMP_LCL* lpLcl;
        Windows::Win32::WindowsProgramming::DDRAWI_DDMOTIONCOMP_INT* lpLink;
        uint32_t dwIntRefCnt;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDRAWI_DDMOTIONCOMP_LCL
    {
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_LCL* lpDD;
        ::win32::guid guid;
        uint32_t dwUncompWidth;
        uint32_t dwUncompHeight;
        Windows::Win32::DirectDraw::DDPIXELFORMAT ddUncompPixelFormat;
        uint32_t dwInternalFlags;
        uint32_t dwRefCnt;
        uint32_t dwProcessId;
        Windows::Win32::SystemServices::HANDLE hMoComp;
        uint32_t dwDriverReserved1;
        uint32_t dwDriverReserved2;
        uint32_t dwDriverReserved3;
        void* lpDriverReserved1;
        void* lpDriverReserved2;
        void* lpDriverReserved3;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHALINFO
    {
        uint32_t dwSize;
        Windows::Win32::WindowsProgramming::DDHAL_DDCALLBACKS* lpDDCallbacks;
        Windows::Win32::WindowsProgramming::DDHAL_DDSURFACECALLBACKS* lpDDSurfaceCallbacks;
        Windows::Win32::WindowsProgramming::DDHAL_DDPALETTECALLBACKS* lpDDPaletteCallbacks;
        Windows::Win32::WindowsProgramming::VIDMEMINFO vmiData;
        Windows::Win32::DisplayDevices::DDCORECAPS ddCaps;
        uint32_t dwMonitorFrequency;
        Windows::Win32::WindowsProgramming::LPDDHAL_GETDRIVERINFO* GetDriverInfo;
        uint32_t dwModeIndex;
        uint32_t* lpdwFourCC;
        uint32_t dwNumModes;
        Windows::Win32::WindowsProgramming::DDHALMODEINFO* lpModeInfo;
        uint32_t dwFlags;
        void* lpPDevice;
        uint32_t hInstance;
        size_t lpD3DGlobalDriverData;
        size_t lpD3DHALCallbacks;
        Windows::Win32::WindowsProgramming::DDHAL_DDEXEBUFCALLBACKS* lpDDExeBufCallbacks;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHALDDRAWFNS
    {
        uint32_t dwSize;
        Windows::Win32::WindowsProgramming::LPDDHAL_SETINFO* lpSetInfo;
        Windows::Win32::WindowsProgramming::LPDDHAL_VIDMEMALLOC* lpVidMemAlloc;
        Windows::Win32::WindowsProgramming::LPDDHAL_VIDMEMFREE* lpVidMemFree;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_BLTDATA
    {
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_GBL* lpDD;
        Windows::Win32::WindowsProgramming::DDRAWI_DDRAWSURFACE_LCL* lpDDDestSurface;
        Windows::Win32::DisplayDevices::RECTL rDest;
        Windows::Win32::WindowsProgramming::DDRAWI_DDRAWSURFACE_LCL* lpDDSrcSurface;
        Windows::Win32::DisplayDevices::RECTL rSrc;
        uint32_t dwFlags;
        uint32_t dwROPFlags;
        Windows::Win32::DirectDraw::DDBLTFX bltFX;
        int32_t ddRVal;
        Windows::Win32::WindowsProgramming::LPDDHALSURFCB_BLT* Blt;
        Windows::Win32::SystemServices::BOOL IsClipped;
        Windows::Win32::DisplayDevices::RECTL rOrigDest;
        Windows::Win32::DisplayDevices::RECTL rOrigSrc;
        uint32_t dwRectCnt;
        Windows::Win32::DisplayDevices::RECT* prDestRects;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_LOCKDATA
    {
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_GBL* lpDD;
        Windows::Win32::WindowsProgramming::DDRAWI_DDRAWSURFACE_LCL* lpDDSurface;
        uint32_t bHasRect;
        Windows::Win32::DisplayDevices::RECTL rArea;
        void* lpSurfData;
        int32_t ddRVal;
        Windows::Win32::WindowsProgramming::LPDDHALSURFCB_LOCK* Lock;
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_UNLOCKDATA
    {
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_GBL* lpDD;
        Windows::Win32::WindowsProgramming::DDRAWI_DDRAWSURFACE_LCL* lpDDSurface;
        int32_t ddRVal;
        Windows::Win32::WindowsProgramming::LPDDHALSURFCB_UNLOCK* Unlock;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_UPDATEOVERLAYDATA
    {
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_GBL* lpDD;
        Windows::Win32::WindowsProgramming::DDRAWI_DDRAWSURFACE_LCL* lpDDDestSurface;
        Windows::Win32::DisplayDevices::RECTL rDest;
        Windows::Win32::WindowsProgramming::DDRAWI_DDRAWSURFACE_LCL* lpDDSrcSurface;
        Windows::Win32::DisplayDevices::RECTL rSrc;
        uint32_t dwFlags;
        Windows::Win32::DirectDraw::DDOVERLAYFX overlayFX;
        int32_t ddRVal;
        Windows::Win32::WindowsProgramming::LPDDHALSURFCB_UPDATEOVERLAY* UpdateOverlay;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_SETOVERLAYPOSITIONDATA
    {
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_GBL* lpDD;
        Windows::Win32::WindowsProgramming::DDRAWI_DDRAWSURFACE_LCL* lpDDSrcSurface;
        Windows::Win32::WindowsProgramming::DDRAWI_DDRAWSURFACE_LCL* lpDDDestSurface;
        int32_t lXPos;
        int32_t lYPos;
        int32_t ddRVal;
        Windows::Win32::WindowsProgramming::LPDDHALSURFCB_SETOVERLAYPOSITION* SetOverlayPosition;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_SETPALETTEDATA
    {
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_GBL* lpDD;
        Windows::Win32::WindowsProgramming::DDRAWI_DDRAWSURFACE_LCL* lpDDSurface;
        Windows::Win32::WindowsProgramming::DDRAWI_DDRAWPALETTE_GBL* lpDDPalette;
        int32_t ddRVal;
        Windows::Win32::WindowsProgramming::LPDDHALSURFCB_SETPALETTE* SetPalette;
        Windows::Win32::SystemServices::BOOL Attach;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_FLIPDATA
    {
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_GBL* lpDD;
        Windows::Win32::WindowsProgramming::DDRAWI_DDRAWSURFACE_LCL* lpSurfCurr;
        Windows::Win32::WindowsProgramming::DDRAWI_DDRAWSURFACE_LCL* lpSurfTarg;
        uint32_t dwFlags;
        int32_t ddRVal;
        Windows::Win32::WindowsProgramming::LPDDHALSURFCB_FLIP* Flip;
        Windows::Win32::WindowsProgramming::DDRAWI_DDRAWSURFACE_LCL* lpSurfCurrLeft;
        Windows::Win32::WindowsProgramming::DDRAWI_DDRAWSURFACE_LCL* lpSurfTargLeft;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_DESTROYSURFACEDATA
    {
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_GBL* lpDD;
        Windows::Win32::WindowsProgramming::DDRAWI_DDRAWSURFACE_LCL* lpDDSurface;
        int32_t ddRVal;
        Windows::Win32::WindowsProgramming::LPDDHALSURFCB_DESTROYSURFACE* DestroySurface;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_SETCLIPLISTDATA
    {
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_GBL* lpDD;
        Windows::Win32::WindowsProgramming::DDRAWI_DDRAWSURFACE_LCL* lpDDSurface;
        int32_t ddRVal;
        Windows::Win32::WindowsProgramming::LPDDHALSURFCB_SETCLIPLIST* SetClipList;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_ADDATTACHEDSURFACEDATA
    {
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_GBL* lpDD;
        Windows::Win32::WindowsProgramming::DDRAWI_DDRAWSURFACE_LCL* lpDDSurface;
        Windows::Win32::WindowsProgramming::DDRAWI_DDRAWSURFACE_LCL* lpSurfAttached;
        int32_t ddRVal;
        Windows::Win32::WindowsProgramming::LPDDHALSURFCB_ADDATTACHEDSURFACE* AddAttachedSurface;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_SETCOLORKEYDATA
    {
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_GBL* lpDD;
        Windows::Win32::WindowsProgramming::DDRAWI_DDRAWSURFACE_LCL* lpDDSurface;
        uint32_t dwFlags;
        Windows::Win32::DirectShow::DDCOLORKEY ckNew;
        int32_t ddRVal;
        Windows::Win32::WindowsProgramming::LPDDHALSURFCB_SETCOLORKEY* SetColorKey;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_GETBLTSTATUSDATA
    {
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_GBL* lpDD;
        Windows::Win32::WindowsProgramming::DDRAWI_DDRAWSURFACE_LCL* lpDDSurface;
        uint32_t dwFlags;
        int32_t ddRVal;
        Windows::Win32::WindowsProgramming::LPDDHALSURFCB_GETBLTSTATUS* GetBltStatus;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_GETFLIPSTATUSDATA
    {
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_GBL* lpDD;
        Windows::Win32::WindowsProgramming::DDRAWI_DDRAWSURFACE_LCL* lpDDSurface;
        uint32_t dwFlags;
        int32_t ddRVal;
        Windows::Win32::WindowsProgramming::LPDDHALSURFCB_GETFLIPSTATUS* GetFlipStatus;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_DESTROYPALETTEDATA
    {
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_GBL* lpDD;
        Windows::Win32::WindowsProgramming::DDRAWI_DDRAWPALETTE_GBL* lpDDPalette;
        int32_t ddRVal;
        Windows::Win32::WindowsProgramming::LPDDHALPALCB_DESTROYPALETTE* DestroyPalette;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_SETENTRIESDATA
    {
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_GBL* lpDD;
        Windows::Win32::WindowsProgramming::DDRAWI_DDRAWPALETTE_GBL* lpDDPalette;
        uint32_t dwBase;
        uint32_t dwNumEntries;
        Windows::Win32::Direct2D::PALETTEENTRY* lpEntries;
        int32_t ddRVal;
        Windows::Win32::WindowsProgramming::LPDDHALPALCB_SETENTRIES* SetEntries;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_CREATESURFACEDATA
    {
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_GBL* lpDD;
        Windows::Win32::DirectDraw::DDSURFACEDESC* lpDDSurfaceDesc;
        Windows::Win32::WindowsProgramming::DDRAWI_DDRAWSURFACE_LCL** lplpSList;
        uint32_t dwSCnt;
        int32_t ddRVal;
        Windows::Win32::WindowsProgramming::LPDDHAL_CREATESURFACE* CreateSurface;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_CANCREATESURFACEDATA
    {
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_GBL* lpDD;
        Windows::Win32::DirectDraw::DDSURFACEDESC* lpDDSurfaceDesc;
        uint32_t bIsDifferentPixelFormat;
        int32_t ddRVal;
        Windows::Win32::WindowsProgramming::LPDDHAL_CANCREATESURFACE* CanCreateSurface;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_CREATEPALETTEDATA
    {
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_GBL* lpDD;
        Windows::Win32::WindowsProgramming::DDRAWI_DDRAWPALETTE_GBL* lpDDPalette;
        Windows::Win32::Direct2D::PALETTEENTRY* lpColorTable;
        int32_t ddRVal;
        Windows::Win32::WindowsProgramming::LPDDHAL_CREATEPALETTE* CreatePalette;
        Windows::Win32::SystemServices::BOOL is_excl;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_DESTROYDRIVERDATA
    {
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_GBL* lpDD;
        int32_t ddRVal;
        Windows::Win32::WindowsProgramming::LPDDHAL_DESTROYDRIVER* DestroyDriver;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_SETMODEDATA
    {
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_GBL* lpDD;
        uint32_t dwModeIndex;
        int32_t ddRVal;
        Windows::Win32::WindowsProgramming::LPDDHAL_SETMODE* SetMode;
        Windows::Win32::SystemServices::BOOL inexcl;
        Windows::Win32::SystemServices::BOOL useRefreshRate;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_DRVSETCOLORKEYDATA
    {
        Windows::Win32::WindowsProgramming::DDRAWI_DDRAWSURFACE_LCL* lpDDSurface;
        uint32_t dwFlags;
        Windows::Win32::DirectShow::DDCOLORKEY ckNew;
        int32_t ddRVal;
        Windows::Win32::WindowsProgramming::LPDDHAL_SETCOLORKEY* SetColorKey;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_GETSCANLINEDATA
    {
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_GBL* lpDD;
        uint32_t dwScanLine;
        int32_t ddRVal;
        Windows::Win32::WindowsProgramming::LPDDHAL_GETSCANLINE* GetScanLine;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_SETEXCLUSIVEMODEDATA
    {
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_GBL* lpDD;
        uint32_t dwEnterExcl;
        uint32_t dwReserved;
        int32_t ddRVal;
        Windows::Win32::WindowsProgramming::LPDDHAL_SETEXCLUSIVEMODE* SetExclusiveMode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_FLIPTOGDISURFACEDATA
    {
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_GBL* lpDD;
        uint32_t dwToGDI;
        uint32_t dwReserved;
        int32_t ddRVal;
        Windows::Win32::WindowsProgramming::LPDDHAL_FLIPTOGDISURFACE* FlipToGDISurface;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_CANCREATEVPORTDATA
    {
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_LCL* lpDD;
        Windows::Win32::DisplayDevices::DDVIDEOPORTDESC* lpDDVideoPortDesc;
        int32_t ddRVal;
        Windows::Win32::WindowsProgramming::LPDDHALVPORTCB_CANCREATEVIDEOPORT* CanCreateVideoPort;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_CREATEVPORTDATA
    {
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_LCL* lpDD;
        Windows::Win32::DisplayDevices::DDVIDEOPORTDESC* lpDDVideoPortDesc;
        Windows::Win32::WindowsProgramming::DDRAWI_DDVIDEOPORT_LCL* lpVideoPort;
        int32_t ddRVal;
        Windows::Win32::WindowsProgramming::LPDDHALVPORTCB_CREATEVIDEOPORT* CreateVideoPort;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_FLIPVPORTDATA
    {
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_LCL* lpDD;
        Windows::Win32::WindowsProgramming::DDRAWI_DDVIDEOPORT_LCL* lpVideoPort;
        Windows::Win32::WindowsProgramming::DDRAWI_DDRAWSURFACE_LCL* lpSurfCurr;
        Windows::Win32::WindowsProgramming::DDRAWI_DDRAWSURFACE_LCL* lpSurfTarg;
        int32_t ddRVal;
        Windows::Win32::WindowsProgramming::LPDDHALVPORTCB_FLIP* FlipVideoPort;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_GETVPORTBANDWIDTHDATA
    {
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_LCL* lpDD;
        Windows::Win32::WindowsProgramming::DDRAWI_DDVIDEOPORT_LCL* lpVideoPort;
        Windows::Win32::DirectDraw::DDPIXELFORMAT* lpddpfFormat;
        uint32_t dwWidth;
        uint32_t dwHeight;
        uint32_t dwFlags;
        Windows::Win32::DisplayDevices::DDVIDEOPORTBANDWIDTH* lpBandwidth;
        int32_t ddRVal;
        Windows::Win32::WindowsProgramming::LPDDHALVPORTCB_GETBANDWIDTH* GetVideoPortBandwidth;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_GETVPORTINPUTFORMATDATA
    {
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_LCL* lpDD;
        Windows::Win32::WindowsProgramming::DDRAWI_DDVIDEOPORT_LCL* lpVideoPort;
        uint32_t dwFlags;
        Windows::Win32::DirectDraw::DDPIXELFORMAT* lpddpfFormat;
        uint32_t dwNumFormats;
        int32_t ddRVal;
        Windows::Win32::WindowsProgramming::LPDDHALVPORTCB_GETINPUTFORMATS* GetVideoPortInputFormats;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_GETVPORTOUTPUTFORMATDATA
    {
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_LCL* lpDD;
        Windows::Win32::WindowsProgramming::DDRAWI_DDVIDEOPORT_LCL* lpVideoPort;
        uint32_t dwFlags;
        Windows::Win32::DirectDraw::DDPIXELFORMAT* lpddpfInputFormat;
        Windows::Win32::DirectDraw::DDPIXELFORMAT* lpddpfOutputFormats;
        uint32_t dwNumFormats;
        int32_t ddRVal;
        Windows::Win32::WindowsProgramming::LPDDHALVPORTCB_GETOUTPUTFORMATS* GetVideoPortOutputFormats;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_GETVPORTFIELDDATA
    {
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_LCL* lpDD;
        Windows::Win32::WindowsProgramming::DDRAWI_DDVIDEOPORT_LCL* lpVideoPort;
        Windows::Win32::SystemServices::BOOL bField;
        int32_t ddRVal;
        Windows::Win32::WindowsProgramming::LPDDHALVPORTCB_GETFIELD* GetVideoPortField;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_GETVPORTLINEDATA
    {
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_LCL* lpDD;
        Windows::Win32::WindowsProgramming::DDRAWI_DDVIDEOPORT_LCL* lpVideoPort;
        uint32_t dwLine;
        int32_t ddRVal;
        Windows::Win32::WindowsProgramming::LPDDHALVPORTCB_GETLINE* GetVideoPortLine;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_GETVPORTCONNECTDATA
    {
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_LCL* lpDD;
        uint32_t dwPortId;
        Windows::Win32::CoreAudio::DDVIDEOPORTCONNECT* lpConnect;
        uint32_t dwNumEntries;
        int32_t ddRVal;
        Windows::Win32::WindowsProgramming::LPDDHALVPORTCB_GETVPORTCONNECT* GetVideoPortConnectInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_DESTROYVPORTDATA
    {
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_LCL* lpDD;
        Windows::Win32::WindowsProgramming::DDRAWI_DDVIDEOPORT_LCL* lpVideoPort;
        int32_t ddRVal;
        Windows::Win32::WindowsProgramming::LPDDHALVPORTCB_DESTROYVPORT* DestroyVideoPort;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_GETVPORTFLIPSTATUSDATA
    {
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_LCL* lpDD;
        size_t fpSurface;
        int32_t ddRVal;
        Windows::Win32::WindowsProgramming::LPDDHALVPORTCB_GETFLIPSTATUS* GetVideoPortFlipStatus;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_UPDATEVPORTDATA
    {
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_LCL* lpDD;
        Windows::Win32::WindowsProgramming::DDRAWI_DDVIDEOPORT_LCL* lpVideoPort;
        Windows::Win32::WindowsProgramming::DDRAWI_DDRAWSURFACE_INT** lplpDDSurface;
        Windows::Win32::WindowsProgramming::DDRAWI_DDRAWSURFACE_INT** lplpDDVBISurface;
        Windows::Win32::DisplayDevices::DDVIDEOPORTINFO* lpVideoInfo;
        uint32_t dwFlags;
        uint32_t dwNumAutoflip;
        uint32_t dwNumVBIAutoflip;
        int32_t ddRVal;
        Windows::Win32::WindowsProgramming::LPDDHALVPORTCB_UPDATE* UpdateVideoPort;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_WAITFORVPORTSYNCDATA
    {
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_LCL* lpDD;
        Windows::Win32::WindowsProgramming::DDRAWI_DDVIDEOPORT_LCL* lpVideoPort;
        uint32_t dwFlags;
        uint32_t dwLine;
        uint32_t dwTimeOut;
        int32_t ddRVal;
        Windows::Win32::WindowsProgramming::LPDDHALVPORTCB_WAITFORSYNC* WaitForVideoPortSync;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_GETVPORTSIGNALDATA
    {
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_LCL* lpDD;
        Windows::Win32::WindowsProgramming::DDRAWI_DDVIDEOPORT_LCL* lpVideoPort;
        uint32_t dwStatus;
        int32_t ddRVal;
        Windows::Win32::WindowsProgramming::LPDDHALVPORTCB_GETSIGNALSTATUS* GetVideoSignalStatus;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_VPORTCOLORDATA
    {
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_LCL* lpDD;
        Windows::Win32::WindowsProgramming::DDRAWI_DDVIDEOPORT_LCL* lpVideoPort;
        uint32_t dwFlags;
        Windows::Win32::DirectDraw::DDCOLORCONTROL* lpColorData;
        int32_t ddRVal;
        Windows::Win32::WindowsProgramming::LPDDHALVPORTCB_COLORCONTROL* ColorControl;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_COLORCONTROLDATA
    {
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_GBL* lpDD;
        Windows::Win32::WindowsProgramming::DDRAWI_DDRAWSURFACE_LCL* lpDDSurface;
        Windows::Win32::DirectDraw::DDCOLORCONTROL* lpColorData;
        uint32_t dwFlags;
        int32_t ddRVal;
        Windows::Win32::WindowsProgramming::LPDDHALCOLORCB_COLORCONTROL* ColorControl;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_GETDRIVERINFODATA
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        ::win32::guid guidInfo;
        uint32_t dwExpectedSize;
        void* lpvData;
        uint32_t dwActualSize;
        int32_t ddRVal;
        size_t dwContext;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_GETAVAILDRIVERMEMORYDATA
    {
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_GBL* lpDD;
        Windows::Win32::DirectDraw::DDSCAPS DDSCaps;
        uint32_t dwTotal;
        uint32_t dwFree;
        int32_t ddRVal;
        Windows::Win32::WindowsProgramming::LPDDHAL_GETAVAILDRIVERMEMORY* GetAvailDriverMemory;
        Windows::Win32::DirectDraw::DDSCAPSEX ddsCapsEx;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_UPDATENONLOCALHEAPDATA
    {
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_GBL* lpDD;
        uint32_t dwHeap;
        size_t fpGARTLin;
        size_t fpGARTDev;
        size_t ulPolicyMaxBytes;
        int32_t ddRVal;
        Windows::Win32::WindowsProgramming::LPDDHAL_UPDATENONLOCALHEAP* UpdateNonLocalHeap;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct SURFACEALIGNMENT
    {
        union _Anonymous_e__Union
        {
            struct _Linear_e__Struct
            {
                uint32_t dwStartAlignment;
                uint32_t dwPitchAlignment;
                uint32_t dwFlags;
                uint32_t dwReserved2;
            };
            struct _Rectangular_e__Struct
            {
                uint32_t dwXAlignment;
                uint32_t dwYAlignment;
                uint32_t dwFlags;
                uint32_t dwReserved2;
            };
            _Linear_e__Struct Linear;
            _Rectangular_e__Struct Rectangular;
        };
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct HEAPALIGNMENT
    {
        uint32_t dwSize;
        Windows::Win32::DirectDraw::DDSCAPS ddsCaps;
        uint32_t dwReserved;
        Windows::Win32::DisplayDevices::SURFACEALIGNMENT ExecuteBuffer;
        Windows::Win32::DisplayDevices::SURFACEALIGNMENT Overlay;
        Windows::Win32::DisplayDevices::SURFACEALIGNMENT Texture;
        Windows::Win32::DisplayDevices::SURFACEALIGNMENT ZBuffer;
        Windows::Win32::DisplayDevices::SURFACEALIGNMENT AlphaBuffer;
        Windows::Win32::DisplayDevices::SURFACEALIGNMENT Offscreen;
        Windows::Win32::DisplayDevices::SURFACEALIGNMENT FlipTarget;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_GETHEAPALIGNMENTDATA
    {
        size_t dwInstance;
        uint32_t dwHeap;
        int32_t ddRVal;
        Windows::Win32::WindowsProgramming::LPDDHAL_GETHEAPALIGNMENT* GetHeapAlignment;
        Windows::Win32::DisplayDevices::HEAPALIGNMENT Alignment;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_CREATESURFACEEXDATA
    {
        uint32_t dwFlags;
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_LCL* lpDDLcl;
        Windows::Win32::WindowsProgramming::DDRAWI_DDRAWSURFACE_LCL* lpDDSLcl;
        int32_t ddRVal;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_GETDRIVERSTATEDATA
    {
        union _Anonymous_e__Union
        {
            size_t dwhContext;
        };
        uint32_t dwFlags;
        _Anonymous_e__Union Anonymous;
        uint32_t* lpdwStates;
        uint32_t dwLength;
        int32_t ddRVal;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_SYNCSURFACEDATA
    {
        uint32_t dwSize;
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_LCL* lpDD;
        Windows::Win32::WindowsProgramming::DDRAWI_DDRAWSURFACE_LCL* lpDDSurface;
        uint32_t dwSurfaceOffset;
        size_t fpLockPtr;
        int32_t lPitch;
        uint32_t dwOverlayOffset;
        uint32_t dwOverlaySrcWidth;
        uint32_t dwOverlaySrcHeight;
        uint32_t dwOverlayDestWidth;
        uint32_t dwOverlayDestHeight;
        size_t dwDriverReserved1;
        size_t dwDriverReserved2;
        size_t dwDriverReserved3;
        int32_t ddRVal;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_SYNCVIDEOPORTDATA
    {
        uint32_t dwSize;
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_LCL* lpDD;
        Windows::Win32::WindowsProgramming::DDRAWI_DDVIDEOPORT_LCL* lpVideoPort;
        uint32_t dwOriginOffset;
        uint32_t dwHeight;
        uint32_t dwVBIHeight;
        size_t dwDriverReserved1;
        size_t dwDriverReserved2;
        size_t dwDriverReserved3;
        int32_t ddRVal;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_GETMOCOMPGUIDSDATA
    {
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_LCL* lpDD;
        uint32_t dwNumGuids;
        ::win32::guid* lpGuids;
        int32_t ddRVal;
        Windows::Win32::WindowsProgramming::LPDDHALMOCOMPCB_GETGUIDS* GetMoCompGuids;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_GETMOCOMPFORMATSDATA
    {
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_LCL* lpDD;
        ::win32::guid* lpGuid;
        uint32_t dwNumFormats;
        Windows::Win32::DirectDraw::DDPIXELFORMAT* lpFormats;
        int32_t ddRVal;
        Windows::Win32::WindowsProgramming::LPDDHALMOCOMPCB_GETFORMATS* GetMoCompFormats;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_CREATEMOCOMPDATA
    {
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_LCL* lpDD;
        Windows::Win32::WindowsProgramming::DDRAWI_DDMOTIONCOMP_LCL* lpMoComp;
        ::win32::guid* lpGuid;
        uint32_t dwUncompWidth;
        uint32_t dwUncompHeight;
        Windows::Win32::DirectDraw::DDPIXELFORMAT ddUncompPixelFormat;
        void* lpData;
        uint32_t dwDataSize;
        int32_t ddRVal;
        Windows::Win32::WindowsProgramming::LPDDHALMOCOMPCB_CREATE* CreateMoComp;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDMCCOMPBUFFERINFO
    {
        uint32_t dwSize;
        uint32_t dwNumCompBuffers;
        uint32_t dwWidthToCreate;
        uint32_t dwHeightToCreate;
        uint32_t dwBytesToAllocate;
        Windows::Win32::DirectDraw::DDSCAPS2 ddCompCaps;
        Windows::Win32::DirectDraw::DDPIXELFORMAT ddPixelFormat;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_GETMOCOMPCOMPBUFFDATA
    {
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_LCL* lpDD;
        ::win32::guid* lpGuid;
        uint32_t dwWidth;
        uint32_t dwHeight;
        Windows::Win32::DirectDraw::DDPIXELFORMAT ddPixelFormat;
        uint32_t dwNumTypesCompBuffs;
        Windows::Win32::WindowsProgramming::DDMCCOMPBUFFERINFO* lpCompBuffInfo;
        int32_t ddRVal;
        Windows::Win32::WindowsProgramming::LPDDHALMOCOMPCB_GETCOMPBUFFINFO* GetMoCompBuffInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_GETINTERNALMOCOMPDATA
    {
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_LCL* lpDD;
        ::win32::guid* lpGuid;
        uint32_t dwWidth;
        uint32_t dwHeight;
        Windows::Win32::DirectDraw::DDPIXELFORMAT ddPixelFormat;
        uint32_t dwScratchMemAlloc;
        int32_t ddRVal;
        Windows::Win32::WindowsProgramming::LPDDHALMOCOMPCB_GETINTERNALINFO* GetInternalMoCompInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_BEGINMOCOMPFRAMEDATA
    {
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_LCL* lpDD;
        Windows::Win32::WindowsProgramming::DDRAWI_DDMOTIONCOMP_LCL* lpMoComp;
        Windows::Win32::WindowsProgramming::DDRAWI_DDRAWSURFACE_LCL* lpDestSurface;
        uint32_t dwInputDataSize;
        void* lpInputData;
        uint32_t dwOutputDataSize;
        void* lpOutputData;
        int32_t ddRVal;
        Windows::Win32::WindowsProgramming::LPDDHALMOCOMPCB_BEGINFRAME* BeginMoCompFrame;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_ENDMOCOMPFRAMEDATA
    {
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_LCL* lpDD;
        Windows::Win32::WindowsProgramming::DDRAWI_DDMOTIONCOMP_LCL* lpMoComp;
        void* lpInputData;
        uint32_t dwInputDataSize;
        int32_t ddRVal;
        Windows::Win32::WindowsProgramming::LPDDHALMOCOMPCB_ENDFRAME* EndMoCompFrame;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDMCBUFFERINFO
    {
        uint32_t dwSize;
        Windows::Win32::WindowsProgramming::DDRAWI_DDRAWSURFACE_LCL* lpCompSurface;
        uint32_t dwDataOffset;
        uint32_t dwDataSize;
        void* lpPrivate;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_RENDERMOCOMPDATA
    {
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_LCL* lpDD;
        Windows::Win32::WindowsProgramming::DDRAWI_DDMOTIONCOMP_LCL* lpMoComp;
        uint32_t dwNumBuffers;
        Windows::Win32::WindowsProgramming::DDMCBUFFERINFO* lpBufferInfo;
        uint32_t dwFunction;
        void* lpInputData;
        uint32_t dwInputDataSize;
        void* lpOutputData;
        uint32_t dwOutputDataSize;
        int32_t ddRVal;
        Windows::Win32::WindowsProgramming::LPDDHALMOCOMPCB_RENDER* RenderMoComp;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_QUERYMOCOMPSTATUSDATA
    {
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_LCL* lpDD;
        Windows::Win32::WindowsProgramming::DDRAWI_DDMOTIONCOMP_LCL* lpMoComp;
        Windows::Win32::WindowsProgramming::DDRAWI_DDRAWSURFACE_LCL* lpSurface;
        uint32_t dwFlags;
        int32_t ddRVal;
        Windows::Win32::WindowsProgramming::LPDDHALMOCOMPCB_QUERYSTATUS* QueryMoCompStatus;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DDHAL_DESTROYMOCOMPDATA
    {
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_LCL* lpDD;
        Windows::Win32::WindowsProgramming::DDRAWI_DDMOTIONCOMP_LCL* lpMoComp;
        int32_t ddRVal;
        Windows::Win32::WindowsProgramming::LPDDHALMOCOMPCB_DESTROY* DestroyMoComp;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct _D3DHAL_CALLBACKS
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct _D3DHAL_GLOBALDRIVERDATA
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct STRENTRYA
    {
        int8_t* pszName;
        int8_t* pszValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct STRENTRYW
    {
        uint16_t* pszName;
        uint16_t* pszValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct STRTABLEA
    {
        uint32_t cEntries;
        Windows::Win32::WindowsProgramming::STRENTRYA* pse;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct STRTABLEW
    {
        uint32_t cEntries;
        Windows::Win32::WindowsProgramming::STRENTRYW* pse;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct _CabInfoA
    {
        int8_t* pszCab;
        int8_t* pszInf;
        int8_t* pszSection;
        int8_t szSrcPath[260];
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct _CabInfoW
    {
        uint16_t* pszCab;
        uint16_t* pszInf;
        uint16_t* pszSection;
        uint16_t szSrcPath[260];
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct PERUSERSECTIONA
    {
        int8_t szGUID[59];
        int8_t szDispName[128];
        int8_t szLocale[10];
        int8_t szStub[1040];
        int8_t szVersion[32];
        int8_t szCompID[128];
        uint32_t dwIsInstalled;
        Windows::Win32::SystemServices::BOOL bRollback;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct PERUSERSECTIONW
    {
        uint16_t szGUID[59];
        uint16_t szDispName[128];
        uint16_t szLocale[10];
        uint16_t szStub[1040];
        uint16_t szVersion[32];
        uint16_t szCompID[128];
        uint32_t dwIsInstalled;
        Windows::Win32::SystemServices::BOOL bRollback;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct IMESTRUCT
    {
        uint32_t fnc;
        Windows::Win32::WindowsAndMessaging::WPARAM wParam;
        uint32_t wCount;
        uint32_t dchSource;
        uint32_t dchDest;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam1;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam2;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam3;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct UNDETERMINESTRUCT
    {
        uint32_t dwSize;
        uint32_t uDefIMESize;
        uint32_t uDefIMEPos;
        uint32_t uUndetTextLen;
        uint32_t uUndetTextPos;
        uint32_t uUndetAttrPos;
        uint32_t uCursorPos;
        uint32_t uDeltaStart;
        uint32_t uDetermineTextLen;
        uint32_t uDetermineTextPos;
        uint32_t uDetermineDelimPos;
        uint32_t uYomiTextLen;
        uint32_t uYomiTextPos;
        uint32_t uYomiDelimPos;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct STRINGEXSTRUCT
    {
        uint32_t dwSize;
        uint32_t uDeterminePos;
        uint32_t uDetermineDelimPos;
        uint32_t uYomiPos;
        uint32_t uYomiDelimPos;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DATETIME
    {
        uint16_t year;
        uint16_t month;
        uint16_t day;
        uint16_t hour;
        uint16_t min;
        uint16_t sec;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct IMEPROA
    {
        Windows::Win32::WindowsAndMessaging::HWND hWnd;
        Windows::Win32::WindowsProgramming::DATETIME InstDate;
        uint32_t wVersion;
        uint8_t szDescription[50];
        uint8_t szName[80];
        uint8_t szOptions[30];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct IMEPROW
    {
        Windows::Win32::WindowsAndMessaging::HWND hWnd;
        Windows::Win32::WindowsProgramming::DATETIME InstDate;
        uint32_t wVersion;
        uint16_t szDescription[50];
        uint16_t szName[80];
        uint16_t szOptions[30];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct JAVA_TRUST
    {
        uint32_t cbSize;
        uint32_t flag;
        Windows::Win32::SystemServices::BOOL fAllActiveXPermissions;
        Windows::Win32::SystemServices::BOOL fAllPermissions;
        uint32_t dwEncodingType;
        uint8_t* pbJavaPermissions;
        uint32_t cbJavaPermissions;
        uint8_t* pbSigner;
        uint32_t cbSigner;
        uint16_t* pwszZone;
        ::win32::guid guidZone;
        int32_t hVerify;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct IsolatedAppLauncherTelemetryParameters
    {
        Windows::Win32::SystemServices::BOOL EnableForLaunch;
        ::win32::guid CorrelationGUID;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct FH_OVERLAPPED
    {
        size_t Internal;
        size_t InternalHigh;
        uint32_t Offset;
        uint32_t OffsetHigh;
        Windows::Win32::SystemServices::HANDLE hEvent;
        Windows::Win32::WindowsProgramming::PFN_IO_COMPLETION* pfnCompletion;
        size_t Reserved1;
        size_t Reserved2;
        size_t Reserved3;
        size_t Reserved4;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct FIO_CONTEXT
    {
        uint32_t m_dwTempHack;
        uint32_t m_dwSignature;
        Windows::Win32::SystemServices::HANDLE m_hFile;
        uint32_t m_dwLinesOffset;
        uint32_t m_dwHeaderLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct NAME_CACHE_CONTEXT
    {
        uint32_t m_dwSignature;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct TDIEntityID
    {
        uint32_t tei_entity;
        uint32_t tei_instance;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct TDIObjectID
    {
        Windows::Win32::WindowsProgramming::TDIEntityID toi_entity;
        uint32_t toi_class;
        uint32_t toi_type;
        uint32_t toi_id;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct tcp_request_query_information_ex_xp
    {
        Windows::Win32::WindowsProgramming::TDIObjectID ID;
        size_t Context[4];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct tcp_request_query_information_ex_w2k
    {
        Windows::Win32::WindowsProgramming::TDIObjectID ID;
        uint8_t Context[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct tcp_request_set_information_ex
    {
        Windows::Win32::WindowsProgramming::TDIObjectID ID;
        uint32_t BufferSize;
        uint8_t Buffer[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct TDI_TL_IO_CONTROL_ENDPOINT
    {
        union _Anonymous_e__Union
        {
            uint32_t IoControlCode;
            uint32_t OptionName;
        };
        Windows::Win32::WindowsProgramming::TDI_TL_IO_CONTROL_TYPE Type;
        uint32_t Level;
        _Anonymous_e__Union Anonymous;
        void* InputBuffer;
        uint32_t InputBufferLength;
        void* OutputBuffer;
        uint32_t OutputBufferLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct WLDP_HOST_INFORMATION
    {
        uint32_t dwRevision;
        Windows::Win32::WindowsProgramming::WLDP_HOST_ID dwHostId;
        uint16_t* szSource;
        Windows::Win32::SystemServices::HANDLE hSource;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DEVPROP_FILTER_EXPRESSION
    {
        Windows::Win32::WindowsProgramming::DEVPROP_OPERATOR Operator;
        Windows::Win32::SystemServices::DEVPROPERTY Property;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DEV_OBJECT
    {
        Windows::Win32::WindowsProgramming::DEV_OBJECT_TYPE ObjectType;
        uint16_t* pszObjectId;
        uint32_t cPropertyCount;
        Windows::Win32::SystemServices::DEVPROPERTY* pProperties;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DEV_QUERY_RESULT_ACTION_DATA
    {
        union _DEV_QUERY_RESULT_UPDATE_PAYLOAD
        {
            Windows::Win32::WindowsProgramming::DEV_QUERY_STATE State;
            Windows::Win32::WindowsProgramming::DEV_OBJECT DeviceObject;
        };
        Windows::Win32::WindowsProgramming::DEV_QUERY_RESULT_ACTION Action;
        _DEV_QUERY_RESULT_UPDATE_PAYLOAD Data;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct DEV_QUERY_PARAMETER
    {
        Windows::Win32::SystemServices::DEVPROPKEY Key;
        uint32_t Type;
        uint32_t BufferSize;
        void* Buffer;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct HDEVQUERY__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct PF_FILTER_DESCRIPTOR
    {
        uint32_t dwFilterFlags;
        uint32_t dwRule;
        Windows::Win32::WindowsProgramming::_PfAddresType pfatType;
        uint8_t* SrcAddr;
        uint8_t* SrcMask;
        uint8_t* DstAddr;
        uint8_t* DstMask;
        uint32_t dwProtocol;
        uint32_t fLateBound;
        uint16_t wSrcPort;
        uint16_t wDstPort;
        uint16_t wSrcPortHighRange;
        uint16_t wDstPortHighRange;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct PF_FILTER_STATS
    {
        uint32_t dwNumPacketsFiltered;
        Windows::Win32::WindowsProgramming::PF_FILTER_DESCRIPTOR info;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct PF_INTERFACE_STATS
    {
        void* pvDriverContext;
        uint32_t dwFlags;
        uint32_t dwInDrops;
        uint32_t dwOutDrops;
        Windows::Win32::WindowsProgramming::_PfForwardAction eaInAction;
        Windows::Win32::WindowsProgramming::_PfForwardAction eaOutAction;
        uint32_t dwNumInFilters;
        uint32_t dwNumOutFilters;
        uint32_t dwFrag;
        uint32_t dwSpoof;
        uint32_t dwReserved1;
        uint32_t dwReserved2;
        Windows::Win32::SystemServices::LARGE_INTEGER liSYN;
        Windows::Win32::SystemServices::LARGE_INTEGER liTotalLogged;
        uint32_t dwLostLogEntries;
        Windows::Win32::WindowsProgramming::PF_FILTER_STATS FilterInfo[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct PF_LATEBIND_INFO
    {
        uint8_t* SrcAddr;
        uint8_t* DstAddr;
        uint8_t* Mask;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsProgramming
{
    struct _pfLogFrame
    {
        Windows::Win32::SystemServices::LARGE_INTEGER Timestamp;
        Windows::Win32::WindowsProgramming::_PfFrameType pfeTypeOfFrame;
        uint32_t dwTotalSizeUsed;
        uint32_t dwFilterRule;
        uint16_t wSizeOfAdditionalData;
        uint16_t wSizeOfIpHeader;
        uint32_t dwInterfaceName;
        uint32_t dwIPIndex;
        uint8_t bPacketData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PROCESS_INFORMATION
    {
        Windows::Win32::SystemServices::HANDLE hProcess;
        Windows::Win32::SystemServices::HANDLE hThread;
        uint32_t dwProcessId;
        uint32_t dwThreadId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STARTUPINFOA
    {
        uint32_t cb;
        int8_t* lpReserved;
        int8_t* lpDesktop;
        int8_t* lpTitle;
        uint32_t dwX;
        uint32_t dwY;
        uint32_t dwXSize;
        uint32_t dwYSize;
        uint32_t dwXCountChars;
        uint32_t dwYCountChars;
        uint32_t dwFillAttribute;
        uint32_t dwFlags;
        uint16_t wShowWindow;
        uint16_t cbReserved2;
        uint8_t* lpReserved2;
        Windows::Win32::SystemServices::HANDLE hStdInput;
        Windows::Win32::SystemServices::HANDLE hStdOutput;
        Windows::Win32::SystemServices::HANDLE hStdError;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STARTUPINFOW
    {
        uint32_t cb;
        uint16_t* lpReserved;
        uint16_t* lpDesktop;
        uint16_t* lpTitle;
        uint32_t dwX;
        uint32_t dwY;
        uint32_t dwXSize;
        uint32_t dwYSize;
        uint32_t dwXCountChars;
        uint32_t dwYCountChars;
        uint32_t dwFillAttribute;
        uint32_t dwFlags;
        uint16_t wShowWindow;
        uint16_t cbReserved2;
        uint8_t* lpReserved2;
        Windows::Win32::SystemServices::HANDLE hStdInput;
        Windows::Win32::SystemServices::HANDLE hStdOutput;
        Windows::Win32::SystemServices::HANDLE hStdError;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct MEMORY_PRIORITY_INFORMATION
    {
        uint32_t MemoryPriority;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct THREAD_POWER_THROTTLING_STATE
    {
        uint32_t Version;
        uint32_t ControlMask;
        uint32_t StateMask;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct APP_MEMORY_INFORMATION
    {
        uint64_t AvailableCommit;
        uint64_t PrivateCommitUsage;
        uint64_t PeakPrivateCommitUsage;
        uint64_t TotalCommitUsage;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PROCESS_MEMORY_EXHAUSTION_INFO
    {
        uint16_t Version;
        uint16_t Reserved;
        Windows::Win32::SystemServices::PROCESS_MEMORY_EXHAUSTION_TYPE Type;
        size_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PROCESS_POWER_THROTTLING_STATE
    {
        uint32_t Version;
        uint32_t ControlMask;
        uint32_t StateMask;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PROCESS_PROTECTION_LEVEL_INFORMATION
    {
        uint32_t ProtectionLevel;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PROCESS_LEAP_SECOND_INFO
    {
        uint32_t Flags;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct MEMORYSTATUSEX
    {
        uint32_t dwLength;
        uint32_t dwMemoryLoad;
        uint64_t ullTotalPhys;
        uint64_t ullAvailPhys;
        uint64_t ullTotalPageFile;
        uint64_t ullAvailPageFile;
        uint64_t ullTotalVirtual;
        uint64_t ullAvailVirtual;
        uint64_t ullAvailExtendedVirtual;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct COMMPROP
    {
        uint16_t wPacketLength;
        uint16_t wPacketVersion;
        uint32_t dwServiceMask;
        uint32_t dwReserved1;
        uint32_t dwMaxTxQueue;
        uint32_t dwMaxRxQueue;
        uint32_t dwMaxBaud;
        uint32_t dwProvSubType;
        uint32_t dwProvCapabilities;
        uint32_t dwSettableParams;
        uint32_t dwSettableBaud;
        uint16_t wSettableData;
        uint16_t wSettableStopParity;
        uint32_t dwCurrentTxQueue;
        uint32_t dwCurrentRxQueue;
        uint32_t dwProvSpec1;
        uint32_t dwProvSpec2;
        uint16_t wcProvChar[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct COMSTAT
    {
        uint32_t _bitfield;
        uint32_t cbInQue;
        uint32_t cbOutQue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct DCB
    {
        uint32_t DCBlength;
        uint32_t BaudRate;
        uint32_t _bitfield;
        uint16_t wReserved;
        uint16_t XonLim;
        uint16_t XoffLim;
        uint8_t ByteSize;
        uint8_t Parity;
        uint8_t StopBits;
        int8_t XonChar;
        int8_t XoffChar;
        int8_t ErrorChar;
        int8_t EofChar;
        int8_t EvtChar;
        uint16_t wReserved1;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct COMMTIMEOUTS
    {
        uint32_t ReadIntervalTimeout;
        uint32_t ReadTotalTimeoutMultiplier;
        uint32_t ReadTotalTimeoutConstant;
        uint32_t WriteTotalTimeoutMultiplier;
        uint32_t WriteTotalTimeoutConstant;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct COMMCONFIG
    {
        uint32_t dwSize;
        uint16_t wVersion;
        uint16_t wReserved;
        Windows::Win32::SystemServices::DCB dcb;
        uint32_t dwProviderSubType;
        uint32_t dwProviderOffset;
        uint32_t dwProviderSize;
        uint16_t wcProviderData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct MEMORYSTATUS
    {
        uint32_t dwLength;
        uint32_t dwMemoryLoad;
        size_t dwTotalPhys;
        size_t dwAvailPhys;
        size_t dwTotalPageFile;
        size_t dwAvailPageFile;
        size_t dwTotalVirtual;
        size_t dwAvailVirtual;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct UMS_SCHEDULER_STARTUP_INFO
    {
        uint32_t UmsVersion;
        void* CompletionList;
        Windows::Win32::WindowsProgramming::PUMS_SCHEDULER_ENTRY_POINT* SchedulerProc;
        void* SchedulerParam;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct UMS_SYSTEM_THREAD_INFORMATION
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t _bitfield;
            };
            _Anonymous_e__Struct Anonymous;
            uint32_t ThreadUmsFlags;
        };
        uint32_t UmsVersion;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct WIN32_STREAM_ID
    {
        uint32_t dwStreamId;
        uint32_t dwStreamAttributes;
        Windows::Win32::SystemServices::LARGE_INTEGER Size;
        uint32_t dwStreamNameSize;
        uint16_t cStreamName[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STARTUPINFOEXA
    {
        Windows::Win32::SystemServices::STARTUPINFOA StartupInfo;
        intptr_t lpAttributeList;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct STARTUPINFOEXW
    {
        Windows::Win32::SystemServices::STARTUPINFOW StartupInfo;
        intptr_t lpAttributeList;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct EVENTLOG_FULL_INFORMATION
    {
        uint32_t dwFull;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct SYSTEM_POWER_STATUS
    {
        uint8_t ACLineStatus;
        uint8_t BatteryFlag;
        uint8_t BatteryLifePercent;
        uint8_t SystemStatusFlag;
        uint32_t BatteryLifeTime;
        uint32_t BatteryFullLifeTime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PEB_LDR_DATA
    {
        uint8_t Reserved1[8];
        void* Reserved2[3];
        Windows::Win32::Kernel::LIST_ENTRY InMemoryOrderModuleList;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct RTL_USER_PROCESS_PARAMETERS
    {
        uint8_t Reserved1[16];
        void* Reserved2[10];
        Windows::Win32::Security::UNICODE_STRING ImagePathName;
        Windows::Win32::Security::UNICODE_STRING CommandLine;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemServices
{
    struct PEB
    {
        uint8_t Reserved1[2];
        uint8_t BeingDebugged;
        uint8_t Reserved2[1];
        void* Reserved3[2];
        Windows::Win32::SystemServices::PEB_LDR_DATA* Ldr;
        Windows::Win32::SystemServices::RTL_USER_PROCESS_PARAMETERS* ProcessParameters;
        void* Reserved4[3];
        void* AtlThunkSListPtr;
        void* Reserved5;
        uint32_t Reserved6;
        void* Reserved7;
        uint32_t Reserved8;
        uint32_t AtlThunkSListPtr32;
        void* Reserved9[45];
        uint8_t Reserved10[96];
        Windows::Win32::WindowsProgramming::PPS_POST_PROCESS_INIT_ROUTINE* PostProcessInitRoutine;
        uint8_t Reserved11[128];
        void* Reserved12[1];
        uint32_t SessionId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct OFSTRUCT
    {
        uint8_t cBytes;
        uint8_t fFixedDisk;
        uint16_t nErrCode;
        uint16_t Reserved1;
        uint16_t Reserved2;
        int8_t szPathName[128];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct COPYFILE2_MESSAGE
    {
        union _Info_e__Union
        {
            struct _ChunkStarted_e__Struct
            {
                uint32_t dwStreamNumber;
                uint32_t dwReserved;
                Windows::Win32::SystemServices::HANDLE hSourceFile;
                Windows::Win32::SystemServices::HANDLE hDestinationFile;
                Windows::Win32::SystemServices::ULARGE_INTEGER uliChunkNumber;
                Windows::Win32::SystemServices::ULARGE_INTEGER uliChunkSize;
                Windows::Win32::SystemServices::ULARGE_INTEGER uliStreamSize;
                Windows::Win32::SystemServices::ULARGE_INTEGER uliTotalFileSize;
            };
            struct _ChunkFinished_e__Struct
            {
                uint32_t dwStreamNumber;
                uint32_t dwFlags;
                Windows::Win32::SystemServices::HANDLE hSourceFile;
                Windows::Win32::SystemServices::HANDLE hDestinationFile;
                Windows::Win32::SystemServices::ULARGE_INTEGER uliChunkNumber;
                Windows::Win32::SystemServices::ULARGE_INTEGER uliChunkSize;
                Windows::Win32::SystemServices::ULARGE_INTEGER uliStreamSize;
                Windows::Win32::SystemServices::ULARGE_INTEGER uliStreamBytesTransferred;
                Windows::Win32::SystemServices::ULARGE_INTEGER uliTotalFileSize;
                Windows::Win32::SystemServices::ULARGE_INTEGER uliTotalBytesTransferred;
            };
            struct _StreamStarted_e__Struct
            {
                uint32_t dwStreamNumber;
                uint32_t dwReserved;
                Windows::Win32::SystemServices::HANDLE hSourceFile;
                Windows::Win32::SystemServices::HANDLE hDestinationFile;
                Windows::Win32::SystemServices::ULARGE_INTEGER uliStreamSize;
                Windows::Win32::SystemServices::ULARGE_INTEGER uliTotalFileSize;
            };
            struct _StreamFinished_e__Struct
            {
                uint32_t dwStreamNumber;
                uint32_t dwReserved;
                Windows::Win32::SystemServices::HANDLE hSourceFile;
                Windows::Win32::SystemServices::HANDLE hDestinationFile;
                Windows::Win32::SystemServices::ULARGE_INTEGER uliStreamSize;
                Windows::Win32::SystemServices::ULARGE_INTEGER uliStreamBytesTransferred;
                Windows::Win32::SystemServices::ULARGE_INTEGER uliTotalFileSize;
                Windows::Win32::SystemServices::ULARGE_INTEGER uliTotalBytesTransferred;
            };
            struct _PollContinue_e__Struct
            {
                uint32_t dwReserved;
            };
            struct _Error_e__Struct
            {
                Windows::Win32::FileSystem::COPYFILE2_COPY_PHASE CopyPhase;
                uint32_t dwStreamNumber;
                int32_t hrFailure;
                uint32_t dwReserved;
                Windows::Win32::SystemServices::ULARGE_INTEGER uliChunkNumber;
                Windows::Win32::SystemServices::ULARGE_INTEGER uliStreamSize;
                Windows::Win32::SystemServices::ULARGE_INTEGER uliStreamBytesTransferred;
                Windows::Win32::SystemServices::ULARGE_INTEGER uliTotalFileSize;
                Windows::Win32::SystemServices::ULARGE_INTEGER uliTotalBytesTransferred;
            };
            _ChunkStarted_e__Struct ChunkStarted;
            _ChunkFinished_e__Struct ChunkFinished;
            _StreamStarted_e__Struct StreamStarted;
            _StreamFinished_e__Struct StreamFinished;
            _PollContinue_e__Struct PollContinue;
            _Error_e__Struct Error;
        };
        Windows::Win32::FileSystem::COPYFILE2_MESSAGE_TYPE Type;
        uint32_t dwPadding;
        _Info_e__Union Info;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct COPYFILE2_EXTENDED_PARAMETERS
    {
        uint32_t dwSize;
        uint32_t dwCopyFlags;
        int32_t* pfCancel;
        Windows::Win32::FileSystem::PCOPYFILE2_PROGRESS_ROUTINE* pProgressRoutine;
        void* pvCallbackContext;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct FILE_STANDARD_INFO
    {
        Windows::Win32::SystemServices::LARGE_INTEGER AllocationSize;
        Windows::Win32::SystemServices::LARGE_INTEGER EndOfFile;
        uint32_t NumberOfLinks;
        uint8_t DeletePending;
        uint8_t Directory;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct FILE_NAME_INFO
    {
        uint32_t FileNameLength;
        uint16_t FileName[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct FILE_RENAME_INFO
    {
        union _Anonymous_e__Union
        {
            uint8_t ReplaceIfExists;
            uint32_t Flags;
        };
        _Anonymous_e__Union Anonymous;
        Windows::Win32::SystemServices::HANDLE RootDirectory;
        uint32_t FileNameLength;
        uint16_t FileName[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct FILE_ALLOCATION_INFO
    {
        Windows::Win32::SystemServices::LARGE_INTEGER AllocationSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct FILE_END_OF_FILE_INFO
    {
        Windows::Win32::SystemServices::LARGE_INTEGER EndOfFile;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct FILE_STREAM_INFO
    {
        uint32_t NextEntryOffset;
        uint32_t StreamNameLength;
        Windows::Win32::SystemServices::LARGE_INTEGER StreamSize;
        Windows::Win32::SystemServices::LARGE_INTEGER StreamAllocationSize;
        uint16_t StreamName[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct FILE_COMPRESSION_INFO
    {
        Windows::Win32::SystemServices::LARGE_INTEGER CompressedFileSize;
        uint16_t CompressionFormat;
        uint8_t CompressionUnitShift;
        uint8_t ChunkShift;
        uint8_t ClusterShift;
        uint8_t Reserved[3];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct FILE_ATTRIBUTE_TAG_INFO
    {
        uint32_t FileAttributes;
        uint32_t ReparseTag;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct FILE_DISPOSITION_INFO
    {
        uint8_t DeleteFileA;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct FILE_ID_BOTH_DIR_INFO
    {
        uint32_t NextEntryOffset;
        uint32_t FileIndex;
        Windows::Win32::SystemServices::LARGE_INTEGER CreationTime;
        Windows::Win32::SystemServices::LARGE_INTEGER LastAccessTime;
        Windows::Win32::SystemServices::LARGE_INTEGER LastWriteTime;
        Windows::Win32::SystemServices::LARGE_INTEGER ChangeTime;
        Windows::Win32::SystemServices::LARGE_INTEGER EndOfFile;
        Windows::Win32::SystemServices::LARGE_INTEGER AllocationSize;
        uint32_t FileAttributes;
        uint32_t FileNameLength;
        uint32_t EaSize;
        int8_t ShortNameLength;
        uint16_t ShortName[12];
        Windows::Win32::SystemServices::LARGE_INTEGER FileId;
        uint16_t FileName[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct FILE_FULL_DIR_INFO
    {
        uint32_t NextEntryOffset;
        uint32_t FileIndex;
        Windows::Win32::SystemServices::LARGE_INTEGER CreationTime;
        Windows::Win32::SystemServices::LARGE_INTEGER LastAccessTime;
        Windows::Win32::SystemServices::LARGE_INTEGER LastWriteTime;
        Windows::Win32::SystemServices::LARGE_INTEGER ChangeTime;
        Windows::Win32::SystemServices::LARGE_INTEGER EndOfFile;
        Windows::Win32::SystemServices::LARGE_INTEGER AllocationSize;
        uint32_t FileAttributes;
        uint32_t FileNameLength;
        uint32_t EaSize;
        uint16_t FileName[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct FILE_IO_PRIORITY_HINT_INFO
    {
        Windows::Win32::FileSystem::PRIORITY_HINT PriorityHint;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct FILE_ALIGNMENT_INFO
    {
        uint32_t AlignmentRequirement;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct FILE_STORAGE_INFO
    {
        uint32_t LogicalBytesPerSector;
        uint32_t PhysicalBytesPerSectorForAtomicity;
        uint32_t PhysicalBytesPerSectorForPerformance;
        uint32_t FileSystemEffectivePhysicalBytesPerSectorForAtomicity;
        uint32_t Flags;
        uint32_t ByteOffsetForSectorAlignment;
        uint32_t ByteOffsetForPartitionAlignment;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct FILE_ID_INFO
    {
        uint64_t VolumeSerialNumber;
        Windows::Win32::FileSystem::FILE_ID_128 FileId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct FILE_ID_EXTD_DIR_INFO
    {
        uint32_t NextEntryOffset;
        uint32_t FileIndex;
        Windows::Win32::SystemServices::LARGE_INTEGER CreationTime;
        Windows::Win32::SystemServices::LARGE_INTEGER LastAccessTime;
        Windows::Win32::SystemServices::LARGE_INTEGER LastWriteTime;
        Windows::Win32::SystemServices::LARGE_INTEGER ChangeTime;
        Windows::Win32::SystemServices::LARGE_INTEGER EndOfFile;
        Windows::Win32::SystemServices::LARGE_INTEGER AllocationSize;
        uint32_t FileAttributes;
        uint32_t FileNameLength;
        uint32_t EaSize;
        uint32_t ReparsePointTag;
        Windows::Win32::FileSystem::FILE_ID_128 FileId;
        uint16_t FileName[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct FILE_REMOTE_PROTOCOL_INFO
    {
        struct _GenericReserved_e__Struct
        {
            uint32_t Reserved[8];
        };
        union _ProtocolSpecific_e__Union
        {
            struct _Smb2_e__Struct
            {
                struct _Server_e__Struct
                {
                    uint32_t Capabilities;
                };
                struct _Share_e__Struct
                {
                    uint32_t Capabilities;
                    uint32_t CachingFlags;
                };
                _Server_e__Struct Server;
                _Share_e__Struct Share;
            };
            _Smb2_e__Struct Smb2;
            uint32_t Reserved[16];
        };
        uint16_t StructureVersion;
        uint16_t StructureSize;
        uint32_t Protocol;
        uint16_t ProtocolMajorVersion;
        uint16_t ProtocolMinorVersion;
        uint16_t ProtocolRevision;
        uint16_t Reserved;
        uint32_t Flags;
        _GenericReserved_e__Struct GenericReserved;
        _ProtocolSpecific_e__Union ProtocolSpecific;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::FileSystem
{
    struct FILE_ID_DESCRIPTOR
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::SystemServices::LARGE_INTEGER FileId;
            ::win32::guid ObjectId;
            Windows::Win32::FileSystem::FILE_ID_128 ExtendedFileId;
        };
        uint32_t dwSize;
        Windows::Win32::FileSystem::FILE_ID_TYPE Type;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OperationRecorder
{
    struct OPERATION_START_PARAMETERS
    {
        uint32_t Version;
        uint32_t OperationId;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::OperationRecorder
{
    struct OPERATION_END_PARAMETERS
    {
        uint32_t Version;
        uint32_t OperationId;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ApplicationInstallationAndServicing
{
    struct ACTCTXA
    {
        uint32_t cbSize;
        uint32_t dwFlags;
        int8_t* lpSource;
        uint16_t wProcessorArchitecture;
        uint16_t wLangId;
        int8_t* lpAssemblyDirectory;
        int8_t* lpResourceName;
        int8_t* lpApplicationName;
        intptr_t hModule;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ApplicationInstallationAndServicing
{
    struct ACTCTXW
    {
        uint32_t cbSize;
        uint32_t dwFlags;
        uint16_t* lpSource;
        uint16_t wProcessorArchitecture;
        uint16_t wLangId;
        uint16_t* lpAssemblyDirectory;
        uint16_t* lpResourceName;
        uint16_t* lpApplicationName;
        intptr_t hModule;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ApplicationInstallationAndServicing
{
    struct ACTCTX_SECTION_KEYED_DATA
    {
        uint32_t cbSize;
        uint32_t ulDataFormatVersion;
        void* lpData;
        uint32_t ulLength;
        void* lpSectionGlobalData;
        uint32_t ulSectionGlobalDataLength;
        void* lpSectionBase;
        uint32_t ulSectionTotalLength;
        Windows::Win32::SystemServices::HANDLE hActCtx;
        uint32_t ulAssemblyRosterIndex;
        uint32_t ulFlags;
        Windows::Win32::WindowsProgramming::ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA AssemblyMetadata;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DDKERNELCAPS
    {
        uint32_t dwSize;
        uint32_t dwCaps;
        uint32_t dwIRQCaps;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct VMEMHEAP
    {
        uint32_t dwFlags;
        uint32_t stride;
        void* freeList;
        void* allocList;
        uint32_t dwTotalSize;
        size_t fpGARTLin;
        size_t fpGARTDev;
        uint32_t dwCommitedSize;
        uint32_t dwCoalesceCount;
        Windows::Win32::DisplayDevices::HEAPALIGNMENT Alignment;
        Windows::Win32::DirectDraw::DDSCAPSEX ddsCapsEx;
        Windows::Win32::DirectDraw::DDSCAPSEX ddsCapsExAlt;
        Windows::Win32::SystemServices::LARGE_INTEGER liPhysAGPBase;
        Windows::Win32::SystemServices::HANDLE hdevAGP;
        void* pvPhysRsrv;
        uint8_t* pAgpCommitMask;
        uint32_t dwAgpCommitMaskSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DDHAL_WAITFORVERTICALBLANKDATA
    {
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_GBL* lpDD;
        uint32_t dwFlags;
        uint32_t bIsInVB;
        size_t hEvent;
        int32_t ddRVal;
        Windows::Win32::WindowsProgramming::LPDDHAL_WAITFORVERTICALBLANK* WaitForVerticalBlank;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DisplayDevices
{
    struct DDHAL_DESTROYDDLOCALDATA
    {
        uint32_t dwFlags;
        Windows::Win32::WindowsProgramming::DDRAWI_DIRECTDRAW_LCL* pDDLcl;
        int32_t ddRVal;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct AAAccountingData
    {
        Windows::Win32::Automation::BSTR userName;
        Windows::Win32::Automation::BSTR clientName;
        Windows::Win32::RemoteDesktopServices::AAAuthSchemes authType;
        Windows::Win32::Automation::BSTR resourceName;
        int32_t portNumber;
        Windows::Win32::Automation::BSTR protocolName;
        int32_t numberOfBytesReceived;
        int32_t numberOfBytesTransfered;
        Windows::Win32::Automation::BSTR reasonForDisconnect;
        ::win32::guid mainSessionId;
        int32_t subSessionId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct WTS_SERVER_INFOW
    {
        uint16_t* pServerName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct WTS_SERVER_INFOA
    {
        int8_t* pServerName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct WTS_SESSION_INFOW
    {
        uint32_t SessionId;
        uint16_t* pWinStationName;
        Windows::Win32::RemoteDesktopServices::WTS_CONNECTSTATE_CLASS State;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct WTS_SESSION_INFOA
    {
        uint32_t SessionId;
        int8_t* pWinStationName;
        Windows::Win32::RemoteDesktopServices::WTS_CONNECTSTATE_CLASS State;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct WTS_SESSION_INFO_1W
    {
        uint32_t ExecEnvId;
        Windows::Win32::RemoteDesktopServices::WTS_CONNECTSTATE_CLASS State;
        uint32_t SessionId;
        uint16_t* pSessionName;
        uint16_t* pHostName;
        uint16_t* pUserName;
        uint16_t* pDomainName;
        uint16_t* pFarmName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct WTS_SESSION_INFO_1A
    {
        uint32_t ExecEnvId;
        Windows::Win32::RemoteDesktopServices::WTS_CONNECTSTATE_CLASS State;
        uint32_t SessionId;
        int8_t* pSessionName;
        int8_t* pHostName;
        int8_t* pUserName;
        int8_t* pDomainName;
        int8_t* pFarmName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct WTS_PROCESS_INFOW
    {
        uint32_t SessionId;
        uint32_t ProcessId;
        uint16_t* pProcessName;
        void* pUserSid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct WTS_PROCESS_INFOA
    {
        uint32_t SessionId;
        uint32_t ProcessId;
        int8_t* pProcessName;
        void* pUserSid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct WTSCONFIGINFOW
    {
        uint32_t version;
        uint32_t fConnectClientDrivesAtLogon;
        uint32_t fConnectPrinterAtLogon;
        uint32_t fDisablePrinterRedirection;
        uint32_t fDisableDefaultMainClientPrinter;
        uint32_t ShadowSettings;
        uint16_t LogonUserName[21];
        uint16_t LogonDomain[18];
        uint16_t WorkDirectory[261];
        uint16_t InitialProgram[261];
        uint16_t ApplicationName[261];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct WTSCONFIGINFOA
    {
        uint32_t version;
        uint32_t fConnectClientDrivesAtLogon;
        uint32_t fConnectPrinterAtLogon;
        uint32_t fDisablePrinterRedirection;
        uint32_t fDisableDefaultMainClientPrinter;
        uint32_t ShadowSettings;
        int8_t LogonUserName[21];
        int8_t LogonDomain[18];
        int8_t WorkDirectory[261];
        int8_t InitialProgram[261];
        int8_t ApplicationName[261];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct WTSINFOW
    {
        Windows::Win32::RemoteDesktopServices::WTS_CONNECTSTATE_CLASS State;
        uint32_t SessionId;
        uint32_t IncomingBytes;
        uint32_t OutgoingBytes;
        uint32_t IncomingFrames;
        uint32_t OutgoingFrames;
        uint32_t IncomingCompressedBytes;
        uint32_t OutgoingCompressedBytes;
        uint16_t WinStationName[32];
        uint16_t Domain[17];
        uint16_t UserName[21];
        Windows::Win32::SystemServices::LARGE_INTEGER ConnectTime;
        Windows::Win32::SystemServices::LARGE_INTEGER DisconnectTime;
        Windows::Win32::SystemServices::LARGE_INTEGER LastInputTime;
        Windows::Win32::SystemServices::LARGE_INTEGER LogonTime;
        Windows::Win32::SystemServices::LARGE_INTEGER CurrentTime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct WTSINFOA
    {
        Windows::Win32::RemoteDesktopServices::WTS_CONNECTSTATE_CLASS State;
        uint32_t SessionId;
        uint32_t IncomingBytes;
        uint32_t OutgoingBytes;
        uint32_t IncomingFrames;
        uint32_t OutgoingFrames;
        uint32_t IncomingCompressedBytes;
        uint32_t OutgoingCompressedBy;
        int8_t WinStationName[32];
        int8_t Domain[17];
        int8_t UserName[21];
        Windows::Win32::SystemServices::LARGE_INTEGER ConnectTime;
        Windows::Win32::SystemServices::LARGE_INTEGER DisconnectTime;
        Windows::Win32::SystemServices::LARGE_INTEGER LastInputTime;
        Windows::Win32::SystemServices::LARGE_INTEGER LogonTime;
        Windows::Win32::SystemServices::LARGE_INTEGER CurrentTime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct WTSINFOEX_LEVEL1_W
    {
        uint32_t SessionId;
        Windows::Win32::RemoteDesktopServices::WTS_CONNECTSTATE_CLASS SessionState;
        int32_t SessionFlags;
        uint16_t WinStationName[33];
        uint16_t UserName[21];
        uint16_t DomainName[18];
        Windows::Win32::SystemServices::LARGE_INTEGER LogonTime;
        Windows::Win32::SystemServices::LARGE_INTEGER ConnectTime;
        Windows::Win32::SystemServices::LARGE_INTEGER DisconnectTime;
        Windows::Win32::SystemServices::LARGE_INTEGER LastInputTime;
        Windows::Win32::SystemServices::LARGE_INTEGER CurrentTime;
        uint32_t IncomingBytes;
        uint32_t OutgoingBytes;
        uint32_t IncomingFrames;
        uint32_t OutgoingFrames;
        uint32_t IncomingCompressedBytes;
        uint32_t OutgoingCompressedBytes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct WTSINFOEX_LEVEL1_A
    {
        uint32_t SessionId;
        Windows::Win32::RemoteDesktopServices::WTS_CONNECTSTATE_CLASS SessionState;
        int32_t SessionFlags;
        int8_t WinStationName[33];
        int8_t UserName[21];
        int8_t DomainName[18];
        Windows::Win32::SystemServices::LARGE_INTEGER LogonTime;
        Windows::Win32::SystemServices::LARGE_INTEGER ConnectTime;
        Windows::Win32::SystemServices::LARGE_INTEGER DisconnectTime;
        Windows::Win32::SystemServices::LARGE_INTEGER LastInputTime;
        Windows::Win32::SystemServices::LARGE_INTEGER CurrentTime;
        uint32_t IncomingBytes;
        uint32_t OutgoingBytes;
        uint32_t IncomingFrames;
        uint32_t OutgoingFrames;
        uint32_t IncomingCompressedBytes;
        uint32_t OutgoingCompressedBytes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    union WTSINFOEX_LEVEL_W
    {
        Windows::Win32::RemoteDesktopServices::WTSINFOEX_LEVEL1_W WTSInfoExLevel1;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    union WTSINFOEX_LEVEL_A
    {
        Windows::Win32::RemoteDesktopServices::WTSINFOEX_LEVEL1_A WTSInfoExLevel1;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct WTSINFOEXW
    {
        uint32_t Level;
        Windows::Win32::RemoteDesktopServices::WTSINFOEX_LEVEL_W Data;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct WTSINFOEXA
    {
        uint32_t Level;
        Windows::Win32::RemoteDesktopServices::WTSINFOEX_LEVEL_A Data;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct WTSCLIENTW
    {
        uint16_t ClientName[21];
        uint16_t Domain[18];
        uint16_t UserName[21];
        uint16_t WorkDirectory[261];
        uint16_t InitialProgram[261];
        uint8_t EncryptionLevel;
        uint32_t ClientAddressFamily;
        uint16_t ClientAddress[31];
        uint16_t HRes;
        uint16_t VRes;
        uint16_t ColorDepth;
        uint16_t ClientDirectory[261];
        uint32_t ClientBuildNumber;
        uint32_t ClientHardwareId;
        uint16_t ClientProductId;
        uint16_t OutBufCountHost;
        uint16_t OutBufCountClient;
        uint16_t OutBufLength;
        uint16_t DeviceId[261];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct WTSCLIENTA
    {
        int8_t ClientName[21];
        int8_t Domain[18];
        int8_t UserName[21];
        int8_t WorkDirectory[261];
        int8_t InitialProgram[261];
        uint8_t EncryptionLevel;
        uint32_t ClientAddressFamily;
        uint16_t ClientAddress[31];
        uint16_t HRes;
        uint16_t VRes;
        uint16_t ColorDepth;
        int8_t ClientDirectory[261];
        uint32_t ClientBuildNumber;
        uint32_t ClientHardwareId;
        uint16_t ClientProductId;
        uint16_t OutBufCountHost;
        uint16_t OutBufCountClient;
        uint16_t OutBufLength;
        int8_t DeviceId[261];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct _WTS_PRODUCT_INFOA
    {
        int8_t CompanyName[256];
        int8_t ProductID[4];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct _WTS_PRODUCT_INFOW
    {
        uint16_t CompanyName[256];
        uint16_t ProductID[4];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct WTS_VALIDATION_INFORMATIONA
    {
        Windows::Win32::RemoteDesktopServices::_WTS_PRODUCT_INFOA ProductInfo;
        uint8_t License[16384];
        uint32_t LicenseLength;
        uint8_t HardwareID[20];
        uint32_t HardwareIDLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct WTS_VALIDATION_INFORMATIONW
    {
        Windows::Win32::RemoteDesktopServices::_WTS_PRODUCT_INFOW ProductInfo;
        uint8_t License[16384];
        uint32_t LicenseLength;
        uint8_t HardwareID[20];
        uint32_t HardwareIDLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct WTS_CLIENT_ADDRESS
    {
        uint32_t AddressFamily;
        uint8_t Address[20];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct WTS_CLIENT_DISPLAY
    {
        uint32_t HorizontalResolution;
        uint32_t VerticalResolution;
        uint32_t ColorDepth;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct WTSUSERCONFIGA
    {
        uint32_t Source;
        uint32_t InheritInitialProgram;
        uint32_t AllowLogonTerminalServer;
        uint32_t TimeoutSettingsConnections;
        uint32_t TimeoutSettingsDisconnections;
        uint32_t TimeoutSettingsIdle;
        uint32_t DeviceClientDrives;
        uint32_t DeviceClientPrinters;
        uint32_t ClientDefaultPrinter;
        uint32_t BrokenTimeoutSettings;
        uint32_t ReconnectSettings;
        uint32_t ShadowingSettings;
        uint32_t TerminalServerRemoteHomeDir;
        int8_t InitialProgram[261];
        int8_t WorkDirectory[261];
        int8_t TerminalServerProfilePath[261];
        int8_t TerminalServerHomeDir[261];
        int8_t TerminalServerHomeDirDrive[4];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct WTSUSERCONFIGW
    {
        uint32_t Source;
        uint32_t InheritInitialProgram;
        uint32_t AllowLogonTerminalServer;
        uint32_t TimeoutSettingsConnections;
        uint32_t TimeoutSettingsDisconnections;
        uint32_t TimeoutSettingsIdle;
        uint32_t DeviceClientDrives;
        uint32_t DeviceClientPrinters;
        uint32_t ClientDefaultPrinter;
        uint32_t BrokenTimeoutSettings;
        uint32_t ReconnectSettings;
        uint32_t ShadowingSettings;
        uint32_t TerminalServerRemoteHomeDir;
        uint16_t InitialProgram[261];
        uint16_t WorkDirectory[261];
        uint16_t TerminalServerProfilePath[261];
        uint16_t TerminalServerHomeDir[261];
        uint16_t TerminalServerHomeDirDrive[4];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct WTS_SESSION_ADDRESS
    {
        uint32_t AddressFamily;
        uint8_t Address[20];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct WTS_PROCESS_INFO_EXW
    {
        uint32_t SessionId;
        uint32_t ProcessId;
        uint16_t* pProcessName;
        void* pUserSid;
        uint32_t NumberOfThreads;
        uint32_t HandleCount;
        uint32_t PagefileUsage;
        uint32_t PeakPagefileUsage;
        uint32_t WorkingSetSize;
        uint32_t PeakWorkingSetSize;
        Windows::Win32::SystemServices::LARGE_INTEGER UserTime;
        Windows::Win32::SystemServices::LARGE_INTEGER KernelTime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct WTS_PROCESS_INFO_EXA
    {
        uint32_t SessionId;
        uint32_t ProcessId;
        int8_t* pProcessName;
        void* pUserSid;
        uint32_t NumberOfThreads;
        uint32_t HandleCount;
        uint32_t PagefileUsage;
        uint32_t PeakPagefileUsage;
        uint32_t WorkingSetSize;
        uint32_t PeakWorkingSetSize;
        Windows::Win32::SystemServices::LARGE_INTEGER UserTime;
        Windows::Win32::SystemServices::LARGE_INTEGER KernelTime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct WTSLISTENERCONFIGW
    {
        uint32_t version;
        uint32_t fEnableListener;
        uint32_t MaxConnectionCount;
        uint32_t fPromptForPassword;
        uint32_t fInheritColorDepth;
        uint32_t ColorDepth;
        uint32_t fInheritBrokenTimeoutSettings;
        uint32_t BrokenTimeoutSettings;
        uint32_t fDisablePrinterRedirection;
        uint32_t fDisableDriveRedirection;
        uint32_t fDisableComPortRedirection;
        uint32_t fDisableLPTPortRedirection;
        uint32_t fDisableClipboardRedirection;
        uint32_t fDisableAudioRedirection;
        uint32_t fDisablePNPRedirection;
        uint32_t fDisableDefaultMainClientPrinter;
        uint32_t LanAdapter;
        uint32_t PortNumber;
        uint32_t fInheritShadowSettings;
        uint32_t ShadowSettings;
        uint32_t TimeoutSettingsConnection;
        uint32_t TimeoutSettingsDisconnection;
        uint32_t TimeoutSettingsIdle;
        uint32_t SecurityLayer;
        uint32_t MinEncryptionLevel;
        uint32_t UserAuthentication;
        uint16_t Comment[61];
        uint16_t LogonUserName[21];
        uint16_t LogonDomain[18];
        uint16_t WorkDirectory[261];
        uint16_t InitialProgram[261];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct WTSLISTENERCONFIGA
    {
        uint32_t version;
        uint32_t fEnableListener;
        uint32_t MaxConnectionCount;
        uint32_t fPromptForPassword;
        uint32_t fInheritColorDepth;
        uint32_t ColorDepth;
        uint32_t fInheritBrokenTimeoutSettings;
        uint32_t BrokenTimeoutSettings;
        uint32_t fDisablePrinterRedirection;
        uint32_t fDisableDriveRedirection;
        uint32_t fDisableComPortRedirection;
        uint32_t fDisableLPTPortRedirection;
        uint32_t fDisableClipboardRedirection;
        uint32_t fDisableAudioRedirection;
        uint32_t fDisablePNPRedirection;
        uint32_t fDisableDefaultMainClientPrinter;
        uint32_t LanAdapter;
        uint32_t PortNumber;
        uint32_t fInheritShadowSettings;
        uint32_t ShadowSettings;
        uint32_t TimeoutSettingsConnection;
        uint32_t TimeoutSettingsDisconnection;
        uint32_t TimeoutSettingsIdle;
        uint32_t SecurityLayer;
        uint32_t MinEncryptionLevel;
        uint32_t UserAuthentication;
        int8_t Comment[61];
        int8_t LogonUserName[21];
        int8_t LogonDomain[18];
        int8_t WorkDirectory[261];
        int8_t InitialProgram[261];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct WTSSBX_IP_ADDRESS
    {
        Windows::Win32::RemoteDesktopServices::WTSSBX_ADDRESS_FAMILY AddressFamily;
        uint8_t Address[16];
        uint16_t PortNumber;
        uint32_t dwScope;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct WTSSBX_MACHINE_CONNECT_INFO
    {
        uint16_t wczMachineFQDN[257];
        uint16_t wczMachineNetBiosName[17];
        uint32_t dwNumOfIPAddr;
        Windows::Win32::RemoteDesktopServices::WTSSBX_IP_ADDRESS IPaddr[12];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct WTSSBX_MACHINE_INFO
    {
        Windows::Win32::RemoteDesktopServices::WTSSBX_MACHINE_CONNECT_INFO ClientConnectInfo;
        uint16_t wczFarmName[257];
        Windows::Win32::RemoteDesktopServices::WTSSBX_IP_ADDRESS InternalIPAddress;
        uint32_t dwMaxSessionsLimit;
        uint32_t ServerWeight;
        Windows::Win32::RemoteDesktopServices::WTSSBX_MACHINE_SESSION_MODE SingleSessionMode;
        Windows::Win32::RemoteDesktopServices::WTSSBX_MACHINE_DRAIN InDrain;
        Windows::Win32::RemoteDesktopServices::WTSSBX_MACHINE_STATE MachineState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct WTSSBX_SESSION_INFO
    {
        uint16_t wszUserName[105];
        uint16_t wszDomainName[257];
        uint16_t ApplicationType[257];
        uint32_t dwSessionId;
        Windows::Win32::WindowsProgramming::FILETIME CreateTime;
        Windows::Win32::WindowsProgramming::FILETIME DisconnectTime;
        Windows::Win32::RemoteDesktopServices::WTSSBX_SESSION_STATE SessionState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct CHANNEL_DEF
    {
        int8_t name[8];
        uint32_t options;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct CHANNEL_PDU_HEADER
    {
        uint32_t length;
        uint32_t flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct CHANNEL_ENTRY_POINTS
    {
        uint32_t cbSize;
        uint32_t protocolVersion;
        Windows::Win32::RemoteDesktopServices::PVIRTUALCHANNELINIT* pVirtualChannelInit;
        Windows::Win32::RemoteDesktopServices::PVIRTUALCHANNELOPEN* pVirtualChannelOpen;
        Windows::Win32::RemoteDesktopServices::PVIRTUALCHANNELCLOSE* pVirtualChannelClose;
        Windows::Win32::RemoteDesktopServices::PVIRTUALCHANNELWRITE* pVirtualChannelWrite;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct CLIENT_DISPLAY
    {
        uint32_t HorizontalResolution;
        uint32_t VerticalResolution;
        uint32_t ColorDepth;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct TSSD_ConnectionPoint
    {
        uint8_t ServerAddressB[16];
        Windows::Win32::RemoteDesktopServices::TSSD_AddrV46Type AddressType;
        uint16_t PortNumber;
        uint32_t AddressScope;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct VM_NOTIFY_ENTRY
    {
        uint16_t VmName[128];
        uint16_t VmHost[128];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct VM_PATCH_INFO
    {
        uint32_t dwNumEntries;
        uint16_t** pVmNames;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct VM_NOTIFY_INFO
    {
        uint32_t dwNumEntries;
        Windows::Win32::RemoteDesktopServices::VM_NOTIFY_ENTRY** ppVmEntries;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct pluginResource
    {
        uint16_t alias[256];
        uint16_t name[256];
        uint16_t* resourceFileContents;
        uint16_t fileExtension[256];
        uint16_t resourcePluginType[256];
        uint8_t isDiscoverable;
        int32_t resourceType;
        uint32_t pceIconSize;
        uint8_t* iconContents;
        uint32_t pcePluginBlobSize;
        uint8_t* blobContents;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct pluginResource2FileAssociation
    {
        uint16_t extName[256];
        uint8_t primaryHandler;
        uint32_t pceIconSize;
        uint8_t* iconContents;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct pluginResource2
    {
        Windows::Win32::RemoteDesktopServices::pluginResource resourceV1;
        uint32_t pceFileAssocListSize;
        Windows::Win32::RemoteDesktopServices::pluginResource2FileAssociation* fileAssocList;
        uint16_t* securityDescriptor;
        uint32_t pceFolderListSize;
        uint16_t** folderList;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct BITMAP_RENDERER_STATISTICS
    {
        uint32_t dwFramesDelivered;
        uint32_t dwFramesDropped;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct RFX_GFX_RECT
    {
        int32_t left;
        int32_t top;
        int32_t right;
        int32_t bottom;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct RFX_GFX_MSG_HEADER
    {
        uint16_t uMSGType;
        uint16_t cbSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct RFX_GFX_MONITOR_INFO
    {
        int32_t left;
        int32_t top;
        int32_t right;
        int32_t bottom;
        uint32_t physicalWidth;
        uint32_t physicalHeight;
        uint32_t orientation;
        Windows::Win32::SystemServices::BOOL primary;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct RFX_GFX_MSG_CLIENT_DESKTOP_INFO_REQUEST
    {
        Windows::Win32::RemoteDesktopServices::RFX_GFX_MSG_HEADER channelHdr;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct RFX_GFX_MSG_CLIENT_DESKTOP_INFO_RESPONSE
    {
        Windows::Win32::RemoteDesktopServices::RFX_GFX_MSG_HEADER channelHdr;
        uint32_t reserved;
        uint32_t monitorCount;
        Windows::Win32::RemoteDesktopServices::RFX_GFX_MONITOR_INFO MonitorData[16];
        uint16_t clientUniqueId[32];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct RFX_GFX_MSG_DESKTOP_CONFIG_CHANGE_NOTIFY
    {
        Windows::Win32::RemoteDesktopServices::RFX_GFX_MSG_HEADER channelHdr;
        uint32_t ulWidth;
        uint32_t ulHeight;
        uint32_t ulBpp;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct RFX_GFX_MSG_DESKTOP_CONFIG_CHANGE_CONFIRM
    {
        Windows::Win32::RemoteDesktopServices::RFX_GFX_MSG_HEADER channelHdr;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct RFX_GFX_MSG_DESKTOP_INPUT_RESET
    {
        Windows::Win32::RemoteDesktopServices::RFX_GFX_MSG_HEADER channelHdr;
        uint32_t ulWidth;
        uint32_t ulHeight;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct RFX_GFX_MSG_DISCONNECT_NOTIFY
    {
        Windows::Win32::RemoteDesktopServices::RFX_GFX_MSG_HEADER channelHdr;
        uint32_t DisconnectReason;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct RFX_GFX_MSG_DESKTOP_RESEND_REQUEST
    {
        Windows::Win32::RemoteDesktopServices::RFX_GFX_MSG_HEADER channelHdr;
        Windows::Win32::RemoteDesktopServices::RFX_GFX_RECT RedrawRect;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct RFX_GFX_MSG_RDP_DATA
    {
        Windows::Win32::RemoteDesktopServices::RFX_GFX_MSG_HEADER channelHdr;
        uint8_t rdpData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct WTS_SOCKADDR
    {
        union _u_e__Union
        {
            struct _ipv4_e__Struct
            {
                uint16_t sin_port;
                uint32_t in_addr;
                uint8_t sin_zero[8];
            };
            struct _ipv6_e__Struct
            {
                uint16_t sin6_port;
                uint32_t sin6_flowinfo;
                uint16_t sin6_addr[8];
                uint32_t sin6_scope_id;
            };
            _ipv4_e__Struct ipv4;
            _ipv6_e__Struct ipv6;
        };
        uint16_t sin_family;
        _u_e__Union u;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct WTS_SMALL_RECT
    {
        int16_t Left;
        int16_t Top;
        int16_t Right;
        int16_t Bottom;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct WTS_SERVICE_STATE
    {
        Windows::Win32::RemoteDesktopServices::WTS_RCM_SERVICE_STATE RcmServiceState;
        Windows::Win32::RemoteDesktopServices::WTS_RCM_DRAIN_STATE RcmDrainState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct WTS_SESSION_ID
    {
        ::win32::guid SessionUniqueGuid;
        uint32_t SessionId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct WTS_USER_CREDENTIAL
    {
        uint16_t UserName[256];
        uint16_t Password[256];
        uint16_t Domain[256];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct WTS_SYSTEMTIME
    {
        uint16_t wYear;
        uint16_t wMonth;
        uint16_t wDayOfWeek;
        uint16_t wDay;
        uint16_t wHour;
        uint16_t wMinute;
        uint16_t wSecond;
        uint16_t wMilliseconds;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct WTS_TIME_ZONE_INFORMATION
    {
        int32_t Bias;
        uint16_t StandardName[32];
        Windows::Win32::RemoteDesktopServices::WTS_SYSTEMTIME StandardDate;
        int32_t StandardBias;
        uint16_t DaylightName[32];
        Windows::Win32::RemoteDesktopServices::WTS_SYSTEMTIME DaylightDate;
        int32_t DaylightBias;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct WRDS_DYNAMIC_TIME_ZONE_INFORMATION
    {
        int32_t Bias;
        uint16_t StandardName[32];
        Windows::Win32::RemoteDesktopServices::WTS_SYSTEMTIME StandardDate;
        int32_t StandardBias;
        uint16_t DaylightName[32];
        Windows::Win32::RemoteDesktopServices::WTS_SYSTEMTIME DaylightDate;
        int32_t DaylightBias;
        uint16_t TimeZoneKeyName[128];
        uint16_t DynamicDaylightTimeDisabled;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct WTS_CLIENT_DATA
    {
        uint8_t fDisableCtrlAltDel;
        uint8_t fDoubleClickDetect;
        uint8_t fEnableWindowsKey;
        uint8_t fHideTitleBar;
        Windows::Win32::SystemServices::BOOL fInheritAutoLogon;
        uint8_t fPromptForPassword;
        uint8_t fUsingSavedCreds;
        uint16_t Domain[256];
        uint16_t UserName[256];
        uint16_t Password[256];
        uint8_t fPasswordIsScPin;
        Windows::Win32::SystemServices::BOOL fInheritInitialProgram;
        uint16_t WorkDirectory[257];
        uint16_t InitialProgram[257];
        uint8_t fMaximizeShell;
        uint8_t EncryptionLevel;
        uint32_t PerformanceFlags;
        uint16_t ProtocolName[9];
        uint16_t ProtocolType;
        Windows::Win32::SystemServices::BOOL fInheritColorDepth;
        uint16_t HRes;
        uint16_t VRes;
        uint16_t ColorDepth;
        uint16_t DisplayDriverName[9];
        uint16_t DisplayDeviceName[20];
        uint8_t fMouse;
        uint32_t KeyboardLayout;
        uint32_t KeyboardType;
        uint32_t KeyboardSubType;
        uint32_t KeyboardFunctionKey;
        uint16_t imeFileName[33];
        uint32_t ActiveInputLocale;
        uint8_t fNoAudioPlayback;
        uint8_t fRemoteConsoleAudio;
        uint16_t AudioDriverName[9];
        Windows::Win32::RemoteDesktopServices::WTS_TIME_ZONE_INFORMATION ClientTimeZone;
        uint16_t ClientName[21];
        uint32_t SerialNumber;
        uint32_t ClientAddressFamily;
        uint16_t ClientAddress[31];
        Windows::Win32::RemoteDesktopServices::WTS_SOCKADDR ClientSockAddress;
        uint16_t ClientDirectory[257];
        uint32_t ClientBuildNumber;
        uint16_t ClientProductId;
        uint16_t OutBufCountHost;
        uint16_t OutBufCountClient;
        uint16_t OutBufLength;
        uint32_t ClientSessionId;
        uint16_t ClientDigProductId[33];
        uint8_t fDisableCpm;
        uint8_t fDisableCdm;
        uint8_t fDisableCcm;
        uint8_t fDisableLPT;
        uint8_t fDisableClip;
        uint8_t fDisablePNP;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct WTS_USER_DATA
    {
        uint16_t WorkDirectory[257];
        uint16_t InitialProgram[257];
        Windows::Win32::RemoteDesktopServices::WTS_TIME_ZONE_INFORMATION UserTimeZone;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct WTS_POLICY_DATA
    {
        uint8_t fDisableEncryption;
        uint8_t fDisableAutoReconnect;
        uint32_t ColorDepth;
        uint8_t MinEncryptionLevel;
        uint8_t fDisableCpm;
        uint8_t fDisableCdm;
        uint8_t fDisableCcm;
        uint8_t fDisableLPT;
        uint8_t fDisableClip;
        uint8_t fDisablePNPRedir;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct WTS_PROTOCOL_CACHE
    {
        uint32_t CacheReads;
        uint32_t CacheHits;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    union WTS_CACHE_STATS_UN
    {
        Windows::Win32::RemoteDesktopServices::WTS_PROTOCOL_CACHE ProtocolCache[4];
        uint32_t TShareCacheStats;
        uint32_t Reserved[20];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct WTS_CACHE_STATS
    {
        uint32_t Specific;
        Windows::Win32::RemoteDesktopServices::WTS_CACHE_STATS_UN Data;
        uint16_t ProtocolType;
        uint16_t Length;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct WTS_PROTOCOL_COUNTERS
    {
        uint32_t WdBytes;
        uint32_t WdFrames;
        uint32_t WaitForOutBuf;
        uint32_t Frames;
        uint32_t Bytes;
        uint32_t CompressedBytes;
        uint32_t CompressFlushes;
        uint32_t Errors;
        uint32_t Timeouts;
        uint32_t AsyncFramingError;
        uint32_t AsyncOverrunError;
        uint32_t AsyncOverflowError;
        uint32_t AsyncParityError;
        uint32_t TdErrors;
        uint16_t ProtocolType;
        uint16_t Length;
        uint16_t Specific;
        uint32_t Reserved[100];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct WTS_PROTOCOL_STATUS
    {
        Windows::Win32::RemoteDesktopServices::WTS_PROTOCOL_COUNTERS Output;
        Windows::Win32::RemoteDesktopServices::WTS_PROTOCOL_COUNTERS Input;
        Windows::Win32::RemoteDesktopServices::WTS_CACHE_STATS Cache;
        uint32_t AsyncSignal;
        uint32_t AsyncSignalMask;
        Windows::Win32::SystemServices::LARGE_INTEGER Counters[100];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct WTS_DISPLAY_IOCTL
    {
        uint8_t pDisplayIOCtlData[256];
        uint32_t cbDisplayIOCtlData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct WTS_PROPERTY_VALUE
    {
        union _u_e__Union
        {
            struct _strVal_e__Struct
            {
                uint32_t size;
                uint16_t* pstrVal;
            };
            struct _bVal_e__Struct
            {
                uint32_t size;
                int8_t* pbVal;
            };
            uint32_t ulVal;
            _strVal_e__Struct strVal;
            _bVal_e__Struct bVal;
            ::win32::guid guidVal;
        };
        uint16_t Type;
        _u_e__Union u;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct WTS_LICENSE_CAPABILITIES
    {
        uint32_t KeyExchangeAlg;
        uint32_t ProtocolVer;
        Windows::Win32::SystemServices::BOOL fAuthenticateServer;
        Windows::Win32::RemoteDesktopServices::WTS_CERT_TYPE CertType;
        uint32_t cbClientName;
        uint8_t rgbClientName[42];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct WRDS_LISTENER_SETTINGS_1
    {
        uint32_t MaxProtocolListenerConnectionCount;
        uint32_t SecurityDescriptorSize;
        uint8_t* pSecurityDescriptor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    union WRDS_LISTENER_SETTING
    {
        Windows::Win32::RemoteDesktopServices::WRDS_LISTENER_SETTINGS_1 WRdsListenerSettings1;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct WRDS_LISTENER_SETTINGS
    {
        Windows::Win32::RemoteDesktopServices::WRDS_LISTENER_SETTING_LEVEL WRdsListenerSettingLevel;
        Windows::Win32::RemoteDesktopServices::WRDS_LISTENER_SETTING WRdsListenerSetting;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct WRDS_CONNECTION_SETTINGS_1
    {
        uint8_t fInheritInitialProgram;
        uint8_t fInheritColorDepth;
        uint8_t fHideTitleBar;
        uint8_t fInheritAutoLogon;
        uint8_t fMaximizeShell;
        uint8_t fDisablePNP;
        uint8_t fPasswordIsScPin;
        uint8_t fPromptForPassword;
        uint8_t fDisableCpm;
        uint8_t fDisableCdm;
        uint8_t fDisableCcm;
        uint8_t fDisableLPT;
        uint8_t fDisableClip;
        uint8_t fResetBroken;
        uint8_t fDisableEncryption;
        uint8_t fDisableAutoReconnect;
        uint8_t fDisableCtrlAltDel;
        uint8_t fDoubleClickDetect;
        uint8_t fEnableWindowsKey;
        uint8_t fUsingSavedCreds;
        uint8_t fMouse;
        uint8_t fNoAudioPlayback;
        uint8_t fRemoteConsoleAudio;
        uint8_t EncryptionLevel;
        uint16_t ColorDepth;
        uint16_t ProtocolType;
        uint16_t HRes;
        uint16_t VRes;
        uint16_t ClientProductId;
        uint16_t OutBufCountHost;
        uint16_t OutBufCountClient;
        uint16_t OutBufLength;
        uint32_t KeyboardLayout;
        uint32_t MaxConnectionTime;
        uint32_t MaxDisconnectionTime;
        uint32_t MaxIdleTime;
        uint32_t PerformanceFlags;
        uint32_t KeyboardType;
        uint32_t KeyboardSubType;
        uint32_t KeyboardFunctionKey;
        uint32_t ActiveInputLocale;
        uint32_t SerialNumber;
        uint32_t ClientAddressFamily;
        uint32_t ClientBuildNumber;
        uint32_t ClientSessionId;
        uint16_t WorkDirectory[257];
        uint16_t InitialProgram[257];
        uint16_t UserName[256];
        uint16_t Domain[256];
        uint16_t Password[256];
        uint16_t ProtocolName[9];
        uint16_t DisplayDriverName[9];
        uint16_t DisplayDeviceName[20];
        uint16_t imeFileName[33];
        uint16_t AudioDriverName[9];
        uint16_t ClientName[21];
        uint16_t ClientAddress[31];
        uint16_t ClientDirectory[257];
        uint16_t ClientDigProductId[33];
        Windows::Win32::RemoteDesktopServices::WTS_SOCKADDR ClientSockAddress;
        Windows::Win32::RemoteDesktopServices::WTS_TIME_ZONE_INFORMATION ClientTimeZone;
        Windows::Win32::RemoteDesktopServices::WRDS_LISTENER_SETTINGS WRdsListenerSettings;
        ::win32::guid EventLogActivityId;
        uint32_t ContextSize;
        uint8_t* ContextData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct WRDS_SETTINGS_1
    {
        Windows::Win32::RemoteDesktopServices::WRDS_SETTING_STATUS WRdsDisableClipStatus;
        uint32_t WRdsDisableClipValue;
        Windows::Win32::RemoteDesktopServices::WRDS_SETTING_STATUS WRdsDisableLPTStatus;
        uint32_t WRdsDisableLPTValue;
        Windows::Win32::RemoteDesktopServices::WRDS_SETTING_STATUS WRdsDisableCcmStatus;
        uint32_t WRdsDisableCcmValue;
        Windows::Win32::RemoteDesktopServices::WRDS_SETTING_STATUS WRdsDisableCdmStatus;
        uint32_t WRdsDisableCdmValue;
        Windows::Win32::RemoteDesktopServices::WRDS_SETTING_STATUS WRdsDisableCpmStatus;
        uint32_t WRdsDisableCpmValue;
        Windows::Win32::RemoteDesktopServices::WRDS_SETTING_STATUS WRdsDisablePnpStatus;
        uint32_t WRdsDisablePnpValue;
        Windows::Win32::RemoteDesktopServices::WRDS_SETTING_STATUS WRdsEncryptionLevelStatus;
        uint32_t WRdsEncryptionValue;
        Windows::Win32::RemoteDesktopServices::WRDS_SETTING_STATUS WRdsColorDepthStatus;
        uint32_t WRdsColorDepthValue;
        Windows::Win32::RemoteDesktopServices::WRDS_SETTING_STATUS WRdsDisableAutoReconnecetStatus;
        uint32_t WRdsDisableAutoReconnecetValue;
        Windows::Win32::RemoteDesktopServices::WRDS_SETTING_STATUS WRdsDisableEncryptionStatus;
        uint32_t WRdsDisableEncryptionValue;
        Windows::Win32::RemoteDesktopServices::WRDS_SETTING_STATUS WRdsResetBrokenStatus;
        uint32_t WRdsResetBrokenValue;
        Windows::Win32::RemoteDesktopServices::WRDS_SETTING_STATUS WRdsMaxIdleTimeStatus;
        uint32_t WRdsMaxIdleTimeValue;
        Windows::Win32::RemoteDesktopServices::WRDS_SETTING_STATUS WRdsMaxDisconnectTimeStatus;
        uint32_t WRdsMaxDisconnectTimeValue;
        Windows::Win32::RemoteDesktopServices::WRDS_SETTING_STATUS WRdsMaxConnectTimeStatus;
        uint32_t WRdsMaxConnectTimeValue;
        Windows::Win32::RemoteDesktopServices::WRDS_SETTING_STATUS WRdsKeepAliveStatus;
        uint8_t WRdsKeepAliveStartValue;
        uint32_t WRdsKeepAliveIntervalValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    union WRDS_CONNECTION_SETTING
    {
        Windows::Win32::RemoteDesktopServices::WRDS_CONNECTION_SETTINGS_1 WRdsConnectionSettings1;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct WRDS_CONNECTION_SETTINGS
    {
        Windows::Win32::RemoteDesktopServices::WRDS_CONNECTION_SETTING_LEVEL WRdsConnectionSettingLevel;
        Windows::Win32::RemoteDesktopServices::WRDS_CONNECTION_SETTING WRdsConnectionSetting;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    union WRDS_SETTING
    {
        Windows::Win32::RemoteDesktopServices::WRDS_SETTINGS_1 WRdsSettings1;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::RemoteDesktopServices
{
    struct WRDS_SETTINGS
    {
        Windows::Win32::RemoteDesktopServices::WRDS_SETTING_TYPE WRdsSettingType;
        Windows::Win32::RemoteDesktopServices::WRDS_SETTING_LEVEL WRdsSettingLevel;
        Windows::Win32::RemoteDesktopServices::WRDS_SETTING WRdsSetting;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ToolHelp
{
    struct HEAPLIST32
    {
        size_t dwSize;
        uint32_t th32ProcessID;
        size_t th32HeapID;
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ToolHelp
{
    struct HEAPENTRY32
    {
        size_t dwSize;
        Windows::Win32::SystemServices::HANDLE hHandle;
        size_t dwAddress;
        size_t dwBlockSize;
        uint32_t dwFlags;
        uint32_t dwLockCount;
        uint32_t dwResvd;
        uint32_t th32ProcessID;
        size_t th32HeapID;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ToolHelp
{
    struct PROCESSENTRY32W
    {
        uint32_t dwSize;
        uint32_t cntUsage;
        uint32_t th32ProcessID;
        size_t th32DefaultHeapID;
        uint32_t th32ModuleID;
        uint32_t cntThreads;
        uint32_t th32ParentProcessID;
        int32_t pcPriClassBase;
        uint32_t dwFlags;
        uint16_t szExeFile[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ToolHelp
{
    struct PROCESSENTRY32
    {
        uint32_t dwSize;
        uint32_t cntUsage;
        uint32_t th32ProcessID;
        size_t th32DefaultHeapID;
        uint32_t th32ModuleID;
        uint32_t cntThreads;
        uint32_t th32ParentProcessID;
        int32_t pcPriClassBase;
        uint32_t dwFlags;
        int8_t szExeFile[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ToolHelp
{
    struct THREADENTRY32
    {
        uint32_t dwSize;
        uint32_t cntUsage;
        uint32_t th32ThreadID;
        uint32_t th32OwnerProcessID;
        int32_t tpBasePri;
        int32_t tpDeltaPri;
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ToolHelp
{
    struct MODULEENTRY32W
    {
        uint32_t dwSize;
        uint32_t th32ModuleID;
        uint32_t th32ProcessID;
        uint32_t GlblcntUsage;
        uint32_t ProccntUsage;
        uint8_t* modBaseAddr;
        uint32_t modBaseSize;
        intptr_t hModule;
        uint16_t szModule[256];
        uint16_t szExePath[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ToolHelp
{
    struct MODULEENTRY32
    {
        uint32_t dwSize;
        uint32_t th32ModuleID;
        uint32_t th32ProcessID;
        uint32_t GlblcntUsage;
        uint32_t ProccntUsage;
        uint8_t* modBaseAddr;
        uint32_t modBaseSize;
        intptr_t hModule;
        int8_t szModule[256];
        int8_t szExePath[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TextServices
{
    struct TS_STATUS
    {
        uint32_t dwDynamicFlags;
        uint32_t dwStaticFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TextServices
{
    struct TS_TEXTCHANGE
    {
        int32_t acpStart;
        int32_t acpOldEnd;
        int32_t acpNewEnd;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TextServices
{
    struct TS_SELECTIONSTYLE
    {
        Windows::Win32::TextServices::TsActiveSelEnd ase;
        Windows::Win32::SystemServices::BOOL fInterimChar;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TextServices
{
    struct TS_SELECTION_ACP
    {
        int32_t acpStart;
        int32_t acpEnd;
        Windows::Win32::TextServices::TS_SELECTIONSTYLE style;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TextServices
{
    struct TS_SELECTION_ANCHOR
    {
        Windows::Win32::TextServices::IAnchor* paStart;
        Windows::Win32::TextServices::IAnchor* paEnd;
        Windows::Win32::TextServices::TS_SELECTIONSTYLE style;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TextServices
{
    struct TS_ATTRVAL
    {
        ::win32::guid idAttr;
        uint32_t dwOverlapId;
        Windows::Win32::Automation::VARIANT varValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TextServices
{
    struct TS_RUNINFO
    {
        uint32_t uCount;
        Windows::Win32::TextServices::TsRunType type;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TextServices
{
    struct TF_LANGBARITEMINFO
    {
        ::win32::guid clsidService;
        ::win32::guid guidItem;
        uint32_t dwStyle;
        uint32_t ulSort;
        uint16_t szDescription[32];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TextServices
{
    struct TF_LBBALLOONINFO
    {
        Windows::Win32::TextServices::TfLBBalloonStyle style;
        Windows::Win32::Automation::BSTR bstrText;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TextServices
{
    struct TF_PERSISTENT_PROPERTY_HEADER_ACP
    {
        ::win32::guid guidType;
        int32_t ichStart;
        int32_t cch;
        uint32_t cb;
        uint32_t dwPrivate;
        ::win32::guid clsidTIP;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TextServices
{
    struct TF_LANGUAGEPROFILE
    {
        ::win32::guid clsid;
        uint16_t langid;
        ::win32::guid catid;
        Windows::Win32::SystemServices::BOOL fActive;
        ::win32::guid guidProfile;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TextServices
{
    struct TF_SELECTIONSTYLE
    {
        Windows::Win32::TextServices::TfActiveSelEnd ase;
        Windows::Win32::SystemServices::BOOL fInterimChar;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TextServices
{
    struct TF_SELECTION
    {
        Windows::Win32::TextServices::ITfRange* range;
        Windows::Win32::TextServices::TF_SELECTIONSTYLE style;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TextServices
{
    struct TF_PROPERTYVAL
    {
        ::win32::guid guidId;
        Windows::Win32::Automation::VARIANT varValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TextServices
{
    struct TF_HALTCOND
    {
        Windows::Win32::TextServices::ITfRange* pHaltRange;
        Windows::Win32::TextServices::TfAnchor aHaltPos;
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TextServices
{
    struct TF_INPUTPROCESSORPROFILE
    {
        uint32_t dwProfileType;
        uint16_t langid;
        ::win32::guid clsid;
        ::win32::guid guidProfile;
        ::win32::guid catid;
        intptr_t hklSubstitute;
        uint32_t dwCaps;
        intptr_t hkl;
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TextServices
{
    struct TF_PRESERVEDKEY
    {
        uint32_t uVKey;
        uint32_t uModifiers;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TextServices
{
    struct TF_DA_COLOR
    {
        union _Anonymous_e__Union
        {
            int32_t nIndex;
            uint32_t cr;
        };
        Windows::Win32::TextServices::TF_DA_COLORTYPE type;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TextServices
{
    struct TF_DISPLAYATTRIBUTE
    {
        Windows::Win32::TextServices::TF_DA_COLOR crText;
        Windows::Win32::TextServices::TF_DA_COLOR crBk;
        Windows::Win32::TextServices::TF_DA_LINESTYLE lsStyle;
        Windows::Win32::SystemServices::BOOL fBoldLine;
        Windows::Win32::TextServices::TF_DA_COLOR crLine;
        Windows::Win32::TextServices::TF_DA_ATTR_INFO bAttr;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TextServices
{
    struct TF_LMLATTELEMENT
    {
        union _Anonymous_e__Union
        {
            int32_t iCost;
        };
        uint32_t dwFrameStart;
        uint32_t dwFrameLen;
        uint32_t dwFlags;
        _Anonymous_e__Union Anonymous;
        Windows::Win32::Automation::BSTR bstrText;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_COMMAND_QUEUE_DESC
    {
        Windows::Win32::Direct3D12::D3D12_COMMAND_LIST_TYPE Type;
        int32_t Priority;
        Windows::Win32::Direct3D12::D3D12_COMMAND_QUEUE_FLAGS Flags;
        uint32_t NodeMask;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_INPUT_ELEMENT_DESC
    {
        int8_t* SemanticName;
        uint32_t SemanticIndex;
        Windows::Win32::Dxgi::DXGI_FORMAT Format;
        uint32_t InputSlot;
        uint32_t AlignedByteOffset;
        Windows::Win32::Direct3D12::D3D12_INPUT_CLASSIFICATION InputSlotClass;
        uint32_t InstanceDataStepRate;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_SO_DECLARATION_ENTRY
    {
        uint32_t Stream;
        int8_t* SemanticName;
        uint32_t SemanticIndex;
        uint8_t StartComponent;
        uint8_t ComponentCount;
        uint8_t OutputSlot;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_VIEWPORT
    {
        float TopLeftX;
        float TopLeftY;
        float Width;
        float Height;
        float MinDepth;
        float MaxDepth;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_BOX
    {
        uint32_t left;
        uint32_t top;
        uint32_t front;
        uint32_t right;
        uint32_t bottom;
        uint32_t back;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_DEPTH_STENCILOP_DESC
    {
        Windows::Win32::Direct3D12::D3D12_STENCIL_OP StencilFailOp;
        Windows::Win32::Direct3D12::D3D12_STENCIL_OP StencilDepthFailOp;
        Windows::Win32::Direct3D12::D3D12_STENCIL_OP StencilPassOp;
        Windows::Win32::Direct3D12::D3D12_COMPARISON_FUNC StencilFunc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_DEPTH_STENCIL_DESC
    {
        Windows::Win32::SystemServices::BOOL DepthEnable;
        Windows::Win32::Direct3D12::D3D12_DEPTH_WRITE_MASK DepthWriteMask;
        Windows::Win32::Direct3D12::D3D12_COMPARISON_FUNC DepthFunc;
        Windows::Win32::SystemServices::BOOL StencilEnable;
        uint8_t StencilReadMask;
        uint8_t StencilWriteMask;
        Windows::Win32::Direct3D12::D3D12_DEPTH_STENCILOP_DESC FrontFace;
        Windows::Win32::Direct3D12::D3D12_DEPTH_STENCILOP_DESC BackFace;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_DEPTH_STENCIL_DESC1
    {
        Windows::Win32::SystemServices::BOOL DepthEnable;
        Windows::Win32::Direct3D12::D3D12_DEPTH_WRITE_MASK DepthWriteMask;
        Windows::Win32::Direct3D12::D3D12_COMPARISON_FUNC DepthFunc;
        Windows::Win32::SystemServices::BOOL StencilEnable;
        uint8_t StencilReadMask;
        uint8_t StencilWriteMask;
        Windows::Win32::Direct3D12::D3D12_DEPTH_STENCILOP_DESC FrontFace;
        Windows::Win32::Direct3D12::D3D12_DEPTH_STENCILOP_DESC BackFace;
        Windows::Win32::SystemServices::BOOL DepthBoundsTestEnable;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_RENDER_TARGET_BLEND_DESC
    {
        Windows::Win32::SystemServices::BOOL BlendEnable;
        Windows::Win32::SystemServices::BOOL LogicOpEnable;
        Windows::Win32::Direct3D12::D3D12_BLEND SrcBlend;
        Windows::Win32::Direct3D12::D3D12_BLEND DestBlend;
        Windows::Win32::Direct3D12::D3D12_BLEND_OP BlendOp;
        Windows::Win32::Direct3D12::D3D12_BLEND SrcBlendAlpha;
        Windows::Win32::Direct3D12::D3D12_BLEND DestBlendAlpha;
        Windows::Win32::Direct3D12::D3D12_BLEND_OP BlendOpAlpha;
        Windows::Win32::Direct3D12::D3D12_LOGIC_OP LogicOp;
        uint8_t RenderTargetWriteMask;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_BLEND_DESC
    {
        Windows::Win32::SystemServices::BOOL AlphaToCoverageEnable;
        Windows::Win32::SystemServices::BOOL IndependentBlendEnable;
        Windows::Win32::Direct3D12::D3D12_RENDER_TARGET_BLEND_DESC RenderTarget[8];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_RASTERIZER_DESC
    {
        Windows::Win32::Direct3D12::D3D12_FILL_MODE FillMode;
        Windows::Win32::Direct3D12::D3D12_CULL_MODE CullMode;
        Windows::Win32::SystemServices::BOOL FrontCounterClockwise;
        int32_t DepthBias;
        float DepthBiasClamp;
        float SlopeScaledDepthBias;
        Windows::Win32::SystemServices::BOOL DepthClipEnable;
        Windows::Win32::SystemServices::BOOL MultisampleEnable;
        Windows::Win32::SystemServices::BOOL AntialiasedLineEnable;
        uint32_t ForcedSampleCount;
        Windows::Win32::Direct3D12::D3D12_CONSERVATIVE_RASTERIZATION_MODE ConservativeRaster;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_SHADER_BYTECODE
    {
        void* pShaderBytecode;
        size_t BytecodeLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_STREAM_OUTPUT_DESC
    {
        Windows::Win32::Direct3D12::D3D12_SO_DECLARATION_ENTRY* pSODeclaration;
        uint32_t NumEntries;
        uint32_t* pBufferStrides;
        uint32_t NumStrides;
        uint32_t RasterizedStream;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_INPUT_LAYOUT_DESC
    {
        Windows::Win32::Direct3D12::D3D12_INPUT_ELEMENT_DESC* pInputElementDescs;
        uint32_t NumElements;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_CACHED_PIPELINE_STATE
    {
        void* pCachedBlob;
        size_t CachedBlobSizeInBytes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_GRAPHICS_PIPELINE_STATE_DESC
    {
        Windows::Win32::Direct3D12::ID3D12RootSignature* pRootSignature;
        Windows::Win32::Direct3D12::D3D12_SHADER_BYTECODE VS;
        Windows::Win32::Direct3D12::D3D12_SHADER_BYTECODE PS;
        Windows::Win32::Direct3D12::D3D12_SHADER_BYTECODE DS;
        Windows::Win32::Direct3D12::D3D12_SHADER_BYTECODE HS;
        Windows::Win32::Direct3D12::D3D12_SHADER_BYTECODE GS;
        Windows::Win32::Direct3D12::D3D12_STREAM_OUTPUT_DESC StreamOutput;
        Windows::Win32::Direct3D12::D3D12_BLEND_DESC BlendState;
        uint32_t SampleMask;
        Windows::Win32::Direct3D12::D3D12_RASTERIZER_DESC RasterizerState;
        Windows::Win32::Direct3D12::D3D12_DEPTH_STENCIL_DESC DepthStencilState;
        Windows::Win32::Direct3D12::D3D12_INPUT_LAYOUT_DESC InputLayout;
        Windows::Win32::Direct3D12::D3D12_INDEX_BUFFER_STRIP_CUT_VALUE IBStripCutValue;
        Windows::Win32::Direct3D12::D3D12_PRIMITIVE_TOPOLOGY_TYPE PrimitiveTopologyType;
        uint32_t NumRenderTargets;
        Windows::Win32::Dxgi::DXGI_FORMAT RTVFormats[8];
        Windows::Win32::Dxgi::DXGI_FORMAT DSVFormat;
        Windows::Win32::Dxgi::DXGI_SAMPLE_DESC SampleDesc;
        uint32_t NodeMask;
        Windows::Win32::Direct3D12::D3D12_CACHED_PIPELINE_STATE CachedPSO;
        Windows::Win32::Direct3D12::D3D12_PIPELINE_STATE_FLAGS Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_COMPUTE_PIPELINE_STATE_DESC
    {
        Windows::Win32::Direct3D12::ID3D12RootSignature* pRootSignature;
        Windows::Win32::Direct3D12::D3D12_SHADER_BYTECODE CS;
        uint32_t NodeMask;
        Windows::Win32::Direct3D12::D3D12_CACHED_PIPELINE_STATE CachedPSO;
        Windows::Win32::Direct3D12::D3D12_PIPELINE_STATE_FLAGS Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_RT_FORMAT_ARRAY
    {
        Windows::Win32::Dxgi::DXGI_FORMAT RTFormats[8];
        uint32_t NumRenderTargets;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_PIPELINE_STATE_STREAM_DESC
    {
        size_t SizeInBytes;
        void* pPipelineStateSubobjectStream;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_FEATURE_DATA_D3D12_OPTIONS
    {
        Windows::Win32::SystemServices::BOOL DoublePrecisionFloatShaderOps;
        Windows::Win32::SystemServices::BOOL OutputMergerLogicOp;
        Windows::Win32::Direct3D12::D3D12_SHADER_MIN_PRECISION_SUPPORT MinPrecisionSupport;
        Windows::Win32::Direct3D12::D3D12_TILED_RESOURCES_TIER TiledResourcesTier;
        Windows::Win32::Direct3D12::D3D12_RESOURCE_BINDING_TIER ResourceBindingTier;
        Windows::Win32::SystemServices::BOOL PSSpecifiedStencilRefSupported;
        Windows::Win32::SystemServices::BOOL TypedUAVLoadAdditionalFormats;
        Windows::Win32::SystemServices::BOOL ROVsSupported;
        Windows::Win32::Direct3D12::D3D12_CONSERVATIVE_RASTERIZATION_TIER ConservativeRasterizationTier;
        uint32_t MaxGPUVirtualAddressBitsPerResource;
        Windows::Win32::SystemServices::BOOL StandardSwizzle64KBSupported;
        Windows::Win32::Direct3D12::D3D12_CROSS_NODE_SHARING_TIER CrossNodeSharingTier;
        Windows::Win32::SystemServices::BOOL CrossAdapterRowMajorTextureSupported;
        Windows::Win32::SystemServices::BOOL VPAndRTArrayIndexFromAnyShaderFeedingRasterizerSupportedWithoutGSEmulation;
        Windows::Win32::Direct3D12::D3D12_RESOURCE_HEAP_TIER ResourceHeapTier;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_FEATURE_DATA_D3D12_OPTIONS1
    {
        Windows::Win32::SystemServices::BOOL WaveOps;
        uint32_t WaveLaneCountMin;
        uint32_t WaveLaneCountMax;
        uint32_t TotalLaneCount;
        Windows::Win32::SystemServices::BOOL ExpandedComputeResourceStates;
        Windows::Win32::SystemServices::BOOL Int64ShaderOps;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_FEATURE_DATA_D3D12_OPTIONS2
    {
        Windows::Win32::SystemServices::BOOL DepthBoundsTestSupported;
        Windows::Win32::Direct3D12::D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER ProgrammableSamplePositionsTier;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_FEATURE_DATA_ROOT_SIGNATURE
    {
        Windows::Win32::Direct3D12::D3D_ROOT_SIGNATURE_VERSION HighestVersion;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_FEATURE_DATA_ARCHITECTURE
    {
        uint32_t NodeIndex;
        Windows::Win32::SystemServices::BOOL TileBasedRenderer;
        Windows::Win32::SystemServices::BOOL UMA;
        Windows::Win32::SystemServices::BOOL CacheCoherentUMA;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_FEATURE_DATA_ARCHITECTURE1
    {
        uint32_t NodeIndex;
        Windows::Win32::SystemServices::BOOL TileBasedRenderer;
        Windows::Win32::SystemServices::BOOL UMA;
        Windows::Win32::SystemServices::BOOL CacheCoherentUMA;
        Windows::Win32::SystemServices::BOOL IsolatedMMU;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_FEATURE_DATA_FEATURE_LEVELS
    {
        uint32_t NumFeatureLevels;
        Windows::Win32::Direct3D11::D3D_FEATURE_LEVEL* pFeatureLevelsRequested;
        Windows::Win32::Direct3D11::D3D_FEATURE_LEVEL MaxSupportedFeatureLevel;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_FEATURE_DATA_SHADER_MODEL
    {
        Windows::Win32::Direct3D12::D3D_SHADER_MODEL HighestShaderModel;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_FEATURE_DATA_FORMAT_SUPPORT
    {
        Windows::Win32::Dxgi::DXGI_FORMAT Format;
        Windows::Win32::Direct3D12::D3D12_FORMAT_SUPPORT1 Support1;
        Windows::Win32::Direct3D12::D3D12_FORMAT_SUPPORT2 Support2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS
    {
        Windows::Win32::Dxgi::DXGI_FORMAT Format;
        uint32_t SampleCount;
        Windows::Win32::Direct3D12::D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS Flags;
        uint32_t NumQualityLevels;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_FEATURE_DATA_FORMAT_INFO
    {
        Windows::Win32::Dxgi::DXGI_FORMAT Format;
        uint8_t PlaneCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT
    {
        uint32_t MaxGPUVirtualAddressBitsPerResource;
        uint32_t MaxGPUVirtualAddressBitsPerProcess;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_FEATURE_DATA_SHADER_CACHE
    {
        Windows::Win32::Direct3D12::D3D12_SHADER_CACHE_SUPPORT_FLAGS SupportFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_FEATURE_DATA_COMMAND_QUEUE_PRIORITY
    {
        Windows::Win32::Direct3D12::D3D12_COMMAND_LIST_TYPE CommandListType;
        uint32_t Priority;
        Windows::Win32::SystemServices::BOOL PriorityForTypeIsSupported;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_FEATURE_DATA_D3D12_OPTIONS3
    {
        Windows::Win32::SystemServices::BOOL CopyQueueTimestampQueriesSupported;
        Windows::Win32::SystemServices::BOOL CastingFullyTypedFormatSupported;
        Windows::Win32::Direct3D12::D3D12_COMMAND_LIST_SUPPORT_FLAGS WriteBufferImmediateSupportFlags;
        Windows::Win32::Direct3D12::D3D12_VIEW_INSTANCING_TIER ViewInstancingTier;
        Windows::Win32::SystemServices::BOOL BarycentricsSupported;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_FEATURE_DATA_EXISTING_HEAPS
    {
        Windows::Win32::SystemServices::BOOL Supported;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_FEATURE_DATA_D3D12_OPTIONS4
    {
        Windows::Win32::SystemServices::BOOL MSAA64KBAlignedTextureSupported;
        Windows::Win32::Direct3D12::D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER SharedResourceCompatibilityTier;
        Windows::Win32::SystemServices::BOOL Native16BitShaderOpsSupported;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_FEATURE_DATA_SERIALIZATION
    {
        uint32_t NodeIndex;
        Windows::Win32::Direct3D12::D3D12_HEAP_SERIALIZATION_TIER HeapSerializationTier;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_FEATURE_DATA_CROSS_NODE
    {
        Windows::Win32::Direct3D12::D3D12_CROSS_NODE_SHARING_TIER SharingTier;
        Windows::Win32::SystemServices::BOOL AtomicShaderInstructions;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_FEATURE_DATA_D3D12_OPTIONS5
    {
        Windows::Win32::SystemServices::BOOL SRVOnlyTiledResourceTier3;
        Windows::Win32::Direct3D12::D3D12_RENDER_PASS_TIER RenderPassesTier;
        Windows::Win32::Direct3D12::D3D12_RAYTRACING_TIER RaytracingTier;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_FEATURE_DATA_D3D12_OPTIONS6
    {
        Windows::Win32::SystemServices::BOOL AdditionalShadingRatesSupported;
        Windows::Win32::SystemServices::BOOL PerPrimitiveShadingRateSupportedWithViewportIndexing;
        Windows::Win32::Direct3D12::D3D12_VARIABLE_SHADING_RATE_TIER VariableShadingRateTier;
        uint32_t ShadingRateImageTileSize;
        Windows::Win32::SystemServices::BOOL BackgroundProcessingSupported;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_FEATURE_DATA_D3D12_OPTIONS7
    {
        Windows::Win32::Direct3D12::D3D12_MESH_SHADER_TIER MeshShaderTier;
        Windows::Win32::Direct3D12::D3D12_SAMPLER_FEEDBACK_TIER SamplerFeedbackTier;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_FEATURE_DATA_QUERY_META_COMMAND
    {
        ::win32::guid CommandId;
        uint32_t NodeMask;
        void* pQueryInputData;
        size_t QueryInputDataSizeInBytes;
        void* pQueryOutputData;
        size_t QueryOutputDataSizeInBytes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_RESOURCE_ALLOCATION_INFO
    {
        uint64_t SizeInBytes;
        uint64_t Alignment;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_RESOURCE_ALLOCATION_INFO1
    {
        uint64_t Offset;
        uint64_t Alignment;
        uint64_t SizeInBytes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_HEAP_PROPERTIES
    {
        Windows::Win32::Direct3D12::D3D12_HEAP_TYPE Type;
        Windows::Win32::Direct3D12::D3D12_CPU_PAGE_PROPERTY CPUPageProperty;
        Windows::Win32::Direct3D12::D3D12_MEMORY_POOL MemoryPoolPreference;
        uint32_t CreationNodeMask;
        uint32_t VisibleNodeMask;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_HEAP_DESC
    {
        uint64_t SizeInBytes;
        Windows::Win32::Direct3D12::D3D12_HEAP_PROPERTIES Properties;
        uint64_t Alignment;
        Windows::Win32::Direct3D12::D3D12_HEAP_FLAGS Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_MIP_REGION
    {
        uint32_t Width;
        uint32_t Height;
        uint32_t Depth;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_RESOURCE_DESC
    {
        Windows::Win32::Direct3D12::D3D12_RESOURCE_DIMENSION Dimension;
        uint64_t Alignment;
        uint64_t Width;
        uint32_t Height;
        uint16_t DepthOrArraySize;
        uint16_t MipLevels;
        Windows::Win32::Dxgi::DXGI_FORMAT Format;
        Windows::Win32::Dxgi::DXGI_SAMPLE_DESC SampleDesc;
        Windows::Win32::Direct3D12::D3D12_TEXTURE_LAYOUT Layout;
        Windows::Win32::Direct3D12::D3D12_RESOURCE_FLAGS Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_RESOURCE_DESC1
    {
        Windows::Win32::Direct3D12::D3D12_RESOURCE_DIMENSION Dimension;
        uint64_t Alignment;
        uint64_t Width;
        uint32_t Height;
        uint16_t DepthOrArraySize;
        uint16_t MipLevels;
        Windows::Win32::Dxgi::DXGI_FORMAT Format;
        Windows::Win32::Dxgi::DXGI_SAMPLE_DESC SampleDesc;
        Windows::Win32::Direct3D12::D3D12_TEXTURE_LAYOUT Layout;
        Windows::Win32::Direct3D12::D3D12_RESOURCE_FLAGS Flags;
        Windows::Win32::Direct3D12::D3D12_MIP_REGION SamplerFeedbackMipRegion;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_DEPTH_STENCIL_VALUE
    {
        float Depth;
        uint8_t Stencil;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_CLEAR_VALUE
    {
        union _Anonymous_e__Union
        {
            float Color[4];
            Windows::Win32::Direct3D12::D3D12_DEPTH_STENCIL_VALUE DepthStencil;
        };
        Windows::Win32::Dxgi::DXGI_FORMAT Format;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_RANGE
    {
        size_t Begin;
        size_t End;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_RANGE_UINT64
    {
        uint64_t Begin;
        uint64_t End;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_SUBRESOURCE_RANGE_UINT64
    {
        uint32_t Subresource;
        Windows::Win32::Direct3D12::D3D12_RANGE_UINT64 Range;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_SUBRESOURCE_INFO
    {
        uint64_t Offset;
        uint32_t RowPitch;
        uint32_t DepthPitch;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_TILED_RESOURCE_COORDINATE
    {
        uint32_t X;
        uint32_t Y;
        uint32_t Z;
        uint32_t Subresource;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_TILE_REGION_SIZE
    {
        uint32_t NumTiles;
        Windows::Win32::SystemServices::BOOL UseBox;
        uint32_t Width;
        uint16_t Height;
        uint16_t Depth;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_SUBRESOURCE_TILING
    {
        uint32_t WidthInTiles;
        uint16_t HeightInTiles;
        uint16_t DepthInTiles;
        uint32_t StartTileIndexInOverallResource;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_TILE_SHAPE
    {
        uint32_t WidthInTexels;
        uint32_t HeightInTexels;
        uint32_t DepthInTexels;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_PACKED_MIP_INFO
    {
        uint8_t NumStandardMips;
        uint8_t NumPackedMips;
        uint32_t NumTilesForPackedMips;
        uint32_t StartTileIndexInOverallResource;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_RESOURCE_TRANSITION_BARRIER
    {
        Windows::Win32::Direct3D12::ID3D12Resource* pResource;
        uint32_t Subresource;
        Windows::Win32::Direct3D12::D3D12_RESOURCE_STATES StateBefore;
        Windows::Win32::Direct3D12::D3D12_RESOURCE_STATES StateAfter;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_RESOURCE_ALIASING_BARRIER
    {
        Windows::Win32::Direct3D12::ID3D12Resource* pResourceBefore;
        Windows::Win32::Direct3D12::ID3D12Resource* pResourceAfter;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_RESOURCE_UAV_BARRIER
    {
        Windows::Win32::Direct3D12::ID3D12Resource* pResource;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_RESOURCE_BARRIER
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::Direct3D12::D3D12_RESOURCE_TRANSITION_BARRIER Transition;
            Windows::Win32::Direct3D12::D3D12_RESOURCE_ALIASING_BARRIER Aliasing;
            Windows::Win32::Direct3D12::D3D12_RESOURCE_UAV_BARRIER UAV;
        };
        Windows::Win32::Direct3D12::D3D12_RESOURCE_BARRIER_TYPE Type;
        Windows::Win32::Direct3D12::D3D12_RESOURCE_BARRIER_FLAGS Flags;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_SUBRESOURCE_FOOTPRINT
    {
        Windows::Win32::Dxgi::DXGI_FORMAT Format;
        uint32_t Width;
        uint32_t Height;
        uint32_t Depth;
        uint32_t RowPitch;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_PLACED_SUBRESOURCE_FOOTPRINT
    {
        uint64_t Offset;
        Windows::Win32::Direct3D12::D3D12_SUBRESOURCE_FOOTPRINT Footprint;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_TEXTURE_COPY_LOCATION
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::Direct3D12::D3D12_PLACED_SUBRESOURCE_FOOTPRINT PlacedFootprint;
            uint32_t SubresourceIndex;
        };
        Windows::Win32::Direct3D12::ID3D12Resource* pResource;
        Windows::Win32::Direct3D12::D3D12_TEXTURE_COPY_TYPE Type;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_SAMPLE_POSITION
    {
        int8_t X;
        int8_t Y;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_VIEW_INSTANCE_LOCATION
    {
        uint32_t ViewportArrayIndex;
        uint32_t RenderTargetArrayIndex;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_VIEW_INSTANCING_DESC
    {
        uint32_t ViewInstanceCount;
        Windows::Win32::Direct3D12::D3D12_VIEW_INSTANCE_LOCATION* pViewInstanceLocations;
        Windows::Win32::Direct3D12::D3D12_VIEW_INSTANCING_FLAGS Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_BUFFER_SRV
    {
        uint64_t FirstElement;
        uint32_t NumElements;
        uint32_t StructureByteStride;
        Windows::Win32::Direct3D12::D3D12_BUFFER_SRV_FLAGS Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_TEX1D_SRV
    {
        uint32_t MostDetailedMip;
        uint32_t MipLevels;
        float ResourceMinLODClamp;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_TEX1D_ARRAY_SRV
    {
        uint32_t MostDetailedMip;
        uint32_t MipLevels;
        uint32_t FirstArraySlice;
        uint32_t ArraySize;
        float ResourceMinLODClamp;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_TEX2D_SRV
    {
        uint32_t MostDetailedMip;
        uint32_t MipLevels;
        uint32_t PlaneSlice;
        float ResourceMinLODClamp;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_TEX2D_ARRAY_SRV
    {
        uint32_t MostDetailedMip;
        uint32_t MipLevels;
        uint32_t FirstArraySlice;
        uint32_t ArraySize;
        uint32_t PlaneSlice;
        float ResourceMinLODClamp;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_TEX3D_SRV
    {
        uint32_t MostDetailedMip;
        uint32_t MipLevels;
        float ResourceMinLODClamp;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_TEXCUBE_SRV
    {
        uint32_t MostDetailedMip;
        uint32_t MipLevels;
        float ResourceMinLODClamp;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_TEXCUBE_ARRAY_SRV
    {
        uint32_t MostDetailedMip;
        uint32_t MipLevels;
        uint32_t First2DArrayFace;
        uint32_t NumCubes;
        float ResourceMinLODClamp;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_TEX2DMS_SRV
    {
        uint32_t UnusedField_NothingToDefine;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_TEX2DMS_ARRAY_SRV
    {
        uint32_t FirstArraySlice;
        uint32_t ArraySize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV
    {
        uint64_t Location;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_SHADER_RESOURCE_VIEW_DESC
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::Direct3D12::D3D12_BUFFER_SRV Buffer;
            Windows::Win32::Direct3D12::D3D12_TEX1D_SRV Texture1D;
            Windows::Win32::Direct3D12::D3D12_TEX1D_ARRAY_SRV Texture1DArray;
            Windows::Win32::Direct3D12::D3D12_TEX2D_SRV Texture2D;
            Windows::Win32::Direct3D12::D3D12_TEX2D_ARRAY_SRV Texture2DArray;
            Windows::Win32::Direct3D12::D3D12_TEX2DMS_SRV Texture2DMS;
            Windows::Win32::Direct3D12::D3D12_TEX2DMS_ARRAY_SRV Texture2DMSArray;
            Windows::Win32::Direct3D12::D3D12_TEX3D_SRV Texture3D;
            Windows::Win32::Direct3D12::D3D12_TEXCUBE_SRV TextureCube;
            Windows::Win32::Direct3D12::D3D12_TEXCUBE_ARRAY_SRV TextureCubeArray;
            Windows::Win32::Direct3D12::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV RaytracingAccelerationStructure;
        };
        Windows::Win32::Dxgi::DXGI_FORMAT Format;
        Windows::Win32::Direct3D12::D3D12_SRV_DIMENSION ViewDimension;
        uint32_t Shader4ComponentMapping;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_CONSTANT_BUFFER_VIEW_DESC
    {
        uint64_t BufferLocation;
        uint32_t SizeInBytes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_SAMPLER_DESC
    {
        Windows::Win32::Direct3D12::D3D12_FILTER Filter;
        Windows::Win32::Direct3D12::D3D12_TEXTURE_ADDRESS_MODE AddressU;
        Windows::Win32::Direct3D12::D3D12_TEXTURE_ADDRESS_MODE AddressV;
        Windows::Win32::Direct3D12::D3D12_TEXTURE_ADDRESS_MODE AddressW;
        float MipLODBias;
        uint32_t MaxAnisotropy;
        Windows::Win32::Direct3D12::D3D12_COMPARISON_FUNC ComparisonFunc;
        float BorderColor[4];
        float MinLOD;
        float MaxLOD;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_BUFFER_UAV
    {
        uint64_t FirstElement;
        uint32_t NumElements;
        uint32_t StructureByteStride;
        uint64_t CounterOffsetInBytes;
        Windows::Win32::Direct3D12::D3D12_BUFFER_UAV_FLAGS Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_TEX1D_UAV
    {
        uint32_t MipSlice;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_TEX1D_ARRAY_UAV
    {
        uint32_t MipSlice;
        uint32_t FirstArraySlice;
        uint32_t ArraySize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_TEX2D_UAV
    {
        uint32_t MipSlice;
        uint32_t PlaneSlice;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_TEX2D_ARRAY_UAV
    {
        uint32_t MipSlice;
        uint32_t FirstArraySlice;
        uint32_t ArraySize;
        uint32_t PlaneSlice;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_TEX3D_UAV
    {
        uint32_t MipSlice;
        uint32_t FirstWSlice;
        uint32_t WSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_UNORDERED_ACCESS_VIEW_DESC
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::Direct3D12::D3D12_BUFFER_UAV Buffer;
            Windows::Win32::Direct3D12::D3D12_TEX1D_UAV Texture1D;
            Windows::Win32::Direct3D12::D3D12_TEX1D_ARRAY_UAV Texture1DArray;
            Windows::Win32::Direct3D12::D3D12_TEX2D_UAV Texture2D;
            Windows::Win32::Direct3D12::D3D12_TEX2D_ARRAY_UAV Texture2DArray;
            Windows::Win32::Direct3D12::D3D12_TEX3D_UAV Texture3D;
        };
        Windows::Win32::Dxgi::DXGI_FORMAT Format;
        Windows::Win32::Direct3D12::D3D12_UAV_DIMENSION ViewDimension;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_BUFFER_RTV
    {
        uint64_t FirstElement;
        uint32_t NumElements;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_TEX1D_RTV
    {
        uint32_t MipSlice;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_TEX1D_ARRAY_RTV
    {
        uint32_t MipSlice;
        uint32_t FirstArraySlice;
        uint32_t ArraySize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_TEX2D_RTV
    {
        uint32_t MipSlice;
        uint32_t PlaneSlice;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_TEX2DMS_RTV
    {
        uint32_t UnusedField_NothingToDefine;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_TEX2D_ARRAY_RTV
    {
        uint32_t MipSlice;
        uint32_t FirstArraySlice;
        uint32_t ArraySize;
        uint32_t PlaneSlice;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_TEX2DMS_ARRAY_RTV
    {
        uint32_t FirstArraySlice;
        uint32_t ArraySize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_TEX3D_RTV
    {
        uint32_t MipSlice;
        uint32_t FirstWSlice;
        uint32_t WSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_RENDER_TARGET_VIEW_DESC
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::Direct3D12::D3D12_BUFFER_RTV Buffer;
            Windows::Win32::Direct3D12::D3D12_TEX1D_RTV Texture1D;
            Windows::Win32::Direct3D12::D3D12_TEX1D_ARRAY_RTV Texture1DArray;
            Windows::Win32::Direct3D12::D3D12_TEX2D_RTV Texture2D;
            Windows::Win32::Direct3D12::D3D12_TEX2D_ARRAY_RTV Texture2DArray;
            Windows::Win32::Direct3D12::D3D12_TEX2DMS_RTV Texture2DMS;
            Windows::Win32::Direct3D12::D3D12_TEX2DMS_ARRAY_RTV Texture2DMSArray;
            Windows::Win32::Direct3D12::D3D12_TEX3D_RTV Texture3D;
        };
        Windows::Win32::Dxgi::DXGI_FORMAT Format;
        Windows::Win32::Direct3D12::D3D12_RTV_DIMENSION ViewDimension;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_TEX1D_DSV
    {
        uint32_t MipSlice;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_TEX1D_ARRAY_DSV
    {
        uint32_t MipSlice;
        uint32_t FirstArraySlice;
        uint32_t ArraySize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_TEX2D_DSV
    {
        uint32_t MipSlice;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_TEX2D_ARRAY_DSV
    {
        uint32_t MipSlice;
        uint32_t FirstArraySlice;
        uint32_t ArraySize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_TEX2DMS_DSV
    {
        uint32_t UnusedField_NothingToDefine;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_TEX2DMS_ARRAY_DSV
    {
        uint32_t FirstArraySlice;
        uint32_t ArraySize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_DEPTH_STENCIL_VIEW_DESC
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::Direct3D12::D3D12_TEX1D_DSV Texture1D;
            Windows::Win32::Direct3D12::D3D12_TEX1D_ARRAY_DSV Texture1DArray;
            Windows::Win32::Direct3D12::D3D12_TEX2D_DSV Texture2D;
            Windows::Win32::Direct3D12::D3D12_TEX2D_ARRAY_DSV Texture2DArray;
            Windows::Win32::Direct3D12::D3D12_TEX2DMS_DSV Texture2DMS;
            Windows::Win32::Direct3D12::D3D12_TEX2DMS_ARRAY_DSV Texture2DMSArray;
        };
        Windows::Win32::Dxgi::DXGI_FORMAT Format;
        Windows::Win32::Direct3D12::D3D12_DSV_DIMENSION ViewDimension;
        Windows::Win32::Direct3D12::D3D12_DSV_FLAGS Flags;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_DESCRIPTOR_HEAP_DESC
    {
        Windows::Win32::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE Type;
        uint32_t NumDescriptors;
        Windows::Win32::Direct3D12::D3D12_DESCRIPTOR_HEAP_FLAGS Flags;
        uint32_t NodeMask;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_DESCRIPTOR_RANGE
    {
        Windows::Win32::Direct3D12::D3D12_DESCRIPTOR_RANGE_TYPE RangeType;
        uint32_t NumDescriptors;
        uint32_t BaseShaderRegister;
        uint32_t RegisterSpace;
        uint32_t OffsetInDescriptorsFromTableStart;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_ROOT_DESCRIPTOR_TABLE
    {
        uint32_t NumDescriptorRanges;
        Windows::Win32::Direct3D12::D3D12_DESCRIPTOR_RANGE* pDescriptorRanges;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_ROOT_CONSTANTS
    {
        uint32_t ShaderRegister;
        uint32_t RegisterSpace;
        uint32_t Num32BitValues;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_ROOT_DESCRIPTOR
    {
        uint32_t ShaderRegister;
        uint32_t RegisterSpace;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_ROOT_PARAMETER
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::Direct3D12::D3D12_ROOT_DESCRIPTOR_TABLE DescriptorTable;
            Windows::Win32::Direct3D12::D3D12_ROOT_CONSTANTS Constants;
            Windows::Win32::Direct3D12::D3D12_ROOT_DESCRIPTOR Descriptor;
        };
        Windows::Win32::Direct3D12::D3D12_ROOT_PARAMETER_TYPE ParameterType;
        _Anonymous_e__Union Anonymous;
        Windows::Win32::Direct3D12::D3D12_SHADER_VISIBILITY ShaderVisibility;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_STATIC_SAMPLER_DESC
    {
        Windows::Win32::Direct3D12::D3D12_FILTER Filter;
        Windows::Win32::Direct3D12::D3D12_TEXTURE_ADDRESS_MODE AddressU;
        Windows::Win32::Direct3D12::D3D12_TEXTURE_ADDRESS_MODE AddressV;
        Windows::Win32::Direct3D12::D3D12_TEXTURE_ADDRESS_MODE AddressW;
        float MipLODBias;
        uint32_t MaxAnisotropy;
        Windows::Win32::Direct3D12::D3D12_COMPARISON_FUNC ComparisonFunc;
        Windows::Win32::Direct3D12::D3D12_STATIC_BORDER_COLOR BorderColor;
        float MinLOD;
        float MaxLOD;
        uint32_t ShaderRegister;
        uint32_t RegisterSpace;
        Windows::Win32::Direct3D12::D3D12_SHADER_VISIBILITY ShaderVisibility;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_ROOT_SIGNATURE_DESC
    {
        uint32_t NumParameters;
        Windows::Win32::Direct3D12::D3D12_ROOT_PARAMETER* pParameters;
        uint32_t NumStaticSamplers;
        Windows::Win32::Direct3D12::D3D12_STATIC_SAMPLER_DESC* pStaticSamplers;
        Windows::Win32::Direct3D12::D3D12_ROOT_SIGNATURE_FLAGS Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_DESCRIPTOR_RANGE1
    {
        Windows::Win32::Direct3D12::D3D12_DESCRIPTOR_RANGE_TYPE RangeType;
        uint32_t NumDescriptors;
        uint32_t BaseShaderRegister;
        uint32_t RegisterSpace;
        Windows::Win32::Direct3D12::D3D12_DESCRIPTOR_RANGE_FLAGS Flags;
        uint32_t OffsetInDescriptorsFromTableStart;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_ROOT_DESCRIPTOR_TABLE1
    {
        uint32_t NumDescriptorRanges;
        Windows::Win32::Direct3D12::D3D12_DESCRIPTOR_RANGE1* pDescriptorRanges;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_ROOT_DESCRIPTOR1
    {
        uint32_t ShaderRegister;
        uint32_t RegisterSpace;
        Windows::Win32::Direct3D12::D3D12_ROOT_DESCRIPTOR_FLAGS Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_ROOT_PARAMETER1
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::Direct3D12::D3D12_ROOT_DESCRIPTOR_TABLE1 DescriptorTable;
            Windows::Win32::Direct3D12::D3D12_ROOT_CONSTANTS Constants;
            Windows::Win32::Direct3D12::D3D12_ROOT_DESCRIPTOR1 Descriptor;
        };
        Windows::Win32::Direct3D12::D3D12_ROOT_PARAMETER_TYPE ParameterType;
        _Anonymous_e__Union Anonymous;
        Windows::Win32::Direct3D12::D3D12_SHADER_VISIBILITY ShaderVisibility;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_ROOT_SIGNATURE_DESC1
    {
        uint32_t NumParameters;
        Windows::Win32::Direct3D12::D3D12_ROOT_PARAMETER1* pParameters;
        uint32_t NumStaticSamplers;
        Windows::Win32::Direct3D12::D3D12_STATIC_SAMPLER_DESC* pStaticSamplers;
        Windows::Win32::Direct3D12::D3D12_ROOT_SIGNATURE_FLAGS Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_VERSIONED_ROOT_SIGNATURE_DESC
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::Direct3D12::D3D12_ROOT_SIGNATURE_DESC Desc_1_0;
            Windows::Win32::Direct3D12::D3D12_ROOT_SIGNATURE_DESC1 Desc_1_1;
        };
        Windows::Win32::Direct3D12::D3D_ROOT_SIGNATURE_VERSION Version;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_DISCARD_REGION
    {
        uint32_t NumRects;
        Windows::Win32::DisplayDevices::RECT* pRects;
        uint32_t FirstSubresource;
        uint32_t NumSubresources;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_QUERY_HEAP_DESC
    {
        Windows::Win32::Direct3D12::D3D12_QUERY_HEAP_TYPE Type;
        uint32_t Count;
        uint32_t NodeMask;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_QUERY_DATA_PIPELINE_STATISTICS
    {
        uint64_t IAVertices;
        uint64_t IAPrimitives;
        uint64_t VSInvocations;
        uint64_t GSInvocations;
        uint64_t GSPrimitives;
        uint64_t CInvocations;
        uint64_t CPrimitives;
        uint64_t PSInvocations;
        uint64_t HSInvocations;
        uint64_t DSInvocations;
        uint64_t CSInvocations;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_QUERY_DATA_SO_STATISTICS
    {
        uint64_t NumPrimitivesWritten;
        uint64_t PrimitivesStorageNeeded;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_STREAM_OUTPUT_BUFFER_VIEW
    {
        uint64_t BufferLocation;
        uint64_t SizeInBytes;
        uint64_t BufferFilledSizeLocation;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_DRAW_ARGUMENTS
    {
        uint32_t VertexCountPerInstance;
        uint32_t InstanceCount;
        uint32_t StartVertexLocation;
        uint32_t StartInstanceLocation;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_DRAW_INDEXED_ARGUMENTS
    {
        uint32_t IndexCountPerInstance;
        uint32_t InstanceCount;
        uint32_t StartIndexLocation;
        int32_t BaseVertexLocation;
        uint32_t StartInstanceLocation;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_DISPATCH_ARGUMENTS
    {
        uint32_t ThreadGroupCountX;
        uint32_t ThreadGroupCountY;
        uint32_t ThreadGroupCountZ;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_VERTEX_BUFFER_VIEW
    {
        uint64_t BufferLocation;
        uint32_t SizeInBytes;
        uint32_t StrideInBytes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_INDEX_BUFFER_VIEW
    {
        uint64_t BufferLocation;
        uint32_t SizeInBytes;
        Windows::Win32::Dxgi::DXGI_FORMAT Format;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_INDIRECT_ARGUMENT_DESC
    {
        union _Anonymous_e__Union
        {
            struct _VertexBuffer_e__Struct
            {
                uint32_t Slot;
            };
            struct _Constant_e__Struct
            {
                uint32_t RootParameterIndex;
                uint32_t DestOffsetIn32BitValues;
                uint32_t Num32BitValuesToSet;
            };
            struct _ConstantBufferView_e__Struct
            {
                uint32_t RootParameterIndex;
            };
            struct _ShaderResourceView_e__Struct
            {
                uint32_t RootParameterIndex;
            };
            struct _UnorderedAccessView_e__Struct
            {
                uint32_t RootParameterIndex;
            };
            _VertexBuffer_e__Struct VertexBuffer;
            _Constant_e__Struct Constant;
            _ConstantBufferView_e__Struct ConstantBufferView;
            _ShaderResourceView_e__Struct ShaderResourceView;
            _UnorderedAccessView_e__Struct UnorderedAccessView;
        };
        Windows::Win32::Direct3D12::D3D12_INDIRECT_ARGUMENT_TYPE Type;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_COMMAND_SIGNATURE_DESC
    {
        uint32_t ByteStride;
        uint32_t NumArgumentDescs;
        Windows::Win32::Direct3D12::D3D12_INDIRECT_ARGUMENT_DESC* pArgumentDescs;
        uint32_t NodeMask;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_WRITEBUFFERIMMEDIATE_PARAMETER
    {
        uint64_t Dest;
        uint32_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_SUPPORT
    {
        uint32_t NodeIndex;
        Windows::Win32::Direct3D12::D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS Support;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_PROTECTED_RESOURCE_SESSION_DESC
    {
        uint32_t NodeMask;
        Windows::Win32::Direct3D12::D3D12_PROTECTED_RESOURCE_SESSION_FLAGS Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_META_COMMAND_PARAMETER_DESC
    {
        uint16_t* Name;
        Windows::Win32::Direct3D12::D3D12_META_COMMAND_PARAMETER_TYPE Type;
        Windows::Win32::Direct3D12::D3D12_META_COMMAND_PARAMETER_FLAGS Flags;
        Windows::Win32::Direct3D12::D3D12_RESOURCE_STATES RequiredResourceState;
        uint32_t StructureOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_META_COMMAND_DESC
    {
        ::win32::guid Id;
        uint16_t* Name;
        Windows::Win32::Direct3D12::D3D12_GRAPHICS_STATES InitializationDirtyState;
        Windows::Win32::Direct3D12::D3D12_GRAPHICS_STATES ExecutionDirtyState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_STATE_SUBOBJECT
    {
        Windows::Win32::Direct3D12::D3D12_STATE_SUBOBJECT_TYPE Type;
        void* pDesc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_STATE_OBJECT_CONFIG
    {
        Windows::Win32::Direct3D12::D3D12_STATE_OBJECT_FLAGS Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_GLOBAL_ROOT_SIGNATURE
    {
        Windows::Win32::Direct3D12::ID3D12RootSignature* pGlobalRootSignature;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_LOCAL_ROOT_SIGNATURE
    {
        Windows::Win32::Direct3D12::ID3D12RootSignature* pLocalRootSignature;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_NODE_MASK
    {
        uint32_t NodeMask;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_EXPORT_DESC
    {
        uint16_t* Name;
        uint16_t* ExportToRename;
        Windows::Win32::Direct3D12::D3D12_EXPORT_FLAGS Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_DXIL_LIBRARY_DESC
    {
        Windows::Win32::Direct3D12::D3D12_SHADER_BYTECODE DXILLibrary;
        uint32_t NumExports;
        Windows::Win32::Direct3D12::D3D12_EXPORT_DESC* pExports;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_EXISTING_COLLECTION_DESC
    {
        Windows::Win32::Direct3D12::ID3D12StateObject* pExistingCollection;
        uint32_t NumExports;
        Windows::Win32::Direct3D12::D3D12_EXPORT_DESC* pExports;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_SUBOBJECT_TO_EXPORTS_ASSOCIATION
    {
        Windows::Win32::Direct3D12::D3D12_STATE_SUBOBJECT* pSubobjectToAssociate;
        uint32_t NumExports;
        uint16_t** pExports;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION
    {
        uint16_t* SubobjectToAssociate;
        uint32_t NumExports;
        uint16_t** pExports;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_HIT_GROUP_DESC
    {
        uint16_t* HitGroupExport;
        Windows::Win32::Direct3D12::D3D12_HIT_GROUP_TYPE Type;
        uint16_t* AnyHitShaderImport;
        uint16_t* ClosestHitShaderImport;
        uint16_t* IntersectionShaderImport;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_RAYTRACING_SHADER_CONFIG
    {
        uint32_t MaxPayloadSizeInBytes;
        uint32_t MaxAttributeSizeInBytes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_RAYTRACING_PIPELINE_CONFIG
    {
        uint32_t MaxTraceRecursionDepth;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_RAYTRACING_PIPELINE_CONFIG1
    {
        uint32_t MaxTraceRecursionDepth;
        Windows::Win32::Direct3D12::D3D12_RAYTRACING_PIPELINE_FLAGS Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_STATE_OBJECT_DESC
    {
        Windows::Win32::Direct3D12::D3D12_STATE_OBJECT_TYPE Type;
        uint32_t NumSubobjects;
        Windows::Win32::Direct3D12::D3D12_STATE_SUBOBJECT* pSubobjects;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE
    {
        uint64_t StartAddress;
        uint64_t StrideInBytes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_GPU_VIRTUAL_ADDRESS_RANGE
    {
        uint64_t StartAddress;
        uint64_t SizeInBytes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE
    {
        uint64_t StartAddress;
        uint64_t SizeInBytes;
        uint64_t StrideInBytes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC
    {
        uint64_t Transform3x4;
        Windows::Win32::Dxgi::DXGI_FORMAT IndexFormat;
        Windows::Win32::Dxgi::DXGI_FORMAT VertexFormat;
        uint32_t IndexCount;
        uint32_t VertexCount;
        uint64_t IndexBuffer;
        Windows::Win32::Direct3D12::D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE VertexBuffer;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_RAYTRACING_AABB
    {
        float MinX;
        float MinY;
        float MinZ;
        float MaxX;
        float MaxY;
        float MaxZ;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_RAYTRACING_GEOMETRY_AABBS_DESC
    {
        uint64_t AABBCount;
        Windows::Win32::Direct3D12::D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE AABBs;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC
    {
        uint64_t DestBuffer;
        Windows::Win32::Direct3D12::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE InfoType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE_DESC
    {
        uint64_t CompactedSizeInBytes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION_DESC
    {
        uint64_t DecodedSizeInBytes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_TOOLS_VISUALIZATION_HEADER
    {
        Windows::Win32::Direct3D12::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE Type;
        uint32_t NumDescs;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION_DESC
    {
        uint64_t SerializedSizeInBytes;
        uint64_t NumBottomLevelAccelerationStructurePointers;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER
    {
        ::win32::guid DriverOpaqueGUID;
        uint8_t DriverOpaqueVersioningData[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER
    {
        Windows::Win32::Direct3D12::D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER DriverMatchingIdentifier;
        uint64_t SerializedSizeInBytesIncludingHeader;
        uint64_t DeserializedSizeInBytes;
        uint64_t NumBottomLevelAccelerationStructurePointersAfterHeader;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE_DESC
    {
        uint64_t CurrentSizeInBytes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_RAYTRACING_INSTANCE_DESC
    {
        float Transform[12];
        uint32_t _bitfield1;
        uint32_t _bitfield2;
        uint64_t AccelerationStructure;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_RAYTRACING_GEOMETRY_DESC
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::Direct3D12::D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC Triangles;
            Windows::Win32::Direct3D12::D3D12_RAYTRACING_GEOMETRY_AABBS_DESC AABBs;
        };
        Windows::Win32::Direct3D12::D3D12_RAYTRACING_GEOMETRY_TYPE Type;
        Windows::Win32::Direct3D12::D3D12_RAYTRACING_GEOMETRY_FLAGS Flags;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS
    {
        union _Anonymous_e__Union
        {
            uint64_t InstanceDescs;
            Windows::Win32::Direct3D12::D3D12_RAYTRACING_GEOMETRY_DESC* pGeometryDescs;
            Windows::Win32::Direct3D12::D3D12_RAYTRACING_GEOMETRY_DESC** ppGeometryDescs;
        };
        Windows::Win32::Direct3D12::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE Type;
        Windows::Win32::Direct3D12::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS Flags;
        uint32_t NumDescs;
        Windows::Win32::Direct3D12::D3D12_ELEMENTS_LAYOUT DescsLayout;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC
    {
        uint64_t DestAccelerationStructureData;
        Windows::Win32::Direct3D12::D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS Inputs;
        uint64_t SourceAccelerationStructureData;
        uint64_t ScratchAccelerationStructureData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO
    {
        uint64_t ResultDataMaxSizeInBytes;
        uint64_t ScratchDataSizeInBytes;
        uint64_t UpdateScratchDataSizeInBytes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_AUTO_BREADCRUMB_NODE
    {
        int8_t* pCommandListDebugNameA;
        uint16_t* pCommandListDebugNameW;
        int8_t* pCommandQueueDebugNameA;
        uint16_t* pCommandQueueDebugNameW;
        Windows::Win32::Direct3D12::ID3D12GraphicsCommandList* pCommandList;
        Windows::Win32::Direct3D12::ID3D12CommandQueue* pCommandQueue;
        uint32_t BreadcrumbCount;
        uint32_t* pLastBreadcrumbValue;
        Windows::Win32::Direct3D12::D3D12_AUTO_BREADCRUMB_OP* pCommandHistory;
        Windows::Win32::Direct3D12::D3D12_AUTO_BREADCRUMB_NODE* pNext;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_DRED_BREADCRUMB_CONTEXT
    {
        uint32_t BreadcrumbIndex;
        uint16_t* pContextString;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_AUTO_BREADCRUMB_NODE1
    {
        int8_t* pCommandListDebugNameA;
        uint16_t* pCommandListDebugNameW;
        int8_t* pCommandQueueDebugNameA;
        uint16_t* pCommandQueueDebugNameW;
        Windows::Win32::Direct3D12::ID3D12GraphicsCommandList* pCommandList;
        Windows::Win32::Direct3D12::ID3D12CommandQueue* pCommandQueue;
        uint32_t BreadcrumbCount;
        uint32_t* pLastBreadcrumbValue;
        Windows::Win32::Direct3D12::D3D12_AUTO_BREADCRUMB_OP* pCommandHistory;
        Windows::Win32::Direct3D12::D3D12_AUTO_BREADCRUMB_NODE1* pNext;
        uint32_t BreadcrumbContextsCount;
        Windows::Win32::Direct3D12::D3D12_DRED_BREADCRUMB_CONTEXT* pBreadcrumbContexts;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_DEVICE_REMOVED_EXTENDED_DATA
    {
        Windows::Win32::Direct3D12::D3D12_DRED_FLAGS Flags;
        Windows::Win32::Direct3D12::D3D12_AUTO_BREADCRUMB_NODE* pHeadAutoBreadcrumbNode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_DRED_ALLOCATION_NODE
    {
        int8_t* ObjectNameA;
        uint16_t* ObjectNameW;
        Windows::Win32::Direct3D12::D3D12_DRED_ALLOCATION_TYPE AllocationType;
        Windows::Win32::Direct3D12::D3D12_DRED_ALLOCATION_NODE* pNext;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_DRED_ALLOCATION_NODE1
    {
        int8_t* ObjectNameA;
        uint16_t* ObjectNameW;
        Windows::Win32::Direct3D12::D3D12_DRED_ALLOCATION_TYPE AllocationType;
        Windows::Win32::Direct3D12::D3D12_DRED_ALLOCATION_NODE1* pNext;
        Windows::Win32::Com::IUnknown* pObject;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT
    {
        Windows::Win32::Direct3D12::D3D12_AUTO_BREADCRUMB_NODE* pHeadAutoBreadcrumbNode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1
    {
        Windows::Win32::Direct3D12::D3D12_AUTO_BREADCRUMB_NODE1* pHeadAutoBreadcrumbNode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_DRED_PAGE_FAULT_OUTPUT
    {
        uint64_t PageFaultVA;
        Windows::Win32::Direct3D12::D3D12_DRED_ALLOCATION_NODE* pHeadExistingAllocationNode;
        Windows::Win32::Direct3D12::D3D12_DRED_ALLOCATION_NODE* pHeadRecentFreedAllocationNode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_DRED_PAGE_FAULT_OUTPUT1
    {
        uint64_t PageFaultVA;
        Windows::Win32::Direct3D12::D3D12_DRED_ALLOCATION_NODE1* pHeadExistingAllocationNode;
        Windows::Win32::Direct3D12::D3D12_DRED_ALLOCATION_NODE1* pHeadRecentFreedAllocationNode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_DEVICE_REMOVED_EXTENDED_DATA1
    {
        int32_t DeviceRemovedReason;
        Windows::Win32::Direct3D12::D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT AutoBreadcrumbsOutput;
        Windows::Win32::Direct3D12::D3D12_DRED_PAGE_FAULT_OUTPUT PageFaultOutput;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_DEVICE_REMOVED_EXTENDED_DATA2
    {
        int32_t DeviceRemovedReason;
        Windows::Win32::Direct3D12::D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1 AutoBreadcrumbsOutput;
        Windows::Win32::Direct3D12::D3D12_DRED_PAGE_FAULT_OUTPUT1 PageFaultOutput;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_VERSIONED_DEVICE_REMOVED_EXTENDED_DATA
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::Direct3D12::D3D12_DEVICE_REMOVED_EXTENDED_DATA Dred_1_0;
            Windows::Win32::Direct3D12::D3D12_DEVICE_REMOVED_EXTENDED_DATA1 Dred_1_1;
            Windows::Win32::Direct3D12::D3D12_DEVICE_REMOVED_EXTENDED_DATA2 Dred_1_2;
        };
        Windows::Win32::Direct3D12::D3D12_DRED_VERSION Version;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPE_COUNT
    {
        uint32_t NodeIndex;
        uint32_t Count;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPES
    {
        uint32_t NodeIndex;
        uint32_t Count;
        ::win32::guid* pTypes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_PROTECTED_RESOURCE_SESSION_DESC1
    {
        uint32_t NodeMask;
        Windows::Win32::Direct3D12::D3D12_PROTECTED_RESOURCE_SESSION_FLAGS Flags;
        ::win32::guid ProtectionType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS
    {
        Windows::Win32::Direct3D12::D3D12_CLEAR_VALUE ClearValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_RENDER_PASS_BEGINNING_ACCESS
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::Direct3D12::D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS Clear;
        };
        Windows::Win32::Direct3D12::D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE Type;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS
    {
        uint32_t SrcSubresource;
        uint32_t DstSubresource;
        uint32_t DstX;
        uint32_t DstY;
        Windows::Win32::DisplayDevices::RECT SrcRect;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS
    {
        Windows::Win32::Direct3D12::ID3D12Resource* pSrcResource;
        Windows::Win32::Direct3D12::ID3D12Resource* pDstResource;
        uint32_t SubresourceCount;
        Windows::Win32::Direct3D12::D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS* pSubresourceParameters;
        Windows::Win32::Dxgi::DXGI_FORMAT Format;
        Windows::Win32::Direct3D12::D3D12_RESOLVE_MODE ResolveMode;
        Windows::Win32::SystemServices::BOOL PreserveResolveSource;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_RENDER_PASS_ENDING_ACCESS
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::Direct3D12::D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS Resolve;
        };
        Windows::Win32::Direct3D12::D3D12_RENDER_PASS_ENDING_ACCESS_TYPE Type;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_RENDER_PASS_RENDER_TARGET_DESC
    {
        Windows::Win32::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE cpuDescriptor;
        Windows::Win32::Direct3D12::D3D12_RENDER_PASS_BEGINNING_ACCESS BeginningAccess;
        Windows::Win32::Direct3D12::D3D12_RENDER_PASS_ENDING_ACCESS EndingAccess;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_RENDER_PASS_DEPTH_STENCIL_DESC
    {
        Windows::Win32::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE cpuDescriptor;
        Windows::Win32::Direct3D12::D3D12_RENDER_PASS_BEGINNING_ACCESS DepthBeginningAccess;
        Windows::Win32::Direct3D12::D3D12_RENDER_PASS_BEGINNING_ACCESS StencilBeginningAccess;
        Windows::Win32::Direct3D12::D3D12_RENDER_PASS_ENDING_ACCESS DepthEndingAccess;
        Windows::Win32::Direct3D12::D3D12_RENDER_PASS_ENDING_ACCESS StencilEndingAccess;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_DISPATCH_RAYS_DESC
    {
        Windows::Win32::Direct3D12::D3D12_GPU_VIRTUAL_ADDRESS_RANGE RayGenerationShaderRecord;
        Windows::Win32::Direct3D12::D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE MissShaderTable;
        Windows::Win32::Direct3D12::D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE HitGroupTable;
        Windows::Win32::Direct3D12::D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE CallableShaderTable;
        uint32_t Width;
        uint32_t Height;
        uint32_t Depth;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_SUBRESOURCE_DATA
    {
        void* pData;
        intptr_t RowPitch;
        intptr_t SlicePitch;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_MEMCPY_DEST
    {
        void* pData;
        size_t RowPitch;
        size_t SlicePitch;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_DEBUG_DEVICE_GPU_BASED_VALIDATION_SETTINGS
    {
        uint32_t MaxMessagesPerCommandList;
        Windows::Win32::Direct3D12::D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE DefaultShaderPatchMode;
        Windows::Win32::Direct3D12::D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS PipelineStateCreateFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_DEBUG_DEVICE_GPU_SLOWDOWN_PERFORMANCE_FACTOR
    {
        float SlowdownFactor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_DEBUG_COMMAND_LIST_GPU_BASED_VALIDATION_SETTINGS
    {
        Windows::Win32::Direct3D12::D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE ShaderPatchMode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_MESSAGE
    {
        Windows::Win32::Direct3D12::D3D12_MESSAGE_CATEGORY Category;
        Windows::Win32::Direct3D12::D3D12_MESSAGE_SEVERITY Severity;
        Windows::Win32::Direct3D12::D3D12_MESSAGE_ID ID;
        int8_t* pDescription;
        size_t DescriptionByteLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_INFO_QUEUE_FILTER_DESC
    {
        uint32_t NumCategories;
        Windows::Win32::Direct3D12::D3D12_MESSAGE_CATEGORY* pCategoryList;
        uint32_t NumSeverities;
        Windows::Win32::Direct3D12::D3D12_MESSAGE_SEVERITY* pSeverityList;
        uint32_t NumIDs;
        Windows::Win32::Direct3D12::D3D12_MESSAGE_ID* pIDList;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_INFO_QUEUE_FILTER
    {
        Windows::Win32::Direct3D12::D3D12_INFO_QUEUE_FILTER_DESC AllowList;
        Windows::Win32::Direct3D12::D3D12_INFO_QUEUE_FILTER_DESC DenyList;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_DISPATCH_MESH_ARGUMENTS
    {
        uint32_t ThreadGroupCountX;
        uint32_t ThreadGroupCountY;
        uint32_t ThreadGroupCountZ;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D11_RESOURCE_FLAGS
    {
        uint32_t BindFlags;
        uint32_t MiscFlags;
        uint32_t CPUAccessFlags;
        uint32_t StructureByteStride;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_SIGNATURE_PARAMETER_DESC
    {
        int8_t* SemanticName;
        uint32_t SemanticIndex;
        uint32_t Register;
        Windows::Win32::Direct3D11::D3D_NAME SystemValueType;
        Windows::Win32::Direct3D11::D3D_REGISTER_COMPONENT_TYPE ComponentType;
        uint8_t Mask;
        uint8_t ReadWriteMask;
        uint32_t Stream;
        Windows::Win32::Direct3D11::D3D_MIN_PRECISION MinPrecision;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_SHADER_BUFFER_DESC
    {
        int8_t* Name;
        Windows::Win32::Direct3D11::D3D_CBUFFER_TYPE Type;
        uint32_t Variables;
        uint32_t Size;
        uint32_t uFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_SHADER_VARIABLE_DESC
    {
        int8_t* Name;
        uint32_t StartOffset;
        uint32_t Size;
        uint32_t uFlags;
        void* DefaultValue;
        uint32_t StartTexture;
        uint32_t TextureSize;
        uint32_t StartSampler;
        uint32_t SamplerSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_SHADER_TYPE_DESC
    {
        Windows::Win32::Direct3D11::D3D_SHADER_VARIABLE_CLASS Class;
        Windows::Win32::Direct3D11::D3D_SHADER_VARIABLE_TYPE Type;
        uint32_t Rows;
        uint32_t Columns;
        uint32_t Elements;
        uint32_t Members;
        uint32_t Offset;
        int8_t* Name;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_SHADER_DESC
    {
        uint32_t Version;
        int8_t* Creator;
        uint32_t Flags;
        uint32_t ConstantBuffers;
        uint32_t BoundResources;
        uint32_t InputParameters;
        uint32_t OutputParameters;
        uint32_t InstructionCount;
        uint32_t TempRegisterCount;
        uint32_t TempArrayCount;
        uint32_t DefCount;
        uint32_t DclCount;
        uint32_t TextureNormalInstructions;
        uint32_t TextureLoadInstructions;
        uint32_t TextureCompInstructions;
        uint32_t TextureBiasInstructions;
        uint32_t TextureGradientInstructions;
        uint32_t FloatInstructionCount;
        uint32_t IntInstructionCount;
        uint32_t UintInstructionCount;
        uint32_t StaticFlowControlCount;
        uint32_t DynamicFlowControlCount;
        uint32_t MacroInstructionCount;
        uint32_t ArrayInstructionCount;
        uint32_t CutInstructionCount;
        uint32_t EmitInstructionCount;
        Windows::Win32::Direct3D11::D3D_PRIMITIVE_TOPOLOGY GSOutputTopology;
        uint32_t GSMaxOutputVertexCount;
        Windows::Win32::Direct3D11::D3D_PRIMITIVE InputPrimitive;
        uint32_t PatchConstantParameters;
        uint32_t cGSInstanceCount;
        uint32_t cControlPoints;
        Windows::Win32::Direct3D11::D3D_TESSELLATOR_OUTPUT_PRIMITIVE HSOutputPrimitive;
        Windows::Win32::Direct3D11::D3D_TESSELLATOR_PARTITIONING HSPartitioning;
        Windows::Win32::Direct3D11::D3D_TESSELLATOR_DOMAIN TessellatorDomain;
        uint32_t cBarrierInstructions;
        uint32_t cInterlockedInstructions;
        uint32_t cTextureStoreInstructions;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_SHADER_INPUT_BIND_DESC
    {
        int8_t* Name;
        Windows::Win32::Direct3D11::D3D_SHADER_INPUT_TYPE Type;
        uint32_t BindPoint;
        uint32_t BindCount;
        uint32_t uFlags;
        Windows::Win32::Direct3D11::D3D_RESOURCE_RETURN_TYPE ReturnType;
        Windows::Win32::Direct3D11::D3D_SRV_DIMENSION Dimension;
        uint32_t NumSamples;
        uint32_t Space;
        uint32_t uID;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_LIBRARY_DESC
    {
        int8_t* Creator;
        uint32_t Flags;
        uint32_t FunctionCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_FUNCTION_DESC
    {
        uint32_t Version;
        int8_t* Creator;
        uint32_t Flags;
        uint32_t ConstantBuffers;
        uint32_t BoundResources;
        uint32_t InstructionCount;
        uint32_t TempRegisterCount;
        uint32_t TempArrayCount;
        uint32_t DefCount;
        uint32_t DclCount;
        uint32_t TextureNormalInstructions;
        uint32_t TextureLoadInstructions;
        uint32_t TextureCompInstructions;
        uint32_t TextureBiasInstructions;
        uint32_t TextureGradientInstructions;
        uint32_t FloatInstructionCount;
        uint32_t IntInstructionCount;
        uint32_t UintInstructionCount;
        uint32_t StaticFlowControlCount;
        uint32_t DynamicFlowControlCount;
        uint32_t MacroInstructionCount;
        uint32_t ArrayInstructionCount;
        uint32_t MovInstructionCount;
        uint32_t MovcInstructionCount;
        uint32_t ConversionInstructionCount;
        uint32_t BitwiseInstructionCount;
        Windows::Win32::Direct3D11::D3D_FEATURE_LEVEL MinFeatureLevel;
        uint64_t RequiredFeatureFlags;
        int8_t* Name;
        int32_t FunctionParameterCount;
        Windows::Win32::SystemServices::BOOL HasReturn;
        Windows::Win32::SystemServices::BOOL Has10Level9VertexShader;
        Windows::Win32::SystemServices::BOOL Has10Level9PixelShader;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D12
{
    struct D3D12_PARAMETER_DESC
    {
        int8_t* Name;
        int8_t* SemanticName;
        Windows::Win32::Direct3D11::D3D_SHADER_VARIABLE_TYPE Type;
        Windows::Win32::Direct3D11::D3D_SHADER_VARIABLE_CLASS Class;
        uint32_t Rows;
        uint32_t Columns;
        Windows::Win32::Direct3D11::D3D_INTERPOLATION_MODE InterpolationMode;
        Windows::Win32::Direct3D11::D3D_PARAMETER_FLAGS Flags;
        uint32_t FirstInRegister;
        uint32_t FirstInComponent;
        uint32_t FirstOutRegister;
        uint32_t FirstOutComponent;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UserAccessLogging
{
    struct UAL_DATA_BLOB
    {
        uint32_t Size;
        ::win32::guid RoleGuid;
        ::win32::guid TenantId;
        Windows::Win32::NetworkDrivers::SOCKADDR_STORAGE_LH Address;
        uint16_t UserName[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::UIAnimation
{
    struct __MIDL___MIDL_itf_UIAnimation_0000_0002_0003
    {
        int32_t _;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::VirtualStorage
{
    struct OPEN_VIRTUAL_DISK_PARAMETERS
    {
        union _Anonymous_e__Union
        {
            struct _Version1_e__Struct
            {
                uint32_t RWDepth;
            };
            struct _Version2_e__Struct
            {
                Windows::Win32::SystemServices::BOOL GetInfoOnly;
                Windows::Win32::SystemServices::BOOL ReadOnly;
                ::win32::guid ResiliencyGuid;
            };
            struct _Version3_e__Struct
            {
                Windows::Win32::SystemServices::BOOL GetInfoOnly;
                Windows::Win32::SystemServices::BOOL ReadOnly;
                ::win32::guid ResiliencyGuid;
                ::win32::guid SnapshotId;
            };
            _Version1_e__Struct Version1;
            _Version2_e__Struct Version2;
            _Version3_e__Struct Version3;
        };
        Windows::Win32::VirtualStorage::OPEN_VIRTUAL_DISK_VERSION Version;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::VirtualStorage
{
    struct CREATE_VIRTUAL_DISK_PARAMETERS
    {
        union _Anonymous_e__Union
        {
            struct _Version1_e__Struct
            {
                ::win32::guid UniqueId;
                uint64_t MaximumSize;
                uint32_t BlockSizeInBytes;
                uint32_t SectorSizeInBytes;
                uint16_t* ParentPath;
                uint16_t* SourcePath;
            };
            struct _Version2_e__Struct
            {
                ::win32::guid UniqueId;
                uint64_t MaximumSize;
                uint32_t BlockSizeInBytes;
                uint32_t SectorSizeInBytes;
                uint32_t PhysicalSectorSizeInBytes;
                uint16_t* ParentPath;
                uint16_t* SourcePath;
                Windows::Win32::VirtualStorage::OPEN_VIRTUAL_DISK_FLAG OpenFlags;
                Windows::Win32::VirtualStorage::VIRTUAL_STORAGE_TYPE ParentVirtualStorageType;
                Windows::Win32::VirtualStorage::VIRTUAL_STORAGE_TYPE SourceVirtualStorageType;
                ::win32::guid ResiliencyGuid;
            };
            struct _Version3_e__Struct
            {
                ::win32::guid UniqueId;
                uint64_t MaximumSize;
                uint32_t BlockSizeInBytes;
                uint32_t SectorSizeInBytes;
                uint32_t PhysicalSectorSizeInBytes;
                uint16_t* ParentPath;
                uint16_t* SourcePath;
                Windows::Win32::VirtualStorage::OPEN_VIRTUAL_DISK_FLAG OpenFlags;
                Windows::Win32::VirtualStorage::VIRTUAL_STORAGE_TYPE ParentVirtualStorageType;
                Windows::Win32::VirtualStorage::VIRTUAL_STORAGE_TYPE SourceVirtualStorageType;
                ::win32::guid ResiliencyGuid;
                uint16_t* SourceLimitPath;
                Windows::Win32::VirtualStorage::VIRTUAL_STORAGE_TYPE BackingStorageType;
            };
            struct _Version4_e__Struct
            {
                ::win32::guid UniqueId;
                uint64_t MaximumSize;
                uint32_t BlockSizeInBytes;
                uint32_t SectorSizeInBytes;
                uint32_t PhysicalSectorSizeInBytes;
                uint16_t* ParentPath;
                uint16_t* SourcePath;
                Windows::Win32::VirtualStorage::OPEN_VIRTUAL_DISK_FLAG OpenFlags;
                Windows::Win32::VirtualStorage::VIRTUAL_STORAGE_TYPE ParentVirtualStorageType;
                Windows::Win32::VirtualStorage::VIRTUAL_STORAGE_TYPE SourceVirtualStorageType;
                ::win32::guid ResiliencyGuid;
                uint16_t* SourceLimitPath;
                Windows::Win32::VirtualStorage::VIRTUAL_STORAGE_TYPE BackingStorageType;
                ::win32::guid PmemAddressAbstractionType;
                uint64_t DataAlignment;
            };
            _Version1_e__Struct Version1;
            _Version2_e__Struct Version2;
            _Version3_e__Struct Version3;
            _Version4_e__Struct Version4;
        };
        Windows::Win32::VirtualStorage::CREATE_VIRTUAL_DISK_VERSION Version;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::VirtualStorage
{
    struct ATTACH_VIRTUAL_DISK_PARAMETERS
    {
        union _Anonymous_e__Union
        {
            struct _Version1_e__Struct
            {
                uint32_t Reserved;
            };
            struct _Version2_e__Struct
            {
                uint64_t RestrictedOffset;
                uint64_t RestrictedLength;
            };
            _Version1_e__Struct Version1;
            _Version2_e__Struct Version2;
        };
        Windows::Win32::VirtualStorage::ATTACH_VIRTUAL_DISK_VERSION Version;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::VirtualStorage
{
    struct STORAGE_DEPENDENCY_INFO_TYPE_1
    {
        Windows::Win32::VirtualStorage::DEPENDENT_DISK_FLAG DependencyTypeFlags;
        uint32_t ProviderSpecificFlags;
        Windows::Win32::VirtualStorage::VIRTUAL_STORAGE_TYPE VirtualStorageType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::VirtualStorage
{
    struct STORAGE_DEPENDENCY_INFO_TYPE_2
    {
        Windows::Win32::VirtualStorage::DEPENDENT_DISK_FLAG DependencyTypeFlags;
        uint32_t ProviderSpecificFlags;
        Windows::Win32::VirtualStorage::VIRTUAL_STORAGE_TYPE VirtualStorageType;
        uint32_t AncestorLevel;
        uint16_t* DependencyDeviceName;
        uint16_t* HostVolumeName;
        uint16_t* DependentVolumeName;
        uint16_t* DependentVolumeRelativePath;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::VirtualStorage
{
    struct STORAGE_DEPENDENCY_INFO
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::VirtualStorage::STORAGE_DEPENDENCY_INFO_TYPE_1 Version1Entries;
            Windows::Win32::VirtualStorage::STORAGE_DEPENDENCY_INFO_TYPE_2 Version2Entries;
        };
        Windows::Win32::VirtualStorage::STORAGE_DEPENDENCY_INFO_VERSION Version;
        uint32_t NumberEntries;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::VirtualStorage
{
    struct GET_VIRTUAL_DISK_INFO
    {
        union _Anonymous_e__Union
        {
            struct _Size_e__Struct
            {
                uint64_t VirtualSize;
                uint64_t PhysicalSize;
                uint32_t BlockSize;
                uint32_t SectorSize;
            };
            struct _ParentLocation_e__Struct
            {
                Windows::Win32::SystemServices::BOOL ParentResolved;
                uint16_t ParentLocationBuffer[1];
            };
            struct _PhysicalDisk_e__Struct
            {
                uint32_t LogicalSectorSize;
                uint32_t PhysicalSectorSize;
                Windows::Win32::SystemServices::BOOL IsRemote;
            };
            struct _ChangeTrackingState_e__Struct
            {
                Windows::Win32::SystemServices::BOOL Enabled;
                Windows::Win32::SystemServices::BOOL NewerChanges;
                uint16_t MostRecentId[1];
            };
            _Size_e__Struct Size;
            ::win32::guid Identifier;
            _ParentLocation_e__Struct ParentLocation;
            ::win32::guid ParentIdentifier;
            uint32_t ParentTimestamp;
            Windows::Win32::VirtualStorage::VIRTUAL_STORAGE_TYPE VirtualStorageType;
            uint32_t ProviderSubtype;
            Windows::Win32::SystemServices::BOOL Is4kAligned;
            Windows::Win32::SystemServices::BOOL IsLoaded;
            _PhysicalDisk_e__Struct PhysicalDisk;
            uint32_t VhdPhysicalSectorSize;
            uint64_t SmallestSafeVirtualSize;
            uint32_t FragmentationPercentage;
            ::win32::guid VirtualDiskId;
            _ChangeTrackingState_e__Struct ChangeTrackingState;
        };
        Windows::Win32::VirtualStorage::GET_VIRTUAL_DISK_INFO_VERSION Version;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::VirtualStorage
{
    struct SET_VIRTUAL_DISK_INFO
    {
        union _Anonymous_e__Union
        {
            struct _ParentPathWithDepthInfo_e__Struct
            {
                uint32_t ChildDepth;
                uint16_t* ParentFilePath;
            };
            struct _ParentLocator_e__Struct
            {
                ::win32::guid LinkageId;
                uint16_t* ParentFilePath;
            };
            uint16_t* ParentFilePath;
            ::win32::guid UniqueIdentifier;
            _ParentPathWithDepthInfo_e__Struct ParentPathWithDepthInfo;
            uint32_t VhdPhysicalSectorSize;
            ::win32::guid VirtualDiskId;
            Windows::Win32::SystemServices::BOOL ChangeTrackingEnabled;
            _ParentLocator_e__Struct ParentLocator;
        };
        Windows::Win32::VirtualStorage::SET_VIRTUAL_DISK_INFO_VERSION Version;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::VirtualStorage
{
    struct VIRTUAL_DISK_PROGRESS
    {
        uint32_t OperationStatus;
        uint64_t CurrentValue;
        uint64_t CompletionValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::VirtualStorage
{
    struct COMPACT_VIRTUAL_DISK_PARAMETERS
    {
        union _Anonymous_e__Union
        {
            struct _Version1_e__Struct
            {
                uint32_t Reserved;
            };
            _Version1_e__Struct Version1;
        };
        Windows::Win32::VirtualStorage::COMPACT_VIRTUAL_DISK_VERSION Version;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::VirtualStorage
{
    struct MERGE_VIRTUAL_DISK_PARAMETERS
    {
        union _Anonymous_e__Union
        {
            struct _Version1_e__Struct
            {
                uint32_t MergeDepth;
            };
            struct _Version2_e__Struct
            {
                uint32_t MergeSourceDepth;
                uint32_t MergeTargetDepth;
            };
            _Version1_e__Struct Version1;
            _Version2_e__Struct Version2;
        };
        Windows::Win32::VirtualStorage::MERGE_VIRTUAL_DISK_VERSION Version;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::VirtualStorage
{
    struct EXPAND_VIRTUAL_DISK_PARAMETERS
    {
        union _Anonymous_e__Union
        {
            struct _Version1_e__Struct
            {
                uint64_t NewSize;
            };
            _Version1_e__Struct Version1;
        };
        Windows::Win32::VirtualStorage::EXPAND_VIRTUAL_DISK_VERSION Version;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::VirtualStorage
{
    struct RESIZE_VIRTUAL_DISK_PARAMETERS
    {
        union _Anonymous_e__Union
        {
            struct _Version1_e__Struct
            {
                uint64_t NewSize;
            };
            _Version1_e__Struct Version1;
        };
        Windows::Win32::VirtualStorage::RESIZE_VIRTUAL_DISK_VERSION Version;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::VirtualStorage
{
    struct MIRROR_VIRTUAL_DISK_PARAMETERS
    {
        union _Anonymous_e__Union
        {
            struct _Version1_e__Struct
            {
                uint16_t* MirrorVirtualDiskPath;
            };
            _Version1_e__Struct Version1;
        };
        Windows::Win32::VirtualStorage::MIRROR_VIRTUAL_DISK_VERSION Version;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::VirtualStorage
{
    struct QUERY_CHANGES_VIRTUAL_DISK_RANGE
    {
        uint64_t ByteOffset;
        uint64_t ByteLength;
        uint64_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::VirtualStorage
{
    struct TAKE_SNAPSHOT_VHDSET_PARAMETERS
    {
        union _Anonymous_e__Union
        {
            struct _Version1_e__Struct
            {
                ::win32::guid SnapshotId;
            };
            _Version1_e__Struct Version1;
        };
        Windows::Win32::VirtualStorage::TAKE_SNAPSHOT_VHDSET_VERSION Version;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::VirtualStorage
{
    struct DELETE_SNAPSHOT_VHDSET_PARAMETERS
    {
        union _Anonymous_e__Union
        {
            struct _Version1_e__Struct
            {
                ::win32::guid SnapshotId;
            };
            _Version1_e__Struct Version1;
        };
        Windows::Win32::VirtualStorage::DELETE_SNAPSHOT_VHDSET_VERSION Version;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::VirtualStorage
{
    struct MODIFY_VHDSET_PARAMETERS
    {
        union _Anonymous_e__Union
        {
            struct _SnapshotPath_e__Struct
            {
                ::win32::guid SnapshotId;
                uint16_t* SnapshotFilePath;
            };
            _SnapshotPath_e__Struct SnapshotPath;
            ::win32::guid SnapshotId;
            uint16_t* DefaultFilePath;
        };
        Windows::Win32::VirtualStorage::MODIFY_VHDSET_VERSION Version;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::VirtualStorage
{
    struct APPLY_SNAPSHOT_VHDSET_PARAMETERS
    {
        union _Anonymous_e__Union
        {
            struct _Version1_e__Struct
            {
                ::win32::guid SnapshotId;
                ::win32::guid LeafSnapshotId;
            };
            _Version1_e__Struct Version1;
        };
        Windows::Win32::VirtualStorage::APPLY_SNAPSHOT_VHDSET_VERSION Version;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::VirtualStorage
{
    struct RAW_SCSI_VIRTUAL_DISK_PARAMETERS
    {
        union _Anonymous_e__Union
        {
            struct _Version1_e__Struct
            {
                Windows::Win32::SystemServices::BOOL RSVDHandle;
                uint8_t DataIn;
                uint8_t CdbLength;
                uint8_t SenseInfoLength;
                uint32_t SrbFlags;
                uint32_t DataTransferLength;
                void* DataBuffer;
                uint8_t* SenseInfo;
                uint8_t* Cdb;
            };
            _Version1_e__Struct Version1;
        };
        Windows::Win32::VirtualStorage::RAW_SCSI_VIRTUAL_DISK_VERSION Version;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::VirtualStorage
{
    struct RAW_SCSI_VIRTUAL_DISK_RESPONSE
    {
        union _Anonymous_e__Union
        {
            struct _Version1_e__Struct
            {
                uint8_t ScsiStatus;
                uint8_t SenseInfoLength;
                uint32_t DataTransferLength;
            };
            _Version1_e__Struct Version1;
        };
        Windows::Win32::VirtualStorage::RAW_SCSI_VIRTUAL_DISK_VERSION Version;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::VirtualStorage
{
    struct FORK_VIRTUAL_DISK_PARAMETERS
    {
        union _Anonymous_e__Union
        {
            struct _Version1_e__Struct
            {
                uint16_t* ForkedVirtualDiskPath;
            };
            _Version1_e__Struct Version1;
        };
        Windows::Win32::VirtualStorage::FORK_VIRTUAL_DISK_VERSION Version;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct ENTRYID
    {
        uint8_t abFlags[4];
        uint8_t ab[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct MAPIUID
    {
        uint8_t ab[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct SPropTagArray
    {
        uint32_t cValues;
        uint32_t aulPropTag[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct SBinary
    {
        uint32_t cb;
        uint8_t* lpb;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct SShortArray
    {
        uint32_t cValues;
        int16_t* lpi;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct SGuidArray
    {
        uint32_t cValues;
        ::win32::guid* lpguid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct SRealArray
    {
        uint32_t cValues;
        float* lpflt;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct SLongArray
    {
        uint32_t cValues;
        int32_t* lpl;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct SLargeIntegerArray
    {
        uint32_t cValues;
        Windows::Win32::SystemServices::LARGE_INTEGER* lpli;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct SDateTimeArray
    {
        uint32_t cValues;
        Windows::Win32::WindowsProgramming::FILETIME* lpft;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct SAppTimeArray
    {
        uint32_t cValues;
        double* lpat;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct SCurrencyArray
    {
        uint32_t cValues;
        Windows::Win32::SystemServices::CY* lpcur;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct SBinaryArray
    {
        uint32_t cValues;
        Windows::Win32::WindowsAddressBook::SBinary* lpbin;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct SDoubleArray
    {
        uint32_t cValues;
        double* lpdbl;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct SWStringArray
    {
        uint32_t cValues;
        uint16_t** lppszW;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct SLPSTRArray
    {
        uint32_t cValues;
        int8_t** lppszA;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    union _PV
    {
        int16_t i;
        int32_t l;
        uint32_t ul;
        float flt;
        double dbl;
        uint16_t b;
        Windows::Win32::SystemServices::CY cur;
        double at;
        Windows::Win32::WindowsProgramming::FILETIME ft;
        int8_t* lpszA;
        Windows::Win32::WindowsAddressBook::SBinary bin;
        uint16_t* lpszW;
        ::win32::guid* lpguid;
        Windows::Win32::SystemServices::LARGE_INTEGER li;
        Windows::Win32::WindowsAddressBook::SShortArray MVi;
        Windows::Win32::WindowsAddressBook::SLongArray MVl;
        Windows::Win32::WindowsAddressBook::SRealArray MVflt;
        Windows::Win32::WindowsAddressBook::SDoubleArray MVdbl;
        Windows::Win32::WindowsAddressBook::SCurrencyArray MVcur;
        Windows::Win32::WindowsAddressBook::SAppTimeArray MVat;
        Windows::Win32::WindowsAddressBook::SDateTimeArray MVft;
        Windows::Win32::WindowsAddressBook::SBinaryArray MVbin;
        Windows::Win32::WindowsAddressBook::SLPSTRArray MVszA;
        Windows::Win32::WindowsAddressBook::SWStringArray MVszW;
        Windows::Win32::WindowsAddressBook::SGuidArray MVguid;
        Windows::Win32::WindowsAddressBook::SLargeIntegerArray MVli;
        int32_t err;
        int32_t x;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct SPropValue
    {
        uint32_t ulPropTag;
        uint32_t dwAlignPad;
        Windows::Win32::WindowsAddressBook::_PV Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct SPropProblem
    {
        uint32_t ulIndex;
        uint32_t ulPropTag;
        int32_t scode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct SPropProblemArray
    {
        uint32_t cProblem;
        Windows::Win32::WindowsAddressBook::SPropProblem aProblem[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct FLATENTRY
    {
        uint32_t cb;
        uint8_t abEntry[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct FLATENTRYLIST
    {
        uint32_t cEntries;
        uint32_t cbEntries;
        uint8_t abEntries[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct MTSID
    {
        uint32_t cb;
        uint8_t ab[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct FLATMTSIDLIST
    {
        uint32_t cMTSIDs;
        uint32_t cbMTSIDs;
        uint8_t abMTSIDs[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct ADRENTRY
    {
        uint32_t ulReserved1;
        uint32_t cValues;
        Windows::Win32::WindowsAddressBook::SPropValue* rgPropVals;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct ADRLIST
    {
        uint32_t cEntries;
        Windows::Win32::WindowsAddressBook::ADRENTRY aEntries[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct SRow
    {
        uint32_t ulAdrEntryPad;
        uint32_t cValues;
        Windows::Win32::WindowsAddressBook::SPropValue* lpProps;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct SRowSet
    {
        uint32_t cRows;
        Windows::Win32::WindowsAddressBook::SRow aRow[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct MAPIERROR
    {
        uint32_t ulVersion;
        int8_t* lpszError;
        int8_t* lpszComponent;
        uint32_t ulLowLevelError;
        uint32_t ulContext;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct ERROR_NOTIFICATION
    {
        uint32_t cbEntryID;
        Windows::Win32::WindowsAddressBook::ENTRYID* lpEntryID;
        int32_t scode;
        uint32_t ulFlags;
        Windows::Win32::WindowsAddressBook::MAPIERROR* lpMAPIError;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct NEWMAIL_NOTIFICATION
    {
        uint32_t cbEntryID;
        Windows::Win32::WindowsAddressBook::ENTRYID* lpEntryID;
        uint32_t cbParentID;
        Windows::Win32::WindowsAddressBook::ENTRYID* lpParentID;
        uint32_t ulFlags;
        int8_t* lpszMessageClass;
        uint32_t ulMessageFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct OBJECT_NOTIFICATION
    {
        uint32_t cbEntryID;
        Windows::Win32::WindowsAddressBook::ENTRYID* lpEntryID;
        uint32_t ulObjType;
        uint32_t cbParentID;
        Windows::Win32::WindowsAddressBook::ENTRYID* lpParentID;
        uint32_t cbOldID;
        Windows::Win32::WindowsAddressBook::ENTRYID* lpOldID;
        uint32_t cbOldParentID;
        Windows::Win32::WindowsAddressBook::ENTRYID* lpOldParentID;
        Windows::Win32::WindowsAddressBook::SPropTagArray* lpPropTagArray;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct TABLE_NOTIFICATION
    {
        uint32_t ulTableEvent;
        int32_t hResult;
        Windows::Win32::WindowsAddressBook::SPropValue propIndex;
        Windows::Win32::WindowsAddressBook::SPropValue propPrior;
        Windows::Win32::WindowsAddressBook::SRow row;
        uint32_t ulPad;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct EXTENDED_NOTIFICATION
    {
        uint32_t ulEvent;
        uint32_t cb;
        uint8_t* pbEventParameters;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct STATUS_OBJECT_NOTIFICATION
    {
        uint32_t cbEntryID;
        Windows::Win32::WindowsAddressBook::ENTRYID* lpEntryID;
        uint32_t cValues;
        Windows::Win32::WindowsAddressBook::SPropValue* lpPropVals;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct NOTIFICATION
    {
        union _info_e__Union
        {
            Windows::Win32::WindowsAddressBook::ERROR_NOTIFICATION err;
            Windows::Win32::WindowsAddressBook::NEWMAIL_NOTIFICATION newmail;
            Windows::Win32::WindowsAddressBook::OBJECT_NOTIFICATION obj;
            Windows::Win32::WindowsAddressBook::TABLE_NOTIFICATION tab;
            Windows::Win32::WindowsAddressBook::EXTENDED_NOTIFICATION ext;
            Windows::Win32::WindowsAddressBook::STATUS_OBJECT_NOTIFICATION statobj;
        };
        uint32_t ulEventType;
        uint32_t ulAlignPad;
        _info_e__Union info;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct MAPINAMEID
    {
        union _Kind_e__Union
        {
            int32_t lID;
            uint16_t* lpwstrName;
        };
        ::win32::guid* lpguid;
        uint32_t ulKind;
        _Kind_e__Union Kind;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct SSortOrder
    {
        uint32_t ulPropTag;
        uint32_t ulOrder;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct SSortOrderSet
    {
        uint32_t cSorts;
        uint32_t cCategories;
        uint32_t cExpanded;
        Windows::Win32::WindowsAddressBook::SSortOrder aSort[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct SAndRestriction
    {
        uint32_t cRes;
        Windows::Win32::WindowsAddressBook::SRestriction* lpRes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct SOrRestriction
    {
        uint32_t cRes;
        Windows::Win32::WindowsAddressBook::SRestriction* lpRes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct SNotRestriction
    {
        uint32_t ulReserved;
        Windows::Win32::WindowsAddressBook::SRestriction* lpRes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct SContentRestriction
    {
        uint32_t ulFuzzyLevel;
        uint32_t ulPropTag;
        Windows::Win32::WindowsAddressBook::SPropValue* lpProp;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct SBitMaskRestriction
    {
        uint32_t relBMR;
        uint32_t ulPropTag;
        uint32_t ulMask;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct SPropertyRestriction
    {
        uint32_t relop;
        uint32_t ulPropTag;
        Windows::Win32::WindowsAddressBook::SPropValue* lpProp;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct SComparePropsRestriction
    {
        uint32_t relop;
        uint32_t ulPropTag1;
        uint32_t ulPropTag2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct SSizeRestriction
    {
        uint32_t relop;
        uint32_t ulPropTag;
        uint32_t cb;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct SExistRestriction
    {
        uint32_t ulReserved1;
        uint32_t ulPropTag;
        uint32_t ulReserved2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct SSubRestriction
    {
        uint32_t ulSubObject;
        Windows::Win32::WindowsAddressBook::SRestriction* lpRes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct SCommentRestriction
    {
        uint32_t cValues;
        Windows::Win32::WindowsAddressBook::SRestriction* lpRes;
        Windows::Win32::WindowsAddressBook::SPropValue* lpProp;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct SRestriction
    {
        union _res_e__Union
        {
            Windows::Win32::WindowsAddressBook::SComparePropsRestriction resCompareProps;
            Windows::Win32::WindowsAddressBook::SAndRestriction resAnd;
            Windows::Win32::WindowsAddressBook::SOrRestriction resOr;
            Windows::Win32::WindowsAddressBook::SNotRestriction resNot;
            Windows::Win32::WindowsAddressBook::SContentRestriction resContent;
            Windows::Win32::WindowsAddressBook::SPropertyRestriction resProperty;
            Windows::Win32::WindowsAddressBook::SBitMaskRestriction resBitMask;
            Windows::Win32::WindowsAddressBook::SSizeRestriction resSize;
            Windows::Win32::WindowsAddressBook::SExistRestriction resExist;
            Windows::Win32::WindowsAddressBook::SSubRestriction resSub;
            Windows::Win32::WindowsAddressBook::SCommentRestriction resComment;
        };
        uint32_t rt;
        _res_e__Union res;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct _flaglist
    {
        uint32_t cFlags;
        uint32_t ulFlag[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct ADRPARM
    {
        uint32_t cbABContEntryID;
        Windows::Win32::WindowsAddressBook::ENTRYID* lpABContEntryID;
        uint32_t ulFlags;
        void* lpReserved;
        uint32_t ulHelpContext;
        int8_t* lpszHelpFileName;
        Windows::Win32::WindowsAddressBook::LPFNABSDI* lpfnABSDI;
        Windows::Win32::WindowsAddressBook::LPFNDISMISS* lpfnDismiss;
        void* lpvDismissContext;
        int8_t* lpszCaption;
        int8_t* lpszNewEntryTitle;
        int8_t* lpszDestWellsTitle;
        uint32_t cDestFields;
        uint32_t nDestFieldFocus;
        int8_t** lppszDestTitles;
        uint32_t* lpulDestComps;
        Windows::Win32::WindowsAddressBook::SRestriction* lpContRestriction;
        Windows::Win32::WindowsAddressBook::SRestriction* lpHierRestriction;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct DTBLLABEL
    {
        uint32_t ulbLpszLabelName;
        uint32_t ulFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct DTBLEDIT
    {
        uint32_t ulbLpszCharsAllowed;
        uint32_t ulFlags;
        uint32_t ulNumCharsAllowed;
        uint32_t ulPropTag;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct DTBLLBX
    {
        uint32_t ulFlags;
        uint32_t ulPRSetProperty;
        uint32_t ulPRTableName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct DTBLCOMBOBOX
    {
        uint32_t ulbLpszCharsAllowed;
        uint32_t ulFlags;
        uint32_t ulNumCharsAllowed;
        uint32_t ulPRPropertyName;
        uint32_t ulPRTableName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct DTBLDDLBX
    {
        uint32_t ulFlags;
        uint32_t ulPRDisplayProperty;
        uint32_t ulPRSetProperty;
        uint32_t ulPRTableName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct DTBLCHECKBOX
    {
        uint32_t ulbLpszLabel;
        uint32_t ulFlags;
        uint32_t ulPRPropertyName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct DTBLGROUPBOX
    {
        uint32_t ulbLpszLabel;
        uint32_t ulFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct DTBLBUTTON
    {
        uint32_t ulbLpszLabel;
        uint32_t ulFlags;
        uint32_t ulPRControl;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct DTBLPAGE
    {
        uint32_t ulbLpszLabel;
        uint32_t ulFlags;
        uint32_t ulbLpszComponent;
        uint32_t ulContext;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct DTBLRADIOBUTTON
    {
        uint32_t ulbLpszLabel;
        uint32_t ulFlags;
        uint32_t ulcButtons;
        uint32_t ulPropTag;
        int32_t lReturnValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct DTBLMVLISTBOX
    {
        uint32_t ulFlags;
        uint32_t ulMVPropTag;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct DTBLMVDDLBX
    {
        uint32_t ulFlags;
        uint32_t ulMVPropTag;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct _WABACTIONITEM
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct WAB_PARAM
    {
        uint32_t cbSize;
        Windows::Win32::WindowsAndMessaging::HWND hwnd;
        int8_t* szFileName;
        uint32_t ulFlags;
        ::win32::guid guidPSExt;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct WABIMPORTPARAM
    {
        uint32_t cbSize;
        Windows::Win32::WindowsAddressBook::IAddrBook* lpAdrBook;
        Windows::Win32::WindowsAndMessaging::HWND hWnd;
        uint32_t ulFlags;
        int8_t* lpszFileName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsAddressBook
{
    struct WABEXTDISPLAY
    {
        uint32_t cbSize;
        Windows::Win32::WindowsAddressBook::IWABObject* lpWABObject;
        Windows::Win32::WindowsAddressBook::IAddrBook* lpAdrBook;
        Windows::Win32::WindowsAddressBook::IMAPIProp* lpPropObj;
        Windows::Win32::SystemServices::BOOL fReadOnly;
        Windows::Win32::SystemServices::BOOL fDataChanged;
        uint32_t ulFlags;
        void* lpv;
        int8_t* lpsz;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectDraw
{
    struct _DDFXROP
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectDraw
{
    struct DDRGBA
    {
        uint8_t red;
        uint8_t green;
        uint8_t blue;
        uint8_t alpha;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectDraw
{
    struct DDOSCAPS
    {
        uint32_t dwCaps;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectDraw
{
    struct DDCAPS_DX1
    {
        uint32_t dwSize;
        uint32_t dwCaps;
        uint32_t dwCaps2;
        uint32_t dwCKeyCaps;
        uint32_t dwFXCaps;
        uint32_t dwFXAlphaCaps;
        uint32_t dwPalCaps;
        uint32_t dwSVCaps;
        uint32_t dwAlphaBltConstBitDepths;
        uint32_t dwAlphaBltPixelBitDepths;
        uint32_t dwAlphaBltSurfaceBitDepths;
        uint32_t dwAlphaOverlayConstBitDepths;
        uint32_t dwAlphaOverlayPixelBitDepths;
        uint32_t dwAlphaOverlaySurfaceBitDepths;
        uint32_t dwZBufferBitDepths;
        uint32_t dwVidMemTotal;
        uint32_t dwVidMemFree;
        uint32_t dwMaxVisibleOverlays;
        uint32_t dwCurrVisibleOverlays;
        uint32_t dwNumFourCCCodes;
        uint32_t dwAlignBoundarySrc;
        uint32_t dwAlignSizeSrc;
        uint32_t dwAlignBoundaryDest;
        uint32_t dwAlignSizeDest;
        uint32_t dwAlignStrideAlign;
        uint32_t dwRops[8];
        Windows::Win32::DirectDraw::DDSCAPS ddsCaps;
        uint32_t dwMinOverlayStretch;
        uint32_t dwMaxOverlayStretch;
        uint32_t dwMinLiveVideoStretch;
        uint32_t dwMaxLiveVideoStretch;
        uint32_t dwMinHwCodecStretch;
        uint32_t dwMaxHwCodecStretch;
        uint32_t dwReserved1;
        uint32_t dwReserved2;
        uint32_t dwReserved3;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectDraw
{
    struct DDCAPS_DX3
    {
        uint32_t dwSize;
        uint32_t dwCaps;
        uint32_t dwCaps2;
        uint32_t dwCKeyCaps;
        uint32_t dwFXCaps;
        uint32_t dwFXAlphaCaps;
        uint32_t dwPalCaps;
        uint32_t dwSVCaps;
        uint32_t dwAlphaBltConstBitDepths;
        uint32_t dwAlphaBltPixelBitDepths;
        uint32_t dwAlphaBltSurfaceBitDepths;
        uint32_t dwAlphaOverlayConstBitDepths;
        uint32_t dwAlphaOverlayPixelBitDepths;
        uint32_t dwAlphaOverlaySurfaceBitDepths;
        uint32_t dwZBufferBitDepths;
        uint32_t dwVidMemTotal;
        uint32_t dwVidMemFree;
        uint32_t dwMaxVisibleOverlays;
        uint32_t dwCurrVisibleOverlays;
        uint32_t dwNumFourCCCodes;
        uint32_t dwAlignBoundarySrc;
        uint32_t dwAlignSizeSrc;
        uint32_t dwAlignBoundaryDest;
        uint32_t dwAlignSizeDest;
        uint32_t dwAlignStrideAlign;
        uint32_t dwRops[8];
        Windows::Win32::DirectDraw::DDSCAPS ddsCaps;
        uint32_t dwMinOverlayStretch;
        uint32_t dwMaxOverlayStretch;
        uint32_t dwMinLiveVideoStretch;
        uint32_t dwMaxLiveVideoStretch;
        uint32_t dwMinHwCodecStretch;
        uint32_t dwMaxHwCodecStretch;
        uint32_t dwReserved1;
        uint32_t dwReserved2;
        uint32_t dwReserved3;
        uint32_t dwSVBCaps;
        uint32_t dwSVBCKeyCaps;
        uint32_t dwSVBFXCaps;
        uint32_t dwSVBRops[8];
        uint32_t dwVSBCaps;
        uint32_t dwVSBCKeyCaps;
        uint32_t dwVSBFXCaps;
        uint32_t dwVSBRops[8];
        uint32_t dwSSBCaps;
        uint32_t dwSSBCKeyCaps;
        uint32_t dwSSBFXCaps;
        uint32_t dwSSBRops[8];
        uint32_t dwReserved4;
        uint32_t dwReserved5;
        uint32_t dwReserved6;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectDraw
{
    struct DDCAPS_DX5
    {
        uint32_t dwSize;
        uint32_t dwCaps;
        uint32_t dwCaps2;
        uint32_t dwCKeyCaps;
        uint32_t dwFXCaps;
        uint32_t dwFXAlphaCaps;
        uint32_t dwPalCaps;
        uint32_t dwSVCaps;
        uint32_t dwAlphaBltConstBitDepths;
        uint32_t dwAlphaBltPixelBitDepths;
        uint32_t dwAlphaBltSurfaceBitDepths;
        uint32_t dwAlphaOverlayConstBitDepths;
        uint32_t dwAlphaOverlayPixelBitDepths;
        uint32_t dwAlphaOverlaySurfaceBitDepths;
        uint32_t dwZBufferBitDepths;
        uint32_t dwVidMemTotal;
        uint32_t dwVidMemFree;
        uint32_t dwMaxVisibleOverlays;
        uint32_t dwCurrVisibleOverlays;
        uint32_t dwNumFourCCCodes;
        uint32_t dwAlignBoundarySrc;
        uint32_t dwAlignSizeSrc;
        uint32_t dwAlignBoundaryDest;
        uint32_t dwAlignSizeDest;
        uint32_t dwAlignStrideAlign;
        uint32_t dwRops[8];
        Windows::Win32::DirectDraw::DDSCAPS ddsCaps;
        uint32_t dwMinOverlayStretch;
        uint32_t dwMaxOverlayStretch;
        uint32_t dwMinLiveVideoStretch;
        uint32_t dwMaxLiveVideoStretch;
        uint32_t dwMinHwCodecStretch;
        uint32_t dwMaxHwCodecStretch;
        uint32_t dwReserved1;
        uint32_t dwReserved2;
        uint32_t dwReserved3;
        uint32_t dwSVBCaps;
        uint32_t dwSVBCKeyCaps;
        uint32_t dwSVBFXCaps;
        uint32_t dwSVBRops[8];
        uint32_t dwVSBCaps;
        uint32_t dwVSBCKeyCaps;
        uint32_t dwVSBFXCaps;
        uint32_t dwVSBRops[8];
        uint32_t dwSSBCaps;
        uint32_t dwSSBCKeyCaps;
        uint32_t dwSSBFXCaps;
        uint32_t dwSSBRops[8];
        uint32_t dwMaxVideoPorts;
        uint32_t dwCurrVideoPorts;
        uint32_t dwSVBCaps2;
        uint32_t dwNLVBCaps;
        uint32_t dwNLVBCaps2;
        uint32_t dwNLVBCKeyCaps;
        uint32_t dwNLVBFXCaps;
        uint32_t dwNLVBRops[8];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectDraw
{
    struct DDCAPS_DX6
    {
        uint32_t dwSize;
        uint32_t dwCaps;
        uint32_t dwCaps2;
        uint32_t dwCKeyCaps;
        uint32_t dwFXCaps;
        uint32_t dwFXAlphaCaps;
        uint32_t dwPalCaps;
        uint32_t dwSVCaps;
        uint32_t dwAlphaBltConstBitDepths;
        uint32_t dwAlphaBltPixelBitDepths;
        uint32_t dwAlphaBltSurfaceBitDepths;
        uint32_t dwAlphaOverlayConstBitDepths;
        uint32_t dwAlphaOverlayPixelBitDepths;
        uint32_t dwAlphaOverlaySurfaceBitDepths;
        uint32_t dwZBufferBitDepths;
        uint32_t dwVidMemTotal;
        uint32_t dwVidMemFree;
        uint32_t dwMaxVisibleOverlays;
        uint32_t dwCurrVisibleOverlays;
        uint32_t dwNumFourCCCodes;
        uint32_t dwAlignBoundarySrc;
        uint32_t dwAlignSizeSrc;
        uint32_t dwAlignBoundaryDest;
        uint32_t dwAlignSizeDest;
        uint32_t dwAlignStrideAlign;
        uint32_t dwRops[8];
        Windows::Win32::DirectDraw::DDSCAPS ddsOldCaps;
        uint32_t dwMinOverlayStretch;
        uint32_t dwMaxOverlayStretch;
        uint32_t dwMinLiveVideoStretch;
        uint32_t dwMaxLiveVideoStretch;
        uint32_t dwMinHwCodecStretch;
        uint32_t dwMaxHwCodecStretch;
        uint32_t dwReserved1;
        uint32_t dwReserved2;
        uint32_t dwReserved3;
        uint32_t dwSVBCaps;
        uint32_t dwSVBCKeyCaps;
        uint32_t dwSVBFXCaps;
        uint32_t dwSVBRops[8];
        uint32_t dwVSBCaps;
        uint32_t dwVSBCKeyCaps;
        uint32_t dwVSBFXCaps;
        uint32_t dwVSBRops[8];
        uint32_t dwSSBCaps;
        uint32_t dwSSBCKeyCaps;
        uint32_t dwSSBFXCaps;
        uint32_t dwSSBRops[8];
        uint32_t dwMaxVideoPorts;
        uint32_t dwCurrVideoPorts;
        uint32_t dwSVBCaps2;
        uint32_t dwNLVBCaps;
        uint32_t dwNLVBCaps2;
        uint32_t dwNLVBCKeyCaps;
        uint32_t dwNLVBFXCaps;
        uint32_t dwNLVBRops[8];
        Windows::Win32::DirectDraw::DDSCAPS2 ddsCaps;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectDraw
{
    struct DDCAPS_DX7
    {
        uint32_t dwSize;
        uint32_t dwCaps;
        uint32_t dwCaps2;
        uint32_t dwCKeyCaps;
        uint32_t dwFXCaps;
        uint32_t dwFXAlphaCaps;
        uint32_t dwPalCaps;
        uint32_t dwSVCaps;
        uint32_t dwAlphaBltConstBitDepths;
        uint32_t dwAlphaBltPixelBitDepths;
        uint32_t dwAlphaBltSurfaceBitDepths;
        uint32_t dwAlphaOverlayConstBitDepths;
        uint32_t dwAlphaOverlayPixelBitDepths;
        uint32_t dwAlphaOverlaySurfaceBitDepths;
        uint32_t dwZBufferBitDepths;
        uint32_t dwVidMemTotal;
        uint32_t dwVidMemFree;
        uint32_t dwMaxVisibleOverlays;
        uint32_t dwCurrVisibleOverlays;
        uint32_t dwNumFourCCCodes;
        uint32_t dwAlignBoundarySrc;
        uint32_t dwAlignSizeSrc;
        uint32_t dwAlignBoundaryDest;
        uint32_t dwAlignSizeDest;
        uint32_t dwAlignStrideAlign;
        uint32_t dwRops[8];
        Windows::Win32::DirectDraw::DDSCAPS ddsOldCaps;
        uint32_t dwMinOverlayStretch;
        uint32_t dwMaxOverlayStretch;
        uint32_t dwMinLiveVideoStretch;
        uint32_t dwMaxLiveVideoStretch;
        uint32_t dwMinHwCodecStretch;
        uint32_t dwMaxHwCodecStretch;
        uint32_t dwReserved1;
        uint32_t dwReserved2;
        uint32_t dwReserved3;
        uint32_t dwSVBCaps;
        uint32_t dwSVBCKeyCaps;
        uint32_t dwSVBFXCaps;
        uint32_t dwSVBRops[8];
        uint32_t dwVSBCaps;
        uint32_t dwVSBCKeyCaps;
        uint32_t dwVSBFXCaps;
        uint32_t dwVSBRops[8];
        uint32_t dwSSBCaps;
        uint32_t dwSSBCKeyCaps;
        uint32_t dwSSBFXCaps;
        uint32_t dwSSBRops[8];
        uint32_t dwMaxVideoPorts;
        uint32_t dwCurrVideoPorts;
        uint32_t dwSVBCaps2;
        uint32_t dwNLVBCaps;
        uint32_t dwNLVBCaps2;
        uint32_t dwNLVBCKeyCaps;
        uint32_t dwNLVBFXCaps;
        uint32_t dwNLVBRops[8];
        Windows::Win32::DirectDraw::DDSCAPS2 ddsCaps;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectDraw
{
    struct DDBLTBATCH
    {
        Windows::Win32::DisplayDevices::RECT* lprDest;
        Windows::Win32::DirectDraw::IDirectDrawSurface* lpDDSSrc;
        Windows::Win32::DisplayDevices::RECT* lprSrc;
        uint32_t dwFlags;
        Windows::Win32::DirectDraw::DDBLTFX* lpDDBltFx;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectDraw
{
    struct DDGAMMARAMP
    {
        uint16_t red[256];
        uint16_t green[256];
        uint16_t blue[256];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectDraw
{
    struct DDDEVICEIDENTIFIER
    {
        int8_t szDriver[512];
        int8_t szDescription[512];
        Windows::Win32::SystemServices::LARGE_INTEGER liDriverVersion;
        uint32_t dwVendorId;
        uint32_t dwDeviceId;
        uint32_t dwSubSysId;
        uint32_t dwRevision;
        ::win32::guid guidDeviceIdentifier;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectDraw
{
    struct DDDEVICEIDENTIFIER2
    {
        int8_t szDriver[512];
        int8_t szDescription[512];
        Windows::Win32::SystemServices::LARGE_INTEGER liDriverVersion;
        uint32_t dwVendorId;
        uint32_t dwDeviceId;
        uint32_t dwSubSysId;
        uint32_t dwRevision;
        ::win32::guid guidDeviceIdentifier;
        uint32_t dwWHQLLevel;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectDraw
{
    struct DDSURFACEDESC
    {
        union _Anonymous1_e__Union
        {
            int32_t lPitch;
            uint32_t dwLinearSize;
        };
        union _Anonymous2_e__Union
        {
            uint32_t dwMipMapCount;
            uint32_t dwZBufferBitDepth;
            uint32_t dwRefreshRate;
        };
        uint32_t dwSize;
        uint32_t dwFlags;
        uint32_t dwHeight;
        uint32_t dwWidth;
        _Anonymous1_e__Union Anonymous1;
        uint32_t dwBackBufferCount;
        _Anonymous2_e__Union Anonymous2;
        uint32_t dwAlphaBitDepth;
        uint32_t dwReserved;
        void* lpSurface;
        Windows::Win32::DirectShow::DDCOLORKEY ddckCKDestOverlay;
        Windows::Win32::DirectShow::DDCOLORKEY ddckCKDestBlt;
        Windows::Win32::DirectShow::DDCOLORKEY ddckCKSrcOverlay;
        Windows::Win32::DirectShow::DDCOLORKEY ddckCKSrcBlt;
        Windows::Win32::DirectDraw::DDPIXELFORMAT ddpfPixelFormat;
        Windows::Win32::DirectDraw::DDSCAPS ddsCaps;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectDraw
{
    struct DDSURFACEDESC2
    {
        union _Anonymous1_e__Union
        {
            int32_t lPitch;
            uint32_t dwLinearSize;
        };
        union _Anonymous2_e__Union
        {
            uint32_t dwBackBufferCount;
            uint32_t dwDepth;
        };
        union _Anonymous3_e__Union
        {
            uint32_t dwMipMapCount;
            uint32_t dwRefreshRate;
            uint32_t dwSrcVBHandle;
        };
        union _Anonymous4_e__Union
        {
            Windows::Win32::DirectShow::DDCOLORKEY ddckCKDestOverlay;
            uint32_t dwEmptyFaceColor;
        };
        union _Anonymous5_e__Union
        {
            Windows::Win32::DirectDraw::DDPIXELFORMAT ddpfPixelFormat;
            uint32_t dwFVF;
        };
        uint32_t dwSize;
        uint32_t dwFlags;
        uint32_t dwHeight;
        uint32_t dwWidth;
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
        _Anonymous3_e__Union Anonymous3;
        uint32_t dwAlphaBitDepth;
        uint32_t dwReserved;
        void* lpSurface;
        _Anonymous4_e__Union Anonymous4;
        Windows::Win32::DirectShow::DDCOLORKEY ddckCKDestBlt;
        Windows::Win32::DirectShow::DDCOLORKEY ddckCKSrcOverlay;
        Windows::Win32::DirectShow::DDCOLORKEY ddckCKSrcBlt;
        _Anonymous5_e__Union Anonymous5;
        Windows::Win32::DirectDraw::DDSCAPS2 ddsCaps;
        uint32_t dwTextureStage;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectDraw
{
    struct DDOPTSURFACEDESC
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        Windows::Win32::DirectDraw::DDSCAPS2 ddSCaps;
        Windows::Win32::DirectDraw::DDOSCAPS ddOSCaps;
        ::win32::guid guid;
        uint32_t dwCompressionRatio;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectDraw
{
    struct DDCOLORCONTROL
    {
        uint32_t dwSize;
        uint32_t dwFlags;
        int32_t lBrightness;
        int32_t lContrast;
        int32_t lHue;
        int32_t lSaturation;
        int32_t lSharpness;
        int32_t lGamma;
        int32_t lColorEnable;
        uint32_t dwReserved1;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::XInput
{
    struct XINPUT_GAMEPAD
    {
        uint16_t wButtons;
        uint8_t bLeftTrigger;
        uint8_t bRightTrigger;
        int16_t sThumbLX;
        int16_t sThumbLY;
        int16_t sThumbRX;
        int16_t sThumbRY;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::XInput
{
    struct XINPUT_STATE
    {
        uint32_t dwPacketNumber;
        Windows::Win32::XInput::XINPUT_GAMEPAD Gamepad;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::XInput
{
    struct XINPUT_VIBRATION
    {
        uint16_t wLeftMotorSpeed;
        uint16_t wRightMotorSpeed;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::XInput
{
    struct XINPUT_CAPABILITIES
    {
        uint8_t Type;
        uint8_t SubType;
        uint16_t Flags;
        Windows::Win32::XInput::XINPUT_GAMEPAD Gamepad;
        Windows::Win32::XInput::XINPUT_VIBRATION Vibration;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::XInput
{
    struct XINPUT_BATTERY_INFORMATION
    {
        uint8_t BatteryType;
        uint8_t BatteryLevel;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::XInput
{
    struct XINPUT_KEYSTROKE
    {
        uint16_t VirtualKey;
        uint16_t Unicode;
        uint16_t Flags;
        uint8_t UserIndex;
        uint8_t HidCode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D_SHADER_MACRO
    {
        int8_t* Name;
        int8_t* Definition;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_INPUT_ELEMENT_DESC
    {
        int8_t* SemanticName;
        uint32_t SemanticIndex;
        Windows::Win32::Dxgi::DXGI_FORMAT Format;
        uint32_t InputSlot;
        uint32_t AlignedByteOffset;
        Windows::Win32::Direct3D11::D3D11_INPUT_CLASSIFICATION InputSlotClass;
        uint32_t InstanceDataStepRate;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_SO_DECLARATION_ENTRY
    {
        uint32_t Stream;
        int8_t* SemanticName;
        uint32_t SemanticIndex;
        uint8_t StartComponent;
        uint8_t ComponentCount;
        uint8_t OutputSlot;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_VIEWPORT
    {
        float TopLeftX;
        float TopLeftY;
        float Width;
        float Height;
        float MinDepth;
        float MaxDepth;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_DRAW_INSTANCED_INDIRECT_ARGS
    {
        uint32_t VertexCountPerInstance;
        uint32_t InstanceCount;
        uint32_t StartVertexLocation;
        uint32_t StartInstanceLocation;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_DRAW_INDEXED_INSTANCED_INDIRECT_ARGS
    {
        uint32_t IndexCountPerInstance;
        uint32_t InstanceCount;
        uint32_t StartIndexLocation;
        int32_t BaseVertexLocation;
        uint32_t StartInstanceLocation;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_BOX
    {
        uint32_t left;
        uint32_t top;
        uint32_t front;
        uint32_t right;
        uint32_t bottom;
        uint32_t back;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_DEPTH_STENCILOP_DESC
    {
        Windows::Win32::Direct3D11::D3D11_STENCIL_OP StencilFailOp;
        Windows::Win32::Direct3D11::D3D11_STENCIL_OP StencilDepthFailOp;
        Windows::Win32::Direct3D11::D3D11_STENCIL_OP StencilPassOp;
        Windows::Win32::Direct3D11::D3D11_COMPARISON_FUNC StencilFunc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_DEPTH_STENCIL_DESC
    {
        Windows::Win32::SystemServices::BOOL DepthEnable;
        Windows::Win32::Direct3D11::D3D11_DEPTH_WRITE_MASK DepthWriteMask;
        Windows::Win32::Direct3D11::D3D11_COMPARISON_FUNC DepthFunc;
        Windows::Win32::SystemServices::BOOL StencilEnable;
        uint8_t StencilReadMask;
        uint8_t StencilWriteMask;
        Windows::Win32::Direct3D11::D3D11_DEPTH_STENCILOP_DESC FrontFace;
        Windows::Win32::Direct3D11::D3D11_DEPTH_STENCILOP_DESC BackFace;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_RENDER_TARGET_BLEND_DESC
    {
        Windows::Win32::SystemServices::BOOL BlendEnable;
        Windows::Win32::Direct3D11::D3D11_BLEND SrcBlend;
        Windows::Win32::Direct3D11::D3D11_BLEND DestBlend;
        Windows::Win32::Direct3D11::D3D11_BLEND_OP BlendOp;
        Windows::Win32::Direct3D11::D3D11_BLEND SrcBlendAlpha;
        Windows::Win32::Direct3D11::D3D11_BLEND DestBlendAlpha;
        Windows::Win32::Direct3D11::D3D11_BLEND_OP BlendOpAlpha;
        uint8_t RenderTargetWriteMask;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_BLEND_DESC
    {
        Windows::Win32::SystemServices::BOOL AlphaToCoverageEnable;
        Windows::Win32::SystemServices::BOOL IndependentBlendEnable;
        Windows::Win32::Direct3D11::D3D11_RENDER_TARGET_BLEND_DESC RenderTarget[8];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_RASTERIZER_DESC
    {
        Windows::Win32::Direct3D11::D3D11_FILL_MODE FillMode;
        Windows::Win32::Direct3D11::D3D11_CULL_MODE CullMode;
        Windows::Win32::SystemServices::BOOL FrontCounterClockwise;
        int32_t DepthBias;
        float DepthBiasClamp;
        float SlopeScaledDepthBias;
        Windows::Win32::SystemServices::BOOL DepthClipEnable;
        Windows::Win32::SystemServices::BOOL ScissorEnable;
        Windows::Win32::SystemServices::BOOL MultisampleEnable;
        Windows::Win32::SystemServices::BOOL AntialiasedLineEnable;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_SUBRESOURCE_DATA
    {
        void* pSysMem;
        uint32_t SysMemPitch;
        uint32_t SysMemSlicePitch;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_MAPPED_SUBRESOURCE
    {
        void* pData;
        uint32_t RowPitch;
        uint32_t DepthPitch;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_BUFFER_DESC
    {
        uint32_t ByteWidth;
        Windows::Win32::Direct3D11::D3D11_USAGE Usage;
        uint32_t BindFlags;
        uint32_t CPUAccessFlags;
        uint32_t MiscFlags;
        uint32_t StructureByteStride;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_TEXTURE1D_DESC
    {
        uint32_t Width;
        uint32_t MipLevels;
        uint32_t ArraySize;
        Windows::Win32::Dxgi::DXGI_FORMAT Format;
        Windows::Win32::Direct3D11::D3D11_USAGE Usage;
        uint32_t BindFlags;
        uint32_t CPUAccessFlags;
        uint32_t MiscFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_TEXTURE2D_DESC
    {
        uint32_t Width;
        uint32_t Height;
        uint32_t MipLevels;
        uint32_t ArraySize;
        Windows::Win32::Dxgi::DXGI_FORMAT Format;
        Windows::Win32::Dxgi::DXGI_SAMPLE_DESC SampleDesc;
        Windows::Win32::Direct3D11::D3D11_USAGE Usage;
        uint32_t BindFlags;
        uint32_t CPUAccessFlags;
        uint32_t MiscFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_TEXTURE3D_DESC
    {
        uint32_t Width;
        uint32_t Height;
        uint32_t Depth;
        uint32_t MipLevels;
        Windows::Win32::Dxgi::DXGI_FORMAT Format;
        Windows::Win32::Direct3D11::D3D11_USAGE Usage;
        uint32_t BindFlags;
        uint32_t CPUAccessFlags;
        uint32_t MiscFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_BUFFER_SRV
    {
        union _Anonymous1_e__Union
        {
            uint32_t FirstElement;
            uint32_t ElementOffset;
        };
        union _Anonymous2_e__Union
        {
            uint32_t NumElements;
            uint32_t ElementWidth;
        };
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_BUFFEREX_SRV
    {
        uint32_t FirstElement;
        uint32_t NumElements;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_TEX1D_SRV
    {
        uint32_t MostDetailedMip;
        uint32_t MipLevels;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_TEX1D_ARRAY_SRV
    {
        uint32_t MostDetailedMip;
        uint32_t MipLevels;
        uint32_t FirstArraySlice;
        uint32_t ArraySize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_TEX2D_SRV
    {
        uint32_t MostDetailedMip;
        uint32_t MipLevels;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_TEX2D_ARRAY_SRV
    {
        uint32_t MostDetailedMip;
        uint32_t MipLevels;
        uint32_t FirstArraySlice;
        uint32_t ArraySize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_TEX3D_SRV
    {
        uint32_t MostDetailedMip;
        uint32_t MipLevels;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_TEXCUBE_SRV
    {
        uint32_t MostDetailedMip;
        uint32_t MipLevels;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_TEXCUBE_ARRAY_SRV
    {
        uint32_t MostDetailedMip;
        uint32_t MipLevels;
        uint32_t First2DArrayFace;
        uint32_t NumCubes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_TEX2DMS_SRV
    {
        uint32_t UnusedField_NothingToDefine;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_TEX2DMS_ARRAY_SRV
    {
        uint32_t FirstArraySlice;
        uint32_t ArraySize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_SHADER_RESOURCE_VIEW_DESC
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::Direct3D11::D3D11_BUFFER_SRV Buffer;
            Windows::Win32::Direct3D11::D3D11_TEX1D_SRV Texture1D;
            Windows::Win32::Direct3D11::D3D11_TEX1D_ARRAY_SRV Texture1DArray;
            Windows::Win32::Direct3D11::D3D11_TEX2D_SRV Texture2D;
            Windows::Win32::Direct3D11::D3D11_TEX2D_ARRAY_SRV Texture2DArray;
            Windows::Win32::Direct3D11::D3D11_TEX2DMS_SRV Texture2DMS;
            Windows::Win32::Direct3D11::D3D11_TEX2DMS_ARRAY_SRV Texture2DMSArray;
            Windows::Win32::Direct3D11::D3D11_TEX3D_SRV Texture3D;
            Windows::Win32::Direct3D11::D3D11_TEXCUBE_SRV TextureCube;
            Windows::Win32::Direct3D11::D3D11_TEXCUBE_ARRAY_SRV TextureCubeArray;
            Windows::Win32::Direct3D11::D3D11_BUFFEREX_SRV BufferEx;
        };
        Windows::Win32::Dxgi::DXGI_FORMAT Format;
        Windows::Win32::Direct3D11::D3D_SRV_DIMENSION ViewDimension;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_BUFFER_RTV
    {
        union _Anonymous1_e__Union
        {
            uint32_t FirstElement;
            uint32_t ElementOffset;
        };
        union _Anonymous2_e__Union
        {
            uint32_t NumElements;
            uint32_t ElementWidth;
        };
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_TEX1D_RTV
    {
        uint32_t MipSlice;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_TEX1D_ARRAY_RTV
    {
        uint32_t MipSlice;
        uint32_t FirstArraySlice;
        uint32_t ArraySize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_TEX2D_RTV
    {
        uint32_t MipSlice;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_TEX2DMS_RTV
    {
        uint32_t UnusedField_NothingToDefine;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_TEX2D_ARRAY_RTV
    {
        uint32_t MipSlice;
        uint32_t FirstArraySlice;
        uint32_t ArraySize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_TEX2DMS_ARRAY_RTV
    {
        uint32_t FirstArraySlice;
        uint32_t ArraySize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_TEX3D_RTV
    {
        uint32_t MipSlice;
        uint32_t FirstWSlice;
        uint32_t WSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_RENDER_TARGET_VIEW_DESC
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::Direct3D11::D3D11_BUFFER_RTV Buffer;
            Windows::Win32::Direct3D11::D3D11_TEX1D_RTV Texture1D;
            Windows::Win32::Direct3D11::D3D11_TEX1D_ARRAY_RTV Texture1DArray;
            Windows::Win32::Direct3D11::D3D11_TEX2D_RTV Texture2D;
            Windows::Win32::Direct3D11::D3D11_TEX2D_ARRAY_RTV Texture2DArray;
            Windows::Win32::Direct3D11::D3D11_TEX2DMS_RTV Texture2DMS;
            Windows::Win32::Direct3D11::D3D11_TEX2DMS_ARRAY_RTV Texture2DMSArray;
            Windows::Win32::Direct3D11::D3D11_TEX3D_RTV Texture3D;
        };
        Windows::Win32::Dxgi::DXGI_FORMAT Format;
        Windows::Win32::Direct3D11::D3D11_RTV_DIMENSION ViewDimension;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_TEX1D_DSV
    {
        uint32_t MipSlice;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_TEX1D_ARRAY_DSV
    {
        uint32_t MipSlice;
        uint32_t FirstArraySlice;
        uint32_t ArraySize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_TEX2D_DSV
    {
        uint32_t MipSlice;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_TEX2D_ARRAY_DSV
    {
        uint32_t MipSlice;
        uint32_t FirstArraySlice;
        uint32_t ArraySize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_TEX2DMS_DSV
    {
        uint32_t UnusedField_NothingToDefine;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_TEX2DMS_ARRAY_DSV
    {
        uint32_t FirstArraySlice;
        uint32_t ArraySize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_DEPTH_STENCIL_VIEW_DESC
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::Direct3D11::D3D11_TEX1D_DSV Texture1D;
            Windows::Win32::Direct3D11::D3D11_TEX1D_ARRAY_DSV Texture1DArray;
            Windows::Win32::Direct3D11::D3D11_TEX2D_DSV Texture2D;
            Windows::Win32::Direct3D11::D3D11_TEX2D_ARRAY_DSV Texture2DArray;
            Windows::Win32::Direct3D11::D3D11_TEX2DMS_DSV Texture2DMS;
            Windows::Win32::Direct3D11::D3D11_TEX2DMS_ARRAY_DSV Texture2DMSArray;
        };
        Windows::Win32::Dxgi::DXGI_FORMAT Format;
        Windows::Win32::Direct3D11::D3D11_DSV_DIMENSION ViewDimension;
        uint32_t Flags;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_BUFFER_UAV
    {
        uint32_t FirstElement;
        uint32_t NumElements;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_TEX1D_UAV
    {
        uint32_t MipSlice;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_TEX1D_ARRAY_UAV
    {
        uint32_t MipSlice;
        uint32_t FirstArraySlice;
        uint32_t ArraySize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_TEX2D_UAV
    {
        uint32_t MipSlice;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_TEX2D_ARRAY_UAV
    {
        uint32_t MipSlice;
        uint32_t FirstArraySlice;
        uint32_t ArraySize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_TEX3D_UAV
    {
        uint32_t MipSlice;
        uint32_t FirstWSlice;
        uint32_t WSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_UNORDERED_ACCESS_VIEW_DESC
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::Direct3D11::D3D11_BUFFER_UAV Buffer;
            Windows::Win32::Direct3D11::D3D11_TEX1D_UAV Texture1D;
            Windows::Win32::Direct3D11::D3D11_TEX1D_ARRAY_UAV Texture1DArray;
            Windows::Win32::Direct3D11::D3D11_TEX2D_UAV Texture2D;
            Windows::Win32::Direct3D11::D3D11_TEX2D_ARRAY_UAV Texture2DArray;
            Windows::Win32::Direct3D11::D3D11_TEX3D_UAV Texture3D;
        };
        Windows::Win32::Dxgi::DXGI_FORMAT Format;
        Windows::Win32::Direct3D11::D3D11_UAV_DIMENSION ViewDimension;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_SAMPLER_DESC
    {
        Windows::Win32::Direct3D11::D3D11_FILTER Filter;
        Windows::Win32::Direct3D11::D3D11_TEXTURE_ADDRESS_MODE AddressU;
        Windows::Win32::Direct3D11::D3D11_TEXTURE_ADDRESS_MODE AddressV;
        Windows::Win32::Direct3D11::D3D11_TEXTURE_ADDRESS_MODE AddressW;
        float MipLODBias;
        uint32_t MaxAnisotropy;
        Windows::Win32::Direct3D11::D3D11_COMPARISON_FUNC ComparisonFunc;
        float BorderColor[4];
        float MinLOD;
        float MaxLOD;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_QUERY_DESC
    {
        Windows::Win32::Direct3D11::D3D11_QUERY Query;
        uint32_t MiscFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_QUERY_DATA_TIMESTAMP_DISJOINT
    {
        uint64_t Frequency;
        Windows::Win32::SystemServices::BOOL Disjoint;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_QUERY_DATA_PIPELINE_STATISTICS
    {
        uint64_t IAVertices;
        uint64_t IAPrimitives;
        uint64_t VSInvocations;
        uint64_t GSInvocations;
        uint64_t GSPrimitives;
        uint64_t CInvocations;
        uint64_t CPrimitives;
        uint64_t PSInvocations;
        uint64_t HSInvocations;
        uint64_t DSInvocations;
        uint64_t CSInvocations;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_QUERY_DATA_SO_STATISTICS
    {
        uint64_t NumPrimitivesWritten;
        uint64_t PrimitivesStorageNeeded;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_COUNTER_DESC
    {
        Windows::Win32::Direct3D11::D3D11_COUNTER Counter;
        uint32_t MiscFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_COUNTER_INFO
    {
        Windows::Win32::Direct3D11::D3D11_COUNTER LastDeviceDependentCounter;
        uint32_t NumSimultaneousCounters;
        uint8_t NumDetectableParallelUnits;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_CLASS_INSTANCE_DESC
    {
        uint32_t InstanceId;
        uint32_t InstanceIndex;
        uint32_t TypeId;
        uint32_t ConstantBuffer;
        uint32_t BaseConstantBufferOffset;
        uint32_t BaseTexture;
        uint32_t BaseSampler;
        Windows::Win32::SystemServices::BOOL Created;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_FEATURE_DATA_THREADING
    {
        Windows::Win32::SystemServices::BOOL DriverConcurrentCreates;
        Windows::Win32::SystemServices::BOOL DriverCommandLists;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_FEATURE_DATA_DOUBLES
    {
        Windows::Win32::SystemServices::BOOL DoublePrecisionFloatShaderOps;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_FEATURE_DATA_FORMAT_SUPPORT
    {
        Windows::Win32::Dxgi::DXGI_FORMAT InFormat;
        uint32_t OutFormatSupport;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_FEATURE_DATA_FORMAT_SUPPORT2
    {
        Windows::Win32::Dxgi::DXGI_FORMAT InFormat;
        uint32_t OutFormatSupport2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS
    {
        Windows::Win32::SystemServices::BOOL ComputeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_FEATURE_DATA_D3D11_OPTIONS
    {
        Windows::Win32::SystemServices::BOOL OutputMergerLogicOp;
        Windows::Win32::SystemServices::BOOL UAVOnlyRenderingForcedSampleCount;
        Windows::Win32::SystemServices::BOOL DiscardAPIsSeenByDriver;
        Windows::Win32::SystemServices::BOOL FlagsForUpdateAndCopySeenByDriver;
        Windows::Win32::SystemServices::BOOL ClearView;
        Windows::Win32::SystemServices::BOOL CopyWithOverlap;
        Windows::Win32::SystemServices::BOOL ConstantBufferPartialUpdate;
        Windows::Win32::SystemServices::BOOL ConstantBufferOffsetting;
        Windows::Win32::SystemServices::BOOL MapNoOverwriteOnDynamicConstantBuffer;
        Windows::Win32::SystemServices::BOOL MapNoOverwriteOnDynamicBufferSRV;
        Windows::Win32::SystemServices::BOOL MultisampleRTVWithForcedSampleCountOne;
        Windows::Win32::SystemServices::BOOL SAD4ShaderInstructions;
        Windows::Win32::SystemServices::BOOL ExtendedDoublesShaderInstructions;
        Windows::Win32::SystemServices::BOOL ExtendedResourceSharing;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_FEATURE_DATA_ARCHITECTURE_INFO
    {
        Windows::Win32::SystemServices::BOOL TileBasedDeferredRenderer;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_FEATURE_DATA_D3D9_OPTIONS
    {
        Windows::Win32::SystemServices::BOOL FullNonPow2TextureSupport;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_FEATURE_DATA_D3D9_SHADOW_SUPPORT
    {
        Windows::Win32::SystemServices::BOOL SupportsDepthAsTextureWithLessEqualComparisonFilter;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT
    {
        uint32_t PixelShaderMinPrecision;
        uint32_t AllOtherShaderStagesMinPrecision;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_FEATURE_DATA_D3D11_OPTIONS1
    {
        Windows::Win32::Direct3D11::D3D11_TILED_RESOURCES_TIER TiledResourcesTier;
        Windows::Win32::SystemServices::BOOL MinMaxFiltering;
        Windows::Win32::SystemServices::BOOL ClearViewAlsoSupportsDepthOnlyFormats;
        Windows::Win32::SystemServices::BOOL MapOnDefaultBuffers;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_FEATURE_DATA_D3D9_SIMPLE_INSTANCING_SUPPORT
    {
        Windows::Win32::SystemServices::BOOL SimpleInstancingSupported;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_FEATURE_DATA_MARKER_SUPPORT
    {
        Windows::Win32::SystemServices::BOOL Profile;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_FEATURE_DATA_D3D9_OPTIONS1
    {
        Windows::Win32::SystemServices::BOOL FullNonPow2TextureSupported;
        Windows::Win32::SystemServices::BOOL DepthAsTextureWithLessEqualComparisonFilterSupported;
        Windows::Win32::SystemServices::BOOL SimpleInstancingSupported;
        Windows::Win32::SystemServices::BOOL TextureCubeFaceRenderTargetWithNonCubeDepthStencilSupported;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_FEATURE_DATA_D3D11_OPTIONS2
    {
        Windows::Win32::SystemServices::BOOL PSSpecifiedStencilRefSupported;
        Windows::Win32::SystemServices::BOOL TypedUAVLoadAdditionalFormats;
        Windows::Win32::SystemServices::BOOL ROVsSupported;
        Windows::Win32::Direct3D11::D3D11_CONSERVATIVE_RASTERIZATION_TIER ConservativeRasterizationTier;
        Windows::Win32::Direct3D11::D3D11_TILED_RESOURCES_TIER TiledResourcesTier;
        Windows::Win32::SystemServices::BOOL MapOnDefaultTextures;
        Windows::Win32::SystemServices::BOOL StandardSwizzle;
        Windows::Win32::SystemServices::BOOL UnifiedMemoryArchitecture;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_FEATURE_DATA_D3D11_OPTIONS3
    {
        Windows::Win32::SystemServices::BOOL VPAndRTArrayIndexFromAnyShaderFeedingRasterizer;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT
    {
        uint32_t MaxGPUVirtualAddressBitsPerResource;
        uint32_t MaxGPUVirtualAddressBitsPerProcess;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_FEATURE_DATA_SHADER_CACHE
    {
        uint32_t SupportFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_FEATURE_DATA_D3D11_OPTIONS5
    {
        Windows::Win32::Direct3D11::D3D11_SHARED_RESOURCE_TIER SharedResourceTier;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct CD3D11_VIDEO_DEFAULT
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    union D3D11_AUTHENTICATED_PROTECTION_FLAGS
    {
        struct _Flags_e__Struct
        {
            uint32_t _bitfield;
        };
        _Flags_e__Struct Flags;
        uint32_t Value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_MESSAGE
    {
        Windows::Win32::Direct3D11::D3D11_MESSAGE_CATEGORY Category;
        Windows::Win32::Direct3D11::D3D11_MESSAGE_SEVERITY Severity;
        Windows::Win32::Direct3D11::D3D11_MESSAGE_ID ID;
        int8_t* pDescription;
        size_t DescriptionByteLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_INFO_QUEUE_FILTER_DESC
    {
        uint32_t NumCategories;
        Windows::Win32::Direct3D11::D3D11_MESSAGE_CATEGORY* pCategoryList;
        uint32_t NumSeverities;
        Windows::Win32::Direct3D11::D3D11_MESSAGE_SEVERITY* pSeverityList;
        uint32_t NumIDs;
        Windows::Win32::Direct3D11::D3D11_MESSAGE_ID* pIDList;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_INFO_QUEUE_FILTER
    {
        Windows::Win32::Direct3D11::D3D11_INFO_QUEUE_FILTER_DESC AllowList;
        Windows::Win32::Direct3D11::D3D11_INFO_QUEUE_FILTER_DESC DenyList;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_RENDER_TARGET_BLEND_DESC1
    {
        Windows::Win32::SystemServices::BOOL BlendEnable;
        Windows::Win32::SystemServices::BOOL LogicOpEnable;
        Windows::Win32::Direct3D11::D3D11_BLEND SrcBlend;
        Windows::Win32::Direct3D11::D3D11_BLEND DestBlend;
        Windows::Win32::Direct3D11::D3D11_BLEND_OP BlendOp;
        Windows::Win32::Direct3D11::D3D11_BLEND SrcBlendAlpha;
        Windows::Win32::Direct3D11::D3D11_BLEND DestBlendAlpha;
        Windows::Win32::Direct3D11::D3D11_BLEND_OP BlendOpAlpha;
        Windows::Win32::Direct3D11::D3D11_LOGIC_OP LogicOp;
        uint8_t RenderTargetWriteMask;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_BLEND_DESC1
    {
        Windows::Win32::SystemServices::BOOL AlphaToCoverageEnable;
        Windows::Win32::SystemServices::BOOL IndependentBlendEnable;
        Windows::Win32::Direct3D11::D3D11_RENDER_TARGET_BLEND_DESC1 RenderTarget[8];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_RASTERIZER_DESC1
    {
        Windows::Win32::Direct3D11::D3D11_FILL_MODE FillMode;
        Windows::Win32::Direct3D11::D3D11_CULL_MODE CullMode;
        Windows::Win32::SystemServices::BOOL FrontCounterClockwise;
        int32_t DepthBias;
        float DepthBiasClamp;
        float SlopeScaledDepthBias;
        Windows::Win32::SystemServices::BOOL DepthClipEnable;
        Windows::Win32::SystemServices::BOOL ScissorEnable;
        Windows::Win32::SystemServices::BOOL MultisampleEnable;
        Windows::Win32::SystemServices::BOOL AntialiasedLineEnable;
        uint32_t ForcedSampleCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_TILED_RESOURCE_COORDINATE
    {
        uint32_t X;
        uint32_t Y;
        uint32_t Z;
        uint32_t Subresource;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_TILE_REGION_SIZE
    {
        uint32_t NumTiles;
        Windows::Win32::SystemServices::BOOL bUseBox;
        uint32_t Width;
        uint16_t Height;
        uint16_t Depth;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_SUBRESOURCE_TILING
    {
        uint32_t WidthInTiles;
        uint16_t HeightInTiles;
        uint16_t DepthInTiles;
        uint32_t StartTileIndexInOverallResource;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_TILE_SHAPE
    {
        uint32_t WidthInTexels;
        uint32_t HeightInTexels;
        uint32_t DepthInTexels;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_PACKED_MIP_DESC
    {
        uint8_t NumStandardMips;
        uint8_t NumPackedMips;
        uint32_t NumTilesForPackedMips;
        uint32_t StartTileIndexInOverallResource;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_TEXTURE2D_DESC1
    {
        uint32_t Width;
        uint32_t Height;
        uint32_t MipLevels;
        uint32_t ArraySize;
        Windows::Win32::Dxgi::DXGI_FORMAT Format;
        Windows::Win32::Dxgi::DXGI_SAMPLE_DESC SampleDesc;
        Windows::Win32::Direct3D11::D3D11_USAGE Usage;
        uint32_t BindFlags;
        uint32_t CPUAccessFlags;
        uint32_t MiscFlags;
        Windows::Win32::Direct3D11::D3D11_TEXTURE_LAYOUT TextureLayout;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_TEXTURE3D_DESC1
    {
        uint32_t Width;
        uint32_t Height;
        uint32_t Depth;
        uint32_t MipLevels;
        Windows::Win32::Dxgi::DXGI_FORMAT Format;
        Windows::Win32::Direct3D11::D3D11_USAGE Usage;
        uint32_t BindFlags;
        uint32_t CPUAccessFlags;
        uint32_t MiscFlags;
        Windows::Win32::Direct3D11::D3D11_TEXTURE_LAYOUT TextureLayout;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_RASTERIZER_DESC2
    {
        Windows::Win32::Direct3D11::D3D11_FILL_MODE FillMode;
        Windows::Win32::Direct3D11::D3D11_CULL_MODE CullMode;
        Windows::Win32::SystemServices::BOOL FrontCounterClockwise;
        int32_t DepthBias;
        float DepthBiasClamp;
        float SlopeScaledDepthBias;
        Windows::Win32::SystemServices::BOOL DepthClipEnable;
        Windows::Win32::SystemServices::BOOL ScissorEnable;
        Windows::Win32::SystemServices::BOOL MultisampleEnable;
        Windows::Win32::SystemServices::BOOL AntialiasedLineEnable;
        uint32_t ForcedSampleCount;
        Windows::Win32::Direct3D11::D3D11_CONSERVATIVE_RASTERIZATION_MODE ConservativeRaster;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_TEX2D_SRV1
    {
        uint32_t MostDetailedMip;
        uint32_t MipLevels;
        uint32_t PlaneSlice;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_TEX2D_ARRAY_SRV1
    {
        uint32_t MostDetailedMip;
        uint32_t MipLevels;
        uint32_t FirstArraySlice;
        uint32_t ArraySize;
        uint32_t PlaneSlice;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_SHADER_RESOURCE_VIEW_DESC1
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::Direct3D11::D3D11_BUFFER_SRV Buffer;
            Windows::Win32::Direct3D11::D3D11_TEX1D_SRV Texture1D;
            Windows::Win32::Direct3D11::D3D11_TEX1D_ARRAY_SRV Texture1DArray;
            Windows::Win32::Direct3D11::D3D11_TEX2D_SRV1 Texture2D;
            Windows::Win32::Direct3D11::D3D11_TEX2D_ARRAY_SRV1 Texture2DArray;
            Windows::Win32::Direct3D11::D3D11_TEX2DMS_SRV Texture2DMS;
            Windows::Win32::Direct3D11::D3D11_TEX2DMS_ARRAY_SRV Texture2DMSArray;
            Windows::Win32::Direct3D11::D3D11_TEX3D_SRV Texture3D;
            Windows::Win32::Direct3D11::D3D11_TEXCUBE_SRV TextureCube;
            Windows::Win32::Direct3D11::D3D11_TEXCUBE_ARRAY_SRV TextureCubeArray;
            Windows::Win32::Direct3D11::D3D11_BUFFEREX_SRV BufferEx;
        };
        Windows::Win32::Dxgi::DXGI_FORMAT Format;
        Windows::Win32::Direct3D11::D3D_SRV_DIMENSION ViewDimension;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_TEX2D_RTV1
    {
        uint32_t MipSlice;
        uint32_t PlaneSlice;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_TEX2D_ARRAY_RTV1
    {
        uint32_t MipSlice;
        uint32_t FirstArraySlice;
        uint32_t ArraySize;
        uint32_t PlaneSlice;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_RENDER_TARGET_VIEW_DESC1
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::Direct3D11::D3D11_BUFFER_RTV Buffer;
            Windows::Win32::Direct3D11::D3D11_TEX1D_RTV Texture1D;
            Windows::Win32::Direct3D11::D3D11_TEX1D_ARRAY_RTV Texture1DArray;
            Windows::Win32::Direct3D11::D3D11_TEX2D_RTV1 Texture2D;
            Windows::Win32::Direct3D11::D3D11_TEX2D_ARRAY_RTV1 Texture2DArray;
            Windows::Win32::Direct3D11::D3D11_TEX2DMS_RTV Texture2DMS;
            Windows::Win32::Direct3D11::D3D11_TEX2DMS_ARRAY_RTV Texture2DMSArray;
            Windows::Win32::Direct3D11::D3D11_TEX3D_RTV Texture3D;
        };
        Windows::Win32::Dxgi::DXGI_FORMAT Format;
        Windows::Win32::Direct3D11::D3D11_RTV_DIMENSION ViewDimension;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_TEX2D_UAV1
    {
        uint32_t MipSlice;
        uint32_t PlaneSlice;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_TEX2D_ARRAY_UAV1
    {
        uint32_t MipSlice;
        uint32_t FirstArraySlice;
        uint32_t ArraySize;
        uint32_t PlaneSlice;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_UNORDERED_ACCESS_VIEW_DESC1
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::Direct3D11::D3D11_BUFFER_UAV Buffer;
            Windows::Win32::Direct3D11::D3D11_TEX1D_UAV Texture1D;
            Windows::Win32::Direct3D11::D3D11_TEX1D_ARRAY_UAV Texture1DArray;
            Windows::Win32::Direct3D11::D3D11_TEX2D_UAV1 Texture2D;
            Windows::Win32::Direct3D11::D3D11_TEX2D_ARRAY_UAV1 Texture2DArray;
            Windows::Win32::Direct3D11::D3D11_TEX3D_UAV Texture3D;
        };
        Windows::Win32::Dxgi::DXGI_FORMAT Format;
        Windows::Win32::Direct3D11::D3D11_UAV_DIMENSION ViewDimension;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_QUERY_DESC1
    {
        Windows::Win32::Direct3D11::D3D11_QUERY Query;
        uint32_t MiscFlags;
        Windows::Win32::Direct3D11::D3D11_CONTEXT_TYPE ContextType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D11_VIDEO_DECODER_DESC
    {
        ::win32::guid Guid;
        uint32_t SampleWidth;
        uint32_t SampleHeight;
        Windows::Win32::Dxgi::DXGI_FORMAT OutputFormat;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_FEATURE_DATA_VIDEO_DECODER_HISTOGRAM
    {
        Windows::Win32::MediaFoundation::D3D11_VIDEO_DECODER_DESC DecoderDesc;
        Windows::Win32::Direct3D11::D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAGS Components;
        uint32_t BinCount;
        uint32_t CounterBitDepth;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_VIDEO_DECODER_BUFFER_DESC2
    {
        Windows::Win32::MediaFoundation::D3D11_VIDEO_DECODER_BUFFER_TYPE BufferType;
        uint32_t DataOffset;
        uint32_t DataSize;
        void* pIV;
        uint32_t IVSize;
        Windows::Win32::MediaFoundation::D3D11_VIDEO_DECODER_SUB_SAMPLE_MAPPING_BLOCK* pSubSampleMappingBlock;
        uint32_t SubSampleMappingCount;
        uint32_t cBlocksStripeEncrypted;
        uint32_t cBlocksStripeClear;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_FEATURE_DATA_D3D11_OPTIONS4
    {
        Windows::Win32::SystemServices::BOOL ExtendedNV12SharedTextureSupported;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_SIGNATURE_PARAMETER_DESC
    {
        int8_t* SemanticName;
        uint32_t SemanticIndex;
        uint32_t Register;
        Windows::Win32::Direct3D11::D3D_NAME SystemValueType;
        Windows::Win32::Direct3D11::D3D_REGISTER_COMPONENT_TYPE ComponentType;
        uint8_t Mask;
        uint8_t ReadWriteMask;
        uint32_t Stream;
        Windows::Win32::Direct3D11::D3D_MIN_PRECISION MinPrecision;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_SHADER_BUFFER_DESC
    {
        int8_t* Name;
        Windows::Win32::Direct3D11::D3D_CBUFFER_TYPE Type;
        uint32_t Variables;
        uint32_t Size;
        uint32_t uFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_SHADER_VARIABLE_DESC
    {
        int8_t* Name;
        uint32_t StartOffset;
        uint32_t Size;
        uint32_t uFlags;
        void* DefaultValue;
        uint32_t StartTexture;
        uint32_t TextureSize;
        uint32_t StartSampler;
        uint32_t SamplerSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_SHADER_TYPE_DESC
    {
        Windows::Win32::Direct3D11::D3D_SHADER_VARIABLE_CLASS Class;
        Windows::Win32::Direct3D11::D3D_SHADER_VARIABLE_TYPE Type;
        uint32_t Rows;
        uint32_t Columns;
        uint32_t Elements;
        uint32_t Members;
        uint32_t Offset;
        int8_t* Name;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_SHADER_DESC
    {
        uint32_t Version;
        int8_t* Creator;
        uint32_t Flags;
        uint32_t ConstantBuffers;
        uint32_t BoundResources;
        uint32_t InputParameters;
        uint32_t OutputParameters;
        uint32_t InstructionCount;
        uint32_t TempRegisterCount;
        uint32_t TempArrayCount;
        uint32_t DefCount;
        uint32_t DclCount;
        uint32_t TextureNormalInstructions;
        uint32_t TextureLoadInstructions;
        uint32_t TextureCompInstructions;
        uint32_t TextureBiasInstructions;
        uint32_t TextureGradientInstructions;
        uint32_t FloatInstructionCount;
        uint32_t IntInstructionCount;
        uint32_t UintInstructionCount;
        uint32_t StaticFlowControlCount;
        uint32_t DynamicFlowControlCount;
        uint32_t MacroInstructionCount;
        uint32_t ArrayInstructionCount;
        uint32_t CutInstructionCount;
        uint32_t EmitInstructionCount;
        Windows::Win32::Direct3D11::D3D_PRIMITIVE_TOPOLOGY GSOutputTopology;
        uint32_t GSMaxOutputVertexCount;
        Windows::Win32::Direct3D11::D3D_PRIMITIVE InputPrimitive;
        uint32_t PatchConstantParameters;
        uint32_t cGSInstanceCount;
        uint32_t cControlPoints;
        Windows::Win32::Direct3D11::D3D_TESSELLATOR_OUTPUT_PRIMITIVE HSOutputPrimitive;
        Windows::Win32::Direct3D11::D3D_TESSELLATOR_PARTITIONING HSPartitioning;
        Windows::Win32::Direct3D11::D3D_TESSELLATOR_DOMAIN TessellatorDomain;
        uint32_t cBarrierInstructions;
        uint32_t cInterlockedInstructions;
        uint32_t cTextureStoreInstructions;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_SHADER_INPUT_BIND_DESC
    {
        int8_t* Name;
        Windows::Win32::Direct3D11::D3D_SHADER_INPUT_TYPE Type;
        uint32_t BindPoint;
        uint32_t BindCount;
        uint32_t uFlags;
        Windows::Win32::Direct3D11::D3D_RESOURCE_RETURN_TYPE ReturnType;
        Windows::Win32::Direct3D11::D3D_SRV_DIMENSION Dimension;
        uint32_t NumSamples;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_LIBRARY_DESC
    {
        int8_t* Creator;
        uint32_t Flags;
        uint32_t FunctionCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_FUNCTION_DESC
    {
        uint32_t Version;
        int8_t* Creator;
        uint32_t Flags;
        uint32_t ConstantBuffers;
        uint32_t BoundResources;
        uint32_t InstructionCount;
        uint32_t TempRegisterCount;
        uint32_t TempArrayCount;
        uint32_t DefCount;
        uint32_t DclCount;
        uint32_t TextureNormalInstructions;
        uint32_t TextureLoadInstructions;
        uint32_t TextureCompInstructions;
        uint32_t TextureBiasInstructions;
        uint32_t TextureGradientInstructions;
        uint32_t FloatInstructionCount;
        uint32_t IntInstructionCount;
        uint32_t UintInstructionCount;
        uint32_t StaticFlowControlCount;
        uint32_t DynamicFlowControlCount;
        uint32_t MacroInstructionCount;
        uint32_t ArrayInstructionCount;
        uint32_t MovInstructionCount;
        uint32_t MovcInstructionCount;
        uint32_t ConversionInstructionCount;
        uint32_t BitwiseInstructionCount;
        Windows::Win32::Direct3D11::D3D_FEATURE_LEVEL MinFeatureLevel;
        uint64_t RequiredFeatureFlags;
        int8_t* Name;
        int32_t FunctionParameterCount;
        Windows::Win32::SystemServices::BOOL HasReturn;
        Windows::Win32::SystemServices::BOOL Has10Level9VertexShader;
        Windows::Win32::SystemServices::BOOL Has10Level9PixelShader;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_PARAMETER_DESC
    {
        int8_t* Name;
        int8_t* SemanticName;
        Windows::Win32::Direct3D11::D3D_SHADER_VARIABLE_TYPE Type;
        Windows::Win32::Direct3D11::D3D_SHADER_VARIABLE_CLASS Class;
        uint32_t Rows;
        uint32_t Columns;
        Windows::Win32::Direct3D11::D3D_INTERPOLATION_MODE InterpolationMode;
        Windows::Win32::Direct3D11::D3D_PARAMETER_FLAGS Flags;
        uint32_t FirstInRegister;
        uint32_t FirstInComponent;
        uint32_t FirstOutRegister;
        uint32_t FirstOutComponent;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_VERTEX_SHADER_TRACE_DESC
    {
        uint64_t Invocation;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_HULL_SHADER_TRACE_DESC
    {
        uint64_t Invocation;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_DOMAIN_SHADER_TRACE_DESC
    {
        uint64_t Invocation;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_GEOMETRY_SHADER_TRACE_DESC
    {
        uint64_t Invocation;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_PIXEL_SHADER_TRACE_DESC
    {
        uint64_t Invocation;
        int32_t X;
        int32_t Y;
        uint64_t SampleMask;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_COMPUTE_SHADER_TRACE_DESC
    {
        uint64_t Invocation;
        uint32_t ThreadIDInGroup[3];
        uint32_t ThreadGroupID[3];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_SHADER_TRACE_DESC
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::Direct3D11::D3D11_VERTEX_SHADER_TRACE_DESC VertexShaderTraceDesc;
            Windows::Win32::Direct3D11::D3D11_HULL_SHADER_TRACE_DESC HullShaderTraceDesc;
            Windows::Win32::Direct3D11::D3D11_DOMAIN_SHADER_TRACE_DESC DomainShaderTraceDesc;
            Windows::Win32::Direct3D11::D3D11_GEOMETRY_SHADER_TRACE_DESC GeometryShaderTraceDesc;
            Windows::Win32::Direct3D11::D3D11_PIXEL_SHADER_TRACE_DESC PixelShaderTraceDesc;
            Windows::Win32::Direct3D11::D3D11_COMPUTE_SHADER_TRACE_DESC ComputeShaderTraceDesc;
        };
        Windows::Win32::Direct3D11::D3D11_SHADER_TYPE Type;
        uint32_t Flags;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_TRACE_STATS
    {
        Windows::Win32::Direct3D11::D3D11_SHADER_TRACE_DESC TraceDesc;
        uint8_t NumInvocationsInStamp;
        uint8_t TargetStampIndex;
        uint32_t NumTraceSteps;
        uint8_t InputMask[32];
        uint8_t OutputMask[32];
        uint16_t NumTemps;
        uint16_t MaxIndexableTempIndex;
        uint16_t IndexableTempSize[4096];
        uint16_t ImmediateConstantBufferSize;
        uint32_t PixelPosition[8];
        uint64_t PixelCoverageMask[4];
        uint64_t PixelDiscardedMask[4];
        uint64_t PixelCoverageMaskAfterShader[4];
        uint64_t PixelCoverageMaskAfterA2CSampleMask[4];
        uint64_t PixelCoverageMaskAfterA2CSampleMaskDepth[4];
        uint64_t PixelCoverageMaskAfterA2CSampleMaskDepthStencil[4];
        Windows::Win32::SystemServices::BOOL PSOutputsDepth;
        Windows::Win32::SystemServices::BOOL PSOutputsMask;
        Windows::Win32::Direct3D11::D3D11_TRACE_GS_INPUT_PRIMITIVE GSInputPrimitive;
        Windows::Win32::SystemServices::BOOL GSInputsPrimitiveID;
        uint8_t HSOutputPatchConstantMask[32];
        uint8_t DSInputPatchConstantMask[32];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_TRACE_VALUE
    {
        uint32_t Bits[4];
        uint8_t ValidMask;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_TRACE_REGISTER
    {
        union _Anonymous_e__Union
        {
            uint16_t Index1D;
            uint16_t Index2D[2];
        };
        Windows::Win32::Direct3D11::D3D11_TRACE_REGISTER_TYPE RegType;
        _Anonymous_e__Union Anonymous;
        uint8_t OperandIndex;
        uint8_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3D11_TRACE_STEP
    {
        uint32_t ID;
        Windows::Win32::SystemServices::BOOL InstructionActive;
        uint8_t NumRegistersWritten;
        uint8_t NumRegistersRead;
        uint16_t MiscOperations;
        uint32_t OpcodeType;
        uint64_t CurrentGlobalCycle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3DX11_FFT_DESC
    {
        uint32_t NumDimensions;
        uint32_t ElementLengths[32];
        uint32_t DimensionMask;
        Windows::Win32::Direct3D11::D3DX11_FFT_DATA_TYPE Type;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D11
{
    struct D3DX11_FFT_BUFFER_INFO
    {
        uint32_t NumTempBufferSizes;
        uint32_t TempBufferFloatSizes[4];
        uint32_t NumPrecomputeBufferSizes;
        uint32_t PrecomputeBufferFloatSizes[4];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D11_VIDEO_DECODER_CONFIG
    {
        ::win32::guid guidConfigBitstreamEncryption;
        ::win32::guid guidConfigMBcontrolEncryption;
        ::win32::guid guidConfigResidDiffEncryption;
        uint32_t ConfigBitstreamRaw;
        uint32_t ConfigMBcontrolRasterOrder;
        uint32_t ConfigResidDiffHost;
        uint32_t ConfigSpatialResid8;
        uint32_t ConfigResid8Subtraction;
        uint32_t ConfigSpatialHost8or9Clipping;
        uint32_t ConfigSpatialResidInterleaved;
        uint32_t ConfigIntraResidUnsigned;
        uint32_t ConfigResidDiffAccelerator;
        uint32_t ConfigHostInverseScan;
        uint32_t ConfigSpecificIDCT;
        uint32_t Config4GroupedCoefs;
        uint16_t ConfigMinRenderTargetBuffCount;
        uint16_t ConfigDecoderSpecific;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D11_AES_CTR_IV
    {
        uint64_t IV;
        uint64_t Count;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D11_ENCRYPTED_BLOCK_INFO
    {
        uint32_t NumEncryptedBytesAtBeginning;
        uint32_t NumBytesInSkipPattern;
        uint32_t NumBytesInEncryptPattern;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D11_VIDEO_DECODER_BUFFER_DESC
    {
        Windows::Win32::MediaFoundation::D3D11_VIDEO_DECODER_BUFFER_TYPE BufferType;
        uint32_t BufferIndex;
        uint32_t DataOffset;
        uint32_t DataSize;
        uint32_t FirstMBaddress;
        uint32_t NumMBsInBuffer;
        uint32_t Width;
        uint32_t Height;
        uint32_t Stride;
        uint32_t ReservedBits;
        void* pIV;
        uint32_t IVSize;
        Windows::Win32::SystemServices::BOOL PartialEncryption;
        Windows::Win32::MediaFoundation::D3D11_ENCRYPTED_BLOCK_INFO EncryptedBlockInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D11_VIDEO_DECODER_EXTENSION
    {
        uint32_t Function;
        void* pPrivateInputData;
        uint32_t PrivateInputDataSize;
        void* pPrivateOutputData;
        uint32_t PrivateOutputDataSize;
        uint32_t ResourceCount;
        Windows::Win32::Direct3D11::ID3D11Resource** ppResourceList;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D11_VIDEO_PROCESSOR_CAPS
    {
        uint32_t DeviceCaps;
        uint32_t FeatureCaps;
        uint32_t FilterCaps;
        uint32_t InputFormatCaps;
        uint32_t AutoStreamCaps;
        uint32_t StereoCaps;
        uint32_t RateConversionCapsCount;
        uint32_t MaxInputStreams;
        uint32_t MaxStreamStates;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS
    {
        uint32_t PastFrames;
        uint32_t FutureFrames;
        uint32_t ProcessorCaps;
        uint32_t ITelecineCaps;
        uint32_t CustomRateCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D11_VIDEO_CONTENT_PROTECTION_CAPS
    {
        uint32_t Caps;
        uint32_t KeyExchangeTypeCount;
        uint32_t BlockAlignmentSize;
        uint64_t ProtectedMemorySize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D11_VIDEO_PROCESSOR_CUSTOM_RATE
    {
        Windows::Win32::Dxgi::DXGI_RATIONAL CustomRate;
        uint32_t OutputFrames;
        Windows::Win32::SystemServices::BOOL InputInterlaced;
        uint32_t InputFramesOrFields;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D11_VIDEO_PROCESSOR_FILTER_RANGE
    {
        int32_t Minimum;
        int32_t Maximum;
        int32_t Default;
        float Multiplier;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D11_VIDEO_PROCESSOR_CONTENT_DESC
    {
        Windows::Win32::MediaFoundation::D3D11_VIDEO_FRAME_FORMAT InputFrameFormat;
        Windows::Win32::Dxgi::DXGI_RATIONAL InputFrameRate;
        uint32_t InputWidth;
        uint32_t InputHeight;
        Windows::Win32::Dxgi::DXGI_RATIONAL OutputFrameRate;
        uint32_t OutputWidth;
        uint32_t OutputHeight;
        Windows::Win32::MediaFoundation::D3D11_VIDEO_USAGE Usage;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D11_VIDEO_COLOR_RGBA
    {
        float R;
        float G;
        float B;
        float A;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D11_VIDEO_COLOR_YCbCrA
    {
        float Y;
        float Cb;
        float Cr;
        float A;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D11_VIDEO_COLOR
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::MediaFoundation::D3D11_VIDEO_COLOR_YCbCrA YCbCr;
            Windows::Win32::MediaFoundation::D3D11_VIDEO_COLOR_RGBA RGBA;
        };
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D11_VIDEO_PROCESSOR_COLOR_SPACE
    {
        uint32_t _bitfield;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D11_VIDEO_PROCESSOR_STREAM
    {
        Windows::Win32::SystemServices::BOOL Enable;
        uint32_t OutputIndex;
        uint32_t InputFrameOrField;
        uint32_t PastFrames;
        uint32_t FutureFrames;
        Windows::Win32::MediaFoundation::ID3D11VideoProcessorInputView** ppPastSurfaces;
        Windows::Win32::MediaFoundation::ID3D11VideoProcessorInputView* pInputSurface;
        Windows::Win32::MediaFoundation::ID3D11VideoProcessorInputView** ppFutureSurfaces;
        Windows::Win32::MediaFoundation::ID3D11VideoProcessorInputView** ppPastSurfacesRight;
        Windows::Win32::MediaFoundation::ID3D11VideoProcessorInputView* pInputSurfaceRight;
        Windows::Win32::MediaFoundation::ID3D11VideoProcessorInputView** ppFutureSurfacesRight;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D11_OMAC
    {
        uint8_t Omac[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D11_AUTHENTICATED_QUERY_INPUT
    {
        ::win32::guid QueryType;
        Windows::Win32::SystemServices::HANDLE hChannel;
        uint32_t SequenceNumber;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D11_AUTHENTICATED_QUERY_OUTPUT
    {
        Windows::Win32::MediaFoundation::D3D11_OMAC omac;
        ::win32::guid QueryType;
        Windows::Win32::SystemServices::HANDLE hChannel;
        uint32_t SequenceNumber;
        int32_t ReturnCode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D11_AUTHENTICATED_QUERY_PROTECTION_OUTPUT
    {
        Windows::Win32::MediaFoundation::D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
        Windows::Win32::Direct3D11::D3D11_AUTHENTICATED_PROTECTION_FLAGS ProtectionFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT
    {
        Windows::Win32::MediaFoundation::D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
        Windows::Win32::MediaFoundation::D3D11_AUTHENTICATED_CHANNEL_TYPE ChannelType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT
    {
        Windows::Win32::MediaFoundation::D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
        Windows::Win32::SystemServices::HANDLE DeviceHandle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT
    {
        Windows::Win32::MediaFoundation::D3D11_AUTHENTICATED_QUERY_INPUT Input;
        Windows::Win32::SystemServices::HANDLE DecoderHandle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT
    {
        Windows::Win32::MediaFoundation::D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
        Windows::Win32::SystemServices::HANDLE DecoderHandle;
        Windows::Win32::SystemServices::HANDLE CryptoSessionHandle;
        Windows::Win32::SystemServices::HANDLE DeviceHandle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT
    {
        Windows::Win32::MediaFoundation::D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
        uint32_t RestrictedSharedResourceProcessCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT
    {
        Windows::Win32::MediaFoundation::D3D11_AUTHENTICATED_QUERY_INPUT Input;
        uint32_t ProcessIndex;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT
    {
        Windows::Win32::MediaFoundation::D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
        uint32_t ProcessIndex;
        Windows::Win32::MediaFoundation::D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE ProcessIdentifier;
        Windows::Win32::SystemServices::HANDLE ProcessHandle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT
    {
        Windows::Win32::MediaFoundation::D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
        uint32_t UnrestrictedProtectedSharedResourceCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT
    {
        Windows::Win32::MediaFoundation::D3D11_AUTHENTICATED_QUERY_INPUT Input;
        Windows::Win32::SystemServices::HANDLE DeviceHandle;
        Windows::Win32::SystemServices::HANDLE CryptoSessionHandle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT
    {
        Windows::Win32::MediaFoundation::D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
        Windows::Win32::SystemServices::HANDLE DeviceHandle;
        Windows::Win32::SystemServices::HANDLE CryptoSessionHandle;
        uint32_t OutputIDCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_INPUT
    {
        Windows::Win32::MediaFoundation::D3D11_AUTHENTICATED_QUERY_INPUT Input;
        Windows::Win32::SystemServices::HANDLE DeviceHandle;
        Windows::Win32::SystemServices::HANDLE CryptoSessionHandle;
        uint32_t OutputIDIndex;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT
    {
        Windows::Win32::MediaFoundation::D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
        Windows::Win32::SystemServices::HANDLE DeviceHandle;
        Windows::Win32::SystemServices::HANDLE CryptoSessionHandle;
        uint32_t OutputIDIndex;
        uint64_t OutputID;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_OUTPUT
    {
        Windows::Win32::MediaFoundation::D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
        Windows::Win32::MediaFoundation::D3D11_BUS_TYPE BusType;
        Windows::Win32::SystemServices::BOOL AccessibleInContiguousBlocks;
        Windows::Win32::SystemServices::BOOL AccessibleInNonContiguousBlocks;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT
    {
        Windows::Win32::MediaFoundation::D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
        uint32_t EncryptionGuidCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT
    {
        Windows::Win32::MediaFoundation::D3D11_AUTHENTICATED_QUERY_INPUT Input;
        uint32_t EncryptionGuidIndex;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT
    {
        Windows::Win32::MediaFoundation::D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
        uint32_t EncryptionGuidIndex;
        ::win32::guid EncryptionGuid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D11_AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT
    {
        Windows::Win32::MediaFoundation::D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
        ::win32::guid EncryptionGuid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D11_AUTHENTICATED_CONFIGURE_INPUT
    {
        Windows::Win32::MediaFoundation::D3D11_OMAC omac;
        ::win32::guid ConfigureType;
        Windows::Win32::SystemServices::HANDLE hChannel;
        uint32_t SequenceNumber;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D11_AUTHENTICATED_CONFIGURE_OUTPUT
    {
        Windows::Win32::MediaFoundation::D3D11_OMAC omac;
        ::win32::guid ConfigureType;
        Windows::Win32::SystemServices::HANDLE hChannel;
        uint32_t SequenceNumber;
        int32_t ReturnCode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT
    {
        Windows::Win32::MediaFoundation::D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters;
        uint32_t StartSequenceQuery;
        uint32_t StartSequenceConfigure;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D11_AUTHENTICATED_CONFIGURE_PROTECTION_INPUT
    {
        Windows::Win32::MediaFoundation::D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters;
        Windows::Win32::Direct3D11::D3D11_AUTHENTICATED_PROTECTION_FLAGS Protections;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT
    {
        Windows::Win32::MediaFoundation::D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters;
        Windows::Win32::SystemServices::HANDLE DecoderHandle;
        Windows::Win32::SystemServices::HANDLE CryptoSessionHandle;
        Windows::Win32::SystemServices::HANDLE DeviceHandle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT
    {
        Windows::Win32::MediaFoundation::D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters;
        Windows::Win32::MediaFoundation::D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE ProcessType;
        Windows::Win32::SystemServices::HANDLE ProcessHandle;
        Windows::Win32::SystemServices::BOOL AllowAccess;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D11_AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT
    {
        Windows::Win32::MediaFoundation::D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters;
        ::win32::guid EncryptionGuid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D11_TEX2D_VDOV
    {
        uint32_t ArraySlice;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::MediaFoundation::D3D11_TEX2D_VDOV Texture2D;
        };
        ::win32::guid DecodeProfile;
        Windows::Win32::MediaFoundation::D3D11_VDOV_DIMENSION ViewDimension;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D11_TEX2D_VPIV
    {
        uint32_t MipSlice;
        uint32_t ArraySlice;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::MediaFoundation::D3D11_TEX2D_VPIV Texture2D;
        };
        uint32_t FourCC;
        Windows::Win32::MediaFoundation::D3D11_VPIV_DIMENSION ViewDimension;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D11_TEX2D_VPOV
    {
        uint32_t MipSlice;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D11_TEX2D_ARRAY_VPOV
    {
        uint32_t MipSlice;
        uint32_t FirstArraySlice;
        uint32_t ArraySize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::MediaFoundation::D3D11_TEX2D_VPOV Texture2D;
            Windows::Win32::MediaFoundation::D3D11_TEX2D_ARRAY_VPOV Texture2DArray;
        };
        Windows::Win32::MediaFoundation::D3D11_VPOV_DIMENSION ViewDimension;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D11_VIDEO_DECODER_SUB_SAMPLE_MAPPING_BLOCK
    {
        uint32_t ClearSize;
        uint32_t EncryptedSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D11_VIDEO_DECODER_BUFFER_DESC1
    {
        Windows::Win32::MediaFoundation::D3D11_VIDEO_DECODER_BUFFER_TYPE BufferType;
        uint32_t DataOffset;
        uint32_t DataSize;
        void* pIV;
        uint32_t IVSize;
        Windows::Win32::MediaFoundation::D3D11_VIDEO_DECODER_SUB_SAMPLE_MAPPING_BLOCK* pSubSampleMappingBlock;
        uint32_t SubSampleMappingCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D11_VIDEO_DECODER_BEGIN_FRAME_CRYPTO_SESSION
    {
        Windows::Win32::MediaFoundation::ID3D11CryptoSession* pCryptoSession;
        uint32_t BlobSize;
        void* pBlob;
        ::win32::guid* pKeyInfoId;
        uint32_t PrivateDataSize;
        void* pPrivateData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D11_VIDEO_PROCESSOR_STREAM_BEHAVIOR_HINT
    {
        Windows::Win32::SystemServices::BOOL Enable;
        uint32_t Width;
        uint32_t Height;
        Windows::Win32::Dxgi::DXGI_FORMAT Format;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D11_KEY_EXCHANGE_HW_PROTECTION_INPUT_DATA
    {
        uint32_t PrivateDataSize;
        uint32_t HWProtectionDataSize;
        uint8_t pbInput[4];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D11_KEY_EXCHANGE_HW_PROTECTION_OUTPUT_DATA
    {
        uint32_t PrivateDataSize;
        uint32_t MaxHWProtectionDataSize;
        uint32_t HWProtectionDataSize;
        uint64_t TransportTime;
        uint64_t ExecutionTime;
        uint8_t pbOutput[4];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D11_KEY_EXCHANGE_HW_PROTECTION_DATA
    {
        uint32_t HWProtectionFunctionID;
        Windows::Win32::MediaFoundation::D3D11_KEY_EXCHANGE_HW_PROTECTION_INPUT_DATA* pInputData;
        Windows::Win32::MediaFoundation::D3D11_KEY_EXCHANGE_HW_PROTECTION_OUTPUT_DATA* pOutputData;
        int32_t Status;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3D11_VIDEO_SAMPLE_DESC
    {
        uint32_t Width;
        uint32_t Height;
        Windows::Win32::Dxgi::DXGI_FORMAT Format;
        Windows::Win32::Dxgi::DXGI_COLOR_SPACE_TYPE ColorSpace;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsRemoteManagement
{
    struct WSMAN_DATA_TEXT
    {
        uint32_t bufferLength;
        uint16_t* buffer;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsRemoteManagement
{
    struct WSMAN_DATA_BINARY
    {
        uint32_t dataLength;
        uint8_t* data;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsRemoteManagement
{
    struct WSMAN_DATA
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::WindowsRemoteManagement::WSMAN_DATA_TEXT text;
            Windows::Win32::WindowsRemoteManagement::WSMAN_DATA_BINARY binaryData;
            uint32_t number;
        };
        Windows::Win32::WindowsRemoteManagement::WSManDataType type;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsRemoteManagement
{
    struct WSMAN_ERROR
    {
        uint32_t code;
        uint16_t* errorDetail;
        uint16_t* language;
        uint16_t* machineName;
        uint16_t* pluginName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsRemoteManagement
{
    struct WSMAN_USERNAME_PASSWORD_CREDS
    {
        uint16_t* username;
        uint16_t* password;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsRemoteManagement
{
    struct WSMAN_AUTHENTICATION_CREDENTIALS
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::WindowsRemoteManagement::WSMAN_USERNAME_PASSWORD_CREDS userAccount;
            uint16_t* certificateThumbprint;
        };
        uint32_t authenticationMechanism;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsRemoteManagement
{
    struct WSMAN_OPTION
    {
        uint16_t* name;
        uint16_t* value;
        Windows::Win32::SystemServices::BOOL mustComply;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsRemoteManagement
{
    struct WSMAN_OPTION_SET
    {
        uint32_t optionsCount;
        Windows::Win32::WindowsRemoteManagement::WSMAN_OPTION* options;
        Windows::Win32::SystemServices::BOOL optionsMustUnderstand;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsRemoteManagement
{
    struct WSMAN_OPTION_SETEX
    {
        uint32_t optionsCount;
        Windows::Win32::WindowsRemoteManagement::WSMAN_OPTION* options;
        Windows::Win32::SystemServices::BOOL optionsMustUnderstand;
        uint16_t** optionTypes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsRemoteManagement
{
    struct WSMAN_KEY
    {
        uint16_t* key;
        uint16_t* value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsRemoteManagement
{
    struct WSMAN_SELECTOR_SET
    {
        uint32_t numberKeys;
        Windows::Win32::WindowsRemoteManagement::WSMAN_KEY* keys;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsRemoteManagement
{
    struct WSMAN_FRAGMENT
    {
        uint16_t* path;
        uint16_t* dialect;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsRemoteManagement
{
    struct WSMAN_FILTER
    {
        uint16_t* filter;
        uint16_t* dialect;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsRemoteManagement
{
    struct WSMAN_OPERATION_INFO
    {
        Windows::Win32::WindowsRemoteManagement::WSMAN_FRAGMENT fragment;
        Windows::Win32::WindowsRemoteManagement::WSMAN_FILTER filter;
        Windows::Win32::WindowsRemoteManagement::WSMAN_SELECTOR_SET selectorSet;
        Windows::Win32::WindowsRemoteManagement::WSMAN_OPTION_SET optionSet;
        void* reserved;
        uint32_t version;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsRemoteManagement
{
    struct WSMAN_OPERATION_INFOEX
    {
        Windows::Win32::WindowsRemoteManagement::WSMAN_FRAGMENT fragment;
        Windows::Win32::WindowsRemoteManagement::WSMAN_FILTER filter;
        Windows::Win32::WindowsRemoteManagement::WSMAN_SELECTOR_SET selectorSet;
        Windows::Win32::WindowsRemoteManagement::WSMAN_OPTION_SETEX optionSet;
        uint32_t version;
        uint16_t* uiLocale;
        uint16_t* dataLocale;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsRemoteManagement
{
    struct WSMAN_API
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsRemoteManagement
{
    struct WSMAN_PROXY_INFO
    {
        uint32_t accessType;
        Windows::Win32::WindowsRemoteManagement::WSMAN_AUTHENTICATION_CREDENTIALS authenticationCredentials;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsRemoteManagement
{
    struct WSMAN_SESSION
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsRemoteManagement
{
    struct WSMAN_OPERATION
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsRemoteManagement
{
    struct WSMAN_SHELL
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsRemoteManagement
{
    struct WSMAN_COMMAND
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsRemoteManagement
{
    struct WSMAN_STREAM_ID_SET
    {
        uint32_t streamIDsCount;
        uint16_t** streamIDs;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsRemoteManagement
{
    struct WSMAN_ENVIRONMENT_VARIABLE
    {
        uint16_t* name;
        uint16_t* value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsRemoteManagement
{
    struct WSMAN_ENVIRONMENT_VARIABLE_SET
    {
        uint32_t varsCount;
        Windows::Win32::WindowsRemoteManagement::WSMAN_ENVIRONMENT_VARIABLE* vars;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsRemoteManagement
{
    struct WSMAN_SHELL_STARTUP_INFO_V10
    {
        Windows::Win32::WindowsRemoteManagement::WSMAN_STREAM_ID_SET* inputStreamSet;
        Windows::Win32::WindowsRemoteManagement::WSMAN_STREAM_ID_SET* outputStreamSet;
        uint32_t idleTimeoutMs;
        uint16_t* workingDirectory;
        Windows::Win32::WindowsRemoteManagement::WSMAN_ENVIRONMENT_VARIABLE_SET* variableSet;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsRemoteManagement
{
    struct WSMAN_SHELL_STARTUP_INFO_V11
    {
        Windows::Win32::WindowsRemoteManagement::WSMAN_SHELL_STARTUP_INFO_V10 __AnonymousBase_wsman_L665_C48;
        uint16_t* name;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsRemoteManagement
{
    struct WSMAN_SHELL_DISCONNECT_INFO
    {
        uint32_t idleTimeoutMs;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsRemoteManagement
{
    struct WSMAN_RECEIVE_DATA_RESULT
    {
        uint16_t* streamId;
        Windows::Win32::WindowsRemoteManagement::WSMAN_DATA streamData;
        uint16_t* commandState;
        uint32_t exitCode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsRemoteManagement
{
    struct WSMAN_CONNECT_DATA
    {
        Windows::Win32::WindowsRemoteManagement::WSMAN_DATA data;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsRemoteManagement
{
    struct WSMAN_CREATE_SHELL_DATA
    {
        Windows::Win32::WindowsRemoteManagement::WSMAN_DATA data;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsRemoteManagement
{
    union WSMAN_RESPONSE_DATA
    {
        Windows::Win32::WindowsRemoteManagement::WSMAN_RECEIVE_DATA_RESULT receiveData;
        Windows::Win32::WindowsRemoteManagement::WSMAN_CONNECT_DATA connectData;
        Windows::Win32::WindowsRemoteManagement::WSMAN_CREATE_SHELL_DATA createData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsRemoteManagement
{
    struct WSMAN_SHELL_ASYNC
    {
        void* operationContext;
        Windows::Win32::WindowsRemoteManagement::WSMAN_SHELL_COMPLETION_FUNCTION* completionFunction;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsRemoteManagement
{
    struct WSMAN_COMMAND_ARG_SET
    {
        uint32_t argsCount;
        uint16_t** args;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsRemoteManagement
{
    struct WSMAN_CERTIFICATE_DETAILS
    {
        uint16_t* subject;
        uint16_t* issuerName;
        uint16_t* issuerThumbprint;
        uint16_t* subjectName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsRemoteManagement
{
    struct WSMAN_SENDER_DETAILS
    {
        uint16_t* senderName;
        uint16_t* authenticationMechanism;
        Windows::Win32::WindowsRemoteManagement::WSMAN_CERTIFICATE_DETAILS* certificateDetails;
        Windows::Win32::SystemServices::HANDLE clientToken;
        uint16_t* httpURL;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsRemoteManagement
{
    struct WSMAN_PLUGIN_REQUEST
    {
        Windows::Win32::WindowsRemoteManagement::WSMAN_SENDER_DETAILS* senderDetails;
        uint16_t* locale;
        uint16_t* resourceUri;
        Windows::Win32::WindowsRemoteManagement::WSMAN_OPERATION_INFO* operationInfo;
        int32_t shutdownNotification;
        Windows::Win32::SystemServices::HANDLE shutdownNotificationHandle;
        uint16_t* dataLocale;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsRemoteManagement
{
    struct WSMAN_AUTHZ_QUOTA
    {
        uint32_t maxAllowedConcurrentShells;
        uint32_t maxAllowedConcurrentOperations;
        uint32_t timeslotSize;
        uint32_t maxAllowedOperationsPerTimeslot;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinRT
{
    struct HSTRING__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinRT
{
    struct HSTRING_HEADER
    {
        union _Reserved_e__Union
        {
            void* Reserved1;
            int8_t Reserved2[20];
        };
        _Reserved_e__Union Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinRT
{
    struct HSTRING_BUFFER__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinRT
{
    struct PDF_RENDER_PARAMS
    {
        Windows::Win32::Direct2D::D2D_RECT_F SourceRect;
        uint32_t DestinationWidth;
        uint32_t DestinationHeight;
        Windows::Win32::Dxgi::DXGI_RGBA BackgroundColor;
        uint8_t IgnoreHighContrast;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinRT
{
    struct NotifyCollectionChangedEventArgs
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinRT
{
    struct TypeName
    {
        intptr_t Name;
        Windows::Win32::WinRT::TypeKind Kind;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinRT
{
    struct __AnonymousRecord_roapi_L45_C9
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinRT
{
    struct APARTMENT_SHUTDOWN_REGISTRATION_COOKIE__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinRT
{
    struct ROPARAMIIDHANDLE__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Wmi
{
    struct SWbemQueryQualifiedName
    {
        uint32_t m_uVersion;
        uint32_t m_uTokenType;
        uint32_t m_uNameListSize;
        uint16_t** m_ppszNameList;
        Windows::Win32::SystemServices::BOOL m_bArraysUsed;
        int32_t* m_pbArrayElUsed;
        uint32_t* m_puArrayIndex;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Wmi
{
    union tag_SWbemRpnConst
    {
        uint16_t* m_pszStrVal;
        Windows::Win32::SystemServices::BOOL m_bBoolVal;
        int32_t m_lLongVal;
        uint32_t m_uLongVal;
        double m_dblVal;
        int64_t m_lVal64;
        int64_t m_uVal64;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Wmi
{
    struct SWbemRpnQueryToken
    {
        uint32_t m_uVersion;
        uint32_t m_uTokenType;
        uint32_t m_uSubexpressionShape;
        uint32_t m_uOperator;
        Windows::Win32::Wmi::SWbemQueryQualifiedName* m_pRightIdent;
        Windows::Win32::Wmi::SWbemQueryQualifiedName* m_pLeftIdent;
        uint32_t m_uConstApparentType;
        Windows::Win32::Wmi::tag_SWbemRpnConst m_Const;
        uint32_t m_uConst2ApparentType;
        Windows::Win32::Wmi::tag_SWbemRpnConst m_Const2;
        uint16_t* m_pszRightFunc;
        uint16_t* m_pszLeftFunc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Wmi
{
    struct tag_SWbemRpnTokenList
    {
        uint32_t m_uVersion;
        uint32_t m_uTokenType;
        uint32_t m_uNumTokens;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Wmi
{
    struct SWbemRpnEncodedQuery
    {
        uint32_t m_uVersion;
        uint32_t m_uTokenType;
        uint64_t m_uParsedFeatureMask;
        uint32_t m_uDetectedArraySize;
        uint32_t* m_puDetectedFeatures;
        uint32_t m_uSelectListSize;
        Windows::Win32::Wmi::SWbemQueryQualifiedName** m_ppSelectList;
        uint32_t m_uFromTargetType;
        uint16_t* m_pszOptionalFromPath;
        uint32_t m_uFromListSize;
        uint16_t** m_ppszFromList;
        uint32_t m_uWhereClauseSize;
        Windows::Win32::Wmi::SWbemRpnQueryToken** m_ppRpnWhereClause;
        double m_dblWithinPolling;
        double m_dblWithinWindow;
        uint32_t m_uOrderByListSize;
        uint16_t** m_ppszOrderByList;
        uint32_t* m_uOrderDirectionEl;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Wmi
{
    struct tag_SWbemAnalysisMatrix
    {
        uint32_t m_uVersion;
        uint32_t m_uMatrixType;
        uint16_t* m_pszProperty;
        uint32_t m_uPropertyType;
        uint32_t m_uEntries;
        void** m_pValues;
        int32_t* m_pbTruthTable;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Wmi
{
    struct tag_SWbemAnalysisMatrixList
    {
        uint32_t m_uVersion;
        uint32_t m_uMatrixType;
        uint32_t m_uNumMatrices;
        Windows::Win32::Wmi::tag_SWbemAnalysisMatrix* m_pMatrices;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Wmi
{
    struct SWbemAssocQueryInf
    {
        uint32_t m_uVersion;
        uint32_t m_uAnalysisType;
        uint32_t m_uFeatureMask;
        Windows::Win32::Wmi::IWbemPath* m_pPath;
        uint16_t* m_pszPath;
        uint16_t* m_pszQueryText;
        uint16_t* m_pszResultClass;
        uint16_t* m_pszAssocClass;
        uint16_t* m_pszRole;
        uint16_t* m_pszResultRole;
        uint16_t* m_pszRequiredQualifier;
        uint16_t* m_pszRequiredAssocQualifier;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Wmi
{
    struct WBEM_COMPILE_STATUS_INFO
    {
        int32_t lPhaseError;
        int32_t hRes;
        int32_t ObjectNum;
        int32_t FirstLine;
        int32_t LastLine;
        uint32_t dwOutFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct WAITCHAIN_NODE_INFO
    {
        union _Anonymous_e__Union
        {
            struct _LockObject_e__Struct
            {
                uint16_t ObjectName[128];
                Windows::Win32::SystemServices::LARGE_INTEGER Timeout;
                Windows::Win32::SystemServices::BOOL Alertable;
            };
            struct _ThreadObject_e__Struct
            {
                uint32_t ProcessId;
                uint32_t ThreadId;
                uint32_t WaitTime;
                uint32_t ContextSwitches;
            };
            _LockObject_e__Struct LockObject;
            _ThreadObject_e__Struct ThreadObject;
        };
        Windows::Win32::Debug::WCT_OBJECT_TYPE ObjectType;
        Windows::Win32::Debug::WCT_OBJECT_STATUS ObjectStatus;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_LOCATION_DESCRIPTOR
    {
        uint32_t DataSize;
        uint32_t Rva;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_LOCATION_DESCRIPTOR64
    {
        uint64_t DataSize;
        uint64_t Rva;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_MEMORY_DESCRIPTOR
    {
        uint64_t StartOfMemoryRange;
        Windows::Win32::Debug::MINIDUMP_LOCATION_DESCRIPTOR Memory;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_MEMORY_DESCRIPTOR64
    {
        uint64_t StartOfMemoryRange;
        uint64_t DataSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_HEADER
    {
        union _Anonymous_e__Union
        {
            uint32_t Reserved;
            uint32_t TimeDateStamp;
        };
        uint32_t Signature;
        uint32_t Version;
        uint32_t NumberOfStreams;
        uint32_t StreamDirectoryRva;
        uint32_t CheckSum;
        _Anonymous_e__Union Anonymous;
        uint64_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_DIRECTORY
    {
        uint32_t StreamType;
        Windows::Win32::Debug::MINIDUMP_LOCATION_DESCRIPTOR Location;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_STRING
    {
        uint32_t Length;
        uint16_t Buffer[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    union CPU_INFORMATION
    {
        struct _X86CpuInfo_e__Struct
        {
            uint32_t VendorId[3];
            uint32_t VersionInformation;
            uint32_t FeatureInformation;
            uint32_t AMDExtendedCpuFeatures;
        };
        struct _OtherCpuInfo_e__Struct
        {
            uint64_t ProcessorFeatures[2];
        };
        _X86CpuInfo_e__Struct X86CpuInfo;
        _OtherCpuInfo_e__Struct OtherCpuInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_SYSTEM_INFO
    {
        union _Anonymous1_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint8_t NumberOfProcessors;
                uint8_t ProductType;
            };
            uint16_t Reserved0;
            _Anonymous_e__Struct Anonymous;
        };
        union _Anonymous2_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint16_t SuiteMask;
                uint16_t Reserved2;
            };
            uint32_t Reserved1;
            _Anonymous_e__Struct Anonymous;
        };
        uint16_t ProcessorArchitecture;
        uint16_t ProcessorLevel;
        uint16_t ProcessorRevision;
        _Anonymous1_e__Union Anonymous1;
        uint32_t MajorVersion;
        uint32_t MinorVersion;
        uint32_t BuildNumber;
        uint32_t PlatformId;
        uint32_t CSDVersionRva;
        _Anonymous2_e__Union Anonymous2;
        Windows::Win32::Debug::CPU_INFORMATION Cpu;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_THREAD
    {
        uint32_t ThreadId;
        uint32_t SuspendCount;
        uint32_t PriorityClass;
        uint32_t Priority;
        uint64_t Teb;
        Windows::Win32::Debug::MINIDUMP_MEMORY_DESCRIPTOR Stack;
        Windows::Win32::Debug::MINIDUMP_LOCATION_DESCRIPTOR ThreadContext;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_THREAD_LIST
    {
        uint32_t NumberOfThreads;
        Windows::Win32::Debug::MINIDUMP_THREAD Threads[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_THREAD_EX
    {
        uint32_t ThreadId;
        uint32_t SuspendCount;
        uint32_t PriorityClass;
        uint32_t Priority;
        uint64_t Teb;
        Windows::Win32::Debug::MINIDUMP_MEMORY_DESCRIPTOR Stack;
        Windows::Win32::Debug::MINIDUMP_LOCATION_DESCRIPTOR ThreadContext;
        Windows::Win32::Debug::MINIDUMP_MEMORY_DESCRIPTOR BackingStore;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_THREAD_EX_LIST
    {
        uint32_t NumberOfThreads;
        Windows::Win32::Debug::MINIDUMP_THREAD_EX Threads[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_EXCEPTION
    {
        uint32_t ExceptionCode;
        uint32_t ExceptionFlags;
        uint64_t ExceptionRecord;
        uint64_t ExceptionAddress;
        uint32_t NumberParameters;
        uint32_t __unusedAlignment;
        uint64_t ExceptionInformation[15];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_EXCEPTION_STREAM
    {
        uint32_t ThreadId;
        uint32_t __alignment;
        Windows::Win32::Debug::MINIDUMP_EXCEPTION ExceptionRecord;
        Windows::Win32::Debug::MINIDUMP_LOCATION_DESCRIPTOR ThreadContext;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_MODULE
    {
        uint64_t BaseOfImage;
        uint32_t SizeOfImage;
        uint32_t CheckSum;
        uint32_t TimeDateStamp;
        uint32_t ModuleNameRva;
        Windows::Win32::MenusAndResources::VS_FIXEDFILEINFO VersionInfo;
        Windows::Win32::Debug::MINIDUMP_LOCATION_DESCRIPTOR CvRecord;
        Windows::Win32::Debug::MINIDUMP_LOCATION_DESCRIPTOR MiscRecord;
        uint64_t Reserved0;
        uint64_t Reserved1;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_MODULE_LIST
    {
        uint32_t NumberOfModules;
        Windows::Win32::Debug::MINIDUMP_MODULE Modules[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_MEMORY_LIST
    {
        uint32_t NumberOfMemoryRanges;
        Windows::Win32::Debug::MINIDUMP_MEMORY_DESCRIPTOR MemoryRanges[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_MEMORY64_LIST
    {
        uint64_t NumberOfMemoryRanges;
        uint64_t BaseRva;
        Windows::Win32::Debug::MINIDUMP_MEMORY_DESCRIPTOR64 MemoryRanges[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_EXCEPTION_INFORMATION
    {
        uint32_t ThreadId;
        Windows::Win32::Debug::EXCEPTION_POINTERS* ExceptionPointers;
        Windows::Win32::SystemServices::BOOL ClientPointers;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_EXCEPTION_INFORMATION64
    {
        uint32_t ThreadId;
        uint64_t ExceptionRecord;
        uint64_t ContextRecord;
        Windows::Win32::SystemServices::BOOL ClientPointers;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_HANDLE_OBJECT_INFORMATION
    {
        uint32_t NextInfoRva;
        uint32_t InfoType;
        uint32_t SizeOfInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_HANDLE_DESCRIPTOR
    {
        uint64_t Handle;
        uint32_t TypeNameRva;
        uint32_t ObjectNameRva;
        uint32_t Attributes;
        uint32_t GrantedAccess;
        uint32_t HandleCount;
        uint32_t PointerCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_HANDLE_DESCRIPTOR_2
    {
        uint64_t Handle;
        uint32_t TypeNameRva;
        uint32_t ObjectNameRva;
        uint32_t Attributes;
        uint32_t GrantedAccess;
        uint32_t HandleCount;
        uint32_t PointerCount;
        uint32_t ObjectInfoRva;
        uint32_t Reserved0;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_HANDLE_DATA_STREAM
    {
        uint32_t SizeOfHeader;
        uint32_t SizeOfDescriptor;
        uint32_t NumberOfDescriptors;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_HANDLE_OPERATION_LIST
    {
        uint32_t SizeOfHeader;
        uint32_t SizeOfEntry;
        uint32_t NumberOfEntries;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_FUNCTION_TABLE_DESCRIPTOR
    {
        uint64_t MinimumAddress;
        uint64_t MaximumAddress;
        uint64_t BaseAddress;
        uint32_t EntryCount;
        uint32_t SizeOfAlignPad;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_FUNCTION_TABLE_STREAM
    {
        uint32_t SizeOfHeader;
        uint32_t SizeOfDescriptor;
        uint32_t SizeOfNativeDescriptor;
        uint32_t SizeOfFunctionEntry;
        uint32_t NumberOfDescriptors;
        uint32_t SizeOfAlignPad;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_UNLOADED_MODULE
    {
        uint64_t BaseOfImage;
        uint32_t SizeOfImage;
        uint32_t CheckSum;
        uint32_t TimeDateStamp;
        uint32_t ModuleNameRva;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_UNLOADED_MODULE_LIST
    {
        uint32_t SizeOfHeader;
        uint32_t SizeOfEntry;
        uint32_t NumberOfEntries;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct XSTATE_CONFIG_FEATURE_MSC_INFO
    {
        uint32_t SizeOfInfo;
        uint32_t ContextSize;
        uint64_t EnabledFeatures;
        Windows::Win32::SystemServices::XSTATE_FEATURE Features[64];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_MISC_INFO
    {
        uint32_t SizeOfInfo;
        uint32_t Flags1;
        uint32_t ProcessId;
        uint32_t ProcessCreateTime;
        uint32_t ProcessUserTime;
        uint32_t ProcessKernelTime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_MISC_INFO_2
    {
        uint32_t SizeOfInfo;
        uint32_t Flags1;
        uint32_t ProcessId;
        uint32_t ProcessCreateTime;
        uint32_t ProcessUserTime;
        uint32_t ProcessKernelTime;
        uint32_t ProcessorMaxMhz;
        uint32_t ProcessorCurrentMhz;
        uint32_t ProcessorMhzLimit;
        uint32_t ProcessorMaxIdleState;
        uint32_t ProcessorCurrentIdleState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_MISC_INFO_3
    {
        uint32_t SizeOfInfo;
        uint32_t Flags1;
        uint32_t ProcessId;
        uint32_t ProcessCreateTime;
        uint32_t ProcessUserTime;
        uint32_t ProcessKernelTime;
        uint32_t ProcessorMaxMhz;
        uint32_t ProcessorCurrentMhz;
        uint32_t ProcessorMhzLimit;
        uint32_t ProcessorMaxIdleState;
        uint32_t ProcessorCurrentIdleState;
        uint32_t ProcessIntegrityLevel;
        uint32_t ProcessExecuteFlags;
        uint32_t ProtectedProcess;
        uint32_t TimeZoneId;
        Windows::Win32::WindowsProgramming::TIME_ZONE_INFORMATION TimeZone;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_MISC_INFO_4
    {
        uint32_t SizeOfInfo;
        uint32_t Flags1;
        uint32_t ProcessId;
        uint32_t ProcessCreateTime;
        uint32_t ProcessUserTime;
        uint32_t ProcessKernelTime;
        uint32_t ProcessorMaxMhz;
        uint32_t ProcessorCurrentMhz;
        uint32_t ProcessorMhzLimit;
        uint32_t ProcessorMaxIdleState;
        uint32_t ProcessorCurrentIdleState;
        uint32_t ProcessIntegrityLevel;
        uint32_t ProcessExecuteFlags;
        uint32_t ProtectedProcess;
        uint32_t TimeZoneId;
        Windows::Win32::WindowsProgramming::TIME_ZONE_INFORMATION TimeZone;
        uint16_t BuildString[260];
        uint16_t DbgBldStr[40];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_MISC_INFO_5
    {
        uint32_t SizeOfInfo;
        uint32_t Flags1;
        uint32_t ProcessId;
        uint32_t ProcessCreateTime;
        uint32_t ProcessUserTime;
        uint32_t ProcessKernelTime;
        uint32_t ProcessorMaxMhz;
        uint32_t ProcessorCurrentMhz;
        uint32_t ProcessorMhzLimit;
        uint32_t ProcessorMaxIdleState;
        uint32_t ProcessorCurrentIdleState;
        uint32_t ProcessIntegrityLevel;
        uint32_t ProcessExecuteFlags;
        uint32_t ProtectedProcess;
        uint32_t TimeZoneId;
        Windows::Win32::WindowsProgramming::TIME_ZONE_INFORMATION TimeZone;
        uint16_t BuildString[260];
        uint16_t DbgBldStr[40];
        Windows::Win32::Debug::XSTATE_CONFIG_FEATURE_MSC_INFO XStateData;
        uint32_t ProcessCookie;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_MEMORY_INFO
    {
        uint64_t BaseAddress;
        uint64_t AllocationBase;
        uint32_t AllocationProtect;
        uint32_t __alignment1;
        uint64_t RegionSize;
        uint32_t State;
        uint32_t Protect;
        uint32_t Type;
        uint32_t __alignment2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_MEMORY_INFO_LIST
    {
        uint32_t SizeOfHeader;
        uint32_t SizeOfEntry;
        uint64_t NumberOfEntries;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_THREAD_NAME
    {
        uint32_t ThreadId;
        uint64_t RvaOfThreadName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_THREAD_NAME_LIST
    {
        uint32_t NumberOfThreadNames;
        Windows::Win32::Debug::MINIDUMP_THREAD_NAME ThreadNames[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_THREAD_INFO
    {
        uint32_t ThreadId;
        uint32_t DumpFlags;
        uint32_t DumpError;
        uint32_t ExitStatus;
        uint64_t CreateTime;
        uint64_t ExitTime;
        uint64_t KernelTime;
        uint64_t UserTime;
        uint64_t StartAddress;
        uint64_t Affinity;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_THREAD_INFO_LIST
    {
        uint32_t SizeOfHeader;
        uint32_t SizeOfEntry;
        uint32_t NumberOfEntries;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_TOKEN_INFO_HEADER
    {
        uint32_t TokenSize;
        uint32_t TokenId;
        uint64_t TokenHandle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_TOKEN_INFO_LIST
    {
        uint32_t TokenListSize;
        uint32_t TokenListEntries;
        uint32_t ListHeaderSize;
        uint32_t ElementHeaderSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_SYSTEM_BASIC_INFORMATION
    {
        uint32_t TimerResolution;
        uint32_t PageSize;
        uint32_t NumberOfPhysicalPages;
        uint32_t LowestPhysicalPageNumber;
        uint32_t HighestPhysicalPageNumber;
        uint32_t AllocationGranularity;
        uint64_t MinimumUserModeAddress;
        uint64_t MaximumUserModeAddress;
        uint64_t ActiveProcessorsAffinityMask;
        uint32_t NumberOfProcessors;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_SYSTEM_FILECACHE_INFORMATION
    {
        uint64_t CurrentSize;
        uint64_t PeakSize;
        uint32_t PageFaultCount;
        uint64_t MinimumWorkingSet;
        uint64_t MaximumWorkingSet;
        uint64_t CurrentSizeIncludingTransitionInPages;
        uint64_t PeakSizeIncludingTransitionInPages;
        uint32_t TransitionRePurposeCount;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_SYSTEM_BASIC_PERFORMANCE_INFORMATION
    {
        uint64_t AvailablePages;
        uint64_t CommittedPages;
        uint64_t CommitLimit;
        uint64_t PeakCommitment;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_SYSTEM_PERFORMANCE_INFORMATION
    {
        uint64_t IdleProcessTime;
        uint64_t IoReadTransferCount;
        uint64_t IoWriteTransferCount;
        uint64_t IoOtherTransferCount;
        uint32_t IoReadOperationCount;
        uint32_t IoWriteOperationCount;
        uint32_t IoOtherOperationCount;
        uint32_t AvailablePages;
        uint32_t CommittedPages;
        uint32_t CommitLimit;
        uint32_t PeakCommitment;
        uint32_t PageFaultCount;
        uint32_t CopyOnWriteCount;
        uint32_t TransitionCount;
        uint32_t CacheTransitionCount;
        uint32_t DemandZeroCount;
        uint32_t PageReadCount;
        uint32_t PageReadIoCount;
        uint32_t CacheReadCount;
        uint32_t CacheIoCount;
        uint32_t DirtyPagesWriteCount;
        uint32_t DirtyWriteIoCount;
        uint32_t MappedPagesWriteCount;
        uint32_t MappedWriteIoCount;
        uint32_t PagedPoolPages;
        uint32_t NonPagedPoolPages;
        uint32_t PagedPoolAllocs;
        uint32_t PagedPoolFrees;
        uint32_t NonPagedPoolAllocs;
        uint32_t NonPagedPoolFrees;
        uint32_t FreeSystemPtes;
        uint32_t ResidentSystemCodePage;
        uint32_t TotalSystemDriverPages;
        uint32_t TotalSystemCodePages;
        uint32_t NonPagedPoolLookasideHits;
        uint32_t PagedPoolLookasideHits;
        uint32_t AvailablePagedPoolPages;
        uint32_t ResidentSystemCachePage;
        uint32_t ResidentPagedPoolPage;
        uint32_t ResidentSystemDriverPage;
        uint32_t CcFastReadNoWait;
        uint32_t CcFastReadWait;
        uint32_t CcFastReadResourceMiss;
        uint32_t CcFastReadNotPossible;
        uint32_t CcFastMdlReadNoWait;
        uint32_t CcFastMdlReadWait;
        uint32_t CcFastMdlReadResourceMiss;
        uint32_t CcFastMdlReadNotPossible;
        uint32_t CcMapDataNoWait;
        uint32_t CcMapDataWait;
        uint32_t CcMapDataNoWaitMiss;
        uint32_t CcMapDataWaitMiss;
        uint32_t CcPinMappedDataCount;
        uint32_t CcPinReadNoWait;
        uint32_t CcPinReadWait;
        uint32_t CcPinReadNoWaitMiss;
        uint32_t CcPinReadWaitMiss;
        uint32_t CcCopyReadNoWait;
        uint32_t CcCopyReadWait;
        uint32_t CcCopyReadNoWaitMiss;
        uint32_t CcCopyReadWaitMiss;
        uint32_t CcMdlReadNoWait;
        uint32_t CcMdlReadWait;
        uint32_t CcMdlReadNoWaitMiss;
        uint32_t CcMdlReadWaitMiss;
        uint32_t CcReadAheadIos;
        uint32_t CcLazyWriteIos;
        uint32_t CcLazyWritePages;
        uint32_t CcDataFlushes;
        uint32_t CcDataPages;
        uint32_t ContextSwitches;
        uint32_t FirstLevelTbFills;
        uint32_t SecondLevelTbFills;
        uint32_t SystemCalls;
        uint64_t CcTotalDirtyPages;
        uint64_t CcDirtyPageThreshold;
        int64_t ResidentAvailablePages;
        uint64_t SharedCommittedPages;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_SYSTEM_MEMORY_INFO_1
    {
        uint16_t Revision;
        uint16_t Flags;
        Windows::Win32::Debug::MINIDUMP_SYSTEM_BASIC_INFORMATION BasicInfo;
        Windows::Win32::Debug::MINIDUMP_SYSTEM_FILECACHE_INFORMATION FileCacheInfo;
        Windows::Win32::Debug::MINIDUMP_SYSTEM_BASIC_PERFORMANCE_INFORMATION BasicPerfInfo;
        Windows::Win32::Debug::MINIDUMP_SYSTEM_PERFORMANCE_INFORMATION PerfInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_PROCESS_VM_COUNTERS_1
    {
        uint16_t Revision;
        uint32_t PageFaultCount;
        uint64_t PeakWorkingSetSize;
        uint64_t WorkingSetSize;
        uint64_t QuotaPeakPagedPoolUsage;
        uint64_t QuotaPagedPoolUsage;
        uint64_t QuotaPeakNonPagedPoolUsage;
        uint64_t QuotaNonPagedPoolUsage;
        uint64_t PagefileUsage;
        uint64_t PeakPagefileUsage;
        uint64_t PrivateUsage;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_PROCESS_VM_COUNTERS_2
    {
        uint16_t Revision;
        uint16_t Flags;
        uint32_t PageFaultCount;
        uint64_t PeakWorkingSetSize;
        uint64_t WorkingSetSize;
        uint64_t QuotaPeakPagedPoolUsage;
        uint64_t QuotaPagedPoolUsage;
        uint64_t QuotaPeakNonPagedPoolUsage;
        uint64_t QuotaNonPagedPoolUsage;
        uint64_t PagefileUsage;
        uint64_t PeakPagefileUsage;
        uint64_t PeakVirtualSize;
        uint64_t VirtualSize;
        uint64_t PrivateUsage;
        uint64_t PrivateWorkingSetSize;
        uint64_t SharedCommitUsage;
        uint64_t JobSharedCommitUsage;
        uint64_t JobPrivateCommitUsage;
        uint64_t JobPeakPrivateCommitUsage;
        uint64_t JobPrivateCommitLimit;
        uint64_t JobTotalCommitLimit;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_USER_RECORD
    {
        uint32_t Type;
        Windows::Win32::Debug::MINIDUMP_LOCATION_DESCRIPTOR Memory;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_USER_STREAM
    {
        uint32_t Type;
        uint32_t BufferSize;
        void* Buffer;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_USER_STREAM_INFORMATION
    {
        uint32_t UserStreamCount;
        Windows::Win32::Debug::MINIDUMP_USER_STREAM* UserStreamArray;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_THREAD_CALLBACK
    {
        uint32_t ThreadId;
        Windows::Win32::SystemServices::HANDLE ThreadHandle;
        Windows::Win32::Debug::CONTEXT Context;
        uint32_t SizeOfContext;
        uint64_t StackBase;
        uint64_t StackEnd;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_THREAD_EX_CALLBACK
    {
        uint32_t ThreadId;
        Windows::Win32::SystemServices::HANDLE ThreadHandle;
        Windows::Win32::Debug::CONTEXT Context;
        uint32_t SizeOfContext;
        uint64_t StackBase;
        uint64_t StackEnd;
        uint64_t BackingStoreBase;
        uint64_t BackingStoreEnd;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_INCLUDE_THREAD_CALLBACK
    {
        uint32_t ThreadId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_MODULE_CALLBACK
    {
        uint16_t* FullPath;
        uint64_t BaseOfImage;
        uint32_t SizeOfImage;
        uint32_t CheckSum;
        uint32_t TimeDateStamp;
        Windows::Win32::MenusAndResources::VS_FIXEDFILEINFO VersionInfo;
        void* CvRecord;
        uint32_t SizeOfCvRecord;
        void* MiscRecord;
        uint32_t SizeOfMiscRecord;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_INCLUDE_MODULE_CALLBACK
    {
        uint64_t BaseOfImage;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_IO_CALLBACK
    {
        Windows::Win32::SystemServices::HANDLE Handle;
        uint64_t Offset;
        void* Buffer;
        uint32_t BufferBytes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_READ_MEMORY_FAILURE_CALLBACK
    {
        uint64_t Offset;
        uint32_t Bytes;
        int32_t FailureStatus;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_VM_QUERY_CALLBACK
    {
        uint64_t Offset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_VM_PRE_READ_CALLBACK
    {
        uint64_t Offset;
        void* Buffer;
        uint32_t Size;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_VM_POST_READ_CALLBACK
    {
        uint64_t Offset;
        void* Buffer;
        uint32_t Size;
        uint32_t Completed;
        int32_t Status;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_CALLBACK_INPUT
    {
        union _Anonymous_e__Union
        {
            int32_t Status;
            Windows::Win32::Debug::MINIDUMP_THREAD_CALLBACK Thread;
            Windows::Win32::Debug::MINIDUMP_THREAD_EX_CALLBACK ThreadEx;
            Windows::Win32::Debug::MINIDUMP_MODULE_CALLBACK Module;
            Windows::Win32::Debug::MINIDUMP_INCLUDE_THREAD_CALLBACK IncludeThread;
            Windows::Win32::Debug::MINIDUMP_INCLUDE_MODULE_CALLBACK IncludeModule;
            Windows::Win32::Debug::MINIDUMP_IO_CALLBACK Io;
            Windows::Win32::Debug::MINIDUMP_READ_MEMORY_FAILURE_CALLBACK ReadMemoryFailure;
            uint32_t SecondaryFlags;
            Windows::Win32::Debug::MINIDUMP_VM_QUERY_CALLBACK VmQuery;
            Windows::Win32::Debug::MINIDUMP_VM_PRE_READ_CALLBACK VmPreRead;
            Windows::Win32::Debug::MINIDUMP_VM_POST_READ_CALLBACK VmPostRead;
        };
        uint32_t ProcessId;
        Windows::Win32::SystemServices::HANDLE ProcessHandle;
        uint32_t CallbackType;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_CALLBACK_OUTPUT
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous1_e__Struct
            {
                uint64_t MemoryBase;
                uint32_t MemorySize;
            };
            struct _Anonymous2_e__Struct
            {
                Windows::Win32::SystemServices::BOOL CheckCancel;
                Windows::Win32::SystemServices::BOOL Cancel;
            };
            struct _Anonymous3_e__Struct
            {
                Windows::Win32::Debug::MINIDUMP_MEMORY_INFO VmRegion;
                Windows::Win32::SystemServices::BOOL Continue;
            };
            struct _Anonymous4_e__Struct
            {
                int32_t VmQueryStatus;
                Windows::Win32::Debug::MINIDUMP_MEMORY_INFO VmQueryResult;
            };
            struct _Anonymous5_e__Struct
            {
                int32_t VmReadStatus;
                uint32_t VmReadBytesCompleted;
            };
            uint32_t ModuleWriteFlags;
            uint32_t ThreadWriteFlags;
            uint32_t SecondaryFlags;
            _Anonymous1_e__Struct Anonymous1;
            _Anonymous2_e__Struct Anonymous2;
            Windows::Win32::SystemServices::HANDLE Handle;
            _Anonymous3_e__Struct Anonymous3;
            _Anonymous4_e__Struct Anonymous4;
            _Anonymous5_e__Struct Anonymous5;
            int32_t Status;
        };
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct MINIDUMP_CALLBACK_INFORMATION
    {
        Windows::Win32::Debug::MINIDUMP_CALLBACK_ROUTINE* CallbackRoutine;
        void* CallbackParam;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct DebugPropertyInfo
    {
        uint32_t m_dwValidFields;
        Windows::Win32::Automation::BSTR m_bstrName;
        Windows::Win32::Automation::BSTR m_bstrType;
        Windows::Win32::Automation::BSTR m_bstrValue;
        Windows::Win32::Automation::BSTR m_bstrFullName;
        uint32_t m_dwAttrib;
        Windows::Win32::Debug::IDebugProperty* m_pDebugProp;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct ExtendedDebugPropertyInfo
    {
        uint32_t dwValidFields;
        uint16_t* pszName;
        uint16_t* pszType;
        uint16_t* pszValue;
        uint16_t* pszFullName;
        uint32_t dwAttrib;
        Windows::Win32::Debug::IDebugProperty* pDebugProp;
        uint32_t nDISPID;
        uint32_t nType;
        Windows::Win32::Automation::VARIANT varValue;
        Windows::Win32::StructuredStorage::ILockBytes* plbValue;
        Windows::Win32::Debug::IDebugExtendedProperty* pDebugExtProp;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct DebugStackFrameDescriptor
    {
        Windows::Win32::Debug::IDebugStackFrame* pdsf;
        uint32_t dwMin;
        uint32_t dwLim;
        Windows::Win32::SystemServices::BOOL fFinal;
        Windows::Win32::Com::IUnknown* punkFinal;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct DebugStackFrameDescriptor64
    {
        Windows::Win32::Debug::IDebugStackFrame* pdsf;
        uint64_t dwMin;
        uint64_t dwLim;
        Windows::Win32::SystemServices::BOOL fFinal;
        Windows::Win32::Com::IUnknown* punkFinal;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct PROFILER_HEAP_OBJECT_SCOPE_LIST
    {
        uint32_t count;
        size_t scopes[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct PROFILER_PROPERTY_TYPE_SUBSTRING_INFO
    {
        uint32_t length;
        uint16_t* value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct PROFILER_HEAP_OBJECT_RELATIONSHIP
    {
        union _Anonymous_e__Union
        {
            double numberValue;
            uint16_t* stringValue;
            Windows::Win32::Automation::BSTR bstrValue;
            size_t objectId;
            void* externalObjectAddress;
            Windows::Win32::Debug::PROFILER_PROPERTY_TYPE_SUBSTRING_INFO* subString;
        };
        uint32_t relationshipId;
        Windows::Win32::Debug::__MIDL___MIDL_itf_activprof_0000_0002_0005 relationshipInfo;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct PROFILER_HEAP_OBJECT_RELATIONSHIP_LIST
    {
        uint32_t count;
        Windows::Win32::Debug::PROFILER_HEAP_OBJECT_RELATIONSHIP elements[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct PROFILER_HEAP_OBJECT_OPTIONAL_INFO
    {
        union _Anonymous_e__Union
        {
            size_t prototype;
            uint16_t* functionName;
            uint32_t elementAttributesSize;
            uint32_t elementTextChildrenSize;
            Windows::Win32::Debug::PROFILER_HEAP_OBJECT_SCOPE_LIST* scopeList;
            Windows::Win32::Debug::PROFILER_HEAP_OBJECT_RELATIONSHIP* internalProperty;
            Windows::Win32::Debug::PROFILER_HEAP_OBJECT_RELATIONSHIP_LIST* namePropertyList;
            Windows::Win32::Debug::PROFILER_HEAP_OBJECT_RELATIONSHIP_LIST* indexPropertyList;
            Windows::Win32::Debug::PROFILER_HEAP_OBJECT_RELATIONSHIP_LIST* relationshipList;
            Windows::Win32::Debug::PROFILER_HEAP_OBJECT_RELATIONSHIP_LIST* eventList;
            Windows::Win32::Debug::PROFILER_HEAP_OBJECT_RELATIONSHIP_LIST* weakMapCollectionList;
            Windows::Win32::Debug::PROFILER_HEAP_OBJECT_RELATIONSHIP_LIST* mapCollectionList;
            Windows::Win32::Debug::PROFILER_HEAP_OBJECT_RELATIONSHIP_LIST* setCollectionList;
        };
        Windows::Win32::Debug::__MIDL___MIDL_itf_activprof_0000_0002_0002 infoType;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct PROFILER_HEAP_OBJECT
    {
        union _Anonymous_e__Union
        {
            size_t objectId;
            void* externalObjectAddress;
        };
        uint32_t size;
        _Anonymous_e__Union Anonymous;
        uint32_t typeNameId;
        uint32_t flags;
        uint16_t unused;
        uint16_t optionalInfoCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct PROFILER_HEAP_SUMMARY
    {
        Windows::Win32::Debug::__MIDL___MIDL_itf_activprof_0000_0004_0001 version;
        uint32_t totalHeapSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct HTML_PAINTER_INFO
    {
        int32_t lFlags;
        int32_t lZOrder;
        ::win32::guid iidDrawObject;
        Windows::Win32::DisplayDevices::RECT rcExpand;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct HTML_PAINT_XFORM
    {
        float eM11;
        float eM12;
        float eM21;
        float eM22;
        float eDx;
        float eDy;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Debug
{
    struct HTML_PAINT_DRAW_INFO
    {
        Windows::Win32::DisplayDevices::RECT rcViewport;
        Windows::Win32::Gdi::HRGN hrgnUpdate;
        Windows::Win32::Debug::HTML_PAINT_XFORM xform;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WebSock
{
    struct WEB_SOCKET_HANDLE__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WebSock
{
    struct WEB_SOCKET_PROPERTY
    {
        Windows::Win32::WebSock::WEB_SOCKET_PROPERTY_TYPE Type;
        void* pvValue;
        uint32_t ulValueSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WebSock
{
    struct WEB_SOCKET_HTTP_HEADER
    {
        int8_t* pcName;
        uint32_t ulNameLength;
        int8_t* pcValue;
        uint32_t ulValueLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WebSock
{
    union WEB_SOCKET_BUFFER
    {
        struct _Data_e__Struct
        {
            uint8_t* pbBuffer;
            uint32_t ulBufferLength;
        };
        struct _CloseStatus_e__Struct
        {
            uint8_t* pbReason;
            uint32_t ulReasonLength;
            uint16_t usStatus;
        };
        _Data_e__Struct Data;
        _CloseStatus_e__Struct CloseStatus;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsEventCollector
{
    struct EC_VARIANT
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::SystemServices::BOOL BooleanVal;
            uint32_t UInt32Val;
            uint64_t DateTimeVal;
            uint16_t* StringVal;
            uint8_t* BinaryVal;
            int32_t* BooleanArr;
            int32_t* Int32Arr;
            uint16_t** StringArr;
            intptr_t PropertyHandleVal;
        };
        _Anonymous_e__Union Anonymous;
        uint32_t Count;
        uint32_t Type;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DataDeduplication
{
    struct DEDUP_CONTAINER_EXTENT
    {
        uint32_t ContainerIndex;
        int64_t StartOffset;
        int64_t Length;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DataDeduplication
{
    struct DDP_FILE_EXTENT
    {
        int64_t Length;
        int64_t Offset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Snmp
{
    struct AsnOctetString
    {
        uint8_t* stream;
        uint32_t length;
        Windows::Win32::SystemServices::BOOL dynamic;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Snmp
{
    struct AsnObjectIdentifier
    {
        uint32_t idLength;
        uint32_t* ids;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Snmp
{
    struct AsnAny
    {
        union _asnValue_e__Union
        {
            int32_t number;
            uint32_t unsigned32;
            Windows::Win32::SystemServices::ULARGE_INTEGER counter64;
            Windows::Win32::Snmp::AsnOctetString string;
            Windows::Win32::Snmp::AsnOctetString bits;
            Windows::Win32::Snmp::AsnObjectIdentifier object;
            Windows::Win32::Snmp::AsnOctetString sequence;
            Windows::Win32::Snmp::AsnOctetString address;
            uint32_t counter;
            uint32_t gauge;
            uint32_t ticks;
            Windows::Win32::Snmp::AsnOctetString arbitrary;
        };
        uint8_t asnType;
        _asnValue_e__Union asnValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Snmp
{
    struct SnmpVarBind
    {
        Windows::Win32::Snmp::AsnObjectIdentifier name;
        Windows::Win32::Snmp::AsnAny value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Snmp
{
    struct SnmpVarBindList
    {
        Windows::Win32::Snmp::SnmpVarBind* list;
        uint32_t len;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Snmp
{
    struct smiOCTETS
    {
        uint32_t len;
        uint8_t* ptr;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Snmp
{
    struct smiOID
    {
        uint32_t len;
        uint32_t* ptr;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Snmp
{
    struct smiCNTR64
    {
        uint32_t hipart;
        uint32_t lopart;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Snmp
{
    struct smiVALUE
    {
        union _value_e__Union
        {
            int32_t sNumber;
            uint32_t uNumber;
            Windows::Win32::Snmp::smiCNTR64 hNumber;
            Windows::Win32::Snmp::smiOCTETS string;
            Windows::Win32::Snmp::smiOID oid;
            uint8_t empty;
        };
        uint32_t syntax;
        _value_e__Union value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Snmp
{
    struct smiVENDORINFO
    {
        int8_t vendorName[64];
        int8_t vendorContact[64];
        int8_t vendorVersionId[32];
        int8_t vendorVersionDate[32];
        uint32_t vendorEnterprise;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsErrorReporting
{
    struct WER_REPORT_INFORMATION
    {
        uint32_t dwSize;
        Windows::Win32::SystemServices::HANDLE hProcess;
        uint16_t wzConsentKey[64];
        uint16_t wzFriendlyEventName[128];
        uint16_t wzApplicationName[128];
        uint16_t wzApplicationPath[260];
        uint16_t wzDescription[512];
        Windows::Win32::WindowsAndMessaging::HWND hwndParent;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsErrorReporting
{
    struct WER_REPORT_INFORMATION_V3
    {
        uint32_t dwSize;
        Windows::Win32::SystemServices::HANDLE hProcess;
        uint16_t wzConsentKey[64];
        uint16_t wzFriendlyEventName[128];
        uint16_t wzApplicationName[128];
        uint16_t wzApplicationPath[260];
        uint16_t wzDescription[512];
        Windows::Win32::WindowsAndMessaging::HWND hwndParent;
        uint16_t wzNamespacePartner[64];
        uint16_t wzNamespaceGroup[64];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsErrorReporting
{
    struct WER_DUMP_CUSTOM_OPTIONS
    {
        uint32_t dwSize;
        uint32_t dwMask;
        uint32_t dwDumpFlags;
        Windows::Win32::SystemServices::BOOL bOnlyThisThread;
        uint32_t dwExceptionThreadFlags;
        uint32_t dwOtherThreadFlags;
        uint32_t dwExceptionThreadExFlags;
        uint32_t dwOtherThreadExFlags;
        uint32_t dwPreferredModuleFlags;
        uint32_t dwOtherModuleFlags;
        uint16_t wzPreferredModuleList[256];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsErrorReporting
{
    struct WER_DUMP_CUSTOM_OPTIONS_V2
    {
        uint32_t dwSize;
        uint32_t dwMask;
        uint32_t dwDumpFlags;
        Windows::Win32::SystemServices::BOOL bOnlyThisThread;
        uint32_t dwExceptionThreadFlags;
        uint32_t dwOtherThreadFlags;
        uint32_t dwExceptionThreadExFlags;
        uint32_t dwOtherThreadExFlags;
        uint32_t dwPreferredModuleFlags;
        uint32_t dwOtherModuleFlags;
        uint16_t wzPreferredModuleList[256];
        uint32_t dwPreferredModuleResetFlags;
        uint32_t dwOtherModuleResetFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsErrorReporting
{
    struct WER_REPORT_INFORMATION_V4
    {
        uint32_t dwSize;
        Windows::Win32::SystemServices::HANDLE hProcess;
        uint16_t wzConsentKey[64];
        uint16_t wzFriendlyEventName[128];
        uint16_t wzApplicationName[128];
        uint16_t wzApplicationPath[260];
        uint16_t wzDescription[512];
        Windows::Win32::WindowsAndMessaging::HWND hwndParent;
        uint16_t wzNamespacePartner[64];
        uint16_t wzNamespaceGroup[64];
        uint8_t rgbApplicationIdentity[16];
        Windows::Win32::SystemServices::HANDLE hSnapshot;
        Windows::Win32::SystemServices::HANDLE hDeleteFilesImpersonationToken;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsErrorReporting
{
    struct WER_REPORT_INFORMATION_V5
    {
        uint32_t dwSize;
        Windows::Win32::SystemServices::HANDLE hProcess;
        uint16_t wzConsentKey[64];
        uint16_t wzFriendlyEventName[128];
        uint16_t wzApplicationName[128];
        uint16_t wzApplicationPath[260];
        uint16_t wzDescription[512];
        Windows::Win32::WindowsAndMessaging::HWND hwndParent;
        uint16_t wzNamespacePartner[64];
        uint16_t wzNamespaceGroup[64];
        uint8_t rgbApplicationIdentity[16];
        Windows::Win32::SystemServices::HANDLE hSnapshot;
        Windows::Win32::SystemServices::HANDLE hDeleteFilesImpersonationToken;
        Windows::Win32::WindowsErrorReporting::WER_SUBMIT_RESULT submitResultMax;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsErrorReporting
{
    struct WER_DUMP_CUSTOM_OPTIONS_V3
    {
        uint32_t dwSize;
        uint32_t dwMask;
        uint32_t dwDumpFlags;
        Windows::Win32::SystemServices::BOOL bOnlyThisThread;
        uint32_t dwExceptionThreadFlags;
        uint32_t dwOtherThreadFlags;
        uint32_t dwExceptionThreadExFlags;
        uint32_t dwOtherThreadExFlags;
        uint32_t dwPreferredModuleFlags;
        uint32_t dwOtherModuleFlags;
        uint16_t wzPreferredModuleList[256];
        uint32_t dwPreferredModuleResetFlags;
        uint32_t dwOtherModuleResetFlags;
        void* pvDumpKey;
        Windows::Win32::SystemServices::HANDLE hSnapshot;
        uint32_t dwThreadID;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsErrorReporting
{
    struct WER_EXCEPTION_INFORMATION
    {
        Windows::Win32::Debug::EXCEPTION_POINTERS* pExceptionPointers;
        Windows::Win32::SystemServices::BOOL bClientPointers;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsErrorReporting
{
    struct WER_RUNTIME_EXCEPTION_INFORMATION
    {
        uint32_t dwSize;
        Windows::Win32::SystemServices::HANDLE hProcess;
        Windows::Win32::SystemServices::HANDLE hThread;
        Windows::Win32::Debug::EXCEPTION_RECORD exceptionRecord;
        Windows::Win32::Debug::CONTEXT context;
        uint16_t* pwszReportId;
        Windows::Win32::SystemServices::BOOL bIsFatal;
        uint32_t dwReserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsErrorReporting
{
    struct WER_REPORT_PARAMETER
    {
        uint16_t Name[129];
        uint16_t Value[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsErrorReporting
{
    struct WER_REPORT_SIGNATURE
    {
        uint16_t EventName[65];
        Windows::Win32::WindowsErrorReporting::WER_REPORT_PARAMETER Parameters[10];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsErrorReporting
{
    struct WER_REPORT_METADATA_V2
    {
        Windows::Win32::WindowsErrorReporting::WER_REPORT_SIGNATURE Signature;
        ::win32::guid BucketId;
        ::win32::guid ReportId;
        Windows::Win32::WindowsProgramming::FILETIME CreationTime;
        uint64_t SizeInBytes;
        uint16_t CabId[260];
        uint32_t ReportStatus;
        ::win32::guid ReportIntegratorId;
        uint32_t NumberOfFiles;
        uint32_t SizeOfFileNames;
        uint16_t* FileNames;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsErrorReporting
{
    struct WER_REPORT_METADATA_V3
    {
        Windows::Win32::WindowsErrorReporting::WER_REPORT_SIGNATURE Signature;
        ::win32::guid BucketId;
        ::win32::guid ReportId;
        Windows::Win32::WindowsProgramming::FILETIME CreationTime;
        uint64_t SizeInBytes;
        uint16_t CabId[260];
        uint32_t ReportStatus;
        ::win32::guid ReportIntegratorId;
        uint32_t NumberOfFiles;
        uint32_t SizeOfFileNames;
        uint16_t* FileNames;
        uint16_t FriendlyEventName[128];
        uint16_t ApplicationName[128];
        uint16_t ApplicationPath[260];
        uint16_t Description[512];
        uint16_t BucketIdString[260];
        uint64_t LegacyBucketId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsErrorReporting
{
    struct WER_REPORT_METADATA_V1
    {
        Windows::Win32::WindowsErrorReporting::WER_REPORT_SIGNATURE Signature;
        ::win32::guid BucketId;
        ::win32::guid ReportId;
        Windows::Win32::WindowsProgramming::FILETIME CreationTime;
        uint64_t SizeInBytes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemRestore
{
    struct RESTOREPOINTINFOA
    {
        uint32_t dwEventType;
        uint32_t dwRestorePtType;
        int64_t llSequenceNumber;
        int8_t szDescription[64];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemRestore
{
    struct RESTOREPOINTINFOW
    {
        uint32_t dwEventType;
        uint32_t dwRestorePtType;
        int64_t llSequenceNumber;
        uint16_t szDescription[256];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemRestore
{
    struct _RESTOREPTINFOEX
    {
        Windows::Win32::WindowsProgramming::FILETIME ftCreation;
        uint32_t dwEventType;
        uint32_t dwRestorePtType;
        uint32_t dwRPNum;
        uint16_t szDescription[256];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SystemRestore
{
    struct STATEMGRSTATUS
    {
        uint32_t nStatus;
        int64_t llSequenceNumber;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsEventLog
{
    struct EVT_VARIANT
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::SystemServices::BOOL BooleanVal;
            int8_t SByteVal;
            int16_t Int16Val;
            int32_t Int32Val;
            int64_t Int64Val;
            uint8_t ByteVal;
            uint16_t UInt16Val;
            uint32_t UInt32Val;
            uint64_t UInt64Val;
            float SingleVal;
            double DoubleVal;
            uint64_t FileTimeVal;
            Windows::Win32::WindowsProgramming::SYSTEMTIME* SysTimeVal;
            ::win32::guid* GuidVal;
            uint16_t* StringVal;
            int8_t* AnsiStringVal;
            uint8_t* BinaryVal;
            void* SidVal;
            size_t SizeTVal;
            int32_t* BooleanArr;
            int8_t* SByteArr;
            int16_t* Int16Arr;
            int32_t* Int32Arr;
            int64_t* Int64Arr;
            uint8_t* ByteArr;
            uint16_t* UInt16Arr;
            uint32_t* UInt32Arr;
            uint64_t* UInt64Arr;
            float* SingleArr;
            double* DoubleArr;
            Windows::Win32::WindowsProgramming::FILETIME* FileTimeArr;
            Windows::Win32::WindowsProgramming::SYSTEMTIME* SysTimeArr;
            ::win32::guid* GuidArr;
            uint16_t** StringArr;
            int8_t** AnsiStringArr;
            void** SidArr;
            size_t* SizeTArr;
            intptr_t EvtHandleVal;
            uint16_t* XmlVal;
            uint16_t** XmlValArr;
        };
        _Anonymous_e__Union Anonymous;
        uint32_t Count;
        uint32_t Type;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsEventLog
{
    struct EVT_RPC_LOGIN
    {
        uint16_t* Server;
        uint16_t* User;
        uint16_t* Domain;
        uint16_t* Password;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsMediaDeviceManager
{
    struct __MACINFO
    {
        Windows::Win32::SystemServices::BOOL fUsed;
        uint8_t abMacState[36];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsMediaDeviceManager
{
    struct _tWAVEFORMATEX
    {
        uint16_t wFormatTag;
        uint16_t nChannels;
        uint32_t nSamplesPerSec;
        uint32_t nAvgBytesPerSec;
        uint16_t nBlockAlign;
        uint16_t wBitsPerSample;
        uint16_t cbSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsMediaDeviceManager
{
    struct _tagBITMAPINFOHEADER
    {
        uint32_t biSize;
        int32_t biWidth;
        int32_t biHeight;
        uint16_t biPlanes;
        uint16_t biBitCount;
        uint32_t biCompression;
        uint32_t biSizeImage;
        int32_t biXPelsPerMeter;
        int32_t biYPelsPerMeter;
        uint32_t biClrUsed;
        uint32_t biClrImportant;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsMediaDeviceManager
{
    struct _tagVIDEOINFOHEADER
    {
        Windows::Win32::DisplayDevices::RECT rcSource;
        Windows::Win32::DisplayDevices::RECT rcTarget;
        uint32_t dwBitRate;
        uint32_t dwBitErrorRate;
        int64_t AvgTimePerFrame;
        Windows::Win32::WindowsMediaDeviceManager::_tagBITMAPINFOHEADER bmiHeader;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsMediaDeviceManager
{
    struct WMFILECAPABILITIES
    {
        uint16_t* pwszMimeType;
        uint32_t dwReserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsMediaDeviceManager
{
    struct __OPAQUECOMMAND
    {
        ::win32::guid guidCommand;
        uint32_t dwDataLen;
        uint8_t* pData;
        uint8_t abMAC[20];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsMediaDeviceManager
{
    struct __WMDMID
    {
        uint32_t cbSize;
        uint32_t dwVendorID;
        uint8_t pID[128];
        uint32_t SerialNumberLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsMediaDeviceManager
{
    struct WMDMDATETIME
    {
        uint16_t wYear;
        uint16_t wMonth;
        uint16_t wDay;
        uint16_t wHour;
        uint16_t wMinute;
        uint16_t wSecond;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsMediaDeviceManager
{
    struct __WMDMRIGHTS
    {
        uint32_t cbSize;
        uint32_t dwContentType;
        uint32_t fuFlags;
        uint32_t fuRights;
        uint32_t dwAppSec;
        uint32_t dwPlaybackCount;
        Windows::Win32::WindowsMediaDeviceManager::WMDMDATETIME ExpirationDate;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsMediaDeviceManager
{
    struct __WMDMMetadataView
    {
        uint16_t* pwszViewName;
        uint32_t nDepth;
        uint16_t** ppwszTags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsMediaDeviceManager
{
    struct WMDM_PROP_VALUES_RANGE
    {
        Windows::Win32::StructuredStorage::PROPVARIANT rangeMin;
        Windows::Win32::StructuredStorage::PROPVARIANT rangeMax;
        Windows::Win32::StructuredStorage::PROPVARIANT rangeStep;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsMediaDeviceManager
{
    struct WMDM_PROP_VALUES_ENUM
    {
        uint32_t cEnumValues;
        Windows::Win32::StructuredStorage::PROPVARIANT* pValues;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsMediaDeviceManager
{
    struct WMDM_PROP_DESC
    {
        union _ValidValues_e__Union
        {
            Windows::Win32::WindowsMediaDeviceManager::WMDM_PROP_VALUES_RANGE ValidValuesRange;
            Windows::Win32::WindowsMediaDeviceManager::WMDM_PROP_VALUES_ENUM EnumeratedValidValues;
        };
        uint16_t* pwszPropName;
        Windows::Win32::WindowsMediaDeviceManager::WMDM_ENUM_PROP_VALID_VALUES_FORM ValidValuesForm;
        _ValidValues_e__Union ValidValues;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsMediaDeviceManager
{
    struct WMDM_PROP_CONFIG
    {
        uint32_t nPreference;
        uint32_t nPropDesc;
        Windows::Win32::WindowsMediaDeviceManager::WMDM_PROP_DESC* pPropDesc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsMediaDeviceManager
{
    struct WMDM_FORMAT_CAPABILITY
    {
        uint32_t nPropConfig;
        Windows::Win32::WindowsMediaDeviceManager::WMDM_PROP_CONFIG* pConfigs;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsMediaDeviceManager
{
    union WMDMDetermineMaxPropStringLen
    {
        uint16_t sz001[27];
        uint16_t sz002[31];
        uint16_t sz003[14];
        uint16_t sz004[16];
        uint16_t sz005[22];
        uint16_t sz006[14];
        uint16_t sz007[20];
        uint16_t sz008[20];
        uint16_t sz009[22];
        uint16_t sz010[11];
        uint16_t sz011[12];
        uint16_t sz012[17];
        uint16_t sz013[17];
        uint16_t sz014[16];
        uint16_t sz015[17];
        uint16_t sz016[11];
        uint16_t sz017[11];
        uint16_t sz018[15];
        uint16_t sz019[22];
        uint16_t sz020[20];
        uint16_t sz021[22];
        uint16_t sz022[21];
        uint16_t sz023[24];
        uint16_t sz024[20];
        uint16_t sz025[10];
        uint16_t sz026[14];
        uint16_t sz027[11];
        uint16_t sz028[11];
        uint16_t sz029[13];
        uint16_t sz030[17];
        uint16_t sz031[16];
        uint16_t sz032[17];
        uint16_t sz033[20];
        uint16_t sz034[19];
        uint16_t sz035[18];
        uint16_t sz036[18];
        uint16_t sz037[15];
        uint16_t sz041[14];
        uint16_t sz043[22];
        uint16_t sz044[16];
        uint16_t sz045[20];
        uint16_t sz046[14];
        uint16_t sz047[14];
        uint16_t sz048[12];
        uint16_t sz049[25];
        uint16_t sz050[26];
        uint16_t sz051[25];
        uint16_t sz052[16];
        uint16_t sz053[24];
        uint16_t sz054[15];
        uint16_t sz055[21];
        uint16_t sz056[16];
        uint16_t sz057[22];
        uint16_t sz058[14];
        uint16_t sz059[25];
        uint16_t sz060[18];
        uint16_t sz061[22];
        uint16_t sz062[26];
        uint16_t sz063[36];
        uint16_t sz064[23];
        uint16_t sz065[12];
        uint16_t sz066[24];
        uint16_t sz067[11];
        uint16_t sz068[12];
        uint16_t sz069[14];
        uint16_t sz070[20];
        uint16_t sz071[15];
        uint16_t sz072[14];
        uint16_t sz073[31];
        uint16_t sz074[24];
        uint16_t sz075[22];
        uint16_t sz076[24];
        uint16_t sz077[21];
        uint16_t sz078[27];
        uint16_t sz079[27];
        uint16_t sz080[20];
        uint16_t sz081[33];
        uint16_t sz082[21];
        uint16_t sz083[32];
        uint16_t sz084[26];
        uint16_t sz085[18];
        uint16_t sz086[30];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsMediaDeviceManager
{
    struct MTP_COMMAND_DATA_IN
    {
        uint16_t OpCode;
        uint32_t NumParams;
        uint32_t Params[5];
        uint32_t NextPhase;
        uint32_t CommandWriteDataSize;
        uint8_t CommandWriteData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsMediaDeviceManager
{
    struct MTP_COMMAND_DATA_OUT
    {
        uint16_t ResponseCode;
        uint32_t NumParams;
        uint32_t Params[5];
        uint32_t CommandReadDataSize;
        uint8_t CommandReadData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DVIEWPORT9
    {
        uint32_t X;
        uint32_t Y;
        uint32_t Width;
        uint32_t Height;
        float MinZ;
        float MaxZ;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DCLIPSTATUS9
    {
        uint32_t ClipUnion;
        uint32_t ClipIntersection;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DMATERIAL9
    {
        Windows::Win32::Dxgi::DXGI_RGBA Diffuse;
        Windows::Win32::Dxgi::DXGI_RGBA Ambient;
        Windows::Win32::Dxgi::DXGI_RGBA Specular;
        Windows::Win32::Dxgi::DXGI_RGBA Emissive;
        float Power;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DLIGHT9
    {
        Windows::Win32::SystemServices::D3DLIGHTTYPE Type;
        Windows::Win32::Dxgi::DXGI_RGBA Diffuse;
        Windows::Win32::Dxgi::DXGI_RGBA Specular;
        Windows::Win32::Dxgi::DXGI_RGBA Ambient;
        Windows::Win32::SystemServices::D3DVECTOR Position;
        Windows::Win32::SystemServices::D3DVECTOR Direction;
        float Range;
        float Falloff;
        float Attenuation0;
        float Attenuation1;
        float Attenuation2;
        float Theta;
        float Phi;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DVERTEXELEMENT9
    {
        uint16_t Stream;
        uint16_t Offset;
        uint8_t Type;
        uint8_t Method;
        uint8_t Usage;
        uint8_t UsageIndex;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DDISPLAYMODE
    {
        uint32_t Width;
        uint32_t Height;
        uint32_t RefreshRate;
        Windows::Win32::Direct3D9::D3DFORMAT Format;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DDEVICE_CREATION_PARAMETERS
    {
        uint32_t AdapterOrdinal;
        Windows::Win32::Direct3D9::D3DDEVTYPE DeviceType;
        Windows::Win32::WindowsAndMessaging::HWND hFocusWindow;
        uint32_t BehaviorFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct _D3DPRESENT_PARAMETERS_
    {
        uint32_t BackBufferWidth;
        uint32_t BackBufferHeight;
        Windows::Win32::Direct3D9::D3DFORMAT BackBufferFormat;
        uint32_t BackBufferCount;
        Windows::Win32::Direct3D9::D3DMULTISAMPLE_TYPE MultiSampleType;
        uint32_t MultiSampleQuality;
        Windows::Win32::Direct3D9::D3DSWAPEFFECT SwapEffect;
        Windows::Win32::WindowsAndMessaging::HWND hDeviceWindow;
        Windows::Win32::SystemServices::BOOL Windowed;
        Windows::Win32::SystemServices::BOOL EnableAutoDepthStencil;
        Windows::Win32::Direct3D9::D3DFORMAT AutoDepthStencilFormat;
        uint32_t Flags;
        uint32_t FullScreen_RefreshRateInHz;
        uint32_t PresentationInterval;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DGAMMARAMP
    {
        uint16_t red[256];
        uint16_t green[256];
        uint16_t blue[256];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DVERTEXBUFFER_DESC
    {
        Windows::Win32::Direct3D9::D3DFORMAT Format;
        Windows::Win32::Direct3D9::D3DRESOURCETYPE Type;
        uint32_t Usage;
        Windows::Win32::Direct3D9::D3DPOOL Pool;
        uint32_t Size;
        uint32_t FVF;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DINDEXBUFFER_DESC
    {
        Windows::Win32::Direct3D9::D3DFORMAT Format;
        Windows::Win32::Direct3D9::D3DRESOURCETYPE Type;
        uint32_t Usage;
        Windows::Win32::Direct3D9::D3DPOOL Pool;
        uint32_t Size;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DSURFACE_DESC
    {
        Windows::Win32::Direct3D9::D3DFORMAT Format;
        Windows::Win32::Direct3D9::D3DRESOURCETYPE Type;
        uint32_t Usage;
        Windows::Win32::Direct3D9::D3DPOOL Pool;
        Windows::Win32::Direct3D9::D3DMULTISAMPLE_TYPE MultiSampleType;
        uint32_t MultiSampleQuality;
        uint32_t Width;
        uint32_t Height;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DVOLUME_DESC
    {
        Windows::Win32::Direct3D9::D3DFORMAT Format;
        Windows::Win32::Direct3D9::D3DRESOURCETYPE Type;
        uint32_t Usage;
        Windows::Win32::Direct3D9::D3DPOOL Pool;
        uint32_t Width;
        uint32_t Height;
        uint32_t Depth;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DLOCKED_RECT
    {
        int32_t Pitch;
        void* pBits;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DBOX
    {
        uint32_t Left;
        uint32_t Top;
        uint32_t Right;
        uint32_t Bottom;
        uint32_t Front;
        uint32_t Back;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DLOCKED_BOX
    {
        int32_t RowPitch;
        int32_t SlicePitch;
        void* pBits;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DRANGE
    {
        uint32_t Offset;
        uint32_t Size;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DRECTPATCH_INFO
    {
        uint32_t StartVertexOffsetWidth;
        uint32_t StartVertexOffsetHeight;
        uint32_t Width;
        uint32_t Height;
        uint32_t Stride;
        Windows::Win32::Direct3D9::D3DBASISTYPE Basis;
        Windows::Win32::Direct3D9::D3DDEGREETYPE Degree;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DTRIPATCH_INFO
    {
        uint32_t StartVertexOffset;
        uint32_t NumVertices;
        Windows::Win32::Direct3D9::D3DBASISTYPE Basis;
        Windows::Win32::Direct3D9::D3DDEGREETYPE Degree;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DADAPTER_IDENTIFIER9
    {
        int8_t Driver[512];
        int8_t Description[512];
        int8_t DeviceName[32];
        Windows::Win32::SystemServices::LARGE_INTEGER DriverVersion;
        uint32_t VendorId;
        uint32_t DeviceId;
        uint32_t SubSysId;
        uint32_t Revision;
        ::win32::guid DeviceIdentifier;
        uint32_t WHQLLevel;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DRASTER_STATUS
    {
        Windows::Win32::SystemServices::BOOL InVBlank;
        uint32_t ScanLine;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DRESOURCESTATS
    {
        Windows::Win32::SystemServices::BOOL bThrashing;
        uint32_t ApproxBytesDownloaded;
        uint32_t NumEvicts;
        uint32_t NumVidCreates;
        uint32_t LastPri;
        uint32_t NumUsed;
        uint32_t NumUsedInVidMem;
        uint32_t WorkingSet;
        uint32_t WorkingSetBytes;
        uint32_t TotalManaged;
        uint32_t TotalBytes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DDEVINFO_RESOURCEMANAGER
    {
        Windows::Win32::Direct3D9::D3DRESOURCESTATS stats[8];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DDEVINFO_D3DVERTEXSTATS
    {
        uint32_t NumRenderedTriangles;
        uint32_t NumExtraClippingTriangles;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DDEVINFO_VCACHE
    {
        uint32_t Pattern;
        uint32_t OptMethod;
        uint32_t CacheSize;
        uint32_t MagicNumber;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DDEVINFO_D3D9PIPELINETIMINGS
    {
        float VertexProcessingTimePercent;
        float PixelProcessingTimePercent;
        float OtherGPUProcessingTimePercent;
        float GPUIdleTimePercent;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DDEVINFO_D3D9INTERFACETIMINGS
    {
        float WaitingForGPUToUseApplicationResourceTimePercent;
        float WaitingForGPUToAcceptMoreCommandsTimePercent;
        float WaitingForGPUToStayWithinLatencyTimePercent;
        float WaitingForGPUExclusiveResourceTimePercent;
        float WaitingForGPUOtherTimePercent;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DDEVINFO_D3D9STAGETIMINGS
    {
        float MemoryProcessingPercent;
        float ComputationProcessingPercent;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DDEVINFO_D3D9BANDWIDTHTIMINGS
    {
        float MaxBandwidthUtilized;
        float FrontEndUploadMemoryUtilizedPercent;
        float VertexRateUtilizedPercent;
        float TriangleSetupRateUtilizedPercent;
        float FillRateUtilizedPercent;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DDEVINFO_D3D9CACHEUTILIZATION
    {
        float TextureCacheHitRate;
        float PostTransformVertexCacheHitRate;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DMEMORYPRESSURE
    {
        uint64_t BytesEvictedFromProcess;
        uint64_t SizeOfInefficientAllocation;
        uint32_t LevelOfEfficiency;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DCOMPOSERECTDESC
    {
        uint16_t X;
        uint16_t Y;
        uint16_t Width;
        uint16_t Height;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DCOMPOSERECTDESTINATION
    {
        uint16_t SrcRectIndex;
        uint16_t Reserved;
        int16_t X;
        int16_t Y;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DPRESENTSTATS
    {
        uint32_t PresentCount;
        uint32_t PresentRefreshCount;
        uint32_t SyncRefreshCount;
        Windows::Win32::SystemServices::LARGE_INTEGER SyncQPCTime;
        Windows::Win32::SystemServices::LARGE_INTEGER SyncGPUTime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DDISPLAYMODEEX
    {
        uint32_t Size;
        uint32_t Width;
        uint32_t Height;
        uint32_t RefreshRate;
        Windows::Win32::Direct3D9::D3DFORMAT Format;
        Windows::Win32::Direct3D9::D3DSCANLINEORDERING ScanLineOrdering;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DDISPLAYMODEFILTER
    {
        uint32_t Size;
        Windows::Win32::Direct3D9::D3DFORMAT Format;
        Windows::Win32::Direct3D9::D3DSCANLINEORDERING ScanLineOrdering;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3D_OMAC
    {
        uint8_t Omac[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DAUTHENTICATEDCHANNEL_QUERY_INPUT
    {
        ::win32::guid QueryType;
        Windows::Win32::SystemServices::HANDLE hChannel;
        uint32_t SequenceNumber;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT
    {
        Windows::Win32::Direct3D9::D3D_OMAC omac;
        ::win32::guid QueryType;
        Windows::Win32::SystemServices::HANDLE hChannel;
        uint32_t SequenceNumber;
        int32_t ReturnCode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DAUTHENTICATEDCHANNEL_PROTECTION_FLAGS
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t _bitfield;
            };
            _Anonymous_e__Struct Anonymous;
            uint32_t Value;
        };
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DAUTHENTICATEDCHANNEL_QUERYPROTECTION_OUTPUT
    {
        Windows::Win32::Direct3D9::D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT Output;
        Windows::Win32::Direct3D9::D3DAUTHENTICATEDCHANNEL_PROTECTION_FLAGS ProtectionFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DAUTHENTICATEDCHANNEL_QUERYCHANNELTYPE_OUTPUT
    {
        Windows::Win32::Direct3D9::D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT Output;
        Windows::Win32::Direct3D9::D3DAUTHENTICATEDCHANNELTYPE ChannelType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DAUTHENTICATEDCHANNEL_QUERYDEVICEHANDLE_OUTPUT
    {
        Windows::Win32::Direct3D9::D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT Output;
        Windows::Win32::SystemServices::HANDLE DeviceHandle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DAUTHENTICATEDCHANNEL_QUERYCRYPTOSESSION_INPUT
    {
        Windows::Win32::Direct3D9::D3DAUTHENTICATEDCHANNEL_QUERY_INPUT Input;
        Windows::Win32::SystemServices::HANDLE DXVA2DecodeHandle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DAUTHENTICATEDCHANNEL_QUERYCRYPTOSESSION_OUTPUT
    {
        Windows::Win32::Direct3D9::D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT Output;
        Windows::Win32::SystemServices::HANDLE DXVA2DecodeHandle;
        Windows::Win32::SystemServices::HANDLE CryptoSessionHandle;
        Windows::Win32::SystemServices::HANDLE DeviceHandle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESSCOUNT_OUTPUT
    {
        Windows::Win32::Direct3D9::D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT Output;
        uint32_t NumRestrictedSharedResourceProcesses;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESS_INPUT
    {
        Windows::Win32::Direct3D9::D3DAUTHENTICATEDCHANNEL_QUERY_INPUT Input;
        uint32_t ProcessIndex;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESS_OUTPUT
    {
        Windows::Win32::Direct3D9::D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT Output;
        uint32_t ProcessIndex;
        Windows::Win32::Direct3D9::D3DAUTHENTICATEDCHANNEL_PROCESSIDENTIFIERTYPE ProcessIdentifer;
        Windows::Win32::SystemServices::HANDLE ProcessHandle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DAUTHENTICATEDCHANNEL_QUERYUNRESTRICTEDPROTECTEDSHAREDRESOURCECOUNT_OUTPUT
    {
        Windows::Win32::Direct3D9::D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT Output;
        uint32_t NumUnrestrictedProtectedSharedResources;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTIDCOUNT_INPUT
    {
        Windows::Win32::Direct3D9::D3DAUTHENTICATEDCHANNEL_QUERY_INPUT Input;
        Windows::Win32::SystemServices::HANDLE DeviceHandle;
        Windows::Win32::SystemServices::HANDLE CryptoSessionHandle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTIDCOUNT_OUTPUT
    {
        Windows::Win32::Direct3D9::D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT Output;
        Windows::Win32::SystemServices::HANDLE DeviceHandle;
        Windows::Win32::SystemServices::HANDLE CryptoSessionHandle;
        uint32_t NumOutputIDs;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTID_INPUT
    {
        Windows::Win32::Direct3D9::D3DAUTHENTICATEDCHANNEL_QUERY_INPUT Input;
        Windows::Win32::SystemServices::HANDLE DeviceHandle;
        Windows::Win32::SystemServices::HANDLE CryptoSessionHandle;
        uint32_t OutputIDIndex;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTID_OUTPUT
    {
        Windows::Win32::Direct3D9::D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT Output;
        Windows::Win32::SystemServices::HANDLE DeviceHandle;
        Windows::Win32::SystemServices::HANDLE CryptoSessionHandle;
        uint32_t OutputIDIndex;
        uint64_t OutputID;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DAUTHENTICATEDCHANNEL_QUERYINFOBUSTYPE_OUTPUT
    {
        Windows::Win32::Direct3D9::D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT Output;
        Windows::Win32::Direct3D9::D3DBUSTYPE BusType;
        Windows::Win32::SystemServices::BOOL bAccessibleInContiguousBlocks;
        Windows::Win32::SystemServices::BOOL bAccessibleInNonContiguousBlocks;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUIDCOUNT_OUTPUT
    {
        Windows::Win32::Direct3D9::D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT Output;
        uint32_t NumEncryptionGuids;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUID_INPUT
    {
        Windows::Win32::Direct3D9::D3DAUTHENTICATEDCHANNEL_QUERY_INPUT Input;
        uint32_t EncryptionGuidIndex;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUID_OUTPUT
    {
        Windows::Win32::Direct3D9::D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT Output;
        uint32_t EncryptionGuidIndex;
        ::win32::guid EncryptionGuid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DAUTHENTICATEDCHANNEL_QUERYUNCOMPRESSEDENCRYPTIONLEVEL_OUTPUT
    {
        Windows::Win32::Direct3D9::D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT Output;
        ::win32::guid EncryptionGuid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT
    {
        Windows::Win32::Direct3D9::D3D_OMAC omac;
        ::win32::guid ConfigureType;
        Windows::Win32::SystemServices::HANDLE hChannel;
        uint32_t SequenceNumber;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DAUTHENTICATEDCHANNEL_CONFIGURE_OUTPUT
    {
        Windows::Win32::Direct3D9::D3D_OMAC omac;
        ::win32::guid ConfigureType;
        Windows::Win32::SystemServices::HANDLE hChannel;
        uint32_t SequenceNumber;
        int32_t ReturnCode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DAUTHENTICATEDCHANNEL_CONFIGUREINITIALIZE
    {
        Windows::Win32::Direct3D9::D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT Parameters;
        uint32_t StartSequenceQuery;
        uint32_t StartSequenceConfigure;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DAUTHENTICATEDCHANNEL_CONFIGUREPROTECTION
    {
        Windows::Win32::Direct3D9::D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT Parameters;
        Windows::Win32::Direct3D9::D3DAUTHENTICATEDCHANNEL_PROTECTION_FLAGS Protections;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DAUTHENTICATEDCHANNEL_CONFIGURECRYPTOSESSION
    {
        Windows::Win32::Direct3D9::D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT Parameters;
        Windows::Win32::SystemServices::HANDLE DXVA2DecodeHandle;
        Windows::Win32::SystemServices::HANDLE CryptoSessionHandle;
        Windows::Win32::SystemServices::HANDLE DeviceHandle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DAUTHENTICATEDCHANNEL_CONFIGURESHAREDRESOURCE
    {
        Windows::Win32::Direct3D9::D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT Parameters;
        Windows::Win32::Direct3D9::D3DAUTHENTICATEDCHANNEL_PROCESSIDENTIFIERTYPE ProcessIdentiferType;
        Windows::Win32::SystemServices::HANDLE ProcessHandle;
        Windows::Win32::SystemServices::BOOL AllowAccess;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DAUTHENTICATEDCHANNEL_CONFIGUREUNCOMPRESSEDENCRYPTION
    {
        Windows::Win32::Direct3D9::D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT Parameters;
        ::win32::guid EncryptionGuid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DENCRYPTED_BLOCK_INFO
    {
        uint32_t NumEncryptedBytesAtBeginning;
        uint32_t NumBytesInSkipPattern;
        uint32_t NumBytesInEncryptPattern;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3D9
{
    struct D3DAES_CTR_IV
    {
        uint64_t IV;
        uint64_t Count;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D3DVSHADERCAPS2_0
    {
        uint32_t Caps;
        int32_t DynamicFlowControlDepth;
        int32_t NumTemps;
        int32_t StaticFlowControlDepth;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D3DPSHADERCAPS2_0
    {
        uint32_t Caps;
        int32_t DynamicFlowControlDepth;
        int32_t NumTemps;
        int32_t StaticFlowControlDepth;
        int32_t NumInstructionSlots;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct2D
{
    struct D3DCAPS9
    {
        Windows::Win32::Direct3D9::D3DDEVTYPE DeviceType;
        uint32_t AdapterOrdinal;
        uint32_t Caps;
        uint32_t Caps2;
        uint32_t Caps3;
        uint32_t PresentationIntervals;
        uint32_t CursorCaps;
        uint32_t DevCaps;
        uint32_t PrimitiveMiscCaps;
        uint32_t RasterCaps;
        uint32_t ZCmpCaps;
        uint32_t SrcBlendCaps;
        uint32_t DestBlendCaps;
        uint32_t AlphaCmpCaps;
        uint32_t ShadeCaps;
        uint32_t TextureCaps;
        uint32_t TextureFilterCaps;
        uint32_t CubeTextureFilterCaps;
        uint32_t VolumeTextureFilterCaps;
        uint32_t TextureAddressCaps;
        uint32_t VolumeTextureAddressCaps;
        uint32_t LineCaps;
        uint32_t MaxTextureWidth;
        uint32_t MaxTextureHeight;
        uint32_t MaxVolumeExtent;
        uint32_t MaxTextureRepeat;
        uint32_t MaxTextureAspectRatio;
        uint32_t MaxAnisotropy;
        float MaxVertexW;
        float GuardBandLeft;
        float GuardBandTop;
        float GuardBandRight;
        float GuardBandBottom;
        float ExtentsAdjust;
        uint32_t StencilCaps;
        uint32_t FVFCaps;
        uint32_t TextureOpCaps;
        uint32_t MaxTextureBlendStages;
        uint32_t MaxSimultaneousTextures;
        uint32_t VertexProcessingCaps;
        uint32_t MaxActiveLights;
        uint32_t MaxUserClipPlanes;
        uint32_t MaxVertexBlendMatrices;
        uint32_t MaxVertexBlendMatrixIndex;
        float MaxPointSize;
        uint32_t MaxPrimitiveCount;
        uint32_t MaxVertexIndex;
        uint32_t MaxStreams;
        uint32_t MaxStreamStride;
        uint32_t VertexShaderVersion;
        uint32_t MaxVertexShaderConst;
        uint32_t PixelShaderVersion;
        float PixelShader1xMaxValue;
        uint32_t DevCaps2;
        float MaxNpatchTessellationLevel;
        uint32_t Reserved5;
        uint32_t MasterAdapterOrdinal;
        uint32_t AdapterOrdinalInGroup;
        uint32_t NumberOfAdaptersInGroup;
        uint32_t DeclTypes;
        uint32_t NumSimultaneousRTs;
        uint32_t StretchRectFilterCaps;
        Windows::Win32::Direct2D::D3DVSHADERCAPS2_0 VS20Caps;
        Windows::Win32::Direct2D::D3DPSHADERCAPS2_0 PS20Caps;
        uint32_t VertexTextureFilterCaps;
        uint32_t MaxVShaderInstructionsExecuted;
        uint32_t MaxPShaderInstructionsExecuted;
        uint32_t MaxVertexShader30InstructionSlots;
        uint32_t MaxPixelShader30InstructionSlots;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3DOVERLAYCAPS
    {
        uint32_t Caps;
        uint32_t MaxOverlayDisplayWidth;
        uint32_t MaxOverlayDisplayHeight;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::MediaFoundation
{
    struct D3DCONTENTPROTECTIONCAPS
    {
        uint32_t Caps;
        ::win32::guid KeyExchangeType;
        uint32_t BufferAlignmentStart;
        uint32_t BlockAlignmentSize;
        uint64_t ProtectedMemorySize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WpfBitmapEffects
{
    struct MilRectD
    {
        double left;
        double top;
        double right;
        double bottom;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WpfBitmapEffects
{
    struct MilPoint2D
    {
        double X;
        double Y;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WpfBitmapEffects
{
    struct MILMatrixF
    {
        double _11;
        double _12;
        double _13;
        double _14;
        double _21;
        double _22;
        double _23;
        double _24;
        double _31;
        double _32;
        double _33;
        double _34;
        double _41;
        double _42;
        double _43;
        double _44;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct SOCKADDR
    {
        uint16_t sa_family;
        int8_t sa_data[14];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct CSADDR_INFO
    {
        Windows::Win32::WinSock::SOCKET_ADDRESS LocalAddr;
        Windows::Win32::WinSock::SOCKET_ADDRESS RemoteAddr;
        int32_t iSocketType;
        int32_t iProtocol;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct sockaddr_storage_xp
    {
        int16_t ss_family;
        int8_t __ss_pad1[6];
        int64_t __ss_align;
        int8_t __ss_pad2[112];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct SOCKET_PROCESSOR_AFFINITY
    {
        Windows::Win32::SystemServices::PROCESSOR_NUMBER Processor;
        uint16_t NumaNodeId;
        uint16_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct sockaddr_dl
    {
        uint16_t sdl_family;
        uint8_t sdl_data[8];
        uint8_t sdl_zero[4];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct WSABUF
    {
        uint32_t len;
        int8_t* buf;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct WSAMSG
    {
        Windows::Win32::WinSock::SOCKADDR* name;
        int32_t namelen;
        Windows::Win32::WinSock::WSABUF* lpBuffers;
        uint32_t dwBufferCount;
        Windows::Win32::WinSock::WSABUF Control;
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct cmsghdr
    {
        size_t cmsg_len;
        int32_t cmsg_level;
        int32_t cmsg_type;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct ADDRINFOA
    {
        int32_t ai_flags;
        int32_t ai_family;
        int32_t ai_socktype;
        int32_t ai_protocol;
        size_t ai_addrlen;
        int8_t* ai_canonname;
        Windows::Win32::WinSock::SOCKADDR* ai_addr;
        Windows::Win32::WinSock::ADDRINFOA* ai_next;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct addrinfoW
    {
        int32_t ai_flags;
        int32_t ai_family;
        int32_t ai_socktype;
        int32_t ai_protocol;
        size_t ai_addrlen;
        uint16_t* ai_canonname;
        Windows::Win32::WinSock::SOCKADDR* ai_addr;
        Windows::Win32::WinSock::addrinfoW* ai_next;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct addrinfoexA
    {
        int32_t ai_flags;
        int32_t ai_family;
        int32_t ai_socktype;
        int32_t ai_protocol;
        size_t ai_addrlen;
        int8_t* ai_canonname;
        Windows::Win32::WinSock::SOCKADDR* ai_addr;
        void* ai_blob;
        size_t ai_bloblen;
        ::win32::guid* ai_provider;
        Windows::Win32::WinSock::addrinfoexA* ai_next;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct addrinfoexW
    {
        int32_t ai_flags;
        int32_t ai_family;
        int32_t ai_socktype;
        int32_t ai_protocol;
        size_t ai_addrlen;
        uint16_t* ai_canonname;
        Windows::Win32::WinSock::SOCKADDR* ai_addr;
        void* ai_blob;
        size_t ai_bloblen;
        ::win32::guid* ai_provider;
        Windows::Win32::WinSock::addrinfoexW* ai_next;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct addrinfoex2A
    {
        int32_t ai_flags;
        int32_t ai_family;
        int32_t ai_socktype;
        int32_t ai_protocol;
        size_t ai_addrlen;
        int8_t* ai_canonname;
        Windows::Win32::WinSock::SOCKADDR* ai_addr;
        void* ai_blob;
        size_t ai_bloblen;
        ::win32::guid* ai_provider;
        Windows::Win32::WinSock::addrinfoex2A* ai_next;
        int32_t ai_version;
        int8_t* ai_fqdn;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct addrinfoex2W
    {
        int32_t ai_flags;
        int32_t ai_family;
        int32_t ai_socktype;
        int32_t ai_protocol;
        size_t ai_addrlen;
        uint16_t* ai_canonname;
        Windows::Win32::WinSock::SOCKADDR* ai_addr;
        void* ai_blob;
        size_t ai_bloblen;
        ::win32::guid* ai_provider;
        Windows::Win32::WinSock::addrinfoex2W* ai_next;
        int32_t ai_version;
        uint16_t* ai_fqdn;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct addrinfoex3
    {
        int32_t ai_flags;
        int32_t ai_family;
        int32_t ai_socktype;
        int32_t ai_protocol;
        size_t ai_addrlen;
        uint16_t* ai_canonname;
        Windows::Win32::WinSock::SOCKADDR* ai_addr;
        void* ai_blob;
        size_t ai_bloblen;
        ::win32::guid* ai_provider;
        Windows::Win32::WinSock::addrinfoex3* ai_next;
        int32_t ai_version;
        uint16_t* ai_fqdn;
        int32_t ai_interfaceindex;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct addrinfoex4
    {
        int32_t ai_flags;
        int32_t ai_family;
        int32_t ai_socktype;
        int32_t ai_protocol;
        size_t ai_addrlen;
        uint16_t* ai_canonname;
        Windows::Win32::WinSock::SOCKADDR* ai_addr;
        void* ai_blob;
        size_t ai_bloblen;
        ::win32::guid* ai_provider;
        Windows::Win32::WinSock::addrinfoex4* ai_next;
        int32_t ai_version;
        uint16_t* ai_fqdn;
        int32_t ai_interfaceindex;
        Windows::Win32::SystemServices::HANDLE ai_resolutionhandle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct fd_set
    {
        uint32_t fd_count;
        size_t fd_array[64];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct timeval
    {
        int32_t tv_sec;
        int32_t tv_usec;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct hostent
    {
        int8_t* h_name;
        int8_t** h_aliases;
        int16_t h_addrtype;
        int16_t h_length;
        int8_t** h_addr_list;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct netent
    {
        int8_t* n_name;
        int8_t** n_aliases;
        int16_t n_addrtype;
        uint32_t n_net;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct servent
    {
        int8_t* s_name;
        int8_t** s_aliases;
        int16_t s_port;
        int8_t* s_proto;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct protoent
    {
        int8_t* p_name;
        int8_t** p_aliases;
        int16_t p_proto;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct WSAData
    {
        uint16_t wVersion;
        uint16_t wHighVersion;
        int8_t szDescription[257];
        int8_t szSystemStatus[129];
        uint16_t iMaxSockets;
        uint16_t iMaxUdpDg;
        int8_t* lpVendorInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct sockproto
    {
        uint16_t sp_family;
        uint16_t sp_protocol;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct linger
    {
        uint16_t l_onoff;
        uint16_t l_linger;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct WSANETWORKEVENTS
    {
        int32_t lNetworkEvents;
        int32_t iErrorCode[10];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct WSAPROTOCOLCHAIN
    {
        int32_t ChainLen;
        uint32_t ChainEntries[7];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct WSAPROTOCOL_INFOA
    {
        uint32_t dwServiceFlags1;
        uint32_t dwServiceFlags2;
        uint32_t dwServiceFlags3;
        uint32_t dwServiceFlags4;
        uint32_t dwProviderFlags;
        ::win32::guid ProviderId;
        uint32_t dwCatalogEntryId;
        Windows::Win32::WinSock::WSAPROTOCOLCHAIN ProtocolChain;
        int32_t iVersion;
        int32_t iAddressFamily;
        int32_t iMaxSockAddr;
        int32_t iMinSockAddr;
        int32_t iSocketType;
        int32_t iProtocol;
        int32_t iProtocolMaxOffset;
        int32_t iNetworkByteOrder;
        int32_t iSecurityScheme;
        uint32_t dwMessageSize;
        uint32_t dwProviderReserved;
        int8_t szProtocol[256];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct WSAPROTOCOL_INFOW
    {
        uint32_t dwServiceFlags1;
        uint32_t dwServiceFlags2;
        uint32_t dwServiceFlags3;
        uint32_t dwServiceFlags4;
        uint32_t dwProviderFlags;
        ::win32::guid ProviderId;
        uint32_t dwCatalogEntryId;
        Windows::Win32::WinSock::WSAPROTOCOLCHAIN ProtocolChain;
        int32_t iVersion;
        int32_t iAddressFamily;
        int32_t iMaxSockAddr;
        int32_t iMinSockAddr;
        int32_t iSocketType;
        int32_t iProtocol;
        int32_t iProtocolMaxOffset;
        int32_t iNetworkByteOrder;
        int32_t iSecurityScheme;
        uint32_t dwMessageSize;
        uint32_t dwProviderReserved;
        uint16_t szProtocol[256];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct WSACOMPLETION
    {
        union _Parameters_e__Union
        {
            struct _WindowMessage_e__Struct
            {
                Windows::Win32::WindowsAndMessaging::HWND hWnd;
                uint32_t uMsg;
                Windows::Win32::WindowsAndMessaging::WPARAM context;
            };
            struct _Event_e__Struct
            {
                Windows::Win32::SystemServices::OVERLAPPED* lpOverlapped;
            };
            struct _Apc_e__Struct
            {
                Windows::Win32::SystemServices::OVERLAPPED* lpOverlapped;
                Windows::Win32::WinSock::LPWSAOVERLAPPED_COMPLETION_ROUTINE* lpfnCompletionProc;
            };
            struct _Port_e__Struct
            {
                Windows::Win32::SystemServices::OVERLAPPED* lpOverlapped;
                Windows::Win32::SystemServices::HANDLE hPort;
                size_t Key;
            };
            _WindowMessage_e__Struct WindowMessage;
            _Event_e__Struct Event;
            _Apc_e__Struct Apc;
            _Port_e__Struct Port;
        };
        Windows::Win32::WinSock::WSACOMPLETIONTYPE Type;
        _Parameters_e__Union Parameters;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct AFPROTOCOLS
    {
        int32_t iAddressFamily;
        int32_t iProtocol;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct WSAVERSION
    {
        uint32_t dwVersion;
        Windows::Win32::WinSock::WSAECOMPARATOR ecHow;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct WSAQUERYSETA
    {
        uint32_t dwSize;
        int8_t* lpszServiceInstanceName;
        ::win32::guid* lpServiceClassId;
        Windows::Win32::WinSock::WSAVERSION* lpVersion;
        int8_t* lpszComment;
        uint32_t dwNameSpace;
        ::win32::guid* lpNSProviderId;
        int8_t* lpszContext;
        uint32_t dwNumberOfProtocols;
        Windows::Win32::WinSock::AFPROTOCOLS* lpafpProtocols;
        int8_t* lpszQueryString;
        uint32_t dwNumberOfCsAddrs;
        Windows::Win32::WinSock::CSADDR_INFO* lpcsaBuffer;
        uint32_t dwOutputFlags;
        Windows::Win32::WinSock::BLOB* lpBlob;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct WSAQUERYSETW
    {
        uint32_t dwSize;
        uint16_t* lpszServiceInstanceName;
        ::win32::guid* lpServiceClassId;
        Windows::Win32::WinSock::WSAVERSION* lpVersion;
        uint16_t* lpszComment;
        uint32_t dwNameSpace;
        ::win32::guid* lpNSProviderId;
        uint16_t* lpszContext;
        uint32_t dwNumberOfProtocols;
        Windows::Win32::WinSock::AFPROTOCOLS* lpafpProtocols;
        uint16_t* lpszQueryString;
        uint32_t dwNumberOfCsAddrs;
        Windows::Win32::WinSock::CSADDR_INFO* lpcsaBuffer;
        uint32_t dwOutputFlags;
        Windows::Win32::WinSock::BLOB* lpBlob;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct WSAQUERYSET2A
    {
        uint32_t dwSize;
        int8_t* lpszServiceInstanceName;
        Windows::Win32::WinSock::WSAVERSION* lpVersion;
        int8_t* lpszComment;
        uint32_t dwNameSpace;
        ::win32::guid* lpNSProviderId;
        int8_t* lpszContext;
        uint32_t dwNumberOfProtocols;
        Windows::Win32::WinSock::AFPROTOCOLS* lpafpProtocols;
        int8_t* lpszQueryString;
        uint32_t dwNumberOfCsAddrs;
        Windows::Win32::WinSock::CSADDR_INFO* lpcsaBuffer;
        uint32_t dwOutputFlags;
        Windows::Win32::WinSock::BLOB* lpBlob;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct WSAQUERYSET2W
    {
        uint32_t dwSize;
        uint16_t* lpszServiceInstanceName;
        Windows::Win32::WinSock::WSAVERSION* lpVersion;
        uint16_t* lpszComment;
        uint32_t dwNameSpace;
        ::win32::guid* lpNSProviderId;
        uint16_t* lpszContext;
        uint32_t dwNumberOfProtocols;
        Windows::Win32::WinSock::AFPROTOCOLS* lpafpProtocols;
        uint16_t* lpszQueryString;
        uint32_t dwNumberOfCsAddrs;
        Windows::Win32::WinSock::CSADDR_INFO* lpcsaBuffer;
        uint32_t dwOutputFlags;
        Windows::Win32::WinSock::BLOB* lpBlob;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct WSANSCLASSINFOA
    {
        int8_t* lpszName;
        uint32_t dwNameSpace;
        uint32_t dwValueType;
        uint32_t dwValueSize;
        void* lpValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct WSANSCLASSINFOW
    {
        uint16_t* lpszName;
        uint32_t dwNameSpace;
        uint32_t dwValueType;
        uint32_t dwValueSize;
        void* lpValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct WSASERVICECLASSINFOA
    {
        ::win32::guid* lpServiceClassId;
        int8_t* lpszServiceClassName;
        uint32_t dwCount;
        Windows::Win32::WinSock::WSANSCLASSINFOA* lpClassInfos;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct WSASERVICECLASSINFOW
    {
        ::win32::guid* lpServiceClassId;
        uint16_t* lpszServiceClassName;
        uint32_t dwCount;
        Windows::Win32::WinSock::WSANSCLASSINFOW* lpClassInfos;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct WSANAMESPACE_INFOA
    {
        ::win32::guid NSProviderId;
        uint32_t dwNameSpace;
        Windows::Win32::SystemServices::BOOL fActive;
        uint32_t dwVersion;
        int8_t* lpszIdentifier;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct WSANAMESPACE_INFOW
    {
        ::win32::guid NSProviderId;
        uint32_t dwNameSpace;
        Windows::Win32::SystemServices::BOOL fActive;
        uint32_t dwVersion;
        uint16_t* lpszIdentifier;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct WSANAMESPACE_INFOEXA
    {
        ::win32::guid NSProviderId;
        uint32_t dwNameSpace;
        Windows::Win32::SystemServices::BOOL fActive;
        uint32_t dwVersion;
        int8_t* lpszIdentifier;
        Windows::Win32::WinSock::BLOB ProviderSpecific;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct WSANAMESPACE_INFOEXW
    {
        ::win32::guid NSProviderId;
        uint32_t dwNameSpace;
        Windows::Win32::SystemServices::BOOL fActive;
        uint32_t dwVersion;
        uint16_t* lpszIdentifier;
        Windows::Win32::WinSock::BLOB ProviderSpecific;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct WSAPOLLFD
    {
        size_t fd;
        int16_t events;
        int16_t revents;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct sockaddr_in6_old
    {
        int16_t sin6_family;
        uint16_t sin6_port;
        uint32_t sin6_flowinfo;
        Windows::Win32::WinSock::in6_addr sin6_addr;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    union sockaddr_gen
    {
        Windows::Win32::WinSock::SOCKADDR Address;
        Windows::Win32::WinSock::sockaddr_in AddressIn;
        Windows::Win32::WinSock::sockaddr_in6_old AddressIn6;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct INTERFACE_INFO
    {
        uint32_t iiFlags;
        Windows::Win32::WinSock::sockaddr_gen iiAddress;
        Windows::Win32::WinSock::sockaddr_gen iiBroadcastAddress;
        Windows::Win32::WinSock::sockaddr_gen iiNetmask;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct INTERFACE_INFO_EX
    {
        uint32_t iiFlags;
        Windows::Win32::WinSock::SOCKET_ADDRESS iiAddress;
        Windows::Win32::WinSock::SOCKET_ADDRESS iiBroadcastAddress;
        Windows::Win32::WinSock::SOCKET_ADDRESS iiNetmask;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct sockaddr_in6_w2ksp1
    {
        int16_t sin6_family;
        uint16_t sin6_port;
        uint32_t sin6_flowinfo;
        Windows::Win32::WinSock::in6_addr sin6_addr;
        uint32_t sin6_scope_id;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct ip_mreq
    {
        Windows::Win32::WinSock::in_addr imr_multiaddr;
        Windows::Win32::WinSock::in_addr imr_interface;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct ip_mreq_source
    {
        Windows::Win32::WinSock::in_addr imr_multiaddr;
        Windows::Win32::WinSock::in_addr imr_sourceaddr;
        Windows::Win32::WinSock::in_addr imr_interface;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct ip_msfilter
    {
        Windows::Win32::WinSock::in_addr imsf_multiaddr;
        Windows::Win32::WinSock::in_addr imsf_interface;
        Windows::Win32::WinSock::MULTICAST_MODE_TYPE imsf_fmode;
        uint32_t imsf_numsrc;
        Windows::Win32::WinSock::in_addr imsf_slist[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct ipv6_mreq
    {
        Windows::Win32::WinSock::in6_addr ipv6mr_multiaddr;
        uint32_t ipv6mr_interface;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct group_req
    {
        uint32_t gr_interface;
        Windows::Win32::NetworkDrivers::SOCKADDR_STORAGE_LH gr_group;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct group_source_req
    {
        uint32_t gsr_interface;
        Windows::Win32::NetworkDrivers::SOCKADDR_STORAGE_LH gsr_group;
        Windows::Win32::NetworkDrivers::SOCKADDR_STORAGE_LH gsr_source;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct group_filter
    {
        uint32_t gf_interface;
        Windows::Win32::NetworkDrivers::SOCKADDR_STORAGE_LH gf_group;
        Windows::Win32::WinSock::MULTICAST_MODE_TYPE gf_fmode;
        uint32_t gf_numsrc;
        Windows::Win32::NetworkDrivers::SOCKADDR_STORAGE_LH gf_slist[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct in_pktinfo
    {
        Windows::Win32::WinSock::in_addr ipi_addr;
        uint32_t ipi_ifindex;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct in6_pktinfo
    {
        Windows::Win32::WinSock::in6_addr ipi6_addr;
        uint32_t ipi6_ifindex;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct in_pktinfo_ex
    {
        Windows::Win32::WinSock::in_pktinfo pkt_info;
        Windows::Win32::WinSock::SCOPE_ID scope_id;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct in6_pktinfo_ex
    {
        Windows::Win32::WinSock::in6_pktinfo pkt_info;
        Windows::Win32::WinSock::SCOPE_ID scope_id;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct in_recverr
    {
        Windows::Win32::WinSock::IPPROTO protocol;
        uint32_t info;
        uint8_t type;
        uint8_t code;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct icmp_error_info
    {
        Windows::Win32::IpHelper::SOCKADDR_INET srcaddress;
        Windows::Win32::WinSock::IPPROTO protocol;
        uint8_t type;
        uint8_t code;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct RM_SEND_WINDOW
    {
        uint32_t RateKbitsPerSec;
        uint32_t WindowSizeInMSecs;
        uint32_t WindowSizeInBytes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct RM_SENDER_STATS
    {
        uint64_t DataBytesSent;
        uint64_t TotalBytesSent;
        uint64_t NaksReceived;
        uint64_t NaksReceivedTooLate;
        uint64_t NumOutstandingNaks;
        uint64_t NumNaksAfterRData;
        uint64_t RepairPacketsSent;
        uint64_t BufferSpaceAvailable;
        uint64_t TrailingEdgeSeqId;
        uint64_t LeadingEdgeSeqId;
        uint64_t RateKBitsPerSecOverall;
        uint64_t RateKBitsPerSecLast;
        uint64_t TotalODataPacketsSent;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct RM_RECEIVER_STATS
    {
        uint64_t NumODataPacketsReceived;
        uint64_t NumRDataPacketsReceived;
        uint64_t NumDuplicateDataPackets;
        uint64_t DataBytesReceived;
        uint64_t TotalBytesReceived;
        uint64_t RateKBitsPerSecOverall;
        uint64_t RateKBitsPerSecLast;
        uint64_t TrailingEdgeSeqId;
        uint64_t LeadingEdgeSeqId;
        uint64_t AverageSequencesInWindow;
        uint64_t MinSequencesInWindow;
        uint64_t MaxSequencesInWindow;
        uint64_t FirstNakSequenceNumber;
        uint64_t NumPendingNaks;
        uint64_t NumOutstandingNaks;
        uint64_t NumDataPacketsBuffered;
        uint64_t TotalSelectiveNaksSent;
        uint64_t TotalParityNaksSent;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct RM_FEC_INFO
    {
        uint16_t FECBlockSize;
        uint16_t FECProActivePackets;
        uint8_t FECGroupSize;
        uint8_t fFECOnDemandParityEnabled;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct IPX_ADDRESS_DATA
    {
        int32_t adapternum;
        uint8_t netnum[4];
        uint8_t nodenum[6];
        uint8_t wan;
        uint8_t status;
        int32_t maxpkt;
        uint32_t linkspeed;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct IPX_NETNUM_DATA
    {
        uint8_t netnum[4];
        uint16_t hopcount;
        uint16_t netdelay;
        int32_t cardnum;
        uint8_t router[6];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct IPX_SPXCONNSTATUS_DATA
    {
        uint8_t ConnectionState;
        uint8_t WatchDogActive;
        uint16_t LocalConnectionId;
        uint16_t RemoteConnectionId;
        uint16_t LocalSequenceNumber;
        uint16_t LocalAckNumber;
        uint16_t LocalAllocNumber;
        uint16_t RemoteAckNumber;
        uint16_t RemoteAllocNumber;
        uint16_t LocalSocket;
        uint8_t ImmediateAddress[6];
        uint8_t RemoteNetwork[4];
        uint8_t RemoteNode[6];
        uint16_t RemoteSocket;
        uint16_t RetransmissionCount;
        uint16_t EstimatedRoundTripDelay;
        uint16_t RetransmittedPackets;
        uint16_t SuppressedPacket;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct LM_IRPARMS
    {
        uint32_t nTXDataBytes;
        uint32_t nRXDataBytes;
        uint32_t nBaudRate;
        uint32_t thresholdTime;
        uint32_t discTime;
        uint16_t nMSLinkTurn;
        uint8_t nTXPackets;
        uint8_t nRXPackets;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct SOCKADDR_IRDA
    {
        uint16_t irdaAddressFamily;
        uint8_t irdaDeviceID[4];
        int8_t irdaServiceName[25];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct WINDOWS_IRDA_DEVICE_INFO
    {
        uint8_t irdaDeviceID[4];
        int8_t irdaDeviceName[22];
        uint8_t irdaDeviceHints1;
        uint8_t irdaDeviceHints2;
        uint8_t irdaCharSet;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct WCE_IRDA_DEVICE_INFO
    {
        uint8_t irdaDeviceID[4];
        int8_t irdaDeviceName[22];
        uint8_t Reserved[2];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct WINDOWS_DEVICELIST
    {
        uint32_t numDevice;
        Windows::Win32::WinSock::WINDOWS_IRDA_DEVICE_INFO Device[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct WCE_DEVICELIST
    {
        uint32_t numDevice;
        Windows::Win32::WinSock::WCE_IRDA_DEVICE_INFO Device[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct WINDOWS_IAS_SET
    {
        union _irdaAttribute_e__Union
        {
            struct _irdaAttribOctetSeq_e__Struct
            {
                uint16_t Len;
                uint8_t OctetSeq[1024];
            };
            struct _irdaAttribUsrStr_e__Struct
            {
                uint8_t Len;
                uint8_t CharSet;
                uint8_t UsrStr[256];
            };
            int32_t irdaAttribInt;
            _irdaAttribOctetSeq_e__Struct irdaAttribOctetSeq;
            _irdaAttribUsrStr_e__Struct irdaAttribUsrStr;
        };
        int8_t irdaClassName[64];
        int8_t irdaAttribName[256];
        uint32_t irdaAttribType;
        _irdaAttribute_e__Union irdaAttribute;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct WINDOWS_IAS_QUERY
    {
        union _irdaAttribute_e__Union
        {
            struct _irdaAttribOctetSeq_e__Struct
            {
                uint32_t Len;
                uint8_t OctetSeq[1024];
            };
            struct _irdaAttribUsrStr_e__Struct
            {
                uint32_t Len;
                uint32_t CharSet;
                uint8_t UsrStr[256];
            };
            int32_t irdaAttribInt;
            _irdaAttribOctetSeq_e__Struct irdaAttribOctetSeq;
            _irdaAttribUsrStr_e__Struct irdaAttribUsrStr;
        };
        uint8_t irdaDeviceID[4];
        int8_t irdaClassName[64];
        int8_t irdaAttribName[256];
        uint32_t irdaAttribType;
        _irdaAttribute_e__Union irdaAttribute;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct NL_PATH_BANDWIDTH_ROD
    {
        uint64_t Bandwidth;
        uint64_t Instability;
        uint8_t BandwidthPeaked;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct TRANSPORT_SETTING_ID
    {
        ::win32::guid Guid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct tcp_keepalive
    {
        uint32_t onoff;
        uint32_t keepalivetime;
        uint32_t keepaliveinterval;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct REAL_TIME_NOTIFICATION_SETTING_INPUT
    {
        Windows::Win32::WinSock::TRANSPORT_SETTING_ID TransportSettingId;
        ::win32::guid BrokerEventGuid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct REAL_TIME_NOTIFICATION_SETTING_INPUT_EX
    {
        Windows::Win32::WinSock::TRANSPORT_SETTING_ID TransportSettingId;
        ::win32::guid BrokerEventGuid;
        uint8_t Unmark;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct REAL_TIME_NOTIFICATION_SETTING_OUTPUT
    {
        Windows::Win32::WinSock::CONTROL_CHANNEL_TRIGGER_STATUS ChannelStatus;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct ASSOCIATE_NAMERES_CONTEXT_INPUT
    {
        Windows::Win32::WinSock::TRANSPORT_SETTING_ID TransportSettingId;
        uint64_t Handle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct RCVALL_IF
    {
        Windows::Win32::WinSock::RCVALL_VALUE Mode;
        uint32_t Interface;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct TCP_INITIAL_RTO_PARAMETERS
    {
        uint16_t Rtt;
        uint8_t MaxSynRetransmissions;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct TCP_ICW_PARAMETERS
    {
        Windows::Win32::WinSock::TCP_ICW_LEVEL Level;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct TCP_ACK_FREQUENCY_PARAMETERS
    {
        uint8_t TcpDelayedAckFrequency;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct TCP_INFO_v0
    {
        Windows::Win32::WinSock::TCPSTATE State;
        uint32_t Mss;
        uint64_t ConnectionTimeMs;
        uint8_t TimestampsEnabled;
        uint32_t RttUs;
        uint32_t MinRttUs;
        uint32_t BytesInFlight;
        uint32_t Cwnd;
        uint32_t SndWnd;
        uint32_t RcvWnd;
        uint32_t RcvBuf;
        uint64_t BytesOut;
        uint64_t BytesIn;
        uint32_t BytesReordered;
        uint32_t BytesRetrans;
        uint32_t FastRetrans;
        uint32_t DupAcksIn;
        uint32_t TimeoutEpisodes;
        uint8_t SynRetrans;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct TCP_INFO_v1
    {
        Windows::Win32::WinSock::TCPSTATE State;
        uint32_t Mss;
        uint64_t ConnectionTimeMs;
        uint8_t TimestampsEnabled;
        uint32_t RttUs;
        uint32_t MinRttUs;
        uint32_t BytesInFlight;
        uint32_t Cwnd;
        uint32_t SndWnd;
        uint32_t RcvWnd;
        uint32_t RcvBuf;
        uint64_t BytesOut;
        uint64_t BytesIn;
        uint32_t BytesReordered;
        uint32_t BytesRetrans;
        uint32_t FastRetrans;
        uint32_t DupAcksIn;
        uint32_t TimeoutEpisodes;
        uint8_t SynRetrans;
        uint32_t SndLimTransRwin;
        uint32_t SndLimTimeRwin;
        uint64_t SndLimBytesRwin;
        uint32_t SndLimTransCwnd;
        uint32_t SndLimTimeCwnd;
        uint64_t SndLimBytesCwnd;
        uint32_t SndLimTransSnd;
        uint32_t SndLimTimeSnd;
        uint64_t SndLimBytesSnd;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct INET_PORT_RANGE
    {
        uint16_t StartPort;
        uint16_t NumberOfPorts;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct INET_PORT_RESERVATION_TOKEN
    {
        uint64_t Token;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct INET_PORT_RESERVATION_INSTANCE
    {
        Windows::Win32::WinSock::INET_PORT_RANGE Reservation;
        Windows::Win32::WinSock::INET_PORT_RESERVATION_TOKEN Token;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct INET_PORT_RESERVATION_INFORMATION
    {
        uint32_t OwningPid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct SOCKET_SECURITY_SETTINGS
    {
        Windows::Win32::WinSock::SOCKET_SECURITY_PROTOCOL SecurityProtocol;
        uint32_t SecurityFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct SOCKET_SECURITY_SETTINGS_IPSEC
    {
        Windows::Win32::WinSock::SOCKET_SECURITY_PROTOCOL SecurityProtocol;
        uint32_t SecurityFlags;
        uint32_t IpsecFlags;
        ::win32::guid AuthipMMPolicyKey;
        ::win32::guid AuthipQMPolicyKey;
        ::win32::guid Reserved;
        uint64_t Reserved2;
        uint32_t UserNameStringLen;
        uint32_t DomainNameStringLen;
        uint32_t PasswordStringLen;
        uint16_t AllStrings[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct SOCKET_PEER_TARGET_NAME
    {
        Windows::Win32::WinSock::SOCKET_SECURITY_PROTOCOL SecurityProtocol;
        Windows::Win32::NetworkDrivers::SOCKADDR_STORAGE_LH PeerAddress;
        uint32_t PeerTargetNameStringLen;
        uint16_t AllStrings[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct SOCKET_SECURITY_QUERY_TEMPLATE
    {
        Windows::Win32::WinSock::SOCKET_SECURITY_PROTOCOL SecurityProtocol;
        Windows::Win32::NetworkDrivers::SOCKADDR_STORAGE_LH PeerAddress;
        uint32_t PeerTokenAccessMask;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct SOCKET_SECURITY_QUERY_TEMPLATE_IPSEC2
    {
        Windows::Win32::WinSock::SOCKET_SECURITY_PROTOCOL SecurityProtocol;
        Windows::Win32::NetworkDrivers::SOCKADDR_STORAGE_LH PeerAddress;
        uint32_t PeerTokenAccessMask;
        uint32_t Flags;
        uint32_t FieldMask;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct SOCKET_SECURITY_QUERY_INFO
    {
        Windows::Win32::WinSock::SOCKET_SECURITY_PROTOCOL SecurityProtocol;
        uint32_t Flags;
        uint64_t PeerApplicationAccessTokenHandle;
        uint64_t PeerMachineAccessTokenHandle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct SOCKET_SECURITY_QUERY_INFO_IPSEC2
    {
        Windows::Win32::WinSock::SOCKET_SECURITY_PROTOCOL SecurityProtocol;
        uint32_t Flags;
        uint64_t PeerApplicationAccessTokenHandle;
        uint64_t PeerMachineAccessTokenHandle;
        uint64_t MmSaId;
        uint64_t QmSaId;
        uint32_t NegotiationWinerr;
        ::win32::guid SaLookupContext;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct RSS_SCALABILITY_INFO
    {
        uint8_t RssEnabled;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct WSA_COMPATIBILITY_MODE
    {
        Windows::Win32::WinSock::WSA_COMPATIBILITY_BEHAVIOR_ID BehaviorId;
        uint32_t TargetOsVersion;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct RIO_BUFFERID_t
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct RIO_CQ_t
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct RIO_RQ_t
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct RIORESULT
    {
        int32_t Status;
        uint32_t BytesTransferred;
        uint64_t SocketContext;
        uint64_t RequestContext;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct RIO_BUF
    {
        Windows::Win32::WinSock::RIO_BUFFERID_t* BufferId;
        uint32_t Offset;
        uint32_t Length;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct RIO_CMSG_BUFFER
    {
        uint32_t TotalLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct ATM_ADDRESS
    {
        uint32_t AddressType;
        uint32_t NumofDigits;
        uint8_t Addr[20];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct ATM_BLLI
    {
        uint32_t Layer2Protocol;
        uint32_t Layer2UserSpecifiedProtocol;
        uint32_t Layer3Protocol;
        uint32_t Layer3UserSpecifiedProtocol;
        uint32_t Layer3IPI;
        uint8_t SnapID[5];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct ATM_BHLI
    {
        uint32_t HighLayerInfoType;
        uint32_t HighLayerInfoLength;
        uint8_t HighLayerInfo[8];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct sockaddr_atm
    {
        uint16_t satm_family;
        Windows::Win32::WinSock::ATM_ADDRESS satm_number;
        Windows::Win32::WinSock::ATM_BLLI satm_blli;
        Windows::Win32::WinSock::ATM_BHLI satm_bhli;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct Q2931_IE
    {
        Windows::Win32::WinSock::Q2931_IE_TYPE IEType;
        uint32_t IELength;
        uint8_t IE[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct AAL5_PARAMETERS
    {
        uint32_t ForwardMaxCPCSSDUSize;
        uint32_t BackwardMaxCPCSSDUSize;
        uint8_t Mode;
        uint8_t SSCSType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct AALUSER_PARAMETERS
    {
        uint32_t UserDefined;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct AAL_PARAMETERS_IE
    {
        union _AALSpecificParameters_e__Union
        {
            Windows::Win32::WinSock::AAL5_PARAMETERS AAL5Parameters;
            Windows::Win32::WinSock::AALUSER_PARAMETERS AALUserParameters;
        };
        Windows::Win32::WinSock::AAL_TYPE AALType;
        _AALSpecificParameters_e__Union AALSpecificParameters;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct ATM_TD
    {
        uint32_t PeakCellRate_CLP0;
        uint32_t PeakCellRate_CLP01;
        uint32_t SustainableCellRate_CLP0;
        uint32_t SustainableCellRate_CLP01;
        uint32_t MaxBurstSize_CLP0;
        uint32_t MaxBurstSize_CLP01;
        Windows::Win32::SystemServices::BOOL Tagging;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct ATM_TRAFFIC_DESCRIPTOR_IE
    {
        Windows::Win32::WinSock::ATM_TD Forward;
        Windows::Win32::WinSock::ATM_TD Backward;
        Windows::Win32::SystemServices::BOOL BestEffort;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct ATM_BROADBAND_BEARER_CAPABILITY_IE
    {
        uint8_t BearerClass;
        uint8_t TrafficType;
        uint8_t TimingRequirements;
        uint8_t ClippingSusceptability;
        uint8_t UserPlaneConnectionConfig;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct ATM_BLLI_IE
    {
        uint32_t Layer2Protocol;
        uint8_t Layer2Mode;
        uint8_t Layer2WindowSize;
        uint32_t Layer2UserSpecifiedProtocol;
        uint32_t Layer3Protocol;
        uint8_t Layer3Mode;
        uint8_t Layer3DefaultPacketSize;
        uint8_t Layer3PacketWindowSize;
        uint32_t Layer3UserSpecifiedProtocol;
        uint32_t Layer3IPI;
        uint8_t SnapID[5];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct ATM_CALLING_PARTY_NUMBER_IE
    {
        Windows::Win32::WinSock::ATM_ADDRESS ATM_Number;
        uint8_t Presentation_Indication;
        uint8_t Screening_Indicator;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct ATM_CAUSE_IE
    {
        uint8_t Location;
        uint8_t Cause;
        uint8_t DiagnosticsLength;
        uint8_t Diagnostics[4];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct ATM_QOS_CLASS_IE
    {
        uint8_t QOSClassForward;
        uint8_t QOSClassBackward;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct ATM_TRANSIT_NETWORK_SELECTION_IE
    {
        uint8_t TypeOfNetworkId;
        uint8_t NetworkIdPlan;
        uint8_t NetworkIdLength;
        uint8_t NetworkId[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct ATM_CONNECTION_ID
    {
        uint32_t DeviceNumber;
        uint32_t VPI;
        uint32_t VCI;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::QualityOfService
{
    struct QOS
    {
        Windows::Win32::QualityOfService::FLOWSPEC SendingFlowspec;
        Windows::Win32::QualityOfService::FLOWSPEC ReceivingFlowspec;
        Windows::Win32::WinSock::WSABUF ProviderSpecific;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct ATM_PVC_PARAMS
    {
        Windows::Win32::WinSock::ATM_CONNECTION_ID PvcConnectionId;
        Windows::Win32::QualityOfService::QOS PvcQos;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct NAPI_DOMAIN_DESCRIPTION_BLOB
    {
        uint32_t AuthLevel;
        uint32_t cchDomainName;
        uint32_t OffsetNextDomainDescription;
        uint32_t OffsetThisDomainName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct NAPI_PROVIDER_INSTALLATION_BLOB
    {
        uint32_t dwVersion;
        uint32_t dwProviderType;
        uint32_t fSupportsWildCard;
        uint32_t cDomains;
        uint32_t OffsetFirstDomain;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct TRANSMIT_FILE_BUFFERS
    {
        void* Head;
        uint32_t HeadLength;
        void* Tail;
        uint32_t TailLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct TRANSMIT_PACKETS_ELEMENT
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                Windows::Win32::SystemServices::LARGE_INTEGER nFileOffset;
                Windows::Win32::SystemServices::HANDLE hFile;
            };
            _Anonymous_e__Struct Anonymous;
            void* pBuffer;
        };
        uint32_t dwElFlags;
        uint32_t cLength;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct NLA_BLOB
    {
        struct _header_e__Struct
        {
            Windows::Win32::WinSock::NLA_BLOB_DATA_TYPE type;
            uint32_t dwSize;
            uint32_t nextOffset;
        };
        union _data_e__Union
        {
            struct _interfaceData_e__Struct
            {
                uint32_t dwType;
                uint32_t dwSpeed;
                int8_t adapterName[1];
            };
            struct _locationData_e__Struct
            {
                int8_t information[1];
            };
            struct _connectivity_e__Struct
            {
                Windows::Win32::WinSock::NLA_CONNECTIVITY_TYPE type;
                Windows::Win32::WinSock::NLA_INTERNET internet;
            };
            struct _ICS_e__Struct
            {
                struct _remote_e__Struct
                {
                    uint32_t speed;
                    uint32_t type;
                    uint32_t state;
                    uint16_t machineName[256];
                    uint16_t sharedAdapterName[256];
                };
                _remote_e__Struct remote;
            };
            int8_t rawData[1];
            _interfaceData_e__Struct interfaceData;
            _locationData_e__Struct locationData;
            _connectivity_e__Struct connectivity;
            _ICS_e__Struct ICS;
        };
        _header_e__Struct header;
        _data_e__Union data;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct WSAPOLLDATA
    {
        int32_t result;
        uint32_t fds;
        int32_t timeout;
        Windows::Win32::WinSock::WSAPOLLFD fdArray[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct WSASENDMSG
    {
        Windows::Win32::WinSock::WSAMSG* lpMsg;
        uint32_t dwFlags;
        uint32_t* lpNumberOfBytesSent;
        Windows::Win32::SystemServices::OVERLAPPED* lpOverlapped;
        Windows::Win32::WinSock::LPWSAOVERLAPPED_COMPLETION_ROUTINE* lpCompletionRoutine;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct RIO_NOTIFICATION_COMPLETION
    {
        union _Anonymous_e__Union
        {
            struct _Event_e__Struct
            {
                Windows::Win32::SystemServices::HANDLE EventHandle;
                Windows::Win32::SystemServices::BOOL NotifyReset;
            };
            struct _Iocp_e__Struct
            {
                Windows::Win32::SystemServices::HANDLE IocpHandle;
                void* CompletionKey;
                void* Overlapped;
            };
            _Event_e__Struct Event;
            _Iocp_e__Struct Iocp;
        };
        Windows::Win32::WinSock::RIO_NOTIFICATION_COMPLETION_TYPE Type;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct RIO_EXTENSION_FUNCTION_TABLE
    {
        uint32_t cbSize;
        Windows::Win32::WinSock::LPFN_RIORECEIVE* RIOReceive;
        Windows::Win32::WinSock::LPFN_RIORECEIVEEX* RIOReceiveEx;
        Windows::Win32::WinSock::LPFN_RIOSEND* RIOSend;
        Windows::Win32::WinSock::LPFN_RIOSENDEX* RIOSendEx;
        Windows::Win32::WinSock::LPFN_RIOCLOSECOMPLETIONQUEUE* RIOCloseCompletionQueue;
        Windows::Win32::WinSock::LPFN_RIOCREATECOMPLETIONQUEUE* RIOCreateCompletionQueue;
        Windows::Win32::WinSock::LPFN_RIOCREATEREQUESTQUEUE* RIOCreateRequestQueue;
        Windows::Win32::WinSock::LPFN_RIODEQUEUECOMPLETION* RIODequeueCompletion;
        Windows::Win32::WinSock::LPFN_RIODEREGISTERBUFFER* RIODeregisterBuffer;
        Windows::Win32::WinSock::LPFN_RIONOTIFY* RIONotify;
        Windows::Win32::WinSock::LPFN_RIOREGISTERBUFFER* RIORegisterBuffer;
        Windows::Win32::WinSock::LPFN_RIORESIZECOMPLETIONQUEUE* RIOResizeCompletionQueue;
        Windows::Win32::WinSock::LPFN_RIORESIZEREQUESTQUEUE* RIOResizeRequestQueue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct WSPData
    {
        uint16_t wVersion;
        uint16_t wHighVersion;
        uint16_t szDescription[256];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct WSATHREADID
    {
        Windows::Win32::SystemServices::HANDLE ThreadHandle;
        size_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct WSPPROC_TABLE
    {
        Windows::Win32::WinSock::LPWSPACCEPT* lpWSPAccept;
        Windows::Win32::WinSock::LPWSPADDRESSTOSTRING* lpWSPAddressToString;
        Windows::Win32::WinSock::LPWSPASYNCSELECT* lpWSPAsyncSelect;
        Windows::Win32::WinSock::LPWSPBIND* lpWSPBind;
        Windows::Win32::WinSock::LPWSPCANCELBLOCKINGCALL* lpWSPCancelBlockingCall;
        Windows::Win32::WinSock::LPWSPCLEANUP* lpWSPCleanup;
        Windows::Win32::WinSock::LPWSPCLOSESOCKET* lpWSPCloseSocket;
        Windows::Win32::WinSock::LPWSPCONNECT* lpWSPConnect;
        Windows::Win32::WinSock::LPWSPDUPLICATESOCKET* lpWSPDuplicateSocket;
        Windows::Win32::WinSock::LPWSPENUMNETWORKEVENTS* lpWSPEnumNetworkEvents;
        Windows::Win32::WinSock::LPWSPEVENTSELECT* lpWSPEventSelect;
        Windows::Win32::WinSock::LPWSPGETOVERLAPPEDRESULT* lpWSPGetOverlappedResult;
        Windows::Win32::WinSock::LPWSPGETPEERNAME* lpWSPGetPeerName;
        Windows::Win32::WinSock::LPWSPGETSOCKNAME* lpWSPGetSockName;
        Windows::Win32::WinSock::LPWSPGETSOCKOPT* lpWSPGetSockOpt;
        Windows::Win32::WinSock::LPWSPGETQOSBYNAME* lpWSPGetQOSByName;
        Windows::Win32::WinSock::LPWSPIOCTL* lpWSPIoctl;
        Windows::Win32::WinSock::LPWSPJOINLEAF* lpWSPJoinLeaf;
        Windows::Win32::WinSock::LPWSPLISTEN* lpWSPListen;
        Windows::Win32::WinSock::LPWSPRECV* lpWSPRecv;
        Windows::Win32::WinSock::LPWSPRECVDISCONNECT* lpWSPRecvDisconnect;
        Windows::Win32::WinSock::LPWSPRECVFROM* lpWSPRecvFrom;
        Windows::Win32::WinSock::LPWSPSELECT* lpWSPSelect;
        Windows::Win32::WinSock::LPWSPSEND* lpWSPSend;
        Windows::Win32::WinSock::LPWSPSENDDISCONNECT* lpWSPSendDisconnect;
        Windows::Win32::WinSock::LPWSPSENDTO* lpWSPSendTo;
        Windows::Win32::WinSock::LPWSPSETSOCKOPT* lpWSPSetSockOpt;
        Windows::Win32::WinSock::LPWSPSHUTDOWN* lpWSPShutdown;
        Windows::Win32::WinSock::LPWSPSOCKET* lpWSPSocket;
        Windows::Win32::WinSock::LPWSPSTRINGTOADDRESS* lpWSPStringToAddress;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct WSPUPCALLTABLE
    {
        Windows::Win32::WinSock::LPWPUCLOSEEVENT* lpWPUCloseEvent;
        Windows::Win32::WinSock::LPWPUCLOSESOCKETHANDLE* lpWPUCloseSocketHandle;
        Windows::Win32::WinSock::LPWPUCREATEEVENT* lpWPUCreateEvent;
        Windows::Win32::WinSock::LPWPUCREATESOCKETHANDLE* lpWPUCreateSocketHandle;
        Windows::Win32::WinSock::LPWPUFDISSET* lpWPUFDIsSet;
        Windows::Win32::WinSock::LPWPUGETPROVIDERPATH* lpWPUGetProviderPath;
        Windows::Win32::WinSock::LPWPUMODIFYIFSHANDLE* lpWPUModifyIFSHandle;
        Windows::Win32::WinSock::LPWPUPOSTMESSAGE* lpWPUPostMessage;
        Windows::Win32::WinSock::LPWPUQUERYBLOCKINGCALLBACK* lpWPUQueryBlockingCallback;
        Windows::Win32::WinSock::LPWPUQUERYSOCKETHANDLECONTEXT* lpWPUQuerySocketHandleContext;
        Windows::Win32::WinSock::LPWPUQUEUEAPC* lpWPUQueueApc;
        Windows::Win32::WinSock::LPWPURESETEVENT* lpWPUResetEvent;
        Windows::Win32::WinSock::LPWPUSETEVENT* lpWPUSetEvent;
        Windows::Win32::WinSock::LPWPUOPENCURRENTTHREAD* lpWPUOpenCurrentThread;
        Windows::Win32::WinSock::LPWPUCLOSETHREAD* lpWPUCloseThread;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct WSC_PROVIDER_AUDIT_INFO
    {
        uint32_t RecordSize;
        void* Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct NSP_ROUTINE
    {
        uint32_t cbSize;
        uint32_t dwMajorVersion;
        uint32_t dwMinorVersion;
        Windows::Win32::WinSock::LPNSPCLEANUP* NSPCleanup;
        Windows::Win32::WinSock::LPNSPLOOKUPSERVICEBEGIN* NSPLookupServiceBegin;
        Windows::Win32::WinSock::LPNSPLOOKUPSERVICENEXT* NSPLookupServiceNext;
        Windows::Win32::WinSock::LPNSPLOOKUPSERVICEEND* NSPLookupServiceEnd;
        Windows::Win32::WinSock::LPNSPSETSERVICE* NSPSetService;
        Windows::Win32::WinSock::LPNSPINSTALLSERVICECLASS* NSPInstallServiceClass;
        Windows::Win32::WinSock::LPNSPREMOVESERVICECLASS* NSPRemoveServiceClass;
        Windows::Win32::WinSock::LPNSPGETSERVICECLASSINFO* NSPGetServiceClassInfo;
        Windows::Win32::WinSock::LPNSPIOCTL* NSPIoctl;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct NSPV2_ROUTINE
    {
        uint32_t cbSize;
        uint32_t dwMajorVersion;
        uint32_t dwMinorVersion;
        Windows::Win32::WinSock::LPNSPV2STARTUP* NSPv2Startup;
        Windows::Win32::WinSock::LPNSPV2CLEANUP* NSPv2Cleanup;
        Windows::Win32::WinSock::LPNSPV2LOOKUPSERVICEBEGIN* NSPv2LookupServiceBegin;
        Windows::Win32::WinSock::LPNSPV2LOOKUPSERVICENEXTEX* NSPv2LookupServiceNextEx;
        Windows::Win32::WinSock::LPNSPV2LOOKUPSERVICEEND* NSPv2LookupServiceEnd;
        Windows::Win32::WinSock::LPNSPV2SETSERVICEEX* NSPv2SetServiceEx;
        Windows::Win32::WinSock::LPNSPV2CLIENTSESSIONRUNDOWN* NSPv2ClientSessionRundown;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct NS_INFOA
    {
        uint32_t dwNameSpace;
        uint32_t dwNameSpaceFlags;
        int8_t* lpNameSpace;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct NS_INFOW
    {
        uint32_t dwNameSpace;
        uint32_t dwNameSpaceFlags;
        uint16_t* lpNameSpace;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct SERVICE_TYPE_VALUE
    {
        uint32_t dwNameSpace;
        uint32_t dwValueType;
        uint32_t dwValueSize;
        uint32_t dwValueNameOffset;
        uint32_t dwValueOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct SERVICE_TYPE_VALUE_ABSA
    {
        uint32_t dwNameSpace;
        uint32_t dwValueType;
        uint32_t dwValueSize;
        int8_t* lpValueName;
        void* lpValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct SERVICE_TYPE_VALUE_ABSW
    {
        uint32_t dwNameSpace;
        uint32_t dwValueType;
        uint32_t dwValueSize;
        uint16_t* lpValueName;
        void* lpValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct SERVICE_TYPE_INFO
    {
        uint32_t dwTypeNameOffset;
        uint32_t dwValueCount;
        Windows::Win32::WinSock::SERVICE_TYPE_VALUE Values[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct SERVICE_TYPE_INFO_ABSA
    {
        int8_t* lpTypeName;
        uint32_t dwValueCount;
        Windows::Win32::WinSock::SERVICE_TYPE_VALUE_ABSA Values[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct SERVICE_TYPE_INFO_ABSW
    {
        uint16_t* lpTypeName;
        uint32_t dwValueCount;
        Windows::Win32::WinSock::SERVICE_TYPE_VALUE_ABSW Values[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct SERVICE_ADDRESS
    {
        uint32_t dwAddressType;
        uint32_t dwAddressFlags;
        uint32_t dwAddressLength;
        uint32_t dwPrincipalLength;
        uint8_t* lpAddress;
        uint8_t* lpPrincipal;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct SERVICE_ADDRESSES
    {
        uint32_t dwAddressCount;
        Windows::Win32::WinSock::SERVICE_ADDRESS Addresses[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct SERVICE_INFOA
    {
        ::win32::guid* lpServiceType;
        int8_t* lpServiceName;
        int8_t* lpComment;
        int8_t* lpLocale;
        uint32_t dwDisplayHint;
        uint32_t dwVersion;
        uint32_t dwTime;
        int8_t* lpMachineName;
        Windows::Win32::WinSock::SERVICE_ADDRESSES* lpServiceAddress;
        Windows::Win32::WinSock::BLOB ServiceSpecificInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct SERVICE_INFOW
    {
        ::win32::guid* lpServiceType;
        uint16_t* lpServiceName;
        uint16_t* lpComment;
        uint16_t* lpLocale;
        uint32_t dwDisplayHint;
        uint32_t dwVersion;
        uint32_t dwTime;
        uint16_t* lpMachineName;
        Windows::Win32::WinSock::SERVICE_ADDRESSES* lpServiceAddress;
        Windows::Win32::WinSock::BLOB ServiceSpecificInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct NS_SERVICE_INFOA
    {
        uint32_t dwNameSpace;
        Windows::Win32::WinSock::SERVICE_INFOA ServiceInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct NS_SERVICE_INFOW
    {
        uint32_t dwNameSpace;
        Windows::Win32::WinSock::SERVICE_INFOW ServiceInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct PROTOCOL_INFOA
    {
        uint32_t dwServiceFlags;
        int32_t iAddressFamily;
        int32_t iMaxSockAddr;
        int32_t iMinSockAddr;
        int32_t iSocketType;
        int32_t iProtocol;
        uint32_t dwMessageSize;
        int8_t* lpProtocol;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct PROTOCOL_INFOW
    {
        uint32_t dwServiceFlags;
        int32_t iAddressFamily;
        int32_t iMaxSockAddr;
        int32_t iMinSockAddr;
        int32_t iSocketType;
        int32_t iProtocol;
        uint32_t dwMessageSize;
        uint16_t* lpProtocol;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct NETRESOURCE2A
    {
        uint32_t dwScope;
        uint32_t dwType;
        uint32_t dwUsage;
        uint32_t dwDisplayType;
        int8_t* lpLocalName;
        int8_t* lpRemoteName;
        int8_t* lpComment;
        Windows::Win32::WinSock::NS_INFOA ns_info;
        ::win32::guid ServiceType;
        uint32_t dwProtocols;
        int32_t* lpiProtocols;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct NETRESOURCE2W
    {
        uint32_t dwScope;
        uint32_t dwType;
        uint32_t dwUsage;
        uint32_t dwDisplayType;
        uint16_t* lpLocalName;
        uint16_t* lpRemoteName;
        uint16_t* lpComment;
        Windows::Win32::WinSock::NS_INFOA ns_info;
        ::win32::guid ServiceType;
        uint32_t dwProtocols;
        int32_t* lpiProtocols;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WinSock
{
    struct SERVICE_ASYNC_INFO
    {
        Windows::Win32::WinSock::LPSERVICE_CALLBACK_PROC* lpServiceCallbackProc;
        Windows::Win32::WindowsAndMessaging::LPARAM lParam;
        Windows::Win32::SystemServices::HANDLE hAsyncTaskHandle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::NetworkDrivers
{
    struct SOCKET_ADDRESS_LIST
    {
        int32_t iAddressCount;
        Windows::Win32::WinSock::SOCKET_ADDRESS Address[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct SOCKADDR_IN6_PAIR
    {
        Windows::Win32::NetworkDrivers::SOCKADDR_IN6_LH* SourceAddress;
        Windows::Win32::NetworkDrivers::SOCKADDR_IN6_LH* DestinationAddress;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::IpHelper
{
    struct NL_NETWORK_CONNECTIVITY_HINT
    {
        Windows::Win32::IpHelper::NL_NETWORK_CONNECTIVITY_LEVEL_HINT ConnectivityLevel;
        Windows::Win32::IpHelper::NL_NETWORK_CONNECTIVITY_COST_HINT ConnectivityCost;
        uint8_t ApproachingDataLimit;
        uint8_t OverDataLimit;
        uint8_t Roaming;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsSync
{
    struct ID_PARAMETER_PAIR
    {
        Windows::Win32::SystemServices::BOOL fIsVariable;
        uint16_t cbIdSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsSync
{
    struct ID_PARAMETERS
    {
        uint32_t dwSize;
        Windows::Win32::WindowsSync::ID_PARAMETER_PAIR replicaId;
        Windows::Win32::WindowsSync::ID_PARAMETER_PAIR itemId;
        Windows::Win32::WindowsSync::ID_PARAMETER_PAIR changeUnitId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsSync
{
    struct SYNC_SESSION_STATISTICS
    {
        uint32_t dwChangesApplied;
        uint32_t dwChangesFailed;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsSync
{
    struct SYNC_VERSION
    {
        uint32_t dwLastUpdatingReplicaKey;
        uint64_t ullTickCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsSync
{
    struct SYNC_RANGE
    {
        uint8_t* pbClosedLowerBound;
        uint8_t* pbClosedUpperBound;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsSync
{
    struct SYNC_TIME
    {
        uint32_t dwDate;
        uint32_t dwTime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsSync
{
    struct SYNC_FILTER_CHANGE
    {
        Windows::Win32::SystemServices::BOOL fMoveIn;
        Windows::Win32::WindowsSync::SYNC_VERSION moveVersion;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsSync
{
    struct SyncProviderConfiguration
    {
        uint32_t dwVersion;
        ::win32::guid guidInstanceId;
        ::win32::guid clsidProvider;
        ::win32::guid guidConfigUIInstanceId;
        ::win32::guid guidContentType;
        uint32_t dwCapabilities;
        uint32_t dwSupportedArchitecture;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsSync
{
    struct SyncProviderConfigUIConfiguration
    {
        uint32_t dwVersion;
        ::win32::guid guidInstanceId;
        ::win32::guid clsidConfigUI;
        ::win32::guid guidContentType;
        uint32_t dwCapabilities;
        uint32_t dwSupportedArchitecture;
        Windows::Win32::SystemServices::BOOL fIsGlobal;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct SP_ALTPLATFORM_INFO_V3
    {
        union _Anonymous_e__Union
        {
            uint16_t Reserved;
            uint16_t Flags;
        };
        uint32_t cbSize;
        uint32_t Platform;
        uint32_t MajorVersion;
        uint32_t MinorVersion;
        uint16_t ProcessorArchitecture;
        _Anonymous_e__Union Anonymous;
        uint32_t FirstValidatedMajorVersion;
        uint32_t FirstValidatedMinorVersion;
        uint8_t ProductType;
        uint16_t SuiteMask;
        uint32_t BuildNumber;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct SP_DEVINFO_DATA
    {
        uint32_t cbSize;
        ::win32::guid ClassGuid;
        uint32_t DevInst;
        size_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct SP_DEVICE_INTERFACE_DATA
    {
        uint32_t cbSize;
        ::win32::guid InterfaceClassGuid;
        uint32_t Flags;
        size_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct SP_DEVICE_INTERFACE_DETAIL_DATA_A
    {
        uint32_t cbSize;
        int8_t DevicePath[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct SP_DEVICE_INTERFACE_DETAIL_DATA_W
    {
        uint32_t cbSize;
        uint16_t DevicePath[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct SP_DEVINFO_LIST_DETAIL_DATA_A
    {
        uint32_t cbSize;
        ::win32::guid ClassGuid;
        Windows::Win32::SystemServices::HANDLE RemoteMachineHandle;
        int8_t RemoteMachineName[263];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct SP_DEVINFO_LIST_DETAIL_DATA_W
    {
        uint32_t cbSize;
        ::win32::guid ClassGuid;
        Windows::Win32::SystemServices::HANDLE RemoteMachineHandle;
        uint16_t RemoteMachineName[263];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct SP_DEVINSTALL_PARAMS_A
    {
        uint32_t cbSize;
        uint32_t Flags;
        uint32_t FlagsEx;
        Windows::Win32::WindowsAndMessaging::HWND hwndParent;
        Windows::Win32::ApplicationInstallationAndServicing::PSP_FILE_CALLBACK_A* InstallMsgHandler;
        void* InstallMsgHandlerContext;
        void* FileQueue;
        size_t ClassInstallReserved;
        uint32_t Reserved;
        int8_t DriverPath[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct SP_DEVINSTALL_PARAMS_W
    {
        uint32_t cbSize;
        uint32_t Flags;
        uint32_t FlagsEx;
        Windows::Win32::WindowsAndMessaging::HWND hwndParent;
        Windows::Win32::ApplicationInstallationAndServicing::PSP_FILE_CALLBACK_A* InstallMsgHandler;
        void* InstallMsgHandlerContext;
        void* FileQueue;
        size_t ClassInstallReserved;
        uint32_t Reserved;
        uint16_t DriverPath[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct SP_CLASSINSTALL_HEADER
    {
        uint32_t cbSize;
        uint32_t InstallFunction;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct SP_ENABLECLASS_PARAMS
    {
        Windows::Win32::DeviceAndDriverInstallation::SP_CLASSINSTALL_HEADER ClassInstallHeader;
        ::win32::guid ClassGuid;
        uint32_t EnableMessage;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct SP_PROPCHANGE_PARAMS
    {
        Windows::Win32::DeviceAndDriverInstallation::SP_CLASSINSTALL_HEADER ClassInstallHeader;
        uint32_t StateChange;
        uint32_t Scope;
        uint32_t HwProfile;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct SP_REMOVEDEVICE_PARAMS
    {
        Windows::Win32::DeviceAndDriverInstallation::SP_CLASSINSTALL_HEADER ClassInstallHeader;
        uint32_t Scope;
        uint32_t HwProfile;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct SP_UNREMOVEDEVICE_PARAMS
    {
        Windows::Win32::DeviceAndDriverInstallation::SP_CLASSINSTALL_HEADER ClassInstallHeader;
        uint32_t Scope;
        uint32_t HwProfile;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct SP_SELECTDEVICE_PARAMS_A
    {
        Windows::Win32::DeviceAndDriverInstallation::SP_CLASSINSTALL_HEADER ClassInstallHeader;
        int8_t Title[60];
        int8_t Instructions[256];
        int8_t ListLabel[30];
        int8_t SubTitle[256];
        uint8_t Reserved[2];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct SP_SELECTDEVICE_PARAMS_W
    {
        Windows::Win32::DeviceAndDriverInstallation::SP_CLASSINSTALL_HEADER ClassInstallHeader;
        uint16_t Title[60];
        uint16_t Instructions[256];
        uint16_t ListLabel[30];
        uint16_t SubTitle[256];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct SP_DETECTDEVICE_PARAMS
    {
        Windows::Win32::DeviceAndDriverInstallation::SP_CLASSINSTALL_HEADER ClassInstallHeader;
        Windows::Win32::DeviceAndDriverInstallation::PDETECT_PROGRESS_NOTIFY* DetectProgressNotify;
        void* ProgressNotifyParam;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct SP_INSTALLWIZARD_DATA
    {
        Windows::Win32::DeviceAndDriverInstallation::SP_CLASSINSTALL_HEADER ClassInstallHeader;
        uint32_t Flags;
        intptr_t DynamicPages[20];
        uint32_t NumDynamicPages;
        uint32_t DynamicPageFlags;
        uint32_t PrivateFlags;
        Windows::Win32::WindowsAndMessaging::LPARAM PrivateData;
        Windows::Win32::WindowsAndMessaging::HWND hwndWizardDlg;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct SP_NEWDEVICEWIZARD_DATA
    {
        Windows::Win32::DeviceAndDriverInstallation::SP_CLASSINSTALL_HEADER ClassInstallHeader;
        uint32_t Flags;
        intptr_t DynamicPages[20];
        uint32_t NumDynamicPages;
        Windows::Win32::WindowsAndMessaging::HWND hwndWizardDlg;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct SP_TROUBLESHOOTER_PARAMS_A
    {
        Windows::Win32::DeviceAndDriverInstallation::SP_CLASSINSTALL_HEADER ClassInstallHeader;
        int8_t ChmFile[260];
        int8_t HtmlTroubleShooter[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct SP_TROUBLESHOOTER_PARAMS_W
    {
        Windows::Win32::DeviceAndDriverInstallation::SP_CLASSINSTALL_HEADER ClassInstallHeader;
        uint16_t ChmFile[260];
        uint16_t HtmlTroubleShooter[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct SP_POWERMESSAGEWAKE_PARAMS_A
    {
        Windows::Win32::DeviceAndDriverInstallation::SP_CLASSINSTALL_HEADER ClassInstallHeader;
        int8_t PowerMessageWake[512];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct SP_POWERMESSAGEWAKE_PARAMS_W
    {
        Windows::Win32::DeviceAndDriverInstallation::SP_CLASSINSTALL_HEADER ClassInstallHeader;
        uint16_t PowerMessageWake[512];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct SP_DRVINFO_DATA_V2_A
    {
        uint32_t cbSize;
        uint32_t DriverType;
        size_t Reserved;
        int8_t Description[256];
        int8_t MfgName[256];
        int8_t ProviderName[256];
        Windows::Win32::WindowsProgramming::FILETIME DriverDate;
        uint64_t DriverVersion;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct SP_DRVINFO_DATA_V2_W
    {
        uint32_t cbSize;
        uint32_t DriverType;
        size_t Reserved;
        uint16_t Description[256];
        uint16_t MfgName[256];
        uint16_t ProviderName[256];
        Windows::Win32::WindowsProgramming::FILETIME DriverDate;
        uint64_t DriverVersion;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct SP_DRVINFO_DATA_V1_A
    {
        uint32_t cbSize;
        uint32_t DriverType;
        size_t Reserved;
        int8_t Description[256];
        int8_t MfgName[256];
        int8_t ProviderName[256];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct SP_DRVINFO_DATA_V1_W
    {
        uint32_t cbSize;
        uint32_t DriverType;
        size_t Reserved;
        uint16_t Description[256];
        uint16_t MfgName[256];
        uint16_t ProviderName[256];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct SP_DRVINFO_DETAIL_DATA_A
    {
        uint32_t cbSize;
        Windows::Win32::WindowsProgramming::FILETIME InfDate;
        uint32_t CompatIDsOffset;
        uint32_t CompatIDsLength;
        size_t Reserved;
        int8_t SectionName[256];
        int8_t InfFileName[260];
        int8_t DrvDescription[256];
        int8_t HardwareID[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct SP_DRVINFO_DETAIL_DATA_W
    {
        uint32_t cbSize;
        Windows::Win32::WindowsProgramming::FILETIME InfDate;
        uint32_t CompatIDsOffset;
        uint32_t CompatIDsLength;
        size_t Reserved;
        uint16_t SectionName[256];
        uint16_t InfFileName[260];
        uint16_t DrvDescription[256];
        uint16_t HardwareID[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct SP_DRVINSTALL_PARAMS
    {
        uint32_t cbSize;
        uint32_t Rank;
        uint32_t Flags;
        size_t PrivateData;
        uint32_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct COINSTALLER_CONTEXT_DATA
    {
        Windows::Win32::SystemServices::BOOL PostProcessing;
        uint32_t InstallResult;
        void* PrivateData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct SP_CLASSIMAGELIST_DATA
    {
        uint32_t cbSize;
        Windows::Win32::Controls::HIMAGELIST ImageList;
        size_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct SP_PROPSHEETPAGE_REQUEST
    {
        uint32_t cbSize;
        uint32_t PageRequested;
        void* DeviceInfoSet;
        Windows::Win32::DeviceAndDriverInstallation::SP_DEVINFO_DATA* DeviceInfoData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct SP_BACKUP_QUEUE_PARAMS_V2_A
    {
        uint32_t cbSize;
        int8_t FullInfPath[260];
        int32_t FilenameOffset;
        int8_t ReinstallInstance[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct SP_BACKUP_QUEUE_PARAMS_V2_W
    {
        uint32_t cbSize;
        uint16_t FullInfPath[260];
        int32_t FilenameOffset;
        uint16_t ReinstallInstance[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct SP_BACKUP_QUEUE_PARAMS_V1_A
    {
        uint32_t cbSize;
        int8_t FullInfPath[260];
        int32_t FilenameOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct SP_BACKUP_QUEUE_PARAMS_V1_W
    {
        uint32_t cbSize;
        uint16_t FullInfPath[260];
        int32_t FilenameOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct CONFLICT_DETAILS_A
    {
        uint32_t CD_ulSize;
        uint32_t CD_ulMask;
        uint32_t CD_dnDevInst;
        size_t CD_rdResDes;
        uint32_t CD_ulFlags;
        int8_t CD_szDescription[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct CONFLICT_DETAILS_W
    {
        uint32_t CD_ulSize;
        uint32_t CD_ulMask;
        uint32_t CD_dnDevInst;
        size_t CD_rdResDes;
        uint32_t CD_ulFlags;
        uint16_t CD_szDescription[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct MEM_RANGE
    {
        uint64_t MR_Align;
        uint32_t MR_nBytes;
        uint64_t MR_Min;
        uint64_t MR_Max;
        uint32_t MR_Flags;
        uint32_t MR_Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct MEM_DES
    {
        uint32_t MD_Count;
        uint32_t MD_Type;
        uint64_t MD_Alloc_Base;
        uint64_t MD_Alloc_End;
        uint32_t MD_Flags;
        uint32_t MD_Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct MEM_RESOURCE
    {
        Windows::Win32::DeviceAndDriverInstallation::MEM_DES MEM_Header;
        Windows::Win32::DeviceAndDriverInstallation::MEM_RANGE MEM_Data[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct Mem_Large_Range_s
    {
        uint64_t MLR_Align;
        uint64_t MLR_nBytes;
        uint64_t MLR_Min;
        uint64_t MLR_Max;
        uint32_t MLR_Flags;
        uint32_t MLR_Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct Mem_Large_Des_s
    {
        uint32_t MLD_Count;
        uint32_t MLD_Type;
        uint64_t MLD_Alloc_Base;
        uint64_t MLD_Alloc_End;
        uint32_t MLD_Flags;
        uint32_t MLD_Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct Mem_Large_Resource_s
    {
        Windows::Win32::DeviceAndDriverInstallation::Mem_Large_Des_s MEM_LARGE_Header;
        Windows::Win32::DeviceAndDriverInstallation::Mem_Large_Range_s MEM_LARGE_Data[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct IO_RANGE
    {
        uint64_t IOR_Align;
        uint32_t IOR_nPorts;
        uint64_t IOR_Min;
        uint64_t IOR_Max;
        uint32_t IOR_RangeFlags;
        uint64_t IOR_Alias;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct IO_DES
    {
        uint32_t IOD_Count;
        uint32_t IOD_Type;
        uint64_t IOD_Alloc_Base;
        uint64_t IOD_Alloc_End;
        uint32_t IOD_DesFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct IO_RESOURCE
    {
        Windows::Win32::DeviceAndDriverInstallation::IO_DES IO_Header;
        Windows::Win32::DeviceAndDriverInstallation::IO_RANGE IO_Data[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct DMA_RANGE
    {
        uint32_t DR_Min;
        uint32_t DR_Max;
        uint32_t DR_Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct DMA_DES
    {
        uint32_t DD_Count;
        uint32_t DD_Type;
        uint32_t DD_Flags;
        uint32_t DD_Alloc_Chan;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct DMA_RESOURCE
    {
        Windows::Win32::DeviceAndDriverInstallation::DMA_DES DMA_Header;
        Windows::Win32::DeviceAndDriverInstallation::DMA_RANGE DMA_Data[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct IRQ_RANGE
    {
        uint32_t IRQR_Min;
        uint32_t IRQR_Max;
        uint32_t IRQR_Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct IRQ_DES_32
    {
        uint32_t IRQD_Count;
        uint32_t IRQD_Type;
        uint32_t IRQD_Flags;
        uint32_t IRQD_Alloc_Num;
        uint32_t IRQD_Affinity;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct IRQ_DES_64
    {
        uint32_t IRQD_Count;
        uint32_t IRQD_Type;
        uint32_t IRQD_Flags;
        uint32_t IRQD_Alloc_Num;
        uint64_t IRQD_Affinity;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct IRQ_RESOURCE_32
    {
        Windows::Win32::DeviceAndDriverInstallation::IRQ_DES_32 IRQ_Header;
        Windows::Win32::DeviceAndDriverInstallation::IRQ_RANGE IRQ_Data[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct IRQ_RESOURCE_64
    {
        Windows::Win32::DeviceAndDriverInstallation::IRQ_DES_64 IRQ_Header;
        Windows::Win32::DeviceAndDriverInstallation::IRQ_RANGE IRQ_Data[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct DevPrivate_Range_s
    {
        uint32_t PR_Data1;
        uint32_t PR_Data2;
        uint32_t PR_Data3;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct DevPrivate_Des_s
    {
        uint32_t PD_Count;
        uint32_t PD_Type;
        uint32_t PD_Data1;
        uint32_t PD_Data2;
        uint32_t PD_Data3;
        uint32_t PD_Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct DevPrivate_Resource_s
    {
        Windows::Win32::DeviceAndDriverInstallation::DevPrivate_Des_s PRV_Header;
        Windows::Win32::DeviceAndDriverInstallation::DevPrivate_Range_s PRV_Data[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct CS_DES
    {
        uint32_t CSD_SignatureLength;
        uint32_t CSD_LegacyDataOffset;
        uint32_t CSD_LegacyDataSize;
        uint32_t CSD_Flags;
        ::win32::guid CSD_ClassGuid;
        uint8_t CSD_Signature[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct CS_RESOURCE
    {
        Windows::Win32::DeviceAndDriverInstallation::CS_DES CS_Header;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct PCCARD_DES
    {
        uint32_t PCD_Count;
        uint32_t PCD_Type;
        uint32_t PCD_Flags;
        uint8_t PCD_ConfigIndex;
        uint8_t PCD_Reserved[3];
        uint32_t PCD_MemoryCardBase1;
        uint32_t PCD_MemoryCardBase2;
        uint32_t PCD_MemoryCardBase[2];
        uint16_t PCD_MemoryFlags[2];
        uint8_t PCD_IoFlags[2];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct PCCARD_RESOURCE
    {
        Windows::Win32::DeviceAndDriverInstallation::PCCARD_DES PcCard_Header;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct MFCARD_DES
    {
        uint32_t PMF_Count;
        uint32_t PMF_Type;
        uint32_t PMF_Flags;
        uint8_t PMF_ConfigOptions;
        uint8_t PMF_IoResourceIndex;
        uint8_t PMF_Reserved[2];
        uint32_t PMF_ConfigRegisterBase;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct MFCARD_RESOURCE
    {
        Windows::Win32::DeviceAndDriverInstallation::MFCARD_DES MfCard_Header;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct BUSNUMBER_RANGE
    {
        uint32_t BUSR_Min;
        uint32_t BUSR_Max;
        uint32_t BUSR_nBusNumbers;
        uint32_t BUSR_Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct BUSNUMBER_DES
    {
        uint32_t BUSD_Count;
        uint32_t BUSD_Type;
        uint32_t BUSD_Flags;
        uint32_t BUSD_Alloc_Base;
        uint32_t BUSD_Alloc_End;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct BUSNUMBER_RESOURCE
    {
        Windows::Win32::DeviceAndDriverInstallation::BUSNUMBER_DES BusNumber_Header;
        Windows::Win32::DeviceAndDriverInstallation::BUSNUMBER_RANGE BusNumber_Data[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct Connection_Des_s
    {
        uint32_t COND_Type;
        uint32_t COND_Flags;
        uint8_t COND_Class;
        uint8_t COND_ClassType;
        uint8_t COND_Reserved1;
        uint8_t COND_Reserved2;
        Windows::Win32::SystemServices::LARGE_INTEGER COND_Id;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct Connection_Resource_s
    {
        Windows::Win32::DeviceAndDriverInstallation::Connection_Des_s Connection_Header;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct HWProfileInfo_sA
    {
        uint32_t HWPI_ulHWProfile;
        int8_t HWPI_szFriendlyName[80];
        uint32_t HWPI_dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct HWProfileInfo_sW
    {
        uint32_t HWPI_ulHWProfile;
        uint16_t HWPI_szFriendlyName[80];
        uint32_t HWPI_dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct HCMNOTIFICATION__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct CM_NOTIFY_FILTER
    {
        union _u_e__Union
        {
            struct _DeviceInterface_e__Struct
            {
                ::win32::guid ClassGuid;
            };
            struct _DeviceHandle_e__Struct
            {
                Windows::Win32::SystemServices::HANDLE hTarget;
            };
            struct _DeviceInstance_e__Struct
            {
                uint16_t InstanceId[200];
            };
            _DeviceInterface_e__Struct DeviceInterface;
            _DeviceHandle_e__Struct DeviceHandle;
            _DeviceInstance_e__Struct DeviceInstance;
        };
        uint32_t cbSize;
        uint32_t Flags;
        Windows::Win32::DeviceAndDriverInstallation::CM_NOTIFY_FILTER_TYPE FilterType;
        uint32_t Reserved;
        _u_e__Union u;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DeviceAndDriverInstallation
{
    struct CM_NOTIFY_EVENT_DATA
    {
        union _u_e__Union
        {
            struct _DeviceInterface_e__Struct
            {
                ::win32::guid ClassGuid;
                uint16_t SymbolicLink[1];
            };
            struct _DeviceHandle_e__Struct
            {
                ::win32::guid EventGuid;
                int32_t NameOffset;
                uint32_t DataSize;
                uint8_t Data[1];
            };
            struct _DeviceInstance_e__Struct
            {
                uint16_t InstanceId[1];
            };
            _DeviceInterface_e__Struct DeviceInterface;
            _DeviceHandle_e__Struct DeviceHandle;
            _DeviceInstance_e__Struct DeviceInstance;
        };
        Windows::Win32::DeviceAndDriverInstallation::CM_NOTIFY_FILTER_TYPE FilterType;
        uint32_t Reserved;
        _u_e__Union u;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ApplicationInstallationAndServicing
{
    struct INFCONTEXT
    {
        void* Inf;
        void* CurrentInf;
        uint32_t Section;
        uint32_t Line;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ApplicationInstallationAndServicing
{
    struct SP_INF_INFORMATION
    {
        uint32_t InfStyle;
        uint32_t InfCount;
        uint8_t VersionData[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ApplicationInstallationAndServicing
{
    struct SP_ALTPLATFORM_INFO_V2
    {
        union _Anonymous_e__Union
        {
            uint16_t Reserved;
            uint16_t Flags;
        };
        uint32_t cbSize;
        uint32_t Platform;
        uint32_t MajorVersion;
        uint32_t MinorVersion;
        uint16_t ProcessorArchitecture;
        _Anonymous_e__Union Anonymous;
        uint32_t FirstValidatedMajorVersion;
        uint32_t FirstValidatedMinorVersion;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ApplicationInstallationAndServicing
{
    struct SP_ALTPLATFORM_INFO_V1
    {
        uint32_t cbSize;
        uint32_t Platform;
        uint32_t MajorVersion;
        uint32_t MinorVersion;
        uint16_t ProcessorArchitecture;
        uint16_t Reserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ApplicationInstallationAndServicing
{
    struct SP_ORIGINAL_FILE_INFO_A
    {
        uint32_t cbSize;
        int8_t OriginalInfName[260];
        int8_t OriginalCatalogName[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ApplicationInstallationAndServicing
{
    struct SP_ORIGINAL_FILE_INFO_W
    {
        uint32_t cbSize;
        uint16_t OriginalInfName[260];
        uint16_t OriginalCatalogName[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ApplicationInstallationAndServicing
{
    struct FILEPATHS_A
    {
        int8_t* Target;
        int8_t* Source;
        uint32_t Win32Error;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ApplicationInstallationAndServicing
{
    struct FILEPATHS_W
    {
        uint16_t* Target;
        uint16_t* Source;
        uint32_t Win32Error;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ApplicationInstallationAndServicing
{
    struct FILEPATHS_SIGNERINFO_A
    {
        int8_t* Target;
        int8_t* Source;
        uint32_t Win32Error;
        uint32_t Flags;
        int8_t* DigitalSigner;
        int8_t* Version;
        int8_t* CatalogFile;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ApplicationInstallationAndServicing
{
    struct FILEPATHS_SIGNERINFO_W
    {
        uint16_t* Target;
        uint16_t* Source;
        uint32_t Win32Error;
        uint32_t Flags;
        uint16_t* DigitalSigner;
        uint16_t* Version;
        uint16_t* CatalogFile;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ApplicationInstallationAndServicing
{
    struct SOURCE_MEDIA_A
    {
        int8_t* Reserved;
        int8_t* Tagfile;
        int8_t* Description;
        int8_t* SourcePath;
        int8_t* SourceFile;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ApplicationInstallationAndServicing
{
    struct SOURCE_MEDIA_W
    {
        uint16_t* Reserved;
        uint16_t* Tagfile;
        uint16_t* Description;
        uint16_t* SourcePath;
        uint16_t* SourceFile;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ApplicationInstallationAndServicing
{
    struct CABINET_INFO_A
    {
        int8_t* CabinetPath;
        int8_t* CabinetFile;
        int8_t* DiskName;
        uint16_t SetId;
        uint16_t CabinetNumber;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ApplicationInstallationAndServicing
{
    struct CABINET_INFO_W
    {
        uint16_t* CabinetPath;
        uint16_t* CabinetFile;
        uint16_t* DiskName;
        uint16_t SetId;
        uint16_t CabinetNumber;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ApplicationInstallationAndServicing
{
    struct FILE_IN_CABINET_INFO_A
    {
        int8_t* NameInCabinet;
        uint32_t FileSize;
        uint32_t Win32Error;
        uint16_t DosDate;
        uint16_t DosTime;
        uint16_t DosAttribs;
        int8_t FullTargetName[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ApplicationInstallationAndServicing
{
    struct FILE_IN_CABINET_INFO_W
    {
        uint16_t* NameInCabinet;
        uint32_t FileSize;
        uint32_t Win32Error;
        uint16_t DosDate;
        uint16_t DosTime;
        uint16_t DosAttribs;
        uint16_t FullTargetName[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ApplicationInstallationAndServicing
{
    struct SP_REGISTER_CONTROL_STATUSA
    {
        uint32_t cbSize;
        int8_t* FileName;
        uint32_t Win32Error;
        uint32_t FailureCode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ApplicationInstallationAndServicing
{
    struct SP_REGISTER_CONTROL_STATUSW
    {
        uint32_t cbSize;
        uint16_t* FileName;
        uint32_t Win32Error;
        uint32_t FailureCode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ApplicationInstallationAndServicing
{
    struct SP_FILE_COPY_PARAMS_A
    {
        uint32_t cbSize;
        void* QueueHandle;
        int8_t* SourceRootPath;
        int8_t* SourcePath;
        int8_t* SourceFilename;
        int8_t* SourceDescription;
        int8_t* SourceTagfile;
        int8_t* TargetDirectory;
        int8_t* TargetFilename;
        uint32_t CopyStyle;
        void* LayoutInf;
        int8_t* SecurityDescriptor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ApplicationInstallationAndServicing
{
    struct SP_FILE_COPY_PARAMS_W
    {
        uint32_t cbSize;
        void* QueueHandle;
        uint16_t* SourceRootPath;
        uint16_t* SourcePath;
        uint16_t* SourceFilename;
        uint16_t* SourceDescription;
        uint16_t* SourceTagfile;
        uint16_t* TargetDirectory;
        uint16_t* TargetFilename;
        uint32_t CopyStyle;
        void* LayoutInf;
        uint16_t* SecurityDescriptor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ApplicationInstallationAndServicing
{
    struct SP_INF_SIGNER_INFO_V1_A
    {
        uint32_t cbSize;
        int8_t CatalogFile[260];
        int8_t DigitalSigner[260];
        int8_t DigitalSignerVersion[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ApplicationInstallationAndServicing
{
    struct SP_INF_SIGNER_INFO_V1_W
    {
        uint32_t cbSize;
        uint16_t CatalogFile[260];
        uint16_t DigitalSigner[260];
        uint16_t DigitalSignerVersion[260];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ApplicationInstallationAndServicing
{
    struct SP_INF_SIGNER_INFO_V2_A
    {
        uint32_t cbSize;
        int8_t CatalogFile[260];
        int8_t DigitalSigner[260];
        int8_t DigitalSignerVersion[260];
        uint32_t SignerScore;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::ApplicationInstallationAndServicing
{
    struct SP_INF_SIGNER_INFO_V2_W
    {
        uint32_t cbSize;
        uint16_t CatalogFile[260];
        uint16_t DigitalSigner[260];
        uint16_t DigitalSignerVersion[260];
        uint32_t SignerScore;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dxgi
{
    struct DXGI_RGB
    {
        float Red;
        float Green;
        float Blue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dxgi
{
    struct DXGI_GAMMA_CONTROL
    {
        Windows::Win32::Dxgi::DXGI_RGB Scale;
        Windows::Win32::Dxgi::DXGI_RGB Offset;
        Windows::Win32::Dxgi::DXGI_RGB GammaCurve[1025];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dxgi
{
    struct DXGI_GAMMA_CONTROL_CAPABILITIES
    {
        Windows::Win32::SystemServices::BOOL ScaleAndOffsetSupported;
        float MaxConvertedValue;
        float MinConvertedValue;
        uint32_t NumGammaControlPoints;
        float ControlPointPositions[1025];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dxgi
{
    struct DXGI_MODE_DESC
    {
        uint32_t Width;
        uint32_t Height;
        Windows::Win32::Dxgi::DXGI_RATIONAL RefreshRate;
        Windows::Win32::Dxgi::DXGI_FORMAT Format;
        Windows::Win32::Dxgi::DXGI_MODE_SCANLINE_ORDER ScanlineOrdering;
        Windows::Win32::Dxgi::DXGI_MODE_SCALING Scaling;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dxgi
{
    struct DXGI_JPEG_DC_HUFFMAN_TABLE
    {
        uint8_t CodeCounts[12];
        uint8_t CodeValues[12];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dxgi
{
    struct DXGI_JPEG_AC_HUFFMAN_TABLE
    {
        uint8_t CodeCounts[16];
        uint8_t CodeValues[162];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dxgi
{
    struct DXGI_JPEG_QUANTIZATION_TABLE
    {
        uint8_t Elements[64];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dxgi
{
    struct DXGI_FRAME_STATISTICS
    {
        uint32_t PresentCount;
        uint32_t PresentRefreshCount;
        uint32_t SyncRefreshCount;
        Windows::Win32::SystemServices::LARGE_INTEGER SyncQPCTime;
        Windows::Win32::SystemServices::LARGE_INTEGER SyncGPUTime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dxgi
{
    struct DXGI_MAPPED_RECT
    {
        int32_t Pitch;
        uint8_t* pBits;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dxgi
{
    struct DXGI_ADAPTER_DESC
    {
        uint16_t Description[128];
        uint32_t VendorId;
        uint32_t DeviceId;
        uint32_t SubSysId;
        uint32_t Revision;
        size_t DedicatedVideoMemory;
        size_t DedicatedSystemMemory;
        size_t SharedSystemMemory;
        Windows::Win32::Kernel::LUID AdapterLuid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dxgi
{
    struct DXGI_OUTPUT_DESC
    {
        uint16_t DeviceName[32];
        Windows::Win32::DisplayDevices::RECT DesktopCoordinates;
        Windows::Win32::SystemServices::BOOL AttachedToDesktop;
        Windows::Win32::Dxgi::DXGI_MODE_ROTATION Rotation;
        intptr_t Monitor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dxgi
{
    struct DXGI_SHARED_RESOURCE
    {
        Windows::Win32::SystemServices::HANDLE Handle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dxgi
{
    struct DXGI_SURFACE_DESC
    {
        uint32_t Width;
        uint32_t Height;
        Windows::Win32::Dxgi::DXGI_FORMAT Format;
        Windows::Win32::Dxgi::DXGI_SAMPLE_DESC SampleDesc;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dxgi
{
    struct DXGI_SWAP_CHAIN_DESC
    {
        Windows::Win32::Dxgi::DXGI_MODE_DESC BufferDesc;
        Windows::Win32::Dxgi::DXGI_SAMPLE_DESC SampleDesc;
        uint32_t BufferUsage;
        uint32_t BufferCount;
        Windows::Win32::WindowsAndMessaging::HWND OutputWindow;
        Windows::Win32::SystemServices::BOOL Windowed;
        Windows::Win32::Dxgi::DXGI_SWAP_EFFECT SwapEffect;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dxgi
{
    struct DXGI_ADAPTER_DESC1
    {
        uint16_t Description[128];
        uint32_t VendorId;
        uint32_t DeviceId;
        uint32_t SubSysId;
        uint32_t Revision;
        size_t DedicatedVideoMemory;
        size_t DedicatedSystemMemory;
        size_t SharedSystemMemory;
        Windows::Win32::Kernel::LUID AdapterLuid;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dxgi
{
    struct DXGI_DISPLAY_COLOR_SPACE
    {
        float PrimaryCoordinates[16];
        float WhitePoints[32];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dxgi
{
    struct DXGI_OUTDUPL_MOVE_RECT
    {
        Windows::Win32::DisplayDevices::POINT SourcePoint;
        Windows::Win32::DisplayDevices::RECT DestinationRect;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dxgi
{
    struct DXGI_OUTDUPL_DESC
    {
        Windows::Win32::Dxgi::DXGI_MODE_DESC ModeDesc;
        Windows::Win32::Dxgi::DXGI_MODE_ROTATION Rotation;
        Windows::Win32::SystemServices::BOOL DesktopImageInSystemMemory;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dxgi
{
    struct DXGI_OUTDUPL_POINTER_POSITION
    {
        Windows::Win32::DisplayDevices::POINT Position;
        Windows::Win32::SystemServices::BOOL Visible;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dxgi
{
    struct DXGI_OUTDUPL_POINTER_SHAPE_INFO
    {
        uint32_t Type;
        uint32_t Width;
        uint32_t Height;
        uint32_t Pitch;
        Windows::Win32::DisplayDevices::POINT HotSpot;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dxgi
{
    struct DXGI_OUTDUPL_FRAME_INFO
    {
        Windows::Win32::SystemServices::LARGE_INTEGER LastPresentTime;
        Windows::Win32::SystemServices::LARGE_INTEGER LastMouseUpdateTime;
        uint32_t AccumulatedFrames;
        Windows::Win32::SystemServices::BOOL RectsCoalesced;
        Windows::Win32::SystemServices::BOOL ProtectedContentMaskedOut;
        Windows::Win32::Dxgi::DXGI_OUTDUPL_POINTER_POSITION PointerPosition;
        uint32_t TotalMetadataBufferSize;
        uint32_t PointerShapeBufferSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dxgi
{
    struct DXGI_MODE_DESC1
    {
        uint32_t Width;
        uint32_t Height;
        Windows::Win32::Dxgi::DXGI_RATIONAL RefreshRate;
        Windows::Win32::Dxgi::DXGI_FORMAT Format;
        Windows::Win32::Dxgi::DXGI_MODE_SCANLINE_ORDER ScanlineOrdering;
        Windows::Win32::Dxgi::DXGI_MODE_SCALING Scaling;
        Windows::Win32::SystemServices::BOOL Stereo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dxgi
{
    struct DXGI_SWAP_CHAIN_DESC1
    {
        uint32_t Width;
        uint32_t Height;
        Windows::Win32::Dxgi::DXGI_FORMAT Format;
        Windows::Win32::SystemServices::BOOL Stereo;
        Windows::Win32::Dxgi::DXGI_SAMPLE_DESC SampleDesc;
        uint32_t BufferUsage;
        uint32_t BufferCount;
        Windows::Win32::Dxgi::DXGI_SCALING Scaling;
        Windows::Win32::Dxgi::DXGI_SWAP_EFFECT SwapEffect;
        Windows::Win32::Dxgi::DXGI_ALPHA_MODE AlphaMode;
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dxgi
{
    struct DXGI_SWAP_CHAIN_FULLSCREEN_DESC
    {
        Windows::Win32::Dxgi::DXGI_RATIONAL RefreshRate;
        Windows::Win32::Dxgi::DXGI_MODE_SCANLINE_ORDER ScanlineOrdering;
        Windows::Win32::Dxgi::DXGI_MODE_SCALING Scaling;
        Windows::Win32::SystemServices::BOOL Windowed;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dxgi
{
    struct DXGI_PRESENT_PARAMETERS
    {
        uint32_t DirtyRectsCount;
        Windows::Win32::DisplayDevices::RECT* pDirtyRects;
        Windows::Win32::DisplayDevices::RECT* pScrollRect;
        Windows::Win32::DisplayDevices::POINT* pScrollOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dxgi
{
    struct DXGI_ADAPTER_DESC2
    {
        uint16_t Description[128];
        uint32_t VendorId;
        uint32_t DeviceId;
        uint32_t SubSysId;
        uint32_t Revision;
        size_t DedicatedVideoMemory;
        size_t DedicatedSystemMemory;
        size_t SharedSystemMemory;
        Windows::Win32::Kernel::LUID AdapterLuid;
        uint32_t Flags;
        Windows::Win32::Dxgi::DXGI_GRAPHICS_PREEMPTION_GRANULARITY GraphicsPreemptionGranularity;
        Windows::Win32::Dxgi::DXGI_COMPUTE_PREEMPTION_GRANULARITY ComputePreemptionGranularity;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dxgi
{
    struct DXGI_MATRIX_3X2_F
    {
        float _11;
        float _12;
        float _21;
        float _22;
        float _31;
        float _32;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dxgi
{
    struct DXGI_DECODE_SWAP_CHAIN_DESC
    {
        uint32_t Flags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dxgi
{
    struct DXGI_FRAME_STATISTICS_MEDIA
    {
        uint32_t PresentCount;
        uint32_t PresentRefreshCount;
        uint32_t SyncRefreshCount;
        Windows::Win32::SystemServices::LARGE_INTEGER SyncQPCTime;
        Windows::Win32::SystemServices::LARGE_INTEGER SyncGPUTime;
        Windows::Win32::Dxgi::DXGI_FRAME_PRESENTATION_MODE CompositionMode;
        uint32_t ApprovedPresentDuration;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dxgi
{
    struct DXGI_QUERY_VIDEO_MEMORY_INFO
    {
        uint64_t Budget;
        uint64_t CurrentUsage;
        uint64_t AvailableForReservation;
        uint64_t CurrentReservation;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dxgi
{
    struct DXGI_HDR_METADATA_HDR10
    {
        uint16_t RedPrimary[2];
        uint16_t GreenPrimary[2];
        uint16_t BluePrimary[2];
        uint16_t WhitePoint[2];
        uint32_t MaxMasteringLuminance;
        uint32_t MinMasteringLuminance;
        uint16_t MaxContentLightLevel;
        uint16_t MaxFrameAverageLightLevel;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dxgi
{
    struct DXGI_HDR_METADATA_HDR10PLUS
    {
        uint8_t Data[72];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dxgi
{
    struct DXGI_ADAPTER_DESC3
    {
        uint16_t Description[128];
        uint32_t VendorId;
        uint32_t DeviceId;
        uint32_t SubSysId;
        uint32_t Revision;
        size_t DedicatedVideoMemory;
        size_t DedicatedSystemMemory;
        size_t SharedSystemMemory;
        Windows::Win32::Kernel::LUID AdapterLuid;
        Windows::Win32::Dxgi::DXGI_ADAPTER_FLAG3 Flags;
        Windows::Win32::Dxgi::DXGI_GRAPHICS_PREEMPTION_GRANULARITY GraphicsPreemptionGranularity;
        Windows::Win32::Dxgi::DXGI_COMPUTE_PREEMPTION_GRANULARITY ComputePreemptionGranularity;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dxgi
{
    struct DXGI_OUTPUT_DESC1
    {
        uint16_t DeviceName[32];
        Windows::Win32::DisplayDevices::RECT DesktopCoordinates;
        Windows::Win32::SystemServices::BOOL AttachedToDesktop;
        Windows::Win32::Dxgi::DXGI_MODE_ROTATION Rotation;
        intptr_t Monitor;
        uint32_t BitsPerColor;
        Windows::Win32::Dxgi::DXGI_COLOR_SPACE_TYPE ColorSpace;
        float RedPrimary[2];
        float GreenPrimary[2];
        float BluePrimary[2];
        float WhitePoint[2];
        float MinLuminance;
        float MaxLuminance;
        float MaxFullFrameLuminance;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dxgi
{
    struct DXGI_INFO_QUEUE_MESSAGE
    {
        ::win32::guid Producer;
        Windows::Win32::Dxgi::DXGI_INFO_QUEUE_MESSAGE_CATEGORY Category;
        Windows::Win32::Dxgi::DXGI_INFO_QUEUE_MESSAGE_SEVERITY Severity;
        int32_t ID;
        int8_t* pDescription;
        size_t DescriptionByteLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dxgi
{
    struct DXGI_INFO_QUEUE_FILTER_DESC
    {
        uint32_t NumCategories;
        Windows::Win32::Dxgi::DXGI_INFO_QUEUE_MESSAGE_CATEGORY* pCategoryList;
        uint32_t NumSeverities;
        Windows::Win32::Dxgi::DXGI_INFO_QUEUE_MESSAGE_SEVERITY* pSeverityList;
        uint32_t NumIDs;
        int32_t* pIDList;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Dxgi
{
    struct DXGI_INFO_QUEUE_FILTER
    {
        Windows::Win32::Dxgi::DXGI_INFO_QUEUE_FILTER_DESC AllowList;
        Windows::Win32::Dxgi::DXGI_INFO_QUEUE_FILTER_DESC DenyList;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Xps
{
    struct XPS_POINT
    {
        float x;
        float y;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Xps
{
    struct XPS_SIZE
    {
        float width;
        float height;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Xps
{
    struct XPS_RECT
    {
        float x;
        float y;
        float width;
        float height;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Xps
{
    struct XPS_DASH
    {
        float length;
        float gap;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Xps
{
    struct XPS_GLYPH_MAPPING
    {
        uint32_t unicodeStringStart;
        uint16_t unicodeStringLength;
        uint32_t glyphIndicesStart;
        uint16_t glyphIndicesLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Xps
{
    struct XPS_MATRIX
    {
        float m11;
        float m12;
        float m21;
        float m22;
        float m31;
        float m32;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Xps
{
    struct XPS_COLOR
    {
        union __MIDL___MIDL_itf_xpsobjectmodel_0000_0000_0028
        {
            struct _sRGB_e__Struct
            {
                uint8_t alpha;
                uint8_t red;
                uint8_t green;
                uint8_t blue;
            };
            struct _scRGB_e__Struct
            {
                float alpha;
                float red;
                float green;
                float blue;
            };
            struct _context_e__Struct
            {
                uint8_t channelCount;
                float channels[9];
            };
            _sRGB_e__Struct sRGB;
            _scRGB_e__Struct scRGB;
            _context_e__Struct context;
        };
        Windows::Win32::Xps::XPS_COLOR_TYPE colorType;
        __MIDL___MIDL_itf_xpsobjectmodel_0000_0000_0028 value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Xps
{
    struct PrintDocumentPackageStatus
    {
        uint32_t JobId;
        int32_t CurrentDocument;
        int32_t CurrentPage;
        int32_t CurrentPageTotal;
        Windows::Win32::Xps::PrintDocumentPackageCompletion Completion;
        int32_t PackageStatus;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Xps
{
    struct HPTPROVIDER__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::PrintDocs
{
    struct XPS_GLYPH_INDEX
    {
        int32_t index;
        float advanceWidth;
        float horizontalOffset;
        float verticalOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Direct3DHlsl
{
    struct D3D_SHADER_DATA
    {
        void* pBytecode;
        size_t BytecodeLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TabletPC
{
    struct SYSTEM_EVENT_DATA
    {
        uint8_t bModifier;
        uint16_t wKey;
        int32_t xPos;
        int32_t yPos;
        uint8_t bCursorMode;
        uint32_t dwButtonState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TabletPC
{
    struct STROKE_RANGE
    {
        uint32_t iStrokeBegin;
        uint32_t iStrokeEnd;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TabletPC
{
    struct PROPERTY_METRICS
    {
        int32_t nLogicalMin;
        int32_t nLogicalMax;
        Windows::Win32::TabletPC::PROPERTY_UNITS Units;
        float fResolution;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TabletPC
{
    struct PACKET_PROPERTY
    {
        ::win32::guid guid;
        Windows::Win32::TabletPC::PROPERTY_METRICS PropertyMetrics;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TabletPC
{
    struct PACKET_DESCRIPTION
    {
        uint32_t cbPacketSize;
        uint32_t cPacketProperties;
        Windows::Win32::TabletPC::PACKET_PROPERTY* pPacketProperties;
        uint32_t cButtons;
        ::win32::guid* pguidButtons;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TabletPC
{
    struct INKMETRIC
    {
        int32_t iHeight;
        int32_t iFontAscent;
        int32_t iFontDescent;
        uint32_t dwFlags;
        uint32_t color;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TabletPC
{
    struct InkRecoGuide
    {
        Windows::Win32::DisplayDevices::RECT rectWritingBox;
        Windows::Win32::DisplayDevices::RECT rectDrawnBox;
        int32_t cRows;
        int32_t cColumns;
        int32_t midline;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TabletPC
{
    struct FLICK_POINT
    {
        int32_t _bitfield;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TabletPC
{
    struct FLICK_DATA
    {
        int32_t _bitfield;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TabletPC
{
    struct IEC_STROKEINFO
    {
        Windows::Win32::Controls::NMHDR nmhdr;
        Windows::Win32::TabletPC::IInkCursor* Cursor;
        Windows::Win32::TabletPC::IInkStrokeDisp* Stroke;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TabletPC
{
    struct IEC_GESTUREINFO
    {
        Windows::Win32::Controls::NMHDR nmhdr;
        Windows::Win32::TabletPC::IInkCursor* Cursor;
        Windows::Win32::TabletPC::IInkStrokes* Strokes;
        Windows::Win32::Automation::VARIANT Gestures;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TabletPC
{
    struct IEC_RECOGNITIONRESULTINFO
    {
        Windows::Win32::Controls::NMHDR nmhdr;
        Windows::Win32::TabletPC::IInkRecognitionResult* RecognitionResult;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TabletPC
{
    struct StylusInfo
    {
        uint32_t tcid;
        uint32_t cid;
        Windows::Win32::SystemServices::BOOL bIsInvertedCursor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TabletPC
{
    struct GESTURE_DATA
    {
        int32_t gestureId;
        int32_t recoConfidence;
        int32_t strokeCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TabletPC
{
    struct DYNAMIC_RENDERER_CACHED_DATA
    {
        int32_t strokeId;
        Windows::Win32::TabletPC::IDynamicRenderer* dynamicRenderer;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TabletPC
{
    struct RECO_GUIDE
    {
        int32_t xOrigin;
        int32_t yOrigin;
        int32_t cxBox;
        int32_t cyBox;
        int32_t cxBase;
        int32_t cyBase;
        int32_t cHorzBox;
        int32_t cVertBox;
        int32_t cyMid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TabletPC
{
    struct RECO_ATTRS
    {
        uint32_t dwRecoCapabilityFlags;
        uint16_t awcVendorName[32];
        uint16_t awcFriendlyName[64];
        uint16_t awLanguageId[64];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TabletPC
{
    struct RECO_RANGE
    {
        uint32_t iwcBegin;
        uint32_t cCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TabletPC
{
    struct LINE_SEGMENT
    {
        Windows::Win32::DisplayDevices::POINT PtA;
        Windows::Win32::DisplayDevices::POINT PtB;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TabletPC
{
    struct LATTICE_METRICS
    {
        Windows::Win32::TabletPC::LINE_SEGMENT lsBaseline;
        int16_t iMidlineOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TabletPC
{
    struct RECO_LATTICE_PROPERTY
    {
        ::win32::guid guidProperty;
        uint16_t cbPropertyValue;
        uint8_t* pPropertyValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TabletPC
{
    struct RECO_LATTICE_PROPERTIES
    {
        uint32_t cProperties;
        Windows::Win32::TabletPC::RECO_LATTICE_PROPERTY** apProps;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TabletPC
{
    struct RECO_LATTICE_ELEMENT
    {
        int32_t score;
        uint16_t type;
        uint8_t* pData;
        uint32_t ulNextColumn;
        uint32_t ulStrokeNumber;
        Windows::Win32::TabletPC::RECO_LATTICE_PROPERTIES epProp;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TabletPC
{
    struct RECO_LATTICE_COLUMN
    {
        uint32_t key;
        Windows::Win32::TabletPC::RECO_LATTICE_PROPERTIES cpProp;
        uint32_t cStrokes;
        uint32_t* pStrokes;
        uint32_t cLatticeElements;
        Windows::Win32::TabletPC::RECO_LATTICE_ELEMENT* pLatticeElements;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TabletPC
{
    struct RECO_LATTICE
    {
        uint32_t ulColumnCount;
        Windows::Win32::TabletPC::RECO_LATTICE_COLUMN* pLatticeColumns;
        uint32_t ulPropertyCount;
        ::win32::guid* pGuidProperties;
        uint32_t ulBestResultColumnCount;
        uint32_t* pulBestResultColumns;
        uint32_t* pulBestResultIndexes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TabletPC
{
    struct CHARACTER_RANGE
    {
        uint16_t wcLow;
        uint16_t cChars;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TabletPC
{
    struct HRECOALT__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TabletPC
{
    struct HRECOCONTEXT__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TabletPC
{
    struct HRECOGNIZER__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TabletPC
{
    struct HRECOLATTICE__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TabletPC
{
    struct HRECOWORDLIST__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsMediaFormat
{
    struct WM_STREAM_PRIORITY_RECORD
    {
        uint16_t wStreamNumber;
        Windows::Win32::SystemServices::BOOL fMandatory;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsMediaFormat
{
    struct WM_WRITER_STATISTICS
    {
        uint64_t qwSampleCount;
        uint64_t qwByteCount;
        uint64_t qwDroppedSampleCount;
        uint64_t qwDroppedByteCount;
        uint32_t dwCurrentBitrate;
        uint32_t dwAverageBitrate;
        uint32_t dwExpectedBitrate;
        uint32_t dwCurrentSampleRate;
        uint32_t dwAverageSampleRate;
        uint32_t dwExpectedSampleRate;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsMediaFormat
{
    struct WM_WRITER_STATISTICS_EX
    {
        uint32_t dwBitratePlusOverhead;
        uint32_t dwCurrentSampleDropRateInQueue;
        uint32_t dwCurrentSampleDropRateInCodec;
        uint32_t dwCurrentSampleDropRateInMultiplexer;
        uint32_t dwTotalSampleDropsInQueue;
        uint32_t dwTotalSampleDropsInCodec;
        uint32_t dwTotalSampleDropsInMultiplexer;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsMediaFormat
{
    struct WM_READER_STATISTICS
    {
        uint32_t cbSize;
        uint32_t dwBandwidth;
        uint32_t cPacketsReceived;
        uint32_t cPacketsRecovered;
        uint32_t cPacketsLost;
        uint16_t wQuality;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsMediaFormat
{
    struct WM_READER_CLIENTINFO
    {
        uint32_t cbSize;
        uint16_t* wszLang;
        uint16_t* wszBrowserUserAgent;
        uint16_t* wszBrowserWebPage;
        uint64_t qwReserved;
        Windows::Win32::WindowsAndMessaging::LPARAM* pReserved;
        uint16_t* wszHostExe;
        uint64_t qwHostVersion;
        uint16_t* wszPlayerUserAgent;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsMediaFormat
{
    struct WM_CLIENT_PROPERTIES
    {
        uint32_t dwIPAddress;
        uint32_t dwPort;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsMediaFormat
{
    struct WM_CLIENT_PROPERTIES_EX
    {
        uint32_t cbSize;
        uint16_t* pwszIPAddress;
        uint16_t* pwszPort;
        uint16_t* pwszDNSName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsMediaFormat
{
    struct WM_PORT_NUMBER_RANGE
    {
        uint16_t wPortBegin;
        uint16_t wPortEnd;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsMediaFormat
{
    struct WMT_BUFFER_SEGMENT
    {
        Windows::Win32::WindowsMediaFormat::INSSBuffer* pBuffer;
        uint32_t cbOffset;
        uint32_t cbLength;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsMediaFormat
{
    struct WMT_PAYLOAD_FRAGMENT
    {
        uint32_t dwPayloadIndex;
        Windows::Win32::WindowsMediaFormat::WMT_BUFFER_SEGMENT segmentData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsMediaFormat
{
    struct WMT_FILESINK_DATA_UNIT
    {
        Windows::Win32::WindowsMediaFormat::WMT_BUFFER_SEGMENT packetHeaderBuffer;
        uint32_t cPayloads;
        Windows::Win32::WindowsMediaFormat::WMT_BUFFER_SEGMENT* pPayloadHeaderBuffers;
        uint32_t cPayloadDataFragments;
        Windows::Win32::WindowsMediaFormat::WMT_PAYLOAD_FRAGMENT* pPayloadDataFragments;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsMediaFormat
{
    struct WMT_WEBSTREAM_FORMAT
    {
        uint16_t cbSize;
        uint16_t cbSampleHeaderFixedData;
        uint16_t wVersion;
        uint16_t wReserved;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsMediaFormat
{
    struct WMT_WEBSTREAM_SAMPLE_HEADER
    {
        uint16_t cbLength;
        uint16_t wPart;
        uint16_t cTotalParts;
        uint16_t wSampleType;
        uint16_t wszURL[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsMediaFormat
{
    struct WM_ADDRESS_ACCESSENTRY
    {
        uint32_t dwIPAddress;
        uint32_t dwMask;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsMediaFormat
{
    struct WM_PICTURE
    {
        uint16_t* pwszMIMEType;
        uint8_t bPictureType;
        uint16_t* pwszDescription;
        uint32_t dwDataLen;
        uint8_t* pbData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsMediaFormat
{
    struct WM_SYNCHRONISED_LYRICS
    {
        uint8_t bTimeStampFormat;
        uint8_t bContentType;
        uint16_t* pwszContentDescriptor;
        uint32_t dwLyricsLen;
        uint8_t* pbLyrics;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsMediaFormat
{
    struct WM_USER_WEB_URL
    {
        uint16_t* pwszDescription;
        uint16_t* pwszURL;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsMediaFormat
{
    struct WM_USER_TEXT
    {
        uint16_t* pwszDescription;
        uint16_t* pwszText;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsMediaFormat
{
    struct WM_LEAKY_BUCKET_PAIR
    {
        uint32_t dwBitrate;
        uint32_t msBufferWindow;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsMediaFormat
{
    struct WM_STREAM_TYPE_INFO
    {
        ::win32::guid guidMajorType;
        uint32_t cbFormat;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsMediaFormat
{
    struct WMT_WATERMARK_ENTRY
    {
        Windows::Win32::WindowsMediaFormat::WMT_WATERMARK_ENTRY_TYPE wmetType;
        ::win32::guid clsid;
        uint32_t cbDisplayName;
        uint16_t* pwszDisplayName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsMediaFormat
{
    struct WMT_VIDEOIMAGE_SAMPLE
    {
        uint32_t dwMagic;
        uint32_t cbStruct;
        uint32_t dwControlFlags;
        uint32_t dwInputFlagsCur;
        int32_t lCurMotionXtoX;
        int32_t lCurMotionYtoX;
        int32_t lCurMotionXoffset;
        int32_t lCurMotionXtoY;
        int32_t lCurMotionYtoY;
        int32_t lCurMotionYoffset;
        int32_t lCurBlendCoef1;
        int32_t lCurBlendCoef2;
        uint32_t dwInputFlagsPrev;
        int32_t lPrevMotionXtoX;
        int32_t lPrevMotionYtoX;
        int32_t lPrevMotionXoffset;
        int32_t lPrevMotionXtoY;
        int32_t lPrevMotionYtoY;
        int32_t lPrevMotionYoffset;
        int32_t lPrevBlendCoef1;
        int32_t lPrevBlendCoef2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsMediaFormat
{
    struct WMT_VIDEOIMAGE_SAMPLE2
    {
        uint32_t dwMagic;
        uint32_t dwStructSize;
        uint32_t dwControlFlags;
        uint32_t dwViewportWidth;
        uint32_t dwViewportHeight;
        uint32_t dwCurrImageWidth;
        uint32_t dwCurrImageHeight;
        float fCurrRegionX0;
        float fCurrRegionY0;
        float fCurrRegionWidth;
        float fCurrRegionHeight;
        float fCurrBlendCoef;
        uint32_t dwPrevImageWidth;
        uint32_t dwPrevImageHeight;
        float fPrevRegionX0;
        float fPrevRegionY0;
        float fPrevRegionWidth;
        float fPrevRegionHeight;
        float fPrevBlendCoef;
        uint32_t dwEffectType;
        uint32_t dwNumEffectParas;
        float fEffectPara0;
        float fEffectPara1;
        float fEffectPara2;
        float fEffectPara3;
        float fEffectPara4;
        Windows::Win32::SystemServices::BOOL bKeepPrevImage;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsMediaFormat
{
    struct WM_MEDIA_TYPE
    {
        ::win32::guid majortype;
        ::win32::guid subtype;
        Windows::Win32::SystemServices::BOOL bFixedSizeSamples;
        Windows::Win32::SystemServices::BOOL bTemporalCompression;
        uint32_t lSampleSize;
        ::win32::guid formattype;
        Windows::Win32::Com::IUnknown* pUnk;
        uint32_t cbFormat;
        uint8_t* pbFormat;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsMediaFormat
{
    struct WMVIDEOINFOHEADER
    {
        Windows::Win32::DisplayDevices::RECT rcSource;
        Windows::Win32::DisplayDevices::RECT rcTarget;
        uint32_t dwBitRate;
        uint32_t dwBitErrorRate;
        int64_t AvgTimePerFrame;
        Windows::Win32::DirectShow::BITMAPINFOHEADER bmiHeader;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsMediaFormat
{
    struct WMVIDEOINFOHEADER2
    {
        Windows::Win32::DisplayDevices::RECT rcSource;
        Windows::Win32::DisplayDevices::RECT rcTarget;
        uint32_t dwBitRate;
        uint32_t dwBitErrorRate;
        int64_t AvgTimePerFrame;
        uint32_t dwInterlaceFlags;
        uint32_t dwCopyProtectFlags;
        uint32_t dwPictAspectRatioX;
        uint32_t dwPictAspectRatioY;
        uint32_t dwReserved1;
        uint32_t dwReserved2;
        Windows::Win32::DirectShow::BITMAPINFOHEADER bmiHeader;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsMediaFormat
{
    struct WMMPEG2VIDEOINFO
    {
        Windows::Win32::WindowsMediaFormat::WMVIDEOINFOHEADER2 hdr;
        uint32_t dwStartTimeCode;
        uint32_t cbSequenceHeader;
        uint32_t dwProfile;
        uint32_t dwLevel;
        uint32_t dwFlags;
        uint32_t dwSequenceHeader[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsMediaFormat
{
    struct WMSCRIPTFORMAT
    {
        ::win32::guid scriptType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsMediaFormat
{
    struct WMT_COLORSPACEINFO_EXTENSION_DATA
    {
        uint8_t ucColorPrimaries;
        uint8_t ucColorTransferChar;
        uint8_t ucColorMatrixCoef;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsMediaFormat
{
    struct WMT_TIMECODE_EXTENSION_DATA
    {
        uint16_t wRange;
        uint32_t dwTimecode;
        uint32_t dwUserbits;
        uint32_t dwAmFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsMediaFormat
{
    struct DRM_VAL16
    {
        uint8_t val[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsMediaFormat
{
    struct WMDRM_IMPORT_INIT_STRUCT
    {
        uint32_t dwVersion;
        uint32_t cbEncryptedSessionKeyMessage;
        uint8_t* pbEncryptedSessionKeyMessage;
        uint32_t cbEncryptedKeyMessage;
        uint8_t* pbEncryptedKeyMessage;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsMediaFormat
{
    struct DRM_MINIMUM_OUTPUT_PROTECTION_LEVELS
    {
        uint16_t wCompressedDigitalVideo;
        uint16_t wUncompressedDigitalVideo;
        uint16_t wAnalogVideo;
        uint16_t wCompressedDigitalAudio;
        uint16_t wUncompressedDigitalAudio;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsMediaFormat
{
    struct DRM_OPL_OUTPUT_IDS
    {
        uint16_t cIds;
        ::win32::guid* rgIds;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsMediaFormat
{
    struct DRM_OUTPUT_PROTECTION
    {
        ::win32::guid guidId;
        uint8_t bConfigData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsMediaFormat
{
    struct DRM_VIDEO_OUTPUT_PROTECTION_IDS
    {
        uint16_t cEntries;
        Windows::Win32::WindowsMediaFormat::DRM_OUTPUT_PROTECTION* rgVop;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsMediaFormat
{
    struct DRM_PLAY_OPL
    {
        Windows::Win32::WindowsMediaFormat::DRM_MINIMUM_OUTPUT_PROTECTION_LEVELS minOPL;
        Windows::Win32::WindowsMediaFormat::DRM_OPL_OUTPUT_IDS oplIdReserved;
        Windows::Win32::WindowsMediaFormat::DRM_VIDEO_OUTPUT_PROTECTION_IDS vopi;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsMediaFormat
{
    struct DRM_COPY_OPL
    {
        uint16_t wMinimumCopyLevel;
        Windows::Win32::WindowsMediaFormat::DRM_OPL_OUTPUT_IDS oplIdIncludes;
        Windows::Win32::WindowsMediaFormat::DRM_OPL_OUTPUT_IDS oplIdExcludes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct VERSIONEDSTREAM
    {
        ::win32::guid guidVersion;
        Windows::Win32::StructuredStorage::IStream* pStream;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct STATPROPSTG
    {
        uint16_t* lpwstrName;
        uint32_t propid;
        uint16_t vt;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct STATPROPSETSTG
    {
        ::win32::guid fmtid;
        ::win32::guid clsid;
        uint32_t grfFlags;
        Windows::Win32::WindowsProgramming::FILETIME mtime;
        Windows::Win32::WindowsProgramming::FILETIME ctime;
        Windows::Win32::WindowsProgramming::FILETIME atime;
        uint32_t dwOSVersion;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct STGOPTIONS
    {
        uint16_t usVersion;
        uint16_t reserved;
        uint32_t ulSectorSize;
        uint16_t* pwcsTemplateFile;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct PMemoryAllocator
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_INDEXID
    {
        uint32_t cbStruct;
        uint8_t rgbIndexId[12];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_RSTMAP_A
    {
        int8_t* szDatabaseName;
        int8_t* szNewDatabaseName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_RSTMAP_W
    {
        uint16_t* szDatabaseName;
        uint16_t* szNewDatabaseName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct tagCONVERT_A
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t _bitfield;
            };
            uint32_t fFlags;
            _Anonymous_e__Struct Anonymous;
        };
        int8_t* szOldDll;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct tagCONVERT_W
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t _bitfield;
            };
            uint32_t fFlags;
            _Anonymous_e__Struct Anonymous;
        };
        uint16_t* szOldDll;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_SNPROG
    {
        uint32_t cbStruct;
        uint32_t cunitDone;
        uint32_t cunitTotal;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_DBINFOUPGRADE
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint32_t _bitfield;
            };
            uint32_t ulFlags;
            _Anonymous_e__Struct Anonymous;
        };
        uint32_t cbStruct;
        uint32_t cbFilesizeLow;
        uint32_t cbFilesizeHigh;
        uint32_t cbFreeSpaceRequiredLow;
        uint32_t cbFreeSpaceRequiredHigh;
        uint32_t csecToUpgrade;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_OBJECTINFO
    {
        uint32_t cbStruct;
        uint32_t objtyp;
        double dtCreate;
        double dtUpdate;
        uint32_t grbit;
        uint32_t flags;
        uint32_t cRecord;
        uint32_t cPage;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_OBJECTLIST
    {
        uint32_t cbStruct;
        uint32_t tableid;
        uint32_t cRecord;
        uint32_t columnidcontainername;
        uint32_t columnidobjectname;
        uint32_t columnidobjtyp;
        uint32_t columniddtCreate;
        uint32_t columniddtUpdate;
        uint32_t columnidgrbit;
        uint32_t columnidflags;
        uint32_t columnidcRecord;
        uint32_t columnidcPage;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_COLUMNLIST
    {
        uint32_t cbStruct;
        uint32_t tableid;
        uint32_t cRecord;
        uint32_t columnidPresentationOrder;
        uint32_t columnidcolumnname;
        uint32_t columnidcolumnid;
        uint32_t columnidcoltyp;
        uint32_t columnidCountry;
        uint32_t columnidLangid;
        uint32_t columnidCp;
        uint32_t columnidCollate;
        uint32_t columnidcbMax;
        uint32_t columnidgrbit;
        uint32_t columnidDefault;
        uint32_t columnidBaseTableName;
        uint32_t columnidBaseColumnName;
        uint32_t columnidDefinitionName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_COLUMNDEF
    {
        uint32_t cbStruct;
        uint32_t columnid;
        uint32_t coltyp;
        uint16_t wCountry;
        uint16_t langid;
        uint16_t cp;
        uint16_t wCollate;
        uint32_t cbMax;
        uint32_t grbit;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_COLUMNBASE_A
    {
        uint32_t cbStruct;
        uint32_t columnid;
        uint32_t coltyp;
        uint16_t wCountry;
        uint16_t langid;
        uint16_t cp;
        uint16_t wFiller;
        uint32_t cbMax;
        uint32_t grbit;
        int8_t szBaseTableName[256];
        int8_t szBaseColumnName[256];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_COLUMNBASE_W
    {
        uint32_t cbStruct;
        uint32_t columnid;
        uint32_t coltyp;
        uint16_t wCountry;
        uint16_t langid;
        uint16_t cp;
        uint16_t wFiller;
        uint32_t cbMax;
        uint32_t grbit;
        uint16_t szBaseTableName[256];
        uint16_t szBaseColumnName[256];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_INDEXLIST
    {
        uint32_t cbStruct;
        uint32_t tableid;
        uint32_t cRecord;
        uint32_t columnidindexname;
        uint32_t columnidgrbitIndex;
        uint32_t columnidcKey;
        uint32_t columnidcEntry;
        uint32_t columnidcPage;
        uint32_t columnidcColumn;
        uint32_t columnidiColumn;
        uint32_t columnidcolumnid;
        uint32_t columnidcoltyp;
        uint32_t columnidCountry;
        uint32_t columnidLangid;
        uint32_t columnidCp;
        uint32_t columnidCollate;
        uint32_t columnidgrbitColumn;
        uint32_t columnidcolumnname;
        uint32_t columnidLCMapFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct tag_JET_COLUMNCREATE_A
    {
        uint32_t cbStruct;
        int8_t* szColumnName;
        uint32_t coltyp;
        uint32_t cbMax;
        uint32_t grbit;
        void* pvDefault;
        uint32_t cbDefault;
        uint32_t cp;
        uint32_t columnid;
        int32_t err;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct tag_JET_COLUMNCREATE_W
    {
        uint32_t cbStruct;
        uint16_t* szColumnName;
        uint32_t coltyp;
        uint32_t cbMax;
        uint32_t grbit;
        void* pvDefault;
        uint32_t cbDefault;
        uint32_t cp;
        uint32_t columnid;
        int32_t err;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct tag_JET_USERDEFINEDDEFAULT_A
    {
        int8_t* szCallback;
        uint8_t* pbUserData;
        uint32_t cbUserData;
        int8_t* szDependantColumns;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct tag_JET_USERDEFINEDDEFAULT_W
    {
        uint16_t* szCallback;
        uint8_t* pbUserData;
        uint32_t cbUserData;
        uint16_t* szDependantColumns;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_CONDITIONALCOLUMN_A
    {
        uint32_t cbStruct;
        int8_t* szColumnName;
        uint32_t grbit;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_CONDITIONALCOLUMN_W
    {
        uint32_t cbStruct;
        uint16_t* szColumnName;
        uint32_t grbit;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_UNICODEINDEX
    {
        uint32_t lcid;
        uint32_t dwMapFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_UNICODEINDEX2
    {
        uint16_t* szLocaleName;
        uint32_t dwMapFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_TUPLELIMITS
    {
        uint32_t chLengthMin;
        uint32_t chLengthMax;
        uint32_t chToIndexMax;
        uint32_t cchIncrement;
        uint32_t ichStart;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_SPACEHINTS
    {
        uint32_t cbStruct;
        uint32_t ulInitialDensity;
        uint32_t cbInitial;
        uint32_t grbit;
        uint32_t ulMaintDensity;
        uint32_t ulGrowth;
        uint32_t cbMinExtent;
        uint32_t cbMaxExtent;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_INDEXCREATE_A
    {
        union _Anonymous1_e__Union
        {
            uint32_t lcid;
            Windows::Win32::StructuredStorage::JET_UNICODEINDEX* pidxunicode;
        };
        union _Anonymous2_e__Union
        {
            uint32_t cbVarSegMac;
            Windows::Win32::StructuredStorage::JET_TUPLELIMITS* ptuplelimits;
        };
        uint32_t cbStruct;
        int8_t* szIndexName;
        int8_t* szKey;
        uint32_t cbKey;
        uint32_t grbit;
        uint32_t ulDensity;
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
        Windows::Win32::StructuredStorage::JET_CONDITIONALCOLUMN_A* rgconditionalcolumn;
        uint32_t cConditionalColumn;
        int32_t err;
        uint32_t cbKeyMost;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_INDEXCREATE_W
    {
        union _Anonymous1_e__Union
        {
            uint32_t lcid;
            Windows::Win32::StructuredStorage::JET_UNICODEINDEX* pidxunicode;
        };
        union _Anonymous2_e__Union
        {
            uint32_t cbVarSegMac;
            Windows::Win32::StructuredStorage::JET_TUPLELIMITS* ptuplelimits;
        };
        uint32_t cbStruct;
        uint16_t* szIndexName;
        uint16_t* szKey;
        uint32_t cbKey;
        uint32_t grbit;
        uint32_t ulDensity;
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
        Windows::Win32::StructuredStorage::JET_CONDITIONALCOLUMN_W* rgconditionalcolumn;
        uint32_t cConditionalColumn;
        int32_t err;
        uint32_t cbKeyMost;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_INDEXCREATE2_A
    {
        union _Anonymous1_e__Union
        {
            uint32_t lcid;
            Windows::Win32::StructuredStorage::JET_UNICODEINDEX* pidxunicode;
        };
        union _Anonymous2_e__Union
        {
            uint32_t cbVarSegMac;
            Windows::Win32::StructuredStorage::JET_TUPLELIMITS* ptuplelimits;
        };
        uint32_t cbStruct;
        int8_t* szIndexName;
        int8_t* szKey;
        uint32_t cbKey;
        uint32_t grbit;
        uint32_t ulDensity;
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
        Windows::Win32::StructuredStorage::JET_CONDITIONALCOLUMN_A* rgconditionalcolumn;
        uint32_t cConditionalColumn;
        int32_t err;
        uint32_t cbKeyMost;
        Windows::Win32::StructuredStorage::JET_SPACEHINTS* pSpacehints;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_INDEXCREATE2_W
    {
        union _Anonymous1_e__Union
        {
            uint32_t lcid;
            Windows::Win32::StructuredStorage::JET_UNICODEINDEX* pidxunicode;
        };
        union _Anonymous2_e__Union
        {
            uint32_t cbVarSegMac;
            Windows::Win32::StructuredStorage::JET_TUPLELIMITS* ptuplelimits;
        };
        uint32_t cbStruct;
        uint16_t* szIndexName;
        uint16_t* szKey;
        uint32_t cbKey;
        uint32_t grbit;
        uint32_t ulDensity;
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
        Windows::Win32::StructuredStorage::JET_CONDITIONALCOLUMN_W* rgconditionalcolumn;
        uint32_t cConditionalColumn;
        int32_t err;
        uint32_t cbKeyMost;
        Windows::Win32::StructuredStorage::JET_SPACEHINTS* pSpacehints;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_INDEXCREATE3_A
    {
        union _Anonymous_e__Union
        {
            uint32_t cbVarSegMac;
            Windows::Win32::StructuredStorage::JET_TUPLELIMITS* ptuplelimits;
        };
        uint32_t cbStruct;
        int8_t* szIndexName;
        int8_t* szKey;
        uint32_t cbKey;
        uint32_t grbit;
        uint32_t ulDensity;
        Windows::Win32::StructuredStorage::JET_UNICODEINDEX2* pidxunicode;
        _Anonymous_e__Union Anonymous;
        Windows::Win32::StructuredStorage::JET_CONDITIONALCOLUMN_A* rgconditionalcolumn;
        uint32_t cConditionalColumn;
        int32_t err;
        uint32_t cbKeyMost;
        Windows::Win32::StructuredStorage::JET_SPACEHINTS* pSpacehints;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_INDEXCREATE3_W
    {
        union _Anonymous_e__Union
        {
            uint32_t cbVarSegMac;
            Windows::Win32::StructuredStorage::JET_TUPLELIMITS* ptuplelimits;
        };
        uint32_t cbStruct;
        uint16_t* szIndexName;
        uint16_t* szKey;
        uint32_t cbKey;
        uint32_t grbit;
        uint32_t ulDensity;
        Windows::Win32::StructuredStorage::JET_UNICODEINDEX2* pidxunicode;
        _Anonymous_e__Union Anonymous;
        Windows::Win32::StructuredStorage::JET_CONDITIONALCOLUMN_W* rgconditionalcolumn;
        uint32_t cConditionalColumn;
        int32_t err;
        uint32_t cbKeyMost;
        Windows::Win32::StructuredStorage::JET_SPACEHINTS* pSpacehints;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_TABLECREATE_A
    {
        uint32_t cbStruct;
        int8_t* szTableName;
        int8_t* szTemplateTableName;
        uint32_t ulPages;
        uint32_t ulDensity;
        Windows::Win32::StructuredStorage::tag_JET_COLUMNCREATE_A* rgcolumncreate;
        uint32_t cColumns;
        Windows::Win32::StructuredStorage::JET_INDEXCREATE_A* rgindexcreate;
        uint32_t cIndexes;
        uint32_t grbit;
        uint32_t tableid;
        uint32_t cCreated;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_TABLECREATE_W
    {
        uint32_t cbStruct;
        uint16_t* szTableName;
        uint16_t* szTemplateTableName;
        uint32_t ulPages;
        uint32_t ulDensity;
        Windows::Win32::StructuredStorage::tag_JET_COLUMNCREATE_W* rgcolumncreate;
        uint32_t cColumns;
        Windows::Win32::StructuredStorage::JET_INDEXCREATE_W* rgindexcreate;
        uint32_t cIndexes;
        uint32_t grbit;
        uint32_t tableid;
        uint32_t cCreated;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_TABLECREATE2_A
    {
        uint32_t cbStruct;
        int8_t* szTableName;
        int8_t* szTemplateTableName;
        uint32_t ulPages;
        uint32_t ulDensity;
        Windows::Win32::StructuredStorage::tag_JET_COLUMNCREATE_A* rgcolumncreate;
        uint32_t cColumns;
        Windows::Win32::StructuredStorage::JET_INDEXCREATE_A* rgindexcreate;
        uint32_t cIndexes;
        int8_t* szCallback;
        uint32_t cbtyp;
        uint32_t grbit;
        uint32_t tableid;
        uint32_t cCreated;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_TABLECREATE2_W
    {
        uint32_t cbStruct;
        uint16_t* szTableName;
        uint16_t* szTemplateTableName;
        uint32_t ulPages;
        uint32_t ulDensity;
        Windows::Win32::StructuredStorage::tag_JET_COLUMNCREATE_W* rgcolumncreate;
        uint32_t cColumns;
        Windows::Win32::StructuredStorage::JET_INDEXCREATE_W* rgindexcreate;
        uint32_t cIndexes;
        uint16_t* szCallback;
        uint32_t cbtyp;
        uint32_t grbit;
        uint32_t tableid;
        uint32_t cCreated;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_TABLECREATE3_A
    {
        uint32_t cbStruct;
        int8_t* szTableName;
        int8_t* szTemplateTableName;
        uint32_t ulPages;
        uint32_t ulDensity;
        Windows::Win32::StructuredStorage::tag_JET_COLUMNCREATE_A* rgcolumncreate;
        uint32_t cColumns;
        Windows::Win32::StructuredStorage::JET_INDEXCREATE2_A* rgindexcreate;
        uint32_t cIndexes;
        int8_t* szCallback;
        uint32_t cbtyp;
        uint32_t grbit;
        Windows::Win32::StructuredStorage::JET_SPACEHINTS* pSeqSpacehints;
        Windows::Win32::StructuredStorage::JET_SPACEHINTS* pLVSpacehints;
        uint32_t cbSeparateLV;
        uint32_t tableid;
        uint32_t cCreated;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_TABLECREATE3_W
    {
        uint32_t cbStruct;
        uint16_t* szTableName;
        uint16_t* szTemplateTableName;
        uint32_t ulPages;
        uint32_t ulDensity;
        Windows::Win32::StructuredStorage::tag_JET_COLUMNCREATE_W* rgcolumncreate;
        uint32_t cColumns;
        Windows::Win32::StructuredStorage::JET_INDEXCREATE2_W* rgindexcreate;
        uint32_t cIndexes;
        uint16_t* szCallback;
        uint32_t cbtyp;
        uint32_t grbit;
        Windows::Win32::StructuredStorage::JET_SPACEHINTS* pSeqSpacehints;
        Windows::Win32::StructuredStorage::JET_SPACEHINTS* pLVSpacehints;
        uint32_t cbSeparateLV;
        uint32_t tableid;
        uint32_t cCreated;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_TABLECREATE4_A
    {
        uint32_t cbStruct;
        int8_t* szTableName;
        int8_t* szTemplateTableName;
        uint32_t ulPages;
        uint32_t ulDensity;
        Windows::Win32::StructuredStorage::tag_JET_COLUMNCREATE_A* rgcolumncreate;
        uint32_t cColumns;
        Windows::Win32::StructuredStorage::JET_INDEXCREATE3_A* rgindexcreate;
        uint32_t cIndexes;
        int8_t* szCallback;
        uint32_t cbtyp;
        uint32_t grbit;
        Windows::Win32::StructuredStorage::JET_SPACEHINTS* pSeqSpacehints;
        Windows::Win32::StructuredStorage::JET_SPACEHINTS* pLVSpacehints;
        uint32_t cbSeparateLV;
        uint32_t tableid;
        uint32_t cCreated;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_TABLECREATE4_W
    {
        uint32_t cbStruct;
        uint16_t* szTableName;
        uint16_t* szTemplateTableName;
        uint32_t ulPages;
        uint32_t ulDensity;
        Windows::Win32::StructuredStorage::tag_JET_COLUMNCREATE_W* rgcolumncreate;
        uint32_t cColumns;
        Windows::Win32::StructuredStorage::JET_INDEXCREATE3_W* rgindexcreate;
        uint32_t cIndexes;
        uint16_t* szCallback;
        uint32_t cbtyp;
        uint32_t grbit;
        Windows::Win32::StructuredStorage::JET_SPACEHINTS* pSeqSpacehints;
        Windows::Win32::StructuredStorage::JET_SPACEHINTS* pLVSpacehints;
        uint32_t cbSeparateLV;
        uint32_t tableid;
        uint32_t cCreated;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_OPENTEMPORARYTABLE
    {
        uint32_t cbStruct;
        Windows::Win32::StructuredStorage::JET_COLUMNDEF* prgcolumndef;
        uint32_t ccolumn;
        Windows::Win32::StructuredStorage::JET_UNICODEINDEX* pidxunicode;
        uint32_t grbit;
        uint32_t* prgcolumnid;
        uint32_t cbKeyMost;
        uint32_t cbVarSegMac;
        uint32_t tableid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_OPENTEMPORARYTABLE2
    {
        uint32_t cbStruct;
        Windows::Win32::StructuredStorage::JET_COLUMNDEF* prgcolumndef;
        uint32_t ccolumn;
        Windows::Win32::StructuredStorage::JET_UNICODEINDEX2* pidxunicode;
        uint32_t grbit;
        uint32_t* prgcolumnid;
        uint32_t cbKeyMost;
        uint32_t cbVarSegMac;
        uint32_t tableid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_RETINFO
    {
        uint32_t cbStruct;
        uint32_t ibLongValue;
        uint32_t itagSequence;
        uint32_t columnidNextTagged;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_SETINFO
    {
        uint32_t cbStruct;
        uint32_t ibLongValue;
        uint32_t itagSequence;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_RECPOS
    {
        uint32_t cbStruct;
        uint32_t centriesLT;
        uint32_t centriesInRange;
        uint32_t centriesTotal;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_RECORDLIST
    {
        uint32_t cbStruct;
        uint32_t tableid;
        uint32_t cRecord;
        uint32_t columnidBookmark;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_INDEXRANGE
    {
        uint32_t cbStruct;
        uint32_t tableid;
        uint32_t grbit;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_INDEX_COLUMN
    {
        uint32_t columnid;
        Windows::Win32::StructuredStorage::JET_RELOP relop;
        void* pv;
        uint32_t cb;
        uint32_t grbit;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_INDEX_RANGE
    {
        Windows::Win32::StructuredStorage::JET_INDEX_COLUMN* rgStartColumns;
        uint32_t cStartColumns;
        Windows::Win32::StructuredStorage::JET_INDEX_COLUMN* rgEndColumns;
        uint32_t cEndColumns;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_LOGTIME
    {
        union _Anonymous1_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint8_t _bitfield;
            };
            int8_t bFiller1;
            _Anonymous_e__Struct Anonymous;
        };
        union _Anonymous2_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint8_t _bitfield;
            };
            int8_t bFiller2;
            _Anonymous_e__Struct Anonymous;
        };
        int8_t bSeconds;
        int8_t bMinutes;
        int8_t bHours;
        int8_t bDay;
        int8_t bMonth;
        int8_t bYear;
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_BKLOGTIME
    {
        union _Anonymous1_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint8_t _bitfield;
            };
            int8_t bFiller1;
            _Anonymous_e__Struct Anonymous;
        };
        union _Anonymous2_e__Union
        {
            struct _Anonymous_e__Struct
            {
                uint8_t _bitfield;
            };
            int8_t bFiller2;
            _Anonymous_e__Struct Anonymous;
        };
        int8_t bSeconds;
        int8_t bMinutes;
        int8_t bHours;
        int8_t bDay;
        int8_t bMonth;
        int8_t bYear;
        _Anonymous1_e__Union Anonymous1;
        _Anonymous2_e__Union Anonymous2;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_LGPOS
    {
        uint16_t ib;
        uint16_t isec;
        int32_t lGeneration;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_SIGNATURE
    {
        uint32_t ulRandom;
        Windows::Win32::StructuredStorage::JET_LOGTIME logtimeCreate;
        int8_t szComputerName[16];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_BKINFO
    {
        union _Anonymous_e__Union
        {
            Windows::Win32::StructuredStorage::JET_LOGTIME logtimeMark;
            Windows::Win32::StructuredStorage::JET_BKLOGTIME bklogtimeMark;
        };
        Windows::Win32::StructuredStorage::JET_LGPOS lgposMark;
        _Anonymous_e__Union Anonymous;
        uint32_t genLow;
        uint32_t genHigh;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_DBINFOMISC
    {
        uint32_t ulVersion;
        uint32_t ulUpdate;
        Windows::Win32::StructuredStorage::JET_SIGNATURE signDb;
        uint32_t dbstate;
        Windows::Win32::StructuredStorage::JET_LGPOS lgposConsistent;
        Windows::Win32::StructuredStorage::JET_LOGTIME logtimeConsistent;
        Windows::Win32::StructuredStorage::JET_LOGTIME logtimeAttach;
        Windows::Win32::StructuredStorage::JET_LGPOS lgposAttach;
        Windows::Win32::StructuredStorage::JET_LOGTIME logtimeDetach;
        Windows::Win32::StructuredStorage::JET_LGPOS lgposDetach;
        Windows::Win32::StructuredStorage::JET_SIGNATURE signLog;
        Windows::Win32::StructuredStorage::JET_BKINFO bkinfoFullPrev;
        Windows::Win32::StructuredStorage::JET_BKINFO bkinfoIncPrev;
        Windows::Win32::StructuredStorage::JET_BKINFO bkinfoFullCur;
        uint32_t fShadowingDisabled;
        uint32_t fUpgradeDb;
        uint32_t dwMajorVersion;
        uint32_t dwMinorVersion;
        uint32_t dwBuildNumber;
        int32_t lSPNumber;
        uint32_t cbPageSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_DBINFOMISC2
    {
        uint32_t ulVersion;
        uint32_t ulUpdate;
        Windows::Win32::StructuredStorage::JET_SIGNATURE signDb;
        uint32_t dbstate;
        Windows::Win32::StructuredStorage::JET_LGPOS lgposConsistent;
        Windows::Win32::StructuredStorage::JET_LOGTIME logtimeConsistent;
        Windows::Win32::StructuredStorage::JET_LOGTIME logtimeAttach;
        Windows::Win32::StructuredStorage::JET_LGPOS lgposAttach;
        Windows::Win32::StructuredStorage::JET_LOGTIME logtimeDetach;
        Windows::Win32::StructuredStorage::JET_LGPOS lgposDetach;
        Windows::Win32::StructuredStorage::JET_SIGNATURE signLog;
        Windows::Win32::StructuredStorage::JET_BKINFO bkinfoFullPrev;
        Windows::Win32::StructuredStorage::JET_BKINFO bkinfoIncPrev;
        Windows::Win32::StructuredStorage::JET_BKINFO bkinfoFullCur;
        uint32_t fShadowingDisabled;
        uint32_t fUpgradeDb;
        uint32_t dwMajorVersion;
        uint32_t dwMinorVersion;
        uint32_t dwBuildNumber;
        int32_t lSPNumber;
        uint32_t cbPageSize;
        uint32_t genMinRequired;
        uint32_t genMaxRequired;
        Windows::Win32::StructuredStorage::JET_LOGTIME logtimeGenMaxCreate;
        uint32_t ulRepairCount;
        Windows::Win32::StructuredStorage::JET_LOGTIME logtimeRepair;
        uint32_t ulRepairCountOld;
        uint32_t ulECCFixSuccess;
        Windows::Win32::StructuredStorage::JET_LOGTIME logtimeECCFixSuccess;
        uint32_t ulECCFixSuccessOld;
        uint32_t ulECCFixFail;
        Windows::Win32::StructuredStorage::JET_LOGTIME logtimeECCFixFail;
        uint32_t ulECCFixFailOld;
        uint32_t ulBadChecksum;
        Windows::Win32::StructuredStorage::JET_LOGTIME logtimeBadChecksum;
        uint32_t ulBadChecksumOld;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_DBINFOMISC3
    {
        uint32_t ulVersion;
        uint32_t ulUpdate;
        Windows::Win32::StructuredStorage::JET_SIGNATURE signDb;
        uint32_t dbstate;
        Windows::Win32::StructuredStorage::JET_LGPOS lgposConsistent;
        Windows::Win32::StructuredStorage::JET_LOGTIME logtimeConsistent;
        Windows::Win32::StructuredStorage::JET_LOGTIME logtimeAttach;
        Windows::Win32::StructuredStorage::JET_LGPOS lgposAttach;
        Windows::Win32::StructuredStorage::JET_LOGTIME logtimeDetach;
        Windows::Win32::StructuredStorage::JET_LGPOS lgposDetach;
        Windows::Win32::StructuredStorage::JET_SIGNATURE signLog;
        Windows::Win32::StructuredStorage::JET_BKINFO bkinfoFullPrev;
        Windows::Win32::StructuredStorage::JET_BKINFO bkinfoIncPrev;
        Windows::Win32::StructuredStorage::JET_BKINFO bkinfoFullCur;
        uint32_t fShadowingDisabled;
        uint32_t fUpgradeDb;
        uint32_t dwMajorVersion;
        uint32_t dwMinorVersion;
        uint32_t dwBuildNumber;
        int32_t lSPNumber;
        uint32_t cbPageSize;
        uint32_t genMinRequired;
        uint32_t genMaxRequired;
        Windows::Win32::StructuredStorage::JET_LOGTIME logtimeGenMaxCreate;
        uint32_t ulRepairCount;
        Windows::Win32::StructuredStorage::JET_LOGTIME logtimeRepair;
        uint32_t ulRepairCountOld;
        uint32_t ulECCFixSuccess;
        Windows::Win32::StructuredStorage::JET_LOGTIME logtimeECCFixSuccess;
        uint32_t ulECCFixSuccessOld;
        uint32_t ulECCFixFail;
        Windows::Win32::StructuredStorage::JET_LOGTIME logtimeECCFixFail;
        uint32_t ulECCFixFailOld;
        uint32_t ulBadChecksum;
        Windows::Win32::StructuredStorage::JET_LOGTIME logtimeBadChecksum;
        uint32_t ulBadChecksumOld;
        uint32_t genCommitted;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_DBINFOMISC4
    {
        uint32_t ulVersion;
        uint32_t ulUpdate;
        Windows::Win32::StructuredStorage::JET_SIGNATURE signDb;
        uint32_t dbstate;
        Windows::Win32::StructuredStorage::JET_LGPOS lgposConsistent;
        Windows::Win32::StructuredStorage::JET_LOGTIME logtimeConsistent;
        Windows::Win32::StructuredStorage::JET_LOGTIME logtimeAttach;
        Windows::Win32::StructuredStorage::JET_LGPOS lgposAttach;
        Windows::Win32::StructuredStorage::JET_LOGTIME logtimeDetach;
        Windows::Win32::StructuredStorage::JET_LGPOS lgposDetach;
        Windows::Win32::StructuredStorage::JET_SIGNATURE signLog;
        Windows::Win32::StructuredStorage::JET_BKINFO bkinfoFullPrev;
        Windows::Win32::StructuredStorage::JET_BKINFO bkinfoIncPrev;
        Windows::Win32::StructuredStorage::JET_BKINFO bkinfoFullCur;
        uint32_t fShadowingDisabled;
        uint32_t fUpgradeDb;
        uint32_t dwMajorVersion;
        uint32_t dwMinorVersion;
        uint32_t dwBuildNumber;
        int32_t lSPNumber;
        uint32_t cbPageSize;
        uint32_t genMinRequired;
        uint32_t genMaxRequired;
        Windows::Win32::StructuredStorage::JET_LOGTIME logtimeGenMaxCreate;
        uint32_t ulRepairCount;
        Windows::Win32::StructuredStorage::JET_LOGTIME logtimeRepair;
        uint32_t ulRepairCountOld;
        uint32_t ulECCFixSuccess;
        Windows::Win32::StructuredStorage::JET_LOGTIME logtimeECCFixSuccess;
        uint32_t ulECCFixSuccessOld;
        uint32_t ulECCFixFail;
        Windows::Win32::StructuredStorage::JET_LOGTIME logtimeECCFixFail;
        uint32_t ulECCFixFailOld;
        uint32_t ulBadChecksum;
        Windows::Win32::StructuredStorage::JET_LOGTIME logtimeBadChecksum;
        uint32_t ulBadChecksumOld;
        uint32_t genCommitted;
        Windows::Win32::StructuredStorage::JET_BKINFO bkinfoCopyPrev;
        Windows::Win32::StructuredStorage::JET_BKINFO bkinfoDiffPrev;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_THREADSTATS
    {
        uint32_t cbStruct;
        uint32_t cPageReferenced;
        uint32_t cPageRead;
        uint32_t cPagePreread;
        uint32_t cPageDirtied;
        uint32_t cPageRedirtied;
        uint32_t cLogRecord;
        uint32_t cbLogRecord;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_THREADSTATS2
    {
        uint32_t cbStruct;
        uint32_t cPageReferenced;
        uint32_t cPageRead;
        uint32_t cPagePreread;
        uint32_t cPageDirtied;
        uint32_t cPageRedirtied;
        uint32_t cLogRecord;
        uint32_t cbLogRecord;
        uint64_t cusecPageCacheMiss;
        uint32_t cPageCacheMiss;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_RSTINFO_A
    {
        uint32_t cbStruct;
        Windows::Win32::StructuredStorage::JET_RSTMAP_A* rgrstmap;
        int32_t crstmap;
        Windows::Win32::StructuredStorage::JET_LGPOS lgposStop;
        Windows::Win32::StructuredStorage::JET_LOGTIME logtimeStop;
        Windows::Win32::StructuredStorage::JET_PFNSTATUS* pfnStatus;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_RSTINFO_W
    {
        uint32_t cbStruct;
        Windows::Win32::StructuredStorage::JET_RSTMAP_W* rgrstmap;
        int32_t crstmap;
        Windows::Win32::StructuredStorage::JET_LGPOS lgposStop;
        Windows::Win32::StructuredStorage::JET_LOGTIME logtimeStop;
        Windows::Win32::StructuredStorage::JET_PFNSTATUS* pfnStatus;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_ERRINFOBASIC_W
    {
        uint32_t cbStruct;
        int32_t errValue;
        Windows::Win32::StructuredStorage::JET_ERRCAT errcatMostSpecific;
        uint8_t rgCategoricalHierarchy[8];
        uint32_t lSourceLine;
        uint16_t rgszSourceFile[64];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_COMMIT_ID
    {
        Windows::Win32::StructuredStorage::JET_SIGNATURE signLog;
        int32_t reserved;
        int64_t commitId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_OPERATIONCONTEXT
    {
        uint32_t ulUserID;
        uint8_t nOperationID;
        uint8_t nOperationType;
        uint8_t nClientType;
        uint8_t fFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_SETCOLUMN
    {
        uint32_t columnid;
        void* pvData;
        uint32_t cbData;
        uint32_t grbit;
        uint32_t ibLongValue;
        uint32_t itagSequence;
        int32_t err;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_SETSYSPARAM_A
    {
        uint32_t paramid;
        uint32_t lParam;
        int8_t* sz;
        int32_t err;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_SETSYSPARAM_W
    {
        uint32_t paramid;
        uint32_t lParam;
        uint16_t* sz;
        int32_t err;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_RETRIEVECOLUMN
    {
        uint32_t columnid;
        void* pvData;
        uint32_t cbData;
        uint32_t cbActual;
        uint32_t grbit;
        uint32_t ibLongValue;
        uint32_t itagSequence;
        uint32_t columnidNextTagged;
        int32_t err;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_ENUMCOLUMNID
    {
        uint32_t columnid;
        uint32_t ctagSequence;
        uint32_t* rgtagSequence;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_ENUMCOLUMNVALUE
    {
        uint32_t itagSequence;
        int32_t err;
        uint32_t cbData;
        void* pvData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_ENUMCOLUMN
    {
        union _Anonymous_e__Union
        {
            struct _Anonymous1_e__Struct
            {
                uint32_t cEnumColumnValue;
                Windows::Win32::StructuredStorage::JET_ENUMCOLUMNVALUE* rgEnumColumnValue;
            };
            struct _Anonymous2_e__Struct
            {
                uint32_t cbData;
                void* pvData;
            };
            _Anonymous1_e__Struct Anonymous1;
            _Anonymous2_e__Struct Anonymous2;
        };
        uint32_t columnid;
        int32_t err;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_RECSIZE
    {
        uint64_t cbData;
        uint64_t cbLongValueData;
        uint64_t cbOverhead;
        uint64_t cbLongValueOverhead;
        uint64_t cNonTaggedColumns;
        uint64_t cTaggedColumns;
        uint64_t cLongValues;
        uint64_t cMultiValues;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_RECSIZE2
    {
        uint64_t cbData;
        uint64_t cbLongValueData;
        uint64_t cbOverhead;
        uint64_t cbLongValueOverhead;
        uint64_t cNonTaggedColumns;
        uint64_t cTaggedColumns;
        uint64_t cLongValues;
        uint64_t cMultiValues;
        uint64_t cCompressedColumns;
        uint64_t cbDataCompressed;
        uint64_t cbLongValueDataCompressed;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_LOGINFO_A
    {
        uint32_t cbSize;
        uint32_t ulGenLow;
        uint32_t ulGenHigh;
        int8_t szBaseName[4];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_LOGINFO_W
    {
        uint32_t cbSize;
        uint32_t ulGenLow;
        uint32_t ulGenHigh;
        uint16_t szBaseName[4];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_INSTANCE_INFO_A
    {
        uint32_t hInstanceId;
        int8_t* szInstanceName;
        uint32_t cDatabases;
        int8_t** szDatabaseFileName;
        int8_t** szDatabaseDisplayName;
        int8_t** szDatabaseSLVFileName_Obsolete;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::StructuredStorage
{
    struct JET_INSTANCE_INFO_W
    {
        uint32_t hInstanceId;
        uint16_t* szInstanceName;
        uint32_t cDatabases;
        uint16_t** szDatabaseFileName;
        uint16_t** szDatabaseDisplayName;
        uint16_t** szDatabaseSLVFileName_Obsolete;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Shell
{
    struct SERIALIZEDPROPERTYVALUE
    {
        uint32_t dwType;
        uint8_t rgb[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TaskScheduler
{
    struct DAILY
    {
        uint16_t DaysInterval;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TaskScheduler
{
    struct WEEKLY
    {
        uint16_t WeeksInterval;
        uint16_t rgfDaysOfTheWeek;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TaskScheduler
{
    struct MONTHLYDATE
    {
        uint32_t rgfDays;
        uint16_t rgfMonths;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TaskScheduler
{
    struct MONTHLYDOW
    {
        uint16_t wWhichWeek;
        uint16_t rgfDaysOfTheWeek;
        uint16_t rgfMonths;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TaskScheduler
{
    union TRIGGER_TYPE_UNION
    {
        Windows::Win32::TaskScheduler::DAILY Daily;
        Windows::Win32::TaskScheduler::WEEKLY Weekly;
        Windows::Win32::TaskScheduler::MONTHLYDATE MonthlyDate;
        Windows::Win32::TaskScheduler::MONTHLYDOW MonthlyDOW;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::TaskScheduler
{
    struct TASK_TRIGGER
    {
        uint16_t cbTriggerSize;
        uint16_t Reserved1;
        uint16_t wBeginYear;
        uint16_t wBeginMonth;
        uint16_t wBeginDay;
        uint16_t wEndYear;
        uint16_t wEndMonth;
        uint16_t wEndDay;
        uint16_t wStartHour;
        uint16_t wStartMinute;
        uint32_t MinutesDuration;
        uint32_t MinutesInterval;
        uint32_t rgFlags;
        Windows::Win32::TaskScheduler::TASK_TRIGGER_TYPE TriggerType;
        Windows::Win32::TaskScheduler::TRIGGER_TYPE_UNION Type;
        uint16_t Reserved2;
        uint16_t wRandomMinutesInterval;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_XML_READER
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_XML_WRITER
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_XML_BUFFER
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_CHANNEL
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_OPERATION_CONTEXT
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_ERROR
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_HEAP
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_LISTENER
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_MESSAGE
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_SECURITY_TOKEN
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_SECURITY_CONTEXT
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_SERVICE_HOST
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_SERVICE_PROXY
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_METADATA
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_POLICY
    {
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_XML_DICTIONARY
    {
        ::win32::guid guid;
        Windows::Win32::WindowsWebServices::WS_XML_STRING* strings;
        uint32_t stringCount;
        Windows::Win32::SystemServices::BOOL isConst;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_XML_STRING
    {
        uint32_t length;
        uint8_t* bytes;
        Windows::Win32::WindowsWebServices::WS_XML_DICTIONARY* dictionary;
        uint32_t id;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_XML_QNAME
    {
        Windows::Win32::WindowsWebServices::WS_XML_STRING localName;
        Windows::Win32::WindowsWebServices::WS_XML_STRING ns;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_XML_NODE_POSITION
    {
        Windows::Win32::WindowsWebServices::WS_XML_BUFFER* buffer;
        void* node;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_XML_READER_PROPERTY
    {
        Windows::Win32::WindowsWebServices::WS_XML_READER_PROPERTY_ID id;
        void* value;
        uint32_t valueSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_XML_CANONICALIZATION_INCLUSIVE_PREFIXES
    {
        uint32_t prefixCount;
        Windows::Win32::WindowsWebServices::WS_XML_STRING* prefixes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_XML_CANONICALIZATION_PROPERTY
    {
        Windows::Win32::WindowsWebServices::WS_XML_CANONICALIZATION_PROPERTY_ID id;
        void* value;
        uint32_t valueSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_XML_WRITER_PROPERTY
    {
        Windows::Win32::WindowsWebServices::WS_XML_WRITER_PROPERTY_ID id;
        void* value;
        uint32_t valueSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_XML_BUFFER_PROPERTY
    {
        Windows::Win32::WindowsWebServices::WS_XML_BUFFER_PROPERTY_ID id;
        void* value;
        uint32_t valueSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_XML_TEXT
    {
        Windows::Win32::WindowsWebServices::WS_XML_TEXT_TYPE textType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_XML_UTF8_TEXT
    {
        Windows::Win32::WindowsWebServices::WS_XML_TEXT text;
        Windows::Win32::WindowsWebServices::WS_XML_STRING value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_XML_UTF16_TEXT
    {
        Windows::Win32::WindowsWebServices::WS_XML_TEXT text;
        uint8_t* bytes;
        uint32_t byteCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_XML_BASE64_TEXT
    {
        Windows::Win32::WindowsWebServices::WS_XML_TEXT text;
        uint8_t* bytes;
        uint32_t length;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_XML_BOOL_TEXT
    {
        Windows::Win32::WindowsWebServices::WS_XML_TEXT text;
        Windows::Win32::SystemServices::BOOL value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_XML_INT32_TEXT
    {
        Windows::Win32::WindowsWebServices::WS_XML_TEXT text;
        int32_t value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_XML_INT64_TEXT
    {
        Windows::Win32::WindowsWebServices::WS_XML_TEXT text;
        int64_t value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_XML_UINT64_TEXT
    {
        Windows::Win32::WindowsWebServices::WS_XML_TEXT text;
        uint64_t value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_XML_FLOAT_TEXT
    {
        Windows::Win32::WindowsWebServices::WS_XML_TEXT text;
        float value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_XML_DOUBLE_TEXT
    {
        Windows::Win32::WindowsWebServices::WS_XML_TEXT text;
        double value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_XML_DECIMAL_TEXT
    {
        Windows::Win32::WindowsWebServices::WS_XML_TEXT text;
        Windows::Win32::SystemServices::DECIMAL value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_XML_GUID_TEXT
    {
        Windows::Win32::WindowsWebServices::WS_XML_TEXT text;
        ::win32::guid value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_XML_UNIQUE_ID_TEXT
    {
        Windows::Win32::WindowsWebServices::WS_XML_TEXT text;
        ::win32::guid value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_DATETIME
    {
        uint64_t ticks;
        Windows::Win32::WindowsWebServices::WS_DATETIME_FORMAT format;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_XML_DATETIME_TEXT
    {
        Windows::Win32::WindowsWebServices::WS_XML_TEXT text;
        Windows::Win32::WindowsWebServices::WS_DATETIME value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_TIMESPAN
    {
        int64_t ticks;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_XML_TIMESPAN_TEXT
    {
        Windows::Win32::WindowsWebServices::WS_XML_TEXT text;
        Windows::Win32::WindowsWebServices::WS_TIMESPAN value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_XML_QNAME_TEXT
    {
        Windows::Win32::WindowsWebServices::WS_XML_TEXT text;
        Windows::Win32::WindowsWebServices::WS_XML_STRING* prefix;
        Windows::Win32::WindowsWebServices::WS_XML_STRING* localName;
        Windows::Win32::WindowsWebServices::WS_XML_STRING* ns;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_XML_LIST_TEXT
    {
        Windows::Win32::WindowsWebServices::WS_XML_TEXT text;
        uint32_t itemCount;
        Windows::Win32::WindowsWebServices::WS_XML_TEXT** items;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_XML_NODE
    {
        Windows::Win32::WindowsWebServices::WS_XML_NODE_TYPE nodeType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_XML_ATTRIBUTE
    {
        uint8_t singleQuote;
        uint8_t isXmlNs;
        Windows::Win32::WindowsWebServices::WS_XML_STRING* prefix;
        Windows::Win32::WindowsWebServices::WS_XML_STRING* localName;
        Windows::Win32::WindowsWebServices::WS_XML_STRING* ns;
        Windows::Win32::WindowsWebServices::WS_XML_TEXT* value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_XML_ELEMENT_NODE
    {
        Windows::Win32::WindowsWebServices::WS_XML_NODE node;
        Windows::Win32::WindowsWebServices::WS_XML_STRING* prefix;
        Windows::Win32::WindowsWebServices::WS_XML_STRING* localName;
        Windows::Win32::WindowsWebServices::WS_XML_STRING* ns;
        uint32_t attributeCount;
        Windows::Win32::WindowsWebServices::WS_XML_ATTRIBUTE** attributes;
        Windows::Win32::SystemServices::BOOL isEmpty;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_XML_TEXT_NODE
    {
        Windows::Win32::WindowsWebServices::WS_XML_NODE node;
        Windows::Win32::WindowsWebServices::WS_XML_TEXT* text;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_XML_COMMENT_NODE
    {
        Windows::Win32::WindowsWebServices::WS_XML_NODE node;
        Windows::Win32::WindowsWebServices::WS_XML_STRING value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_XML_READER_INPUT
    {
        Windows::Win32::WindowsWebServices::WS_XML_READER_INPUT_TYPE inputType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_XML_READER_BUFFER_INPUT
    {
        Windows::Win32::WindowsWebServices::WS_XML_READER_INPUT input;
        void* encodedData;
        uint32_t encodedDataSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_XML_READER_STREAM_INPUT
    {
        Windows::Win32::WindowsWebServices::WS_XML_READER_INPUT input;
        Windows::Win32::WindowsWebServices::WS_READ_CALLBACK* readCallback;
        void* readCallbackState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_XML_READER_ENCODING
    {
        Windows::Win32::WindowsWebServices::WS_XML_READER_ENCODING_TYPE encodingType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_XML_READER_TEXT_ENCODING
    {
        Windows::Win32::WindowsWebServices::WS_XML_READER_ENCODING encoding;
        Windows::Win32::WindowsWebServices::WS_CHARSET charSet;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_XML_READER_BINARY_ENCODING
    {
        Windows::Win32::WindowsWebServices::WS_XML_READER_ENCODING encoding;
        Windows::Win32::WindowsWebServices::WS_XML_DICTIONARY* staticDictionary;
        Windows::Win32::WindowsWebServices::WS_XML_DICTIONARY* dynamicDictionary;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_STRING
    {
        uint32_t length;
        uint16_t* chars;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_XML_READER_MTOM_ENCODING
    {
        Windows::Win32::WindowsWebServices::WS_XML_READER_ENCODING encoding;
        Windows::Win32::WindowsWebServices::WS_XML_READER_ENCODING* textEncoding;
        Windows::Win32::SystemServices::BOOL readMimeHeader;
        Windows::Win32::WindowsWebServices::WS_STRING startInfo;
        Windows::Win32::WindowsWebServices::WS_STRING boundary;
        Windows::Win32::WindowsWebServices::WS_STRING startUri;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_XML_READER_RAW_ENCODING
    {
        Windows::Win32::WindowsWebServices::WS_XML_READER_ENCODING encoding;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_XML_WRITER_ENCODING
    {
        Windows::Win32::WindowsWebServices::WS_XML_WRITER_ENCODING_TYPE encodingType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_XML_WRITER_TEXT_ENCODING
    {
        Windows::Win32::WindowsWebServices::WS_XML_WRITER_ENCODING encoding;
        Windows::Win32::WindowsWebServices::WS_CHARSET charSet;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_XML_WRITER_BINARY_ENCODING
    {
        Windows::Win32::WindowsWebServices::WS_XML_WRITER_ENCODING encoding;
        Windows::Win32::WindowsWebServices::WS_XML_DICTIONARY* staticDictionary;
        Windows::Win32::WindowsWebServices::WS_DYNAMIC_STRING_CALLBACK* dynamicStringCallback;
        void* dynamicStringCallbackState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_XML_WRITER_MTOM_ENCODING
    {
        Windows::Win32::WindowsWebServices::WS_XML_WRITER_ENCODING encoding;
        Windows::Win32::WindowsWebServices::WS_XML_WRITER_ENCODING* textEncoding;
        Windows::Win32::SystemServices::BOOL writeMimeHeader;
        Windows::Win32::WindowsWebServices::WS_STRING boundary;
        Windows::Win32::WindowsWebServices::WS_STRING startInfo;
        Windows::Win32::WindowsWebServices::WS_STRING startUri;
        uint32_t maxInlineByteCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_XML_WRITER_RAW_ENCODING
    {
        Windows::Win32::WindowsWebServices::WS_XML_WRITER_ENCODING encoding;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_XML_WRITER_OUTPUT
    {
        Windows::Win32::WindowsWebServices::WS_XML_WRITER_OUTPUT_TYPE outputType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_XML_WRITER_BUFFER_OUTPUT
    {
        Windows::Win32::WindowsWebServices::WS_XML_WRITER_OUTPUT output;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_XML_WRITER_STREAM_OUTPUT
    {
        Windows::Win32::WindowsWebServices::WS_XML_WRITER_OUTPUT output;
        Windows::Win32::WindowsWebServices::WS_WRITE_CALLBACK* writeCallback;
        void* writeCallbackState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_XML_WRITER_PROPERTIES
    {
        Windows::Win32::WindowsWebServices::WS_XML_WRITER_PROPERTY* properties;
        uint32_t propertyCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_XML_READER_PROPERTIES
    {
        Windows::Win32::WindowsWebServices::WS_XML_READER_PROPERTY* properties;
        uint32_t propertyCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_ASYNC_CONTEXT
    {
        Windows::Win32::WindowsWebServices::WS_ASYNC_CALLBACK* callback;
        void* callbackState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_ASYNC_STATE
    {
        void* internal0;
        void* internal1;
        void* internal2;
        void* internal3;
        void* internal4;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_ASYNC_OPERATION
    {
        Windows::Win32::WindowsWebServices::WS_ASYNC_FUNCTION* function;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_CHANNEL_PROPERTY
    {
        Windows::Win32::WindowsWebServices::WS_CHANNEL_PROPERTY_ID id;
        void* value;
        uint32_t valueSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_CUSTOM_HTTP_PROXY
    {
        Windows::Win32::WindowsWebServices::WS_STRING servers;
        Windows::Win32::WindowsWebServices::WS_STRING bypass;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_CHANNEL_PROPERTIES
    {
        Windows::Win32::WindowsWebServices::WS_CHANNEL_PROPERTY* properties;
        uint32_t propertyCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_CUSTOM_CHANNEL_CALLBACKS
    {
        Windows::Win32::WindowsWebServices::WS_CREATE_CHANNEL_CALLBACK* createChannelCallback;
        Windows::Win32::WindowsWebServices::WS_FREE_CHANNEL_CALLBACK* freeChannelCallback;
        Windows::Win32::WindowsWebServices::WS_RESET_CHANNEL_CALLBACK* resetChannelCallback;
        Windows::Win32::WindowsWebServices::WS_OPEN_CHANNEL_CALLBACK* openChannelCallback;
        Windows::Win32::WindowsWebServices::WS_CLOSE_CHANNEL_CALLBACK* closeChannelCallback;
        Windows::Win32::WindowsWebServices::WS_ABORT_CHANNEL_CALLBACK* abortChannelCallback;
        Windows::Win32::WindowsWebServices::WS_GET_CHANNEL_PROPERTY_CALLBACK* getChannelPropertyCallback;
        Windows::Win32::WindowsWebServices::WS_SET_CHANNEL_PROPERTY_CALLBACK* setChannelPropertyCallback;
        Windows::Win32::WindowsWebServices::WS_WRITE_MESSAGE_START_CALLBACK* writeMessageStartCallback;
        Windows::Win32::WindowsWebServices::WS_WRITE_MESSAGE_END_CALLBACK* writeMessageEndCallback;
        Windows::Win32::WindowsWebServices::WS_READ_MESSAGE_START_CALLBACK* readMessageStartCallback;
        Windows::Win32::WindowsWebServices::WS_READ_MESSAGE_END_CALLBACK* readMessageEndCallback;
        Windows::Win32::WindowsWebServices::WS_ABANDON_MESSAGE_CALLBACK* abandonMessageCallback;
        Windows::Win32::WindowsWebServices::WS_SHUTDOWN_SESSION_CHANNEL_CALLBACK* shutdownSessionChannelCallback;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_HTTP_HEADER_MAPPING
    {
        Windows::Win32::WindowsWebServices::WS_XML_STRING headerName;
        uint32_t headerMappingOptions;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_HTTP_MESSAGE_MAPPING
    {
        uint32_t requestMappingOptions;
        uint32_t responseMappingOptions;
        Windows::Win32::WindowsWebServices::WS_HTTP_HEADER_MAPPING** requestHeaderMappings;
        uint32_t requestHeaderMappingCount;
        Windows::Win32::WindowsWebServices::WS_HTTP_HEADER_MAPPING** responseHeaderMappings;
        uint32_t responseHeaderMappingCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_ELEMENT_DESCRIPTION
    {
        Windows::Win32::WindowsWebServices::WS_XML_STRING* elementLocalName;
        Windows::Win32::WindowsWebServices::WS_XML_STRING* elementNs;
        Windows::Win32::WindowsWebServices::WS_TYPE type;
        void* typeDescription;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_MESSAGE_DESCRIPTION
    {
        Windows::Win32::WindowsWebServices::WS_XML_STRING* action;
        Windows::Win32::WindowsWebServices::WS_ELEMENT_DESCRIPTION* bodyElementDescription;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_CHANNEL_ENCODER
    {
        void* createContext;
        Windows::Win32::WindowsWebServices::WS_CREATE_ENCODER_CALLBACK* createEncoderCallback;
        Windows::Win32::WindowsWebServices::WS_ENCODER_GET_CONTENT_TYPE_CALLBACK* encoderGetContentTypeCallback;
        Windows::Win32::WindowsWebServices::WS_ENCODER_START_CALLBACK* encoderStartCallback;
        Windows::Win32::WindowsWebServices::WS_ENCODER_ENCODE_CALLBACK* encoderEncodeCallback;
        Windows::Win32::WindowsWebServices::WS_ENCODER_END_CALLBACK* encoderEndCallback;
        Windows::Win32::WindowsWebServices::WS_FREE_ENCODER_CALLBACK* freeEncoderCallback;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_CHANNEL_DECODER
    {
        void* createContext;
        Windows::Win32::WindowsWebServices::WS_CREATE_DECODER_CALLBACK* createDecoderCallback;
        Windows::Win32::WindowsWebServices::WS_DECODER_GET_CONTENT_TYPE_CALLBACK* decoderGetContentTypeCallback;
        Windows::Win32::WindowsWebServices::WS_DECODER_START_CALLBACK* decoderStartCallback;
        Windows::Win32::WindowsWebServices::WS_DECODER_DECODE_CALLBACK* decoderDecodeCallback;
        Windows::Win32::WindowsWebServices::WS_DECODER_END_CALLBACK* decoderEndCallback;
        Windows::Win32::WindowsWebServices::WS_FREE_DECODER_CALLBACK* freeDecoderCallback;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_HTTP_REDIRECT_CALLBACK_CONTEXT
    {
        Windows::Win32::WindowsWebServices::WS_HTTP_REDIRECT_CALLBACK* callback;
        void* state;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_ENDPOINT_IDENTITY
    {
        Windows::Win32::WindowsWebServices::WS_ENDPOINT_IDENTITY_TYPE identityType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_ENDPOINT_ADDRESS
    {
        Windows::Win32::WindowsWebServices::WS_STRING url;
        Windows::Win32::WindowsWebServices::WS_XML_BUFFER* headers;
        Windows::Win32::WindowsWebServices::WS_XML_BUFFER* extensions;
        Windows::Win32::WindowsWebServices::WS_ENDPOINT_IDENTITY* identity;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_DNS_ENDPOINT_IDENTITY
    {
        Windows::Win32::WindowsWebServices::WS_ENDPOINT_IDENTITY identity;
        Windows::Win32::WindowsWebServices::WS_STRING dns;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_UPN_ENDPOINT_IDENTITY
    {
        Windows::Win32::WindowsWebServices::WS_ENDPOINT_IDENTITY identity;
        Windows::Win32::WindowsWebServices::WS_STRING upn;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_SPN_ENDPOINT_IDENTITY
    {
        Windows::Win32::WindowsWebServices::WS_ENDPOINT_IDENTITY identity;
        Windows::Win32::WindowsWebServices::WS_STRING spn;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_BYTES
    {
        uint32_t length;
        uint8_t* bytes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_RSA_ENDPOINT_IDENTITY
    {
        Windows::Win32::WindowsWebServices::WS_ENDPOINT_IDENTITY identity;
        Windows::Win32::WindowsWebServices::WS_BYTES modulus;
        Windows::Win32::WindowsWebServices::WS_BYTES exponent;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_CERT_ENDPOINT_IDENTITY
    {
        Windows::Win32::WindowsWebServices::WS_ENDPOINT_IDENTITY identity;
        Windows::Win32::WindowsWebServices::WS_BYTES rawCertificateData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_UNKNOWN_ENDPOINT_IDENTITY
    {
        Windows::Win32::WindowsWebServices::WS_ENDPOINT_IDENTITY identity;
        Windows::Win32::WindowsWebServices::WS_XML_BUFFER* element;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_ERROR_PROPERTY
    {
        Windows::Win32::WindowsWebServices::WS_ERROR_PROPERTY_ID id;
        void* value;
        uint32_t valueSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_FAULT_REASON
    {
        Windows::Win32::WindowsWebServices::WS_STRING text;
        Windows::Win32::WindowsWebServices::WS_STRING lang;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_FAULT_CODE
    {
        Windows::Win32::WindowsWebServices::WS_XML_QNAME value;
        Windows::Win32::WindowsWebServices::WS_FAULT_CODE* subCode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_FAULT
    {
        Windows::Win32::WindowsWebServices::WS_FAULT_CODE* code;
        Windows::Win32::WindowsWebServices::WS_FAULT_REASON* reasons;
        uint32_t reasonCount;
        Windows::Win32::WindowsWebServices::WS_STRING actor;
        Windows::Win32::WindowsWebServices::WS_STRING node;
        Windows::Win32::WindowsWebServices::WS_XML_BUFFER* detail;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_FAULT_DETAIL_DESCRIPTION
    {
        Windows::Win32::WindowsWebServices::WS_XML_STRING* action;
        Windows::Win32::WindowsWebServices::WS_ELEMENT_DESCRIPTION* detailElementDescription;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_HEAP_PROPERTY
    {
        Windows::Win32::WindowsWebServices::WS_HEAP_PROPERTY_ID id;
        void* value;
        uint32_t valueSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_HEAP_PROPERTIES
    {
        Windows::Win32::WindowsWebServices::WS_HEAP_PROPERTY* properties;
        uint32_t propertyCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_LISTENER_PROPERTY
    {
        Windows::Win32::WindowsWebServices::WS_LISTENER_PROPERTY_ID id;
        void* value;
        uint32_t valueSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_DISALLOWED_USER_AGENT_SUBSTRINGS
    {
        uint32_t subStringCount;
        Windows::Win32::WindowsWebServices::WS_STRING** subStrings;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_LISTENER_PROPERTIES
    {
        Windows::Win32::WindowsWebServices::WS_LISTENER_PROPERTY* properties;
        uint32_t propertyCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_HOST_NAMES
    {
        Windows::Win32::WindowsWebServices::WS_STRING* hostNames;
        uint32_t hostNameCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_CUSTOM_LISTENER_CALLBACKS
    {
        Windows::Win32::WindowsWebServices::WS_CREATE_LISTENER_CALLBACK* createListenerCallback;
        Windows::Win32::WindowsWebServices::WS_FREE_LISTENER_CALLBACK* freeListenerCallback;
        Windows::Win32::WindowsWebServices::WS_RESET_LISTENER_CALLBACK* resetListenerCallback;
        Windows::Win32::WindowsWebServices::WS_OPEN_LISTENER_CALLBACK* openListenerCallback;
        Windows::Win32::WindowsWebServices::WS_CLOSE_LISTENER_CALLBACK* closeListenerCallback;
        Windows::Win32::WindowsWebServices::WS_ABORT_LISTENER_CALLBACK* abortListenerCallback;
        Windows::Win32::WindowsWebServices::WS_GET_LISTENER_PROPERTY_CALLBACK* getListenerPropertyCallback;
        Windows::Win32::WindowsWebServices::WS_SET_LISTENER_PROPERTY_CALLBACK* setListenerPropertyCallback;
        Windows::Win32::WindowsWebServices::WS_CREATE_CHANNEL_FOR_LISTENER_CALLBACK* createChannelForListenerCallback;
        Windows::Win32::WindowsWebServices::WS_ACCEPT_CHANNEL_CALLBACK* acceptChannelCallback;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_MESSAGE_PROPERTY
    {
        Windows::Win32::WindowsWebServices::WS_MESSAGE_PROPERTY_ID id;
        void* value;
        uint32_t valueSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_MESSAGE_PROPERTIES
    {
        Windows::Win32::WindowsWebServices::WS_MESSAGE_PROPERTY* properties;
        uint32_t propertyCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_SECURITY_ALGORITHM_PROPERTY
    {
        Windows::Win32::WindowsWebServices::WS_SECURITY_ALGORITHM_PROPERTY_ID id;
        void* value;
        uint32_t valueSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_SECURITY_ALGORITHM_SUITE
    {
        Windows::Win32::WindowsWebServices::WS_SECURITY_ALGORITHM_ID canonicalizationAlgorithm;
        Windows::Win32::WindowsWebServices::WS_SECURITY_ALGORITHM_ID digestAlgorithm;
        Windows::Win32::WindowsWebServices::WS_SECURITY_ALGORITHM_ID symmetricSignatureAlgorithm;
        Windows::Win32::WindowsWebServices::WS_SECURITY_ALGORITHM_ID asymmetricSignatureAlgorithm;
        Windows::Win32::WindowsWebServices::WS_SECURITY_ALGORITHM_ID encryptionAlgorithm;
        Windows::Win32::WindowsWebServices::WS_SECURITY_ALGORITHM_ID keyDerivationAlgorithm;
        Windows::Win32::WindowsWebServices::WS_SECURITY_ALGORITHM_ID symmetricKeyWrapAlgorithm;
        Windows::Win32::WindowsWebServices::WS_SECURITY_ALGORITHM_ID asymmetricKeyWrapAlgorithm;
        uint32_t minSymmetricKeyLength;
        uint32_t maxSymmetricKeyLength;
        uint32_t minAsymmetricKeyLength;
        uint32_t maxAsymmetricKeyLength;
        Windows::Win32::WindowsWebServices::WS_SECURITY_ALGORITHM_PROPERTY* properties;
        uint32_t propertyCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_SECURITY_PROPERTY
    {
        Windows::Win32::WindowsWebServices::WS_SECURITY_PROPERTY_ID id;
        void* value;
        uint32_t valueSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_SECURITY_PROPERTIES
    {
        Windows::Win32::WindowsWebServices::WS_SECURITY_PROPERTY* properties;
        uint32_t propertyCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_SECURITY_BINDING_PROPERTY
    {
        Windows::Win32::WindowsWebServices::WS_SECURITY_BINDING_PROPERTY_ID id;
        void* value;
        uint32_t valueSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_SECURITY_BINDING_PROPERTIES
    {
        Windows::Win32::WindowsWebServices::WS_SECURITY_BINDING_PROPERTY* properties;
        uint32_t propertyCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_SERVICE_SECURITY_IDENTITIES
    {
        Windows::Win32::WindowsWebServices::WS_STRING* serviceIdentities;
        uint32_t serviceIdentityCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_CERTIFICATE_VALIDATION_CALLBACK_CONTEXT
    {
        Windows::Win32::WindowsWebServices::WS_CERTIFICATE_VALIDATION_CALLBACK* callback;
        void* state;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_CERT_CREDENTIAL
    {
        Windows::Win32::WindowsWebServices::WS_CERT_CREDENTIAL_TYPE credentialType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_SUBJECT_NAME_CERT_CREDENTIAL
    {
        Windows::Win32::WindowsWebServices::WS_CERT_CREDENTIAL credential;
        uint32_t storeLocation;
        Windows::Win32::WindowsWebServices::WS_STRING storeName;
        Windows::Win32::WindowsWebServices::WS_STRING subjectName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_THUMBPRINT_CERT_CREDENTIAL
    {
        Windows::Win32::WindowsWebServices::WS_CERT_CREDENTIAL credential;
        uint32_t storeLocation;
        Windows::Win32::WindowsWebServices::WS_STRING storeName;
        Windows::Win32::WindowsWebServices::WS_STRING thumbprint;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_CUSTOM_CERT_CREDENTIAL
    {
        Windows::Win32::WindowsWebServices::WS_CERT_CREDENTIAL credential;
        Windows::Win32::WindowsWebServices::WS_GET_CERT_CALLBACK* getCertCallback;
        void* getCertCallbackState;
        Windows::Win32::WindowsWebServices::WS_CERT_ISSUER_LIST_NOTIFICATION_CALLBACK* certIssuerListNotificationCallback;
        void* certIssuerListNotificationCallbackState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL
    {
        Windows::Win32::WindowsWebServices::WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL_TYPE credentialType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_STRING_WINDOWS_INTEGRATED_AUTH_CREDENTIAL
    {
        Windows::Win32::WindowsWebServices::WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL credential;
        Windows::Win32::WindowsWebServices::WS_STRING username;
        Windows::Win32::WindowsWebServices::WS_STRING password;
        Windows::Win32::WindowsWebServices::WS_STRING domain;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_DEFAULT_WINDOWS_INTEGRATED_AUTH_CREDENTIAL
    {
        Windows::Win32::WindowsWebServices::WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL credential;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_OPAQUE_WINDOWS_INTEGRATED_AUTH_CREDENTIAL
    {
        Windows::Win32::WindowsWebServices::WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL credential;
        void* opaqueAuthIdentity;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_USERNAME_CREDENTIAL
    {
        Windows::Win32::WindowsWebServices::WS_USERNAME_CREDENTIAL_TYPE credentialType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_STRING_USERNAME_CREDENTIAL
    {
        Windows::Win32::WindowsWebServices::WS_USERNAME_CREDENTIAL credential;
        Windows::Win32::WindowsWebServices::WS_STRING username;
        Windows::Win32::WindowsWebServices::WS_STRING password;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_SECURITY_KEY_HANDLE
    {
        Windows::Win32::WindowsWebServices::WS_SECURITY_KEY_HANDLE_TYPE keyHandleType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_RAW_SYMMETRIC_SECURITY_KEY_HANDLE
    {
        Windows::Win32::WindowsWebServices::WS_SECURITY_KEY_HANDLE keyHandle;
        Windows::Win32::WindowsWebServices::WS_BYTES rawKeyBytes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_NCRYPT_ASYMMETRIC_SECURITY_KEY_HANDLE
    {
        Windows::Win32::WindowsWebServices::WS_SECURITY_KEY_HANDLE keyHandle;
        size_t asymmetricKey;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_CAPI_ASYMMETRIC_SECURITY_KEY_HANDLE
    {
        Windows::Win32::WindowsWebServices::WS_SECURITY_KEY_HANDLE keyHandle;
        size_t provider;
        uint32_t keySpec;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_SECURITY_BINDING
    {
        Windows::Win32::WindowsWebServices::WS_SECURITY_BINDING_TYPE bindingType;
        Windows::Win32::WindowsWebServices::WS_SECURITY_BINDING_PROPERTY* properties;
        uint32_t propertyCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_SSL_TRANSPORT_SECURITY_BINDING
    {
        Windows::Win32::WindowsWebServices::WS_SECURITY_BINDING binding;
        Windows::Win32::WindowsWebServices::WS_CERT_CREDENTIAL* localCertCredential;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_TCP_SSPI_TRANSPORT_SECURITY_BINDING
    {
        Windows::Win32::WindowsWebServices::WS_SECURITY_BINDING binding;
        Windows::Win32::WindowsWebServices::WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL* clientCredential;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_NAMEDPIPE_SSPI_TRANSPORT_SECURITY_BINDING
    {
        Windows::Win32::WindowsWebServices::WS_SECURITY_BINDING binding;
        Windows::Win32::WindowsWebServices::WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL* clientCredential;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_HTTP_HEADER_AUTH_SECURITY_BINDING
    {
        Windows::Win32::WindowsWebServices::WS_SECURITY_BINDING binding;
        Windows::Win32::WindowsWebServices::WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL* clientCredential;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING
    {
        Windows::Win32::WindowsWebServices::WS_SECURITY_BINDING binding;
        Windows::Win32::WindowsWebServices::WS_MESSAGE_SECURITY_USAGE bindingUsage;
        Windows::Win32::WindowsWebServices::WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL* clientCredential;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_USERNAME_MESSAGE_SECURITY_BINDING
    {
        Windows::Win32::WindowsWebServices::WS_SECURITY_BINDING binding;
        Windows::Win32::WindowsWebServices::WS_MESSAGE_SECURITY_USAGE bindingUsage;
        Windows::Win32::WindowsWebServices::WS_USERNAME_CREDENTIAL* clientCredential;
        Windows::Win32::WindowsWebServices::WS_VALIDATE_PASSWORD_CALLBACK* passwordValidator;
        void* passwordValidatorCallbackState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_SECURITY_DESCRIPTION
    {
        Windows::Win32::WindowsWebServices::WS_SECURITY_BINDING** securityBindings;
        uint32_t securityBindingCount;
        Windows::Win32::WindowsWebServices::WS_SECURITY_PROPERTY* properties;
        uint32_t propertyCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING
    {
        Windows::Win32::WindowsWebServices::WS_SECURITY_BINDING binding;
        Windows::Win32::WindowsWebServices::WS_MESSAGE_SECURITY_USAGE bindingUsage;
        Windows::Win32::WindowsWebServices::WS_SECURITY_DESCRIPTION* bootstrapSecurityDescription;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_SECURITY_CONTEXT_PROPERTY
    {
        Windows::Win32::WindowsWebServices::WS_SECURITY_CONTEXT_PROPERTY_ID id;
        void* value;
        uint32_t valueSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_XML_SECURITY_TOKEN_PROPERTY
    {
        Windows::Win32::WindowsWebServices::WS_XML_SECURITY_TOKEN_PROPERTY_ID id;
        void* value;
        uint32_t valueSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_XML_TOKEN_MESSAGE_SECURITY_BINDING
    {
        Windows::Win32::WindowsWebServices::WS_SECURITY_BINDING binding;
        Windows::Win32::WindowsWebServices::WS_MESSAGE_SECURITY_USAGE bindingUsage;
        Windows::Win32::WindowsWebServices::WS_SECURITY_TOKEN* xmlToken;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_SAML_AUTHENTICATOR
    {
        Windows::Win32::WindowsWebServices::WS_SAML_AUTHENTICATOR_TYPE authenticatorType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_CERT_SIGNED_SAML_AUTHENTICATOR
    {
        Windows::Win32::WindowsWebServices::WS_SAML_AUTHENTICATOR authenticator;
        Windows::Win32::Security::CERT_CONTEXT** trustedIssuerCerts;
        uint32_t trustedIssuerCertCount;
        Windows::Win32::Security::CERT_CONTEXT* decryptionCert;
        Windows::Win32::WindowsWebServices::WS_VALIDATE_SAML_CALLBACK* samlValidator;
        void* samlValidatorCallbackState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_SAML_MESSAGE_SECURITY_BINDING
    {
        Windows::Win32::WindowsWebServices::WS_SECURITY_BINDING binding;
        Windows::Win32::WindowsWebServices::WS_MESSAGE_SECURITY_USAGE bindingUsage;
        Windows::Win32::WindowsWebServices::WS_SAML_AUTHENTICATOR* authenticator;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_REQUEST_SECURITY_TOKEN_PROPERTY
    {
        Windows::Win32::WindowsWebServices::WS_REQUEST_SECURITY_TOKEN_PROPERTY_ID id;
        void* value;
        uint32_t valueSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_ANY_ATTRIBUTE
    {
        Windows::Win32::WindowsWebServices::WS_XML_STRING localName;
        Windows::Win32::WindowsWebServices::WS_XML_STRING ns;
        Windows::Win32::WindowsWebServices::WS_XML_TEXT* value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_ANY_ATTRIBUTES
    {
        Windows::Win32::WindowsWebServices::WS_ANY_ATTRIBUTE* attributes;
        uint32_t attributeCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_BOOL_DESCRIPTION
    {
        Windows::Win32::SystemServices::BOOL value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_GUID_DESCRIPTION
    {
        ::win32::guid value;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_DATETIME_DESCRIPTION
    {
        Windows::Win32::WindowsWebServices::WS_DATETIME minValue;
        Windows::Win32::WindowsWebServices::WS_DATETIME maxValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_DURATION
    {
        Windows::Win32::SystemServices::BOOL negative;
        uint32_t years;
        uint32_t months;
        uint32_t days;
        uint32_t hours;
        uint32_t minutes;
        uint32_t seconds;
        uint32_t milliseconds;
        uint32_t ticks;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_DURATION_DESCRIPTION
    {
        Windows::Win32::WindowsWebServices::WS_DURATION minValue;
        Windows::Win32::WindowsWebServices::WS_DURATION maxValue;
        Windows::Win32::WindowsWebServices::WS_DURATION_COMPARISON_CALLBACK* comparer;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_TIMESPAN_DESCRIPTION
    {
        Windows::Win32::WindowsWebServices::WS_TIMESPAN minValue;
        Windows::Win32::WindowsWebServices::WS_TIMESPAN maxValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_UNIQUE_ID_DESCRIPTION
    {
        uint32_t minCharCount;
        uint32_t maxCharCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_STRING_DESCRIPTION
    {
        uint32_t minCharCount;
        uint32_t maxCharCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_XML_STRING_DESCRIPTION
    {
        uint32_t minByteCount;
        uint32_t maxByteCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_XML_QNAME_DESCRIPTION
    {
        uint32_t minLocalNameByteCount;
        uint32_t maxLocalNameByteCount;
        uint32_t minNsByteCount;
        uint32_t maxNsByteCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_CHAR_ARRAY_DESCRIPTION
    {
        uint32_t minCharCount;
        uint32_t maxCharCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_BYTE_ARRAY_DESCRIPTION
    {
        uint32_t minByteCount;
        uint32_t maxByteCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_UTF8_ARRAY_DESCRIPTION
    {
        uint32_t minByteCount;
        uint32_t maxByteCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_WSZ_DESCRIPTION
    {
        uint32_t minCharCount;
        uint32_t maxCharCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_INT8_DESCRIPTION
    {
        int8_t minValue;
        int8_t maxValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_UINT8_DESCRIPTION
    {
        uint8_t minValue;
        uint8_t maxValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_INT16_DESCRIPTION
    {
        int16_t minValue;
        int16_t maxValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_UINT16_DESCRIPTION
    {
        uint16_t minValue;
        uint16_t maxValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_INT32_DESCRIPTION
    {
        int32_t minValue;
        int32_t maxValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_UINT32_DESCRIPTION
    {
        uint32_t minValue;
        uint32_t maxValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_INT64_DESCRIPTION
    {
        int64_t minValue;
        int64_t maxValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_UINT64_DESCRIPTION
    {
        uint64_t minValue;
        uint64_t maxValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_FLOAT_DESCRIPTION
    {
        float minValue;
        float maxValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_DOUBLE_DESCRIPTION
    {
        double minValue;
        double maxValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_DECIMAL_DESCRIPTION
    {
        Windows::Win32::SystemServices::DECIMAL minValue;
        Windows::Win32::SystemServices::DECIMAL maxValue;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_BYTES_DESCRIPTION
    {
        uint32_t minByteCount;
        uint32_t maxByteCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_ENUM_VALUE
    {
        int32_t value;
        Windows::Win32::WindowsWebServices::WS_XML_STRING* name;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_ENUM_DESCRIPTION
    {
        Windows::Win32::WindowsWebServices::WS_ENUM_VALUE* values;
        uint32_t valueCount;
        uint32_t maxByteCount;
        uint32_t* nameIndices;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_ITEM_RANGE
    {
        uint32_t minItemCount;
        uint32_t maxItemCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_DEFAULT_VALUE
    {
        void* value;
        uint32_t valueSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_FIELD_DESCRIPTION
    {
        Windows::Win32::WindowsWebServices::WS_FIELD_MAPPING mapping;
        Windows::Win32::WindowsWebServices::WS_XML_STRING* localName;
        Windows::Win32::WindowsWebServices::WS_XML_STRING* ns;
        Windows::Win32::WindowsWebServices::WS_TYPE type;
        void* typeDescription;
        uint32_t offset;
        uint32_t options;
        Windows::Win32::WindowsWebServices::WS_DEFAULT_VALUE* defaultValue;
        uint32_t countOffset;
        Windows::Win32::WindowsWebServices::WS_XML_STRING* itemLocalName;
        Windows::Win32::WindowsWebServices::WS_XML_STRING* itemNs;
        Windows::Win32::WindowsWebServices::WS_ITEM_RANGE* itemRange;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_UNION_FIELD_DESCRIPTION
    {
        int32_t value;
        Windows::Win32::WindowsWebServices::WS_FIELD_DESCRIPTION field;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_STRUCT_DESCRIPTION
    {
        uint32_t size;
        uint32_t alignment;
        Windows::Win32::WindowsWebServices::WS_FIELD_DESCRIPTION** fields;
        uint32_t fieldCount;
        Windows::Win32::WindowsWebServices::WS_XML_STRING* typeLocalName;
        Windows::Win32::WindowsWebServices::WS_XML_STRING* typeNs;
        Windows::Win32::WindowsWebServices::WS_STRUCT_DESCRIPTION* parentType;
        Windows::Win32::WindowsWebServices::WS_STRUCT_DESCRIPTION** subTypes;
        uint32_t subTypeCount;
        uint32_t structOptions;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_UNION_DESCRIPTION
    {
        uint32_t size;
        uint32_t alignment;
        Windows::Win32::WindowsWebServices::WS_UNION_FIELD_DESCRIPTION** fields;
        uint32_t fieldCount;
        uint32_t enumOffset;
        int32_t noneEnumValue;
        uint32_t* valueIndices;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_ENDPOINT_ADDRESS_DESCRIPTION
    {
        Windows::Win32::WindowsWebServices::WS_ADDRESSING_VERSION addressingVersion;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_FAULT_DESCRIPTION
    {
        Windows::Win32::WindowsWebServices::WS_ENVELOPE_VERSION envelopeVersion;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_VOID_DESCRIPTION
    {
        uint32_t size;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_CUSTOM_TYPE_DESCRIPTION
    {
        uint32_t size;
        uint32_t alignment;
        Windows::Win32::WindowsWebServices::WS_READ_TYPE_CALLBACK* readCallback;
        Windows::Win32::WindowsWebServices::WS_WRITE_TYPE_CALLBACK* writeCallback;
        void* descriptionData;
        Windows::Win32::WindowsWebServices::WS_IS_DEFAULT_VALUE_CALLBACK* isDefaultValueCallback;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_ATTRIBUTE_DESCRIPTION
    {
        Windows::Win32::WindowsWebServices::WS_XML_STRING* attributeLocalName;
        Windows::Win32::WindowsWebServices::WS_XML_STRING* attributeNs;
        Windows::Win32::WindowsWebServices::WS_TYPE type;
        void* typeDescription;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_PARAMETER_DESCRIPTION
    {
        Windows::Win32::WindowsWebServices::WS_PARAMETER_TYPE parameterType;
        uint16_t inputMessageIndex;
        uint16_t outputMessageIndex;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_OPERATION_DESCRIPTION
    {
        uint32_t versionInfo;
        Windows::Win32::WindowsWebServices::WS_MESSAGE_DESCRIPTION* inputMessageDescription;
        Windows::Win32::WindowsWebServices::WS_MESSAGE_DESCRIPTION* outputMessageDescription;
        uint32_t inputMessageOptions;
        uint32_t outputMessageOptions;
        uint16_t parameterCount;
        Windows::Win32::WindowsWebServices::WS_PARAMETER_DESCRIPTION* parameterDescription;
        Windows::Win32::WindowsWebServices::WS_SERVICE_STUB_CALLBACK* stubCallback;
        Windows::Win32::WindowsWebServices::WS_OPERATION_STYLE style;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_CONTRACT_DESCRIPTION
    {
        uint32_t operationCount;
        Windows::Win32::WindowsWebServices::WS_OPERATION_DESCRIPTION** operations;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_SERVICE_CONTRACT
    {
        Windows::Win32::WindowsWebServices::WS_CONTRACT_DESCRIPTION* contractDescription;
        Windows::Win32::WindowsWebServices::WS_SERVICE_MESSAGE_RECEIVE_CALLBACK* defaultMessageHandlerCallback;
        void* methodTable;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_SERVICE_PROPERTY
    {
        Windows::Win32::WindowsWebServices::WS_SERVICE_PROPERTY_ID id;
        void* value;
        uint32_t valueSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_SERVICE_ENDPOINT_PROPERTY
    {
        Windows::Win32::WindowsWebServices::WS_SERVICE_ENDPOINT_PROPERTY_ID id;
        void* value;
        uint32_t valueSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_SERVICE_PROPERTY_ACCEPT_CALLBACK
    {
        Windows::Win32::WindowsWebServices::WS_SERVICE_ACCEPT_CHANNEL_CALLBACK* callback;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_SERVICE_METADATA_DOCUMENT
    {
        Windows::Win32::WindowsWebServices::WS_XML_STRING* content;
        Windows::Win32::WindowsWebServices::WS_STRING* name;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_SERVICE_METADATA
    {
        uint32_t documentCount;
        Windows::Win32::WindowsWebServices::WS_SERVICE_METADATA_DOCUMENT** documents;
        Windows::Win32::WindowsWebServices::WS_XML_STRING* serviceName;
        Windows::Win32::WindowsWebServices::WS_XML_STRING* serviceNs;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_SERVICE_PROPERTY_CLOSE_CALLBACK
    {
        Windows::Win32::WindowsWebServices::WS_SERVICE_CLOSE_CHANNEL_CALLBACK* callback;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_SERVICE_ENDPOINT_METADATA
    {
        Windows::Win32::WindowsWebServices::WS_XML_STRING* portName;
        Windows::Win32::WindowsWebServices::WS_XML_STRING* bindingName;
        Windows::Win32::WindowsWebServices::WS_XML_STRING* bindingNs;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_SERVICE_ENDPOINT
    {
        Windows::Win32::WindowsWebServices::WS_ENDPOINT_ADDRESS address;
        Windows::Win32::WindowsWebServices::WS_CHANNEL_BINDING channelBinding;
        Windows::Win32::WindowsWebServices::WS_CHANNEL_TYPE channelType;
        Windows::Win32::WindowsWebServices::WS_SECURITY_DESCRIPTION* securityDescription;
        Windows::Win32::WindowsWebServices::WS_SERVICE_CONTRACT* contract;
        Windows::Win32::WindowsWebServices::WS_SERVICE_SECURITY_CALLBACK* authorizationCallback;
        Windows::Win32::WindowsWebServices::WS_SERVICE_ENDPOINT_PROPERTY* properties;
        uint32_t propertyCount;
        Windows::Win32::WindowsWebServices::WS_CHANNEL_PROPERTIES channelProperties;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_PROXY_PROPERTY
    {
        Windows::Win32::WindowsWebServices::WS_PROXY_PROPERTY_ID id;
        void* value;
        uint32_t valueSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_PROXY_MESSAGE_CALLBACK_CONTEXT
    {
        Windows::Win32::WindowsWebServices::WS_PROXY_MESSAGE_CALLBACK* callback;
        void* state;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_CALL_PROPERTY
    {
        Windows::Win32::WindowsWebServices::WS_CALL_PROPERTY_ID id;
        void* value;
        uint32_t valueSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_URL
    {
        Windows::Win32::WindowsWebServices::WS_URL_SCHEME_TYPE scheme;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_HTTP_URL
    {
        Windows::Win32::WindowsWebServices::WS_URL url;
        Windows::Win32::WindowsWebServices::WS_STRING host;
        uint16_t port;
        Windows::Win32::WindowsWebServices::WS_STRING portAsString;
        Windows::Win32::WindowsWebServices::WS_STRING path;
        Windows::Win32::WindowsWebServices::WS_STRING query;
        Windows::Win32::WindowsWebServices::WS_STRING fragment;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_HTTPS_URL
    {
        Windows::Win32::WindowsWebServices::WS_URL url;
        Windows::Win32::WindowsWebServices::WS_STRING host;
        uint16_t port;
        Windows::Win32::WindowsWebServices::WS_STRING portAsString;
        Windows::Win32::WindowsWebServices::WS_STRING path;
        Windows::Win32::WindowsWebServices::WS_STRING query;
        Windows::Win32::WindowsWebServices::WS_STRING fragment;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_NETTCP_URL
    {
        Windows::Win32::WindowsWebServices::WS_URL url;
        Windows::Win32::WindowsWebServices::WS_STRING host;
        uint16_t port;
        Windows::Win32::WindowsWebServices::WS_STRING portAsString;
        Windows::Win32::WindowsWebServices::WS_STRING path;
        Windows::Win32::WindowsWebServices::WS_STRING query;
        Windows::Win32::WindowsWebServices::WS_STRING fragment;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_SOAPUDP_URL
    {
        Windows::Win32::WindowsWebServices::WS_URL url;
        Windows::Win32::WindowsWebServices::WS_STRING host;
        uint16_t port;
        Windows::Win32::WindowsWebServices::WS_STRING portAsString;
        Windows::Win32::WindowsWebServices::WS_STRING path;
        Windows::Win32::WindowsWebServices::WS_STRING query;
        Windows::Win32::WindowsWebServices::WS_STRING fragment;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_NETPIPE_URL
    {
        Windows::Win32::WindowsWebServices::WS_URL url;
        Windows::Win32::WindowsWebServices::WS_STRING host;
        uint16_t port;
        Windows::Win32::WindowsWebServices::WS_STRING portAsString;
        Windows::Win32::WindowsWebServices::WS_STRING path;
        Windows::Win32::WindowsWebServices::WS_STRING query;
        Windows::Win32::WindowsWebServices::WS_STRING fragment;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_UNIQUE_ID
    {
        Windows::Win32::WindowsWebServices::WS_STRING uri;
        ::win32::guid guid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_BUFFERS
    {
        uint32_t bufferCount;
        Windows::Win32::WindowsWebServices::WS_BYTES* buffers;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_METADATA_ENDPOINT
    {
        Windows::Win32::WindowsWebServices::WS_ENDPOINT_ADDRESS endpointAddress;
        Windows::Win32::WindowsWebServices::WS_POLICY* endpointPolicy;
        Windows::Win32::WindowsWebServices::WS_XML_STRING* portName;
        Windows::Win32::WindowsWebServices::WS_XML_STRING* serviceName;
        Windows::Win32::WindowsWebServices::WS_XML_STRING* serviceNs;
        Windows::Win32::WindowsWebServices::WS_XML_STRING* bindingName;
        Windows::Win32::WindowsWebServices::WS_XML_STRING* bindingNs;
        Windows::Win32::WindowsWebServices::WS_XML_STRING* portTypeName;
        Windows::Win32::WindowsWebServices::WS_XML_STRING* portTypeNs;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_METADATA_ENDPOINTS
    {
        Windows::Win32::WindowsWebServices::WS_METADATA_ENDPOINT* endpoints;
        uint32_t endpointCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_METADATA_PROPERTY
    {
        Windows::Win32::WindowsWebServices::WS_METADATA_PROPERTY_ID id;
        void* value;
        uint32_t valueSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_POLICY_PROPERTY
    {
        Windows::Win32::WindowsWebServices::WS_POLICY_PROPERTY_ID id;
        void* value;
        uint32_t valueSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_POLICY_PROPERTIES
    {
        Windows::Win32::WindowsWebServices::WS_POLICY_PROPERTY* properties;
        uint32_t propertyCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_SECURITY_BINDING_PROPERTY_CONSTRAINT
    {
        struct _out_e__Struct
        {
            Windows::Win32::WindowsWebServices::WS_SECURITY_BINDING_PROPERTY securityBindingProperty;
        };
        Windows::Win32::WindowsWebServices::WS_SECURITY_BINDING_PROPERTY_ID id;
        void* allowedValues;
        uint32_t allowedValuesSize;
        _out_e__Struct out;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_SECURITY_BINDING_CONSTRAINT
    {
        Windows::Win32::WindowsWebServices::WS_SECURITY_BINDING_CONSTRAINT_TYPE type;
        Windows::Win32::WindowsWebServices::WS_SECURITY_BINDING_PROPERTY_CONSTRAINT* propertyConstraints;
        uint32_t propertyConstraintCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_SSL_TRANSPORT_SECURITY_BINDING_CONSTRAINT
    {
        struct _out_e__Struct
        {
            Windows::Win32::SystemServices::BOOL clientCertCredentialRequired;
        };
        Windows::Win32::WindowsWebServices::WS_SECURITY_BINDING_CONSTRAINT bindingConstraint;
        _out_e__Struct out;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_USERNAME_MESSAGE_SECURITY_BINDING_CONSTRAINT
    {
        Windows::Win32::WindowsWebServices::WS_SECURITY_BINDING_CONSTRAINT bindingConstraint;
        Windows::Win32::WindowsWebServices::WS_MESSAGE_SECURITY_USAGE bindingUsage;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_HTTP_HEADER_AUTH_SECURITY_BINDING_CONSTRAINT
    {
        Windows::Win32::WindowsWebServices::WS_SECURITY_BINDING_CONSTRAINT bindingConstraint;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_TCP_SSPI_TRANSPORT_SECURITY_BINDING_CONSTRAINT
    {
        Windows::Win32::WindowsWebServices::WS_SECURITY_BINDING_CONSTRAINT bindingConstraint;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_CERT_MESSAGE_SECURITY_BINDING_CONSTRAINT
    {
        Windows::Win32::WindowsWebServices::WS_SECURITY_BINDING_CONSTRAINT bindingConstraint;
        Windows::Win32::WindowsWebServices::WS_MESSAGE_SECURITY_USAGE bindingUsage;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_CONSTRAINT
    {
        Windows::Win32::WindowsWebServices::WS_SECURITY_BINDING_CONSTRAINT bindingConstraint;
        Windows::Win32::WindowsWebServices::WS_MESSAGE_SECURITY_USAGE bindingUsage;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_REQUEST_SECURITY_TOKEN_PROPERTY_CONSTRAINT
    {
        struct _out_e__Struct
        {
            Windows::Win32::WindowsWebServices::WS_REQUEST_SECURITY_TOKEN_PROPERTY requestSecurityTokenProperty;
        };
        Windows::Win32::WindowsWebServices::WS_REQUEST_SECURITY_TOKEN_PROPERTY_ID id;
        void* allowedValues;
        uint32_t allowedValuesSize;
        _out_e__Struct out;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_ISSUED_TOKEN_MESSAGE_SECURITY_BINDING_CONSTRAINT
    {
        struct _out_e__Struct
        {
            Windows::Win32::WindowsWebServices::WS_ENDPOINT_ADDRESS* issuerAddress;
            Windows::Win32::WindowsWebServices::WS_XML_BUFFER* requestSecurityTokenTemplate;
        };
        Windows::Win32::WindowsWebServices::WS_SECURITY_BINDING_CONSTRAINT bindingConstraint;
        Windows::Win32::WindowsWebServices::WS_MESSAGE_SECURITY_USAGE bindingUsage;
        Windows::Win32::WindowsWebServices::WS_XML_STRING* claimConstraints;
        uint32_t claimConstraintCount;
        Windows::Win32::WindowsWebServices::WS_REQUEST_SECURITY_TOKEN_PROPERTY_CONSTRAINT* requestSecurityTokenPropertyConstraints;
        uint32_t requestSecurityTokenPropertyConstraintCount;
        _out_e__Struct out;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_SECURITY_PROPERTY_CONSTRAINT
    {
        struct _out_e__Struct
        {
            Windows::Win32::WindowsWebServices::WS_SECURITY_PROPERTY securityProperty;
        };
        Windows::Win32::WindowsWebServices::WS_SECURITY_PROPERTY_ID id;
        void* allowedValues;
        uint32_t allowedValuesSize;
        _out_e__Struct out;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_SECURITY_CONSTRAINTS
    {
        Windows::Win32::WindowsWebServices::WS_SECURITY_PROPERTY_CONSTRAINT* securityPropertyConstraints;
        uint32_t securityPropertyConstraintCount;
        Windows::Win32::WindowsWebServices::WS_SECURITY_BINDING_CONSTRAINT** securityBindingConstraints;
        uint32_t securityBindingConstraintCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING_CONSTRAINT
    {
        Windows::Win32::WindowsWebServices::WS_SECURITY_BINDING_CONSTRAINT bindingConstraint;
        Windows::Win32::WindowsWebServices::WS_MESSAGE_SECURITY_USAGE bindingUsage;
        Windows::Win32::WindowsWebServices::WS_SECURITY_CONSTRAINTS* bootstrapSecurityConstraint;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_CHANNEL_PROPERTY_CONSTRAINT
    {
        struct _out_e__Struct
        {
            Windows::Win32::WindowsWebServices::WS_CHANNEL_PROPERTY channelProperty;
        };
        Windows::Win32::WindowsWebServices::WS_CHANNEL_PROPERTY_ID id;
        void* allowedValues;
        uint32_t allowedValuesSize;
        _out_e__Struct out;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_POLICY_EXTENSION
    {
        Windows::Win32::WindowsWebServices::WS_POLICY_EXTENSION_TYPE type;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_ENDPOINT_POLICY_EXTENSION
    {
        struct _out_e__Struct
        {
            Windows::Win32::WindowsWebServices::WS_XML_BUFFER* assertionValue;
        };
        Windows::Win32::WindowsWebServices::WS_POLICY_EXTENSION policyExtension;
        Windows::Win32::WindowsWebServices::WS_XML_STRING* assertionName;
        Windows::Win32::WindowsWebServices::WS_XML_STRING* assertionNs;
        _out_e__Struct out;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_POLICY_CONSTRAINTS
    {
        Windows::Win32::WindowsWebServices::WS_CHANNEL_BINDING channelBinding;
        Windows::Win32::WindowsWebServices::WS_CHANNEL_PROPERTY_CONSTRAINT* channelPropertyConstraints;
        uint32_t channelPropertyConstraintCount;
        Windows::Win32::WindowsWebServices::WS_SECURITY_CONSTRAINTS* securityConstraints;
        Windows::Win32::WindowsWebServices::WS_POLICY_EXTENSION** policyExtensions;
        uint32_t policyExtensionCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_HTTP_POLICY_DESCRIPTION
    {
        Windows::Win32::WindowsWebServices::WS_CHANNEL_PROPERTIES channelProperties;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_SSL_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION
    {
        Windows::Win32::WindowsWebServices::WS_SECURITY_BINDING_PROPERTIES securityBindingProperties;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_HTTP_SSL_POLICY_DESCRIPTION
    {
        Windows::Win32::WindowsWebServices::WS_CHANNEL_PROPERTIES channelProperties;
        Windows::Win32::WindowsWebServices::WS_SECURITY_PROPERTIES securityProperties;
        Windows::Win32::WindowsWebServices::WS_SSL_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION sslTransportSecurityBinding;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_HTTP_HEADER_AUTH_SECURITY_BINDING_POLICY_DESCRIPTION
    {
        Windows::Win32::WindowsWebServices::WS_SECURITY_BINDING_PROPERTIES securityBindingProperties;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_HTTP_HEADER_AUTH_POLICY_DESCRIPTION
    {
        Windows::Win32::WindowsWebServices::WS_CHANNEL_PROPERTIES channelProperties;
        Windows::Win32::WindowsWebServices::WS_SECURITY_PROPERTIES securityProperties;
        Windows::Win32::WindowsWebServices::WS_HTTP_HEADER_AUTH_SECURITY_BINDING_POLICY_DESCRIPTION httpHeaderAuthSecurityBinding;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_HTTP_SSL_HEADER_AUTH_POLICY_DESCRIPTION
    {
        Windows::Win32::WindowsWebServices::WS_CHANNEL_PROPERTIES channelProperties;
        Windows::Win32::WindowsWebServices::WS_SECURITY_PROPERTIES securityProperties;
        Windows::Win32::WindowsWebServices::WS_SSL_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION sslTransportSecurityBinding;
        Windows::Win32::WindowsWebServices::WS_HTTP_HEADER_AUTH_SECURITY_BINDING_POLICY_DESCRIPTION httpHeaderAuthSecurityBinding;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_USERNAME_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION
    {
        Windows::Win32::WindowsWebServices::WS_SECURITY_BINDING_PROPERTIES securityBindingProperties;
        Windows::Win32::WindowsWebServices::WS_MESSAGE_SECURITY_USAGE bindingUsage;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_HTTP_SSL_USERNAME_POLICY_DESCRIPTION
    {
        Windows::Win32::WindowsWebServices::WS_CHANNEL_PROPERTIES channelProperties;
        Windows::Win32::WindowsWebServices::WS_SECURITY_PROPERTIES securityProperties;
        Windows::Win32::WindowsWebServices::WS_SSL_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION sslTransportSecurityBinding;
        Windows::Win32::WindowsWebServices::WS_USERNAME_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION usernameMessageSecurityBinding;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION
    {
        Windows::Win32::WindowsWebServices::WS_SECURITY_BINDING_PROPERTIES securityBindingProperties;
        Windows::Win32::WindowsWebServices::WS_MESSAGE_SECURITY_USAGE bindingUsage;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_HTTP_SSL_KERBEROS_APREQ_POLICY_DESCRIPTION
    {
        Windows::Win32::WindowsWebServices::WS_CHANNEL_PROPERTIES channelProperties;
        Windows::Win32::WindowsWebServices::WS_SECURITY_PROPERTIES securityProperties;
        Windows::Win32::WindowsWebServices::WS_SSL_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION sslTransportSecurityBinding;
        Windows::Win32::WindowsWebServices::WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION kerberosApreqMessageSecurityBinding;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_TCP_POLICY_DESCRIPTION
    {
        Windows::Win32::WindowsWebServices::WS_CHANNEL_PROPERTIES channelProperties;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_SSPI_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION
    {
        Windows::Win32::WindowsWebServices::WS_SECURITY_BINDING_PROPERTIES securityBindingProperties;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_TCP_SSPI_POLICY_DESCRIPTION
    {
        Windows::Win32::WindowsWebServices::WS_CHANNEL_PROPERTIES channelProperties;
        Windows::Win32::WindowsWebServices::WS_SECURITY_PROPERTIES securityProperties;
        Windows::Win32::WindowsWebServices::WS_SSPI_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION sspiTransportSecurityBinding;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_TCP_SSPI_USERNAME_POLICY_DESCRIPTION
    {
        Windows::Win32::WindowsWebServices::WS_CHANNEL_PROPERTIES channelProperties;
        Windows::Win32::WindowsWebServices::WS_SECURITY_PROPERTIES securityProperties;
        Windows::Win32::WindowsWebServices::WS_SSPI_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION sspiTransportSecurityBinding;
        Windows::Win32::WindowsWebServices::WS_USERNAME_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION usernameMessageSecurityBinding;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_TCP_SSPI_KERBEROS_APREQ_POLICY_DESCRIPTION
    {
        Windows::Win32::WindowsWebServices::WS_CHANNEL_PROPERTIES channelProperties;
        Windows::Win32::WindowsWebServices::WS_SECURITY_PROPERTIES securityProperties;
        Windows::Win32::WindowsWebServices::WS_SSPI_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION sspiTransportSecurityBinding;
        Windows::Win32::WindowsWebServices::WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION kerberosApreqMessageSecurityBinding;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION
    {
        Windows::Win32::WindowsWebServices::WS_SECURITY_BINDING_PROPERTIES securityBindingProperties;
        Windows::Win32::WindowsWebServices::WS_MESSAGE_SECURITY_USAGE bindingUsage;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_SECURITY_CONTEXT_SECURITY_BINDING_POLICY_DESCRIPTION
    {
        Windows::Win32::WindowsWebServices::WS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION securityContextMessageSecurityBinding;
        Windows::Win32::WindowsWebServices::WS_SECURITY_PROPERTIES securityProperties;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_TCP_SSPI_KERBEROS_APREQ_SECURITY_CONTEXT_POLICY_DESCRIPTION
    {
        Windows::Win32::WindowsWebServices::WS_CHANNEL_PROPERTIES channelProperties;
        Windows::Win32::WindowsWebServices::WS_SECURITY_PROPERTIES securityProperties;
        Windows::Win32::WindowsWebServices::WS_SSPI_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION sspiTransportSecurityBinding;
        Windows::Win32::WindowsWebServices::WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION kerberosApreqMessageSecurityBinding;
        Windows::Win32::WindowsWebServices::WS_SECURITY_CONTEXT_SECURITY_BINDING_POLICY_DESCRIPTION securityContextSecurityBinding;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_TCP_SSPI_USERNAME_SECURITY_CONTEXT_POLICY_DESCRIPTION
    {
        Windows::Win32::WindowsWebServices::WS_CHANNEL_PROPERTIES channelProperties;
        Windows::Win32::WindowsWebServices::WS_SECURITY_PROPERTIES securityProperties;
        Windows::Win32::WindowsWebServices::WS_SSPI_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION sspiTransportSecurityBinding;
        Windows::Win32::WindowsWebServices::WS_USERNAME_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION usernameMessageSecurityBinding;
        Windows::Win32::WindowsWebServices::WS_SECURITY_CONTEXT_SECURITY_BINDING_POLICY_DESCRIPTION securityContextSecurityBinding;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_HTTP_SSL_USERNAME_SECURITY_CONTEXT_POLICY_DESCRIPTION
    {
        Windows::Win32::WindowsWebServices::WS_CHANNEL_PROPERTIES channelProperties;
        Windows::Win32::WindowsWebServices::WS_SECURITY_PROPERTIES securityProperties;
        Windows::Win32::WindowsWebServices::WS_SSL_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION sslTransportSecurityBinding;
        Windows::Win32::WindowsWebServices::WS_USERNAME_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION usernameMessageSecurityBinding;
        Windows::Win32::WindowsWebServices::WS_SECURITY_CONTEXT_SECURITY_BINDING_POLICY_DESCRIPTION securityContextSecurityBinding;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_HTTP_SSL_KERBEROS_APREQ_SECURITY_CONTEXT_POLICY_DESCRIPTION
    {
        Windows::Win32::WindowsWebServices::WS_CHANNEL_PROPERTIES channelProperties;
        Windows::Win32::WindowsWebServices::WS_SECURITY_PROPERTIES securityProperties;
        Windows::Win32::WindowsWebServices::WS_SSL_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION sslTransportSecurityBinding;
        Windows::Win32::WindowsWebServices::WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION kerberosApreqMessageSecurityBinding;
        Windows::Win32::WindowsWebServices::WS_SECURITY_CONTEXT_SECURITY_BINDING_POLICY_DESCRIPTION securityContextSecurityBinding;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_HTTP_BINDING_TEMPLATE
    {
        Windows::Win32::WindowsWebServices::WS_CHANNEL_PROPERTIES channelProperties;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_TCP_BINDING_TEMPLATE
    {
        Windows::Win32::WindowsWebServices::WS_CHANNEL_PROPERTIES channelProperties;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_SSL_TRANSPORT_SECURITY_BINDING_TEMPLATE
    {
        Windows::Win32::WindowsWebServices::WS_SECURITY_BINDING_PROPERTIES securityBindingProperties;
        Windows::Win32::WindowsWebServices::WS_CERT_CREDENTIAL* localCertCredential;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_HTTP_SSL_BINDING_TEMPLATE
    {
        Windows::Win32::WindowsWebServices::WS_CHANNEL_PROPERTIES channelProperties;
        Windows::Win32::WindowsWebServices::WS_SECURITY_PROPERTIES securityProperties;
        Windows::Win32::WindowsWebServices::WS_SSL_TRANSPORT_SECURITY_BINDING_TEMPLATE sslTransportSecurityBinding;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_HTTP_HEADER_AUTH_SECURITY_BINDING_TEMPLATE
    {
        Windows::Win32::WindowsWebServices::WS_SECURITY_BINDING_PROPERTIES securityBindingProperties;
        Windows::Win32::WindowsWebServices::WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL* clientCredential;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_HTTP_HEADER_AUTH_BINDING_TEMPLATE
    {
        Windows::Win32::WindowsWebServices::WS_CHANNEL_PROPERTIES channelProperties;
        Windows::Win32::WindowsWebServices::WS_SECURITY_PROPERTIES securityProperties;
        Windows::Win32::WindowsWebServices::WS_HTTP_HEADER_AUTH_SECURITY_BINDING_TEMPLATE httpHeaderAuthSecurityBinding;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_TCP_SSPI_TRANSPORT_SECURITY_BINDING_TEMPLATE
    {
        Windows::Win32::WindowsWebServices::WS_SECURITY_BINDING_PROPERTIES securityBindingProperties;
        Windows::Win32::WindowsWebServices::WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL* clientCredential;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_TCP_SSPI_BINDING_TEMPLATE
    {
        Windows::Win32::WindowsWebServices::WS_CHANNEL_PROPERTIES channelProperties;
        Windows::Win32::WindowsWebServices::WS_SECURITY_PROPERTIES securityProperties;
        Windows::Win32::WindowsWebServices::WS_TCP_SSPI_TRANSPORT_SECURITY_BINDING_TEMPLATE sspiTransportSecurityBinding;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_HTTP_SSL_HEADER_AUTH_BINDING_TEMPLATE
    {
        Windows::Win32::WindowsWebServices::WS_CHANNEL_PROPERTIES channelProperties;
        Windows::Win32::WindowsWebServices::WS_SECURITY_PROPERTIES securityProperties;
        Windows::Win32::WindowsWebServices::WS_SSL_TRANSPORT_SECURITY_BINDING_TEMPLATE sslTransportSecurityBinding;
        Windows::Win32::WindowsWebServices::WS_HTTP_HEADER_AUTH_SECURITY_BINDING_TEMPLATE httpHeaderAuthSecurityBinding;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_USERNAME_MESSAGE_SECURITY_BINDING_TEMPLATE
    {
        Windows::Win32::WindowsWebServices::WS_SECURITY_BINDING_PROPERTIES securityBindingProperties;
        Windows::Win32::WindowsWebServices::WS_USERNAME_CREDENTIAL* clientCredential;
        Windows::Win32::WindowsWebServices::WS_VALIDATE_PASSWORD_CALLBACK* passwordValidator;
        void* passwordValidatorCallbackState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_HTTP_SSL_USERNAME_BINDING_TEMPLATE
    {
        Windows::Win32::WindowsWebServices::WS_CHANNEL_PROPERTIES channelProperties;
        Windows::Win32::WindowsWebServices::WS_SECURITY_PROPERTIES securityProperties;
        Windows::Win32::WindowsWebServices::WS_SSL_TRANSPORT_SECURITY_BINDING_TEMPLATE sslTransportSecurityBinding;
        Windows::Win32::WindowsWebServices::WS_USERNAME_MESSAGE_SECURITY_BINDING_TEMPLATE usernameMessageSecurityBinding;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_TEMPLATE
    {
        Windows::Win32::WindowsWebServices::WS_SECURITY_BINDING_PROPERTIES securityBindingProperties;
        Windows::Win32::WindowsWebServices::WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL* clientCredential;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_HTTP_SSL_KERBEROS_APREQ_BINDING_TEMPLATE
    {
        Windows::Win32::WindowsWebServices::WS_CHANNEL_PROPERTIES channelProperties;
        Windows::Win32::WindowsWebServices::WS_SECURITY_PROPERTIES securityProperties;
        Windows::Win32::WindowsWebServices::WS_SSL_TRANSPORT_SECURITY_BINDING_TEMPLATE sslTransportSecurityBinding;
        Windows::Win32::WindowsWebServices::WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_TEMPLATE kerberosApreqMessageSecurityBinding;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_TCP_SSPI_USERNAME_BINDING_TEMPLATE
    {
        Windows::Win32::WindowsWebServices::WS_CHANNEL_PROPERTIES channelProperties;
        Windows::Win32::WindowsWebServices::WS_SECURITY_PROPERTIES securityProperties;
        Windows::Win32::WindowsWebServices::WS_TCP_SSPI_TRANSPORT_SECURITY_BINDING_TEMPLATE sspiTransportSecurityBinding;
        Windows::Win32::WindowsWebServices::WS_USERNAME_MESSAGE_SECURITY_BINDING_TEMPLATE usernameMessageSecurityBinding;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_TCP_SSPI_KERBEROS_APREQ_BINDING_TEMPLATE
    {
        Windows::Win32::WindowsWebServices::WS_CHANNEL_PROPERTIES channelProperties;
        Windows::Win32::WindowsWebServices::WS_SECURITY_PROPERTIES securityProperties;
        Windows::Win32::WindowsWebServices::WS_TCP_SSPI_TRANSPORT_SECURITY_BINDING_TEMPLATE sspiTransportSecurityBinding;
        Windows::Win32::WindowsWebServices::WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_TEMPLATE kerberosApreqMessageSecurityBinding;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING_TEMPLATE
    {
        Windows::Win32::WindowsWebServices::WS_SECURITY_BINDING_PROPERTIES securityBindingProperties;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_SECURITY_CONTEXT_SECURITY_BINDING_TEMPLATE
    {
        Windows::Win32::WindowsWebServices::WS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING_TEMPLATE securityContextMessageSecurityBinding;
        Windows::Win32::WindowsWebServices::WS_SECURITY_PROPERTIES securityProperties;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_HTTP_SSL_USERNAME_SECURITY_CONTEXT_BINDING_TEMPLATE
    {
        Windows::Win32::WindowsWebServices::WS_CHANNEL_PROPERTIES channelProperties;
        Windows::Win32::WindowsWebServices::WS_SECURITY_PROPERTIES securityProperties;
        Windows::Win32::WindowsWebServices::WS_SSL_TRANSPORT_SECURITY_BINDING_TEMPLATE sslTransportSecurityBinding;
        Windows::Win32::WindowsWebServices::WS_USERNAME_MESSAGE_SECURITY_BINDING_TEMPLATE usernameMessageSecurityBinding;
        Windows::Win32::WindowsWebServices::WS_SECURITY_CONTEXT_SECURITY_BINDING_TEMPLATE securityContextSecurityBinding;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_HTTP_SSL_KERBEROS_APREQ_SECURITY_CONTEXT_BINDING_TEMPLATE
    {
        Windows::Win32::WindowsWebServices::WS_CHANNEL_PROPERTIES channelProperties;
        Windows::Win32::WindowsWebServices::WS_SECURITY_PROPERTIES securityProperties;
        Windows::Win32::WindowsWebServices::WS_SSL_TRANSPORT_SECURITY_BINDING_TEMPLATE sslTransportSecurityBinding;
        Windows::Win32::WindowsWebServices::WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_TEMPLATE kerberosApreqMessageSecurityBinding;
        Windows::Win32::WindowsWebServices::WS_SECURITY_CONTEXT_SECURITY_BINDING_TEMPLATE securityContextSecurityBinding;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_TCP_SSPI_USERNAME_SECURITY_CONTEXT_BINDING_TEMPLATE
    {
        Windows::Win32::WindowsWebServices::WS_CHANNEL_PROPERTIES channelProperties;
        Windows::Win32::WindowsWebServices::WS_SECURITY_PROPERTIES securityProperties;
        Windows::Win32::WindowsWebServices::WS_TCP_SSPI_TRANSPORT_SECURITY_BINDING_TEMPLATE sspiTransportSecurityBinding;
        Windows::Win32::WindowsWebServices::WS_USERNAME_MESSAGE_SECURITY_BINDING_TEMPLATE usernameMessageSecurityBinding;
        Windows::Win32::WindowsWebServices::WS_SECURITY_CONTEXT_SECURITY_BINDING_TEMPLATE securityContextSecurityBinding;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WS_TCP_SSPI_KERBEROS_APREQ_SECURITY_CONTEXT_BINDING_TEMPLATE
    {
        Windows::Win32::WindowsWebServices::WS_CHANNEL_PROPERTIES channelProperties;
        Windows::Win32::WindowsWebServices::WS_SECURITY_PROPERTIES securityProperties;
        Windows::Win32::WindowsWebServices::WS_TCP_SSPI_TRANSPORT_SECURITY_BINDING_TEMPLATE sspiTransportSecurityBinding;
        Windows::Win32::WindowsWebServices::WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_TEMPLATE kerberosApreqMessageSecurityBinding;
        Windows::Win32::WindowsWebServices::WS_SECURITY_CONTEXT_SECURITY_BINDING_TEMPLATE securityContextSecurityBinding;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WEBAUTHN_RP_ENTITY_INFORMATION
    {
        uint32_t dwVersion;
        uint16_t* pwszId;
        uint16_t* pwszName;
        uint16_t* pwszIcon;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WEBAUTHN_USER_ENTITY_INFORMATION
    {
        uint32_t dwVersion;
        uint32_t cbId;
        uint8_t* pbId;
        uint16_t* pwszName;
        uint16_t* pwszIcon;
        uint16_t* pwszDisplayName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WEBAUTHN_CLIENT_DATA
    {
        uint32_t dwVersion;
        uint32_t cbClientDataJSON;
        uint8_t* pbClientDataJSON;
        uint16_t* pwszHashAlgId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WEBAUTHN_COSE_CREDENTIAL_PARAMETER
    {
        uint32_t dwVersion;
        uint16_t* pwszCredentialType;
        int32_t lAlg;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WEBAUTHN_COSE_CREDENTIAL_PARAMETERS
    {
        uint32_t cCredentialParameters;
        Windows::Win32::WindowsWebServices::WEBAUTHN_COSE_CREDENTIAL_PARAMETER* pCredentialParameters;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WEBAUTHN_CREDENTIAL
    {
        uint32_t dwVersion;
        uint32_t cbId;
        uint8_t* pbId;
        uint16_t* pwszCredentialType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WEBAUTHN_CREDENTIALS
    {
        uint32_t cCredentials;
        Windows::Win32::WindowsWebServices::WEBAUTHN_CREDENTIAL* pCredentials;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WEBAUTHN_CREDENTIAL_EX
    {
        uint32_t dwVersion;
        uint32_t cbId;
        uint8_t* pbId;
        uint16_t* pwszCredentialType;
        uint32_t dwTransports;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WEBAUTHN_CREDENTIAL_LIST
    {
        uint32_t cCredentials;
        Windows::Win32::WindowsWebServices::WEBAUTHN_CREDENTIAL_EX** ppCredentials;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WEBAUTHN_CRED_PROTECT_EXTENSION_IN
    {
        uint32_t dwCredProtect;
        Windows::Win32::SystemServices::BOOL bRequireCredProtect;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WEBAUTHN_EXTENSION
    {
        uint16_t* pwszExtensionIdentifier;
        uint32_t cbExtension;
        void* pvExtension;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WEBAUTHN_EXTENSIONS
    {
        uint32_t cExtensions;
        Windows::Win32::WindowsWebServices::WEBAUTHN_EXTENSION* pExtensions;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WEBAUTHN_AUTHENTICATOR_MAKE_CREDENTIAL_OPTIONS
    {
        uint32_t dwVersion;
        uint32_t dwTimeoutMilliseconds;
        Windows::Win32::WindowsWebServices::WEBAUTHN_CREDENTIALS CredentialList;
        Windows::Win32::WindowsWebServices::WEBAUTHN_EXTENSIONS Extensions;
        uint32_t dwAuthenticatorAttachment;
        Windows::Win32::SystemServices::BOOL bRequireResidentKey;
        uint32_t dwUserVerificationRequirement;
        uint32_t dwAttestationConveyancePreference;
        uint32_t dwFlags;
        ::win32::guid* pCancellationId;
        Windows::Win32::WindowsWebServices::WEBAUTHN_CREDENTIAL_LIST* pExcludeCredentialList;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WEBAUTHN_AUTHENTICATOR_GET_ASSERTION_OPTIONS
    {
        uint32_t dwVersion;
        uint32_t dwTimeoutMilliseconds;
        Windows::Win32::WindowsWebServices::WEBAUTHN_CREDENTIALS CredentialList;
        Windows::Win32::WindowsWebServices::WEBAUTHN_EXTENSIONS Extensions;
        uint32_t dwAuthenticatorAttachment;
        uint32_t dwUserVerificationRequirement;
        uint32_t dwFlags;
        uint16_t* pwszU2fAppId;
        int32_t* pbU2fAppId;
        ::win32::guid* pCancellationId;
        Windows::Win32::WindowsWebServices::WEBAUTHN_CREDENTIAL_LIST* pAllowCredentialList;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WEBAUTHN_X5C
    {
        uint32_t cbData;
        uint8_t* pbData;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WEBAUTHN_COMMON_ATTESTATION
    {
        uint32_t dwVersion;
        uint16_t* pwszAlg;
        int32_t lAlg;
        uint32_t cbSignature;
        uint8_t* pbSignature;
        uint32_t cX5c;
        Windows::Win32::WindowsWebServices::WEBAUTHN_X5C* pX5c;
        uint16_t* pwszVer;
        uint32_t cbCertInfo;
        uint8_t* pbCertInfo;
        uint32_t cbPubArea;
        uint8_t* pbPubArea;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WEBAUTHN_CREDENTIAL_ATTESTATION
    {
        uint32_t dwVersion;
        uint16_t* pwszFormatType;
        uint32_t cbAuthenticatorData;
        uint8_t* pbAuthenticatorData;
        uint32_t cbAttestation;
        uint8_t* pbAttestation;
        uint32_t dwAttestationDecodeType;
        void* pvAttestationDecode;
        uint32_t cbAttestationObject;
        uint8_t* pbAttestationObject;
        uint32_t cbCredentialId;
        uint8_t* pbCredentialId;
        Windows::Win32::WindowsWebServices::WEBAUTHN_EXTENSIONS Extensions;
        uint32_t dwUsedTransport;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsWebServices
{
    struct WEBAUTHN_ASSERTION
    {
        uint32_t dwVersion;
        uint32_t cbAuthenticatorData;
        uint8_t* pbAuthenticatorData;
        uint32_t cbSignature;
        uint8_t* pbSignature;
        Windows::Win32::WindowsWebServices::WEBAUTHN_CREDENTIAL Credential;
        uint32_t cbUserId;
        uint8_t* pbUserId;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::DirectComposition
{
    struct DCOMPOSITION_FRAME_STATISTICS
    {
        Windows::Win32::SystemServices::LARGE_INTEGER lastFrameTime;
        Windows::Win32::Dxgi::DXGI_RATIONAL currentCompositionRate;
        Windows::Win32::SystemServices::LARGE_INTEGER currentTime;
        Windows::Win32::SystemServices::LARGE_INTEGER timeFrequency;
        Windows::Win32::SystemServices::LARGE_INTEGER nextEstimatedFrameTime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SoftwareDevice
{
    struct SW_DEVICE_CREATE_INFO
    {
        uint32_t cbSize;
        uint16_t* pszInstanceId;
        uint16_t* pszzHardwareIds;
        uint16_t* pszzCompatibleIds;
        ::win32::guid* pContainerId;
        uint32_t CapabilityFlags;
        uint16_t* pszDeviceDescription;
        uint16_t* pszDeviceLocation;
        Windows::Win32::Security::SECURITY_DESCRIPTOR* pSecurityDescriptor;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::SoftwareDevice
{
    struct HSWDEVICE__
    {
        int32_t unused;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::XamlDiagnostics
{
    struct SourceInfo
    {
        Windows::Win32::Automation::BSTR FileName;
        uint32_t LineNumber;
        uint32_t ColumnNumber;
        uint32_t CharPosition;
        Windows::Win32::Automation::BSTR Hash;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::XamlDiagnostics
{
    struct ParentChildRelation
    {
        uint64_t Parent;
        uint64_t Child;
        uint32_t ChildIndex;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::XamlDiagnostics
{
    struct VisualElement
    {
        uint64_t Handle;
        Windows::Win32::XamlDiagnostics::SourceInfo SrcInfo;
        Windows::Win32::Automation::BSTR Type;
        Windows::Win32::Automation::BSTR Name;
        uint32_t NumChildren;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::XamlDiagnostics
{
    struct PropertyChainSource
    {
        uint64_t Handle;
        Windows::Win32::Automation::BSTR TargetType;
        Windows::Win32::Automation::BSTR Name;
        Windows::Win32::XamlDiagnostics::BaseValueSource Source;
        Windows::Win32::XamlDiagnostics::SourceInfo SrcInfo;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::XamlDiagnostics
{
    struct PropertyChainValue
    {
        uint32_t Index;
        Windows::Win32::Automation::BSTR Type;
        Windows::Win32::Automation::BSTR DeclaringType;
        Windows::Win32::Automation::BSTR ValueType;
        Windows::Win32::Automation::BSTR ItemType;
        Windows::Win32::Automation::BSTR Value;
        Windows::Win32::SystemServices::BOOL Overridden;
        int64_t MetadataBits;
        Windows::Win32::Automation::BSTR PropertyName;
        uint32_t PropertyChainIndex;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::XamlDiagnostics
{
    struct EnumType
    {
        Windows::Win32::Automation::BSTR Name;
        Windows::Win32::Automation::SAFEARRAY* ValueInts;
        Windows::Win32::Automation::SAFEARRAY* ValueStrings;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::XamlDiagnostics
{
    struct CollectionElementValue
    {
        uint32_t Index;
        Windows::Win32::Automation::BSTR ValueType;
        Windows::Win32::Automation::BSTR Value;
        int64_t MetadataBits;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::XamlDiagnostics
{
    struct BitmapDescription
    {
        uint32_t Width;
        uint32_t Height;
        Windows::Win32::Dxgi::DXGI_FORMAT Format;
        Windows::Win32::Dxgi::DXGI_ALPHA_MODE AlphaMode;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsMediaPlayer
{
    struct TimedLevel
    {
        uint8_t frequency[2048];
        uint8_t waveform[2048];
        int32_t state;
        int64_t timeStamp;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsMediaPlayer
{
    struct WMPContextMenuInfo
    {
        uint32_t dwID;
        Windows::Win32::Automation::BSTR bstrMenuText;
        Windows::Win32::Automation::BSTR bstrHelpText;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsMediaPlayer
{
    struct WMP_WMDM_METADATA_ROUND_TRIP_PC2DEVICE
    {
        uint32_t dwChangesSinceTransactionID;
        uint32_t dwResultSetStartingIndex;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsMediaPlayer
{
    struct WMP_WMDM_METADATA_ROUND_TRIP_DEVICE2PC
    {
        uint32_t dwCurrentTransactionID;
        uint32_t dwReturnedObjectCount;
        uint32_t dwUnretrievedObjectCount;
        uint32_t dwDeletedObjectStartingOffset;
        uint32_t dwFlags;
        uint16_t wsObjectPathnameList[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsNetworking
{
    struct CONNECTDLGSTRUCTA
    {
        uint32_t cbStructure;
        Windows::Win32::WindowsAndMessaging::HWND hwndOwner;
        Windows::Win32::Security::NETRESOURCEA* lpConnRes;
        uint32_t dwFlags;
        uint32_t dwDevNum;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsNetworking
{
    struct CONNECTDLGSTRUCTW
    {
        uint32_t cbStructure;
        Windows::Win32::WindowsAndMessaging::HWND hwndOwner;
        Windows::Win32::Security::NETRESOURCEW* lpConnRes;
        uint32_t dwFlags;
        uint32_t dwDevNum;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsNetworking
{
    struct DISCDLGSTRUCTA
    {
        uint32_t cbStructure;
        Windows::Win32::WindowsAndMessaging::HWND hwndOwner;
        int8_t* lpLocalName;
        int8_t* lpRemoteName;
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsNetworking
{
    struct DISCDLGSTRUCTW
    {
        uint32_t cbStructure;
        Windows::Win32::WindowsAndMessaging::HWND hwndOwner;
        uint16_t* lpLocalName;
        uint16_t* lpRemoteName;
        uint32_t dwFlags;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsNetworking
{
    struct NETINFOSTRUCT
    {
        uint32_t cbStructure;
        uint32_t dwProviderVersion;
        uint32_t dwStatus;
        uint32_t dwCharacteristics;
        size_t dwHandle;
        uint16_t wNetType;
        uint32_t dwPrinters;
        uint32_t dwDrives;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct NETRESOURCEW
    {
        uint32_t dwScope;
        uint32_t dwType;
        uint32_t dwDisplayType;
        uint32_t dwUsage;
        uint16_t* lpLocalName;
        uint16_t* lpRemoteName;
        uint16_t* lpComment;
        uint16_t* lpProvider;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct UNIVERSAL_NAME_INFOA
    {
        int8_t* lpUniversalName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct UNIVERSAL_NAME_INFOW
    {
        uint16_t* lpUniversalName;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct REMOTE_NAME_INFOA
    {
        int8_t* lpUniversalName;
        int8_t* lpConnectionName;
        int8_t* lpRemainingPath;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct REMOTE_NAME_INFOW
    {
        uint16_t* lpUniversalName;
        uint16_t* lpConnectionName;
        uint16_t* lpRemainingPath;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct NETCONNECTINFOSTRUCT
    {
        uint32_t cbStructure;
        uint32_t dwFlags;
        uint32_t dwSpeed;
        uint32_t dwDelay;
        uint32_t dwOptDataSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsNetworkVirtualization
{
    struct WNV_OBJECT_HEADER
    {
        uint8_t MajorVersion;
        uint8_t MinorVersion;
        uint32_t Size;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsNetworkVirtualization
{
    struct WNV_NOTIFICATION_PARAM
    {
        Windows::Win32::WindowsNetworkVirtualization::WNV_OBJECT_HEADER Header;
        Windows::Win32::WindowsNetworkVirtualization::WNV_NOTIFICATION_TYPE NotificationType;
        uint32_t PendingNotifications;
        uint8_t* Buffer;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsNetworkVirtualization
{
    struct WNV_IP_ADDRESS
    {
        union _IP_e__Union
        {
            Windows::Win32::WinSock::in_addr v4;
            Windows::Win32::WinSock::in6_addr v6;
            uint8_t Addr[16];
        };
        _IP_e__Union IP;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsNetworkVirtualization
{
    struct WNV_POLICY_MISMATCH_PARAM
    {
        uint16_t CAFamily;
        uint16_t PAFamily;
        uint32_t VirtualSubnetId;
        Windows::Win32::WindowsNetworkVirtualization::WNV_IP_ADDRESS CA;
        Windows::Win32::WindowsNetworkVirtualization::WNV_IP_ADDRESS PA;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsNetworkVirtualization
{
    struct WNV_PROVIDER_ADDRESS_CHANGE_PARAM
    {
        uint16_t PAFamily;
        Windows::Win32::WindowsNetworkVirtualization::WNV_IP_ADDRESS PA;
        Windows::Win32::IpHelper::NL_DAD_STATE AddressState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsNetworkVirtualization
{
    struct WNV_CUSTOMER_ADDRESS_CHANGE_PARAM
    {
        Windows::Win32::WindowsFiltering::DL_EUI48 MACAddress;
        uint16_t CAFamily;
        Windows::Win32::WindowsNetworkVirtualization::WNV_IP_ADDRESS CA;
        uint32_t VirtualSubnetId;
        uint16_t PAFamily;
        Windows::Win32::WindowsNetworkVirtualization::WNV_IP_ADDRESS PA;
        Windows::Win32::WindowsNetworkVirtualization::WNV_CA_NOTIFICATION_TYPE NotificationReason;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsNetworkVirtualization
{
    struct WNV_OBJECT_CHANGE_PARAM
    {
        union _ObjectParam_e__Union
        {
            Windows::Win32::WindowsNetworkVirtualization::WNV_PROVIDER_ADDRESS_CHANGE_PARAM ProviderAddressChange;
            Windows::Win32::WindowsNetworkVirtualization::WNV_CUSTOMER_ADDRESS_CHANGE_PARAM CustomerAddressChange;
        };
        Windows::Win32::WindowsNetworkVirtualization::WNV_OBJECT_TYPE ObjectType;
        _ObjectParam_e__Union ObjectParam;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsNetworkVirtualization
{
    struct WNV_REDIRECT_PARAM
    {
        uint16_t CAFamily;
        uint16_t PAFamily;
        uint16_t NewPAFamily;
        uint32_t VirtualSubnetId;
        Windows::Win32::WindowsNetworkVirtualization::WNV_IP_ADDRESS CA;
        Windows::Win32::WindowsNetworkVirtualization::WNV_IP_ADDRESS PA;
        Windows::Win32::WindowsNetworkVirtualization::WNV_IP_ADDRESS NewPA;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsPortableDevices
{
    struct WPD_COMMAND_ACCESS_LOOKUP_ENTRY
    {
        Windows::Win32::WindowsPropertiesSystem::PROPERTYKEY Command;
        uint32_t AccessType;
        Windows::Win32::WindowsPropertiesSystem::PROPERTYKEY AccessProperty;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsServerBackup
{
    struct WSB_OB_STATUS_ENTRY_VALUE_TYPE_PAIR
    {
        uint16_t* m_wszObStatusEntryPairValue;
        Windows::Win32::WindowsServerBackup::WSB_OB_STATUS_ENTRY_PAIR_TYPE m_ObStatusEntryPairType;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsServerBackup
{
    struct WSB_OB_STATUS_ENTRY
    {
        uint32_t m_dwIcon;
        uint32_t m_dwStatusEntryName;
        uint32_t m_dwStatusEntryValue;
        uint32_t m_cValueTypePair;
        Windows::Win32::WindowsServerBackup::WSB_OB_STATUS_ENTRY_VALUE_TYPE_PAIR* m_rgValueTypePair;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsServerBackup
{
    struct WSB_OB_STATUS_INFO
    {
        ::win32::guid m_guidSnapinId;
        uint32_t m_cStatusEntry;
        Windows::Win32::WindowsServerBackup::WSB_OB_STATUS_ENTRY* m_rgStatusEntry;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::WindowsServerBackup
{
    struct WSB_OB_REGISTRATION_INFO
    {
        uint16_t* m_wszResourceDLL;
        ::win32::guid m_guidSnapinId;
        uint32_t m_dwProviderName;
        uint32_t m_dwProviderIcon;
        uint8_t m_bSupportsRemoting;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct LINEADDRESSCAPS
    {
        uint32_t dwTotalSize;
        uint32_t dwNeededSize;
        uint32_t dwUsedSize;
        uint32_t dwLineDeviceID;
        uint32_t dwAddressSize;
        uint32_t dwAddressOffset;
        uint32_t dwDevSpecificSize;
        uint32_t dwDevSpecificOffset;
        uint32_t dwAddressSharing;
        uint32_t dwAddressStates;
        uint32_t dwCallInfoStates;
        uint32_t dwCallerIDFlags;
        uint32_t dwCalledIDFlags;
        uint32_t dwConnectedIDFlags;
        uint32_t dwRedirectionIDFlags;
        uint32_t dwRedirectingIDFlags;
        uint32_t dwCallStates;
        uint32_t dwDialToneModes;
        uint32_t dwBusyModes;
        uint32_t dwSpecialInfo;
        uint32_t dwDisconnectModes;
        uint32_t dwMaxNumActiveCalls;
        uint32_t dwMaxNumOnHoldCalls;
        uint32_t dwMaxNumOnHoldPendingCalls;
        uint32_t dwMaxNumConference;
        uint32_t dwMaxNumTransConf;
        uint32_t dwAddrCapFlags;
        uint32_t dwCallFeatures;
        uint32_t dwRemoveFromConfCaps;
        uint32_t dwRemoveFromConfState;
        uint32_t dwTransferModes;
        uint32_t dwParkModes;
        uint32_t dwForwardModes;
        uint32_t dwMaxForwardEntries;
        uint32_t dwMaxSpecificEntries;
        uint32_t dwMinFwdNumRings;
        uint32_t dwMaxFwdNumRings;
        uint32_t dwMaxCallCompletions;
        uint32_t dwCallCompletionConds;
        uint32_t dwCallCompletionModes;
        uint32_t dwNumCompletionMessages;
        uint32_t dwCompletionMsgTextEntrySize;
        uint32_t dwCompletionMsgTextSize;
        uint32_t dwCompletionMsgTextOffset;
        uint32_t dwAddressFeatures;
        uint32_t dwPredictiveAutoTransferStates;
        uint32_t dwNumCallTreatments;
        uint32_t dwCallTreatmentListSize;
        uint32_t dwCallTreatmentListOffset;
        uint32_t dwDeviceClassesSize;
        uint32_t dwDeviceClassesOffset;
        uint32_t dwMaxCallDataSize;
        uint32_t dwCallFeatures2;
        uint32_t dwMaxNoAnswerTimeout;
        uint32_t dwConnectedModes;
        uint32_t dwOfferingModes;
        uint32_t dwAvailableMediaModes;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct LINEADDRESSSTATUS
    {
        uint32_t dwTotalSize;
        uint32_t dwNeededSize;
        uint32_t dwUsedSize;
        uint32_t dwNumInUse;
        uint32_t dwNumActiveCalls;
        uint32_t dwNumOnHoldCalls;
        uint32_t dwNumOnHoldPendCalls;
        uint32_t dwAddressFeatures;
        uint32_t dwNumRingsNoAnswer;
        uint32_t dwForwardNumEntries;
        uint32_t dwForwardSize;
        uint32_t dwForwardOffset;
        uint32_t dwTerminalModesSize;
        uint32_t dwTerminalModesOffset;
        uint32_t dwDevSpecificSize;
        uint32_t dwDevSpecificOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct LINEAGENTACTIVITYENTRY
    {
        uint32_t dwID;
        uint32_t dwNameSize;
        uint32_t dwNameOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct LINEAGENTACTIVITYLIST
    {
        uint32_t dwTotalSize;
        uint32_t dwNeededSize;
        uint32_t dwUsedSize;
        uint32_t dwNumEntries;
        uint32_t dwListSize;
        uint32_t dwListOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct LINEAGENTCAPS
    {
        uint32_t dwTotalSize;
        uint32_t dwNeededSize;
        uint32_t dwUsedSize;
        uint32_t dwAgentHandlerInfoSize;
        uint32_t dwAgentHandlerInfoOffset;
        uint32_t dwCapsVersion;
        uint32_t dwFeatures;
        uint32_t dwStates;
        uint32_t dwNextStates;
        uint32_t dwMaxNumGroupEntries;
        uint32_t dwAgentStatusMessages;
        uint32_t dwNumAgentExtensionIDs;
        uint32_t dwAgentExtensionIDListSize;
        uint32_t dwAgentExtensionIDListOffset;
        ::win32::guid ProxyGUID;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct LINEAGENTGROUPENTRY
    {
        struct _GroupID_e__Struct
        {
            uint32_t dwGroupID1;
            uint32_t dwGroupID2;
            uint32_t dwGroupID3;
            uint32_t dwGroupID4;
        };
        _GroupID_e__Struct GroupID;
        uint32_t dwNameSize;
        uint32_t dwNameOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct LINEAGENTGROUPLIST
    {
        uint32_t dwTotalSize;
        uint32_t dwNeededSize;
        uint32_t dwUsedSize;
        uint32_t dwNumEntries;
        uint32_t dwListSize;
        uint32_t dwListOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct LINEAGENTSTATUS
    {
        uint32_t dwTotalSize;
        uint32_t dwNeededSize;
        uint32_t dwUsedSize;
        uint32_t dwNumEntries;
        uint32_t dwGroupListSize;
        uint32_t dwGroupListOffset;
        uint32_t dwState;
        uint32_t dwNextState;
        uint32_t dwActivityID;
        uint32_t dwActivitySize;
        uint32_t dwActivityOffset;
        uint32_t dwAgentFeatures;
        uint32_t dwValidStates;
        uint32_t dwValidNextStates;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct LINEAPPINFO
    {
        uint32_t dwMachineNameSize;
        uint32_t dwMachineNameOffset;
        uint32_t dwUserNameSize;
        uint32_t dwUserNameOffset;
        uint32_t dwModuleFilenameSize;
        uint32_t dwModuleFilenameOffset;
        uint32_t dwFriendlyNameSize;
        uint32_t dwFriendlyNameOffset;
        uint32_t dwMediaModes;
        uint32_t dwAddressID;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct LINEAGENTENTRY
    {
        uint32_t hAgent;
        uint32_t dwNameSize;
        uint32_t dwNameOffset;
        uint32_t dwIDSize;
        uint32_t dwIDOffset;
        uint32_t dwPINSize;
        uint32_t dwPINOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct LINEAGENTLIST
    {
        uint32_t dwTotalSize;
        uint32_t dwNeededSize;
        uint32_t dwUsedSize;
        uint32_t dwNumEntries;
        uint32_t dwListSize;
        uint32_t dwListOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct LINEAGENTINFO
    {
        uint32_t dwTotalSize;
        uint32_t dwNeededSize;
        uint32_t dwUsedSize;
        uint32_t dwAgentState;
        uint32_t dwNextAgentState;
        uint32_t dwMeasurementPeriod;
        Windows::Win32::SystemServices::CY cyOverallCallRate;
        uint32_t dwNumberOfACDCalls;
        uint32_t dwNumberOfIncomingCalls;
        uint32_t dwNumberOfOutgoingCalls;
        uint32_t dwTotalACDTalkTime;
        uint32_t dwTotalACDCallTime;
        uint32_t dwTotalACDWrapUpTime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct LINEAGENTSESSIONENTRY
    {
        uint32_t hAgentSession;
        uint32_t hAgent;
        ::win32::guid GroupID;
        uint32_t dwWorkingAddressID;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct LINEAGENTSESSIONLIST
    {
        uint32_t dwTotalSize;
        uint32_t dwNeededSize;
        uint32_t dwUsedSize;
        uint32_t dwNumEntries;
        uint32_t dwListSize;
        uint32_t dwListOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct LINEAGENTSESSIONINFO
    {
        uint32_t dwTotalSize;
        uint32_t dwNeededSize;
        uint32_t dwUsedSize;
        uint32_t dwAgentSessionState;
        uint32_t dwNextAgentSessionState;
        double dateSessionStartTime;
        uint32_t dwSessionDuration;
        uint32_t dwNumberOfCalls;
        uint32_t dwTotalTalkTime;
        uint32_t dwAverageTalkTime;
        uint32_t dwTotalCallTime;
        uint32_t dwAverageCallTime;
        uint32_t dwTotalWrapUpTime;
        uint32_t dwAverageWrapUpTime;
        Windows::Win32::SystemServices::CY cyACDCallRate;
        uint32_t dwLongestTimeToAnswer;
        uint32_t dwAverageTimeToAnswer;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct LINEQUEUEENTRY
    {
        uint32_t dwQueueID;
        uint32_t dwNameSize;
        uint32_t dwNameOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct LINEQUEUELIST
    {
        uint32_t dwTotalSize;
        uint32_t dwNeededSize;
        uint32_t dwUsedSize;
        uint32_t dwNumEntries;
        uint32_t dwListSize;
        uint32_t dwListOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct LINEQUEUEINFO
    {
        uint32_t dwTotalSize;
        uint32_t dwNeededSize;
        uint32_t dwUsedSize;
        uint32_t dwMeasurementPeriod;
        uint32_t dwTotalCallsQueued;
        uint32_t dwCurrentCallsQueued;
        uint32_t dwTotalCallsAbandoned;
        uint32_t dwTotalCallsFlowedIn;
        uint32_t dwTotalCallsFlowedOut;
        uint32_t dwLongestEverWaitTime;
        uint32_t dwCurrentLongestWaitTime;
        uint32_t dwAverageWaitTime;
        uint32_t dwFinalDisposition;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct LINEPROXYREQUESTLIST
    {
        uint32_t dwTotalSize;
        uint32_t dwNeededSize;
        uint32_t dwUsedSize;
        uint32_t dwNumEntries;
        uint32_t dwListSize;
        uint32_t dwListOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct LINEDIALPARAMS
    {
        uint32_t dwDialPause;
        uint32_t dwDialSpeed;
        uint32_t dwDigitDuration;
        uint32_t dwWaitForDialtone;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct LINECALLINFO
    {
        uint32_t dwTotalSize;
        uint32_t dwNeededSize;
        uint32_t dwUsedSize;
        uint32_t hLine;
        uint32_t dwLineDeviceID;
        uint32_t dwAddressID;
        uint32_t dwBearerMode;
        uint32_t dwRate;
        uint32_t dwMediaMode;
        uint32_t dwAppSpecific;
        uint32_t dwCallID;
        uint32_t dwRelatedCallID;
        uint32_t dwCallParamFlags;
        uint32_t dwCallStates;
        uint32_t dwMonitorDigitModes;
        uint32_t dwMonitorMediaModes;
        Windows::Win32::Tapi::LINEDIALPARAMS DialParams;
        uint32_t dwOrigin;
        uint32_t dwReason;
        uint32_t dwCompletionID;
        uint32_t dwNumOwners;
        uint32_t dwNumMonitors;
        uint32_t dwCountryCode;
        uint32_t dwTrunk;
        uint32_t dwCallerIDFlags;
        uint32_t dwCallerIDSize;
        uint32_t dwCallerIDOffset;
        uint32_t dwCallerIDNameSize;
        uint32_t dwCallerIDNameOffset;
        uint32_t dwCalledIDFlags;
        uint32_t dwCalledIDSize;
        uint32_t dwCalledIDOffset;
        uint32_t dwCalledIDNameSize;
        uint32_t dwCalledIDNameOffset;
        uint32_t dwConnectedIDFlags;
        uint32_t dwConnectedIDSize;
        uint32_t dwConnectedIDOffset;
        uint32_t dwConnectedIDNameSize;
        uint32_t dwConnectedIDNameOffset;
        uint32_t dwRedirectionIDFlags;
        uint32_t dwRedirectionIDSize;
        uint32_t dwRedirectionIDOffset;
        uint32_t dwRedirectionIDNameSize;
        uint32_t dwRedirectionIDNameOffset;
        uint32_t dwRedirectingIDFlags;
        uint32_t dwRedirectingIDSize;
        uint32_t dwRedirectingIDOffset;
        uint32_t dwRedirectingIDNameSize;
        uint32_t dwRedirectingIDNameOffset;
        uint32_t dwAppNameSize;
        uint32_t dwAppNameOffset;
        uint32_t dwDisplayableAddressSize;
        uint32_t dwDisplayableAddressOffset;
        uint32_t dwCalledPartySize;
        uint32_t dwCalledPartyOffset;
        uint32_t dwCommentSize;
        uint32_t dwCommentOffset;
        uint32_t dwDisplaySize;
        uint32_t dwDisplayOffset;
        uint32_t dwUserUserInfoSize;
        uint32_t dwUserUserInfoOffset;
        uint32_t dwHighLevelCompSize;
        uint32_t dwHighLevelCompOffset;
        uint32_t dwLowLevelCompSize;
        uint32_t dwLowLevelCompOffset;
        uint32_t dwChargingInfoSize;
        uint32_t dwChargingInfoOffset;
        uint32_t dwTerminalModesSize;
        uint32_t dwTerminalModesOffset;
        uint32_t dwDevSpecificSize;
        uint32_t dwDevSpecificOffset;
        uint32_t dwCallTreatment;
        uint32_t dwCallDataSize;
        uint32_t dwCallDataOffset;
        uint32_t dwSendingFlowspecSize;
        uint32_t dwSendingFlowspecOffset;
        uint32_t dwReceivingFlowspecSize;
        uint32_t dwReceivingFlowspecOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct LINECALLLIST
    {
        uint32_t dwTotalSize;
        uint32_t dwNeededSize;
        uint32_t dwUsedSize;
        uint32_t dwCallsNumEntries;
        uint32_t dwCallsSize;
        uint32_t dwCallsOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct LINECALLPARAMS
    {
        uint32_t dwTotalSize;
        uint32_t dwBearerMode;
        uint32_t dwMinRate;
        uint32_t dwMaxRate;
        uint32_t dwMediaMode;
        uint32_t dwCallParamFlags;
        uint32_t dwAddressMode;
        uint32_t dwAddressID;
        Windows::Win32::Tapi::LINEDIALPARAMS DialParams;
        uint32_t dwOrigAddressSize;
        uint32_t dwOrigAddressOffset;
        uint32_t dwDisplayableAddressSize;
        uint32_t dwDisplayableAddressOffset;
        uint32_t dwCalledPartySize;
        uint32_t dwCalledPartyOffset;
        uint32_t dwCommentSize;
        uint32_t dwCommentOffset;
        uint32_t dwUserUserInfoSize;
        uint32_t dwUserUserInfoOffset;
        uint32_t dwHighLevelCompSize;
        uint32_t dwHighLevelCompOffset;
        uint32_t dwLowLevelCompSize;
        uint32_t dwLowLevelCompOffset;
        uint32_t dwDevSpecificSize;
        uint32_t dwDevSpecificOffset;
        uint32_t dwPredictiveAutoTransferStates;
        uint32_t dwTargetAddressSize;
        uint32_t dwTargetAddressOffset;
        uint32_t dwSendingFlowspecSize;
        uint32_t dwSendingFlowspecOffset;
        uint32_t dwReceivingFlowspecSize;
        uint32_t dwReceivingFlowspecOffset;
        uint32_t dwDeviceClassSize;
        uint32_t dwDeviceClassOffset;
        uint32_t dwDeviceConfigSize;
        uint32_t dwDeviceConfigOffset;
        uint32_t dwCallDataSize;
        uint32_t dwCallDataOffset;
        uint32_t dwNoAnswerTimeout;
        uint32_t dwCallingPartyIDSize;
        uint32_t dwCallingPartyIDOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct LINECALLSTATUS
    {
        uint32_t dwTotalSize;
        uint32_t dwNeededSize;
        uint32_t dwUsedSize;
        uint32_t dwCallState;
        uint32_t dwCallStateMode;
        uint32_t dwCallPrivilege;
        uint32_t dwCallFeatures;
        uint32_t dwDevSpecificSize;
        uint32_t dwDevSpecificOffset;
        uint32_t dwCallFeatures2;
        Windows::Win32::WindowsProgramming::SYSTEMTIME tStateEntryTime;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct LINECALLTREATMENTENTRY
    {
        uint32_t dwCallTreatmentID;
        uint32_t dwCallTreatmentNameSize;
        uint32_t dwCallTreatmentNameOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct LINECARDENTRY
    {
        uint32_t dwPermanentCardID;
        uint32_t dwCardNameSize;
        uint32_t dwCardNameOffset;
        uint32_t dwCardNumberDigits;
        uint32_t dwSameAreaRuleSize;
        uint32_t dwSameAreaRuleOffset;
        uint32_t dwLongDistanceRuleSize;
        uint32_t dwLongDistanceRuleOffset;
        uint32_t dwInternationalRuleSize;
        uint32_t dwInternationalRuleOffset;
        uint32_t dwOptions;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct LINECOUNTRYENTRY
    {
        uint32_t dwCountryID;
        uint32_t dwCountryCode;
        uint32_t dwNextCountryID;
        uint32_t dwCountryNameSize;
        uint32_t dwCountryNameOffset;
        uint32_t dwSameAreaRuleSize;
        uint32_t dwSameAreaRuleOffset;
        uint32_t dwLongDistanceRuleSize;
        uint32_t dwLongDistanceRuleOffset;
        uint32_t dwInternationalRuleSize;
        uint32_t dwInternationalRuleOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct LINECOUNTRYLIST
    {
        uint32_t dwTotalSize;
        uint32_t dwNeededSize;
        uint32_t dwUsedSize;
        uint32_t dwNumCountries;
        uint32_t dwCountryListSize;
        uint32_t dwCountryListOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct LINEDEVCAPS
    {
        uint32_t dwTotalSize;
        uint32_t dwNeededSize;
        uint32_t dwUsedSize;
        uint32_t dwProviderInfoSize;
        uint32_t dwProviderInfoOffset;
        uint32_t dwSwitchInfoSize;
        uint32_t dwSwitchInfoOffset;
        uint32_t dwPermanentLineID;
        uint32_t dwLineNameSize;
        uint32_t dwLineNameOffset;
        uint32_t dwStringFormat;
        uint32_t dwAddressModes;
        uint32_t dwNumAddresses;
        uint32_t dwBearerModes;
        uint32_t dwMaxRate;
        uint32_t dwMediaModes;
        uint32_t dwGenerateToneModes;
        uint32_t dwGenerateToneMaxNumFreq;
        uint32_t dwGenerateDigitModes;
        uint32_t dwMonitorToneMaxNumFreq;
        uint32_t dwMonitorToneMaxNumEntries;
        uint32_t dwMonitorDigitModes;
        uint32_t dwGatherDigitsMinTimeout;
        uint32_t dwGatherDigitsMaxTimeout;
        uint32_t dwMedCtlDigitMaxListSize;
        uint32_t dwMedCtlMediaMaxListSize;
        uint32_t dwMedCtlToneMaxListSize;
        uint32_t dwMedCtlCallStateMaxListSize;
        uint32_t dwDevCapFlags;
        uint32_t dwMaxNumActiveCalls;
        uint32_t dwAnswerMode;
        uint32_t dwRingModes;
        uint32_t dwLineStates;
        uint32_t dwUUIAcceptSize;
        uint32_t dwUUIAnswerSize;
        uint32_t dwUUIMakeCallSize;
        uint32_t dwUUIDropSize;
        uint32_t dwUUISendUserUserInfoSize;
        uint32_t dwUUICallInfoSize;
        Windows::Win32::Tapi::LINEDIALPARAMS MinDialParams;
        Windows::Win32::Tapi::LINEDIALPARAMS MaxDialParams;
        Windows::Win32::Tapi::LINEDIALPARAMS DefaultDialParams;
        uint32_t dwNumTerminals;
        uint32_t dwTerminalCapsSize;
        uint32_t dwTerminalCapsOffset;
        uint32_t dwTerminalTextEntrySize;
        uint32_t dwTerminalTextSize;
        uint32_t dwTerminalTextOffset;
        uint32_t dwDevSpecificSize;
        uint32_t dwDevSpecificOffset;
        uint32_t dwLineFeatures;
        uint32_t dwSettableDevStatus;
        uint32_t dwDeviceClassesSize;
        uint32_t dwDeviceClassesOffset;
        ::win32::guid PermanentLineGuid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct LINEDEVSTATUS
    {
        uint32_t dwTotalSize;
        uint32_t dwNeededSize;
        uint32_t dwUsedSize;
        uint32_t dwNumOpens;
        uint32_t dwOpenMediaModes;
        uint32_t dwNumActiveCalls;
        uint32_t dwNumOnHoldCalls;
        uint32_t dwNumOnHoldPendCalls;
        uint32_t dwLineFeatures;
        uint32_t dwNumCallCompletions;
        uint32_t dwRingMode;
        uint32_t dwSignalLevel;
        uint32_t dwBatteryLevel;
        uint32_t dwRoamMode;
        uint32_t dwDevStatusFlags;
        uint32_t dwTerminalModesSize;
        uint32_t dwTerminalModesOffset;
        uint32_t dwDevSpecificSize;
        uint32_t dwDevSpecificOffset;
        uint32_t dwAvailableMediaModes;
        uint32_t dwAppInfoSize;
        uint32_t dwAppInfoOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct LINEEXTENSIONID
    {
        uint32_t dwExtensionID0;
        uint32_t dwExtensionID1;
        uint32_t dwExtensionID2;
        uint32_t dwExtensionID3;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct LINEFORWARD
    {
        uint32_t dwForwardMode;
        uint32_t dwCallerAddressSize;
        uint32_t dwCallerAddressOffset;
        uint32_t dwDestCountryCode;
        uint32_t dwDestAddressSize;
        uint32_t dwDestAddressOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct LINEFORWARDLIST
    {
        uint32_t dwTotalSize;
        uint32_t dwNumEntries;
        Windows::Win32::Tapi::LINEFORWARD ForwardList[1];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct LINEGENERATETONE
    {
        uint32_t dwFrequency;
        uint32_t dwCadenceOn;
        uint32_t dwCadenceOff;
        uint32_t dwVolume;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct LINEINITIALIZEEXPARAMS
    {
        union _Handles_e__Union
        {
            Windows::Win32::SystemServices::HANDLE hEvent;
            Windows::Win32::SystemServices::HANDLE hCompletionPort;
        };
        uint32_t dwTotalSize;
        uint32_t dwNeededSize;
        uint32_t dwUsedSize;
        uint32_t dwOptions;
        _Handles_e__Union Handles;
        uint32_t dwCompletionKey;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct LINELOCATIONENTRY
    {
        uint32_t dwPermanentLocationID;
        uint32_t dwLocationNameSize;
        uint32_t dwLocationNameOffset;
        uint32_t dwCountryCode;
        uint32_t dwCityCodeSize;
        uint32_t dwCityCodeOffset;
        uint32_t dwPreferredCardID;
        uint32_t dwLocalAccessCodeSize;
        uint32_t dwLocalAccessCodeOffset;
        uint32_t dwLongDistanceAccessCodeSize;
        uint32_t dwLongDistanceAccessCodeOffset;
        uint32_t dwTollPrefixListSize;
        uint32_t dwTollPrefixListOffset;
        uint32_t dwCountryID;
        uint32_t dwOptions;
        uint32_t dwCancelCallWaitingSize;
        uint32_t dwCancelCallWaitingOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct LINEMEDIACONTROLCALLSTATE
    {
        uint32_t dwCallStates;
        uint32_t dwMediaControl;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct LINEMEDIACONTROLDIGIT
    {
        uint32_t dwDigit;
        uint32_t dwDigitModes;
        uint32_t dwMediaControl;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct LINEMEDIACONTROLMEDIA
    {
        uint32_t dwMediaModes;
        uint32_t dwDuration;
        uint32_t dwMediaControl;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct LINEMEDIACONTROLTONE
    {
        uint32_t dwAppSpecific;
        uint32_t dwDuration;
        uint32_t dwFrequency1;
        uint32_t dwFrequency2;
        uint32_t dwFrequency3;
        uint32_t dwMediaControl;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct LINEMESSAGE
    {
        uint32_t hDevice;
        uint32_t dwMessageID;
        size_t dwCallbackInstance;
        size_t dwParam1;
        size_t dwParam2;
        size_t dwParam3;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct LINEMONITORTONE
    {
        uint32_t dwAppSpecific;
        uint32_t dwDuration;
        uint32_t dwFrequency1;
        uint32_t dwFrequency2;
        uint32_t dwFrequency3;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct LINEPROVIDERENTRY
    {
        uint32_t dwPermanentProviderID;
        uint32_t dwProviderFilenameSize;
        uint32_t dwProviderFilenameOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct LINEPROVIDERLIST
    {
        uint32_t dwTotalSize;
        uint32_t dwNeededSize;
        uint32_t dwUsedSize;
        uint32_t dwNumProviders;
        uint32_t dwProviderListSize;
        uint32_t dwProviderListOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct LINEPROXYREQUEST
    {
        union _Anonymous_e__Union
        {
            struct _SetAgentGroup_e__Struct
            {
                uint32_t dwAddressID;
                Windows::Win32::Tapi::LINEAGENTGROUPLIST GroupList;
            };
            struct _SetAgentState_e__Struct
            {
                uint32_t dwAddressID;
                uint32_t dwAgentState;
                uint32_t dwNextAgentState;
            };
            struct _SetAgentActivity_e__Struct
            {
                uint32_t dwAddressID;
                uint32_t dwActivityID;
            };
            struct _GetAgentCaps_e__Struct
            {
                uint32_t dwAddressID;
                Windows::Win32::Tapi::LINEAGENTCAPS AgentCaps;
            };
            struct _GetAgentStatus_e__Struct
            {
                uint32_t dwAddressID;
                Windows::Win32::Tapi::LINEAGENTSTATUS AgentStatus;
            };
            struct _AgentSpecific_e__Struct
            {
                uint32_t dwAddressID;
                uint32_t dwAgentExtensionIDIndex;
                uint32_t dwSize;
                uint8_t Params[1];
            };
            struct _GetAgentActivityList_e__Struct
            {
                uint32_t dwAddressID;
                Windows::Win32::Tapi::LINEAGENTACTIVITYLIST ActivityList;
            };
            struct _GetAgentGroupList_e__Struct
            {
                uint32_t dwAddressID;
                Windows::Win32::Tapi::LINEAGENTGROUPLIST GroupList;
            };
            struct _CreateAgent_e__Struct
            {
                uint32_t hAgent;
                uint32_t dwAgentIDSize;
                uint32_t dwAgentIDOffset;
                uint32_t dwAgentPINSize;
                uint32_t dwAgentPINOffset;
            };
            struct _SetAgentStateEx_e__Struct
            {
                uint32_t hAgent;
                uint32_t dwAgentState;
                uint32_t dwNextAgentState;
            };
            struct _SetAgentMeasurementPeriod_e__Struct
            {
                uint32_t hAgent;
                uint32_t dwMeasurementPeriod;
            };
            struct _GetAgentInfo_e__Struct
            {
                uint32_t hAgent;
                Windows::Win32::Tapi::LINEAGENTINFO AgentInfo;
            };
            struct _CreateAgentSession_e__Struct
            {
                uint32_t hAgentSession;
                uint32_t dwAgentPINSize;
                uint32_t dwAgentPINOffset;
                uint32_t hAgent;
                ::win32::guid GroupID;
                uint32_t dwWorkingAddressID;
            };
            struct _GetAgentSessionList_e__Struct
            {
                uint32_t hAgent;
                Windows::Win32::Tapi::LINEAGENTSESSIONLIST SessionList;
            };
            struct _GetAgentSessionInfo_e__Struct
            {
                uint32_t hAgentSession;
                Windows::Win32::Tapi::LINEAGENTSESSIONINFO SessionInfo;
            };
            struct _SetAgentSessionState_e__Struct
            {
                uint32_t hAgentSession;
                uint32_t dwAgentSessionState;
                uint32_t dwNextAgentSessionState;
            };
            struct _GetQueueList_e__Struct
            {
                ::win32::guid GroupID;
                Windows::Win32::Tapi::LINEQUEUELIST QueueList;
            };
            struct _SetQueueMeasurementPeriod_e__Struct
            {
                uint32_t dwQueueID;
                uint32_t dwMeasurementPeriod;
            };
            struct _GetQueueInfo_e__Struct
            {
                uint32_t dwQueueID;
                Windows::Win32::Tapi::LINEQUEUEINFO QueueInfo;
            };
            struct _GetGroupList_e__Struct
            {
                Windows::Win32::Tapi::LINEAGENTGROUPLIST GroupList;
            };
            _SetAgentGroup_e__Struct SetAgentGroup;
            _SetAgentState_e__Struct SetAgentState;
            _SetAgentActivity_e__Struct SetAgentActivity;
            _GetAgentCaps_e__Struct GetAgentCaps;
            _GetAgentStatus_e__Struct GetAgentStatus;
            _AgentSpecific_e__Struct AgentSpecific;
            _GetAgentActivityList_e__Struct GetAgentActivityList;
            _GetAgentGroupList_e__Struct GetAgentGroupList;
            _CreateAgent_e__Struct CreateAgent;
            _SetAgentStateEx_e__Struct SetAgentStateEx;
            _SetAgentMeasurementPeriod_e__Struct SetAgentMeasurementPeriod;
            _GetAgentInfo_e__Struct GetAgentInfo;
            _CreateAgentSession_e__Struct CreateAgentSession;
            _GetAgentSessionList_e__Struct GetAgentSessionList;
            _GetAgentSessionInfo_e__Struct GetAgentSessionInfo;
            _SetAgentSessionState_e__Struct SetAgentSessionState;
            _GetQueueList_e__Struct GetQueueList;
            _SetQueueMeasurementPeriod_e__Struct SetQueueMeasurementPeriod;
            _GetQueueInfo_e__Struct GetQueueInfo;
            _GetGroupList_e__Struct GetGroupList;
        };
        uint32_t dwSize;
        uint32_t dwClientMachineNameSize;
        uint32_t dwClientMachineNameOffset;
        uint32_t dwClientUserNameSize;
        uint32_t dwClientUserNameOffset;
        uint32_t dwClientAppAPIVersion;
        uint32_t dwRequestType;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct LINEREQMAKECALL
    {
        int8_t szDestAddress[80];
        int8_t szAppName[40];
        int8_t szCalledParty[40];
        int8_t szComment[80];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct linereqmakecallW_tag
    {
        uint16_t szDestAddress[80];
        uint16_t szAppName[40];
        uint16_t szCalledParty[40];
        uint16_t szComment[80];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct LINEREQMEDIACALL
    {
        Windows::Win32::WindowsAndMessaging::HWND hWnd;
        Windows::Win32::WindowsAndMessaging::WPARAM wRequestID;
        int8_t szDeviceClass[40];
        uint8_t ucDeviceID[40];
        uint32_t dwSize;
        uint32_t dwSecure;
        int8_t szDestAddress[80];
        int8_t szAppName[40];
        int8_t szCalledParty[40];
        int8_t szComment[80];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct linereqmediacallW_tag
    {
        Windows::Win32::WindowsAndMessaging::HWND hWnd;
        Windows::Win32::WindowsAndMessaging::WPARAM wRequestID;
        uint16_t szDeviceClass[40];
        uint8_t ucDeviceID[40];
        uint32_t dwSize;
        uint32_t dwSecure;
        uint16_t szDestAddress[80];
        uint16_t szAppName[40];
        uint16_t szCalledParty[40];
        uint16_t szComment[80];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct LINETERMCAPS
    {
        uint32_t dwTermDev;
        uint32_t dwTermModes;
        uint32_t dwTermSharing;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct LINETRANSLATECAPS
    {
        uint32_t dwTotalSize;
        uint32_t dwNeededSize;
        uint32_t dwUsedSize;
        uint32_t dwNumLocations;
        uint32_t dwLocationListSize;
        uint32_t dwLocationListOffset;
        uint32_t dwCurrentLocationID;
        uint32_t dwNumCards;
        uint32_t dwCardListSize;
        uint32_t dwCardListOffset;
        uint32_t dwCurrentPreferredCardID;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct LINETRANSLATEOUTPUT
    {
        uint32_t dwTotalSize;
        uint32_t dwNeededSize;
        uint32_t dwUsedSize;
        uint32_t dwDialableStringSize;
        uint32_t dwDialableStringOffset;
        uint32_t dwDisplayableStringSize;
        uint32_t dwDisplayableStringOffset;
        uint32_t dwCurrentCountry;
        uint32_t dwDestCountry;
        uint32_t dwTranslateResults;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct PHONEBUTTONINFO
    {
        uint32_t dwTotalSize;
        uint32_t dwNeededSize;
        uint32_t dwUsedSize;
        uint32_t dwButtonMode;
        uint32_t dwButtonFunction;
        uint32_t dwButtonTextSize;
        uint32_t dwButtonTextOffset;
        uint32_t dwDevSpecificSize;
        uint32_t dwDevSpecificOffset;
        uint32_t dwButtonState;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct PHONECAPS
    {
        uint32_t dwTotalSize;
        uint32_t dwNeededSize;
        uint32_t dwUsedSize;
        uint32_t dwProviderInfoSize;
        uint32_t dwProviderInfoOffset;
        uint32_t dwPhoneInfoSize;
        uint32_t dwPhoneInfoOffset;
        uint32_t dwPermanentPhoneID;
        uint32_t dwPhoneNameSize;
        uint32_t dwPhoneNameOffset;
        uint32_t dwStringFormat;
        uint32_t dwPhoneStates;
        uint32_t dwHookSwitchDevs;
        uint32_t dwHandsetHookSwitchModes;
        uint32_t dwSpeakerHookSwitchModes;
        uint32_t dwHeadsetHookSwitchModes;
        uint32_t dwVolumeFlags;
        uint32_t dwGainFlags;
        uint32_t dwDisplayNumRows;
        uint32_t dwDisplayNumColumns;
        uint32_t dwNumRingModes;
        uint32_t dwNumButtonLamps;
        uint32_t dwButtonModesSize;
        uint32_t dwButtonModesOffset;
        uint32_t dwButtonFunctionsSize;
        uint32_t dwButtonFunctionsOffset;
        uint32_t dwLampModesSize;
        uint32_t dwLampModesOffset;
        uint32_t dwNumSetData;
        uint32_t dwSetDataSize;
        uint32_t dwSetDataOffset;
        uint32_t dwNumGetData;
        uint32_t dwGetDataSize;
        uint32_t dwGetDataOffset;
        uint32_t dwDevSpecificSize;
        uint32_t dwDevSpecificOffset;
        uint32_t dwDeviceClassesSize;
        uint32_t dwDeviceClassesOffset;
        uint32_t dwPhoneFeatures;
        uint32_t dwSettableHandsetHookSwitchModes;
        uint32_t dwSettableSpeakerHookSwitchModes;
        uint32_t dwSettableHeadsetHookSwitchModes;
        uint32_t dwMonitoredHandsetHookSwitchModes;
        uint32_t dwMonitoredSpeakerHookSwitchModes;
        uint32_t dwMonitoredHeadsetHookSwitchModes;
        ::win32::guid PermanentPhoneGuid;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct PHONEEXTENSIONID
    {
        uint32_t dwExtensionID0;
        uint32_t dwExtensionID1;
        uint32_t dwExtensionID2;
        uint32_t dwExtensionID3;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct PHONEINITIALIZEEXPARAMS
    {
        union _Handles_e__Union
        {
            Windows::Win32::SystemServices::HANDLE hEvent;
            Windows::Win32::SystemServices::HANDLE hCompletionPort;
        };
        uint32_t dwTotalSize;
        uint32_t dwNeededSize;
        uint32_t dwUsedSize;
        uint32_t dwOptions;
        _Handles_e__Union Handles;
        uint32_t dwCompletionKey;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct PHONEMESSAGE
    {
        uint32_t hDevice;
        uint32_t dwMessageID;
        size_t dwCallbackInstance;
        size_t dwParam1;
        size_t dwParam2;
        size_t dwParam3;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct PHONESTATUS
    {
        uint32_t dwTotalSize;
        uint32_t dwNeededSize;
        uint32_t dwUsedSize;
        uint32_t dwStatusFlags;
        uint32_t dwNumOwners;
        uint32_t dwNumMonitors;
        uint32_t dwRingMode;
        uint32_t dwRingVolume;
        uint32_t dwHandsetHookSwitchMode;
        uint32_t dwHandsetVolume;
        uint32_t dwHandsetGain;
        uint32_t dwSpeakerHookSwitchMode;
        uint32_t dwSpeakerVolume;
        uint32_t dwSpeakerGain;
        uint32_t dwHeadsetHookSwitchMode;
        uint32_t dwHeadsetVolume;
        uint32_t dwHeadsetGain;
        uint32_t dwDisplaySize;
        uint32_t dwDisplayOffset;
        uint32_t dwLampModesSize;
        uint32_t dwLampModesOffset;
        uint32_t dwOwnerNameSize;
        uint32_t dwOwnerNameOffset;
        uint32_t dwDevSpecificSize;
        uint32_t dwDevSpecificOffset;
        uint32_t dwPhoneFeatures;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct VARSTRING
    {
        uint32_t dwTotalSize;
        uint32_t dwNeededSize;
        uint32_t dwUsedSize;
        uint32_t dwStringFormat;
        uint32_t dwStringSize;
        uint32_t dwStringOffset;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct TAPI_CUSTOMTONE
    {
        uint32_t dwFrequency;
        uint32_t dwCadenceOn;
        uint32_t dwCadenceOff;
        uint32_t dwVolume;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct TAPI_DETECTTONE
    {
        uint32_t dwAppSpecific;
        uint32_t dwDuration;
        uint32_t dwFrequency1;
        uint32_t dwFrequency2;
        uint32_t dwFrequency3;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::Tapi
{
    struct MSP_EVENT_INFO
    {
        union _Anonymous_e__Union
        {
            struct _MSP_ADDRESS_EVENT_INFO_e__Struct
            {
                Windows::Win32::Tapi::MSP_ADDRESS_EVENT Type;
                Windows::Win32::Tapi::ITTerminal* pTerminal;
            };
            struct _MSP_CALL_EVENT_INFO_e__Struct
            {
                Windows::Win32::Tapi::MSP_CALL_EVENT Type;
                Windows::Win32::Tapi::MSP_CALL_EVENT_CAUSE Cause;
                Windows::Win32::Tapi::ITStream* pStream;
                Windows::Win32::Tapi::ITTerminal* pTerminal;
                int32_t hrError;
            };
            struct _MSP_TSP_DATA_e__Struct
            {
                uint32_t dwBufferSize;
                uint8_t pBuffer[1];
            };
            struct _MSP_PRIVATE_EVENT_INFO_e__Struct
            {
                Windows::Win32::Automation::IDispatch* pEvent;
                int32_t lEventCode;
            };
            struct _MSP_FILE_TERMINAL_EVENT_INFO_e__Struct
            {
                Windows::Win32::Tapi::ITTerminal* pParentFileTerminal;
                Windows::Win32::Tapi::ITFileTrack* pFileTrack;
                Windows::Win32::Tapi::TERMINAL_MEDIA_STATE TerminalMediaState;
                Windows::Win32::Tapi::FT_STATE_EVENT_CAUSE ftecEventCause;
                int32_t hrErrorCode;
            };
            struct _MSP_ASR_TERMINAL_EVENT_INFO_e__Struct
            {
                Windows::Win32::Tapi::ITTerminal* pASRTerminal;
                int32_t hrErrorCode;
            };
            struct _MSP_TTS_TERMINAL_EVENT_INFO_e__Struct
            {
                Windows::Win32::Tapi::ITTerminal* pTTSTerminal;
                int32_t hrErrorCode;
            };
            struct _MSP_TONE_TERMINAL_EVENT_INFO_e__Struct
            {
                Windows::Win32::Tapi::ITTerminal* pToneTerminal;
                int32_t hrErrorCode;
            };
            _MSP_ADDRESS_EVENT_INFO_e__Struct MSP_ADDRESS_EVENT_INFO;
            _MSP_CALL_EVENT_INFO_e__Struct MSP_CALL_EVENT_INFO;
            _MSP_TSP_DATA_e__Struct MSP_TSP_DATA;
            _MSP_PRIVATE_EVENT_INFO_e__Struct MSP_PRIVATE_EVENT_INFO;
            _MSP_FILE_TERMINAL_EVENT_INFO_e__Struct MSP_FILE_TERMINAL_EVENT_INFO;
            _MSP_ASR_TERMINAL_EVENT_INFO_e__Struct MSP_ASR_TERMINAL_EVENT_INFO;
            _MSP_TTS_TERMINAL_EVENT_INFO_e__Struct MSP_TTS_TERMINAL_EVENT_INFO;
            _MSP_TONE_TERMINAL_EVENT_INFO_e__Struct MSP_TONE_TERMINAL_EVENT_INFO;
        };
        uint32_t dwSize;
        Windows::Win32::Tapi::MSP_EVENT Event;
        int32_t* hCall;
        _Anonymous_e__Union Anonymous;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::XAudio2
{
    struct XAPO_REGISTRATION_PROPERTIES
    {
        ::win32::guid clsid;
        uint16_t FriendlyName[256];
        uint16_t CopyrightInfo[256];
        uint32_t MajorVersion;
        uint32_t MinorVersion;
        uint32_t Flags;
        uint32_t MinInputBufferCount;
        uint32_t MaxInputBufferCount;
        uint32_t MinOutputBufferCount;
        uint32_t MaxOutputBufferCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::XAudio2
{
    struct XAPO_LOCKFORPROCESS_PARAMETERS
    {
        Windows::Win32::Multimedia::WAVEFORMATEX* pFormat;
        uint32_t MaxFrameCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::XAudio2
{
    struct XAPO_PROCESS_BUFFER_PARAMETERS
    {
        void* pBuffer;
        Windows::Win32::XAudio2::XAPO_BUFFER_FLAGS BufferFlags;
        uint32_t ValidFrameCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::XAudio2
{
    struct FXEQ_PARAMETERS
    {
        float FrequencyCenter0;
        float Gain0;
        float Bandwidth0;
        float FrequencyCenter1;
        float Gain1;
        float Bandwidth1;
        float FrequencyCenter2;
        float Gain2;
        float Bandwidth2;
        float FrequencyCenter3;
        float Gain3;
        float Bandwidth3;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::XAudio2
{
    struct FXMASTERINGLIMITER_PARAMETERS
    {
        uint32_t Release;
        uint32_t Loudness;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::XAudio2
{
    struct FXREVERB_PARAMETERS
    {
        float Diffusion;
        float RoomSize;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::XAudio2
{
    struct FXECHO_INITDATA
    {
        float MaxDelay;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::XAudio2
{
    struct FXECHO_PARAMETERS
    {
        float WetDryMix;
        float Feedback;
        float Delay;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::XAudio2
{
    struct XAUDIO2_VOICE_DETAILS
    {
        uint32_t CreationFlags;
        uint32_t ActiveFlags;
        uint32_t InputChannels;
        uint32_t InputSampleRate;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::XAudio2
{
    struct XAUDIO2_SEND_DESCRIPTOR
    {
        uint32_t Flags;
        Windows::Win32::XAudio2::IXAudio2Voice* pOutputVoice;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::XAudio2
{
    struct XAUDIO2_VOICE_SENDS
    {
        uint32_t SendCount;
        Windows::Win32::XAudio2::XAUDIO2_SEND_DESCRIPTOR* pSends;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::XAudio2
{
    struct XAUDIO2_EFFECT_DESCRIPTOR
    {
        Windows::Win32::Com::IUnknown* pEffect;
        Windows::Win32::SystemServices::BOOL InitialState;
        uint32_t OutputChannels;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::XAudio2
{
    struct XAUDIO2_EFFECT_CHAIN
    {
        uint32_t EffectCount;
        Windows::Win32::XAudio2::XAUDIO2_EFFECT_DESCRIPTOR* pEffectDescriptors;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::XAudio2
{
    struct XAUDIO2_FILTER_PARAMETERS
    {
        Windows::Win32::XAudio2::XAUDIO2_FILTER_TYPE Type;
        float Frequency;
        float OneOverQ;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::XAudio2
{
    struct XAUDIO2_BUFFER
    {
        uint32_t Flags;
        uint32_t AudioBytes;
        uint8_t* pAudioData;
        uint32_t PlayBegin;
        uint32_t PlayLength;
        uint32_t LoopBegin;
        uint32_t LoopLength;
        uint32_t LoopCount;
        void* pContext;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::XAudio2
{
    struct XAUDIO2_BUFFER_WMA
    {
        uint32_t* pDecodedPacketCumulativeBytes;
        uint32_t PacketCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::XAudio2
{
    struct XAUDIO2_VOICE_STATE
    {
        void* pCurrentBufferContext;
        uint32_t BuffersQueued;
        uint64_t SamplesPlayed;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::XAudio2
{
    struct XAUDIO2_PERFORMANCE_DATA
    {
        uint64_t AudioCyclesSinceLastQuery;
        uint64_t TotalCyclesSinceLastQuery;
        uint32_t MinimumCyclesPerQuantum;
        uint32_t MaximumCyclesPerQuantum;
        uint32_t MemoryUsageInBytes;
        uint32_t CurrentLatencyInSamples;
        uint32_t GlitchesSinceEngineStarted;
        uint32_t ActiveSourceVoiceCount;
        uint32_t TotalSourceVoiceCount;
        uint32_t ActiveSubmixVoiceCount;
        uint32_t ActiveResamplerCount;
        uint32_t ActiveMatrixMixCount;
        uint32_t ActiveXmaSourceVoices;
        uint32_t ActiveXmaStreams;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::XAudio2
{
    struct XAUDIO2_DEBUG_CONFIGURATION
    {
        uint32_t TraceMask;
        uint32_t BreakMask;
        Windows::Win32::SystemServices::BOOL LogThreadID;
        Windows::Win32::SystemServices::BOOL LogFileline;
        Windows::Win32::SystemServices::BOOL LogFunctionName;
        Windows::Win32::SystemServices::BOOL LogTiming;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::XAudio2
{
    struct XAUDIO2FX_VOLUMEMETER_LEVELS
    {
        float* pPeakLevels;
        float* pRMSLevels;
        uint32_t ChannelCount;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::XAudio2
{
    struct XAUDIO2FX_REVERB_PARAMETERS
    {
        float WetDryMix;
        uint32_t ReflectionsDelay;
        uint8_t ReverbDelay;
        uint8_t RearDelay;
        uint8_t SideDelay;
        uint8_t PositionLeft;
        uint8_t PositionRight;
        uint8_t PositionMatrixLeft;
        uint8_t PositionMatrixRight;
        uint8_t EarlyDiffusion;
        uint8_t LateDiffusion;
        uint8_t LowEQGain;
        uint8_t LowEQCutoff;
        uint8_t HighEQGain;
        uint8_t HighEQCutoff;
        float RoomFilterFreq;
        float RoomFilterMain;
        float RoomFilterHF;
        float ReflectionsGain;
        float ReverbGain;
        float DecayTime;
        float Density;
        float RoomSize;
        Windows::Win32::SystemServices::BOOL DisableLateField;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::XAudio2
{
    struct XAUDIO2FX_REVERB_I3DL2_PARAMETERS
    {
        float WetDryMix;
        int32_t Room;
        int32_t RoomHF;
        float RoomRolloffFactor;
        float DecayTime;
        float DecayHFRatio;
        int32_t Reflections;
        float ReflectionsDelay;
        int32_t Reverb;
        float ReverbDelay;
        float Diffusion;
        float Density;
        float HFReference;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::XAudio2
{
    struct HrtfPosition
    {
        float x;
        float y;
        float z;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::XAudio2
{
    struct HrtfOrientation
    {
        float element[9];
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::XAudio2
{
    struct HrtfDirectivity
    {
        Windows::Win32::XAudio2::HrtfDirectivityType type;
        float scaling;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::XAudio2
{
    struct HrtfDirectivityCardioid
    {
        Windows::Win32::XAudio2::HrtfDirectivity directivity;
        float order;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::XAudio2
{
    struct HrtfDirectivityCone
    {
        Windows::Win32::XAudio2::HrtfDirectivity directivity;
        float innerAngle;
        float outerAngle;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::XAudio2
{
    struct HrtfDistanceDecay
    {
        Windows::Win32::XAudio2::HrtfDistanceDecayType type;
        float maxGain;
        float minGain;
        float unityGainDistance;
        float cutoffDistance;
    };
}
WIN32_EXPORT namespace win32::Windows::Win32::XAudio2
{
    struct HrtfApoInit
    {
        Windows::Win32::XAudio2::HrtfDistanceDecay* distanceDecay;
        Windows::Win32::XAudio2::HrtfDirectivity* directivity;
    };
}
#endif
